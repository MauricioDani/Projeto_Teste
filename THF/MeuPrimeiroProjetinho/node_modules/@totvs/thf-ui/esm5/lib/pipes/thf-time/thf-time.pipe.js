/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isTypeof } from '../../utils/util';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Pipe responsável por apresentar um horário baseado no formato de entrada definido na API da Totvs.
 */
var ThfTimePipe = /** @class */ (function () {
    function ThfTimePipe() {
    }
    /**
     * @param {?} time
     * @param {?=} format
     * @return {?}
     */
    ThfTimePipe.prototype.transform = /**
     * @param {?} time
     * @param {?=} format
     * @return {?}
     */
    function (time, format) {
        /** @type {?} */
        var hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\.]?([0-9]{1,6})?$/g;
        if (isTypeof(time, 'string') && hourRegex.test(time)) {
            /** @type {?} */
            var amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;
            /** @type {?} */
            var miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);
            /** @type {?} */
            var formatMiliseconds = this.getFormatMiliseconds(amountOfF);
            return this.formatValue(time, format, formatMiliseconds, miliseconds);
        }
        return null;
    };
    /**
     * @private
     * @param {?} miliseconds
     * @param {?} amountOfF
     * @return {?}
     */
    ThfTimePipe.prototype.addDotMiliseconds = /**
     * @private
     * @param {?} miliseconds
     * @param {?} amountOfF
     * @return {?}
     */
    function (miliseconds, amountOfF) {
        if (miliseconds && amountOfF) {
            miliseconds = '.' + miliseconds;
        }
        return miliseconds;
    };
    /**
     * @private
     * @param {?} time
     * @param {?} format
     * @param {?} formatMiliseconds
     * @param {?} miliseconds
     * @return {?}
     */
    ThfTimePipe.prototype.formatValue = /**
     * @private
     * @param {?} time
     * @param {?} format
     * @param {?} formatMiliseconds
     * @param {?} miliseconds
     * @return {?}
     */
    function (time, format, formatMiliseconds, miliseconds) {
        if (time && format) {
            /** @type {?} */
            var hour = time.substring(0, 2);
            /** @type {?} */
            var minutes = time.substring(3, 5);
            /** @type {?} */
            var seconds = time.substring(6, 8);
            format = format.replace('HH', hour);
            format = format.replace('mm', minutes);
            format = format.replace('ss', seconds);
            format = format.replace("." + formatMiliseconds, miliseconds);
            return format;
        }
        else {
            return time;
        }
    };
    /**
     * @private
     * @param {?} amountOfF
     * @return {?}
     */
    ThfTimePipe.prototype.getFormatMiliseconds = /**
     * @private
     * @param {?} amountOfF
     * @return {?}
     */
    function (amountOfF) {
        /** @type {?} */
        var formatMiliseconds = '';
        for (var i = 0; i < amountOfF; i++) {
            formatMiliseconds += 'f';
        }
        return formatMiliseconds;
    };
    ThfTimePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'thf_time'
                },] }
    ];
    return ThfTimePipe;
}());
export { ThfTimePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXRpbWUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvdGhmLXRpbWUvdGhmLXRpbWUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFcEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7Ozs7OztBQVM1QztJQUFBO0lBdURBLENBQUM7Ozs7OztJQWxEQywrQkFBUzs7Ozs7SUFBVCxVQUFVLElBQVksRUFBRSxNQUFlOztZQUUvQixTQUFTLEdBQUcsb0VBQW9FO1FBRXRGLElBQUksUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFOztnQkFFOUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Z0JBRTFFLFdBQVcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxFQUFFLFNBQVMsQ0FBQzs7Z0JBQ2pGLGlCQUFpQixHQUFXLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQUM7WUFFdEUsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDdkU7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7Ozs7SUFFTyx1Q0FBaUI7Ozs7OztJQUF6QixVQUEwQixXQUFtQixFQUFFLFNBQWlCO1FBQzlELElBQUksV0FBVyxJQUFJLFNBQVMsRUFBRTtZQUM1QixXQUFXLEdBQUcsR0FBRyxHQUFHLFdBQVcsQ0FBQztTQUNqQztRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7Ozs7Ozs7OztJQUVPLGlDQUFXOzs7Ozs7OztJQUFuQixVQUFvQixJQUFZLEVBQUUsTUFBYyxFQUFFLGlCQUF5QixFQUFFLFdBQW1CO1FBQzlGLElBQUksSUFBSSxJQUFJLE1BQU0sRUFBRTs7Z0JBQ1osSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQzs7Z0JBQzNCLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7O2dCQUM5QixPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRXBDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNwQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDdkMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQUksaUJBQW1CLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFFOUQsT0FBTyxNQUFNLENBQUM7U0FDZjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUM7U0FDYjtJQUNILENBQUM7Ozs7OztJQUVPLDBDQUFvQjs7Ozs7SUFBNUIsVUFBNkIsU0FBaUI7O1lBQ3hDLGlCQUFpQixHQUFXLEVBQUU7UUFFbEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsQyxpQkFBaUIsSUFBSSxHQUFHLENBQUM7U0FDMUI7UUFFRCxPQUFPLGlCQUFpQixDQUFDO0lBQzNCLENBQUM7O2dCQXJERixJQUFJLFNBQUM7b0JBQ0osSUFBSSxFQUFFLFVBQVU7aUJBQ2pCOztJQXFERCxrQkFBQztDQUFBLEFBdkRELElBdURDO1NBcERZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGlzVHlwZW9mIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUGlwZSByZXNwb25zw6F2ZWwgcG9yIGFwcmVzZW50YXIgdW0gaG9yw6FyaW8gYmFzZWFkbyBubyBmb3JtYXRvIGRlIGVudHJhZGEgZGVmaW5pZG8gbmEgQVBJIGRhIFRvdHZzLlxuICovXG5AUGlwZSh7XG4gIG5hbWU6ICd0aGZfdGltZSdcbn0pXG5leHBvcnQgY2xhc3MgVGhmVGltZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICB0cmFuc2Zvcm0odGltZTogc3RyaW5nLCBmb3JtYXQ/OiBzdHJpbmcpOiBzdHJpbmcge1xuXG4gICAgY29uc3QgaG91clJlZ2V4ID0gL14oKFswLTFdWzAtOV0pfCgyWzAtM10pKTpbMC01XVswLTldOlswLTVdWzAtOV1bXFwuXT8oWzAtOV17MSw2fSk/JC9nO1xuXG4gICAgaWYgKGlzVHlwZW9mKHRpbWUsICdzdHJpbmcnKSAmJiBob3VyUmVnZXgudGVzdCh0aW1lKSkge1xuXG4gICAgICBjb25zdCBhbW91bnRPZkYgPSBmb3JtYXQgPyBmb3JtYXQubGFzdEluZGV4T2YoJ2YnKSAtIGZvcm1hdC5pbmRleE9mKCdmJykgKyAxIDogMDtcblxuICAgICAgY29uc3QgbWlsaXNlY29uZHMgPSB0aGlzLmFkZERvdE1pbGlzZWNvbmRzKHRpbWUuc3Vic3RyaW5nKDksIDkgKyBhbW91bnRPZkYpLCBhbW91bnRPZkYpO1xuICAgICAgY29uc3QgZm9ybWF0TWlsaXNlY29uZHM6IHN0cmluZyA9IHRoaXMuZ2V0Rm9ybWF0TWlsaXNlY29uZHMoYW1vdW50T2ZGKTtcblxuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0VmFsdWUodGltZSwgZm9ybWF0LCBmb3JtYXRNaWxpc2Vjb25kcywgbWlsaXNlY29uZHMpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgYWRkRG90TWlsaXNlY29uZHMobWlsaXNlY29uZHM6IHN0cmluZywgYW1vdW50T2ZGOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGlmIChtaWxpc2Vjb25kcyAmJiBhbW91bnRPZkYpIHtcbiAgICAgIG1pbGlzZWNvbmRzID0gJy4nICsgbWlsaXNlY29uZHM7XG4gICAgfVxuICAgIHJldHVybiBtaWxpc2Vjb25kcztcbiAgfVxuXG4gIHByaXZhdGUgZm9ybWF0VmFsdWUodGltZTogc3RyaW5nLCBmb3JtYXQ6IHN0cmluZywgZm9ybWF0TWlsaXNlY29uZHM6IHN0cmluZywgbWlsaXNlY29uZHM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHRpbWUgJiYgZm9ybWF0KSB7XG4gICAgICBjb25zdCBob3VyID0gdGltZS5zdWJzdHJpbmcoMCwgMik7XG4gICAgICBjb25zdCBtaW51dGVzID0gdGltZS5zdWJzdHJpbmcoMywgNSk7XG4gICAgICBjb25zdCBzZWNvbmRzID0gdGltZS5zdWJzdHJpbmcoNiwgOCk7XG5cbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKCdISCcsIGhvdXIpO1xuICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoJ21tJywgbWludXRlcyk7XG4gICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnc3MnLCBzZWNvbmRzKTtcbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGAuJHtmb3JtYXRNaWxpc2Vjb25kc31gLCBtaWxpc2Vjb25kcyk7XG5cbiAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aW1lO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0Rm9ybWF0TWlsaXNlY29uZHMoYW1vdW50T2ZGOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGxldCBmb3JtYXRNaWxpc2Vjb25kczogc3RyaW5nID0gJyc7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudE9mRjsgaSsrKSB7XG4gICAgICBmb3JtYXRNaWxpc2Vjb25kcyArPSAnZic7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcm1hdE1pbGlzZWNvbmRzO1xuICB9XG5cbn1cbiJdfQ==