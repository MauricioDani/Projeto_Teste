/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';
import { ThfControlPositionService } from './../../services/thf-control-position/thf-control-position.service';
import { ThfTooltipBaseDirective } from './thf-tooltip-base.directive';
/**
 * \@docsExtends ThfTooltipBaseDirective
 *
 * \@example
 *
 * <example name="thf-tooltip-basic" title="Totvs Tooltip Basic" >
 *  <file name="sample-thf-tooltip-basic/sample-thf-tooltip-basic.component.html"> </file>
 *  <file name="sample-thf-tooltip-basic/sample-thf-tooltip-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tooltip-labs" title="Totvs Tooltip Labs" >
 *  <file name="sample-thf-tooltip-labs/sample-thf-tooltip-labs.component.html"> </file>
 *  <file name="sample-thf-tooltip-labs/sample-thf-tooltip-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tooltip-new-user" title="Totvs Tooltip - New User" >
 *  <file name="sample-thf-tooltip-new-user/sample-thf-tooltip-new-user.component.html"> </file>
 *  <file name="sample-thf-tooltip-new-user/sample-thf-tooltip-new-user.component.ts"> </file>
 * </example>
 *
 */
var ThfTooltipDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ThfTooltipDirective, _super);
    function ThfTooltipDirective(elementRef, renderer, thfControlPosition) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.thfControlPosition = thfControlPosition;
        _this.tooltipOffset = 8;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfTooltipDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initScrollEventListenerFunction();
    };
    /**
     * @return {?}
     */
    ThfTooltipDirective.prototype.onMouseEnter = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.tooltip) {
                _this.tooltipContent ? _this.showTooltip() : _this.createTooltip();
                _this.removeArrow(_this.arrowDirection);
                _this.thfControlPosition.adjustPosition(_this.tooltipPosition);
                _this.arrowDirection = _this.thfControlPosition.getArrowDirection();
                _this.addArrow(_this.arrowDirection);
                _this.lastTooltipText = _this.tooltip;
            }
        }));
    };
    /**
     * @return {?}
     */
    ThfTooltipDirective.prototype.onMouseLeave = /**
     * @return {?}
     */
    function () {
        this.hideTooltip();
    };
    /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    ThfTooltipDirective.prototype.addArrow = /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    function (arrowDirection) {
        this.renderer.addClass(this.divArrow, "thf-arrow-" + arrowDirection);
    };
    /**
     * @private
     * @return {?}
     */
    ThfTooltipDirective.prototype.addScrollEventListener = /**
     * @private
     * @return {?}
     */
    function () {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    };
    // Monta a estrutura do tooltip
    // Monta a estrutura do tooltip
    /**
     * @private
     * @return {?}
     */
    ThfTooltipDirective.prototype.createTooltip = 
    // Monta a estrutura do tooltip
    /**
     * @private
     * @return {?}
     */
    function () {
        this.tooltipContent = this.renderer.createElement('div');
        this.renderer.addClass(this.tooltipContent, 'thf-tooltip');
        this.divArrow = this.renderer.createElement('div');
        this.renderer.addClass(this.divArrow, 'thf-tooltip-arrow');
        this.divContent = this.renderer.createElement('div');
        this.renderer.addClass(this.divContent, 'thf-tooltip-content');
        this.textContent = this.renderer.createText(this.tooltip);
        this.renderer.appendChild(this.divContent, this.textContent);
        this.renderer.appendChild(this.tooltipContent, this.divArrow);
        this.renderer.appendChild(this.tooltipContent, this.divContent);
        this.renderer.appendChild(this.elementRef.nativeElement, this.tooltipContent);
        this.thfControlPosition.setElements(this.tooltipContent, this.tooltipOffset, this.elementRef);
        this.addScrollEventListener();
    };
    /**
     * @private
     * @return {?}
     */
    ThfTooltipDirective.prototype.initScrollEventListenerFunction = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.eventListenerFunction = (/**
         * @return {?}
         */
        function () {
            if (!_this.isHidden) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.thfControlPosition.adjustPosition(_this.tooltipPosition);
                }));
            }
        });
    };
    /**
     * @private
     * @return {?}
     */
    ThfTooltipDirective.prototype.hideTooltip = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.tooltipContent) {
            this.renderer.addClass(this.tooltipContent, 'thf-invisible');
            this.isHidden = true;
            this.removeScrollEventListener();
        }
    };
    /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    ThfTooltipDirective.prototype.removeArrow = /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    function (arrowDirection) {
        if (this.elementRef.nativeElement.querySelector(".thf-arrow-" + arrowDirection)) {
            this.renderer.removeClass(this.divArrow, "thf-arrow-" + arrowDirection);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfTooltipDirective.prototype.removeScrollEventListener = /**
     * @private
     * @return {?}
     */
    function () {
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfTooltipDirective.prototype.showTooltip = /**
     * @private
     * @return {?}
     */
    function () {
        this.renderer.removeClass(this.tooltipContent, 'thf-invisible');
        this.updateTextContent();
        this.isHidden = false;
        this.addScrollEventListener();
    };
    /**
     * @private
     * @return {?}
     */
    ThfTooltipDirective.prototype.updateTextContent = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.lastTooltipText !== this.tooltip) {
            this.renderer.removeChild(this.divContent, this.textContent);
            this.textContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.divContent, this.textContent);
        }
    };
    ThfTooltipDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[t-tooltip]',
                    providers: [ThfControlPositionService]
                },] }
    ];
    /** @nocollapse */
    ThfTooltipDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ThfControlPositionService }
    ]; };
    ThfTooltipDirective.propDecorators = {
        onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }]
    };
    return ThfTooltipDirective;
}(ThfTooltipBaseDirective));
export { ThfTooltipDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.arrowDirection;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.divArrow;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.divContent;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.isHidden;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.lastTooltipText;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.textContent;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.tooltipContent;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.tooltipOffset;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.eventListenerFunction;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.thfControlPosition;
}
//# sourceMappingURL=data:application/json;base64,