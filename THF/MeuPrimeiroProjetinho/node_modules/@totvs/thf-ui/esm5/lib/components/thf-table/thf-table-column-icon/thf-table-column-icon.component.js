/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por exibir ícones nas colunas.
 */
var ThfTableColumnIconComponent = /** @class */ (function () {
    function ThfTableColumnIconComponent() {
    }
    Object.defineProperty(ThfTableColumnIconComponent.prototype, "icons", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icons;
        },
        /** Lista de um ou mais ícones que serão exibidos em sua respectiva coluna. */
        set: /**
         * Lista de um ou mais ícones que serão exibidos em sua respectiva coluna.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._icons = this.convertToColumnIcon(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} iconColumn
     * @return {?}
     */
    ThfTableColumnIconComponent.prototype.checkDisabled = /**
     * @param {?} iconColumn
     * @return {?}
     */
    function (iconColumn) {
        return iconColumn.disabled ? iconColumn.disabled(this.row) : false;
    };
    /**
     * @param {?} columnIcon
     * @return {?}
     */
    ThfTableColumnIconComponent.prototype.getIconColorClass = /**
     * @param {?} columnIcon
     * @return {?}
     */
    function (columnIcon) {
        /** @type {?} */
        var color = this.getIconColor(columnIcon) || this.getIconColor(this.column);
        return color ? "thf-text-" + color : '';
    };
    /**
     * @param {?} iconColumn
     * @return {?}
     */
    ThfTableColumnIconComponent.prototype.onIconClick = /**
     * @param {?} iconColumn
     * @return {?}
     */
    function (iconColumn) {
        /** @type {?} */
        var isAbleAction = !this.checkDisabled(iconColumn);
        if (iconColumn.action && isAbleAction) {
            iconColumn.action(this.row, iconColumn);
        }
        else if (this.column.action && isAbleAction) {
            this.column.action(this.row, iconColumn || this.column);
        }
    };
    /**
     * @param {?} text
     * @param {?} iconColumn
     * @return {?}
     */
    ThfTableColumnIconComponent.prototype.tooltipMouseEnter = /**
     * @param {?} text
     * @param {?} iconColumn
     * @return {?}
     */
    function (text, iconColumn) {
        if (this.checkDisabled(iconColumn)) {
            this.tooltipText = undefined;
        }
        else {
            this.tooltipText = text;
        }
    };
    /**
     * @return {?}
     */
    ThfTableColumnIconComponent.prototype.tooltipMouseLeave = /**
     * @return {?}
     */
    function () {
        this.tooltipText = undefined;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfTableColumnIconComponent.prototype.convertToColumnIcon = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value instanceof Array) {
            return value.map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                return typeof val === 'string' ? { value: val } : val;
            }));
        }
        if (typeof value === 'string') {
            return [{ value: value }];
        }
        return [];
    };
    /**
     * @private
     * @param {?} column
     * @return {?}
     */
    ThfTableColumnIconComponent.prototype.getIconColor = /**
     * @private
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return typeof column.color === 'function' ? column.color(this.row, column) : column.color;
    };
    ThfTableColumnIconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-table-column-icon',
                    template: "<ng-container *ngFor=\"let iconColumn of icons\">\n  <span class=\"thf-icon\"\n    [class.thf-clickable]=\"!checkDisabled(iconColumn) && iconColumn.action || column.action \"\n    [ngClass]=\"[checkDisabled(iconColumn) ? 'thf-table-icon-disabled' : getIconColorClass(iconColumn), iconColumn.icon || iconColumn.value]\"\n    [t-tooltip]=\"tooltipText\"\n    (click)=\"onIconClick(iconColumn)\"\n    (mouseenter)=\"tooltipMouseEnter(iconColumn.tooltip, iconColumn)\"\n    (mouseleave)=\"tooltipMouseLeave()\">\n  </span>\n</ng-container>\n"
                }] }
    ];
    ThfTableColumnIconComponent.propDecorators = {
        column: [{ type: Input, args: ['t-column',] }],
        icons: [{ type: Input, args: ['t-icons',] }],
        row: [{ type: Input, args: ['t-row',] }]
    };
    return ThfTableColumnIconComponent;
}());
export { ThfTableColumnIconComponent };
if (false) {
    /** @type {?} */
    ThfTableColumnIconComponent.prototype.tooltipText;
    /**
     * @type {?}
     * @private
     */
    ThfTableColumnIconComponent.prototype._icons;
    /** @type {?} */
    ThfTableColumnIconComponent.prototype.column;
    /** @type {?} */
    ThfTableColumnIconComponent.prototype.row;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXRhYmxlLWNvbHVtbi1pY29uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtdGFibGUvdGhmLXRhYmxlLWNvbHVtbi1pY29uL3RoZi10YWJsZS1jb2x1bW4taWNvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7OztBQVlqRDtJQUFBO0lBMkVBLENBQUM7SUE3REMsc0JBQXNCLDhDQUFLOzs7O1FBSTNCO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7UUFQRCw4RUFBOEU7Ozs7OztRQUM5RSxVQUE0QixLQUF5RDtZQUNuRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoRCxDQUFDOzs7T0FBQTs7Ozs7SUFRRCxtREFBYTs7OztJQUFiLFVBQWMsVUFBOEI7UUFDMUMsT0FBTyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3JFLENBQUM7Ozs7O0lBRUQsdURBQWlCOzs7O0lBQWpCLFVBQWtCLFVBQThCOztZQUN4QyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFFN0UsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLGNBQVksS0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDMUMsQ0FBQzs7Ozs7SUFFRCxpREFBVzs7OztJQUFYLFVBQVksVUFBOEI7O1lBQ2xDLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDO1FBRXBELElBQUksVUFBVSxDQUFDLE1BQU0sSUFBSSxZQUFZLEVBQUU7WUFDckMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQ3pDO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxZQUFZLEVBQUU7WUFDN0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxVQUFVLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3pEO0lBQ0gsQ0FBQzs7Ozs7O0lBRUQsdURBQWlCOzs7OztJQUFqQixVQUFrQixJQUFZLEVBQUUsVUFBOEI7UUFDNUQsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDO1NBQzlCO2FBQU07WUFDTCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztTQUN6QjtJQUNILENBQUM7Ozs7SUFFRCx1REFBaUI7OztJQUFqQjtRQUNFLElBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDO0lBQy9CLENBQUM7Ozs7OztJQUVPLHlEQUFtQjs7Ozs7SUFBM0IsVUFBNEIsS0FBVTtRQUVwQyxJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUU7WUFDMUIsT0FBTyxLQUFLLENBQUMsR0FBRzs7OztZQUFDLFVBQUEsR0FBRztnQkFDbEIsT0FBTyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDeEQsQ0FBQyxFQUFDLENBQUM7U0FDSjtRQUVELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLE9BQU8sQ0FBQyxFQUFFLEtBQUssT0FBQSxFQUFFLENBQUMsQ0FBQztTQUNwQjtRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQzs7Ozs7O0lBRU8sa0RBQVk7Ozs7O0lBQXBCLFVBQXFCLE1BQTJDO1FBQzlELE9BQU8sT0FBTyxNQUFNLENBQUMsS0FBSyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQzVGLENBQUM7O2dCQXpFRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMscWlCQUFxRDtpQkFDdEQ7Ozt5QkFRRSxLQUFLLFNBQUMsVUFBVTt3QkFHaEIsS0FBSyxTQUFDLFNBQVM7c0JBUWYsS0FBSyxTQUFDLE9BQU87O0lBcURoQixrQ0FBQztDQUFBLEFBM0VELElBMkVDO1NBdEVZLDJCQUEyQjs7O0lBRXRDLGtEQUFvQjs7Ozs7SUFFcEIsNkNBQTBDOztJQUUxQyw2Q0FBMEM7O0lBVzFDLDBDQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgVGhmVGFibGVDb2x1bW4gfSBmcm9tICcuLi9pbnRlcmZhY2VzL3RoZi10YWJsZS1jb2x1bW4uaW50ZXJmYWNlJztcbmltcG9ydCB7IFRoZlRhYmxlQ29sdW1uSWNvbiB9IGZyb20gJy4vdGhmLXRhYmxlLWNvbHVtbi1pY29uLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSByZXNwb25zw6F2ZWwgcG9yIGV4aWJpciDDrWNvbmVzIG5hcyBjb2x1bmFzLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aGYtdGFibGUtY29sdW1uLWljb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vdGhmLXRhYmxlLWNvbHVtbi1pY29uLmNvbXBvbmVudC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIFRoZlRhYmxlQ29sdW1uSWNvbkNvbXBvbmVudCB7XG5cbiAgdG9vbHRpcFRleHQ6IHN0cmluZztcblxuICBwcml2YXRlIF9pY29uczogQXJyYXk8VGhmVGFibGVDb2x1bW5JY29uPjtcblxuICBASW5wdXQoJ3QtY29sdW1uJykgY29sdW1uOiBUaGZUYWJsZUNvbHVtbjtcblxuICAvKiogTGlzdGEgZGUgdW0gb3UgbWFpcyDDrWNvbmVzIHF1ZSBzZXLDo28gZXhpYmlkb3MgZW0gc3VhIHJlc3BlY3RpdmEgY29sdW5hLiAqL1xuICBASW5wdXQoJ3QtaWNvbnMnKSBzZXQgaWNvbnModmFsdWU6IEFycmF5PFRoZlRhYmxlQ29sdW1uSWNvbj4gfCBBcnJheTxzdHJpbmc+IHwgc3RyaW5nKSB7XG4gICAgdGhpcy5faWNvbnMgPSB0aGlzLmNvbnZlcnRUb0NvbHVtbkljb24odmFsdWUpO1xuICB9XG5cbiAgZ2V0IGljb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9pY29ucztcbiAgfVxuXG4gIEBJbnB1dCgndC1yb3cnKSByb3c7XG5cbiAgY2hlY2tEaXNhYmxlZChpY29uQ29sdW1uOiBUaGZUYWJsZUNvbHVtbkljb24pIHtcbiAgICByZXR1cm4gaWNvbkNvbHVtbi5kaXNhYmxlZCA/IGljb25Db2x1bW4uZGlzYWJsZWQodGhpcy5yb3cpIDogZmFsc2U7XG4gIH1cblxuICBnZXRJY29uQ29sb3JDbGFzcyhjb2x1bW5JY29uOiBUaGZUYWJsZUNvbHVtbkljb24pIHtcbiAgICBjb25zdCBjb2xvciA9IHRoaXMuZ2V0SWNvbkNvbG9yKGNvbHVtbkljb24pIHx8IHRoaXMuZ2V0SWNvbkNvbG9yKHRoaXMuY29sdW1uKTtcblxuICAgIHJldHVybiBjb2xvciA/IGB0aGYtdGV4dC0ke2NvbG9yfWAgOiAnJztcbiAgfVxuXG4gIG9uSWNvbkNsaWNrKGljb25Db2x1bW46IFRoZlRhYmxlQ29sdW1uSWNvbikge1xuICAgIGNvbnN0IGlzQWJsZUFjdGlvbiA9ICF0aGlzLmNoZWNrRGlzYWJsZWQoaWNvbkNvbHVtbik7XG5cbiAgICBpZiAoaWNvbkNvbHVtbi5hY3Rpb24gJiYgaXNBYmxlQWN0aW9uKSB7XG4gICAgICBpY29uQ29sdW1uLmFjdGlvbih0aGlzLnJvdywgaWNvbkNvbHVtbik7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbHVtbi5hY3Rpb24gJiYgaXNBYmxlQWN0aW9uKSB7XG4gICAgICB0aGlzLmNvbHVtbi5hY3Rpb24odGhpcy5yb3csIGljb25Db2x1bW4gfHwgdGhpcy5jb2x1bW4pO1xuICAgIH1cbiAgfVxuXG4gIHRvb2x0aXBNb3VzZUVudGVyKHRleHQ6IHN0cmluZywgaWNvbkNvbHVtbjogVGhmVGFibGVDb2x1bW5JY29uKSB7XG4gICAgaWYgKHRoaXMuY2hlY2tEaXNhYmxlZChpY29uQ29sdW1uKSkge1xuICAgICAgdGhpcy50b29sdGlwVGV4dCA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50b29sdGlwVGV4dCA9IHRleHQ7XG4gICAgfVxuICB9XG5cbiAgdG9vbHRpcE1vdXNlTGVhdmUoKSB7XG4gICAgdGhpcy50b29sdGlwVGV4dCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFRvQ29sdW1uSWNvbih2YWx1ZTogYW55KTogQXJyYXk8VGhmVGFibGVDb2x1bW5JY29uPiB7XG5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgcmV0dXJuIHZhbHVlLm1hcCh2YWwgPT4ge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyB7IHZhbHVlOiB2YWwgfSA6IHZhbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gW3sgdmFsdWUgfV07XG4gICAgfVxuXG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRJY29uQ29sb3IoY29sdW1uOiBUaGZUYWJsZUNvbHVtbkljb24gfCBUaGZUYWJsZUNvbHVtbikge1xuICAgIHJldHVybiB0eXBlb2YgY29sdW1uLmNvbG9yID09PSAnZnVuY3Rpb24nID8gY29sdW1uLmNvbG9yKHRoaXMucm93LCBjb2x1bW4pIDogY29sdW1uLmNvbG9yO1xuICB9XG5cbn1cbiJdfQ==