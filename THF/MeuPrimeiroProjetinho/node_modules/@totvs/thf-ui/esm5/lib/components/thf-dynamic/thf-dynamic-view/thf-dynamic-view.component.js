/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { CurrencyPipe, DatePipe, DecimalPipe, TitleCasePipe } from '@angular/common';
import { ThfTimePipe } from '../../../pipes/thf-time/thf-time.pipe';
import { ThfDynamicViewBaseComponent } from './thf-dynamic-view-base.component';
/**
 * \@docsExtends ThfDynamicViewBaseComponent
 *
 * \@example
 *
 * <example name="thf-dynamic-view-basic" title="Totvs Dynamic View Basic">
 *  <file name="sample-thf-dynamic-view-basic/sample-thf-dynamic-view-basic.component.html"> </file>
 *  <file name="sample-thf-dynamic-view-basic/sample-thf-dynamic-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-dynamic-view-employee" title="Totvs Dynamic View - Employee">
 *  <file name="sample-thf-dynamic-view-employee/sample-thf-dynamic-view-employee.component.html"> </file>
 *  <file name="sample-thf-dynamic-view-employee/sample-thf-dynamic-view-employee.component.ts"> </file>
 * </example>
 */
var ThfDynamicViewComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfDynamicViewComponent, _super);
    function ThfDynamicViewComponent(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) {
        return _super.call(this, currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) || this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfDynamicViewComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.fields || changes.value || changes.showAllValue) {
            this.visibleFields = this.getVisibleFields();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfDynamicViewComponent.prototype.getVisibleFields = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.showAllValue) {
            return this.getMergedFields();
        }
        return this.value && this.fields.length ? this.getConfiguredFields() : this.getValueFields();
    };
    ThfDynamicViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-dynamic-view',
                    template: "<div class=\"thf-row\" *ngIf=\"visibleFields.length\">\n\n  <ng-template ngFor let-field [ngForOf]=\"visibleFields\">\n\n    <thf-divider *ngIf=\"field?.divider?.trim()\" class=\"thf-sm-12\" [t-label]=\"field.divider\">\n    </thf-divider>\n\n    <ng-container *ngTemplateOutlet=\"!field.tag ? thfInfo : thfTag; context: { $implicit: field }\">\n    </ng-container>\n\n  </ng-template>\n\n</div>\n\n<ng-template #thfInfo let-field>\n  <thf-info [ngClass]=\"field.cssClass\"\n    [t-label]=\"field.label\"\n    [t-value]=\"field.value\">\n  </thf-info>\n</ng-template>\n\n<ng-template #thfTag let-field>\n  <thf-tag [ngClass]=\"field.cssClass\"\n    [t-label]=\"field.label\"\n    [t-value]=\"field.value\">\n  </thf-tag>\n</ng-template>\n"
                }] }
    ];
    /** @nocollapse */
    ThfDynamicViewComponent.ctorParameters = function () { return [
        { type: CurrencyPipe },
        { type: DatePipe },
        { type: DecimalPipe },
        { type: ThfTimePipe },
        { type: TitleCasePipe }
    ]; };
    return ThfDynamicViewComponent;
}(ThfDynamicViewBaseComponent));
export { ThfDynamicViewComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWR5bmFtaWMtdmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLWR5bmFtaWMvdGhmLWR5bmFtaWMtdmlldy90aGYtZHluYW1pYy12aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVyRixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFFcEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQmhGO0lBSTZDLG1EQUEyQjtJQUV0RSxpQ0FDRSxZQUEwQixFQUMxQixRQUFrQixFQUNsQixXQUF3QixFQUN4QixRQUFxQixFQUNyQixhQUE0QjtlQUU1QixrQkFBTSxZQUFZLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDO0lBQ3JFLENBQUM7Ozs7O0lBRUQsNkNBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUU7WUFDM0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztTQUM5QztJQUNILENBQUM7Ozs7O0lBRU8sa0RBQWdCOzs7O0lBQXhCO1FBQ0UsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQy9CO1FBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQy9GLENBQUM7O2dCQTVCRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsOHVCQUFnRDtpQkFDakQ7Ozs7Z0JBeEJRLFlBQVk7Z0JBQUUsUUFBUTtnQkFBRSxXQUFXO2dCQUVuQyxXQUFXO2dCQUYwQixhQUFhOztJQW1EM0QsOEJBQUM7Q0FBQSxBQTlCRCxDQUk2QywyQkFBMkIsR0EwQnZFO1NBMUJZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDdXJyZW5jeVBpcGUsIERhdGVQaXBlLCBEZWNpbWFsUGlwZSwgVGl0bGVDYXNlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IFRoZlRpbWVQaXBlIH0gZnJvbSAnLi4vLi4vLi4vcGlwZXMvdGhmLXRpbWUvdGhmLXRpbWUucGlwZSc7XG5cbmltcG9ydCB7IFRoZkR5bmFtaWNWaWV3QmFzZUNvbXBvbmVudCB9IGZyb20gJy4vdGhmLWR5bmFtaWMtdmlldy1iYXNlLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQGRvY3NFeHRlbmRzIFRoZkR5bmFtaWNWaWV3QmFzZUNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1keW5hbWljLXZpZXctYmFzaWNcIiB0aXRsZT1cIlRvdHZzIER5bmFtaWMgVmlldyBCYXNpY1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLWR5bmFtaWMtdmlldy1iYXNpYy9zYW1wbGUtdGhmLWR5bmFtaWMtdmlldy1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtZHluYW1pYy12aWV3LWJhc2ljL3NhbXBsZS10aGYtZHluYW1pYy12aWV3LWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1keW5hbWljLXZpZXctZW1wbG95ZWVcIiB0aXRsZT1cIlRvdHZzIER5bmFtaWMgVmlldyAtIEVtcGxveWVlXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtZHluYW1pYy12aWV3LWVtcGxveWVlL3NhbXBsZS10aGYtZHluYW1pYy12aWV3LWVtcGxveWVlLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1keW5hbWljLXZpZXctZW1wbG95ZWUvc2FtcGxlLXRoZi1keW5hbWljLXZpZXctZW1wbG95ZWUuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGhmLWR5bmFtaWMtdmlldycsXG4gIHRlbXBsYXRlVXJsOiAnLi90aGYtZHluYW1pYy12aWV3LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUaGZEeW5hbWljVmlld0NvbXBvbmVudCBleHRlbmRzIFRoZkR5bmFtaWNWaWV3QmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgY3VycmVuY3lQaXBlOiBDdXJyZW5jeVBpcGUsXG4gICAgZGF0ZVBpcGU6IERhdGVQaXBlLFxuICAgIGRlY2ltYWxQaXBlOiBEZWNpbWFsUGlwZSxcbiAgICB0aW1lUGlwZTogVGhmVGltZVBpcGUsXG4gICAgdGl0bGVDYXNlUGlwZTogVGl0bGVDYXNlUGlwZSkge1xuXG4gICAgc3VwZXIoY3VycmVuY3lQaXBlLCBkYXRlUGlwZSwgZGVjaW1hbFBpcGUsIHRpbWVQaXBlLCB0aXRsZUNhc2VQaXBlKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5maWVsZHMgfHwgY2hhbmdlcy52YWx1ZSB8fCBjaGFuZ2VzLnNob3dBbGxWYWx1ZSkge1xuICAgICAgdGhpcy52aXNpYmxlRmllbGRzID0gdGhpcy5nZXRWaXNpYmxlRmllbGRzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRWaXNpYmxlRmllbGRzKCkge1xuICAgIGlmICh0aGlzLnNob3dBbGxWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0TWVyZ2VkRmllbGRzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudmFsdWUgJiYgdGhpcy5maWVsZHMubGVuZ3RoID8gdGhpcy5nZXRDb25maWd1cmVkRmllbGRzKCkgOiB0aGlzLmdldFZhbHVlRmllbGRzKCk7XG4gIH1cblxufVxuIl19