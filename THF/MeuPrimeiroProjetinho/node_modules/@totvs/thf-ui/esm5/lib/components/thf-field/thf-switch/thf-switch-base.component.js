/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { ThfSwitchLabelPosition } from './thf-switch-label-position.enum';
/**
 * \@description
 *
 * O componente `thf-switch` é um [checkbox](/documentation/thf-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
 * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
 *
 * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.
 *
 * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
 * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
 *
 * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
 */
var ThfSwitchBaseComponent = /** @class */ (function () {
    function ThfSwitchBaseComponent() {
        this._disabled = false;
        this.switchValue = false;
        /**
         * Texto exibido quando o valor do componente for `true`.
         *
         * \@default `true`
         */
        this.labelOn = 'true';
        /**
         * Texto exibido quando o valor do componente for `false`.
         *
         * \@default `false`
         */
        this.labelOff = 'false';
        /**
         * \@optional
         *
         * \@description
         *
         * Posição de exibição do rótulo.
         *
         * > Por padrão exibe à direita.
         */
        this.labelPosition = ThfSwitchLabelPosition.Right;
        /**
         * Evento disparado ao alterar valor do campo.
         */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
    }
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "setLabelOn", {
        set: /**
         * @param {?} label
         * @return {?}
         */
        function (label) {
            this.labelOn = label || 'true';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "setLabelOff", {
        set: /**
         * @param {?} label
         * @return {?}
         */
        function (label) {
            this.labelOff = label || 'false';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "setLabelPosition", {
        set: /**
         * @param {?} position
         * @return {?}
         */
        function (position) {
            this.labelPosition = (position in ThfSwitchLabelPosition) ? parseInt((/** @type {?} */ (position)), 10) : ThfSwitchLabelPosition.Right;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSwitchBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica se o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica se o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.changeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.switchValue !== value) {
            this.switchValue = value;
            if (this.propagateChange) {
                this.propagateChange(value);
            }
            else {
                this.ngModelChange.emit(value);
            }
            this.change.emit(this.switchValue);
        }
    };
    /**
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.eventClick = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.changeValue(!this.switchValue);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSwitchBaseComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.switchValue) {
            this.switchValue = !!value;
        }
    };
    ThfSwitchBaseComponent.propDecorators = {
        name: [{ type: Input, args: ['name',] }],
        label: [{ type: Input, args: ['t-label',] }],
        help: [{ type: Input, args: ['t-help',] }],
        setLabelOn: [{ type: Input, args: ['t-label-on',] }],
        setLabelOff: [{ type: Input, args: ['t-label-off',] }],
        setLabelPosition: [{ type: Input, args: ['t-label-position',] }],
        disabled: [{ type: Input, args: ['t-disabled',] }],
        change: [{ type: Output, args: ['t-change',] }],
        ngModelChange: [{ type: Output, args: ['ngModelChange',] }]
    };
    return ThfSwitchBaseComponent;
}());
export { ThfSwitchBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfSwitchBaseComponent.prototype._disabled;
    /** @type {?} */
    ThfSwitchBaseComponent.prototype.propagateChange;
    /** @type {?} */
    ThfSwitchBaseComponent.prototype.switchValue;
    /**
     * Nome do componente.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.name;
    /**
     * Rótulo exibido pelo componente.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.help;
    /**
     * Texto exibido quando o valor do componente for `true`.
     *
     * \@default `true`
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.labelOn;
    /**
     * Texto exibido quando o valor do componente for `false`.
     *
     * \@default `false`
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.labelOff;
    /**
     * \@optional
     *
     * \@description
     *
     * Posição de exibição do rótulo.
     *
     * > Por padrão exibe à direita.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.labelPosition;
    /**
     * Evento disparado ao alterar valor do campo.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.change;
    /** @type {?} */
    ThfSwitchBaseComponent.prototype.ngModelChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXN3aXRjaC1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtZmllbGQvdGhmLXN3aXRjaC90aGYtc3dpdGNoLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdkQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7Ozs7Ozs7Ozs7Ozs7O0FBZTFFO0lBQUE7UUFFVSxjQUFTLEdBQWEsS0FBSyxDQUFDO1FBR3BDLGdCQUFXLEdBQVksS0FBSyxDQUFDOzs7Ozs7UUFnQjdCLFlBQU8sR0FBWSxNQUFNLENBQUM7Ozs7OztRQVUxQixhQUFRLEdBQVksT0FBTyxDQUFDOzs7Ozs7Ozs7O1FBYzVCLGtCQUFhLEdBQTRCLHNCQUFzQixDQUFDLEtBQUssQ0FBQzs7OztRQXVCbEQsV0FBTSxHQUF1QixJQUFJLFlBQVksRUFBTyxDQUFDOztRQUdoRCxrQkFBYSxHQUF1QixJQUFJLFlBQVksRUFBTyxDQUFDO0lBaUN2RixDQUFDO0lBbEZDLHNCQUF5Qiw4Q0FBVTs7Ozs7UUFBbkMsVUFBb0MsS0FBYTtZQUMvQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssSUFBSSxNQUFNLENBQUM7UUFDakMsQ0FBQzs7O09BQUE7SUFRRCxzQkFBMEIsK0NBQVc7Ozs7O1FBQXJDLFVBQXNDLEtBQWE7WUFDakQsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLElBQUksT0FBTyxDQUFDO1FBQ25DLENBQUM7OztPQUFBO0lBWUQsc0JBQStCLG9EQUFnQjs7Ozs7UUFBL0MsVUFBZ0QsUUFBZ0M7WUFDOUUsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLFFBQVEsSUFBSSxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsbUJBQUssUUFBUSxFQUFBLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQztRQUN6SCxDQUFDOzs7T0FBQTtJQVdELHNCQUF5Qiw0Q0FBUTs7OztRQUlqQztZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDO1FBZkQ7Ozs7Ozs7O1dBUUc7Ozs7Ozs7Ozs7OztRQUNILFVBQWtDLFFBQWlCO1lBQ2pELElBQUksQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUMsQ0FBQzs7O09BQUE7Ozs7O0lBWUQsNENBQVc7Ozs7SUFBWCxVQUFZLEtBQVU7UUFDcEIsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtZQUM5QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztZQUV6QixJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDN0I7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDaEM7WUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDcEM7SUFDSCxDQUFDOzs7O0lBRUQsMkNBQVU7OztJQUFWO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNyQztJQUNILENBQUM7Ozs7O0lBRUQsaURBQWdCOzs7O0lBQWhCLFVBQWlCLEVBQU87UUFDdEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7SUFDNUIsQ0FBQzs7Ozs7SUFFRCxrREFBaUI7Ozs7SUFBakIsVUFBa0IsRUFBTyxJQUFVLENBQUM7Ozs7O0lBRXBDLDJDQUFVOzs7O0lBQVYsVUFBVyxLQUFVO1FBQ25CLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDOUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO1NBQzVCO0lBQ0gsQ0FBQzs7dUJBOUZBLEtBQUssU0FBQyxNQUFNO3dCQUdaLEtBQUssU0FBQyxTQUFTO3VCQUdmLEtBQUssU0FBQyxRQUFROzZCQVFkLEtBQUssU0FBQyxZQUFZOzhCQVVsQixLQUFLLFNBQUMsYUFBYTttQ0FjbkIsS0FBSyxTQUFDLGtCQUFrQjsyQkFheEIsS0FBSyxTQUFDLFlBQVk7eUJBU2xCLE1BQU0sU0FBQyxVQUFVO2dDQUdqQixNQUFNLFNBQUMsZUFBZTs7SUFpQ3pCLDZCQUFDO0NBQUEsQUF4R0QsSUF3R0M7U0F4R1ksc0JBQXNCOzs7Ozs7SUFFakMsMkNBQW9DOztJQUVwQyxpREFBcUI7O0lBQ3JCLDZDQUE2Qjs7Ozs7SUFHN0Isc0NBQTRCOzs7OztJQUc1Qix1Q0FBaUM7Ozs7O0lBR2pDLHNDQUErQjs7Ozs7OztJQU8vQix5Q0FBMEI7Ozs7Ozs7SUFVMUIsMENBQTRCOzs7Ozs7Ozs7OztJQWM1QiwrQ0FBc0U7Ozs7O0lBdUJ0RSx3Q0FBeUU7O0lBR3pFLCtDQUFxRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0Jvb2xlYW4gfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgVGhmU3dpdGNoTGFiZWxQb3NpdGlvbiB9IGZyb20gJy4vdGhmLXN3aXRjaC1sYWJlbC1wb3NpdGlvbi5lbnVtJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHRoZi1zd2l0Y2hgIMOpIHVtIFtjaGVja2JveF0oL2RvY3VtZW50YXRpb24vdGhmLWNoZWNrYm94LWdyb3VwKSBtYWlzIGludHVpdGl2bywgcG9pcyBmYXogYW5hbG9naWEgYSB1bSBpbnRlcnJ1cHRvci5cbiAqIERldmUgc2VyIHVzYWRvIHF1YW5kbyBkZXNlamEtc2UgdHJhbnNtaXRpciBhIGlkZWlhIGRlIGxpZ2FyIC8gZGVzbGlnYXIgdW1hIGZ1bmNpb25hbGlkYWRlIGVzcGVjw61maWNhLlxuICpcbiAqIFBvZGUtc2UgbGlnYXIgb3UgZGVsaWdhciBvIGJvdMOjbyB1dGlsaXphbmRvIGEgdGVjbGEgZGUgZXNwYcOnbyBvdSBvIGNsaXF1ZSBkbyBtb3VzZS5cbiAqXG4gKiBPIHRleHRvIGV4aWJpZG8gcG9kZSBzZXIgYWx0ZXJhZG8gZGUgYWNvcmRvIGNvbSBvIHZhbG9yIHNldGFkbyBhdW1lbnRhbmRvIGFzIHBvc3NpYmlsaWRhZGVzIGRlIHVzbyBkbyBjb21wb25lbnRlLFxuICogcG9ydGFudG8sIHJlY29tZW5kYS1zZSBpbmZvcm1hciB0ZXh0b3MgcXVlIGNvbnRleHR1YWxpemVtIHNldSB1c28gcGFyYSBxdWUgZmFjaWxpdGUgYSBjb21wcmVlbnPDo28gZG8gdXN1w6FyaW8uXG4gKlxuICogPiBPIGNvbXBvbmVudGUgbsOjbyBhbHRlcmEgbyB2YWxvciBpbmNpYWwgaW5mb3JtYWRvIG5vICptb2RlbCosIHBvcnRhbnRvIGluZGljYS1zZSBpbmljaWFsaXphLWxvIGNhc28gdGVyIG5lY2Vzc2lkYWRlLlxuICovXG5leHBvcnQgY2xhc3MgVGhmU3dpdGNoQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcblxuICBwcml2YXRlIF9kaXNhYmxlZD86IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcm9wYWdhdGVDaGFuZ2U6IGFueTtcbiAgc3dpdGNoVmFsdWU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKiogTm9tZSBkbyBjb21wb25lbnRlLiAqL1xuICBASW5wdXQoJ25hbWUnKSBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqIFLDs3R1bG8gZXhpYmlkbyBwZWxvIGNvbXBvbmVudGUuICovXG4gIEBJbnB1dCgndC1sYWJlbCcpIGxhYmVsPzogc3RyaW5nO1xuXG4gIC8qKiBUZXh0byBkZSBhcG9pbyBwYXJhIG8gY2FtcG8uICovXG4gIEBJbnB1dCgndC1oZWxwJykgaGVscD86IHN0cmluZztcblxuICAvKipcbiAgICogVGV4dG8gZXhpYmlkbyBxdWFuZG8gbyB2YWxvciBkbyBjb21wb25lbnRlIGZvciBgdHJ1ZWAuXG4gICAqXG4gICAqIEBkZWZhdWx0IGB0cnVlYFxuICAgKi9cbiAgbGFiZWxPbj86IHN0cmluZyA9ICd0cnVlJztcbiAgQElucHV0KCd0LWxhYmVsLW9uJykgc2V0IHNldExhYmVsT24obGFiZWw6IHN0cmluZykge1xuICAgIHRoaXMubGFiZWxPbiA9IGxhYmVsIHx8ICd0cnVlJztcbiAgfVxuXG4gIC8qKlxuICAgKiBUZXh0byBleGliaWRvIHF1YW5kbyBvIHZhbG9yIGRvIGNvbXBvbmVudGUgZm9yIGBmYWxzZWAuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIGxhYmVsT2ZmPzogc3RyaW5nID0gJ2ZhbHNlJztcbiAgQElucHV0KCd0LWxhYmVsLW9mZicpIHNldCBzZXRMYWJlbE9mZihsYWJlbDogc3RyaW5nKSB7XG4gICAgdGhpcy5sYWJlbE9mZiA9IGxhYmVsIHx8ICdmYWxzZSc7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBQb3Npw6fDo28gZGUgZXhpYmnDp8OjbyBkbyByw7N0dWxvLlxuICAgKlxuICAgKiA+IFBvciBwYWRyw6NvIGV4aWJlIMOgIGRpcmVpdGEuXG4gICAqL1xuICBsYWJlbFBvc2l0aW9uPzogVGhmU3dpdGNoTGFiZWxQb3NpdGlvbiA9IFRoZlN3aXRjaExhYmVsUG9zaXRpb24uUmlnaHQ7XG4gIEBJbnB1dCgndC1sYWJlbC1wb3NpdGlvbicpIHNldCBzZXRMYWJlbFBvc2l0aW9uKHBvc2l0aW9uOiBUaGZTd2l0Y2hMYWJlbFBvc2l0aW9uKSB7XG4gICAgdGhpcy5sYWJlbFBvc2l0aW9uID0gKHBvc2l0aW9uIGluIFRoZlN3aXRjaExhYmVsUG9zaXRpb24pID8gcGFyc2VJbnQoPGFueT5wb3NpdGlvbiwgMTApIDogVGhmU3dpdGNoTGFiZWxQb3NpdGlvbi5SaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEluZGljYSBzZSBvIGNhbXBvIHNlcsOhIGRlc2FiaWxpdGFkby5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCd0LWRpc2FibGVkJykgc2V0IGRpc2FibGVkKGRpc2FibGVkOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSBjb252ZXJ0VG9Cb29sZWFuKGRpc2FibGVkKTtcbiAgfVxuXG4gIGdldCBkaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICAvKiogRXZlbnRvIGRpc3BhcmFkbyBhbyBhbHRlcmFyIHZhbG9yIGRvIGNhbXBvLiAqL1xuICBAT3V0cHV0KCd0LWNoYW5nZScpIGNoYW5nZT86IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgLy8gRnVuw6fDo28gcGFyYSBhdHVhbGl6YXIgbyBuZ01vZGVsIGRvIGNvbXBvbmVudGUsIG5lY2Vzc8OhcmlvIHF1YW5kbyBuw6NvIGZvciB1dGlsaXphZG8gZGVudHJvIGRhIHRhZyBmb3JtLlxuICBAT3V0cHV0KCduZ01vZGVsQ2hhbmdlJykgbmdNb2RlbENoYW5nZT86IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgY2hhbmdlVmFsdWUodmFsdWU6IGFueSkge1xuICAgIGlmICh0aGlzLnN3aXRjaFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5zd2l0Y2hWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICBpZiAodGhpcy5wcm9wYWdhdGVDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2UodmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5uZ01vZGVsQ2hhbmdlLmVtaXQodmFsdWUpO1xuICAgICAgfVxuICAgICAgdGhpcy5jaGFuZ2UuZW1pdCh0aGlzLnN3aXRjaFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBldmVudENsaWNrKCkge1xuICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5jaGFuZ2VWYWx1ZSghdGhpcy5zd2l0Y2hWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkIHsgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5zd2l0Y2hWYWx1ZSkge1xuICAgICAgdGhpcy5zd2l0Y2hWYWx1ZSA9ICEhdmFsdWU7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==