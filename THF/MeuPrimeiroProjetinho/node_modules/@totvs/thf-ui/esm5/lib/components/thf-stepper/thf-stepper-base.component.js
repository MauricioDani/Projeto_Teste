/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { ThfStepperOrientation } from './enums/thf-stepper-orientation.enum';
import { ThfStepperStatus } from './enums/thf-stepper-status.enum';
/** @type {?} */
var thfStepperOrientationDefault = ThfStepperOrientation.Horizontal;
/**
 * \@description
 *
 * O `thf-stepper` permite que um processo seja dividido em passos para que o usuário o realize
 * mais facilmente.
 *
 * Existem duas formas de utilização:
 *
 * 1 - Usando o componente [**thf-step**](/documentation/thf-step) para renderizar e descrever os passos.
 *
 * 2 - Através da propriedade `t-steps` para descrever os passos do processo, sendo responsabilidade do desenvolvedor o controle
 * de renderização do que será exibido a cada *step* ativo.
 *
 * Através de suas propriedades, é possível definir se sua orientação será horizontal ou vertical,
 * além da possibilidade de aumentar o tamanho dos *steps*.
 *
 * Também é possível navegar entre os *steps* através do teclado utilizando a tecla *tab* e, para ativar o *step* em foco basta
 * pressionar a tecla *enter*. Além disso, é possível ativar a exibição de ícones no lugar de números nos *steps* através da
 * propriedade [`t-step-icons`](/documentation/thf-stepper#stepIconsProperty).
 *
 * #### Utilizando os métodos do componente:
 *
 * Para acessar os métodos do componente é necessário ter a referência do mesmo.
 *
 * Por exemplo, utilizando um [**ViewChild**](https://angular.io/api/core/ViewChild):
 *
 * ```
 * \@ViewChild(ThfStepperComponent) thfStepperComponent: ThfStepperComponent;
 * ```
 *
 * E para acessar o método:
 *
 * ```
 * thfStepperComponent.next();
 * ```
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `thf-stepper`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `thf-stepper` por página.
 */
var ThfStepperBaseComponent = /** @class */ (function () {
    function ThfStepperBaseComponent() {
        this._orientation = thfStepperOrientationDefault;
        this._sequential = true;
        this._step = 1;
        this._steps = [];
        /**
         * Ação que será executada quando o usuário mudar o passo do `thf-stepper`.
         */
        this.onChangeStep = new EventEmitter();
    }
    Object.defineProperty(ThfStepperBaseComponent.prototype, "orientation", {
        get: /**
         * @return {?}
         */
        function () {
            return this._orientation;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a orientação de exibição do `thf-stepper`.
         *
         * > Veja os valores válidos no *enum* [ThfStepperOrientation](documentation/thf-stepper#stepperOrientation).
         *
         * @default `ThfStepperOrientation.Horizontal`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a orientação de exibição do `thf-stepper`.
         *
         * > Veja os valores válidos no *enum* [ThfStepperOrientation](documentation/thf-stepper#stepperOrientation).
         *
         * \@default `ThfStepperOrientation.Horizontal`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._orientation = ((/** @type {?} */ (Object))).values(ThfStepperOrientation).includes(value) ? value : thfStepperOrientationDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "step", {
        get: /**
         * @return {?}
         */
        function () {
            return this._step;
        },
        /**
         * @optional
         *
         * @description
         *
         * Controla o passo atual do `thf-stepper`.
         *
         * > Ao utilizar esta propriedade e também utilizar o componente [**thf-step**](/documentation/thf-step),
         * o valor desta propriedade será ignorada permanecendo a definição do [**thf-step**](/documentation/thf-step).
         *
         * @default `1`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Controla o passo atual do `thf-stepper`.
         *
         * > Ao utilizar esta propriedade e também utilizar o componente [**thf-step**](/documentation/thf-step),
         * o valor desta propriedade será ignorada permanecendo a definição do [**thf-step**](/documentation/thf-step).
         *
         * \@default `1`
         * @param {?} step
         * @return {?}
         */
        function (step) {
            if (step >= 1 && step <= this.steps.length) {
                this._step = step;
                this._steps[this._step - 1].status = ThfStepperStatus.Active;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "steps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._steps;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
         *
         * > Ao utilizar esta propriedade e também utilizar o componente [**thf-step**](/documentation/thf-step),
         * o valor desta propriedade será ignorada permanecendo a definição do [**thf-step**](/documentation/thf-step).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
         *
         * > Ao utilizar esta propriedade e também utilizar o componente [**thf-step**](/documentation/thf-step),
         * o valor desta propriedade será ignorada permanecendo a definição do [**thf-step**](/documentation/thf-step).
         * @param {?} steps
         * @return {?}
         */
        function (steps) {
            this._steps = Array.isArray(steps) ? steps : [];
            this._steps.forEach((/**
             * @param {?} step
             * @return {?}
             */
            function (step) { return step.status = ThfStepperStatus.Default; }));
            this.step = 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperBaseComponent.prototype, "sequential", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sequential;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define se o `thf-stepper` será sequencial ou aleatório.
         *
         * > Ao utilizar o componente [**thf-step**](/documentation/thf-step), o valor desta propriedade sempre será verdadeiro.
         *
         * @default `true`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define se o `thf-stepper` será sequencial ou aleatório.
         *
         * > Ao utilizar o componente [**thf-step**](/documentation/thf-step), o valor desta propriedade sempre será verdadeiro.
         *
         * \@default `true`
         * @param {?} sequential
         * @return {?}
         */
        function (sequential) {
            this._sequential = convertToBoolean(sequential);
        },
        enumerable: true,
        configurable: true
    });
    ThfStepperBaseComponent.propDecorators = {
        orientation: [{ type: Input, args: ['t-orientation',] }],
        step: [{ type: Input, args: ['t-step',] }],
        steps: [{ type: Input, args: ['t-steps',] }],
        stepIcons: [{ type: Input, args: ['t-step-icons',] }],
        stepSize: [{ type: Input, args: ['t-step-size',] }],
        sequential: [{ type: Input, args: ['t-sequential',] }],
        onChangeStep: [{ type: Output, args: ['t-change-step',] }]
    };
    return ThfStepperBaseComponent;
}());
export { ThfStepperBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfStepperBaseComponent.prototype._orientation;
    /**
     * @type {?}
     * @private
     */
    ThfStepperBaseComponent.prototype._sequential;
    /**
     * @type {?}
     * @private
     */
    ThfStepperBaseComponent.prototype._step;
    /**
     * @type {?}
     * @private
     */
    ThfStepperBaseComponent.prototype._steps;
    /**
     *
     * \@optional
     *
     * \@description
     *
     * <a id="stepIconsProperty"></a>
     *
     * Habilita a exibição de ícone ao invés de número no centro do círculo dos *steps*.
     *
     * \@default `false`
     * @type {?}
     */
    ThfStepperBaseComponent.prototype.stepIcons;
    /**
     * \@optional
     *
     * \@description
     *
     * Define o tamanho dos *steps* em *pixels*, possibilitando um maior destaque.
     *
     * O valor informado deve ser entre `24` e `64`.
     *
     * > Valores que não se enquadrarem a esta regra serão ignorados, mantendo-se o valor *default*.
     *
     * \@default `24`
     * @type {?}
     */
    ThfStepperBaseComponent.prototype.stepSize;
    /**
     * Ação que será executada quando o usuário mudar o passo do `thf-stepper`.
     * @type {?}
     */
    ThfStepperBaseComponent.prototype.onChangeStep;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXN0ZXBwZXItYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLXN0ZXBwZXIvdGhmLXN0ZXBwZXItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUlwRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUM3RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7SUFFN0QsNEJBQTRCLEdBQUcscUJBQXFCLENBQUMsVUFBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkNyRTtJQUFBO1FBRVUsaUJBQVksR0FBMkIsNEJBQTRCLENBQUM7UUFDcEUsZ0JBQVcsR0FBYSxJQUFJLENBQUM7UUFDN0IsVUFBSyxHQUFXLENBQUMsQ0FBQztRQUNsQixXQUFNLEdBQTBCLEVBQUUsQ0FBQzs7OztRQWlIbEIsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBNkIsQ0FBQztJQUV4RixDQUFDO0lBdEdDLHNCQUE0QixnREFBVzs7OztRQUl2QztZQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztRQUMzQixDQUFDO1FBakJEOzs7Ozs7Ozs7O1dBVUc7Ozs7Ozs7Ozs7Ozs7O1FBQ0gsVUFBd0MsS0FBNEI7WUFDbEUsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLG1CQUFLLE1BQU0sRUFBQSxDQUFDLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLDRCQUE0QixDQUFDO1FBQ3pILENBQUM7OztPQUFBO0lBa0JELHNCQUFxQix5Q0FBSTs7OztRQU96QjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwQixDQUFDO1FBckJEOzs7Ozs7Ozs7OztXQVdHOzs7Ozs7Ozs7Ozs7Ozs7UUFDSCxVQUEwQixJQUFZO1lBQ3BDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7Z0JBQzFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2dCQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQzthQUM5RDtRQUNILENBQUM7OztPQUFBO0lBZ0JELHNCQUFzQiwwQ0FBSzs7OztRQU0zQjtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQixDQUFDO1FBbEJEOzs7Ozs7Ozs7V0FTRzs7Ozs7Ozs7Ozs7OztRQUNILFVBQTRCLEtBQTRCO1lBQ3RELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDaEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsTUFBTSxHQUFHLGdCQUFnQixDQUFDLE9BQU8sRUFBdEMsQ0FBc0MsRUFBQyxDQUFDO1lBQ3BFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLENBQUM7OztPQUFBO0lBOENELHNCQUEyQiwrQ0FBVTs7OztRQUlyQztZQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUMxQixDQUFDO1FBakJEOzs7Ozs7Ozs7O1dBVUc7Ozs7Ozs7Ozs7Ozs7O1FBQ0gsVUFBc0MsVUFBbUI7WUFDdkQsSUFBSSxDQUFDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsRCxDQUFDOzs7T0FBQTs7OEJBN0ZBLEtBQUssU0FBQyxlQUFlO3VCQW9CckIsS0FBSyxTQUFDLFFBQVE7d0JBcUJkLEtBQUssU0FBQyxTQUFTOzRCQXNCZixLQUFLLFNBQUMsY0FBYzsyQkFlcEIsS0FBSyxTQUFDLGFBQWE7NkJBYW5CLEtBQUssU0FBQyxjQUFjOytCQVNwQixNQUFNLFNBQUMsZUFBZTs7SUFFekIsOEJBQUM7Q0FBQSxBQXhIRCxJQXdIQztTQXhIWSx1QkFBdUI7Ozs7OztJQUVsQywrQ0FBNEU7Ozs7O0lBQzVFLDhDQUFxQzs7Ozs7SUFDckMsd0NBQTBCOzs7OztJQUMxQix5Q0FBMkM7Ozs7Ozs7Ozs7Ozs7O0lBNEUzQyw0Q0FBMEM7Ozs7Ozs7Ozs7Ozs7OztJQWUxQywyQ0FBdUM7Ozs7O0lBc0J2QywrQ0FBc0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBUaGZTdGVwQ29tcG9uZW50IH0gZnJvbSAnLi90aGYtc3RlcC90aGYtc3RlcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgVGhmU3RlcHBlckl0ZW0gfSBmcm9tICcuL3RoZi1zdGVwcGVyLWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IFRoZlN0ZXBwZXJPcmllbnRhdGlvbiB9IGZyb20gJy4vZW51bXMvdGhmLXN0ZXBwZXItb3JpZW50YXRpb24uZW51bSc7XG5pbXBvcnQgeyBUaGZTdGVwcGVyU3RhdHVzIH0gZnJvbSAnLi9lbnVtcy90aGYtc3RlcHBlci1zdGF0dXMuZW51bSc7XG5cbmNvbnN0IHRoZlN0ZXBwZXJPcmllbnRhdGlvbkRlZmF1bHQgPSBUaGZTdGVwcGVyT3JpZW50YXRpb24uSG9yaXpvbnRhbDtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGB0aGYtc3RlcHBlcmAgcGVybWl0ZSBxdWUgdW0gcHJvY2Vzc28gc2VqYSBkaXZpZGlkbyBlbSBwYXNzb3MgcGFyYSBxdWUgbyB1c3XDoXJpbyBvIHJlYWxpemVcbiAqIG1haXMgZmFjaWxtZW50ZS5cbiAqXG4gKiBFeGlzdGVtIGR1YXMgZm9ybWFzIGRlIHV0aWxpemHDp8OjbzpcbiAqXG4gKiAxIC0gVXNhbmRvIG8gY29tcG9uZW50ZSBbKip0aGYtc3RlcCoqXSgvZG9jdW1lbnRhdGlvbi90aGYtc3RlcCkgcGFyYSByZW5kZXJpemFyIGUgZGVzY3JldmVyIG9zIHBhc3Nvcy5cbiAqXG4gKiAyIC0gQXRyYXbDqXMgZGEgcHJvcHJpZWRhZGUgYHQtc3RlcHNgIHBhcmEgZGVzY3JldmVyIG9zIHBhc3NvcyBkbyBwcm9jZXNzbywgc2VuZG8gcmVzcG9uc2FiaWxpZGFkZSBkbyBkZXNlbnZvbHZlZG9yIG8gY29udHJvbGVcbiAqIGRlIHJlbmRlcml6YcOnw6NvIGRvIHF1ZSBzZXLDoSBleGliaWRvIGEgY2FkYSAqc3RlcCogYXRpdm8uXG4gKlxuICogQXRyYXbDqXMgZGUgc3VhcyBwcm9wcmllZGFkZXMsIMOpIHBvc3PDrXZlbCBkZWZpbmlyIHNlIHN1YSBvcmllbnRhw6fDo28gc2Vyw6EgaG9yaXpvbnRhbCBvdSB2ZXJ0aWNhbCxcbiAqIGFsw6ltIGRhIHBvc3NpYmlsaWRhZGUgZGUgYXVtZW50YXIgbyB0YW1hbmhvIGRvcyAqc3RlcHMqLlxuICpcbiAqIFRhbWLDqW0gw6kgcG9zc8OtdmVsIG5hdmVnYXIgZW50cmUgb3MgKnN0ZXBzKiBhdHJhdsOpcyBkbyB0ZWNsYWRvIHV0aWxpemFuZG8gYSB0ZWNsYSAqdGFiKiBlLCBwYXJhIGF0aXZhciBvICpzdGVwKiBlbSBmb2NvIGJhc3RhXG4gKiBwcmVzc2lvbmFyIGEgdGVjbGEgKmVudGVyKi4gQWzDqW0gZGlzc28sIMOpIHBvc3PDrXZlbCBhdGl2YXIgYSBleGliacOnw6NvIGRlIMOtY29uZXMgbm8gbHVnYXIgZGUgbsO6bWVyb3Mgbm9zICpzdGVwcyogYXRyYXbDqXMgZGFcbiAqIHByb3ByaWVkYWRlIFtgdC1zdGVwLWljb25zYF0oL2RvY3VtZW50YXRpb24vdGhmLXN0ZXBwZXIjc3RlcEljb25zUHJvcGVydHkpLlxuICpcbiAqICMjIyMgVXRpbGl6YW5kbyBvcyBtw6l0b2RvcyBkbyBjb21wb25lbnRlOlxuICpcbiAqIFBhcmEgYWNlc3NhciBvcyBtw6l0b2RvcyBkbyBjb21wb25lbnRlIMOpIG5lY2Vzc8OhcmlvIHRlciBhIHJlZmVyw6puY2lhIGRvIG1lc21vLlxuICpcbiAqIFBvciBleGVtcGxvLCB1dGlsaXphbmRvIHVtIFsqKlZpZXdDaGlsZCoqXShodHRwczovL2FuZ3VsYXIuaW8vYXBpL2NvcmUvVmlld0NoaWxkKTpcbiAqXG4gKiBgYGBcbiAqIEBWaWV3Q2hpbGQoVGhmU3RlcHBlckNvbXBvbmVudCkgdGhmU3RlcHBlckNvbXBvbmVudDogVGhmU3RlcHBlckNvbXBvbmVudDtcbiAqIGBgYFxuICpcbiAqIEUgcGFyYSBhY2Vzc2FyIG8gbcOpdG9kbzpcbiAqXG4gKiBgYGBcbiAqIHRoZlN0ZXBwZXJDb21wb25lbnQubmV4dCgpO1xuICogYGBgXG4gKlxuICogIyMjIyBCb2FzIHByw6F0aWNhc1xuICpcbiAqIC0gRXZpdGUgYGxhYmVsc2AgZXh0ZW5zb3MgcXVlIHF1ZWJyYW0gbyBsYXlvdXQgZG8gYHRoZi1zdGVwcGVyYCwgdXNlIGBsYWJlbHNgIGRpcmV0b3MsIGN1cnRvcyBlIGludHVpdGl2b3MuXG4gKiAtIFV0aWxpemUgYXBlbmFzIHVtIGB0aGYtc3RlcHBlcmAgcG9yIHDDoWdpbmEuXG4gKi9cbmV4cG9ydCBjbGFzcyBUaGZTdGVwcGVyQmFzZUNvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfb3JpZW50YXRpb24/OiBUaGZTdGVwcGVyT3JpZW50YXRpb24gPSB0aGZTdGVwcGVyT3JpZW50YXRpb25EZWZhdWx0O1xuICBwcml2YXRlIF9zZXF1ZW50aWFsPzogYm9vbGVhbiA9IHRydWU7XG4gIHByaXZhdGUgX3N0ZXA6IG51bWJlciA9IDE7XG4gIHByaXZhdGUgX3N0ZXBzOiBBcnJheTxUaGZTdGVwcGVySXRlbT4gPSBbXTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgYSBvcmllbnRhw6fDo28gZGUgZXhpYmnDp8OjbyBkbyBgdGhmLXN0ZXBwZXJgLlxuICAgKlxuICAgKiA+IFZlamEgb3MgdmFsb3JlcyB2w6FsaWRvcyBubyAqZW51bSogW1RoZlN0ZXBwZXJPcmllbnRhdGlvbl0oZG9jdW1lbnRhdGlvbi90aGYtc3RlcHBlciNzdGVwcGVyT3JpZW50YXRpb24pLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgVGhmU3RlcHBlck9yaWVudGF0aW9uLkhvcml6b250YWxgXG4gICAqL1xuICBASW5wdXQoJ3Qtb3JpZW50YXRpb24nKSBzZXQgb3JpZW50YXRpb24odmFsdWU6IFRoZlN0ZXBwZXJPcmllbnRhdGlvbikge1xuICAgIHRoaXMuX29yaWVudGF0aW9uID0gKDxhbnk+T2JqZWN0KS52YWx1ZXMoVGhmU3RlcHBlck9yaWVudGF0aW9uKS5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IHRoZlN0ZXBwZXJPcmllbnRhdGlvbkRlZmF1bHQ7XG4gIH1cblxuICBnZXQgb3JpZW50YXRpb24oKTogVGhmU3RlcHBlck9yaWVudGF0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5fb3JpZW50YXRpb247XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBDb250cm9sYSBvIHBhc3NvIGF0dWFsIGRvIGB0aGYtc3RlcHBlcmAuXG4gICAqXG4gICAqID4gQW8gdXRpbGl6YXIgZXN0YSBwcm9wcmllZGFkZSBlIHRhbWLDqW0gdXRpbGl6YXIgbyBjb21wb25lbnRlIFsqKnRoZi1zdGVwKipdKC9kb2N1bWVudGF0aW9uL3RoZi1zdGVwKSxcbiAgICogbyB2YWxvciBkZXN0YSBwcm9wcmllZGFkZSBzZXLDoSBpZ25vcmFkYSBwZXJtYW5lY2VuZG8gYSBkZWZpbmnDp8OjbyBkbyBbKip0aGYtc3RlcCoqXSgvZG9jdW1lbnRhdGlvbi90aGYtc3RlcCkuXG4gICAqXG4gICAqIEBkZWZhdWx0IGAxYFxuICAgKi9cbiAgQElucHV0KCd0LXN0ZXAnKSBzZXQgc3RlcChzdGVwOiBudW1iZXIpIHtcbiAgICBpZiAoc3RlcCA+PSAxICYmIHN0ZXAgPD0gdGhpcy5zdGVwcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3N0ZXAgPSBzdGVwO1xuICAgICAgdGhpcy5fc3RlcHNbdGhpcy5fc3RlcCAtIDFdLnN0YXR1cyA9IFRoZlN0ZXBwZXJTdGF0dXMuQWN0aXZlO1xuICAgIH1cbiAgfVxuXG4gIGdldCBzdGVwKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3N0ZXA7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBMaXN0YSBkb3MgaXRlbnMgZG8gc3RlcHBlci4gU2UgbyB2YWxvciBlc3RpdmVyIGluZGVmaW5pZG8gb3UgaW52w6FsaWRvLCBzZXLDoSBpbmljaWFsaXphZG8gY29tbyB1bSBhcnJheSB2YXppby5cbiAgICpcbiAgICogPiBBbyB1dGlsaXphciBlc3RhIHByb3ByaWVkYWRlIGUgdGFtYsOpbSB1dGlsaXphciBvIGNvbXBvbmVudGUgWyoqdGhmLXN0ZXAqKl0oL2RvY3VtZW50YXRpb24vdGhmLXN0ZXApLFxuICAgKiBvIHZhbG9yIGRlc3RhIHByb3ByaWVkYWRlIHNlcsOhIGlnbm9yYWRhIHBlcm1hbmVjZW5kbyBhIGRlZmluacOnw6NvIGRvIFsqKnRoZi1zdGVwKipdKC9kb2N1bWVudGF0aW9uL3RoZi1zdGVwKS5cbiAgICovXG4gIEBJbnB1dCgndC1zdGVwcycpIHNldCBzdGVwcyhzdGVwczogQXJyYXk8VGhmU3RlcHBlckl0ZW0+KSB7XG4gICAgdGhpcy5fc3RlcHMgPSBBcnJheS5pc0FycmF5KHN0ZXBzKSA/IHN0ZXBzIDogW107XG4gICAgdGhpcy5fc3RlcHMuZm9yRWFjaChzdGVwID0+IHN0ZXAuc3RhdHVzID0gVGhmU3RlcHBlclN0YXR1cy5EZWZhdWx0KTtcbiAgICB0aGlzLnN0ZXAgPSAxO1xuICB9XG5cbiAgZ2V0IHN0ZXBzKCk6IEFycmF5PFRoZlN0ZXBwZXJJdGVtPiB7XG4gICAgcmV0dXJuIHRoaXMuX3N0ZXBzO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogPGEgaWQ9XCJzdGVwSWNvbnNQcm9wZXJ0eVwiPjwvYT5cbiAgICpcbiAgICogSGFiaWxpdGEgYSBleGliacOnw6NvIGRlIMOtY29uZSBhbyBpbnbDqXMgZGUgbsO6bWVybyBubyBjZW50cm8gZG8gY8OtcmN1bG8gZG9zICpzdGVwcyouXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgndC1zdGVwLWljb25zJykgc3RlcEljb25zOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBvIHRhbWFuaG8gZG9zICpzdGVwcyogZW0gKnBpeGVscyosIHBvc3NpYmlsaXRhbmRvIHVtIG1haW9yIGRlc3RhcXVlLlxuICAgKlxuICAgKiBPIHZhbG9yIGluZm9ybWFkbyBkZXZlIHNlciBlbnRyZSBgMjRgIGUgYDY0YC5cbiAgICpcbiAgICogPiBWYWxvcmVzIHF1ZSBuw6NvIHNlIGVucXVhZHJhcmVtIGEgZXN0YSByZWdyYSBzZXLDo28gaWdub3JhZG9zLCBtYW50ZW5kby1zZSBvIHZhbG9yICpkZWZhdWx0Ki5cbiAgICpcbiAgICogQGRlZmF1bHQgYDI0YFxuICAgKi9cbiAgQElucHV0KCd0LXN0ZXAtc2l6ZScpIHN0ZXBTaXplOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIHNlIG8gYHRoZi1zdGVwcGVyYCBzZXLDoSBzZXF1ZW5jaWFsIG91IGFsZWF0w7NyaW8uXG4gICAqXG4gICAqID4gQW8gdXRpbGl6YXIgbyBjb21wb25lbnRlIFsqKnRoZi1zdGVwKipdKC9kb2N1bWVudGF0aW9uL3RoZi1zdGVwKSwgbyB2YWxvciBkZXN0YSBwcm9wcmllZGFkZSBzZW1wcmUgc2Vyw6EgdmVyZGFkZWlyby5cbiAgICpcbiAgICogQGRlZmF1bHQgYHRydWVgXG4gICAqL1xuICBASW5wdXQoJ3Qtc2VxdWVudGlhbCcpIHNldCBzZXF1ZW50aWFsKHNlcXVlbnRpYWw6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zZXF1ZW50aWFsID0gY29udmVydFRvQm9vbGVhbihzZXF1ZW50aWFsKTtcbiAgfVxuXG4gIGdldCBzZXF1ZW50aWFsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zZXF1ZW50aWFsO1xuICB9XG5cbiAgLyoqIEHDp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIHF1YW5kbyBvIHVzdcOhcmlvIG11ZGFyIG8gcGFzc28gZG8gYHRoZi1zdGVwcGVyYC4gKi9cbiAgQE91dHB1dCgndC1jaGFuZ2Utc3RlcCcpIG9uQ2hhbmdlU3RlcCA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyIHwgVGhmU3RlcENvbXBvbmVudD4oKTtcblxufVxuIl19