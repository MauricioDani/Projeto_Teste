/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { isTypeof } from '../../../../utils/util';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço padrão utilizado para filtrar os dados do componente thf-lookup.
 */
var ThfLookupFilterService = /** @class */ (function () {
    function ThfLookupFilterService(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * @param {?} filter
     * @param {?} page
     * @param {?=} pageSize
     * @param {?=} filterParams
     * @return {?}
     */
    ThfLookupFilterService.prototype.getFilteredData = /**
     * @param {?} filter
     * @param {?} page
     * @param {?=} pageSize
     * @param {?=} filterParams
     * @return {?}
     */
    function (filter, page, pageSize, filterParams) {
        /** @type {?} */
        var validatedFilterParams = this.validateParams(filterParams);
        return this.httpClient.get(this.url, { params: tslib_1.__assign({ page: page.toString(), pageSize: pageSize.toString() }, validatedFilterParams, { filter: filter }) });
    };
    /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    ThfLookupFilterService.prototype.getObjectByValue = /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    function (value, filterParams) {
        /** @type {?} */
        var validatedFilterParams = this.validateParams(filterParams);
        return this.httpClient.get(this.url + "/" + value, { params: validatedFilterParams });
    };
    /**
     * @param {?} url
     * @return {?}
     */
    ThfLookupFilterService.prototype.setUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.url = url;
    };
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    ThfLookupFilterService.prototype.validateParams = /**
     * @private
     * @param {?} params
     * @return {?}
     */
    function (params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    };
    ThfLookupFilterService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ThfLookupFilterService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return ThfLookupFilterService;
}());
export { ThfLookupFilterService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfLookupFilterService.prototype.url;
    /**
     * @type {?}
     * @private
     */
    ThfLookupFilterService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWxvb2t1cC1maWx0ZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtZmllbGQvdGhmLWxvb2t1cC9zZXJ2aWNlcy90aGYtbG9va3VwLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDOzs7Ozs7OztBQVdsRDtJQUtFLGdDQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQUcsQ0FBQzs7Ozs7Ozs7SUFFOUMsZ0RBQWU7Ozs7Ozs7SUFBZixVQUFnQixNQUFXLEVBQUUsSUFBWSxFQUFFLFFBQWlCLEVBQUUsWUFBa0I7O1lBQ3hFLHFCQUFxQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDO1FBRS9ELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQ3hCLElBQUksQ0FBQyxHQUFHLEVBQ1IsRUFBRSxNQUFNLHFCQUFJLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxRQUFRLEVBQUUsSUFBSyxxQkFBcUIsSUFBRSxNQUFNLFFBQUEsR0FBRSxFQUFFLENBQ3ZHLENBQUM7SUFDSixDQUFDOzs7Ozs7SUFFRCxpREFBZ0I7Ozs7O0lBQWhCLFVBQWlCLEtBQWEsRUFBRSxZQUFrQjs7WUFDMUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUM7UUFFL0QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsR0FBRyxTQUFJLEtBQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxDQUFDLENBQUM7SUFDeEYsQ0FBQzs7Ozs7SUFFRCx1Q0FBTTs7OztJQUFOLFVBQU8sR0FBVztRQUNoQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNqQixDQUFDOzs7Ozs7SUFFTywrQ0FBYzs7Ozs7SUFBdEIsVUFBdUIsTUFBVztRQUNoQyxPQUFPLFFBQVEsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNuRixDQUFDOztnQkE1QkYsVUFBVTs7OztnQkFoQkYsVUFBVTs7SUE4Q25CLDZCQUFDO0NBQUEsQUE5QkQsSUE4QkM7U0E3Qlksc0JBQXNCOzs7Ozs7SUFFakMscUNBQW9COzs7OztJQUVSLDRDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgaXNUeXBlb2YgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgVGhmTG9va3VwRmlsdGVyIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy90aGYtbG9va3VwLWZpbHRlci5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNlcnZpw6dvIHBhZHLDo28gdXRpbGl6YWRvIHBhcmEgZmlsdHJhciBvcyBkYWRvcyBkbyBjb21wb25lbnRlIHRoZi1sb29rdXAuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUaGZMb29rdXBGaWx0ZXJTZXJ2aWNlIGltcGxlbWVudHMgVGhmTG9va3VwRmlsdGVyIHtcblxuICBwcml2YXRlIHVybDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge31cblxuICBnZXRGaWx0ZXJlZERhdGEoZmlsdGVyOiBhbnksIHBhZ2U6IG51bWJlciwgcGFnZVNpemU/OiBudW1iZXIsIGZpbHRlclBhcmFtcz86IGFueSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgY29uc3QgdmFsaWRhdGVkRmlsdGVyUGFyYW1zID0gdGhpcy52YWxpZGF0ZVBhcmFtcyhmaWx0ZXJQYXJhbXMpO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQoXG4gICAgICB0aGlzLnVybCxcbiAgICAgIHsgcGFyYW1zOiB7IHBhZ2U6IHBhZ2UudG9TdHJpbmcoKSwgcGFnZVNpemU6IHBhZ2VTaXplLnRvU3RyaW5nKCksIC4uLnZhbGlkYXRlZEZpbHRlclBhcmFtcywgZmlsdGVyIH0gfVxuICAgICk7XG4gIH1cblxuICBnZXRPYmplY3RCeVZhbHVlKHZhbHVlOiBzdHJpbmcsIGZpbHRlclBhcmFtcz86IGFueSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgY29uc3QgdmFsaWRhdGVkRmlsdGVyUGFyYW1zID0gdGhpcy52YWxpZGF0ZVBhcmFtcyhmaWx0ZXJQYXJhbXMpO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQoYCR7dGhpcy51cmx9LyR7dmFsdWV9YCwgeyBwYXJhbXM6IHZhbGlkYXRlZEZpbHRlclBhcmFtcyB9KTtcbiAgfVxuXG4gIHNldFVybCh1cmw6IHN0cmluZykge1xuICAgIHRoaXMudXJsID0gdXJsO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZVBhcmFtcyhwYXJhbXM6IGFueSkge1xuICAgIHJldHVybiBpc1R5cGVvZihwYXJhbXMsICdvYmplY3QnKSAmJiAhQXJyYXkuaXNBcnJheShwYXJhbXMpID8gcGFyYW1zIDogdW5kZWZpbmVkO1xuICB9XG5cbn1cbiJdfQ==