/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, forwardRef, IterableDiffers, Renderer2, ViewChild } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map, tap } from 'rxjs/operators';
import { removeDuplicatedOptions } from '../../../utils/util';
import { ThfControlPositionService } from '../../../services/thf-control-position/thf-control-position.service';
import { ThfKeyCodeEnum } from './../../../enums/thf-key-code.enum';
import { ThfComboBaseComponent } from './thf-combo-base.component';
import { ThfComboFilterMode } from './thf-combo-filter-mode.enum';
import { ThfComboFilterService } from './thf-combo-filter.service';
/** @type {?} */
var thfComboContainerOffset = 8;
/** @type {?} */
var thfComboContainerPositionDefault = 'bottom';
/**
 * \@docsExtends ThfComboBaseComponent
 *
 * \@description
 * Utilizando thf-combo com serviço, é possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente
 * faça uma requisição à URL informada passando o valor digitado no campo. Se encontrado o valor, então o mesmo será selecionado, caso
 * não seja encontrado, então a lista de itens voltará para o estado inicial.
 *
 * \@example
 *
 * <example name="thf-combo-basic" title="Totvs Combo Basic">
 *   <file name="sample-thf-combo-basic/sample-thf-combo-basic.component.html"> </file>
 *   <file name="sample-thf-combo-basic/sample-thf-combo-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-labs" title="Totvs Combo Labs">
 *   <file name="sample-thf-combo-labs/sample-thf-combo-labs.component.html"> </file>
 *   <file name="sample-thf-combo-labs/sample-thf-combo-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-scheduling" title="Totvs Combo - Scheduling">
 *   <file name="sample-thf-combo-scheduling/sample-thf-combo-scheduling.component.html"> </file>
 *   <file name="sample-thf-combo-scheduling/sample-thf-combo-scheduling.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-transfer" title="Totvs Combo - Banking Transfer">
 *   <file name="sample-thf-combo-transfer/sample-thf-combo-transfer.component.html"> </file>
 *   <file name="sample-thf-combo-transfer/sample-thf-combo-transfer.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-heroes" title="Totvs Combo - Heroes">
 *   <file name="sample-thf-combo-heroes/sample-thf-combo-heroes.component.html"> </file>
 *   <file name="sample-thf-combo-heroes/sample-thf-combo-heroes.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-heroes-reactive-form" title="Totvs Combo - Heroes Reactive Form">
 *   <file name="sample-thf-combo-heroes-reactive-form/sample-thf-combo-heroes-reactive-form.component.html"> </file>
 *   <file name="sample-thf-combo-heroes-reactive-form/sample-thf-combo-heroes-reactive-form.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-hotels" title="Totvs Combo - Booking Hotel">
 *   <file name="sample-thf-combo-hotels/sample-thf-combo-hotels.component.html"> </file>
 *   <file name="sample-thf-combo-hotels/sample-thf-combo-hotels.component.ts"> </file>
 *   <file name="sample-thf-combo-hotels/sample-thf-combo-hotels.service.ts"> </file>
 * </example>
 */
var ThfComboComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfComboComponent, _super);
    function ThfComboComponent(element, differs, defaultService, renderer, changeDetector, controlPosition, sanitized) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.differs = differs;
        _this.defaultService = defaultService;
        _this.renderer = renderer;
        _this.changeDetector = changeDetector;
        _this.controlPosition = controlPosition;
        _this.sanitized = sanitized;
        _this._isServerSearching = false;
        _this.comboIcon = 'thf-icon-arrow-down';
        _this.comboOpen = false;
        _this.isProcessingGetObjectByValue = false;
        _this.scrollTop = 0;
        _this.shouldMarkLetters = true;
        _this.onScroll = (/**
         * @return {?}
         */
        function () {
            _this.adjustContainerPosition();
        });
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    Object.defineProperty(ThfComboComponent.prototype, "isServerSearching", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isServerSearching;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._isServerSearching = value;
                this.changeDetector.detectChanges();
                this.setContainerPosition();
                this.initializeListeners();
            }
            else {
                this._isServerSearching = value;
                this.removeListeners();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var change = this.differ.diff(this.options);
        if (change) {
            this.validAndSortOptions();
            removeDuplicatedOptions(this.options);
        }
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThfComboComponent.prototype.onKeyDown = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var key = event.keyCode;
        /** @type {?} */
        var inputValue = event.target.value;
        // busca um registro quando acionar o tab
        if (this.service && key === ThfKeyCodeEnum.tab && inputValue) {
            this.controlComboVisibility(false);
            return this.getObjectByValue(inputValue);
        }
        // Teclas "up" e "down"
        if (key === ThfKeyCodeEnum.arrowUp || key === ThfKeyCodeEnum.arrowDown) {
            event.preventDefault();
            if (this.comboOpen) {
                if (key === ThfKeyCodeEnum.arrowUp) {
                    this.selectPreviousOption();
                }
                else {
                    this.selectNextOption();
                }
            }
            this.controlComboVisibility(true);
            this.isFiltering = this.changeOnEnter ? this.isFiltering : false;
            this.shouldMarkLetters = this.changeOnEnter ? this.shouldMarkLetters : false;
            return;
        }
        // Teclas "tab" ou "esc"
        if (key === ThfKeyCodeEnum.tab || key === ThfKeyCodeEnum.esc) {
            if (key === ThfKeyCodeEnum.esc && this.comboOpen) {
                event.preventDefault();
                event.stopPropagation();
            }
            this.controlComboVisibility(false);
            this.verifyValidOption();
            if (!this.service) {
                // caso for changeOnEnter e nao ter selectedValue deve limpar o selectedView para reinicia-lo.
                this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
                this.updateComboList();
            }
            return;
        }
        // Tecla "enter"
        if (key === ThfKeyCodeEnum.enter && this.selectedView && this.comboOpen) {
            /** @type {?} */
            var isUpdateModel = (this.selectedView.value !== this.selectedValue) || (inputValue !== this.selectedView.label);
            this.controlComboVisibility(false);
            this.updateSelectedValue(this.selectedView, isUpdateModel);
            this.isFiltering = false;
            this.updateComboList();
            return;
        }
        if (key === ThfKeyCodeEnum.enter) {
            this.controlComboVisibility(true);
        }
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThfComboComponent.prototype.onKeyUp = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var key = event.keyCode || event.which;
        /** @type {?} */
        var inputValue = event.target.value;
        /** @type {?} */
        var isValidKey = (key !== ThfKeyCodeEnum.arrowUp && key !== ThfKeyCodeEnum.arrowDown && key !== ThfKeyCodeEnum.enter);
        if (isValidKey) {
            if (inputValue) {
                if (!this.service && this.previousSearchValue !== inputValue) {
                    this.shouldMarkLetters = true;
                    this.isFiltering = true;
                    this.searchForLabel(inputValue, this.options, this.filterMode);
                }
            }
            else {
                // quando apagar rapido o campo e conter serviço, valor, não disparava o keyup observable
                // necessario este tratamento para retornar a lista 'default'.
                /** @type {?} */
                var useDefaultOptionsService = this.service && this.selectedValue && this.selectedOption.label === this.previousSearchValue;
                this.updateSelectedValue(null);
                if (!this.service) {
                    this.updateComboList();
                }
                else if (useDefaultOptionsService) {
                    this.updateComboList(tslib_1.__spread(this.cacheOptions));
                }
                this.isFiltering = false;
            }
            // caso o valor pesquisado for diferente do anterior deve abrir o combo
            if (this.previousSearchValue !== inputValue) {
                this.changeDetector.detectChanges();
                this.controlComboVisibility(true);
            }
        }
        this.previousSearchValue = inputValue;
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.initInputObservable = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.service) {
            /** @type {?} */
            var keyupObservable = fromEvent(this.inputElement.nativeElement, 'keyup')
                .pipe(filter((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return _this.isValidCharacterToSearch(e.keyCode); })), map((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e.currentTarget.value; })), distinctUntilChanged(), tap((/**
             * @return {?}
             */
            function () {
                _this.shouldMarkLetters = false;
            })), debounceTime(this.debounceTime));
            this.keyupSubscribe = keyupObservable.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value.length >= _this.filterMinlength || !value) {
                    _this.controlApplyFilter(value);
                }
            }));
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.controlApplyFilter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this.isProcessingGetObjectByValue && (!this.selectedOption || value !== this.selectedOption.label)) {
            this.applyFilter(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.applyFilter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.controlComboVisibility(false);
        this.isServerSearching = true;
        /** @type {?} */
        var param = { property: this.fieldLabel, value: value };
        this.filterSubscription = this.service.getFilteredData(param, this.filterParams)
            .subscribe((/**
         * @param {?} items
         * @return {?}
         */
        function (items) { return _this.setOptionsByApplyFilter(value, items); }));
    };
    /**
     * @param {?} value
     * @param {?} items
     * @return {?}
     */
    ThfComboComponent.prototype.setOptionsByApplyFilter = /**
     * @param {?} value
     * @param {?} items
     * @return {?}
     */
    function (value, items) {
        this.shouldMarkLetters = true;
        this.isServerSearching = false;
        this.options = items;
        this.searchForLabel(value, items, this.filterMode);
        this.changeDetector.detectChanges();
        this.controlComboVisibility(true);
        if (this.isFirstFilter) {
            this.isFirstFilter = !this.isFirstFilter;
            this.cacheOptions = this.options;
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.getObjectByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (!this.selectedValue) {
            this.isProcessingGetObjectByValue = true;
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams)
                .subscribe((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return _this.updateOptionByFilteredValue(item); }));
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfComboComponent.prototype.updateOptionByFilteredValue = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        if (item) {
            this.options = [item];
            this.onOptionClick(item);
        }
        else {
            this.updateSelectedValue(null);
        }
        setTimeout((/**
         * @return {?}
         */
        function () { _this.isProcessingGetObjectByValue = false; }), this.debounceTime);
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.selectPreviousOption = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentViewValue = this.selectedView && this.selectedView.value;
        if (currentViewValue) {
            /** @type {?} */
            var nextOption = this.getNextOption(currentViewValue, this.visibleOptions, true);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            /** @type {?} */
            var visibleOption = this.visibleOptions[this.visibleOptions.length - 1];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.selectNextOption = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentViewValue = this.selectedView && this.selectedView.value;
        if (currentViewValue) {
            /** @type {?} */
            var nextOption = this.getNextOption(currentViewValue, this.visibleOptions);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            /** @type {?} */
            var index = this.changeOnEnter ? 1 : 0;
            /** @type {?} */
            var visibleOption = this.visibleOptions[index];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.toggleComboVisibility = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        if (this.service && !this.disabledInitFilter) {
            this.applyFilterInFirstClick();
        }
        this.controlComboVisibility(!this.comboOpen);
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.applyFilterInFirstClick = /**
     * @return {?}
     */
    function () {
        if (this.isFirstFilter && !this.selectedValue) {
            this.applyFilter('');
        }
    };
    /**
     * @param {?} toOpen
     * @return {?}
     */
    ThfComboComponent.prototype.controlComboVisibility = /**
     * @param {?} toOpen
     * @return {?}
     */
    function (toOpen) {
        toOpen ? this.open() : this.close();
    };
    /**
     * @param {?} option
     * @return {?}
     */
    ThfComboComponent.prototype.onOptionClick = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        /** @type {?} */
        var inputValue = this.getInputValue();
        /** @type {?} */
        var isUpdateModel = (option.value !== this.selectedValue) || !!(this.selectedView && inputValue !== this.selectedView.label);
        this.updateSelectedValue(option, isUpdateModel);
        this.controlComboVisibility(false);
        this.updateComboList([tslib_1.__assign({}, this.selectedView)]);
        this.previousSearchValue = this.selectedView.label;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfComboComponent.prototype.scrollTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var scrollTop = (index <= 2) ? 0 : (index * 44) - 88;
        this.setScrollTop(scrollTop);
    };
    /**
     * @return {?}
     */
    ThfComboComponent.prototype.getInputValue = /**
     * @return {?}
     */
    function () {
        return this.inputElement.nativeElement.value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.setInputValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.inputElement.nativeElement.value = value;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfComboComponent.prototype.wasClickedOnToggle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.comboOpen &&
            !this.inputElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            (!this.contentElement || !this.contentElement.nativeElement.contains(event.target))) {
            // Esconde Content do Combo quando for clicado fora
            this.controlComboVisibility(false);
            this.verifyValidOption();
            // caso for changeOnEnter deve limpar o selectedView para reinicia-lo
            this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
            this.updateComboList();
        }
        else {
            if (this.service && !this.getInputValue() && !this.isFirstFilter) {
                this.applyFilter('');
            }
        }
    };
    /**
     * @param {?} label
     * @return {?}
     */
    ThfComboComponent.prototype.getLabelFormatted = /**
     * @param {?} label
     * @return {?}
     */
    function (label) {
        /** @type {?} */
        var format = label;
        if (this.isFiltering ||
            (this.service && this.getInputValue() && !this.compareObjects(this.cacheOptions, this.visibleOptions) && this.shouldMarkLetters)) {
            /** @type {?} */
            var labelInput = this.getInputValue().toString().toLowerCase();
            /** @type {?} */
            var labelLowerCase = label.toLowerCase();
            /** @type {?} */
            var openTagBold = '<span class="thf-font-text-large-bold">';
            /** @type {?} */
            var closeTagBold = '</span>';
            /** @type {?} */
            var startString = void 0;
            /** @type {?} */
            var middleString = void 0;
            /** @type {?} */
            var endString = void 0;
            switch (this.filterMode) {
                case ThfComboFilterMode.startsWith:
                case ThfComboFilterMode.contains:
                    startString = label.substring(0, labelLowerCase.indexOf(labelInput));
                    middleString = label.substring(labelLowerCase.indexOf(labelInput), labelLowerCase.indexOf(labelInput) + labelInput.length);
                    endString = label.substring(labelLowerCase.indexOf(labelInput) + labelInput.length);
                    format = startString + openTagBold + middleString + closeTagBold + endString;
                    break;
                case ThfComboFilterMode.endsWith:
                    startString = label.substring(0, labelLowerCase.lastIndexOf(labelInput));
                    middleString = label.substring(labelLowerCase.lastIndexOf(labelInput));
                    format = startString + openTagBold + middleString + closeTagBold;
                    break;
            }
        }
        return this.safeHtml(format);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.safeHtml = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.sanitized.bypassSecurityTrustHtml(value);
    };
    /**
     * @param {?} keyCode
     * @return {?}
     */
    ThfComboComponent.prototype.isValidCharacterToSearch = /**
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        return (keyCode !== 9 && // tab
            keyCode !== 13 && // entet
            keyCode !== 16 && // shift
            keyCode !== 17 && // ctrl
            keyCode !== 18 && // alt
            keyCode !== 20 && // capslock
            keyCode !== 27 && // esc
            keyCode !== 37 && // seta
            keyCode !== 38 && // seta
            keyCode !== 39 && // seta
            keyCode !== 40 && // seta
            keyCode !== 93); // windows menu
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfComboComponent.prototype.searchOnEnter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.service && !this.selectedView && value.length >= this.filterMinlength) {
            this.controlApplyFilter(value);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfComboComponent.prototype.adjustContainerPosition = /**
     * @private
     * @return {?}
     */
    function () {
        this.controlPosition.adjustPosition(thfComboContainerPositionDefault);
    };
    /**
     * @private
     * @return {?}
     */
    ThfComboComponent.prototype.close = /**
     * @private
     * @return {?}
     */
    function () {
        this.comboOpen = false;
        this.changeDetector.detectChanges();
        this.comboIcon = 'thf-icon-arrow-down';
        this.removeListeners();
        this.isFiltering = false;
    };
    /**
     * @private
     * @return {?}
     */
    ThfComboComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.removeListeners();
        this.clickoutListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.wasClickedOnToggle(event);
        }));
        this.eventResizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            // timeout necessario pois a animação do thf-menu impacta no ajuste da posição do container.
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.adjustContainerPosition(); }), 250);
        }));
        window.addEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfComboComponent.prototype.open = /**
     * @private
     * @return {?}
     */
    function () {
        this.comboOpen = true;
        this.changeDetector.detectChanges();
        this.comboIcon = 'thf-icon-arrow-up';
        this.initializeListeners();
        this.inputElement.nativeElement.focus();
        this.scrollTo(this.getIndexSelectedView());
        this.setContainerPosition();
    };
    /**
     * @private
     * @return {?}
     */
    ThfComboComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfComboComponent.prototype.setContainerPosition = /**
     * @private
     * @return {?}
     */
    function () {
        this.controlPosition.setElements(this.containerElement.nativeElement, thfComboContainerOffset, this.inputElement, ['top', 'bottom'], true);
        this.adjustContainerPosition();
    };
    /**
     * @private
     * @param {?} scrollTop
     * @return {?}
     */
    ThfComboComponent.prototype.setScrollTop = /**
     * @private
     * @param {?} scrollTop
     * @return {?}
     */
    function (scrollTop) {
        if (this.contentElement) {
            this.contentElement.nativeElement.scrollTop = scrollTop;
        }
    };
    ThfComboComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-combo',
                    template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n    <div *ngIf=\"icon\" class=\"thf-field-icon-container-left\">\n      <span class=\"thf-icon thf-field-icon {{icon}}\" [class.thf-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inputElement\n      class=\"thf-input thf-combo-input\"\n      [class.thf-input-icon-left]=\"icon\"\n      autocomplete=\"off\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      (click)=\"toggleComboVisibility()\"\n      (keyup)=\"onKeyUp($event)\"\n      (keyup.enter)=\"searchOnEnter($event.target.value)\"\n      (keydown)=\"onKeyDown($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <span #iconArrow\n        class=\"thf-icon thf-field-icon {{ comboIcon }}\"\n        [class.thf-field-icon-disabled]=\"disabled\"\n        [class.thf-field-icon]=\"!disabled\"\n        (click)=\"toggleComboVisibility()\">\n      </span>\n    </div>\n  </div>\n\n  <div #containerElement class=\"thf-combo-container\" [hidden]=\"!comboOpen && !isServerSearching\">\n\n    <ng-container *ngIf=\"isServerSearching; then loadingTemplate; else optionsTemplate\">\n    </ng-container>\n\n  </div>\n\n  <thf-field-container-bottom></thf-field-container-bottom>\n\n</thf-field-container>\n\n<ng-template #loadingTemplate>\n  <div class=\"thf-combo-container-loading\">\n    <thf-loading></thf-loading>\n  </div>\n</ng-template>\n\n<ng-template #optionsTemplate>\n  <ng-container *ngIf=\"visibleOptions.length; then visibleOptionsTemplate ; else noDataTemplate\">\n  </ng-container>\n</ng-template>\n\n<ng-template #visibleOptionsTemplate>\n  <ul #contentElement class=\"thf-combo-container-content\">\n    <li *ngFor=\"let option of visibleOptions\"\n      [class.thf-combo-item-selected]=\"compareObjects(selectedView, option)\"\n      (click)=\"onOptionClick(option)\">\n      <a class=\"thf-combo-item\" [innerHTML]=\"getLabelFormatted(option?.label)\"></a>\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template #noDataTemplate>\n  <div class=\"thf-combo-container-no-data\">\n    <div class=\"thf-combo-no-data thf-text-center\">\n      <span>\n        {{ literals.noData }}\n      </span>\n    </div>\n  </div>\n</ng-template>\n",
                    providers: [
                        ThfComboFilterService,
                        ThfControlPositionService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ThfComboComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ThfComboComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    ThfComboComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: IterableDiffers },
        { type: ThfComboFilterService },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: ThfControlPositionService },
        { type: DomSanitizer }
    ]; };
    ThfComboComponent.propDecorators = {
        containerElement: [{ type: ViewChild, args: ['containerElement', { read: ElementRef, static: false },] }],
        contentElement: [{ type: ViewChild, args: ['contentElement', { read: ElementRef, static: false },] }],
        iconElement: [{ type: ViewChild, args: ['iconArrow', { read: ElementRef, static: true },] }],
        inputElement: [{ type: ViewChild, args: ['inputElement', { read: ElementRef, static: true },] }]
    };
    return ThfComboComponent;
}(ThfComboBaseComponent));
export { ThfComboComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype._isServerSearching;
    /** @type {?} */
    ThfComboComponent.prototype.comboIcon;
    /** @type {?} */
    ThfComboComponent.prototype.comboOpen;
    /** @type {?} */
    ThfComboComponent.prototype.differ;
    /** @type {?} */
    ThfComboComponent.prototype.isProcessingGetObjectByValue;
    /** @type {?} */
    ThfComboComponent.prototype.scrollTop;
    /** @type {?} */
    ThfComboComponent.prototype.service;
    /** @type {?} */
    ThfComboComponent.prototype.shouldMarkLetters;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.clickoutListener;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.eventResizeListener;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.filterSubscription;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.getSubscription;
    /** @type {?} */
    ThfComboComponent.prototype.containerElement;
    /** @type {?} */
    ThfComboComponent.prototype.contentElement;
    /** @type {?} */
    ThfComboComponent.prototype.iconElement;
    /** @type {?} */
    ThfComboComponent.prototype.inputElement;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.onScroll;
    /** @type {?} */
    ThfComboComponent.prototype.element;
    /** @type {?} */
    ThfComboComponent.prototype.differs;
    /** @type {?} */
    ThfComboComponent.prototype.defaultService;
    /** @type {?} */
    ThfComboComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.controlPosition;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.sanitized;
}
//# sourceMappingURL=data:application/json;base64,