/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por manipular os botões de aba.
 */
var ThfTabButtonComponent = /** @class */ (function () {
    function ThfTabButtonComponent(elementRef) {
        this.elementRef = elementRef;
        // Função sera emitida quando a tab ficar ativada
        this.activated = new EventEmitter();
        // Função sera emitida quando a tab ficar desabilitada ou escondida
        this.changeState = new EventEmitter();
        // Método recebido do usuário para ser disparado quando clicar na aba
        this.click = new EventEmitter();
    }
    Object.defineProperty(ThfTabButtonComponent.prototype, "active", {
        get: /**
         * @return {?}
         */
        function () {
            return this._active;
        },
        // Ativa o botão
        set: 
        // Ativa o botão
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._active = value;
            this.emitActivated();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfTabButtonComponent.prototype, "hide", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hide;
        },
        // Oculta o botão
        set: 
        // Oculta o botão
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hide = convertToBoolean(value);
            this.setDisplayOnHide();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfTabButtonComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ((changes.hide && changes.hide.currentValue) || (changes.disabled && changes.disabled.currentValue)) {
            this.changeState.emit(this);
        }
    };
    /**
     * @return {?}
     */
    ThfTabButtonComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.click.emit(this.id);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfTabButtonComponent.prototype.emitActivated = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.active) {
            this.activated.emit(this);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfTabButtonComponent.prototype.setDisplayOnHide = /**
     * @private
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.style.display = this.hide ? 'none' : '';
    };
    ThfTabButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-tab-button',
                    template: "<div\n  class=\"thf-tab-button-md\"\n  [attr.tabindex]=\"disabled ? null : 0\"\n  [class.thf-tab-button-active]=\"active\"\n  [class.thf-tab-button-disabled]=\"disabled\"\n  [class.thf-tab-button-sm]=\"small\"\n  (click)=\"onClick()\"\n  (keyup.enter)=\"onClick()\">\n\n  <span class=\"thf-tab-button-label\">\n    {{label}}\n  </span>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    ThfTabButtonComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ThfTabButtonComponent.propDecorators = {
        active: [{ type: Input, args: ['t-active',] }],
        disabled: [{ type: Input, args: ['t-disabled',] }],
        hide: [{ type: Input, args: ['t-hide',] }],
        id: [{ type: Input, args: ['t-id',] }],
        label: [{ type: Input, args: ['t-label',] }],
        small: [{ type: Input, args: ['t-small',] }],
        activated: [{ type: Output, args: ['t-activated',] }],
        changeState: [{ type: Output, args: ['t-change-state',] }],
        click: [{ type: Output, args: ['t-click',] }]
    };
    return ThfTabButtonComponent;
}());
export { ThfTabButtonComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTabButtonComponent.prototype._active;
    /**
     * @type {?}
     * @private
     */
    ThfTabButtonComponent.prototype._hide;
    /** @type {?} */
    ThfTabButtonComponent.prototype.disabled;
    /** @type {?} */
    ThfTabButtonComponent.prototype.id;
    /** @type {?} */
    ThfTabButtonComponent.prototype.label;
    /** @type {?} */
    ThfTabButtonComponent.prototype.small;
    /** @type {?} */
    ThfTabButtonComponent.prototype.activated;
    /** @type {?} */
    ThfTabButtonComponent.prototype.changeState;
    /** @type {?} */
    ThfTabButtonComponent.prototype.click;
    /**
     * @type {?}
     * @private
     */
    ThfTabButtonComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXRhYi1idXR0b24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi10YWJzL3RoZi10YWItYnV0dG9uL3RoZi10YWItYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxNQUFNLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRTdHLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7Ozs7OztBQVN2RDtJQW9ERSwrQkFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTs7UUFSbkIsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7O1FBRzVCLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7UUFHeEMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFFQSxDQUFDO0lBMUMvQyxzQkFBdUIseUNBQU07Ozs7UUFNN0I7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQztRQVRELGdCQUFnQjs7Ozs7OztRQUNoQixVQUE4QixLQUFjO1lBQzFDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBRXJCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN2QixDQUFDOzs7T0FBQTtJQVVELHNCQUFxQix1Q0FBSTs7OztRQU16QjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwQixDQUFDO1FBVEQsaUJBQWlCOzs7Ozs7O1FBQ2pCLFVBQTBCLEtBQWM7WUFDdEMsSUFBSSxDQUFDLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUVyQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUMxQixDQUFDOzs7T0FBQTs7Ozs7SUEwQkQsMkNBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDdEcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDOzs7O0lBRUQsdUNBQU87OztJQUFQO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQzs7Ozs7SUFFTyw2Q0FBYTs7OztJQUFyQjtRQUNFLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNCO0lBQ0gsQ0FBQzs7Ozs7SUFFTyxnREFBZ0I7Ozs7SUFBeEI7UUFDRSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3hFLENBQUM7O2dCQTFFRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIscVdBQThDO2lCQUMvQzs7OztnQkFkbUIsVUFBVTs7O3lCQXFCM0IsS0FBSyxTQUFDLFVBQVU7MkJBV2hCLEtBQUssU0FBQyxZQUFZO3VCQUdsQixLQUFLLFNBQUMsUUFBUTtxQkFXZCxLQUFLLFNBQUMsTUFBTTt3QkFHWixLQUFLLFNBQUMsU0FBUzt3QkFHZixLQUFLLFNBQUMsU0FBUzs0QkFHZixNQUFNLFNBQUMsYUFBYTs4QkFHcEIsTUFBTSxTQUFDLGdCQUFnQjt3QkFHdkIsTUFBTSxTQUFDLFNBQVM7O0lBMEJuQiw0QkFBQztDQUFBLEFBNUVELElBNEVDO1NBeEVZLHFCQUFxQjs7Ozs7O0lBRWhDLHdDQUF5Qjs7Ozs7SUFDekIsc0NBQXVCOztJQWN2Qix5Q0FBdUM7O0lBY3ZDLG1DQUEwQjs7SUFHMUIsc0NBQWdDOztJQUdoQyxzQ0FBaUM7O0lBR2pDLDBDQUFzRDs7SUFHdEQsNENBQTJEOztJQUczRCxzQ0FBOEM7Ozs7O0lBRWxDLDJDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcmVzcG9uc8OhdmVsIHBvciBtYW5pcHVsYXIgb3MgYm90w7VlcyBkZSBhYmEuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoZi10YWItYnV0dG9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RoZi10YWItYnV0dG9uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUaGZUYWJCdXR0b25Db21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gIHByaXZhdGUgX2FjdGl2ZTogYm9vbGVhbjtcbiAgcHJpdmF0ZSBfaGlkZTogYm9vbGVhbjtcblxuICAvLyBBdGl2YSBvIGJvdMOjb1xuICBASW5wdXQoJ3QtYWN0aXZlJykgc2V0IGFjdGl2ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2FjdGl2ZSA9IHZhbHVlO1xuXG4gICAgdGhpcy5lbWl0QWN0aXZhdGVkKCk7XG4gIH1cblxuICBnZXQgYWN0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gIH1cblxuICAvLyBEZXNhYmlsaXRhIG8gYm90w6NvXG4gIEBJbnB1dCgndC1kaXNhYmxlZCcpIGRpc2FibGVkOiBib29sZWFuO1xuXG4gIC8vIE9jdWx0YSBvIGJvdMOjb1xuICBASW5wdXQoJ3QtaGlkZScpIHNldCBoaWRlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faGlkZSA9IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xuXG4gICAgdGhpcy5zZXREaXNwbGF5T25IaWRlKCk7XG4gIH1cblxuICBnZXQgaGlkZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faGlkZTtcbiAgfVxuXG4gIC8vIElkZW50aWZpY2Fkb3IgZG8gY29tcG9uZW50ZVxuICBASW5wdXQoJ3QtaWQnKSBpZDogc3RyaW5nO1xuXG4gIC8vIFLDs3R1bG8gZG8gYm90w6NvXG4gIEBJbnB1dCgndC1sYWJlbCcpIGxhYmVsOiBzdHJpbmc7XG5cbiAgLy8gRGltaW51aSBvIHRhbWFuaG8gZG8gYm90w6NvXG4gIEBJbnB1dCgndC1zbWFsbCcpIHNtYWxsOiBib29sZWFuO1xuXG4gIC8vIEZ1bsOnw6NvIHNlcmEgZW1pdGlkYSBxdWFuZG8gYSB0YWIgZmljYXIgYXRpdmFkYVxuICBAT3V0cHV0KCd0LWFjdGl2YXRlZCcpIGFjdGl2YXRlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvLyBGdW7Dp8OjbyBzZXJhIGVtaXRpZGEgcXVhbmRvIGEgdGFiIGZpY2FyIGRlc2FiaWxpdGFkYSBvdSBlc2NvbmRpZGFcbiAgQE91dHB1dCgndC1jaGFuZ2Utc3RhdGUnKSBjaGFuZ2VTdGF0ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvLyBNw6l0b2RvIHJlY2ViaWRvIGRvIHVzdcOhcmlvIHBhcmEgc2VyIGRpc3BhcmFkbyBxdWFuZG8gY2xpY2FyIG5hIGFiYVxuICBAT3V0cHV0KCd0LWNsaWNrJykgY2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKChjaGFuZ2VzLmhpZGUgJiYgY2hhbmdlcy5oaWRlLmN1cnJlbnRWYWx1ZSkgfHwgKGNoYW5nZXMuZGlzYWJsZWQgJiYgY2hhbmdlcy5kaXNhYmxlZC5jdXJyZW50VmFsdWUpKSB7XG4gICAgICB0aGlzLmNoYW5nZVN0YXRlLmVtaXQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgb25DbGljaygpIHtcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuY2xpY2suZW1pdCh0aGlzLmlkKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGVtaXRBY3RpdmF0ZWQoKSB7XG4gICAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICB0aGlzLmFjdGl2YXRlZC5lbWl0KHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0RGlzcGxheU9uSGlkZSgpIHtcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gdGhpcy5oaWRlID8gJ25vbmUnIDogJyc7XG4gIH1cblxufVxuIl19