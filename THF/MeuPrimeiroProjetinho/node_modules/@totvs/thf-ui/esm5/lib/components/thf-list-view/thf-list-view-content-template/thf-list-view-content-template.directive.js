/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef } from '@angular/core';
/**
 * \@usedBy ThfListViewComponent
 *
 * \@description
 *
 * Esta diretiva permite que sejam apresentadas informações essenciais de cada item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <thf-list-view
 *   t-property-title="name"
 *   [t-items]="[{id: 1, name: "Register", email: register\@totvs.com}]">
 *
 *   <ng-template t-list-view-content-template let-item let-code="index">
 *     <div class="thf-row">
 *       <thf-info class="thf-md-6" t-label="Code" [t-value]="code"></thf-info>
 *       <thf-info class="thf-md-6" t-label="Email" [t-value]="item.email"></thf-info>
 *     </div>
 *   </ng-template>
 *
 * </thf-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <thf-list-view
 *    t-property-title="name"
 *    [t-items]="[{id: 1, name: "Register", email: register\@totvs.com}]">
 *
 *    <div *t-list-view-content-template="let item, let i=index" class="thf-row">
 *      <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
 *    </div>
 * </thf-list-view>
 * ...
 *
 * ```
 *
 * A diretiva **t-list-view-content-template**, possibilita também alterar o título dos itens. Para isto,
 * é necessário atribuir a referência da função que faz a alteração, à propriedade `t-title`,
 * a mesma deve retornar um valor do tipo *string*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * \@Component({
 *    selector: 'app-root',
 *    template: `
 *      ...
 *      <thf-list-view
 *        [t-items]="items">
 *        <ng-template t-list-view-content-template let-item [t-title]="customTitle">
 *          <div class="thf-row">
 *            <thf-info class="thf-md-12" t-label="Customer" [t-value]="item.customer"></thf-info>
 *          </div>
 *        </ng-template>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      customer: 'Supermarket 1',
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      customer: 'Supermarket 2'
 *    }];
 *
 *    customTitle(item) {
 *      return `${item.code} - ${item.product}`;
 *    }
 * }
 * ```
 */
var ThfListViewContentTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function ThfListViewContentTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    ThfListViewContentTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[t-list-view-content-template]'
                },] }
    ];
    /** @nocollapse */
    ThfListViewContentTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    ThfListViewContentTemplateDirective.propDecorators = {
        title: [{ type: Input, args: ['t-title',] }]
    };
    return ThfListViewContentTemplateDirective;
}());
export { ThfListViewContentTemplateDirective };
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Função que deve retornar um valor do tipo `string`, que será utilizado como o título de cada item da lista.
     *
     * > Por parâmetro será enviado o item corrente, onde poderá utilizá-lo para recuperar dados sobre o mesmo.
     * @type {?}
     */
    ThfListViewContentTemplateDirective.prototype.title;
    /** @type {?} */
    ThfListViewContentTemplateDirective.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWxpc3Qtdmlldy1jb250ZW50LXRlbXBsYXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtbGlzdC12aWV3L3RoZi1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZS90aGYtbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0Y5RDtJQWdCRSxzRUFBc0U7SUFDdEUsNkNBQW1CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUFJLENBQUM7O2dCQWpCdEQsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxnQ0FBZ0M7aUJBQzNDOzs7O2dCQXRGMEIsV0FBVzs7O3dCQWtHbkMsS0FBSyxTQUFDLFNBQVM7O0lBS2xCLDBDQUFDO0NBQUEsQUFuQkQsSUFtQkM7U0FoQlksbUNBQW1DOzs7Ozs7Ozs7Ozs7SUFXOUMsb0RBQTBDOztJQUc5QiwwREFBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEB1c2VkQnkgVGhmTGlzdFZpZXdDb21wb25lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RhIGRpcmV0aXZhIHBlcm1pdGUgcXVlIHNlamFtIGFwcmVzZW50YWRhcyBpbmZvcm1hw6fDtWVzIGVzc2VuY2lhaXMgZGUgY2FkYSBpdGVtLlxuICpcbiAqIERldmUtc2UgdXRpbGl6YXIgY29tbyBwYXLDom1ldHJvIGEgcmVmZXLDqm5jaWEgZG8gaXRlbSBlL291IMOtbmRpY2UsIHNlbmRvIHBvciBwYWRyw6NvIG8gaXRlbS5cbiAqICAtIEl0ZW06IGBpdGVtYCBkZXRlcm1pbmEgbyBpdGVtIGRhIGxpbmhhIGNvcnJlbnRlLlxuICogIC0gw41uZGljZTogYGluZGV4YCBkZXRlcm1pbmEgbyDDrW5kaWNlIGRhIGxpbmhhIGNvcnJlbnRlLlxuICpcbiAqIEVzdGEgZGlyZXRpdmEgcG9kZSBzZXIgdXNhZGEgZGUgZHVhcyBmb3JtYXM6IGV4cGzDrWNpdGEgb3UgKnN5bnRheCBzdWdhciouIFZlamEgYSBzZWd1aXIgYW1ib3MsIHJlc3BlY3RpdmFtZW50ZTpcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogPHRoZi1saXN0LXZpZXdcbiAqICAgdC1wcm9wZXJ0eS10aXRsZT1cIm5hbWVcIlxuICogICBbdC1pdGVtc109XCJbe2lkOiAxLCBuYW1lOiBcIlJlZ2lzdGVyXCIsIGVtYWlsOiByZWdpc3RlckB0b3R2cy5jb219XVwiPlxuICpcbiAqICAgPG5nLXRlbXBsYXRlIHQtbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUgbGV0LWl0ZW0gbGV0LWNvZGU9XCJpbmRleFwiPlxuICogICAgIDxkaXYgY2xhc3M9XCJ0aGYtcm93XCI+XG4gKiAgICAgICA8dGhmLWluZm8gY2xhc3M9XCJ0aGYtbWQtNlwiIHQtbGFiZWw9XCJDb2RlXCIgW3QtdmFsdWVdPVwiY29kZVwiPjwvdGhmLWluZm8+XG4gKiAgICAgICA8dGhmLWluZm8gY2xhc3M9XCJ0aGYtbWQtNlwiIHQtbGFiZWw9XCJFbWFpbFwiIFt0LXZhbHVlXT1cIml0ZW0uZW1haWxcIj48L3RoZi1pbmZvPlxuICogICAgIDwvZGl2PlxuICogICA8L25nLXRlbXBsYXRlPlxuICpcbiAqIDwvdGhmLWxpc3Qtdmlldz5cbiAqXG4gKiAuLi5cbiAqIGBgYFxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8dGhmLWxpc3Qtdmlld1xuICogICAgdC1wcm9wZXJ0eS10aXRsZT1cIm5hbWVcIlxuICogICAgW3QtaXRlbXNdPVwiW3tpZDogMSwgbmFtZTogXCJSZWdpc3RlclwiLCBlbWFpbDogcmVnaXN0ZXJAdG90dnMuY29tfV1cIj5cbiAqXG4gKiAgICA8ZGl2ICp0LWxpc3Qtdmlldy1jb250ZW50LXRlbXBsYXRlPVwibGV0IGl0ZW0sIGxldCBpPWluZGV4XCIgY2xhc3M9XCJ0aGYtcm93XCI+XG4gKiAgICAgIDx0aGYtaW5mbyBjbGFzcz1cInRoZi1tZC0xMlwiIHQtbGFiZWw9XCJFbWFpbFwiIFt0LXZhbHVlXT1cIml0ZW0uZW1haWxcIj48L3RoZi1pbmZvPlxuICogICAgPC9kaXY+XG4gKiA8L3RoZi1saXN0LXZpZXc+XG4gKiAuLi5cbiAqXG4gKiBgYGBcbiAqXG4gKiBBIGRpcmV0aXZhICoqdC1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZSoqLCBwb3NzaWJpbGl0YSB0YW1iw6ltIGFsdGVyYXIgbyB0w610dWxvIGRvcyBpdGVucy4gUGFyYSBpc3RvLFxuICogw6kgbmVjZXNzw6FyaW8gYXRyaWJ1aXIgYSByZWZlcsOqbmNpYSBkYSBmdW7Dp8OjbyBxdWUgZmF6IGEgYWx0ZXJhw6fDo28sIMOgIHByb3ByaWVkYWRlIGB0LXRpdGxlYCxcbiAqIGEgbWVzbWEgZGV2ZSByZXRvcm5hciB1bSB2YWxvciBkbyB0aXBvICpzdHJpbmcqLiBWZWphIG8gZXhlbXBsbyBhIHNlZ3VpcjpcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogQENvbXBvbmVudCh7XG4gKiAgICBzZWxlY3RvcjogJ2FwcC1yb290JyxcbiAqICAgIHRlbXBsYXRlOiBgXG4gKiAgICAgIC4uLlxuICogICAgICA8dGhmLWxpc3Qtdmlld1xuICogICAgICAgIFt0LWl0ZW1zXT1cIml0ZW1zXCI+XG4gKiAgICAgICAgPG5nLXRlbXBsYXRlIHQtbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUgbGV0LWl0ZW0gW3QtdGl0bGVdPVwiY3VzdG9tVGl0bGVcIj5cbiAqICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aGYtcm93XCI+XG4gKiAgICAgICAgICAgIDx0aGYtaW5mbyBjbGFzcz1cInRoZi1tZC0xMlwiIHQtbGFiZWw9XCJDdXN0b21lclwiIFt0LXZhbHVlXT1cIml0ZW0uY3VzdG9tZXJcIj48L3RoZi1pbmZvPlxuICogICAgICAgICAgPC9kaXY+XG4gKiAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAqICAgICAgLi4uXG4gKiAgICBgXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XG4gKiAgICBwdWJsaWMgaXRlbXMgPSBbe1xuICogICAgICBjb2RlOiAxMjAwLFxuICogICAgICBwcm9kdWN0OiAnUmljZScsXG4gKiAgICAgIGN1c3RvbWVyOiAnU3VwZXJtYXJrZXQgMScsXG4gKiAgICB9LCB7XG4gKiAgICAgIGNvZGU6IDEzNTUsXG4gKiAgICAgIHByb2R1Y3Q6ICdCZWFuJyxcbiAqICAgICAgY3VzdG9tZXI6ICdTdXBlcm1hcmtldCAyJ1xuICogICAgfV07XG4gKlxuICogICAgY3VzdG9tVGl0bGUoaXRlbSkge1xuICogICAgICByZXR1cm4gYCR7aXRlbS5jb2RlfSAtICR7aXRlbS5wcm9kdWN0fWA7XG4gKiAgICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3QtbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBUaGZMaXN0Vmlld0NvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZSB7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRnVuw6fDo28gcXVlIGRldmUgcmV0b3JuYXIgdW0gdmFsb3IgZG8gdGlwbyBgc3RyaW5nYCwgcXVlIHNlcsOhIHV0aWxpemFkbyBjb21vIG8gdMOtdHVsbyBkZSBjYWRhIGl0ZW0gZGEgbGlzdGEuXG4gICAqXG4gICAqID4gUG9yIHBhcsOibWV0cm8gc2Vyw6EgZW52aWFkbyBvIGl0ZW0gY29ycmVudGUsIG9uZGUgcG9kZXLDoSB1dGlsaXrDoS1sbyBwYXJhIHJlY3VwZXJhciBkYWRvcyBzb2JyZSBvIG1lc21vLlxuICAgKi9cbiAgQElucHV0KCd0LXRpdGxlJykgdGl0bGU6IChpdGVtKSA9PiBzdHJpbmc7XG5cbiAgLy8gTmVjZXNzw6FyaW8gbWFudGVyIHRlbXBsYXRlUmVmIHBhcmEgbyBmdW5jaW9uYW1lbnRvIGRvIHJvdyB0ZW1wbGF0ZS5cbiAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cblxufVxuIl19