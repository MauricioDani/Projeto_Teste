/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, convertToBoolean, isEquals, thfLocaleDefault } from '../../../utils/util';
import { requiredFailed } from '../validators';
import { ThfUploadFile } from './thf-upload-file';
import { ThfUploadStatus } from './thf-upload-status.enum';
/** @type {?} */
export var thfUploadLiteralsDefault = {
    en: (/** @type {?} */ ({
        selectFile: 'Select file',
        deleteFile: 'Delete',
        cancel: 'Cancel',
        tryAgain: 'Try again',
        startSending: 'Start sending'
    })),
    es: (/** @type {?} */ ({
        selectFile: 'Seleccionar archivo',
        deleteFile: 'Borrar',
        cancel: 'Cancelar',
        tryAgain: 'Intentar de nuevo',
        startSending: 'Iniciar carga'
    })),
    pt: (/** @type {?} */ ({
        selectFile: 'Selecionar arquivo',
        deleteFile: 'Excluir',
        cancel: 'Cancelar',
        tryAgain: 'Tentar Novamente',
        startSending: 'Iniciar envio'
    }))
};
/** @type {?} */
var thfUploadFormFieldDefault = 'files';
/**
 * \@description
 *
 * O componente `thf-upload` permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
 * Este componente também possibilita algumas configurações como:
 *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
 *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
 * clique em enviar.
 *  - Restrições de formatos de arquivo e tamanho.
 *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
 *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
 */
var ThfUploadBaseComponent = /** @class */ (function () {
    function ThfUploadBaseComponent(uploadService) {
        this.uploadService = uploadService;
        /**
         * Define o valor do atributo `name` do componente.
         */
        this.name = 'file';
        /**
         * \@optional
         *
         * \@description
         *
         * Define se o envio do arquivo será automático ao selecionar o mesmo.
         *
         * \@default `false`
         */
        this.autoUpload = false;
        /**
         * Função que será executada no momento de realizar o envio do arquivo,
         * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
         * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
         * que será enviado em conjunto com o arquivo na requisição, por exemplo:
         *
         * ```
         *   event.data = {id: 'id do usuario'};
         * ```
         */
        this.onUpload = new EventEmitter();
        /**
         * Evento será disparado quando ocorrer algum erro no envio do arquivo.
         * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
         */
        this.onError = new EventEmitter();
        /**
         * Evento será disparado quando o envio do arquivo for realizado com sucesso.
         * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
         */
        this.onSuccess = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da *tag* `form`.
        this.ngModelChange = new EventEmitter();
    }
    Object.defineProperty(ThfUploadBaseComponent.prototype, "hideSelectButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideSelectButton;
        },
        /**
         * @optional
         *
         * @description
         *
         * Omite o botão de seleção de arquivos.
         *
         * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
         * pela chamada do método `selectFiles()` para seleção de arquivos.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Omite o botão de seleção de arquivos.
         *
         * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
         * pela chamada do método `selectFiles()` para seleção de arquivos.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideSelectButton = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadBaseComponent.prototype, "hideSendButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideSendButton;
        },
        /**
         * @optional
         *
         * @description
         *
         * Omite o botão de envio de arquivos.
         *
         * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
         * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Omite o botão de envio de arquivos.
         *
         * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
         * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideSendButton = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfUploadLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-upload`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfUploadLiterals = {
         *    selectFile: 'Buscar arquivo',
         *    deleteFile: 'Deletar',
         *    cancel: 'Desistir',
         *    tryAgain: 'Recomeçar',
         *    startSending: 'Enviar'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfUploadLiterals = {
         *    deleteFile: 'Deletar'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <thf-upload
         *   [t-literals]="customLiterals">
         * </thf-upload>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-upload`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfUploadLiterals = {
         *    selectFile: 'Buscar arquivo',
         *    deleteFile: 'Deletar',
         *    cancel: 'Desistir',
         *    tryAgain: 'Recomeçar',
         *    startSending: 'Enviar'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfUploadLiterals = {
         *    deleteFile: 'Deletar'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <thf-upload
         *   [t-literals]="customLiterals">
         * </thf-upload>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = tslib_1.__assign({}, thfUploadLiteralsDefault[thfLocaleDefault], thfUploadLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfUploadLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadBaseComponent.prototype, "fileRestrictions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fileRestrictions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto que segue a definição da interface `ThfFileRestrictions`,
         * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto que segue a definição da interface `ThfFileRestrictions`,
         * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
         * @param {?} restrictions
         * @return {?}
         */
        function (restrictions) {
            this._fileRestrictions = restrictions;
            this.setAllowedExtensions(restrictions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadBaseComponent.prototype, "formField", {
        get: /**
         * @return {?}
         */
        function () {
            return this._formField;
        },
        /**
         * @optional
         *
         * @description
         *
         * Nome do campo de formulário que será enviado para o serviço informado na propriedade `t-url`.
         *
         * @default `files`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Nome do campo de formulário que será enviado para o serviço informado na propriedade `t-url`.
         *
         * \@default `files`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._formField = value && typeof value === 'string' ? value : thfUploadFormFieldDefault;
            this.getUploadService().formField = this.formField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será desabilitado.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = convertToBoolean(value);
            this.validateModel(this.currentFiles);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfUploadBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.currentFiles);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (model) {
            if (!isEquals(this.currentFiles, model)) {
                this.currentFiles = this.parseFiles(model);
            }
        }
        else {
            this.currentFiles = undefined;
        }
    };
    /**
     * @protected
     * @param {?} currentFilesLength
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.isExceededFileLimit = /**
     * @protected
     * @param {?} currentFilesLength
     * @return {?}
     */
    function (currentFilesLength) {
        return this.isMultiple &&
            this.fileRestrictions &&
            this.fileRestrictions.maxFiles > 0 &&
            this.fileRestrictions.maxFiles <= currentFilesLength;
    };
    // Faz o parse dos arquivos selecionados para arquivos do formato ThfUploadFile e atualiza os arquivos correntes.
    // Faz o parse dos arquivos selecionados para arquivos do formato ThfUploadFile e atualiza os arquivos correntes.
    /**
     * @protected
     * @param {?} files
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.parseFiles = 
    // Faz o parse dos arquivos selecionados para arquivos do formato ThfUploadFile e atualiza os arquivos correntes.
    /**
     * @protected
     * @param {?} files
     * @return {?}
     */
    function (files) {
        /** @type {?} */
        var thfUploadFiles = this.currentFiles || [];
        /** @type {?} */
        var filesLength = files.length;
        for (var i = 0; i < filesLength; i++) {
            if (this.isExceededFileLimit(thfUploadFiles.length)) {
                break;
            }
            /** @type {?} */
            var file = new ThfUploadFile(files[i]);
            if (this.checkRestrictions(file)) {
                thfUploadFiles = this.insertFileInFiles(file, thfUploadFiles);
            }
        }
        return thfUploadFiles;
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    // Verifica se o arquivo está de acordo com as restrições.
    // Verifica se o arquivo está de acordo com as restrições.
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.checkRestrictions = 
    // Verifica se o arquivo está de acordo com as restrições.
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var restrictions = this.fileRestrictions;
        if (restrictions) {
            /** @type {?} */
            var allowedExtensions = restrictions.allowedExtensions;
            /** @type {?} */
            var minFileSize = restrictions.minFileSize || 0;
            /** @type {?} */
            var maxFileSize = restrictions.maxFileSize || 31457280;
            // 30MB
            /** @type {?} */
            var isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
            /** @type {?} */
            var isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
            return isAccept && isAcceptSize;
        }
        return true;
    };
    /**
     * @private
     * @param {?} file
     * @param {?} files
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.existsFileSameName = /**
     * @private
     * @param {?} file
     * @param {?} files
     * @return {?}
     */
    function (file, files) {
        return files.some((/**
         * @param {?} currentFile
         * @return {?}
         */
        function (currentFile) { return file.name === currentFile.name; }));
    };
    /**
     * @private
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.getUploadService = /**
     * @private
     * @return {?}
     */
    function () {
        return this.uploadService;
    };
    /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.insertFileInFiles = /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    function (newFile, files) {
        if (this.existsFileSameName(newFile, files)) {
            return this.updateExistsFileInFiles(newFile, files);
        }
        if (this.isMultiple) {
            files.push(newFile);
        }
        else {
            files.splice(0, files.length, newFile);
        }
        return files;
    };
    /**
     * @private
     * @param {?} extension
     * @param {?=} allowedExtensions
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.isAllowedExtension = /**
     * @private
     * @param {?} extension
     * @param {?=} allowedExtensions
     * @return {?}
     */
    function (extension, allowedExtensions) {
        if (allowedExtensions === void 0) { allowedExtensions = []; }
        return allowedExtensions.some((/**
         * @param {?} ext
         * @return {?}
         */
        function (ext) { return ext.toLowerCase() === extension; }));
    };
    /**
     * @private
     * @param {?=} restrictions
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.setAllowedExtensions = /**
     * @private
     * @param {?=} restrictions
     * @return {?}
     */
    function (restrictions) {
        if (restrictions === void 0) { restrictions = {}; }
        /** @type {?} */
        var _allowedExtensions = restrictions.allowedExtensions || [];
        this.allowedExtensions = _allowedExtensions.join(',');
    };
    /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    ThfUploadBaseComponent.prototype.updateExistsFileInFiles = /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    function (newFile, files) {
        /** @type {?} */
        var fileIndex = files.findIndex((/**
         * @param {?} currentFile
         * @return {?}
         */
        function (currentFile) { return newFile.name === currentFile.name && currentFile.status !== ThfUploadStatus.Uploaded; }));
        if (fileIndex !== -1) {
            files.splice(fileIndex, 1, newFile);
        }
        return files;
    };
    ThfUploadBaseComponent.propDecorators = {
        hideSelectButton: [{ type: Input, args: ['t-hide-select-button',] }],
        hideSendButton: [{ type: Input, args: ['t-hide-send-button',] }],
        label: [{ type: Input, args: ['t-label',] }],
        literals: [{ type: Input, args: ['t-literals',] }],
        help: [{ type: Input, args: ['t-help',] }],
        url: [{ type: Input, args: ['t-url',] }],
        fileRestrictions: [{ type: Input, args: ['t-restrictions',] }],
        name: [{ type: Input, args: ['name',] }],
        formField: [{ type: Input, args: ['t-form-field',] }],
        disabled: [{ type: Input, args: ['t-disabled',] }],
        autoUpload: [{ type: Input, args: ['t-auto-upload',] }],
        isMultiple: [{ type: Input, args: ['t-multiple',] }],
        optional: [{ type: Input, args: ['t-optional',] }],
        required: [{ type: Input, args: ['t-required',] }],
        onUpload: [{ type: Output, args: ['t-upload',] }],
        onError: [{ type: Output, args: ['t-error',] }],
        onSuccess: [{ type: Output, args: ['t-success',] }],
        ngModelChange: [{ type: Output, args: ['ngModelChange',] }]
    };
    return ThfUploadBaseComponent;
}());
export { ThfUploadBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._fileRestrictions;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._formField;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._hideSelectButton;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._hideSendButton;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._required;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.allowedExtensions;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.currentFiles;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.onModelChange;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype.validatorChange;
    /**
     * Rótulo do campo.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.help;
    /**
     * URL que deve ser feita a requisição com os arquivos selecionados.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.url;
    /**
     * Define o valor do atributo `name` do componente.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.name;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se o envio do arquivo será automático ao selecionar o mesmo.
     *
     * \@default `false`
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.autoUpload;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se pode selecionar mais de um arquivo.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.isMultiple;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     *  - O campo conter `t-required`;
     *  - Não possuir `t-help` e/ou `t-label`.
     *
     * \@default `false`
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.optional;
    /**
     * Função que será executada no momento de realizar o envio do arquivo,
     * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
     * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
     * que será enviado em conjunto com o arquivo na requisição, por exemplo:
     *
     * ```
     *   event.data = {id: 'id do usuario'};
     * ```
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.onUpload;
    /**
     * Evento será disparado quando ocorrer algum erro no envio do arquivo.
     * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.onError;
    /**
     * Evento será disparado quando o envio do arquivo for realizado com sucesso.
     * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.onSuccess;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.ngModelChange;
    /**
     * @type {?}
     * @protected
     */
    ThfUploadBaseComponent.prototype.uploadService;
}
//# sourceMappingURL=data:application/json;base64,