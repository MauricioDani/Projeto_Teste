/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { v4 as uuid } from 'uuid';
import { browserLanguage, convertToBoolean, isKeyCodeEnter, thfLocaleDefault } from '../../utils/util';
/** @type {?} */
export var thfDisclaimerGroupLiteralsDefault = {
    en: { removeAll: 'Remove all' },
    es: { removeAll: 'Eliminar todos' },
    pt: { removeAll: 'Remover todos' }
};
/**
 * \@description
 *
 * O componente `thf-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
 *
 * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
 * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
 *
 * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
 * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
 *
 * > Veja a integração destas funcionalidade no componente [thf-page-list](/documentation/thf-page-list).
 */
var ThfDisclaimerGroupBaseComponent = /** @class */ (function () {
    function ThfDisclaimerGroupBaseComponent(differs) {
        this._disclaimers = [];
        this._hideRemoveAll = false;
        this.previousDisclaimers = [];
        this.literals = tslib_1.__assign({}, thfDisclaimerGroupLiteralsDefault[thfLocaleDefault], thfDisclaimerGroupLiteralsDefault[browserLanguage()]);
        /**
         * Função que será disparada quando a lista de *disclaimers* for modificada.
         */
        this.change = new EventEmitter();
        this.differ = differs.find([]).create(null);
    }
    Object.defineProperty(ThfDisclaimerGroupBaseComponent.prototype, "disclaimers", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disclaimers;
        },
        /** Lista de *disclaimers*. */
        /**
         * @description
         *
         * Lista de *disclaimers*.
         *
         * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `ThfDisclaimer`.
         *
         * Exemplo adicionando um *disclaimer* no array:
         *
         * ```
         * this.disclaimers = [...this.disclaimers, disclaimer];
         * ```
         *
         * ou
         *
         * ```
         * this.disclaimers = this.disclaimers.concat(disclaimer);
         * ```
         */
        set: /** Lista de *disclaimers*. */
        /**
         * \@description
         *
         * Lista de *disclaimers*.
         *
         * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `ThfDisclaimer`.
         *
         * Exemplo adicionando um *disclaimer* no array:
         *
         * ```
         * this.disclaimers = [...this.disclaimers, disclaimer];
         * ```
         *
         * ou
         *
         * ```
         * this.disclaimers = this.disclaimers.concat(disclaimer);
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.previousDisclaimers = tslib_1.__spread(this.disclaimers);
            this._disclaimers = this.checkDisclaimers(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDisclaimerGroupBaseComponent.prototype, "hideRemoveAll", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideRemoveAll;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta o botão para remover todos os *disclaimers* do grupo.
         *
         * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta o botão para remover todos os *disclaimers* do grupo.
         *
         * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideRemoveAll = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.checkChanges();
    };
    /**
     * @param {?} disclaimer
     * @param {?=} emitChange
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.closeItem = /**
     * @param {?} disclaimer
     * @param {?=} emitChange
     * @return {?}
     */
    function (disclaimer, emitChange) {
        if (emitChange === void 0) { emitChange = true; }
        /** @type {?} */
        var itemIndex = this.disclaimers.findIndex((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d['$id'] === disclaimer['$id']; }));
        this.disclaimers.splice(itemIndex, 1);
        if (emitChange) {
            this.emitChangeDisclaimers();
        }
    };
    /**
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.isRemoveAll = /**
     * @return {?}
     */
    function () {
        return !this.hideRemoveAll && this.disclaimers.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return !c.hideClose; })).length > 1;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.onKeyPress = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (isKeyCodeEnter(event)) {
            this.removeAllItems();
        }
    };
    /**
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.removeAllItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var removeItems = [];
        this.disclaimers.forEach((/**
         * @param {?} disclaimer
         * @return {?}
         */
        function (disclaimer) {
            if (!disclaimer.hideClose) {
                removeItems.push(disclaimer);
            }
        }));
        removeItems.forEach((/**
         * @param {?} disclaimer
         * @return {?}
         */
        function (disclaimer) { return _this.closeItem(disclaimer, false); }));
        this.emitChangeDisclaimers();
    };
    /**
     * @private
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.checkChanges = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.differ) {
            /** @type {?} */
            var changes = this.differ.diff(this.disclaimers);
            if (changes && this.disclaimersAreChanged(this.disclaimers)) {
                this.emitChangeDisclaimers();
            }
        }
    };
    /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.checkDisclaimers = /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    function (disclaimers) {
        if (Array.isArray(disclaimers)) {
            for (var i = 0; i < disclaimers.length; i++) {
                /** @type {?} */
                var disclaimer = disclaimers[i];
                if (disclaimer.value || disclaimer.value === 0 || disclaimer.value === false) {
                    disclaimer['$id'] = uuid();
                }
                else {
                    disclaimers.splice(i, 1);
                    i--;
                }
            }
            return disclaimers;
        }
        return [];
    };
    /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.disclaimersAreChanged = /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    function (disclaimers) {
        var _this = this;
        /** @type {?} */
        var currentValues = disclaimers;
        if (currentValues.length !== this.previousDisclaimers.length) {
            return true;
        }
        return currentValues.some((/**
         * @param {?} disclaimer
         * @param {?} index
         * @return {?}
         */
        function (disclaimer, index) { return disclaimer.value !== _this.previousDisclaimers[index].value
            || disclaimer.property !== _this.previousDisclaimers[index].property; }));
    };
    /**
     * @private
     * @return {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.emitChangeDisclaimers = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.change.emit(_this.disclaimers);
        }));
        this.previousDisclaimers = tslib_1.__spread(this._disclaimers);
    };
    ThfDisclaimerGroupBaseComponent.propDecorators = {
        disclaimers: [{ type: Input, args: ['t-disclaimers',] }],
        hideRemoveAll: [{ type: Input, args: ['t-hide-remove-all',] }],
        title: [{ type: Input, args: ['t-title',] }],
        change: [{ type: Output, args: ['t-change',] }]
    };
    return ThfDisclaimerGroupBaseComponent;
}());
export { ThfDisclaimerGroupBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfDisclaimerGroupBaseComponent.prototype._disclaimers;
    /**
     * @type {?}
     * @private
     */
    ThfDisclaimerGroupBaseComponent.prototype._hideRemoveAll;
    /**
     * @type {?}
     * @private
     */
    ThfDisclaimerGroupBaseComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    ThfDisclaimerGroupBaseComponent.prototype.previousDisclaimers;
    /** @type {?} */
    ThfDisclaimerGroupBaseComponent.prototype.literals;
    /**
     * Título do grupo de *disclaimers*.
     * @type {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.title;
    /**
     * Função que será disparada quando a lista de *disclaimers* for modificada.
     * @type {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.change;
}
//# sourceMappingURL=data:application/json;base64,