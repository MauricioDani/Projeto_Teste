/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço utilizado para favoritar/desfavoritar uma url no componente thf-breadcrumb.
 * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
 * objeto deve ser retornado.
 * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
 * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
 * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
 * junto com a requisição.
 *
 */
var ThfBreadcrumbFavoriteService = /** @class */ (function () {
    function ThfBreadcrumbFavoriteService(http) {
        this.http = http;
    }
    Object.defineProperty(ThfBreadcrumbFavoriteService.prototype, "url", {
        get: /**
         * @return {?}
         */
        function () { return this._url; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfBreadcrumbFavoriteService.prototype, "bodyParams", {
        get: /**
         * @return {?}
         */
        function () { return this._bodyParams; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @param {?} params
     * @param {?} item
     * @return {?}
     */
    ThfBreadcrumbFavoriteService.prototype.configService = /**
     * @param {?} url
     * @param {?} params
     * @param {?} item
     * @return {?}
     */
    function (url, params, item) {
        this._url = url;
        this._bodyParams = {
            isFavorite: false,
            url: item.link,
            params: params
        };
    };
    /**
     * @param {?} status
     * @return {?}
     */
    ThfBreadcrumbFavoriteService.prototype.sendStatusFavorite = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        this.bodyParams['isFavorite'] = status;
        return this.http.post(this.url, this.bodyParams);
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbFavoriteService.prototype.getFavorite = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
    };
    ThfBreadcrumbFavoriteService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ThfBreadcrumbFavoriteService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return ThfBreadcrumbFavoriteService;
}());
export { ThfBreadcrumbFavoriteService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbFavoriteService.prototype._url;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbFavoriteService.prototype._bodyParams;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbFavoriteService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWJyZWFkY3J1bWItZmF2b3JpdGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtYnJlYWRjcnVtYi90aGYtYnJlYWRjcnVtYi1mYXZvcml0ZS90aGYtYnJlYWRjcnVtYi1mYXZvcml0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O0FBa0IzQztJQVVFLHNDQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQUksQ0FBQztJQUp6QyxzQkFBSSw2Q0FBRzs7OztRQUFQLGNBQW9CLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBRXZDLHNCQUFJLG9EQUFVOzs7O1FBQWQsY0FBMkIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQzs7O09BQUE7Ozs7Ozs7SUFJckQsb0RBQWE7Ozs7OztJQUFiLFVBQWMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxXQUFXLEdBQUc7WUFDakIsVUFBVSxFQUFFLEtBQUs7WUFDakIsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFRCx5REFBa0I7Ozs7SUFBbEIsVUFBbUIsTUFBTTtRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUN2QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7SUFFRCxrREFBVzs7O0lBQVg7UUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDO0lBQ25HLENBQUM7O2dCQTVCRixVQUFVOzs7O2dCQW5CRixVQUFVOztJQWdEbkIsbUNBQUM7Q0FBQSxBQTdCRCxJQTZCQztTQTVCWSw0QkFBNEI7Ozs7OztJQUV2Qyw0Q0FBcUI7Ozs7O0lBQ3JCLG1EQUE0Qjs7Ozs7SUFNaEIsNENBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNlcnZpw6dvIHV0aWxpemFkbyBwYXJhIGZhdm9yaXRhci9kZXNmYXZvcml0YXIgdW1hIHVybCBubyBjb21wb25lbnRlIHRoZi1icmVhZGNydW1iLlxuICogQSBBUEkgZGV2ZSByZXRvcm5hciB1bSBvYmpldG8gbm8gZm9ybWF0byB7IGlzRmF2b3JpdGU6IGJvb2xlYW5vLCB1cmw6IHN0cmluZyB9LiBFbSBhbWJvcyBvcyBtw6l0b2RvcywgR0VUIGUgUE9TVCBlc3RlXG4gKiBvYmpldG8gZGV2ZSBzZXIgcmV0b3JuYWRvLlxuICogQW8gYWx0ZXJhciBvIHN0YXR1cyBkZSBmYXZvcml0bywgYSBBUEkgZGV2ZSByZXRvcm5hciBvIG9iamV0byBhY2ltYSwgY29tIG8gbm92byBzdGF0dXMgYXR1YWxpemFkby5cbiAqIE5vIG3DqXRvZG8gUE9TVCwgZXhpc3RlIGEgcG9zc2liaWxpZGFkZSBkZSBzZXIgZW52aWFkbyBwYXLDom1ldHJvcyBqdW50byBjb20gYSByZXF1aXNpw6fDo28uIE5lc3RlIGNhc28sIG8gb2JqZXRvIGVudmlhZG9cbiAqIHBhcmEgYSBBUEkgdGVyw6EgbyBmb3JtYXRvOiB7IGlzRmF2b3JpdGU6IGJvb2xlYW5vLCB1cmw6IHN0cmluZywgcGFyYW1zOiB7fSB9LCBvbmRlIHBhcmFtcyDDqSBvIG9iamV0byBxdWUgcG9kZSBzZXIgZW52aWFkb1xuICoganVudG8gY29tIGEgcmVxdWlzacOnw6NvLlxuICpcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRoZkJyZWFkY3J1bWJGYXZvcml0ZVNlcnZpY2Uge1xuXG4gIHByaXZhdGUgX3VybDogc3RyaW5nO1xuICBwcml2YXRlIF9ib2R5UGFyYW1zOiBvYmplY3Q7XG5cbiAgZ2V0IHVybCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5fdXJsOyB9XG5cbiAgZ2V0IGJvZHlQYXJhbXMoKTogb2JqZWN0IHsgcmV0dXJuIHRoaXMuX2JvZHlQYXJhbXM7IH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxuXG4gIGNvbmZpZ1NlcnZpY2UodXJsLCBwYXJhbXMsIGl0ZW0pIHtcbiAgICB0aGlzLl91cmwgPSB1cmw7XG4gICAgdGhpcy5fYm9keVBhcmFtcyA9IHtcbiAgICAgIGlzRmF2b3JpdGU6IGZhbHNlLFxuICAgICAgdXJsOiBpdGVtLmxpbmssXG4gICAgICBwYXJhbXM6IHBhcmFtc1xuICAgIH07XG4gIH1cblxuICBzZW5kU3RhdHVzRmF2b3JpdGUoc3RhdHVzKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICB0aGlzLmJvZHlQYXJhbXNbJ2lzRmF2b3JpdGUnXSA9IHN0YXR1cztcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodGhpcy51cmwsIHRoaXMuYm9keVBhcmFtcyk7XG4gIH1cblxuICBnZXRGYXZvcml0ZSgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHRoaXMudXJsLCB7IHJlc3BvbnNlVHlwZTogJ2pzb24nLCBwYXJhbXM6IHsgdXJsOiB0aGlzLmJvZHlQYXJhbXNbJ3VybCddIH19KTtcbiAgfVxufVxuIl19