/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef } from '@angular/core';
/**
 * \@usedBy ThfTableComponent
 *
 * \@description
 *
 * Esta diretiva permite que seja apresentada informações adicionais a respeito de uma determinada linha de
 * dados, de forma que possam ser exibidas e ocultadas através do botão de acionamento.
 *
 * > Quando utilizada, sobrepõe as funcionalidade básicas do *master-detail*.
 *
 * Em seu uso, deve-se utilizar como parâmetro a referência da _linha_ e/ou _índice_, sendo por padrão linha. Caso não seja declarado,
 * o componente não exibirá conteúdo.
 *  - Linha: `row` determina o item da linha corrente.
 *  - Índice: `rowIndex` determina o índice da linha corrente.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <thf-table
 *   [t-columns]="columns"
 *   [t-items]="items">
 *     <ng-template t-table-row-template let-rowItem let-i="rowIndex" [t-table-row-template-show]="isShow">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </ng-template>
 * ...
 * ```
 *
 * ```
 * ...
 * <thf-table
 *   [t-columns]="columns"
 *   [t-items]="items">
 *     <div *t-table-row-template="let rowItem, let i=rowIndex">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </div>
 * ...
 *
 * ```
 *
 * A diretiva **t-table-row-template**, possibilita também que determinada linha apresente ou não seu _template_. Para isto,
 * é necessário atribuir a referência da função que faz esta verificação, à propriedade `t-table-row-template-show`,
 * a mesma deve retornar um valor do tipo *boolean*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * \@Component({
 *    selector: 'app-root',
 *    templateUrl: `
 *      ...
 *      <thf-table
 *        [t-columns]="columns"
 *        [t-items]="items">
 *          <ng-template t-table-row-template let-rowItem let-i="rowIndex" [t-table-row-template-show]="isUndelivered">
 *            <detail-row [row]="rowItem"> </detail-row>
 *          </div>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public dataTable = [{
 *      code: 1200,
 *      product: 'Rice',
 *      costumer: 'Supermarket 1',
 *      quantity: 3,
 *      status: 'delivered',
 *      license_plate: 'MDJD9191',
 *      batch_product: 18041822,
 *      driver: 'José Oliveira'
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      costumer: 'Supermarket 2',
 *      quantity: 1,
 *      status: 'transport',
 *      license_plate: 'XXA5454',
 *      batch_product: 18041821,
 *      driver: 'Francisco Pereira'
 *    }];
 *
 *    isUndelivered(row, index: number) {
 *      return row.status !== 'delivered';
 *    }
 * }
 * ```
 * > No exemplo acima, somente será disponibilizado os detalhes de informações nas linhas cujo o valor de `status`
 * não correspondam à *delivered*.
 */
var ThfTableRowTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function ThfTableRowTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    ThfTableRowTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[t-table-row-template]'
                },] }
    ];
    /** @nocollapse */
    ThfTableRowTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    ThfTableRowTemplateDirective.propDecorators = {
        thfTableRowTemplateShow: [{ type: Input, args: ['t-table-row-template-show',] }]
    };
    return ThfTableRowTemplateDirective;
}());
export { ThfTableRowTemplateDirective };
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Função que deve retornar um valor booleano, informando se apresentará o template da linha.
     * Serão passados o objeto da linha e o indice da mesma por parâmetro, para que seja possível
     * tomar uma decisão a partir do objeto da linha corrente.
     *
     * Caso não ser utilizado esta propriedade, serão apresentados todos os detalhes das linhas.
     *
     * \@default `true`
     * @type {?}
     */
    ThfTableRowTemplateDirective.prototype.thfTableRowTemplateShow;
    /** @type {?} */
    ThfTableRowTemplateDirective.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXRhYmxlLXJvdy10ZW1wbGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLXRhYmxlL3RoZi10YWJsZS1yb3ctdGVtcGxhdGUvdGhmLXRhYmxlLXJvdy10ZW1wbGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwRjlEO0lBb0JFLHNFQUFzRTtJQUN0RSxzQ0FBbUIsV0FBNkI7UUFBN0IsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0lBQUksQ0FBQzs7Z0JBckJ0RCxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtpQkFDbkM7Ozs7Z0JBNUYwQixXQUFXOzs7MENBNEduQyxLQUFLLFNBQUMsMkJBQTJCOztJQUtwQyxtQ0FBQztDQUFBLEFBdkJELElBdUJDO1NBcEJZLDRCQUE0Qjs7Ozs7Ozs7Ozs7Ozs7OztJQWV2QywrREFBa0c7O0lBR3RGLG1EQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQHVzZWRCeSBUaGZUYWJsZUNvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGEgZGlyZXRpdmEgcGVybWl0ZSBxdWUgc2VqYSBhcHJlc2VudGFkYSBpbmZvcm1hw6fDtWVzIGFkaWNpb25haXMgYSByZXNwZWl0byBkZSB1bWEgZGV0ZXJtaW5hZGEgbGluaGEgZGVcbiAqIGRhZG9zLCBkZSBmb3JtYSBxdWUgcG9zc2FtIHNlciBleGliaWRhcyBlIG9jdWx0YWRhcyBhdHJhdsOpcyBkbyBib3TDo28gZGUgYWNpb25hbWVudG8uXG4gKlxuICogPiBRdWFuZG8gdXRpbGl6YWRhLCBzb2JyZXDDtWUgYXMgZnVuY2lvbmFsaWRhZGUgYsOhc2ljYXMgZG8gKm1hc3Rlci1kZXRhaWwqLlxuICpcbiAqIEVtIHNldSB1c28sIGRldmUtc2UgdXRpbGl6YXIgY29tbyBwYXLDom1ldHJvIGEgcmVmZXLDqm5jaWEgZGEgX2xpbmhhXyBlL291IF/DrW5kaWNlXywgc2VuZG8gcG9yIHBhZHLDo28gbGluaGEuIENhc28gbsOjbyBzZWphIGRlY2xhcmFkbyxcbiAqIG8gY29tcG9uZW50ZSBuw6NvIGV4aWJpcsOhIGNvbnRlw7pkby5cbiAqICAtIExpbmhhOiBgcm93YCBkZXRlcm1pbmEgbyBpdGVtIGRhIGxpbmhhIGNvcnJlbnRlLlxuICogIC0gw41uZGljZTogYHJvd0luZGV4YCBkZXRlcm1pbmEgbyDDrW5kaWNlIGRhIGxpbmhhIGNvcnJlbnRlLlxuICpcbiAqIEVzdGEgZGlyZXRpdmEgY29tcMO1ZS1zZSBkZSBkb2lzIG1laW9zIHBhcmEgdXNvLCBkZSBmb3JtYSBleHBsw61jaXRhIHRhbCBjb21vIGVtICpzeW50YXggc3VnYXIqLiBWZWphIGEgc2VndWlyIGFtYm9zLCByZXNwZWN0aXZhbWVudGU6XG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIDx0aGYtdGFibGVcbiAqICAgW3QtY29sdW1uc109XCJjb2x1bW5zXCJcbiAqICAgW3QtaXRlbXNdPVwiaXRlbXNcIj5cbiAqICAgICA8bmctdGVtcGxhdGUgdC10YWJsZS1yb3ctdGVtcGxhdGUgbGV0LXJvd0l0ZW0gbGV0LWk9XCJyb3dJbmRleFwiIFt0LXRhYmxlLXJvdy10ZW1wbGF0ZS1zaG93XT1cImlzU2hvd1wiPlxuICogICAgICAgPGRldGFpbC1yb3cgW3Jvd109XCJyb3dJdGVtXCI+PC9kZXRhaWwtcm93PlxuICogICAgIDwvbmctdGVtcGxhdGU+XG4gKiAuLi5cbiAqIGBgYFxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8dGhmLXRhYmxlXG4gKiAgIFt0LWNvbHVtbnNdPVwiY29sdW1uc1wiXG4gKiAgIFt0LWl0ZW1zXT1cIml0ZW1zXCI+XG4gKiAgICAgPGRpdiAqdC10YWJsZS1yb3ctdGVtcGxhdGU9XCJsZXQgcm93SXRlbSwgbGV0IGk9cm93SW5kZXhcIj5cbiAqICAgICAgIDxkZXRhaWwtcm93IFtyb3ddPVwicm93SXRlbVwiPjwvZGV0YWlsLXJvdz5cbiAqICAgICA8L2Rpdj5cbiAqIC4uLlxuICpcbiAqIGBgYFxuICpcbiAqIEEgZGlyZXRpdmEgKip0LXRhYmxlLXJvdy10ZW1wbGF0ZSoqLCBwb3NzaWJpbGl0YSB0YW1iw6ltIHF1ZSBkZXRlcm1pbmFkYSBsaW5oYSBhcHJlc2VudGUgb3UgbsOjbyBzZXUgX3RlbXBsYXRlXy4gUGFyYSBpc3RvLFxuICogw6kgbmVjZXNzw6FyaW8gYXRyaWJ1aXIgYSByZWZlcsOqbmNpYSBkYSBmdW7Dp8OjbyBxdWUgZmF6IGVzdGEgdmVyaWZpY2HDp8Ojbywgw6AgcHJvcHJpZWRhZGUgYHQtdGFibGUtcm93LXRlbXBsYXRlLXNob3dgLFxuICogYSBtZXNtYSBkZXZlIHJldG9ybmFyIHVtIHZhbG9yIGRvIHRpcG8gKmJvb2xlYW4qLiBWZWphIG8gZXhlbXBsbyBhIHNlZ3VpcjpcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogQENvbXBvbmVudCh7XG4gKiAgICBzZWxlY3RvcjogJ2FwcC1yb290JyxcbiAqICAgIHRlbXBsYXRlVXJsOiBgXG4gKiAgICAgIC4uLlxuICogICAgICA8dGhmLXRhYmxlXG4gKiAgICAgICAgW3QtY29sdW1uc109XCJjb2x1bW5zXCJcbiAqICAgICAgICBbdC1pdGVtc109XCJpdGVtc1wiPlxuICogICAgICAgICAgPG5nLXRlbXBsYXRlIHQtdGFibGUtcm93LXRlbXBsYXRlIGxldC1yb3dJdGVtIGxldC1pPVwicm93SW5kZXhcIiBbdC10YWJsZS1yb3ctdGVtcGxhdGUtc2hvd109XCJpc1VuZGVsaXZlcmVkXCI+XG4gKiAgICAgICAgICAgIDxkZXRhaWwtcm93IFtyb3ddPVwicm93SXRlbVwiPiA8L2RldGFpbC1yb3c+XG4gKiAgICAgICAgICA8L2Rpdj5cbiAqICAgICAgLi4uXG4gKiAgICBgXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XG4gKiAgICBwdWJsaWMgZGF0YVRhYmxlID0gW3tcbiAqICAgICAgY29kZTogMTIwMCxcbiAqICAgICAgcHJvZHVjdDogJ1JpY2UnLFxuICogICAgICBjb3N0dW1lcjogJ1N1cGVybWFya2V0IDEnLFxuICogICAgICBxdWFudGl0eTogMyxcbiAqICAgICAgc3RhdHVzOiAnZGVsaXZlcmVkJyxcbiAqICAgICAgbGljZW5zZV9wbGF0ZTogJ01ESkQ5MTkxJyxcbiAqICAgICAgYmF0Y2hfcHJvZHVjdDogMTgwNDE4MjIsXG4gKiAgICAgIGRyaXZlcjogJ0pvc8OpIE9saXZlaXJhJ1xuICogICAgfSwge1xuICogICAgICBjb2RlOiAxMzU1LFxuICogICAgICBwcm9kdWN0OiAnQmVhbicsXG4gKiAgICAgIGNvc3R1bWVyOiAnU3VwZXJtYXJrZXQgMicsXG4gKiAgICAgIHF1YW50aXR5OiAxLFxuICogICAgICBzdGF0dXM6ICd0cmFuc3BvcnQnLFxuICogICAgICBsaWNlbnNlX3BsYXRlOiAnWFhBNTQ1NCcsXG4gKiAgICAgIGJhdGNoX3Byb2R1Y3Q6IDE4MDQxODIxLFxuICogICAgICBkcml2ZXI6ICdGcmFuY2lzY28gUGVyZWlyYSdcbiAqICAgIH1dO1xuICpcbiAqICAgIGlzVW5kZWxpdmVyZWQocm93LCBpbmRleDogbnVtYmVyKSB7XG4gKiAgICAgIHJldHVybiByb3cuc3RhdHVzICE9PSAnZGVsaXZlcmVkJztcbiAqICAgIH1cbiAqIH1cbiAqIGBgYFxuICogPiBObyBleGVtcGxvIGFjaW1hLCBzb21lbnRlIHNlcsOhIGRpc3BvbmliaWxpemFkbyBvcyBkZXRhbGhlcyBkZSBpbmZvcm1hw6fDtWVzIG5hcyBsaW5oYXMgY3VqbyBvIHZhbG9yIGRlIGBzdGF0dXNgXG4gKiBuw6NvIGNvcnJlc3BvbmRhbSDDoCAqZGVsaXZlcmVkKi5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3QtdGFibGUtcm93LXRlbXBsYXRlXSdcbn0pXG5leHBvcnQgY2xhc3MgVGhmVGFibGVSb3dUZW1wbGF0ZURpcmVjdGl2ZSB7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRnVuw6fDo28gcXVlIGRldmUgcmV0b3JuYXIgdW0gdmFsb3IgYm9vbGVhbm8sIGluZm9ybWFuZG8gc2UgYXByZXNlbnRhcsOhIG8gdGVtcGxhdGUgZGEgbGluaGEuXG4gICAqIFNlcsOjbyBwYXNzYWRvcyBvIG9iamV0byBkYSBsaW5oYSBlIG8gaW5kaWNlIGRhIG1lc21hIHBvciBwYXLDom1ldHJvLCBwYXJhIHF1ZSBzZWphIHBvc3PDrXZlbFxuICAgKiB0b21hciB1bWEgZGVjaXPDo28gYSBwYXJ0aXIgZG8gb2JqZXRvIGRhIGxpbmhhIGNvcnJlbnRlLlxuICAgKlxuICAgKiBDYXNvIG7Do28gc2VyIHV0aWxpemFkbyBlc3RhIHByb3ByaWVkYWRlLCBzZXLDo28gYXByZXNlbnRhZG9zIHRvZG9zIG9zIGRldGFsaGVzIGRhcyBsaW5oYXMuXG4gICAqXG4gICAqIEBkZWZhdWx0IGB0cnVlYFxuICAgKi9cbiAgQElucHV0KCd0LXRhYmxlLXJvdy10ZW1wbGF0ZS1zaG93JykgdGhmVGFibGVSb3dUZW1wbGF0ZVNob3c6IChyb3c6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbjtcblxuICAvLyBOZWNlc3PDoXJpbyBtYW50ZXIgdGVtcGxhdGVSZWYgcGFyYSBvIGZ1bmNpb25hbWVudG8gZG8gcm93IHRlbXBsYXRlLlxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxuXG59XG4iXX0=