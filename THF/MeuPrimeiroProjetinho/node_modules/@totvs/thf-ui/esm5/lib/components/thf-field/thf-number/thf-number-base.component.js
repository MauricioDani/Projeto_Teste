/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ThfInputGeneric } from '../thf-input-generic/thf-input-generic';
/**
 * @abstract
 */
var /**
 * @abstract
 */
ThfNumberBaseComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfNumberBaseComponent, _super);
    function ThfNumberBaseComponent(elementRef) {
        var _this = _super.call(this, elementRef) || this;
        _this.type = 'number';
        return _this;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    ThfNumberBaseComponent.prototype.eventOnInput = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this.mask) {
            /** @type {?} */
            var value = e.target.value;
            /** @type {?} */
            var valueMaxlength = this.validMaxLength(this.maxlength, value);
            if (value !== valueMaxlength) {
                value = valueMaxlength;
                this.inputEl.nativeElement.value = value;
            }
            this.callOnChange(this.formatNumber(value));
        }
    };
    /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    ThfNumberBaseComponent.prototype.validMaxLength = /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    function (maxlength, value) {
        if (maxlength && value.length > maxlength) {
            /** @type {?} */
            var substringValue = value.toString().substring(0, maxlength);
            if (substringValue && this.isEndWithDot(substringValue)) {
                return substringValue.toString().substring(0, maxlength - 1);
            }
            return substringValue;
        }
        return value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfNumberBaseComponent.prototype.writeValueModel = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.inputEl) {
            if (value || value === 0) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.onChangePropagate(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else { // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        this.changeModel.emit(value);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfNumberBaseComponent.prototype.isEndWithDot = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value && value.lastIndexOf('.') === value.length - 1;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfNumberBaseComponent.prototype.formatNumber = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value ? Number(value) : null;
    };
    return ThfNumberBaseComponent;
}(ThfInputGeneric));
/**
 * @abstract
 */
export { ThfNumberBaseComponent };
if (false) {
    /** @type {?} */
    ThfNumberBaseComponent.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLW51bWJlci1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtZmllbGQvdGhmLW51bWJlci90aGYtbnVtYmVyLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdDQUF3QyxDQUFDOzs7O0FBRXpFOzs7O0lBQXFELGtEQUFlO0lBSWxFLGdDQUFZLFVBQXNCO1FBQWxDLFlBQ0Usa0JBQU0sVUFBVSxDQUFDLFNBQ2xCO1FBSkQsVUFBSSxHQUFHLFFBQVEsQ0FBQzs7SUFJaEIsQ0FBQzs7Ozs7SUFFRCw2Q0FBWTs7OztJQUFaLFVBQWEsQ0FBTTtRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTs7Z0JBQ1YsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSzs7Z0JBQ3BCLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO1lBRWpFLElBQUksS0FBSyxLQUFLLGNBQWMsRUFBRTtnQkFDNUIsS0FBSyxHQUFHLGNBQWMsQ0FBQztnQkFFdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzthQUMxQztZQUVELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQzdDO0lBQ0gsQ0FBQzs7Ozs7O0lBRUQsK0NBQWM7Ozs7O0lBQWQsVUFBZSxTQUFpQixFQUFFLEtBQWE7UUFFN0MsSUFBSSxTQUFTLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxTQUFTLEVBQUU7O2dCQUNuQyxjQUFjLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDO1lBRS9ELElBQUksY0FBYyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLEVBQUU7Z0JBQ3ZELE9BQU8sY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQzlEO1lBRUQsT0FBTyxjQUFjLENBQUM7U0FDdkI7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQsZ0RBQWU7Ozs7SUFBZixVQUFnQixLQUFLO1FBQ25CLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLEtBQUssSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO2dCQUN4QixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7b0JBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBRWpGLHVGQUF1RjtvQkFDdkYsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTt3QkFDNUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7cUJBQ25EO2lCQUNGO3FCQUFNO29CQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7aUJBQzFDO2FBQ0Y7aUJBQU0sRUFBRSxvREFBb0Q7Z0JBQzNELElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7YUFDdkM7U0FDRjtRQUVELHFFQUFxRTtRQUVyRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUUvQixDQUFDOzs7Ozs7SUFFTyw2Q0FBWTs7Ozs7SUFBcEIsVUFBcUIsS0FBYTtRQUNoQyxPQUFPLEtBQUssSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQzlELENBQUM7Ozs7OztJQUVPLDZDQUFZOzs7OztJQUFwQixVQUFxQixLQUFLO1FBQ3hCLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN0QyxDQUFDO0lBRUgsNkJBQUM7QUFBRCxDQUFDLEFBdEVELENBQXFELGVBQWUsR0FzRW5FOzs7Ozs7O0lBcEVDLHNDQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ICBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFRoZklucHV0R2VuZXJpYyB9IGZyb20gJy4uL3RoZi1pbnB1dC1nZW5lcmljL3RoZi1pbnB1dC1nZW5lcmljJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRoZk51bWJlckJhc2VDb21wb25lbnQgZXh0ZW5kcyBUaGZJbnB1dEdlbmVyaWMge1xuXG4gIHR5cGUgPSAnbnVtYmVyJztcblxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgc3VwZXIoZWxlbWVudFJlZik7XG4gIH1cblxuICBldmVudE9uSW5wdXQoZTogYW55KSB7XG4gICAgaWYgKCF0aGlzLm1hc2spIHtcbiAgICAgIGxldCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgY29uc3QgdmFsdWVNYXhsZW5ndGggPSB0aGlzLnZhbGlkTWF4TGVuZ3RoKHRoaXMubWF4bGVuZ3RoLCB2YWx1ZSk7XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gdmFsdWVNYXhsZW5ndGgpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZU1heGxlbmd0aDtcblxuICAgICAgICB0aGlzLmlucHV0RWwubmF0aXZlRWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbGxPbkNoYW5nZSh0aGlzLmZvcm1hdE51bWJlcih2YWx1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkTWF4TGVuZ3RoKG1heGxlbmd0aDogbnVtYmVyLCB2YWx1ZTogc3RyaW5nKSB7XG5cbiAgICBpZiAobWF4bGVuZ3RoICYmIHZhbHVlLmxlbmd0aCA+IG1heGxlbmd0aCkge1xuICAgICAgY29uc3Qgc3Vic3RyaW5nVmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnN1YnN0cmluZygwLCBtYXhsZW5ndGgpO1xuXG4gICAgICBpZiAoc3Vic3RyaW5nVmFsdWUgJiYgdGhpcy5pc0VuZFdpdGhEb3Qoc3Vic3RyaW5nVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBzdWJzdHJpbmdWYWx1ZS50b1N0cmluZygpLnN1YnN0cmluZygwLCBtYXhsZW5ndGggLSAxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1YnN0cmluZ1ZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHdyaXRlVmFsdWVNb2RlbCh2YWx1ZSkge1xuICAgIGlmICh0aGlzLmlucHV0RWwpIHtcbiAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICBpZiAodGhpcy5tYXNrKSB7XG4gICAgICAgICAgdGhpcy5pbnB1dEVsLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB0aGlzLm9iak1hc2suY29udHJvbEZvcm1hdHRpbmcoU3RyaW5nKHZhbHVlKSk7XG5cbiAgICAgICAgICAvLyBTZSBvIG1vZGVsIGZvciBkZWZpbmlkbyBjb21vIGZvcm1hdGFkbywgZW50w6NvIHByZWNpc2EgYXR1YWxpesOhLWxvIG5vIHByaW1laXJvIGFjZXNzb1xuICAgICAgICAgIGlmICh0aGlzLm9iak1hc2suZm9ybWF0TW9kZWwpIHtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2VQcm9wYWdhdGUodGhpcy5vYmpNYXNrLnZhbHVlVG9Nb2RlbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaW5wdXRFbC5uYXRpdmVFbGVtZW50LnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7IC8vIFNlIGZvciBvIHZhbG9yIGZvciB1bmRlZmluZWQsIGRldmUgbGltcGFyIG8gY2FtcG9cbiAgICAgICAgdGhpcy5pbnB1dEVsLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFbWl0ZSBldmVudG8gcXVhbmRvIG8gbW9kZWwgw6kgYXR1YWxpemFkbywgaW5jbHVzaXZlIGEgcHJpbWVpcmEgdmV6XG5cbiAgICB0aGlzLmNoYW5nZU1vZGVsLmVtaXQodmFsdWUpO1xuXG4gIH1cblxuICBwcml2YXRlIGlzRW5kV2l0aERvdCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLmxhc3RJbmRleE9mKCcuJykgPT09IHZhbHVlLmxlbmd0aCAtIDE7XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdE51bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA/IE51bWJlcih2YWx1ZSkgOiBudWxsO1xuICB9XG5cbn1cbiJdfQ==