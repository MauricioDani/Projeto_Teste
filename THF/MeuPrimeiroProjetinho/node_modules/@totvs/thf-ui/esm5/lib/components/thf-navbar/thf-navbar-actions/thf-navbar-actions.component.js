/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
var ThfNavbarActionsComponent = /** @class */ (function () {
    function ThfNavbarActionsComponent() {
    }
    Object.defineProperty(ThfNavbarActionsComponent.prototype, "iconActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconActions;
        },
        set: /**
         * @param {?} actions
         * @return {?}
         */
        function (actions) {
            this._iconActions = actions.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return (tslib_1.__assign({}, action, { separator: true, url: action.link })); }));
        },
        enumerable: true,
        configurable: true
    });
    ThfNavbarActionsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-navbar-actions',
                    template: "<thf-navbar-action *ngFor=\"let iconAction of iconActions\"\n  class=\"thf-navbar-action\"\n  [t-action]=\"iconAction.action\"\n  [t-icon]=\"iconAction.icon\"\n  [t-label]=\"iconAction.label\"\n  [t-link]=\"iconAction.link\"\n  [t-tooltip-text]=\"iconAction.tooltip\">\n</thf-navbar-action>\n\n<thf-navbar-action-popup\n  class=\"thf-navbar-action-popup\"\n  [t-icon-actions]=\"iconActions\">\n</thf-navbar-action-popup>\n\n\n"
                }] }
    ];
    ThfNavbarActionsComponent.propDecorators = {
        iconActions: [{ type: Input, args: ['t-icon-actions',] }]
    };
    return ThfNavbarActionsComponent;
}());
export { ThfNavbarActionsComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfNavbarActionsComponent.prototype._iconActions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLW5hdmJhci1hY3Rpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtbmF2YmFyL3RoZi1uYXZiYXItYWN0aW9ucy90aGYtbmF2YmFyLWFjdGlvbnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJakQ7SUFBQTtJQWdCQSxDQUFDO0lBUkMsc0JBQTZCLGtEQUFXOzs7O1FBSXhDO1lBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzNCLENBQUM7Ozs7O1FBTkQsVUFBeUMsT0FBbUM7WUFDMUUsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsR0FBRzs7OztZQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsc0JBQU0sTUFBTSxJQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxJQUFJLElBQUcsRUFBbEQsQ0FBa0QsRUFBQyxDQUFDO1FBQ2hHLENBQUM7OztPQUFBOztnQkFWRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsc2JBQWtEO2lCQUNuRDs7OzhCQUtFLEtBQUssU0FBQyxnQkFBZ0I7O0lBUXpCLGdDQUFDO0NBQUEsQUFoQkQsSUFnQkM7U0FaWSx5QkFBeUI7Ozs7OztJQUVwQyxpREFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFRoZk5hdmJhckljb25BY3Rpb24gfSBmcm9tICcuLi9pbnRlcmZhY2VzL3RoZi1uYXZiYXItaWNvbi1hY3Rpb24uaW50ZXJmYWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGhmLW5hdmJhci1hY3Rpb25zJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RoZi1uYXZiYXItYWN0aW9ucy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgVGhmTmF2YmFyQWN0aW9uc0NvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfaWNvbkFjdGlvbnM7XG5cbiAgQElucHV0KCd0LWljb24tYWN0aW9ucycpIHNldCBpY29uQWN0aW9ucyhhY3Rpb25zOiBBcnJheTxUaGZOYXZiYXJJY29uQWN0aW9uPikge1xuICAgIHRoaXMuX2ljb25BY3Rpb25zID0gYWN0aW9ucy5tYXAoYWN0aW9uID0+ICh7IC4uLmFjdGlvbiwgc2VwYXJhdG9yOiB0cnVlLCB1cmw6IGFjdGlvbi5saW5rIH0pKTtcbiAgfVxuXG4gIGdldCBpY29uQWN0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5faWNvbkFjdGlvbnM7XG4gIH1cblxufVxuIl19