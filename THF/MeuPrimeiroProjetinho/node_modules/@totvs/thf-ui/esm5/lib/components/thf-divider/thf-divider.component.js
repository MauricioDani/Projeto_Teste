/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { ThfDividerBaseComponent } from './thf-divider-base.component';
/**
 * \@docsExtends ThfDividerBaseComponent
 *
 * \@example
 *
 * <example name="thf-divider-basic" title="Totvs Divider Basic" >
 *  <file name="sample-thf-divider-basic/sample-thf-divider-basic.component.html"> </file>
 *  <file name="sample-thf-divider-basic/sample-thf-divider-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-divider-labs" title="Totvs Divider Labs" >
 *  <file name="sample-thf-divider-labs/sample-thf-divider-labs.component.html"> </file>
 *  <file name="sample-thf-divider-labs/sample-thf-divider-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-divider-user-detail" title="Totvs Divider - User Detail" >
 *  <file name="sample-thf-divider-user-detail/sample-thf-divider-user-detail.component.html"> </file>
 *  <file name="sample-thf-divider-user-detail/sample-thf-divider-user-detail.component.ts"> </file>
 * </example>
 */
var ThfDividerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfDividerComponent, _super);
    function ThfDividerComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThfDividerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-divider',
                    template: "<div class=\"thf-divider\">\n  <div *ngIf=\"label\" class=\"thf-divider-label\">{{ label }}</div>\n</div>\n"
                }] }
    ];
    return ThfDividerComponent;
}(ThfDividerBaseComponent));
export { ThfDividerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWRpdmlkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1kaXZpZGVyL3RoZi1kaXZpZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFbEQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCdkU7SUFJeUMsK0NBQXVCO0lBSmhFOztJQUltRSxDQUFDOztnQkFKbkUsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxhQUFhO29CQUN2Qix1SEFBMkM7aUJBQzVDOztJQUNrRSwwQkFBQztDQUFBLEFBSnBFLENBSXlDLHVCQUF1QixHQUFJO1NBQXZELG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFRoZkRpdmlkZXJCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi90aGYtZGl2aWRlci1iYXNlLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQGRvY3NFeHRlbmRzIFRoZkRpdmlkZXJCYXNlQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwidGhmLWRpdmlkZXItYmFzaWNcIiB0aXRsZT1cIlRvdHZzIERpdmlkZXIgQmFzaWNcIiA+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtZGl2aWRlci1iYXNpYy9zYW1wbGUtdGhmLWRpdmlkZXItYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLWRpdmlkZXItYmFzaWMvc2FtcGxlLXRoZi1kaXZpZGVyLWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1kaXZpZGVyLWxhYnNcIiB0aXRsZT1cIlRvdHZzIERpdmlkZXIgTGFic1wiID5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1kaXZpZGVyLWxhYnMvc2FtcGxlLXRoZi1kaXZpZGVyLWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLWRpdmlkZXItbGFicy9zYW1wbGUtdGhmLWRpdmlkZXItbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJ0aGYtZGl2aWRlci11c2VyLWRldGFpbFwiIHRpdGxlPVwiVG90dnMgRGl2aWRlciAtIFVzZXIgRGV0YWlsXCIgPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLWRpdmlkZXItdXNlci1kZXRhaWwvc2FtcGxlLXRoZi1kaXZpZGVyLXVzZXItZGV0YWlsLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1kaXZpZGVyLXVzZXItZGV0YWlsL3NhbXBsZS10aGYtZGl2aWRlci11c2VyLWRldGFpbC5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aGYtZGl2aWRlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi90aGYtZGl2aWRlci5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIFRoZkRpdmlkZXJDb21wb25lbnQgZXh0ZW5kcyBUaGZEaXZpZGVyQmFzZUNvbXBvbmVudCB7IH1cbiJdfQ==