/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input } from '@angular/core';
import { uuid } from '../../../utils/util';
import { ThfStepperStatus } from '../enums/thf-stepper-status.enum';
/**
 * \@description
 *
 * O componente `thf-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `thf-stepper`, por exemplo:
 *
 * ```
 * <thf-stepper>
 *
 *    <thf-step t-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </thf-step>
 *
 *    <thf-step t-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </thf-step>
 *
 *  </thf-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `thf-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `thf-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `thf-step`, o componente `thf-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `thf-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `thf-stepper`](/documentation/thf-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
var ThfStepComponent = /** @class */ (function () {
    function ThfStepComponent(elementRef) {
        this.elementRef = elementRef;
        this._status = ThfStepperStatus.Disabled;
        // ID do step
        this.id = uuid();
    }
    Object.defineProperty(ThfStepComponent.prototype, "status", {
        get: /**
         * @return {?}
         */
        function () {
            return this._status;
        },
        // Estado de exibição do `thf-step`.
        set: 
        // Estado de exibição do `thf-step`.
        /**
         * @param {?} status
         * @return {?}
         */
        function (status) {
            this._status = status;
            this.setDisplayOnActiveOrError();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfStepComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.setDisplayOnActiveOrError();
    };
    /**
     * @protected
     * @return {?}
     */
    ThfStepComponent.prototype.setDisplayOnActiveOrError = /**
     * @protected
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.style.display =
            (this.status === ThfStepperStatus.Active || this.status === ThfStepperStatus.Error) ? '' : 'none';
    };
    ThfStepComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-step',
                    template: "<ng-content></ng-content>\n"
                }] }
    ];
    /** @nocollapse */
    ThfStepComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ThfStepComponent.propDecorators = {
        canActiveNextStep: [{ type: Input, args: ['t-can-active-next-step',] }],
        label: [{ type: Input, args: ['t-label',] }],
        status: [{ type: Input, args: ['t-status',] }]
    };
    return ThfStepComponent;
}());
export { ThfStepComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfStepComponent.prototype._status;
    /** @type {?} */
    ThfStepComponent.prototype.id;
    /**
     * \@optional
     *
     * \@description
     *
     * Função chamada quando o próximo *step* for clicado ou quando o método `ThfStepperComponent.next()` for chamado.
     * Ao retornar `true` define que esse *step* ficará ativo e o atual como concluído (*done*).
     *
     * Ao ser disparada, a mesma receberá por parâmetro o `ThfStepComponent` atual.
     *
     * O contexto da função que será chamada, será o mesmo que o do `ThfStepComponent`, então para poder alterar
     * para o contexto do componente que o está utilizando, pode ser utilizado a propriedade `bind` do Javascript.
     * Por exemplo, para a função `validate`:
     *
     * ```
     * <thf-step t-label="Step 1" [t-can-active-next-step]="validate.bind(this)">
     * ...
     * </thf-step>
     * ```
     * @type {?}
     */
    ThfStepComponent.prototype.canActiveNextStep;
    /**
     * Título que será exibido descrevendo o passo (*step*).
     * @type {?}
     */
    ThfStepComponent.prototype.label;
    /**
     * @type {?}
     * @private
     */
    ThfStepComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXN0ZXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1zdGVwcGVyL3RoZi1zdGVwL3RoZi1zdGVwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFvQixTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUNwRTtJQStDRSwwQkFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQXpDbEMsWUFBTyxHQUFzQixnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7O1FBRy9ELE9BQUUsR0FBWSxJQUFJLEVBQUUsQ0FBQztJQXNDeUIsQ0FBQztJQVYvQyxzQkFBdUIsb0NBQU07Ozs7UUFNN0I7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQztRQVRELG9DQUFvQzs7Ozs7OztRQUNwQyxVQUE4QixNQUF3QjtZQUNwRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztZQUV0QixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztRQUNuQyxDQUFDOzs7T0FBQTs7OztJQVFELDZDQUFrQjs7O0lBQWxCO1FBQ0UsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7SUFDbkMsQ0FBQzs7Ozs7SUFFUyxvREFBeUI7Ozs7SUFBbkM7UUFDRSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTztZQUN6QyxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssZ0JBQWdCLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3RHLENBQUM7O2dCQXhERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFVBQVU7b0JBQ3BCLHVDQUFzQztpQkFDdkM7Ozs7Z0JBOUNxQyxVQUFVOzs7b0NBMEU3QyxLQUFLLFNBQUMsd0JBQXdCO3dCQUc5QixLQUFLLFNBQUMsU0FBUzt5QkFHZixLQUFLLFNBQUMsVUFBVTs7SUFxQm5CLHVCQUFDO0NBQUEsQUExREQsSUEwREM7U0F0RFksZ0JBQWdCOzs7Ozs7SUFFM0IsbUNBQStEOztJQUcvRCw4QkFBcUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFzQnJCLDZDQUE2RDs7Ozs7SUFHN0QsaUNBQWdDOzs7OztJQWFwQixzQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHV1aWQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgVGhmU3RlcHBlclN0YXR1cyB9IGZyb20gJy4uL2VudW1zL3RoZi1zdGVwcGVyLXN0YXR1cy5lbnVtJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHRoZi1zdGVwYCDDqSB1dGlsaXphZG8gcGFyYSBlbnZvbHZlciBlIHJlbmRlcml6YXIgbyBjb250ZcO6ZG8gZGUgdW0gcGFzc28gKCpzdGVwKikgZG8gYHRoZi1zdGVwcGVyYCwgcG9yIGV4ZW1wbG86XG4gKlxuICogYGBgXG4gKiA8dGhmLXN0ZXBwZXI+XG4gKlxuICogICAgPHRoZi1zdGVwIHQtbGFiZWw9XCJFbmRlcmXDp29cIj5cbiAqXG4gKiAgICAgICAgPCEtLSBDb250ZcO6ZG8gcmVmZXJlbnRlIGFvIGVuZGVyZcOnbyAtLT5cbiAqXG4gKiAgICA8L3RoZi1zdGVwPlxuICpcbiAqICAgIDx0aGYtc3RlcCB0LWxhYmVsPVwiUGFnYW1lbnRvXCI+XG4gKlxuICogICAgICAgIDwhLS0gQ29udGXDumRvIHJlZmVyZW50ZSBhbyBwYWdhbWVudG8gLS0+XG4gKlxuICogICAgPC90aGYtc3RlcD5cbiAqXG4gKiAgPC90aGYtc3RlcHBlcj5cbiAqIGBgYFxuICpcbiAqIEEgcmVuZGVyaXphw6fDo28gZG8gY29udGXDumRvIGVudm9sdmlkbyBuYSB0ZWxhIGUgbyBjb250cm9sZSBkb3Mgc3RhdHVzIHPDo28gZmVpdG9zIGF1dG9tYXRpY2FtZW50ZS4gTm8gcXVhbCwgbyBwcmltZWlyb1xuICogYHRoZi1zdGVwYCBlbmNvbnRyYWRvIHNlcsOhIGNvbG9jYWRvIGNvbW8gYXRpdm8sIG8gcHLDs3hpbW8gZmljYSBjb20gbyBzdGF0dXMgKmRlZmF1bHQqIGUgb3MgZGVtYWlzIGZpY2FtXG4gKiBkZXNhYmlsaXRhZG9zICgqZGlzYWJsZWQqKS5cbiAqXG4gKiBBbyBjbGljYXIgbm8gYHRoZi1zdGVwYCBxdWUgZXN0w6EgY29tIG8gc3RhdHVzICpkZWZhdWx0KiwgbyBxdWUgZXN0w6EgYXRpdm8gZmljYXLDoSBjb20gb1xuICogc3RhdHVzIGRlIGNvbmNsdcOtZG8gKCpkb25lKikgZSBvIHByw7N4aW1vIHF1ZSBlc3RhdmEgZGVzYWJpbGl0YWRvIGZpY2Fyw6EgY29tIG8gc3RhdHVzICpkZWZhdWx0KiBlIG8gcmVzdGFudGUgcGVybWFuZWNlcsOhXG4gKiBjb20gbyBzdGF0dXMgZGVzYWJpbGl0YWRvLlxuICpcbiAqID4gQW8gdXRpbGl6YXIgbyBgdGhmLXN0ZXBgLCBvIGNvbXBvbmVudGUgYHRoZi1zdGVwcGVyYCBmdW5jaW9uYXLDoSBkZSBmb3JtYSBzZXF1ZW5jaWFsLCBvdSBzZWphLCBuw6NvIHNlcsOhIHBvc3PDrXZlbFxuICogcHVsYXIgcGFyYSBvdXRybyBgdGhmLXN0ZXBgIHF1ZSBlc3RlamEgY29tIG8gc3RhdHVzIGlndWFsIGEgZGVzYWJpbGl0YWRvICgqZGlzYWJsZWQqKS5cbiAqXG4gKiBBY2Vzc2UgYSBbZG9jdW1lbnRhw6fDo28gZG8gYHRoZi1zdGVwcGVyYF0oL2RvY3VtZW50YXRpb24vdGhmLXN0ZXBwZXIpIHBhcmEgdGVyIG1haXMgaW5mb3JtYcOnw7VlcyBzb2JyZSBvIHNldSBmdW5jaW9uYW1lbnRvXG4gKiBlIGV4ZW1wbG9zIGRlIHVzby5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGhmLXN0ZXAnLFxuICB0ZW1wbGF0ZVVybDogJ3RoZi1zdGVwLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUaGZTdGVwQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG5cbiAgcHJpdmF0ZSBfc3RhdHVzPzogVGhmU3RlcHBlclN0YXR1cyA9IFRoZlN0ZXBwZXJTdGF0dXMuRGlzYWJsZWQ7XG5cbiAgLy8gSUQgZG8gc3RlcFxuICBpZD86IHN0cmluZyA9IHV1aWQoKTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBGdW7Dp8OjbyBjaGFtYWRhIHF1YW5kbyBvIHByw7N4aW1vICpzdGVwKiBmb3IgY2xpY2FkbyBvdSBxdWFuZG8gbyBtw6l0b2RvIGBUaGZTdGVwcGVyQ29tcG9uZW50Lm5leHQoKWAgZm9yIGNoYW1hZG8uXG4gICAqIEFvIHJldG9ybmFyIGB0cnVlYCBkZWZpbmUgcXVlIGVzc2UgKnN0ZXAqIGZpY2Fyw6EgYXRpdm8gZSBvIGF0dWFsIGNvbW8gY29uY2x1w61kbyAoKmRvbmUqKS5cbiAgICpcbiAgICogQW8gc2VyIGRpc3BhcmFkYSwgYSBtZXNtYSByZWNlYmVyw6EgcG9yIHBhcsOibWV0cm8gbyBgVGhmU3RlcENvbXBvbmVudGAgYXR1YWwuXG4gICAqXG4gICAqIE8gY29udGV4dG8gZGEgZnVuw6fDo28gcXVlIHNlcsOhIGNoYW1hZGEsIHNlcsOhIG8gbWVzbW8gcXVlIG8gZG8gYFRoZlN0ZXBDb21wb25lbnRgLCBlbnTDo28gcGFyYSBwb2RlciBhbHRlcmFyXG4gICAqIHBhcmEgbyBjb250ZXh0byBkbyBjb21wb25lbnRlIHF1ZSBvIGVzdMOhIHV0aWxpemFuZG8sIHBvZGUgc2VyIHV0aWxpemFkbyBhIHByb3ByaWVkYWRlIGBiaW5kYCBkbyBKYXZhc2NyaXB0LlxuICAgKiBQb3IgZXhlbXBsbywgcGFyYSBhIGZ1bsOnw6NvIGB2YWxpZGF0ZWA6XG4gICAqXG4gICAqIGBgYFxuICAgKiA8dGhmLXN0ZXAgdC1sYWJlbD1cIlN0ZXAgMVwiIFt0LWNhbi1hY3RpdmUtbmV4dC1zdGVwXT1cInZhbGlkYXRlLmJpbmQodGhpcylcIj5cbiAgICogLi4uXG4gICAqIDwvdGhmLXN0ZXA+XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KCd0LWNhbi1hY3RpdmUtbmV4dC1zdGVwJykgY2FuQWN0aXZlTmV4dFN0ZXA6IEZ1bmN0aW9uO1xuXG4gIC8qKiBUw610dWxvIHF1ZSBzZXLDoSBleGliaWRvIGRlc2NyZXZlbmRvIG8gcGFzc28gKCpzdGVwKikuICovXG4gIEBJbnB1dCgndC1sYWJlbCcpIGxhYmVsOiBzdHJpbmc7XG5cbiAgLy8gRXN0YWRvIGRlIGV4aWJpw6fDo28gZG8gYHRoZi1zdGVwYC5cbiAgQElucHV0KCd0LXN0YXR1cycpIHNldCBzdGF0dXMoc3RhdHVzOiBUaGZTdGVwcGVyU3RhdHVzKSB7XG4gICAgdGhpcy5fc3RhdHVzID0gc3RhdHVzO1xuXG4gICAgdGhpcy5zZXREaXNwbGF5T25BY3RpdmVPckVycm9yKCk7XG4gIH1cblxuICBnZXQgc3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGF0dXM7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHsgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLnNldERpc3BsYXlPbkFjdGl2ZU9yRXJyb3IoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXREaXNwbGF5T25BY3RpdmVPckVycm9yKCkge1xuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPVxuICAgICAgKHRoaXMuc3RhdHVzID09PSBUaGZTdGVwcGVyU3RhdHVzLkFjdGl2ZSB8fCB0aGlzLnN0YXR1cyA9PT0gVGhmU3RlcHBlclN0YXR1cy5FcnJvcikgPyAnJyA6ICdub25lJztcbiAgfVxuXG59XG4iXX0=