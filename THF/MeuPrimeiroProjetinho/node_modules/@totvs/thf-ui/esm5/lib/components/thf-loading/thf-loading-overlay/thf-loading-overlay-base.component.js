/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToBoolean } from './../../../utils/util';
/** @type {?} */
export var thfLoadingOverlayLiteralsDefault = {
    en: (/** @type {?} */ ({
        loading: 'Loading',
    })),
    es: (/** @type {?} */ ({
        loading: 'Cargando',
    })),
    pt: (/** @type {?} */ ({
        loading: 'Carregando',
    }))
};
/**
 *
 * \@description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 */
var ThfLoadingOverlayBaseComponent = /** @class */ (function () {
    function ThfLoadingOverlayBaseComponent(languageService) {
        this.languageService = languageService;
        this._screenLock = false;
        if (!this.text) {
            this.text = this.getTextDefault();
        }
    }
    Object.defineProperty(ThfLoadingOverlayBaseComponent.prototype, "screenLock", {
        get: /**
         * @return {?}
         */
        function () {
            return this._screenLock;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define se o _overlay_ será aplicado a um container ou a página inteira.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define se o _overlay_ será aplicado a um container ou a página inteira.
         *
         * \@default `false`
         * @param {?} screenLock
         * @return {?}
         */
        function (screenLock) {
            this._screenLock = convertToBoolean(screenLock);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfLoadingOverlayBaseComponent.prototype, "text", {
        get: /**
         * @return {?}
         */
        function () {
            return this._text;
        },
        /**
         * @optional
         *
         * @description
         *
         * Texto a ser exibido no componente.
         *
         * > O valor padrão será traduzido acordo com o idioma configurado no [**ThfI18n**](/documentation/thf-i18n) ou navegador.
         *
         * @default `Carregando`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Texto a ser exibido no componente.
         *
         * > O valor padrão será traduzido acordo com o idioma configurado no [**ThfI18n**](/documentation/thf-i18n) ou navegador.
         *
         * \@default `Carregando`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._text = value || this.getTextDefault();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    ThfLoadingOverlayBaseComponent.prototype.getTextDefault = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var language = this.languageService.getShortLanguage();
        return thfLoadingOverlayLiteralsDefault[language].loading;
    };
    ThfLoadingOverlayBaseComponent.propDecorators = {
        screenLock: [{ type: Input, args: ['t-screen-lock',] }],
        text: [{ type: Input, args: ['t-text',] }]
    };
    return ThfLoadingOverlayBaseComponent;
}());
export { ThfLoadingOverlayBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfLoadingOverlayBaseComponent.prototype._screenLock;
    /**
     * @type {?}
     * @private
     */
    ThfLoadingOverlayBaseComponent.prototype._text;
    /**
     * @type {?}
     * @private
     */
    ThfLoadingOverlayBaseComponent.prototype.languageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWxvYWRpbmctb3ZlcmxheS1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtbG9hZGluZy90aGYtbG9hZGluZy1vdmVybGF5L3RoZi1sb2FkaW5nLW92ZXJsYXktYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBTXpELE1BQU0sS0FBTyxnQ0FBZ0MsR0FBRztJQUM5QyxFQUFFLEVBQUUsbUJBQTRCO1FBQzlCLE9BQU8sRUFBRSxTQUFTO0tBQ25CLEVBQUE7SUFDRCxFQUFFLEVBQUUsbUJBQTRCO1FBQzlCLE9BQU8sRUFBRSxVQUFVO0tBQ3BCLEVBQUE7SUFDRCxFQUFFLEVBQUUsbUJBQTRCO1FBQzlCLE9BQU8sRUFBRSxZQUFZO0tBQ3RCLEVBQUE7Q0FDRjs7Ozs7Ozs7QUFTRDtJQXlDRSx3Q0FBb0IsZUFBbUM7UUFBbkMsb0JBQWUsR0FBZixlQUFlLENBQW9CO1FBdkMvQyxnQkFBVyxHQUFhLEtBQUssQ0FBQztRQXdDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDZCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUNuQztJQUNILENBQUM7SUEvQkQsc0JBQTRCLHNEQUFVOzs7O1FBSXRDO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzFCLENBQUM7UUFmRDs7Ozs7Ozs7V0FRRzs7Ozs7Ozs7Ozs7O1FBQ0gsVUFBdUMsVUFBbUI7WUFDeEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsRCxDQUFDOzs7T0FBQTtJQWlCRCxzQkFBcUIsZ0RBQUk7Ozs7UUFJekI7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQztRQWpCRDs7Ozs7Ozs7OztXQVVHOzs7Ozs7Ozs7Ozs7OztRQUNILFVBQTBCLEtBQWE7WUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQzlDLENBQUM7OztPQUFBOzs7OztJQVlPLHVEQUFjOzs7O0lBQXRCOztZQUNRLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixFQUFFO1FBRXhELE9BQU8sZ0NBQWdDLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQzVELENBQUM7OzZCQXJDQSxLQUFLLFNBQUMsZUFBZTt1QkFtQnJCLEtBQUssU0FBQyxRQUFROztJQW9CakIscUNBQUM7Q0FBQSxBQXJERCxJQXFEQztTQXJEWSw4QkFBOEI7Ozs7OztJQUV6QyxxREFBc0M7Ozs7O0lBQ3RDLCtDQUF1Qjs7Ozs7SUFzQ1gseURBQTJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFRoZkxhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3RoZi1sYW5ndWFnZS90aGYtbGFuZ3VhZ2Uuc2VydmljZSc7XG5cbmltcG9ydCB7IFRoZkxvYWRpbmdPdmVybGF5TGl0ZXJhbHMgfSBmcm9tICcuL2ludGVyZmFjZXMvdGhmLWxvYWRpbmctb3ZlcmxheS1saXRlcmFscy5pbnRlcmZhY2UnO1xuXG5leHBvcnQgY29uc3QgdGhmTG9hZGluZ092ZXJsYXlMaXRlcmFsc0RlZmF1bHQgPSB7XG4gIGVuOiA8VGhmTG9hZGluZ092ZXJsYXlMaXRlcmFscz4ge1xuICAgIGxvYWRpbmc6ICdMb2FkaW5nJyxcbiAgfSxcbiAgZXM6IDxUaGZMb2FkaW5nT3ZlcmxheUxpdGVyYWxzPiB7XG4gICAgbG9hZGluZzogJ0NhcmdhbmRvJyxcbiAgfSxcbiAgcHQ6IDxUaGZMb2FkaW5nT3ZlcmxheUxpdGVyYWxzPiB7XG4gICAgbG9hZGluZzogJ0NhcnJlZ2FuZG8nLFxuICB9XG59O1xuXG4vKipcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgbW9zdHJhIGFvIHVzdcOhcmlvIHVtYSBpbWFnZW0gZGUgX2xvYWRpbmdfIGUgYmxvcXVlaWEgYSBww6FnaW5hIGludGVpcmEgb3UgbyBjb250YWluZXIgZXNjb2xoaWRvLFxuICogZW5xdWFudG8gYWd1YXJkYSBhIHJlc3Bvc3RhIGRlIGFsZ3VtYSByZXF1aXNpw6fDo28uXG4gKi9cbmV4cG9ydCBjbGFzcyBUaGZMb2FkaW5nT3ZlcmxheUJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX3NjcmVlbkxvY2s/OiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX3RleHQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIHNlIG8gX292ZXJsYXlfIHNlcsOhIGFwbGljYWRvIGEgdW0gY29udGFpbmVyIG91IGEgcMOhZ2luYSBpbnRlaXJhLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3Qtc2NyZWVuLWxvY2snKSBzZXQgc2NyZWVuTG9jayhzY3JlZW5Mb2NrOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2NyZWVuTG9jayA9IGNvbnZlcnRUb0Jvb2xlYW4oc2NyZWVuTG9jayk7XG4gIH1cblxuICBnZXQgc2NyZWVuTG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2NyZWVuTG9jaztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFRleHRvIGEgc2VyIGV4aWJpZG8gbm8gY29tcG9uZW50ZS5cbiAgICpcbiAgICogPiBPIHZhbG9yIHBhZHLDo28gc2Vyw6EgdHJhZHV6aWRvIGFjb3JkbyBjb20gbyBpZGlvbWEgY29uZmlndXJhZG8gbm8gWyoqVGhmSTE4bioqXSgvZG9jdW1lbnRhdGlvbi90aGYtaTE4bikgb3UgbmF2ZWdhZG9yLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgQ2FycmVnYW5kb2BcbiAgICovXG4gIEBJbnB1dCgndC10ZXh0Jykgc2V0IHRleHQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3RleHQgPSB2YWx1ZSB8fCB0aGlzLmdldFRleHREZWZhdWx0KCk7XG4gIH1cblxuICBnZXQgdGV4dCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90ZXh0O1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsYW5ndWFnZVNlcnZpY2U6IFRoZkxhbmd1YWdlU2VydmljZSkge1xuICAgIGlmICghdGhpcy50ZXh0KSB7XG4gICAgICB0aGlzLnRleHQgPSB0aGlzLmdldFRleHREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRUZXh0RGVmYXVsdCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGxhbmd1YWdlID0gdGhpcy5sYW5ndWFnZVNlcnZpY2UuZ2V0U2hvcnRMYW5ndWFnZSgpO1xuXG4gICAgcmV0dXJuIHRoZkxvYWRpbmdPdmVybGF5TGl0ZXJhbHNEZWZhdWx0W2xhbmd1YWdlXS5sb2FkaW5nO1xuICB9XG5cbn1cbiJdfQ==