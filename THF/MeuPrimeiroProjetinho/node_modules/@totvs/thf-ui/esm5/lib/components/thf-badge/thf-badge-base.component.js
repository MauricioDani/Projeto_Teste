/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToInt } from '../../utils/util';
/** @type {?} */
var THF_BADGE_COLORS = [
    'color-01',
    'color-02',
    'color-03',
    'color-04',
    'color-05',
    'color-06',
    'color-07',
    'color-08',
    'color-09',
    'color-10',
    'color-11',
    'color-12',
];
/** @type {?} */
var THF_BADGE_COLOR_DEFAULT = 'color-07';
/**
 * \@description
 *
 * \@docsPrivate
 *
 * Componente utilizado no `thf-menu` para exibir por exemplo a quantidade de tarefas pendentes.
 */
var ThfBadgeBaseComponent = /** @class */ (function () {
    function ThfBadgeBaseComponent() {
    }
    Object.defineProperty(ThfBadgeBaseComponent.prototype, "color", {
        get: /**
         * @return {?}
         */
        function () {
            return this._color;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a cor de fundo do componente e aceita os valores:
         *
         * <span class="dot thf-color-01"></span> `color-01`
         *
         * <span class="dot thf-color-02"></span> `color-02`
         *
         * <span class="dot thf-color-03"></span> `color-03`
         *
         * <span class="dot thf-color-04"></span> `color-04`
         *
         * <span class="dot thf-color-05"></span> `color-05`
         *
         * <span class="dot thf-color-06"></span> `color-06`
         *
         * <span class="dot thf-color-07"></span> `color-07`
         *
         * <span class="dot thf-color-08"></span> `color-08`
         *
         * <span class="dot thf-color-09"></span> `color-09`
         *
         * <span class="dot thf-color-10"></span> `color-10`
         *
         * <span class="dot thf-color-11"></span> `color-11`
         *
         * <span class="dot thf-color-12"></span> `color-12`
         *
         * @default `color-07`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a cor de fundo do componente e aceita os valores:
         *
         * <span class="dot thf-color-01"></span> `color-01`
         *
         * <span class="dot thf-color-02"></span> `color-02`
         *
         * <span class="dot thf-color-03"></span> `color-03`
         *
         * <span class="dot thf-color-04"></span> `color-04`
         *
         * <span class="dot thf-color-05"></span> `color-05`
         *
         * <span class="dot thf-color-06"></span> `color-06`
         *
         * <span class="dot thf-color-07"></span> `color-07`
         *
         * <span class="dot thf-color-08"></span> `color-08`
         *
         * <span class="dot thf-color-09"></span> `color-09`
         *
         * <span class="dot thf-color-10"></span> `color-10`
         *
         * <span class="dot thf-color-11"></span> `color-11`
         *
         * <span class="dot thf-color-12"></span> `color-12`
         *
         * \@default `color-07`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._color = THF_BADGE_COLORS.includes(value) ? value : THF_BADGE_COLOR_DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfBadgeBaseComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        /**
         * @description
         *
         * Número exibido no componente, caso o mesmo seja maior que 99 o valor exibido será 99+.
         */
        set: /**
         * \@description
         *
         * Número exibido no componente, caso o mesmo seja maior que 99 o valor exibido será 99+.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = convertToInt(value);
            this.setBadgeValue(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfBadgeBaseComponent.prototype.setBadgeValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var validRangeValue = (value || value === 0) && (value >= 0 && value < 100);
        this.badgeValue = validRangeValue ? value.toString() : value > 99 ? '99+' : undefined;
    };
    ThfBadgeBaseComponent.propDecorators = {
        color: [{ type: Input, args: ['t-color',] }],
        value: [{ type: Input, args: ['t-value',] }]
    };
    return ThfBadgeBaseComponent;
}());
export { ThfBadgeBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfBadgeBaseComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    ThfBadgeBaseComponent.prototype._value;
    /** @type {?} */
    ThfBadgeBaseComponent.prototype.badgeValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWJhZGdlLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1iYWRnZS90aGYtYmFkZ2UtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDOztJQUUxQyxnQkFBZ0IsR0FBRztJQUN2QixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7Q0FDWDs7SUFDSyx1QkFBdUIsR0FBRyxVQUFVOzs7Ozs7OztBQVMxQztJQUFBO0lBbUVBLENBQUM7SUEzQkMsc0JBQXNCLHdDQUFLOzs7O1FBSTNCO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7UUF2Q0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBZ0NHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7UUFDSCxVQUE0QixLQUFhO1lBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDO1FBQ25GLENBQUM7OztPQUFBO0lBV0Qsc0JBQXNCLHdDQUFLOzs7O1FBSzNCO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7UUFaRDs7OztXQUlHOzs7Ozs7OztRQUNILFVBQTRCLEtBQWE7WUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEMsQ0FBQzs7O09BQUE7Ozs7OztJQU1PLDZDQUFhOzs7OztJQUFyQixVQUFzQixLQUFhOztZQUMzQixlQUFlLEdBQUcsQ0FBQyxLQUFLLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQzdFLElBQUksQ0FBQyxVQUFVLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ3hGLENBQUM7O3dCQXpCQSxLQUFLLFNBQUMsU0FBUzt3QkFhZixLQUFLLFNBQUMsU0FBUzs7SUFjbEIsNEJBQUM7Q0FBQSxBQW5FRCxJQW1FQztTQW5FWSxxQkFBcUI7Ozs7OztJQUVoQyx1Q0FBdUI7Ozs7O0lBQ3ZCLHVDQUF1Qjs7SUFFdkIsMkNBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvSW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmNvbnN0IFRIRl9CQURHRV9DT0xPUlMgPSBbXG4gICdjb2xvci0wMScsXG4gICdjb2xvci0wMicsXG4gICdjb2xvci0wMycsXG4gICdjb2xvci0wNCcsXG4gICdjb2xvci0wNScsXG4gICdjb2xvci0wNicsXG4gICdjb2xvci0wNycsXG4gICdjb2xvci0wOCcsXG4gICdjb2xvci0wOScsXG4gICdjb2xvci0xMCcsXG4gICdjb2xvci0xMScsXG4gICdjb2xvci0xMicsXG5dO1xuY29uc3QgVEhGX0JBREdFX0NPTE9SX0RFRkFVTFQgPSAnY29sb3ItMDcnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIENvbXBvbmVudGUgdXRpbGl6YWRvIG5vIGB0aGYtbWVudWAgcGFyYSBleGliaXIgcG9yIGV4ZW1wbG8gYSBxdWFudGlkYWRlIGRlIHRhcmVmYXMgcGVuZGVudGVzLlxuICovXG5leHBvcnQgY2xhc3MgVGhmQmFkZ2VCYXNlQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9jb2xvcjogc3RyaW5nO1xuICBwcml2YXRlIF92YWx1ZTogbnVtYmVyO1xuXG4gIGJhZGdlVmFsdWU6IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgYSBjb3IgZGUgZnVuZG8gZG8gY29tcG9uZW50ZSBlIGFjZWl0YSBvcyB2YWxvcmVzOlxuICAgKlxuICAgKiA8c3BhbiBjbGFzcz1cImRvdCB0aGYtY29sb3ItMDFcIj48L3NwYW4+IGBjb2xvci0wMWBcbiAgICpcbiAgICogPHNwYW4gY2xhc3M9XCJkb3QgdGhmLWNvbG9yLTAyXCI+PC9zcGFuPiBgY29sb3ItMDJgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHRoZi1jb2xvci0wM1wiPjwvc3Bhbj4gYGNvbG9yLTAzYFxuICAgKlxuICAgKiA8c3BhbiBjbGFzcz1cImRvdCB0aGYtY29sb3ItMDRcIj48L3NwYW4+IGBjb2xvci0wNGBcbiAgICpcbiAgICogPHNwYW4gY2xhc3M9XCJkb3QgdGhmLWNvbG9yLTA1XCI+PC9zcGFuPiBgY29sb3ItMDVgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHRoZi1jb2xvci0wNlwiPjwvc3Bhbj4gYGNvbG9yLTA2YFxuICAgKlxuICAgKiA8c3BhbiBjbGFzcz1cImRvdCB0aGYtY29sb3ItMDdcIj48L3NwYW4+IGBjb2xvci0wN2BcbiAgICpcbiAgICogPHNwYW4gY2xhc3M9XCJkb3QgdGhmLWNvbG9yLTA4XCI+PC9zcGFuPiBgY29sb3ItMDhgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHRoZi1jb2xvci0wOVwiPjwvc3Bhbj4gYGNvbG9yLTA5YFxuICAgKlxuICAgKiA8c3BhbiBjbGFzcz1cImRvdCB0aGYtY29sb3ItMTBcIj48L3NwYW4+IGBjb2xvci0xMGBcbiAgICpcbiAgICogPHNwYW4gY2xhc3M9XCJkb3QgdGhmLWNvbG9yLTExXCI+PC9zcGFuPiBgY29sb3ItMTFgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHRoZi1jb2xvci0xMlwiPjwvc3Bhbj4gYGNvbG9yLTEyYFxuICAgKlxuICAgKiBAZGVmYXVsdCBgY29sb3ItMDdgXG4gICAqL1xuICBASW5wdXQoJ3QtY29sb3InKSBzZXQgY29sb3IodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2NvbG9yID0gVEhGX0JBREdFX0NPTE9SUy5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IFRIRl9CQURHRV9DT0xPUl9ERUZBVUxUO1xuICB9XG5cbiAgZ2V0IGNvbG9yKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBOw7ptZXJvIGV4aWJpZG8gbm8gY29tcG9uZW50ZSwgY2FzbyBvIG1lc21vIHNlamEgbWFpb3IgcXVlIDk5IG8gdmFsb3IgZXhpYmlkbyBzZXLDoSA5OSsuXG4gICAqL1xuICBASW5wdXQoJ3QtdmFsdWUnKSBzZXQgdmFsdWUodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3ZhbHVlID0gY29udmVydFRvSW50KHZhbHVlKTtcbiAgICB0aGlzLnNldEJhZGdlVmFsdWUodGhpcy5fdmFsdWUpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRCYWRnZVZhbHVlKHZhbHVlOiBudW1iZXIpIHtcbiAgICBjb25zdCB2YWxpZFJhbmdlVmFsdWUgPSAodmFsdWUgfHwgdmFsdWUgPT09IDApICYmICh2YWx1ZSA+PSAwICYmIHZhbHVlIDwgMTAwKTtcbiAgICB0aGlzLmJhZGdlVmFsdWUgPSB2YWxpZFJhbmdlVmFsdWUgPyB2YWx1ZS50b1N0cmluZygpIDogdmFsdWUgPiA5OSA/ICc5OSsnIDogdW5kZWZpbmVkO1xuICB9XG5cbn1cbiJdfQ==