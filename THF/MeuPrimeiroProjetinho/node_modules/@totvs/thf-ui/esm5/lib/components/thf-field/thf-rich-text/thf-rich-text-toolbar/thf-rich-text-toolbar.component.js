/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Output, ViewChild, Input } from '@angular/core';
import { ThfLanguageService } from '../../../../services/thf-language/thf-language.service';
import { thfRichTextLiteralsDefault } from '../thf-rich-text-literals';
var ThfRichTextToolbarComponent = /** @class */ (function () {
    function ThfRichTextToolbarComponent(languageService) {
        this.languageService = languageService;
        this.literals = tslib_1.__assign({}, thfRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.alignButtons = [
            {
                command: 'justifyleft',
                icon: 'thf-icon-align-left',
                tooltip: this.literals.left,
                action: this.emitAlignCommand.bind(this, 'justifyleft'),
                selected: true
            },
            {
                command: 'justifycenter',
                icon: 'thf-icon-align-center',
                tooltip: this.literals.center,
                action: this.emitAlignCommand.bind(this, 'justifycenter')
            },
            {
                command: 'justifyright',
                icon: 'thf-icon-align-right',
                tooltip: this.literals.right,
                action: this.emitAlignCommand.bind(this, 'justifyright')
            },
            {
                command: 'justifyfull',
                icon: 'thf-icon-align-justify',
                tooltip: this.literals.justify,
                action: this.emitAlignCommand.bind(this, 'justifyfull')
            }
        ];
        this.formatButtons = [
            {
                command: 'bold',
                icon: 'thf-icon-text-bold',
                tooltip: this.literals.bold,
                action: this.emitCommand.bind(this, 'bold')
            },
            {
                command: 'italic',
                icon: 'thf-icon-text-italic',
                tooltip: this.literals.italic,
                action: this.emitCommand.bind(this, 'italic')
            },
            {
                command: 'underline',
                icon: 'thf-icon-text-underline',
                tooltip: this.literals.underline,
                action: this.emitCommand.bind(this, 'underline')
            }
        ];
        this.listButtons = [
            {
                command: 'insertUnorderedList',
                icon: 'thf-icon-list',
                tooltip: this.literals.unorderedList,
                action: this.emitCommand.bind(this, 'insertUnorderedList')
            }
        ];
        this.command = new EventEmitter();
    }
    Object.defineProperty(ThfRichTextToolbarComponent.prototype, "readonly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readonly;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._readonly = value;
            this.toggleDisableButtons(this._readonly);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfRichTextToolbarComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.removeButtonFocus();
    };
    /**
     * @param {?} commands
     * @return {?}
     */
    ThfRichTextToolbarComponent.prototype.setButtonsStates = /**
     * @param {?} commands
     * @return {?}
     */
    function (commands) {
        if (!this.readonly) {
            this.alignButtons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            function (button) { button.selected = commands.includes(button.command); }));
            this.formatButtons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            function (button) { button.selected = commands.includes(button.command); }));
            this.listButtons[0].selected = commands.includes(this.listButtons[0].command);
        }
    };
    /**
     * @private
     * @param {?} command
     * @return {?}
     */
    ThfRichTextToolbarComponent.prototype.emitAlignCommand = /**
     * @private
     * @param {?} command
     * @return {?}
     */
    function (command) {
        /** @type {?} */
        var index = this.alignButtons.findIndex((/**
         * @param {?} btn
         * @return {?}
         */
        function (btn) { return btn.command === command; }));
        if (this.alignButtons[index].selected) {
            this.alignButtons[index].selected = false;
        }
        this.command.emit(command);
    };
    /**
     * @private
     * @param {?} command
     * @return {?}
     */
    ThfRichTextToolbarComponent.prototype.emitCommand = /**
     * @private
     * @param {?} command
     * @return {?}
     */
    function (command) {
        this.command.emit(command);
    };
    /**
     * @private
     * @return {?}
     */
    ThfRichTextToolbarComponent.prototype.removeButtonFocus = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var buttons = this.toolbarElement.nativeElement.querySelectorAll('button');
        buttons.forEach((/**
         * @param {?} button
         * @return {?}
         */
        function (button) { button.setAttribute('tabindex', '-1'); }));
    };
    /**
     * @private
     * @param {?} state
     * @return {?}
     */
    ThfRichTextToolbarComponent.prototype.toggleDisableButtons = /**
     * @private
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this.alignButtons.forEach((/**
         * @param {?} button
         * @return {?}
         */
        function (button) { button.disabled = state; }));
        this.formatButtons.forEach((/**
         * @param {?} button
         * @return {?}
         */
        function (button) { button.disabled = state; }));
        this.listButtons[0].disabled = state;
    };
    ThfRichTextToolbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-rich-text-toolbar',
                    template: "<div class=\"thf-rich-text-toolbar\" #toolbarElement>\n  <div class=\"thf-rich-text-toolbar-button-align\">\n    <thf-button-group [t-buttons]=\"formatButtons\" t-toggle=\"multiple\"></thf-button-group>\n  </div>\n\n  <div class=\"thf-rich-text-toolbar-button-align\">\n    <thf-button-group [t-buttons]=\"alignButtons\" t-toggle=\"single\"></thf-button-group>\n  </div>\n\n  <div class=\"thf-rich-text-toolbar-button-align\">\n    <thf-button-group [t-buttons]=\"listButtons\" t-toggle=\"single\"></thf-button-group>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    ThfRichTextToolbarComponent.ctorParameters = function () { return [
        { type: ThfLanguageService }
    ]; };
    ThfRichTextToolbarComponent.propDecorators = {
        toolbarElement: [{ type: ViewChild, args: ['toolbarElement', { static: true },] }],
        readonly: [{ type: Input, args: ['t-readonly',] }],
        command: [{ type: Output, args: ['t-command',] }]
    };
    return ThfRichTextToolbarComponent;
}());
export { ThfRichTextToolbarComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfRichTextToolbarComponent.prototype._readonly;
    /** @type {?} */
    ThfRichTextToolbarComponent.prototype.literals;
    /** @type {?} */
    ThfRichTextToolbarComponent.prototype.alignButtons;
    /** @type {?} */
    ThfRichTextToolbarComponent.prototype.formatButtons;
    /** @type {?} */
    ThfRichTextToolbarComponent.prototype.listButtons;
    /** @type {?} */
    ThfRichTextToolbarComponent.prototype.toolbarElement;
    /** @type {?} */
    ThfRichTextToolbarComponent.prototype.command;
    /**
     * @type {?}
     * @private
     */
    ThfRichTextToolbarComponent.prototype.languageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXJpY2gtdGV4dC10b29sYmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtZmllbGQvdGhmLXJpY2gtdGV4dC90aGYtcmljaC10ZXh0LXRvb2xiYXIvdGhmLXJpY2gtdGV4dC10b29sYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0csT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDNUYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFHdkU7SUFtRkUscUNBQW9CLGVBQW1DO1FBQW5DLG9CQUFlLEdBQWYsZUFBZSxDQUFvQjtRQTNFOUMsYUFBUSx3QkFDWiwwQkFBMEIsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixFQUFFLENBQUMsRUFDdEU7UUFFRixpQkFBWSxHQUE2QztZQUN2RDtnQkFDRSxPQUFPLEVBQUUsYUFBYTtnQkFDdEIsSUFBSSxFQUFFLHFCQUFxQjtnQkFDM0IsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSTtnQkFDM0IsTUFBTSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQztnQkFDdkQsUUFBUSxFQUFFLElBQUk7YUFDZjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxlQUFlO2dCQUN4QixJQUFJLEVBQUUsdUJBQXVCO2dCQUM3QixPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNO2dCQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDO2FBQzFEO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLGNBQWM7Z0JBQ3ZCLElBQUksRUFBRSxzQkFBc0I7Z0JBQzVCLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUs7Z0JBQzVCLE1BQU0sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUM7YUFDekQ7WUFDRDtnQkFDRSxPQUFPLEVBQUUsYUFBYTtnQkFDdEIsSUFBSSxFQUFFLHdCQUF3QjtnQkFDOUIsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTztnQkFDOUIsTUFBTSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQzthQUN4RDtTQUNGLENBQUM7UUFFRixrQkFBYSxHQUE2QztZQUN4RDtnQkFDRSxPQUFPLEVBQUUsTUFBTTtnQkFDZixJQUFJLEVBQUUsb0JBQW9CO2dCQUMxQixPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJO2dCQUMzQixNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQzthQUM1QztZQUNEO2dCQUNFLE9BQU8sRUFBRSxRQUFRO2dCQUNqQixJQUFJLEVBQUUsc0JBQXNCO2dCQUM1QixPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNO2dCQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQzthQUM5QztZQUNEO2dCQUNFLE9BQU8sRUFBRSxXQUFXO2dCQUNwQixJQUFJLEVBQUUseUJBQXlCO2dCQUMvQixPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTO2dCQUNoQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQzthQUNqRDtTQUNGLENBQUM7UUFFRixnQkFBVyxHQUE2QztZQUN0RDtnQkFDRSxPQUFPLEVBQUUscUJBQXFCO2dCQUM5QixJQUFJLEVBQUUsZUFBZTtnQkFDckIsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYTtnQkFDcEMsTUFBTSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxxQkFBcUIsQ0FBQzthQUMzRDtTQUNGLENBQUM7UUFhbUIsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7SUFFQyxDQUFDO0lBWDVELHNCQUF5QixpREFBUTs7OztRQUtqQztZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDOzs7OztRQVBELFVBQWtDLEtBQWM7WUFDOUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDdkIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1QyxDQUFDOzs7T0FBQTs7OztJQVVELHFEQUFlOzs7SUFBZjtRQUNFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBRUQsc0RBQWdCOzs7O0lBQWhCLFVBQWlCLFFBQXVCO1FBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsTUFBTSxJQUFNLE1BQU0sQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQztZQUM5RixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLE1BQU0sSUFBTSxNQUFNLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUM7WUFDL0YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQy9FO0lBQ0gsQ0FBQzs7Ozs7O0lBRU8sc0RBQWdCOzs7OztJQUF4QixVQUF5QixPQUFlOztZQUNoQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTOzs7O1FBQUUsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBdkIsQ0FBdUIsRUFBRTtRQUMzRSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztTQUMzQztRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7OztJQUVPLGlEQUFXOzs7OztJQUFuQixVQUFvQixPQUFlO1FBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBRU8sdURBQWlCOzs7O0lBQXpCOztZQUNRLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7UUFDNUUsT0FBTyxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLE1BQU0sSUFBTSxNQUFNLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDO0lBQ3hFLENBQUM7Ozs7OztJQUVPLDBEQUFvQjs7Ozs7SUFBNUIsVUFBNkIsS0FBYztRQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLE1BQU0sSUFBTSxNQUFNLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTzs7OztRQUFDLFVBQUEsTUFBTSxJQUFNLE1BQU0sQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3ZDLENBQUM7O2dCQXRIRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMscWlCQUFxRDtpQkFDdEQ7Ozs7Z0JBUFEsa0JBQWtCOzs7aUNBMEV4QixTQUFTLFNBQUMsZ0JBQWdCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOzJCQUU1QyxLQUFLLFNBQUMsWUFBWTswQkFTbEIsTUFBTSxTQUFDLFdBQVc7O0lBdUNyQixrQ0FBQztDQUFBLEFBeEhELElBd0hDO1NBcEhZLDJCQUEyQjs7Ozs7O0lBRXRDLGdEQUEyQjs7SUFFM0IsK0NBRUU7O0lBRUYsbURBMEJFOztJQUVGLG9EQW1CRTs7SUFFRixrREFPRTs7SUFFRixxREFBMEU7O0lBVzFFLDhDQUEwRDs7Ozs7SUFFOUMsc0RBQTJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgVmlld0NoaWxkLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBUaGZMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zZXJ2aWNlcy90aGYtbGFuZ3VhZ2UvdGhmLWxhbmd1YWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgdGhmUmljaFRleHRMaXRlcmFsc0RlZmF1bHQgfSBmcm9tICcuLi90aGYtcmljaC10ZXh0LWxpdGVyYWxzJztcbmltcG9ydCB7IFRoZlJpY2hUZXh0VG9vbGJhckJ1dHRvbkdyb3VwSXRlbSB9IGZyb20gJy4uL2ludGVyZmFjZXMvdGhmLXJpY2gtdGV4dC10b29sYmFyLWJ1dHRvbi1ncm91cC1pdGVtLmludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoZi1yaWNoLXRleHQtdG9vbGJhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi90aGYtcmljaC10ZXh0LXRvb2xiYXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFRoZlJpY2hUZXh0VG9vbGJhckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG4gIHByaXZhdGUgX3JlYWRvbmx5OiBib29sZWFuO1xuXG4gIHJlYWRvbmx5IGxpdGVyYWxzID0ge1xuICAgIC4uLnRoZlJpY2hUZXh0TGl0ZXJhbHNEZWZhdWx0W3RoaXMubGFuZ3VhZ2VTZXJ2aWNlLmdldFNob3J0TGFuZ3VhZ2UoKV1cbiAgfTtcblxuICBhbGlnbkJ1dHRvbnM6IEFycmF5PFRoZlJpY2hUZXh0VG9vbGJhckJ1dHRvbkdyb3VwSXRlbT4gPSBbXG4gICAge1xuICAgICAgY29tbWFuZDogJ2p1c3RpZnlsZWZ0JyxcbiAgICAgIGljb246ICd0aGYtaWNvbi1hbGlnbi1sZWZ0JyxcbiAgICAgIHRvb2x0aXA6IHRoaXMubGl0ZXJhbHMubGVmdCxcbiAgICAgIGFjdGlvbjogdGhpcy5lbWl0QWxpZ25Db21tYW5kLmJpbmQodGhpcywgJ2p1c3RpZnlsZWZ0JyksXG4gICAgICBzZWxlY3RlZDogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgY29tbWFuZDogJ2p1c3RpZnljZW50ZXInLFxuICAgICAgaWNvbjogJ3RoZi1pY29uLWFsaWduLWNlbnRlcicsXG4gICAgICB0b29sdGlwOiB0aGlzLmxpdGVyYWxzLmNlbnRlcixcbiAgICAgIGFjdGlvbjogdGhpcy5lbWl0QWxpZ25Db21tYW5kLmJpbmQodGhpcywgJ2p1c3RpZnljZW50ZXInKVxuICAgIH0sXG4gICAge1xuICAgICAgY29tbWFuZDogJ2p1c3RpZnlyaWdodCcsXG4gICAgICBpY29uOiAndGhmLWljb24tYWxpZ24tcmlnaHQnLFxuICAgICAgdG9vbHRpcDogdGhpcy5saXRlcmFscy5yaWdodCxcbiAgICAgIGFjdGlvbjogdGhpcy5lbWl0QWxpZ25Db21tYW5kLmJpbmQodGhpcywgJ2p1c3RpZnlyaWdodCcpXG4gICAgfSxcbiAgICB7XG4gICAgICBjb21tYW5kOiAnanVzdGlmeWZ1bGwnLFxuICAgICAgaWNvbjogJ3RoZi1pY29uLWFsaWduLWp1c3RpZnknLFxuICAgICAgdG9vbHRpcDogdGhpcy5saXRlcmFscy5qdXN0aWZ5LFxuICAgICAgYWN0aW9uOiB0aGlzLmVtaXRBbGlnbkNvbW1hbmQuYmluZCh0aGlzLCAnanVzdGlmeWZ1bGwnKVxuICAgIH1cbiAgXTtcblxuICBmb3JtYXRCdXR0b25zOiBBcnJheTxUaGZSaWNoVGV4dFRvb2xiYXJCdXR0b25Hcm91cEl0ZW0+ID0gW1xuICAgIHtcbiAgICAgIGNvbW1hbmQ6ICdib2xkJyxcbiAgICAgIGljb246ICd0aGYtaWNvbi10ZXh0LWJvbGQnLFxuICAgICAgdG9vbHRpcDogdGhpcy5saXRlcmFscy5ib2xkLFxuICAgICAgYWN0aW9uOiB0aGlzLmVtaXRDb21tYW5kLmJpbmQodGhpcywgJ2JvbGQnKVxuICAgIH0sXG4gICAge1xuICAgICAgY29tbWFuZDogJ2l0YWxpYycsXG4gICAgICBpY29uOiAndGhmLWljb24tdGV4dC1pdGFsaWMnLFxuICAgICAgdG9vbHRpcDogdGhpcy5saXRlcmFscy5pdGFsaWMsXG4gICAgICBhY3Rpb246IHRoaXMuZW1pdENvbW1hbmQuYmluZCh0aGlzLCAnaXRhbGljJylcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvbW1hbmQ6ICd1bmRlcmxpbmUnLFxuICAgICAgaWNvbjogJ3RoZi1pY29uLXRleHQtdW5kZXJsaW5lJyxcbiAgICAgIHRvb2x0aXA6IHRoaXMubGl0ZXJhbHMudW5kZXJsaW5lLFxuICAgICAgYWN0aW9uOiB0aGlzLmVtaXRDb21tYW5kLmJpbmQodGhpcywgJ3VuZGVybGluZScpXG4gICAgfVxuICBdO1xuXG4gIGxpc3RCdXR0b25zOiBBcnJheTxUaGZSaWNoVGV4dFRvb2xiYXJCdXR0b25Hcm91cEl0ZW0+ID0gW1xuICAgIHtcbiAgICAgIGNvbW1hbmQ6ICdpbnNlcnRVbm9yZGVyZWRMaXN0JyxcbiAgICAgIGljb246ICd0aGYtaWNvbi1saXN0JyxcbiAgICAgIHRvb2x0aXA6IHRoaXMubGl0ZXJhbHMudW5vcmRlcmVkTGlzdCxcbiAgICAgIGFjdGlvbjogdGhpcy5lbWl0Q29tbWFuZC5iaW5kKHRoaXMsICdpbnNlcnRVbm9yZGVyZWRMaXN0JylcbiAgICB9XG4gIF07XG5cbiAgQFZpZXdDaGlsZCgndG9vbGJhckVsZW1lbnQnLCB7IHN0YXRpYzogdHJ1ZSB9KSB0b29sYmFyRWxlbWVudDogRWxlbWVudFJlZjtcblxuICBASW5wdXQoJ3QtcmVhZG9ubHknKSBzZXQgcmVhZG9ubHkodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9yZWFkb25seSA9IHZhbHVlO1xuICAgIHRoaXMudG9nZ2xlRGlzYWJsZUJ1dHRvbnModGhpcy5fcmVhZG9ubHkpO1xuICB9XG5cbiAgZ2V0IHJlYWRvbmx5KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkb25seTtcbiAgfVxuXG4gIEBPdXRwdXQoJ3QtY29tbWFuZCcpIGNvbW1hbmQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxhbmd1YWdlU2VydmljZTogVGhmTGFuZ3VhZ2VTZXJ2aWNlKSB7IH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5yZW1vdmVCdXR0b25Gb2N1cygpO1xuICB9XG5cbiAgc2V0QnV0dG9uc1N0YXRlcyhjb21tYW5kczogQXJyYXk8c3RyaW5nPikge1xuICAgIGlmICghdGhpcy5yZWFkb25seSkge1xuICAgICAgdGhpcy5hbGlnbkJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4geyBidXR0b24uc2VsZWN0ZWQgPSBjb21tYW5kcy5pbmNsdWRlcyhidXR0b24uY29tbWFuZCk7IH0pO1xuICAgICAgdGhpcy5mb3JtYXRCdXR0b25zLmZvckVhY2goYnV0dG9uID0+IHsgYnV0dG9uLnNlbGVjdGVkID0gY29tbWFuZHMuaW5jbHVkZXMoYnV0dG9uLmNvbW1hbmQpOyB9KTtcbiAgICAgIHRoaXMubGlzdEJ1dHRvbnNbMF0uc2VsZWN0ZWQgPSBjb21tYW5kcy5pbmNsdWRlcyh0aGlzLmxpc3RCdXR0b25zWzBdLmNvbW1hbmQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZW1pdEFsaWduQ29tbWFuZChjb21tYW5kOiBzdHJpbmcpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuYWxpZ25CdXR0b25zLmZpbmRJbmRleCggYnRuID0+IGJ0bi5jb21tYW5kID09PSBjb21tYW5kICk7XG4gICAgaWYgKHRoaXMuYWxpZ25CdXR0b25zW2luZGV4XS5zZWxlY3RlZCkge1xuICAgICAgdGhpcy5hbGlnbkJ1dHRvbnNbaW5kZXhdLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuY29tbWFuZC5lbWl0KGNvbW1hbmQpO1xuICB9XG5cbiAgcHJpdmF0ZSBlbWl0Q29tbWFuZChjb21tYW5kOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNvbW1hbmQuZW1pdChjb21tYW5kKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlQnV0dG9uRm9jdXMoKSB7XG4gICAgY29uc3QgYnV0dG9ucyA9IHRoaXMudG9vbGJhckVsZW1lbnQubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKTtcbiAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHsgYnV0dG9uLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKTsgfSk7XG4gIH1cblxuICBwcml2YXRlIHRvZ2dsZURpc2FibGVCdXR0b25zKHN0YXRlOiBib29sZWFuKSB7XG4gICAgdGhpcy5hbGlnbkJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4geyBidXR0b24uZGlzYWJsZWQgPSBzdGF0ZTsgfSk7XG4gICAgdGhpcy5mb3JtYXRCdXR0b25zLmZvckVhY2goYnV0dG9uID0+IHsgYnV0dG9uLmRpc2FibGVkID0gc3RhdGU7IH0pO1xuICAgIHRoaXMubGlzdEJ1dHRvbnNbMF0uZGlzYWJsZWQgPSBzdGF0ZTtcbiAgfVxuXG59XG4iXX0=