/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { Component, ElementRef, forwardRef, Input } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { ThfInputGeneric } from '../thf-input-generic/thf-input-generic';
/**
 * \@docsExtends ThfInputBaseComponent
 *
 * \@description
 * O thf-password é um input específico para senhas. Já possui tipo, estilo e ícone predefinidos.
 *
 * \@example
 *
 * <example name="thf-password-basic" title="Totvs Password Basic">
 *   <file name="sample-thf-password-basic/sample-thf-password-basic.component.html"> </file>
 *   <file name="sample-thf-password-basic/sample-thf-password-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-password-labs" title="Totvs Password Labs">
 *   <file name="sample-thf-password-labs/sample-thf-password-labs.component.html"> </file>
 *   <file name="sample-thf-password-labs/sample-thf-password-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-password-reset" title="Totvs Password - Reset">
 *   <file name="sample-thf-password-reset/sample-thf-password-reset.component.html"> </file>
 *   <file name="sample-thf-password-reset/sample-thf-password-reset.component.ts"> </file>
 * </example>
 */
var ThfPasswordComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfPasswordComponent, _super);
    function ThfPasswordComponent(el) {
        var _this = _super.call(this, el) || this;
        _this._hidePasswordPeek = false;
        _this.type = 'password';
        _this.visiblePassword = false;
        return _this;
    }
    Object.defineProperty(ThfPasswordComponent.prototype, "hidePasswordPeek", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hidePasswordPeek;
        },
        /**
         * @optional
         *
         * @description
         *
         * Permite esconder a função de espiar a senha digitada.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Permite esconder a função de espiar a senha digitada.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hidePasswordPeek = convertToBoolean(value);
            if (value) {
                this.visiblePassword = false;
                this.type = 'password';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} c
     * @return {?}
     */
    ThfPasswordComponent.prototype.extraValidation = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    /**
     * @return {?}
     */
    ThfPasswordComponent.prototype.showPassword = /**
     * @return {?}
     */
    function () {
        this.visiblePassword = !this.visiblePassword;
        this.type = this.type === 'password' ? 'text' : 'password';
    };
    ThfPasswordComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-password',
                    template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n    <div class=\"thf-field-icon-container-left\">\n      <span class=\"thf-icon thf-field-icon thf-icon-lock\"\n        [class.thf-field-icon-disabled]=\"disabled\">\n      </span>\n    </div>\n\n    <input #inp\n      class=\"thf-input thf-input-icon-left\"\n      [attr.name]=\"name\"\n      [class.thf-input-double-icon-right]=\"clean && inp.value && !hidePasswordPeek\"\n      [class.thf-input-icon-right]=\"clean || !hidePasswordPeek\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"disabled ? 'password' : type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <thf-clean\n        class=\"thf-icon thf-field-icon\"\n        [t-element-ref]=\"inputEl\"\n        (t-change-event)=\"clear($event)\">\n      </thf-clean>\n\n      <span *ngIf=\"!hidePasswordPeek && !disabled\"\n        class=\"thf-icon thf-field-icon\"\n        [ngClass]=\"visiblePassword ? 'thf-icon-eye' : 'thf-icon-eye-off thf-field-icon-disabled'\"\n        (click)=\"showPassword()\">\n      </span>\n    </div>\n  </div>\n\n  <thf-field-container-bottom\n    [t-error-pattern]=\"getErrorPattern()\">\n  </thf-field-container-bottom>\n\n</thf-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ThfPasswordComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ThfPasswordComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    ThfPasswordComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ThfPasswordComponent.propDecorators = {
        hidePasswordPeek: [{ type: Input, args: ['t-hide-password-peek',] }]
    };
    return ThfPasswordComponent;
}(ThfInputGeneric));
export { ThfPasswordComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPasswordComponent.prototype._hidePasswordPeek;
    /** @type {?} */
    ThfPasswordComponent.prototype.type;
    /** @type {?} */
    ThfPasswordComponent.prototype.visiblePassword;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhc3N3b3JkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtZmllbGQvdGhmLXBhc3N3b3JkL3RoZi1wYXNzd29yZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQW1CLGFBQWEsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ25GLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdDQUF3QyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QnpFO0lBZTBDLGdEQUFlO0lBNEJ2RCw4QkFBWSxFQUFjO1FBQTFCLFlBQ0Usa0JBQU0sRUFBRSxDQUFDLFNBQ1Y7UUE1Qk8sdUJBQWlCLEdBQWEsS0FBSyxDQUFDO1FBRTVDLFVBQUksR0FBRyxVQUFVLENBQUM7UUFDbEIscUJBQWUsR0FBRyxLQUFLLENBQUM7O0lBeUJ4QixDQUFDO0lBZEQsc0JBQW1DLGtEQUFnQjs7OztRQVFuRDtZQUNFLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO1FBQ2hDLENBQUM7UUFuQkQ7Ozs7Ozs7O1dBUUc7Ozs7Ozs7Ozs7OztRQUNILFVBQW9ELEtBQWM7WUFDaEUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pELElBQUksS0FBSyxFQUFFO2dCQUNULElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO2dCQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQzthQUN4QjtRQUNILENBQUM7OztPQUFBOzs7OztJQVVELDhDQUFlOzs7O0lBQWYsVUFBZ0IsQ0FBa0I7UUFDaEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7O0lBRUQsMkNBQVk7OztJQUFaO1FBQ0UsSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDN0MsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7SUFDN0QsQ0FBQzs7Z0JBdERGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztvQkFDeEIseWlEQUE0QztvQkFDNUMsU0FBUyxFQUFFO3dCQUNYOzRCQUNFLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxVQUFVOzs7NEJBQUMsY0FBTSxPQUFBLG9CQUFvQixFQUFwQixDQUFvQixFQUFDOzRCQUNuRCxLQUFLLEVBQUUsSUFBSTt5QkFDWjt3QkFDRDs0QkFDRSxPQUFPLEVBQUUsYUFBYTs0QkFDdEIsV0FBVyxFQUFFLFVBQVU7Ozs0QkFBQyxjQUFNLE9BQUEsb0JBQW9CLEVBQXBCLENBQW9CLEVBQUM7NEJBQ25ELEtBQUssRUFBRSxJQUFJO3lCQUNaO3FCQUFDO2lCQUNIOzs7O2dCQTFDbUIsVUFBVTs7O21DQTJEM0IsS0FBSyxTQUFDLHNCQUFzQjs7SUF5Qi9CLDJCQUFDO0NBQUEsQUF4REQsQ0FlMEMsZUFBZSxHQXlDeEQ7U0F6Q1ksb0JBQW9COzs7Ozs7SUFFL0IsaURBQTRDOztJQUU1QyxvQ0FBa0I7O0lBQ2xCLCtDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgTkdfVkFMSURBVE9SUywgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIGZvcndhcmRSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0Jvb2xlYW4gfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcbmltcG9ydCB7IFRoZklucHV0R2VuZXJpYyB9IGZyb20gJy4uL3RoZi1pbnB1dC1nZW5lcmljL3RoZi1pbnB1dC1nZW5lcmljJztcblxuLyoqXG4gKiBAZG9jc0V4dGVuZHMgVGhmSW5wdXRCYXNlQ29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBPIHRoZi1wYXNzd29yZCDDqSB1bSBpbnB1dCBlc3BlY8OtZmljbyBwYXJhIHNlbmhhcy4gSsOhIHBvc3N1aSB0aXBvLCBlc3RpbG8gZSDDrWNvbmUgcHJlZGVmaW5pZG9zLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1wYXNzd29yZC1iYXNpY1wiIHRpdGxlPVwiVG90dnMgUGFzc3dvcmQgQmFzaWNcIj5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtcGFzc3dvcmQtYmFzaWMvc2FtcGxlLXRoZi1wYXNzd29yZC1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLXBhc3N3b3JkLWJhc2ljL3NhbXBsZS10aGYtcGFzc3dvcmQtYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwidGhmLXBhc3N3b3JkLWxhYnNcIiB0aXRsZT1cIlRvdHZzIFBhc3N3b3JkIExhYnNcIj5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtcGFzc3dvcmQtbGFicy9zYW1wbGUtdGhmLXBhc3N3b3JkLWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1wYXNzd29yZC1sYWJzL3NhbXBsZS10aGYtcGFzc3dvcmQtbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJ0aGYtcGFzc3dvcmQtcmVzZXRcIiB0aXRsZT1cIlRvdHZzIFBhc3N3b3JkIC0gUmVzZXRcIj5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtcGFzc3dvcmQtcmVzZXQvc2FtcGxlLXRoZi1wYXNzd29yZC1yZXNldC5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLXBhc3N3b3JkLXJlc2V0L3NhbXBsZS10aGYtcGFzc3dvcmQtcmVzZXQuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGhmLXBhc3N3b3JkJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RoZi1wYXNzd29yZC5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW1xuICB7XG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGhmUGFzc3dvcmRDb21wb25lbnQpLFxuICAgIG11bHRpOiB0cnVlLFxuICB9LFxuICB7XG4gICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaGZQYXNzd29yZENvbXBvbmVudCksXG4gICAgbXVsdGk6IHRydWUsXG4gIH1dXG59KVxuZXhwb3J0IGNsYXNzIFRoZlBhc3N3b3JkQ29tcG9uZW50IGV4dGVuZHMgVGhmSW5wdXRHZW5lcmljIHtcblxuICBwcml2YXRlIF9oaWRlUGFzc3dvcmRQZWVrPzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHR5cGUgPSAncGFzc3dvcmQnO1xuICB2aXNpYmxlUGFzc3dvcmQgPSBmYWxzZTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBQZXJtaXRlIGVzY29uZGVyIGEgZnVuw6fDo28gZGUgZXNwaWFyIGEgc2VuaGEgZGlnaXRhZGEuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgndC1oaWRlLXBhc3N3b3JkLXBlZWsnKSBzZXQgaGlkZVBhc3N3b3JkUGVlayh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2hpZGVQYXNzd29yZFBlZWsgPSBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMudmlzaWJsZVBhc3N3b3JkID0gZmFsc2U7XG4gICAgICB0aGlzLnR5cGUgPSAncGFzc3dvcmQnO1xuICAgIH1cbiAgfVxuXG4gIGdldCBoaWRlUGFzc3dvcmRQZWVrKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9oaWRlUGFzc3dvcmRQZWVrO1xuICB9XG5cbiAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYpIHtcbiAgICBzdXBlcihlbCk7XG4gIH1cblxuICBleHRyYVZhbGlkYXRpb24oYzogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnk7IH0ge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgc2hvd1Bhc3N3b3JkKCkge1xuICAgIHRoaXMudmlzaWJsZVBhc3N3b3JkID0gIXRoaXMudmlzaWJsZVBhc3N3b3JkO1xuICAgIHRoaXMudHlwZSA9IHRoaXMudHlwZSA9PT0gJ3Bhc3N3b3JkJyA/ICd0ZXh0JyA6ICdwYXNzd29yZCc7XG4gIH1cblxufVxuIl19