/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, EventEmitter } from '@angular/core';
import { convertToBoolean } from './../../utils/util';
/**
 * \@description
 *
 * O componente `thf-modal` é utilizado para incluir conteúdos rápidos e informativos.
 *
 * No cabeçalho do componente é possível definir um título e como também permite ocultar o ícone de fechamento da modal.
 *
 * Em seu corpo é possível definir um conteúdo informativo, podendo utilizar componentes como por exemplo `thf-chart`,
 * `thf-table` e os demais componentes do THF.
 *
 * No rodapé encontram-se os botões de ação primária e secundária, no qual permitem definir uma ação e um rótulo, bem como
 * definir um estado de carregando e / ou desabilitado. Também é possível definir o botão com o tipo *danger*.
 *
 * > É possível fechar a modal através da tecla *ESC*, quando a propriedade `t-hide-close` não estiver habilitada.
 */
var ThfModalBaseComponent = /** @class */ (function () {
    function ThfModalBaseComponent() {
        this._hideClose = false;
        this._size = 'md';
        /**
         * Define o fechamento da modal ao clicar fora da mesma.
         * Informe o valor `true` para ativar o fechamento ao clicar fora da modal.
         */
        this.clickOut = false;
        // Controla se a modal fica oculto ou visível, por padrão é oculto
        this.isHidden = true;
        // Event emmiter para quando a modal é fechada pelo 'X'.
        this.onXClosed = new EventEmitter();
    }
    Object.defineProperty(ThfModalBaseComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         * Define o tamanho da modal.
         *
         * Valores válidos:
         *  - `sm` (pequeno)
         *  - `md` (médio)
         *  - `lg` (grande)
         *  - `xl` (extra grande)
         *  - `auto` (automático)
         *
         * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
         * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
         *
         * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
         */
        set: /**
         * Define o tamanho da modal.
         *
         * Valores válidos:
         *  - `sm` (pequeno)
         *  - `md` (médio)
         *  - `lg` (grande)
         *  - `xl` (extra grande)
         *  - `auto` (automático)
         *
         * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
         * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
         *
         * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
            this._size = sizes.indexOf(value) > -1 ? value : 'md';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfModalBaseComponent.prototype, "setClickOut", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.clickOut = (value === '') ? false : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfModalBaseComponent.prototype, "hideClose", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideClose;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta o ícone de fechar do cabeçalho da modal.
         *
         * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta o ícone de fechar do cabeçalho da modal.
         *
         * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideClose = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /** Função para fechar a modal. */
    /**
     * Função para fechar a modal.
     * @param {?=} xClosed
     * @return {?}
     */
    ThfModalBaseComponent.prototype.close = /**
     * Função para fechar a modal.
     * @param {?=} xClosed
     * @return {?}
     */
    function (xClosed) {
        if (xClosed === void 0) { xClosed = false; }
        this.isHidden = true;
        if (xClosed) {
            this.onXClosed.emit(xClosed);
        }
    };
    /** Função para abrir a modal. */
    /**
     * Função para abrir a modal.
     * @return {?}
     */
    ThfModalBaseComponent.prototype.open = /**
     * Função para abrir a modal.
     * @return {?}
     */
    function () {
        this.validPrimaryAction();
        this.isHidden = false;
    };
    /**
     * @return {?}
     */
    ThfModalBaseComponent.prototype.validPrimaryAction = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.primaryAction) {
            this.primaryAction = {
                action: (/**
                 * @return {?}
                 */
                function () { return _this.close(); }),
                label: 'Ok',
            };
        }
        if (!this.primaryAction['action']) {
            this.primaryAction['action'] = (/**
             * @return {?}
             */
            function () { return _this.close(); });
        }
        if (!this.primaryAction['label']) {
            this.primaryAction['label'] = 'Ok';
        }
    };
    ThfModalBaseComponent.propDecorators = {
        title: [{ type: Input, args: ['t-title',] }],
        primaryAction: [{ type: Input, args: ['t-primary-action',] }],
        secondaryAction: [{ type: Input, args: ['t-secondary-action',] }],
        size: [{ type: Input, args: ['t-size',] }],
        setClickOut: [{ type: Input, args: ['t-click-out',] }],
        hideClose: [{ type: Input, args: ['t-hide-close',] }]
    };
    return ThfModalBaseComponent;
}());
export { ThfModalBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfModalBaseComponent.prototype._hideClose;
    /**
     * @type {?}
     * @private
     */
    ThfModalBaseComponent.prototype._size;
    /**
     * Título da modal.
     * @type {?}
     */
    ThfModalBaseComponent.prototype.title;
    /**
     * Deve ser definido um objeto que implementa a interface `ThfModalAction` contendo a label e a função da primeira ação.
     * Caso esta propriedade não seja definida ou esteja incompleta, automaticamente será adicionado um botão de ação com
     * a função de fechar a modal.
     * @type {?}
     */
    ThfModalBaseComponent.prototype.primaryAction;
    /**
     * Deve ser definido um objeto que implementa a interface `ThfModalAction` contendo a label e a função da segunda ação.
     * @type {?}
     */
    ThfModalBaseComponent.prototype.secondaryAction;
    /**
     * Define o fechamento da modal ao clicar fora da mesma.
     * Informe o valor `true` para ativar o fechamento ao clicar fora da modal.
     * @type {?}
     */
    ThfModalBaseComponent.prototype.clickOut;
    /** @type {?} */
    ThfModalBaseComponent.prototype.isHidden;
    /** @type {?} */
    ThfModalBaseComponent.prototype.onXClosed;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLW1vZGFsLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1tb2RhbC90aGYtbW9kYWwtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O0FBa0J0RDtJQUFBO1FBRVUsZUFBVSxHQUFhLEtBQUssQ0FBQztRQUM3QixVQUFLLEdBQVksSUFBSSxDQUFDOzs7OztRQTJDOUIsYUFBUSxHQUFhLEtBQUssQ0FBQzs7UUF5QjNCLGFBQVEsR0FBRyxJQUFJLENBQUM7O1FBR1QsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7SUFpQ2pELENBQUM7SUExRUMsc0JBQXFCLHVDQUFJOzs7O1FBS3pCO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUM7UUF0QkQ7Ozs7Ozs7Ozs7Ozs7O1dBY0c7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQUNILFVBQTBCLEtBQWE7O2dCQUMvQixLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDO1lBQzlDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDeEQsQ0FBQzs7O09BQUE7SUFXRCxzQkFBMEIsOENBQVc7Ozs7O1FBQXJDLFVBQXNDLEtBQXVCO1lBQzNELElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkUsQ0FBQzs7O09BQUE7SUFhRCxzQkFBMkIsNENBQVM7Ozs7UUFJcEM7WUFDRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDekIsQ0FBQztRQWpCRDs7Ozs7Ozs7OztXQVVHOzs7Ozs7Ozs7Ozs7OztRQUNILFVBQXFDLEtBQWM7WUFDakQsSUFBSSxDQUFDLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxDQUFDOzs7T0FBQTtJQVlELGtDQUFrQzs7Ozs7O0lBQ2xDLHFDQUFLOzs7OztJQUFMLFVBQU0sT0FBZTtRQUFmLHdCQUFBLEVBQUEsZUFBZTtRQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzlCO0lBQ0gsQ0FBQztJQUVELGlDQUFpQzs7Ozs7SUFDakMsb0NBQUk7Ozs7SUFBSjtRQUNFLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBRTFCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7Ozs7SUFFRCxrREFBa0I7OztJQUFsQjtRQUFBLGlCQWNDO1FBYkMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdkIsSUFBSSxDQUFDLGFBQWEsR0FBRztnQkFDbkIsTUFBTTs7O2dCQUFFLGNBQU0sT0FBQSxLQUFJLENBQUMsS0FBSyxFQUFFLEVBQVosQ0FBWSxDQUFBO2dCQUMxQixLQUFLLEVBQUUsSUFBSTthQUNaLENBQUM7U0FDSDtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDOzs7WUFBRyxjQUFNLE9BQUEsS0FBSSxDQUFDLEtBQUssRUFBRSxFQUFaLENBQVksQ0FBQSxDQUFDO1NBQ25EO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUM7U0FDcEM7SUFDSCxDQUFDOzt3QkFuR0EsS0FBSyxTQUFDLFNBQVM7Z0NBT2YsS0FBSyxTQUFDLGtCQUFrQjtrQ0FHeEIsS0FBSyxTQUFDLG9CQUFvQjt1QkFpQjFCLEtBQUssU0FBQyxRQUFROzhCQWNkLEtBQUssU0FBQyxhQUFhOzRCQWVuQixLQUFLLFNBQUMsY0FBYzs7SUE2Q3ZCLDRCQUFDO0NBQUEsQUEzR0QsSUEyR0M7U0EzR1kscUJBQXFCOzs7Ozs7SUFFaEMsMkNBQXFDOzs7OztJQUNyQyxzQ0FBOEI7Ozs7O0lBRzlCLHNDQUFnQzs7Ozs7OztJQU9oQyw4Q0FBMEQ7Ozs7O0lBRzFELGdEQUE4RDs7Ozs7O0lBOEI5RCx5Q0FBMkI7O0lBeUIzQix5Q0FBZ0I7O0lBR2hCLDBDQUErQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4vLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBUaGZNb2RhbEFjdGlvbiB9IGZyb20gJy4vdGhmLW1vZGFsLWFjdGlvbi5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgdGhmLW1vZGFsYCDDqSB1dGlsaXphZG8gcGFyYSBpbmNsdWlyIGNvbnRlw7pkb3MgcsOhcGlkb3MgZSBpbmZvcm1hdGl2b3MuXG4gKlxuICogTm8gY2FiZcOnYWxobyBkbyBjb21wb25lbnRlIMOpIHBvc3PDrXZlbCBkZWZpbmlyIHVtIHTDrXR1bG8gZSBjb21vIHRhbWLDqW0gcGVybWl0ZSBvY3VsdGFyIG8gw61jb25lIGRlIGZlY2hhbWVudG8gZGEgbW9kYWwuXG4gKlxuICogRW0gc2V1IGNvcnBvIMOpIHBvc3PDrXZlbCBkZWZpbmlyIHVtIGNvbnRlw7pkbyBpbmZvcm1hdGl2bywgcG9kZW5kbyB1dGlsaXphciBjb21wb25lbnRlcyBjb21vIHBvciBleGVtcGxvIGB0aGYtY2hhcnRgLFxuICogYHRoZi10YWJsZWAgZSBvcyBkZW1haXMgY29tcG9uZW50ZXMgZG8gVEhGLlxuICpcbiAqIE5vIHJvZGFww6kgZW5jb250cmFtLXNlIG9zIGJvdMO1ZXMgZGUgYcOnw6NvIHByaW3DoXJpYSBlIHNlY3VuZMOhcmlhLCBubyBxdWFsIHBlcm1pdGVtIGRlZmluaXIgdW1hIGHDp8OjbyBlIHVtIHLDs3R1bG8sIGJlbSBjb21vXG4gKiBkZWZpbmlyIHVtIGVzdGFkbyBkZSBjYXJyZWdhbmRvIGUgLyBvdSBkZXNhYmlsaXRhZG8uIFRhbWLDqW0gw6kgcG9zc8OtdmVsIGRlZmluaXIgbyBib3TDo28gY29tIG8gdGlwbyAqZGFuZ2VyKi5cbiAqXG4gKiA+IMOJIHBvc3PDrXZlbCBmZWNoYXIgYSBtb2RhbCBhdHJhdsOpcyBkYSB0ZWNsYSAqRVNDKiwgcXVhbmRvIGEgcHJvcHJpZWRhZGUgYHQtaGlkZS1jbG9zZWAgbsOjbyBlc3RpdmVyIGhhYmlsaXRhZGEuXG4gKi9cbmV4cG9ydCBjbGFzcyBUaGZNb2RhbEJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2hpZGVDbG9zZT86IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfc2l6ZT86IHN0cmluZyA9ICdtZCc7XG5cbiAgLyoqIFTDrXR1bG8gZGEgbW9kYWwuICovXG4gIEBJbnB1dCgndC10aXRsZScpIHRpdGxlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIERldmUgc2VyIGRlZmluaWRvIHVtIG9iamV0byBxdWUgaW1wbGVtZW50YSBhIGludGVyZmFjZSBgVGhmTW9kYWxBY3Rpb25gIGNvbnRlbmRvIGEgbGFiZWwgZSBhIGZ1bsOnw6NvIGRhIHByaW1laXJhIGHDp8Ojby5cbiAgICogQ2FzbyBlc3RhIHByb3ByaWVkYWRlIG7Do28gc2VqYSBkZWZpbmlkYSBvdSBlc3RlamEgaW5jb21wbGV0YSwgYXV0b21hdGljYW1lbnRlIHNlcsOhIGFkaWNpb25hZG8gdW0gYm90w6NvIGRlIGHDp8OjbyBjb21cbiAgICogYSBmdW7Dp8OjbyBkZSBmZWNoYXIgYSBtb2RhbC5cbiAgICovXG4gIEBJbnB1dCgndC1wcmltYXJ5LWFjdGlvbicpIHByaW1hcnlBY3Rpb24/OiBUaGZNb2RhbEFjdGlvbjtcblxuICAvKiogRGV2ZSBzZXIgZGVmaW5pZG8gdW0gb2JqZXRvIHF1ZSBpbXBsZW1lbnRhIGEgaW50ZXJmYWNlIGBUaGZNb2RhbEFjdGlvbmAgY29udGVuZG8gYSBsYWJlbCBlIGEgZnVuw6fDo28gZGEgc2VndW5kYSBhw6fDo28uICovXG4gIEBJbnB1dCgndC1zZWNvbmRhcnktYWN0aW9uJykgc2Vjb25kYXJ5QWN0aW9uPzogVGhmTW9kYWxBY3Rpb247XG5cbiAgLyoqXG4gICAqIERlZmluZSBvIHRhbWFuaG8gZGEgbW9kYWwuXG4gICAqXG4gICAqIFZhbG9yZXMgdsOhbGlkb3M6XG4gICAqICAtIGBzbWAgKHBlcXVlbm8pXG4gICAqICAtIGBtZGAgKG3DqWRpbylcbiAgICogIC0gYGxnYCAoZ3JhbmRlKVxuICAgKiAgLSBgeGxgIChleHRyYSBncmFuZGUpXG4gICAqICAtIGBhdXRvYCAoYXV0b23DoXRpY28pXG4gICAqXG4gICAqID4gUXVhbmRvIGluZm9ybWFkbyBgYXV0b2AgYSBtb2RhbCBjYWxjdWxhcsOhIGF1dG9tYXRpY2FtZW50ZSBzZXUgdGFtYW5obyBiYXNlYWRvIGVtIHNldSBjb250ZcO6ZG8uXG4gICAqIENhc28gbsOjbyBzZWphIGluZm9ybWFkbyB1bSB2YWxvciwgYSBtb2RhbCB0ZXLDoSBvIHRhbWFuaG8gZGVmaW5pZG8gY29tbyBgbWRgLlxuICAgKlxuICAgKiA+IFRvZGFzIGFzIG9ww6fDtWVzIGRlIHRhbWFuaG8gcG9zc3VlbSB1bWEgbGFyZ3VyYSBtw6F4aW1hIGRlICoqNzY4cHgqKi5cbiAgICovXG4gIEBJbnB1dCgndC1zaXplJykgc2V0IHNpemUodmFsdWU6IHN0cmluZykge1xuICAgIGNvbnN0IHNpemVzID0gWydzbScsICdtZCcsICdsZycsICd4bCcsICdhdXRvJ107XG4gICAgdGhpcy5fc2l6ZSA9IHNpemVzLmluZGV4T2YodmFsdWUpID4gLTEgPyB2YWx1ZSA6ICdtZCc7XG4gIH1cblxuICBnZXQgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmUgbyBmZWNoYW1lbnRvIGRhIG1vZGFsIGFvIGNsaWNhciBmb3JhIGRhIG1lc21hLlxuICAgKiBJbmZvcm1lIG8gdmFsb3IgYHRydWVgIHBhcmEgYXRpdmFyIG8gZmVjaGFtZW50byBhbyBjbGljYXIgZm9yYSBkYSBtb2RhbC5cbiAgICovXG4gIGNsaWNrT3V0PzogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoJ3QtY2xpY2stb3V0Jykgc2V0IHNldENsaWNrT3V0KHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5jbGlja091dCA9ICh2YWx1ZSA9PT0gJycpID8gZmFsc2UgOiBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9jdWx0YSBvIMOtY29uZSBkZSBmZWNoYXIgZG8gY2FiZcOnYWxobyBkYSBtb2RhbC5cbiAgICpcbiAgICogPiBDYXNvIGEgcHJvcHJpZWRhZGUgZXN0aXZlciBoYWJpbGl0YWRhLCBuw6NvIHNlcsOhIHBvc3PDrXZlbCBmZWNoYXIgYSBtb2RhbCBhdHJhdsOpcyBkYSB0ZWNsYSAqRVNDKi5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCd0LWhpZGUtY2xvc2UnKSBzZXQgaGlkZUNsb3NlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faGlkZUNsb3NlID0gY29udmVydFRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgaGlkZUNsb3NlKCkge1xuICAgIHJldHVybiB0aGlzLl9oaWRlQ2xvc2U7XG4gIH1cblxuICAvLyBDb250cm9sYSBzZSBhIG1vZGFsIGZpY2Egb2N1bHRvIG91IHZpc8OtdmVsLCBwb3IgcGFkcsOjbyDDqSBvY3VsdG9cbiAgaXNIaWRkZW4gPSB0cnVlO1xuXG4gIC8vIEV2ZW50IGVtbWl0ZXIgcGFyYSBxdWFuZG8gYSBtb2RhbCDDqSBmZWNoYWRhIHBlbG8gJ1gnLlxuICBwdWJsaWMgb25YQ2xvc2VkID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIC8qKiBGdW7Dp8OjbyBwYXJhIGZlY2hhciBhIG1vZGFsLiAqL1xuICBjbG9zZSh4Q2xvc2VkID0gZmFsc2UpOiB2b2lkIHtcbiAgICB0aGlzLmlzSGlkZGVuID0gdHJ1ZTtcbiAgICBpZiAoeENsb3NlZCkge1xuICAgICAgdGhpcy5vblhDbG9zZWQuZW1pdCh4Q2xvc2VkKTtcbiAgICB9XG4gIH1cblxuICAvKiogRnVuw6fDo28gcGFyYSBhYnJpciBhIG1vZGFsLiAqL1xuICBvcGVuKCk6IHZvaWQge1xuICAgIHRoaXMudmFsaWRQcmltYXJ5QWN0aW9uKCk7XG5cbiAgICB0aGlzLmlzSGlkZGVuID0gZmFsc2U7XG4gIH1cblxuICB2YWxpZFByaW1hcnlBY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLnByaW1hcnlBY3Rpb24pIHtcbiAgICAgIHRoaXMucHJpbWFyeUFjdGlvbiA9IHtcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB0aGlzLmNsb3NlKCksXG4gICAgICAgIGxhYmVsOiAnT2snLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucHJpbWFyeUFjdGlvblsnYWN0aW9uJ10pIHtcbiAgICAgIHRoaXMucHJpbWFyeUFjdGlvblsnYWN0aW9uJ10gPSAoKSA9PiB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5wcmltYXJ5QWN0aW9uWydsYWJlbCddKSB7XG4gICAgICB0aGlzLnByaW1hcnlBY3Rpb25bJ2xhYmVsJ10gPSAnT2snO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=