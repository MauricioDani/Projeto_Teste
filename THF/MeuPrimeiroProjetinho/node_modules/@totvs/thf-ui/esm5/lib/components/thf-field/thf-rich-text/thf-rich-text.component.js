/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ThfRichTextBaseComponent } from './thf-rich-text-base.component';
/**
 * \@docsExtends ThfRichTextBaseComponent
 *
 * \@example
 *
 * <example name="thf-rich-text-basic" title="Totvs Rich Text Basic">
 *   <file name="sample-thf-rich-text-basic/sample-thf-rich-text-basic.component.html"> </file>
 *   <file name="sample-thf-rich-text-basic/sample-thf-rich-text-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-rich-text-recipe" title="Totvs Rich Text Recipe">
 *   <file name="sample-thf-rich-text-recipe/sample-thf-rich-text-recipe.component.html"> </file>
 *   <file name="sample-thf-rich-text-recipe/sample-thf-rich-text-recipe.component.ts"> </file>
 * </example>
 */
var ThfRichTextComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfRichTextComponent, _super);
    function ThfRichTextComponent(element) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.listener = _this.validateClassesForRequired.bind(_this);
        return _this;
    }
    Object.defineProperty(ThfRichTextComponent.prototype, "errorMsg", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.errorMessage !== '' && !this.value && this.required && this.invalid) ? this.errorMessage : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfRichTextComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // Se não tem ngModel ou reactive form adiciona validação com classes css
        if (!this.onChangeModel) {
            this.element.nativeElement.addEventListener('keyup', this.listener);
            this.element.nativeElement.addEventListener('cut', this.listener);
            this.element.nativeElement.addEventListener('paste', this.listener);
        }
    };
    /**
     * @return {?}
     */
    ThfRichTextComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (!this.onChangeModel) {
            this.element.nativeElement.removeEventListener('keyup', this.listener);
            this.element.nativeElement.removeEventListener('cut', this.listener);
            this.element.nativeElement.removeEventListener('paste', this.listener);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfRichTextComponent.prototype.updateValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        this.invalid = !value;
        this.updateModel(this.value);
    };
    /**
     * @private
     * @return {?}
     */
    ThfRichTextComponent.prototype.validateClassesForRequired = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var value = _this.value;
            /** @type {?} */
            var element = _this.element.nativeElement;
            if (!value && _this.required) {
                element.classList.add('ng-invalid');
                element.classList.add('ng-dirty');
            }
            else {
                element.classList.remove('ng-invalid');
            }
        }));
    };
    ThfRichTextComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-rich-text',
                    template: "<thf-field-container\n[t-help]=\"help\"\n[t-label]=\"label\"\n[t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n\n    <thf-rich-text-body #richTextBody\n      [t-height]=\"height\"\n      [t-model-value]=\"value\"\n      [t-placeholder]=\"placeholder\"\n      [t-readonly]=\"readonly\"\n      (t-commands)=\"richTextToolbar.setButtonsStates($event)\"\n      (t-value)=\"updateValue($event)\">\n    </thf-rich-text-body>\n\n    <thf-rich-text-toolbar #richTextToolbar\n      [t-readonly]=\"readonly\"\n      (t-command)=\"richTextBody.executeCommand($event)\">\n    </thf-rich-text-toolbar>\n\n  </div>\n\n  <thf-field-container-bottom [t-error-pattern]=\"errorMsg\"></thf-field-container-bottom>\n\n</thf-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ThfRichTextComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ThfRichTextComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    ThfRichTextComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ThfRichTextComponent;
}(ThfRichTextBaseComponent));
export { ThfRichTextComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfRichTextComponent.prototype.listener;
    /**
     * @type {?}
     * @private
     */
    ThfRichTextComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXJpY2gtdGV4dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLWZpZWxkL3RoZi1yaWNoLXRleHQvdGhmLXJpY2gtdGV4dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBRTVGLE9BQU8sRUFBRSxhQUFhLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7OztBQWlCMUU7SUFlMEMsZ0RBQXdCO0lBUWhFLDhCQUFvQixPQUFtQjtRQUF2QyxZQUNFLGlCQUFPLFNBQ1I7UUFGbUIsYUFBTyxHQUFQLE9BQU8sQ0FBWTtRQU4vQixjQUFRLEdBQUcsS0FBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsQ0FBQzs7SUFROUQsQ0FBQztJQU5ELHNCQUFJLDBDQUFROzs7O1FBQVo7WUFDRSxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDN0csQ0FBQzs7O09BQUE7Ozs7SUFNRCw4Q0FBZTs7O0lBQWY7UUFDRSx5RUFBeUU7UUFDekUsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNwRSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2xFLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDckU7SUFDSCxDQUFDOzs7O0lBRUQsMENBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN2RSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3JFLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDeEU7SUFDSCxDQUFDOzs7OztJQUVELDBDQUFXOzs7O0lBQVgsVUFBWSxLQUFhO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7Ozs7SUFFTyx5REFBMEI7Ozs7SUFBbEM7UUFBQSxpQkFZQztRQVhDLFVBQVU7OztRQUFDOztnQkFDSCxLQUFLLEdBQUcsS0FBSSxDQUFDLEtBQUs7O2dCQUNsQixPQUFPLEdBQUcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhO1lBRTFDLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSSxDQUFDLFFBQVEsRUFBRTtnQkFDM0IsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ3BDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ25DO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ3hDO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOztnQkE5REYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6Qix1d0JBQTZDO29CQUM3QyxTQUFTLEVBQUU7d0JBQ1g7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVU7Ozs0QkFBQyxjQUFNLE9BQUEsb0JBQW9CLEVBQXBCLENBQW9CLEVBQUM7NEJBQ25ELEtBQUssRUFBRSxJQUFJO3lCQUNaO3dCQUNEOzRCQUNFLE9BQU8sRUFBRSxhQUFhOzRCQUN0QixXQUFXLEVBQUUsVUFBVTs7OzRCQUFDLGNBQU0sT0FBQSxvQkFBb0IsRUFBcEIsQ0FBb0IsRUFBQzs0QkFDbkQsS0FBSyxFQUFFLElBQUk7eUJBQ1o7cUJBQUM7aUJBQ0g7Ozs7Z0JBbkNrQyxVQUFVOztJQXFGN0MsMkJBQUM7Q0FBQSxBQWhFRCxDQWUwQyx3QkFBd0IsR0FpRGpFO1NBakRZLG9CQUFvQjs7Ozs7O0lBRS9CLHdDQUE4RDs7Ozs7SUFNbEQsdUNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBmb3J3YXJkUmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTkdfVkFMSURBVE9SUywgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IFRoZlJpY2hUZXh0QmFzZUNvbXBvbmVudCB9IGZyb20gJy4vdGhmLXJpY2gtdGV4dC1iYXNlLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQGRvY3NFeHRlbmRzIFRoZlJpY2hUZXh0QmFzZUNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1yaWNoLXRleHQtYmFzaWNcIiB0aXRsZT1cIlRvdHZzIFJpY2ggVGV4dCBCYXNpY1wiPlxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1yaWNoLXRleHQtYmFzaWMvc2FtcGxlLXRoZi1yaWNoLXRleHQtYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1yaWNoLXRleHQtYmFzaWMvc2FtcGxlLXRoZi1yaWNoLXRleHQtYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwidGhmLXJpY2gtdGV4dC1yZWNpcGVcIiB0aXRsZT1cIlRvdHZzIFJpY2ggVGV4dCBSZWNpcGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtcmljaC10ZXh0LXJlY2lwZS9zYW1wbGUtdGhmLXJpY2gtdGV4dC1yZWNpcGUuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1yaWNoLXRleHQtcmVjaXBlL3NhbXBsZS10aGYtcmljaC10ZXh0LXJlY2lwZS5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aGYtcmljaC10ZXh0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RoZi1yaWNoLXRleHQuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtcbiAge1xuICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRoZlJpY2hUZXh0Q29tcG9uZW50KSxcbiAgICBtdWx0aTogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGhmUmljaFRleHRDb21wb25lbnQpLFxuICAgIG11bHRpOiB0cnVlLFxuICB9XVxufSlcbmV4cG9ydCBjbGFzcyBUaGZSaWNoVGV4dENvbXBvbmVudCBleHRlbmRzIFRoZlJpY2hUZXh0QmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSBsaXN0ZW5lciA9IHRoaXMudmFsaWRhdGVDbGFzc2VzRm9yUmVxdWlyZWQuYmluZCh0aGlzKTtcblxuICBnZXQgZXJyb3JNc2coKSB7XG4gICAgcmV0dXJuICh0aGlzLmVycm9yTWVzc2FnZSAhPT0gJycgJiYgIXRoaXMudmFsdWUgJiYgdGhpcy5yZXF1aXJlZCAmJiB0aGlzLmludmFsaWQpID8gdGhpcy5lcnJvck1lc3NhZ2UgOiAnJztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgLy8gU2UgbsOjbyB0ZW0gbmdNb2RlbCBvdSByZWFjdGl2ZSBmb3JtIGFkaWNpb25hIHZhbGlkYcOnw6NvIGNvbSBjbGFzc2VzIGNzc1xuICAgIGlmICghdGhpcy5vbkNoYW5nZU1vZGVsKSB7XG4gICAgICB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMubGlzdGVuZXIpO1xuICAgICAgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY3V0JywgdGhpcy5saXN0ZW5lcik7XG4gICAgICB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIHRoaXMubGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICghdGhpcy5vbkNoYW5nZU1vZGVsKSB7XG4gICAgICB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMubGlzdGVuZXIpO1xuICAgICAgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY3V0JywgdGhpcy5saXN0ZW5lcik7XG4gICAgICB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwYXN0ZScsIHRoaXMubGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZVZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5pbnZhbGlkID0gIXZhbHVlO1xuICAgIHRoaXMudXBkYXRlTW9kZWwodGhpcy52YWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlQ2xhc3Nlc0ZvclJlcXVpcmVkKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuXG4gICAgICBpZiAoIXZhbHVlICYmIHRoaXMucmVxdWlyZWQpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCduZy1pbnZhbGlkJyk7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbmctZGlydHknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnbmctaW52YWxpZCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==