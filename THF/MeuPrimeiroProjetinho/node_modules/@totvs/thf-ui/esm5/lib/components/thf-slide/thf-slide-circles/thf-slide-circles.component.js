/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para o conjunto de c√≠rculos que faz a passagem de itens do `thf-slide`.
 */
var ThfSlideCirclesComponent = /** @class */ (function () {
    function ThfSlideCirclesComponent() {
        /**
         * Evento emitido ao clicar em um controle.
         */
        this.click = new EventEmitter();
    }
    ThfSlideCirclesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-slide-circles',
                    template: "<div class=\"thf-slide-circles\">\n  <ng-container *ngFor=\"let item of items; let index = index;\">\n    <div\n      class=\"thf-slide-circle\"\n      [class.thf-slide-active-circle]=\"index === currentSlideIndex\"\n      (click)=\"click.emit(index)\">\n    </div>\n  </ng-container>\n</div>\n"
                }] }
    ];
    ThfSlideCirclesComponent.propDecorators = {
        currentSlideIndex: [{ type: Input, args: ['t-current-slide-index',] }],
        items: [{ type: Input, args: ['t-items',] }],
        click: [{ type: Output, args: ['t-click',] }]
    };
    return ThfSlideCirclesComponent;
}());
export { ThfSlideCirclesComponent };
if (false) {
    /**
     * Index do slide atual.
     * @type {?}
     */
    ThfSlideCirclesComponent.prototype.currentSlideIndex;
    /**
     * Itens do slide.
     * @type {?}
     */
    ThfSlideCirclesComponent.prototype.items;
    /**
     * Evento emitido ao clicar em um controle.
     * @type {?}
     */
    ThfSlideCirclesComponent.prototype.click;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXNsaWRlLWNpcmNsZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1zbGlkZS90aGYtc2xpZGUtY2lyY2xlcy90aGYtc2xpZGUtY2lyY2xlcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0FBU3ZFO0lBQUE7Ozs7UUFhcUIsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUFDckQsQ0FBQzs7Z0JBZEEsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLGtUQUFpRDtpQkFDbEQ7OztvQ0FJRSxLQUFLLFNBQUMsdUJBQXVCO3dCQUc3QixLQUFLLFNBQUMsU0FBUzt3QkFHZixNQUFNLFNBQUMsU0FBUzs7SUFDbkIsK0JBQUM7Q0FBQSxBQWRELElBY0M7U0FWWSx3QkFBd0I7Ozs7OztJQUduQyxxREFBMEQ7Ozs7O0lBRzFELHlDQUFvQzs7Ozs7SUFHcEMseUNBQW1EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIHBhcmEgbyBjb25qdW50byBkZSBjw61yY3Vsb3MgcXVlIGZheiBhIHBhc3NhZ2VtIGRlIGl0ZW5zIGRvIGB0aGYtc2xpZGVgLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aGYtc2xpZGUtY2lyY2xlcycsXG4gIHRlbXBsYXRlVXJsOiAnLi90aGYtc2xpZGUtY2lyY2xlcy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgVGhmU2xpZGVDaXJjbGVzQ29tcG9uZW50IHtcblxuICAvKiogSW5kZXggZG8gc2xpZGUgYXR1YWwuICovXG4gIEBJbnB1dCgndC1jdXJyZW50LXNsaWRlLWluZGV4JykgY3VycmVudFNsaWRlSW5kZXg6IG51bWJlcjtcblxuICAvKiogSXRlbnMgZG8gc2xpZGUuICovXG4gIEBJbnB1dCgndC1pdGVtcycpIGl0ZW1zOiBBcnJheTxhbnk+O1xuXG4gIC8qKiBFdmVudG8gZW1pdGlkbyBhbyBjbGljYXIgZW0gdW0gY29udHJvbGUuICovXG4gIEBPdXRwdXQoJ3QtY2xpY2snKSBjbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xufVxuIl19