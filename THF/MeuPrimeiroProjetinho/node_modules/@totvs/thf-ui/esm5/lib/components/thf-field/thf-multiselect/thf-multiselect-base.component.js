/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, convertToBoolean, removeDuplicatedOptions, removeUndefinedAndNullOptions, sortOptionsByProperty, thfLocaleDefault } from '../../../utils/util';
import { requiredFailed } from './../validators';
import { ThfMultiselectFilterMode } from './thf-multiselect-filter-mode.enum';
/** @type {?} */
export var thfMultiselectLiteralsDefault = {
    en: (/** @type {?} */ ({
        noData: 'No data found',
        placeholderSearch: 'Search'
    })),
    es: (/** @type {?} */ ({
        noData: 'Datos no encontrados',
        placeholderSearch: 'Busca'
    })),
    pt: (/** @type {?} */ ({
        noData: 'Nenhum dado encontrado',
        placeholderSearch: 'Buscar'
    }))
};
/**
 * \@description
 *
 * O thf-multiselect é um componente de múltipla seleção.
 * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.
 *
 * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do thf-checkbox-group, por ser mais simples
 * e mais rápido para a seleção do usuário.
 *
 * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o
 * thf-select, thf-combo ou thf-radio-group.
 * @abstract
 */
var ThfMultiselectBaseComponent = /** @class */ (function () {
    function ThfMultiselectBaseComponent() {
        this._disabled = false;
        this._filterMode = ThfMultiselectFilterMode.startsWith;
        this._focus = false;
        this._hideSearch = false;
        this._required = false;
        this._sort = false;
        this.readyToValidation = false;
        this.selectedOptions = [];
        this.visibleOptionsDropdown = [];
        this.visibleDisclaimers = [];
        /**
         * Mensagem apresentada enquanto o campo estiver vazio.
         */
        this.placeholder = '';
        /**
         * \@description
         *
         * Placeholder do campo de pesquisa.
         *
         * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
         *
         * \@default `Buscar`
         */
        this.placeholderSearch = '';
        /**
         * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new EventEmitter();
    }
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfMultiselectLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-multiselect`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfMultiselectLiterals = {
         *    noData: 'Nenhum dado encontrado',
         *    placeholderSearch: 'Buscar'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfMultiselectLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <thf-multiselect
         *   [t-literals]="customLiterals">
         * </thf-thf-multiselect>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-multiselect`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfMultiselectLiterals = {
         *    noData: 'Nenhum dado encontrado',
         *    placeholderSearch: 'Buscar'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfMultiselectLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <thf-multiselect
         *   [t-literals]="customLiterals">
         * </thf-thf-multiselect>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = tslib_1.__assign({}, thfMultiselectLiteralsDefault[thfLocaleDefault], thfMultiselectLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfMultiselectLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (t-disabled).
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (t-disabled).
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = (/** @type {?} */ (required)) === '' ? true : convertToBoolean(required);
            this.updateModelToValidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = (/** @type {?} */ (disabled)) === '' ? true : convertToBoolean(disabled);
            this.updateModelToValidate();
            this.updateVisibleItems();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "hideSearch", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideSearch;
        },
        /**
         * @optional
         *
         * @description
         *
         * Esconde o campo de pesquisa existente dentro do dropdown do thf-multiselect.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Esconde o campo de pesquisa existente dentro do dropdown do thf-multiselect.
         *
         * \@default `false`
         * @param {?} hideSearch
         * @return {?}
         */
        function (hideSearch) {
            this._hideSearch = (/** @type {?} */ (hideSearch)) === '' ? true : convertToBoolean(hideSearch);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * @description
         *
         * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfMultiselectOption.
         * Esta lista deve conter os valores e os labels que serão apresentados na tela.
         */
        set: /**
         * \@description
         *
         * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfMultiselectOption.
         * Esta lista deve conter os valores e os labels que serão apresentados na tela.
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = options;
            this.validAndSortOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "sort", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sort;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que a lista definida na propriedade t-options será ordenada pelo label antes de ser apresentada no
         * dropdown.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que a lista definida na propriedade t-options será ordenada pelo label antes de ser apresentada no
         * dropdown.
         *
         * \@default `false`
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            this._sort = (/** @type {?} */ (sort)) === '' ? true : convertToBoolean(sort);
            this.validAndSortOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "focus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._focus;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo iniciará com foco.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo iniciará com foco.
         *
         * \@default `false`
         * @param {?} focus
         * @return {?}
         */
        function (focus) {
            this._focus = (/** @type {?} */ (focus)) === '' ? true : convertToBoolean(focus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMultiselectBaseComponent.prototype, "filterMode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterMode;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
         * Valores definidos no enum: ThfMultiselectFilterMode
         *
         * @default `startsWith`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
         * Valores definidos no enum: ThfMultiselectFilterMode
         *
         * \@default `startsWith`
         * @param {?} filterMode
         * @return {?}
         */
        function (filterMode) {
            this._filterMode = (filterMode in ThfMultiselectFilterMode) ? filterMode : ThfMultiselectFilterMode.startsWith;
            switch (this._filterMode.toString()) {
                case 'startsWith':
                    this._filterMode = ThfMultiselectFilterMode.startsWith;
                    break;
                case 'contains':
                    this._filterMode = ThfMultiselectFilterMode.contains;
                    break;
                case 'endsWith':
                    this._filterMode = ThfMultiselectFilterMode.endsWith;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.updateList(this.options);
    };
    /**
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        // Seta esta variável para indicar que a tela já foi carregada e podem ser aplicadas as validações.
        // A partir desse momento, toda vez que uma propriedade que interfere na validação, for alterada, o model será atualizado
        // para que o campo seja validado novamente.
        this.readyToValidation = true;
    };
    /**
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.validAndSortOptions = /**
     * @return {?}
     */
    function () {
        if (this.options && this.options.length) {
            removeUndefinedAndNullOptions(this.options);
            removeDuplicatedOptions(this.options);
            this.setUndefinedLabels(this.options);
            if (this.sort) {
                sortOptionsByProperty(this.options, 'label');
            }
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.setUndefinedLabels = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        options.forEach((/**
         * @param {?} option
         * @return {?}
         */
        function (option) {
            if (!option['label']) {
                option.label = option.value;
            }
        }));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.updateList = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        if (options) {
            this.visibleOptionsDropdown = options;
        }
    };
    // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
    // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
    /**
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.updateModelToValidate = 
    // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.readyToValidation) {
            // Este timeout é necessário para quando for atualizado o model e uma propriedade do Datepicker ao mesmo tempo.
            // Caso contrário, o writeValue não é disparado, não atualizando o model do componente.
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.callOnChange(_this.selectedOptions);
            }));
        }
    };
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.callOnChange = /**
     * @param {?} selectedOptions
     * @return {?}
     */
    function (selectedOptions) {
        if (this.onModelChange) {
            this.onModelChange(this.getValuesFromOptions(selectedOptions));
            this.eventChange(selectedOptions);
        }
    };
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.eventChange = /**
     * @param {?} selectedOptions
     * @return {?}
     */
    function (selectedOptions) {
        if (selectedOptions && this.lastLengthModel !== selectedOptions.length) {
            this.change.emit(selectedOptions);
        }
        this.lastLengthModel = selectedOptions ? selectedOptions.length : null;
    };
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.getValuesFromOptions = /**
     * @param {?} selectedOptions
     * @return {?}
     */
    function (selectedOptions) {
        return selectedOptions && selectedOptions.length ? selectedOptions.map((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return option.value; })) : [];
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.getLabelByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var index = this.options.findIndex((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return option.value === value; }));
        return this.options[index].label;
    };
    /**
     * @param {?} selectedValues
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.changeItems = /**
     * @param {?} selectedValues
     * @return {?}
     */
    function (selectedValues) {
        this.updateSelectedOptions(selectedValues);
        this.callOnChange(this.selectedOptions);
    };
    /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.searchByLabel = /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    function (search, options, filterMode) {
        var _this = this;
        if (search && options && options.length) {
            /** @type {?} */
            var newOptions_1 = [];
            options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                if (option.label && _this.compareMethod(search, option, filterMode)) {
                    newOptions_1.push(option);
                }
            }));
            this.visibleOptionsDropdown = newOptions_1;
        }
    };
    /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.compareMethod = /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    function (search, option, filterMode) {
        switch (filterMode) {
            case ThfMultiselectFilterMode.startsWith:
                return this.startsWith(search, option);
            case ThfMultiselectFilterMode.contains:
                return this.contains(search, option);
            case ThfMultiselectFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.startsWith = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().startsWith(search.toLowerCase());
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.contains = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.endsWith = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().endsWith(search.toLowerCase());
    };
    /**
     * @param {?} c
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return { required: {
                    valid: false,
                } };
        }
        return null;
    };
    /**
     * @param {?} values
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.updateSelectedOptions = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        var _this = this;
        this.selectedOptions = [];
        values.forEach((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                if (option.value === value) {
                    _this.selectedOptions.push(option);
                }
            }));
        }));
        this.updateVisibleItems();
    };
    /**
     * @param {?} values
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.writeValue = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        if (!values) {
            values = [];
            this.callOnChange([]);
        }
        // Validar se todos os items existem entre os options, senão atualizar o model
        this.updateSelectedOptions(values);
        if (this.selectedOptions.length < values.length) {
            this.callOnChange(this.selectedOptions);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    ThfMultiselectBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['t-label',] }],
        help: [{ type: Input, args: ['t-help',] }],
        literals: [{ type: Input, args: ['t-literals',] }],
        optional: [{ type: Input, args: ['t-optional',] }],
        placeholder: [{ type: Input, args: ['t-placeholder',] }],
        placeholderSearch: [{ type: Input, args: ['t-placeholder-search',] }],
        name: [{ type: Input, args: ['name',] }],
        required: [{ type: Input, args: ['t-required',] }],
        disabled: [{ type: Input, args: ['t-disabled',] }],
        hideSearch: [{ type: Input, args: ['t-hide-search',] }],
        options: [{ type: Input, args: ['t-options',] }],
        sort: [{ type: Input, args: ['t-sort',] }],
        focus: [{ type: Input, args: ['t-focus',] }],
        filterMode: [{ type: Input, args: ['t-filter-mode',] }],
        change: [{ type: Output, args: ['t-change',] }]
    };
    return ThfMultiselectBaseComponent;
}());
export { ThfMultiselectBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._filterMode;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._focus;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._hideSearch;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._sort;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype.lastLengthModel;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype.onModelChange;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype.readyToValidation;
    /** @type {?} */
    ThfMultiselectBaseComponent.prototype.selectedOptions;
    /** @type {?} */
    ThfMultiselectBaseComponent.prototype.visibleOptionsDropdown;
    /** @type {?} */
    ThfMultiselectBaseComponent.prototype.visibleDisclaimers;
    /**
     * Label no componente.
     * @type {?}
     */
    ThfMultiselectBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    ThfMultiselectBaseComponent.prototype.help;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `t-required`;
     * - Não possuir `t-help` e/ou `t-label`.
     *
     * \@default `false`
     * @type {?}
     */
    ThfMultiselectBaseComponent.prototype.optional;
    /**
     * Mensagem apresentada enquanto o campo estiver vazio.
     * @type {?}
     */
    ThfMultiselectBaseComponent.prototype.placeholder;
    /**
     * \@description
     *
     * Placeholder do campo de pesquisa.
     *
     * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
     *
     * \@default `Buscar`
     * @type {?}
     */
    ThfMultiselectBaseComponent.prototype.placeholderSearch;
    /**
     * Nome do componente.
     * @type {?}
     */
    ThfMultiselectBaseComponent.prototype.name;
    /**
     * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
     * @type {?}
     */
    ThfMultiselectBaseComponent.prototype.change;
    /**
     * @type {?}
     * @protected
     */
    ThfMultiselectBaseComponent.prototype.clickOutListener;
    /**
     * @type {?}
     * @protected
     */
    ThfMultiselectBaseComponent.prototype.resizeListener;
    /**
     * @abstract
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.updateVisibleItems = function () { };
}
//# sourceMappingURL=data:application/json;base64,