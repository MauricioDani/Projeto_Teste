/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, Renderer2, ViewChild } from '@angular/core';
import { animate, AnimationBuilder, keyframes, style } from '@angular/animations';
import { ThfNavbarBaseComponent } from './thf-navbar-base.component';
import { ThfNavbarItemsComponent } from './thf-navbar-items/thf-navbar-items.component';
/**
 * \@docsExtends ThfNavbarBaseComponent
 */
var ThfNavbarComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfNavbarComponent, _super);
    function ThfNavbarComponent(renderer, builder, changeDetector) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.builder = builder;
        _this.changeDetector = changeDetector;
        _this.showItemsNavigation = false;
        _this.offset = 0;
        _this.windowResizeListener = _this.renderer.listen(window, 'resize', _this.displayItemsNavigation.bind(_this));
        return _this;
    }
    /**
     * @return {?}
     */
    ThfNavbarComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.displayItemsNavigation();
        this.menuWrapperAdjust();
    };
    /**
     * @return {?}
     */
    ThfNavbarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.mediaQuery) {
            this.mediaQuery.removeListener();
        }
    };
    /**
     * @param {?} orientation
     * @return {?}
     */
    ThfNavbarComponent.prototype.navigateItems = /**
     * @param {?} orientation
     * @return {?}
     */
    function (orientation) {
        orientation === 'left' ? this.navigateLeft() : this.navigateRight();
        this.animate(this.offset);
    };
    /**
     * @private
     * @return {?}
     */
    ThfNavbarComponent.prototype.adjustNavbarMenu = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var navbarMenu = document.querySelector('thf-navbar thf-menu');
        /** @type {?} */
        var page = document.querySelector('.thf-page');
        /** @type {?} */
        var navbarLogo = document.querySelector('.thf-navbar-logo');
        navbarMenu.setAttribute('style', "display: none");
        if (page) {
            page.setAttribute('style', 'margin-left: 0; width: 100%');
        }
        if (navbarLogo) {
            navbarLogo.setAttribute('style', "padding: 0 16px 0 0!important");
        }
        this.mediaQuery.addListener((/**
         * @param {?} changed
         * @return {?}
         */
        function (changed) {
            if (changed.matches) {
                navbarMenu.setAttribute('style', "display: block");
                if (page) {
                    page.setAttribute('style', 'margin-left: 256; width: calc(100% - 256px)');
                }
            }
            else {
                navbarMenu.setAttribute('style', "display: none");
                if (page) {
                    page.setAttribute('style', 'margin-left: 0; width: 100%');
                }
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ThfNavbarComponent.prototype.adjustUserMenu = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var userMenuItems = this.menu.menus;
        this.mediaQuery.addListener((/**
         * @param {?} changed
         * @return {?}
         */
        function (changed) {
            if (changed.matches) {
                /** @type {?} */
                var subItems = [{ label: _this.literals.navbarLinks, subItems: _this.items }];
                _this.menu.menus = tslib_1.__spread(subItems, _this.menu.menus);
            }
            else {
                _this.menu.menus = userMenuItems;
            }
        }));
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    ThfNavbarComponent.prototype.animate = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        /** @type {?} */
        var animation = this.buildTransitionAnimation(offset);
        this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);
        this.player.play();
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    ThfNavbarComponent.prototype.buildTransitionAnimation = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        return this.builder.build([
            animate('250ms ease', keyframes([style({ transform: "translateX(" + offset + "px)" })]))
        ]);
    };
    /**
     * @private
     * @return {?}
     */
    ThfNavbarComponent.prototype.displayItemsNavigation = /**
     * @private
     * @return {?}
     */
    function () {
        this.navbarItemsWidth = this.navbarItemsElement.nativeElement.offsetWidth;
        this.allNavbarItemsWidth =
            this.navbarItems.allNavbarItems.reduce((/**
             * @param {?} previous
             * @param {?} current
             * @return {?}
             */
            function (previous, current) { return previous + current.nativeElement.offsetWidth; }), 0);
        this.showItemsNavigation = this.navbarItemsWidth < this.allNavbarItemsWidth + 88;
        this.changeDetector.detectChanges();
        if (this.offset !== 0) {
            this.offset = 0;
            this.animate(this.offset);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfNavbarComponent.prototype.menuWrapperAdjust = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var body = document.querySelector('body');
        body.setAttribute('style', "height: calc(100% - 56px)");
        this.mediaQuery = window.matchMedia('(max-width: 768px)');
        !this.menu ? this.adjustNavbarMenu() : this.adjustUserMenu();
    };
    /**
     * @private
     * @return {?}
     */
    ThfNavbarComponent.prototype.navigateRight = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var maxAllowedOffset = this.allNavbarItemsWidth - this.navbarItemsElement.nativeElement.offsetWidth;
        /** @type {?} */
        var itemBreakPoint = (this.offset * -1) + this.navbarItemsElement.nativeElement.offsetWidth;
        /** @type {?} */
        var movementInPixels = 0;
        this.navbarItems.allNavbarItems.some((/**
         * @param {?} navbarItem
         * @return {?}
         */
        function (navbarItem) {
            /** @type {?} */
            var finalPosition = navbarItem.nativeElement.offsetWidth + navbarItem.nativeElement.offsetLeft;
            if (itemBreakPoint < finalPosition) {
                movementInPixels = navbarItem.nativeElement.offsetLeft;
                return true;
            }
        }));
        this.offset = (movementInPixels * -1);
        if ((this.offset * -1) >= maxAllowedOffset) {
            this.offset = maxAllowedOffset * -1;
            this.disableRight = true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfNavbarComponent.prototype.navigateLeft = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.disableRight = false;
        /** @type {?} */
        var movementInPixels;
        this.navbarItems.allNavbarItems.some((/**
         * @param {?} navbarItem
         * @return {?}
         */
        function (navbarItem) {
            /** @type {?} */
            var navbarItemOffset = navbarItem.nativeElement.offsetLeft;
            if (navbarItemOffset >= (_this.offset * -1)) {
                movementInPixels = navbarItemOffset - (_this.navbarItemsElement.nativeElement.offsetWidth - navbarItem.nativeElement.offsetWidth);
                return true;
            }
        }));
        this.offset = (movementInPixels * -1);
        if (this.offset > 0) {
            this.offset = 0;
        }
    };
    ThfNavbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-navbar',
                    template: "<header class=\"thf-navbar\"\n  [ngClass]=\"{'thf-navbar-shadow' : shadow}\">\n\n  <thf-navbar-logo\n    class=\"thf-navbar-logo\"\n    [t-logo]=\"logo\">\n  </thf-navbar-logo>\n\n  <thf-navbar-items\n    class=\"thf-navbar-items\"\n    [t-items]=\"items\">\n  </thf-navbar-items>\n\n  <thf-navbar-item-navigation *ngIf=\"showItemsNavigation\"\n    class=\"thf-navbar-item-navigation\"\n    [t-disable-left]=\"offset === 0\"\n    [t-disable-right]=\"disableRight && offset !== 0\"\n    (t-click)=\"navigateItems($event)\">\n  </thf-navbar-item-navigation>\n\n  <thf-navbar-actions\n    class=\"thf-navbar-actions\"\n    [t-icon-actions]=\"iconActions\">\n  </thf-navbar-actions>\n\n</header>\n\n<thf-menu *ngIf=\"!menu\"\n  [t-menus]=\"items\">\n</thf-menu>\n"
                }] }
    ];
    /** @nocollapse */
    ThfNavbarComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: AnimationBuilder },
        { type: ChangeDetectorRef }
    ]; };
    ThfNavbarComponent.propDecorators = {
        navbarItemsElement: [{ type: ViewChild, args: [ThfNavbarItemsComponent, { read: ElementRef, static: true },] }],
        navbarItems: [{ type: ViewChild, args: [ThfNavbarItemsComponent, { static: true },] }]
    };
    return ThfNavbarComponent;
}(ThfNavbarBaseComponent));
export { ThfNavbarComponent };
if (false) {
    /** @type {?} */
    ThfNavbarComponent.prototype.disableRight;
    /** @type {?} */
    ThfNavbarComponent.prototype.showItemsNavigation;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.allNavbarItemsWidth;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.mediaQuery;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.navbarItemsWidth;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.offset;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.player;
    /**
     * @type {?}
     * @protected
     */
    ThfNavbarComponent.prototype.windowResizeListener;
    /** @type {?} */
    ThfNavbarComponent.prototype.navbarItemsElement;
    /** @type {?} */
    ThfNavbarComponent.prototype.navbarItems;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.builder;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,