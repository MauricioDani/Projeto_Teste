/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { browserLanguage, convertToBoolean, thfLocaleDefault } from '../../utils/util';
/** @type {?} */
export var thfNavbarLiteralsDefault = {
    en: (/** @type {?} */ ({
        navbarLinks: 'Navbar links'
    })),
    es: (/** @type {?} */ ({
        navbarLinks: 'Navbar links'
    })),
    pt: (/** @type {?} */ ({
        navbarLinks: 'Navbar links'
    }))
};
/**
 * \@description
 *
 * O componente `thf-navbar` é um cabeçalho fixo que permite apresentar uma lista de links para facilitar a navegação pelas
 * páginas da aplicação. Também possui ícones com ações.
 */
var ThfNavbarBaseComponent = /** @class */ (function () {
    function ThfNavbarBaseComponent() {
        this._iconActions = [];
        this._items = [];
        this._shadow = false;
    }
    Object.defineProperty(ThfNavbarBaseComponent.prototype, "iconActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconActions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma lista de ações apresentadas em ícones no lado direito do `thf-navbar`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define uma lista de ações apresentadas em ícones no lado direito do `thf-navbar`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._iconActions = value || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfNavbarBaseComponent.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma lista de items do `thf-navbar`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define uma lista de items do `thf-navbar`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._items = value || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfNavbarBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfNavbarLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com a literal usada na propriedade `t-literals`.
         *
         * Para customizar a literal, basta declarar um objeto do tipo `ThfNavbarLiterals` conforme exemplo abaixo:
         *
         * ```
         *  const customLiterals: ThfNavbarLiterals = {
         *    navbarLinks: 'Itens de navegação'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-navbar
         *   [t-literals]="customLiterals">
         * </thf-navbar>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com a literal usada na propriedade `t-literals`.
         *
         * Para customizar a literal, basta declarar um objeto do tipo `ThfNavbarLiterals` conforme exemplo abaixo:
         *
         * ```
         *  const customLiterals: ThfNavbarLiterals = {
         *    navbarLinks: 'Itens de navegação'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-navbar
         *   [t-literals]="customLiterals">
         * </thf-navbar>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = tslib_1.__assign({}, thfNavbarLiteralsDefault[thfLocaleDefault], thfNavbarLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfNavbarLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfNavbarBaseComponent.prototype, "shadow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._shadow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Aplica uma sombra na parte inferior do `thf-navbar`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Aplica uma sombra na parte inferior do `thf-navbar`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._shadow = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    ThfNavbarBaseComponent.propDecorators = {
        iconActions: [{ type: Input, args: ['t-icon-actions',] }],
        items: [{ type: Input, args: ['t-items',] }],
        literals: [{ type: Input, args: ['t-literals',] }],
        logo: [{ type: Input, args: ['t-logo',] }],
        menu: [{ type: Input, args: ['t-menu',] }],
        shadow: [{ type: Input, args: ['t-shadow',] }]
    };
    return ThfNavbarBaseComponent;
}());
export { ThfNavbarBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfNavbarBaseComponent.prototype._iconActions;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarBaseComponent.prototype._items;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarBaseComponent.prototype._shadow;
    /**
     * \@optional
     *
     * \@description
     *
     * Define a logo apresentada `thf-navbar`.
     * @type {?}
     */
    ThfNavbarBaseComponent.prototype.logo;
    /**
     * \@optional
     *
     * \@description
     *
     * Caso já possua um menu na aplicação o mesmo deve ser repassado para essa propriedade para que quando entre em modo
     * responsivo os items do `thf-navbar` possam ser adicionados no primeiro item do menu definido.
     *
     * Exemplo:
     *
     * ```
     * <thf-navbar
     *  [t-items]="items"
     *  [t-icon-actions]="iconActions"
     *  [t-menu]="userMenu">
     * </thf-navbar>
     * <div class="thf-wrapper">
     *  <thf-menu #userMenu
     *   [t-menus]="[{ label: 'Item 1', link: '/' }]">
     *  </thf-menu>
     * </div>
     * ```
     * @type {?}
     */
    ThfNavbarBaseComponent.prototype.menu;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLW5hdmJhci1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtbmF2YmFyL3RoZi1uYXZiYXItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRDLE9BQU8sRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFNdkYsTUFBTSxLQUFPLHdCQUF3QixHQUFHO0lBQ3RDLEVBQUUsRUFBRSxtQkFBb0I7UUFDdEIsV0FBVyxFQUFFLGNBQWM7S0FDNUIsRUFBQTtJQUNELEVBQUUsRUFBRSxtQkFBb0I7UUFDdEIsV0FBVyxFQUFFLGNBQWM7S0FDNUIsRUFBQTtJQUNELEVBQUUsRUFBRSxtQkFBb0I7UUFDdEIsV0FBVyxFQUFFLGNBQWM7S0FDNUIsRUFBQTtDQUNGOzs7Ozs7O0FBUUQ7SUFBQTtRQUVVLGlCQUFZLEdBQStCLEVBQUUsQ0FBQztRQUM5QyxXQUFNLEdBQXlCLEVBQUUsQ0FBQztRQUVsQyxZQUFPLEdBQVksS0FBSyxDQUFDO0lBMkhuQyxDQUFDO0lBbEhDLHNCQUE2QiwrQ0FBVzs7OztRQUl4QztZQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztRQUMzQixDQUFDO1FBYkQ7Ozs7OztXQU1HOzs7Ozs7Ozs7O1FBQ0gsVUFBeUMsS0FBaUM7WUFDeEUsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ2xDLENBQUM7OztPQUFBO0lBYUQsc0JBQXNCLHlDQUFLOzs7O1FBSTNCO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7UUFiRDs7Ozs7O1dBTUc7Ozs7Ozs7Ozs7UUFDSCxVQUE0QixLQUEyQjtZQUNyRCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDNUIsQ0FBQzs7O09BQUE7SUErQkQsc0JBQXlCLDRDQUFROzs7O1FBV2pDO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxJQUFJLHdCQUF3QixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDdkUsQ0FBQztRQXRDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBd0JHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBQ0gsVUFBa0MsS0FBd0I7WUFDeEQsSUFBSSxLQUFLLFlBQVksTUFBTSxJQUFJLENBQUMsQ0FBQyxLQUFLLFlBQVksS0FBSyxDQUFDLEVBQUU7Z0JBQ3hELElBQUksQ0FBQyxTQUFTLHdCQUNULHdCQUF3QixDQUFDLGdCQUFnQixDQUFDLEVBQzFDLHdCQUF3QixDQUFDLGVBQWUsRUFBRSxDQUFDLEVBQzNDLEtBQUssQ0FDVCxDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRyx3QkFBd0IsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO2FBQzlEO1FBQ0gsQ0FBQzs7O09BQUE7SUFnREQsc0JBQXVCLDBDQUFNOzs7O1FBSTdCO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7UUFmRDs7Ozs7Ozs7V0FRRzs7Ozs7Ozs7Ozs7O1FBQ0gsVUFBOEIsS0FBYztZQUMxQyxJQUFJLENBQUMsT0FBTyxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLENBQUM7OztPQUFBOzs4QkE1R0EsS0FBSyxTQUFDLGdCQUFnQjt3QkFldEIsS0FBSyxTQUFDLFNBQVM7MkJBaUNmLEtBQUssU0FBQyxZQUFZO3VCQXNCbEIsS0FBSyxTQUFDLFFBQVE7dUJBeUJkLEtBQUssU0FBQyxRQUFRO3lCQVdkLEtBQUssU0FBQyxVQUFVOztJQVFuQiw2QkFBQztDQUFBLEFBaElELElBZ0lDO1NBaElZLHNCQUFzQjs7Ozs7O0lBRWpDLDhDQUFzRDs7Ozs7SUFDdEQsd0NBQTBDOzs7OztJQUMxQywyQ0FBcUM7Ozs7O0lBQ3JDLHlDQUFpQzs7Ozs7Ozs7O0lBK0VqQyxzQ0FBK0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUF5Qi9CLHNDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGJyb3dzZXJMYW5ndWFnZSwgY29udmVydFRvQm9vbGVhbiwgdGhmTG9jYWxlRGVmYXVsdCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBUaGZOYXZiYXJJY29uQWN0aW9uIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3RoZi1uYXZiYXItaWNvbi1hY3Rpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IFRoZk5hdmJhckl0ZW0gfSBmcm9tICcuL2ludGVyZmFjZXMvdGhmLW5hdmJhci1pdGVtLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaGZOYXZiYXJMaXRlcmFscyB9IGZyb20gJy4vaW50ZXJmYWNlcy90aGYtbmF2YmFyLWxpdGVyYWxzLmludGVyZmFjZSc7XG5cbmV4cG9ydCBjb25zdCB0aGZOYXZiYXJMaXRlcmFsc0RlZmF1bHQgPSB7XG4gIGVuOiA8VGhmTmF2YmFyTGl0ZXJhbHM+IHtcbiAgICBuYXZiYXJMaW5rczogJ05hdmJhciBsaW5rcydcbiAgfSxcbiAgZXM6IDxUaGZOYXZiYXJMaXRlcmFscz4ge1xuICAgIG5hdmJhckxpbmtzOiAnTmF2YmFyIGxpbmtzJ1xuICB9LFxuICBwdDogPFRoZk5hdmJhckxpdGVyYWxzPiB7XG4gICAgbmF2YmFyTGlua3M6ICdOYXZiYXIgbGlua3MnXG4gIH1cbn07XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGB0aGYtbmF2YmFyYCDDqSB1bSBjYWJlw6dhbGhvIGZpeG8gcXVlIHBlcm1pdGUgYXByZXNlbnRhciB1bWEgbGlzdGEgZGUgbGlua3MgcGFyYSBmYWNpbGl0YXIgYSBuYXZlZ2HDp8OjbyBwZWxhc1xuICogcMOhZ2luYXMgZGEgYXBsaWNhw6fDo28uIFRhbWLDqW0gcG9zc3VpIMOtY29uZXMgY29tIGHDp8O1ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUaGZOYXZiYXJCYXNlQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9pY29uQWN0aW9uczogQXJyYXk8VGhmTmF2YmFySWNvbkFjdGlvbj4gPSBbXTtcbiAgcHJpdmF0ZSBfaXRlbXM6IEFycmF5PFRoZk5hdmJhckl0ZW0+ID0gW107XG4gIHByaXZhdGUgX2xpdGVyYWxzOiBUaGZOYXZiYXJMaXRlcmFscztcbiAgcHJpdmF0ZSBfc2hhZG93OiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIHVtYSBsaXN0YSBkZSBhw6fDtWVzIGFwcmVzZW50YWRhcyBlbSDDrWNvbmVzIG5vIGxhZG8gZGlyZWl0byBkbyBgdGhmLW5hdmJhcmAuXG4gICAqL1xuICBASW5wdXQoJ3QtaWNvbi1hY3Rpb25zJykgc2V0IGljb25BY3Rpb25zKHZhbHVlOiBBcnJheTxUaGZOYXZiYXJJY29uQWN0aW9uPikge1xuICAgIHRoaXMuX2ljb25BY3Rpb25zID0gdmFsdWUgfHwgW107XG4gIH1cblxuICBnZXQgaWNvbkFjdGlvbnMoKTogQXJyYXk8VGhmTmF2YmFySWNvbkFjdGlvbj4ge1xuICAgIHJldHVybiB0aGlzLl9pY29uQWN0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSB1bWEgbGlzdGEgZGUgaXRlbXMgZG8gYHRoZi1uYXZiYXJgLlxuICAgKi9cbiAgQElucHV0KCd0LWl0ZW1zJykgc2V0IGl0ZW1zKHZhbHVlOiBBcnJheTxUaGZOYXZiYXJJdGVtPikge1xuICAgIHRoaXMuX2l0ZW1zID0gdmFsdWUgfHwgW107XG4gIH1cblxuICBnZXQgaXRlbXMoKTogQXJyYXk8VGhmTmF2YmFySXRlbT4ge1xuICAgIHJldHVybiB0aGlzLl9pdGVtcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamV0byBjb20gYSBsaXRlcmFsIHVzYWRhIG5hIHByb3ByaWVkYWRlIGB0LWxpdGVyYWxzYC5cbiAgICpcbiAgICogUGFyYSBjdXN0b21pemFyIGEgbGl0ZXJhbCwgYmFzdGEgZGVjbGFyYXIgdW0gb2JqZXRvIGRvIHRpcG8gYFRoZk5hdmJhckxpdGVyYWxzYCBjb25mb3JtZSBleGVtcGxvIGFiYWl4bzpcbiAgICpcbiAgICogYGBgXG4gICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogVGhmTmF2YmFyTGl0ZXJhbHMgPSB7XG4gICAqICAgIG5hdmJhckxpbmtzOiAnSXRlbnMgZGUgbmF2ZWdhw6fDo28nXG4gICAqICB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogRSBwYXJhIGNhcnJlZ2FyIGFzIGxpdGVyYWlzIGN1c3RvbWl6YWRhcywgYmFzdGEgYXBlbmFzIHBhc3NhciBvIG9iamV0byBwYXJhIG8gY29tcG9uZW50ZS5cbiAgICpcbiAgICogYGBgXG4gICAqIDx0aGYtbmF2YmFyXG4gICAqICAgW3QtbGl0ZXJhbHNdPVwiY3VzdG9tTGl0ZXJhbHNcIj5cbiAgICogPC90aGYtbmF2YmFyPlxuICAgKiBgYGBcbiAgICpcbiAgICogID4gTyBvYmpldG8gcGFkcsOjbyBkZSBsaXRlcmFpcyBzZXLDoSB0cmFkdXppZG8gZGUgYWNvcmRvIGNvbSBvIGlkaW9tYSBkbyAqYnJvd3NlciogKHB0LCBlbiwgZXMpLlxuICAgKi9cbiAgQElucHV0KCd0LWxpdGVyYWxzJykgc2V0IGxpdGVyYWxzKHZhbHVlOiBUaGZOYXZiYXJMaXRlcmFscykge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCAmJiAhKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICB0aGlzLl9saXRlcmFscyA9IHtcbiAgICAgICAgLi4udGhmTmF2YmFyTGl0ZXJhbHNEZWZhdWx0W3RoZkxvY2FsZURlZmF1bHRdLFxuICAgICAgICAuLi50aGZOYXZiYXJMaXRlcmFsc0RlZmF1bHRbYnJvd3Nlckxhbmd1YWdlKCldLFxuICAgICAgICAuLi52YWx1ZVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGl0ZXJhbHMgPSB0aGZOYXZiYXJMaXRlcmFsc0RlZmF1bHRbYnJvd3Nlckxhbmd1YWdlKCldO1xuICAgIH1cbiAgfVxuICBnZXQgbGl0ZXJhbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xpdGVyYWxzIHx8IHRoZk5hdmJhckxpdGVyYWxzRGVmYXVsdFticm93c2VyTGFuZ3VhZ2UoKV07XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgYSBsb2dvIGFwcmVzZW50YWRhIGB0aGYtbmF2YmFyYC5cbiAgICovXG4gIEBJbnB1dCgndC1sb2dvJykgbG9nbz86IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBDYXNvIGrDoSBwb3NzdWEgdW0gbWVudSBuYSBhcGxpY2HDp8OjbyBvIG1lc21vIGRldmUgc2VyIHJlcGFzc2FkbyBwYXJhIGVzc2EgcHJvcHJpZWRhZGUgcGFyYSBxdWUgcXVhbmRvIGVudHJlIGVtIG1vZG9cbiAgICogcmVzcG9uc2l2byBvcyBpdGVtcyBkbyBgdGhmLW5hdmJhcmAgcG9zc2FtIHNlciBhZGljaW9uYWRvcyBubyBwcmltZWlybyBpdGVtIGRvIG1lbnUgZGVmaW5pZG8uXG4gICAqXG4gICAqIEV4ZW1wbG86XG4gICAqXG4gICAqIGBgYFxuICAgKiA8dGhmLW5hdmJhclxuICAgKiAgW3QtaXRlbXNdPVwiaXRlbXNcIlxuICAgKiAgW3QtaWNvbi1hY3Rpb25zXT1cImljb25BY3Rpb25zXCJcbiAgICogIFt0LW1lbnVdPVwidXNlck1lbnVcIj5cbiAgICogPC90aGYtbmF2YmFyPlxuICAgKiA8ZGl2IGNsYXNzPVwidGhmLXdyYXBwZXJcIj5cbiAgICogIDx0aGYtbWVudSAjdXNlck1lbnVcbiAgICogICBbdC1tZW51c109XCJbeyBsYWJlbDogJ0l0ZW0gMScsIGxpbms6ICcvJyB9XVwiPlxuICAgKiAgPC90aGYtbWVudT5cbiAgICogPC9kaXY+XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KCd0LW1lbnUnKSBtZW51PzogYW55O1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEFwbGljYSB1bWEgc29tYnJhIG5hIHBhcnRlIGluZmVyaW9yIGRvIGB0aGYtbmF2YmFyYC5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCd0LXNoYWRvdycpIHNldCBzaGFkb3codmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zaGFkb3cgPSBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBzaGFkb3coKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3NoYWRvdztcbiAgfVxuXG59XG4iXX0=