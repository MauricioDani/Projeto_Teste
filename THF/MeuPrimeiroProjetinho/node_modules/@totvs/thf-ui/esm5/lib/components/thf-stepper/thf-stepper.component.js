/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ContentChildren, QueryList } from '@angular/core';
import { ThfStepComponent } from './thf-step/thf-step.component';
import { ThfStepperBaseComponent } from './thf-stepper-base.component';
import { ThfStepperStatus } from './enums/thf-stepper-status.enum';
/**
 * \@docsExtends ThfStepperBaseComponent
 *
 * \@example
 *
 * <example name="thf-stepper-basic" title="Totvs Stepper Basic">
 *  <file name="sample-thf-stepper-basic/sample-thf-stepper-basic.component.html"> </file>
 *  <file name="sample-thf-stepper-basic/sample-thf-stepper-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-stepper-labs" title="Totvs Stepper Labs">
 *  <file name="sample-thf-stepper-labs/sample-thf-stepper-labs.component.html"> </file>
 *  <file name="sample-thf-stepper-labs/sample-thf-stepper-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-stepper-sales" title="Totvs Stepper - Sales">
 *  <file name="sample-thf-stepper-sales/sample-thf-stepper-sales.component.html"> </file>
 *  <file name="sample-thf-stepper-sales/sample-thf-stepper-sales.component.ts"> </file>
 * </example>
 */
var ThfStepperComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfStepperComponent, _super);
    function ThfStepperComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        return _this;
    }
    Object.defineProperty(ThfStepperComponent.prototype, "currentStepIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.step - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperComponent.prototype, "stepList", {
        get: /**
         * @return {?}
         */
        function () {
            return this.useThfSteps && this.thfSteps || this.steps;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperComponent.prototype, "useThfSteps", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.thfSteps.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfStepperComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.activeFirstStep();
        this.thfSteps.changes.subscribe((/**
         * @return {?}
         */
        function () {
            _this.controlStepsStatus(0, _this.thfSteps.first);
        }));
    };
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     *
     * @param index {number} Índice do `thf-step` que se deseja ativar.
     */
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     *
     * @param {?} index {number} Índice do `thf-step` que se deseja ativar.
     * @return {?}
     */
    ThfStepperComponent.prototype.active = /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     *
     * @param {?} index {number} Índice do `thf-step` que se deseja ativar.
     * @return {?}
     */
    function (index) {
        if (!this.useThfSteps) {
            return;
        }
        /** @type {?} */
        var stepsArray = this.getThfSteps();
        /** @type {?} */
        var step = stepsArray[index];
        /** @type {?} */
        var isDisabledStep = step.status === ThfStepperStatus.Disabled;
        /** @type {?} */
        var isErrorStep = step.status === ThfStepperStatus.Error;
        if (!isDisabledStep || isErrorStep) {
            this.changeStep(index, step);
        }
    };
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     */
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     * @return {?}
     */
    ThfStepperComponent.prototype.first = /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     * @return {?}
     */
    function () {
        if (!this.useThfSteps) {
            return;
        }
        /** @type {?} */
        var firstStep = this.thfSteps.first;
        /** @type {?} */
        var firstStepIndex = 0;
        this.changeStep(firstStepIndex, firstStep);
    };
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     */
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     * @return {?}
     */
    ThfStepperComponent.prototype.next = /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     * @return {?}
     */
    function () {
        if (!this.useThfSteps) {
            return;
        }
        var _a = this.getStepsAndIndex(this.currentActiveStep), steps = _a.steps, stepIndex = _a.stepIndex;
        /** @type {?} */
        var nextIndex = stepIndex + 1;
        /** @type {?} */
        var nextStep = steps[nextIndex];
        this.changeStep(nextIndex, nextStep);
    };
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     */
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     * @return {?}
     */
    ThfStepperComponent.prototype.previous = /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     * @return {?}
     */
    function () {
        if (!this.useThfSteps) {
            return;
        }
        var _a = this.getStepsAndIndex(this.currentActiveStep), steps = _a.steps, stepIndex = _a.stepIndex;
        /** @type {?} */
        var previousIndex = stepIndex - 1;
        /** @type {?} */
        var previousStep = steps[previousIndex];
        this.changeStep(previousIndex, previousStep);
    };
    /**
     * @param {?} stepIndex
     * @param {?=} step
     * @return {?}
     */
    ThfStepperComponent.prototype.changeStep = /**
     * @param {?} stepIndex
     * @param {?=} step
     * @return {?}
     */
    function (stepIndex, step) {
        /** @type {?} */
        var isDifferentStep = (!this.currentActiveStep || step.id !== this.currentActiveStep.id);
        if (this.useThfSteps && isDifferentStep && this.allowNextStep(stepIndex)) {
            this.controlStepsStatus(stepIndex, step);
            this.onChangeStep.emit(step);
        }
        else if (!this.useThfSteps && stepIndex !== this.currentStepIndex && this.allowNextStep(stepIndex)) {
            // if para tratamento do modelo antigo do thf-stepper
            this.onChangeStep.emit(stepIndex + 1);
        }
    };
    /**
     * @param {?} step
     * @return {?}
     */
    ThfStepperComponent.prototype.onStepActive = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        this.currentActiveStep = step;
        this.previousActiveStep = this.thfSteps.find((/**
         * @param {?} stepChild
         * @return {?}
         */
        function (stepChild) { return stepChild.status === ThfStepperStatus.Active && stepChild.id !== step.id; }));
        this.setPreviousStepAsDone();
    };
    /**
     * @param {?} step
     * @return {?}
     */
    ThfStepperComponent.prototype.trackByFn = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        return step.id;
    };
    /**
     * @private
     * @return {?}
     */
    ThfStepperComponent.prototype.activeFirstStep = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hasStepActive = this.thfSteps.some((/**
         * @param {?} thfStep
         * @return {?}
         */
        function (thfStep) { return thfStep.status === ThfStepperStatus.Active; }));
        if (this.useThfSteps && !hasStepActive) {
            this.changeStep(0, this.thfSteps.first);
        }
    };
    /**
     * @private
     * @param {?} nextStepIndex
     * @return {?}
     */
    ThfStepperComponent.prototype.allowNextStep = /**
     * @private
     * @param {?} nextStepIndex
     * @return {?}
     */
    function (nextStepIndex) {
        if (!this.sequential) {
            return true;
        }
        if (this.useThfSteps) {
            return this.isBeforeStep(nextStepIndex) || this.canActiveNextStep(this.currentActiveStep);
        }
        return this.steps.slice(this.step, nextStepIndex).every((/**
         * @param {?} step
         * @return {?}
         */
        function (step) { return step.status === ThfStepperStatus.Done; }));
    };
    /**
     * @private
     * @param {?=} currentActiveStep
     * @return {?}
     */
    ThfStepperComponent.prototype.canActiveNextStep = /**
     * @private
     * @param {?=} currentActiveStep
     * @return {?}
     */
    function (currentActiveStep) {
        if (currentActiveStep === void 0) { currentActiveStep = (/** @type {?} */ ({})); }
        if (!currentActiveStep.canActiveNextStep) {
            return true;
        }
        /** @type {?} */
        var canActiveNextStep = currentActiveStep.canActiveNextStep(currentActiveStep);
        currentActiveStep.status = this.getStepperStatusByCanActive(canActiveNextStep);
        return canActiveNextStep;
    };
    /**
     * @private
     * @param {?} stepIndex
     * @param {?} step
     * @return {?}
     */
    ThfStepperComponent.prototype.controlStepsStatus = /**
     * @private
     * @param {?} stepIndex
     * @param {?} step
     * @return {?}
     */
    function (stepIndex, step) {
        if (this.useThfSteps) {
            this.setStepAsActive(step);
            this.setNextStepAsDefault(step);
            if (this.isBeforeStep(stepIndex)) {
                this.setFinalSteppersAsDisabled(stepIndex);
            }
            this.changeDetector.detectChanges();
        }
    };
    /**
     * @private
     * @param {?} canActiveNextStep
     * @return {?}
     */
    ThfStepperComponent.prototype.getStepperStatusByCanActive = /**
     * @private
     * @param {?} canActiveNextStep
     * @return {?}
     */
    function (canActiveNextStep) {
        return canActiveNextStep ? ThfStepperStatus.Done : ThfStepperStatus.Error;
    };
    /**
     * @private
     * @param {?=} step
     * @return {?}
     */
    ThfStepperComponent.prototype.getStepsAndIndex = /**
     * @private
     * @param {?=} step
     * @return {?}
     */
    function (step) {
        if (step === void 0) { step = (/** @type {?} */ ({})); }
        /** @type {?} */
        var steps = this.getThfSteps();
        /** @type {?} */
        var stepIndex = steps.findIndex((/**
         * @param {?} thfStep
         * @return {?}
         */
        function (thfStep) { return thfStep.id === step.id; }));
        return { steps: steps, stepIndex: stepIndex };
    };
    /**
     * @private
     * @return {?}
     */
    ThfStepperComponent.prototype.getThfSteps = /**
     * @private
     * @return {?}
     */
    function () {
        return this.thfSteps.toArray();
    };
    /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    ThfStepperComponent.prototype.isBeforeStep = /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    function (stepIndex) {
        var _this = this;
        /** @type {?} */
        var currentActiveStepIndex = (/**
         * @return {?}
         */
        function () { return _this.getThfSteps().findIndex((/**
         * @param {?} step
         * @return {?}
         */
        function (step) { return step.id === _this.currentActiveStep.id; })); });
        return !!this.currentActiveStep && currentActiveStepIndex() >= stepIndex;
    };
    /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    ThfStepperComponent.prototype.setFinalSteppersAsDisabled = /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    function (stepIndex) {
        this.getThfSteps()
            .filter((/**
         * @param {?} step
         * @param {?} index
         * @return {?}
         */
        function (step, index) { return step && index >= stepIndex + 2; }))
            .forEach((/**
         * @param {?} step
         * @return {?}
         */
        function (step) { return step.status = ThfStepperStatus.Disabled; }));
    };
    /**
     * @private
     * @param {?} step
     * @return {?}
     */
    ThfStepperComponent.prototype.setStepAsActive = /**
     * @private
     * @param {?} step
     * @return {?}
     */
    function (step) {
        step.status = ThfStepperStatus.Active;
    };
    /**
     * @private
     * @param {?} currentStep
     * @return {?}
     */
    ThfStepperComponent.prototype.setNextStepAsDefault = /**
     * @private
     * @param {?} currentStep
     * @return {?}
     */
    function (currentStep) {
        var _a = this.getStepsAndIndex(currentStep), steps = _a.steps, stepIndex = _a.stepIndex;
        /** @type {?} */
        var nextIndex = stepIndex + 1;
        if (nextIndex < this.thfSteps.length) {
            steps[nextIndex].status = ThfStepperStatus.Default;
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfStepperComponent.prototype.setPreviousStepAsDone = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.previousActiveStep) {
            this.previousActiveStep.status = ThfStepperStatus.Done;
        }
    };
    ThfStepperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-stepper',
                    template: "<div class=\"thf-stepper thf-stepper-{{ orientation }}\">\n\n  <div class=\"thf-stepper-container\">\n    <thf-stepper-step *ngFor=\"let step of stepList; let index = index; trackBy: trackByFn\"\n      class=\"thf-stepper-step-position\"\n      [t-circle-content]=\"index+1\"\n      [t-label]=\"step.label\"\n      [t-orientation]=\"orientation\"\n      [t-status]=\"step.status\"\n      [t-step-icons]=\"stepIcons\"\n      [t-step-size]=\"stepSize\"\n      (t-activated)=\"onStepActive(step)\"\n      (t-click)=\"changeStep(index, step)\"\n      (t-enter)=\"changeStep(index, step)\">\n    </thf-stepper-step>\n  </div>\n\n  <div *ngIf=\"useThfSteps\" class=\"thf-stepper-content\">\n    <ng-content></ng-content>\n  </div>\n\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    ThfStepperComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    ThfStepperComponent.propDecorators = {
        thfSteps: [{ type: ContentChildren, args: [ThfStepComponent,] }]
    };
    return ThfStepperComponent;
}(ThfStepperBaseComponent));
export { ThfStepperComponent };
if (false) {
    /** @type {?} */
    ThfStepperComponent.prototype.thfSteps;
    /**
     * @type {?}
     * @private
     */
    ThfStepperComponent.prototype.currentActiveStep;
    /**
     * @type {?}
     * @private
     */
    ThfStepperComponent.prototype.previousActiveStep;
    /**
     * @type {?}
     * @private
     */
    ThfStepperComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,