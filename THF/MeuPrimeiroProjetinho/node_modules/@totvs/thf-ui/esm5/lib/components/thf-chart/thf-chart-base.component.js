/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToInt, isTypeof } from '../../utils/util';
import { ThfChartType } from './enums/thf-chart-type.enum';
/** @type {?} */
var thfChartDefaultHeight = 400;
/** @type {?} */
var thfChartTypeDefault = ThfChartType.Pie;
/** @type {?} */
var thfChartMinHeight = 200;
/**
 * \@description
 *
 * O `thf-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
 * visualização destes dados mais agradável.
 *
 * Este componente também possibilita a definição das seguintes propriedades: altura do gráfico; série(s) que irão compor o gráfico;
 * título do gráfico; e tipo de gráfico.
 *
 * Além das definições de propriedades, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
 * e outra que será executada ao passar o *mouse* sobre o elemento.
 *
 * #### Boas práticas
 *
 * - Para que o gráfico não fique ilegível e incompreensível, evite uma quantia excessiva de séries.
 *
 * @abstract
 */
var ThfChartBaseComponent = /** @class */ (function () {
    function ThfChartBaseComponent() {
        this._height = thfChartDefaultHeight;
        this._type = thfChartTypeDefault;
        this.thfChartType = ThfChartType;
        /**
         * Evento executado quando o usuário clicar sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesClick = new EventEmitter();
        /**
         * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesHover = new EventEmitter();
    }
    Object.defineProperty(ThfChartBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura do gráfico.
         *
         * > O valor mínimo que pode ser informado é 200.
         *
         * @default `400px`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura do gráfico.
         *
         * > O valor mínimo que pode ser informado é 200.
         *
         * \@default `400px`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var intValue = convertToInt(value);
            /** @type {?} */
            var height;
            if (isTypeof(value, 'number')) {
                height = intValue <= thfChartMinHeight ? thfChartMinHeight : intValue;
            }
            else {
                height = thfChartDefaultHeight;
            }
            this._height = height;
            this.rebuildComponent();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfChartBaseComponent.prototype, "type", {
        // TODO quando houver a necessidade de informar um type.
        // /**
        //  * @optional
        //  *
        //  * @description
        //  *
        //  * Define o tipo de gráfico.
        //  *
        //  * > Veja os valores válidos no *enum* `ThfChartType`.
        //  *
        //  * @default `ThfChartType.Pie`
        //  */
        // @Input('t-type') set type(value: ThfChartType) {
        //   this._type = (<any>Object).values(ThfChartType).includes(value) ? value : thfChartTypeDefault;
        // }
        get: 
        // TODO quando houver a necessidade de informar um type.
        // /**
        //  * @optional
        //  *
        //  * @description
        //  *
        //  * Define o tipo de gráfico.
        //  *
        //  * > Veja os valores válidos no *enum* `ThfChartType`.
        //  *
        //  * @default `ThfChartType.Pie`
        //  */
        // @Input('t-type') set type(value: ThfChartType) {
        //   this._type = (<any>Object).values(ThfChartType).includes(value) ? value : thfChartTypeDefault;
        // }
        /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    ThfChartBaseComponent.prototype.onSeriesClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.seriesClick.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfChartBaseComponent.prototype.onSeriesHover = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.seriesHover.emit(event);
    };
    ThfChartBaseComponent.propDecorators = {
        height: [{ type: Input, args: ['t-height',] }],
        series: [{ type: Input, args: ['t-series',] }],
        title: [{ type: Input, args: ['t-title',] }],
        seriesClick: [{ type: Output, args: ['t-series-click',] }],
        seriesHover: [{ type: Output, args: ['t-series-hover',] }]
    };
    return ThfChartBaseComponent;
}());
export { ThfChartBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfChartBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    ThfChartBaseComponent.prototype._type;
    /** @type {?} */
    ThfChartBaseComponent.prototype.thfChartType;
    /**
     * Coleção de objetos que implementam a interface `ThfPieChartSeries`, para definição dos elementos do gráfico que serão criados
     * dinâmicamente.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.series;
    /**
     * Define o título do gráfico.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.title;
    /**
     * Evento executado quando o usuário clicar sobre um elemento do gráfico.
     *
     * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.seriesClick;
    /**
     * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
     *
     * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
     * @type {?}
     */
    ThfChartBaseComponent.prototype.seriesHover;
    /**
     * @abstract
     * @return {?}
     */
    ThfChartBaseComponent.prototype.rebuildComponent = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWNoYXJ0LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1jaGFydC90aGYtY2hhcnQtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1RCxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTFELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7SUFHckQscUJBQXFCLEdBQUcsR0FBRzs7SUFDM0IsbUJBQW1CLEdBQUcsWUFBWSxDQUFDLEdBQUc7O0lBQ3RDLGlCQUFpQixHQUFHLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQjdCO0lBQUE7UUFFVSxZQUFPLEdBQVkscUJBQXFCLENBQUM7UUFDekMsVUFBSyxHQUFpQixtQkFBbUIsQ0FBQztRQUVsQyxpQkFBWSxHQUFHLFlBQVksQ0FBQzs7Ozs7O1FBbUU1QyxnQkFBVyxHQUF1QixJQUFJLFlBQVksRUFBTyxDQUFDOzs7Ozs7UUFRMUQsZ0JBQVcsR0FBdUIsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQVk1RCxDQUFDO0lBMUVDLHNCQUF1Qix5Q0FBTTs7OztRQWU3QjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDO1FBNUJEOzs7Ozs7Ozs7O1dBVUc7Ozs7Ozs7Ozs7Ozs7O1FBQ0gsVUFBOEIsS0FBYTs7Z0JBQ25DLFFBQVEsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDOztnQkFDaEMsTUFBYztZQUVsQixJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEVBQUU7Z0JBQzdCLE1BQU0sR0FBRyxRQUFRLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7YUFDdkU7aUJBQU07Z0JBQ0wsTUFBTSxHQUFHLHFCQUFxQixDQUFDO2FBQ2hDO1lBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7WUFFdEIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDMUIsQ0FBQzs7O09BQUE7SUErQkQsc0JBQUksdUNBQUk7UUFoQlIsd0RBQXdEO1FBQ3hELE1BQU07UUFDTixlQUFlO1FBQ2YsS0FBSztRQUNMLGtCQUFrQjtRQUNsQixLQUFLO1FBQ0wsK0JBQStCO1FBQy9CLEtBQUs7UUFDTCx5REFBeUQ7UUFDekQsS0FBSztRQUNMLGlDQUFpQztRQUNqQyxNQUFNO1FBQ04sbURBQW1EO1FBQ25ELG1HQUFtRztRQUNuRyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQUVKO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUM7OztPQUFBOzs7OztJQWtCRCw2Q0FBYTs7OztJQUFiLFVBQWMsS0FBVTtRQUN0QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDOzs7OztJQUVELDZDQUFhOzs7O0lBQWIsVUFBYyxLQUFVO1FBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7O3lCQXRFQSxLQUFLLFNBQUMsVUFBVTt5QkF1QmhCLEtBQUssU0FBQyxVQUFVO3dCQUdoQixLQUFLLFNBQUMsU0FBUzs4QkEyQmYsTUFBTSxTQUFDLGdCQUFnQjs4QkFRdkIsTUFBTSxTQUFDLGdCQUFnQjs7SUFhMUIsNEJBQUM7Q0FBQSxBQTVGRCxJQTRGQztTQTVGcUIscUJBQXFCOzs7Ozs7SUFFekMsd0NBQWlEOzs7OztJQUNqRCxzQ0FBa0Q7O0lBRWxELDZDQUE0Qzs7Ozs7O0lBb0M1Qyx1Q0FBb0Q7Ozs7O0lBR3BELHNDQUFpQzs7Ozs7OztJQTJCakMsNENBQzBEOzs7Ozs7O0lBTzFELDRDQUMwRDs7Ozs7SUFVMUQsbUVBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0ludCwgaXNUeXBlb2YgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgVGhmQ2hhcnRUeXBlIH0gZnJvbSAnLi9lbnVtcy90aGYtY2hhcnQtdHlwZS5lbnVtJztcbmltcG9ydCB7IFRoZlBpZUNoYXJ0U2VyaWVzIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3RoZi1jaGFydC1zZXJpZXMuaW50ZXJmYWNlJztcblxuY29uc3QgdGhmQ2hhcnREZWZhdWx0SGVpZ2h0ID0gNDAwO1xuY29uc3QgdGhmQ2hhcnRUeXBlRGVmYXVsdCA9IFRoZkNoYXJ0VHlwZS5QaWU7XG5jb25zdCB0aGZDaGFydE1pbkhlaWdodCA9IDIwMDtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGB0aGYtY2hhcnRgIMOpIHVtIGNvbXBvbmVudGUgcGFyYSByZW5kZXJpemHDp8OjbyBkZSBkYWRvcyBhdHJhdsOpcyBkZSBncsOhZmljb3MsIGNvbSBpc3NvIGZhY2lsaXRhbmRvIGEgY29tcHJlZW5zw6NvIGUgdG9ybmFuZG8gYVxuICogdmlzdWFsaXphw6fDo28gZGVzdGVzIGRhZG9zIG1haXMgYWdyYWTDoXZlbC5cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgdGFtYsOpbSBwb3NzaWJpbGl0YSBhIGRlZmluacOnw6NvIGRhcyBzZWd1aW50ZXMgcHJvcHJpZWRhZGVzOiBhbHR1cmEgZG8gZ3LDoWZpY287IHPDqXJpZShzKSBxdWUgaXLDo28gY29tcG9yIG8gZ3LDoWZpY287XG4gKiB0w610dWxvIGRvIGdyw6FmaWNvOyBlIHRpcG8gZGUgZ3LDoWZpY28uXG4gKlxuICogQWzDqW0gZGFzIGRlZmluacOnw7VlcyBkZSBwcm9wcmllZGFkZXMsIHRhbWLDqW0gw6kgcG9zc8OtdmVsIGRlZmluaXIgdW1hIGHDp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIGFvIGNsaWNhciBlbSBkZXRlcm1pbmFkbyBlbGVtZW50byBkbyBncsOhZmljb1xuICogZSBvdXRyYSBxdWUgc2Vyw6EgZXhlY3V0YWRhIGFvIHBhc3NhciBvICptb3VzZSogc29icmUgbyBlbGVtZW50by5cbiAqXG4gKiAjIyMjIEJvYXMgcHLDoXRpY2FzXG4gKlxuICogLSBQYXJhIHF1ZSBvIGdyw6FmaWNvIG7Do28gZmlxdWUgaWxlZ8OtdmVsIGUgaW5jb21wcmVlbnPDrXZlbCwgZXZpdGUgdW1hIHF1YW50aWEgZXhjZXNzaXZhIGRlIHPDqXJpZXMuXG4gKlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGhmQ2hhcnRCYXNlQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9oZWlnaHQ/OiBudW1iZXIgPSB0aGZDaGFydERlZmF1bHRIZWlnaHQ7XG4gIHByaXZhdGUgX3R5cGU6IFRoZkNoYXJ0VHlwZSA9IHRoZkNoYXJ0VHlwZURlZmF1bHQ7XG5cbiAgcHVibGljIHJlYWRvbmx5IHRoZkNoYXJ0VHlwZSA9IFRoZkNoYXJ0VHlwZTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgYSBhbHR1cmEgZG8gZ3LDoWZpY28uXG4gICAqXG4gICAqID4gTyB2YWxvciBtw61uaW1vIHF1ZSBwb2RlIHNlciBpbmZvcm1hZG8gw6kgMjAwLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgNDAwcHhgXG4gICAqL1xuICBASW5wdXQoJ3QtaGVpZ2h0Jykgc2V0IGhlaWdodCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgY29uc3QgaW50VmFsdWUgPSBjb252ZXJ0VG9JbnQodmFsdWUpO1xuICAgIGxldCBoZWlnaHQ6IG51bWJlcjtcblxuICAgIGlmIChpc1R5cGVvZih2YWx1ZSwgJ251bWJlcicpKSB7XG4gICAgICBoZWlnaHQgPSBpbnRWYWx1ZSA8PSB0aGZDaGFydE1pbkhlaWdodCA/IHRoZkNoYXJ0TWluSGVpZ2h0IDogaW50VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlaWdodCA9IHRoZkNoYXJ0RGVmYXVsdEhlaWdodDtcbiAgICB9XG5cbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICB0aGlzLnJlYnVpbGRDb21wb25lbnQoKTtcbiAgfVxuXG4gIGdldCBoZWlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbGXDp8OjbyBkZSBvYmpldG9zIHF1ZSBpbXBsZW1lbnRhbSBhIGludGVyZmFjZSBgVGhmUGllQ2hhcnRTZXJpZXNgLCBwYXJhIGRlZmluacOnw6NvIGRvcyBlbGVtZW50b3MgZG8gZ3LDoWZpY28gcXVlIHNlcsOjbyBjcmlhZG9zXG4gICAqIGRpbsOibWljYW1lbnRlLlxuICAgKi9cbiAgQElucHV0KCd0LXNlcmllcycpIHNlcmllczogQXJyYXk8VGhmUGllQ2hhcnRTZXJpZXM+O1xuXG4gIC8qKiBEZWZpbmUgbyB0w610dWxvIGRvIGdyw6FmaWNvLiAqL1xuICBASW5wdXQoJ3QtdGl0bGUnKSB0aXRsZT86IHN0cmluZztcblxuICAvLyBUT0RPIHF1YW5kbyBob3V2ZXIgYSBuZWNlc3NpZGFkZSBkZSBpbmZvcm1hciB1bSB0eXBlLlxuICAvLyAvKipcbiAgLy8gICogQG9wdGlvbmFsXG4gIC8vICAqXG4gIC8vICAqIEBkZXNjcmlwdGlvblxuICAvLyAgKlxuICAvLyAgKiBEZWZpbmUgbyB0aXBvIGRlIGdyw6FmaWNvLlxuICAvLyAgKlxuICAvLyAgKiA+IFZlamEgb3MgdmFsb3JlcyB2w6FsaWRvcyBubyAqZW51bSogYFRoZkNoYXJ0VHlwZWAuXG4gIC8vICAqXG4gIC8vICAqIEBkZWZhdWx0IGBUaGZDaGFydFR5cGUuUGllYFxuICAvLyAgKi9cbiAgLy8gQElucHV0KCd0LXR5cGUnKSBzZXQgdHlwZSh2YWx1ZTogVGhmQ2hhcnRUeXBlKSB7XG4gIC8vICAgdGhpcy5fdHlwZSA9ICg8YW55Pk9iamVjdCkudmFsdWVzKFRoZkNoYXJ0VHlwZSkuaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiB0aGZDaGFydFR5cGVEZWZhdWx0O1xuICAvLyB9XG5cbiAgZ2V0IHR5cGUoKTogVGhmQ2hhcnRUeXBlIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudG8gZXhlY3V0YWRvIHF1YW5kbyBvIHVzdcOhcmlvIGNsaWNhciBzb2JyZSB1bSBlbGVtZW50byBkbyBncsOhZmljby5cbiAgICpcbiAgICogPiBTZXLDoSBwYXNzYWRvIHBvciBwYXLDom1ldHJvIHVtIG9iamV0byBjb250ZW5kbyBhIGNhdGVnb3JpYSBlIHZhbG9yIGRhIHPDqXJpZS5cbiAgICovXG4gIEBPdXRwdXQoJ3Qtc2VyaWVzLWNsaWNrJylcbiAgc2VyaWVzQ2xpY2s/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIC8qKlxuICAgKiBFdmVudG8gZXhlY3V0YWRvIHF1YW5kbyBvIHVzdcOhcmlvIHBhc3NhciBvICptb3VzZSogc29icmUgdW0gZWxlbWVudG8gZG8gZ3LDoWZpY28uXG4gICAqXG4gICAqID4gU2Vyw6EgcGFzc2FkbyBwb3IgcGFyw6JtZXRybyB1bSBvYmpldG8gY29udGVuZG8gYSBjYXRlZ29yaWEgZSB2YWxvciBkYSBzw6lyaWUuXG4gICAqL1xuICBAT3V0cHV0KCd0LXNlcmllcy1ob3ZlcicpXG4gIHNlcmllc0hvdmVyPzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBvblNlcmllc0NsaWNrKGV2ZW50OiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnNlcmllc0NsaWNrLmVtaXQoZXZlbnQpO1xuICB9XG5cbiAgb25TZXJpZXNIb3ZlcihldmVudDogYW55KTogdm9pZCB7XG4gICAgdGhpcy5zZXJpZXNIb3Zlci5lbWl0KGV2ZW50KTtcbiAgfVxuXG4gIGFic3RyYWN0IHJlYnVpbGRDb21wb25lbnQoKTogdm9pZDtcblxufVxuIl19