/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, thfLocaleDefault, convertToBoolean } from '../../utils/util';
/** @type {?} */
export var thfListViewLiteralsDefault = {
    en: (/** @type {?} */ ({
        hideDetails: 'Hide details',
        loadMoreData: 'Load more data',
        noData: 'No data found',
        selectAll: 'Select all',
        showDetails: 'Show details'
    })),
    es: (/** @type {?} */ ({
        hideDetails: 'Ocultar detalles',
        loadMoreData: 'Cargar más resultados',
        noData: 'Datos no encontrados',
        selectAll: 'Seleccionar todos',
        showDetails: 'Mostrar detalles'
    })),
    pt: (/** @type {?} */ ({
        hideDetails: 'Ocultar detalhes',
        loadMoreData: 'Carregar mais resultados',
        noData: 'Nenhum dado encontrado',
        selectAll: 'Selecionar todos',
        showDetails: 'Exibir detalhes'
    }))
};
/**
 * \@description
 *
 * Componente de lista que recebe um array de objetos e renderiza de forma dinâmica os dados de
 * acordo com a necessidade de cada tela e deve ser utilizado em conjunto com as diretivas de *templates*
 *  **[t-list-view-content-template](/documentation/thf-list-view-content-template)** e
 * **[t-list-view-detail-template](/documentation/thf-list-view-detail-template)**.
 *
 * O componente disponibiliza uma área específica para exibição informações adicionais,
 * através da diretiva **[t-list-view-detail-template](/documentation/thf-list-view-detail-template)**.
 */
var ThfListViewBaseComponent = /** @class */ (function () {
    function ThfListViewBaseComponent() {
        this.selectAll = false;
        this.showHeader = false;
        /**
         * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
         *
         * > Caso nenhuma ação for definida o mesmo não ficará visível.
         */
        this.showMore = new EventEmitter();
        /**
         * Ação que será executada ao clicar no título.
         *
         * Ao ser disparado, o método inserido na ação irá receber como parâmetro o item da lista clicado.
         */
        this.titleAction = new EventEmitter();
    }
    Object.defineProperty(ThfListViewBaseComponent.prototype, "actions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista de ações que serão exibidas no componente.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Lista de ações que serão exibidas no componente.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._actions = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura do `thf-list-view` em *pixels*.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura do `thf-list-view` em *pixels*.
         * @param {?} height
         * @return {?}
         */
        function (height) {
            this._height = height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewBaseComponent.prototype, "hideSelectAll", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideSelectAll;
        },
        /**
         * @description
         *
         * Esconde o *checkbox* para seleção de todos os itens.
         *
         * @default `false`
         */
        set: /**
         * \@description
         *
         * Esconde o *checkbox* para seleção de todos os itens.
         *
         * \@default `false`
         * @param {?} hideSelectAll
         * @return {?}
         */
        function (hideSelectAll) {
            this._hideSelectAll = convertToBoolean(hideSelectAll);
            this.showMainHeader();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewBaseComponent.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        /** Lista de itens que serão exibidos no componente. */
        set: /**
         * Lista de itens que serão exibidos no componente.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._items = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfListViewLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-list-view`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfListViewLiterals = {
         *    hideDetail: 'Ocultar detalhes completamente',
         *    loadMoreData: 'Mais dados',
         *    showDetail: 'Mostrar mais detalhes',
         *    selectAll: 'Selecionar todos os itens'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfListViewLiterals = {
         *    showDetail: 'Mostrar mais detalhes'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-list-view
         *   [t-literals]="customLiterals">
         * </thf-list-view>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-list-view`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfListViewLiterals = {
         *    hideDetail: 'Ocultar detalhes completamente',
         *    loadMoreData: 'Mais dados',
         *    showDetail: 'Mostrar mais detalhes',
         *    selectAll: 'Selecionar todos os itens'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfListViewLiterals = {
         *    showDetail: 'Mostrar mais detalhes'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-list-view
         *   [t-literals]="customLiterals">
         * </thf-list-view>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = tslib_1.__assign({}, thfListViewLiteralsDefault[thfLocaleDefault], thfListViewLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfListViewLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewBaseComponent.prototype, "select", {
        get: /**
         * @return {?}
         */
        function () {
            return this._select;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
         * item está selecionado, por exemplo:
         *
         * ```
         *  item.$selected
         *
         *  // ou
         *
         *  item['$selected']
         * ```
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
         * item está selecionado, por exemplo:
         *
         * ```
         *  item.$selected
         *
         *  // ou
         *
         *  item['$selected']
         * ```
         *
         * \@default `false`
         * @param {?} select
         * @return {?}
         */
        function (select) {
            this._select = convertToBoolean(select);
            this.showMainHeader();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewBaseComponent.prototype, "showMoreDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._showMoreDisabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o botão `Carregar Mais Resultados` será desabilitado.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o botão `Carregar Mais Resultados` será desabilitado.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showMoreDisabled = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.onClickAction = /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    function (listViewAction, item) {
        /** @type {?} */
        var cleanItem = this.deleteInternalAttrs(item);
        if (listViewAction.action) {
            listViewAction.action(cleanItem);
        }
    };
    /**
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.onShowMore = /**
     * @return {?}
     */
    function () {
        this.showMore.emit();
    };
    /**
     * @param {?} listItem
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.runTitleAction = /**
     * @param {?} listItem
     * @return {?}
     */
    function (listItem) {
        /** @type {?} */
        var itemWithPublicProperties = this.deleteInternalAttrs(listItem);
        this.titleAction.emit(itemWithPublicProperties);
    };
    /**
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.selectAllListItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item.$selected = _this.selectAll;
            }));
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.selectListItem = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        row.$selected = !row.$selected;
        this.selectAll = this.checkIfItemsAreSelected(this.items);
    };
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.deleteInternalAttrs = /**
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var itemCopy = item ? tslib_1.__assign({}, item) : undefined;
        for (var key in itemCopy) {
            if (itemCopy.hasOwnProperty(key) && key.startsWith('$')) {
                delete itemCopy[key];
            }
        }
        return itemCopy;
    };
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.checkIfItemsAreSelected = /**
     * @private
     * @param {?} items
     * @return {?}
     */
    function (items) {
        /** @type {?} */
        var someCheckedOrIndeterminate = (/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.$selected || item.$selected === null; });
        /** @type {?} */
        var everyChecked = (/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.$selected; });
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    ThfListViewBaseComponent.prototype.showMainHeader = /**
     * @private
     * @return {?}
     */
    function () {
        this.showHeader = !!(this.select && !this.hideSelectAll && this.items && this.items.length);
    };
    ThfListViewBaseComponent.propDecorators = {
        actions: [{ type: Input, args: ['t-actions',] }],
        height: [{ type: Input, args: ['t-height',] }],
        hideSelectAll: [{ type: Input, args: ['t-hide-select-all',] }],
        items: [{ type: Input, args: ['t-items',] }],
        literals: [{ type: Input, args: ['t-literals',] }],
        propertyLink: [{ type: Input, args: ['t-property-link',] }],
        propertyTitle: [{ type: Input, args: ['t-property-title',] }],
        select: [{ type: Input, args: ['t-select',] }],
        showMoreDisabled: [{ type: Input, args: ['t-show-more-disabled',] }],
        showMore: [{ type: Output, args: ['t-show-more',] }],
        titleAction: [{ type: Output, args: ['t-title-action',] }]
    };
    return ThfListViewBaseComponent;
}());
export { ThfListViewBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfListViewBaseComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    ThfListViewBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    ThfListViewBaseComponent.prototype._hideSelectAll;
    /**
     * @type {?}
     * @private
     */
    ThfListViewBaseComponent.prototype._items;
    /**
     * @type {?}
     * @private
     */
    ThfListViewBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    ThfListViewBaseComponent.prototype._select;
    /**
     * @type {?}
     * @private
     */
    ThfListViewBaseComponent.prototype._showMoreDisabled;
    /** @type {?} */
    ThfListViewBaseComponent.prototype.popupTarget;
    /** @type {?} */
    ThfListViewBaseComponent.prototype.selectAll;
    /** @type {?} */
    ThfListViewBaseComponent.prototype.showHeader;
    /**
     * Recebe uma propriedade que será utilizada para recuperar o valor do objeto que será usado como link para o título.
     * @type {?}
     */
    ThfListViewBaseComponent.prototype.propertyLink;
    /**
     * Recebe uma propriedade que será utilizada para recuperar o valor do objeto que será exibido como o título de cada item.
     * @type {?}
     */
    ThfListViewBaseComponent.prototype.propertyTitle;
    /**
     * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
     *
     * > Caso nenhuma ação for definida o mesmo não ficará visível.
     * @type {?}
     */
    ThfListViewBaseComponent.prototype.showMore;
    /**
     * Ação que será executada ao clicar no título.
     *
     * Ao ser disparado, o método inserido na ação irá receber como parâmetro o item da lista clicado.
     * @type {?}
     */
    ThfListViewBaseComponent.prototype.titleAction;
}
//# sourceMappingURL=data:application/json;base64,