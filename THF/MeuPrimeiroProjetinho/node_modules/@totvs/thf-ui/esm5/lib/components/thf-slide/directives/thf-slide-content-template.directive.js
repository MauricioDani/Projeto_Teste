/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef } from '@angular/core';
/**
 * \@usedBy ThfSlideComponent
 *
 * \@description
 *
 * Esta diretiva permite a customização de um slide.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item do slide corrente.
 *  - Índice: `index` determina o índice do slide corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <thf-slide
 *   [t-slides]="[{ id: 1, name: 'Register', email: 'register\@totvs.com' }]">
 *
 *   <ng-template t-slide-content-template let-item let-code="index">
 *     <div class="thf-row">
 *       <thf-info class="thf-md-6" t-label="Code" [t-value]="item.id"></thf-info>
 *       <thf-info class="thf-md-6" t-label="Email" [t-value]="item.email"></thf-info>
 *     </div>
 *   </ng-template>
 *
 * </thf-slide>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <thf-slide
 *    [t-slides]="[{ id: 1, name: 'Register', email: 'register\@totvs.com' }]">
 *
 *    <div *t-slide-content-template="let item, let i=index" class="thf-row">
 *      <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
 *    </div>
 * </thf-slide>
 * ...
 *
 * ```
 */
var ThfSlideContentTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function ThfSlideContentTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    ThfSlideContentTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[t-slide-content-template]'
                },] }
    ];
    /** @nocollapse */
    ThfSlideContentTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return ThfSlideContentTemplateDirective;
}());
export { ThfSlideContentTemplateDirective };
if (false) {
    /** @type {?} */
    ThfSlideContentTemplateDirective.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXNsaWRlLWNvbnRlbnQtdGVtcGxhdGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1zbGlkZS9kaXJlY3RpdmVzL3RoZi1zbGlkZS1jb250ZW50LXRlbXBsYXRlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNkN2RDtJQUtFLHNFQUFzRTtJQUN0RSwwQ0FBbUIsV0FBNkI7UUFBN0IsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0lBQUksQ0FBQzs7Z0JBTnRELFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsNEJBQTRCO2lCQUN2Qzs7OztnQkEvQ21CLFdBQVc7O0lBb0QvQix1Q0FBQztDQUFBLEFBUEQsSUFPQztTQUpZLGdDQUFnQzs7O0lBRy9CLHVEQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAdXNlZEJ5IFRoZlNsaWRlQ29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0YSBkaXJldGl2YSBwZXJtaXRlIGEgY3VzdG9taXphw6fDo28gZGUgdW0gc2xpZGUuXG4gKlxuICogRGV2ZS1zZSB1dGlsaXphciBjb21vIHBhcsOibWV0cm8gYSByZWZlcsOqbmNpYSBkbyBpdGVtIGUvb3Ugw61uZGljZSwgc2VuZG8gcG9yIHBhZHLDo28gbyBpdGVtLlxuICogIC0gSXRlbTogYGl0ZW1gIGRldGVybWluYSBvIGl0ZW0gZG8gc2xpZGUgY29ycmVudGUuXG4gKiAgLSDDjW5kaWNlOiBgaW5kZXhgIGRldGVybWluYSBvIMOtbmRpY2UgZG8gc2xpZGUgY29ycmVudGUuXG4gKlxuICogRXN0YSBkaXJldGl2YSBwb2RlIHNlciB1c2FkYSBkZSBkdWFzIGZvcm1hczogZXhwbMOtY2l0YSBvdSAqc3ludGF4IHN1Z2FyKi4gVmVqYSBhIHNlZ3VpciBhbWJvcywgcmVzcGVjdGl2YW1lbnRlOlxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8dGhmLXNsaWRlXG4gKiAgIFt0LXNsaWRlc109XCJbeyBpZDogMSwgbmFtZTogJ1JlZ2lzdGVyJywgZW1haWw6ICdyZWdpc3RlckB0b3R2cy5jb20nIH1dXCI+XG4gKlxuICogICA8bmctdGVtcGxhdGUgdC1zbGlkZS1jb250ZW50LXRlbXBsYXRlIGxldC1pdGVtIGxldC1jb2RlPVwiaW5kZXhcIj5cbiAqICAgICA8ZGl2IGNsYXNzPVwidGhmLXJvd1wiPlxuICogICAgICAgPHRoZi1pbmZvIGNsYXNzPVwidGhmLW1kLTZcIiB0LWxhYmVsPVwiQ29kZVwiIFt0LXZhbHVlXT1cIml0ZW0uaWRcIj48L3RoZi1pbmZvPlxuICogICAgICAgPHRoZi1pbmZvIGNsYXNzPVwidGhmLW1kLTZcIiB0LWxhYmVsPVwiRW1haWxcIiBbdC12YWx1ZV09XCJpdGVtLmVtYWlsXCI+PC90aGYtaW5mbz5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9uZy10ZW1wbGF0ZT5cbiAqXG4gKiA8L3RoZi1zbGlkZT5cbiAqXG4gKiAuLi5cbiAqIGBgYFxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8dGhmLXNsaWRlXG4gKiAgICBbdC1zbGlkZXNdPVwiW3sgaWQ6IDEsIG5hbWU6ICdSZWdpc3RlcicsIGVtYWlsOiAncmVnaXN0ZXJAdG90dnMuY29tJyB9XVwiPlxuICpcbiAqICAgIDxkaXYgKnQtc2xpZGUtY29udGVudC10ZW1wbGF0ZT1cImxldCBpdGVtLCBsZXQgaT1pbmRleFwiIGNsYXNzPVwidGhmLXJvd1wiPlxuICogICAgICA8dGhmLWluZm8gY2xhc3M9XCJ0aGYtbWQtMTJcIiB0LWxhYmVsPVwiRW1haWxcIiBbdC12YWx1ZV09XCJpdGVtLmVtYWlsXCI+PC90aGYtaW5mbz5cbiAqICAgIDwvZGl2PlxuICogPC90aGYtc2xpZGU+XG4gKiAuLi5cbiAqXG4gKiBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3Qtc2xpZGUtY29udGVudC10ZW1wbGF0ZV0nXG59KVxuZXhwb3J0IGNsYXNzIFRoZlNsaWRlQ29udGVudFRlbXBsYXRlRGlyZWN0aXZlIHtcblxuICAvLyBOZWNlc3PDoXJpbyBtYW50ZXIgdGVtcGxhdGVSZWYgcGFyYSBvIGZ1bmNpb25hbWVudG8gZG8gcm93IHRlbXBsYXRlLlxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuIl19