/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, IterableDiffers, Renderer2, ViewChild } from '@angular/core';
import { ThfBreadcrumbBaseComponent } from './thf-breadcrumb-base.component';
/**
 * \@docsExtends ThfBreadcrumbBaseComponent
 *
 * \@example
 *
 * <example name="thf-breadcrumb-basic" title="Totvs Breadcrumb Basic">
 *  <file name="sample-thf-breadcrumb-basic/sample-thf-breadcrumb-basic.component.html"> </file>
 *  <file name="sample-thf-breadcrumb-basic/sample-thf-breadcrumb-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-breadcrumb-labs" title="Totvs Breadcrumb Labs">
 *  <file name="sample-thf-breadcrumb-labs/sample-thf-breadcrumb-labs.component.html"> </file>
 *  <file name="sample-thf-breadcrumb-labs/sample-thf-breadcrumb-labs.component.ts"> </file>
 * </example>
 */
var ThfBreadcrumbComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfBreadcrumbComponent, _super);
    function ThfBreadcrumbComponent(differs, element, renderer) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.renderer = renderer;
        _this.showDropdown = false;
        _this.showDropdownToggle = false;
        _this._breadcrumbItemsLenght = 0;
        _this.calculatedElement = false;
        _this.hiddenWithoutResize = false;
        _this.initialized = false;
        _this.wasClickedonDropdown = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var clickedOutIconDropdown = _this.checkClickOutElement(event, _this.dropdownIcon);
            if (clickedOutIconDropdown) {
                _this.showDropdown = false;
                _this.removeClickoutListener();
            }
        });
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    /**
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialized = true;
        this.initializeResizeListener();
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se vis√≠vel,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (breadcrumbWidth && !this.calculatedElement && this.initialized) {
            this.initBreadcrumbSize();
        }
        if (this.hiddenWithoutResize) {
            this.debounceResize();
            this.hiddenWithoutResize = false;
        }
        this.checkChangeOnItems();
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeClickoutListener();
        this.removeResizeListener();
    };
    /**
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.toggleDropdown = /**
     * @return {?}
     */
    function () {
        this.showDropdown = !this.showDropdown;
        this.initializeClickoutListener();
    };
    /**
     * @private
     * @param {?} event
     * @param {?} element
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.checkClickOutElement = /**
     * @private
     * @param {?} event
     * @param {?} element
     * @return {?}
     */
    function (event, element) {
        return element && !element.nativeElement.contains(event.target);
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.checkChangeOnItems = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.differ) {
            /** @type {?} */
            var changes = this.differ.diff(this.items);
            if (changes) {
                this.calcBreadcrumbItemsWidth();
                this.calculatedElement = false;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.calcBreadcrumb = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();
        /** @type {?} */
        var breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite);
        if (breadcrumb <= this._breadcrumbItemsLenght) {
            this.enableBreadcrumbResponsive();
        }
        else {
            this.disableBreadcrumbResponsive();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.getBreadcrumbFavoriteWidth = /**
     * @private
     * @return {?}
     */
    function () {
        return this.favoriteService ? this.element.nativeElement
            .querySelector('.thf-breadcrumb-favorite').offsetWidth + 20 : 0;
    };
    /**
     * @private
     * @param {?} breadcrumbFavorite
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.getBreadcrumbWidth = /**
     * @private
     * @param {?} breadcrumbFavorite
     * @return {?}
     */
    function (breadcrumbFavorite) {
        return this.element.nativeElement.querySelector('.thf-breadcrumb').offsetWidth - breadcrumbFavorite;
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.calcBreadcrumbItemsWidth = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var breadcrumbItem = this.element.nativeElement
            .querySelectorAll('.thf-breadcrumb-item, .thf-breadcrumb-item-unclickable');
        this._breadcrumbItemsLenght = Array.from(breadcrumbItem)
            .map((/**
         * @param {?} breadcrumb
         * @return {?}
         */
        function (breadcrumb) { return breadcrumb['offsetWidth']; }))
            .reduce((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) { return a + b; }), 16);
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.enableBreadcrumbResponsive = /**
     * @private
     * @return {?}
     */
    function () {
        this.showDropdownToggle = true;
        this.itemsView = this.items.slice(-2);
        this.dropdownItems = this.items.slice(0, -2).reverse();
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.disableBreadcrumbResponsive = /**
     * @private
     * @return {?}
     */
    function () {
        this.showDropdownToggle = false;
        this.itemsView = [].concat(this.items);
        this.showDropdown = false;
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.debounceResize = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.calculatedElement && !_this.hiddenWithoutResize && _this.breadcrumbElement.nativeElement.offsetWidth === 0) {
                _this.hiddenWithoutResize = true;
            }
            else {
                _this.calcBreadcrumb();
            }
        }), 50);
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.initBreadcrumbSize = /**
     * @private
     * @return {?}
     */
    function () {
        this.calcBreadcrumbItemsWidth();
        this.calcBreadcrumb();
        this.calculatedElement = true;
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.initializeClickoutListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.clickoutListener = this.renderer.listen('document', 'click', this.wasClickedonDropdown);
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.initializeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.debounceResize();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.removeClickoutListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfBreadcrumbComponent.prototype.removeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.resizeListener();
    };
    ThfBreadcrumbComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-breadcrumb',
                    template: "<div class=\"thf-breadcrumb\" #breadcrumb>\n\n  <ul class=\"thf-breadcrumb-items\">\n\n    <li #dropdownIcon\n      *ngIf=\"showDropdownToggle\"\n      class=\"thf-breadcrumb-item thf-clickable\"\n      (click)=\"toggleDropdown()\">\n\n      <span class=\"thf-breadcrumb-icon-more thf-icon thf-icon-more\"></span>\n      <div class=\"thf-breadcrumb-arrow\"></div>\n    </li>\n\n    <div *ngFor=\"let item of itemsView, let itemIndex = index;\">\n      <thf-breadcrumb-item\n        [t-action]=\"item.action\"\n        [t-label]=\"item.label\"\n        [t-link]=\"item.link\"\n        [t-item-active]=\"itemIndex === (itemsView.length - 1)\">\n      </thf-breadcrumb-item>\n    </div>\n\n  </ul>\n\n  <thf-breadcrumb-favorite *ngIf=\"favoriteService\"\n    [t-favorite-service]=\"favoriteService\"\n    [t-item-active]=\"items[items.length - 1]\"\n    [t-params-service]=\"paramsService\">\n  </thf-breadcrumb-favorite>\n\n  <thf-breadcrumb-dropdown *ngIf=\"showDropdown\"\n    [t-items]=\"dropdownItems\">\n  </thf-breadcrumb-dropdown>\n\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    ThfBreadcrumbComponent.ctorParameters = function () { return [
        { type: IterableDiffers },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    ThfBreadcrumbComponent.propDecorators = {
        breadcrumbElement: [{ type: ViewChild, args: ['breadcrumb', { read: ElementRef, static: true },] }],
        dropdownIcon: [{ type: ViewChild, args: ['dropdownIcon', { read: ElementRef, static: false },] }]
    };
    return ThfBreadcrumbComponent;
}(ThfBreadcrumbBaseComponent));
export { ThfBreadcrumbComponent };
if (false) {
    /** @type {?} */
    ThfBreadcrumbComponent.prototype.showDropdown;
    /** @type {?} */
    ThfBreadcrumbComponent.prototype.showDropdownToggle;
    /** @type {?} */
    ThfBreadcrumbComponent.prototype.dropdownItems;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype._breadcrumbItemsLenght;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype.calculatedElement;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype.hiddenWithoutResize;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype.timeoutResize;
    /** @type {?} */
    ThfBreadcrumbComponent.prototype.breadcrumbElement;
    /** @type {?} */
    ThfBreadcrumbComponent.prototype.dropdownIcon;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype.wasClickedonDropdown;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype.element;
    /** @type {?} */
    ThfBreadcrumbComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,