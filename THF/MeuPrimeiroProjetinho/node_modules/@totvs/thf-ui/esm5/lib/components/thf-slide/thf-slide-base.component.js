/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToInt } from './../../utils/util';
/** @type {?} */
var thfSlideIntervalDefault = 4000;
/**
 * \@description
 *
 * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
 * customizar sua visualização utilizando a diretiva **[t-slide-content-template](/documentation/thf-slide-content-template)**.
 *
 * #### Boas práticas:
 * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
 * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
 * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
 * @abstract
 */
var ThfSlideBaseComponent = /** @class */ (function () {
    function ThfSlideBaseComponent() {
        this._interval = thfSlideIntervalDefault;
    }
    Object.defineProperty(ThfSlideBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         * Altura do thf-slide, caso seja slide com template customizado, não assume o valor `default`.
         *
         * @default `336`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Altura do thf-slide, caso seja slide com template customizado, não assume o valor `default`.
         *
         * \@default `336`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = convertToInt(value);
            this.setSlideHeight(this.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideBaseComponent.prototype, "interval", {
        get: /**
         * @return {?}
         */
        function () {
            return this._interval;
        },
        /**
         * @optional
         *
         * @description
         *
         * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
         *
         * @default `4000`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
         *
         * \@default `4000`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._interval = convertToInt(value, thfSlideIntervalDefault);
            this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfSlideBaseComponent.prototype, "slides", {
        get: /**
         * @return {?}
         */
        function () {
            return this._slides;
        },
        /**
         * @description
         *
         * Array de imagens ou dados para o slide, pode ser de três formas:
         *
         * - Array implementando objetos da interface `ThfSlideItem`:
         * ```
         * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
         * ```
         * - Array de `strings` com os caminhos das imagens:
         * ```
         * ['/assets/image-1', '/assets/image-2' ]
         * ```
         * - Array com lista de itens (para utilizar template):
         * ```
         * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
         * ```
         *
         * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
         */
        set: /**
         * \@description
         *
         * Array de imagens ou dados para o slide, pode ser de três formas:
         *
         * - Array implementando objetos da interface `ThfSlideItem`:
         * ```
         * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
         * ```
         * - Array de `strings` com os caminhos das imagens:
         * ```
         * ['/assets/image-1', '/assets/image-2' ]
         * ```
         * - Array com lista de itens (para utilizar template):
         * ```
         * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
         * ```
         *
         * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._slides = value;
            this.setSlideItems(value);
            if (value && value.length) {
                this.startSlide();
            }
        },
        enumerable: true,
        configurable: true
    });
    ThfSlideBaseComponent.propDecorators = {
        height: [{ type: Input, args: ['t-height',] }],
        interval: [{ type: Input, args: ['t-interval',] }],
        slides: [{ type: Input, args: ['t-slides',] }]
    };
    return ThfSlideBaseComponent;
}());
export { ThfSlideBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfSlideBaseComponent.prototype._interval;
    /**
     * @type {?}
     * @private
     */
    ThfSlideBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    ThfSlideBaseComponent.prototype._slides;
    /**
     * @abstract
     * @param {?} height
     * @return {?}
     */
    ThfSlideBaseComponent.prototype.setSlideHeight = function (height) { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThfSlideBaseComponent.prototype.cancelInterval = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    ThfSlideBaseComponent.prototype.setSlideItems = function (value) { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThfSlideBaseComponent.prototype.startSlide = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThfSlideBaseComponent.prototype.startInterval = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXNsaWRlLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1zbGlkZS90aGYtc2xpZGUtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDOztJQUk1Qyx1QkFBdUIsR0FBRyxJQUFJOzs7Ozs7Ozs7Ozs7O0FBYXBDO0lBQUE7UUFFVSxjQUFTLEdBQVcsdUJBQXVCLENBQUM7SUErRXRELENBQUM7SUFuRUMsc0JBQXVCLHlDQUFNOzs7O1FBSzdCO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7UUFmRDs7Ozs7OztXQU9HOzs7Ozs7Ozs7OztRQUNILFVBQThCLEtBQWE7WUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkMsQ0FBQzs7O09BQUE7SUFlRCxzQkFBeUIsMkNBQVE7Ozs7UUFLakM7WUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQztRQWhCRDs7Ozs7Ozs7V0FRRzs7Ozs7Ozs7Ozs7O1FBQ0gsVUFBa0MsS0FBYTtZQUM3QyxJQUFJLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztZQUM5RCxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDeEUsQ0FBQzs7O09BQUE7SUEwQkQsc0JBQXVCLHlDQUFNOzs7O1FBUzdCO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7UUEvQkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FtQkc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBQ0gsVUFBOEIsS0FBeUM7WUFDckUsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFDckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUUxQixJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO2dCQUN6QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7YUFDbkI7UUFDSCxDQUFDOzs7T0FBQTs7eUJBdERBLEtBQUssU0FBQyxVQUFVOzJCQWtCaEIsS0FBSyxTQUFDLFlBQVk7eUJBNkJsQixLQUFLLFNBQUMsVUFBVTs7SUFvQm5CLDRCQUFDO0NBQUEsQUFqRkQsSUFpRkM7U0FqRnFCLHFCQUFxQjs7Ozs7O0lBRXpDLDBDQUFvRDs7Ozs7SUFDcEQsd0NBQXlCOzs7OztJQUN6Qix3Q0FBb0Q7Ozs7OztJQXNFcEQsdUVBQThDOzs7Ozs7SUFFOUMsaUVBQTBDOzs7Ozs7O0lBQzFDLHFFQUFrRjs7Ozs7O0lBQ2xGLDZEQUFzQzs7Ozs7O0lBQ3RDLGdFQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0ludCB9IGZyb20gJy4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFRoZlNsaWRlSXRlbSB9IGZyb20gJy4vaW50ZXJmYWNlcy90aGYtc2xpZGUtaXRlbS5pbnRlcmZhY2UnO1xuXG5jb25zdCB0aGZTbGlkZUludGVydmFsRGVmYXVsdCA9IDQwMDA7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSBkZSBzbGlkZSBwYXJhIHZpc3VhbGl6YcOnw6NvIGUgY29udHJvbGUgZGUgZWxlbWVudG9zIGRlIGZvcm1hIGPDrWNsaWNhLiBFeGliZSB1bSBjb25qdW50byBkZSBpbWFnZW5zIG91IGRhZG9zIHF1ZSBwZXJtaXRlbVxuICogY3VzdG9taXphciBzdWEgdmlzdWFsaXphw6fDo28gdXRpbGl6YW5kbyBhIGRpcmV0aXZhICoqW3Qtc2xpZGUtY29udGVudC10ZW1wbGF0ZV0oL2RvY3VtZW50YXRpb24vdGhmLXNsaWRlLWNvbnRlbnQtdGVtcGxhdGUpKiouXG4gKlxuICogIyMjIyBCb2FzIHByw6F0aWNhczpcbiAqIC0gVXRpbGl6YXIgaW1hZ2VucyBubyBzbGlkZSwgbWVzbW8gcXVhbmRvIHBvc3N1aSBjb250ZcO6ZG8gcGVyc29uYWxpemFkby5cbiAqIC0gRXZpdGFyIHV0aWxpemFyIGFwZW5hcyB1bSBzbGlkZSBpc29sYWRvLCB1dGlsaXplIHBlbG8gbWVub3MgZG9pcy5cbiAqIC0gRXZpdGFyIHV0aWxpemFyIG1haXMgZGUgNSBzbGlkZXMsIHBvaXMgYSBpZGVpYSBkbyBjb21wb25lbnRlIMOpIGRlc3RhY2FyIGFwZW5hcyBpbmZvcm1hw6fDtWVzIGltcG9ydGFudGVzLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGhmU2xpZGVCYXNlQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9pbnRlcnZhbDogbnVtYmVyID0gdGhmU2xpZGVJbnRlcnZhbERlZmF1bHQ7XG4gIHByaXZhdGUgX2hlaWdodD86IG51bWJlcjtcbiAgcHJpdmF0ZSBfc2xpZGVzOiBBcnJheTxUaGZTbGlkZUl0ZW0gfCBzdHJpbmcgfCBhbnk+O1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEFsdHVyYSBkbyB0aGYtc2xpZGUsIGNhc28gc2VqYSBzbGlkZSBjb20gdGVtcGxhdGUgY3VzdG9taXphZG8sIG7Do28gYXNzdW1lIG8gdmFsb3IgYGRlZmF1bHRgLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgMzM2YFxuICAgKi9cbiAgQElucHV0KCd0LWhlaWdodCcpIHNldCBoZWlnaHQodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2hlaWdodCA9IGNvbnZlcnRUb0ludCh2YWx1ZSk7XG4gICAgdGhpcy5zZXRTbGlkZUhlaWdodCh0aGlzLmhlaWdodCk7XG4gIH1cblxuICBnZXQgaGVpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFZhbG9yIGVtIG1pbGlzc2VndW5kb3MgcXVlIGRlZmluZSBvIHRlbXBvIGRlIHRyb2NhIGRvcyBzbGlkZXMsIGNhc28gbyB2YWxvciBzZWphIG1lbm9yIHF1ZSBgMTAwMGAgb3Mgc2xpZGVzIG7Do28gdHJvY2FtIGF1dG9tYXRpY2FtZW50ZS5cbiAgICpcbiAgICogQGRlZmF1bHQgYDQwMDBgXG4gICAqL1xuICBASW5wdXQoJ3QtaW50ZXJ2YWwnKSBzZXQgaW50ZXJ2YWwodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2ludGVydmFsID0gY29udmVydFRvSW50KHZhbHVlLCB0aGZTbGlkZUludGVydmFsRGVmYXVsdCk7XG4gICAgdGhpcy5faW50ZXJ2YWwgPj0gMTAwMCA/IHRoaXMuc3RhcnRJbnRlcnZhbCgpIDogdGhpcy5jYW5jZWxJbnRlcnZhbCgpO1xuICB9XG5cbiAgZ2V0IGludGVydmFsKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVydmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBBcnJheSBkZSBpbWFnZW5zIG91IGRhZG9zIHBhcmEgbyBzbGlkZSwgcG9kZSBzZXIgZGUgdHLDqnMgZm9ybWFzOlxuICAgKlxuICAgKiAtIEFycmF5IGltcGxlbWVudGFuZG8gb2JqZXRvcyBkYSBpbnRlcmZhY2UgYFRoZlNsaWRlSXRlbWA6XG4gICAqIGBgYFxuICAgKiBbeyBpbWFnZTogJy9hc3NldHMvaW1hZ2UtMScsIGFjdGlvbjogJ2ltYWdlQ2xpY2suYmluZCh0aGlzKSd9LCB7IGltYWdlOiAnL2Fzc2V0cy9pbWFnZS0yJyB9XVxuICAgKiBgYGBcbiAgICogLSBBcnJheSBkZSBgc3RyaW5nc2AgY29tIG9zIGNhbWluaG9zIGRhcyBpbWFnZW5zOlxuICAgKiBgYGBcbiAgICogWycvYXNzZXRzL2ltYWdlLTEnLCAnL2Fzc2V0cy9pbWFnZS0yJyBdXG4gICAqIGBgYFxuICAgKiAtIEFycmF5IGNvbSBsaXN0YSBkZSBpdGVucyAocGFyYSB1dGlsaXphciB0ZW1wbGF0ZSk6XG4gICAqIGBgYFxuICAgKiBbeyBsYWJlbDogJzEnLCBpbWc6ICcvYXNzZXRzL2ltYWdlLTEnIH0sIHsgbGFiZWw6ICcyJywgaW1nOiAnL2Fzc2V0cy9pbWFnZS0xJyB9XVxuICAgKiBgYGBcbiAgICpcbiAgICogPiBBcyBzZXRhcyBkZSBuYXZlZ2HDp8OjbyBlIG8gY29udHJvbGUgY29tIGPDrXJjdWxvcyBhcGVuYXMgc2Vyw6NvIHJlbmRlcml6YWRvcyBjYXNvIHBvc3N1YSBtYWlzIGRlIHVtIHNsaWRlLlxuICAgKi9cbiAgQElucHV0KCd0LXNsaWRlcycpIHNldCBzbGlkZXModmFsdWU6IEFycmF5PFRoZlNsaWRlSXRlbSB8IHN0cmluZyB8IGFueT4pIHtcbiAgICB0aGlzLl9zbGlkZXMgPSB2YWx1ZTtcbiAgICB0aGlzLnNldFNsaWRlSXRlbXModmFsdWUpO1xuXG4gICAgaWYgKHZhbHVlICYmIHZhbHVlLmxlbmd0aCkge1xuICAgICAgdGhpcy5zdGFydFNsaWRlKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHNsaWRlcygpOiBBcnJheTxUaGZTbGlkZUl0ZW0gfCBzdHJpbmcgfCBhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fc2xpZGVzO1xuICB9XG5cbiAgYWJzdHJhY3Qgc2V0U2xpZGVIZWlnaHQoaGVpZ2h0OiBudW1iZXIpOiB2b2lkO1xuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBjYW5jZWxJbnRlcnZhbCgpOiB2b2lkO1xuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc2V0U2xpZGVJdGVtcyh2YWx1ZTogQXJyYXk8VGhmU2xpZGVJdGVtIHwgc3RyaW5nIHwgYW55Pik6IHZvaWQ7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzdGFydFNsaWRlKCk6IHZvaWQ7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzdGFydEludGVydmFsKCk6IHZvaWQ7XG5cbn1cbiJdfQ==