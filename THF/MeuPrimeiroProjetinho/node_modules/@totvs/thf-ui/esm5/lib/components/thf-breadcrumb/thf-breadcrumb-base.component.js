/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
/**
 * \@description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `t-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `t-params-service` que recebe um objeto contendo as informações.
 */
var ThfBreadcrumbBaseComponent = /** @class */ (function () {
    function ThfBreadcrumbBaseComponent() {
        this.itemsView = [];
        this._items = [];
    }
    Object.defineProperty(ThfBreadcrumbBaseComponent.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        /**
         * @description
         *
         * Lista de itens do _breadcrumb_.
         *
         * **Exemplo:**
         * ```
         * { label: 'Thf Portal', link: 'portal' }
         * ```
         */
        set: /**
         * \@description
         *
         * Lista de itens do _breadcrumb_.
         *
         * **Exemplo:**
         * ```
         * { label: 'Thf Portal', link: 'portal' }
         * ```
         * @param {?} items
         * @return {?}
         */
        function (items) {
            this._items = items;
            this.itemsView = [].concat(items);
        },
        enumerable: true,
        configurable: true
    });
    ThfBreadcrumbBaseComponent.propDecorators = {
        favoriteService: [{ type: Input, args: ['t-favorite-service',] }],
        items: [{ type: Input, args: ['t-items',] }],
        paramsService: [{ type: Input, args: ['t-params-service',] }]
    };
    return ThfBreadcrumbBaseComponent;
}());
export { ThfBreadcrumbBaseComponent };
if (false) {
    /** @type {?} */
    ThfBreadcrumbBaseComponent.prototype.itemsView;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbBaseComponent.prototype._items;
    /**
     * \@optional
     *
     * \@description
     *
     * Permite definir uma URL no componente `thf-breadcrumb` para favoritar ou desfavoritar.
     * > Para utilizar esta propriedade, o último `ThfBreadcrumbItem` da lista de items da propriedade `t-items` deve ter um link informado.
     *
     * > A API deve estar preparada para retornar um objeto no formato `{ isFavorite: boolean }`.
     *
     * Ao iniciar, o `thf-breadcrumb` faz um GET na URL definida na propriedade `t-favorite-service` e deve retornar a propriedade
     * `{ isFavorite: boolean }` do último `ThfBreadcrumbItem` definido na lista de itens da propriedade `t-items`.
     *
     * Ao clicar em favoritar ou desfavoritar o `thf-breadcrumb` faz um POST com o link e a propriedade `{ isFavorite: boolean }`
     * definidos no último item da propriedade `t-items`.
     *
     * > Caso algum parâmetro seja definido na propriedade `t-params-service`, o mesmo será enviado para a API e retornará
     * após fazer um GET ou POST.
     *
     * Exemplo de URL contendo o serviço de favoritar ou desfavoritar:
     *
     * ```
     * https://thf.totvs.com.br/sample/api/favorite
     * ```
     *
     * Ao fazer o GET o `thf-breadcrumb` concatena o link com a URL de serviço. Exemplo:
     *
     * ```
     * GET http://<domain>/api/favorite?url=/example
     * ```
     *
     * ```
     * GET http://thf.totvs.com.br/sample/api/favorite?url=/example
     * ```
     *
     * ```
     * POST
     * payload: { isFavorite: true, url: '/example' }
     * ```
     *
     * Caso possua parâmetros definidos na propriedade `t-params-service`:
     *
     * ```
     * POST
     * payload: { isFavorite: true, url: "/example", params: "{ id: 14, user: 'dev.totvs' }" }
     * ```
     *
     * Exemplos de retorno:
     *
     * ```
     * { isFavorite: true, url: "/example" }
     * ```
     *
     * ```
     * { isFavorite: false, url: "/example" }
     * ```
     *
     * ```
     * { isFavorite: false, url: "/example", params: "{ id: 14, user: 'dev.totvs' }" }
     * ```
     * @type {?}
     */
    ThfBreadcrumbBaseComponent.prototype.favoriteService;
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto que possibilita o envio de parâmetros adicionais à requisição.
     * @type {?}
     */
    ThfBreadcrumbBaseComponent.prototype.paramsService;
    /**
     * @type {?}
     * @protected
     */
    ThfBreadcrumbBaseComponent.prototype.clickoutListener;
    /**
     * @type {?}
     * @protected
     */
    ThfBreadcrumbBaseComponent.prototype.resizeListener;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWJyZWFkY3J1bWItYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLWJyZWFkY3J1bWIvdGhmLWJyZWFkY3J1bWItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQnRDO0lBQUE7UUFFRSxjQUFTLEdBQTZCLEVBQUUsQ0FBQztRQUNqQyxXQUFNLEdBQTZCLEVBQUUsQ0FBQztJQWlHaEQsQ0FBQztJQXRCQyxzQkFBc0IsNkNBQUs7Ozs7UUFLM0I7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQztRQWpCRDs7Ozs7Ozs7O1dBU0c7Ozs7Ozs7Ozs7Ozs7UUFDSCxVQUE0QixLQUErQjtZQUN6RCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsQ0FBQzs7O09BQUE7O2tDQWZBLEtBQUssU0FBQyxvQkFBb0I7d0JBWTFCLEtBQUssU0FBQyxTQUFTO2dDQWdCZixLQUFLLFNBQUMsa0JBQWtCOztJQU0zQixpQ0FBQztDQUFBLEFBcEdELElBb0dDO1NBcEdZLDBCQUEwQjs7O0lBRXJDLCtDQUF5Qzs7Ozs7SUFDekMsNENBQThDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUErRDlDLHFEQUFzRDs7Ozs7Ozs7O0lBNEJ0RCxtREFBa0Q7Ozs7O0lBRWxELHNEQUF1Qzs7Ozs7SUFFdkMsb0RBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgVGhmQnJlYWRjcnVtYkl0ZW0gfSBmcm9tICcuL3RoZi1icmVhZGNydW1iLWl0ZW0uaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgZ2VyYSB1bWEgZXN0cnV0dXJhIGRlIG5hdmVnYcOnw6NvIHF1ZSBhcHJlc2VudGEgYW8gdXN1w6FyaW8gYSBsb2NhbGl6YcOnw6NvXG4gKiBkYSBVUkwgYXR1YWwsIGV4aWJpbmRvIGFzIGFudGVjZXNzb3JhcyBjb25mb3JtZSDDqSByZWFsaXphZG8gYSBuYXZlZ2HDp8OjbyBuYSBhcGxpY2HDp8Ojby5cbiAqXG4gKiBRdWFuZG8gbsOjbyBob3V2ZXIgZXNwYcOnYW1lbnRvIHN1ZmljaWVudGUgcGFyYSBleGliaS1sw6FzLCBvIGNvbXBvbmVudGUgc2UgZW5jYXJyZWdhIHRhbWLDqW1cbiAqIGRlIGFncnVwYXIgYXMgVVJMcyBhbnRlY2Vzc29yYXMsIGdlcmFuZG8gYXNzaW0gdW0gw61jb25lIHF1ZSBwZXJtaXRlIGEgdmlzdWFsaXphw6fDo28gZW0gY2FzY2F0YS5cbiAqXG4gKiBDYXNvIHVtIGVuZGVyZcOnbyBzZWphIGVzcGVjaWZpY2FkbyBuYSBwcm9wcmllZGFkZSBgdC1mYXZvcml0ZS1zZXJ2aWNlYCwgbyBjb21wb25lbnRlIHBlcm1pdGUgYW8gdXN1w6FyaW9cbiAqIGZhdm9yaXRhciBhIFVSTC5cbiAqXG4gKiBIYXZlbmRvIG5lY2Vzc2lkYWRlIGRlIGluY2x1aXIgcGFyw6JtZXRyb3MgbmEgcmVxdWlzacOnw6NvIGRvIHNlcnZpw6dvLFxuICogbyBjb21wb25lbnRlIGRpc3DDtWUgZGEgcHJvcHJpZWRhZGUgYHQtcGFyYW1zLXNlcnZpY2VgIHF1ZSByZWNlYmUgdW0gb2JqZXRvIGNvbnRlbmRvIGFzIGluZm9ybWHDp8O1ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUaGZCcmVhZGNydW1iQmFzZUNvbXBvbmVudCB7XG5cbiAgaXRlbXNWaWV3OiBBcnJheTxUaGZCcmVhZGNydW1iSXRlbT4gPSBbXTtcbiAgcHJpdmF0ZSBfaXRlbXM6IEFycmF5PFRoZkJyZWFkY3J1bWJJdGVtPiA9IFtdO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFBlcm1pdGUgZGVmaW5pciB1bWEgVVJMIG5vIGNvbXBvbmVudGUgYHRoZi1icmVhZGNydW1iYCBwYXJhIGZhdm9yaXRhciBvdSBkZXNmYXZvcml0YXIuXG4gICAqID4gUGFyYSB1dGlsaXphciBlc3RhIHByb3ByaWVkYWRlLCBvIMO6bHRpbW8gYFRoZkJyZWFkY3J1bWJJdGVtYCBkYSBsaXN0YSBkZSBpdGVtcyBkYSBwcm9wcmllZGFkZSBgdC1pdGVtc2AgZGV2ZSB0ZXIgdW0gbGluayBpbmZvcm1hZG8uXG4gICAqXG4gICAqID4gQSBBUEkgZGV2ZSBlc3RhciBwcmVwYXJhZGEgcGFyYSByZXRvcm5hciB1bSBvYmpldG8gbm8gZm9ybWF0byBgeyBpc0Zhdm9yaXRlOiBib29sZWFuIH1gLlxuICAgKlxuICAgKiBBbyBpbmljaWFyLCBvIGB0aGYtYnJlYWRjcnVtYmAgZmF6IHVtIEdFVCBuYSBVUkwgZGVmaW5pZGEgbmEgcHJvcHJpZWRhZGUgYHQtZmF2b3JpdGUtc2VydmljZWAgZSBkZXZlIHJldG9ybmFyIGEgcHJvcHJpZWRhZGVcbiAgICogYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YCBkbyDDumx0aW1vIGBUaGZCcmVhZGNydW1iSXRlbWAgZGVmaW5pZG8gbmEgbGlzdGEgZGUgaXRlbnMgZGEgcHJvcHJpZWRhZGUgYHQtaXRlbXNgLlxuICAgKlxuICAgKiBBbyBjbGljYXIgZW0gZmF2b3JpdGFyIG91IGRlc2Zhdm9yaXRhciBvIGB0aGYtYnJlYWRjcnVtYmAgZmF6IHVtIFBPU1QgY29tIG8gbGluayBlIGEgcHJvcHJpZWRhZGUgYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YFxuICAgKiBkZWZpbmlkb3Mgbm8gw7psdGltbyBpdGVtIGRhIHByb3ByaWVkYWRlIGB0LWl0ZW1zYC5cbiAgICpcbiAgICogPiBDYXNvIGFsZ3VtIHBhcsOibWV0cm8gc2VqYSBkZWZpbmlkbyBuYSBwcm9wcmllZGFkZSBgdC1wYXJhbXMtc2VydmljZWAsIG8gbWVzbW8gc2Vyw6EgZW52aWFkbyBwYXJhIGEgQVBJIGUgcmV0b3JuYXLDoVxuICAgKiBhcMOzcyBmYXplciB1bSBHRVQgb3UgUE9TVC5cbiAgICpcbiAgICogRXhlbXBsbyBkZSBVUkwgY29udGVuZG8gbyBzZXJ2acOnbyBkZSBmYXZvcml0YXIgb3UgZGVzZmF2b3JpdGFyOlxuICAgKlxuICAgKiBgYGBcbiAgICogaHR0cHM6Ly90aGYudG90dnMuY29tLmJyL3NhbXBsZS9hcGkvZmF2b3JpdGVcbiAgICogYGBgXG4gICAqXG4gICAqIEFvIGZhemVyIG8gR0VUIG8gYHRoZi1icmVhZGNydW1iYCBjb25jYXRlbmEgbyBsaW5rIGNvbSBhIFVSTCBkZSBzZXJ2acOnby4gRXhlbXBsbzpcbiAgICpcbiAgICogYGBgXG4gICAqIEdFVCBodHRwOi8vPGRvbWFpbj4vYXBpL2Zhdm9yaXRlP3VybD0vZXhhbXBsZVxuICAgKiBgYGBcbiAgICpcbiAgICogYGBgXG4gICAqIEdFVCBodHRwOi8vdGhmLnRvdHZzLmNvbS5ici9zYW1wbGUvYXBpL2Zhdm9yaXRlP3VybD0vZXhhbXBsZVxuICAgKiBgYGBcbiAgICpcbiAgICogYGBgXG4gICAqIFBPU1RcbiAgICogcGF5bG9hZDogeyBpc0Zhdm9yaXRlOiB0cnVlLCB1cmw6ICcvZXhhbXBsZScgfVxuICAgKiBgYGBcbiAgICpcbiAgICogQ2FzbyBwb3NzdWEgcGFyw6JtZXRyb3MgZGVmaW5pZG9zIG5hIHByb3ByaWVkYWRlIGB0LXBhcmFtcy1zZXJ2aWNlYDpcbiAgICpcbiAgICogYGBgXG4gICAqIFBPU1RcbiAgICogcGF5bG9hZDogeyBpc0Zhdm9yaXRlOiB0cnVlLCB1cmw6IFwiL2V4YW1wbGVcIiwgcGFyYW1zOiBcInsgaWQ6IDE0LCB1c2VyOiAnZGV2LnRvdHZzJyB9XCIgfVxuICAgKiBgYGBcbiAgICpcbiAgICogRXhlbXBsb3MgZGUgcmV0b3JubzpcbiAgICpcbiAgICogYGBgXG4gICAqIHsgaXNGYXZvcml0ZTogdHJ1ZSwgdXJsOiBcIi9leGFtcGxlXCIgfVxuICAgKiBgYGBcbiAgICpcbiAgICogYGBgXG4gICAqIHsgaXNGYXZvcml0ZTogZmFsc2UsIHVybDogXCIvZXhhbXBsZVwiIH1cbiAgICogYGBgXG4gICAqXG4gICAqIGBgYFxuICAgKiB7IGlzRmF2b3JpdGU6IGZhbHNlLCB1cmw6IFwiL2V4YW1wbGVcIiwgcGFyYW1zOiBcInsgaWQ6IDE0LCB1c2VyOiAnZGV2LnRvdHZzJyB9XCIgfVxuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgndC1mYXZvcml0ZS1zZXJ2aWNlJykgZmF2b3JpdGVTZXJ2aWNlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTGlzdGEgZGUgaXRlbnMgZG8gX2JyZWFkY3J1bWJfLlxuICAgKlxuICAgKiAqKkV4ZW1wbG86KipcbiAgICogYGBgXG4gICAqIHsgbGFiZWw6ICdUaGYgUG9ydGFsJywgbGluazogJ3BvcnRhbCcgfVxuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgndC1pdGVtcycpIHNldCBpdGVtcyhpdGVtczogQXJyYXk8VGhmQnJlYWRjcnVtYkl0ZW0+KSB7XG4gICAgdGhpcy5faXRlbXMgPSBpdGVtcztcbiAgICB0aGlzLml0ZW1zVmlldyA9IFtdLmNvbmNhdChpdGVtcyk7XG4gIH1cblxuICBnZXQgaXRlbXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2l0ZW1zO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZXRvIHF1ZSBwb3NzaWJpbGl0YSBvIGVudmlvIGRlIHBhcsOibWV0cm9zIGFkaWNpb25haXMgw6AgcmVxdWlzacOnw6NvLlxuICAgKi9cbiAgQElucHV0KCd0LXBhcmFtcy1zZXJ2aWNlJykgcGFyYW1zU2VydmljZT86IG9iamVjdDtcblxuICBwcm90ZWN0ZWQgY2xpY2tvdXRMaXN0ZW5lcjogKCkgPT4gdm9pZDtcblxuICBwcm90ZWN0ZWQgcmVzaXplTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG5cbn1cbiJdfQ==