/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, forwardRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ThfCheckboxGroupBaseComponent } from './thf-checkbox-group-base.component';
/**
 * \@docsExtends ThfCheckboxGroupBaseComponent
 *
 * \@example
 *
 * <example name="thf-checkbox-group-basic" title="Totvs Checkbox Group Basic">
 *  <file name="sample-thf-checkbox-group-basic/sample-thf-checkbox-group-basic.component.html"> </file>
 *  <file name="sample-thf-checkbox-group-basic/sample-thf-checkbox-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-checkbox-group-labs" title="Totvs Checkbox Group Labs">
 *  <file name="sample-thf-checkbox-group-labs/sample-thf-checkbox-group-labs.component.html"> </file>
 *  <file name="sample-thf-checkbox-group-labs/sample-thf-checkbox-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-checkbox-group-password-policy" title="Totvs Checkbox Group â€“ Security policy">
 *  <file name="sample-thf-checkbox-group-password-policy/sample-thf-checkbox-group-password-policy.component.html"> </file>
 *  <file name="sample-thf-checkbox-group-password-policy/sample-thf-checkbox-group-password-policy.component.ts"> </file>
 * </example>
 */
var ThfCheckboxGroupComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfCheckboxGroupComponent, _super);
    function ThfCheckboxGroupComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfCheckboxGroupComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.changeDetector.detectChanges();
    };
    /**
     * @param {?} event
     * @param {?} option
     * @return {?}
     */
    ThfCheckboxGroupComponent.prototype.onKeyDown = /**
     * @param {?} event
     * @param {?} option
     * @return {?}
     */
    function (event, option) {
        /** @type {?} */
        var spaceBar = 32;
        if (event.which === spaceBar || event.keyCode === spaceBar) {
            this.checkOption(option);
            event.preventDefault();
        }
    };
    ThfCheckboxGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-checkbox-group',
                    template: "<thf-field-container\n  [t-help]=\"help\"\n  [t-label]=\"label\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content thf-checkbox-group-content\">\n    <div class=\"thf-row thf-pt-1 thf-pb-1\">\n\n      <div *ngFor=\"let option of options; let i = index\"\n        class=\"thf-checkbox-group-item thf-md-{{ mdColumns }} thf-lg-{{ columns }}\"\n        [class.thf-checkbox-group-item-disabled]=\"option.disabled || disabled\">\n\n        <input\n          class=\"thf-input thf-checkbox-group-input\"\n          type=\"checkbox\"\n          [class.thf-checkbox-group-input-checked]=\"checkedOptions[option.value]\"\n          [class.thf-checkbox-group-input-indeterminate]=\"checkedOptions[option.value] === null\"\n          [checked]=\"option.value\"\n          [disabled]=\"option.disabled || disabled\"\n          [id]=\"'checkbox_' + i\"\n          [required]=\"required\"\n          [value]=\"option.value\">\n\n        <label #checkboxLabel\n          class=\"thf-checkbox-group-label\"\n          [class.thf-clickable]=\"checkboxLabel.tabIndex === 0\"\n          [for]=\"'checkbox_' + i\"\n          [tabindex]=\"option.disabled || disabled ? -1 : 0\"\n          (click)=\"checkOption(option)\"\n          (keydown)=\"onKeyDown($event, option)\">\n            {{option.label}}\n        </label>\n      </div>\n\n    </div>\n  </div>\n\n  <thf-field-container-bottom></thf-field-container-bottom>\n\n</thf-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ThfCheckboxGroupComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ThfCheckboxGroupComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    ThfCheckboxGroupComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    return ThfCheckboxGroupComponent;
}(ThfCheckboxGroupBaseComponent));
export { ThfCheckboxGroupComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfCheckboxGroupComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWNoZWNrYm94LWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtZmllbGQvdGhmLWNoZWNrYm94LWdyb3VwL3RoZi1jaGVja2JveC1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQW9CLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWxFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QnBGO0lBZ0IrQyxxREFBNkI7SUFFMUUsbUNBQW9CLGNBQWlDO1FBQXJELFlBQ0UsaUJBQU8sU0FDUjtRQUZtQixvQkFBYyxHQUFkLGNBQWMsQ0FBbUI7O0lBRXJELENBQUM7Ozs7SUFFRCxzREFBa0I7OztJQUFsQjtRQUNFLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7Ozs7O0lBRUQsNkNBQVM7Ozs7O0lBQVQsVUFBVSxLQUFvQixFQUFFLE1BQThCOztZQUN0RCxRQUFRLEdBQUcsRUFBRTtRQUVuQixJQUFJLEtBQUssQ0FBQyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssUUFBUSxFQUFFO1lBQzFELElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFekIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQzs7Z0JBbENGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5Qix1OENBQWtEO29CQUNsRCxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVU7Ozs0QkFBQyxjQUFNLE9BQUEseUJBQXlCLEVBQXpCLENBQXlCLEVBQUM7NEJBQ3hELEtBQUssRUFBRSxJQUFJO3lCQUNaO3dCQUNEOzRCQUNFLE9BQU8sRUFBRSxhQUFhOzRCQUN0QixXQUFXLEVBQUUsVUFBVTs7OzRCQUFDLGNBQU0sT0FBQSx5QkFBeUIsRUFBekIsQ0FBeUIsRUFBQzs0QkFDeEQsS0FBSyxFQUFFLElBQUk7eUJBQ1o7cUJBQ0Y7aUJBQ0Y7Ozs7Z0JBekMwQixpQkFBaUI7O0lBOEQ1QyxnQ0FBQztDQUFBLEFBcENELENBZ0IrQyw2QkFBNkIsR0FvQjNFO1NBcEJZLHlCQUF5Qjs7Ozs7O0lBRXhCLG1EQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0NoZWNrZWQsIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTElEQVRPUlMsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBUaGZDaGVja2JveEdyb3VwQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vdGhmLWNoZWNrYm94LWdyb3VwLWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IFRoZkNoZWNrYm94R3JvdXBPcHRpb24gfSBmcm9tICcuL3RoZi1jaGVja2JveC1ncm91cC1vcHRpb24uaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZG9jc0V4dGVuZHMgVGhmQ2hlY2tib3hHcm91cEJhc2VDb21wb25lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJ0aGYtY2hlY2tib3gtZ3JvdXAtYmFzaWNcIiB0aXRsZT1cIlRvdHZzIENoZWNrYm94IEdyb3VwIEJhc2ljXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtY2hlY2tib3gtZ3JvdXAtYmFzaWMvc2FtcGxlLXRoZi1jaGVja2JveC1ncm91cC1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtY2hlY2tib3gtZ3JvdXAtYmFzaWMvc2FtcGxlLXRoZi1jaGVja2JveC1ncm91cC1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJ0aGYtY2hlY2tib3gtZ3JvdXAtbGFic1wiIHRpdGxlPVwiVG90dnMgQ2hlY2tib3ggR3JvdXAgTGFic1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLWNoZWNrYm94LWdyb3VwLWxhYnMvc2FtcGxlLXRoZi1jaGVja2JveC1ncm91cC1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1jaGVja2JveC1ncm91cC1sYWJzL3NhbXBsZS10aGYtY2hlY2tib3gtZ3JvdXAtbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJ0aGYtY2hlY2tib3gtZ3JvdXAtcGFzc3dvcmQtcG9saWN5XCIgdGl0bGU9XCJUb3R2cyBDaGVja2JveCBHcm91cCDigJMgU2VjdXJpdHkgcG9saWN5XCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtY2hlY2tib3gtZ3JvdXAtcGFzc3dvcmQtcG9saWN5L3NhbXBsZS10aGYtY2hlY2tib3gtZ3JvdXAtcGFzc3dvcmQtcG9saWN5LmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1jaGVja2JveC1ncm91cC1wYXNzd29yZC1wb2xpY3kvc2FtcGxlLXRoZi1jaGVja2JveC1ncm91cC1wYXNzd29yZC1wb2xpY3kuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGhmLWNoZWNrYm94LWdyb3VwJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RoZi1jaGVja2JveC1ncm91cC5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGhmQ2hlY2tib3hHcm91cENvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaGZDaGVja2JveEdyb3VwQ29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBUaGZDaGVja2JveEdyb3VwQ29tcG9uZW50IGV4dGVuZHMgVGhmQ2hlY2tib3hHcm91cEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZCB7XG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxuICBvbktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQsIG9wdGlvbjogVGhmQ2hlY2tib3hHcm91cE9wdGlvbikge1xuICAgIGNvbnN0IHNwYWNlQmFyID0gMzI7XG5cbiAgICBpZiAoZXZlbnQud2hpY2ggPT09IHNwYWNlQmFyIHx8IGV2ZW50LmtleUNvZGUgPT09IHNwYWNlQmFyKSB7XG4gICAgICB0aGlzLmNoZWNrT3B0aW9uKG9wdGlvbik7XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==