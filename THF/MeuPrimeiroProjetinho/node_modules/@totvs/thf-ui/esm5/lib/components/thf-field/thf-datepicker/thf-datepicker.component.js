/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef, HostListener, Input, Renderer2, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { formatYear, isMobile, setYearFrom0To100 } from '../../../utils/util';
import { ThfControlPositionService } from './../../../services/thf-control-position/thf-control-position.service';
import { ThfCalendarComponent } from './thf-calendar/thf-calendar.component';
import { ThfDatepickerBaseComponent } from './thf-datepicker-base.component';
/** @type {?} */
var thfCalendarContentOffset = 8;
/** @type {?} */
var thfCalendarPositionDefault = 'bottom-left';
/**
 * \@docsExtends ThfDatepickerBaseComponent
 *
 * \@example
 *
 * <example name="thf-datepicker-basic" title="Totvs Datepicker Basic">
 *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.html"> </file>
 *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.ts"> </file>
 *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.po.ts"> </file>
 *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.e2e-spec.ts"> </file>
 * </example>
 *
 * <example name="thf-datepicker-labs" title="Totvs Datepicker Labs">
 *  <file name="sample-thf-datepicker-labs/sample-thf-datepicker-labs.component.html"> </file>
 *  <file name="sample-thf-datepicker-labs/sample-thf-datepicker-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-datepicker-airfare" title="Totvs Datepicker - Airfare">
 *  <file name="sample-thf-datepicker-airfare/sample-thf-datepicker-airfare.component.html"> </file>
 *  <file name="sample-thf-datepicker-airfare/sample-thf-datepicker-airfare.component.ts"> </file>
 * </example>
 *
 * <example name="thf-datepicker-airfare-reactive-form" title="Totvs Datepicker - Airfare Reactive Form">
 *  <file name="sample-thf-datepicker-airfare-reactive-form/sample-thf-datepicker-airfare-reactive-form.component.html"> </file>
 *  <file name="sample-thf-datepicker-airfare-reactive-form/sample-thf-datepicker-airfare-reactive-form.component.ts"> </file>
 * </example>
 */
var ThfDatepickerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfDatepickerComponent, _super);
    function ThfDatepickerComponent(controlPosition, renderer, el) {
        var _this = _super.call(this) || this;
        _this.controlPosition = controlPosition;
        _this.renderer = renderer;
        _this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])$');
        _this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])' +
            'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
            '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
            '(?:|:?[0-5]\\d)$');
        _this.onScroll = (/**
         * @return {?}
         */
        function () {
            _this.controlPosition.adjustPosition(thfCalendarPositionDefault);
        });
        _this.el = el;
        return _this;
    }
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.setDialogPickerStyleDisplay('none');
        // Põe o foco no Input, setado pelo t-focus
        if (this.focus) {
            this.inputEl.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.togglePicker = /**
     * @return {?}
     */
    function () {
        if (this.disabled || this.readonly) {
            return;
        }
        if (!this.calendar.visible) {
            this.calendar.init();
            this.setCalendarPosition();
            this.initializeListeners();
        }
        else {
            this.inputEl.nativeElement.disabled = false;
            this.closeCalendar();
        }
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.dateSelected = /**
     * @return {?}
     */
    function () {
        this.inputEl.nativeElement.focus();
        this.inputEl.nativeElement.value = this.formatToDate(this.date);
        this.controlModel(this.date);
        this.closeCalendar();
    };
    // Esconde Picker quando for clicado fora
    // Esconde Picker quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.wasClickedOnPicker = 
    // Esconde Picker quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.dialogPicker || !this.iconDatepicker) {
            return;
        }
        if ((!this.dialogPicker.nativeElement.contains(event.target) || this.hasOverlayClass(event.target)) &&
            !this.iconDatepicker.nativeElement.contains(event.target) && !this.hasAttrCalendar(event.target)) {
            this.closeCalendar();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.onKeyup = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.readonly) {
            return;
        }
        this.objMask.keyup($event);
        // Controla a atualização do model, verificando se a data é valida
        if (this.objMask.valueToModel || this.objMask.valueToModel === '') {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                this.date = this.getDateFromString(this.inputEl.nativeElement.value);
            }
            else {
                this.date = undefined;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
        }
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.onKeydown = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        if (this.readonly) {
            return;
        }
        this.objMask.keydown($event);
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.hasInvalidClass = /**
     * @return {?}
     */
    function () {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.getErrorPattern = /**
     * @return {?}
     */
    function () {
        return (this.errorPattern !== '' && this.hasInvalidClass()) ? this.errorPattern : '';
    };
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.valueBeforeChange = this.formatToDate(this.date);
        this.date = undefined;
        this.controlModel(this.date);
        this.controlChangeEmitter();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.eventOnBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var date = this.inputEl.nativeElement.value;
        /** @type {?} */
        var newDate = date ? this.getDateFromString(date) : undefined;
        this.objMask.blur($event);
        this.onblur.emit();
        if (this.objMask.valueToModel) {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(newDate);
                this.date = newDate;
            }
            else {
                this.date = undefined;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
            this.callOnChange(this.date);
        }
        this.controlChangeEmitter();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.eventOnChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var elementValue = this.inputEl.nativeElement.value;
        if (this.verifyMobile()) {
            this.controlModel(elementValue);
            this.callOnChange(elementValue);
        }
        this.onchange.emit(elementValue);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfDatepickerComponent.prototype.eventOnClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if (this.verifyMobile()) {
            $event.target.blur();
            // abre o calendar quando clicar no input somente no mobile
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.togglePicker(); }), 0);
        }
        else {
            // Atualiza a posição do cursor ao clicar
            this.objMask.click($event);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.formatToDate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value) {
            return undefined;
        }
        /** @type {?} */
        var dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
        return dateFormatted;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.refreshValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.inputEl.nativeElement.value = this.formatToDate(value);
        }
    };
    // Função implementada do ControlValueAccessor
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.writeValue = 
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.inputEl && value) {
            if (value instanceof Date) {
                /** @type {?} */
                var dateString = value.toString();
                this.hour = 'T' + dateString.substring(16, 24) + dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
                this.date = value;
                this.inputEl.nativeElement.value = this.formatToDate(value);
            }
            else if (this.isValidDateIso(value) || this.isValidExtendedIso(value)) {
                if (this.isValidDateIso(value)) {
                    this.isExtendedISO = false;
                }
                else {
                    this.hour = value.substring(10, 25);
                    this.isExtendedISO = true;
                }
                /** @type {?} */
                var day = parseInt(value.substring(8, 10), 10);
                /** @type {?} */
                var month = parseInt(value.substring(5, 7), 10) - 1;
                /** @type {?} */
                var year = parseInt(value.substring(0, 4), 10);
                /** @type {?} */
                var dateTemp = new Date(year, month, day);
                setYearFrom0To100(dateTemp, year);
                this.date = dateTemp;
                this.inputEl.nativeElement.value = this.formatToDate(dateTemp);
            }
            else {
                this.inputEl.nativeElement.value = '';
                this.date = undefined;
            }
            this.controlModel(this.date);
        }
        else if (this.inputEl) {
            this.inputEl.nativeElement.value = '';
            this.date = undefined;
        }
        this.valueBeforeChange = this.formatToDate(this.date);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.isValidDateIso = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.dateRegex.test(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.isValidExtendedIso = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.isoRegex.test(value);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    ThfDatepickerComponent.prototype.hasOverlayClass = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        return element.classList.contains('thf-calendar-overlay');
    };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    ThfDatepickerComponent.prototype.verifyMobile = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () {
        return isMobile();
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerComponent.prototype.closeCalendar = /**
     * @private
     * @return {?}
     */
    function () {
        this.calendar.close();
        this.removeListeners();
        this.setDialogPickerStyleDisplay('none');
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerComponent.prototype.controlChangeEmitter = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var dateModelFormatted = this.formatToDate(this.date);
        if (dateModelFormatted !== this.valueBeforeChange) {
            this.valueBeforeChange = dateModelFormatted;
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.onchange.emit(dateModelFormatted);
            }), 200);
        }
    };
    /**
     * @private
     * @param {?} element
     * @return {?}
     */
    ThfDatepickerComponent.prototype.hasAttrCalendar = /**
     * @private
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var attrCalendar = 'attr-calendar';
        return (element && element.hasAttribute(attrCalendar)) || (element.parentElement && element.parentElement.hasAttribute(attrCalendar));
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.clickListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.wasClickedOnPicker(event);
        }));
        this.eventResizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            _this.closeCalendar();
        }));
        window.addEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfDatepickerComponent.prototype.setDialogPickerStyleDisplay = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.dialogPicker.nativeElement.style.display = value;
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerComponent.prototype.setCalendarPosition = /**
     * @private
     * @return {?}
     */
    function () {
        this.setDialogPickerStyleDisplay('block');
        this.controlPosition.setElements(this.dialogPicker.nativeElement, thfCalendarContentOffset, this.inputEl, ['top-left', 'bottom-left'], false, true);
        this.controlPosition.adjustPosition(thfCalendarPositionDefault);
    };
    ThfDatepickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-datepicker',
                    template: "<thf-field-container\n  [t-help]=\"help\"\n  [t-label]=\"label\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n\n    <input #inp\n      class=\"thf-input thf-datepicker\"\n      [ngClass]=\"clean && inp.value ? 'thf-input-double-icon-right' : 'thf-input-icon-right'\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      (blur)=\"eventOnBlur($event)\"\n      (change)=\"eventOnChange($event)\"\n      (click)=\"eventOnClick($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear()\"></thf-clean>\n\n      <span #iconDatepicker\n        class=\"thf-icon thf-field-icon thf-icon-calendar\"\n        [class.thf-field-icon]=\"!disabled && !readonly\"\n        [class.thf-field-icon-disabled]=\"disabled || readonly\"\n        (click)=\"togglePicker()\">\n      </span>\n    </div>\n  </div>\n\n  <div #dialogPicker [class.thf-datepicker-popup-calendar]=\"!verifyMobile()\">\n    <thf-calendar #calendar\n      [(t-selected-date)]=\"date\"\n      [t-date-end]=\"maxDate\"\n      [t-date-start]=\"minDate\"\n      [t-locale]=\"locale\"\n      (t-submit)=\"dateSelected()\">\n    </thf-calendar>\n  </div>\n\n  <thf-field-container-bottom [t-error-pattern]=\"getErrorPattern()\"></thf-field-container-bottom>\n\n</thf-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ThfDatepickerComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ThfDatepickerComponent; })),
                            multi: true,
                        },
                        ThfControlPositionService
                    ]
                }] }
    ];
    /** @nocollapse */
    ThfDatepickerComponent.ctorParameters = function () { return [
        { type: ThfControlPositionService },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    ThfDatepickerComponent.propDecorators = {
        calendar: [{ type: ViewChild, args: ['calendar', { static: true },] }],
        dialogPicker: [{ type: ViewChild, args: ['dialogPicker', { read: ElementRef, static: true },] }],
        iconDatepicker: [{ type: ViewChild, args: ['iconDatepicker', { read: ElementRef, static: true },] }],
        inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef, static: true },] }],
        label: [{ type: Input, args: ['t-label',] }],
        help: [{ type: Input, args: ['t-help',] }],
        onKeyup: [{ type: HostListener, args: ['keyup', ['$event'],] }],
        onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return ThfDatepickerComponent;
}(ThfDatepickerBaseComponent));
export { ThfDatepickerComponent };
if (false) {
    /** @type {?} */
    ThfDatepickerComponent.prototype.date;
    /** @type {?} */
    ThfDatepickerComponent.prototype.el;
    /** @type {?} */
    ThfDatepickerComponent.prototype.hour;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.clickListener;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.dateRegex;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.isoRegex;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.timeoutChange;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.valueBeforeChange;
    /** @type {?} */
    ThfDatepickerComponent.prototype.eventListenerFunction;
    /** @type {?} */
    ThfDatepickerComponent.prototype.eventResizeListener;
    /** @type {?} */
    ThfDatepickerComponent.prototype.calendar;
    /** @type {?} */
    ThfDatepickerComponent.prototype.dialogPicker;
    /** @type {?} */
    ThfDatepickerComponent.prototype.iconDatepicker;
    /** @type {?} */
    ThfDatepickerComponent.prototype.inputEl;
    /**
     * Rótulo do campo.
     * @type {?}
     */
    ThfDatepickerComponent.prototype.label;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    ThfDatepickerComponent.prototype.help;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.onScroll;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.controlPosition;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,