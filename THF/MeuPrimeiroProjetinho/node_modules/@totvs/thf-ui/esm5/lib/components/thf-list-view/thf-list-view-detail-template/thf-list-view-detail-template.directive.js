/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef, Input } from '@angular/core';
/**
 * \@usedBy ThfListViewComponent
 *
 * \@description
 *
 * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
 * botão `Exibir detalhes` abaixo do conteúdo principal do item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <thf-list-view
 *   t-property-title="name"
 *   [t-items]="items">
 *
 *   <ng-template t-list-view-detail-template let-item let-code="index">
 *     <div class="thf-row">
 *       <thf-info class="thf-md-6" t-label="Code" [t-value]="code"></thf-info>
 *       <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
 *     </div>
 *   </ng-template>
 *
 * </thf-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <thf-list-view
 *    t-property-title="name"
 *    [t-items]="items">
 *    <div *t-list-view-detail-template="let item, let i=index" class="thf-row">
 *      <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
 *    </div>
 * </thf-list-view>
 * ...
 *
 * ```
 */
var ThfListViewDetailTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function ThfListViewDetailTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    ThfListViewDetailTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[t-list-view-detail-template]'
                },] }
    ];
    /** @nocollapse */
    ThfListViewDetailTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    ThfListViewDetailTemplateDirective.propDecorators = {
        showDetail: [{ type: Input, args: ['t-show-detail',] }]
    };
    return ThfListViewDetailTemplateDirective;
}());
export { ThfListViewDetailTemplateDirective };
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Função que deve retornar um valor do tipo `boolean`, que será utilizado como a validação para que o detalhe de item
     * da lista inicie aberto ou fechado.
     *
     * @type {?}
     */
    ThfListViewDetailTemplateDirective.prototype.showDetail;
    /** @type {?} */
    ThfListViewDetailTemplateDirective.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1saXN0LXZpZXcvdGhmLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUvdGhmLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUErQzlEO0lBZ0JFLHNFQUFzRTtJQUN0RSw0Q0FBbUIsV0FBNkI7UUFBN0IsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0lBQUksQ0FBQzs7Z0JBakJ0RCxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLCtCQUErQjtpQkFDMUM7Ozs7Z0JBakRtQixXQUFXOzs7NkJBNkQ1QixLQUFLLFNBQUMsZUFBZTs7SUFLeEIseUNBQUM7Q0FBQSxBQW5CRCxJQW1CQztTQWhCWSxrQ0FBa0M7Ozs7Ozs7Ozs7OztJQVc3Qyx3REFBc0Q7O0lBRzFDLHlEQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQHVzZWRCeSBUaGZMaXN0Vmlld0NvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGEgZGlyZXRpdmEgcGVybWl0ZSBxdWUgc2VqYW0gYXByZXNlbnRhZGFzIGluZm9ybWHDp8O1ZXMgYWRpY2lvbmFpcyBkZSBjYWRhIGl0ZW0sIGNvbnN0cnVpbmRvIHVtXG4gKiBib3TDo28gYEV4aWJpciBkZXRhbGhlc2AgYWJhaXhvIGRvIGNvbnRlw7pkbyBwcmluY2lwYWwgZG8gaXRlbS5cbiAqXG4gKiBEZXZlLXNlIHV0aWxpemFyIGNvbW8gcGFyw6JtZXRybyBhIHJlZmVyw6puY2lhIGRvIGl0ZW0gZS9vdSDDrW5kaWNlLCBzZW5kbyBwb3IgcGFkcsOjbyBvIGl0ZW0uXG4gKiAgLSBJdGVtOiBgaXRlbWAgZGV0ZXJtaW5hIG8gaXRlbSBkYSBsaW5oYSBjb3JyZW50ZS5cbiAqICAtIMONbmRpY2U6IGBpbmRleGAgZGV0ZXJtaW5hIG8gw61uZGljZSBkYSBsaW5oYSBjb3JyZW50ZS5cbiAqXG4gKiBFc3RhIGRpcmV0aXZhIHBvZGUgc2VyIHVzYWRhIGRlIGR1YXMgZm9ybWFzOiBleHBsw61jaXRhIG91ICpzeW50YXggc3VnYXIqLiBWZWphIGEgc2VndWlyIGFtYm9zLCByZXNwZWN0aXZhbWVudGU6XG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIDx0aGYtbGlzdC12aWV3XG4gKiAgIHQtcHJvcGVydHktdGl0bGU9XCJuYW1lXCJcbiAqICAgW3QtaXRlbXNdPVwiaXRlbXNcIj5cbiAqXG4gKiAgIDxuZy10ZW1wbGF0ZSB0LWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUgbGV0LWl0ZW0gbGV0LWNvZGU9XCJpbmRleFwiPlxuICogICAgIDxkaXYgY2xhc3M9XCJ0aGYtcm93XCI+XG4gKiAgICAgICA8dGhmLWluZm8gY2xhc3M9XCJ0aGYtbWQtNlwiIHQtbGFiZWw9XCJDb2RlXCIgW3QtdmFsdWVdPVwiY29kZVwiPjwvdGhmLWluZm8+XG4gKiAgICAgICA8dGhmLWluZm8gY2xhc3M9XCJ0aGYtbWQtMTJcIiB0LWxhYmVsPVwiRW1haWxcIiBbdC12YWx1ZV09XCJpdGVtLmVtYWlsXCI+PC90aGYtaW5mbz5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9uZy10ZW1wbGF0ZT5cbiAqXG4gKiA8L3RoZi1saXN0LXZpZXc+XG4gKlxuICogLi4uXG4gKiBgYGBcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogPHRoZi1saXN0LXZpZXdcbiAqICAgIHQtcHJvcGVydHktdGl0bGU9XCJuYW1lXCJcbiAqICAgIFt0LWl0ZW1zXT1cIml0ZW1zXCI+XG4gKiAgICA8ZGl2ICp0LWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGU9XCJsZXQgaXRlbSwgbGV0IGk9aW5kZXhcIiBjbGFzcz1cInRoZi1yb3dcIj5cbiAqICAgICAgPHRoZi1pbmZvIGNsYXNzPVwidGhmLW1kLTEyXCIgdC1sYWJlbD1cIkVtYWlsXCIgW3QtdmFsdWVdPVwiaXRlbS5lbWFpbFwiPjwvdGhmLWluZm8+XG4gKiAgICA8L2Rpdj5cbiAqIDwvdGhmLWxpc3Qtdmlldz5cbiAqIC4uLlxuICpcbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbdC1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlXSdcbn0pXG5leHBvcnQgY2xhc3MgVGhmTGlzdFZpZXdEZXRhaWxUZW1wbGF0ZURpcmVjdGl2ZSB7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRnVuw6fDo28gcXVlIGRldmUgcmV0b3JuYXIgdW0gdmFsb3IgZG8gdGlwbyBgYm9vbGVhbmAsIHF1ZSBzZXLDoSB1dGlsaXphZG8gY29tbyBhIHZhbGlkYcOnw6NvIHBhcmEgcXVlIG8gZGV0YWxoZSBkZSBpdGVtXG4gICAqIGRhIGxpc3RhIGluaWNpZSBhYmVydG8gb3UgZmVjaGFkby5cbiAgICpcbiAgICovXG4gIEBJbnB1dCgndC1zaG93LWRldGFpbCcpIHNob3dEZXRhaWw6IChpdGVtKSA9PiBib29sZWFuO1xuXG4gIC8vIE5lY2Vzc8OhcmlvIG1hbnRlciB0ZW1wbGF0ZVJlZiBwYXJhIG8gZnVuY2lvbmFtZW50byBkbyByb3cgdGVtcGxhdGUuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PikgeyB9XG5cbn1cbiJdfQ==