/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { browserLanguage, thfLocaleDefault } from './../../../utils/util';
import { ThfPageDefaultBaseComponent } from '../thf-page-default/thf-page-default-base.component';
/** @type {?} */
export var thfPageListLiteralsDefault = {
    en: (/** @type {?} */ ({
        otherActions: 'Other actions'
    })),
    es: (/** @type {?} */ ({
        otherActions: 'Otras acciones'
    })),
    pt: (/** @type {?} */ ({
        otherActions: 'Outras ações'
    }))
};
/**
 * \@description
 *
 * O componente `thf-page-list` é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 *
 * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
 * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [thf-icon-search](/guides/icons)
 * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
 *
 * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
 * [`thf-disclaimer-group`](/documentation/thf-disclaimer-group).
 * @abstract
 */
var ThfPageListBaseComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfPageListBaseComponent, _super);
    function ThfPageListBaseComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ThfPageListBaseComponent.prototype, "disclaimerGroup", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disclaimerGroup;
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto que implementa as propriedades da interface `ThfDisclaimerGroup`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto que implementa as propriedades da interface `ThfDisclaimerGroup`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!value) {
                value = (/** @type {?} */ ({}));
            }
            this._disclaimerGroup = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPageListBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || thfPageListLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `thf-page-list`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfPageListLiterals = {
         *    otherActions: 'Mais ações'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfPageListLiterals = {
         *    otherActions: 'Ações da página'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-page-list
         *   [t-literals]="customLiterals">
         * </thf-page-list>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `thf-page-list`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: ThfPageListLiterals = {
         *    otherActions: 'Mais ações'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: ThfPageListLiterals = {
         *    otherActions: 'Ações da página'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <thf-page-list
         *   [t-literals]="customLiterals">
         * </thf-page-list>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = tslib_1.__assign({}, thfPageListLiteralsDefault[thfLocaleDefault], thfPageListLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = thfPageListLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    ThfPageListBaseComponent.propDecorators = {
        breadcrumb: [{ type: Input, args: ['t-breadcrumb',] }],
        disclaimerGroup: [{ type: Input, args: ['t-disclaimer-group',] }],
        filter: [{ type: Input, args: ['t-filter',] }],
        literals: [{ type: Input, args: ['t-literals',] }]
    };
    return ThfPageListBaseComponent;
}(ThfPageDefaultBaseComponent));
export { ThfPageListBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageListBaseComponent.prototype._disclaimerGroup;
    /**
     * @type {?}
     * @private
     */
    ThfPageListBaseComponent.prototype._literals;
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto que implementa as propriedades da interface `ThfBreadcrumb`.
     * @type {?}
     */
    ThfPageListBaseComponent.prototype.breadcrumb;
    /**
     * \@description
     *
     * Objeto que implementa as propriedades da interface `ThfPageFilter`.
     * @type {?}
     */
    ThfPageListBaseComponent.prototype.filter;
    /**
     * @type {?}
     * @protected
     */
    ThfPageListBaseComponent.prototype.resizeListener;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhZ2UtbGlzdC1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtcGFnZS90aGYtcGFnZS1saXN0L3RoZi1wYWdlLWxpc3QtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRDLE9BQU8sRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUkxRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQzs7QUFJbEcsTUFBTSxLQUFPLDBCQUEwQixHQUFHO0lBQ3hDLEVBQUUsRUFBRSxtQkFBc0I7UUFDeEIsWUFBWSxFQUFFLGVBQWU7S0FDOUIsRUFBQTtJQUNELEVBQUUsRUFBRSxtQkFBc0I7UUFDeEIsWUFBWSxFQUFFLGdCQUFnQjtLQUMvQixFQUFBO0lBQ0QsRUFBRSxFQUFFLG1CQUFzQjtRQUN4QixZQUFZLEVBQUUsY0FBYztLQUM3QixFQUFBO0NBQ0Y7Ozs7Ozs7Ozs7Ozs7OztBQWVEO0lBQXVELG9EQUEyQjtJQUFsRjs7SUEwRkEsQ0FBQztJQXJFQyxzQkFBaUMscURBQWU7Ozs7UUFRaEQ7WUFDRSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztRQUMvQixDQUFDO1FBakJEOzs7Ozs7V0FNRzs7Ozs7Ozs7OztRQUNILFVBQWlELEtBQXlCO1lBQ3hFLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ1YsS0FBSyxHQUFHLG1CQUFNLEVBQUUsRUFBQSxDQUFDO2FBQ2xCO1lBRUQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztRQUNoQyxDQUFDOzs7T0FBQTtJQThDRCxzQkFBeUIsOENBQVE7Ozs7UUFXakM7WUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLElBQUksMEJBQTBCLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUN6RSxDQUFDO1FBOUNEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQWdDRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBQ0gsVUFBa0MsS0FBMEI7WUFDMUQsSUFBSSxLQUFLLFlBQVksTUFBTSxJQUFJLENBQUMsQ0FBQyxLQUFLLFlBQVksS0FBSyxDQUFDLEVBQUU7Z0JBQ3hELElBQUksQ0FBQyxTQUFTLHdCQUNULDBCQUEwQixDQUFDLGdCQUFnQixDQUFDLEVBQzVDLDBCQUEwQixDQUFDLGVBQWUsRUFBRSxDQUFDLEVBQzdDLEtBQUssQ0FDVCxDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRywwQkFBMEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO2FBQ2hFO1FBQ0gsQ0FBQzs7O09BQUE7OzZCQXZFQSxLQUFLLFNBQUMsY0FBYztrQ0FTcEIsS0FBSyxTQUFDLG9CQUFvQjt5QkFpQjFCLEtBQUssU0FBQyxVQUFVOzJCQW1DaEIsS0FBSyxTQUFDLFlBQVk7O0lBaUJyQiwrQkFBQztDQUFBLEFBMUZELENBQXVELDJCQUEyQixHQTBGakY7U0ExRnFCLHdCQUF3Qjs7Ozs7O0lBRTVDLG9EQUE4Qzs7Ozs7SUFDOUMsNkNBQXVDOzs7Ozs7Ozs7SUFTdkMsOENBQWtEOzs7Ozs7O0lBMEJsRCwwQ0FBeUM7Ozs7O0lBa0R6QyxrREFBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBicm93c2VyTGFuZ3VhZ2UsIHRoZkxvY2FsZURlZmF1bHQgfSBmcm9tICcuLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBUaGZCcmVhZGNydW1iIH0gZnJvbSAnLi4vLi4vdGhmLWJyZWFkY3J1bWIvdGhmLWJyZWFkY3J1bWIuaW50ZXJmYWNlJztcbmltcG9ydCB7IFRoZkRpc2NsYWltZXJHcm91cCB9IGZyb20gJy4uLy4uL3RoZi1kaXNjbGFpbWVyLWdyb3VwL3RoZi1kaXNjbGFpbWVyLWdyb3VwLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaGZQYWdlRGVmYXVsdEJhc2VDb21wb25lbnQgfSBmcm9tICcuLi90aGYtcGFnZS1kZWZhdWx0L3RoZi1wYWdlLWRlZmF1bHQtYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgVGhmUGFnZUZpbHRlciB9IGZyb20gJy4vLi4vdGhmLXBhZ2UtZmlsdGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaGZQYWdlTGlzdExpdGVyYWxzIH0gZnJvbSAnLi90aGYtcGFnZS1saXN0LWxpdGVyYWxzLmludGVyZmFjZSc7XG5cbmV4cG9ydCBjb25zdCB0aGZQYWdlTGlzdExpdGVyYWxzRGVmYXVsdCA9IHtcbiAgZW46IDxUaGZQYWdlTGlzdExpdGVyYWxzPiB7XG4gICAgb3RoZXJBY3Rpb25zOiAnT3RoZXIgYWN0aW9ucydcbiAgfSxcbiAgZXM6IDxUaGZQYWdlTGlzdExpdGVyYWxzPiB7XG4gICAgb3RoZXJBY3Rpb25zOiAnT3RyYXMgYWNjaW9uZXMnXG4gIH0sXG4gIHB0OiA8VGhmUGFnZUxpc3RMaXRlcmFscz4ge1xuICAgIG90aGVyQWN0aW9uczogJ091dHJhcyBhw6fDtWVzJ1xuICB9XG59O1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgdGhmLXBhZ2UtbGlzdGAgw6kgdXRpbGl6YWRvIGNvbW8gbyBjb250YWluZXIgcHJpbmNpcGFsIHBhcmEgYXMgdGVsYXMgZGUgbGlzdGFnZW0gZGUgZGFkb3MsXG4gKiBwb2RlbmRvIHNlciBhcHJlc2VudGFkbyBjb21vIGxpc3RhIG91IHRhYmVsYS5cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgcG9zc2liaWxpdGEgcmVhbGl6YXIgZmlsdHJvIGRvcyBkYWRvcywgbm8gcXVhbCBwZXJtaXRlIHF1ZSBzZWphIGF0cmlidWlkbyB1bWEgZnVuw6fDo28gcXVlIHNlcsOhIGV4ZWN1dGFkYSBubyBtb21lbnRvXG4gKiBkYSBmaWx0cmFnZW0uIEVzdGUgY29tcG9ydGFtZW50byBwb2RlIHNlciBhY2lvbmFkbyB0YW50byBhbyAqY2xpY2sqIGRvIMOtY29uZSBbdGhmLWljb24tc2VhcmNoXSgvZ3VpZGVzL2ljb25zKVxuICogcXVhbnRvIGFvIHByZXNzaW9uYXIgZGEgdGVjbGEgKkVOVEVSKiBxdWFuZG8gbyBmb2NvIGVzdGl2ZXIgbm8gY2FtcG8gZGUgcGVzcXVpc2EuXG4gKlxuICogUGFyYSBmYWNpbGl0YXIgYSBtYW5pcHVsYcOnw6NvIGUgdmlzdWFsaXphw6fDo28gZG9zIGZpbHRyb3MgYXBsaWNhZG9zLCDDqSBwb3Nzw612ZWwgdGFtYsOpbSB1dGlsaXphciBvIGNvbXBvbmVudGVcbiAqIFtgdGhmLWRpc2NsYWltZXItZ3JvdXBgXSgvZG9jdW1lbnRhdGlvbi90aGYtZGlzY2xhaW1lci1ncm91cCkuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUaGZQYWdlTGlzdEJhc2VDb21wb25lbnQgZXh0ZW5kcyBUaGZQYWdlRGVmYXVsdEJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2Rpc2NsYWltZXJHcm91cD86IFRoZkRpc2NsYWltZXJHcm91cDtcbiAgcHJpdmF0ZSBfbGl0ZXJhbHM6IFRoZlBhZ2VMaXN0TGl0ZXJhbHM7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZXRvIHF1ZSBpbXBsZW1lbnRhIGFzIHByb3ByaWVkYWRlcyBkYSBpbnRlcmZhY2UgYFRoZkJyZWFkY3J1bWJgLlxuICAgKi9cbiAgQElucHV0KCd0LWJyZWFkY3J1bWInKSBicmVhZGNydW1iPzogVGhmQnJlYWRjcnVtYjtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmpldG8gcXVlIGltcGxlbWVudGEgYXMgcHJvcHJpZWRhZGVzIGRhIGludGVyZmFjZSBgVGhmRGlzY2xhaW1lckdyb3VwYC5cbiAgICovXG4gIEBJbnB1dCgndC1kaXNjbGFpbWVyLWdyb3VwJykgc2V0IGRpc2NsYWltZXJHcm91cCh2YWx1ZTogVGhmRGlzY2xhaW1lckdyb3VwKSB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgdmFsdWUgPSA8YW55PiB7fTtcbiAgICB9XG5cbiAgICB0aGlzLl9kaXNjbGFpbWVyR3JvdXAgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBkaXNjbGFpbWVyR3JvdXAoKTogVGhmRGlzY2xhaW1lckdyb3VwIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzY2xhaW1lckdyb3VwO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmpldG8gcXVlIGltcGxlbWVudGEgYXMgcHJvcHJpZWRhZGVzIGRhIGludGVyZmFjZSBgVGhmUGFnZUZpbHRlcmAuXG4gICAqL1xuICBASW5wdXQoJ3QtZmlsdGVyJykgZmlsdGVyOiBUaGZQYWdlRmlsdGVyO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamV0byBjb20gYXMgbGl0ZXJhaXMgdXNhZGFzIG5vIGB0aGYtcGFnZS1saXN0YC5cbiAgICpcbiAgICogRXhpc3RlbSBkdWFzIG1hbmVpcmFzIGRlIGN1c3RvbWl6YXIgbyBjb21wb25lbnRlLCBwYXNzYW5kbyB1bSBvYmpldG8gY29tIHRvZGFzIGFzIGxpdGVyYWlzIGRpc3BvbsOtdmVpczpcbiAgICpcbiAgICogYGBgXG4gICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogVGhmUGFnZUxpc3RMaXRlcmFscyA9IHtcbiAgICogICAgb3RoZXJBY3Rpb25zOiAnTWFpcyBhw6fDtWVzJ1xuICAgKiAgfTtcbiAgICogYGBgXG4gICAqXG4gICAqIE91IHBhc3NhbmRvIGFwZW5hcyBhcyBsaXRlcmFpcyBxdWUgZGVzZWphIGN1c3RvbWl6YXI6XG4gICAqXG4gICAqIGBgYFxuICAgKiAgY29uc3QgY3VzdG9tTGl0ZXJhbHM6IFRoZlBhZ2VMaXN0TGl0ZXJhbHMgPSB7XG4gICAqICAgIG90aGVyQWN0aW9uczogJ0HDp8O1ZXMgZGEgcMOhZ2luYSdcbiAgICogIH07XG4gICAqIGBgYFxuICAgKlxuICAgKiBFIHBhcmEgY2FycmVnYXIgYXMgbGl0ZXJhaXMgY3VzdG9taXphZGFzLCBiYXN0YSBhcGVuYXMgcGFzc2FyIG8gb2JqZXRvIHBhcmEgbyBjb21wb25lbnRlLlxuICAgKlxuICAgKiBgYGBcbiAgICogPHRoZi1wYWdlLWxpc3RcbiAgICogICBbdC1saXRlcmFsc109XCJjdXN0b21MaXRlcmFsc1wiPlxuICAgKiA8L3RoZi1wYWdlLWxpc3Q+XG4gICAqIGBgYFxuICAgKlxuICAgKiAgPiBPIG9iamV0byBwYWRyw6NvIGRlIGxpdGVyYWlzIHNlcsOhIHRyYWR1emlkbyBkZSBhY29yZG8gY29tIG8gaWRpb21hIGRvIGJyb3dzZXIgKHB0LCBlbiwgZXMpLlxuICAgKi9cbiAgQElucHV0KCd0LWxpdGVyYWxzJykgc2V0IGxpdGVyYWxzKHZhbHVlOiBUaGZQYWdlTGlzdExpdGVyYWxzKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmICEodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIHRoaXMuX2xpdGVyYWxzID0ge1xuICAgICAgICAuLi50aGZQYWdlTGlzdExpdGVyYWxzRGVmYXVsdFt0aGZMb2NhbGVEZWZhdWx0XSxcbiAgICAgICAgLi4udGhmUGFnZUxpc3RMaXRlcmFsc0RlZmF1bHRbYnJvd3Nlckxhbmd1YWdlKCldLFxuICAgICAgICAuLi52YWx1ZVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGl0ZXJhbHMgPSB0aGZQYWdlTGlzdExpdGVyYWxzRGVmYXVsdFticm93c2VyTGFuZ3VhZ2UoKV07XG4gICAgfVxuICB9XG4gIGdldCBsaXRlcmFscygpIHtcbiAgICByZXR1cm4gdGhpcy5fbGl0ZXJhbHMgfHwgdGhmUGFnZUxpc3RMaXRlcmFsc0RlZmF1bHRbYnJvd3Nlckxhbmd1YWdlKCldO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlc2l6ZUxpc3RlbmVyOiAoKSA9PiB2b2lkO1xuXG59XG4iXX0=