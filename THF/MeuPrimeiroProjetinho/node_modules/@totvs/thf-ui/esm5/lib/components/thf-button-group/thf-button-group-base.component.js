/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { ThfButtonGroupToggle } from './thf-button-group-toggle.enum';
/** @type {?} */
var THF_TOGGLE_TYPE_DEFAULT = 'none';
/**
 * \@description
 *
 * O componente `thf-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `thf-button-group` com apenas 1 ação, para isso utilize o `thf-button`.
 * - Procure utilizar no máximo 3 ações para cada `thf-button-group`.
 *
 * > As recomendações do `thf-button` também valem para o `thf-button-group`.
 */
var ThfButtonGroupBaseComponent = /** @class */ (function () {
    function ThfButtonGroupBaseComponent() {
        this._small = false;
        this._toggle = THF_TOGGLE_TYPE_DEFAULT;
        /**
         * Lista de botões.
         */
        this.buttons = [];
    }
    Object.defineProperty(ThfButtonGroupBaseComponent.prototype, "small", {
        get: /**
         * @return {?}
         */
        function () {
            return this._small;
        },
        /**
         * @optional
         *
         * @description
         *
         * Torna o grupo de botões com tamanho minificado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Torna o grupo de botões com tamanho minificado.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._small = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfButtonGroupBaseComponent.prototype, "toggle", {
        get: /**
         * @return {?}
         */
        function () {
            return this._toggle;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o modo de seleção de botões.
         *
         * > Veja os valores válidos no *enum* `ThfMultiselectFilterMode`.
         *
         * @default `none`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o modo de seleção de botões.
         *
         * > Veja os valores válidos no *enum* `ThfMultiselectFilterMode`.
         *
         * \@default `none`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._toggle = ((/** @type {?} */ (Object))).values(ThfButtonGroupToggle).includes(value) ? value : THF_TOGGLE_TYPE_DEFAULT;
            this.checkSelecteds(this._toggle);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} buttonClicked
     * @param {?} buttonIndex
     * @return {?}
     */
    ThfButtonGroupBaseComponent.prototype.onButtonClick = /**
     * @param {?} buttonClicked
     * @param {?} buttonIndex
     * @return {?}
     */
    function (buttonClicked, buttonIndex) {
        if (this.toggle === ThfButtonGroupToggle.Single) {
            this.buttons.forEach((/**
             * @param {?} button
             * @param {?} index
             * @return {?}
             */
            function (button, index) {
                return button.selected = index === buttonIndex ? !buttonClicked.selected : false;
            }));
        }
        else if (this.toggle === ThfButtonGroupToggle.Multiple) {
            buttonClicked.selected = !buttonClicked.selected;
        }
    };
    /**
     * @private
     * @param {?} toggleMode
     * @return {?}
     */
    ThfButtonGroupBaseComponent.prototype.checkSelecteds = /**
     * @private
     * @param {?} toggleMode
     * @return {?}
     */
    function (toggleMode) {
        if (toggleMode === ThfButtonGroupToggle.None) {
            this.deselectAllButtons();
        }
        else if (toggleMode === ThfButtonGroupToggle.Single) {
            /** @type {?} */
            var hasMoreOneSelected = this.buttons.filter((/**
             * @param {?} button
             * @return {?}
             */
            function (button) { return button.selected; })).length > 1;
            if (hasMoreOneSelected) {
                this.deselectAllButtons();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfButtonGroupBaseComponent.prototype.deselectAllButtons = /**
     * @private
     * @return {?}
     */
    function () {
        this.buttons.forEach((/**
         * @param {?} button
         * @return {?}
         */
        function (button) { return button.selected = false; }));
    };
    ThfButtonGroupBaseComponent.propDecorators = {
        buttons: [{ type: Input, args: ['t-buttons',] }],
        small: [{ type: Input, args: ['t-small',] }],
        toggle: [{ type: Input, args: ['t-toggle',] }]
    };
    return ThfButtonGroupBaseComponent;
}());
export { ThfButtonGroupBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfButtonGroupBaseComponent.prototype._small;
    /**
     * @type {?}
     * @private
     */
    ThfButtonGroupBaseComponent.prototype._toggle;
    /**
     * Lista de botões.
     * @type {?}
     */
    ThfButtonGroupBaseComponent.prototype.buttons;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWJ1dHRvbi1ncm91cC1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtYnV0dG9uLWdyb3VwL3RoZi1idXR0b24tZ3JvdXAtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFcEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7O0lBRWhFLHVCQUF1QixHQUFHLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJ0QztJQUFBO1FBRVUsV0FBTSxHQUFhLEtBQUssQ0FBQztRQUN6QixZQUFPLEdBQVksdUJBQXVCLENBQUM7Ozs7UUFHL0IsWUFBTyxHQUE4QixFQUFFLENBQUM7SUFnRTlELENBQUM7SUFyREMsc0JBQXNCLDhDQUFLOzs7O1FBSTNCO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7UUFmRDs7Ozs7Ozs7V0FRRzs7Ozs7Ozs7Ozs7O1FBQ0gsVUFBNEIsS0FBYztZQUN4QyxJQUFJLENBQUMsTUFBTSxHQUFHLG1CQUFLLEtBQUssRUFBQSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRSxDQUFDOzs7T0FBQTtJQWlCRCxzQkFBdUIsK0NBQU07Ozs7UUFNN0I7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQztRQW5CRDs7Ozs7Ozs7OztXQVVHOzs7Ozs7Ozs7Ozs7OztRQUNILFVBQThCLEtBQWE7WUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLG1CQUFLLE1BQU0sRUFBQSxDQUFDLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDO1lBRTVHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLENBQUM7OztPQUFBOzs7Ozs7SUFNRCxtREFBYTs7Ozs7SUFBYixVQUFjLGFBQWlDLEVBQUUsV0FBbUI7UUFDbEUsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLG9CQUFvQixDQUFDLE1BQU0sRUFBRTtZQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU87Ozs7O1lBQUMsVUFBQyxNQUFNLEVBQUUsS0FBSztnQkFDakMsT0FBQSxNQUFNLENBQUMsUUFBUSxHQUFHLEtBQUssS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSztZQUF6RSxDQUF5RSxFQUFDLENBQUM7U0FDOUU7YUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssb0JBQW9CLENBQUMsUUFBUSxFQUFFO1lBQ3hELGFBQWEsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1NBQ2xEO0lBQ0gsQ0FBQzs7Ozs7O0lBRU8sb0RBQWM7Ozs7O0lBQXRCLFVBQXVCLFVBQWtCO1FBQ3ZDLElBQUksVUFBVSxLQUFLLG9CQUFvQixDQUFDLElBQUksRUFBRTtZQUM1QyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztTQUMzQjthQUFNLElBQUksVUFBVSxLQUFLLG9CQUFvQixDQUFDLE1BQU0sRUFBRTs7Z0JBQy9DLGtCQUFrQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTTs7OztZQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLFFBQVEsRUFBZixDQUFlLEVBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQztZQUNwRixJQUFJLGtCQUFrQixFQUFFO2dCQUN0QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQzthQUMzQjtTQUNGO0lBQ0gsQ0FBQzs7Ozs7SUFFTyx3REFBa0I7Ozs7SUFBMUI7UUFDRSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxRQUFRLEdBQUcsS0FBSyxFQUF2QixDQUF1QixFQUFDLENBQUM7SUFDMUQsQ0FBQzs7MEJBOURBLEtBQUssU0FBQyxXQUFXO3dCQVdqQixLQUFLLFNBQUMsU0FBUzt5QkFtQmYsS0FBSyxTQUFDLFVBQVU7O0lBa0NuQixrQ0FBQztDQUFBLEFBdEVELElBc0VDO1NBdEVZLDJCQUEyQjs7Ozs7O0lBRXRDLDZDQUFpQzs7Ozs7SUFDakMsOENBQW1EOzs7OztJQUduRCw4Q0FBNEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBUaGZCdXR0b25Hcm91cEl0ZW0gfSBmcm9tICcuL3RoZi1idXR0b24tZ3JvdXAtaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGhmQnV0dG9uR3JvdXBUb2dnbGUgfSBmcm9tICcuL3RoZi1idXR0b24tZ3JvdXAtdG9nZ2xlLmVudW0nO1xuXG5jb25zdCBUSEZfVE9HR0xFX1RZUEVfREVGQVVMVCA9ICdub25lJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHRoZi1idXR0b24tZ3JvdXBgIMOpIGZvcm1hZG8gcG9yIHVtIGNvbmp1bnRvIGRlIGJvdMO1ZXMgZGlzdHJpYnXDrWRvcyBob3Jpem9udGFsbWVudGUuXG4gKiBDYWRhIGJvdMOjbyBkbyBncnVwbyDDqSB0cmF0YWRvIGRlIGZvcm1hIGluZGl2aWR1YWwsIHJlY2ViZW5kbyBhc3NpbSB1bSByw7N0dWxvLCB1bWEgYcOnw6NvIGJlbSBjb21vIHNlIGRldmVyw6EgZXN0YXIgaGFiaWxpdGFkbyBvdSBuw6NvLlxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBhbMOpbSBkZSBzZXJ2aXIgY29tbyB1bSBhZ3J1cGFkb3IgZGUgYm90w7VlcyBwYXJhIGHDp8OjbywgdGFtYsOpbSBwZXJtaXRlIHF1ZSBzZWphbSB1dGlsaXphZG9zXG4gKiBwYXJhIHNlbGXDp8O1ZXMgbXVsdGlwbGFzIGUgw7puaWNhcy5cbiAqXG4gKiBPIGdydXBvIGRlIGJvdMO1ZXMgZGV2ZSBzZXIgdXRpbGl6YWRvIHBhcmEgb3JnYW5pemFyIGFzIGHDp8O1ZXMgZGUgbWFuZWlyYSB1bmlmb3JtZSBlIHRyYW5zbWl0aXIgYSBpZGVpYSBkZSBxdWUgb3MgYm90w7VlcyBmYXplbVxuICogcGFydGUgZGUgdW0gbWVzbW8gY29udGV4dG8uXG4gKlxuICogIyMjIyBCb2FzIHByw6F0aWNhc1xuICpcbiAqIC0gRXZpdGUgdXNhciBvIGB0aGYtYnV0dG9uLWdyb3VwYCBjb20gYXBlbmFzIDEgYcOnw6NvLCBwYXJhIGlzc28gdXRpbGl6ZSBvIGB0aGYtYnV0dG9uYC5cbiAqIC0gUHJvY3VyZSB1dGlsaXphciBubyBtw6F4aW1vIDMgYcOnw7VlcyBwYXJhIGNhZGEgYHRoZi1idXR0b24tZ3JvdXBgLlxuICpcbiAqID4gQXMgcmVjb21lbmRhw6fDtWVzIGRvIGB0aGYtYnV0dG9uYCB0YW1iw6ltIHZhbGVtIHBhcmEgbyBgdGhmLWJ1dHRvbi1ncm91cGAuXG4gKi9cbmV4cG9ydCBjbGFzcyBUaGZCdXR0b25Hcm91cEJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX3NtYWxsPzogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF90b2dnbGU/OiBzdHJpbmcgPSBUSEZfVE9HR0xFX1RZUEVfREVGQVVMVDtcblxuICAvKiogTGlzdGEgZGUgYm90w7Vlcy4gKi9cbiAgQElucHV0KCd0LWJ1dHRvbnMnKSBidXR0b25zOiBBcnJheTxUaGZCdXR0b25Hcm91cEl0ZW0+ID0gW107XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVG9ybmEgbyBncnVwbyBkZSBib3TDtWVzIGNvbSB0YW1hbmhvIG1pbmlmaWNhZG8uXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgndC1zbWFsbCcpIHNldCBzbWFsbCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3NtYWxsID0gPGFueT52YWx1ZSA9PT0gJycgPyB0cnVlIDogY29udmVydFRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgc21hbGwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3NtYWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIG8gbW9kbyBkZSBzZWxlw6fDo28gZGUgYm90w7Vlcy5cbiAgICpcbiAgICogPiBWZWphIG9zIHZhbG9yZXMgdsOhbGlkb3Mgbm8gKmVudW0qIGBUaGZNdWx0aXNlbGVjdEZpbHRlck1vZGVgLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgbm9uZWBcbiAgICovXG4gIEBJbnB1dCgndC10b2dnbGUnKSBzZXQgdG9nZ2xlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90b2dnbGUgPSAoPGFueT5PYmplY3QpLnZhbHVlcyhUaGZCdXR0b25Hcm91cFRvZ2dsZSkuaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBUSEZfVE9HR0xFX1RZUEVfREVGQVVMVDtcblxuICAgIHRoaXMuY2hlY2tTZWxlY3RlZHModGhpcy5fdG9nZ2xlKTtcbiAgfVxuXG4gIGdldCB0b2dnbGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdG9nZ2xlO1xuICB9XG5cbiAgb25CdXR0b25DbGljayhidXR0b25DbGlja2VkOiBUaGZCdXR0b25Hcm91cEl0ZW0sIGJ1dHRvbkluZGV4OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy50b2dnbGUgPT09IFRoZkJ1dHRvbkdyb3VwVG9nZ2xlLlNpbmdsZSkge1xuICAgICAgdGhpcy5idXR0b25zLmZvckVhY2goKGJ1dHRvbiwgaW5kZXgpID0+XG4gICAgICAgIGJ1dHRvbi5zZWxlY3RlZCA9IGluZGV4ID09PSBidXR0b25JbmRleCA/ICFidXR0b25DbGlja2VkLnNlbGVjdGVkIDogZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAodGhpcy50b2dnbGUgPT09IFRoZkJ1dHRvbkdyb3VwVG9nZ2xlLk11bHRpcGxlKSB7XG4gICAgICBidXR0b25DbGlja2VkLnNlbGVjdGVkID0gIWJ1dHRvbkNsaWNrZWQuc2VsZWN0ZWQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1NlbGVjdGVkcyh0b2dnbGVNb2RlOiBzdHJpbmcpIHtcbiAgICBpZiAodG9nZ2xlTW9kZSA9PT0gVGhmQnV0dG9uR3JvdXBUb2dnbGUuTm9uZSkge1xuICAgICAgdGhpcy5kZXNlbGVjdEFsbEJ1dHRvbnMoKTtcbiAgICB9IGVsc2UgaWYgKHRvZ2dsZU1vZGUgPT09IFRoZkJ1dHRvbkdyb3VwVG9nZ2xlLlNpbmdsZSkge1xuICAgICAgY29uc3QgaGFzTW9yZU9uZVNlbGVjdGVkID0gdGhpcy5idXR0b25zLmZpbHRlcihidXR0b24gPT4gYnV0dG9uLnNlbGVjdGVkKS5sZW5ndGggPiAxO1xuICAgICAgaWYgKGhhc01vcmVPbmVTZWxlY3RlZCkge1xuICAgICAgICB0aGlzLmRlc2VsZWN0QWxsQnV0dG9ucygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZGVzZWxlY3RBbGxCdXR0b25zKCkge1xuICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiBidXR0b24uc2VsZWN0ZWQgPSBmYWxzZSk7XG4gIH1cblxufVxuIl19