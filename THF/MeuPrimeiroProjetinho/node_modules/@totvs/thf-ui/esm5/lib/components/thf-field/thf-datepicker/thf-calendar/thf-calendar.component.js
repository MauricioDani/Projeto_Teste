/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isMobile, setYearFrom0To100, validateDateRange } from '../../../../utils/util';
import { ThfCalendarLangService } from './thf-calendar.lang.service';
import { ThfCalendarService } from './thf-calendar.service';
/** @type {?} */
var thfCalendarLocaleDefault = 'pt';
/** @type {?} */
var thfCalendarLocales = ['pt', 'en', 'es'];
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de calendário de uso interno
 */
var ThfCalendarComponent = /** @class */ (function () {
    function ThfCalendarComponent(thfCalendarService, thfCalendarLangService) {
        this.thfCalendarService = thfCalendarService;
        this.thfCalendarLangService = thfCalendarLangService;
        this.dayVisible = false;
        this.displayMonths = Array();
        this.displayWeedDays = Array();
        this.monthVisible = false;
        this.overlayInvisible = true;
        this.visible = false;
        this.yearVisible = false;
        this.isMobile = isMobile;
        this.today = new Date();
        this.selectedDateChange = new EventEmitter();
        this.submit = new EventEmitter();
    }
    Object.defineProperty(ThfCalendarComponent.prototype, "dateEnd", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dateEnd;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data máxima possível de ser selecionada no calendário.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data máxima possível de ser selecionada no calendário.
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val && val instanceof Date) {
                /** @type {?} */
                var year = val.getFullYear();
                /** @type {?} */
                var month = val.getMonth();
                /** @type {?} */
                var day = val.getDate();
                /** @type {?} */
                var date = new Date(year, month, day, 23, 59, 59);
                setYearFrom0To100(date, year);
                this._dateEnd = date;
            }
            else {
                this._dateEnd = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._locale;
        },
        /**
         * @optional
         *
         * @description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         * @param {?} locale
         * @return {?}
         */
        function (locale) {
            this._locale = thfCalendarLocales.includes(locale) ? locale : thfCalendarLocaleDefault;
            this.initializeLanguage();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarComponent.prototype, "selectedDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data selecionada no calendário.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data selecionada no calendário.
         * @param {?} selectedDate
         * @return {?}
         */
        function (selectedDate) {
            this._selectedDate = selectedDate && selectedDate instanceof Date ? selectedDate : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarComponent.prototype, "dateStart", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dateStart;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data mínima possível de ser selecionada no calendário.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data mínima possível de ser selecionada no calendário.
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val && val instanceof Date) {
                /** @type {?} */
                var year = val.getFullYear();
                /** @type {?} */
                var month = val.getMonth();
                /** @type {?} */
                var day = val.getDate();
                /** @type {?} */
                var date = new Date(year, month, day, 0, 0, 0);
                setYearFrom0To100(date, year);
                this._dateStart = date;
            }
            else {
                this._dateStart = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.overlayInvisible = true;
        this.visible = false;
    };
    // Obtém um array de todos os anos desta década
    // Obtém um array de todos os anos desta década
    /**
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.getArrayDecade = 
    // Obtém um array de todos os anos desta década
    /**
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.displayDecade = Array();
        if (year % 10 !== 0) {
            while (year % 10 !== 0) {
                year--;
            }
        }
        this.updateDecade(year);
    };
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    ThfCalendarComponent.prototype.getBackgroundColor = /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayBackgroundColor = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'thf-calendar-box-background-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'thf-calendar-box-background-today';
        }
        else if (date) {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'thf-calendar-box-background';
            }
            else {
                return 'thf-calendar-box-background-disabled';
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.getDayForegroundColor = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'thf-calendar-box-foreground-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'thf-calendar-box-foreground-today';
        }
        else {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'thf-calendar-box-foreground';
            }
            else {
                return 'thf-calendar-box-foreground-disabled';
            }
        }
    };
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    ThfCalendarComponent.prototype.getForegroundColor = /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getWordMonth = /**
     * @return {?}
     */
    function () {
        return this.thfCalendarLangService.getWordMonth();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.getWordYear = /**
     * @return {?}
     */
    function () {
        return this.thfCalendarLangService.getWordYear();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        this.selectedDate ? this.updateDate(this.selectedDate) : this.updateDate(this.today);
        this.initializeLanguage();
        this.selectDay();
        if (this.isMobile()) {
            this.overlayInvisible = false;
        }
        this.visible = true;
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.initializeLanguage = /**
     * @return {?}
     */
    function () {
        this.thfCalendarLangService.setLanguage(this.locale);
        this.displayWeedDays = this.thfCalendarLangService.getArrayWeekDays();
        this.displayMonths = this.thfCalendarLangService.getArrayMonths();
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onNextMonth = /**
     * @return {?}
     */
    function () {
        if (this.displayMonthNumber < 11) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber + 1);
        }
        else {
            this.updateDisplay(this.displayYear + 1, 0);
        }
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.onPrevMonth = /**
     * @return {?}
     */
    function () {
        if (this.displayMonthNumber > 0) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
        }
        else {
            this.updateDisplay(this.displayYear - 1, 11);
        }
    };
    // Ao selecionar uma data
    // Ao selecionar uma data
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectDate = 
    // Ao selecionar uma data
    /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (validateDateRange(date, this.dateStart, this.dateEnd)) {
            this.selectedDate = date;
            this.selectedDateChange.emit(date);
            this.submit.emit(date);
        }
    };
    // Ao selecionar um mês
    // Ao selecionar um mês
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectMonth = 
    // Ao selecionar um mês
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    };
    // Ao selecionar um ano
    // Ao selecionar um ano
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.onSelectYear = 
    // Ao selecionar um ano
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        // Se veio da tela de seleção de mês
        this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
        this.currentYear = year;
        this.updateDisplay(year, month);
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectDay = /**
     * @return {?}
     */
    function () {
        this.dayVisible = true;
        this.monthVisible = false;
        this.yearVisible = false;
        this.lastDisplay = 'day';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectMonth = /**
     * @return {?}
     */
    function () {
        this.dayVisible = false;
        this.monthVisible = true;
        this.yearVisible = false;
        this.lastDisplay = 'month';
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.selectYear = /**
     * @return {?}
     */
    function () {
        this.dayVisible = false;
        this.monthVisible = false;
        this.yearVisible = true;
    };
    /**
     * @return {?}
     */
    ThfCalendarComponent.prototype.setMobileVisualization = /**
     * @return {?}
     */
    function () {
        return this.isMobile() ? 'thf-calendar thf-calendar-mobile' : 'thf-calendar';
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateYear = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
    };
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.addAllYearsInDecade = /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        /** @type {?} */
        var i;
        for (i = year; i < year + 10; i++) {
            this.displayDecade.push(i);
        }
    };
    /**
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    ThfCalendarComponent.prototype.equalsDate = /**
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    function (date1, date2) {
        try {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }
        catch (error) {
            return false;
        }
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDate = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.currentMonthNumber = date.getMonth();
        this.currentYear = date.getFullYear();
        this.updateDisplay(this.currentYear, this.currentMonthNumber);
    };
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDecade = /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.addAllYearsInDecade(year);
        this.displayStartDecade = year;
        this.displayFinalDecade = year + 9;
    };
    /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarComponent.prototype.updateDisplay = /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        /** @type {?} */
        var calendarArray = this.thfCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getArrayDecade(year);
    };
    ThfCalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-calendar',
                    template: "<div class=\"thf-calendar-overlay\" [class.thf-invisible]=\"overlayInvisible\"></div>\n<div *ngIf=\"visible\" [ngClass]=\"setMobileVisualization()\">\n  <div *ngIf=\"dayVisible\" #days>\n    <div class=\"thf-calendar-nav\">\n      <span (click)=\"onPrevMonth()\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span>\n      <div class=\"thf-calendar-nav-title\" attr-calendar>\n        <span class=\"thf-clickable thf-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span>\n        <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"onNextMonth()\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span>\n    </div>\n    <div class=\"thf-calendar-content\">\n      <div class=\"thf-calendar-labels\">\n        <div class=\"thf-calendar-label\" *ngFor=\"let day of displayWeedDays\">\n            {{ day.toLowerCase() }}\n        </div>\n      </div>\n      <div class=\"thf-calendar-content-list-day\">\n        <div *ngFor=\"let day of displayDays\" class=\"thf-calendar-day thf-calendar-box-background\" (click)=\"onSelectDate(day)\"\n          [ngClass]=\"getDayBackgroundColor(day)\">\n          <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\">\n            {{ day.getDate() }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"monthVisible\" #months>\n    <div class=\"thf-calendar-nav\">\n      <span (click)=\"updateYear(-1)\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span>\n      <div class=\"thf-calendar-nav-title\" attr-calendar>\n        <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"updateYear(1)\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span>\n    </div>\n    <div class=\"thf-calendar-content\">\n      <div class=\"thf-calendar-labels\">\n        <div class=\"thf-calendar-label\">\n          {{ getWordMonth() }}\n        </div>\n      </div>\n      <div class=\"thf-calendar-content-list-month\">\n        <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"thf-calendar-month\"\n        (click)=\"onSelectMonth(displayYear, i)\"\n        [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\n            {{ month }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"yearVisible\" #years>\n    <div class=\"thf-calendar-nav\">\n      <span (click)=\"updateYear(-10)\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span>\n      <div class=\"thf-calendar-nav-title\">\n        {{ displayStartDecade }} - {{ displayFinalDecade }}\n      </div>\n      <span (click)=\"updateYear(10)\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span>\n    </div>\n    <div class=\"thf-calendar-content\">\n      <div class=\"thf-calendar-labels\">\n        <div class=\"thf-calendar-label\">\n          {{ getWordYear() }}\n        </div>\n      </div>\n      <div class=\"thf-calendar-content-list-year\">\n        <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"thf-calendar-year\"\n        (click)=\"onSelectYear(year, displayMonthNumber)\"\n        [ngClass]=\"getBackgroundColor(year, currentYear)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\n            {{ year }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n",
                    providers: [ThfCalendarService, ThfCalendarLangService]
                }] }
    ];
    /** @nocollapse */
    ThfCalendarComponent.ctorParameters = function () { return [
        { type: ThfCalendarService },
        { type: ThfCalendarLangService }
    ]; };
    ThfCalendarComponent.propDecorators = {
        elDays: [{ type: ViewChild, args: ['days', { read: ElementRef, static: true },] }],
        elMonths: [{ type: ViewChild, args: ['months', { read: ElementRef, static: true },] }],
        elYears: [{ type: ViewChild, args: ['years', { read: ElementRef, static: true },] }],
        dateEnd: [{ type: Input, args: ['t-date-end',] }],
        locale: [{ type: Input, args: ['t-locale',] }],
        selectedDate: [{ type: Input, args: ['t-selected-date',] }],
        dateStart: [{ type: Input, args: ['t-date-start',] }],
        selectedDateChange: [{ type: Output, args: ['t-selected-dateChange',] }],
        submit: [{ type: Output, args: ['t-submit',] }]
    };
    return ThfCalendarComponent;
}());
export { ThfCalendarComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfCalendarComponent.prototype._dateEnd;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarComponent.prototype._dateStart;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarComponent.prototype._locale;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarComponent.prototype._selectedDate;
    /** @type {?} */
    ThfCalendarComponent.prototype.dayVisible;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayDays;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayDecade;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayFinalDecade;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayMonth;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayMonths;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayStartDecade;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayWeedDays;
    /** @type {?} */
    ThfCalendarComponent.prototype.displayYear;
    /** @type {?} */
    ThfCalendarComponent.prototype.monthVisible;
    /** @type {?} */
    ThfCalendarComponent.prototype.overlayInvisible;
    /** @type {?} */
    ThfCalendarComponent.prototype.visible;
    /** @type {?} */
    ThfCalendarComponent.prototype.yearVisible;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarComponent.prototype.currentMonthNumber;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarComponent.prototype.currentYear;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarComponent.prototype.displayMonthNumber;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarComponent.prototype.isMobile;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarComponent.prototype.lastDisplay;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarComponent.prototype.today;
    /** @type {?} */
    ThfCalendarComponent.prototype.elDays;
    /** @type {?} */
    ThfCalendarComponent.prototype.elMonths;
    /** @type {?} */
    ThfCalendarComponent.prototype.elYears;
    /** @type {?} */
    ThfCalendarComponent.prototype.selectedDateChange;
    /** @type {?} */
    ThfCalendarComponent.prototype.submit;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarComponent.prototype.thfCalendarService;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarComponent.prototype.thfCalendarLangService;
}
//# sourceMappingURL=data:application/json;base64,