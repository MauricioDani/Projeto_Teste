/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
import { ThfComponentInjectorService } from '../../../../services/thf-component-injector/thf-component-injector.service';
import { ThfLookupModalComponent } from '../thf-lookup-modal/thf-lookup-modal.component';
/**
 * \@docsPrivate
 *
 * Serviço responsável por controlar a abertura do componente Thf Lookup Modal.
 */
var ThfLookupModalService = /** @class */ (function () {
    function ThfLookupModalService(thfComponentInjector) {
        this.thfComponentInjector = thfComponentInjector;
        this.componentRef = null;
        this.selectValueEvent = new EventEmitter();
    }
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param service {ThfLookupFilter} Serviço responsável por realizar a busca no serviço dos dados.
     * @param columns {Array<ThfLookupColumn>} Definição das colunas na modal de busca.
     * @param filterParams {any} Valor que será repassado aos métodos do serviço para auxiliar no filtro dos dados.
     * @param title {string} Definição do título da modal.
     * @param literals {ThfLookupLiterals} Literais utilizadas no componente.
     */
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param {?} params
     * @return {?}
     */
    ThfLookupModalService.prototype.openModal = /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param {?} params
     * @return {?}
     */
    function (params) {
        var _this = this;
        var service = params.service, columns = params.columns, filterParams = params.filterParams, title = params.title, literals = params.literals;
        this.componentRef = this.thfComponentInjector.createComponentInApplication(ThfLookupModalComponent);
        this.componentRef.instance.title = title;
        this.componentRef.instance.columns = columns;
        this.componentRef.instance.filterService = service;
        this.componentRef.instance.filterParams = filterParams;
        this.componentRef.instance.literals = literals;
        this.componentRef.instance.model.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            _this.selectValue($event);
        }));
        this.componentRef.changeDetectorRef.detectChanges();
        this.componentRef.instance.openModal();
    };
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    /**
     * @param {?} value
     * @return {?}
     */
    ThfLookupModalService.prototype.selectValue = 
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.selectValueEvent.emit(value);
        }
        this.componentRef.destroy();
    };
    ThfLookupModalService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ThfLookupModalService.ctorParameters = function () { return [
        { type: ThfComponentInjectorService }
    ]; };
    return ThfLookupModalService;
}());
export { ThfLookupModalService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfLookupModalService.prototype.componentRef;
    /** @type {?} */
    ThfLookupModalService.prototype.selectValueEvent;
    /**
     * @type {?}
     * @private
     */
    ThfLookupModalService.prototype.thfComponentInjector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWxvb2t1cC1tb2RhbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1maWVsZC90aGYtbG9va3VwL3NlcnZpY2VzL3RoZi1sb29rdXAtbW9kYWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDRFQUE0RSxDQUFDO0FBSXpILE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDOzs7Ozs7QUFPekY7SUFPRSwrQkFBb0Isb0JBQWlEO1FBQWpELHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBNkI7UUFKN0QsaUJBQVksR0FBc0IsSUFBSSxDQUFDO1FBRS9DLHFCQUFnQixHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBRVUsQ0FBQztJQUV6RTs7Ozs7Ozs7T0FRRzs7Ozs7OztJQUNILHlDQUFTOzs7Ozs7SUFBVCxVQUFVLE1BTVQ7UUFORCxpQkFxQkM7UUFkUyxJQUFBLHdCQUFPLEVBQUUsd0JBQU8sRUFBRSxrQ0FBWSxFQUFFLG9CQUFLLEVBQUUsMEJBQVE7UUFFdkQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsNEJBQTRCLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUNwRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDN0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQztRQUNuRCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDL0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFBLE1BQU07WUFDL0MsS0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzQixDQUFDLEVBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDcEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFekMsQ0FBQztJQUVELHNFQUFzRTs7Ozs7O0lBQ3RFLDJDQUFXOzs7Ozs7SUFBWCxVQUFZLEtBQUs7UUFDZixJQUFJLEtBQUssRUFBRTtZQUNULElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkM7UUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzlCLENBQUM7O2dCQS9DRixVQUFVOzs7O2dCQVhGLDJCQUEyQjs7SUEyRHBDLDRCQUFDO0NBQUEsQUFoREQsSUFnREM7U0EvQ1kscUJBQXFCOzs7Ozs7SUFFaEMsNkNBQStDOztJQUUvQyxpREFBOEQ7Ozs7O0lBRWxELHFEQUF5RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFRoZkNvbXBvbmVudEluamVjdG9yU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NlcnZpY2VzL3RoZi1jb21wb25lbnQtaW5qZWN0b3IvdGhmLWNvbXBvbmVudC1pbmplY3Rvci5zZXJ2aWNlJztcbmltcG9ydCB7IFRoZkxvb2t1cENvbHVtbiB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdGhmLWZpZWxkL3RoZi1sb29rdXAvaW50ZXJmYWNlcy90aGYtbG9va3VwLWNvbHVtbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGhmTG9va3VwRmlsdGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy90aGYtZmllbGQvdGhmLWxvb2t1cC9pbnRlcmZhY2VzL3RoZi1sb29rdXAtZmlsdGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaGZMb29rdXBMaXRlcmFscyB9IGZyb20gJy4uL2ludGVyZmFjZXMvdGhmLWxvb2t1cC1saXRlcmFscy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGhmTG9va3VwTW9kYWxDb21wb25lbnQgfSBmcm9tICcuLi90aGYtbG9va3VwLW1vZGFsL3RoZi1sb29rdXAtbW9kYWwuY29tcG9uZW50JztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBTZXJ2acOnbyByZXNwb25zw6F2ZWwgcG9yIGNvbnRyb2xhciBhIGFiZXJ0dXJhIGRvIGNvbXBvbmVudGUgVGhmIExvb2t1cCBNb2RhbC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRoZkxvb2t1cE1vZGFsU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+ID0gbnVsbDtcblxuICBzZWxlY3RWYWx1ZUV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGhmQ29tcG9uZW50SW5qZWN0b3I6IFRoZkNvbXBvbmVudEluamVjdG9yU2VydmljZSkge31cblxuICAvKipcbiAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIGFicmlyIGEgbW9kYWwgZGUgYnVzY2EgZGFzIGluZm9ybWHDp8O1ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBzZXJ2aWNlIHtUaGZMb29rdXBGaWx0ZXJ9IFNlcnZpw6dvIHJlc3BvbnPDoXZlbCBwb3IgcmVhbGl6YXIgYSBidXNjYSBubyBzZXJ2acOnbyBkb3MgZGFkb3MuXG4gICAqIEBwYXJhbSBjb2x1bW5zIHtBcnJheTxUaGZMb29rdXBDb2x1bW4+fSBEZWZpbmnDp8OjbyBkYXMgY29sdW5hcyBuYSBtb2RhbCBkZSBidXNjYS5cbiAgICogQHBhcmFtIGZpbHRlclBhcmFtcyB7YW55fSBWYWxvciBxdWUgc2Vyw6EgcmVwYXNzYWRvIGFvcyBtw6l0b2RvcyBkbyBzZXJ2acOnbyBwYXJhIGF1eGlsaWFyIG5vIGZpbHRybyBkb3MgZGFkb3MuXG4gICAqIEBwYXJhbSB0aXRsZSB7c3RyaW5nfSBEZWZpbmnDp8OjbyBkbyB0w610dWxvIGRhIG1vZGFsLlxuICAgKiBAcGFyYW0gbGl0ZXJhbHMge1RoZkxvb2t1cExpdGVyYWxzfSBMaXRlcmFpcyB1dGlsaXphZGFzIG5vIGNvbXBvbmVudGUuXG4gICAqL1xuICBvcGVuTW9kYWwocGFyYW1zOiB7XG4gICAgc2VydmljZTogVGhmTG9va3VwRmlsdGVyLFxuICAgIGNvbHVtbnM6IEFycmF5PFRoZkxvb2t1cENvbHVtbj4sXG4gICAgZmlsdGVyUGFyYW1zOiBhbnksXG4gICAgdGl0bGU6IHN0cmluZyxcbiAgICBsaXRlcmFsczogVGhmTG9va3VwTGl0ZXJhbHNcbiAgfSk6IHZvaWQge1xuICAgIGNvbnN0IHsgc2VydmljZSwgY29sdW1ucywgZmlsdGVyUGFyYW1zLCB0aXRsZSwgbGl0ZXJhbHMgfSA9IHBhcmFtcztcblxuICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy50aGZDb21wb25lbnRJbmplY3Rvci5jcmVhdGVDb21wb25lbnRJbkFwcGxpY2F0aW9uKFRoZkxvb2t1cE1vZGFsQ29tcG9uZW50KTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS50aXRsZSA9IHRpdGxlO1xuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmNvbHVtbnMgPSBjb2x1bW5zO1xuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmZpbHRlclNlcnZpY2UgPSBzZXJ2aWNlO1xuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmZpbHRlclBhcmFtcyA9IGZpbHRlclBhcmFtcztcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5saXRlcmFscyA9IGxpdGVyYWxzO1xuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLm1vZGVsLnN1YnNjcmliZSgkZXZlbnQgPT4ge1xuICAgICAgdGhpcy5zZWxlY3RWYWx1ZSgkZXZlbnQpO1xuICAgIH0pO1xuICAgIHRoaXMuY29tcG9uZW50UmVmLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5vcGVuTW9kYWwoKTtcblxuICB9XG5cbiAgLy8gRXN0ZSBtZXRvZG8gw6kgY2hhbWFkbyBxdWFuZG8gw6kgc2VsZWNpb25hZG8gdW0gaXRlbSBuYSBsb29rdXAgbW9kYWwuXG4gIHNlbGVjdFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLnNlbGVjdFZhbHVlRXZlbnQuZW1pdCh2YWx1ZSk7XG4gICAgfVxuICAgIHRoaXMuY29tcG9uZW50UmVmLmRlc3Ryb3koKTtcbiAgfVxufVxuIl19