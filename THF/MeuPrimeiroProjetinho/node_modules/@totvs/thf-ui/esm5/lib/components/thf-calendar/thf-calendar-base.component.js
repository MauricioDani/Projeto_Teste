/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
/** @type {?} */
var thfCalendarLocales = ['pt', 'en', 'es'];
/** @type {?} */
var thfCalendarLocaleDefault = 'pt';
/**
 * \@description
 *
 * O `thf-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
 * de direcionamento e nos *labels* do ano ou mês.
 *
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * this.date = '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * this.date = '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
 * formato **Data (E8601DAw.): yyyy-mm-dd**.
 *
 * Importante:
 *
 * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
 * a data desabilitada porém o *model* não será alterado.
 * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
 */
var ThfCalendarBaseComponent = /** @class */ (function () {
    function ThfCalendarBaseComponent(thfDate, thfCalendarLangService) {
        this.thfDate = thfDate;
        this.thfCalendarLangService = thfCalendarLangService;
        this.dayVisible = false;
        this.displayMonths = Array();
        this.displayWeekDays = Array();
        this.monthVisible = false;
        this.yearVisible = false;
        this.onTouched = null;
        this.propagateChange = null;
        this.today = new Date();
        /**
         * Evento disparado ao selecionar um dia do calendário.
         */
        this.change = new EventEmitter();
    }
    Object.defineProperty(ThfCalendarBaseComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._locale;
        },
        /**
         * @optional
         *
         * @description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         *
         * @default `pt`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         *
         * \@default `pt`
         * @param {?} locale
         * @return {?}
         */
        function (locale) {
            this._locale = thfCalendarLocales.includes(locale) ? locale : thfCalendarLocaleDefault;
            this.initializeLanguage();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarBaseComponent.prototype, "maxDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a data máxima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a data máxima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         * @param {?} maxDate
         * @return {?}
         */
        function (maxDate) {
            this._maxDate = this.thfDate.getDateForDateRange(maxDate, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfCalendarBaseComponent.prototype, "minDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a data mínima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a data mínima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         * @param {?} minDate
         * @return {?}
         */
        function (minDate) {
            this._minDate = this.thfDate.getDateForDateRange(minDate, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfCalendarBaseComponent.prototype.initializeLanguage = /**
     * @return {?}
     */
    function () {
        this.thfCalendarLangService.setLanguage(this.locale);
        this.displayWeekDays = this.thfCalendarLangService.getWeekDaysArray();
        this.displayMonths = this.thfCalendarLangService.getMonthsArray();
        this.displayMonth = this.displayMonths[this.displayMonthNumber];
    };
    ThfCalendarBaseComponent.propDecorators = {
        locale: [{ type: Input, args: ['t-locale',] }],
        maxDate: [{ type: Input, args: ['t-max-date',] }],
        minDate: [{ type: Input, args: ['t-min-date',] }],
        change: [{ type: Output, args: ['t-change',] }]
    };
    return ThfCalendarBaseComponent;
}());
export { ThfCalendarBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfCalendarBaseComponent.prototype._locale;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarBaseComponent.prototype._maxDate;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarBaseComponent.prototype._minDate;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.dayVisible;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayDays;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayDecade;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayFinalDecade;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayMonth;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayMonths;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayStartDecade;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayWeekDays;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.displayYear;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.monthVisible;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.yearVisible;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.currentMonthNumber;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.currentYear;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.date;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.dateIso;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.displayMonthNumber;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.lastDisplay;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.onTouched;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.propagateChange;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.today;
    /**
     * @type {?}
     * @protected
     */
    ThfCalendarBaseComponent.prototype.validatorChange;
    /**
     * Evento disparado ao selecionar um dia do calendário.
     * @type {?}
     */
    ThfCalendarBaseComponent.prototype.change;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.thfDate;
    /** @type {?} */
    ThfCalendarBaseComponent.prototype.thfCalendarLangService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWNhbGVuZGFyLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1jYWxlbmRhci90aGYtY2FsZW5kYXItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUFLdEQsa0JBQWtCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQzs7SUFDdkMsd0JBQXdCLEdBQUcsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0NyQztJQW9IRSxrQ0FDUyxPQUF1QixFQUN2QixzQkFBOEM7UUFEOUMsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFDdkIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQWhIdkQsZUFBVSxHQUFZLEtBQUssQ0FBQztRQUs1QixrQkFBYSxHQUFlLEtBQUssRUFBRSxDQUFDO1FBRXBDLG9CQUFlLEdBQWUsS0FBSyxFQUFFLENBQUM7UUFFdEMsaUJBQVksR0FBWSxLQUFLLENBQUM7UUFDOUIsZ0JBQVcsR0FBWSxLQUFLLENBQUM7UUFRbkIsY0FBUyxHQUFRLElBQUksQ0FBQztRQUN0QixvQkFBZSxHQUFRLElBQUksQ0FBQztRQUM1QixVQUFLLEdBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQzs7OztRQXdGZixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztJQUtwRCxDQUFDO0lBNUVMLHNCQUF1Qiw0Q0FBTTs7OztRQUk3QjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDO1FBcEJEOzs7Ozs7Ozs7Ozs7O1dBYUc7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBQ0gsVUFBOEIsTUFBYztZQUMxQyxJQUFJLENBQUMsT0FBTyxHQUFHLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQztZQUN2RixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUM1QixDQUFDOzs7T0FBQTtJQTZCRCxzQkFBeUIsNkNBQU87Ozs7UUFHaEM7WUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkIsQ0FBQztRQTdCRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0F1Qkc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQUNILFVBQWlDLE9BQVk7WUFDM0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNuRSxDQUFDOzs7T0FBQTtJQTZCRCxzQkFBeUIsNkNBQU87Ozs7UUFHaEM7WUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkIsQ0FBQztRQTdCRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0F1Qkc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQUNILFVBQWlDLE9BQVk7WUFDM0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNsRSxDQUFDOzs7T0FBQTs7OztJQWFELHFEQUFrQjs7O0lBQWxCO1FBQ0UsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN0RSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNsRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDbEUsQ0FBQzs7eUJBbkZBLEtBQUssU0FBQyxVQUFVOzBCQWdDaEIsS0FBSyxTQUFDLFlBQVk7MEJBK0JsQixLQUFLLFNBQUMsWUFBWTt5QkFRbEIsTUFBTSxTQUFDLFVBQVU7O0lBY3BCLCtCQUFDO0NBQUEsQUFoSUQsSUFnSUM7U0FoSVksd0JBQXdCOzs7Ozs7SUFFbkMsMkNBQXdCOzs7OztJQUN4Qiw0Q0FBdUI7Ozs7O0lBQ3ZCLDRDQUF1Qjs7SUFFdkIsOENBQTRCOztJQUM1QiwrQ0FBMkI7O0lBQzNCLGlEQUE2Qjs7SUFDN0Isc0RBQTJCOztJQUMzQixnREFBa0I7O0lBQ2xCLGlEQUFvQzs7SUFDcEMsc0RBQTJCOztJQUMzQixtREFBc0M7O0lBQ3RDLCtDQUFvQjs7SUFDcEIsZ0RBQThCOztJQUM5QiwrQ0FBNkI7Ozs7O0lBRTdCLHNEQUFxQzs7Ozs7SUFDckMsK0NBQThCOzs7OztJQUM5Qix3Q0FBcUI7Ozs7O0lBQ3JCLDJDQUEwQjs7Ozs7SUFDMUIsc0RBQXFDOzs7OztJQUNyQywrQ0FBOEI7Ozs7O0lBQzlCLDZDQUFnQzs7Ozs7SUFDaEMsbURBQXNDOzs7OztJQUN0Qyx5Q0FBbUM7Ozs7O0lBQ25DLG1EQUErQjs7Ozs7SUF1Ri9CLDBDQUF3RDs7SUFHdEQsMkNBQThCOztJQUM5QiwwREFBcUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgVGhmQ2FsZW5kYXJMYW5nU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvdGhmLWNhbGVuZGFyLmxhbmcuc2VydmljZSc7XG5pbXBvcnQgeyBUaGZEYXRlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RoZi1kYXRlJztcblxuY29uc3QgdGhmQ2FsZW5kYXJMb2NhbGVzID0gWydwdCcsICdlbicsICdlcyddO1xuY29uc3QgdGhmQ2FsZW5kYXJMb2NhbGVEZWZhdWx0ID0gJ3B0JztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGB0aGYtY2FsZW5kYXJgIMOpIHVtIGNvbXBvbmVudGUgcGFyYSBzZWxlw6fDo28gZGUgZGF0YXMuIEVsZSBwZXJtaXRlIHVtYSBmw6FjaWwgbmF2ZWdhw6fDo28gY2xpY2FuZG8gbmFzIHNldGFzXG4gKiBkZSBkaXJlY2lvbmFtZW50byBlIG5vcyAqbGFiZWxzKiBkbyBhbm8gb3UgbcOqcy5cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgcG9kZSByZWNlYmVyIG9zIHNlZ3VpbnRlcyBmb3JtYXRvcyBkZSBkYXRhOlxuICpcbiAqIC0gKipEYXRhIGUgaG9yYSBjb21iaW5hZG9zIChFODYwMURadyk6IHl5eXktbW0tZGRUaGg6bW06c3MrfC1oaDptbSoqXG4gKiBgYGBcbiAqIHRoaXMuZGF0ZSA9ICcyMDE3LTExLTI4VDAwOjAwOjAwLTAyOjAwJztcbiAqIGBgYFxuICpcbiAqIC0gKipEYXRhIChFODYwMURBdy4pOiB5eXl5LW1tLWRkKipcbiAqIGBgYFxuICogdGhpcy5kYXRlID0gJzIwMTctMTEtMjgnO1xuICogYGBgXG4gKlxuICogLSAqKkphdmFTY3JpcHQgRGF0ZSBPYmplY3Q6KipcbiAqIGBgYFxuICogdGhpcy5kYXRlID0gbmV3IERhdGUoMjAxNywgMTAsIDI4KTtcbiAqIGBgYFxuICpcbiAqID4gSW5kZXBlbmRlbnRlbWVudGUgZG8gZm9ybWF0byB1dGlsaXphZG8sIG8gY29tcG9uZW50ZSB0cmF0YSBvIHZhbG9yIGRvICptb2RlbCogaW50ZXJuYW1lbnRlIGNvbSBvXG4gKiBmb3JtYXRvICoqRGF0YSAoRTg2MDFEQXcuKTogeXl5eS1tbS1kZCoqLlxuICpcbiAqIEltcG9ydGFudGU6XG4gKlxuICogLSBDYXNvIHNlamEgZGVmaW5pZGEgdW1hIGRhdGEgZm9yYSBkbyByYW5nZSBkYSBkYXRhIG3DrW5pbWEgZSBkYXRhIG3DoXhpbWEgdmlhICpuZ01vZGVsKiBvIGNvbXBvbmVudGUgbW9zdHJhcsOhXG4gKiBhIGRhdGEgZGVzYWJpbGl0YWRhIHBvcsOpbSBvICptb2RlbCogbsOjbyBzZXLDoSBhbHRlcmFkby5cbiAqIC0gQ2FzbyBzZWphIGRlZmluaWRhIHVtYSBkYXRhIGludsOhbGlkYSBhIG1lc21hIG7Do28gc2Vyw6EgYXRyaWJ1w61kYSBhbyBjYWxlbmTDoXJpbyBwb3LDqW0gbyAqbW9kZWwqIG1hbnRlcsOhIGEgZGF0YSBpbnbDoWxpZGEuXG4gKi9cbmV4cG9ydCBjbGFzcyBUaGZDYWxlbmRhckJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2xvY2FsZTogc3RyaW5nO1xuICBwcml2YXRlIF9tYXhEYXRlOiBEYXRlO1xuICBwcml2YXRlIF9taW5EYXRlOiBEYXRlO1xuXG4gIGRheVZpc2libGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgZGlzcGxheURheXM6IEFycmF5PG51bWJlcj47XG4gIGRpc3BsYXlEZWNhZGU6IEFycmF5PG51bWJlcj47XG4gIGRpc3BsYXlGaW5hbERlY2FkZTogbnVtYmVyO1xuICBkaXNwbGF5TW9udGg6IGFueTtcbiAgZGlzcGxheU1vbnRoczogQXJyYXk8YW55PiA9IEFycmF5KCk7XG4gIGRpc3BsYXlTdGFydERlY2FkZTogbnVtYmVyO1xuICBkaXNwbGF5V2Vla0RheXM6IEFycmF5PGFueT4gPSBBcnJheSgpO1xuICBkaXNwbGF5WWVhcjogbnVtYmVyO1xuICBtb250aFZpc2libGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgeWVhclZpc2libGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcm90ZWN0ZWQgY3VycmVudE1vbnRoTnVtYmVyOiBudW1iZXI7XG4gIHByb3RlY3RlZCBjdXJyZW50WWVhcjogbnVtYmVyO1xuICBwcm90ZWN0ZWQgZGF0ZTogRGF0ZTtcbiAgcHJvdGVjdGVkIGRhdGVJc286IHN0cmluZztcbiAgcHJvdGVjdGVkIGRpc3BsYXlNb250aE51bWJlcjogbnVtYmVyO1xuICBwcm90ZWN0ZWQgbGFzdERpc3BsYXk6IHN0cmluZztcbiAgcHJvdGVjdGVkIG9uVG91Y2hlZDogYW55ID0gbnVsbDtcbiAgcHJvdGVjdGVkIHByb3BhZ2F0ZUNoYW5nZTogYW55ID0gbnVsbDtcbiAgcHJvdGVjdGVkIHRvZGF5OiBEYXRlID0gbmV3IERhdGUoKTtcbiAgcHJvdGVjdGVkIHZhbGlkYXRvckNoYW5nZTogYW55O1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIElkaW9tYSBkbyBjYWxlbmTDoXJpby5cbiAgICpcbiAgICogVmFsb3JlcyB2w6FsaWRvczpcbiAgICogIC0gYHB0YFxuICAgKiAgLSBgZW5gXG4gICAqICAtIGBlc2BcbiAgICpcbiAgICogQGRlZmF1bHQgYHB0YFxuICAgKi9cbiAgQElucHV0KCd0LWxvY2FsZScpIHNldCBsb2NhbGUobG9jYWxlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9sb2NhbGUgPSB0aGZDYWxlbmRhckxvY2FsZXMuaW5jbHVkZXMobG9jYWxlKSA/IGxvY2FsZSA6IHRoZkNhbGVuZGFyTG9jYWxlRGVmYXVsdDtcbiAgICB0aGlzLmluaXRpYWxpemVMYW5ndWFnZSgpO1xuICB9XG4gIGdldCBsb2NhbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBhIGRhdGEgbcOheGltYSBwb3Nzw612ZWwgZGUgc2VyIHNlbGVjaW9uYWRhLlxuICAgKlxuICAgKiBQb2RlIHJlY2ViZXIgb3Mgc2VndWludGVzIGZvcm1hdG9zIGRlIGRhdGE6XG4gICAqXG4gICAqIC0gKipEYXRhIGUgaG9yYSBjb21iaW5hZG9zIChFODYwMURadyk6IHl5eXktbW0tZGRUaGg6bW06c3MrfC1oaDptbSoqXG4gICAqIGBgYFxuICAgKiB0aGlzLmRhdGUgPSAnMjAxNy0xMS0yOFQwMDowMDowMC0wMjowMCc7XG4gICAqIGBgYFxuICAgKlxuICAgKiAtICoqRGF0YSAoRTg2MDFEQXcuKTogeXl5eS1tbS1kZCoqXG4gICAqIGBgYFxuICAgKiB0aGlzLmRhdGUgPSAnMjAxNy0xMS0yOCc7XG4gICAqIGBgYFxuICAgKlxuICAgKiAtICoqSmF2YVNjcmlwdCBEYXRlIE9iamVjdDoqKlxuICAgKiBgYGBcbiAgICogdGhpcy5kYXRlID0gbmV3IERhdGUoMjAxNywgMTAsIDI4KTtcbiAgICogYGBgXG4gICAqL1xuICBASW5wdXQoJ3QtbWF4LWRhdGUnKSBzZXQgbWF4RGF0ZShtYXhEYXRlOiBhbnkpIHtcbiAgICB0aGlzLl9tYXhEYXRlID0gdGhpcy50aGZEYXRlLmdldERhdGVGb3JEYXRlUmFuZ2UobWF4RGF0ZSwgZmFsc2UpO1xuICB9XG4gIGdldCBtYXhEYXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9tYXhEYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIGEgZGF0YSBtw61uaW1hIHBvc3PDrXZlbCBkZSBzZXIgc2VsZWNpb25hZGEuXG4gICAqXG4gICAqIFBvZGUgcmVjZWJlciBvcyBzZWd1aW50ZXMgZm9ybWF0b3MgZGUgZGF0YTpcbiAgICpcbiAgICogLSAqKkRhdGEgZSBob3JhIGNvbWJpbmFkb3MgKEU4NjAxRFp3KTogeXl5eS1tbS1kZFRoaDptbTpzcyt8LWhoOm1tKipcbiAgICogYGBgXG4gICAqIHRoaXMuZGF0ZSA9ICcyMDE3LTExLTI4VDAwOjAwOjAwLTAyOjAwJztcbiAgICogYGBgXG4gICAqXG4gICAqIC0gKipEYXRhIChFODYwMURBdy4pOiB5eXl5LW1tLWRkKipcbiAgICogYGBgXG4gICAqIHRoaXMuZGF0ZSA9ICcyMDE3LTExLTI4JztcbiAgICogYGBgXG4gICAqXG4gICAqIC0gKipKYXZhU2NyaXB0IERhdGUgT2JqZWN0OioqXG4gICAqIGBgYFxuICAgKiB0aGlzLmRhdGUgPSBuZXcgRGF0ZSgyMDE3LCAxMCwgMjgpO1xuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgndC1taW4tZGF0ZScpIHNldCBtaW5EYXRlKG1pbkRhdGU6IGFueSkge1xuICAgIHRoaXMuX21pbkRhdGUgPSB0aGlzLnRoZkRhdGUuZ2V0RGF0ZUZvckRhdGVSYW5nZShtaW5EYXRlLCB0cnVlKTtcbiAgfVxuICBnZXQgbWluRGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWluRGF0ZTtcbiAgfVxuXG4gIC8qKiBFdmVudG8gZGlzcGFyYWRvIGFvIHNlbGVjaW9uYXIgdW0gZGlhIGRvIGNhbGVuZMOhcmlvLiAqL1xuICBAT3V0cHV0KCd0LWNoYW5nZScpIGNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyB0aGZEYXRlOiBUaGZEYXRlU2VydmljZSxcbiAgICBwdWJsaWMgdGhmQ2FsZW5kYXJMYW5nU2VydmljZTogVGhmQ2FsZW5kYXJMYW5nU2VydmljZVxuICApIHsgfVxuXG4gIGluaXRpYWxpemVMYW5ndWFnZSgpIHtcbiAgICB0aGlzLnRoZkNhbGVuZGFyTGFuZ1NlcnZpY2Uuc2V0TGFuZ3VhZ2UodGhpcy5sb2NhbGUpO1xuICAgIHRoaXMuZGlzcGxheVdlZWtEYXlzID0gdGhpcy50aGZDYWxlbmRhckxhbmdTZXJ2aWNlLmdldFdlZWtEYXlzQXJyYXkoKTtcbiAgICB0aGlzLmRpc3BsYXlNb250aHMgPSB0aGlzLnRoZkNhbGVuZGFyTGFuZ1NlcnZpY2UuZ2V0TW9udGhzQXJyYXkoKTtcbiAgICB0aGlzLmRpc3BsYXlNb250aCA9IHRoaXMuZGlzcGxheU1vbnRoc1t0aGlzLmRpc3BsYXlNb250aE51bWJlcl07XG4gIH1cblxufVxuIl19