/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer2 } from '@angular/core';
import { ThfPageContentBaseComponent } from './thf-page-content-base.component';
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfPageContentBaseComponent
 */
var ThfPageContentComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfPageContentComponent, _super);
    function ThfPageContentComponent(renderer) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.contentOpacity = 0;
        _this.height = '90%';
        _this.overflowY = 'none';
        _this.initializeListeners();
        return _this;
    }
    /**
     * @return {?}
     */
    ThfPageContentComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.recalculateHeaderSize();
    };
    /**
     * @return {?}
     */
    ThfPageContentComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @return {?}
     */
    ThfPageContentComponent.prototype.recalculateHeaderSize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var pageHeaderElement = document.querySelector('div.thf-page-header');
            _this.setHeightContent(pageHeaderElement);
            _this.contentOpacity = 1;
        }));
    };
    /**
     * @param {?} thfPageHeader
     * @return {?}
     */
    ThfPageContentComponent.prototype.setHeightContent = /**
     * @param {?} thfPageHeader
     * @return {?}
     */
    function (thfPageHeader) {
        /** @type {?} */
        var bodyHeight = document.body.clientHeight;
        /** @type {?} */
        var pageHeaderHeight = thfPageHeader ? thfPageHeader.offsetTop + thfPageHeader.offsetHeight : 0;
        /** @type {?} */
        var newHeight = bodyHeight - pageHeaderHeight;
        this.height = newHeight + "px";
    };
    /**
     * @private
     * @return {?}
     */
    ThfPageContentComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            _this.recalculateHeaderSize();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ThfPageContentComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        this.resizeListener();
    };
    ThfPageContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-page-content',
                    template: "<div class=\"thf-page-content\"\n  [style.height]=\"height\"\n  [style.opacity]=\"contentOpacity\"\n  [style.overflow-y]=\"overflowY\">\n  <ng-content></ng-content>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    ThfPageContentComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    return ThfPageContentComponent;
}(ThfPageContentBaseComponent));
export { ThfPageContentComponent };
if (false) {
    /** @type {?} */
    ThfPageContentComponent.prototype.contentOpacity;
    /** @type {?} */
    ThfPageContentComponent.prototype.height;
    /** @type {?} */
    ThfPageContentComponent.prototype.overflowY;
    /** @type {?} */
    ThfPageContentComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhZ2UtY29udGVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLXBhZ2UvdGhmLXBhZ2UtY29udGVudC90aGYtcGFnZS1jb250ZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFhLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7Ozs7O0FBT2hGO0lBSTZDLG1EQUEyQjtJQU10RSxpQ0FBbUIsUUFBbUI7UUFBdEMsWUFDRSxpQkFBTyxTQUVSO1FBSGtCLGNBQVEsR0FBUixRQUFRLENBQVc7UUFKdEMsb0JBQWMsR0FBVyxDQUFDLENBQUM7UUFDM0IsWUFBTSxHQUFXLEtBQUssQ0FBQztRQUN2QixlQUFTLEdBQVcsTUFBTSxDQUFDO1FBSXpCLEtBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDOztJQUM3QixDQUFDOzs7O0lBRUQsaURBQWU7OztJQUFmO1FBQ0UsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDL0IsQ0FBQzs7OztJQUVELDZDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7O0lBRUQsdURBQXFCOzs7SUFBckI7UUFBQSxpQkFPQztRQU5DLFVBQVU7OztRQUFDOztnQkFDSCxpQkFBaUIsR0FBZ0IsUUFBUSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQztZQUVwRixLQUFJLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUN6QyxLQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztRQUMxQixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsa0RBQWdCOzs7O0lBQWhCLFVBQWlCLGFBQTBCOztZQUNuQyxVQUFVLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZOztZQUN2QyxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQzs7WUFDM0YsU0FBUyxHQUFHLFVBQVUsR0FBRyxnQkFBZ0I7UUFFL0MsSUFBSSxDQUFDLE1BQU0sR0FBTSxTQUFTLE9BQUksQ0FBQztJQUNqQyxDQUFDOzs7OztJQUVPLHFEQUFtQjs7OztJQUEzQjtRQUFBLGlCQUlDO1FBSEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsUUFBUTs7O1FBQUU7WUFDN0QsS0FBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDL0IsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVPLGlEQUFlOzs7O0lBQXZCO1FBQ0UsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7O2dCQWhERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsMExBQWdEO2lCQUNqRDs7OztnQkFaNkMsU0FBUzs7SUEyRHZELDhCQUFDO0NBQUEsQUFsREQsQ0FJNkMsMkJBQTJCLEdBOEN2RTtTQTlDWSx1QkFBdUI7OztJQUVsQyxpREFBMkI7O0lBQzNCLHlDQUF1Qjs7SUFDdkIsNENBQTJCOztJQUVmLDJDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgT25EZXN0cm95LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgVGhmUGFnZUNvbnRlbnRCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi90aGYtcGFnZS1jb250ZW50LWJhc2UuY29tcG9uZW50JztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZG9jc0V4dGVuZHMgVGhmUGFnZUNvbnRlbnRCYXNlQ29tcG9uZW50XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoZi1wYWdlLWNvbnRlbnQnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGhmLXBhZ2UtY29udGVudC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgVGhmUGFnZUNvbnRlbnRDb21wb25lbnQgZXh0ZW5kcyBUaGZQYWdlQ29udGVudEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuXG4gIGNvbnRlbnRPcGFjaXR5OiBudW1iZXIgPSAwO1xuICBoZWlnaHQ6IHN0cmluZyA9ICc5MCUnO1xuICBvdmVyZmxvd1k6IHN0cmluZyA9ICdub25lJztcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pbml0aWFsaXplTGlzdGVuZXJzKCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5yZWNhbGN1bGF0ZUhlYWRlclNpemUoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XG4gIH1cblxuICByZWNhbGN1bGF0ZUhlYWRlclNpemUoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBwYWdlSGVhZGVyRWxlbWVudDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkaXYudGhmLXBhZ2UtaGVhZGVyJyk7XG5cbiAgICAgIHRoaXMuc2V0SGVpZ2h0Q29udGVudChwYWdlSGVhZGVyRWxlbWVudCk7XG4gICAgICB0aGlzLmNvbnRlbnRPcGFjaXR5ID0gMTtcbiAgICB9KTtcbiAgfVxuXG4gIHNldEhlaWdodENvbnRlbnQodGhmUGFnZUhlYWRlcjogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCBib2R5SGVpZ2h0ID0gZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQ7XG4gICAgY29uc3QgcGFnZUhlYWRlckhlaWdodCA9IHRoZlBhZ2VIZWFkZXIgPyB0aGZQYWdlSGVhZGVyLm9mZnNldFRvcCArIHRoZlBhZ2VIZWFkZXIub2Zmc2V0SGVpZ2h0IDogMDtcbiAgICBjb25zdCBuZXdIZWlnaHQgPSBib2R5SGVpZ2h0IC0gcGFnZUhlYWRlckhlaWdodDtcblxuICAgIHRoaXMuaGVpZ2h0ID0gYCR7bmV3SGVpZ2h0fXB4YDtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZUxpc3RlbmVycygpIHtcbiAgICB0aGlzLnJlc2l6ZUxpc3RlbmVyID0gdGhpcy5yZW5kZXJlci5saXN0ZW4oJ3dpbmRvdycsICdyZXNpemUnLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlY2FsY3VsYXRlSGVhZGVyU2l6ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5yZXNpemVMaXN0ZW5lcigpO1xuICB9XG5cbn1cbiJdfQ==