/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, convertToBoolean, isTypeof, thfLocaleDefault } from './../../../utils/util';
import { ThfStepperOrientation } from '../enums/thf-stepper-orientation.enum';
import { ThfStepperStatus } from '../enums/thf-stepper-status.enum';
/** @type {?} */
var thfStepperStepSizeDefault = 24;
/** @type {?} */
var thfStepperStepSizeMax = 64;
/** @type {?} */
var thfStepLiteralsDefault = {
    en: { label: 'Step' },
    es: { label: 'Paso' },
    pt: { label: 'Passo' }
};
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que representa um *step* contendo as ligações das laterais (`thf-stepper-step-bar`) e a label.
 */
var ThfStepperStepComponent = /** @class */ (function () {
    function ThfStepperStepComponent() {
        this._stepIcons = false;
        this._stepSize = thfStepperStepSizeDefault;
        this.literals = tslib_1.__assign({}, thfStepLiteralsDefault[thfLocaleDefault], thfStepLiteralsDefault[browserLanguage()]);
        // Evento que será emitido quando o status do *step* estiver ativo (`ThfStepperStatus.Active`).
        this.activated = new EventEmitter();
        // Evento que será emitido ao clicar no *step*.
        this.click = new EventEmitter();
        // Evento que será emitido ao focar no *step* e pressionar a tecla *enter*.
        this.enter = new EventEmitter();
    }
    Object.defineProperty(ThfStepperStepComponent.prototype, "label", {
        get: /**
         * @return {?}
         */
        function () {
            return this._label;
        },
        // Label do *step*.
        set: 
        // Label do *step*.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._label = isTypeof(value, 'string') ? value : this.literals.label + " " + this.circleContent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperStepComponent.prototype, "status", {
        get: /**
         * @return {?}
         */
        function () {
            return this._status;
        },
        // Define o estado de exibição.
        set: 
        // Define o estado de exibição.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._status = ((/** @type {?} */ (value))) ? value : undefined;
            if (this.status === ThfStepperStatus.Active) {
                this.activated.emit();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperStepComponent.prototype, "stepIcons", {
        get: /**
         * @return {?}
         */
        function () {
            return this._stepIcons;
        },
        set: /**
         * @param {?} stepIcons
         * @return {?}
         */
        function (stepIcons) {
            this._stepIcons = convertToBoolean(stepIcons);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperStepComponent.prototype, "stepSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._stepSize;
        },
        // Tamanho do `step` em *pixels*, possibilitando um maior destaque.
        // O valor informado deve ser entre `24` e `64`.
        set: 
        // Tamanho do `step` em *pixels*, possibilitando um maior destaque.
        // O valor informado deve ser entre `24` e `64`.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._stepSize = (value >= thfStepperStepSizeDefault && value <= thfStepperStepSizeMax) ? value : thfStepperStepSizeDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperStepComponent.prototype, "halfStepSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this.stepSize / 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperStepComponent.prototype, "isVerticalOrientation", {
        get: /**
         * @return {?}
         */
        function () {
            return this.orientation === ThfStepperOrientation.Vertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfStepperStepComponent.prototype, "marginHorizontalBar", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isVerticalOrientation ? undefined : this.halfStepSize;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} status
     * @return {?}
     */
    ThfStepperStepComponent.prototype.getStatusClass = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        switch (status) {
            case ThfStepperStatus.Active:
                return 'thf-stepper-step-active';
            case ThfStepperStatus.Disabled:
                return 'thf-stepper-step-disabled';
            case ThfStepperStatus.Done:
                return 'thf-stepper-step-done';
            case ThfStepperStatus.Error:
                return 'thf-stepper-step-error';
            default:
                return 'thf-stepper-step-default';
        }
    };
    /**
     * @return {?}
     */
    ThfStepperStepComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.status !== ThfStepperStatus.Disabled) {
            this.click.emit();
        }
    };
    /**
     * @return {?}
     */
    ThfStepperStepComponent.prototype.onEnter = /**
     * @return {?}
     */
    function () {
        if (this.status !== ThfStepperStatus.Disabled) {
            this.enter.emit();
        }
    };
    ThfStepperStepComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-stepper-step',
                    template: "<div class=\"thf-stepper-step\"\n  [ngClass]=\"getStatusClass(status)\"\n  (click)=\"onClick()\"\n  (keydown.enter)=\"onEnter()\">\n\n  <div class=\"thf-stepper-step-container\" [style.width.px]=\"isVerticalOrientation ? stepSize : undefined\">\n\n    <div\n      [class.thf-stepper-step-bar-top]=\"isVerticalOrientation\"\n      [class.thf-stepper-step-bar-left]=\"!isVerticalOrientation\"\n      [style.margin-right.px]=\"marginHorizontalBar\">\n    </div>\n\n    <thf-stepper-circle\n      [t-content]=\"circleContent\"\n      [t-icons]=\"stepIcons\"\n      [t-size]=\"stepSize\"\n      [t-status]=\"status\">\n    </thf-stepper-circle>\n\n    <div\n      [class.thf-stepper-step-bar-bottom]=\"isVerticalOrientation\"\n      [class.thf-stepper-step-bar-right]=\"!isVerticalOrientation\"\n      [style.margin-left.px]=\"marginHorizontalBar\">\n    </div>\n\n  </div>\n\n  <thf-stepper-label\n    class=\"thf-stepper-step-label-position\"\n    [t-content]=\"label\">\n  </thf-stepper-label>\n</div>\n"
                }] }
    ];
    ThfStepperStepComponent.propDecorators = {
        circleContent: [{ type: Input, args: ['t-circle-content',] }],
        label: [{ type: Input, args: ['t-label',] }],
        orientation: [{ type: Input, args: ['t-orientation',] }],
        status: [{ type: Input, args: ['t-status',] }],
        stepIcons: [{ type: Input, args: ['t-step-icons',] }],
        stepSize: [{ type: Input, args: ['t-step-size',] }],
        activated: [{ type: Output, args: ['t-activated',] }],
        click: [{ type: Output, args: ['t-click',] }],
        enter: [{ type: Output, args: ['t-enter',] }]
    };
    return ThfStepperStepComponent;
}());
export { ThfStepperStepComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfStepperStepComponent.prototype._label;
    /**
     * @type {?}
     * @private
     */
    ThfStepperStepComponent.prototype._status;
    /**
     * @type {?}
     * @private
     */
    ThfStepperStepComponent.prototype._stepIcons;
    /**
     * @type {?}
     * @private
     */
    ThfStepperStepComponent.prototype._stepSize;
    /** @type {?} */
    ThfStepperStepComponent.prototype.literals;
    /** @type {?} */
    ThfStepperStepComponent.prototype.circleContent;
    /** @type {?} */
    ThfStepperStepComponent.prototype.orientation;
    /** @type {?} */
    ThfStepperStepComponent.prototype.activated;
    /** @type {?} */
    ThfStepperStepComponent.prototype.click;
    /** @type {?} */
    ThfStepperStepComponent.prototype.enter;
}
//# sourceMappingURL=data:application/json;base64,