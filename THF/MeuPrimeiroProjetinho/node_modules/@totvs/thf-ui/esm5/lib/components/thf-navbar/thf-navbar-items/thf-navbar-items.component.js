/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { NavigationCancel, NavigationEnd, Router } from '@angular/router';
import { ThfNavbarItemComponent } from './thf-navbar-item/thf-navbar-item.component';
var ThfNavbarItemsComponent = /** @class */ (function () {
    function ThfNavbarItemsComponent(router) {
        this.router = router;
    }
    /**
     * @return {?}
     */
    ThfNavbarItemsComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.routeSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    ThfNavbarItemsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.subscribeToRoute();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfNavbarItemsComponent.prototype.selectItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.selectedItem = item;
    };
    /**
     * @private
     * @param {?} urlRouter
     * @return {?}
     */
    ThfNavbarItemsComponent.prototype.checkActiveItemByUrl = /**
     * @private
     * @param {?} urlRouter
     * @return {?}
     */
    function (urlRouter) {
        this.selectedItem = this.items.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.link === urlRouter; }));
    };
    /**
     * @private
     * @return {?}
     */
    ThfNavbarItemsComponent.prototype.checkRouterChildrenFragments = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? "/" + childrenPrimary.segments.map((/**
         * @param {?} it
         * @return {?}
         */
        function (it) { return it.path; })).join('/') : '';
    };
    /**
     * @private
     * @return {?}
     */
    ThfNavbarItemsComponent.prototype.subscribeToRoute = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.routeSubscription = this.router.events.subscribe((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val instanceof NavigationEnd || val instanceof NavigationCancel) {
                /** @type {?} */
                var urlRouter = _this.checkRouterChildrenFragments();
                _this.checkActiveItemByUrl(urlRouter);
            }
        }));
    };
    ThfNavbarItemsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-navbar-items',
                    template: "<nav>\n  <ul class=\"thf-navbar-items-container\" #navbarItemsContainer>\n    <li *ngFor=\"let item of items\"\n      class=\"thf-navbar-item\"\n      [class.thf-navbar-item-selected]=\"selectedItem === item\">\n      <thf-navbar-item\n        [t-action]=\"item.action\"\n        [t-clickable]=\"selectedItem !== item\"\n        [t-label]=\"item.label\"\n        [t-link]=\"item.link\"\n        (t-click)=\"selectItem(item)\">\n      </thf-navbar-item>\n    </li>\n  </ul>\n</nav>\n"
                }] }
    ];
    /** @nocollapse */
    ThfNavbarItemsComponent.ctorParameters = function () { return [
        { type: Router }
    ]; };
    ThfNavbarItemsComponent.propDecorators = {
        navbarItemsContainer: [{ type: ViewChild, args: ['navbarItemsContainer', { read: ElementRef, static: true },] }],
        allNavbarItems: [{ type: ViewChildren, args: [ThfNavbarItemComponent, { read: ElementRef },] }],
        items: [{ type: Input, args: ['t-items',] }]
    };
    return ThfNavbarItemsComponent;
}());
export { ThfNavbarItemsComponent };
if (false) {
    /** @type {?} */
    ThfNavbarItemsComponent.prototype.selectedItem;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarItemsComponent.prototype.routeSubscription;
    /** @type {?} */
    ThfNavbarItemsComponent.prototype.navbarItemsContainer;
    /** @type {?} */
    ThfNavbarItemsComponent.prototype.allNavbarItems;
    /** @type {?} */
    ThfNavbarItemsComponent.prototype.items;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarItemsComponent.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLW5hdmJhci1pdGVtcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLW5hdmJhci90aGYtbmF2YmFyLWl0ZW1zL3RoZi1uYXZiYXItaXRlbXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQXFCLFNBQVMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BILE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFLMUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFFckY7SUFnQkUsaUNBQW9CLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQUksQ0FBQzs7OztJQUV2Qyw2Q0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkMsQ0FBQzs7OztJQUVELDBDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7O0lBRUQsNENBQVU7Ozs7SUFBVixVQUFXLElBQW1CO1FBQzVCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7Ozs7OztJQUVPLHNEQUFvQjs7Ozs7SUFBNUIsVUFBNkIsU0FBaUI7UUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUF2QixDQUF1QixFQUFDLENBQUM7SUFDdkUsQ0FBQzs7Ozs7SUFFTyw4REFBNEI7Ozs7SUFBcEM7O1lBQ1EsZUFBZSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7UUFFdEYsT0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLE1BQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQSxFQUFFLElBQUksT0FBQSxFQUFFLENBQUMsSUFBSSxFQUFQLENBQU8sRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzVGLENBQUM7Ozs7O0lBRU8sa0RBQWdCOzs7O0lBQXhCO1FBQUEsaUJBT0M7UUFOQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsR0FBRztZQUN2RCxJQUFJLEdBQUcsWUFBWSxhQUFhLElBQUksR0FBRyxZQUFZLGdCQUFnQixFQUFFOztvQkFDN0QsU0FBUyxHQUFHLEtBQUksQ0FBQyw0QkFBNEIsRUFBRTtnQkFDckQsS0FBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3RDO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOztnQkEvQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLDhlQUFnRDtpQkFDakQ7Ozs7Z0JBVnlDLE1BQU07Ozt1Q0FpQjdDLFNBQVMsU0FBQyxzQkFBc0IsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtpQ0FFcEUsWUFBWSxTQUFDLHNCQUFzQixFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTt3QkFFekQsS0FBSyxTQUFDLFNBQVM7O0lBbUNsQiw4QkFBQztDQUFBLEFBakRELElBaURDO1NBN0NZLHVCQUF1Qjs7O0lBRWxDLCtDQUE0Qjs7Ozs7SUFFNUIsb0RBQXdDOztJQUV4Qyx1REFBd0c7O0lBRXhHLGlEQUE0Rjs7SUFFNUYsd0NBQThDOzs7OztJQUVsQyx5Q0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgUXVlcnlMaXN0LCBWaWV3Q2hpbGQsIFZpZXdDaGlsZHJlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkNhbmNlbCwgTmF2aWdhdGlvbkVuZCwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFRoZk5hdmJhckl0ZW0gfSBmcm9tICcuLi9pbnRlcmZhY2VzL3RoZi1uYXZiYXItaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGhmTmF2YmFySXRlbUNvbXBvbmVudCB9IGZyb20gJy4vdGhmLW5hdmJhci1pdGVtL3RoZi1uYXZiYXItaXRlbS5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aGYtbmF2YmFyLWl0ZW1zJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RoZi1uYXZiYXItaXRlbXMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFRoZk5hdmJhckl0ZW1zQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIHNlbGVjdGVkSXRlbTogVGhmTmF2YmFySXRlbTtcblxuICBwcml2YXRlIHJvdXRlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgQFZpZXdDaGlsZCgnbmF2YmFySXRlbXNDb250YWluZXInLCB7IHJlYWQ6IEVsZW1lbnRSZWYsIHN0YXRpYzogdHJ1ZSB9KSBuYXZiYXJJdGVtc0NvbnRhaW5lcjogRWxlbWVudFJlZjtcblxuICBAVmlld0NoaWxkcmVuKFRoZk5hdmJhckl0ZW1Db21wb25lbnQsIHsgcmVhZDogRWxlbWVudFJlZiB9KSBhbGxOYXZiYXJJdGVtczogIFF1ZXJ5TGlzdDxhbnk+O1xuXG4gIEBJbnB1dCgndC1pdGVtcycpIGl0ZW1zOiBBcnJheTxUaGZOYXZiYXJJdGVtPjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7IH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnJvdXRlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnN1YnNjcmliZVRvUm91dGUoKTtcbiAgfVxuXG4gIHNlbGVjdEl0ZW0oaXRlbTogVGhmTmF2YmFySXRlbSkge1xuICAgIHRoaXMuc2VsZWN0ZWRJdGVtID0gaXRlbTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tBY3RpdmVJdGVtQnlVcmwodXJsUm91dGVyOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IHRoaXMuaXRlbXMuZmluZChpdGVtID0+IGl0ZW0ubGluayA9PT0gdXJsUm91dGVyKTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tSb3V0ZXJDaGlsZHJlbkZyYWdtZW50cygpIHtcbiAgICBjb25zdCBjaGlsZHJlblByaW1hcnkgPSB0aGlzLnJvdXRlci5wYXJzZVVybCh0aGlzLnJvdXRlci51cmwpLnJvb3QuY2hpbGRyZW5bJ3ByaW1hcnknXTtcblxuICAgIHJldHVybiBjaGlsZHJlblByaW1hcnkgPyBgLyR7Y2hpbGRyZW5QcmltYXJ5LnNlZ21lbnRzLm1hcChpdCA9PiBpdC5wYXRoKS5qb2luKCcvJyl9YCA6ICcnO1xuICB9XG5cbiAgcHJpdmF0ZSBzdWJzY3JpYmVUb1JvdXRlKCkge1xuICAgIHRoaXMucm91dGVTdWJzY3JpcHRpb24gPSB0aGlzLnJvdXRlci5ldmVudHMuc3Vic2NyaWJlKHZhbCA9PiB7XG4gICAgICBpZiAodmFsIGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCB8fCB2YWwgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uQ2FuY2VsKSB7XG4gICAgICAgIGNvbnN0IHVybFJvdXRlciA9IHRoaXMuY2hlY2tSb3V0ZXJDaGlsZHJlbkZyYWdtZW50cygpO1xuICAgICAgICB0aGlzLmNoZWNrQWN0aXZlSXRlbUJ5VXJsKHVybFJvdXRlcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuIl19