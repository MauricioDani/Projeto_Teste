/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} required
 * @param {?} disabled
 * @param {?} value
 * @return {?}
 */
export function requiredFailed(required, disabled, value) {
    /** @type {?} */
    var valid = ((typeof value === 'string' && value) || (typeof value === 'object' && value && value.length)
        || (typeof value === 'number' && (value || value === 0)) || (typeof value === 'boolean' && value));
    return (required && !disabled && !valid);
}
/**
 * @param {?} maxlength
 * @param {?} value
 * @return {?}
 */
export function maxlengthFailed(maxlength, value) {
    /** @type {?} */
    var validMaxlength = maxlength || maxlength === 0;
    /** @type {?} */
    var validValue = (value || value === 0) && value.toString();
    return validMaxlength && validValue && validValue.length > Number(maxlength);
}
/**
 * @param {?} minlength
 * @param {?} value
 * @return {?}
 */
export function minlengthFailed(minlength, value) {
    /** @type {?} */
    var validMinlength = minlength || minlength === 0;
    /** @type {?} */
    var validValue = (value || value === 0) && value.toString();
    return validMinlength && validValue && validValue.length < Number(minlength);
}
/**
 * @param {?} pattern
 * @param {?} value
 * @return {?}
 */
export function patternFailed(pattern, value) {
    /** @type {?} */
    var reg;
    try {
        reg = new RegExp(pattern);
    }
    catch (e) {
        return true;
    }
    return (pattern && value && !reg.test(value));
}
/**
 * @param {?} min
 * @param {?} value
 * @return {?}
 */
export function minFailed(min, value) {
    /** @type {?} */
    var validValue = value || value === 0;
    /** @type {?} */
    var validMin = min || min === 0;
    return validValue && validMin && value < min;
}
/**
 * @param {?} max
 * @param {?} value
 * @return {?}
 */
export function maxFailed(max, value) {
    /** @type {?} */
    var validValue = value || value === 0;
    /** @type {?} */
    var validMax = max || max === 0;
    return validValue && validMax && value > max;
}
/**
 * @param {?} value
 * @return {?}
 */
export function dateFailed(value) {
    return (value && isNaN(Date.parse(value)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtZmllbGQvdmFsaWRhdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ0EsTUFBTSxVQUFVLGNBQWMsQ0FBQyxRQUFpQixFQUFFLFFBQWlCLEVBQUUsS0FBNkM7O1FBQzFHLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDO1dBQzFGLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxDQUFDO0lBQ2hILE9BQU8sQ0FBQyxRQUFRLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQyxDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLFNBQWlCLEVBQUUsS0FBc0I7O1FBQ2pFLGNBQWMsR0FBRyxTQUFTLElBQUksU0FBUyxLQUFLLENBQUM7O1FBQzdDLFVBQVUsR0FBRyxDQUFDLEtBQUssSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtJQUM3RCxPQUFPLGNBQWMsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0UsQ0FBQzs7Ozs7O0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxTQUFpQixFQUFFLEtBQXNCOztRQUNqRSxjQUFjLEdBQUcsU0FBUyxJQUFJLFNBQVMsS0FBSyxDQUFDOztRQUM3QyxVQUFVLEdBQUcsQ0FBQyxLQUFLLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7SUFDN0QsT0FBTyxjQUFjLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9FLENBQUM7Ozs7OztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsT0FBZSxFQUFFLEtBQWE7O1FBQ3RELEdBQUc7SUFDUCxJQUFJO1FBQ0YsR0FBRyxHQUFHLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzNCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsT0FBTyxDQUFDLE9BQU8sSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEQsQ0FBQzs7Ozs7O0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxHQUFXLEVBQUUsS0FBYTs7UUFDNUMsVUFBVSxHQUFHLEtBQUssSUFBSSxLQUFLLEtBQUssQ0FBQzs7UUFDakMsUUFBUSxHQUFHLEdBQUcsSUFBSSxHQUFHLEtBQUssQ0FBQztJQUNqQyxPQUFPLFVBQVUsSUFBSSxRQUFRLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUMvQyxDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEdBQVcsRUFBRSxLQUFhOztRQUM1QyxVQUFVLEdBQUcsS0FBSyxJQUFJLEtBQUssS0FBSyxDQUFDOztRQUNqQyxRQUFRLEdBQUcsR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQ2pDLE9BQU8sVUFBVSxJQUFJLFFBQVEsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQy9DLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxLQUFhO0lBQ3RDLE9BQU8sQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlZEZhaWxlZChyZXF1aXJlZDogYm9vbGVhbiwgZGlzYWJsZWQ6IGJvb2xlYW4sIHZhbHVlOiBzdHJpbmcgfCBBcnJheTxhbnk+IHwgbnVtYmVyIHwgYm9vbGVhbikge1xuICBjb25zdCB2YWxpZCA9ICgodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSkgfHwgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHx8ICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkpIHx8ICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyAmJiB2YWx1ZSkpO1xuICByZXR1cm4gKHJlcXVpcmVkICYmICFkaXNhYmxlZCAmJiAhdmFsaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF4bGVuZ3RoRmFpbGVkKG1heGxlbmd0aDogbnVtYmVyLCB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XG4gIGNvbnN0IHZhbGlkTWF4bGVuZ3RoID0gbWF4bGVuZ3RoIHx8IG1heGxlbmd0aCA9PT0gMDtcbiAgY29uc3QgdmFsaWRWYWx1ZSA9ICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkgJiYgdmFsdWUudG9TdHJpbmcoKTtcbiAgcmV0dXJuIHZhbGlkTWF4bGVuZ3RoICYmIHZhbGlkVmFsdWUgJiYgdmFsaWRWYWx1ZS5sZW5ndGggPiBOdW1iZXIobWF4bGVuZ3RoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1pbmxlbmd0aEZhaWxlZChtaW5sZW5ndGg6IG51bWJlciwgdmFsdWU6IHN0cmluZyB8IG51bWJlcikge1xuICBjb25zdCB2YWxpZE1pbmxlbmd0aCA9IG1pbmxlbmd0aCB8fCBtaW5sZW5ndGggPT09IDA7XG4gIGNvbnN0IHZhbGlkVmFsdWUgPSAodmFsdWUgfHwgdmFsdWUgPT09IDApICYmIHZhbHVlLnRvU3RyaW5nKCk7XG4gIHJldHVybiB2YWxpZE1pbmxlbmd0aCAmJiB2YWxpZFZhbHVlICYmIHZhbGlkVmFsdWUubGVuZ3RoIDwgTnVtYmVyKG1pbmxlbmd0aCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXR0ZXJuRmFpbGVkKHBhdHRlcm46IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xuICBsZXQgcmVnO1xuICB0cnkge1xuICAgIHJlZyA9IG5ldyBSZWdFeHAocGF0dGVybik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gKHBhdHRlcm4gJiYgdmFsdWUgJiYgIXJlZy50ZXN0KHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtaW5GYWlsZWQobWluOiBudW1iZXIsIHZhbHVlOiBudW1iZXIpIHtcbiAgY29uc3QgdmFsaWRWYWx1ZSA9IHZhbHVlIHx8IHZhbHVlID09PSAwO1xuICBjb25zdCB2YWxpZE1pbiA9IG1pbiB8fCBtaW4gPT09IDA7XG4gIHJldHVybiB2YWxpZFZhbHVlICYmIHZhbGlkTWluICYmIHZhbHVlIDwgbWluO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF4RmFpbGVkKG1heDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKSB7XG4gIGNvbnN0IHZhbGlkVmFsdWUgPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gMDtcbiAgY29uc3QgdmFsaWRNYXggPSBtYXggfHwgbWF4ID09PSAwO1xuICByZXR1cm4gdmFsaWRWYWx1ZSAmJiB2YWxpZE1heCAmJiB2YWx1ZSA+IG1heDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGVGYWlsZWQodmFsdWU6IHN0cmluZykge1xuICByZXR1cm4gKHZhbHVlICYmIGlzTmFOKERhdGUucGFyc2UodmFsdWUpKSk7XG59XG4iXX0=