/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectorRef, Component, ContentChild, IterableDiffers, ViewChild } from '@angular/core';
import { isTypeof } from '../../utils/util';
import { ThfPopupComponent } from '../thf-popup/thf-popup.component';
import { ThfListViewBaseComponent } from './thf-list-view-base.component';
import { ThfListViewContentTemplateDirective } from './thf-list-view-content-template/thf-list-view-content-template.directive';
import { ThfListViewDetailTemplateDirective } from './thf-list-view-detail-template/thf-list-view-detail-template.directive';
/**
 * \@docsExtends ThfListViewBaseComponent
 *
 * \@example
 *
 * <example name="thf-list-view-basic" title="Totvs List View Basic">
 *  <file name="sample-thf-list-view-basic/sample-thf-list-view-basic.component.html"> </file>
 *  <file name="sample-thf-list-view-basic/sample-thf-list-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-list-view-labs" title="Totvs List View Labs">
 *  <file name="sample-thf-list-view-labs/sample-thf-list-view-labs.component.html"> </file>
 *  <file name="sample-thf-list-view-labs/sample-thf-list-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-list-view-hiring-processes" title="Totvs List View - Hiring Processes">
 *  <file name="sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.component.html"> </file>
 *  <file name="sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.component.ts"> </file>
 *  <file name="sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.service.ts"> </file>
 * </example>
 */
var ThfListViewComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfListViewComponent, _super);
    function ThfListViewComponent(changeDetector, differs) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    Object.defineProperty(ThfListViewComponent.prototype, "hasContentTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.listViewContentTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "hasDetailTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.listViewDetailTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "displayShowMoreButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this.items && this.items.length > 0 && this.showMore.observers.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "showButtonsActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleActions && this.visibleActions.length > 0 && this.visibleActions.length <= 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "showPopupActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleActions && this.visibleActions.length > 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "titleHasAction", {
        get: /**
         * @return {?}
         */
        function () {
            return this.titleAction.observers.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfListViewComponent.prototype, "visibleActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.actions && this.actions.filter((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.visible !== false; }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfListViewComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.initShowDetail();
    };
    /**
     * @return {?}
     */
    ThfListViewComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.checkItemsChange();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfListViewComponent.prototype.checkTitleType = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.propertyLink && item[this.propertyLink]) {
            return item[this.propertyLink].startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ThfListViewComponent.prototype.getItemTitle = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.hasContentTemplate && this.listViewContentTemplate.title ?
            this.listViewContentTemplate.title(item) : item[this.propertyTitle];
    };
    /**
     * @return {?}
     */
    ThfListViewComponent.prototype.hasItems = /**
     * @return {?}
     */
    function () {
        return this.items && this.items.length > 0;
    };
    /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    ThfListViewComponent.prototype.returnBooleanValue = /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    function (listViewAction, item) {
        return isTypeof(listViewAction.disabled, 'function') ? ((/** @type {?} */ (listViewAction))).disabled(item) : listViewAction.disabled;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ThfListViewComponent.prototype.trackBy = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    /**
     * @param {?} item
     * @param {?} targetRef
     * @return {?}
     */
    ThfListViewComponent.prototype.togglePopup = /**
     * @param {?} item
     * @param {?} targetRef
     * @return {?}
     */
    function (item, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.thfPopupComponent.toggle(item);
    };
    /**
     * @private
     * @return {?}
     */
    ThfListViewComponent.prototype.checkItemsChange = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && this.items && this.items.length && this.select && !this.hideSelectAll) {
            this.showHeader = true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfListViewComponent.prototype.initShowDetail = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.items && this.items.length > 0 && this.hasDetailTemplate && this.listViewDetailTemplate.showDetail) {
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.$showDetail = _this.listViewDetailTemplate.showDetail(item); }));
        }
    };
    ThfListViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-list-view',
                    template: "\n<div\n  [class.thf-list-view-main-container-header]=\"showHeader\"\n  [class.thf-list-view-main-container]=\"!showHeader\"\n  [style.height.px]=\"height\">\n\n  <div *ngIf=\"showHeader\" class=\"thf-list-view-main-header\">\n    <div class=\"thf-checkbox-group-item\">\n      <div class=\"thf-list-view-main-select\">\n        <input class=\"thf-input thf-checkbox-group-input\" type=\"checkbox\"\n          [class.thf-checkbox-group-input-checked]=\"selectAll\"\n          [class.thf-checkbox-group-input-indeterminate]=\"selectAll === null\">\n        <label\n          class=\"thf-checkbox-group-label thf-clickable\"\n          (click)=\"selectAllListItems()\">\n          {{ literals.selectAll }}\n        </label>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"thf-list-view-main-content\">\n    <div class=\"thf-list-view\" *ngIf=\"!hasItems()\">\n      <div class=\"thf-list-view-container-no-data thf-text-center\">\n        <span> {{ literals.noData }} </span>\n      </div>\n    </div>\n\n    <ng-container *ngFor=\"let item of items; let index = index; trackBy: trackBy\">\n      <div class=\"thf-list-view\">\n        <div class=\"thf-list-view-container\">\n          <div class=\"thf-list-view-header\">\n            <div class=\"thf-list-view-title\" [ngSwitch]=\"checkTitleType(item)\">\n              <div *ngIf=\"select\" class=\"thf-list-view-select\">\n                <input class=\"thf-input thf-checkbox-group-input\" type=\"checkbox\"\n                  [class.thf-checkbox-group-input-checked]=\"item.$selected\">\n                <label class=\"thf-checkbox-group-label thf-clickable\" (click)=\"selectListItem(item)\"></label>\n              </div>\n              <a *ngSwitchCase=\"'externalLink'\"\n                class=\"thf-list-view-title-link\"\n                target=\"_blank\"\n                [href]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\">\n                {{ getItemTitle(item) }}\n              </a>\n              <a *ngSwitchCase=\"'internalLink'\"\n                class=\"thf-list-view-title-link\"\n                [routerLink]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\">\n                {{ getItemTitle(item) }}\n              </a>\n              <span *ngSwitchCase=\"'noLink'\"\n                class=\"thf-list-view-title-no-link\"\n                [class.thf-list-view-title-link]=\"titleHasAction\"\n                (click)=\"titleHasAction && runTitleAction(item)\">\n                {{ getItemTitle(item) }}\n              </span>\n            </div>\n\n            <div *ngIf=\"showButtonsActions\" class=\"thf-list-view-actions\">\n              <thf-button *ngFor=\"let action of visibleActions\"\n                t-small=\"true\"\n                [t-disabled]=\"returnBooleanValue(action, item)\"\n                [t-icon]=\"action.icon\"\n                [t-label]=\"action.label\"\n                [t-type]=\"action.type\"\n                (t-click)=\"onClickAction(action, item)\">\n              </thf-button>\n            </div>\n\n            <div *ngIf=\"showPopupActions\" class=\"thf-list-view-more-actions\">\n              <span #popupTarget\n                class=\"thf-icon thf-icon-more thf-list-view-more-icon thf-clickable\"\n                (click)=\"togglePopup(item, popupTarget)\">\n              </span>\n            </div>\n\n          </div>\n\n          <div *ngIf=\"hasContentTemplate\" class=\"thf-list-view-content\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewContentTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\">\n            </ng-template>\n          </div>\n\n          <div @showHideDetail *ngIf=\"hasDetailTemplate && item.$showDetail\" class=\"thf-list-view-detail\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewDetailTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\">\n            </ng-template>\n          </div>\n        </div>\n\n        <div *ngIf=\"hasDetailTemplate\" class=\"thf-list-view-detail-button\">\n          <span class=\"thf-clickable\" (click)=\"item.$showDetail = !item.$showDetail\">\n            {{ item.$showDetail ? literals.hideDetails : literals.showDetails }}\n          </span>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n\n<div *ngIf=\"displayShowMoreButton\" class=\"thf-mb-2 thf-text-center\">\n  <thf-button\n    [t-disabled]=\"showMoreDisabled\"\n    [t-label]=\"literals.loadMoreData\"\n    (t-click)=\"onShowMore()\">\n  </thf-button>\n</div>\n\n<thf-popup #popup [t-actions]=\"actions\" [t-target]=\"popupTarget\">\n</thf-popup>\n",
                    animations: [
                        trigger('showHideDetail', [
                            state('*', style({ 'overflow-y': 'visible' })),
                            state('void', style({ 'overflow-y': 'hidden' })),
                            transition('* => void', [
                                style({ height: '*', 'overflow-y': 'hidden' }),
                                animate(100, style({ height: 0 }))
                            ]),
                            transition('void => *', [
                                style({ height: '0' }),
                                animate(100, style({ height: '*' }))
                            ])
                        ])
                    ]
                }] }
    ];
    /** @nocollapse */
    ThfListViewComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: IterableDiffers }
    ]; };
    ThfListViewComponent.propDecorators = {
        listViewContentTemplate: [{ type: ContentChild, args: [ThfListViewContentTemplateDirective, { static: true },] }],
        listViewDetailTemplate: [{ type: ContentChild, args: [ThfListViewDetailTemplateDirective, { static: true },] }],
        thfPopupComponent: [{ type: ViewChild, args: ['popup', { static: true },] }]
    };
    return ThfListViewComponent;
}(ThfListViewBaseComponent));
export { ThfListViewComponent };
if (false) {
    /** @type {?} */
    ThfListViewComponent.prototype.listViewContentTemplate;
    /** @type {?} */
    ThfListViewComponent.prototype.listViewDetailTemplate;
    /** @type {?} */
    ThfListViewComponent.prototype.thfPopupComponent;
    /**
     * @type {?}
     * @private
     */
    ThfListViewComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    ThfListViewComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,