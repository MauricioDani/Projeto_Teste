/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço padrão utilizado para filtrar os dados do componente thf-combo.
 */
var ThfComboFilterService = /** @class */ (function () {
    function ThfComboFilterService(http) {
        this.http = http;
        this.fieldLabel = 'label';
        this.fieldValue = 'value';
    }
    Object.defineProperty(ThfComboFilterService.prototype, "url", {
        get: /**
         * @return {?}
         */
        function () { return this._url; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} param
     * @param {?=} filterParams
     * @return {?}
     */
    ThfComboFilterService.prototype.getFilteredData = /**
     * @param {?} param
     * @param {?=} filterParams
     * @return {?}
     */
    function (param, filterParams) {
        var _this = this;
        /** @type {?} */
        var value = param.value;
        /** @type {?} */
        var params = new HttpParams({
            fromString: "filter=" + value
        });
        return this.http.get("" + this.url, { responseType: 'json', params: params })
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return _this.parseToArrayComboOption(response.items); })));
    };
    /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    ThfComboFilterService.prototype.getObjectByValue = /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    function (value, filterParams) {
        var _this = this;
        return this.http.get(this.url + "/" + value).pipe(map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return _this.parseToComboOption(item); })));
    };
    /**
     * @param {?} url
     * @param {?} fieldLabel
     * @param {?} fieldValue
     * @return {?}
     */
    ThfComboFilterService.prototype.configProperties = /**
     * @param {?} url
     * @param {?} fieldLabel
     * @param {?} fieldValue
     * @return {?}
     */
    function (url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    };
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    ThfComboFilterService.prototype.parseToArrayComboOption = /**
     * @private
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var _this = this;
        if (items && items.length > 0) {
            return items.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return _this.parseToComboOption(item);
            }));
        }
        return [];
    };
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    ThfComboFilterService.prototype.parseToComboOption = /**
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item && item[this.fieldValue]) {
            /** @type {?} */
            var label = item[this.fieldLabel];
            /** @type {?} */
            var value = item[this.fieldValue];
            return { label: label, value: value };
        }
    };
    ThfComboFilterService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ThfComboFilterService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return ThfComboFilterService;
}());
export { ThfComboFilterService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfComboFilterService.prototype._url;
    /** @type {?} */
    ThfComboFilterService.prototype.fieldLabel;
    /** @type {?} */
    ThfComboFilterService.prototype.fieldValue;
    /**
     * @type {?}
     * @private
     */
    ThfComboFilterService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWNvbWJvLWZpbHRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1maWVsZC90aGYtY29tYm8vdGhmLWNvbWJvLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7OztBQWFyQztJQVVFLCtCQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBTHBDLGVBQVUsR0FBVyxPQUFPLENBQUM7UUFDN0IsZUFBVSxHQUFXLE9BQU8sQ0FBQztJQUlXLENBQUM7SUFGekMsc0JBQUksc0NBQUc7Ozs7UUFBUCxjQUFvQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTs7Ozs7O0lBSXZDLCtDQUFlOzs7OztJQUFmLFVBQWdCLEtBQVUsRUFBRSxZQUFrQjtRQUE5QyxpQkFTQzs7WUFSTyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUs7O1lBRW5CLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQztZQUM1QixVQUFVLEVBQUUsWUFBVSxLQUFPO1NBQzlCLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUcsSUFBSSxDQUFDLEdBQUssRUFBRSxFQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxDQUFDO2FBQ3hFLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQyxRQUFxQixJQUFLLE9BQUEsS0FBSSxDQUFDLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBNUMsQ0FBNEMsRUFBQyxDQUFDLENBQUM7SUFDeEYsQ0FBQzs7Ozs7O0lBRUQsZ0RBQWdCOzs7OztJQUFoQixVQUFpQixLQUFzQixFQUFFLFlBQWtCO1FBQTNELGlCQUVDO1FBREMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsR0FBRyxTQUFJLEtBQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxLQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQTdCLENBQTZCLEVBQUMsQ0FBQyxDQUFDO0lBQ2hHLENBQUM7Ozs7Ozs7SUFFRCxnREFBZ0I7Ozs7OztJQUFoQixVQUFpQixHQUFXLEVBQUUsVUFBa0IsRUFBRSxVQUFrQjtRQUNsRSxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUMvQixDQUFDOzs7Ozs7SUFFTyx1REFBdUI7Ozs7O0lBQS9CLFVBQWdDLEtBQWlCO1FBQWpELGlCQVVDO1FBVEMsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFFN0IsT0FBTyxLQUFLLENBQUMsR0FBRzs7OztZQUFDLFVBQUEsSUFBSTtnQkFDbkIsT0FBTyxLQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkMsQ0FBQyxFQUFDLENBQUM7U0FFSjtRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQzs7Ozs7O0lBRU8sa0RBQWtCOzs7OztJQUExQixVQUEyQixJQUFTO1FBQ2xDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7O2dCQUUzQixLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7O2dCQUM3QixLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7WUFFbkMsT0FBTyxFQUFFLEtBQUssT0FBQSxFQUFFLEtBQUssT0FBQSxFQUFFLENBQUM7U0FDekI7SUFDSCxDQUFDOztnQkFyREYsVUFBVTs7OztnQkFqQkYsVUFBVTs7SUF3RW5CLDRCQUFDO0NBQUEsQUF2REQsSUF1REM7U0F0RFkscUJBQXFCOzs7Ozs7SUFFaEMscUNBQXFCOztJQUVyQiwyQ0FBNkI7O0lBQzdCLDJDQUE2Qjs7Ozs7SUFJakIscUNBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBUaGZDb21ib0ZpbHRlciB9IGZyb20gJy4vaW50ZXJmYWNlcy90aGYtY29tYm8tZmlsdGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaGZDb21ib09wdGlvbiB9IGZyb20gJy4vaW50ZXJmYWNlcy90aGYtY29tYm8tb3B0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaGZSZXNwb25zZSB9IGZyb20gJy4vaW50ZXJmYWNlcy90aGYtcmVzcG9uc2UuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXJ2acOnbyBwYWRyw6NvIHV0aWxpemFkbyBwYXJhIGZpbHRyYXIgb3MgZGFkb3MgZG8gY29tcG9uZW50ZSB0aGYtY29tYm8uXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUaGZDb21ib0ZpbHRlclNlcnZpY2UgaW1wbGVtZW50cyBUaGZDb21ib0ZpbHRlciB7XG5cbiAgcHJpdmF0ZSBfdXJsOiBzdHJpbmc7XG5cbiAgZmllbGRMYWJlbDogc3RyaW5nID0gJ2xhYmVsJztcbiAgZmllbGRWYWx1ZTogc3RyaW5nID0gJ3ZhbHVlJztcblxuICBnZXQgdXJsKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLl91cmw7IH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxuXG4gIGdldEZpbHRlcmVkRGF0YShwYXJhbTogYW55LCBmaWx0ZXJQYXJhbXM/OiBhbnkpOiBPYnNlcnZhYmxlPEFycmF5PFRoZkNvbWJvT3B0aW9uPj4ge1xuICAgIGNvbnN0IHZhbHVlID0gcGFyYW0udmFsdWU7XG5cbiAgICBjb25zdCBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcyh7XG4gICAgICBmcm9tU3RyaW5nOiBgZmlsdGVyPSR7dmFsdWV9YFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7dGhpcy51cmx9YCwge3Jlc3BvbnNlVHlwZTogJ2pzb24nLCBwYXJhbXM6IHBhcmFtc30pXG4gICAgICAucGlwZShtYXAoKHJlc3BvbnNlOiBUaGZSZXNwb25zZSkgPT4gdGhpcy5wYXJzZVRvQXJyYXlDb21ib09wdGlvbihyZXNwb25zZS5pdGVtcykpKTtcbiAgfVxuXG4gIGdldE9iamVjdEJ5VmFsdWUodmFsdWU6IHN0cmluZyB8IG51bWJlciwgZmlsdGVyUGFyYW1zPzogYW55KTogT2JzZXJ2YWJsZTxUaGZDb21ib09wdGlvbj4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGAke3RoaXMudXJsfS8ke3ZhbHVlfWApLnBpcGUobWFwKGl0ZW0gPT4gdGhpcy5wYXJzZVRvQ29tYm9PcHRpb24oaXRlbSkpKTtcbiAgfVxuXG4gIGNvbmZpZ1Byb3BlcnRpZXModXJsOiBzdHJpbmcsIGZpZWxkTGFiZWw6IHN0cmluZywgZmllbGRWYWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdXJsID0gdXJsO1xuICAgIHRoaXMuZmllbGRMYWJlbCA9IGZpZWxkTGFiZWw7XG4gICAgdGhpcy5maWVsZFZhbHVlID0gZmllbGRWYWx1ZTtcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VUb0FycmF5Q29tYm9PcHRpb24oaXRlbXM6IEFycmF5PGFueT4pOiBBcnJheTxUaGZDb21ib09wdGlvbj4ge1xuICAgIGlmIChpdGVtcyAmJiBpdGVtcy5sZW5ndGggPiAwKSB7XG5cbiAgICAgIHJldHVybiBpdGVtcy5tYXAoaXRlbSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVG9Db21ib09wdGlvbihpdGVtKTtcbiAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZVRvQ29tYm9PcHRpb24oaXRlbTogYW55KTogVGhmQ29tYm9PcHRpb24ge1xuICAgIGlmIChpdGVtICYmIGl0ZW1bdGhpcy5maWVsZFZhbHVlXSkge1xuXG4gICAgICBjb25zdCBsYWJlbCA9IGl0ZW1bdGhpcy5maWVsZExhYmVsXTtcbiAgICAgIGNvbnN0IHZhbHVlID0gaXRlbVt0aGlzLmZpZWxkVmFsdWVdO1xuXG4gICAgICByZXR1cm4geyBsYWJlbCwgdmFsdWUgfTtcbiAgICB9XG4gIH1cblxufVxuIl19