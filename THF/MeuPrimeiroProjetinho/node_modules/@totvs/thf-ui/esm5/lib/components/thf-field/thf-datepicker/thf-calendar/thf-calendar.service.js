/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { setYearFrom0To100 } from '../../../../utils/util';
var ThfCalendarService = /** @class */ (function () {
    function ThfCalendarService() {
        this.firstWeekDay = 0; // 0 = sunday
    }
    /**
     * @param {?} date
     * @return {?}
     */
    ThfCalendarService.prototype.weekStartDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var startDate = new Date(date.getTime());
        while (startDate.getDay() !== this.firstWeekDay) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    ThfCalendarService.prototype.monthDates = /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    function (year, month, dayFormatter, weekFormatter) {
        if (dayFormatter === void 0) { dayFormatter = null; }
        if (weekFormatter === void 0) { weekFormatter = null; }
        if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
            throw Error(('month must be a number (Jan is 0)'));
        }
        /** @type {?} */
        var weeks = [];
        /** @type {?} */
        var week = [];
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var date = new Date(year, month, 1);
        setYearFrom0To100(date, year);
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while ((date.getMonth() <= month) && (date.getFullYear() === year));
        return weeks;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    ThfCalendarService.prototype.monthDays = /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        /** @type {?} */
        var getDayOrZero = (/**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return date.getMonth() === month ? date : 0;
        });
        return this.monthDates(year, month, getDayOrZero);
    };
    ThfCalendarService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ThfCalendarService.ctorParameters = function () { return []; };
    return ThfCalendarService;
}());
export { ThfCalendarService };
if (false) {
    /** @type {?} */
    ThfCalendarService.prototype.firstWeekDay;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWNhbGVuZGFyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLWZpZWxkL3RoZi1kYXRlcGlja2VyL3RoZi1jYWxlbmRhci90aGYtY2FsZW5kYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUUzRDtJQUlFO1FBQ0UsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQyxhQUFhO0lBQ3RDLENBQUM7Ozs7O0lBRUQsMENBQWE7Ozs7SUFBYixVQUFjLElBQVM7O1lBQ2YsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxQyxPQUFPLFNBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQy9DLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQzs7Ozs7Ozs7SUFFRCx1Q0FBVTs7Ozs7OztJQUFWLFVBQVcsSUFBUyxFQUFFLEtBQVUsRUFBRSxZQUF3QixFQUFFLGFBQXlCO1FBQW5ELDZCQUFBLEVBQUEsbUJBQXdCO1FBQUUsOEJBQUEsRUFBQSxvQkFBeUI7UUFDbkYsSUFBSSxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxFQUFFO1lBQzlELE1BQU0sS0FBSyxDQUFDLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO1NBQ3BEOztZQUVLLEtBQUssR0FBZSxFQUFFOztZQUN4QixJQUFJLEdBQWUsRUFBRTs7WUFDckIsQ0FBQyxHQUFHLENBQUM7O1lBQ0wsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5QixJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoQyxHQUFHO1lBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ2xDO1lBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkQsSUFBSSxHQUFHLEVBQUUsQ0FBQztTQUNYLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssSUFBSSxDQUFDLEVBQUU7UUFDdEUsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7Ozs7SUFFRCxzQ0FBUzs7Ozs7SUFBVCxVQUFVLElBQVMsRUFBRSxLQUFVOztZQUN2QixZQUFZOzs7O1FBQUcsVUFBUyxJQUFTO1lBQ3JDLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFBO1FBQ0QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDcEQsQ0FBQzs7Z0JBN0NGLFVBQVU7Ozs7SUE4Q1gseUJBQUM7Q0FBQSxBQTlDRCxJQThDQztTQTdDWSxrQkFBa0I7OztJQUM3QiwwQ0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHNldFllYXJGcm9tMFRvMTAwIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUaGZDYWxlbmRhclNlcnZpY2Uge1xuICBmaXJzdFdlZWtEYXk6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmZpcnN0V2Vla0RheSA9IDA7IC8vIDAgPSBzdW5kYXlcbiAgfVxuXG4gIHdlZWtTdGFydERhdGUoZGF0ZTogYW55KSB7XG4gICAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICAgIHdoaWxlIChzdGFydERhdGUuZ2V0RGF5KCkgIT09IHRoaXMuZmlyc3RXZWVrRGF5KSB7XG4gICAgICBzdGFydERhdGUuc2V0RGF0ZShzdGFydERhdGUuZ2V0RGF0ZSgpIC0gMSk7XG4gICAgfVxuICAgIHJldHVybiBzdGFydERhdGU7XG4gIH1cblxuICBtb250aERhdGVzKHllYXI6IGFueSwgbW9udGg6IGFueSwgZGF5Rm9ybWF0dGVyOiBhbnkgPSBudWxsLCB3ZWVrRm9ybWF0dGVyOiBhbnkgPSBudWxsKSB7XG4gICAgaWYgKCh0eXBlb2YgbW9udGggIT09ICdudW1iZXInKSB8fCAobW9udGggPCAwKSB8fCAobW9udGggPiAxMSkpIHtcbiAgICAgIHRocm93IEVycm9yKCgnbW9udGggbXVzdCBiZSBhIG51bWJlciAoSmFuIGlzIDApJykpO1xuICAgIH1cblxuICAgIGNvbnN0IHdlZWtzOiBBcnJheTxhbnk+ID0gW107XG4gICAgbGV0IHdlZWs6IEFycmF5PGFueT4gPSBbXTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSk7XG4gICAgc2V0WWVhckZyb20wVG8xMDAoZGF0ZSwgeWVhcik7XG4gICAgZGF0ZSA9IHRoaXMud2Vla1N0YXJ0RGF0ZShkYXRlKTtcblxuICAgIGRvIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgd2Vlay5wdXNoKGRheUZvcm1hdHRlciA/IGRheUZvcm1hdHRlcihkYXRlKSA6IGRhdGUpO1xuICAgICAgICBkYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAxKTtcbiAgICAgIH1cbiAgICAgIHdlZWtzLnB1c2god2Vla0Zvcm1hdHRlciA/IHdlZWtGb3JtYXR0ZXIod2VlaykgOiB3ZWVrKTtcbiAgICAgIHdlZWsgPSBbXTtcbiAgICB9IHdoaWxlICgoZGF0ZS5nZXRNb250aCgpIDw9IG1vbnRoKSAmJiAoZGF0ZS5nZXRGdWxsWWVhcigpID09PSB5ZWFyKSk7XG4gICAgcmV0dXJuIHdlZWtzO1xuICB9XG5cbiAgbW9udGhEYXlzKHllYXI6IGFueSwgbW9udGg6IGFueSkge1xuICAgIGNvbnN0IGdldERheU9yWmVybyA9IGZ1bmN0aW9uKGRhdGU6IGFueSkge1xuICAgICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKSA9PT0gbW9udGggPyBkYXRlIDogMDtcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLm1vbnRoRGF0ZXMoeWVhciwgbW9udGgsIGdldERheU9yWmVybyk7XG4gIH1cbn1cbiJdfQ==