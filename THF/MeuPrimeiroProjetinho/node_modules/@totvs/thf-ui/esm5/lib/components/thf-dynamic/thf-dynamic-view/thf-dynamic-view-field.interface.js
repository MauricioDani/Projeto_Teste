/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfDynamicViewComponent
 *
 * \@docsExtends ThfDynamicField
 *
 * \@description
 *
 * Interface para definição das propriedades dos campos de visualização que serão criados dinamicamente.
 * @record
 */
export function ThfDynamicViewField() { }
if (false) {
    /**
     * Indica se o campo será um `thf-tag`.
     *
     * \@default `false`
     * @type {?|undefined}
     */
    ThfDynamicViewField.prototype.tag;
    /**
     * Formato de exibição do valor do campo.
     *
     * Aplicado para casos específicos de acordo com o tipo do campo.
     *
     * **types**:
     * - `currency`: Aceita valores definidos para a propriedade `currencyCode` do
     *  [**CurrencyPipe**](https://angular.io/api/common/CurrencyPipe)
     * + Exemplos: 'BRL', 'USD'.
     * - `date`: Aceita valores definidos para a propriedade `format` do [**DatePipe**](https://angular.io/api/common/DatePipe)
     * e também aceita os caracteres de dia(dd), mês(MM ou mm) e ano (yyyy ou yy),
     * caso não seja informado um formato o mesmo será 'dd/MM/yyyy'. Exemplos: 'dd/MM/yyyy', 'dd-MM-yy', 'mm/dd/yyyy'.
     * - `time`: Aceita apenas os caracteres de hora(HH), minutos(mm), segundos(ss) e
     *  milisegundos(f-ffffff), os milisegundos são opcionais, caso não seja informado um formato o mesmo será
     * 'HH:mm:ss'. Exemplos: 'HH:mm', 'HH:mm:ss.ffffff', 'HH:mm:ss.ff', 'mm:ss.fff'.
     * - `number`: Aceita valores definidos para a propriedade `digitsInfo` do [**DecimalPipe**](https://angular.io/api/common/DecimalPipe)
     *  para formatação, e caso não seja informado, o número será exibido na sua forma original.
     *
     *  + Exemplo: com o valor de entrada: `50` e a valor para formatação: `'1.2-5'` o resultado será: `50.00`.
     * @type {?|undefined}
     */
    ThfDynamicViewField.prototype.format;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWR5bmFtaWMtdmlldy1maWVsZC5pbnRlcmZhY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLWR5bmFtaWMvdGhmLWR5bmFtaWMtdmlldy90aGYtZHluYW1pYy12aWV3LWZpZWxkLmludGVyZmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQVdBLHlDQStCQzs7Ozs7Ozs7SUF4QkMsa0NBQWM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFzQmQscUNBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGhmRHluYW1pY0ZpZWxkIH0gZnJvbSAnLi4vdGhmLWR5bmFtaWMtZmllbGQuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAdXNlZEJ5IFRoZkR5bmFtaWNWaWV3Q29tcG9uZW50XG4gKlxuICogQGRvY3NFeHRlbmRzIFRoZkR5bmFtaWNGaWVsZFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEludGVyZmFjZSBwYXJhIGRlZmluacOnw6NvIGRhcyBwcm9wcmllZGFkZXMgZG9zIGNhbXBvcyBkZSB2aXN1YWxpemHDp8OjbyBxdWUgc2Vyw6NvIGNyaWFkb3MgZGluYW1pY2FtZW50ZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUaGZEeW5hbWljVmlld0ZpZWxkIGV4dGVuZHMgVGhmRHluYW1pY0ZpZWxkIHtcblxuICAvKipcbiAgICogSW5kaWNhIHNlIG8gY2FtcG8gc2Vyw6EgdW0gYHRoZi10YWdgLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICB0YWc/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBGb3JtYXRvIGRlIGV4aWJpw6fDo28gZG8gdmFsb3IgZG8gY2FtcG8uXG4gICAqXG4gICAqIEFwbGljYWRvIHBhcmEgY2Fzb3MgZXNwZWPDrWZpY29zIGRlIGFjb3JkbyBjb20gbyB0aXBvIGRvIGNhbXBvLlxuICAgKlxuICAgKiAqKnR5cGVzKio6XG4gICAqIC0gYGN1cnJlbmN5YDogQWNlaXRhIHZhbG9yZXMgZGVmaW5pZG9zIHBhcmEgYSBwcm9wcmllZGFkZSBgY3VycmVuY3lDb2RlYCBkb1xuICAgKiAgWyoqQ3VycmVuY3lQaXBlKipdKGh0dHBzOi8vYW5ndWxhci5pby9hcGkvY29tbW9uL0N1cnJlbmN5UGlwZSlcbiAgICogKyBFeGVtcGxvczogJ0JSTCcsICdVU0QnLlxuICAgKiAtIGBkYXRlYDogQWNlaXRhIHZhbG9yZXMgZGVmaW5pZG9zIHBhcmEgYSBwcm9wcmllZGFkZSBgZm9ybWF0YCBkbyBbKipEYXRlUGlwZSoqXShodHRwczovL2FuZ3VsYXIuaW8vYXBpL2NvbW1vbi9EYXRlUGlwZSlcbiAgICogZSB0YW1iw6ltIGFjZWl0YSBvcyBjYXJhY3RlcmVzIGRlIGRpYShkZCksIG3DqnMoTU0gb3UgbW0pIGUgYW5vICh5eXl5IG91IHl5KSxcbiAgICogY2FzbyBuw6NvIHNlamEgaW5mb3JtYWRvIHVtIGZvcm1hdG8gbyBtZXNtbyBzZXLDoSAnZGQvTU0veXl5eScuIEV4ZW1wbG9zOiAnZGQvTU0veXl5eScsICdkZC1NTS15eScsICdtbS9kZC95eXl5Jy5cbiAgICogLSBgdGltZWA6IEFjZWl0YSBhcGVuYXMgb3MgY2FyYWN0ZXJlcyBkZSBob3JhKEhIKSwgbWludXRvcyhtbSksIHNlZ3VuZG9zKHNzKSBlXG4gICAqICBtaWxpc2VndW5kb3MoZi1mZmZmZmYpLCBvcyBtaWxpc2VndW5kb3Mgc8OjbyBvcGNpb25haXMsIGNhc28gbsOjbyBzZWphIGluZm9ybWFkbyB1bSBmb3JtYXRvIG8gbWVzbW8gc2Vyw6FcbiAgICogJ0hIOm1tOnNzJy4gRXhlbXBsb3M6ICdISDptbScsICdISDptbTpzcy5mZmZmZmYnLCAnSEg6bW06c3MuZmYnLCAnbW06c3MuZmZmJy5cbiAgICogLSBgbnVtYmVyYDogQWNlaXRhIHZhbG9yZXMgZGVmaW5pZG9zIHBhcmEgYSBwcm9wcmllZGFkZSBgZGlnaXRzSW5mb2AgZG8gWyoqRGVjaW1hbFBpcGUqKl0oaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9jb21tb24vRGVjaW1hbFBpcGUpXG4gICAqICBwYXJhIGZvcm1hdGHDp8OjbywgZSBjYXNvIG7Do28gc2VqYSBpbmZvcm1hZG8sIG8gbsO6bWVybyBzZXLDoSBleGliaWRvIG5hIHN1YSBmb3JtYSBvcmlnaW5hbC5cbiAgICpcbiAgICogICsgRXhlbXBsbzogY29tIG8gdmFsb3IgZGUgZW50cmFkYTogYDUwYCBlIGEgdmFsb3IgcGFyYSBmb3JtYXRhw6fDo286IGAnMS4yLTUnYCBvIHJlc3VsdGFkbyBzZXLDoTogYDUwLjAwYC5cbiAgICovXG4gIGZvcm1hdD86IHN0cmluZztcblxufVxuIl19