/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço que implementa a comunicação entre os items do thf-menu.
 */
var ThfMenuItemsService = /** @class */ (function () {
    function ThfMenuItemsService() {
        this.subjectParent = new Subject();
        this.subjectChild = new Subject();
    }
    // Envia informações do click do thf-menu-item para o thf-menu
    // Envia informações do click do thf-menu-item para o thf-menu
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuItemsService.prototype.sendToParentMenuClicked = 
    // Envia informações do click do thf-menu-item para o thf-menu
    /**
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.subjectChild.next(menu);
    };
    // Recebe do thf-menu-item sua informação de click.
    // Recebe do thf-menu-item sua informação de click.
    /**
     * @return {?}
     */
    ThfMenuItemsService.prototype.receiveFromChildMenuClicked = 
    // Recebe do thf-menu-item sua informação de click.
    /**
     * @return {?}
     */
    function () {
        return this.subjectChild.asObservable();
    };
    // Envia para os thf-menu-item a resposta do processamento de click de um thf-menu-item.
    // Envia para os thf-menu-item a resposta do processamento de click de um thf-menu-item.
    /**
     * @param {?} menu
     * @return {?}
     */
    ThfMenuItemsService.prototype.sendToChildMenuClicked = 
    // Envia para os thf-menu-item a resposta do processamento de click de um thf-menu-item.
    /**
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.subjectParent.next(menu);
    };
    // Recebe do thf-menu as informações processadas do click de um thf-menu-item.
    // Recebe do thf-menu as informações processadas do click de um thf-menu-item.
    /**
     * @return {?}
     */
    ThfMenuItemsService.prototype.receiveFromParentMenuClicked = 
    // Recebe do thf-menu as informações processadas do click de um thf-menu-item.
    /**
     * @return {?}
     */
    function () {
        return this.subjectParent.asObservable();
    };
    ThfMenuItemsService.decorators = [
        { type: Injectable }
    ];
    return ThfMenuItemsService;
}());
export { ThfMenuItemsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfMenuItemsService.prototype.subjectParent;
    /**
     * @type {?}
     * @private
     */
    ThfMenuItemsService.prototype.subjectChild;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLW1lbnUtaXRlbXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtbWVudS9zZXJ2aWNlcy90aGYtbWVudS1pdGVtcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7Ozs7O0FBUzNDO0lBQUE7UUFFVSxrQkFBYSxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFDbkMsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO0lBcUI1QyxDQUFDO0lBbkJDLDhEQUE4RDs7Ozs7O0lBQzlELHFEQUF1Qjs7Ozs7O0lBQXZCLFVBQXdCLElBQVk7UUFDbEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELG1EQUFtRDs7Ozs7SUFDbkQseURBQTJCOzs7OztJQUEzQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBRUQsd0ZBQXdGOzs7Ozs7SUFDeEYsb0RBQXNCOzs7Ozs7SUFBdEIsVUFBdUIsSUFBWTtRQUNqQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsOEVBQThFOzs7OztJQUM5RSwwREFBNEI7Ozs7O0lBQTVCO1FBQ0UsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzNDLENBQUM7O2dCQXZCRixVQUFVOztJQXdCWCwwQkFBQztDQUFBLEFBeEJELElBd0JDO1NBdkJZLG1CQUFtQjs7Ozs7O0lBQzlCLDRDQUEyQzs7Ozs7SUFDM0MsMkNBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2VydmnDp28gcXVlIGltcGxlbWVudGEgYSBjb211bmljYcOnw6NvIGVudHJlIG9zIGl0ZW1zIGRvIHRoZi1tZW51LlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGhmTWVudUl0ZW1zU2VydmljZSB7XG4gIHByaXZhdGUgc3ViamVjdFBhcmVudCA9IG5ldyBTdWJqZWN0PGFueT4oKTtcbiAgcHJpdmF0ZSBzdWJqZWN0Q2hpbGQgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG5cbiAgLy8gRW52aWEgaW5mb3JtYcOnw7VlcyBkbyBjbGljayBkbyB0aGYtbWVudS1pdGVtIHBhcmEgbyB0aGYtbWVudVxuICBzZW5kVG9QYXJlbnRNZW51Q2xpY2tlZChtZW51OiBvYmplY3QpIHtcbiAgICB0aGlzLnN1YmplY3RDaGlsZC5uZXh0KG1lbnUpO1xuICB9XG5cbiAgLy8gUmVjZWJlIGRvIHRoZi1tZW51LWl0ZW0gc3VhIGluZm9ybWHDp8OjbyBkZSBjbGljay5cbiAgcmVjZWl2ZUZyb21DaGlsZE1lbnVDbGlja2VkKCkge1xuICAgIHJldHVybiB0aGlzLnN1YmplY3RDaGlsZC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIC8vIEVudmlhIHBhcmEgb3MgdGhmLW1lbnUtaXRlbSBhIHJlc3Bvc3RhIGRvIHByb2Nlc3NhbWVudG8gZGUgY2xpY2sgZGUgdW0gdGhmLW1lbnUtaXRlbS5cbiAgc2VuZFRvQ2hpbGRNZW51Q2xpY2tlZChtZW51OiBvYmplY3QpIHtcbiAgICB0aGlzLnN1YmplY3RQYXJlbnQubmV4dChtZW51KTtcbiAgfVxuXG4gIC8vIFJlY2ViZSBkbyB0aGYtbWVudSBhcyBpbmZvcm1hw6fDtWVzIHByb2Nlc3NhZGFzIGRvIGNsaWNrIGRlIHVtIHRoZi1tZW51LWl0ZW0uXG4gIHJlY2VpdmVGcm9tUGFyZW50TWVudUNsaWNrZWQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5zdWJqZWN0UGFyZW50LmFzT2JzZXJ2YWJsZSgpO1xuICB9XG59XG4iXX0=