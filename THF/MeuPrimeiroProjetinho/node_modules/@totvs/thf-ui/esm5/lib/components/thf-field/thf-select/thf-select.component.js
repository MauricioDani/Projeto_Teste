/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, ContentChild, Component, ElementRef, forwardRef, HostListener, IterableDiffers, Renderer2, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { isMobile, removeDuplicatedOptions, removeUndefinedAndNullOptions, validValue } from '../../../utils/util';
import { ThfControlPositionService } from './../../../services/thf-control-position/thf-control-position.service';
import { ThfKeyCodeEnum } from './../../../enums/thf-key-code.enum';
import { ThfSelectBaseComponent } from './thf-select-base.component';
import { ThfSelectOptionTemplateDirective } from './thf-select-option-template/thf-select-option-template.directive';
/** @type {?} */
var thfSelectContentOffset = 8;
/** @type {?} */
var thfSelectContentPositionDefault = 'bottom';
/**
 * \@docsExtends ThfSelectBaseComponent
 *
 * \@example
 *
 * <example name="thf-select-basic" title="Totvs Select Basic">
 *   <file name="sample-thf-select-basic/sample-thf-select-basic.component.html"> </file>
 *   <file name="sample-thf-select-basic/sample-thf-select-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-select-labs" title="Totvs Select Labs">
 *   <file name="sample-thf-select-labs/sample-thf-select-labs.component.html"> </file>
 *   <file name="sample-thf-select-labs/sample-thf-select-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-select-customer-registration" title="Totvs Select - Customer registration">
 *   <file name="sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.html"> </file>
 *   <file name="sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.ts"> </file>
 *   <file name="sample-thf-select-customer-registration/sample-thf-select-customer-registration.service.ts"> </file>
 *   <file name='sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.e2e-spec.ts'> </file>
 *   <file name='sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.po.ts'> </file>
 * </example>
 */
var ThfSelectComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfSelectComponent, _super);
    function ThfSelectComponent(element, changeDetector, differs, renderer, controlPosition) {
        var _this = _super.call(this, element, changeDetector) || this;
        _this.renderer = renderer;
        _this.controlPosition = controlPosition;
        _this.isMobile = isMobile();
        _this.open = false;
        _this.selectIcon = 'thf-icon-arrow-down';
        _this.onScroll = (/**
         * @return {?}
         */
        function () {
            _this.controlPosition.adjustPosition(thfSelectContentPositionDefault);
        });
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    Object.defineProperty(ThfSelectComponent.prototype, "isInvisibleSelectNative", {
        get: /**
         * @return {?}
         */
        function () {
            return this.readonly && this.isMobile;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} $event
     * @return {?}
     */
    ThfSelectComponent.prototype.onKeydown = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var charCode = $event.which || $event.keyCode;
        // Tratamentos para quando o readonly for ativado.
        if (this.readonly) {
            // deve matar o evento do teclado devido a alterar o valor do model mesmo com os options fechados
            if (charCode !== ThfKeyCodeEnum.tab) {
                this.disableDefaultEventAndToggleButton();
                $event.preventDefault();
            }
            return;
        }
        // Seleciona os itens com as teclas "up" e "down"
        if ((!this.open || $event.altKey) && (charCode === ThfKeyCodeEnum.arrowDown || charCode === ThfKeyCodeEnum.arrowUp)) {
            this.disableDefaultEventAndToggleButton();
        }
        // Abre o thf-select com as teclas "enter" e "espaço"
        if (charCode === ThfKeyCodeEnum.enter || charCode === ThfKeyCodeEnum.space) {
            this.disableDefaultEventAndToggleButton();
        }
        // Fecha o thf-select com a tecla "tab"
        if (this.open && charCode === ThfKeyCodeEnum.tab) {
            $event.preventDefault();
            this.toggleButton();
        }
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var change = this.differ.diff(this.options);
        if (change) {
            removeDuplicatedOptions(this.options);
            removeUndefinedAndNullOptions(this.options);
        }
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.hideDropDown = /**
     * @return {?}
     */
    function () {
        this.selectIcon = 'thf-icon-arrow-down';
        this.selector('.thf-select-container').classList.remove('thf-select-show');
        this.open = false;
        this.changeDetector.markForCheck();
        this.selectElement.nativeElement.focus();
        this.removeListeners();
    };
    /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    ThfSelectComponent.prototype.isEqual = /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    function (value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) ||
            (value === undefined && inputValue !== undefined)) {
            value = "" + value; // Transformando em string
        }
        return value === inputValue;
    };
    /**
     * @param {?} option
     * @return {?}
     */
    ThfSelectComponent.prototype.onOptionClick = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        this.toggleButton();
        this.updateModel(option);
    };
    // Altera o valor ao selecionar um item.
    // Altera o valor ao selecionar um item.
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectComponent.prototype.onSelectChange = 
    // Altera o valor ao selecionar um item.
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var ulDropdpwn = this.element.nativeElement.querySelector('ul.thf-select-content');
        if (value && this.options && this.options.length) {
            /** @type {?} */
            var optionFound = this.options.find((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                return _this.isEqual(option.value, value);
            }));
            if (optionFound) {
                /** @type {?} */
                var index = this.options.indexOf(optionFound);
                ulDropdpwn.scrollTop = this.scrollValue(index, ulDropdpwn.clientHeight);
                this.updateModel(optionFound);
            }
        }
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.onUpdateOptions = /**
     * @return {?}
     */
    function () {
        if (this.modelValue) {
            this.onSelectChange(this.modelValue);
        }
    };
    /**
     * @param {?} index
     * @param {?} clientHeight
     * @return {?}
     */
    ThfSelectComponent.prototype.scrollValue = /**
     * @param {?} index
     * @param {?} clientHeight
     * @return {?}
     */
    function (index, clientHeight) {
        /** @type {?} */
        var heightScrollValue = (index + 1) * this.getSelectItemHeight();
        return this.scrollPosition = heightScrollValue > clientHeight ? heightScrollValue : 0;
    };
    /**
     * @param {?} query
     * @return {?}
     */
    ThfSelectComponent.prototype.selector = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        return this.element.nativeElement.querySelector(query);
    };
    /**
     * @return {?}
     */
    ThfSelectComponent.prototype.toggleButton = /**
     * @return {?}
     */
    function () {
        this.open ? this.hideDropDown() : this.showDropdown();
    };
    // Atualiza valores
    // Atualiza valores
    /**
     * @param {?} option
     * @return {?}
     */
    ThfSelectComponent.prototype.updateModel = 
    // Atualiza valores
    /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        if (this.selectedValue !== option.value) {
            this.selectedValue = option.value;
            this.selectElement.nativeElement.value = option.value;
            this.callModelChange(option.value);
            this.displayValue = option.label;
            this.onChange(option.value);
        }
    };
    // Esconde Content do Select quando for clicado fora
    // Esconde Content do Select quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    ThfSelectComponent.prototype.wasClickedOnToggle = 
    // Esconde Content do Select quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.selectButtonElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target)) {
            this.hideDropDown();
        }
    };
    // Recebe as alterações do model
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    ThfSelectComponent.prototype.writeValue = 
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var optionFound = this.options.find((/**
         * @param {?} option
         * @return {?}
         */
        function (option) {
            return _this.isEqual(option.value, value);
        }));
        if (optionFound) {
            this.selectElement.nativeElement.value = optionFound.value;
            this.selectedValue = optionFound.value;
            this.displayValue = (optionFound.label);
        }
        else if (validValue(this.selectedValue)) {
            this.selectElement.nativeElement.value = undefined;
            this.callModelChange(undefined);
            this.selectedValue = undefined;
            this.displayValue = undefined;
        }
        this.modelValue = value;
        this.changeDetector.detectChanges();
    };
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.disableDefaultEventAndToggleButton = 
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.selectElement.nativeElement.style.display = 'none';
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.selectElement.nativeElement.style.display = 'block';
            _this.toggleButton();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.getSelectItemHeight = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selectItem = this.selector('div.thf-select-item');
        return selectItem && selectItem.clientHeight;
    };
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.clickoutListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.wasClickedOnToggle(event);
        }));
        this.eventResizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            _this.hideDropDown();
        }));
        window.addEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        this.eventResizeListener();
        window.removeEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.setPositionDropdown = /**
     * @private
     * @return {?}
     */
    function () {
        this.controlPosition.setElements(this.contentList.nativeElement, thfSelectContentOffset, this.selectButtonElement, ['top', 'bottom'], true);
        this.controlPosition.adjustPosition(thfSelectContentPositionDefault);
    };
    /**
     * @private
     * @return {?}
     */
    ThfSelectComponent.prototype.showDropdown = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.readonly) {
            this.selectElement.nativeElement.focus();
            if (this.options && this.options.length) {
                /** @type {?} */
                var ulDropdpwn = this.element.nativeElement.querySelector('ul.thf-select-content');
                ulDropdpwn.scrollTop = this.scrollPosition;
            }
            this.selectIcon = 'thf-icon-arrow-up';
            this.selector('.thf-select-container').classList.add('thf-select-show');
            this.open = true;
            this.changeDetector.markForCheck();
            this.setPositionDropdown();
            this.initializeListeners();
        }
    };
    ThfSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-select',
                    template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <select #select\n    class=\"thf-select\"\n    [attr.name]=\"name\"\n    [disabled]=\"disabled\"\n    [ngClass]=\"{'thf-select-mobile' : isMobile, 'thf-invisible': isInvisibleSelectNative}\"\n    [required]=\"required\"\n    (change)=\"onSelectChange($event.target.value)\">\n    <option *ngIf=\"isMobile\" disabled hidden selected></option>\n    <option *ngFor=\"let option of options\"\n      [disabled]=\"readonly\"\n      [value]=\"option.value\"\n      (click)=\"onOptionClick(option)\">\n        {{option?.label}}\n    </option>\n  </select>\n\n  <div class=\"thf-select-container\">\n    <div #selectButton\n      class=\"thf-select-button\"\n      [ngClass]=\"{'thf-select-button-disabled' : disabled, 'thf-select-button-readonly' : readonly}\"\n      (click)=\"toggleButton()\">\n\n      <span>{{displayValue || placeholder}}</span>\n\n      <div class=\"thf-field-icon-container-right\">\n        <span #icon\n          class=\"thf-icon {{selectIcon}} thf-field-icon\"\n          [ngClass]=\"{'thf-field-icon-disabled' : disabled, 'thf-field-icon-readonly' : readonly}\"></span>\n      </div>\n    </div>\n\n    <ul #contentList\n      class=\"thf-select-content\"\n      [ngClass]=\"{'thf-invisible': isMobile}\">\n\n      <li *ngFor=\"let option of options\"\n        [class.thf-select-item-selected]=\"selectedValue == option.value\"\n        [value]=\"option.value\"\n        (click)=\"onOptionClick(option)\">\n        <div class=\"thf-select-item\">\n\n          <ng-container *ngIf=\"selectOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\n\n          <ng-template #defaultOptionTemplate>\n            <span>{{option?.label}}</span>\n          </ng-template>\n\n          <ng-template #optionTemplate\n            [ngTemplateOutlet]=\"selectOptionTemplate?.templateRef\"\n            [ngTemplateOutletContext]=\"{$implicit: option}\">\n          </ng-template>\n\n        </div>\n      </li>\n    </ul>\n  </div>\n\n  <thf-field-container-bottom></thf-field-container-bottom>\n\n</thf-field-container>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ThfSelectComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ThfSelectComponent; })),
                            multi: true,
                        },
                        ThfControlPositionService
                    ]
                }] }
    ];
    /** @nocollapse */
    ThfSelectComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: IterableDiffers },
        { type: Renderer2 },
        { type: ThfControlPositionService }
    ]; };
    ThfSelectComponent.propDecorators = {
        selectOptionTemplate: [{ type: ContentChild, args: [ThfSelectOptionTemplateDirective, { static: true },] }],
        contentList: [{ type: ViewChild, args: ['contentList', { read: ElementRef, static: true },] }],
        iconElement: [{ type: ViewChild, args: ['icon', { read: ElementRef, static: true },] }],
        selectElement: [{ type: ViewChild, args: ['select', { read: ElementRef, static: true },] }],
        selectButtonElement: [{ type: ViewChild, args: ['selectButton', { read: ElementRef, static: true },] }],
        onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return ThfSelectComponent;
}(ThfSelectBaseComponent));
export { ThfSelectComponent };
if (false) {
    /** @type {?} */
    ThfSelectComponent.prototype.displayValue;
    /** @type {?} */
    ThfSelectComponent.prototype.isMobile;
    /** @type {?} */
    ThfSelectComponent.prototype.modelValue;
    /** @type {?} */
    ThfSelectComponent.prototype.open;
    /** @type {?} */
    ThfSelectComponent.prototype.selectedValue;
    /** @type {?} */
    ThfSelectComponent.prototype.selectIcon;
    /** @type {?} */
    ThfSelectComponent.prototype.scrollPosition;
    /**
     * @type {?}
     * @private
     */
    ThfSelectComponent.prototype.differ;
    /** @type {?} */
    ThfSelectComponent.prototype.eventListenerFunction;
    /** @type {?} */
    ThfSelectComponent.prototype.eventResizeListener;
    /** @type {?} */
    ThfSelectComponent.prototype.selectOptionTemplate;
    /** @type {?} */
    ThfSelectComponent.prototype.contentList;
    /** @type {?} */
    ThfSelectComponent.prototype.iconElement;
    /** @type {?} */
    ThfSelectComponent.prototype.selectElement;
    /** @type {?} */
    ThfSelectComponent.prototype.selectButtonElement;
    /**
     * @type {?}
     * @private
     */
    ThfSelectComponent.prototype.onScroll;
    /** @type {?} */
    ThfSelectComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ThfSelectComponent.prototype.controlPosition;
}
//# sourceMappingURL=data:application/json;base64,