/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Para usar o thf-mask é preciso instanciar esta classe passando a máscara como
 * primeiro parâmetro, e no segundo parâmetro, deve se informado true, caso queira
 * que o model seja formatado ou false para o que o model seja limpo.
 */
var /**
 * Para usar o thf-mask é preciso instanciar esta classe passando a máscara como
 * primeiro parâmetro, e no segundo parâmetro, deve se informado true, caso queira
 * que o model seja formatado ou false para o que o model seja limpo.
 */
ThfMask = /** @class */ (function () {
    function ThfMask(mask, formatModel) {
        this.mask = '';
        this.formatModel = false;
        // controle de posição
        this.initialPosition = 0;
        this.finalPosition = 0;
        this.pattern = '';
        this.mask = mask;
        this.formatModel = formatModel;
        this.pattern = this.getRegexFromMask(mask);
    }
    Object.defineProperty(ThfMask.prototype, "getPattern", {
        get: /**
         * @return {?}
         */
        function () {
            return this.pattern;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMask.prototype, "getValueToInput", {
        get: /**
         * @return {?}
         */
        function () {
            return this.valueToInput;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMask.prototype, "setValueToInput", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.valueToInput = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMask.prototype, "getValueToModel", {
        get: /**
         * @return {?}
         */
        function () {
            return this.valueToModel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfMask.prototype, "setValueToModel", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.valueToModel = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.keyup = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.mask) {
            /** @type {?} */
            var value = $event.target.value;
            // formata o valor quando for colado com control + v e reposiciona o cursor
            if ($event.keyCode === 17 || $event.keyCode === 91) {
                $event.target.value = this.controlFormatting(value);
                this.resetPositions($event);
            }
            $event.preventDefault();
            switch ($event.keyCode) {
                case 37: // seta esquerda
                    if (this.initialPosition > 0) {
                        this.initialPosition--;
                    }
                    this.setPositionNotShiftKey($event);
                    this.setSelectionRange($event);
                    break;
                case 39: // seta direita
                    if (this.initialPosition < value.toString().length) {
                        this.initialPosition++;
                    }
                    this.setPositionNotShiftKey($event);
                    this.setSelectionRange($event);
                    break;
                case 35: // end
                    this.finalPosition = value.toString().length;
                    if ($event.shiftKey) {
                        this.setPositions($event);
                    }
                    else {
                        this.initialPosition = this.finalPosition;
                        this.setPositions($event);
                    }
                    break;
                case 36: // HOME
                    if ($event.shiftKey) {
                        this.finalPosition = this.initialPosition;
                        this.initialPosition = 0;
                        this.setPositions($event);
                    }
                    else {
                        this.initialPosition = 0;
                        this.finalPosition = 0;
                        this.setPositions($event);
                    }
                    break;
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.setPositionNotShiftKey = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (!$event.shiftKey) {
            this.finalPosition = this.initialPosition;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.setSelectionRange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.initialPosition > this.finalPosition) {
            $event.target.setSelectionRange(this.finalPosition, this.initialPosition);
        }
        else {
            $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.keydown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.mask) {
            /** @type {?} */
            var value = $event.target.value;
            if ($event.keyCode === 9) {
                return;
            }
            if (!$event.ctrlKey && !$event.metaKey) {
                $event.preventDefault();
            }
            // Não faz nada quando for digitado CTRL ou COMMAND e V
            // Já está sendo tratado no evento keyup
            if ($event.ctrlKey || $event.metaKey && ($event.keyCode !== 86) ||
                ($event.keyCode >= 37 && $event.keyCode <= 40) || $event.keyCode === 16 || $event.keyCode === 9) {
                return;
            }
            // Valida a tecla digitada
            if (this.isKeyValid($event.keyCode)) {
                if (this.finalPosition === null) {
                    this.finalPosition = this.initialPosition;
                }
                this.revertPositions(this.initialPosition, this.finalPosition);
                switch ($event.keyCode) {
                    case 8: // backspace
                        this.getPosition($event);
                        if (this.initialPosition < 0) {
                            this.initialPosition = 0;
                            this.setPositions($event);
                        }
                        if (this.initialPosition === this.finalPosition) {
                            this.checkMaskBefore($event, -1);
                            if (this.initialPosition !== 0) {
                                value = value.slice(0, this.initialPosition - 1) + value.slice(this.finalPosition);
                                value = this.controlFormatting(value);
                                $event.target.value = value;
                                this.changePosition($event, -1);
                                this.checkMaskBefore($event, -1);
                                this.setPositions($event);
                                this.resetPositions($event);
                            }
                        }
                        else {
                            this.clearRangeSelection(value, $event, true);
                        }
                        this.setPositions($event);
                        break;
                    case 46: // delete
                        this.getPosition($event);
                        if (this.initialPosition === this.finalPosition) {
                            this.checkMaskAfter($event, 1);
                            value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition + 1);
                            value = this.controlFormatting(value);
                            $event.target.value = value;
                            this.setPositions($event);
                            this.resetPositions($event);
                        }
                        else {
                            this.clearRangeSelection(value, $event, false);
                        }
                        this.setPositions($event);
                        break;
                    default: // qualquer outra tecla válida
                        value = value.slice(0, this.initialPosition) + $event.key + value.slice(this.finalPosition);
                        value = this.controlFormatting(value);
                        $event.target.value = value;
                        this.changePosition($event, 1);
                        this.checkMaskBefore($event, 1);
                        this.setPositions($event);
                        this.resetPositions($event);
                        this.setPositions($event);
                }
            }
        }
    };
    /**
     * @param {?} value
     * @param {?} $event
     * @param {?} isBackspace
     * @return {?}
     */
    ThfMask.prototype.clearRangeSelection = /**
     * @param {?} value
     * @param {?} $event
     * @param {?} isBackspace
     * @return {?}
     */
    function (value, $event, isBackspace) {
        value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition);
        value = this.controlFormatting(value);
        $event.target.value = value;
        if (isBackspace) {
            this.checkMaskBefore($event, -1);
        }
        this.setPositions($event);
        this.resetPositions($event);
    };
    // passa a posição do click para o controle de posição
    // passa a posição do click para o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.click = 
    // passa a posição do click para o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = $event.target.selectionEnd;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.blur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // Se houver algum valor definido na máscara
        if (this.mask) {
            // pega o valor do campo, formata e passa para o model
            /** @type {?} */
            var value = $event.target.value;
            value = this.controlFormatting(value);
            $event.target.value = value;
        }
    };
    /**
     * @param {?} initialPosition
     * @param {?} finalPosition
     * @return {?}
     */
    ThfMask.prototype.revertPositions = /**
     * @param {?} initialPosition
     * @param {?} finalPosition
     * @return {?}
     */
    function (initialPosition, finalPosition) {
        if (initialPosition > finalPosition) {
            // inverte o controle de posição caso o inicial esteja maior que o final
            /** @type {?} */
            var tempPosition = void 0;
            tempPosition = initialPosition;
            this.initialPosition = finalPosition;
            this.finalPosition = tempPosition;
        }
    };
    // reseta o controle de posição
    // reseta o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.resetPositions = 
    // reseta o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = this.initialPosition;
    };
    // posiciona o cursor de acordo com o controle de posição
    // posiciona o cursor de acordo com o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.setPositions = 
    // posiciona o cursor de acordo com o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
    };
    // muda a posição do cursor e atualiza o controle de posição
    // muda a posição do cursor e atualiza o controle de posição
    /**
     * @param {?} $event
     * @param {?} value
     * @return {?}
     */
    ThfMask.prototype.changePosition = 
    // muda a posição do cursor e atualiza o controle de posição
    /**
     * @param {?} $event
     * @param {?} value
     * @return {?}
     */
    function ($event, value) {
        this.initialPosition = this.initialPosition + value;
        this.finalPosition = this.finalPosition + value;
        this.setPositions($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ThfMask.prototype.getPosition = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = $event.target.selectionEnd;
        this.setPositions($event);
    };
    // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
    // quando houver valores opcionais (?)
    // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
    // quando houver valores opcionais (?)
    /**
     * @param {?} value
     * @return {?}
     */
    ThfMask.prototype.controlFormatting = 
    // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
    // quando houver valores opcionais (?)
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Se o valor for vazio, retorna vazio
        if (!value) {
            this.valueToInput = '';
            this.valueToModel = '';
            return '';
        }
        /** @type {?} */
        var valueProcessed;
        /** @type {?} */
        var maskTmp = this.mask;
        // Array que será usado para armazenar todas as máscaras possíveis para
        // quando houver um valor opcional (?)
        /** @type {?} */
        var arrMasks = [];
        /** @type {?} */
        var contMasks = 0;
        // Enquanto houver algum 9? na máscara
        while (this.hasOptionalNumber(maskTmp)) {
            arrMasks.push(maskTmp);
            maskTmp = this.replaceOptionalNumber(maskTmp);
        }
        arrMasks.push(maskTmp);
        // Inverte o array
        arrMasks.reverse();
        // Informa que a formatação ainda não chegou ao fim
        this.formattingEnds = false;
        while (!this.formattingEnds) {
            // Seta a formatação como terminada
            // Então o método formatValue irá setar como não terminado caso haja
            this.formattingEnds = true;
            // Se não existe mais nenhuma máscara possível, então encerra a formatação
            if (!arrMasks[contMasks]) {
                break;
            }
            // Chama a formatação passando a máscara e o valor
            valueProcessed = this.formatValue(value, arrMasks[contMasks]);
            contMasks++;
        }
        return valueProcessed;
    };
    // Função que formata a máscara com o valor passado
    // Função que formata a máscara com o valor passado
    /**
     * @param {?} value
     * @param {?} mask
     * @return {?}
     */
    ThfMask.prototype.formatValue = 
    // Função que formata a máscara com o valor passado
    /**
     * @param {?} value
     * @param {?} mask
     * @return {?}
     */
    function (value, mask) {
        // Remove as marcas de valor opciona (?)
        mask = mask.replace(/\?/g, '');
        // Substitui todos os caracteres que não são fixos da máscara por _
        /** @type {?} */
        var guide = mask.replace(this.listValidKeys(), '_');
        // Contador usado para percorrer o guide
        /** @type {?} */
        var contGuide = 0;
        // String final formatada
        /** @type {?} */
        var valueProcessed = '';
        // Remove do valor todos os caracteres fixos como ()/-+
        value = this.removeFormattingValue(value);
        // Percorre todo o valor e coloca a formatação de acordo com a máscara
        for (var i = 0; i < value.length; i++) {
            /** @type {?} */
            var charValue = value[i];
            // Se o guide acabou, seta a formatação como não terminada para que o método controlFormatting
            // tente formatar com outra possível máscara
            if (!guide[contGuide]) {
                this.formattingEnds = false;
                break;
            }
            // Percorre o Guide enquanto tem caracteres fixos
            while (this.isFixedCharacterGuide(guide[contGuide]) && guide[contGuide]) {
                valueProcessed += guide[contGuide];
                contGuide++;
            }
            // É um caracter válido de acordo com a máscara
            if (this.isKeyValidMask(charValue, mask[contGuide])) {
                valueProcessed += charValue;
                contGuide++;
            }
            else {
                // Se não é um caracter válido, deve interromper.
                break;
            }
        }
        if (this.formatModel) {
            this.valueToInput = valueProcessed;
            this.valueToModel = valueProcessed;
        }
        else {
            this.valueToInput = valueProcessed;
            this.valueToModel = this.removeFormattingValue(valueProcessed);
        }
        return valueProcessed;
    };
    // verifica se tem algum caracter de mascara antes do cursor
    // verifica se tem algum caracter de mascara antes do cursor
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    ThfMask.prototype.checkMaskBefore = 
    // verifica se tem algum caracter de mascara antes do cursor
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    function ($event, position) {
        if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition - 1))) {
            this.changePosition($event, position);
            this.checkMaskBefore($event, position);
        }
    };
    // verifica se tem algum caracter de mascara depois do cursor
    // verifica se tem algum caracter de mascara depois do cursor
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    ThfMask.prototype.checkMaskAfter = 
    // verifica se tem algum caracter de mascara depois do cursor
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    function ($event, position) {
        if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition))) {
            this.changePosition($event, position);
            this.checkMaskAfter($event, position);
        }
    };
    // Retorna a máscara sem um valor opcional
    // Retorna a máscara sem um valor opcional
    /**
     * @param {?} mask
     * @return {?}
     */
    ThfMask.prototype.replaceOptionalNumber = 
    // Retorna a máscara sem um valor opcional
    /**
     * @param {?} mask
     * @return {?}
     */
    function (mask) {
        /** @type {?} */
        var i = 9;
        while (i >= 0) {
            if (mask.indexOf(i + '?') > -1) {
                return mask.replace(i + '?', '');
            }
            i--;
        }
        return mask;
    };
    // Verifica se contém caracteres permitidos somente na máscara \/() +-
    // Verifica se contém caracteres permitidos somente na máscara \/() +-
    /**
     * @param {?} key
     * @return {?}
     */
    ThfMask.prototype.isFixedCharacterGuide = 
    // Verifica se contém caracteres permitidos somente na máscara \/() +-
    /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.testRegex(key, this.getFixedCharacterGuide());
    };
    // Retorna caracteres permitidos somente na máscara \/() +-
    // Retorna caracteres permitidos somente na máscara \/() +-
    /**
     * @return {?}
     */
    ThfMask.prototype.getFixedCharacterGuide = 
    // Retorna caracteres permitidos somente na máscara \/() +-
    /**
     * @return {?}
     */
    function () {
        return /[\\\/() +-.\:]/g;
    };
    // Caracteres permitidos de serem digitados
    // Caracteres permitidos de serem digitados
    /**
     * @return {?}
     */
    ThfMask.prototype.listValidKeys = 
    // Caracteres permitidos de serem digitados
    /**
     * @return {?}
     */
    function () {
        return /[a-zA-Z0-9]/g;
    };
    // Se é um dígito válido
    // Se é um dígito válido
    /**
     * @param {?} keyCode
     * @return {?}
     */
    ThfMask.prototype.isKeyValid = 
    // Se é um dígito válido
    /**
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        return this.isKeyCodeValid(keyCode);
    };
    // Verifica se a tecla digitada é permitida
    // Permite apenas números, letras, backspace e del
    // Verifica se a tecla digitada é permitida
    // Permite apenas números, letras, backspace e del
    /**
     * @param {?} keyCode
     * @return {?}
     */
    ThfMask.prototype.isKeyCodeValid = 
    // Verifica se a tecla digitada é permitida
    // Permite apenas números, letras, backspace e del
    /**
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        return ((keyCode >= 48 && keyCode <= 57) ||
            (keyCode >= 65 && keyCode <= 90) ||
            (keyCode >= 96 && keyCode <= 105) ||
            (keyCode === 8) || keyCode === 9 ||
            (keyCode === 46));
    };
    // Se está de acordo com a máscara
    // Se está de acordo com a máscara
    /**
     * @param {?} key
     * @param {?} keyMask
     * @return {?}
     */
    ThfMask.prototype.isKeyValidMask = 
    // Se está de acordo com a máscara
    /**
     * @param {?} key
     * @param {?} keyMask
     * @return {?}
     */
    function (key, keyMask) {
        return this.testRegex(key, this.replaceMask(keyMask));
    };
    // Retorna se a chave foi aprovada pela expressão regular
    // Retorna se a chave foi aprovada pela expressão regular
    /**
     * @param {?} key
     * @param {?} regex
     * @return {?}
     */
    ThfMask.prototype.testRegex = 
    // Retorna se a chave foi aprovada pela expressão regular
    /**
     * @param {?} key
     * @param {?} regex
     * @return {?}
     */
    function (key, regex) {
        return regex.test(key);
    };
    // Remove a formatacão do valor
    // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
    // Remove a formatacão do valor
    // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
    /**
     * @param {?} value
     * @return {?}
     */
    ThfMask.prototype.removeFormattingValue = 
    // Remove a formatacão do valor
    // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.replace(this.getFixedCharacterGuide(), '');
    };
    // Verifica se contém valor opcional na máscara 0-9?
    // Verifica se contém valor opcional na máscara 0-9?
    /**
     * @param {?} mask
     * @return {?}
     */
    ThfMask.prototype.hasOptionalNumber = 
    // Verifica se contém valor opcional na máscara 0-9?
    /**
     * @param {?} mask
     * @return {?}
     */
    function (mask) {
        return mask.match(/\d\?/g);
    };
    // Retorna a expressão regular correspondente ao comando passado
    // Retorna a expressão regular correspondente ao comando passado
    /**
     * @param {?} char
     * @return {?}
     */
    ThfMask.prototype.replaceMask = 
    // Retorna a expressão regular correspondente ao comando passado
    /**
     * @param {?} char
     * @return {?}
     */
    function (char) {
        /** @type {?} */
        var regex = /./;
        switch (char) {
            case '0':
                regex = /[0]/;
                break;
            case '1':
                regex = /[0-1]/;
                break;
            case '2':
                regex = /[0-2]/;
                break;
            case '3':
                regex = /[0-3]/;
                break;
            case '4':
                regex = /[0-4]/;
                break;
            case '5':
                regex = /[0-5]/;
                break;
            case '6':
                regex = /[0-6]/;
                break;
            case '7':
                regex = /[0-7]/;
                break;
            case '8':
                regex = /[0-8]/;
                break;
            case '9':
                regex = /[0-9]/;
                break;
            case ' ':
                regex = /\s/;
                break;
            case '@':
                regex = /[a-zA-Z]/;
                break;
            case 'w':
                regex = /[a-zA-Z0-9]/;
                break;
        }
        return regex;
    };
    /**
     * @param {?} mask
     * @return {?}
     */
    ThfMask.prototype.getRegexFromMask = /**
     * @param {?} mask
     * @return {?}
     */
    function (mask) {
        if (mask) {
            /** @type {?} */
            var pattern = void 0;
            if (this.formatModel) {
                pattern = mask.replace(/\\/g, '\\\\');
                pattern = pattern.replace(/\+/g, '\\+');
                pattern = pattern.replace(/\./g, '\\.');
                pattern = pattern.replace(/-/g, '-');
                pattern = pattern.replace(/\(/g, '\\(');
                pattern = pattern.replace(/\)/g, '\\)');
                pattern = pattern.replace(/\//g, '\\/');
                pattern = pattern.replace(/\s/g, '\\s');
                pattern = pattern.replace(/:/g, '\\:');
                pattern = pattern.replace(/\@(?!\s)/g, '\\w');
                pattern = pattern.replace(/\d/g, '\\w');
            }
            else {
                pattern = mask.replace(/\\/g, '');
                pattern = pattern.replace(/\+/g, '');
                pattern = pattern.replace(/\./g, '');
                pattern = pattern.replace(/-/g, '');
                pattern = pattern.replace(/\(/g, '');
                pattern = pattern.replace(/\)/g, '');
                pattern = pattern.replace(/\//g, '');
                pattern = pattern.replace(/\s/g, '');
                pattern = pattern.replace(/:/g, '');
                pattern = pattern.replace(/\@/g, '\\w');
                pattern = pattern.replace(/\d/g, '\\w');
            }
            return pattern;
        }
        else {
            return null;
        }
    };
    return ThfMask;
}());
/**
 * Para usar o thf-mask é preciso instanciar esta classe passando a máscara como
 * primeiro parâmetro, e no segundo parâmetro, deve se informado true, caso queira
 * que o model seja formatado ou false para o que o model seja limpo.
 */
export { ThfMask };
if (false) {
    /** @type {?} */
    ThfMask.prototype.mask;
    /** @type {?} */
    ThfMask.prototype.formatModel;
    /** @type {?} */
    ThfMask.prototype.initialPosition;
    /** @type {?} */
    ThfMask.prototype.finalPosition;
    /** @type {?} */
    ThfMask.prototype.pattern;
    /** @type {?} */
    ThfMask.prototype.valueToInput;
    /** @type {?} */
    ThfMask.prototype.valueToModel;
    /** @type {?} */
    ThfMask.prototype.formattingEnds;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLW1hc2suanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLWZpZWxkL3RoZi1pbnB1dC90aGYtbWFzay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFLQTs7Ozs7O0lBOEJFLGlCQUFZLElBQVksRUFBRSxXQUFvQjtRQTdCOUMsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUNsQixnQkFBVyxHQUFZLEtBQUssQ0FBQzs7UUFFN0Isb0JBQWUsR0FBVyxDQUFDLENBQUM7UUFDNUIsa0JBQWEsR0FBVyxDQUFDLENBQUM7UUFFMUIsWUFBTyxHQUFXLEVBQUUsQ0FBQztRQXdCbkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQTFCRCxzQkFBSSwrQkFBVTs7OztRQUFkO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7OztPQUFBO0lBR0Qsc0JBQUksb0NBQWU7Ozs7UUFBbkI7WUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDM0IsQ0FBQzs7O09BQUE7SUFDRCxzQkFBSSxvQ0FBZTs7Ozs7UUFBbkIsVUFBb0IsS0FBYTtZQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUM1QixDQUFDOzs7T0FBQTtJQUdELHNCQUFJLG9DQUFlOzs7O1FBQW5CO1lBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzNCLENBQUM7OztPQUFBO0lBQ0Qsc0JBQUksb0NBQWU7Ozs7O1FBQW5CLFVBQW9CLEtBQWE7WUFDL0IsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDNUIsQ0FBQzs7O09BQUE7Ozs7O0lBVUQsdUJB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Q0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3JDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDckMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNyQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3JDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDcEMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUN4QyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDekM7WUFDRCxPQUFPLE9BQU8sQ0FBQztTQUNoQjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUM7U0FDYjtJQUNILENBQUM7SUFFSCxjQUFDO0FBQUQsQ0FBQyxBQS9lRCxJQStlQzs7Ozs7Ozs7O0lBOWVDLHVCQUFrQjs7SUFDbEIsOEJBQTZCOztJQUU3QixrQ0FBNEI7O0lBQzVCLGdDQUEwQjs7SUFFMUIsMEJBQXFCOztJQUtyQiwrQkFBcUI7O0lBUXJCLCtCQUFxQjs7SUFRckIsaUNBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQYXJhIHVzYXIgbyB0aGYtbWFzayDDqSBwcmVjaXNvIGluc3RhbmNpYXIgZXN0YSBjbGFzc2UgcGFzc2FuZG8gYSBtw6FzY2FyYSBjb21vXG4gKiBwcmltZWlybyBwYXLDom1ldHJvLCBlIG5vIHNlZ3VuZG8gcGFyw6JtZXRybywgZGV2ZSBzZSBpbmZvcm1hZG8gdHJ1ZSwgY2FzbyBxdWVpcmFcbiAqIHF1ZSBvIG1vZGVsIHNlamEgZm9ybWF0YWRvIG91IGZhbHNlIHBhcmEgbyBxdWUgbyBtb2RlbCBzZWphIGxpbXBvLlxuICovXG5leHBvcnQgY2xhc3MgVGhmTWFzayB7XG4gIG1hc2s6IHN0cmluZyA9ICcnO1xuICBmb3JtYXRNb2RlbDogYm9vbGVhbiA9IGZhbHNlO1xuICAvLyBjb250cm9sZSBkZSBwb3Npw6fDo29cbiAgaW5pdGlhbFBvc2l0aW9uOiBudW1iZXIgPSAwO1xuICBmaW5hbFBvc2l0aW9uOiBudW1iZXIgPSAwO1xuXG4gIHBhdHRlcm46IHN0cmluZyA9ICcnO1xuICBnZXQgZ2V0UGF0dGVybigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnBhdHRlcm47XG4gIH1cblxuICB2YWx1ZVRvSW5wdXQ6IHN0cmluZztcbiAgZ2V0IGdldFZhbHVlVG9JbnB1dCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnZhbHVlVG9JbnB1dDtcbiAgfVxuICBzZXQgc2V0VmFsdWVUb0lucHV0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnZhbHVlVG9JbnB1dCA9IHZhbHVlO1xuICB9XG5cbiAgdmFsdWVUb01vZGVsOiBzdHJpbmc7XG4gIGdldCBnZXRWYWx1ZVRvTW9kZWwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZVRvTW9kZWw7XG4gIH1cbiAgc2V0IHNldFZhbHVlVG9Nb2RlbCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy52YWx1ZVRvTW9kZWwgPSB2YWx1ZTtcbiAgfVxuXG4gIGZvcm1hdHRpbmdFbmRzOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKG1hc2s6IHN0cmluZywgZm9ybWF0TW9kZWw6IGJvb2xlYW4pIHtcbiAgICB0aGlzLm1hc2sgPSBtYXNrO1xuICAgIHRoaXMuZm9ybWF0TW9kZWwgPSBmb3JtYXRNb2RlbDtcbiAgICB0aGlzLnBhdHRlcm4gPSB0aGlzLmdldFJlZ2V4RnJvbU1hc2sobWFzayk7XG4gIH1cblxuICBrZXl1cCgkZXZlbnQ6IGFueSkge1xuICAgIGlmICh0aGlzLm1hc2spIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gJGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgIC8vIGZvcm1hdGEgbyB2YWxvciBxdWFuZG8gZm9yIGNvbGFkbyBjb20gY29udHJvbCArIHYgZSByZXBvc2ljaW9uYSBvIGN1cnNvclxuICAgICAgaWYgKCRldmVudC5rZXlDb2RlID09PSAxNyB8fCAkZXZlbnQua2V5Q29kZSA9PT0gOTEpIHtcbiAgICAgICAgJGV2ZW50LnRhcmdldC52YWx1ZSA9IHRoaXMuY29udHJvbEZvcm1hdHRpbmcodmFsdWUpO1xuICAgICAgICB0aGlzLnJlc2V0UG9zaXRpb25zKCRldmVudCk7XG4gICAgICB9XG5cbiAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBzd2l0Y2ggKCRldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMzc6IC8vIHNldGEgZXNxdWVyZGFcbiAgICAgICAgICBpZiAodGhpcy5pbml0aWFsUG9zaXRpb24gPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxQb3NpdGlvbi0tO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uTm90U2hpZnRLZXkoJGV2ZW50KTtcbiAgICAgICAgICB0aGlzLnNldFNlbGVjdGlvblJhbmdlKCRldmVudCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAzOTogLy8gc2V0YSBkaXJlaXRhXG4gICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbFBvc2l0aW9uIDwgdmFsdWUudG9TdHJpbmcoKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uKys7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb25Ob3RTaGlmdEtleSgkZXZlbnQpO1xuICAgICAgICAgIHRoaXMuc2V0U2VsZWN0aW9uUmFuZ2UoJGV2ZW50KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDM1OiAvLyBlbmRcbiAgICAgICAgICB0aGlzLmZpbmFsUG9zaXRpb24gPSB2YWx1ZS50b1N0cmluZygpLmxlbmd0aDtcbiAgICAgICAgICBpZiAoJGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9ucygkZXZlbnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxQb3NpdGlvbiA9IHRoaXMuZmluYWxQb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb25zKCRldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMzY6IC8vIEhPTUVcbiAgICAgICAgICBpZiAoJGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICB0aGlzLmZpbmFsUG9zaXRpb24gPSB0aGlzLmluaXRpYWxQb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gMDtcbiAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb25zKCRldmVudCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gMDtcbiAgICAgICAgICAgIHRoaXMuZmluYWxQb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9ucygkZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXRQb3NpdGlvbk5vdFNoaWZ0S2V5KCRldmVudDogYW55KSB7XG4gICAgaWYgKCEkZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgIHRoaXMuZmluYWxQb3NpdGlvbiA9IHRoaXMuaW5pdGlhbFBvc2l0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHNldFNlbGVjdGlvblJhbmdlKCRldmVudDogYW55KSB7XG4gICAgaWYgKHRoaXMuaW5pdGlhbFBvc2l0aW9uID4gdGhpcy5maW5hbFBvc2l0aW9uKSB7XG4gICAgICAkZXZlbnQudGFyZ2V0LnNldFNlbGVjdGlvblJhbmdlKHRoaXMuZmluYWxQb3NpdGlvbiwgdGhpcy5pbml0aWFsUG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZXZlbnQudGFyZ2V0LnNldFNlbGVjdGlvblJhbmdlKHRoaXMuaW5pdGlhbFBvc2l0aW9uLCB0aGlzLmZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGtleWRvd24oJGV2ZW50OiBhbnkpIHtcbiAgICBpZiAodGhpcy5tYXNrKSB7XG4gICAgICBsZXQgdmFsdWU6IHN0cmluZyA9ICRldmVudC50YXJnZXQudmFsdWU7XG4gICAgICBpZiAoJGV2ZW50LmtleUNvZGUgPT09IDkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoISRldmVudC5jdHJsS2V5ICYmICEkZXZlbnQubWV0YUtleSkge1xuICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gTsOjbyBmYXogbmFkYSBxdWFuZG8gZm9yIGRpZ2l0YWRvIENUUkwgb3UgQ09NTUFORCBlIFZcbiAgICAgIC8vIErDoSBlc3TDoSBzZW5kbyB0cmF0YWRvIG5vIGV2ZW50byBrZXl1cFxuICAgICAgaWYgKCRldmVudC5jdHJsS2V5IHx8ICRldmVudC5tZXRhS2V5ICYmICgkZXZlbnQua2V5Q29kZSAhPT0gODYpIHx8XG4gICAgICAgICgkZXZlbnQua2V5Q29kZSA+PSAzNyAmJiAkZXZlbnQua2V5Q29kZSA8PSA0MCkgfHwgJGV2ZW50LmtleUNvZGUgPT09IDE2IHx8ICRldmVudC5rZXlDb2RlID09PSA5ICkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFZhbGlkYSBhIHRlY2xhIGRpZ2l0YWRhXG4gICAgICBpZiAodGhpcy5pc0tleVZhbGlkKCRldmVudC5rZXlDb2RlKSkge1xuICAgICAgICBpZiAodGhpcy5maW5hbFBvc2l0aW9uID09PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5maW5hbFBvc2l0aW9uID0gdGhpcy5pbml0aWFsUG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXZlcnRQb3NpdGlvbnModGhpcy5pbml0aWFsUG9zaXRpb24sIHRoaXMuZmluYWxQb3NpdGlvbik7XG5cbiAgICAgICAgc3dpdGNoICgkZXZlbnQua2V5Q29kZSkge1xuICAgICAgICAgIGNhc2UgODogLy8gYmFja3NwYWNlXG4gICAgICAgICAgICB0aGlzLmdldFBvc2l0aW9uKCRldmVudCk7XG4gICAgICAgICAgICBpZiAodGhpcy5pbml0aWFsUG9zaXRpb24gPCAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbnMoJGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmluaXRpYWxQb3NpdGlvbiA9PT0gdGhpcy5maW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgIHRoaXMuY2hlY2tNYXNrQmVmb3JlKCRldmVudCwgLTEpO1xuICAgICAgICAgICAgICBpZiAodGhpcy5pbml0aWFsUG9zaXRpb24gIT09IDApIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIHRoaXMuaW5pdGlhbFBvc2l0aW9uIC0gMSkgKyB2YWx1ZS5zbGljZSh0aGlzLmZpbmFsUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5jb250cm9sRm9ybWF0dGluZyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgJGV2ZW50LnRhcmdldC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlUG9zaXRpb24oJGV2ZW50ICwgLTEpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tNYXNrQmVmb3JlKCRldmVudCwgLTEpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb25zKCRldmVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldFBvc2l0aW9ucygkZXZlbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmNsZWFyUmFuZ2VTZWxlY3Rpb24odmFsdWUsICRldmVudCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9ucygkZXZlbnQpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDQ2OiAvLyBkZWxldGVcbiAgICAgICAgICAgIHRoaXMuZ2V0UG9zaXRpb24oJGV2ZW50KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmluaXRpYWxQb3NpdGlvbiA9PT0gdGhpcy5maW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgIHRoaXMuY2hlY2tNYXNrQWZ0ZXIoJGV2ZW50LCAxKTtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCB0aGlzLmluaXRpYWxQb3NpdGlvbikgKyB2YWx1ZS5zbGljZSh0aGlzLmZpbmFsUG9zaXRpb24gKyAxKTtcbiAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmNvbnRyb2xGb3JtYXR0aW5nKHZhbHVlKTtcbiAgICAgICAgICAgICAgJGV2ZW50LnRhcmdldC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9ucygkZXZlbnQpO1xuICAgICAgICAgICAgICB0aGlzLnJlc2V0UG9zaXRpb25zKCRldmVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmNsZWFyUmFuZ2VTZWxlY3Rpb24odmFsdWUsICRldmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbnMoJGV2ZW50KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDogLy8gcXVhbHF1ZXIgb3V0cmEgdGVjbGEgdsOhbGlkYVxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCB0aGlzLmluaXRpYWxQb3NpdGlvbikgKyAkZXZlbnQua2V5ICsgdmFsdWUuc2xpY2UodGhpcy5maW5hbFBvc2l0aW9uKTtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5jb250cm9sRm9ybWF0dGluZyh2YWx1ZSk7XG4gICAgICAgICAgICAkZXZlbnQudGFyZ2V0LnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZVBvc2l0aW9uKCRldmVudCwgMSk7XG4gICAgICAgICAgICB0aGlzLmNoZWNrTWFza0JlZm9yZSgkZXZlbnQsIDEpO1xuICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbnMoJGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMucmVzZXRQb3NpdGlvbnMoJGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb25zKCRldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjbGVhclJhbmdlU2VsZWN0aW9uKHZhbHVlOiBzdHJpbmcsICRldmVudDogYW55LCBpc0JhY2tzcGFjZTogYm9vbGVhbikge1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgdGhpcy5pbml0aWFsUG9zaXRpb24pICsgdmFsdWUuc2xpY2UodGhpcy5maW5hbFBvc2l0aW9uKTtcbiAgICB2YWx1ZSA9IHRoaXMuY29udHJvbEZvcm1hdHRpbmcodmFsdWUpO1xuICAgICRldmVudC50YXJnZXQudmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmIChpc0JhY2tzcGFjZSkge1xuICAgICAgdGhpcy5jaGVja01hc2tCZWZvcmUoJGV2ZW50LCAtMSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRQb3NpdGlvbnMoJGV2ZW50KTtcbiAgICB0aGlzLnJlc2V0UG9zaXRpb25zKCRldmVudCk7XG4gIH1cblxuICAvLyBwYXNzYSBhIHBvc2nDp8OjbyBkbyBjbGljayBwYXJhIG8gY29udHJvbGUgZGUgcG9zacOnw6NvXG4gIGNsaWNrKCRldmVudDogYW55KSB7XG4gICAgdGhpcy5pbml0aWFsUG9zaXRpb24gPSAkZXZlbnQudGFyZ2V0LnNlbGVjdGlvblN0YXJ0O1xuICAgIHRoaXMuZmluYWxQb3NpdGlvbiA9ICRldmVudC50YXJnZXQuc2VsZWN0aW9uRW5kO1xuICB9XG5cbiAgYmx1cigkZXZlbnQ6IGFueSkge1xuICAgIC8vIFNlIGhvdXZlciBhbGd1bSB2YWxvciBkZWZpbmlkbyBuYSBtw6FzY2FyYVxuICAgIGlmICh0aGlzLm1hc2spIHtcbiAgICAgIC8vIHBlZ2EgbyB2YWxvciBkbyBjYW1wbywgZm9ybWF0YSBlIHBhc3NhIHBhcmEgbyBtb2RlbFxuICAgICAgbGV0IHZhbHVlID0gJGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgIHZhbHVlID0gdGhpcy5jb250cm9sRm9ybWF0dGluZyh2YWx1ZSk7XG4gICAgICAkZXZlbnQudGFyZ2V0LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV2ZXJ0UG9zaXRpb25zKGluaXRpYWxQb3NpdGlvbjogbnVtYmVyLCBmaW5hbFBvc2l0aW9uOiBudW1iZXIpIHtcbiAgICBpZiAoaW5pdGlhbFBvc2l0aW9uID4gZmluYWxQb3NpdGlvbikge1xuICAgICAgLy8gaW52ZXJ0ZSBvIGNvbnRyb2xlIGRlIHBvc2nDp8OjbyBjYXNvIG8gaW5pY2lhbCBlc3RlamEgbWFpb3IgcXVlIG8gZmluYWxcbiAgICAgIGxldCB0ZW1wUG9zaXRpb247XG4gICAgICB0ZW1wUG9zaXRpb24gPSBpbml0aWFsUG9zaXRpb247XG4gICAgICB0aGlzLmluaXRpYWxQb3NpdGlvbiA9IGZpbmFsUG9zaXRpb247XG4gICAgICB0aGlzLmZpbmFsUG9zaXRpb24gPSB0ZW1wUG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgLy8gcmVzZXRhIG8gY29udHJvbGUgZGUgcG9zacOnw6NvXG4gIHJlc2V0UG9zaXRpb25zKCRldmVudDogYW55KSB7XG4gICAgdGhpcy5pbml0aWFsUG9zaXRpb24gPSAkZXZlbnQudGFyZ2V0LnNlbGVjdGlvblN0YXJ0O1xuICAgIHRoaXMuZmluYWxQb3NpdGlvbiA9IHRoaXMuaW5pdGlhbFBvc2l0aW9uO1xuICB9XG5cbiAgLy8gcG9zaWNpb25hIG8gY3Vyc29yIGRlIGFjb3JkbyBjb20gbyBjb250cm9sZSBkZSBwb3Npw6fDo29cbiAgc2V0UG9zaXRpb25zKCRldmVudDogYW55KSB7XG4gICAgJGV2ZW50LnRhcmdldC5zZXRTZWxlY3Rpb25SYW5nZSh0aGlzLmluaXRpYWxQb3NpdGlvbiwgdGhpcy5maW5hbFBvc2l0aW9uKTtcbiAgfVxuXG4gIC8vIG11ZGEgYSBwb3Npw6fDo28gZG8gY3Vyc29yIGUgYXR1YWxpemEgbyBjb250cm9sZSBkZSBwb3Npw6fDo29cbiAgY2hhbmdlUG9zaXRpb24oJGV2ZW50OiBhbnksIHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLmluaXRpYWxQb3NpdGlvbiA9IHRoaXMuaW5pdGlhbFBvc2l0aW9uICsgdmFsdWU7XG4gICAgdGhpcy5maW5hbFBvc2l0aW9uID0gdGhpcy5maW5hbFBvc2l0aW9uICsgdmFsdWU7XG4gICAgdGhpcy5zZXRQb3NpdGlvbnMoJGV2ZW50KTtcbiAgfVxuXG4gIGdldFBvc2l0aW9uKCRldmVudDogYW55KSB7XG4gICAgdGhpcy5pbml0aWFsUG9zaXRpb24gPSAkZXZlbnQudGFyZ2V0LnNlbGVjdGlvblN0YXJ0O1xuICAgIHRoaXMuZmluYWxQb3NpdGlvbiA9ICRldmVudC50YXJnZXQuc2VsZWN0aW9uRW5kO1xuICAgIHRoaXMuc2V0UG9zaXRpb25zKCRldmVudCk7XG4gIH1cblxuICAvLyBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgY29udHJvbGFyIGEgZm9ybWF0YcOnw6NvIGUgYXBsaWNhciB0b2RhcyBhcyBtw6FzY2FyYSBwb3Nzw612ZWlzXG4gIC8vIHF1YW5kbyBob3V2ZXIgdmFsb3JlcyBvcGNpb25haXMgKD8pXG4gIGNvbnRyb2xGb3JtYXR0aW5nKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAvLyBTZSBvIHZhbG9yIGZvciB2YXppbywgcmV0b3JuYSB2YXppb1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHRoaXMudmFsdWVUb0lucHV0ID0gJyc7XG4gICAgICB0aGlzLnZhbHVlVG9Nb2RlbCA9ICcnO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBsZXQgdmFsdWVQcm9jZXNzZWQ7XG4gICAgbGV0IG1hc2tUbXAgPSB0aGlzLm1hc2s7XG5cbiAgICAvLyBBcnJheSBxdWUgc2Vyw6EgdXNhZG8gcGFyYSBhcm1hemVuYXIgdG9kYXMgYXMgbcOhc2NhcmFzIHBvc3PDrXZlaXMgcGFyYVxuICAgIC8vIHF1YW5kbyBob3V2ZXIgdW0gdmFsb3Igb3BjaW9uYWwgKD8pXG4gICAgY29uc3QgYXJyTWFza3M6IEFycmF5PGFueT4gPSBbXTtcbiAgICBsZXQgY29udE1hc2tzID0gMDtcblxuICAgIC8vIEVucXVhbnRvIGhvdXZlciBhbGd1bSA5PyBuYSBtw6FzY2FyYVxuICAgIHdoaWxlICh0aGlzLmhhc09wdGlvbmFsTnVtYmVyKG1hc2tUbXApKSB7XG4gICAgICBhcnJNYXNrcy5wdXNoKG1hc2tUbXApO1xuICAgICAgbWFza1RtcCA9IHRoaXMucmVwbGFjZU9wdGlvbmFsTnVtYmVyKG1hc2tUbXApO1xuICAgIH1cbiAgICBhcnJNYXNrcy5wdXNoKG1hc2tUbXApO1xuXG4gICAgLy8gSW52ZXJ0ZSBvIGFycmF5XG4gICAgYXJyTWFza3MucmV2ZXJzZSgpO1xuXG4gICAgLy8gSW5mb3JtYSBxdWUgYSBmb3JtYXRhw6fDo28gYWluZGEgbsOjbyBjaGVnb3UgYW8gZmltXG4gICAgdGhpcy5mb3JtYXR0aW5nRW5kcyA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKCF0aGlzLmZvcm1hdHRpbmdFbmRzKSB7XG4gICAgICAvLyBTZXRhIGEgZm9ybWF0YcOnw6NvIGNvbW8gdGVybWluYWRhXG4gICAgICAvLyBFbnTDo28gbyBtw6l0b2RvIGZvcm1hdFZhbHVlIGlyw6Egc2V0YXIgY29tbyBuw6NvIHRlcm1pbmFkbyBjYXNvIGhhamFcbiAgICAgIHRoaXMuZm9ybWF0dGluZ0VuZHMgPSB0cnVlO1xuXG4gICAgICAvLyBTZSBuw6NvIGV4aXN0ZSBtYWlzIG5lbmh1bWEgbcOhc2NhcmEgcG9zc8OtdmVsLCBlbnTDo28gZW5jZXJyYSBhIGZvcm1hdGHDp8Ojb1xuICAgICAgaWYgKCFhcnJNYXNrc1tjb250TWFza3NdKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGFtYSBhIGZvcm1hdGHDp8OjbyBwYXNzYW5kbyBhIG3DoXNjYXJhIGUgbyB2YWxvclxuICAgICAgdmFsdWVQcm9jZXNzZWQgPSB0aGlzLmZvcm1hdFZhbHVlKHZhbHVlLCBhcnJNYXNrc1tjb250TWFza3NdKTtcbiAgICAgIGNvbnRNYXNrcysrO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZVByb2Nlc3NlZDtcbiAgfVxuXG4gIC8vIEZ1bsOnw6NvIHF1ZSBmb3JtYXRhIGEgbcOhc2NhcmEgY29tIG8gdmFsb3IgcGFzc2Fkb1xuICBmb3JtYXRWYWx1ZSh2YWx1ZTogc3RyaW5nLCBtYXNrOiBzdHJpbmcpIHtcblxuICAgIC8vIFJlbW92ZSBhcyBtYXJjYXMgZGUgdmFsb3Igb3BjaW9uYSAoPylcbiAgICBtYXNrID0gbWFzay5yZXBsYWNlKC9cXD8vZywgJycpO1xuXG4gICAgLy8gU3Vic3RpdHVpIHRvZG9zIG9zIGNhcmFjdGVyZXMgcXVlIG7Do28gc8OjbyBmaXhvcyBkYSBtw6FzY2FyYSBwb3IgX1xuICAgIGNvbnN0IGd1aWRlID0gbWFzay5yZXBsYWNlKHRoaXMubGlzdFZhbGlkS2V5cygpLCAnXycpO1xuXG4gICAgLy8gQ29udGFkb3IgdXNhZG8gcGFyYSBwZXJjb3JyZXIgbyBndWlkZVxuICAgIGxldCBjb250R3VpZGU6IG51bWJlciA9IDA7XG5cbiAgICAvLyBTdHJpbmcgZmluYWwgZm9ybWF0YWRhXG4gICAgbGV0IHZhbHVlUHJvY2Vzc2VkOiBzdHJpbmcgPSAnJztcblxuICAgIC8vIFJlbW92ZSBkbyB2YWxvciB0b2RvcyBvcyBjYXJhY3RlcmVzIGZpeG9zIGNvbW8gKCkvLStcbiAgICB2YWx1ZSA9IHRoaXMucmVtb3ZlRm9ybWF0dGluZ1ZhbHVlKHZhbHVlKTtcblxuICAgIC8vIFBlcmNvcnJlIHRvZG8gbyB2YWxvciBlIGNvbG9jYSBhIGZvcm1hdGHDp8OjbyBkZSBhY29yZG8gY29tIGEgbcOhc2NhcmFcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjaGFyVmFsdWUgPSB2YWx1ZVtpXTtcblxuICAgICAgLy8gU2UgbyBndWlkZSBhY2Fib3UsIHNldGEgYSBmb3JtYXRhw6fDo28gY29tbyBuw6NvIHRlcm1pbmFkYSBwYXJhIHF1ZSBvIG3DqXRvZG8gY29udHJvbEZvcm1hdHRpbmdcbiAgICAgIC8vIHRlbnRlIGZvcm1hdGFyIGNvbSBvdXRyYSBwb3Nzw612ZWwgbcOhc2NhcmFcbiAgICAgIGlmICghZ3VpZGVbY29udEd1aWRlXSkge1xuICAgICAgICB0aGlzLmZvcm1hdHRpbmdFbmRzID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBQZXJjb3JyZSBvIEd1aWRlIGVucXVhbnRvIHRlbSBjYXJhY3RlcmVzIGZpeG9zXG4gICAgICB3aGlsZSAodGhpcy5pc0ZpeGVkQ2hhcmFjdGVyR3VpZGUoZ3VpZGVbY29udEd1aWRlXSkgJiYgZ3VpZGVbY29udEd1aWRlXSkge1xuICAgICAgICB2YWx1ZVByb2Nlc3NlZCArPSBndWlkZVtjb250R3VpZGVdO1xuICAgICAgICBjb250R3VpZGUrKztcbiAgICAgIH1cblxuICAgICAgLy8gw4kgdW0gY2FyYWN0ZXIgdsOhbGlkbyBkZSBhY29yZG8gY29tIGEgbcOhc2NhcmFcbiAgICAgIGlmICh0aGlzLmlzS2V5VmFsaWRNYXNrKGNoYXJWYWx1ZSwgbWFza1tjb250R3VpZGVdKSkge1xuICAgICAgICB2YWx1ZVByb2Nlc3NlZCArPSBjaGFyVmFsdWU7XG4gICAgICAgIGNvbnRHdWlkZSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2UgbsOjbyDDqSB1bSBjYXJhY3RlciB2w6FsaWRvLCBkZXZlIGludGVycm9tcGVyLlxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5mb3JtYXRNb2RlbCkge1xuICAgICAgdGhpcy52YWx1ZVRvSW5wdXQgPSB2YWx1ZVByb2Nlc3NlZDtcbiAgICAgIHRoaXMudmFsdWVUb01vZGVsID0gdmFsdWVQcm9jZXNzZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsdWVUb0lucHV0ID0gdmFsdWVQcm9jZXNzZWQ7XG4gICAgICB0aGlzLnZhbHVlVG9Nb2RlbCA9IHRoaXMucmVtb3ZlRm9ybWF0dGluZ1ZhbHVlKHZhbHVlUHJvY2Vzc2VkKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlUHJvY2Vzc2VkO1xuICB9XG4gIC8vIHZlcmlmaWNhIHNlIHRlbSBhbGd1bSBjYXJhY3RlciBkZSBtYXNjYXJhIGFudGVzIGRvIGN1cnNvclxuICBjaGVja01hc2tCZWZvcmUoJGV2ZW50OiBhbnksIHBvc2l0aW9uOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5pc0ZpeGVkQ2hhcmFjdGVyR3VpZGUoJGV2ZW50LnRhcmdldC52YWx1ZS50b1N0cmluZygpLmNoYXJBdCh0aGlzLmluaXRpYWxQb3NpdGlvbiAtIDEpKSkge1xuICAgICAgdGhpcy5jaGFuZ2VQb3NpdGlvbigkZXZlbnQsIHBvc2l0aW9uKTtcbiAgICAgIHRoaXMuY2hlY2tNYXNrQmVmb3JlKCRldmVudCwgcG9zaXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIC8vIHZlcmlmaWNhIHNlIHRlbSBhbGd1bSBjYXJhY3RlciBkZSBtYXNjYXJhIGRlcG9pcyBkbyBjdXJzb3JcbiAgY2hlY2tNYXNrQWZ0ZXIoJGV2ZW50OiBhbnksIHBvc2l0aW9uOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5pc0ZpeGVkQ2hhcmFjdGVyR3VpZGUoJGV2ZW50LnRhcmdldC52YWx1ZS50b1N0cmluZygpLmNoYXJBdCh0aGlzLmluaXRpYWxQb3NpdGlvbikpKSB7XG4gICAgICB0aGlzLmNoYW5nZVBvc2l0aW9uKCRldmVudCwgcG9zaXRpb24pO1xuICAgICAgdGhpcy5jaGVja01hc2tBZnRlcigkZXZlbnQsIHBvc2l0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXRvcm5hIGEgbcOhc2NhcmEgc2VtIHVtIHZhbG9yIG9wY2lvbmFsXG4gIHJlcGxhY2VPcHRpb25hbE51bWJlcihtYXNrOiBzdHJpbmcpIHtcbiAgICBsZXQgaSA9IDk7XG4gICAgd2hpbGUgKGkgPj0gMCkge1xuICAgICAgaWYgKG1hc2suaW5kZXhPZihpICsgJz8nKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiBtYXNrLnJlcGxhY2UoaSArICc/JywgJycpO1xuICAgICAgfVxuICAgICAgaS0tO1xuICAgIH1cbiAgICByZXR1cm4gbWFzaztcbiAgfVxuXG4gIC8vIFZlcmlmaWNhIHNlIGNvbnTDqW0gY2FyYWN0ZXJlcyBwZXJtaXRpZG9zIHNvbWVudGUgbmEgbcOhc2NhcmEgXFwvKCkgKy1cbiAgaXNGaXhlZENoYXJhY3Rlckd1aWRlKGtleTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMudGVzdFJlZ2V4KGtleSwgdGhpcy5nZXRGaXhlZENoYXJhY3Rlckd1aWRlKCkpO1xuICB9XG5cbiAgLy8gUmV0b3JuYSBjYXJhY3RlcmVzIHBlcm1pdGlkb3Mgc29tZW50ZSBuYSBtw6FzY2FyYSBcXC8oKSArLVxuICBnZXRGaXhlZENoYXJhY3Rlckd1aWRlKCkge1xuICAgIHJldHVybiAvW1xcXFxcXC8oKSArLS5cXDpdL2c7XG4gIH1cblxuICAvLyBDYXJhY3RlcmVzIHBlcm1pdGlkb3MgZGUgc2VyZW0gZGlnaXRhZG9zXG4gIGxpc3RWYWxpZEtleXMoKSB7XG4gICAgcmV0dXJuIC9bYS16QS1aMC05XS9nO1xuICB9XG5cbiAgLy8gU2Ugw6kgdW0gZMOtZ2l0byB2w6FsaWRvXG4gIGlzS2V5VmFsaWQoa2V5Q29kZTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNLZXlDb2RlVmFsaWQoa2V5Q29kZSk7XG4gIH1cblxuICAvLyBWZXJpZmljYSBzZSBhIHRlY2xhIGRpZ2l0YWRhIMOpIHBlcm1pdGlkYVxuICAvLyBQZXJtaXRlIGFwZW5hcyBuw7ptZXJvcywgbGV0cmFzLCBiYWNrc3BhY2UgZSBkZWxcbiAgaXNLZXlDb2RlVmFsaWQoa2V5Q29kZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIChrZXlDb2RlID49IDQ4ICYmIGtleUNvZGUgPD0gNTcpIHx8XG4gICAgICAoa2V5Q29kZSA+PSA2NSAmJiBrZXlDb2RlIDw9IDkwKSB8fFxuICAgICAgKGtleUNvZGUgPj0gOTYgJiYga2V5Q29kZSA8PSAxMDUpIHx8XG4gICAgICAoa2V5Q29kZSA9PT0gOCkgfHwga2V5Q29kZSA9PT0gOSB8fFxuICAgICAgKGtleUNvZGUgPT09IDQ2KVxuICAgICk7XG4gIH1cblxuICAvLyBTZSBlc3TDoSBkZSBhY29yZG8gY29tIGEgbcOhc2NhcmFcbiAgaXNLZXlWYWxpZE1hc2soa2V5OiBhbnksIGtleU1hc2s6IGFueSkge1xuICAgIHJldHVybiB0aGlzLnRlc3RSZWdleChrZXksIHRoaXMucmVwbGFjZU1hc2soa2V5TWFzaykpO1xuICB9XG5cbiAgLy8gUmV0b3JuYSBzZSBhIGNoYXZlIGZvaSBhcHJvdmFkYSBwZWxhIGV4cHJlc3PDo28gcmVndWxhclxuICB0ZXN0UmVnZXgoa2V5OiBhbnksIHJlZ2V4OiBhbnkpIHtcbiAgICByZXR1cm4gcmVnZXgudGVzdChrZXkpO1xuICB9XG5cbiAgLy8gUmVtb3ZlIGEgZm9ybWF0YWPDo28gZG8gdmFsb3JcbiAgLy8gw4kgcG9zc8OtdmVsIHNlciBtZWxob3JhZG8gcGFyYSByZW1vdmVyIHBvbnR1YWxtZW50ZSBvcyBjYXJhY3RlcmVzIGZpeG9zIGRlIGFjb3JkbyBjb20gYSBtw6FzY2FyYVxuICByZW1vdmVGb3JtYXR0aW5nVmFsdWUodmFsdWU6IHN0cmluZykge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKHRoaXMuZ2V0Rml4ZWRDaGFyYWN0ZXJHdWlkZSgpLCAnJyk7XG4gIH1cblxuICAvLyBWZXJpZmljYSBzZSBjb250w6ltIHZhbG9yIG9wY2lvbmFsIG5hIG3DoXNjYXJhIDAtOT9cbiAgaGFzT3B0aW9uYWxOdW1iZXIobWFzazogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG1hc2subWF0Y2goL1xcZFxcPy9nKTtcbiAgfVxuXG4gIC8vIFJldG9ybmEgYSBleHByZXNzw6NvIHJlZ3VsYXIgY29ycmVzcG9uZGVudGUgYW8gY29tYW5kbyBwYXNzYWRvXG4gIHJlcGxhY2VNYXNrKGNoYXI6IHN0cmluZykge1xuICAgIGxldCByZWdleCA9IC8uLztcbiAgICBzd2l0Y2ggKGNoYXIpIHtcbiAgICAgIGNhc2UgJzAnOiByZWdleCA9IC9bMF0vO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnMSc6IHJlZ2V4ID0gL1swLTFdLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzInOiByZWdleCA9IC9bMC0yXS87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICczJzogcmVnZXggPSAvWzAtM10vO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnNCc6IHJlZ2V4ID0gL1swLTRdLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzUnOiByZWdleCA9IC9bMC01XS87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc2JzogcmVnZXggPSAvWzAtNl0vO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnNyc6IHJlZ2V4ID0gL1swLTddLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzgnOiByZWdleCA9IC9bMC04XS87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc5JzogcmVnZXggPSAvWzAtOV0vO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnICc6IHJlZ2V4ID0gL1xccy87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdAJzogcmVnZXggPSAvW2EtekEtWl0vO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndyc6IHJlZ2V4ID0gL1thLXpBLVowLTldLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHJlZ2V4O1xuICB9XG5cbiAgZ2V0UmVnZXhGcm9tTWFzayhtYXNrOiBzdHJpbmcpIHtcbiAgICBpZiAobWFzaykge1xuICAgICAgbGV0IHBhdHRlcm47XG4gICAgICBpZiAodGhpcy5mb3JtYXRNb2RlbCkge1xuICAgICAgICBwYXR0ZXJuID0gbWFzay5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpO1xuICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC9cXCsvZywgJ1xcXFwrJyk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoL1xcLi9nLCAnXFxcXC4nKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvLS9nLCAnLScpO1xuICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC9cXCgvZywgJ1xcXFwoJyk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoL1xcKS9nLCAnXFxcXCknKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvXFwvL2csICdcXFxcLycpO1xuICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC9cXHMvZywgJ1xcXFxzJyk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoLzovZywgJ1xcXFw6Jyk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoL1xcQCg/IVxccykvZywgJ1xcXFx3Jyk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoL1xcZC9nLCAnXFxcXHcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhdHRlcm4gPSBtYXNrLnJlcGxhY2UoL1xcXFwvZywgJycpO1xuICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC9cXCsvZywgJycpO1xuICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC9cXC4vZywgJycpO1xuICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC8tL2csICcnKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvXFwoL2csICcnKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvXFwpL2csICcnKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvXFwvL2csICcnKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvXFxzL2csICcnKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvOi9nLCAnJyk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoL1xcQC9nLCAnXFxcXHcnKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvXFxkL2csICdcXFxcdycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhdHRlcm47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=