/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ThfDatepickerRangeBaseComponent } from './thf-datepicker-range-base.component';
import { ThfDateService } from './../../../services/thf-date/thf-date.service';
import { ThfMask } from '../thf-input/thf-mask';
/** @type {?} */
var arrowLeftKey = 37;
/** @type {?} */
var arrowRightKey = 39;
/** @type {?} */
var backspaceKey = 8;
/** @type {?} */
var thfDatepickerRangeDateLengthDefault = 10;
/**
 * \@docsExtends ThfDatepickerRangeBaseComponent
 *
 * \@example
 *
 * <example name="thf-datepicker-range-basic" title="Totvs Datepicker Range Basic">
 *  <file name="sample-thf-datepicker-range-basic/sample-thf-datepicker-range-basic.component.html"> </file>
 *  <file name="sample-thf-datepicker-range-basic/sample-thf-datepicker-range-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-datepicker-range-labs" title="Totvs Datepicker Range Labs">
 *  <file name="sample-thf-datepicker-range-labs/sample-thf-datepicker-range-labs.component.html"> </file>
 *  <file name="sample-thf-datepicker-range-labs/sample-thf-datepicker-range-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-datepicker-range-vacations" title="Totvs Datepicker Range - Vacations Suggestion">
 *  <file name="sample-thf-datepicker-range-vacations/sample-thf-datepicker-range-vacations.component.html"> </file>
 *  <file name="sample-thf-datepicker-range-vacations/sample-thf-datepicker-range-vacations.component.ts"> </file>
 * </example>
 *
 * <example name="thf-datepicker-range-vacations-reactive-form" title="Totvs Datepicker Range - Vacations Reactive Form">
 *  <file name="sample-thf-datepicker-range-vacations-reactive-form/sample-thf-datepicker-range-vacations-reactive-form.component.html">
 *  </file>
 *  <file name="sample-thf-datepicker-range-vacations-reactive-form/sample-thf-datepicker-range-vacations-reactive-form.component.ts">
 *  </file>
 * </example>
 */
var ThfDatepickerRangeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfDatepickerRangeComponent, _super);
    function ThfDatepickerRangeComponent(thfDateService, thfDatepickerRangeElement) {
        var _this = _super.call(this, thfDateService) || this;
        _this.thfDatepickerRangeElement = thfDatepickerRangeElement;
        return _this;
    }
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "enableCleaner", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.startDateInputValue || this.endDateInputValue) && !this.disabled && !this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "endDateInputName", {
        get: /**
         * @return {?}
         */
        function () {
            return 'end-date';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "endDateInputValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.endDateInput.nativeElement.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "getErrorMessage", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.errorMessage !== '' && this.hasInvalidClass()) ? this.errorMessage : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "isDateRangeInputUncompleted", {
        get: /**
         * @return {?}
         */
        function () {
            return this.endDateInputValue.length < thfDatepickerRangeDateLengthDefault
                && this.startDateInputValue.length < thfDatepickerRangeDateLengthDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "isDirtyDateRangeInput", {
        get: /**
         * @return {?}
         */
        function () {
            return this.endDateInputValue.length > 0 || this.startDateInputValue.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "startDateInputName", {
        get: /**
         * @return {?}
         */
        function () {
            return 'start-date';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfDatepickerRangeComponent.prototype, "startDateInputValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.startDateInput.nativeElement.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDatepickerRangeComponent.getKeyCode = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.keyCode || event.which;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDatepickerRangeComponent.getTargetElement = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.target || event.srcElement;
    };
    /**
     * @param {?} keyCode
     * @return {?}
     */
    ThfDatepickerRangeComponent.isValidKey = /**
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        /** @type {?} */
        var isNumericKey = keyCode >= 48 && keyCode <= 57;
        /** @type {?} */
        var isNumericNumpadKey = keyCode >= 96 && keyCode <= 105;
        return isNumericKey || isNumericNumpadKey;
    };
    /**
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Classe de mÃ¡scara
        this.thfMaskObject = this.buildMask();
    };
    /**
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.resetDateRangeInputValidation();
        this.dateRange = { start: '', end: '' };
        this.updateScreenByModel(this.dateRange);
        this.updateModel(this.dateRange);
    };
    /**
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.removeFocusFromDatePickerRangeField();
    };
    /**
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        this.applyFocusOnDatePickerRangeField();
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.onKeydown = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        if (this.readonly) {
            return;
        }
        if (this.isSetFocusOnBackspace(event)) {
            event.preventDefault();
            this.setFocusOnBackspace();
        }
        else {
            this.thfMaskObject.keydown(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.onKeyup = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.readonly) {
            return;
        }
        /** @type {?} */
        var isStartDateTargetEvent = event.target.name === this.startDateInputName;
        this.setFocus(event);
        this.thfMaskObject.keyup(event);
        this.updateModelByScreen(isStartDateTargetEvent);
    };
    /**
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.resetDateRangeInputValidation = /**
     * @return {?}
     */
    function () {
        this.isStartDateRangeInputValid = true;
        this.isDateRangeInputFormatValid = true;
    };
    /**
     * @param {?} model
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.updateScreenByModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        var _this = this;
        /** @type {?} */
        var dateRange = { start: (/** @type {?} */ (model.start)), end: (/** @type {?} */ (model.end)) };
        /** @type {?} */
        var isStartDateValid = this.thfDateService.isDateRangeValid(dateRange.end, dateRange.start);
        /** @type {?} */
        var isDateValid = (/**
         * @param {?} date
         * @return {?}
         */
        function (date) { return !_this.dateFormatFailed(date) && isStartDateValid; });
        /** @type {?} */
        var endDateFormated = isDateValid(dateRange.end) ? this.formatModelToScreen(dateRange.end) : '';
        /** @type {?} */
        var startDateFormated = isDateValid(dateRange.start) ? this.formatModelToScreen(dateRange.start) : '';
        this.endDateInput.nativeElement.value = endDateFormated;
        this.startDateInput.nativeElement.value = startDateFormated;
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.applyFocusOnDatePickerRangeField = /**
     * @private
     * @return {?}
     */
    function () {
        this.dateRangeField.nativeElement.classList.add('thf-datepicker-range-field-focused');
    };
    // Retorna um objeto do tipo ThfMask com a mascara configurada.
    // Retorna um objeto do tipo ThfMask com a mascara configurada.
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.buildMask = 
    // Retorna um objeto do tipo ThfMask com a mascara configurada.
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var mask = this.format.toUpperCase();
        mask = mask.replace(/DD/g, '99');
        mask = mask.replace(/MM/g, '99');
        mask = mask.replace(/YYYY/g, '9999');
        return new ThfMask(mask, true);
    };
    /**
     * @private
     * @param {?} format
     * @param {?=} day
     * @param {?=} month
     * @param {?=} year
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.formatDate = /**
     * @private
     * @param {?} format
     * @param {?=} day
     * @param {?=} month
     * @param {?=} year
     * @return {?}
     */
    function (format, day, month, year) {
        if (day === void 0) { day = ''; }
        if (month === void 0) { month = ''; }
        if (year === void 0) { year = ''; }
        /** @type {?} */
        var dateFormatted = format;
        day = day && day.includes('T') ? day.slice(0, 2) : day;
        dateFormatted = dateFormatted.replace('dd', ('0' + day).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (month)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', String(year));
        return dateFormatted;
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.formatScreenToModel = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        var _a = tslib_1.__read(value.split('/'), 3), day = _a[0], month = _a[1], year = _a[2];
        return value ? this.formatDate('yyyy-mm-dd', day, month, year) : '';
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.formatModelToScreen = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        var _a = tslib_1.__read(value.split('-'), 3), year = _a[0], month = _a[1], day = _a[2];
        return value ? this.formatDate(this.format, day, month, year) : '';
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.getDateRangeFormatValidation = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    function (startDate, endDate, isStartDateTargetEvent) {
        this.setDateRangeInputValidation(startDate, endDate);
        return {
            isValid: this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid,
            dateRangeModel: this.getValidatedModel(startDate, endDate, isStartDateTargetEvent)
        };
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.getValidatedModel = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    function (startDate, endDate, isStartDateTargetEvent) {
        /** @type {?} */
        var dateRangeModel = { start: '', end: '' };
        dateRangeModel.end = (isStartDateTargetEvent || this.isStartDateRangeInputValid)
            && !this.dateFormatFailed(endDate) ? endDate : '';
        dateRangeModel.start = (!isStartDateTargetEvent || this.isStartDateRangeInputValid)
            && !this.dateFormatFailed(startDate) ? startDate : '';
        return dateRangeModel;
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.hasInvalidClass = /**
     * @private
     * @return {?}
     */
    function () {
        return (this.thfDatepickerRangeElement.nativeElement.classList.contains('ng-invalid') &&
            this.thfDatepickerRangeElement.nativeElement.classList.contains('ng-dirty'));
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.isEqualBeforeValue = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        return this.isDateRangeInputFormatValid && endDate === this.dateRange.end && startDate === this.dateRange.start;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.isSetFocusOnBackspace = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.target.name === this.endDateInputName &&
            this.endDateInput.nativeElement.selectionStart === 0 && this.endDateInput.nativeElement.selectionEnd === 0 &&
            event.keyCode === backspaceKey;
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.removeFocusFromDatePickerRangeField = /**
     * @private
     * @return {?}
     */
    function () {
        this.dateRangeField.nativeElement.classList.remove('thf-datepicker-range-field-focused');
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.setDateRangeInputValidation = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        this.isStartDateRangeInputValid = this.thfDateService.isDateRangeValid(endDate, startDate);
        this.isDateRangeInputFormatValid = !this.dateFormatFailed(startDate) && !this.dateFormatFailed(endDate);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.setFocus = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var inputElement = ThfDatepickerRangeComponent.getTargetElement(event);
        /** @type {?} */
        var keyCode = ThfDatepickerRangeComponent.getKeyCode(event);
        /** @type {?} */
        var inputName = inputElement['name'];
        this.setFocusOnArrowLeft(keyCode, inputName);
        this.setFocusOnArrowRight(keyCode, inputName, inputElement);
        this.setFocusOnStartDateCompleted(keyCode, inputName);
    };
    /**
     * @private
     * @param {?} position
     * @param {?} inputElement
     * @param {?} selectionRange
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.setFocusAndPosition = /**
     * @private
     * @param {?} position
     * @param {?} inputElement
     * @param {?} selectionRange
     * @return {?}
     */
    function (position, inputElement, selectionRange) {
        var _this = this;
        this.focusOnElement(inputElement);
        setTimeout((/**
         * @return {?}
         */
        function () {
            inputElement.nativeElement.setSelectionRange(selectionRange, selectionRange);
            _this.thfMaskObject.initialPosition = position;
            _this.thfMaskObject.finalPosition = position;
        }));
    };
    /**
     * @private
     * @param {?} inputElement
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.focusOnElement = /**
     * @private
     * @param {?} inputElement
     * @return {?}
     */
    function (inputElement) {
        inputElement.nativeElement.focus();
    };
    /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.setFocusOnArrowLeft = /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @return {?}
     */
    function (keyCode, inputName) {
        /** @type {?} */
        var isCursorAtStartOfInput = this.endDateInput.nativeElement.selectionStart === 0;
        if (inputName === this.endDateInputName && isCursorAtStartOfInput && keyCode === arrowLeftKey) {
            /** @type {?} */
            var inputLength = this.startDateInput.nativeElement.value.length;
            this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
        }
    };
    /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @param {?} inputElement
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.setFocusOnArrowRight = /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @param {?} inputElement
     * @return {?}
     */
    function (keyCode, inputName, inputElement) {
        /** @type {?} */
        var isCursorAtEndOfInput = this.startDateInput.nativeElement.selectionStart === inputElement.value.length;
        if (inputName === this.startDateInputName && isCursorAtEndOfInput && keyCode === arrowRightKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.setFocusOnBackspace = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var inputLength = this.startDateInput.nativeElement.value.length;
        this.startDateInput.nativeElement.value = this.startDateInputValue.slice(0, -1);
        this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
    };
    /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.setFocusOnStartDateCompleted = /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @return {?}
     */
    function (keyCode, inputName) {
        /** @type {?} */
        var isLastKeyPressed = this.startDateInput.nativeElement.selectionStart === thfDatepickerRangeDateLengthDefault;
        /** @type {?} */
        var isNewDateCompleted = this.startDateInputValue.length === thfDatepickerRangeDateLengthDefault && isLastKeyPressed;
        /** @type {?} */
        var isValidKey = ThfDatepickerRangeComponent.isValidKey(keyCode);
        if (inputName === this.startDateInputName && isNewDateCompleted && isValidKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    };
    /**
     * @private
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    ThfDatepickerRangeComponent.prototype.updateModelByScreen = /**
     * @private
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    function (isStartDateTargetEvent) {
        /** @type {?} */
        var endDateFormatted = this.formatScreenToModel(this.endDateInputValue);
        /** @type {?} */
        var startDateFormatted = this.formatScreenToModel(this.startDateInputValue);
        if (this.isDateRangeInputUncompleted && this.isDirtyDateRangeInput) {
            this.updateModel(this.dateRange);
            return;
        }
        if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
            this.resetDateRangeInputValidation();
            this.validateModel(this.dateRange);
            return;
        }
        /** @type {?} */
        var dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
        if (dateFormatValidation.isValid) {
            this.dateRange = { start: startDateFormatted, end: endDateFormatted };
            this.updateModel(this.dateRange);
            this.onChange.emit(tslib_1.__assign({}, this.dateRange));
        }
        if (!dateFormatValidation.isValid) {
            this.dateRange = tslib_1.__assign({}, dateFormatValidation.dateRangeModel);
            this.updateModel(dateFormatValidation.dateRangeModel);
        }
    };
    ThfDatepickerRangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-datepicker-range',
                    template: "<thf-field-container\n  [t-help]=\"help\"\n  [t-label]=\"label\"\n  [t-optional]=\"!required && optional\">\n\n  <div\n    #dateRangeField\n    class=\"thf-datepicker-range-field thf-input\"\n    [class.thf-datepicker-range-field-disabled]=\"disabled\">\n\n    <div class=\"thf-datepicker-range-start-date\">\n      <input\n        #startDateInput\n        class=\"thf-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [disabled]=\"disabled\"\n        [name]=\"startDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur()\"\n        (focus)=\"onFocus()\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\">\n    </div>\n\n    <div class=\"thf-datepicker-range-separator\">-</div>\n\n    <div class=\"thf-datepicker-range-end-date\">\n      <input\n        #endDateInput\n        class=\"thf-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [disabled]=\"disabled\"\n        [name]=\"endDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur()\"\n        (focus)=\"onFocus()\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\">\n    </div>\n\n    <div class=\"thf-datepicker-range-icon\">\n      <thf-clean *ngIf=\"enableCleaner\" (t-change-event)=\"clear($event)\"></thf-clean>\n    </div>\n\n    <div class=\"thf-datepicker-range-icon\">\n      <span\n        class=\"thf-icon thf-field-icon thf-icon-calendar\"\n        [class.thf-field-icon-disabled]=\"disabled || readonly\">\n      </span>\n    </div>\n\n  </div>\n\n  <thf-field-container-bottom [t-error-pattern]=\"getErrorMessage\"></thf-field-container-bottom>\n</thf-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ThfDatepickerRangeComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ThfDatepickerRangeComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    ThfDatepickerRangeComponent.ctorParameters = function () { return [
        { type: ThfDateService },
        { type: ElementRef }
    ]; };
    ThfDatepickerRangeComponent.propDecorators = {
        dateRangeField: [{ type: ViewChild, args: ['dateRangeField', { read: ElementRef, static: true },] }],
        endDateInput: [{ type: ViewChild, args: ['endDateInput', { read: ElementRef, static: true },] }],
        startDateInput: [{ type: ViewChild, args: ['startDateInput', { read: ElementRef, static: true },] }]
    };
    return ThfDatepickerRangeComponent;
}(ThfDatepickerRangeBaseComponent));
export { ThfDatepickerRangeComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerRangeComponent.prototype.thfDatepickerRangeElement;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerRangeComponent.prototype.thfMaskObject;
    /** @type {?} */
    ThfDatepickerRangeComponent.prototype.dateRangeField;
    /** @type {?} */
    ThfDatepickerRangeComponent.prototype.endDateInput;
    /** @type {?} */
    ThfDatepickerRangeComponent.prototype.startDateInput;
}
//# sourceMappingURL=data:application/json;base64,