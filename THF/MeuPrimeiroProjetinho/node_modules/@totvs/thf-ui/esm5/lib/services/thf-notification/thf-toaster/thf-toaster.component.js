/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { ThfToasterBaseComponent } from './thf-toaster-base.component';
import { ThfToasterType } from './thf-toaster-type.enum';
import { ThfToasterOrientation } from './thf-toaster-orientation.enum';
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfToasterBaseComponent
 */
var ThfToasterComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfToasterComponent, _super);
    function ThfToasterComponent(changeDetector, elementeRef) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.elementeRef = elementeRef;
        /* Margem do Toaster referênte à sua orientação e posição*/
        _this.margin = 20;
        /* Observable para monitorar o Close to Toaster */
        _this.observableOnClose = new Subject();
        /* Mostra ou oculta o Toaster */
        _this.showToaster = true;
        /* Posição do Toaster*/
        _this.toasterPosition = 'thf-toaster-bottom';
        return _this;
    }
    /* Muda a posição do Toaster na tela*/
    /* Muda a posição do Toaster na tela*/
    /**
     * @param {?} position
     * @return {?}
     */
    ThfToasterComponent.prototype.changePosition = /* Muda a posição do Toaster na tela*/
    /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.elementeRef.nativeElement.style.display = 'table';
        this.margin = 6 + (44 * (position)) + position * 6;
        if (this.orientation === ThfToasterOrientation.Top) {
            this.toaster.nativeElement.style.top = this.margin + 'px';
        }
        else {
            this.toaster.nativeElement.style.bottom = this.margin + 'px';
        }
    };
    /* Fecha o componente Toaster */
    /* Fecha o componente Toaster */
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.close = /* Fecha o componente Toaster */
    /**
     * @return {?}
     */
    function () {
        this.showToaster = false;
        this.observableOnClose.next(true);
    };
    /* Configura o Toaster com os atributos passados para ele */
    /* Configura o Toaster com os atributos passados para ele */
    /**
     * @param {?} thfToaster
     * @return {?}
     */
    ThfToasterComponent.prototype.configToaster = /* Configura o Toaster com os atributos passados para ele */
    /**
     * @param {?} thfToaster
     * @return {?}
     */
    function (thfToaster) {
        this.type = thfToaster.type;
        this.message = thfToaster.message;
        this.orientation = thfToaster.orientation;
        this.position = thfToaster.position;
        this.action = thfToaster.action;
        this.actionLabel = (thfToaster.actionLabel) ? thfToaster.actionLabel : 'Fechar';
        this.componentRef = thfToaster.componentRef;
        /* Muda a orientação do Toaster */
        if (this.orientation === ThfToasterOrientation.Top) {
            this.toasterPosition = 'thf-toaster-top';
        }
        /* Muda a posição do Toaster */
        this.changePosition(this.position);
        /* Switch para o tipo de Toaster */
        switch (this.type) {
            case ThfToasterType.Error: {
                this.toasterType = 'thf-toaster-error';
                this.icon = 'thf-icon-close';
                break;
            }
            case ThfToasterType.Information: {
                this.toasterType = 'thf-toaster-info';
                this.icon = 'thf-icon-info';
                break;
            }
            case ThfToasterType.Success: {
                this.toasterType = 'thf-toaster-success';
                this.icon = 'thf-icon-ok';
                break;
            }
            case ThfToasterType.Warning: {
                this.toasterType = 'thf-toaster-warning';
                this.icon = 'thf-icon-warning';
                break;
            }
        }
        this.changeDetector.detectChanges();
    };
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.getShowToaster = /**
     * @return {?}
     */
    function () {
        return this.showToaster;
    };
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.getIcon = /**
     * @return {?}
     */
    function () {
        return this.icon;
    };
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.getToasterPosition = /**
     * @return {?}
     */
    function () {
        return this.toasterPosition;
    };
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.getToasterType = /**
     * @return {?}
     */
    function () {
        return this.toasterType;
    };
    /* Chama a função passada pelo atributo `action` */
    /* Chama a função passada pelo atributo `action` */
    /**
     * @return {?}
     */
    ThfToasterComponent.prototype.thfToasterAction = /* Chama a função passada pelo atributo `action` */
    /**
     * @return {?}
     */
    function () {
        this.action(this);
    };
    ThfToasterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-toaster',
                    template: "<div #toaster *ngIf=\"getShowToaster()\"\n  class=\"thf-toaster {{ getToasterType() }} {{ getToasterPosition() }} thf-clickable\"\n  (click)=\"close()\">\n\n  <div class=\"thf-toaster-message\">\n    <span class=\"thf-icon {{ getIcon() }}\"></span> {{ message }}\n  </div>\n\n  <div *ngIf=\"action !== undefined\" (click)=\"thfToasterAction()\" class=\"thf-toaster-action\">\n    {{ actionLabel }}\n  </div>\n\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    ThfToasterComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef }
    ]; };
    ThfToasterComponent.propDecorators = {
        toaster: [{ type: ViewChild, args: ['toaster', { static: false },] }]
    };
    return ThfToasterComponent;
}(ThfToasterBaseComponent));
export { ThfToasterComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfToasterComponent.prototype.icon;
    /**
     * @type {?}
     * @private
     */
    ThfToasterComponent.prototype.margin;
    /**
     * @type {?}
     * @private
     */
    ThfToasterComponent.prototype.observableOnClose;
    /**
     * @type {?}
     * @private
     */
    ThfToasterComponent.prototype.showToaster;
    /**
     * @type {?}
     * @private
     */
    ThfToasterComponent.prototype.toasterPosition;
    /**
     * @type {?}
     * @private
     */
    ThfToasterComponent.prototype.toasterType;
    /** @type {?} */
    ThfToasterComponent.prototype.toaster;
    /** @type {?} */
    ThfToasterComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    ThfToasterComponent.prototype.elementeRef;
}
//# sourceMappingURL=data:application/json;base64,