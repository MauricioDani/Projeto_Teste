/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, ApplicationRef, Injector } from '@angular/core';
import * as i0 from "@angular/core";
var ThfComponentInjectorService = /** @class */ (function () {
    function ThfComponentInjectorService(componentResolver, applicationRef, injector) {
        this.componentResolver = componentResolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
    }
    // Cria um dinamicamente no ApplicationRef
    // Cria um dinamicamente no ApplicationRef
    /**
     * @param {?} component
     * @return {?}
     */
    ThfComponentInjectorService.prototype.createComponentInApplication = 
    // Cria um dinamicamente no ApplicationRef
    /**
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var componentRef = this.componentResolver.resolveComponentFactory(component).create(this.injector);
        this.applicationRef.attachView(componentRef.hostView);
        /** @type {?} */
        var domElem = ((/** @type {?} */ (componentRef.hostView))).rootNodes[0];
        document.body.appendChild(domElem);
        return componentRef;
    };
    // Destrói o componente e remove do ApplicationRef
    // Destrói o componente e remove do ApplicationRef
    /**
     * @param {?} componentRef
     * @return {?}
     */
    ThfComponentInjectorService.prototype.destroyComponentInApplication = 
    // Destrói o componente e remove do ApplicationRef
    /**
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        this.applicationRef.detachView(componentRef.hostView);
        componentRef.destroy();
    };
    ThfComponentInjectorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ThfComponentInjectorService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: Injector }
    ]; };
    /** @nocollapse */ ThfComponentInjectorService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ThfComponentInjectorService_Factory() { return new ThfComponentInjectorService(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.INJECTOR)); }, token: ThfComponentInjectorService, providedIn: "root" });
    return ThfComponentInjectorService;
}());
export { ThfComponentInjectorService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfComponentInjectorService.prototype.componentResolver;
    /**
     * @type {?}
     * @private
     */
    ThfComponentInjectorService.prototype.applicationRef;
    /**
     * @type {?}
     * @private
     */
    ThfComponentInjectorService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWNvbXBvbmVudC1pbmplY3Rvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90aGYtY29tcG9uZW50LWluamVjdG9yL3RoZi1jb21wb25lbnQtaW5qZWN0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZ0Isd0JBQXdCLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFFN0c7SUFLRSxxQ0FBb0IsaUJBQTJDLEVBQVUsY0FBOEIsRUFBVSxRQUFrQjtRQUEvRyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQTBCO1FBQVUsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUFHLENBQUM7SUFFdkksMENBQTBDOzs7Ozs7SUFDMUMsa0VBQTRCOzs7Ozs7SUFBNUIsVUFBNkIsU0FBYzs7WUFDbkMsWUFBWSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNwRyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7O1lBQ2hELE9BQU8sR0FBRyxDQUFDLG1CQUFLLFlBQVksQ0FBQyxRQUFRLEVBQUEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDekQsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkMsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVELGtEQUFrRDs7Ozs7O0lBQ2xELG1FQUE2Qjs7Ozs7O0lBQTdCLFVBQThCLFlBQWlCO1FBQzdDLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0RCxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDekIsQ0FBQzs7Z0JBcEJGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBSmtDLHdCQUF3QjtnQkFBRSxjQUFjO2dCQUFFLFFBQVE7OztzQ0FBckY7Q0F1QkMsQUFyQkQsSUFxQkM7U0FsQlksMkJBQTJCOzs7Ozs7SUFFMUIsd0RBQW1EOzs7OztJQUFFLHFEQUFzQzs7Ozs7SUFBRSwrQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBDb21wb25lbnRSZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQXBwbGljYXRpb25SZWYsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRoZkNvbXBvbmVudEluamVjdG9yU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb21wb25lbnRSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBwcml2YXRlIGFwcGxpY2F0aW9uUmVmOiBBcHBsaWNhdGlvblJlZiwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHt9XG5cbiAgLy8gQ3JpYSB1bSBkaW5hbWljYW1lbnRlIG5vIEFwcGxpY2F0aW9uUmVmXG4gIGNyZWF0ZUNvbXBvbmVudEluQXBwbGljYXRpb24oY29tcG9uZW50OiBhbnkpOiBDb21wb25lbnRSZWY8YW55PiB7XG4gICAgY29uc3QgY29tcG9uZW50UmVmID0gdGhpcy5jb21wb25lbnRSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShjb21wb25lbnQpLmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcbiAgICB0aGlzLmFwcGxpY2F0aW9uUmVmLmF0dGFjaFZpZXcoY29tcG9uZW50UmVmLmhvc3RWaWV3KTtcbiAgICBjb25zdCBkb21FbGVtID0gKDxhbnk+Y29tcG9uZW50UmVmLmhvc3RWaWV3KS5yb290Tm9kZXNbMF07XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb21FbGVtKTtcbiAgICByZXR1cm4gY29tcG9uZW50UmVmO1xuICB9XG5cbiAgLy8gRGVzdHLDs2kgbyBjb21wb25lbnRlIGUgcmVtb3ZlIGRvIEFwcGxpY2F0aW9uUmVmXG4gIGRlc3Ryb3lDb21wb25lbnRJbkFwcGxpY2F0aW9uKGNvbXBvbmVudFJlZjogYW55KSB7XG4gICAgdGhpcy5hcHBsaWNhdGlvblJlZi5kZXRhY2hWaWV3KGNvbXBvbmVudFJlZi5ob3N0Vmlldyk7XG4gICAgY29tcG9uZW50UmVmLmRlc3Ryb3koKTtcbiAgfVxufVxuIl19