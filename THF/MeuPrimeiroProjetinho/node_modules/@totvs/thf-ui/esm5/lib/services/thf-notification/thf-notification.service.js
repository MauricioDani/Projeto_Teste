/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ThfComponentInjectorService } from './../thf-component-injector/thf-component-injector.service';
import { ThfNotificationBaseService } from './thf-notification-base.service';
import { ThfToasterOrientation } from './thf-toaster/thf-toaster-orientation.enum';
import { ThfToasterComponent } from './thf-toaster/thf-toaster.component';
import * as i0 from "@angular/core";
import * as i1 from "../thf-component-injector/thf-component-injector.service";
/**
 * \@docsExtends ThfNotificationBaseService
 *
 * \@example
 *
 * <example name="thf-notification-basic" title="Totvs Notification Basic">
 *  <file name="sample-thf-notification-basic/sample-thf-notification-basic.component.html"> </file>
 *  <file name="sample-thf-notification-basic/sample-thf-notification-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-notification-labs" title="Totvs Notification Labs">
 *  <file name="sample-thf-notification-labs/sample-thf-notification-labs.component.html"> </file>
 *  <file name="sample-thf-notification-labs/sample-thf-notification-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-notification-sales" title="Totvs Notification - Sales">
 *  <file name="sample-thf-notification-sales/sample-thf-notification-sales.component.html"> </file>
 *  <file name="sample-thf-notification-sales/sample-thf-notification-sales.component.ts"> </file>
 * </example>
 */
var ThfNotificationService = /** @class */ (function (_super) {
    tslib_1.__extends(ThfNotificationService, _super);
    function ThfNotificationService(thfComponentInjector) {
        var _this = _super.call(this) || this;
        _this.thfComponentInjector = thfComponentInjector;
        return _this;
    }
    /**
     * @param {?} toaster
     * @return {?}
     */
    ThfNotificationService.prototype.createToaster = /**
     * @param {?} toaster
     * @return {?}
     */
    function (toaster) {
        var _this = this;
        /** @type {?} */
        var componentRef = this.thfComponentInjector.createComponentInApplication(ThfToasterComponent);
        toaster.componentRef = componentRef;
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.configToaster(toaster);
        if (toaster.orientation === ThfToasterOrientation.Top) {
            this.stackTop.push(componentRef);
        }
        else {
            this.stackBottom.push(componentRef);
        }
        this.observableOnClose(componentRef);
        if (toaster.action === undefined) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.destroyToaster(componentRef);
            }), this.durationToaster);
        }
    };
    /**
     * @param {?} toaster
     * @return {?}
     */
    ThfNotificationService.prototype.destroyToaster = /**
     * @param {?} toaster
     * @return {?}
     */
    function (toaster) {
        /** @type {?} */
        var stack;
        if (toaster.instance.orientation === ThfToasterOrientation.Top) {
            stack = this.stackTop;
        }
        else {
            stack = this.stackBottom;
        }
        /** @type {?} */
        var index = stack.indexOf(toaster);
        stack.splice(index, 1);
        this.thfComponentInjector.destroyComponentInApplication(toaster);
        for (var count = 0; count < stack.length; count++) {
            stack[count].instance.changePosition(count);
        }
    };
    /**
     * @private
     * @param {?} componentRef
     * @return {?}
     */
    ThfNotificationService.prototype.observableOnClose = /**
     * @private
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        var _this = this;
        componentRef.instance.observableOnClose.subscribe((/**
         * @return {?}
         */
        function () {
            _this.destroyToaster(componentRef);
        }));
    };
    ThfNotificationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ThfNotificationService.ctorParameters = function () { return [
        { type: ThfComponentInjectorService }
    ]; };
    /** @nocollapse */ ThfNotificationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ThfNotificationService_Factory() { return new ThfNotificationService(i0.ɵɵinject(i1.ThfComponentInjectorService)); }, token: ThfNotificationService, providedIn: "root" });
    return ThfNotificationService;
}(ThfNotificationBaseService));
export { ThfNotificationService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfNotificationService.prototype.thfComponentInjector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLW5vdGlmaWNhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90aGYtbm90aWZpY2F0aW9uL3RoZi1ub3RpZmljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBZ0IsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBQ3pHLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRTdFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCMUU7SUFHNEMsa0RBQTBCO0lBRXBFLGdDQUFvQixvQkFBaUQ7UUFBckUsWUFDRSxpQkFBTyxTQUNSO1FBRm1CLDBCQUFvQixHQUFwQixvQkFBb0IsQ0FBNkI7O0lBRXJFLENBQUM7Ozs7O0lBRUQsOENBQWE7Ozs7SUFBYixVQUFjLE9BQW1CO1FBQWpDLGlCQXFCQzs7WUFwQk8sWUFBWSxHQUFzQixJQUFJLENBQUMsb0JBQW9CLENBQUMsNEJBQTRCLENBQUMsbUJBQW1CLENBQUM7UUFFbkgsT0FBTyxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFFcEMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQy9DLFlBQVksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTdDLElBQUksT0FBTyxDQUFDLFdBQVcsS0FBSyxxQkFBcUIsQ0FBQyxHQUFHLEVBQUU7WUFDckQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDbEM7YUFBTTtZQUNMLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXJDLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7WUFDaEMsVUFBVTs7O1lBQUM7Z0JBQ1QsS0FBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNwQyxDQUFDLEdBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQzs7Ozs7SUFFRCwrQ0FBYzs7OztJQUFkLFVBQWUsT0FBWTs7WUFDckIsS0FBSztRQUVULElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEtBQUsscUJBQXFCLENBQUMsR0FBRyxFQUFFO1lBQzlELEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUMxQjs7WUFFSyxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDcEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFdkIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLDZCQUE2QixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWpFLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2pELEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzdDO0lBQ0gsQ0FBQzs7Ozs7O0lBRU8sa0RBQWlCOzs7OztJQUF6QixVQUEwQixZQUFpQjtRQUEzQyxpQkFJQztRQUhDLFlBQVksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsU0FBUzs7O1FBQUM7WUFDaEQsS0FBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNwQyxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7O2dCQXZERixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQTdCUSwyQkFBMkI7OztpQ0FGcEM7Q0FzRkMsQUF6REQsQ0FHNEMsMEJBQTBCLEdBc0RyRTtTQXREWSxzQkFBc0I7Ozs7OztJQUVyQixzREFBeUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgVGhmQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlIH0gZnJvbSAnLi8uLi90aGYtY29tcG9uZW50LWluamVjdG9yL3RoZi1jb21wb25lbnQtaW5qZWN0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBUaGZOb3RpZmljYXRpb25CYXNlU2VydmljZSB9IGZyb20gJy4vdGhmLW5vdGlmaWNhdGlvbi1iYXNlLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGhmVG9hc3RlciB9IGZyb20gJy4vdGhmLXRvYXN0ZXIvdGhmLXRvYXN0ZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IFRoZlRvYXN0ZXJPcmllbnRhdGlvbiB9IGZyb20gJy4vdGhmLXRvYXN0ZXIvdGhmLXRvYXN0ZXItb3JpZW50YXRpb24uZW51bSc7XG5pbXBvcnQgeyBUaGZUb2FzdGVyQ29tcG9uZW50IH0gZnJvbSAnLi90aGYtdG9hc3Rlci90aGYtdG9hc3Rlci5jb21wb25lbnQnO1xuXG4vKipcbiAqIEBkb2NzRXh0ZW5kcyBUaGZOb3RpZmljYXRpb25CYXNlU2VydmljZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1ub3RpZmljYXRpb24tYmFzaWNcIiB0aXRsZT1cIlRvdHZzIE5vdGlmaWNhdGlvbiBCYXNpY1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLW5vdGlmaWNhdGlvbi1iYXNpYy9zYW1wbGUtdGhmLW5vdGlmaWNhdGlvbi1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtbm90aWZpY2F0aW9uLWJhc2ljL3NhbXBsZS10aGYtbm90aWZpY2F0aW9uLWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1ub3RpZmljYXRpb24tbGFic1wiIHRpdGxlPVwiVG90dnMgTm90aWZpY2F0aW9uIExhYnNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1ub3RpZmljYXRpb24tbGFicy9zYW1wbGUtdGhmLW5vdGlmaWNhdGlvbi1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1ub3RpZmljYXRpb24tbGFicy9zYW1wbGUtdGhmLW5vdGlmaWNhdGlvbi1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1ub3RpZmljYXRpb24tc2FsZXNcIiB0aXRsZT1cIlRvdHZzIE5vdGlmaWNhdGlvbiAtIFNhbGVzXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtbm90aWZpY2F0aW9uLXNhbGVzL3NhbXBsZS10aGYtbm90aWZpY2F0aW9uLXNhbGVzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1ub3RpZmljYXRpb24tc2FsZXMvc2FtcGxlLXRoZi1ub3RpZmljYXRpb24tc2FsZXMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBUaGZOb3RpZmljYXRpb25TZXJ2aWNlIGV4dGVuZHMgVGhmTm90aWZpY2F0aW9uQmFzZVNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGhmQ29tcG9uZW50SW5qZWN0b3I6IFRoZkNvbXBvbmVudEluamVjdG9yU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBjcmVhdGVUb2FzdGVyKHRvYXN0ZXI6IFRoZlRvYXN0ZXIpOiB2b2lkIHtcbiAgICBjb25zdCBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+ID0gdGhpcy50aGZDb21wb25lbnRJbmplY3Rvci5jcmVhdGVDb21wb25lbnRJbkFwcGxpY2F0aW9uKFRoZlRvYXN0ZXJDb21wb25lbnQpO1xuXG4gICAgdG9hc3Rlci5jb21wb25lbnRSZWYgPSBjb21wb25lbnRSZWY7XG5cbiAgICBjb21wb25lbnRSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5jb25maWdUb2FzdGVyKHRvYXN0ZXIpO1xuXG4gICAgaWYgKHRvYXN0ZXIub3JpZW50YXRpb24gPT09IFRoZlRvYXN0ZXJPcmllbnRhdGlvbi5Ub3ApIHtcbiAgICAgIHRoaXMuc3RhY2tUb3AucHVzaChjb21wb25lbnRSZWYpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YWNrQm90dG9tLnB1c2goY29tcG9uZW50UmVmKTtcbiAgICB9XG5cbiAgICB0aGlzLm9ic2VydmFibGVPbkNsb3NlKGNvbXBvbmVudFJlZik7XG5cbiAgICBpZiAodG9hc3Rlci5hY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuZGVzdHJveVRvYXN0ZXIoY29tcG9uZW50UmVmKTtcbiAgICAgIH0sIHRoaXMuZHVyYXRpb25Ub2FzdGVyKTtcbiAgICB9XG4gIH1cblxuICBkZXN0cm95VG9hc3Rlcih0b2FzdGVyOiBhbnkpOiB2b2lkIHtcbiAgICBsZXQgc3RhY2s7XG5cbiAgICBpZiAodG9hc3Rlci5pbnN0YW5jZS5vcmllbnRhdGlvbiA9PT0gVGhmVG9hc3Rlck9yaWVudGF0aW9uLlRvcCkge1xuICAgICAgc3RhY2sgPSB0aGlzLnN0YWNrVG9wO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFjayA9IHRoaXMuc3RhY2tCb3R0b207XG4gICAgfVxuXG4gICAgY29uc3QgaW5kZXggPSBzdGFjay5pbmRleE9mKHRvYXN0ZXIpO1xuICAgIHN0YWNrLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICB0aGlzLnRoZkNvbXBvbmVudEluamVjdG9yLmRlc3Ryb3lDb21wb25lbnRJbkFwcGxpY2F0aW9uKHRvYXN0ZXIpO1xuXG4gICAgZm9yIChsZXQgY291bnQgPSAwOyBjb3VudCA8IHN0YWNrLmxlbmd0aDsgY291bnQrKykge1xuICAgICAgc3RhY2tbY291bnRdLmluc3RhbmNlLmNoYW5nZVBvc2l0aW9uKGNvdW50KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9ic2VydmFibGVPbkNsb3NlKGNvbXBvbmVudFJlZjogYW55KSB7XG4gICAgY29tcG9uZW50UmVmLmluc3RhbmNlLm9ic2VydmFibGVPbkNsb3NlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmRlc3Ryb3lUb2FzdGVyKGNvbXBvbmVudFJlZik7XG4gICAgfSk7XG4gIH1cblxufVxuIl19