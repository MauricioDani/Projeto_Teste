/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * \@description
 *
 * O pipe thf-i18n é responsável por tratar literais parâmetrizadas, dando mais flexibilidade as literais de tradução.
 * O número de parâmetros inseridos nas literais deve coincidir com a quantia de parâmetros passados por parâmetro,
 * os parâmetros serão substituidos de acordo com a ordem informada.
 *
 * Para inserir um parâmetro em uma literal, o mesmo deverá ser inserido entre chaves dentro da literal e posicionado
 * de acordo como deve ser exibido após a sua transformação.
 *
 * ```
 * const i18nPT = {
 *   pagination: 'Página {1} de {2} páginas.',
 *   totalPages: 'Total de {totalPages} encontradas.'
 * };
 * ```
 *
 * É possível passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem
 * informada na literal.
 *
 * ```
 * {{ i18nPT.pagination | thfI18n:[1,10] }}
 * {{ i18nPT.totalPages | thfI18n:10 }}
 * ```
 */
var /**
 * \@description
 *
 * O pipe thf-i18n é responsável por tratar literais parâmetrizadas, dando mais flexibilidade as literais de tradução.
 * O número de parâmetros inseridos nas literais deve coincidir com a quantia de parâmetros passados por parâmetro,
 * os parâmetros serão substituidos de acordo com a ordem informada.
 *
 * Para inserir um parâmetro em uma literal, o mesmo deverá ser inserido entre chaves dentro da literal e posicionado
 * de acordo como deve ser exibido após a sua transformação.
 *
 * ```
 * const i18nPT = {
 *   pagination: 'Página {1} de {2} páginas.',
 *   totalPages: 'Total de {totalPages} encontradas.'
 * };
 * ```
 *
 * É possível passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem
 * informada na literal.
 *
 * ```
 * {{ i18nPT.pagination | thfI18n:[1,10] }}
 * {{ i18nPT.totalPages | thfI18n:10 }}
 * ```
 */
ThfI18nBasePipe = /** @class */ (function () {
    function ThfI18nBasePipe() {
    }
    /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    ThfI18nBasePipe.prototype.transform = /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    function (value, args) {
        var e_1, _a;
        if (!value) {
            return '';
        }
        if (!(args instanceof Array)) {
            args = [args];
        }
        try {
            for (var args_1 = tslib_1.__values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
                var arg = args_1_1.value;
                value = value.replace(/(\{\w*\})+/, arg);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return value;
    };
    return ThfI18nBasePipe;
}());
/**
 * \@description
 *
 * O pipe thf-i18n é responsável por tratar literais parâmetrizadas, dando mais flexibilidade as literais de tradução.
 * O número de parâmetros inseridos nas literais deve coincidir com a quantia de parâmetros passados por parâmetro,
 * os parâmetros serão substituidos de acordo com a ordem informada.
 *
 * Para inserir um parâmetro em uma literal, o mesmo deverá ser inserido entre chaves dentro da literal e posicionado
 * de acordo como deve ser exibido após a sua transformação.
 *
 * ```
 * const i18nPT = {
 *   pagination: 'Página {1} de {2} páginas.',
 *   totalPages: 'Total de {totalPages} encontradas.'
 * };
 * ```
 *
 * É possível passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem
 * informada na literal.
 *
 * ```
 * {{ i18nPT.pagination | thfI18n:[1,10] }}
 * {{ i18nPT.totalPages | thfI18n:10 }}
 * ```
 */
export { ThfI18nBasePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWkxOG4tYmFzZS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90aGYtaTE4bi90aGYtaTE4bi1iYXNlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUFBO0lBa0JBLENBQUM7Ozs7OztJQWhCQyxtQ0FBUzs7Ozs7SUFBVCxVQUFVLEtBQWEsRUFBRSxJQUFTOztRQUNoQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUVELElBQUksQ0FBQyxDQUFDLElBQUksWUFBWSxLQUFLLENBQUMsRUFBRTtZQUM1QixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNmOztZQUVELEtBQWtCLElBQUEsU0FBQSxpQkFBQSxJQUFJLENBQUEsMEJBQUEsNENBQUU7Z0JBQW5CLElBQU0sR0FBRyxpQkFBQTtnQkFDWixLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUcsR0FBRyxDQUFDLENBQUM7YUFDM0M7Ozs7Ozs7OztRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVILHNCQUFDO0FBQUQsQ0FBQyxBQWxCRCxJQWtCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIHBpcGUgdGhmLWkxOG4gw6kgcmVzcG9uc8OhdmVsIHBvciB0cmF0YXIgbGl0ZXJhaXMgcGFyw6JtZXRyaXphZGFzLCBkYW5kbyBtYWlzIGZsZXhpYmlsaWRhZGUgYXMgbGl0ZXJhaXMgZGUgdHJhZHXDp8Ojby5cbiAqIE8gbsO6bWVybyBkZSBwYXLDom1ldHJvcyBpbnNlcmlkb3MgbmFzIGxpdGVyYWlzIGRldmUgY29pbmNpZGlyIGNvbSBhIHF1YW50aWEgZGUgcGFyw6JtZXRyb3MgcGFzc2Fkb3MgcG9yIHBhcsOibWV0cm8sXG4gKiBvcyBwYXLDom1ldHJvcyBzZXLDo28gc3Vic3RpdHVpZG9zIGRlIGFjb3JkbyBjb20gYSBvcmRlbSBpbmZvcm1hZGEuXG4gKlxuICogUGFyYSBpbnNlcmlyIHVtIHBhcsOibWV0cm8gZW0gdW1hIGxpdGVyYWwsIG8gbWVzbW8gZGV2ZXLDoSBzZXIgaW5zZXJpZG8gZW50cmUgY2hhdmVzIGRlbnRybyBkYSBsaXRlcmFsIGUgcG9zaWNpb25hZG9cbiAqIGRlIGFjb3JkbyBjb21vIGRldmUgc2VyIGV4aWJpZG8gYXDDs3MgYSBzdWEgdHJhbnNmb3JtYcOnw6NvLlxuICpcbiAqIGBgYFxuICogY29uc3QgaTE4blBUID0ge1xuICogICBwYWdpbmF0aW9uOiAnUMOhZ2luYSB7MX0gZGUgezJ9IHDDoWdpbmFzLicsXG4gKiAgIHRvdGFsUGFnZXM6ICdUb3RhbCBkZSB7dG90YWxQYWdlc30gZW5jb250cmFkYXMuJ1xuICogfTtcbiAqIGBgYFxuICpcbiAqIMOJIHBvc3PDrXZlbCBwYXNzYXIgdW0gdmFsb3Igb3UgdW0gYXJyYXkgZGUgdmFsb3JlcyBwYXJhIG8gcGlwZSwgY2FzbyBzZWphIHBhc3NhZG8gdW0gYXJyYXksIG9zIHZhbG9yZXMgZGV2ZW0gb2JlZGVjZXIgYSBvcmRlbVxuICogaW5mb3JtYWRhIG5hIGxpdGVyYWwuXG4gKlxuICogYGBgXG4gKiB7eyBpMThuUFQucGFnaW5hdGlvbiB8IHRoZkkxOG46WzEsMTBdIH19XG4gKiB7eyBpMThuUFQudG90YWxQYWdlcyB8IHRoZkkxOG46MTAgfX1cbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgVGhmSTE4bkJhc2VQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgdHJhbnNmb3JtKHZhbHVlOiBzdHJpbmcsIGFyZ3M6IGFueSk6IHN0cmluZyB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGlmICghKGFyZ3MgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIGFyZ3MgPSBbYXJnc107XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBhcmcgb2YgYXJncykge1xuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC8oXFx7XFx3KlxcfSkrLywgIGFyZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbn1cbiJdfQ==