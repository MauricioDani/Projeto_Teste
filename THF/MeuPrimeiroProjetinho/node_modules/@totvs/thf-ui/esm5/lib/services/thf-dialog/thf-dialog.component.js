/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { browserLanguage, thfLocaleDefault } from '../../utils/util';
import { ThfDialogType } from './thf-dialog.enum';
import { ThfModalComponent } from '../../components/thf-modal/thf-modal.component';
/** @type {?} */
export var thfDialogAlertLiteralsDefault = {
    en: (/** @type {?} */ ({ ok: 'Ok' })),
    es: (/** @type {?} */ ({ ok: 'Ok' })),
    pt: (/** @type {?} */ ({ ok: 'Ok' }))
};
/** @type {?} */
export var thfDialogConfirmLiteralsDefault = {
    en: (/** @type {?} */ ({ cancel: 'Cancel', confirm: 'Confirm' })),
    es: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' })),
    pt: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' }))
};
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que serve como container do thf-dialog.service
 */
var ThfDialogComponent = /** @class */ (function () {
    function ThfDialogComponent() {
        // Objeto primary do thfModal
        this.primaryAction = { label: 'ok', action: (/**
             * @return {?}
             */
            function () { }) };
    }
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.closeSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.closeSubscription = this.thfModal.onXClosed.subscribe((/**
         * @param {?} close
         * @return {?}
         */
        function (close) { return _this.destroy(); }));
    };
    // Fecha o thfModal
    // Fecha o thfModal
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.close = 
    // Fecha o thfModal
    /**
     * @return {?}
     */
    function () {
        this.thfModal.close();
        this.destroy();
    };
    /**
     * @return {?}
     */
    ThfDialogComponent.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    };
    // Insere os valores recebidos de this.open para o thfModal
    // Insere os valores recebidos de this.open para o thfModal
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    ThfDialogComponent.prototype.configDialog = 
    // Insere os valores recebidos de this.open para o thfModal
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    function (primaryLabel, primaryAction, secondaryLabel, secondaryAction) {
        var _this = this;
        this.primaryAction = {
            label: primaryLabel,
            action: (/**
             * @return {?}
             */
            function () {
                if (primaryAction) {
                    primaryAction();
                }
                _this.close();
            })
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: (/**
                 * @return {?}
                 */
                function () {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    _this.close();
                })
            };
        }
    };
    // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diálago solicitado
    // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diálago solicitado
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    ThfDialogComponent.prototype.open = 
    // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diálago solicitado
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    function (dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        this.setDialogLiterals(dialogOptions, dialogType);
        switch (dialogType) {
            case ThfDialogType.Confirm: {
                this.configDialog(this.literalsConfirm.confirm, ((/** @type {?} */ (dialogOptions))).confirm, this.literalsConfirm.cancel, ((/** @type {?} */ (dialogOptions))).cancel);
                break;
            }
            case ThfDialogType.Alert: {
                this.configDialog(this.literalsAlert.ok, ((/** @type {?} */ (dialogOptions))).ok);
                break;
            }
        }
        this.thfModal.open();
    };
    /**
     * @private
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @return {?}
     */
    ThfDialogComponent.prototype.setDialogLiterals = /**
     * @private
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @return {?}
     */
    function (dialogOptions, dialogType) {
        /** @type {?} */
        var alertLiterals = thfDialogAlertLiteralsDefault;
        /** @type {?} */
        var confirmLiterals = thfDialogConfirmLiteralsDefault;
        /** @type {?} */
        var literals = dialogOptions.literals;
        if (dialogType === ThfDialogType.Alert) {
            this.literalsAlert = tslib_1.__assign({}, alertLiterals[thfLocaleDefault], alertLiterals[browserLanguage()], literals);
        }
        else {
            this.literalsConfirm = tslib_1.__assign({}, confirmLiterals[thfLocaleDefault], confirmLiterals[browserLanguage()], literals);
        }
    };
    ThfDialogComponent.decorators = [
        { type: Component, args: [{
                    template: "<thf-modal\n  [t-title]=\"title\"\n  [t-primary-action]=\"primaryAction\"\n  [t-secondary-action]=\"secondaryAction\">\n  {{ message }}\n</thf-modal>\n"
                }] }
    ];
    ThfDialogComponent.propDecorators = {
        thfModal: [{ type: ViewChild, args: [ThfModalComponent, { static: true },] }]
    };
    return ThfDialogComponent;
}());
export { ThfDialogComponent };
if (false) {
    /** @type {?} */
    ThfDialogComponent.prototype.thfModal;
    /** @type {?} */
    ThfDialogComponent.prototype.title;
    /** @type {?} */
    ThfDialogComponent.prototype.message;
    /** @type {?} */
    ThfDialogComponent.prototype.primaryAction;
    /** @type {?} */
    ThfDialogComponent.prototype.secondaryAction;
    /** @type {?} */
    ThfDialogComponent.prototype.literalsAlert;
    /** @type {?} */
    ThfDialogComponent.prototype.literalsConfirm;
    /**
     * @type {?}
     * @private
     */
    ThfDialogComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    ThfDialogComponent.prototype.closeSubscription;
}
//# sourceMappingURL=data:application/json;base64,