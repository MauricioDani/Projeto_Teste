/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { getBrowserLanguage, getShortLanguage, isLanguage, thfLocaleDefault, thfLocales } from '../../utils/util';
import * as i0 from "@angular/core";
/** @type {?} */
var thfDefaultLanguage = 'THF_DEFAULT_LANGUAGE';
/** @type {?} */
var thfLocaleKey = 'THF_USER_LOCALE';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço responsável por gerenciar as linguagens da aplicação.
 */
var ThfLanguageService = /** @class */ (function () {
    function ThfLanguageService() {
    }
    Object.defineProperty(ThfLanguageService.prototype, "languageDefault", {
        get: /**
         * @return {?}
         */
        function () {
            return localStorage.getItem(thfDefaultLanguage);
        },
        set: /**
         * @param {?} language
         * @return {?}
         */
        function (language) {
            if (language && isLanguage(language)) {
                localStorage.setItem(thfDefaultLanguage, language);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `ThfI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo THF (`pt`, `en` ou `es`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     */
    /**
     * \@description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `ThfI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo THF (`pt`, `en` ou `es`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     * @return {?}
     */
    ThfLanguageService.prototype.getLanguage = /**
     * \@description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `ThfI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo THF (`pt`, `en` ou `es`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var language = localStorage.getItem(thfLocaleKey) || this.languageDefault || getBrowserLanguage();
        return language && language.toLowerCase();
    };
    /**
     * @description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     */
    /**
     * \@description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     * @return {?}
     */
    ThfLanguageService.prototype.getLanguageDefault = /**
     * \@description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     * @return {?}
     */
    function () {
        return this.languageDefault;
    };
    /**
     * @description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * @default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     */
    /**
     * \@description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * \@default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     * @return {?}
     */
    ThfLanguageService.prototype.getShortLanguage = /**
     * \@description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * \@default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var language = this.getLanguage();
        /** @type {?} */
        var shortLanguage = getShortLanguage(language);
        return thfLocales.includes(shortLanguage) ? shortLanguage : thfLocaleDefault;
    };
    /**
     * @description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    /**
     * \@description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    ThfLanguageService.prototype.setLanguage = /**
     * \@description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    function (language) {
        if (!isLanguage(language)) {
            return;
        }
        localStorage.setItem(thfLocaleKey, language.toLowerCase());
    };
    /**
     * @description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    /**
     * \@description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    ThfLanguageService.prototype.setLanguageDefault = /**
     * \@description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    function (language) {
        this.languageDefault = language;
    };
    ThfLanguageService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ ThfLanguageService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ThfLanguageService_Factory() { return new ThfLanguageService(); }, token: ThfLanguageService, providedIn: "root" });
    return ThfLanguageService;
}());
export { ThfLanguageService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWxhbmd1YWdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3RoZi1sYW5ndWFnZS90aGYtbGFuZ3VhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7SUFFNUcsa0JBQWtCLEdBQUcsc0JBQXNCOztJQUMzQyxZQUFZLEdBQUcsaUJBQWlCOzs7Ozs7OztBQVN0QztJQUFBO0tBMkdDO0lBdEdDLHNCQUFJLCtDQUFlOzs7O1FBTW5CO1lBQ0UsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDbEQsQ0FBQzs7Ozs7UUFSRCxVQUFvQixRQUFnQjtZQUNsQyxJQUFJLFFBQVEsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3BDLFlBQVksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDcEQ7UUFDSCxDQUFDOzs7T0FBQTtJQU1EOzs7Ozs7Ozs7Ozs7Ozs7OztPQWlCRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFDSCx3Q0FBVzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUFYOztZQUNRLFFBQVEsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksa0JBQWtCLEVBQUU7UUFFbkcsT0FBTyxRQUFRLElBQUksUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFFRDs7Ozs7OztPQU9HOzs7Ozs7Ozs7O0lBQ0gsK0NBQWtCOzs7Ozs7Ozs7SUFBbEI7UUFDRSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHOzs7Ozs7Ozs7OztJQUNILDZDQUFnQjs7Ozs7Ozs7OztJQUFoQjs7WUFDUSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRTs7WUFDN0IsYUFBYSxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQztRQUVoRCxPQUFPLFVBQVUsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7SUFDL0UsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7O09BYUc7Ozs7Ozs7Ozs7Ozs7Ozs7SUFDSCx3Q0FBVzs7Ozs7Ozs7Ozs7Ozs7O0lBQVgsVUFBWSxRQUFnQjtRQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3pCLE9BQU87U0FDUjtRQUVELFlBQVksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRDs7Ozs7Ozs7Ozs7OztPQWFHOzs7Ozs7Ozs7Ozs7Ozs7O0lBQ0gsK0NBQWtCOzs7Ozs7Ozs7Ozs7Ozs7SUFBbEIsVUFBbUIsUUFBZ0I7UUFDakMsSUFBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUM7SUFDbEMsQ0FBQzs7Z0JBekdGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs2QkFoQkQ7Q0F5SEMsQUEzR0QsSUEyR0M7U0F4R1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBnZXRCcm93c2VyTGFuZ3VhZ2UsIGdldFNob3J0TGFuZ3VhZ2UsIGlzTGFuZ3VhZ2UsIHRoZkxvY2FsZURlZmF1bHQsIHRoZkxvY2FsZXMgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuY29uc3QgdGhmRGVmYXVsdExhbmd1YWdlID0gJ1RIRl9ERUZBVUxUX0xBTkdVQUdFJztcbmNvbnN0IHRoZkxvY2FsZUtleSA9ICdUSEZfVVNFUl9MT0NBTEUnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNlcnZpw6dvIHJlc3BvbnPDoXZlbCBwb3IgZ2VyZW5jaWFyIGFzIGxpbmd1YWdlbnMgZGEgYXBsaWNhw6fDo28uXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRoZkxhbmd1YWdlU2VydmljZSB7XG5cbiAgc2V0IGxhbmd1YWdlRGVmYXVsdChsYW5ndWFnZTogc3RyaW5nKSB7XG4gICAgaWYgKGxhbmd1YWdlICYmIGlzTGFuZ3VhZ2UobGFuZ3VhZ2UpKSB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGZEZWZhdWx0TGFuZ3VhZ2UsIGxhbmd1YWdlKTtcbiAgICB9XG4gIH1cblxuICBnZXQgbGFuZ3VhZ2VEZWZhdWx0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoZkRlZmF1bHRMYW5ndWFnZSk7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBvciByZXRvcm5hciBvIGlkaW9tYSBhdGl2by5cbiAgICpcbiAgICogQSBidXNjYSBkbyBpZGlvbWEgc2Vyw6EgZmVpdGEgbmEgc2VndWludGUgb3JkZW06XG4gICAqXG4gICAqICAgMSAtIG8gaWRpb21hIHF1ZSBmb2kgYXJtYXplbmFkbyBubyAqbG9jYWxTdG9yYWdlKiwgYXRyYXbDqXMgZG8gbcOpdG9kbyBgc2V0TGFuZ3VhZ2UoKWAgdXRpbGl6YWRvIHBlbG8gaTE4bi5cbiAgICpcbiAgICogICAyIC0gbyB2YWxvciBpbnNlcmlkbyBuYXMgY29uZmlndXJhw6fDtWVzIGRvIG3Ds2R1bG8gZG8gaTE4biBhdHJhdsOpcyBkbyBwYXLDom1ldHJvIGBjb25maWdgLCBzZW5kbyBvIGlkaW9tYSBpbnNlcmlkb1xuICAgKiBuYSBwcm9wcmllZGFkZSBgbGFuZ3VhZ2VgIGRhIGludGVyZmFjZSBgVGhmSTE4bkNvbmZpZ0RlZmF1bHRgLlxuICAgKlxuICAgKiAgIDMgLSBvIGlkaW9tYSBkbyBuYXZlZ2Fkb3IgdXRpbGl6YWRvLlxuICAgKlxuICAgKiA+IENhc28gbyBpZGlvbWEgZG8gbmF2ZWdhZG9yIG7Do28gc2VqYSBzdXBvcnRhZG8gcGVsbyBUSEYgKGBwdGAsIGBlbmAgb3UgYGVzYCksIHNlcsOhIHJldG9ybmFkbyB2YWxvciBgcHRgLlxuICAgKlxuICAgKiAqKlJldG9ybm86KiogYHN0cmluZ2AgY29tIGEgc2lnbGEgZG8gaWRpb21hIGF0aXZvLlxuICAgKi9cbiAgZ2V0TGFuZ3VhZ2UoKTogc3RyaW5nIHtcbiAgICBjb25zdCBsYW5ndWFnZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoZkxvY2FsZUtleSkgfHwgdGhpcy5sYW5ndWFnZURlZmF1bHQgfHwgZ2V0QnJvd3Nlckxhbmd1YWdlKCk7XG5cbiAgICByZXR1cm4gbGFuZ3VhZ2UgJiYgbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIHJldG9ybmFyIG8gaWRpb21hICpkZWZhdWx0KiBkYSBhcGxpY2HDp8OjbyBkZWZpbmlkbyBuYXMgY29uZmlndXJhw6fDtWVzIGRvIG3Ds2R1bG8gZG8gaTE4biBhdHJhdsOpc1xuICAgKiBkbyBwYXLDom1ldHJvIGBjb25maWdgLlxuICAgKlxuICAgKiAqKlJldG9ybm86KiogYHN0cmluZ2AgY29tIGEgc2lnbGEgZG8gaWRpb21hICpkZWZhdWx0Ki5cbiAgICovXG4gIGdldExhbmd1YWdlRGVmYXVsdCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmxhbmd1YWdlRGVmYXVsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIHJldG9ybmFyIGEgYWJyZXZpYcOnw6NvIGRvIGlkaW9tYSBhdGl2byBuYSBhcGxpY2HDp8Ojby5cbiAgICpcbiAgICogQGRlZmF1bHQgYHB0YFxuICAgKlxuICAgKiAqKlJldG9ybm86KiogYHN0cmluZ2AgY29tIGEgc2lnbGEgYWJyZXZpYWRhIGRvIGlkaW9tYSBhdGl2by5cbiAgICovXG4gIGdldFNob3J0TGFuZ3VhZ2UoKTogc3RyaW5nIHtcbiAgICBjb25zdCBsYW5ndWFnZSA9IHRoaXMuZ2V0TGFuZ3VhZ2UoKTtcbiAgICBjb25zdCBzaG9ydExhbmd1YWdlID0gZ2V0U2hvcnRMYW5ndWFnZShsYW5ndWFnZSk7XG5cbiAgICByZXR1cm4gdGhmTG9jYWxlcy5pbmNsdWRlcyhzaG9ydExhbmd1YWdlKSA/IHNob3J0TGFuZ3VhZ2UgOiB0aGZMb2NhbGVEZWZhdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBNw6l0b2RvIHBhcmEgc2FsdmFyIG8gaWRpb21hIGRhIGFwbGljYcOnw6NvIG5vICpzdG9yYWdlKiwgdXRpbGl6YWRvIHBlbG8gc2VydmnDp28gZG8gaTE4bi5cbiAgICpcbiAgICogPiBBbyBkZWZpbmlyIHVtIGlkaW9tYSBwb3IgZXN0ZSBtw6l0b2RvLCB0b2RvcyBvcyBtw7NkdWxvcyBkYSBhcGxpY2HDp8OjbyB1dGlsaXphcsOjbyBvIGlkaW9tYSBkZWZpbmlkby5cbiAgICpcbiAgICogQHBhcmFtIGxhbmd1YWdlIHNpZ2xhIGRvIGlkaW9tYS5cbiAgICpcbiAgICogRXN0YSBzaWdsYSBkZXZlIHNlciBjb21wb3N0YSBwb3IgZHVhcyBsZXRyYXMgcmVwcmVzZW50YW5kbyBvIGlkaW9tYSxcbiAgICogcG9kZW5kbyBzZXIgYWRpY2lvbmFkbyBvdXRyYXMgZHVhcyBsZXRyYXMgcmVwcmVzZW50YW5kbyBvIHBhw61zLCBwb3IgZXhlbXBsbzogYHB0YCwgYHB0LUJSYCwgYHB0LWJyYCwgYGVuYCBvdSBgZW4tVVNgLlxuICAgKlxuICAgKiA+IENhc28gc2VqYSBpbmZvcm1hZG8gdW0gdmFsb3IgZGlmZXJlbnRlIGRlc3RlIHBhZHLDo28sIG8gbWVzbW8gc2Vyw6EgaWdub3JhZG8uXG4gICAqL1xuICBzZXRMYW5ndWFnZShsYW5ndWFnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKCFpc0xhbmd1YWdlKGxhbmd1YWdlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoZkxvY2FsZUtleSwgbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKSk7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE3DqXRvZG8gcXVlIGRlZmluZSBvIGlkaW9tYSBjb25maWd1cmFkbyBhIHBhcnRpciBkbyBwYXLDom1ldHJvIGBjb25maWdgIHV0aWxpemFkbyBwZWxvIG3Ds2R1bG8gZG8gaTE4bi5cbiAgICpcbiAgICogPiBBbyBkZWZpbmlyIHVtIGlkaW9tYSBwb3IgZXN0ZSBzZXJ2acOnbywgYXBlbmFzIG8gbcOzZHVsbyBkbyBpMThuIHJlZmVyZW50ZSBhIGVzdGEgY29uZmlndXJhw6fDo28gdXRpbGl6YXLDoSBvIGlkaW9tYSBkZWZpbmlkby5cbiAgICpcbiAgICogQHBhcmFtIGxhbmd1YWdlIHNpZ2xhIGRvIGlkaW9tYS5cbiAgICpcbiAgICogRXN0YSBzaWdsYSBkZXZlIHNlciBjb21wb3N0YSBwb3IgZHVhcyBsZXRyYXMgcmVwcmVzZW50YW5kbyBvIGlkaW9tYSxcbiAgICogcG9kZW5kbyBzZXIgYWRpY2lvbmFkbyBvdXRyYXMgZHVhcyBsZXRyYXMgcmVwcmVzZW50YW5kbyBvIHBhw61zLCBwb3IgZXhlbXBsbzogYHB0YCwgYHB0LUJSYCwgYHB0LWJyYCwgYGVuYCBvdSBgZW4tVVNgLlxuICAgKlxuICAgKiA+IENhc28gc2VqYSBpbmZvcm1hZG8gdW0gdmFsb3IgZGlmZXJlbnRlIGRlc3RlIHBhZHLDo28sIG8gbWVzbW8gc2Vyw6EgaWdub3JhZG8uXG4gICAqL1xuICBzZXRMYW5ndWFnZURlZmF1bHQobGFuZ3VhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMubGFuZ3VhZ2VEZWZhdWx0ID0gbGFuZ3VhZ2U7XG4gIH1cblxufVxuIl19