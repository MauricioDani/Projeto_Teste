/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Inject } from '@angular/core';
import { Observable } from 'rxjs';
import { isLanguage, reloadCurrentPage } from '../../utils/util';
import { ThfLanguageService } from '../thf-language/thf-language.service';
import { I18N_CONFIG } from './thf-i18n-config-injection-token';
/**
 * \@description
 *
 * O serviço `ThfI18nService` possibilita utilizar múltiplos idiomas e contextos na aplicação.
 *
 * > Antes da utilização do serviço, é necessário realizar a
 * [importação e configuração do módulo `ThfI18nModule`](/documentation/thf-i18n#i18n-config).
 *
 * **Utilização do serviço `ThfI18nService`:**
 *
 * Para utilizar o serviço basta importá-lo nos componentes que necessitarem de literais e fazer a injeção de
 * dependência no construtor:
 * ```
 *  import { ThfI18nService } from '\@totvs/thf-ui';
 *  ...
 *  constructor(private thfI18nService: ThfI18nService) { }
 *  ...
 * ```
 *
 * Por fim realizar a busca pelas literais, inscrevendo-se no [Observable](https://angular.io/guide/observables) pelo
 * método `getLiterals()`.
 *
 * > O método `getLiterals()` pode receber um objeto do tipo da interface `ThfI18nLiterals` como parâmetro,
 * porém, nenhuma das propriedades são obrigatórias. Caso nenhum parâmetro seja passado, serão buscadas
 * todas as literais do contexto definido com padrão, no idioma definido como padrão.
 *
 * Exemplos de requisição:
 * ```
 * literals = {};
 * literalsEn = {};
 * literalsCrm = {};
 *
 * constructor(private thfI18nService: ThfI18nService) {
 *   thfI18nService.getLiterals()
 *     .subscribe((literals) => {
 *       this.literals = literals;
 *     });
 *
 *   thfI18nService.getLiterals({context: 'crm', literals: ['add', 'remove']})
 *     .subscribe((literals) => {
 *       this.literalsCrm = literals;
 *     });
 *
 *   thfI18nService.getLiterals({language: 'en-us'})
 *     .subscribe((literals) => {
 *       this.literalsEn = literals;
 *     });
 * }
 * ```
 *
 * Para apresentar as literais capturadas acima no HTML do componente, deve-se utilizar o
 * seguinte código:
 *
 * <pre ngNonBindable>
 * {{ literals?.add }}
 * {{ literals?.remove }}
 * </pre>
 *
 * Caso as literais contenham variáveis que precisem ser substituídas, pode-se utilizar o *pipe* `thfI18n`.
 * É possível informar propriedades do componente como `name` e `nickname` ou
 * informar o valor diretamente com "" ou número, conforme o exemplo abaixo:
 *
 * <pre ngNonBindable>
 * {{ literals?.people | thfI18n:[120] }}
 * {{ literals?.greeting | thfI18n:[name, nickname] }}
 * {{ literals?.greeting | thfI18n:["Brad", "Green"] }}
 * </pre>
 *
 * > É importante o uso do operador `?` (Elvis) para evitar erros enquanto as literais não forem carregadas.
 *
 * ### Teste unitário
 *
 * Abaixo segue um exemplo de *setup* inicial de teste unitário do *AppComponent* que utiliza o `ThfI18nService`:
 *
 * ```
 * import { async, TestBed } from '\@angular/core/testing';
 * import { HttpClientTestingModule } from '\@angular/common/http/testing';
 *
 * import { ThfI18nModule } from '\@totvs/thf-ui';
 *
 * import { AppComponent } from './app.component';
 *
 * describe('AppComponent', () => {
 *   const anotherPT = {
 *     text: 'texto',
 *     add: 'adicionar',
 *     remove: 'remover'
 *   };
 *
 *   const generalPT = {
 *     text: 'texto',
 *     add: 'adicionar',
 *     remove: 'remover'
 *   };
 *
 *   const config = {
 *     default: {
 *       language: 'pt-BR',
 *       context: 'general',
 *       cache: false
 *     },
 *     contexts: {
 *       general: {
 *         'pt-br': generalPT
 *       },
 *       another: {
 *         'pt-br': anotherPT
 *       }
 *     }
 *   };
 *
 *   beforeEach(async(() => {
 *     TestBed.configureTestingModule({
 *       declarations: [
 *         AppComponent
 *       ],
 *       imports: [
 *         HttpClientTestingModule,
 *         ThfI18nModule.config(config)
 *       ]
 *     }).compileComponents();
 *   }));
 *
 *   it('should create the app', async(() => {
 *     const fixture = TestBed.createComponent(AppComponent);
 *     const app = fixture.debugElement.componentInstance;
 *
 *     expect(app).toBeTruthy();
 *   }));
 *
 * });
 * ```
 */
var ThfI18nBaseService = /** @class */ (function () {
    function ThfI18nBaseService(config, http, languageService) {
        this.config = config;
        this.http = http;
        this.languageService = languageService;
        this.varI18n = {};
        this.useCache = false;
        this.servicesContext = {};
        this.setConfig(config);
    }
    /**
     * <a id="get-language"></a>
     * Método que retorna o idioma padrão ativo.
     *
     * A busca deste idioma pelo método será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método [`setLanguage()`](documentation/thf-i18n#setLanguage).
     *
     *   2 - o valor inserido no módulo do i18n através do parâmetro `config`, sendo o idioma inserido na propriedade
     * `language` da interface [`ThfI18nConfigDefault`](documentation/thf-i18n#thfI18nConfigDefault).
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo THF (`pt`, `en` ou `es`), será retornado valor `pt`.
     *
     * **Retorno:**
     *
     * `string` com a sigla do idioma padrão.
     */
    /**
     * <a id="get-language"></a>
     * Método que retorna o idioma padrão ativo.
     *
     * A busca deste idioma pelo método será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método [`setLanguage()`](documentation/thf-i18n#setLanguage).
     *
     *   2 - o valor inserido no módulo do i18n através do parâmetro `config`, sendo o idioma inserido na propriedade
     * `language` da interface [`ThfI18nConfigDefault`](documentation/thf-i18n#thfI18nConfigDefault).
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo THF (`pt`, `en` ou `es`), será retornado valor `pt`.
     *
     * **Retorno:**
     *
     * `string` com a sigla do idioma padrão.
     * @return {?}
     */
    ThfI18nBaseService.prototype.getLanguage = /**
     * <a id="get-language"></a>
     * Método que retorna o idioma padrão ativo.
     *
     * A busca deste idioma pelo método será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método [`setLanguage()`](documentation/thf-i18n#setLanguage).
     *
     *   2 - o valor inserido no módulo do i18n através do parâmetro `config`, sendo o idioma inserido na propriedade
     * `language` da interface [`ThfI18nConfigDefault`](documentation/thf-i18n#thfI18nConfigDefault).
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo THF (`pt`, `en` ou `es`), será retornado valor `pt`.
     *
     * **Retorno:**
     *
     * `string` com a sigla do idioma padrão.
     * @return {?}
     */
    function () {
        return this.languageService.getLanguage();
    };
    /**
     * Método que retorna o idioma padrão ativo, com somente a abreviação do idioma (duas primeiras letras).
     * Por exemplo: "pt" ou "es".
     *
     * A busca deste idioma é baseada no método [**getLanguage()**](/documentation/thf-i18n#get-language).
     *
     * **Retorno:**
     *
     * `string` com a sigla do idioma padrão.
     */
    /**
     * Método que retorna o idioma padrão ativo, com somente a abreviação do idioma (duas primeiras letras).
     * Por exemplo: "pt" ou "es".
     *
     * A busca deste idioma é baseada no método [**getLanguage()**](/documentation/thf-i18n#get-language).
     *
     * **Retorno:**
     *
     * `string` com a sigla do idioma padrão.
     * @return {?}
     */
    ThfI18nBaseService.prototype.getShortLanguage = /**
     * Método que retorna o idioma padrão ativo, com somente a abreviação do idioma (duas primeiras letras).
     * Por exemplo: "pt" ou "es".
     *
     * A busca deste idioma é baseada no método [**getLanguage()**](/documentation/thf-i18n#get-language).
     *
     * **Retorno:**
     *
     * `string` com a sigla do idioma padrão.
     * @return {?}
     */
    function () {
        return this.languageService.getShortLanguage();
    };
    /**
     * <a id="setLanguage"></a>
     * Método para alterar o idioma padrão do módulo do i18n.
     *
     * Ao utilizar este método, o idioma ficará gravado no armazenamento local do navegador, que será utilizado pelo
     * serviço do `i18n` para buscar as literais no idioma padrão.
     *
     * @param language {string} Sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     *
     * @param reload {boolean} Indica se a página atual poderá ser recarregada após a alteração do idioma.
     *
     * Este recurso pode ser útil para os usuários que utilizam o método `getLiterals()` do serviço do i18n para poder
     * buscar novamente as literais no novo idioma configurado.
     */
    /**
     * <a id="setLanguage"></a>
     * Método para alterar o idioma padrão do módulo do i18n.
     *
     * Ao utilizar este método, o idioma ficará gravado no armazenamento local do navegador, que será utilizado pelo
     * serviço do `i18n` para buscar as literais no idioma padrão.
     *
     * @param {?} language {string} Sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     *
     * @param {?=} reload {boolean} Indica se a página atual poderá ser recarregada após a alteração do idioma.
     *
     * Este recurso pode ser útil para os usuários que utilizam o método `getLiterals()` do serviço do i18n para poder
     * buscar novamente as literais no novo idioma configurado.
     * @return {?}
     */
    ThfI18nBaseService.prototype.setLanguage = /**
     * <a id="setLanguage"></a>
     * Método para alterar o idioma padrão do módulo do i18n.
     *
     * Ao utilizar este método, o idioma ficará gravado no armazenamento local do navegador, que será utilizado pelo
     * serviço do `i18n` para buscar as literais no idioma padrão.
     *
     * @param {?} language {string} Sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     *
     * @param {?=} reload {boolean} Indica se a página atual poderá ser recarregada após a alteração do idioma.
     *
     * Este recurso pode ser útil para os usuários que utilizam o método `getLiterals()` do serviço do i18n para poder
     * buscar novamente as literais no novo idioma configurado.
     * @return {?}
     */
    function (language, reload) {
        if (!isLanguage(language)) {
            return;
        }
        this.languageService.setLanguage(language);
        if (reload) {
            reloadCurrentPage();
        }
    };
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    ThfI18nBaseService.prototype.setConfig = /**
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        // Seta as configurações padrões definidas no importação do módulo
        if (config['default']) {
            this.languageService.setLanguageDefault(config['default']['language']);
            this.contextDefault = (config['default']['context']) ? config['default']['context'] : '';
            this.useCache = (config['default']['cache']) ? config['default']['cache'] : false;
        }
        // Carrega a lista dos contextos e as contantes informadas
        if (config['contexts']) {
            this.setVarI18n(config['contexts']);
            // Se nenhum contexto foi definido como padrão,
            // então define o primeiro contexto
            if (!this.contextDefault) {
                for (var context in config['contexts']) {
                    if (this.config['contexts'].hasOwnProperty(context)) {
                        this.contextDefault = context;
                        break;
                    }
                }
            }
        }
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    ThfI18nBaseService.prototype.getLiterals = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var language = options['language'] ? options['language'].toLowerCase() : this.getLanguage();
        /** @type {?} */
        var context = (options['context']) ? options['context'] : this.contextDefault;
        /** @type {?} */
        var literals = (options['literals']) ? options['literals'] : [];
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            if (_this.servicesContext[context]) {
                // Faz o processo de busca de um contexto que contém serviço
                _this.getLiteralsFromContextService(language, context, literals, observer);
            }
            else {
                // Faz o processo de busca de um contexto que utiliza constante
                _this.getLiteralsFromContextConstant(language, context, literals, observer);
            }
        }));
    };
    // Processo de busca de um contexto que contém serviço.
    //    1 - Procura na variável I18n deste serviço
    //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se nenhuma literal for encontrada, então busca em pt-br
    // Processo de busca de um contexto que contém serviço.
    //    1 - Procura na variável I18n deste serviço
    //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se nenhuma literal for encontrada, então busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    ThfI18nBaseService.prototype.getLiteralsFromContextService = 
    // Processo de busca de um contexto que contém serviço.
    //    1 - Procura na variável I18n deste serviço
    //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se nenhuma literal for encontrada, então busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    function (language, context, literals, observer, translations, languageAlternative) {
        if (translations === void 0) { translations = {}; }
        if (languageAlternative === void 0) { languageAlternative = null; }
        // Idioma usado para tentar buscar as literais faltantes
        /** @type {?} */
        var languageSearch = (languageAlternative) ? languageAlternative : language;
        translations = this.mergeObject(translations, this.searchInVarI18n(languageSearch, context, literals));
        if (this.countObject(translations) > 0) {
            observer.next(translations);
        }
        // realiza a busca no localStorage e em seguida no serviço
        this.getLiteralsLocalStorageAndCache(languageSearch, context, literals, observer, translations, languageAlternative);
    };
    // Procura no local storage e em seguida no serviço
    // Caso não encontre nem no serviço, recomeça a busca em pt-br
    // Procura no local storage e em seguida no serviço
    // Caso não encontre nem no serviço, recomeça a busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    ThfI18nBaseService.prototype.getLiteralsLocalStorageAndCache = 
    // Procura no local storage e em seguida no serviço
    // Caso não encontre nem no serviço, recomeça a busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    function (language, context, literals, observer, translations, languageAlternative) {
        var _this = this;
        if (languageAlternative === void 0) { languageAlternative = null; }
        /** @type {?} */
        var languageSearch = (languageAlternative) ? languageAlternative : language;
        /** @type {?} */
        var translationTemp;
        // Verifica se usa cache
        if (this.useCache) {
            translationTemp = this.searchInLocalStorage(languageSearch, context, literals);
            if (this.countObject(translationTemp) > 0) {
                this.updateVarI18n(language, context, translationTemp);
                translations = this.mergeObject(translationTemp, translations);
                observer.next(translations);
            }
        }
        // Busca do Serviço
        this.getHttpService(this.servicesContext[context], languageSearch, literals)
            .subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response) {
                _this.updateLocalStorage(language, context, response);
                _this.updateVarI18n(language, context, response);
                translationTemp = _this.searchInVarI18n(language, context, literals);
                translations = _this.mergeObject(translationTemp, translations);
                observer.next(translations);
            }
            // Se não encontrou todas as literais pesquisadas no idioma
            // Então refaz o processo procurando em português
            if (literals.length > _this.countObject(translations)) {
                if (languageAlternative === 'pt-br') {
                    // Se não encontrou nem em português, então retorna o nome das literais
                    translations = _this.completeFaultLiterals(language, context, literals, translations);
                    _this.updateLocalStorage(language, context, translations);
                    _this.updateVarI18n(language, context, translations);
                    observer.next(translations);
                }
                else {
                    _this.getLiteralsFromContextService(language, context, literals, observer, translations, 'pt-br');
                }
            }
        }));
    };
    // Procura pela lista de literais
    // Se não encontrar todas, procura em pt-br
    // Procura pela lista de literais
    // Se não encontrar todas, procura em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @return {?}
     */
    ThfI18nBaseService.prototype.getLiteralsFromContextConstant = 
    // Procura pela lista de literais
    // Se não encontrar todas, procura em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @return {?}
     */
    function (language, context, literals, observer, translations) {
        if (translations === void 0) { translations = {}; }
        translations = this.mergeObject(translations, this.searchInVarI18n(language, context, literals));
        if (this.countObject(translations) > 0) {
            observer.next(translations);
        }
        // Se foi pesquisado por literais
        if (literals.length > 0) {
            // Se não encontrou todas as literais pesquisadas no idioma, procura em português
            if (literals.length > this.countObject(translations)) {
                if (language === 'pt-br') {
                    // Se não encontrou nem em português, então retorna o nome das literais
                    translations = this.completeFaultLiterals(language, context, literals, translations);
                    observer.next(translations);
                }
                else {
                    this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
                }
            }
        }
        else {
            // Se não encontrar nenhuma literal, procura em português
            if (this.countObject(translations) === 0 && language !== 'pt-br') {
                this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
            }
            // caso não informar literais e não houver tradução
            observer.next(translations);
            observer.complete();
        }
    };
    // Busca pelas literais no local storage
    // Busca pelas literais no local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    ThfI18nBaseService.prototype.searchInLocalStorage = 
    // Busca pelas literais no local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    function (language, context, literals) {
        /** @type {?} */
        var translations = {};
        if (literals.length > 0) {
            for (var i = 0; i < literals.length; i++) {
                /** @type {?} */
                var literal = literals[i];
                /** @type {?} */
                var translation = localStorage.getItem(language + '-' + context + '-' + literal);
                if (translation) {
                    translations[literal] = translation;
                }
            }
        }
        return translations;
    };
    // Busca pelas literais na variável do serviço
    // Busca pelas literais na variável do serviço
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    ThfI18nBaseService.prototype.searchInVarI18n = 
    // Busca pelas literais na variável do serviço
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    function (language, context, literals) {
        /** @type {?} */
        var translations = {};
        if (this.varI18n[language] && this.varI18n[language][context]) {
            /** @type {?} */
            var content = this.varI18n[language][context];
            if (literals.length > 0) {
                // Busca as literais desejadas
                for (var i = 0; i < literals.length; i++) {
                    /** @type {?} */
                    var literal = literals[i];
                    if (content.hasOwnProperty(literal)) {
                        translations[literal] = content[literal];
                    }
                }
            }
            else {
                // Atribui todas as literais
                translations = tslib_1.__assign({}, content);
            }
        }
        return translations;
    };
    // Atualiza o local storage
    // Atualiza o local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    ThfI18nBaseService.prototype.updateLocalStorage = 
    // Atualiza o local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    function (language, context, data) {
        if (this.useCache) {
            for (var literal in data) {
                if (data.hasOwnProperty(literal)) {
                    localStorage.setItem(language + '-' + context + '-' + literal, data[literal]);
                }
            }
        }
    };
    // Atualiza a variável local com as literais com os objetos passados na configuração
    // Atualiza a variável local com as literais com os objetos passados na configuração
    /**
     * @private
     * @param {?} contexts
     * @return {?}
     */
    ThfI18nBaseService.prototype.setVarI18n = 
    // Atualiza a variável local com as literais com os objetos passados na configuração
    /**
     * @private
     * @param {?} contexts
     * @return {?}
     */
    function (contexts) {
        // Percorre os contextos
        for (var context in contexts) {
            if (contexts.hasOwnProperty(context)) {
                /** @type {?} */
                var contextContent = contexts[context];
                // Percorre os idiomas dentro do contexto
                for (var language in contextContent) {
                    if (contextContent.hasOwnProperty(language)) {
                        /** @type {?} */
                        var languageContent = contextContent[language];
                        if (language === 'url') {
                            this.servicesContext[context] = languageContent;
                        }
                        else {
                            this.updateVarI18n(language, context, languageContent);
                        }
                    }
                }
            }
        }
    };
    // Atualiza a variável local com as literais idioma e contexto
    // Atualiza a variável local com as literais idioma e contexto
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    ThfI18nBaseService.prototype.updateVarI18n = 
    // Atualiza a variável local com as literais idioma e contexto
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    function (language, context, data) {
        var _a;
        language = language.toLowerCase();
        if (!this.varI18n[language]) {
            this.varI18n[language] = (_a = {}, _a[context] = {}, _a);
        }
        if (!this.varI18n[language][context]) {
            this.varI18n[language][context] = {};
        }
        // Cria ou atualiza o contexto dentro do storage
        this.varI18n[language][context] = this.mergeObject(data, this.varI18n[language][context]);
    };
    /**
     * @private
     * @param {?} url
     * @param {?} language
     * @param {?} literals
     * @return {?}
     */
    ThfI18nBaseService.prototype.getHttpService = /**
     * @private
     * @param {?} url
     * @param {?} language
     * @param {?} literals
     * @return {?}
     */
    function (url, language, literals) {
        /** @type {?} */
        var param = '?language=' + language;
        if (literals.length > 0) {
            param += '&literals=' + literals.join();
        }
        // Remove a barra final do endereço
        url = (url.lastIndexOf('/') === url.length - 1) ? url.substr(0, url.length - 1) : url;
        return this.http.get(url + param);
    };
    // Completa com o nome da literais, as que não foram encontradas
    // Completa com o nome da literais, as que não foram encontradas
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} translations
     * @return {?}
     */
    ThfI18nBaseService.prototype.completeFaultLiterals = 
    // Completa com o nome da literais, as que não foram encontradas
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} translations
     * @return {?}
     */
    function (language, context, literals, translations) {
        for (var i = 0; i < literals.length; i++) {
            /** @type {?} */
            var literal = literals[i];
            if (!translations[literal]) {
                translations[literal] = literal;
            }
        }
        return translations;
    };
    // Conta os atributos do objeto
    // Conta os atributos do objeto
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    ThfI18nBaseService.prototype.countObject = 
    // Conta os atributos do objeto
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return Object.keys(obj).length;
    };
    // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
    // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
    /**
     * @private
     * @param {?} objPermanent
     * @param {?} obj
     * @return {?}
     */
    ThfI18nBaseService.prototype.mergeObject = 
    // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
    /**
     * @private
     * @param {?} objPermanent
     * @param {?} obj
     * @return {?}
     */
    function (objPermanent, obj) {
        return tslib_1.__assign({}, obj, objPermanent);
    };
    /** @nocollapse */
    ThfI18nBaseService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [I18N_CONFIG,] }] },
        { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
        { type: ThfLanguageService }
    ]; };
    return ThfI18nBaseService;
}());
export { ThfI18nBaseService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfI18nBaseService.prototype.varI18n;
    /**
     * @type {?}
     * @private
     */
    ThfI18nBaseService.prototype.contextDefault;
    /**
     * @type {?}
     * @private
     */
    ThfI18nBaseService.prototype.useCache;
    /**
     * @type {?}
     * @private
     */
    ThfI18nBaseService.prototype.servicesContext;
    /**
     * @type {?}
     * @private
     */
    ThfI18nBaseService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    ThfI18nBaseService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ThfI18nBaseService.prototype.languageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWkxOG4tYmFzZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90aGYtaTE4bi90aGYtaTE4bi1iYXNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRWxDLE9BQU8sRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUUxRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEloRTtJQVVFLDRCQUMrQixNQUFzQixFQUN2QixJQUFpQixFQUNyQyxlQUFvQztRQUZmLFdBQU0sR0FBTixNQUFNLENBQWdCO1FBQ3ZCLFNBQUksR0FBSixJQUFJLENBQWE7UUFDckMsb0JBQWUsR0FBZixlQUFlLENBQXFCO1FBWHRDLFlBQU8sR0FBUSxFQUFFLENBQUM7UUFJbEIsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUUxQixvQkFBZSxHQUFRLEVBQUUsQ0FBQztRQU9oQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7O09Ba0JHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFDSCx3Q0FBVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFBWDtRQUNFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHOzs7Ozs7Ozs7Ozs7SUFDSCw2Q0FBZ0I7Ozs7Ozs7Ozs7O0lBQWhCO1FBQ0UsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDakQsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FrQkc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUNILHdDQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUFYLFVBQVksUUFBZ0IsRUFBRSxNQUFnQjtRQUU1QyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3pCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTNDLElBQUksTUFBTSxFQUFFO1lBQ1YsaUJBQWlCLEVBQUUsQ0FBQztTQUNyQjtJQUVILENBQUM7Ozs7OztJQUVPLHNDQUFTOzs7OztJQUFqQixVQUFrQixNQUFxQjtRQUNyQyxrRUFBa0U7UUFDbEUsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFFckIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUV2RSxJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3pGLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7U0FDbkY7UUFFRCwwREFBMEQ7UUFDMUQsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUVwQywrQ0FBK0M7WUFDL0MsbUNBQW1DO1lBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO2dCQUN4QixLQUFLLElBQU0sT0FBTyxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtvQkFDeEMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFBRTt3QkFDbkQsSUFBSSxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUM7d0JBQzlCLE1BQU07cUJBQ1A7aUJBQ0Y7YUFDRjtTQUNGO0lBQ0gsQ0FBQzs7Ozs7SUFFRCx3Q0FBVzs7OztJQUFYLFVBQVksT0FBNkI7UUFBekMsaUJBY0M7UUFkVyx3QkFBQSxFQUFBLFlBQTZCOztZQUNqQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7O1lBQ3ZGLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjOztZQUN6RSxRQUFRLEdBQWtCLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUVoRixPQUFPLElBQUksVUFBVTs7OztRQUFDLFVBQUEsUUFBUTtZQUM1QixJQUFJLEtBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ2pDLDREQUE0RDtnQkFDNUQsS0FBSSxDQUFDLDZCQUE2QixDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2FBQzNFO2lCQUFNO2dCQUNMLCtEQUErRDtnQkFDL0QsS0FBSSxDQUFDLDhCQUE4QixDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2FBQzVFO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsdURBQXVEO0lBQ3ZELGdEQUFnRDtJQUNoRCxvR0FBb0c7SUFDcEcsd0dBQXdHO0lBQ3hHLGlFQUFpRTs7Ozs7Ozs7Ozs7Ozs7OztJQUN6RCwwREFBNkI7Ozs7Ozs7Ozs7Ozs7Ozs7SUFBckMsVUFBc0MsUUFBZ0IsRUFDaEIsT0FBZSxFQUNmLFFBQXVCLEVBQ3ZCLFFBQWEsRUFDYixZQUFzQixFQUN0QixtQkFBa0M7UUFEbEMsNkJBQUEsRUFBQSxpQkFBc0I7UUFDdEIsb0NBQUEsRUFBQSwwQkFBa0M7OztZQUdoRSxjQUFjLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsUUFBUTtRQUU3RSxZQUFZLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFdkcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN0QyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzdCO1FBRUQsMERBQTBEO1FBQzFELElBQUksQ0FBQywrQkFBK0IsQ0FBQyxjQUFjLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFDdkgsQ0FBQztJQUVELG1EQUFtRDtJQUNuRCw4REFBOEQ7Ozs7Ozs7Ozs7Ozs7SUFDdEQsNERBQStCOzs7Ozs7Ozs7Ozs7O0lBQXZDLFVBQXdDLFFBQWdCLEVBQ2hCLE9BQWUsRUFDZixRQUF1QixFQUN2QixRQUFhLEVBQ2IsWUFBaUIsRUFDakIsbUJBQWtDO1FBTDFFLGlCQTZDQztRQXhDdUMsb0NBQUEsRUFBQSwwQkFBa0M7O1lBRWxFLGNBQWMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxRQUFROztZQUN6RSxlQUFlO1FBQ25CLHdCQUF3QjtRQUN4QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsZUFBZSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxjQUFjLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQy9FLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3pDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztnQkFDdkQsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQyxDQUFDO2dCQUMvRCxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQzdCO1NBQ0Y7UUFFRCxtQkFBbUI7UUFDbkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxFQUFFLGNBQWMsRUFBRSxRQUFRLENBQUM7YUFDekUsU0FBUzs7OztRQUNSLFVBQUEsUUFBUTtZQUNOLElBQUksUUFBUSxFQUFFO2dCQUNaLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUNyRCxLQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQ2hELGVBQWUsR0FBRyxLQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQ3BFLFlBQVksR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDL0QsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUM3QjtZQUVELDJEQUEyRDtZQUMzRCxpREFBaUQ7WUFDakQsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEVBQUU7Z0JBQ3BELElBQUksbUJBQW1CLEtBQUssT0FBTyxFQUFFO29CQUNuQyx1RUFBdUU7b0JBQ3ZFLFlBQVksR0FBRyxLQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7b0JBQ3JGLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO29CQUN6RCxLQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7b0JBQ3BELFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7aUJBQzdCO3FCQUFNO29CQUNMLEtBQUksQ0FBQyw2QkFBNkIsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2lCQUNsRzthQUNGO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDVCxDQUFDO0lBRUQsaUNBQWlDO0lBQ2pDLDJDQUEyQzs7Ozs7Ozs7Ozs7O0lBQ25DLDJEQUE4Qjs7Ozs7Ozs7Ozs7O0lBQXRDLFVBQXVDLFFBQWdCLEVBQ2hCLE9BQWUsRUFDZixRQUF1QixFQUN2QixRQUFhLEVBQ2IsWUFBc0I7UUFBdEIsNkJBQUEsRUFBQSxpQkFBc0I7UUFFM0QsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdEMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUM3QjtRQUVELGlDQUFpQztRQUNqQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLGlGQUFpRjtZQUNqRixJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsRUFBRTtnQkFDcEQsSUFBSSxRQUFRLEtBQUssT0FBTyxFQUFFO29CQUN4Qix1RUFBdUU7b0JBQ3ZFLFlBQVksR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7b0JBQ3JGLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7aUJBQzdCO3FCQUFNO29CQUNMLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7aUJBQ3pGO2FBQ0Y7U0FDRjthQUFNO1lBQ0wseURBQXlEO1lBQ3pELElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksUUFBUSxLQUFLLE9BQU8sRUFBRTtnQkFDaEUsSUFBSSxDQUFDLDhCQUE4QixDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQzthQUN6RjtZQUVELG1EQUFtRDtZQUNuRCxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzVCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNyQjtJQUNILENBQUM7SUFFRCx3Q0FBd0M7Ozs7Ozs7OztJQUNoQyxpREFBb0I7Ozs7Ozs7OztJQUE1QixVQUE2QixRQUFnQixFQUFFLE9BQWUsRUFBRSxRQUF1Qjs7WUFDL0UsWUFBWSxHQUFRLEVBQUU7UUFFNUIsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN2QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTs7b0JBQ2xDLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDOztvQkFDckIsV0FBVyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLEdBQUcsR0FBRyxPQUFPLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQztnQkFDbEYsSUFBSSxXQUFXLEVBQUU7b0JBQ2YsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFdBQVcsQ0FBQztpQkFDckM7YUFDRjtTQUNGO1FBQ0QsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVELDhDQUE4Qzs7Ozs7Ozs7O0lBQ3RDLDRDQUFlOzs7Ozs7Ozs7SUFBdkIsVUFBd0IsUUFBZ0IsRUFBRSxPQUFlLEVBQUUsUUFBdUI7O1lBQzVFLFlBQVksR0FBUSxFQUFFO1FBRTFCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFOztnQkFDdkQsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDO1lBRS9DLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3ZCLDhCQUE4QjtnQkFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O3dCQUNsQyxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDM0IsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO3dCQUNuQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO3FCQUMxQztpQkFDRjthQUNGO2lCQUFNO2dCQUNMLDRCQUE0QjtnQkFDNUIsWUFBWSx3QkFBUSxPQUFPLENBQUUsQ0FBQzthQUMvQjtTQUNGO1FBQ0QsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVELDJCQUEyQjs7Ozs7Ozs7O0lBQ25CLCtDQUFrQjs7Ozs7Ozs7O0lBQTFCLFVBQTJCLFFBQWdCLEVBQUUsT0FBZSxFQUFFLElBQVM7UUFDckUsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLEtBQUssSUFBTSxPQUFPLElBQUksSUFBSSxFQUFFO2dCQUMxQixJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ2hDLFlBQVksQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLEdBQUcsR0FBRyxPQUFPLEdBQUcsR0FBRyxHQUFHLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztpQkFDL0U7YUFDRjtTQUNGO0lBQ0gsQ0FBQztJQUVELG9GQUFvRjs7Ozs7OztJQUM1RSx1Q0FBVTs7Ozs7OztJQUFsQixVQUFtQixRQUFhO1FBQzlCLHdCQUF3QjtRQUN4QixLQUFLLElBQU0sT0FBTyxJQUFJLFFBQVEsRUFBRTtZQUM5QixJQUFJLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7O29CQUM5QixjQUFjLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQztnQkFFeEMseUNBQXlDO2dCQUN6QyxLQUFLLElBQU0sUUFBUSxJQUFJLGNBQWMsRUFBRTtvQkFDckMsSUFBSSxjQUFjLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFOzs0QkFDckMsZUFBZSxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUM7d0JBRWhELElBQUksUUFBUSxLQUFLLEtBQUssRUFBRTs0QkFDdEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsR0FBRyxlQUFlLENBQUM7eUJBQ2pEOzZCQUFNOzRCQUNMLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQzt5QkFDeEQ7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGO0lBQ0gsQ0FBQztJQUVELDhEQUE4RDs7Ozs7Ozs7O0lBQ3RELDBDQUFhOzs7Ozs7Ozs7SUFBckIsVUFBc0IsUUFBZ0IsRUFBRSxPQUFlLEVBQUUsSUFBUzs7UUFDaEUsUUFBUSxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVsQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxhQUFJLEdBQUMsT0FBTyxJQUFHLEVBQUUsS0FBQyxDQUFDO1NBQzFDO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDdEM7UUFFRCxnREFBZ0Q7UUFDaEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDNUYsQ0FBQzs7Ozs7Ozs7SUFFTywyQ0FBYzs7Ozs7OztJQUF0QixVQUF1QixHQUFXLEVBQUUsUUFBZ0IsRUFBRSxRQUF1Qjs7WUFDdkUsS0FBSyxHQUFHLFlBQVksR0FBRyxRQUFRO1FBQ25DLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkIsS0FBSyxJQUFJLFlBQVksR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDekM7UUFFRCxtQ0FBbUM7UUFDbkMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFFdEYsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELGdFQUFnRTs7Ozs7Ozs7OztJQUN4RCxrREFBcUI7Ozs7Ozs7Ozs7SUFBN0IsVUFBOEIsUUFBZ0IsRUFDaEIsT0FBZSxFQUNmLFFBQXVCLEVBQ3ZCLFlBQWlCO1FBQzdDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztnQkFDbEMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDMUIsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLE9BQU8sQ0FBQzthQUNqQztTQUNGO1FBQ0QsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVELCtCQUErQjs7Ozs7OztJQUN2Qix3Q0FBVzs7Ozs7OztJQUFuQixVQUFvQixHQUFXO1FBQzdCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDakMsQ0FBQztJQUVELHdGQUF3Rjs7Ozs7Ozs7SUFDaEYsd0NBQVc7Ozs7Ozs7O0lBQW5CLFVBQW9CLFlBQWlCLEVBQUUsR0FBUTtRQUM3Qyw0QkFBWSxHQUFHLEVBQUssWUFBWSxFQUFHO0lBQ3JDLENBQUM7OztnREFqV0UsTUFBTSxTQUFDLFdBQVc7Z0JBN0pkLFVBQVUsdUJBOEpkLE1BQU0sU0FBQyxVQUFVO2dCQXhKYixrQkFBa0I7O0lBeWYzQix5QkFBQztDQUFBLEFBN1dELElBNldDO1NBN1dZLGtCQUFrQjs7Ozs7O0lBRTdCLHFDQUEwQjs7Ozs7SUFFMUIsNENBQStCOzs7OztJQUUvQixzQ0FBa0M7Ozs7O0lBRWxDLDZDQUFrQzs7Ozs7SUFHaEMsb0NBQW1EOzs7OztJQUNuRCxrQ0FBNkM7Ozs7O0lBQzdDLDZDQUE0QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBpc0xhbmd1YWdlLCByZWxvYWRDdXJyZW50UGFnZSB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgVGhmTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vdGhmLWxhbmd1YWdlL3RoZi1sYW5ndWFnZS5zZXJ2aWNlJztcblxuaW1wb3J0IHsgSTE4Tl9DT05GSUcgfSBmcm9tICcuL3RoZi1pMThuLWNvbmZpZy1pbmplY3Rpb24tdG9rZW4nO1xuaW1wb3J0IHsgVGhmSTE4bkNvbmZpZyB9IGZyb20gJy4vaW50ZXJmYWNlcy90aGYtaTE4bi1jb25maWcuaW50ZXJmYWNlJztcbmltcG9ydCB7IFRoZkkxOG5MaXRlcmFscyB9IGZyb20gJy4vaW50ZXJmYWNlcy90aGYtaTE4bi1saXRlcmFscy5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gc2VydmnDp28gYFRoZkkxOG5TZXJ2aWNlYCBwb3NzaWJpbGl0YSB1dGlsaXphciBtw7psdGlwbG9zIGlkaW9tYXMgZSBjb250ZXh0b3MgbmEgYXBsaWNhw6fDo28uXG4gKlxuICogPiBBbnRlcyBkYSB1dGlsaXphw6fDo28gZG8gc2VydmnDp28sIMOpIG5lY2Vzc8OhcmlvIHJlYWxpemFyIGFcbiAqIFtpbXBvcnRhw6fDo28gZSBjb25maWd1cmHDp8OjbyBkbyBtw7NkdWxvIGBUaGZJMThuTW9kdWxlYF0oL2RvY3VtZW50YXRpb24vdGhmLWkxOG4jaTE4bi1jb25maWcpLlxuICpcbiAqICoqVXRpbGl6YcOnw6NvIGRvIHNlcnZpw6dvIGBUaGZJMThuU2VydmljZWA6KipcbiAqXG4gKiBQYXJhIHV0aWxpemFyIG8gc2VydmnDp28gYmFzdGEgaW1wb3J0w6EtbG8gbm9zIGNvbXBvbmVudGVzIHF1ZSBuZWNlc3NpdGFyZW0gZGUgbGl0ZXJhaXMgZSBmYXplciBhIGluamXDp8OjbyBkZVxuICogZGVwZW5kw6puY2lhIG5vIGNvbnN0cnV0b3I6XG4gKiBgYGBcbiAqICBpbXBvcnQgeyBUaGZJMThuU2VydmljZSB9IGZyb20gJ0B0b3R2cy90aGYtdWknO1xuICogIC4uLlxuICogIGNvbnN0cnVjdG9yKHByaXZhdGUgdGhmSTE4blNlcnZpY2U6IFRoZkkxOG5TZXJ2aWNlKSB7IH1cbiAqICAuLi5cbiAqIGBgYFxuICpcbiAqIFBvciBmaW0gcmVhbGl6YXIgYSBidXNjYSBwZWxhcyBsaXRlcmFpcywgaW5zY3JldmVuZG8tc2Ugbm8gW09ic2VydmFibGVdKGh0dHBzOi8vYW5ndWxhci5pby9ndWlkZS9vYnNlcnZhYmxlcykgcGVsb1xuICogbcOpdG9kbyBgZ2V0TGl0ZXJhbHMoKWAuXG4gKlxuICogPiBPIG3DqXRvZG8gYGdldExpdGVyYWxzKClgIHBvZGUgcmVjZWJlciB1bSBvYmpldG8gZG8gdGlwbyBkYSBpbnRlcmZhY2UgYFRoZkkxOG5MaXRlcmFsc2AgY29tbyBwYXLDom1ldHJvLFxuICogcG9yw6ltLCBuZW5odW1hIGRhcyBwcm9wcmllZGFkZXMgc8OjbyBvYnJpZ2F0w7NyaWFzLiBDYXNvIG5lbmh1bSBwYXLDom1ldHJvIHNlamEgcGFzc2Fkbywgc2Vyw6NvIGJ1c2NhZGFzXG4gKiB0b2RhcyBhcyBsaXRlcmFpcyBkbyBjb250ZXh0byBkZWZpbmlkbyBjb20gcGFkcsOjbywgbm8gaWRpb21hIGRlZmluaWRvIGNvbW8gcGFkcsOjby5cbiAqXG4gKiBFeGVtcGxvcyBkZSByZXF1aXNpw6fDo286XG4gKiBgYGBcbiAqIGxpdGVyYWxzID0ge307XG4gKiBsaXRlcmFsc0VuID0ge307XG4gKiBsaXRlcmFsc0NybSA9IHt9O1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgdGhmSTE4blNlcnZpY2U6IFRoZkkxOG5TZXJ2aWNlKSB7XG4gKiAgIHRoZkkxOG5TZXJ2aWNlLmdldExpdGVyYWxzKClcbiAqICAgICAuc3Vic2NyaWJlKChsaXRlcmFscykgPT4ge1xuICogICAgICAgdGhpcy5saXRlcmFscyA9IGxpdGVyYWxzO1xuICogICAgIH0pO1xuICpcbiAqICAgdGhmSTE4blNlcnZpY2UuZ2V0TGl0ZXJhbHMoe2NvbnRleHQ6ICdjcm0nLCBsaXRlcmFsczogWydhZGQnLCAncmVtb3ZlJ119KVxuICogICAgIC5zdWJzY3JpYmUoKGxpdGVyYWxzKSA9PiB7XG4gKiAgICAgICB0aGlzLmxpdGVyYWxzQ3JtID0gbGl0ZXJhbHM7XG4gKiAgICAgfSk7XG4gKlxuICogICB0aGZJMThuU2VydmljZS5nZXRMaXRlcmFscyh7bGFuZ3VhZ2U6ICdlbi11cyd9KVxuICogICAgIC5zdWJzY3JpYmUoKGxpdGVyYWxzKSA9PiB7XG4gKiAgICAgICB0aGlzLmxpdGVyYWxzRW4gPSBsaXRlcmFscztcbiAqICAgICB9KTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFBhcmEgYXByZXNlbnRhciBhcyBsaXRlcmFpcyBjYXB0dXJhZGFzIGFjaW1hIG5vIEhUTUwgZG8gY29tcG9uZW50ZSwgZGV2ZS1zZSB1dGlsaXphciBvXG4gKiBzZWd1aW50ZSBjw7NkaWdvOlxuICpcbiAqIDxwcmUgbmdOb25CaW5kYWJsZT5cbiAqIHt7IGxpdGVyYWxzPy5hZGQgfX1cbiAqIHt7IGxpdGVyYWxzPy5yZW1vdmUgfX1cbiAqIDwvcHJlPlxuICpcbiAqIENhc28gYXMgbGl0ZXJhaXMgY29udGVuaGFtIHZhcmnDoXZlaXMgcXVlIHByZWNpc2VtIHNlciBzdWJzdGl0dcOtZGFzLCBwb2RlLXNlIHV0aWxpemFyIG8gKnBpcGUqIGB0aGZJMThuYC5cbiAqIMOJIHBvc3PDrXZlbCBpbmZvcm1hciBwcm9wcmllZGFkZXMgZG8gY29tcG9uZW50ZSBjb21vIGBuYW1lYCBlIGBuaWNrbmFtZWAgb3VcbiAqIGluZm9ybWFyIG8gdmFsb3IgZGlyZXRhbWVudGUgY29tIFwiXCIgb3UgbsO6bWVybywgY29uZm9ybWUgbyBleGVtcGxvIGFiYWl4bzpcbiAqXG4gKiA8cHJlIG5nTm9uQmluZGFibGU+XG4gKiB7eyBsaXRlcmFscz8ucGVvcGxlIHwgdGhmSTE4bjpbMTIwXSB9fVxuICoge3sgbGl0ZXJhbHM/LmdyZWV0aW5nIHwgdGhmSTE4bjpbbmFtZSwgbmlja25hbWVdIH19XG4gKiB7eyBsaXRlcmFscz8uZ3JlZXRpbmcgfCB0aGZJMThuOltcIkJyYWRcIiwgXCJHcmVlblwiXSB9fVxuICogPC9wcmU+XG4gKlxuICogPiDDiSBpbXBvcnRhbnRlIG8gdXNvIGRvIG9wZXJhZG9yIGA/YCAoRWx2aXMpIHBhcmEgZXZpdGFyIGVycm9zIGVucXVhbnRvIGFzIGxpdGVyYWlzIG7Do28gZm9yZW0gY2FycmVnYWRhcy5cbiAqXG4gKiAjIyMgVGVzdGUgdW5pdMOhcmlvXG4gKlxuICogQWJhaXhvIHNlZ3VlIHVtIGV4ZW1wbG8gZGUgKnNldHVwKiBpbmljaWFsIGRlIHRlc3RlIHVuaXTDoXJpbyBkbyAqQXBwQ29tcG9uZW50KiBxdWUgdXRpbGl6YSBvIGBUaGZJMThuU2VydmljZWA6XG4gKlxuICogYGBgXG4gKiBpbXBvcnQgeyBhc3luYywgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG4gKiBpbXBvcnQgeyBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL3Rlc3RpbmcnO1xuICpcbiAqIGltcG9ydCB7IFRoZkkxOG5Nb2R1bGUgfSBmcm9tICdAdG90dnMvdGhmLXVpJztcbiAqXG4gKiBpbXBvcnQgeyBBcHBDb21wb25lbnQgfSBmcm9tICcuL2FwcC5jb21wb25lbnQnO1xuICpcbiAqIGRlc2NyaWJlKCdBcHBDb21wb25lbnQnLCAoKSA9PiB7XG4gKiAgIGNvbnN0IGFub3RoZXJQVCA9IHtcbiAqICAgICB0ZXh0OiAndGV4dG8nLFxuICogICAgIGFkZDogJ2FkaWNpb25hcicsXG4gKiAgICAgcmVtb3ZlOiAncmVtb3ZlcidcbiAqICAgfTtcbiAqXG4gKiAgIGNvbnN0IGdlbmVyYWxQVCA9IHtcbiAqICAgICB0ZXh0OiAndGV4dG8nLFxuICogICAgIGFkZDogJ2FkaWNpb25hcicsXG4gKiAgICAgcmVtb3ZlOiAncmVtb3ZlcidcbiAqICAgfTtcbiAqXG4gKiAgIGNvbnN0IGNvbmZpZyA9IHtcbiAqICAgICBkZWZhdWx0OiB7XG4gKiAgICAgICBsYW5ndWFnZTogJ3B0LUJSJyxcbiAqICAgICAgIGNvbnRleHQ6ICdnZW5lcmFsJyxcbiAqICAgICAgIGNhY2hlOiBmYWxzZVxuICogICAgIH0sXG4gKiAgICAgY29udGV4dHM6IHtcbiAqICAgICAgIGdlbmVyYWw6IHtcbiAqICAgICAgICAgJ3B0LWJyJzogZ2VuZXJhbFBUXG4gKiAgICAgICB9LFxuICogICAgICAgYW5vdGhlcjoge1xuICogICAgICAgICAncHQtYnInOiBhbm90aGVyUFRcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIH07XG4gKlxuICogICBiZWZvcmVFYWNoKGFzeW5jKCgpID0+IHtcbiAqICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICogICAgICAgZGVjbGFyYXRpb25zOiBbXG4gKiAgICAgICAgIEFwcENvbXBvbmVudFxuICogICAgICAgXSxcbiAqICAgICAgIGltcG9ydHM6IFtcbiAqICAgICAgICAgSHR0cENsaWVudFRlc3RpbmdNb2R1bGUsXG4gKiAgICAgICAgIFRoZkkxOG5Nb2R1bGUuY29uZmlnKGNvbmZpZylcbiAqICAgICAgIF1cbiAqICAgICB9KS5jb21waWxlQ29tcG9uZW50cygpO1xuICogICB9KSk7XG4gKlxuICogICBpdCgnc2hvdWxkIGNyZWF0ZSB0aGUgYXBwJywgYXN5bmMoKCkgPT4ge1xuICogICAgIGNvbnN0IGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChBcHBDb21wb25lbnQpO1xuICogICAgIGNvbnN0IGFwcCA9IGZpeHR1cmUuZGVidWdFbGVtZW50LmNvbXBvbmVudEluc3RhbmNlO1xuICpcbiAqICAgICBleHBlY3QoYXBwKS50b0JlVHJ1dGh5KCk7XG4gKiAgIH0pKTtcbiAqXG4gKiB9KTtcbiAqIGBgYFxuICovXG5cbmV4cG9ydCBjbGFzcyBUaGZJMThuQmFzZVNlcnZpY2Uge1xuXG4gIHByaXZhdGUgdmFySTE4bjogYW55ID0ge307XG5cbiAgcHJpdmF0ZSBjb250ZXh0RGVmYXVsdDogc3RyaW5nO1xuXG4gIHByaXZhdGUgdXNlQ2FjaGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcml2YXRlIHNlcnZpY2VzQ29udGV4dDogYW55ID0ge307XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChJMThOX0NPTkZJRykgcHJpdmF0ZSBjb25maWc/OiBUaGZJMThuQ29uZmlnLFxuICAgIEBJbmplY3QoSHR0cENsaWVudCkgcHJpdmF0ZSBodHRwPzogSHR0cENsaWVudCxcbiAgICBwcml2YXRlIGxhbmd1YWdlU2VydmljZT86IFRoZkxhbmd1YWdlU2VydmljZSkge1xuXG4gICAgdGhpcy5zZXRDb25maWcoY29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiA8YSBpZD1cImdldC1sYW5ndWFnZVwiPjwvYT5cbiAgICogTcOpdG9kbyBxdWUgcmV0b3JuYSBvIGlkaW9tYSBwYWRyw6NvIGF0aXZvLlxuICAgKlxuICAgKiBBIGJ1c2NhIGRlc3RlIGlkaW9tYSBwZWxvIG3DqXRvZG8gc2Vyw6EgZmVpdGEgbmEgc2VndWludGUgb3JkZW06XG4gICAqXG4gICAqICAgMSAtIG8gaWRpb21hIHF1ZSBmb2kgYXJtYXplbmFkbyBubyAqbG9jYWxTdG9yYWdlKiwgYXRyYXbDqXMgZG8gbcOpdG9kbyBbYHNldExhbmd1YWdlKClgXShkb2N1bWVudGF0aW9uL3RoZi1pMThuI3NldExhbmd1YWdlKS5cbiAgICpcbiAgICogICAyIC0gbyB2YWxvciBpbnNlcmlkbyBubyBtw7NkdWxvIGRvIGkxOG4gYXRyYXbDqXMgZG8gcGFyw6JtZXRybyBgY29uZmlnYCwgc2VuZG8gbyBpZGlvbWEgaW5zZXJpZG8gbmEgcHJvcHJpZWRhZGVcbiAgICogYGxhbmd1YWdlYCBkYSBpbnRlcmZhY2UgW2BUaGZJMThuQ29uZmlnRGVmYXVsdGBdKGRvY3VtZW50YXRpb24vdGhmLWkxOG4jdGhmSTE4bkNvbmZpZ0RlZmF1bHQpLlxuICAgKlxuICAgKiAgIDMgLSBvIGlkaW9tYSBkbyBuYXZlZ2Fkb3IgdXRpbGl6YWRvLlxuICAgKlxuICAgKiA+IENhc28gbyBpZGlvbWEgZG8gbmF2ZWdhZG9yIG7Do28gc2VqYSBzdXBvcnRhZG8gcGVsbyBUSEYgKGBwdGAsIGBlbmAgb3UgYGVzYCksIHNlcsOhIHJldG9ybmFkbyB2YWxvciBgcHRgLlxuICAgKlxuICAgKiAqKlJldG9ybm86KipcbiAgICpcbiAgICogYHN0cmluZ2AgY29tIGEgc2lnbGEgZG8gaWRpb21hIHBhZHLDo28uXG4gICAqL1xuICBnZXRMYW5ndWFnZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmxhbmd1YWdlU2VydmljZS5nZXRMYW5ndWFnZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE3DqXRvZG8gcXVlIHJldG9ybmEgbyBpZGlvbWEgcGFkcsOjbyBhdGl2bywgY29tIHNvbWVudGUgYSBhYnJldmlhw6fDo28gZG8gaWRpb21hIChkdWFzIHByaW1laXJhcyBsZXRyYXMpLlxuICAgKiBQb3IgZXhlbXBsbzogXCJwdFwiIG91IFwiZXNcIi5cbiAgICpcbiAgICogQSBidXNjYSBkZXN0ZSBpZGlvbWEgw6kgYmFzZWFkYSBubyBtw6l0b2RvIFsqKmdldExhbmd1YWdlKCkqKl0oL2RvY3VtZW50YXRpb24vdGhmLWkxOG4jZ2V0LWxhbmd1YWdlKS5cbiAgICpcbiAgICogKipSZXRvcm5vOioqXG4gICAqXG4gICAqIGBzdHJpbmdgIGNvbSBhIHNpZ2xhIGRvIGlkaW9tYSBwYWRyw6NvLlxuICAgKi9cbiAgZ2V0U2hvcnRMYW5ndWFnZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCk7XG4gIH1cblxuICAvKipcbiAgICogPGEgaWQ9XCJzZXRMYW5ndWFnZVwiPjwvYT5cbiAgICogTcOpdG9kbyBwYXJhIGFsdGVyYXIgbyBpZGlvbWEgcGFkcsOjbyBkbyBtw7NkdWxvIGRvIGkxOG4uXG4gICAqXG4gICAqIEFvIHV0aWxpemFyIGVzdGUgbcOpdG9kbywgbyBpZGlvbWEgZmljYXLDoSBncmF2YWRvIG5vIGFybWF6ZW5hbWVudG8gbG9jYWwgZG8gbmF2ZWdhZG9yLCBxdWUgc2Vyw6EgdXRpbGl6YWRvIHBlbG9cbiAgICogc2VydmnDp28gZG8gYGkxOG5gIHBhcmEgYnVzY2FyIGFzIGxpdGVyYWlzIG5vIGlkaW9tYSBwYWRyw6NvLlxuICAgKlxuICAgKiBAcGFyYW0gbGFuZ3VhZ2Uge3N0cmluZ30gU2lnbGEgZG8gaWRpb21hLlxuICAgKlxuICAgKiBFc3RhIHNpZ2xhIGRldmUgc2VyIGNvbXBvc3RhIHBvciBkdWFzIGxldHJhcyByZXByZXNlbnRhbmRvIG8gaWRpb21hLFxuICAgKiBwb2RlbmRvIHNlciBhZGljaW9uYWRvIG91dHJhcyBkdWFzIGxldHJhcyByZXByZXNlbnRhbmRvIG8gcGHDrXMsIHBvciBleGVtcGxvOiBgcHRgLCBgcHQtQlJgLCBgcHQtYnJgLCBgZW5gIG91IGBlbi1VU2AuXG4gICAqXG4gICAqID4gQ2FzbyBzZWphIGluZm9ybWFkbyB1bSB2YWxvciBkaWZlcmVudGUgZGVzdGUgcGFkcsOjbywgbyBtZXNtbyBzZXLDoSBpZ25vcmFkby5cbiAgICpcbiAgICogQHBhcmFtIHJlbG9hZCB7Ym9vbGVhbn0gSW5kaWNhIHNlIGEgcMOhZ2luYSBhdHVhbCBwb2RlcsOhIHNlciByZWNhcnJlZ2FkYSBhcMOzcyBhIGFsdGVyYcOnw6NvIGRvIGlkaW9tYS5cbiAgICpcbiAgICogRXN0ZSByZWN1cnNvIHBvZGUgc2VyIMO6dGlsIHBhcmEgb3MgdXN1w6FyaW9zIHF1ZSB1dGlsaXphbSBvIG3DqXRvZG8gYGdldExpdGVyYWxzKClgIGRvIHNlcnZpw6dvIGRvIGkxOG4gcGFyYSBwb2RlclxuICAgKiBidXNjYXIgbm92YW1lbnRlIGFzIGxpdGVyYWlzIG5vIG5vdm8gaWRpb21hIGNvbmZpZ3VyYWRvLlxuICAgKi9cbiAgc2V0TGFuZ3VhZ2UobGFuZ3VhZ2U6IHN0cmluZywgcmVsb2FkPzogYm9vbGVhbik6IHZvaWQge1xuXG4gICAgaWYgKCFpc0xhbmd1YWdlKGxhbmd1YWdlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnNldExhbmd1YWdlKGxhbmd1YWdlKTtcblxuICAgIGlmIChyZWxvYWQpIHtcbiAgICAgIHJlbG9hZEN1cnJlbnRQYWdlKCk7XG4gICAgfVxuXG4gIH1cblxuICBwcml2YXRlIHNldENvbmZpZyhjb25maWc6IFRoZkkxOG5Db25maWcpIHtcbiAgICAvLyBTZXRhIGFzIGNvbmZpZ3VyYcOnw7VlcyBwYWRyw7VlcyBkZWZpbmlkYXMgbm8gaW1wb3J0YcOnw6NvIGRvIG3Ds2R1bG9cbiAgICBpZiAoY29uZmlnWydkZWZhdWx0J10pIHtcblxuICAgICAgdGhpcy5sYW5ndWFnZVNlcnZpY2Uuc2V0TGFuZ3VhZ2VEZWZhdWx0KGNvbmZpZ1snZGVmYXVsdCddWydsYW5ndWFnZSddKTtcblxuICAgICAgdGhpcy5jb250ZXh0RGVmYXVsdCA9IChjb25maWdbJ2RlZmF1bHQnXVsnY29udGV4dCddKSA/IGNvbmZpZ1snZGVmYXVsdCddWydjb250ZXh0J10gOiAnJztcbiAgICAgIHRoaXMudXNlQ2FjaGUgPSAoY29uZmlnWydkZWZhdWx0J11bJ2NhY2hlJ10pID8gY29uZmlnWydkZWZhdWx0J11bJ2NhY2hlJ10gOiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBDYXJyZWdhIGEgbGlzdGEgZG9zIGNvbnRleHRvcyBlIGFzIGNvbnRhbnRlcyBpbmZvcm1hZGFzXG4gICAgaWYgKGNvbmZpZ1snY29udGV4dHMnXSkge1xuICAgICAgdGhpcy5zZXRWYXJJMThuKGNvbmZpZ1snY29udGV4dHMnXSk7XG5cbiAgICAgIC8vIFNlIG5lbmh1bSBjb250ZXh0byBmb2kgZGVmaW5pZG8gY29tbyBwYWRyw6NvLFxuICAgICAgLy8gZW50w6NvIGRlZmluZSBvIHByaW1laXJvIGNvbnRleHRvXG4gICAgICBpZiAoIXRoaXMuY29udGV4dERlZmF1bHQpIHtcbiAgICAgICAgZm9yIChjb25zdCBjb250ZXh0IGluIGNvbmZpZ1snY29udGV4dHMnXSkge1xuICAgICAgICAgIGlmICh0aGlzLmNvbmZpZ1snY29udGV4dHMnXS5oYXNPd25Qcm9wZXJ0eShjb250ZXh0KSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0RGVmYXVsdCA9IGNvbnRleHQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRMaXRlcmFscyhvcHRpb25zOiBUaGZJMThuTGl0ZXJhbHMgPSB7fSk6IE9ic2VydmFibGU8b2JqZWN0PiB7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSBvcHRpb25zWydsYW5ndWFnZSddID8gb3B0aW9uc1snbGFuZ3VhZ2UnXS50b0xvd2VyQ2FzZSgpIDogdGhpcy5nZXRMYW5ndWFnZSgpO1xuICAgIGNvbnN0IGNvbnRleHQgPSAob3B0aW9uc1snY29udGV4dCddKSA/IG9wdGlvbnNbJ2NvbnRleHQnXSA6IHRoaXMuY29udGV4dERlZmF1bHQ7XG4gICAgY29uc3QgbGl0ZXJhbHM6IEFycmF5PHN0cmluZz4gPSAob3B0aW9uc1snbGl0ZXJhbHMnXSkgPyBvcHRpb25zWydsaXRlcmFscyddIDogW107XG5cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT4ge1xuICAgICAgaWYgKHRoaXMuc2VydmljZXNDb250ZXh0W2NvbnRleHRdKSB7XG4gICAgICAgIC8vIEZheiBvIHByb2Nlc3NvIGRlIGJ1c2NhIGRlIHVtIGNvbnRleHRvIHF1ZSBjb250w6ltIHNlcnZpw6dvXG4gICAgICAgIHRoaXMuZ2V0TGl0ZXJhbHNGcm9tQ29udGV4dFNlcnZpY2UobGFuZ3VhZ2UsIGNvbnRleHQsIGxpdGVyYWxzLCBvYnNlcnZlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGYXogbyBwcm9jZXNzbyBkZSBidXNjYSBkZSB1bSBjb250ZXh0byBxdWUgdXRpbGl6YSBjb25zdGFudGVcbiAgICAgICAgdGhpcy5nZXRMaXRlcmFsc0Zyb21Db250ZXh0Q29uc3RhbnQobGFuZ3VhZ2UsIGNvbnRleHQsIGxpdGVyYWxzLCBvYnNlcnZlcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvLyBQcm9jZXNzbyBkZSBidXNjYSBkZSB1bSBjb250ZXh0byBxdWUgY29udMOpbSBzZXJ2acOnby5cbiAgLy8gICAgMSAtIFByb2N1cmEgbmEgdmFyacOhdmVsIEkxOG4gZGVzdGUgc2VydmnDp29cbiAgLy8gICAgMiAtIFByb2N1cmEgbm8gbG9jYWwgc3RvcmFnZSAoU2UgbyBjYWNoZSBlc3RpdmVyIGRlZmluaWRvIGNvbW8gdHJ1ZSBuYSBjb25maWd1cmHDp8OjbyBkbyBtw7NkdWxvKVxuICAvLyAgICAzIC0gRGlzcGFyYSBvIHNlcnZpw6dvLCBtZXNtbyBxdWUgasOhIHRlbmhhIGVuY29udHJhZG8gbm8gbG9jYWwgc3RvcmFnZSwgcGFyYSBnYXJhbnRpciBhIGF0dWFsaXphw6fDo29cbiAgLy8gICAgNCAtIFNlIG5lbmh1bWEgbGl0ZXJhbCBmb3IgZW5jb250cmFkYSwgZW50w6NvIGJ1c2NhIGVtIHB0LWJyXG4gIHByaXZhdGUgZ2V0TGl0ZXJhbHNGcm9tQ29udGV4dFNlcnZpY2UobGFuZ3VhZ2U6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGl0ZXJhbHM6IEFycmF5PHN0cmluZz4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXI6IGFueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbnM6IGFueSA9IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlQWx0ZXJuYXRpdmU6IHN0cmluZyA9IG51bGwpIHtcblxuICAgIC8vIElkaW9tYSB1c2FkbyBwYXJhIHRlbnRhciBidXNjYXIgYXMgbGl0ZXJhaXMgZmFsdGFudGVzXG4gICAgY29uc3QgbGFuZ3VhZ2VTZWFyY2ggPSAobGFuZ3VhZ2VBbHRlcm5hdGl2ZSkgPyBsYW5ndWFnZUFsdGVybmF0aXZlIDogbGFuZ3VhZ2U7XG5cbiAgICB0cmFuc2xhdGlvbnMgPSB0aGlzLm1lcmdlT2JqZWN0KHRyYW5zbGF0aW9ucywgdGhpcy5zZWFyY2hJblZhckkxOG4obGFuZ3VhZ2VTZWFyY2gsIGNvbnRleHQsIGxpdGVyYWxzKSk7XG5cbiAgICBpZiAodGhpcy5jb3VudE9iamVjdCh0cmFuc2xhdGlvbnMpID4gMCkge1xuICAgICAgb2JzZXJ2ZXIubmV4dCh0cmFuc2xhdGlvbnMpO1xuICAgIH1cblxuICAgIC8vIHJlYWxpemEgYSBidXNjYSBubyBsb2NhbFN0b3JhZ2UgZSBlbSBzZWd1aWRhIG5vIHNlcnZpw6dvXG4gICAgdGhpcy5nZXRMaXRlcmFsc0xvY2FsU3RvcmFnZUFuZENhY2hlKGxhbmd1YWdlU2VhcmNoLCBjb250ZXh0LCBsaXRlcmFscywgb2JzZXJ2ZXIsIHRyYW5zbGF0aW9ucywgbGFuZ3VhZ2VBbHRlcm5hdGl2ZSk7XG4gIH1cblxuICAvLyBQcm9jdXJhIG5vIGxvY2FsIHN0b3JhZ2UgZSBlbSBzZWd1aWRhIG5vIHNlcnZpw6dvXG4gIC8vIENhc28gbsOjbyBlbmNvbnRyZSBuZW0gbm8gc2VydmnDp28sIHJlY29tZcOnYSBhIGJ1c2NhIGVtIHB0LWJyXG4gIHByaXZhdGUgZ2V0TGl0ZXJhbHNMb2NhbFN0b3JhZ2VBbmRDYWNoZShsYW5ndWFnZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGl0ZXJhbHM6IEFycmF5PHN0cmluZz4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcjogYW55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb25zOiBhbnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZUFsdGVybmF0aXZlOiBzdHJpbmcgPSBudWxsKSB7XG5cbiAgICBjb25zdCBsYW5ndWFnZVNlYXJjaCA9IChsYW5ndWFnZUFsdGVybmF0aXZlKSA/IGxhbmd1YWdlQWx0ZXJuYXRpdmUgOiBsYW5ndWFnZTtcbiAgICBsZXQgdHJhbnNsYXRpb25UZW1wO1xuICAgIC8vIFZlcmlmaWNhIHNlIHVzYSBjYWNoZVxuICAgIGlmICh0aGlzLnVzZUNhY2hlKSB7XG4gICAgICB0cmFuc2xhdGlvblRlbXAgPSB0aGlzLnNlYXJjaEluTG9jYWxTdG9yYWdlKGxhbmd1YWdlU2VhcmNoLCBjb250ZXh0LCBsaXRlcmFscyk7XG4gICAgICBpZiAodGhpcy5jb3VudE9iamVjdCh0cmFuc2xhdGlvblRlbXApID4gMCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVZhckkxOG4obGFuZ3VhZ2UsIGNvbnRleHQsIHRyYW5zbGF0aW9uVGVtcCk7XG4gICAgICAgIHRyYW5zbGF0aW9ucyA9IHRoaXMubWVyZ2VPYmplY3QodHJhbnNsYXRpb25UZW1wLCB0cmFuc2xhdGlvbnMpO1xuICAgICAgICBvYnNlcnZlci5uZXh0KHRyYW5zbGF0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQnVzY2EgZG8gU2VydmnDp29cbiAgICB0aGlzLmdldEh0dHBTZXJ2aWNlKHRoaXMuc2VydmljZXNDb250ZXh0W2NvbnRleHRdLCBsYW5ndWFnZVNlYXJjaCwgbGl0ZXJhbHMpXG4gICAgICAuc3Vic2NyaWJlKFxuICAgICAgICByZXNwb25zZSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUxvY2FsU3RvcmFnZShsYW5ndWFnZSwgY29udGV4dCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWYXJJMThuKGxhbmd1YWdlLCBjb250ZXh0LCByZXNwb25zZSk7XG4gICAgICAgICAgICB0cmFuc2xhdGlvblRlbXAgPSB0aGlzLnNlYXJjaEluVmFySTE4bihsYW5ndWFnZSwgY29udGV4dCwgbGl0ZXJhbHMpO1xuICAgICAgICAgICAgdHJhbnNsYXRpb25zID0gdGhpcy5tZXJnZU9iamVjdCh0cmFuc2xhdGlvblRlbXAsIHRyYW5zbGF0aW9ucyk7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KHRyYW5zbGF0aW9ucyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU2UgbsOjbyBlbmNvbnRyb3UgdG9kYXMgYXMgbGl0ZXJhaXMgcGVzcXVpc2FkYXMgbm8gaWRpb21hXG4gICAgICAgICAgLy8gRW50w6NvIHJlZmF6IG8gcHJvY2Vzc28gcHJvY3VyYW5kbyBlbSBwb3J0dWd1w6pzXG4gICAgICAgICAgaWYgKGxpdGVyYWxzLmxlbmd0aCA+IHRoaXMuY291bnRPYmplY3QodHJhbnNsYXRpb25zKSkge1xuICAgICAgICAgICAgaWYgKGxhbmd1YWdlQWx0ZXJuYXRpdmUgPT09ICdwdC1icicpIHtcbiAgICAgICAgICAgICAgLy8gU2UgbsOjbyBlbmNvbnRyb3UgbmVtIGVtIHBvcnR1Z3XDqnMsIGVudMOjbyByZXRvcm5hIG8gbm9tZSBkYXMgbGl0ZXJhaXNcbiAgICAgICAgICAgICAgdHJhbnNsYXRpb25zID0gdGhpcy5jb21wbGV0ZUZhdWx0TGl0ZXJhbHMobGFuZ3VhZ2UsIGNvbnRleHQsIGxpdGVyYWxzLCB0cmFuc2xhdGlvbnMpO1xuICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUxvY2FsU3RvcmFnZShsYW5ndWFnZSwgY29udGV4dCwgdHJhbnNsYXRpb25zKTtcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVWYXJJMThuKGxhbmd1YWdlLCBjb250ZXh0LCB0cmFuc2xhdGlvbnMpO1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHRyYW5zbGF0aW9ucyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmdldExpdGVyYWxzRnJvbUNvbnRleHRTZXJ2aWNlKGxhbmd1YWdlLCBjb250ZXh0LCBsaXRlcmFscywgb2JzZXJ2ZXIsIHRyYW5zbGF0aW9ucywgJ3B0LWJyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgfVxuXG4gIC8vIFByb2N1cmEgcGVsYSBsaXN0YSBkZSBsaXRlcmFpc1xuICAvLyBTZSBuw6NvIGVuY29udHJhciB0b2RhcywgcHJvY3VyYSBlbSBwdC1iclxuICBwcml2YXRlIGdldExpdGVyYWxzRnJvbUNvbnRleHRDb25zdGFudChsYW5ndWFnZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpdGVyYWxzOiBBcnJheTxzdHJpbmc+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcjogYW55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbnM6IGFueSA9IHt9KSB7XG5cbiAgICB0cmFuc2xhdGlvbnMgPSB0aGlzLm1lcmdlT2JqZWN0KHRyYW5zbGF0aW9ucywgdGhpcy5zZWFyY2hJblZhckkxOG4obGFuZ3VhZ2UsIGNvbnRleHQsIGxpdGVyYWxzKSk7XG4gICAgaWYgKHRoaXMuY291bnRPYmplY3QodHJhbnNsYXRpb25zKSA+IDApIHtcbiAgICAgIG9ic2VydmVyLm5leHQodHJhbnNsYXRpb25zKTtcbiAgICB9XG5cbiAgICAvLyBTZSBmb2kgcGVzcXVpc2FkbyBwb3IgbGl0ZXJhaXNcbiAgICBpZiAobGl0ZXJhbHMubGVuZ3RoID4gMCkge1xuICAgICAgLy8gU2UgbsOjbyBlbmNvbnRyb3UgdG9kYXMgYXMgbGl0ZXJhaXMgcGVzcXVpc2FkYXMgbm8gaWRpb21hLCBwcm9jdXJhIGVtIHBvcnR1Z3XDqnNcbiAgICAgIGlmIChsaXRlcmFscy5sZW5ndGggPiB0aGlzLmNvdW50T2JqZWN0KHRyYW5zbGF0aW9ucykpIHtcbiAgICAgICAgaWYgKGxhbmd1YWdlID09PSAncHQtYnInKSB7XG4gICAgICAgICAgLy8gU2UgbsOjbyBlbmNvbnRyb3UgbmVtIGVtIHBvcnR1Z3XDqnMsIGVudMOjbyByZXRvcm5hIG8gbm9tZSBkYXMgbGl0ZXJhaXNcbiAgICAgICAgICB0cmFuc2xhdGlvbnMgPSB0aGlzLmNvbXBsZXRlRmF1bHRMaXRlcmFscyhsYW5ndWFnZSwgY29udGV4dCwgbGl0ZXJhbHMsIHRyYW5zbGF0aW9ucyk7XG4gICAgICAgICAgb2JzZXJ2ZXIubmV4dCh0cmFuc2xhdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZ2V0TGl0ZXJhbHNGcm9tQ29udGV4dENvbnN0YW50KCdwdC1icicsIGNvbnRleHQsIGxpdGVyYWxzLCBvYnNlcnZlciwgdHJhbnNsYXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZSBuw6NvIGVuY29udHJhciBuZW5odW1hIGxpdGVyYWwsIHByb2N1cmEgZW0gcG9ydHVndcOqc1xuICAgICAgaWYgKHRoaXMuY291bnRPYmplY3QodHJhbnNsYXRpb25zKSA9PT0gMCAmJiBsYW5ndWFnZSAhPT0gJ3B0LWJyJykge1xuICAgICAgICB0aGlzLmdldExpdGVyYWxzRnJvbUNvbnRleHRDb25zdGFudCgncHQtYnInLCBjb250ZXh0LCBsaXRlcmFscywgb2JzZXJ2ZXIsIHRyYW5zbGF0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIGNhc28gbsOjbyBpbmZvcm1hciBsaXRlcmFpcyBlIG7Do28gaG91dmVyIHRyYWR1w6fDo29cbiAgICAgIG9ic2VydmVyLm5leHQodHJhbnNsYXRpb25zKTtcbiAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gQnVzY2EgcGVsYXMgbGl0ZXJhaXMgbm8gbG9jYWwgc3RvcmFnZVxuICBwcml2YXRlIHNlYXJjaEluTG9jYWxTdG9yYWdlKGxhbmd1YWdlOiBzdHJpbmcsIGNvbnRleHQ6IHN0cmluZywgbGl0ZXJhbHM6IEFycmF5PHN0cmluZz4pOiBhbnkge1xuICAgIGNvbnN0IHRyYW5zbGF0aW9uczogYW55ID0ge307XG5cbiAgICBpZiAobGl0ZXJhbHMubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXRlcmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBsaXRlcmFsID0gbGl0ZXJhbHNbaV07XG4gICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0obGFuZ3VhZ2UgKyAnLScgKyBjb250ZXh0ICsgJy0nICsgbGl0ZXJhbCk7XG4gICAgICAgIGlmICh0cmFuc2xhdGlvbikge1xuICAgICAgICAgIHRyYW5zbGF0aW9uc1tsaXRlcmFsXSA9IHRyYW5zbGF0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2xhdGlvbnM7XG4gIH1cblxuICAvLyBCdXNjYSBwZWxhcyBsaXRlcmFpcyBuYSB2YXJpw6F2ZWwgZG8gc2VydmnDp29cbiAgcHJpdmF0ZSBzZWFyY2hJblZhckkxOG4obGFuZ3VhZ2U6IHN0cmluZywgY29udGV4dDogc3RyaW5nLCBsaXRlcmFsczogQXJyYXk8c3RyaW5nPik6IGFueSB7XG4gICAgbGV0IHRyYW5zbGF0aW9uczogYW55ID0ge307XG5cbiAgICBpZiAodGhpcy52YXJJMThuW2xhbmd1YWdlXSAmJiB0aGlzLnZhckkxOG5bbGFuZ3VhZ2VdW2NvbnRleHRdKSB7XG4gICAgICBjb25zdCBjb250ZW50ID0gdGhpcy52YXJJMThuW2xhbmd1YWdlXVtjb250ZXh0XTtcblxuICAgICAgaWYgKGxpdGVyYWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gQnVzY2EgYXMgbGl0ZXJhaXMgZGVzZWphZGFzXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGl0ZXJhbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBsaXRlcmFsID0gbGl0ZXJhbHNbaV07XG4gICAgICAgICAgaWYgKGNvbnRlbnQuaGFzT3duUHJvcGVydHkobGl0ZXJhbCkpIHtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uc1tsaXRlcmFsXSA9IGNvbnRlbnRbbGl0ZXJhbF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBdHJpYnVpIHRvZGFzIGFzIGxpdGVyYWlzXG4gICAgICAgIHRyYW5zbGF0aW9ucyA9IHsgLi4uY29udGVudCB9O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJhbnNsYXRpb25zO1xuICB9XG5cbiAgLy8gQXR1YWxpemEgbyBsb2NhbCBzdG9yYWdlXG4gIHByaXZhdGUgdXBkYXRlTG9jYWxTdG9yYWdlKGxhbmd1YWdlOiBzdHJpbmcsIGNvbnRleHQ6IHN0cmluZywgZGF0YTogYW55KSB7XG4gICAgaWYgKHRoaXMudXNlQ2FjaGUpIHtcbiAgICAgIGZvciAoY29uc3QgbGl0ZXJhbCBpbiBkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KGxpdGVyYWwpKSB7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obGFuZ3VhZ2UgKyAnLScgKyBjb250ZXh0ICsgJy0nICsgbGl0ZXJhbCwgZGF0YVtsaXRlcmFsXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBBdHVhbGl6YSBhIHZhcmnDoXZlbCBsb2NhbCBjb20gYXMgbGl0ZXJhaXMgY29tIG9zIG9iamV0b3MgcGFzc2Fkb3MgbmEgY29uZmlndXJhw6fDo29cbiAgcHJpdmF0ZSBzZXRWYXJJMThuKGNvbnRleHRzOiBhbnkpIHtcbiAgICAvLyBQZXJjb3JyZSBvcyBjb250ZXh0b3NcbiAgICBmb3IgKGNvbnN0IGNvbnRleHQgaW4gY29udGV4dHMpIHtcbiAgICAgIGlmIChjb250ZXh0cy5oYXNPd25Qcm9wZXJ0eShjb250ZXh0KSkge1xuICAgICAgICBjb25zdCBjb250ZXh0Q29udGVudCA9IGNvbnRleHRzW2NvbnRleHRdO1xuXG4gICAgICAgIC8vIFBlcmNvcnJlIG9zIGlkaW9tYXMgZGVudHJvIGRvIGNvbnRleHRvXG4gICAgICAgIGZvciAoY29uc3QgbGFuZ3VhZ2UgaW4gY29udGV4dENvbnRlbnQpIHtcbiAgICAgICAgICBpZiAoY29udGV4dENvbnRlbnQuaGFzT3duUHJvcGVydHkobGFuZ3VhZ2UpKSB7XG4gICAgICAgICAgICBjb25zdCBsYW5ndWFnZUNvbnRlbnQgPSBjb250ZXh0Q29udGVudFtsYW5ndWFnZV07XG5cbiAgICAgICAgICAgIGlmIChsYW5ndWFnZSA9PT0gJ3VybCcpIHtcbiAgICAgICAgICAgICAgdGhpcy5zZXJ2aWNlc0NvbnRleHRbY29udGV4dF0gPSBsYW5ndWFnZUNvbnRlbnQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVZhckkxOG4obGFuZ3VhZ2UsIGNvbnRleHQsIGxhbmd1YWdlQ29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQXR1YWxpemEgYSB2YXJpw6F2ZWwgbG9jYWwgY29tIGFzIGxpdGVyYWlzIGlkaW9tYSBlIGNvbnRleHRvXG4gIHByaXZhdGUgdXBkYXRlVmFySTE4bihsYW5ndWFnZTogc3RyaW5nLCBjb250ZXh0OiBzdHJpbmcsIGRhdGE6IGFueSkge1xuICAgIGxhbmd1YWdlID0gbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmICghdGhpcy52YXJJMThuW2xhbmd1YWdlXSkge1xuICAgICAgdGhpcy52YXJJMThuW2xhbmd1YWdlXSA9IHtbY29udGV4dF06IHt9fTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnZhckkxOG5bbGFuZ3VhZ2VdW2NvbnRleHRdKSB7XG4gICAgICB0aGlzLnZhckkxOG5bbGFuZ3VhZ2VdW2NvbnRleHRdID0ge307XG4gICAgfVxuXG4gICAgLy8gQ3JpYSBvdSBhdHVhbGl6YSBvIGNvbnRleHRvIGRlbnRybyBkbyBzdG9yYWdlXG4gICAgdGhpcy52YXJJMThuW2xhbmd1YWdlXVtjb250ZXh0XSA9IHRoaXMubWVyZ2VPYmplY3QoZGF0YSwgdGhpcy52YXJJMThuW2xhbmd1YWdlXVtjb250ZXh0XSk7XG4gIH1cblxuICBwcml2YXRlIGdldEh0dHBTZXJ2aWNlKHVybDogc3RyaW5nLCBsYW5ndWFnZTogc3RyaW5nLCBsaXRlcmFsczogQXJyYXk8c3RyaW5nPik6IE9ic2VydmFibGU8b2JqZWN0PiB7XG4gICAgbGV0IHBhcmFtID0gJz9sYW5ndWFnZT0nICsgbGFuZ3VhZ2U7XG4gICAgaWYgKGxpdGVyYWxzLmxlbmd0aCA+IDApIHtcbiAgICAgIHBhcmFtICs9ICcmbGl0ZXJhbHM9JyArIGxpdGVyYWxzLmpvaW4oKTtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgYSBiYXJyYSBmaW5hbCBkbyBlbmRlcmXDp29cbiAgICB1cmwgPSAodXJsLmxhc3RJbmRleE9mKCcvJykgPT09IHVybC5sZW5ndGggLSAxKSA/IHVybC5zdWJzdHIoMCwgdXJsLmxlbmd0aCAtIDEpIDogdXJsO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsICsgcGFyYW0pO1xuICB9XG5cbiAgLy8gQ29tcGxldGEgY29tIG8gbm9tZSBkYSBsaXRlcmFpcywgYXMgcXVlIG7Do28gZm9yYW0gZW5jb250cmFkYXNcbiAgcHJpdmF0ZSBjb21wbGV0ZUZhdWx0TGl0ZXJhbHMobGFuZ3VhZ2U6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXRlcmFsczogQXJyYXk8c3RyaW5nPixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb25zOiBhbnkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpdGVyYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBsaXRlcmFsID0gbGl0ZXJhbHNbaV07XG4gICAgICBpZiAoIXRyYW5zbGF0aW9uc1tsaXRlcmFsXSkge1xuICAgICAgICB0cmFuc2xhdGlvbnNbbGl0ZXJhbF0gPSBsaXRlcmFsO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJhbnNsYXRpb25zO1xuICB9XG5cbiAgLy8gQ29udGEgb3MgYXRyaWJ1dG9zIGRvIG9iamV0b1xuICBwcml2YXRlIGNvdW50T2JqZWN0KG9iajogb2JqZWN0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoO1xuICB9XG5cbiAgLy8gRmF6IG8gbWVyZ2UgZG9zIG9iamV0b3MsIHNlbXByZSBkYW5kbyBwcmVmZXLDqm5jaWEgcGFyYSBvIHByaW1laXJvIG9iamV0byBkZSBwYXLDom1ldHJvXG4gIHByaXZhdGUgbWVyZ2VPYmplY3Qob2JqUGVybWFuZW50OiBhbnksIG9iajogYW55KSB7XG4gICAgcmV0dXJuIHsgLi4ub2JqLCAuLi5vYmpQZXJtYW5lbnQgfTtcbiAgfVxufVxuIl19