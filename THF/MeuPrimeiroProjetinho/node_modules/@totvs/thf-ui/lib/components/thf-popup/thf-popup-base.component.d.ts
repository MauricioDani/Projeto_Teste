import { ThfPopupAction } from './thf-popup-action.interface';
/**
 * @description
 *
 * O componente `thf-popup` é um container pequeno recomendado para ações de navegação:
 * Ele abre sobreposto aos outros componentes.
 *
 * É possível escolher as posições do `thf-popup` em relação ao componente alvo, para isto veja a propriedade `t-position`.
 *
 * Também é possível informar um _template_ _header_ para o `thf-popup`, que será exibido acima das ações.
 * Para funcionar corretamente é preciso adicionar a propriedade `t-popup-header-template` no elemento que servirá de template, por exemplo:
 *
 * ```
 * <thf-popup [t-target]="target">
 *   <div t-popup-header-template>
 *     <div>
 *       Dev Totvs
 *     </div>
 *     <div>
 *       dev.totvs@totvs.com.br
 *     </div>
 *   </div>
 * </thf-popup >
 * ```
 */
export declare class ThfPopupBaseComponent {
    private _actions;
    private _customPositions?;
    private _hideArrow;
    private _isCornerAlign;
    private _position?;
    private _target;
    arrowDirection: string;
    showPopup: boolean;
    protected oldTarget: any;
    protected param: any;
    protected parentRef: any;
    /** Lista de ações que serão exibidas no componente. */
    actions: Array<ThfPopupAction>;
    /**
     * @optional
     *
     * @description
     *
     * Oculta a seta do componente *popup*.
     *
     * @default `false`
     */
    hideArrow: boolean;
    isCornerAlign: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define a posição inicial que o `thf-popup` abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação `bottom-left` (abaixo e a esquerda), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * > Caso seja definido um `t-custom-positions` o componente irá abrir na posição definida na propriedade `t-position`
     * e caso não caiba na posição inicial ele irá rotacionar seguindo a ordem de posições definidas no `t-custom-positions`.
     *
     * Posições válidas:
     * - `right`: Posiciona o thf-popup no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o thf-popup no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o thf-popup no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o thf-popup abaixo do componente alvo.
     * - `bottom-left`: Posiciona o thf-popup abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o thf-popup abaixo e à direita do componente alvo.
     * - `left`: Posiciona o thf-popup no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o thf-popup no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o thf-popup no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o thf-popup acima do componente alvo.
     * - `top-right`: Posiciona o thf-popup acima e à direita do componente alvo.
     * - `top-left`: Posiciona o thf-popup acima e à esquerda do componente alvo.
     *
     * @default `bottom-left`
     */
    position: string;
    /**
     * @optional
     *
     * @description
     *
     * Define as posições e a sequência que o `thf-popup` poderá rotacionar. A sequência será definida pela ordem passada
     * no *array*. Caso não seja definido, o `thf-popup` irá rotacionar em todas as posições válidas.
     *
     * > O componente sempre irá abrir na posição definida no `t-position` e caso não caiba na posição definida o mesmo
     * irá rotacionar seguindo a ordem definida pelo `t-custom-position`.
     *
     * Posições válidas:
     * - `right`: Posiciona o thf-popup no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o thf-popup no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o thf-popup no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o thf-popup abaixo do componente alvo.
     * - `bottom-left`: Posiciona o thf-popup abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o thf-popup abaixo e à direita do componente alvo.
     * - `left`: Posiciona o thf-popup no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o thf-popup no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o thf-popup no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o thf-popup acima do componente alvo.
     * - `top-right`: Posiciona o thf-popup acima e à direita do componente alvo.
     * - `top-left`: Posiciona o thf-popup acima e à esquerda do componente alvo.
     */
    customPositions: Array<string>;
    /**
     * @description
     *
     * Para utilizar o `thf-popup` deve-se colocar uma variável local no componente que disparará o evento
     * de abertura no mesmo e com isso, invocará a função `toggle`, por exemplo:
     *
     * ```
     * <span #icon class="thf-icon thf-icon-credit-payment" (click)="popup.toggle()">
     *   Credit Actions
     * </span>
     *
     * <thf-popup #popup
     *   [t-actions]="actions"
     *   [t-target]="icon">
     * </thf-popup>
     * ```
     *
     * Caso o elemento alvo for um componente, será preciso obter o `ElementRef` do mesmo e passá-lo à propriedade, por exemplo:
     *
     * ```
     * // component.html
     *
     * <thf-button #thfButton
     *   t-label="Open Popover"
     *   (t-click)="popup.toggle()">
     * </thf-button>
     *
     * <thf-popup #popup
     *   [t-actions]="actions"
     *   [t-target]="thfButtonRef">
     * </thf-popup>
     *
     * // component.ts
     *
     * @ViewChild('thfButton', { read: ElementRef }) thfButtonRef: ElementRef;
     * ```
     */
    target: any;
    protected clickoutListener: () => void;
    protected resizeListener: () => void;
}
