import { ChangeDetectorRef, ElementRef, Renderer2, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { ThfControlPositionService } from '../../services/thf-control-position/thf-control-position.service';
import { ThfPopupAction } from './thf-popup-action.interface';
import { ThfPopupBaseComponent } from './thf-popup-base.component';
/**
 *
 * @docsExtends ThfPopupBaseComponent
 *
 * @example
 *
 * <example name="thf-popup-basic" title="Totvs Popup - Basic">
 *   <file name="sample-thf-popup-basic/sample-thf-popup-basic.component.html"> </file>
 *   <file name="sample-thf-popup-basic/sample-thf-popup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popup-labs" title="Totvs Popup - Labs">
 *   <file name="sample-thf-popup-labs/sample-thf-popup-labs.component.html"> </file>
 *   <file name="sample-thf-popup-labs/sample-thf-popup-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popup-email" title="Totvs Popup Email">
 *   <file name="sample-thf-popup-email/sample-thf-popup-email.component.html"> </file>
 *   <file name="sample-thf-popup-email/sample-thf-popup-email.component.ts"> </file>
 * </example>
 *
 */
export declare class ThfPopupComponent extends ThfPopupBaseComponent {
    private renderer;
    private router;
    private thfControlPosition;
    changeDetector: ChangeDetectorRef;
    popupRef: ElementRef;
    constructor(viewContainerRef: ViewContainerRef, renderer: Renderer2, router: Router, thfControlPosition: ThfControlPositionService, changeDetector: ChangeDetectorRef);
    /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     */
    close(): void;
    onActionClick(popupAction: ThfPopupAction): void | Promise<boolean>;
    /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    open(param?: any): void;
    returnBooleanValue(popupAction: any, property: string): any;
    /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    toggle(param?: any): void;
    private clickedOutDisabledItem;
    private clickedOutHeaderTemplate;
    private clickedOutTarget;
    private closePopupOnClickout;
    private elementContains;
    private hasContentToShow;
    private initializeListeners;
    private onScroll;
    private openUrl;
    private removeListeners;
    private setPosition;
    private validateInitialContent;
}
