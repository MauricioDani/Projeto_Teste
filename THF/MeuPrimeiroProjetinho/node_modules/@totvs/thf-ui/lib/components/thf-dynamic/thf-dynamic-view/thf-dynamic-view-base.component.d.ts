import { CurrencyPipe, DatePipe, DecimalPipe, TitleCasePipe } from '@angular/common';
import { ThfTimePipe } from '../../../pipes/thf-time/thf-time.pipe';
import { ThfDynamicViewField } from './thf-dynamic-view-field.interface';
/**
 *
 * @description
 *
 * Componente para listar dados dinamicamente a partir de uma lista de objetos.
 *
 * > Por padrão esse componente cria `thf-info` para exibição, é possível criar `thf-tag` passando a propriedade { tag: true }.
 *
 */
export declare class ThfDynamicViewBaseComponent {
    private currencyPipe;
    private datePipe;
    private decimalPipe;
    private timePipe;
    private titleCasePipe;
    private _fields;
    private _showAllValue;
    private _value;
    visibleFields: any[];
    /**
     * @optional
     *
     * @description
     *
     * Lista de objetos que implementam a interface `ThfDynamicView`.
     *
     * > Ex: `[ { property: 'age' } ]`
     *
     * Regras de tipagem e formatação dos valores exibidos:
     *
     * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
     * como formato padrão.
     * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
     * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
     * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
     * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
     *
     * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `t-value`.
     *
     * @default `[]`
     */
    fields: Array<ThfDynamicViewField>;
    /**
     * @optional
     *
     * @description
     *
     * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `t-value`.
     *
     * @default `false`
     */
    showAllValue: boolean;
    /**
     * @description
     *
     * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
     * dos objetos contidos na propridade `t-fields`.
     *
     * > Ex: `{ age: '35' }`
     */
    value: object;
    constructor(currencyPipe: CurrencyPipe, datePipe: DatePipe, decimalPipe: DecimalPipe, timePipe: ThfTimePipe, titleCasePipe: TitleCasePipe);
    protected getConfiguredFields(): any[];
    protected getMergedFields(): any[];
    protected getValueFields(): {
        tag?: boolean;
        format?: string;
        key?: boolean;
        property: string;
        label: string;
        gridColumns?: number;
        gridSmColumns?: number;
        gridMdColumns?: number;
        gridLgColumns?: number;
        gridXlColumns?: number;
        visible?: boolean;
        divider?: string;
        type?: string;
        value: any;
        cssClass: string;
    }[];
    private createField;
    private transformValue;
}
