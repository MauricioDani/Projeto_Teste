import { ThfMenuFilter } from './thf-menu-filter/thf-menu-filter.interface';
import { ThfMenuItem } from './thf-menu-item.interface';
import { ThfMenuService } from './services/thf-menu.service';
export declare const thfMenuLiteralsDefault: {
    en: {
        itemNotFound: string;
    };
    es: {
        itemNotFound: string;
    };
    pt: {
        itemNotFound: string;
    };
};
/**
 * @description
 *
 * Este é um componente de menu lateral que é utilizado para navegação nas páginas de uma aplicação.
 *
 * O componente thf-menu recebe uma lista de objetos do tipo `MenuItem` com as informações dos itens de menu como
 * textos, links para redirecionamento, ações, até 4 níveis de menu e ícones para o primeiro nível de menu.
 */
export declare abstract class ThfMenuBaseComponent {
    menuService: ThfMenuService;
    private _collapsed;
    private _filter;
    private _level;
    private _logo;
    private _maxLevel;
    private _menus;
    private _params;
    private _service;
    private _shortLogo;
    allowIcons: boolean;
    allowCollapseMenu: boolean;
    filteredItems: any;
    filterService: ThfMenuFilter;
    readonly literals: any;
    /**
     * @optional
     *
     * @description
     *
     * Colapsa (retrai) o menu e caso receba o valor `false` expande o menu.
     *
     * > Utilize esta propriedade para iniciar o menu colapsado.
     *
     * > Ao utilizar os métodos [`colapse`](documentation/thf-menu#colapseMethod), [`expand`](documentation/thf-menu#expandMethod) e
     * [`toggle`](documentation/thf-menu#toggleMethod) o valor desta propriedade não é alterado.
     *
     * **Importante:**
     *
     * > O menu será colapsado/expandido apenas se todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
     *
     * @default `false`
     */
    collapsed: boolean;
    /** Lista dos itens do menu. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
    menus: Array<ThfMenuItem>;
    readonly maxLevel: number;
    /**
     * @optional
     *
     * @description
     *
     * Habilita um campo para pesquisa no menu.
     * A pesquisa é realizada em todos os níveis do menu e busca apenas pelos itens que contém uma ação e/ou link definidos,
     * ou também, pode ser realizada através de um serviço definido na propriedade `t-service`.
     *
     * > O campo de pesquisa é desabilitado se o menu estiver colapsado.
     *
     * @default `false`
     */
    filter: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Nesta propriedade deve ser informada a URL do serviço em que será utilizado para realizar o filtro de itens do
     * menu quando realizar uma busca. Caso haja a necessidade de customização, pode ser informado um
     * serviço implementando a interface `ThfMenuFilter`.
     *
     * Caso utilizada uma URL, o serviço deve retornar os dados conforme o
     * [Guia de implementação de API da Totvs](http://tdn.totvs.com/display/public/INT/Guia+de+implementacao+das+APIs+TOTVS).
     *
     * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando o valor digitado
     * no parâmetro `search`, veja exemplo:
     *
     * > O filtro no serviço será realizado caso contenha no mínimo três caracteres no campo de busca, por exemplo `tot`.
     *
     * ```
     * <thf-menu t-service="/api/v1/fnd/menu">
     * </thf-menu>
     *
     * Requisição: GET /api/v1/fnd/menu?search=contas
     * ```
     *
     * > É necessário que propriedade `t-filter` esteja habilitada.
     */
    service: string | ThfMenuFilter;
    /**
     * @optional
     *
     * @description
     *
     * Deve ser informado um objeto que deseja-se utilizar na requisição de filtro dos itens de menu.
     *
     * Caso utilizado um serviço customizado, implementando a interface `ThfMenuFilter`, o valor desta propriedade
     * será passado como parâmetro, na função `getFilteredData`.
     *
     * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando os valores informados
     * nesta propriedade em conjunto com o parâmetro `search`, veja exemplo:
     *
     * ```
     * <thf-menu t-service="/api/v1/fnd/menu" [t-params]="{ company: 1, user: 297767512 }">
     * </thf-menu>
     *
     * Requisição: GET /api/v1/fnd/menu?search=contas&company=1&user=297767512
     * ```
     */
    params: any;
    /**
     * @optional
     *
     * @description
     *
     * Caminho para a logomarca, que será exibida quando o componente estiver expandido, localizada na parte superior.
     *
     * > **Importante:**
     * - Caso esta propriedade estiver indefinida ou inválida o espaço para logomarca será removido.
     * - Como boa prática, indica-se utilizar imagens com até `24px` de altura e `224px` de largura,
     * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
     */
    logo: any;
    /**
     * @optional
     *
     * @description
     *
     * Caminho para a logomarca, que será exibida quando o componente estiver colapsado, localizada na parte superior.
     *
     * > **Importante:**
     * - Caso esta propriedade estiver indefinida ou inválida passa a assumir o valor informado na propriedade `t-logo` e na ausência desta o
     * espaço para logomarca será removido.
     * - Como boa prática, indica-se utilizar imagens com até `48px` de altura e `48px` de largura,
     * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
     * - Caso não informar um valor, esta propriedade passa a assumir o valor informado na propriedade `t-logo`.
     */
    shortLogo: any;
    constructor(menuService: ThfMenuService);
    private configService;
    protected setMenuExtraProperties(): void;
    protected setMenuItemProperties(menuItem: ThfMenuItem): void;
    protected validateMenus(menus: any): void;
    private processSubItems;
    private removeBadgeAlert;
    private setMenuBadgeAlert;
    private setMenuType;
    private validateMenu;
    protected abstract validateCollapseClass(): any;
}
