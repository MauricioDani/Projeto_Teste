import { AfterViewInit, ElementRef, OnDestroy, Renderer2 } from '@angular/core';
import { ThfControlPositionService } from './../../services/thf-control-position/thf-control-position.service';
import { ThfPopoverBaseComponent } from './thf-popover-base.component';
/**
 *
 * @docsExtends ThfPopoverBaseComponent
 *
 * @example
 *
 * <example name="thf-popover-basic" title="Totvs Popover Basic">
 *   <file name="sample-thf-popover-basic/sample-thf-popover-basic.component.html"> </file>
 *   <file name="sample-thf-popover-basic/sample-thf-popover-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popover-labs" title="Totvs Popover Labs">
 *   <file name="sample-thf-popover-labs/sample-thf-popover-labs.component.html"> </file>
 *   <file name="sample-thf-popover-labs/sample-thf-popover-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popover-credit-card" title="Totvs Popover - Credit Card">
 *   <file name="sample-thf-popover-credit-card/sample-thf-popover-credit-card.component.html"> </file>
 *   <file name="sample-thf-popover-credit-card/sample-thf-popover-credit-card.component.ts"> </file>
 * </example>
 */
export declare class ThfPopoverComponent extends ThfPopoverBaseComponent implements AfterViewInit, OnDestroy {
    private renderer;
    private thfControlPosition;
    arrowDirection: string;
    timeoutResize: any;
    eventListenerFunction: () => void;
    popoverElement: ElementRef;
    constructor(renderer: Renderer2, thfControlPosition: ThfControlPositionService);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    close(): void;
    debounceResize(): void;
    open(): void;
    setOpacity(value: number): void;
    setPopoverPosition(): void;
    setRendererListenInit(): void;
    togglePopup(event: any): void;
    private addScrollEventListener;
    private initEventListenerFunction;
    private removeListeners;
}
