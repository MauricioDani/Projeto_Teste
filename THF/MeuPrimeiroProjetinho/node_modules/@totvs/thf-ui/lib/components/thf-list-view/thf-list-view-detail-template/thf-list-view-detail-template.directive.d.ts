import { TemplateRef } from '@angular/core';
/**
 * @usedBy ThfListViewComponent
 *
 * @description
 *
 * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
 * botão `Exibir detalhes` abaixo do conteúdo principal do item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <thf-list-view
 *   t-property-title="name"
 *   [t-items]="items">
 *
 *   <ng-template t-list-view-detail-template let-item let-code="index">
 *     <div class="thf-row">
 *       <thf-info class="thf-md-6" t-label="Code" [t-value]="code"></thf-info>
 *       <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
 *     </div>
 *   </ng-template>
 *
 * </thf-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <thf-list-view
 *    t-property-title="name"
 *    [t-items]="items">
 *    <div *t-list-view-detail-template="let item, let i=index" class="thf-row">
 *      <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
 *    </div>
 * </thf-list-view>
 * ...
 *
 * ```
 */
export declare class ThfListViewDetailTemplateDirective {
    templateRef: TemplateRef<any>;
    /**
     * @optional
     *
     * @description
     *
     * Função que deve retornar um valor do tipo `boolean`, que será utilizado como a validação para que o detalhe de item
     * da lista inicie aberto ou fechado.
     *
     */
    showDetail: (item: any) => boolean;
    constructor(templateRef: TemplateRef<any>);
}
