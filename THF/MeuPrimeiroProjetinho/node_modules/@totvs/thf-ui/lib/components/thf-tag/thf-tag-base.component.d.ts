import { EventEmitter } from '@angular/core';
import { ThfTagIcon } from './enums/thf-tag-icon.enum';
import { ThfTagOrientation } from './enums/thf-tag-orientation.enum';
import { ThfTagType } from './enums/thf-tag-type.enum';
/**
 * @description
 *
 * Este componente apresenta um valor em um marcador colorido que pode conter ícone e *label*, as cores são definidas conforme o tipo
 * escolhido.
 * Seu uso é indicado para informações que necessitam de destaque em forma de marcação.
 */
export declare class ThfTagBaseComponent {
    private _icon?;
    private _orientation?;
    private _type?;
    readonly thfTagOrientation: typeof ThfTagOrientation;
    /**
     * @optional
     *
     * @description
     *
     * Texto antes da tag.
     */
    label?: string;
    /**
     * @optional
     *
     * @description
     *
     * Apresenta um ícone na tag conforme o tipo:
     * - `danger`: <span class="thf-icon thf-icon-close"></span>
     * - `info`: <span class="thf-icon thf-icon-info"></span>
     * - `success`: <span class="thf-icon thf-icon-ok"></span>
     * - `warning`: <span class="thf-icon thf-icon-warning"></span>
     *
     * @default `false`
     */
    icon: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o layout de exibição.
     *
     * @default `vertical`
     */
    orientation: ThfTagOrientation;
    /**
     * @optional
     *
     * @description
     *
     * Define o tipo e determina a cor do `thf-tag`.
     *
     * Valores válidos:
     *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
     *  - `warning`: cor amarela que representa aviso ou advertência.
     *  - `danger`: cor vermelha para erro ou aviso crítico.
     *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
     *
     * @default `info`
     */
    type: ThfTagType;
    /** Texto da tag. */
    value: string;
    /**
     * @optional
     *
     * @description
     *
     * Ação que será executada quando o usuário clicar sobre o `thf-tag`
     * e que receberá como parâmetro um objeto contendo o valor e tipo de tag.
     */
    click?: EventEmitter<any>;
    readonly iconFromType: ThfTagIcon;
}
