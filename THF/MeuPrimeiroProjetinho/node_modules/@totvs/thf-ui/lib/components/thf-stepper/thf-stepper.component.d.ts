import { AfterContentInit, ChangeDetectorRef, QueryList } from '@angular/core';
import { ThfStepComponent } from './thf-step/thf-step.component';
import { ThfStepperBaseComponent } from './thf-stepper-base.component';
import { ThfStepperItem } from './thf-stepper-item.interface';
/**
 * @docsExtends ThfStepperBaseComponent
 *
 * @example
 *
 * <example name="thf-stepper-basic" title="Totvs Stepper Basic">
 *  <file name="sample-thf-stepper-basic/sample-thf-stepper-basic.component.html"> </file>
 *  <file name="sample-thf-stepper-basic/sample-thf-stepper-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-stepper-labs" title="Totvs Stepper Labs">
 *  <file name="sample-thf-stepper-labs/sample-thf-stepper-labs.component.html"> </file>
 *  <file name="sample-thf-stepper-labs/sample-thf-stepper-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-stepper-sales" title="Totvs Stepper - Sales">
 *  <file name="sample-thf-stepper-sales/sample-thf-stepper-sales.component.html"> </file>
 *  <file name="sample-thf-stepper-sales/sample-thf-stepper-sales.component.ts"> </file>
 * </example>
 */
export declare class ThfStepperComponent extends ThfStepperBaseComponent implements AfterContentInit {
    private changeDetector;
    thfSteps: QueryList<ThfStepComponent>;
    private currentActiveStep;
    private previousActiveStep;
    readonly currentStepIndex: number;
    readonly stepList: QueryList<ThfStepComponent> | Array<ThfStepperItem>;
    readonly useThfSteps: boolean;
    constructor(changeDetector: ChangeDetectorRef);
    ngAfterContentInit(): void;
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     *
     * @param index {number} Índice do `thf-step` que se deseja ativar.
     */
    active(index: number): void;
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     */
    first(): void;
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     */
    next(): void;
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     */
    previous(): void;
    changeStep(stepIndex: number, step?: ThfStepComponent): void;
    onStepActive(step: ThfStepComponent): void;
    trackByFn(step: ThfStepComponent): string;
    private activeFirstStep;
    private allowNextStep;
    private canActiveNextStep;
    private controlStepsStatus;
    private getStepperStatusByCanActive;
    private getStepsAndIndex;
    private getThfSteps;
    private isBeforeStep;
    private setFinalSteppersAsDisabled;
    private setStepAsActive;
    private setNextStepAsDefault;
    private setPreviousStepAsDone;
}
