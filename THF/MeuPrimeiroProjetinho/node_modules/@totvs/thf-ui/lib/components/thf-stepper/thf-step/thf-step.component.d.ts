import { AfterContentInit, ElementRef } from '@angular/core';
import { ThfStepperStatus } from '../enums/thf-stepper-status.enum';
/**
 * @description
 *
 * O componente `thf-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `thf-stepper`, por exemplo:
 *
 * ```
 * <thf-stepper>
 *
 *    <thf-step t-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </thf-step>
 *
 *    <thf-step t-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </thf-step>
 *
 *  </thf-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `thf-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `thf-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `thf-step`, o componente `thf-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `thf-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `thf-stepper`](/documentation/thf-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
export declare class ThfStepComponent implements AfterContentInit {
    private elementRef;
    private _status?;
    id?: string;
    /**
     * @optional
     *
     * @description
     *
     * Função chamada quando o próximo *step* for clicado ou quando o método `ThfStepperComponent.next()` for chamado.
     * Ao retornar `true` define que esse *step* ficará ativo e o atual como concluído (*done*).
     *
     * Ao ser disparada, a mesma receberá por parâmetro o `ThfStepComponent` atual.
     *
     * O contexto da função que será chamada, será o mesmo que o do `ThfStepComponent`, então para poder alterar
     * para o contexto do componente que o está utilizando, pode ser utilizado a propriedade `bind` do Javascript.
     * Por exemplo, para a função `validate`:
     *
     * ```
     * <thf-step t-label="Step 1" [t-can-active-next-step]="validate.bind(this)">
     * ...
     * </thf-step>
     * ```
     */
    canActiveNextStep: Function;
    /** Título que será exibido descrevendo o passo (*step*). */
    label: string;
    status: ThfStepperStatus;
    constructor(elementRef: ElementRef);
    ngAfterContentInit(): void;
    protected setDisplayOnActiveOrError(): void;
}
