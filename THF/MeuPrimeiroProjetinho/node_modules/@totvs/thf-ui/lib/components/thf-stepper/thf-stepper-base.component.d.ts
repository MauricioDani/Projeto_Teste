import { EventEmitter } from '@angular/core';
import { ThfStepComponent } from './thf-step/thf-step.component';
import { ThfStepperItem } from './thf-stepper-item.interface';
import { ThfStepperOrientation } from './enums/thf-stepper-orientation.enum';
/**
 * @description
 *
 * O `thf-stepper` permite que um processo seja dividido em passos para que o usuário o realize
 * mais facilmente.
 *
 * Existem duas formas de utilização:
 *
 * 1 - Usando o componente [**thf-step**](/documentation/thf-step) para renderizar e descrever os passos.
 *
 * 2 - Através da propriedade `t-steps` para descrever os passos do processo, sendo responsabilidade do desenvolvedor o controle
 * de renderização do que será exibido a cada *step* ativo.
 *
 * Através de suas propriedades, é possível definir se sua orientação será horizontal ou vertical,
 * além da possibilidade de aumentar o tamanho dos *steps*.
 *
 * Também é possível navegar entre os *steps* através do teclado utilizando a tecla *tab* e, para ativar o *step* em foco basta
 * pressionar a tecla *enter*. Além disso, é possível ativar a exibição de ícones no lugar de números nos *steps* através da
 * propriedade [`t-step-icons`](/documentation/thf-stepper#stepIconsProperty).
 *
 * #### Utilizando os métodos do componente:
 *
 * Para acessar os métodos do componente é necessário ter a referência do mesmo.
 *
 * Por exemplo, utilizando um [**ViewChild**](https://angular.io/api/core/ViewChild):
 *
 * ```
 * @ViewChild(ThfStepperComponent) thfStepperComponent: ThfStepperComponent;
 * ```
 *
 * E para acessar o método:
 *
 * ```
 * thfStepperComponent.next();
 * ```
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `thf-stepper`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `thf-stepper` por página.
 */
export declare class ThfStepperBaseComponent {
    private _orientation?;
    private _sequential?;
    private _step;
    private _steps;
    /**
     * @optional
     *
     * @description
     *
     * Define a orientação de exibição do `thf-stepper`.
     *
     * > Veja os valores válidos no *enum* [ThfStepperOrientation](documentation/thf-stepper#stepperOrientation).
     *
     * @default `ThfStepperOrientation.Horizontal`
     */
    orientation: ThfStepperOrientation;
    /**
     * @optional
     *
     * @description
     *
     * Controla o passo atual do `thf-stepper`.
     *
     * > Ao utilizar esta propriedade e também utilizar o componente [**thf-step**](/documentation/thf-step),
     * o valor desta propriedade será ignorada permanecendo a definição do [**thf-step**](/documentation/thf-step).
     *
     * @default `1`
     */
    step: number;
    /**
     * @optional
     *
     * @description
     *
     * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
     *
     * > Ao utilizar esta propriedade e também utilizar o componente [**thf-step**](/documentation/thf-step),
     * o valor desta propriedade será ignorada permanecendo a definição do [**thf-step**](/documentation/thf-step).
     */
    steps: Array<ThfStepperItem>;
    /**
     *
     * @optional
     *
     * @description
     *
     * <a id="stepIconsProperty"></a>
     *
     * Habilita a exibição de ícone ao invés de número no centro do círculo dos *steps*.
     *
     * @default `false`
     */
    stepIcons: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho dos *steps* em *pixels*, possibilitando um maior destaque.
     *
     * O valor informado deve ser entre `24` e `64`.
     *
     * > Valores que não se enquadrarem a esta regra serão ignorados, mantendo-se o valor *default*.
     *
     * @default `24`
     */
    stepSize: number;
    /**
     * @optional
     *
     * @description
     *
     * Define se o `thf-stepper` será sequencial ou aleatório.
     *
     * > Ao utilizar o componente [**thf-step**](/documentation/thf-step), o valor desta propriedade sempre será verdadeiro.
     *
     * @default `true`
     */
    sequential: boolean;
    /** Ação que será executada quando o usuário mudar o passo do `thf-stepper`. */
    onChangeStep: EventEmitter<number | ThfStepComponent>;
}
