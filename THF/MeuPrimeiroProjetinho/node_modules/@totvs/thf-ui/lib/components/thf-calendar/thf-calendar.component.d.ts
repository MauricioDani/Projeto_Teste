import { OnInit } from '@angular/core';
import { AbstractControl } from '@angular/forms';
import { ThfCalendarBaseComponent } from './thf-calendar-base.component';
import { ThfCalendarLangService } from './services/thf-calendar.lang.service';
import { ThfCalendarService } from './services/thf-calendar.service';
import { ThfDateService } from '../../services/thf-date/thf-date.service';
/**
 * @docsExtends ThfCalendarBaseComponent
 *
 * @example
 *
 * <example name="thf-calendar-basic" title="Totvs Calendar Basic" >
 *  <file name="sample-thf-calendar-basic/sample-thf-calendar-basic.component.html"> </file>
 *  <file name="sample-thf-calendar-basic/sample-thf-calendar-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-calendar-labs" title="Totvs Calendar Labs" >
 *  <file name="sample-thf-calendar-labs/sample-thf-calendar-labs.component.html"> </file>
 *  <file name="sample-thf-calendar-labs/sample-thf-calendar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-calendar-ticket-sales" title="Totvs Calendar - Ticket Sales" >
 *  <file name="sample-thf-calendar-ticket-sales/sample-thf-calendar-ticket-sales.component.html"> </file>
 *  <file name="sample-thf-calendar-ticket-sales/sample-thf-calendar-ticket-sales.component.ts"> </file>
 * </example>
 */
export declare class ThfCalendarComponent extends ThfCalendarBaseComponent implements OnInit {
    private thfCalendarService;
    constructor(thfCalendarService: ThfCalendarService, thfCalendarLangService: ThfCalendarLangService, thfDate: ThfDateService);
    ngOnInit(): void;
    getBackgroundColor(displayValue: number, propertyValue: number): "thf-calendar-box-background-selected" | "thf-calendar-box-background";
    getDayBackgroundColor(date: Date): string;
    getDayForegroundColor(date: Date): string;
    getForegroundColor(displayValue: number, propertyValue: number): "thf-calendar-box-foreground-selected" | "thf-calendar-box-foreground";
    getMonthLabel(): any;
    getYearLabel(): any;
    onNextMonth(): void;
    onPreviousMonth(): void;
    onSelectDate(date: Date): void;
    onSelectMonth(year: number, month: number): void;
    onSelectYear(year: number, month: number): void;
    registerOnChange(fn: any): void;
    registerOnTouched(func: any): void;
    registerOnValidatorChange(fn: () => void): void;
    selectDay(): void;
    selectMonth(): void;
    selectYear(): void;
    updateYear(value: number): void;
    validateModel(model: any): void;
    validate(c: AbstractControl): {
        [key: string]: any;
    };
    writeValue(value: any): void;
    private addAllYearsInDecade;
    private equalsDate;
    private getDecadeArray;
    private getColorForDate;
    private getColorForDateRange;
    private getColorForToday;
    private getDayColor;
    private init;
    private selectDateFromDate;
    private selectDateFromIso;
    private updateDate;
    private updateDecade;
    private updateDisplay;
    private writeDate;
    private writeDateIso;
}
