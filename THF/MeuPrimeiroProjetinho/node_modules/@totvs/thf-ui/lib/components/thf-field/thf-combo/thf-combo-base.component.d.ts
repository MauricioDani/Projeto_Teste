import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { EventEmitter, OnInit } from '@angular/core';
import { ThfComboFilter } from './interfaces/thf-combo-filter.interface';
import { ThfComboFilterMode } from './thf-combo-filter-mode.enum';
import { ThfComboFilterService } from './thf-combo-filter.service';
import { ThfComboLiterals } from './interfaces/thf-combo-literals.interface';
import { ThfComboOption } from './interfaces/thf-combo-option.interface';
export declare const thfComboLiteralsDefault: {
    en: ThfComboLiterals;
    es: ThfComboLiterals;
    pt: ThfComboLiterals;
};
/**
 * @description
 *
 * O thf-combo, semelhante ao thf-select, exibe uma lista de valores e permite ao usuário fazer a seleção de um desses valores,
 * mas no caso do thf-combo, o usuário ainda consegue filtrar os valores disponibilizados para seleção.
 *
 * Também há a possibilidade de usar serviço no thf-combo, através da propriedade t-filter-service.
 *
 * O comportamento do thf-combo permite ao usuário:
 *  - selecionar um item através do mouse;
 *  - navegar pelos itens utilizando as setas do teclado confirmando a seleção com "Enter";
 *  - pesquisar os itens da lista de seleção e em seguida navegar com as setas ou com o mouse;
 *  - digitar a descrição completa.
 *
 * O thf-combo guarda o último valor caso o usuário desista de uma busca, deixando o campo ou teclando "ESC".
 * Caso seja digitado no campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada
 * ao deixar o campo ou pressionando "Enter".
 *
 * É necessário que os itens da lista de selecão contenham sempre valor (value) e descrição (label) para que os itens apareçam corretamente
 * no thf-combo, itens que não estejam implementando corretamenta a interface ThfComboOption, serão descartados.
 *
 * O thf-combo ainda permite definir o modo que será feito o filtro, através da propriedade t-filter-mode.
 */
export declare abstract class ThfComboBaseComponent implements ControlValueAccessor, OnInit, Validator {
    private _changeOnEnter?;
    private _debounceTime?;
    private _disabled?;
    private _disabledInitFilter?;
    private _fieldLabel?;
    private _fieldValue?;
    private _filterMinlength?;
    private _filterMode?;
    private _filterParams?;
    private _filterService?;
    private _literals?;
    private _options;
    private _required?;
    cacheOptions: Array<ThfComboOption>;
    cacheStaticOptions: Array<ThfComboOption>;
    defaultService: ThfComboFilterService;
    firstInWriteValue: boolean;
    isFirstFilter: boolean;
    isFiltering: boolean;
    keyupSubscribe: any;
    onModelChange: any;
    onModelTouched: any;
    previousSearchValue: string;
    selectedOption: ThfComboOption;
    selectedValue: any;
    selectedView: any;
    service: ThfComboFilterService;
    visibleOptions: Array<ThfComboOption>;
    private validatorChange;
    /** Label no componente. */
    label?: string;
    /** Texto de apoio para o campo. */
    help?: string;
    /** Mensagem apresentada enquanto o campo estiver vazio. */
    placeholder?: string;
    /** Nome do componente. */
    name: string;
    /**
     * @optional
     *
     * @description
     * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de
     * itens no componente.
     * Caso haja a necessidade de customização, então pode ser informado um serviço implementando a interface ThfComboFilter.
     *
     * Caso utilizado uma URL, o serviço deve ser retornado no padrão API TOTVS e utiliza as propriedades
     * `t-field-label` e `t-field-value` para a construção da lista de itens.
     *
     * Quando utilizada uma URL de serviço, então será concateanada nesta URL o valor que deseja-se filtrar da seguinte forma:
     * ```
     * url + ?filter=Peter
     * ```
     */
    filterService: ThfComboFilter | string;
    /**
     * @optional
     *
     * @description
     * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
     * Será utilizada apenas quando houver serviço (`t-filter-service`).
     *
     * @default `400`
     */
    debounceTime: number;
    /**
     * @optional
     *
     * @description
     * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
     *
     * @default `false`
     *
     */
    disabledInitFilter: boolean;
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`t-options`), esta propriedade será responsável pelo valor de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * ThfComboOption.
     *
     * @default `value`
     */
    fieldValue: string;
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`t-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * ThfComboOption.
     *
     * @default `label`
     */
    fieldLabel: string;
    /**
     * @optional
     *
     * @description
     * Valor mínimo de caracteres para realizar o filtro no serviço.
     *
     * @default `0`
     */
    filterMinlength: number;
    /**
     * @optional
     *
     * @description
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    required: boolean;
    /**
     * @optional
     *
     * @description
     * Indica que o evento `t-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
     *
     * @default `false`
     */
    changeOnEnter: boolean;
    /**
     * @optional
     *
     * @description
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    disabled: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o ícone que será exibido no início do campo.
     *
     * > Veja a disponibilidade de ícones em [biblioteca de ícones](guides/icons).
     */
    icon?: string;
    /**
     * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfComboOption.
     * Esta lista conterá os valores e as descrições que serão apresentados na tela.
     */
    options: Array<ThfComboOption>;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `t-required`;
     * - Não possuir `t-help` e/ou `t-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /** Indica que a lista definida na propriedade t-options será ordenada pela descrição. */
    sort?: boolean;
    setSort: string;
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
     *
     * > Quando utilizar a propriedade `t-filter-service` esta propriedade será ignorada.
     *
     * @default `startsWith`
     */
    filterMode: ThfComboFilterMode;
    /**
     * @optional
     *
     * @description
     *
     * Valor que será repassado como parâmetro aos métodos do serviço que implementam a interface *ThfComboFilter*.
     */
    filterParams: any;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `thf-combo`.
     *
     * Para utilizar basta passar a literal que deseja customizar:
     *
     * ```
     *  const customLiterals: ThfComboLiterals = {
     *    noData: 'Nenhum valor'
     *  };
     * ```
     *
     * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
     *
     * ```
     * <thf-combo
     *   [t-literals]="customLiterals">
     * </thf-combo>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     */
    literals: ThfComboLiterals;
    /** Deve ser informada uma função que será disparada quando houver alterações no ngModel. */
    change?: EventEmitter<any>;
    ngModelChange?: EventEmitter<any>;
    abstract setInputValue(value: any): void;
    abstract applyFilter(value: string): void;
    abstract getObjectByValue(value: string): void;
    abstract getInputValue(): string;
    abstract initInputObservable(): void;
    ngOnInit(): void;
    onInitService(): void;
    setService(service: ThfComboFilter | string): void;
    validAndSortOptions(): void;
    sortOptions(): void;
    compareOptions(a: any, b: any): 1 | -1 | 0;
    compareMethod(search: string, option: ThfComboOption, filterMode: ThfComboFilterMode): boolean;
    startsWith(search: string, option: ThfComboOption): boolean;
    contains(search: string, option: ThfComboOption): boolean;
    endsWith(search: string, option: ThfComboOption): boolean;
    getOptionFromValue(value: any, options: any): any;
    getOptionFromLabel(label: any, options: any): any;
    updateSelectedValue(option: ThfComboOption, isUpdateModel?: boolean, isWriteValue?: boolean): void;
    callModelChange(value: any): any;
    isEqual(value: any, inputValue: any): boolean;
    searchForLabel(search: string, options: Array<ThfComboOption>, filterMode: ThfComboFilterMode): void;
    updateComboList(options?: Array<ThfComboOption>): void;
    getNextOption(value: any, options: Array<ThfComboOption>, reverse?: boolean): any;
    getIndexSelectedView(): number;
    compareObjects(obj1: any, obj2: any): boolean;
    verifyValidOption(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    registerOnValidatorChange(fn: () => void): void;
    validate(abstractControl: AbstractControl): {
        [key: string]: any;
    };
    protected validateModel(model: any): void;
    private configAfterSetFilterService;
    private unsubscribeKeyupObservable;
    private updateInternalVariables;
    private updateModel;
    private updateSelectedValueWithOldOption;
}
