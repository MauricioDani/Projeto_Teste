import { AfterViewInit, ElementRef } from '@angular/core';
import { AbstractControl } from '@angular/forms';
import { ThfInputBaseComponent } from '../thf-input/thf-input-base.component';
/**
 *
 * @docsExtends ThfInputBaseComponent
 *
 * @description
 *
 * thf-decimal é um input específico para receber apenas números decimais.
 * Quando utilizado, o componente terá comportamento de um campo de 'text' com algumas características:
 *
 * - Aceita apenas números;
 * - Utiliza ',' como separador de decimal;
 * - Utiliza '.' para separação de milhar;
 * - É possível configurar a quantidade de casas decimais e a quantidade de digitos do campo.
 *
 * @example
 *
 * <example name="thf-decimal-basic" title="Totvs Decimal Basic">
 *  <file name="sample-thf-decimal-basic/sample-thf-decimal-basic.component.html"> </file>
 *  <file name="sample-thf-decimal-basic/sample-thf-decimal-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-decimal-labs" title="Totvs Decimal Labs">
 *  <file name="sample-thf-decimal-labs/sample-thf-decimal-labs.component.html"> </file>
 *  <file name="sample-thf-decimal-labs/sample-thf-decimal-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-decimal-hourly-wage" title="Totvs Decimal - Hourly Wage">
 *  <file name="sample-thf-decimal-hourly-wage/sample-thf-decimal-hourly-wage.component.html"> </file>
 *  <file name="sample-thf-decimal-hourly-wage/sample-thf-decimal-hourly-wage.component.ts"> </file>
 * </example>
 *
 * <example name="thf-decimal-hourly-wage-reactive-form" title="Totvs Decimal - Hourly Wage Reactive Form">
 *  <file name="sample-thf-decimal-hourly-wage-reactive-form/sample-thf-decimal-hourly-wage-reactive-form.component.html"> </file>
 *  <file name="sample-thf-decimal-hourly-wage-reactive-form/sample-thf-decimal-hourly-wage-reactive-form.component.ts"> </file>
 * </example>
 */
export declare class ThfDecimalComponent extends ThfInputBaseComponent implements AfterViewInit {
    private el;
    private _decimalsLength?;
    private _thousandMaxlength?;
    private decimalSeparator;
    private fireChange;
    private isKeyboardAndroid;
    private minusSign;
    private oldDotsLength;
    private thousandSeparator;
    private valueBeforeChange;
    private regex;
    inputEl: ElementRef;
    /**
     * @optional
     *
     * @description
     *
     * Quantidade máxima de casas decimais.
     *
     * @default `2`
     */
    decimalsLength: number;
    /**
     * @optional
     *
     * @description
     *
     * Número máximo de dígitos antes do separador de decimal. O valor máximo possível deve ser menor ou igual a 13.
     *
     * @default `13`
     */
    thousandMaxlength: number;
    constructor(el: ElementRef);
    ngAfterViewInit(): void;
    clear(value: any): void;
    extraValidation(c: AbstractControl): {
        [key: string]: any;
    };
    getScreenValue(): any;
    hasInvalidClass(): boolean;
    hasLetters(value?: string): RegExpMatchArray;
    isValidNumber(event: any): boolean;
    onBlur(event: any): void;
    onFocus(event: FocusEvent): void;
    onInput(event: any): void;
    onInputKeyboardAndroid(event: any): any;
    onKeyPress(event: KeyboardEvent): void;
    setPaddingInput(): void;
    writeValueModel(value: any): void;
    private addZeroBefore;
    private containsComma;
    private containsMoreThanOneComma;
    private controlChangeEmitter;
    private formatMask;
    private formatToModelValue;
    private formatToViewValue;
    private formatValueWithoutThousandSeparator;
    private getValueAfterSeparator;
    private getValueBeforeSeparator;
    private hasLessDot;
    private hasMoreDot;
    private hasMinusSignInvalidPosition;
    private isInvalidKey;
    private isKeyDecimalSeparator;
    private isPositionAfterDecimalSeparator;
    private isSelectionStartDifferentSelectionEnd;
    private isValidKey;
    private verifyDecimalLengthIsZeroAndKeyPressedIsComma;
    private putFocus;
    private setInitialSelectionRange;
    private replaceAt;
    private replaceCommaToDot;
    private setCursorInput;
    private setPositionValue;
    private setViewValue;
    private validateCursorPositionBeforeSeparator;
    private verifyThousandLength;
    private verifyInsertComma;
    private verifyInsertMinusSign;
    private verifyValueAfterComma;
}
