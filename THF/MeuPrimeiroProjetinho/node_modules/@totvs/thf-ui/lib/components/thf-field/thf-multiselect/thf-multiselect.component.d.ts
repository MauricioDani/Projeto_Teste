import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, OnDestroy, Renderer2 } from '@angular/core';
import { ThfControlPositionService } from './../../../services/thf-control-position/thf-control-position.service';
import { ThfMultiselectBaseComponent } from './thf-multiselect-base.component';
/**
 * @docsExtends ThfMultiselectBaseComponent
 *
 * @example
 *
 * <example name="thf-multiselect-basic" title="Totvs Multiselect Basic">
 *   <file name="sample-thf-multiselect-basic/sample-thf-multiselect-basic.component.html"> </file>
 *   <file name="sample-thf-multiselect-basic/sample-thf-multiselect-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-multiselect-labs" title="Totvs Multiselect Labs">
 *   <file name="sample-thf-multiselect-labs/sample-thf-multiselect-labs.component.html"> </file>
 *   <file name="sample-thf-multiselect-labs/sample-thf-multiselect-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-multiselect-vacation" title="Totvs Multiselect - Vacation">
 *   <file name="sample-thf-multiselect-vacation/sample-thf-multiselect-vacation.component.html"> </file>
 *   <file name="sample-thf-multiselect-vacation/sample-thf-multiselect-vacation.component.ts"> </file>
 * </example>
 *
 * <example name="thf-multiselect-vacation-reactive-form" title="Totvs Multiselect - Vacation Reactive Form">
 *   <file name="sample-thf-multiselect-vacation-reactive-form/sample-thf-multiselect-vacation-reactive-form.component.html"> </file>
 *   <file name="sample-thf-multiselect-vacation-reactive-form/sample-thf-multiselect-vacation-reactive-form.component.ts"> </file>
 * </example>
 */
export declare class ThfMultiselectComponent extends ThfMultiselectBaseComponent implements AfterViewInit, DoCheck, OnDestroy {
    renderer: Renderer2;
    private changeDetector;
    private controlPosition;
    private el;
    dropdownElement: ElementRef;
    dropdown: any;
    disclaimerContainerElement: ElementRef;
    iconElement: ElementRef;
    inputElement: ElementRef;
    disclaimerOffset: number;
    dropdownIcon: string;
    dropdownOpen: boolean;
    initialized: boolean;
    positionDisclaimerExtra: any;
    timeoutResize: any;
    visibleElement: boolean;
    private isCalculateVisibleItems;
    constructor(renderer: Renderer2, changeDetector: ChangeDetectorRef, controlPosition: ThfControlPositionService, el: ElementRef);
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    getInputWidth(): number;
    getDisclaimersWidth(): any[];
    calculateVisibleItems(): void;
    updateVisibleItems(): void;
    debounceResize(): void;
    onKeyDown(event?: any): void;
    toggleDropdownVisibility(): void;
    openDropdown(toOpen: any): void;
    controlDropdownVisibility(toOpen: boolean): void;
    scrollToSelectedOptions(): void;
    setVisibleOptionsDropdown(options: any): void;
    changeSearch(event: any): void;
    getPlaceholder(): string;
    closeDisclaimer(value: any): void;
    wasClickedOnToggle(event: MouseEvent): void;
    private adjustContainerPosition;
    private close;
    private initializeListeners;
    private onScroll;
    private open;
    private removeListeners;
    private setPositionDropdown;
}
