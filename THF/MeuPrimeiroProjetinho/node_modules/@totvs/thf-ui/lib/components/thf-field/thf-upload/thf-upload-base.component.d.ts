import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { EventEmitter } from '@angular/core';
import { ThfUploadFile } from './thf-upload-file';
import { ThfUploadFileRestrictions } from './interfaces/thf-upload-file-restriction.interface';
import { ThfUploadLiterals } from './interfaces/thf-upload-literals.interface';
import { ThfUploadService } from './thf-upload.service';
export declare const thfUploadLiteralsDefault: {
    en: ThfUploadLiterals;
    es: ThfUploadLiterals;
    pt: ThfUploadLiterals;
};
/**
 * @description
 *
 * O componente `thf-upload` permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
 * Este componente também possibilita algumas configurações como:
 *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
 *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
 * clique em enviar.
 *  - Restrições de formatos de arquivo e tamanho.
 *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
 *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
 */
export declare class ThfUploadBaseComponent implements ControlValueAccessor, Validator {
    protected uploadService: ThfUploadService;
    private _disabled?;
    private _fileRestrictions?;
    private _formField?;
    private _hideSelectButton?;
    private _hideSendButton?;
    private _literals?;
    private _required?;
    allowedExtensions: string;
    currentFiles: Array<ThfUploadFile>;
    onModelChange: any;
    onModelTouched: any;
    private validatorChange;
    /**
     * @optional
     *
     * @description
     *
     * Omite o botão de seleção de arquivos.
     *
     * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
     * pela chamada do método `selectFiles()` para seleção de arquivos.
     *
     * @default `false`
     */
    hideSelectButton: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Omite o botão de envio de arquivos.
     *
     * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
     * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
     *
     * @default `false`
     */
    hideSendButton: boolean;
    /** Rótulo do campo. */
    label?: string;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `thf-upload`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: ThfUploadLiterals = {
     *    selectFile: 'Buscar arquivo',
     *    deleteFile: 'Deletar',
     *    cancel: 'Desistir',
     *    tryAgain: 'Recomeçar',
     *    startSending: 'Enviar'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: ThfUploadLiterals = {
     *    deleteFile: 'Deletar'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
     *
     * ```
     * <thf-upload
     *   [t-literals]="customLiterals">
     * </thf-upload>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     */
    literals: ThfUploadLiterals;
    /** Texto de apoio para o campo. */
    help?: string;
    /** URL que deve ser feita a requisição com os arquivos selecionados. */
    url: string;
    /**
     * @optional
     *
     * @description
     *
     * Objeto que segue a definição da interface `ThfFileRestrictions`,
     * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
     */
    fileRestrictions: ThfUploadFileRestrictions;
    /** Define o valor do atributo `name` do componente. */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Nome do campo de formulário que será enviado para o serviço informado na propriedade `t-url`.
     *
     * @default `files`
     */
    formField: string;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     */
    disabled: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define se o envio do arquivo será automático ao selecionar o mesmo.
     *
     * @default `false`
     */
    autoUpload?: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define se pode selecionar mais de um arquivo.
     */
    isMultiple?: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     *  - O campo conter `t-required`;
     *  - Não possuir `t-help` e/ou `t-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    required: boolean;
    /**
     * Função que será executada no momento de realizar o envio do arquivo,
     * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
     * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
     * que será enviado em conjunto com o arquivo na requisição, por exemplo:
     *
     * ```
     *   event.data = {id: 'id do usuario'};
     * ```
     */
    onUpload?: EventEmitter<any>;
    /**
     * Evento será disparado quando ocorrer algum erro no envio do arquivo.
     * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
     */
    onError?: EventEmitter<any>;
    /**
     * Evento será disparado quando o envio do arquivo for realizado com sucesso.
     * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
     */
    onSuccess?: EventEmitter<any>;
    ngModelChange?: EventEmitter<any>;
    constructor(uploadService: ThfUploadService);
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    registerOnValidatorChange(fn: () => void): void;
    validate(abstractControl: AbstractControl): {
        [key: string]: any;
    };
    writeValue(model: any): void;
    protected isExceededFileLimit(currentFilesLength: number): boolean;
    protected parseFiles(files: Array<File>): Array<ThfUploadFile>;
    protected validateModel(model: any): void;
    private checkRestrictions;
    private existsFileSameName;
    private getUploadService;
    private insertFileInFiles;
    private isAllowedExtension;
    private setAllowedExtensions;
    private updateExistsFileInFiles;
}
