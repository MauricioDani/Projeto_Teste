import { EventEmitter } from '@angular/core';
import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
/**
 * @description
 *
 * Este é um componente baseado em input, com várias propriedades do input nativo e outras
 * propriedades extras como: máscara, pattern, mensagem de erro e etc.
 * Você deve informar a variável que contém o valor como [(ngModel)]="variavel", para que o
 * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).
 * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.
 *
 * Importante:
 *
 * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então você precisa informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * Exemplo: [(ngModel)]="pessoa.nome" [ngModelOptions]="{standalone: true}"
 */
export declare abstract class ThfInputBaseComponent implements ControlValueAccessor, Validator {
    private _maxlength?;
    private _minlength?;
    private _placeholder?;
    protected passedWriteValue: boolean;
    protected validatorChange: any;
    /**
     * @optional
     *
     * @description
     *
     * Define o ícone que será exibido no início do campo.
     *
     * > Veja a disponibilidade de ícones em [biblioteca de ícones](guides/icons).
     */
    icon?: string;
    /** Rótulo do campo. */
    label?: string;
    /** Texto de apoio do campo. */
    help?: string;
    /** Nome e identificador do campo. */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     *
     * @default ''
     */
    placeholder: string;
    /**
     * @description
     *
     * Se verdadeiro, desabilita o campo.
     *
     * @default `false`
     */
    disabled?: boolean;
    setDisabled: string;
    /** Indica que o campo será somente leitura. */
    readonly?: boolean;
    setReadonly: string;
    /**
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * > Esta propriedade é desconsiderada quando o input está desabilitado `(t-disabled)`.
     *
     * @default `false`
     */
    required?: boolean;
    setRequired: string;
    /** Se verdadeiro, o campo iniciará com foco. */
    focus?: boolean;
    setFocus: string;
    /** Se verdadeiro, o campo receberá um botão para ser limpo. */
    clean?: boolean;
    setClean: string;
    /**
     * @description
     *
     * Expressão regular para validar o campo.
     * Quando o campo possuir uma máscara `(t-mask)` será automaticamente validado por ela, porém
     * é possível definir um t-pattern para substituir a validação da máscara.
     */
    pattern?: string;
    setPattern: string;
    /**
     * @description
     *
     * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
     *
     * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
     */
    errorPattern?: string;
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade máxima de caracteres que o campo aceita.
     */
    maxlength: number;
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade mínima de caracteres que o campo aceita.
     */
    minlength: number;
    /**
     * @description
     *
     * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
     * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
     * através da propriedade t-pattern.
     * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
     * mesmo quando desabilitado.
     */
    mask?: string;
    setMask: string;
    /**
     * @description
     *
     * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
     *
     * @default `false`
     */
    maskFormatModel?: boolean;
    setMaskFormatModel: string;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `t-required`;
     * - Não possuir `t-help` e/ou `t-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /** Evento disparado ao sair do campo. */
    blur?: EventEmitter<any>;
    /** Evento disparado ao entrar do campo. */
    enter?: EventEmitter<any>;
    /** Evento disparado ao alterar valor e deixar o campo. */
    change?: EventEmitter<any>;
    /** Evento disparado ao alterar valor do model. */
    changeModel?: EventEmitter<any>;
    type: string;
    onChangePropagate: any;
    onTouched: any;
    objMask: any;
    modelLastUpdate: any;
    callOnChange(value: any): void;
    callUpdateModelWithTimeout(value: any): void;
    controlChangeModelEmitter(value: any): void;
    registerOnChange(func: any): void;
    registerOnTouched(func: any): void;
    registerOnValidatorChange(fn: () => void): void;
    updateModel(value: any): void;
    validate(c: AbstractControl): {
        [key: string]: any;
    };
    writeValue(value: any): void;
    protected validateModel(): void;
    abstract writeValueModel(value: any): void;
    abstract extraValidation(c: AbstractControl): {
        [key: string]: any;
    };
    abstract getScreenValue(): string;
    private validatePatternOnWriteValue;
}
