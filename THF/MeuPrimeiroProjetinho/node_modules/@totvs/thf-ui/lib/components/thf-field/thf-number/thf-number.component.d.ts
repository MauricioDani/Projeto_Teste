import { ElementRef } from '@angular/core';
import { AbstractControl } from '@angular/forms';
import { ThfNumberBaseComponent } from './thf-number-base.component';
/**
 * @docsExtends ThfInputBaseComponent
 *
 * @description
 *
 * thf-number é um input específico para receber apenas números.
 * É possível configurar um valor mínimo, máximo e um step com t-min, t-max e t-step,
 * respectivamente.
 *
 * @example
 *
 * <example name="thf-number-basic" title="Totvs Number Basic">
 *  <file name="sample-thf-number-basic/sample-thf-number-basic.component.html"> </file>
 *  <file name="sample-thf-number-basic/sample-thf-number-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-number-labs" title="Totvs Number Labs">
 *  <file name="sample-thf-number-labs/sample-thf-number-labs.component.html"> </file>
 *  <file name="sample-thf-number-labs/sample-thf-number-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-number-calculate" title="Totvs Number - Calculate">
 *  <file name="sample-thf-number-calculate/sample-thf-number-calculate.component.html"> </file>
 *  <file name="sample-thf-number-calculate/sample-thf-number-calculate.component.ts"> </file>
 * </example>
 */
export declare class ThfNumberComponent extends ThfNumberBaseComponent {
    /** Valor mínimo. */
    min?: number;
    setMin: string;
    /** Valor máximo. */
    max?: number;
    setMax: string;
    /**
     * @optional
     *
     * @description
     *
     * Intervalo.
     *
     * @default 1
     */
    step?: string;
    constructor(el: ElementRef);
    extraValidation(abstractControl: AbstractControl): {
        [key: string]: any;
    };
}
