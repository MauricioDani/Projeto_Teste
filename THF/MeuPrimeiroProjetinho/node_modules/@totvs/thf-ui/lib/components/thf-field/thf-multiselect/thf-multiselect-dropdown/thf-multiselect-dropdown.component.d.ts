import { ElementRef, EventEmitter } from '@angular/core';
import { ThfMultiselectLiterals } from '../../index';
import { ThfMultiselectOption } from '../thf-multiselect-option.interface';
import { ThfMultiselectSearchComponent } from './../thf-multiselect-search/thf-multiselect-search.component';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
 */
export declare class ThfMultiselectDropdownComponent {
    scrollTop: number;
    show: boolean;
    haveOptions: boolean;
    /** Propriedade que indica se o campo de pesquisa deverá ser escondido. */
    hideSearch?: boolean;
    /** Propriedade que que recebe as literais definidas no componente `thf-multiselect`. */
    literals?: ThfMultiselectLiterals;
    /** Placeholder do campo de pesquisa. */
    placeholderSearch: string;
    /** Propriedade que recebe a lista de opções selecionadas. */
    selectedValues: Array<any>;
    /** Propriedade que recebe a lista de opções que deverão ser criadas no dropdown. */
    options: Array<ThfMultiselectOption>;
    /** Evento disparado a cada tecla digitada na pesquisa. */
    changeSearch: EventEmitter<{}>;
    /** Evento disparado a cada alteração na lista das opções selecionadas. */
    change: EventEmitter<{}>;
    /**
     * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
     * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
     * para notificar o componente principal que deve fechar o dropdown.
     */
    closeDropdown: EventEmitter<{}>;
    container: ElementRef;
    ulElement: ElementRef;
    searchElement: ThfMultiselectSearchComponent;
    scrollTo(index: any): void;
    isSelectedItem(option: ThfMultiselectOption): boolean;
    clickItem(check: any, option: any): void;
    updateSelectedValues(checked: any, option: any): void;
    callChangeSearch(event: any): void;
    onKeydown(event: any): void;
    controlVisibility(toOpen: any): void;
    private checkInitialOptions;
}
