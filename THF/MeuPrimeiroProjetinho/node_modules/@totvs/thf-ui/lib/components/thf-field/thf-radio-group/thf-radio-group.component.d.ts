import { DoCheck, ElementRef, IterableDiffers } from '@angular/core';
import { ThfRadioGroupBaseComponent } from './thf-radio-group-base.component';
/**
 * @docsExtends ThfRadioGroupBaseComponent
 *
 * @example
 *
 * <example name="thf-radio-group-basic" title="Totvs Radio Group Basic">
 *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.html"> </file>
 *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.ts"> </file>
 *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="thf-radio-group-labs" title="Totvs Radio Group Labs">
 *  <file name="sample-thf-radio-group-labs/sample-thf-radio-group-labs.component.html"> </file>
 *  <file name="sample-thf-radio-group-labs/sample-thf-radio-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-radio-group-translator" title="Totvs Radio Group - Translator">
 *  <file name="sample-thf-radio-group-translator/sample-thf-radio-group-translator.component.html"> </file>
 *  <file name="sample-thf-radio-group-translator/sample-thf-radio-group-translator.component.ts"> </file>
 * </example>
 *
 * <example name="thf-radio-group-translator-reactive-form" title="Totvs Radio Group - Translator Reactive Form">
 *  <file name="sample-thf-radio-group-translator-reactive-form/sample-thf-radio-group-translator-reactive-form.component.html"> </file>
 *  <file name="sample-thf-radio-group-translator-reactive-form/sample-thf-radio-group-translator-reactive-form.component.ts"> </file>
 * </example>
 *
 */
export declare class ThfRadioGroupComponent extends ThfRadioGroupBaseComponent implements DoCheck {
    /** Label do campo. */
    label?: string;
    /** Texto de apoio do campo. */
    help?: string;
    inputEl: ElementRef;
    differ: any;
    constructor(differs: IterableDiffers);
    ngDoCheck(): void;
    eventClick(value: any, disabled: any): void;
    getElementByValue(value: any): any;
    onKeyUp(event: KeyboardEvent, value: any): void;
    private isArrowKey;
}
