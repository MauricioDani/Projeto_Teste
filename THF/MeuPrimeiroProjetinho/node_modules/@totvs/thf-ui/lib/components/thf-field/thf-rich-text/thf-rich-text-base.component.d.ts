import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
/**
 * @description
 *
 * O componente `thf-rich-text` é um editor de textos enriquecidos.
 *
 * Para edição de texto simples sem formatação recomenda-se o uso do componente [**thf-textarea**](/documentation/thf-textarea).
 */
export declare abstract class ThfRichTextBaseComponent implements ControlValueAccessor, Validator {
    private _height?;
    private _placeholder;
    private _readonly;
    onChangeModel: any;
    invalid: boolean;
    value: string;
    private onTouched;
    private validatorChange;
    /**
     * @description
     *
     * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.
     */
    errorMessage?: string;
    /**
     * @optional
     *
     * @description
     *
     * Define a altura da área de edição de texto.
     *
     * > Altura mínima do componente é `94` e a altura máxima é `262`.
     */
    height: number;
    /**
     * @optional
     *
     * @description
     *
     * Texto de apoio do campo.
     */
    help?: string;
    /**
     * @optional
     *
     * @description
     *
     * Rótulo do campo.
     */
    label?: string;
    /** Nome e identificador do campo. */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `t-required`;
     * - Não possuir `t-help` e/ou `t-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     *
     * @default ''
     */
    placeholder: string;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente leitura.
     *
     * @default `false`
     */
    readonly: boolean;
    /**
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    required?: boolean;
    setRequired: string;
    registerOnChange(func: any): void;
    registerOnTouched(func: any): void;
    registerOnValidatorChange(fn: () => void): void;
    validate(abstractControl: AbstractControl): {
        [key: string]: any;
    };
    writeValue(value: string): void;
    protected updateModel(value: any): void;
    protected validateModel(value: any): void;
}
