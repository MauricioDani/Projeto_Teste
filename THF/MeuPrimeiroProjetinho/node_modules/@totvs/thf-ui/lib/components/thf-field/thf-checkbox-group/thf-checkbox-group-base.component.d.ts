import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { EventEmitter } from '@angular/core';
import { ThfCheckboxGroupOption } from './thf-checkbox-group-option.interface';
/**
 * @description
 *
 * O componente `thf-checkbox-group` exibe uma lista de múltipla escolha onde o usuário pode marcar e desmarcar,
 * utilizando a tecla de espaço ou o clique do mouse, várias opções.
 *
 * > Para seleção única, utilize o [**Totvs Radio Group**](/documentation/thf-radio-group).
 *
 * Por padrão, o thf-checkbox-group retorna um array com os valores dos itens selecionados para o model.
 *
 * ```
 * favorites = ['THF', 'Angular'];
 * ```
 *
 * Na maioria das situações, o array com os objetos setados já atende as necessidades mas, caso o desenvolvedor
 * tenha necessidade de usar um valor indeterminado (`null`), ou seja, nem marcado (`true`) e nem desmarcado (`false`),
 * deve setar a propriedade `t-indeterminate` como `true`.
 *
 * Nesse caso, o thf-checkbox-group vai retornar um objeto com todas as opções disponíveis e seus valores.
 *
 * ```
 * favorites = {
 *  THF: true,
 *  Angular: true,
 *  VueJS: false,
 *  React: null // indeterminado
 * };
 * ```
 */
export declare class ThfCheckboxGroupBaseComponent implements ControlValueAccessor, Validator {
    checkedOptions: any;
    checkedOptionsList: any;
    mdColumns: number;
    propagateChange: any;
    validatorChange: any;
    private _columns;
    private _disabled?;
    private _indeterminate?;
    private _options?;
    private _required?;
    /** Nome dos checkboxes */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
     * - É possível exibir as opções entre `1` e `4` colunas.
     * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
     * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
     * o *grid system* será composto por `2` colunas.
     *
     * @default `2`
     *
     */
    columns: number;
    /**
     * @optional
     *
     * @description
     *
     * Desabilita todos os itens do checkbox.
     *
     * @default `false`
     */
    disabled: boolean;
    /** Texto de apoio do campo */
    help?: string;
    /**
     * @optional
     *
     * @description
     *
     * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
     * a propriedade `t-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
     *
     * Quando essa propriedade é setada como `true`, o *thf-checkbox-group* passa a devolver um objeto completo para o
     * `ngModel`, diferente do array que contém apenas os valores selecionados.
     *
     * @default `false`
     */
    indeterminate: boolean;
    /** Label do campo */
    label?: string;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `t-required`;
     * - Não possuir `t-help` e/ou `t-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /**
     * @optional
     *
     * @description
     * Lista de opções que serão exibidas
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfCheckboxGroupOption
     */
    options: Array<ThfCheckboxGroupOption>;
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     *
     * @default `false`
     */
    required: boolean;
    ngModelChange?: EventEmitter<any>;
    /** Evento disparado ao alterar valor do campo */
    change?: EventEmitter<any>;
    changeValue(): void;
    checkIndeterminate(): any;
    checkOption(value: ThfCheckboxGroupOption): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(optionsModel: any): void;
    registerOnValidatorChange(fn: () => void): void;
    validate(abstractControl: AbstractControl): {
        [key: string]: any;
    };
    protected validateModel(model: any): void;
    private checkColumnsRange;
    private checkOptionModel;
    private generateCheckOptions;
    private getGridSystemColumns;
    private isInvalidIndeterminate;
    private removeDuplicatedOptions;
}
