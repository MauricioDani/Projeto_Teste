import { ElementRef, EventEmitter } from '@angular/core';
import { ThfCalendarLangService } from './thf-calendar.lang.service';
import { ThfCalendarService } from './thf-calendar.service';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente de calendário de uso interno
 */
export declare class ThfCalendarComponent {
    private thfCalendarService;
    private thfCalendarLangService;
    private _dateEnd;
    private _dateStart;
    private _locale;
    private _selectedDate?;
    dayVisible: boolean;
    displayDays: Array<number>;
    displayDecade: Array<number>;
    displayFinalDecade: number;
    displayMonth: any;
    displayMonths: Array<any>;
    displayStartDecade: number;
    displayWeedDays: Array<any>;
    displayYear: number;
    monthVisible: boolean;
    overlayInvisible: boolean;
    visible: boolean;
    yearVisible: boolean;
    private currentMonthNumber;
    private currentYear;
    private displayMonthNumber;
    private isMobile;
    private lastDisplay;
    private today;
    elDays: ElementRef;
    elMonths: ElementRef;
    elYears: ElementRef;
    /**
     * @optional
     *
     * @description
     *
     * Data máxima possível de ser selecionada no calendário.
     */
    dateEnd: Date;
    /**
     * @optional
     *
     * @description
     *
     * Idioma do calendário.
     *
     * Valores válidos:
     *  - `pt`
     *  - `en`
     *  - `es`
     */
    locale: string;
    /**
     * @optional
     *
     * @description
     *
     * Data selecionada no calendário.
     */
    selectedDate: Date;
    /**
     * @optional
     *
     * @description
     *
     * Data mínima possível de ser selecionada no calendário.
     */
    dateStart: Date;
    selectedDateChange: EventEmitter<Date>;
    submit: EventEmitter<Date>;
    constructor(thfCalendarService: ThfCalendarService, thfCalendarLangService: ThfCalendarLangService);
    close(): void;
    getArrayDecade(year: any): void;
    getBackgroundColor(displayValue: number, propertyValue: number): "thf-calendar-box-background-selected" | "thf-calendar-box-background";
    getDayBackgroundColor(date: Date): "" | "thf-calendar-box-background-selected" | "thf-calendar-box-background" | "thf-calendar-box-background-today" | "thf-calendar-box-background-disabled";
    getDayForegroundColor(date: Date): "thf-calendar-box-foreground-selected" | "thf-calendar-box-foreground" | "thf-calendar-box-foreground-today" | "thf-calendar-box-foreground-disabled";
    getForegroundColor(displayValue: number, propertyValue: number): "thf-calendar-box-foreground-selected" | "thf-calendar-box-foreground";
    getWordMonth(): any;
    getWordYear(): any;
    init(): void;
    initializeLanguage(): void;
    onNextMonth(): void;
    onPrevMonth(): void;
    onSelectDate(date: Date): void;
    onSelectMonth(year: number, month: number): void;
    onSelectYear(year: number, month: number): void;
    selectDay(): void;
    selectMonth(): void;
    selectYear(): void;
    setMobileVisualization(): "thf-calendar" | "thf-calendar thf-calendar-mobile";
    updateYear(value: number): void;
    private addAllYearsInDecade;
    private equalsDate;
    private updateDate;
    private updateDecade;
    private updateDisplay;
}
