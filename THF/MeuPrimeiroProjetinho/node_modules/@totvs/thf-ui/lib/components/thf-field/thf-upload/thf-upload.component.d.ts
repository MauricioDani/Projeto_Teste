import { ElementRef } from '@angular/core';
import { ThfUploadBaseComponent } from './thf-upload-base.component';
import { ThfUploadFile } from './thf-upload-file';
import { ThfUploadService } from './thf-upload.service';
/**
 * @docsExtends ThfUploadBaseComponent
 *
 * @example
 *
 * <example name="thf-upload-basic" title="Totvs Upload Basic">
 *   <file name="sample-thf-upload-basic/sample-thf-upload-basic.component.html"> </file>
 *   <file name="sample-thf-upload-basic/sample-thf-upload-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-upload-labs" title="Totvs Upload Labs">
 *   <file name="sample-thf-upload-labs/sample-thf-upload-labs.component.html"> </file>
 *   <file name="sample-thf-upload-labs/sample-thf-upload-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-upload-resume" title="Totvs Upload - Resume">
 *   <file name="sample-thf-upload-resume/sample-thf-upload-resume.component.html"> </file>
 *   <file name="sample-thf-upload-resume/sample-thf-upload-resume.component.ts"> </file>
 * </example>
 *
 * <example name="thf-upload-rs" title="Totvs Upload - Realize & Show">
 *   <file name="sample-thf-upload-rs/sample-thf-upload-rs.component.html"> </file>
 *   <file name="sample-thf-upload-rs/sample-thf-upload-rs.component.ts"> </file>
 * </example>
 */
export declare class ThfUploadComponent extends ThfUploadBaseComponent {
    private elementRef;
    private calledByCleanInputValue;
    private inputFile;
    constructor(elementRef: ElementRef, uploadService: ThfUploadService);
    readonly displaySendButton: boolean;
    readonly hasFileNotUploaded: boolean;
    readonly isDisabled: boolean;
    /** Método responsável por **limpar** o(s) arquivo(s) selecionado(s). */
    clear(): void;
    onFileChange(event: any): void;
    removeFile(file: any): void;
    /** Método responsável por **abrir** a janela para seleção de arquivo(s). */
    selectFiles(): void;
    /** Método responsável por **enviar** o(s) arquivo(s) selecionado(s). */
    sendFiles(): void;
    protected getFileSize(size: number): string;
    protected getThfIcon(file: ThfUploadFile): string;
    protected hasAnyFileUploading(files: Array<ThfUploadFile>): boolean;
    protected isStatusFile(status: string, file: ThfUploadFile): boolean;
    protected stopUpload(file: ThfUploadFile): void;
    protected uploadFiles(files: Array<ThfUploadFile>): void;
    private addFileNameClass;
    private cleanInputValue;
    private errorHandler;
    private removeFileNameClass;
    private setProgressStatus;
    private setUploadStatus;
    private stopUploadHandler;
    private successHandler;
    private updateModel;
    private uploadingHandler;
}
