import { EventEmitter, OnChanges } from '@angular/core';
import { ThfDateService } from '../../services/thf-date/thf-date.service';
import { ThfTableAction } from './interfaces/thf-table-action.interface';
import { ThfTableColumn } from './interfaces/thf-table-column.interface';
import { ThfTableLiterals } from './interfaces/thf-table-literals.interface';
export declare const thfTableContainer: string[];
export declare const thfTableContainerDefault = "border";
export declare const thfTableLiteralsDefault: {
    en: ThfTableLiterals;
    es: ThfTableLiterals;
    pt: ThfTableLiterals;
};
/**
 * @description
 *
 * Este componente de tabela é utilizado para exibição de listas, com diferentes tipos de dados que podem ser texto,
 * data, horário e número com formato personalizado.
 *
 * É possivel criar uma tabela com ordenação de dados, linhas com detalhes, coluna de seleção de linhas,
 * coluna com ações e também carregamento por demanda com o botão "Carregar mais resultados".
 *
 * Também existe a possibilidade de utilizar _template_ para os detalhes das linhas,
 * veja mais em **[t-table-row-template](/documentation/thf-table-row-template)**.
 *
 * Quando a largura de todas as colunas for definida, caso o tamanho total delas seja maior que a tabela, será exibido um scroll horizontal.
 *
 */
export declare abstract class ThfTableBaseComponent implements OnChanges {
    private thfDate;
    private _actions?;
    private _checkbox?;
    private _columns;
    private _container?;
    private _height?;
    private _hideDetail?;
    private _hideTextOverflow?;
    private _items;
    private _literals;
    private _loading?;
    /**
     * @description
     *
     * Lista de itens da tabela.
     * > Se falso, será inicializado como um *array* vazio.
     */
    items: Array<any>;
    /**
     * @optional
     *
     * @description
     *
     * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `ThfTableColumn`.
     * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
     * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
     *
     */
    columns: Array<ThfTableColumn>;
    /**
     * @optional
     *
     * @description
     *
     * Adiciona um contorno arredondado ao `thf-table`, as opções são:
     * - `border`: com bordas/linhas.
     * - `shadow`: com sombras.
     *
     * @default `border`
     */
    container: string;
    /**
     * @optional
     *
     * @description
     *
     * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
     * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
     * o mesmo será exibido através do [`thf-tooltip`](/documentation/thf-tooltip).
     */
    hideTextOverflow: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define a altura da tabela em *pixels* e fixa o cabeçalho.
     */
    height: number;
    /**
     * @optional
     *
     * @description
     *
     * Habilita a visualização da lista de detalhes de cada linha da coluna.
     *
     * @default `false`
     */
    hideDetail: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `thf-table`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: ThfTableLiterals = {
     *    loadMoreData: 'Buscar mais dados',
     *    loadingData: 'Processando',
     *    noColumns: 'Sem colunas',
     *    noData: 'Sem dados',
     *    seeCompleteSubtitle: 'Mostrar legenda completa',
     *    completeSubtitle: 'Todas legendas'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: ThfTableLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <thf-table
     *   [t-literals]="customLiterals">
     * </thf-table>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     */
    literals: ThfTableLiterals;
    /**
     * @optional
     *
     * @description
     *
     * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
     *
     * @default `false`
     */
    loading: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Habilita na primeira coluna a opção de selecionar linhas,
     * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
     * > Exemplo: `item.$selected` ou `item['$selected']`.
     * > Os itens filhos possuem comportamento independente do item pai.
     *
     * @default `false`
     */
    checkbox: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de ações.
     *
     * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
     * se encarrega de agrupá-las exibindo o ícone [**thf-icon-more**](/guides/icons) que listará as ações ao ser clicado.
     *
     * **A coluna de ações não será exibida quando:**
     *  - a lista conter valores inválidos ou indefinidos.
     *  - tenha uma única ação e a mesma não for visível.
     */
    actions: Array<ThfTableAction>;
    /**
     * @optional
     *
     * @description
     *
     * Habilita em todas as colunas a opção de ordenação de dados. Caso a coluna seja do tipo 'data' ou 'dateTime' a
     * mesma deve respeitar os tipos de entrada definidos para que sejam ordenadas.
     *
     * @default `false`
     */
    sort?: boolean;
    setSort: string;
    /**
     * @description
     *
     * Se verdadeiro, torna habilitado o botão "Carregar mais resultados".
     *
     * @default `false`
     */
    showMoreDisabled?: boolean;
    setShowMoreDisabled: string;
    /**
     * @description
     *
     * Habilita ou desabilita o estilo listrado da tabela (`striped`).
     * > Recomendado para tabelas com maior número de dados, facilitando a sua visualização na tabela.
     *
     * @default `false`
     */
    striped?: boolean;
    setStriped: string;
    /**
     * @description
     *
     * Esconde o *checkbox* para seleção de todas as linhas.
     *
     * > Sempre receberá *true* caso a seleção de apenas uma linha esteja ativa.
     *
     * @default `false`
     */
    hideSelectAll?: boolean;
    setHideSelectAll: string;
    /**
     * @description
     *
     * Define que somente uma linha da tabela pode ser selecionada.
     *
     * > Esta definição não se aplica aos itens filhos, os mesmos possuem comportamento independente do item pai.
     */
    singleSelect?: boolean;
    setSingleSelect: string;
    /**
     * Ação executada quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
     */
    allSelected?: EventEmitter<any>;
    /**
     * Ação executada quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
     */
    allUnselected?: EventEmitter<any>;
    /**
     * Ação executada ao selecionar uma linha do `thf-table`.
     */
    selected?: EventEmitter<any>;
    /**
     * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
     * não é visível.
     */
    showMore?: EventEmitter<any>;
    /**
     * Ação executada ao desmarcar a seleção de uma linha do `thf-table`.
     */
    unselected?: EventEmitter<any>;
    selectAll: boolean;
    sortedColumn: {
        property: ThfTableColumn;
        ascending: boolean;
    };
    constructor(thfDate: ThfDateService);
    ngOnChanges(): void;
    abstract calculateHeightTableContainer(height: any): any;
    abstract calculateWidthHeaders(): any;
    protected abstract showContainer(container: any): any;
    selectAllRows(): void;
    selectRow(row: any): void;
    selectDetailRow(row: any): void;
    getMainColumns(): ThfTableColumn[];
    getColumnMasterDetail(): ThfTableColumn;
    getClassColor(row: any, column: any): string;
    getColumnColor(row: any, column: any): any;
    getSubtitleColumns(): ThfTableColumn[];
    getIconColumns(): ThfTableColumn[];
    getNameColumnDetail(): string;
    /**
     * Retorna as linhas do `thf-table` que estão selecionadas.
     */
    getSelectedRows(): any[];
    /**
     * Retorna as linhas do `thf-table` que não estão selecionadas.
     */
    getUnselectedRows(): any[];
    hasColumns(): boolean;
    hasItems(): boolean;
    toggleRowAction(row: any): void;
    sortColumn(column: ThfTableColumn): void;
    sortArray(column: ThfTableColumn, ascending: boolean): void;
    onShowMore(): void;
    protected getDefaultColumns(item: any): {
        label: string;
        property: string;
    }[];
    private configAfterSelectRow;
    private emitSelectAllEvents;
    private emitSelectEvents;
    private isEverySelected;
    private setColumnLink;
    private unselectOtherRows;
}
