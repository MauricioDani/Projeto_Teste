import { ComponentRef } from '@angular/core';
import { ThfNotification } from './thf-notification.interface';
import { ThfToaster } from './thf-toaster/thf-toaster.interface';
/**
 * @description
 *
 * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
 *
 * - success,
 * - warning,
 * - error,
 * - information.
 *
 * Cada um destes métodos recebe como parâmetro o objeto "ThfNotification" que contém os dados da mensagem e o
 * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
 *
 * Estas notificações serão exibidas durante 10 segundos, após este tempo a mesma é removida automaticamente.
 */
export declare abstract class ThfNotificationBaseService {
    stackTop: Array<ComponentRef<any>>;
    stackBottom: Array<ComponentRef<any>>;
    protected durationToaster: number;
    /**
     * Emite uma notificação de sucesso.
     *
     * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     */
    success(notification: ThfNotification | string): void;
    /**
     * Emite uma notificação de atenção.
     *
     * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    warning(notification: ThfNotification | string): void;
    /**
     * Emite uma notificação de erro.
     *
     * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    error(notification: ThfNotification | string): void;
    /**
     * Emite uma notificação de informação.
     *
     * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    information(notification: ThfNotification | string): void;
    /**
     * @docsPrivate
     *
     * Cria um objeto do tipo ThfToaster de acordo o tipo.
     *
     * @param notification {ThfNotification | string} Objeto ThfNotification com os dados da notificação
     */
    private buildToaster;
    /**
     * @docsPrivate
     *
     * Método responsável por criar o thf-toaster.
     *
     * @param toaster {ThfToaster} Objeto contendo as informações do toaster.
     */
    abstract createToaster(toaster: ThfToaster): void;
    /**
     * @docsPrivate
     *
     * Método responsável por destruir o thf-toaster.
     *
     * @param toaster {ComponentRef} Número da posição ou instancia do toaster a ser destruído.
     * @param orientation {ThfToasterOrientation} Orientação do ThfToaster: Top ou Bottom
     */
    abstract destroyToaster(toaster: ComponentRef<any>): void;
}
