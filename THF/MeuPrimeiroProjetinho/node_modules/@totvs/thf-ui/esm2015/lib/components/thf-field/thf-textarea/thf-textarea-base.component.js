/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, convertToInt } from '../../../utils/util';
import { maxlengthFailed, minlengthFailed, requiredFailed } from '../validators';
/**
 * \@description
 *
 * Este é um componente de entrada de dados que possibilita o preechimento com múltiplas linhas.
 * É recomendado para observações, detalhamentos e outras situações onde o usuário deva preencher com um texto.
 *
 * Importante:
 *
 * - A propriedade `name` é obrigatória para que o formulário e o `model` funcionem corretamente. Do contrário, ocorrerá um erro de
 * _Angular_, onde será necessário informar o atributo `name` ou o atributo `[ngModelOptions]="{standalone: true}"`, por exemplo:
 *
 * ```
 * <thf-textarea
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </thf-textarea>
 * ```
 * @abstract
 */
export class ThfTextareaBaseComponent {
    constructor() {
        this._disabled = false;
        this._focus = false;
        this._readonly = false;
        this._required = false;
        this._rows = 3;
        this.onChangePropagate = null;
        // tslint:disable-next-line
        this.onTouched = null;
        /**
         * Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido.
         */
        this.placeholder = '';
        /**
         * Evento disparado ao sair do campo.
         */
        this.blur = new EventEmitter();
        /**
         * Evento disparado ao entrar do campo.
         */
        this.enter = new EventEmitter();
        /**
         * Evento disparado ao alterar valor e deixar o campo.
         */
        this.change = new EventEmitter();
        /**
         * Evento disparado ao alterar valor do model.
         */
        this.changeModel = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo será desabilitado.
     *
     * \@default `false`
     * @param {?} disabled
     * @return {?}
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo será somente leitura.
     *
     * \@default `false`
     * @param {?} readonly
     * @return {?}
     */
    set readonly(readonly) {
        this._readonly = convertToBoolean(readonly);
    }
    /**
     * @return {?}
     */
    get readonly() {
        return this._readonly;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo será obrigatório.
     *
     * > Esta propriedade é desconsiderada quando o _input_ está desabilitado `(t-disabled)`.
     *
     * \@default `false`
     * @param {?} required
     * @return {?}
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel();
    }
    /**
     * @return {?}
     */
    get required() {
        return this._required;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo iniciará com foco.
     *
     * \@default `false`
     * @param {?} focus
     * @return {?}
     */
    set focus(focus) {
        this._focus = convertToBoolean(focus);
    }
    /**
     * @return {?}
     */
    get focus() {
        return this._focus;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica a quantidade mínima de caracteres que o campo aceita.
     * @param {?} minlength
     * @return {?}
     */
    set minlength(minlength) {
        this._minlength = convertToInt(minlength);
        this.validateModel();
    }
    /**
     * @return {?}
     */
    get minlength() {
        return this._minlength;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica a quantidade máxima de caracteres que o campo aceita.
     * @param {?} maxlength
     * @return {?}
     */
    set maxlength(maxlength) {
        this._maxlength = convertToInt(maxlength);
        this.validateModel();
    }
    /**
     * @return {?}
     */
    get maxlength() {
        return this._maxlength;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica a quantidade de linhas que serão exibidas.
     *
     * \@default `3`
     * @param {?} value
     * @return {?}
     */
    set rows(value) {
        this._rows = isNaN(parseInt((/** @type {?} */ (value)), 10)) || value < 3 ? 3 : parseInt((/** @type {?} */ (value)), 10);
    }
    /**
     * @return {?}
     */
    get rows() {
        return this._rows;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    callOnChange(value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
        this.controlChangeModelEmitter(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    controlChangeModelEmitter(value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    }
    // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
    // usadas para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    /**
     * @param {?} func
     * @return {?}
     */
    registerOnTouched(func) {
        this.onTouched = func;
    }
    /**
     * @param {?} func
     * @return {?}
     */
    registerOnValidatorChange(func) {
        this.validatorChange = func;
    }
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return { required: {
                    valid: false,
                } };
        }
        if (minlengthFailed(this.minlength, abstractControl.value)) {
            return { minlength: {
                    valid: false,
                } };
        }
        if (maxlengthFailed(this.maxlength, abstractControl.value)) {
            return { maxlength: {
                    valid: false,
                } };
        }
    }
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.writeValueModel(value);
    }
    /**
     * @protected
     * @return {?}
     */
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
}
ThfTextareaBaseComponent.propDecorators = {
    label: [{ type: Input, args: ['t-label',] }],
    help: [{ type: Input, args: ['t-help',] }],
    placeholder: [{ type: Input, args: ['t-placeholder',] }],
    name: [{ type: Input, args: ['name',] }],
    disabled: [{ type: Input, args: ['t-disabled',] }],
    optional: [{ type: Input, args: ['t-optional',] }],
    readonly: [{ type: Input, args: ['t-readonly',] }],
    required: [{ type: Input, args: ['t-required',] }],
    focus: [{ type: Input, args: ['t-focus',] }],
    minlength: [{ type: Input, args: ['t-minlength',] }],
    maxlength: [{ type: Input, args: ['t-maxlength',] }],
    rows: [{ type: Input, args: ['t-rows',] }],
    blur: [{ type: Output, args: ['t-blur',] }],
    enter: [{ type: Output, args: ['t-enter',] }],
    change: [{ type: Output, args: ['t-change',] }],
    changeModel: [{ type: Output, args: ['t-change-model',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTextareaBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfTextareaBaseComponent.prototype._focus;
    /**
     * @type {?}
     * @private
     */
    ThfTextareaBaseComponent.prototype._maxlength;
    /**
     * @type {?}
     * @private
     */
    ThfTextareaBaseComponent.prototype._minlength;
    /**
     * @type {?}
     * @private
     */
    ThfTextareaBaseComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    ThfTextareaBaseComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    ThfTextareaBaseComponent.prototype._rows;
    /**
     * @type {?}
     * @private
     */
    ThfTextareaBaseComponent.prototype.modelLastUpdate;
    /**
     * @type {?}
     * @private
     */
    ThfTextareaBaseComponent.prototype.onChangePropagate;
    /**
     * @type {?}
     * @private
     */
    ThfTextareaBaseComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    ThfTextareaBaseComponent.prototype.validatorChange;
    /**
     * Label do campo.
     * @type {?}
     */
    ThfTextareaBaseComponent.prototype.label;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    ThfTextareaBaseComponent.prototype.help;
    /**
     * Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido.
     * @type {?}
     */
    ThfTextareaBaseComponent.prototype.placeholder;
    /**
     * Nome e Id do componente.
     * @type {?}
     */
    ThfTextareaBaseComponent.prototype.name;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `t-required`;
     * - Não possuir `t-help` e/ou `t-label`.
     *
     * \@default `false`
     * @type {?}
     */
    ThfTextareaBaseComponent.prototype.optional;
    /**
     * Evento disparado ao sair do campo.
     * @type {?}
     */
    ThfTextareaBaseComponent.prototype.blur;
    /**
     * Evento disparado ao entrar do campo.
     * @type {?}
     */
    ThfTextareaBaseComponent.prototype.enter;
    /**
     * Evento disparado ao alterar valor e deixar o campo.
     * @type {?}
     */
    ThfTextareaBaseComponent.prototype.change;
    /**
     * Evento disparado ao alterar valor do model.
     * @type {?}
     */
    ThfTextareaBaseComponent.prototype.changeModel;
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfTextareaBaseComponent.prototype.writeValueModel = function (value) { };
}
//# sourceMappingURL=data:application/json;base64,