/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, forwardRef, IterableDiffers, Renderer2, ViewChild } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map, tap } from 'rxjs/operators';
import { removeDuplicatedOptions } from '../../../utils/util';
import { ThfControlPositionService } from '../../../services/thf-control-position/thf-control-position.service';
import { ThfKeyCodeEnum } from './../../../enums/thf-key-code.enum';
import { ThfComboBaseComponent } from './thf-combo-base.component';
import { ThfComboFilterMode } from './thf-combo-filter-mode.enum';
import { ThfComboFilterService } from './thf-combo-filter.service';
/** @type {?} */
const thfComboContainerOffset = 8;
/** @type {?} */
const thfComboContainerPositionDefault = 'bottom';
/**
 * \@docsExtends ThfComboBaseComponent
 *
 * \@description
 * Utilizando thf-combo com serviço, é possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente
 * faça uma requisição à URL informada passando o valor digitado no campo. Se encontrado o valor, então o mesmo será selecionado, caso
 * não seja encontrado, então a lista de itens voltará para o estado inicial.
 *
 * \@example
 *
 * <example name="thf-combo-basic" title="Totvs Combo Basic">
 *   <file name="sample-thf-combo-basic/sample-thf-combo-basic.component.html"> </file>
 *   <file name="sample-thf-combo-basic/sample-thf-combo-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-labs" title="Totvs Combo Labs">
 *   <file name="sample-thf-combo-labs/sample-thf-combo-labs.component.html"> </file>
 *   <file name="sample-thf-combo-labs/sample-thf-combo-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-scheduling" title="Totvs Combo - Scheduling">
 *   <file name="sample-thf-combo-scheduling/sample-thf-combo-scheduling.component.html"> </file>
 *   <file name="sample-thf-combo-scheduling/sample-thf-combo-scheduling.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-transfer" title="Totvs Combo - Banking Transfer">
 *   <file name="sample-thf-combo-transfer/sample-thf-combo-transfer.component.html"> </file>
 *   <file name="sample-thf-combo-transfer/sample-thf-combo-transfer.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-heroes" title="Totvs Combo - Heroes">
 *   <file name="sample-thf-combo-heroes/sample-thf-combo-heroes.component.html"> </file>
 *   <file name="sample-thf-combo-heroes/sample-thf-combo-heroes.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-heroes-reactive-form" title="Totvs Combo - Heroes Reactive Form">
 *   <file name="sample-thf-combo-heroes-reactive-form/sample-thf-combo-heroes-reactive-form.component.html"> </file>
 *   <file name="sample-thf-combo-heroes-reactive-form/sample-thf-combo-heroes-reactive-form.component.ts"> </file>
 * </example>
 *
 * <example name="thf-combo-hotels" title="Totvs Combo - Booking Hotel">
 *   <file name="sample-thf-combo-hotels/sample-thf-combo-hotels.component.html"> </file>
 *   <file name="sample-thf-combo-hotels/sample-thf-combo-hotels.component.ts"> </file>
 *   <file name="sample-thf-combo-hotels/sample-thf-combo-hotels.service.ts"> </file>
 * </example>
 */
export class ThfComboComponent extends ThfComboBaseComponent {
    /**
     * @param {?} element
     * @param {?} differs
     * @param {?} defaultService
     * @param {?} renderer
     * @param {?} changeDetector
     * @param {?} controlPosition
     * @param {?} sanitized
     */
    constructor(element, differs, defaultService, renderer, changeDetector, controlPosition, sanitized) {
        super();
        this.element = element;
        this.differs = differs;
        this.defaultService = defaultService;
        this.renderer = renderer;
        this.changeDetector = changeDetector;
        this.controlPosition = controlPosition;
        this.sanitized = sanitized;
        this._isServerSearching = false;
        this.comboIcon = 'thf-icon-arrow-down';
        this.comboOpen = false;
        this.isProcessingGetObjectByValue = false;
        this.scrollTop = 0;
        this.shouldMarkLetters = true;
        this.onScroll = (/**
         * @return {?}
         */
        () => {
            this.adjustContainerPosition();
        });
        this.differ = differs.find([]).create(null);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set isServerSearching(value) {
        if (value) {
            this._isServerSearching = value;
            this.changeDetector.detectChanges();
            this.setContainerPosition();
            this.initializeListeners();
        }
        else {
            this._isServerSearching = value;
            this.removeListeners();
        }
    }
    /**
     * @return {?}
     */
    get isServerSearching() {
        return this._isServerSearching;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        /** @type {?} */
        const change = this.differ.diff(this.options);
        if (change) {
            this.validAndSortOptions();
            removeDuplicatedOptions(this.options);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListeners();
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    onKeyDown(event) {
        /** @type {?} */
        const key = event.keyCode;
        /** @type {?} */
        const inputValue = event.target.value;
        // busca um registro quando acionar o tab
        if (this.service && key === ThfKeyCodeEnum.tab && inputValue) {
            this.controlComboVisibility(false);
            return this.getObjectByValue(inputValue);
        }
        // Teclas "up" e "down"
        if (key === ThfKeyCodeEnum.arrowUp || key === ThfKeyCodeEnum.arrowDown) {
            event.preventDefault();
            if (this.comboOpen) {
                if (key === ThfKeyCodeEnum.arrowUp) {
                    this.selectPreviousOption();
                }
                else {
                    this.selectNextOption();
                }
            }
            this.controlComboVisibility(true);
            this.isFiltering = this.changeOnEnter ? this.isFiltering : false;
            this.shouldMarkLetters = this.changeOnEnter ? this.shouldMarkLetters : false;
            return;
        }
        // Teclas "tab" ou "esc"
        if (key === ThfKeyCodeEnum.tab || key === ThfKeyCodeEnum.esc) {
            if (key === ThfKeyCodeEnum.esc && this.comboOpen) {
                event.preventDefault();
                event.stopPropagation();
            }
            this.controlComboVisibility(false);
            this.verifyValidOption();
            if (!this.service) {
                // caso for changeOnEnter e nao ter selectedValue deve limpar o selectedView para reinicia-lo.
                this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
                this.updateComboList();
            }
            return;
        }
        // Tecla "enter"
        if (key === ThfKeyCodeEnum.enter && this.selectedView && this.comboOpen) {
            /** @type {?} */
            const isUpdateModel = (this.selectedView.value !== this.selectedValue) || (inputValue !== this.selectedView.label);
            this.controlComboVisibility(false);
            this.updateSelectedValue(this.selectedView, isUpdateModel);
            this.isFiltering = false;
            this.updateComboList();
            return;
        }
        if (key === ThfKeyCodeEnum.enter) {
            this.controlComboVisibility(true);
        }
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    onKeyUp(event) {
        /** @type {?} */
        const key = event.keyCode || event.which;
        /** @type {?} */
        const inputValue = event.target.value;
        /** @type {?} */
        const isValidKey = (key !== ThfKeyCodeEnum.arrowUp && key !== ThfKeyCodeEnum.arrowDown && key !== ThfKeyCodeEnum.enter);
        if (isValidKey) {
            if (inputValue) {
                if (!this.service && this.previousSearchValue !== inputValue) {
                    this.shouldMarkLetters = true;
                    this.isFiltering = true;
                    this.searchForLabel(inputValue, this.options, this.filterMode);
                }
            }
            else {
                // quando apagar rapido o campo e conter serviço, valor, não disparava o keyup observable
                // necessario este tratamento para retornar a lista 'default'.
                /** @type {?} */
                const useDefaultOptionsService = this.service && this.selectedValue && this.selectedOption.label === this.previousSearchValue;
                this.updateSelectedValue(null);
                if (!this.service) {
                    this.updateComboList();
                }
                else if (useDefaultOptionsService) {
                    this.updateComboList([...this.cacheOptions]);
                }
                this.isFiltering = false;
            }
            // caso o valor pesquisado for diferente do anterior deve abrir o combo
            if (this.previousSearchValue !== inputValue) {
                this.changeDetector.detectChanges();
                this.controlComboVisibility(true);
            }
        }
        this.previousSearchValue = inputValue;
    }
    /**
     * @return {?}
     */
    initInputObservable() {
        if (this.service) {
            /** @type {?} */
            const keyupObservable = fromEvent(this.inputElement.nativeElement, 'keyup')
                .pipe(filter((/**
             * @param {?} e
             * @return {?}
             */
            (e) => this.isValidCharacterToSearch(e.keyCode))), map((/**
             * @param {?} e
             * @return {?}
             */
            (e) => e.currentTarget.value)), distinctUntilChanged(), tap((/**
             * @return {?}
             */
            () => {
                this.shouldMarkLetters = false;
            })), debounceTime(this.debounceTime));
            this.keyupSubscribe = keyupObservable.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                if (value.length >= this.filterMinlength || !value) {
                    this.controlApplyFilter(value);
                }
            }));
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    controlApplyFilter(value) {
        if (!this.isProcessingGetObjectByValue && (!this.selectedOption || value !== this.selectedOption.label)) {
            this.applyFilter(value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    applyFilter(value) {
        this.controlComboVisibility(false);
        this.isServerSearching = true;
        /** @type {?} */
        const param = { property: this.fieldLabel, value };
        this.filterSubscription = this.service.getFilteredData(param, this.filterParams)
            .subscribe((/**
         * @param {?} items
         * @return {?}
         */
        items => this.setOptionsByApplyFilter(value, items)));
    }
    /**
     * @param {?} value
     * @param {?} items
     * @return {?}
     */
    setOptionsByApplyFilter(value, items) {
        this.shouldMarkLetters = true;
        this.isServerSearching = false;
        this.options = items;
        this.searchForLabel(value, items, this.filterMode);
        this.changeDetector.detectChanges();
        this.controlComboVisibility(true);
        if (this.isFirstFilter) {
            this.isFirstFilter = !this.isFirstFilter;
            this.cacheOptions = this.options;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getObjectByValue(value) {
        if (!this.selectedValue) {
            this.isProcessingGetObjectByValue = true;
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams)
                .subscribe((/**
             * @param {?} item
             * @return {?}
             */
            item => this.updateOptionByFilteredValue(item)));
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    updateOptionByFilteredValue(item) {
        if (item) {
            this.options = [item];
            this.onOptionClick(item);
        }
        else {
            this.updateSelectedValue(null);
        }
        setTimeout((/**
         * @return {?}
         */
        () => { this.isProcessingGetObjectByValue = false; }), this.debounceTime);
    }
    /**
     * @return {?}
     */
    selectPreviousOption() {
        /** @type {?} */
        const currentViewValue = this.selectedView && this.selectedView.value;
        if (currentViewValue) {
            /** @type {?} */
            const nextOption = this.getNextOption(currentViewValue, this.visibleOptions, true);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            /** @type {?} */
            const visibleOption = this.visibleOptions[this.visibleOptions.length - 1];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    }
    /**
     * @return {?}
     */
    selectNextOption() {
        /** @type {?} */
        const currentViewValue = this.selectedView && this.selectedView.value;
        if (currentViewValue) {
            /** @type {?} */
            const nextOption = this.getNextOption(currentViewValue, this.visibleOptions);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            /** @type {?} */
            const index = this.changeOnEnter ? 1 : 0;
            /** @type {?} */
            const visibleOption = this.visibleOptions[index];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    }
    /**
     * @return {?}
     */
    toggleComboVisibility() {
        if (this.disabled) {
            return;
        }
        if (this.service && !this.disabledInitFilter) {
            this.applyFilterInFirstClick();
        }
        this.controlComboVisibility(!this.comboOpen);
    }
    /**
     * @return {?}
     */
    applyFilterInFirstClick() {
        if (this.isFirstFilter && !this.selectedValue) {
            this.applyFilter('');
        }
    }
    /**
     * @param {?} toOpen
     * @return {?}
     */
    controlComboVisibility(toOpen) {
        toOpen ? this.open() : this.close();
    }
    /**
     * @param {?} option
     * @return {?}
     */
    onOptionClick(option) {
        /** @type {?} */
        const inputValue = this.getInputValue();
        /** @type {?} */
        const isUpdateModel = (option.value !== this.selectedValue) || !!(this.selectedView && inputValue !== this.selectedView.label);
        this.updateSelectedValue(option, isUpdateModel);
        this.controlComboVisibility(false);
        this.updateComboList([Object.assign({}, this.selectedView)]);
        this.previousSearchValue = this.selectedView.label;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    scrollTo(index) {
        /** @type {?} */
        const scrollTop = (index <= 2) ? 0 : (index * 44) - 88;
        this.setScrollTop(scrollTop);
    }
    /**
     * @return {?}
     */
    getInputValue() {
        return this.inputElement.nativeElement.value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setInputValue(value) {
        this.inputElement.nativeElement.value = value;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    wasClickedOnToggle(event) {
        if (this.comboOpen &&
            !this.inputElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            (!this.contentElement || !this.contentElement.nativeElement.contains(event.target))) {
            // Esconde Content do Combo quando for clicado fora
            this.controlComboVisibility(false);
            this.verifyValidOption();
            // caso for changeOnEnter deve limpar o selectedView para reinicia-lo
            this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
            this.updateComboList();
        }
        else {
            if (this.service && !this.getInputValue() && !this.isFirstFilter) {
                this.applyFilter('');
            }
        }
    }
    /**
     * @param {?} label
     * @return {?}
     */
    getLabelFormatted(label) {
        /** @type {?} */
        let format = label;
        if (this.isFiltering ||
            (this.service && this.getInputValue() && !this.compareObjects(this.cacheOptions, this.visibleOptions) && this.shouldMarkLetters)) {
            /** @type {?} */
            const labelInput = this.getInputValue().toString().toLowerCase();
            /** @type {?} */
            const labelLowerCase = label.toLowerCase();
            /** @type {?} */
            const openTagBold = '<span class="thf-font-text-large-bold">';
            /** @type {?} */
            const closeTagBold = '</span>';
            /** @type {?} */
            let startString;
            /** @type {?} */
            let middleString;
            /** @type {?} */
            let endString;
            switch (this.filterMode) {
                case ThfComboFilterMode.startsWith:
                case ThfComboFilterMode.contains:
                    startString = label.substring(0, labelLowerCase.indexOf(labelInput));
                    middleString = label.substring(labelLowerCase.indexOf(labelInput), labelLowerCase.indexOf(labelInput) + labelInput.length);
                    endString = label.substring(labelLowerCase.indexOf(labelInput) + labelInput.length);
                    format = startString + openTagBold + middleString + closeTagBold + endString;
                    break;
                case ThfComboFilterMode.endsWith:
                    startString = label.substring(0, labelLowerCase.lastIndexOf(labelInput));
                    middleString = label.substring(labelLowerCase.lastIndexOf(labelInput));
                    format = startString + openTagBold + middleString + closeTagBold;
                    break;
            }
        }
        return this.safeHtml(format);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    safeHtml(value) {
        return this.sanitized.bypassSecurityTrustHtml(value);
    }
    /**
     * @param {?} keyCode
     * @return {?}
     */
    isValidCharacterToSearch(keyCode) {
        return (keyCode !== 9 && // tab
            keyCode !== 13 && // entet
            keyCode !== 16 && // shift
            keyCode !== 17 && // ctrl
            keyCode !== 18 && // alt
            keyCode !== 20 && // capslock
            keyCode !== 27 && // esc
            keyCode !== 37 && // seta
            keyCode !== 38 && // seta
            keyCode !== 39 && // seta
            keyCode !== 40 && // seta
            keyCode !== 93); // windows menu
    }
    /**
     * @param {?} value
     * @return {?}
     */
    searchOnEnter(value) {
        if (this.service && !this.selectedView && value.length >= this.filterMinlength) {
            this.controlApplyFilter(value);
        }
    }
    /**
     * @private
     * @return {?}
     */
    adjustContainerPosition() {
        this.controlPosition.adjustPosition(thfComboContainerPositionDefault);
    }
    /**
     * @private
     * @return {?}
     */
    close() {
        this.comboOpen = false;
        this.changeDetector.detectChanges();
        this.comboIcon = 'thf-icon-arrow-down';
        this.removeListeners();
        this.isFiltering = false;
    }
    /**
     * @private
     * @return {?}
     */
    initializeListeners() {
        this.removeListeners();
        this.clickoutListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.wasClickedOnToggle(event);
        }));
        this.eventResizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        () => {
            // timeout necessario pois a animação do thf-menu impacta no ajuste da posição do container.
            setTimeout((/**
             * @return {?}
             */
            () => this.adjustContainerPosition()), 250);
        }));
        window.addEventListener('scroll', this.onScroll, true);
    }
    /**
     * @private
     * @return {?}
     */
    open() {
        this.comboOpen = true;
        this.changeDetector.detectChanges();
        this.comboIcon = 'thf-icon-arrow-up';
        this.initializeListeners();
        this.inputElement.nativeElement.focus();
        this.scrollTo(this.getIndexSelectedView());
        this.setContainerPosition();
    }
    /**
     * @private
     * @return {?}
     */
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    /**
     * @private
     * @return {?}
     */
    setContainerPosition() {
        this.controlPosition.setElements(this.containerElement.nativeElement, thfComboContainerOffset, this.inputElement, ['top', 'bottom'], true);
        this.adjustContainerPosition();
    }
    /**
     * @private
     * @param {?} scrollTop
     * @return {?}
     */
    setScrollTop(scrollTop) {
        if (this.contentElement) {
            this.contentElement.nativeElement.scrollTop = scrollTop;
        }
    }
}
ThfComboComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-combo',
                template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n    <div *ngIf=\"icon\" class=\"thf-field-icon-container-left\">\n      <span class=\"thf-icon thf-field-icon {{icon}}\" [class.thf-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inputElement\n      class=\"thf-input thf-combo-input\"\n      [class.thf-input-icon-left]=\"icon\"\n      autocomplete=\"off\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      (click)=\"toggleComboVisibility()\"\n      (keyup)=\"onKeyUp($event)\"\n      (keyup.enter)=\"searchOnEnter($event.target.value)\"\n      (keydown)=\"onKeyDown($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <span #iconArrow\n        class=\"thf-icon thf-field-icon {{ comboIcon }}\"\n        [class.thf-field-icon-disabled]=\"disabled\"\n        [class.thf-field-icon]=\"!disabled\"\n        (click)=\"toggleComboVisibility()\">\n      </span>\n    </div>\n  </div>\n\n  <div #containerElement class=\"thf-combo-container\" [hidden]=\"!comboOpen && !isServerSearching\">\n\n    <ng-container *ngIf=\"isServerSearching; then loadingTemplate; else optionsTemplate\">\n    </ng-container>\n\n  </div>\n\n  <thf-field-container-bottom></thf-field-container-bottom>\n\n</thf-field-container>\n\n<ng-template #loadingTemplate>\n  <div class=\"thf-combo-container-loading\">\n    <thf-loading></thf-loading>\n  </div>\n</ng-template>\n\n<ng-template #optionsTemplate>\n  <ng-container *ngIf=\"visibleOptions.length; then visibleOptionsTemplate ; else noDataTemplate\">\n  </ng-container>\n</ng-template>\n\n<ng-template #visibleOptionsTemplate>\n  <ul #contentElement class=\"thf-combo-container-content\">\n    <li *ngFor=\"let option of visibleOptions\"\n      [class.thf-combo-item-selected]=\"compareObjects(selectedView, option)\"\n      (click)=\"onOptionClick(option)\">\n      <a class=\"thf-combo-item\" [innerHTML]=\"getLabelFormatted(option?.label)\"></a>\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template #noDataTemplate>\n  <div class=\"thf-combo-container-no-data\">\n    <div class=\"thf-combo-no-data thf-text-center\">\n      <span>\n        {{ literals.noData }}\n      </span>\n    </div>\n  </div>\n</ng-template>\n",
                providers: [
                    ThfComboFilterService,
                    ThfControlPositionService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfComboComponent)),
                        multi: true,
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfComboComponent)),
                        multi: true,
                    }
                ]
            }] }
];
/** @nocollapse */
ThfComboComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: IterableDiffers },
    { type: ThfComboFilterService },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: ThfControlPositionService },
    { type: DomSanitizer }
];
ThfComboComponent.propDecorators = {
    containerElement: [{ type: ViewChild, args: ['containerElement', { read: ElementRef, static: false },] }],
    contentElement: [{ type: ViewChild, args: ['contentElement', { read: ElementRef, static: false },] }],
    iconElement: [{ type: ViewChild, args: ['iconArrow', { read: ElementRef, static: true },] }],
    inputElement: [{ type: ViewChild, args: ['inputElement', { read: ElementRef, static: true },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype._isServerSearching;
    /** @type {?} */
    ThfComboComponent.prototype.comboIcon;
    /** @type {?} */
    ThfComboComponent.prototype.comboOpen;
    /** @type {?} */
    ThfComboComponent.prototype.differ;
    /** @type {?} */
    ThfComboComponent.prototype.isProcessingGetObjectByValue;
    /** @type {?} */
    ThfComboComponent.prototype.scrollTop;
    /** @type {?} */
    ThfComboComponent.prototype.service;
    /** @type {?} */
    ThfComboComponent.prototype.shouldMarkLetters;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.clickoutListener;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.eventResizeListener;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.filterSubscription;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.getSubscription;
    /** @type {?} */
    ThfComboComponent.prototype.containerElement;
    /** @type {?} */
    ThfComboComponent.prototype.contentElement;
    /** @type {?} */
    ThfComboComponent.prototype.iconElement;
    /** @type {?} */
    ThfComboComponent.prototype.inputElement;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.onScroll;
    /** @type {?} */
    ThfComboComponent.prototype.element;
    /** @type {?} */
    ThfComboComponent.prototype.differs;
    /** @type {?} */
    ThfComboComponent.prototype.defaultService;
    /** @type {?} */
    ThfComboComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.controlPosition;
    /**
     * @type {?}
     * @private
     */
    ThfComboComponent.prototype.sanitized;
}
//# sourceMappingURL=data:application/json;base64,