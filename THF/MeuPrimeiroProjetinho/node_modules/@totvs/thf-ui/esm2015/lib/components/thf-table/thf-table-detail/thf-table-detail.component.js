/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { DecimalPipe } from '@angular/common';
import { capitalizeFirstLetter, isTypeof } from '../../../utils/util';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por apresentar o detalhe de cada linha da tabela.
 */
export class ThfTableDetailComponent {
    /**
     * @param {?} decimalPipe
     */
    constructor(decimalPipe) {
        this.decimalPipe = decimalPipe;
        /**
         * Define se a tabela possui a opção de `checkbox` habilitada.
         */
        this.hasCheckbox = false;
        /**
         * Ação executada ao selecionar ou desmarcar a seleção de uma linha de detalhe do `thf-table`.
         */
        this.selectRow = new EventEmitter();
    }
    /**
     * Configuração da linha de detalhes.
     * @param {?} value
     * @return {?}
     */
    set detail(value) {
        this._detail = this.returnThfTableDetailObject(value);
    }
    /**
     * @return {?}
     */
    get detail() {
        return this._detail;
    }
    /**
     * @return {?}
     */
    get detailColumns() {
        return this.detail && this.detail.columns || [];
    }
    /**
     * @return {?}
     */
    get typeHeaderInline() {
        return this.detail && !this.detail['typeHeader'] || this.detail['typeHeader'] === 'inline';
    }
    /**
     * @return {?}
     */
    get typeHeaderTop() {
        return this.detail && this.detail['typeHeader'] === 'top';
    }
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    formatNumberDetail(value, format) {
        if (!format) {
            return value;
        }
        return this.decimalPipe.transform(value, format);
    }
    /**
     * @param {?} detail
     * @return {?}
     */
    getColumnTitleLabel(detail) {
        return detail.label || capitalizeFirstLetter(detail.property);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onSelectRow(item) {
        item.$selected = !item.$selected;
        this.selectRow.emit(item);
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    returnThfTableDetailObject(value) {
        if (value && isTypeof(value, 'object')) {
            if (value.columns) {
                value.columns.forEach((/**
                 * @param {?} column
                 * @return {?}
                 */
                column => column.property = column.property || column.column));
            }
            if (Array.isArray(value)) {
                return { columns: value };
            }
            if (value.columns) {
                return value;
            }
        }
    }
}
ThfTableDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-table-detail',
                template: "<table class=\"thf-table-master-detail\">\n  <thead *ngIf=\"typeHeaderTop\">\n    <tr>\n      <th class=\"thf-table-header thf-table-column-checkbox\" *ngIf=\"hasCheckbox\"></th>\n      <th class=\"thf-table-header thf-table-header-column thf-table-header-master-detail\"></th>\n      <th class=\"thf-table-header thf-table-header-ellipsis\" *ngFor=\"let detail of detail.columns\">\n        {{ getColumnTitleLabel(detail) }}\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class=\"thf-table-detail-row\"\n        [class.thf-table-row-active]=\"item.$selected && hasCheckbox\"\n        *ngFor=\"let item of items\">\n\n      <ng-container *ngIf=\"hasCheckbox; else masterDetailSpace\">\n\n        <td class=\"thf-table-column-master-detail-space-checkbox\"></td>\n        <td class=\"thf-table-column thf-table-column-checkbox\">\n          <input\n            class=\"thf-table-checkbox\"\n            type=\"checkbox\"\n            [class.thf-table-checkbox-checked]=\"item.$selected\">\n          <label class=\"thf-table-checkbox-label thf-clickable\" (click)=\"onSelectRow(item)\">\n          </label>\n        </td>\n\n      </ng-container>\n\n      <ng-template #masterDetailSpace>\n        <td class=\"thf-table-column-master-detail-space\"></td>\n      </ng-template>\n\n      <td class=\"thf-table-column-master-detail thf-table-master-detail-label\"\n        (click)=\"hasCheckbox ? onSelectRow(item) : 'javascript:;'\"\n        *ngFor=\"let detail of detailColumns\">\n        <strong *ngIf=\"typeHeaderInline\"> {{ getColumnTitleLabel(detail) }}: </strong>\n\n        <ng-container [ngSwitch]=\"detail.type\">\n          <span *ngSwitchCase=\"'currency'\">{{ item[detail.property] | currency: detail.format:'symbol':'1.2-2' }}</span>\n          <span *ngSwitchCase=\"'date'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy' }}</span>\n          <span *ngSwitchCase=\"'time'\">{{ item[detail.property] | thf_time: detail.format || 'HH:mm:ss.ffffff' }}</span>\n          <span *ngSwitchCase=\"'dateTime'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy HH:mm:ss' }}</span>\n          <span *ngSwitchCase=\"'number'\">{{ formatNumberDetail(item[detail.property], detail.format) }}</span>\n          <span *ngSwitchDefault>{{ item[detail.property] }}</span>\n        </ng-container>\n      </td>\n    </tr>\n  </tbody>\n</table>\n"
            }] }
];
/** @nocollapse */
ThfTableDetailComponent.ctorParameters = () => [
    { type: DecimalPipe }
];
ThfTableDetailComponent.propDecorators = {
    hasCheckbox: [{ type: Input, args: ['t-checkbox',] }],
    detail: [{ type: Input, args: ['t-detail',] }],
    items: [{ type: Input, args: ['t-items',] }],
    selectRow: [{ type: Output, args: ['t-select-row',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTableDetailComponent.prototype._detail;
    /**
     * Define se a tabela possui a opção de `checkbox` habilitada.
     * @type {?}
     */
    ThfTableDetailComponent.prototype.hasCheckbox;
    /**
     * Lista de itens do _detail_ da tabela.
     * @type {?}
     */
    ThfTableDetailComponent.prototype.items;
    /**
     * Ação executada ao selecionar ou desmarcar a seleção de uma linha de detalhe do `thf-table`.
     * @type {?}
     */
    ThfTableDetailComponent.prototype.selectRow;
    /**
     * @type {?}
     * @private
     */
    ThfTableDetailComponent.prototype.decimalPipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXRhYmxlLWRldGFpbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLXRhYmxlL3RoZi10YWJsZS1kZXRhaWwvdGhmLXRhYmxlLWRldGFpbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7Ozs7Ozs7QUFnQnRFLE1BQU0sT0FBTyx1QkFBdUI7Ozs7SUE4QmxDLFlBQW9CLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhOzs7O1FBdkJ2QixnQkFBVyxHQUFhLEtBQUssQ0FBQzs7OztRQXFCM0IsY0FBUyxHQUF1QixJQUFJLFlBQVksRUFBTyxDQUFDO0lBRWpDLENBQUM7Ozs7OztJQWxCaEQsSUFBdUIsTUFBTSxDQUFDLEtBQXFCO1FBQ2pELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7Ozs7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7OztJQWNELElBQUksYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDbEQsQ0FBQzs7OztJQUVELElBQUksZ0JBQWdCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxRQUFRLENBQUM7SUFDN0YsQ0FBQzs7OztJQUVELElBQUksYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLEtBQUssQ0FBQztJQUM1RCxDQUFDOzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxLQUFVLEVBQUUsTUFBYztRQUMzQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7O0lBRUQsbUJBQW1CLENBQUMsTUFBNEI7UUFDOUMsT0FBTyxNQUFNLENBQUMsS0FBSyxJQUFJLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoRSxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxJQUFJO1FBQ2QsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7Ozs7O0lBRU8sMEJBQTBCLENBQUMsS0FBVTtRQUMzQyxJQUFJLEtBQUssSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxFQUFFO1lBRXRDLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtnQkFDakIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPOzs7O2dCQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUMsQ0FBQzthQUNyRjtZQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDeEIsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQzthQUMzQjtZQUVELElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtnQkFDakIsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO0lBQ0gsQ0FBQzs7O1lBaEZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1QixxMUVBQWdEO2FBQ2pEOzs7O1lBakJRLFdBQVc7OzswQkF5QmpCLEtBQUssU0FBQyxZQUFZO3FCQUtsQixLQUFLLFNBQUMsVUFBVTtvQkFXaEIsS0FBSyxTQUFDLFNBQVM7d0JBS2YsTUFBTSxTQUFDLGNBQWM7Ozs7Ozs7SUExQnRCLDBDQUFnQzs7Ozs7SUFLaEMsOENBQW1EOzs7OztJQWdCbkQsd0NBQW9DOzs7OztJQUtwQyw0Q0FBZ0Y7Ozs7O0lBRXBFLDhDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEZWNpbWFsUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IGNhcGl0YWxpemVGaXJzdExldHRlciwgaXNUeXBlb2YgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgVGhmVGFibGVEZXRhaWwgfSBmcm9tICcuL3RoZi10YWJsZS1kZXRhaWwuaW50ZXJmYWNlJztcbmltcG9ydCB7IFRoZlRhYmxlRGV0YWlsQ29sdW1uIH0gZnJvbSAnLi90aGYtdGFibGUtZGV0YWlsLWNvbHVtbi5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcmVzcG9uc8OhdmVsIHBvciBhcHJlc2VudGFyIG8gZGV0YWxoZSBkZSBjYWRhIGxpbmhhIGRhIHRhYmVsYS5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGhmLXRhYmxlLWRldGFpbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90aGYtdGFibGUtZGV0YWlsLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUaGZUYWJsZURldGFpbENvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfZGV0YWlsOiBUaGZUYWJsZURldGFpbDtcblxuICAvKipcbiAgICogRGVmaW5lIHNlIGEgdGFiZWxhIHBvc3N1aSBhIG9ww6fDo28gZGUgYGNoZWNrYm94YCBoYWJpbGl0YWRhLlxuICAgKi9cbiAgQElucHV0KCd0LWNoZWNrYm94JykgaGFzQ2hlY2tib3g/OiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYcOnw6NvIGRhIGxpbmhhIGRlIGRldGFsaGVzLlxuICAgKi9cbiAgQElucHV0KCd0LWRldGFpbCcpIHNldCBkZXRhaWwodmFsdWU6IFRoZlRhYmxlRGV0YWlsKSB7XG4gICAgdGhpcy5fZGV0YWlsID0gdGhpcy5yZXR1cm5UaGZUYWJsZURldGFpbE9iamVjdCh2YWx1ZSk7XG4gIH1cblxuICBnZXQgZGV0YWlsKCkge1xuICAgIHJldHVybiB0aGlzLl9kZXRhaWw7XG4gIH1cblxuICAvKipcbiAgICogTGlzdGEgZGUgaXRlbnMgZG8gX2RldGFpbF8gZGEgdGFiZWxhLlxuICAgKi9cbiAgQElucHV0KCd0LWl0ZW1zJykgaXRlbXM6IEFycmF5PGFueT47XG5cbiAgLyoqXG4gICAqIEHDp8OjbyBleGVjdXRhZGEgYW8gc2VsZWNpb25hciBvdSBkZXNtYXJjYXIgYSBzZWxlw6fDo28gZGUgdW1hIGxpbmhhIGRlIGRldGFsaGUgZG8gYHRoZi10YWJsZWAuXG4gICAqL1xuICBAT3V0cHV0KCd0LXNlbGVjdC1yb3cnKSBzZWxlY3RSb3c/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGVjaW1hbFBpcGU6IERlY2ltYWxQaXBlKSB7fVxuXG4gIGdldCBkZXRhaWxDb2x1bW5zKCk6IEFycmF5PFRoZlRhYmxlRGV0YWlsQ29sdW1uPiB7XG4gICAgcmV0dXJuIHRoaXMuZGV0YWlsICYmIHRoaXMuZGV0YWlsLmNvbHVtbnMgfHwgW107XG4gIH1cblxuICBnZXQgdHlwZUhlYWRlcklubGluZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kZXRhaWwgJiYgIXRoaXMuZGV0YWlsWyd0eXBlSGVhZGVyJ10gfHwgdGhpcy5kZXRhaWxbJ3R5cGVIZWFkZXInXSA9PT0gJ2lubGluZSc7XG4gIH1cblxuICBnZXQgdHlwZUhlYWRlclRvcCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kZXRhaWwgJiYgdGhpcy5kZXRhaWxbJ3R5cGVIZWFkZXInXSA9PT0gJ3RvcCc7XG4gIH1cblxuICBmb3JtYXROdW1iZXJEZXRhaWwodmFsdWU6IGFueSwgZm9ybWF0OiBzdHJpbmcpIHtcbiAgICBpZiAoIWZvcm1hdCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmRlY2ltYWxQaXBlLnRyYW5zZm9ybSh2YWx1ZSwgZm9ybWF0KTtcbiAgfVxuXG4gIGdldENvbHVtblRpdGxlTGFiZWwoZGV0YWlsOiBUaGZUYWJsZURldGFpbENvbHVtbikge1xuICAgIHJldHVybiBkZXRhaWwubGFiZWwgfHwgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKGRldGFpbC5wcm9wZXJ0eSk7XG4gIH1cblxuICBvblNlbGVjdFJvdyhpdGVtKSB7XG4gICAgaXRlbS4kc2VsZWN0ZWQgPSAhaXRlbS4kc2VsZWN0ZWQ7XG4gICAgdGhpcy5zZWxlY3RSb3cuZW1pdChpdGVtKTtcbiAgfVxuXG4gIHByaXZhdGUgcmV0dXJuVGhmVGFibGVEZXRhaWxPYmplY3QodmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSAmJiBpc1R5cGVvZih2YWx1ZSwgJ29iamVjdCcpKSB7XG5cbiAgICAgIGlmICh2YWx1ZS5jb2x1bW5zKSB7XG4gICAgICAgIHZhbHVlLmNvbHVtbnMuZm9yRWFjaChjb2x1bW4gPT4gY29sdW1uLnByb3BlcnR5ID0gY29sdW1uLnByb3BlcnR5IHx8IGNvbHVtbi5jb2x1bW4pO1xuICAgICAgfVxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHsgY29sdW1uczogdmFsdWUgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlLmNvbHVtbnMpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG4iXX0=