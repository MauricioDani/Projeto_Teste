/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { browserLanguage, isTypeof, thfLocaleDefault } from '../../../../utils/util';
import { ThfModalComponent } from '../../../../components/thf-modal/thf-modal.component';
import { thfTableLiteralsDefault } from '../../../thf-table/thf-table-base.component';
/** @type {?} */
export const thfLookupLiteralsDefault = {
    en: (/** @type {?} */ ({
        modalPrimaryActionLabel: 'Select',
        modalSecondaryActionLabel: 'Cancel',
        modalPlaceholder: 'Search',
        modalTitle: 'Select a record',
        modalTableNoColumns: thfTableLiteralsDefault.en.noColumns,
        modalTableNoData: thfTableLiteralsDefault.en.noData,
        modalTableLoadingData: thfTableLiteralsDefault.en.loadingData,
        modalTableLoadMoreData: thfTableLiteralsDefault.en.loadMoreData
    })),
    es: (/** @type {?} */ ({
        modalPrimaryActionLabel: 'Seleccionar',
        modalSecondaryActionLabel: 'Cancelar',
        modalPlaceholder: 'Buscar',
        modalTitle: 'Seleccione un registro',
        modalTableNoColumns: thfTableLiteralsDefault.es.noColumns,
        modalTableNoData: thfTableLiteralsDefault.es.noData,
        modalTableLoadingData: thfTableLiteralsDefault.es.loadingData,
        modalTableLoadMoreData: thfTableLiteralsDefault.es.loadMoreData
    })),
    pt: (/** @type {?} */ ({
        modalPrimaryActionLabel: 'Selecionar',
        modalSecondaryActionLabel: 'Cancelar',
        modalPlaceholder: 'Pesquisar',
        modalTitle: 'Selecione um registro',
        modalTableNoColumns: thfTableLiteralsDefault.pt.noColumns,
        modalTableNoData: thfTableLiteralsDefault.pt.noData,
        modalTableLoadingData: thfTableLiteralsDefault.pt.loadingData,
        modalTableLoadMoreData: thfTableLiteralsDefault.pt.loadMoreData
    }))
};
/**
 * \@docsPrivate
 *
 * Classe base do componente Thf Lookup Modal.
 * @abstract
 */
export class ThfLookupModalBaseComponent {
    constructor() {
        this.hasNext = true;
        this.isLoading = false;
        this.page = 1;
        this.pageSize = 10;
        this.primaryAction = {
            action: (/**
             * @return {?}
             */
            () => {
                this.items.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    if (element['$selected']) {
                        this.model.emit(element);
                        this.thfModal.close();
                    }
                }));
            }),
            label: this.literals.modalPrimaryActionLabel
        };
        this.searchValue = '';
        this.secondaryAction = {
            action: (/**
             * @return {?}
             */
            () => {
                this.model.emit(null);
                this.thfModal.close();
            }),
            label: this.literals.modalSecondaryActionLabel
        };
        /**
         * Evento utilizado ao selecionar um registro da tabela.
         */
        this.model = new EventEmitter();
    }
    /**
     * Objeto com as literais usadas no `thf-lookup-modal`.
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, thfLookupLiteralsDefault[thfLocaleDefault], thfLookupLiteralsDefault[browserLanguage()], value);
            if (value.modalTitle) {
                this.title = this.literals.modalTitle;
            }
        }
        else {
            this._literals = thfLookupLiteralsDefault[browserLanguage()];
        }
        this.primaryAction.label = this.literals.modalPrimaryActionLabel;
        this.secondaryAction.label = this.literals.modalSecondaryActionLabel;
        this.setTableLiterals();
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || thfLookupLiteralsDefault[browserLanguage()];
    }
    /**
     * Título da modal.
     * @param {?} value
     * @return {?}
     */
    set title(value) {
        this._title = isTypeof(value, 'string') ? value : this.literals.modalTitle;
    }
    /**
     * @return {?}
     */
    get title() {
        return this._title;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.searchSubscription) {
            this.searchSubscription.unsubscribe();
        }
        if (this.showMoreSubscription) {
            this.showMoreSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initializeData();
        this.setTableLiterals();
    }
    /**
     * @return {?}
     */
    search() {
        this.page = 1;
        if (this.searchValue) {
            this.isLoading = true;
            this.searchSubscription = this.getFilteredData(this.searchValue).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.items = data.items;
                this.hasNext = data.hasNext;
                this.isLoading = false;
            }));
        }
        else {
            this.initializeData();
        }
    }
    /**
     * @return {?}
     */
    showMoreEvent() {
        this.page++;
        this.isLoading = true;
        this.showMoreSubscription = this.getFilteredData(this.searchValue).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            data.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                this.items.push(item);
            }));
            this.hasNext = data.hasNext;
            this.isLoading = false;
        }));
    }
    /**
     * @private
     * @param {?} searchValue
     * @return {?}
     */
    getFilteredData(searchValue) {
        return this.filterService.getFilteredData(searchValue, this.page, this.pageSize, this.filterParams);
    }
    /**
     * @private
     * @return {?}
     */
    initializeData() {
        this.isLoading = true;
        this.filterSubscription = this.getFilteredData('').subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.items = data.items;
            this.hasNext = data.hasNext;
            this.isLoading = false;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    setTableLiterals() {
        this.tableLiterals = {
            'noColumns': this.literals.modalTableNoColumns,
            'noData': this.literals.modalTableNoData,
            'loadingData': this.literals.modalTableLoadingData,
            'loadMoreData': this.literals.modalTableLoadMoreData,
        };
    }
}
ThfLookupModalBaseComponent.propDecorators = {
    thfModal: [{ type: ViewChild, args: [ThfModalComponent, { static: true },] }],
    columns: [{ type: Input, args: ['t-columns',] }],
    items: [{ type: Input, args: ['t-items',] }],
    literals: [{ type: Input, args: ['t-literals',] }],
    title: [{ type: Input, args: ['t-title',] }],
    filterService: [{ type: Input, args: ['t-filter-service',] }],
    filterParams: [{ type: Input, args: ['t-filter-params',] }],
    model: [{ type: Output, args: ['t-change-model',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfLookupModalBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    ThfLookupModalBaseComponent.prototype._title;
    /** @type {?} */
    ThfLookupModalBaseComponent.prototype.hasNext;
    /** @type {?} */
    ThfLookupModalBaseComponent.prototype.isLoading;
    /** @type {?} */
    ThfLookupModalBaseComponent.prototype.page;
    /** @type {?} */
    ThfLookupModalBaseComponent.prototype.pageSize;
    /** @type {?} */
    ThfLookupModalBaseComponent.prototype.primaryAction;
    /** @type {?} */
    ThfLookupModalBaseComponent.prototype.searchValue;
    /** @type {?} */
    ThfLookupModalBaseComponent.prototype.secondaryAction;
    /** @type {?} */
    ThfLookupModalBaseComponent.prototype.tableLiterals;
    /**
     * @type {?}
     * @private
     */
    ThfLookupModalBaseComponent.prototype.filterSubscription;
    /**
     * @type {?}
     * @private
     */
    ThfLookupModalBaseComponent.prototype.searchSubscription;
    /**
     * @type {?}
     * @private
     */
    ThfLookupModalBaseComponent.prototype.showMoreSubscription;
    /** @type {?} */
    ThfLookupModalBaseComponent.prototype.thfModal;
    /**
     * Lista das colunas da tabela.
     * Essa propriedade deve receber um array de objetos que implementam a interface ThfLookupColumn.
     * @type {?}
     */
    ThfLookupModalBaseComponent.prototype.columns;
    /**
     * Lista de itens da tabela.
     * @type {?}
     */
    ThfLookupModalBaseComponent.prototype.items;
    /**
     * Classe de serviço com a implementação do cliente.
     * @type {?}
     */
    ThfLookupModalBaseComponent.prototype.filterService;
    /**
     * Classe de serviço com a implementação do cliente.
     * @type {?}
     */
    ThfLookupModalBaseComponent.prototype.filterParams;
    /**
     * Evento utilizado ao selecionar um registro da tabela.
     * @type {?}
     */
    ThfLookupModalBaseComponent.prototype.model;
    /**
     * @abstract
     * @return {?}
     */
    ThfLookupModalBaseComponent.prototype.openModal = function () { };
}
//# sourceMappingURL=data:application/json;base64,