/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';
export class ThfGridCellComponent {
    /**
     * @param {?} changeDetectorRef
     */
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this._value = '';
        this.edit = false;
        this.editValue = '';
        this.align = 'left';
        this.freeze = false;
        this.tabIndex = -1;
        this.position = '';
        this.readonly = false;
        this.required = false;
        this.valueChange = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set width(value) {
        this._width = value;
        if (this.freeze && !this._width) {
            this._width = 100;
        }
    }
    /**
     * @return {?}
     */
    get width() {
        return this._width ? `${this._width}px` : '100%';
    }
    // @Input('t-value') value?: string;
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = value;
        this.valueChange.emit(this._value);
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDownContent(event) {
        // console.log('onKeyDownContent: ', event);
        // BACKSPACE / DELETE
        if ((!event.ctrlKey) && ((event.keyCode === 8) || (event.keyCode === 46))) {
            if (this.readonly) {
                return;
            }
            event.preventDefault();
            this.value = '';
            return;
        }
        // ENTER
        if (event.keyCode === 13) {
            event.preventDefault();
            this.onEditCell(this.value);
            return;
        }
        // A..Z - 0..9
        if ((event.keyCode >= 65) && (event.keyCode <= 90) || (event.keyCode >= 48) && (event.keyCode <= 57)) {
            event.preventDefault();
            this.onEditCell(event.key);
            return;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dblclick(event) {
        // console.log('dblclick: ', event);
        event.preventDefault();
        this.onEditCell(this.value);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBlurInput(event) {
        // console.log('onBlurInput: ', event);
        this.value = this.editValue;
        this.editValue = undefined;
        this.edit = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDownInput(event) {
        // console.log('onKeyDownInput: ', event);
        // ENTER
        if (event.keyCode === 13) {
            this.value = this.editValue;
            this.editValue = undefined;
            this.edit = false;
            this.changeDetectorRef.detectChanges();
            this.contentElement.nativeElement.focus();
        }
        // ESCAPE
        if (event.keyCode === 27) {
            this.editValue = undefined;
            this.edit = false;
            this.changeDetectorRef.detectChanges();
            this.contentElement.nativeElement.focus();
            event.stopPropagation();
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    onEditCell(value) {
        if (this.readonly) {
            return;
        }
        this.editValue = value;
        this.edit = true;
        this.changeDetectorRef.detectChanges();
        this.inputElement.nativeElement.focus();
    }
}
ThfGridCellComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-grid-cell',
                template: "<div>\n  <ng-container *ngIf=\"edit; then input; else content\"></ng-container>\n\n  <ng-template #content>\n    <div #contentElement\n      [id]=\"position\"\n      class=\"thf-grid-cell-content thf-grid-cell-{{ align }} {{ !value && required ? 'thf-grid-cell-required' : '' }}\"\n      (keydown)=\"onKeyDownContent($event)\"\n      tabindex=\"{{ readonly ? -1 : 0 }}\"\n      (dblclick)=dblclick($event)>\n      <span>{{ value || '&nbsp;' }}</span>\n    </div>\n  </ng-template>\n\n  <ng-template #input>\n    <input\n      [id]=\"position\"\n      #inputElement class=\"thf-grid-cell-input\"\n      [(ngModel)]=\"editValue\"\n      (keydown.arrowup)=\"$event.stopPropagation()\"\n      (keydown.arrowdown)=\"$event.stopPropagation()\"\n      (keydown.arrowleft)=\"$event.stopPropagation()\"\n      (keydown.arrowright)=\"$event.stopPropagation()\"\n      (keydown)=\"onKeyDownInput($event)\"\n      (blur)=\"onBlurInput($event)\">\n\n    <!-- <thf-input\n      #inputElement class=\"thf-grid-cell-input\"\n      [(ngModel)]=\"editValue\"\n      (keydown)=\"onKeyDownInput($event)\"\n      (t-blur)=\"onBlurInput($event)\">\n    </thf-input> -->\n  </ng-template>\n</div>\n\n",
                styles: [".thf-grid-cell-content,.thf-grid-cell-input{border-bottom:1px solid #eceeee;border-left:none;border-right:1px solid #eceeee;border-top:none;font-family:NunitoSans;font-size:14px;height:44px;line-height:1.71;margin:0;overflow:hidden;padding:10px 16px;text-align:left;text-overflow:ellipsis;white-space:nowrap}.thf-grid-cell-center{text-align:center}.thf-grid-cell-right{text-align:right}.thf-grid-cell-content:focus{border:none;outline:#0c9abe solid 1px}.thf-grid-cell-required{border:1px dashed red}.thf-grid-cell-input{border:1px solid #0c9abe;box-shadow:0 0 4px 4px rgba(0,0,0,.1);outline:0;position:relative;min-width:100%;max-width:100%;width:100%}"]
            }] }
];
/** @nocollapse */
ThfGridCellComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThfGridCellComponent.propDecorators = {
    align: [{ type: Input, args: ['t-align',] }],
    freeze: [{ type: Input, args: ['t-freeze',] }],
    tabIndex: [{ type: Input, args: ['t-tab-index',] }],
    position: [{ type: Input, args: ['t-position',] }],
    width: [{ type: Input, args: ['t-width',] }],
    readonly: [{ type: Input, args: ['t-readonly',] }],
    required: [{ type: Input, args: ['t-required',] }],
    valueChange: [{ type: Output, args: ['t-valueChange',] }],
    value: [{ type: Input, args: ['t-value',] }],
    inputElement: [{ type: ViewChild, args: ['inputElement', { static: true },] }],
    contentElement: [{ type: ViewChild, args: ['contentElement', { static: true },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfGridCellComponent.prototype._width;
    /** @type {?} */
    ThfGridCellComponent.prototype._value;
    /** @type {?} */
    ThfGridCellComponent.prototype.edit;
    /** @type {?} */
    ThfGridCellComponent.prototype.editValue;
    /** @type {?} */
    ThfGridCellComponent.prototype.align;
    /** @type {?} */
    ThfGridCellComponent.prototype.freeze;
    /** @type {?} */
    ThfGridCellComponent.prototype.tabIndex;
    /** @type {?} */
    ThfGridCellComponent.prototype.position;
    /** @type {?} */
    ThfGridCellComponent.prototype.readonly;
    /** @type {?} */
    ThfGridCellComponent.prototype.required;
    /** @type {?} */
    ThfGridCellComponent.prototype.valueChange;
    /** @type {?} */
    ThfGridCellComponent.prototype.inputElement;
    /** @type {?} */
    ThfGridCellComponent.prototype.contentElement;
    /**
     * @type {?}
     * @private
     */
    ThfGridCellComponent.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,