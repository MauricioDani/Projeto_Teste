/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { callFunction, isExternalLink, isTypeof, openExternalLink } from '../../utils/util';
import { ThfControlPositionService } from '../../services/thf-control-position/thf-control-position.service';
import { ThfPopupBaseComponent } from './thf-popup-base.component';
/**
 *
 * \@docsExtends ThfPopupBaseComponent
 *
 * \@example
 *
 * <example name="thf-popup-basic" title="Totvs Popup - Basic">
 *   <file name="sample-thf-popup-basic/sample-thf-popup-basic.component.html"> </file>
 *   <file name="sample-thf-popup-basic/sample-thf-popup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popup-labs" title="Totvs Popup - Labs">
 *   <file name="sample-thf-popup-labs/sample-thf-popup-labs.component.html"> </file>
 *   <file name="sample-thf-popup-labs/sample-thf-popup-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popup-email" title="Totvs Popup Email">
 *   <file name="sample-thf-popup-email/sample-thf-popup-email.component.html"> </file>
 *   <file name="sample-thf-popup-email/sample-thf-popup-email.component.ts"> </file>
 * </example>
 *
 */
export class ThfPopupComponent extends ThfPopupBaseComponent {
    /**
     * @param {?} viewContainerRef
     * @param {?} renderer
     * @param {?} router
     * @param {?} thfControlPosition
     * @param {?} changeDetector
     */
    constructor(viewContainerRef, renderer, router, thfControlPosition, changeDetector) {
        super();
        this.renderer = renderer;
        this.router = router;
        this.thfControlPosition = thfControlPosition;
        this.changeDetector = changeDetector;
        this.onScroll = (/**
         * @return {?}
         */
        () => {
            if (this.showPopup) {
                this.close();
            }
        });
        this.parentRef = viewContainerRef['_view']['component'];
    }
    /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     * @return {?}
     */
    close() {
        this.removeListeners();
        this.showPopup = false;
    }
    /**
     * @param {?} popupAction
     * @return {?}
     */
    onActionClick(popupAction) {
        /** @type {?} */
        const actionNoDisabled = popupAction && !this.returnBooleanValue(popupAction, 'disabled');
        if (popupAction && popupAction.action && actionNoDisabled) {
            this.close();
            return callFunction(popupAction.action, this.parentRef, this.param || popupAction);
        }
        if (popupAction && popupAction.url && actionNoDisabled) {
            this.close();
            return this.openUrl(popupAction.url);
        }
    }
    /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    open(param) {
        this.oldTarget = this.target;
        this.param = param;
        this.showPopup = true;
        this.changeDetector.detectChanges();
        this.validateInitialContent();
    }
    /**
     * @param {?} popupAction
     * @param {?} property
     * @return {?}
     */
    returnBooleanValue(popupAction, property) {
        return isTypeof(popupAction[property], 'function') ? popupAction[property](this.param || popupAction) : popupAction[property];
    }
    /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    toggle(param) {
        this.showPopup && this.oldTarget === this.target ? this.close() : this.open(param);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    clickedOutDisabledItem(event) {
        /** @type {?} */
        const containsItemDisabled = this.elementContains(event.target, 'thf-popup-item-disabled') ||
            this.elementContains(event.target.parentElement, 'thf-popup-item-disabled');
        return !containsItemDisabled;
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    clickedOutHeaderTemplate(event) {
        /** @type {?} */
        const popupHeaderTemplate = this.popupRef && this.popupRef.nativeElement.querySelector('[t-popup-header-template]');
        return !(popupHeaderTemplate && popupHeaderTemplate.contains(event.target));
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    clickedOutTarget(event) {
        return this.target && !this.target.contains(event.target);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    closePopupOnClickout(event) {
        if (this.clickedOutTarget(event) && this.clickedOutDisabledItem(event) && this.clickedOutHeaderTemplate(event)) {
            this.close();
        }
    }
    /**
     * @private
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    elementContains(element, className) {
        return element && element.classList.contains(className);
    }
    /**
     * @private
     * @return {?}
     */
    hasContentToShow() {
        return !!(this.popupRef.nativeElement && this.popupRef.nativeElement.clientHeight);
    }
    /**
     * @private
     * @return {?}
     */
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        () => {
            this.close();
        }));
        this.clickoutListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.closePopupOnClickout(event);
        }));
        window.addEventListener('scroll', this.onScroll, true);
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    openUrl(url) {
        if (isExternalLink(url)) {
            return openExternalLink(url);
        }
        if (url) {
            return this.router.navigate([url]);
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    /**
     * @private
     * @return {?}
     */
    setPosition() {
        this.thfControlPosition.setElements(this.popupRef.nativeElement, 8, this.target, this.customPositions, false, this.isCornerAlign);
        this.thfControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.thfControlPosition.getArrowDirection();
    }
    /**
     * @private
     * @return {?}
     */
    validateInitialContent() {
        if (this.hasContentToShow()) {
            this.setPosition();
            this.initializeListeners();
        }
        else {
            this.close();
        }
    }
}
ThfPopupComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-popup',
                template: "<div #popupRef class=\"thf-popup\" *ngIf=\"showPopup\">\n\n  <div *ngIf=\"!hideArrow\" class=\"thf-popup-arrow thf-arrow-{{ arrowDirection }}\"></div>\n\n  <ng-content select=\"[t-popup-header-template]\"></ng-content>\n\n  <ng-container *ngFor=\"let action of actions; let actionIndex = index\">\n    <div *ngIf=\"action.visible !== false\"\n      [class.thf-popup-item-default]=\"action.type !== 'danger'\"\n      [class.thf-popup-item-danger]=\"action.type === 'danger'\"\n      [class.thf-popup-item-disabled]=\"returnBooleanValue(action, 'disabled')\"\n      [class.thf-popup-item-separator]=\"action.separator && actionIndex !== 0\"\n      [class.thf-popup-item-selected]=\"action.selected\"\n      (click)=\"onActionClick(action)\">\n\n      <span *ngIf=\"action.icon\" class=\"thf-icon {{ action.icon }} thf-popup-icon-item\"></span>\n      {{ action.label }}\n\n    </div>\n  </ng-container>\n\n</div>\n",
                providers: [ThfControlPositionService]
            }] }
];
/** @nocollapse */
ThfPopupComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Renderer2 },
    { type: Router },
    { type: ThfControlPositionService },
    { type: ChangeDetectorRef }
];
ThfPopupComponent.propDecorators = {
    popupRef: [{ type: ViewChild, args: ['popupRef', { read: ElementRef, static: false },] }]
};
if (false) {
    /** @type {?} */
    ThfPopupComponent.prototype.popupRef;
    /**
     * @type {?}
     * @private
     */
    ThfPopupComponent.prototype.onScroll;
    /**
     * @type {?}
     * @private
     */
    ThfPopupComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ThfPopupComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    ThfPopupComponent.prototype.thfControlPosition;
    /** @type {?} */
    ThfPopupComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBvcHVwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtcG9wdXAvdGhmLXBvcHVwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqSCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFekMsT0FBTyxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDNUYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sa0VBQWtFLENBQUM7QUFHN0csT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNkJuRSxNQUFNLE9BQU8saUJBQWtCLFNBQVEscUJBQXFCOzs7Ozs7OztJQUkxRCxZQUNFLGdCQUFrQyxFQUMxQixRQUFtQixFQUNuQixNQUFjLEVBQ2Qsa0JBQTZDLEVBQzlDLGNBQWlDO1FBQ3hDLEtBQUssRUFBRSxDQUFDO1FBSkEsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUEyQjtRQUM5QyxtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUF1R2xDLGFBQVE7OztRQUFHLEdBQVMsRUFBRTtZQUM1QixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNkO1FBQ0gsQ0FBQyxFQUFBO1FBekdDLElBQUksQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsV0FB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RSxnQkFBZ0I7WUFBdEMsU0FBUztZQUNuRCxNQUFNO1lBR04seUJBQXlCO1lBSnpCLGlCQUFpQjs7O3VCQXNDdkIsU0FBUyxTQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTs7OztJQUExRCxxQ0FBaUY7Ozs7O0lBOEdqRixxQ0FJQzs7Ozs7SUE5R0MscUNBQTJCOzs7OztJQUMzQixtQ0FBc0I7Ozs7O0lBQ3RCLCtDQUFxRDs7SUFDckQsMkNBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IGNhbGxGdW5jdGlvbiwgaXNFeHRlcm5hbExpbmssIGlzVHlwZW9mLCBvcGVuRXh0ZXJuYWxMaW5rIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBUaGZDb250cm9sUG9zaXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvdGhmLWNvbnRyb2wtcG9zaXRpb24vdGhmLWNvbnRyb2wtcG9zaXRpb24uc2VydmljZSc7XG5cbmltcG9ydCB7IFRoZlBvcHVwQWN0aW9uIH0gZnJvbSAnLi90aGYtcG9wdXAtYWN0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaGZQb3B1cEJhc2VDb21wb25lbnQgfSBmcm9tICcuL3RoZi1wb3B1cC1iYXNlLmNvbXBvbmVudCc7XG5cbi8qKlxuICpcbiAqIEBkb2NzRXh0ZW5kcyBUaGZQb3B1cEJhc2VDb21wb25lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJ0aGYtcG9wdXAtYmFzaWNcIiB0aXRsZT1cIlRvdHZzIFBvcHVwIC0gQmFzaWNcIj5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtcG9wdXAtYmFzaWMvc2FtcGxlLXRoZi1wb3B1cC1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLXBvcHVwLWJhc2ljL3NhbXBsZS10aGYtcG9wdXAtYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwidGhmLXBvcHVwLWxhYnNcIiB0aXRsZT1cIlRvdHZzIFBvcHVwIC0gTGFic1wiPlxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1wb3B1cC1sYWJzL3NhbXBsZS10aGYtcG9wdXAtbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLXBvcHVwLWxhYnMvc2FtcGxlLXRoZi1wb3B1cC1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1wb3B1cC1lbWFpbFwiIHRpdGxlPVwiVG90dnMgUG9wdXAgRW1haWxcIj5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtcG9wdXAtZW1haWwvc2FtcGxlLXRoZi1wb3B1cC1lbWFpbC5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLXBvcHVwLWVtYWlsL3NhbXBsZS10aGYtcG9wdXAtZW1haWwuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoZi1wb3B1cCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90aGYtcG9wdXAuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFsgVGhmQ29udHJvbFBvc2l0aW9uU2VydmljZSBdXG59KVxuZXhwb3J0IGNsYXNzIFRoZlBvcHVwQ29tcG9uZW50IGV4dGVuZHMgVGhmUG9wdXBCYXNlQ29tcG9uZW50IHtcblxuICBAVmlld0NoaWxkKCdwb3B1cFJlZicsIHsgcmVhZDogRWxlbWVudFJlZiwgc3RhdGljOiBmYWxzZSB9KSBwb3B1cFJlZjogRWxlbWVudFJlZjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgdGhmQ29udHJvbFBvc2l0aW9uOiBUaGZDb250cm9sUG9zaXRpb25TZXJ2aWNlLFxuICAgIHB1YmxpYyBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucGFyZW50UmVmID0gdmlld0NvbnRhaW5lclJlZlsnX3ZpZXcnXVsnY29tcG9uZW50J107XG4gIH1cblxuICAvKipcbiAgICogRmVjaGEgbyBjb21wb25lbnRlICpwb3B1cCouXG4gICAqXG4gICAqID4gUG9yIHBhZHLDo28sIGVzdGUgY29tcG9ydGFtZW50byDDqSBhY2lvbmFkbyBzb21lbnRlIGFvIGNsaWNhciBmb3JhIGRvIGNvbXBvbmVudGUgb3UgZW0gZGV0ZXJtaW5hZGEgYcOnw6NvIC8gdXJsLlxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcblxuICAgIHRoaXMuc2hvd1BvcHVwID0gZmFsc2U7XG4gIH1cblxuICBvbkFjdGlvbkNsaWNrKHBvcHVwQWN0aW9uOiBUaGZQb3B1cEFjdGlvbikge1xuICAgIGNvbnN0IGFjdGlvbk5vRGlzYWJsZWQgPSBwb3B1cEFjdGlvbiAmJiAhdGhpcy5yZXR1cm5Cb29sZWFuVmFsdWUocG9wdXBBY3Rpb24sICdkaXNhYmxlZCcpO1xuXG4gICAgaWYgKHBvcHVwQWN0aW9uICYmIHBvcHVwQWN0aW9uLmFjdGlvbiAmJiBhY3Rpb25Ob0Rpc2FibGVkKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICByZXR1cm4gY2FsbEZ1bmN0aW9uKHBvcHVwQWN0aW9uLmFjdGlvbiwgdGhpcy5wYXJlbnRSZWYsIHRoaXMucGFyYW0gfHwgcG9wdXBBY3Rpb24pO1xuICAgIH1cblxuICAgIGlmIChwb3B1cEFjdGlvbiAmJiBwb3B1cEFjdGlvbi51cmwgJiYgYWN0aW9uTm9EaXNhYmxlZCkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgcmV0dXJuIHRoaXMub3BlblVybChwb3B1cEFjdGlvbi51cmwpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBYnJlIG8gY29tcG9uZW50ZSAqcG9wdXAqLlxuICAgKlxuICAgKiA+IMOJIHBvc3PDrXZlbCBpbmZvcm1hciB1bSBwYXLDom1ldHJvIHF1ZSBzZXLDoSB1dGlsaXphZG8gbmEgZXhlY3XDp8OjbyBkYSBhw6fDo28gZG8gaXRlbSBlIG5hIGZ1bsOnw6NvIGRlIGRlc2FiaWxpdGFyLlxuICAgKi9cbiAgb3BlbihwYXJhbT8pIHtcbiAgICB0aGlzLm9sZFRhcmdldCA9IHRoaXMudGFyZ2V0O1xuICAgIHRoaXMucGFyYW0gPSBwYXJhbTtcbiAgICB0aGlzLnNob3dQb3B1cCA9IHRydWU7XG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgdGhpcy52YWxpZGF0ZUluaXRpYWxDb250ZW50KCk7XG4gIH1cblxuICByZXR1cm5Cb29sZWFuVmFsdWUocG9wdXBBY3Rpb246IGFueSwgcHJvcGVydHk6IHN0cmluZykge1xuICAgIHJldHVybiBpc1R5cGVvZihwb3B1cEFjdGlvbltwcm9wZXJ0eV0sICdmdW5jdGlvbicpID8gcG9wdXBBY3Rpb25bcHJvcGVydHldKHRoaXMucGFyYW0gfHwgcG9wdXBBY3Rpb24pIDogcG9wdXBBY3Rpb25bcHJvcGVydHldO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc3BvbnPDoXZlbCBwb3IgYWJyaXIgZSBmZWNoYXIgbyAqcG9wdXAqLlxuICAgKlxuICAgKiBRdWFuZG8gZGlzcGFyYWRvIGFicmlyw6EgbyAqcG9wdXAqIGUgY2FzbyBvIG1lc21vIGrDoSBlc3RpdmVyIGFiZXJ0byBlIHBvc3N1aXIgbyBtZXNtbyBgdGFyZ2V0YCBpcsOhIGZlY2hhLWxvLlxuICAgKlxuICAgKiDDiSBwb3Nzw612ZWwgaW5mb3JtYXIgdW0gcGFyw6JtZXRybyBxdWUgc2Vyw6EgdXRpbGl6YWRvIG5hIGV4ZWN1w6fDo28gZGEgYcOnw6NvIGRvIGl0ZW0gZSBuYSBmdW7Dp8OjbyBkZSBkZXNhYmlsaXRhci5cbiAgICovXG4gIHRvZ2dsZShwYXJhbT8pIHtcbiAgICB0aGlzLnNob3dQb3B1cCAmJiB0aGlzLm9sZFRhcmdldCA9PT0gdGhpcy50YXJnZXQgPyB0aGlzLmNsb3NlKCkgOiB0aGlzLm9wZW4ocGFyYW0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGlja2VkT3V0RGlzYWJsZWRJdGVtKGV2ZW50KSB7XG4gICAgY29uc3QgY29udGFpbnNJdGVtRGlzYWJsZWQgPSB0aGlzLmVsZW1lbnRDb250YWlucyhldmVudC50YXJnZXQsICd0aGYtcG9wdXAtaXRlbS1kaXNhYmxlZCcpIHx8XG4gICAgICB0aGlzLmVsZW1lbnRDb250YWlucyhldmVudC50YXJnZXQucGFyZW50RWxlbWVudCwgJ3RoZi1wb3B1cC1pdGVtLWRpc2FibGVkJyk7XG5cbiAgICByZXR1cm4gIWNvbnRhaW5zSXRlbURpc2FibGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGlja2VkT3V0SGVhZGVyVGVtcGxhdGUoZXZlbnQpIHtcbiAgICBjb25zdCBwb3B1cEhlYWRlclRlbXBsYXRlID0gdGhpcy5wb3B1cFJlZiAmJiB0aGlzLnBvcHVwUmVmLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignW3QtcG9wdXAtaGVhZGVyLXRlbXBsYXRlXScpO1xuICAgIHJldHVybiAhKHBvcHVwSGVhZGVyVGVtcGxhdGUgJiYgcG9wdXBIZWFkZXJUZW1wbGF0ZS5jb250YWlucyhldmVudC50YXJnZXQpKTtcbiAgfVxuXG4gIHByaXZhdGUgY2xpY2tlZE91dFRhcmdldChldmVudCkge1xuICAgIHJldHVybiB0aGlzLnRhcmdldCAmJiAhdGhpcy50YXJnZXQuY29udGFpbnMoZXZlbnQudGFyZ2V0KTtcbiAgfVxuXG4gIHByaXZhdGUgY2xvc2VQb3B1cE9uQ2xpY2tvdXQoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcblxuICAgIGlmICh0aGlzLmNsaWNrZWRPdXRUYXJnZXQoZXZlbnQpICYmIHRoaXMuY2xpY2tlZE91dERpc2FibGVkSXRlbShldmVudCkgJiYgdGhpcy5jbGlja2VkT3V0SGVhZGVyVGVtcGxhdGUoZXZlbnQpKSB7XG5cbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG5cbiAgfVxuXG4gIHByaXZhdGUgZWxlbWVudENvbnRhaW5zKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjbGFzc05hbWU6IHN0cmluZykge1xuICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG4gIH1cblxuICBwcml2YXRlIGhhc0NvbnRlbnRUb1Nob3coKSB7XG4gICAgcmV0dXJuICEhKHRoaXMucG9wdXBSZWYubmF0aXZlRWxlbWVudCAmJiB0aGlzLnBvcHVwUmVmLm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0KTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZUxpc3RlbmVycygpIHtcbiAgICB0aGlzLnJlc2l6ZUxpc3RlbmVyID0gdGhpcy5yZW5kZXJlci5saXN0ZW4oJ3dpbmRvdycsICdyZXNpemUnLCAoKSA9PiB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmNsaWNrb3V0TGlzdGVuZXIgPSB0aGlzLnJlbmRlcmVyLmxpc3RlbignZG9jdW1lbnQnLCAnY2xpY2snLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgIHRoaXMuY2xvc2VQb3B1cE9uQ2xpY2tvdXQoZXZlbnQpO1xuICAgIH0pO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwsIHRydWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBvblNjcm9sbCA9ICgpOiB2b2lkID0+IHtcbiAgICBpZiAodGhpcy5zaG93UG9wdXApIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9wZW5VcmwodXJsOiBzdHJpbmcpIHtcbiAgICBpZiAoaXNFeHRlcm5hbExpbmsodXJsKSkge1xuICAgICAgcmV0dXJuIG9wZW5FeHRlcm5hbExpbmsodXJsKTtcbiAgICB9XG5cbiAgICBpZiAodXJsKSB7XG4gICAgICByZXR1cm4gdGhpcy5yb3V0ZXIubmF2aWdhdGUoW3VybF0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlTGlzdGVuZXJzKCkge1xuICAgIGlmICh0aGlzLmNsaWNrb3V0TGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuY2xpY2tvdXRMaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlc2l6ZUxpc3RlbmVyKSB7XG4gICAgICB0aGlzLnJlc2l6ZUxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwsIHRydWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRQb3NpdGlvbigpIHtcbiAgICB0aGlzLnRoZkNvbnRyb2xQb3NpdGlvbi5zZXRFbGVtZW50cyh0aGlzLnBvcHVwUmVmLm5hdGl2ZUVsZW1lbnQsIDgsIHRoaXMudGFyZ2V0LCB0aGlzLmN1c3RvbVBvc2l0aW9ucywgZmFsc2UsIHRoaXMuaXNDb3JuZXJBbGlnbik7XG4gICAgdGhpcy50aGZDb250cm9sUG9zaXRpb24uYWRqdXN0UG9zaXRpb24odGhpcy5wb3NpdGlvbik7XG4gICAgdGhpcy5hcnJvd0RpcmVjdGlvbiA9IHRoaXMudGhmQ29udHJvbFBvc2l0aW9uLmdldEFycm93RGlyZWN0aW9uKCk7XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlSW5pdGlhbENvbnRlbnQoKSB7XG4gICAgaWYgKHRoaXMuaGFzQ29udGVudFRvU2hvdygpKSB7XG4gICAgICB0aGlzLnNldFBvc2l0aW9uKCk7XG4gICAgICB0aGlzLmluaXRpYWxpemVMaXN0ZW5lcnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=