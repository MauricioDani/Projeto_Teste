/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, uuid } from '../../../utils/util';
/**
 * \@description
 *
 * O componente `thf-tab` renderiza uma aba na qual envolve um conteúdo HTML.
 *
 * Com este componente é possível atribuir um rótulo para auxiliar na identificação do conteúdo, ativar para que o mesmo seja exibido,
 * desabilitar para impossibilitar o acesso, bem como ocultar para indisponibilizar a aba.
 *
 * > Para controlar a navegação entre diversas abas, utilizar o componente [`thf-tabs`](/documentation/thf-tabs).
 * @abstract
 */
export class ThfTabBaseComponent {
    constructor() {
        this._active = false;
        this._disabled = false;
        this._hide = false;
        // ID da aba
        this.id = uuid();
        /**
         * Método disparado ao clicar na aba.
         */
        this.click = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Ativa a aba exibindo seu conteúdo.
     *
     * > Sugere-se utilizar na aba de conteúdo inicial.
     *
     * \@default `false`
     * @param {?} active
     * @return {?}
     */
    set active(active) {
        this._active = convertToBoolean(active);
        this.setDisplayOnActive();
    }
    /**
     * @return {?}
     */
    get active() {
        return this._active;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Desabilita a aba.
     *
     * \@default `false`
     * @param {?} disabled
     * @return {?}
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Oculta a aba.
     *
     * \@default `false`
     * @param {?} hide
     * @return {?}
     */
    set hide(hide) {
        this._hide = convertToBoolean(hide);
    }
    /**
     * @return {?}
     */
    get hide() {
        return this._hide;
    }
}
ThfTabBaseComponent.propDecorators = {
    active: [{ type: Input, args: ['t-active',] }],
    disabled: [{ type: Input, args: ['t-disabled',] }],
    hide: [{ type: Input, args: ['t-hide',] }],
    label: [{ type: Input, args: ['t-label',] }],
    click: [{ type: Output, args: ['t-click',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTabBaseComponent.prototype._active;
    /**
     * @type {?}
     * @private
     */
    ThfTabBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfTabBaseComponent.prototype._hide;
    /** @type {?} */
    ThfTabBaseComponent.prototype.id;
    /**
     * Rótulo da aba.
     * @type {?}
     */
    ThfTabBaseComponent.prototype.label;
    /**
     * Método disparado ao clicar na aba.
     * @type {?}
     */
    ThfTabBaseComponent.prototype.click;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThfTabBaseComponent.prototype.setDisplayOnActive = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXRhYi1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtdGFicy90aGYtdGFiL3RoZi10YWItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7Ozs7Ozs7OztBQVk3RCxNQUFNLE9BQWdCLG1CQUFtQjtJQUF6QztRQUVVLFlBQU8sR0FBYSxLQUFLLENBQUM7UUFDMUIsY0FBUyxHQUFhLEtBQUssQ0FBQztRQUM1QixVQUFLLEdBQWEsS0FBSyxDQUFDOztRQUdoQyxPQUFFLEdBQVksSUFBSSxFQUFFLENBQUM7Ozs7UUE0REYsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFJaEQsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7SUFuREMsSUFBdUIsTUFBTSxDQUFDLE1BQWU7UUFDM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7Ozs7Ozs7Ozs7OztJQVdELElBQXlCLFFBQVEsQ0FBQyxRQUFpQjtRQUNqRCxJQUFJLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Ozs7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7Ozs7Ozs7Ozs7O0lBV0QsSUFBcUIsSUFBSSxDQUFDLElBQWE7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDOzs7O0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7OztxQkF6Q0EsS0FBSyxTQUFDLFVBQVU7dUJBa0JoQixLQUFLLFNBQUMsWUFBWTttQkFpQmxCLEtBQUssU0FBQyxRQUFRO29CQVNkLEtBQUssU0FBQyxTQUFTO29CQUdmLE1BQU0sU0FBQyxTQUFTOzs7Ozs7O0lBakVqQixzQ0FBa0M7Ozs7O0lBQ2xDLHdDQUFvQzs7Ozs7SUFDcEMsb0NBQWdDOztJQUdoQyxpQ0FBcUI7Ozs7O0lBeURyQixvQ0FBZ0M7Ozs7O0lBR2hDLG9DQUE4Qzs7Ozs7O0lBRTlDLG1FQUF3QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuLCB1dWlkIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGB0aGYtdGFiYCByZW5kZXJpemEgdW1hIGFiYSBuYSBxdWFsIGVudm9sdmUgdW0gY29udGXDumRvIEhUTUwuXG4gKlxuICogQ29tIGVzdGUgY29tcG9uZW50ZSDDqSBwb3Nzw612ZWwgYXRyaWJ1aXIgdW0gcsOzdHVsbyBwYXJhIGF1eGlsaWFyIG5hIGlkZW50aWZpY2HDp8OjbyBkbyBjb250ZcO6ZG8sIGF0aXZhciBwYXJhIHF1ZSBvIG1lc21vIHNlamEgZXhpYmlkbyxcbiAqIGRlc2FiaWxpdGFyIHBhcmEgaW1wb3NzaWJpbGl0YXIgbyBhY2Vzc28sIGJlbSBjb21vIG9jdWx0YXIgcGFyYSBpbmRpc3BvbmliaWxpemFyIGEgYWJhLlxuICpcbiAqID4gUGFyYSBjb250cm9sYXIgYSBuYXZlZ2HDp8OjbyBlbnRyZSBkaXZlcnNhcyBhYmFzLCB1dGlsaXphciBvIGNvbXBvbmVudGUgW2B0aGYtdGFic2BdKC9kb2N1bWVudGF0aW9uL3RoZi10YWJzKS5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRoZlRhYkJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2FjdGl2ZT86IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfZGlzYWJsZWQ/OiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX2hpZGU/OiBib29sZWFuID0gZmFsc2U7XG5cbiAgLy8gSUQgZGEgYWJhXG4gIGlkPzogc3RyaW5nID0gdXVpZCgpO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEF0aXZhIGEgYWJhIGV4aWJpbmRvIHNldSBjb250ZcO6ZG8uXG4gICAqXG4gICAqID4gU3VnZXJlLXNlIHV0aWxpemFyIG5hIGFiYSBkZSBjb250ZcO6ZG8gaW5pY2lhbC5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCd0LWFjdGl2ZScpIHNldCBhY3RpdmUoYWN0aXZlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fYWN0aXZlID0gY29udmVydFRvQm9vbGVhbihhY3RpdmUpO1xuICAgIHRoaXMuc2V0RGlzcGxheU9uQWN0aXZlKCk7XG4gIH1cblxuICBnZXQgYWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZXNhYmlsaXRhIGEgYWJhLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3QtZGlzYWJsZWQnKSBzZXQgZGlzYWJsZWQoZGlzYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IGNvbnZlcnRUb0Jvb2xlYW4oZGlzYWJsZWQpO1xuICB9XG5cbiAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9jdWx0YSBhIGFiYS5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCd0LWhpZGUnKSBzZXQgaGlkZShoaWRlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faGlkZSA9IGNvbnZlcnRUb0Jvb2xlYW4oaGlkZSk7XG4gIH1cblxuICBnZXQgaGlkZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faGlkZTtcbiAgfVxuXG4gIC8qKiBSw7N0dWxvIGRhIGFiYS4gKi9cbiAgQElucHV0KCd0LWxhYmVsJykgbGFiZWw6IHN0cmluZztcblxuICAvKiogTcOpdG9kbyBkaXNwYXJhZG8gYW8gY2xpY2FyIG5hIGFiYS4gKi9cbiAgQE91dHB1dCgndC1jbGljaycpIGNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzZXREaXNwbGF5T25BY3RpdmUoKTtcblxufVxuIl19