/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ContentChildren, QueryList } from '@angular/core';
import { ThfStepComponent } from './thf-step/thf-step.component';
import { ThfStepperBaseComponent } from './thf-stepper-base.component';
import { ThfStepperStatus } from './enums/thf-stepper-status.enum';
/**
 * \@docsExtends ThfStepperBaseComponent
 *
 * \@example
 *
 * <example name="thf-stepper-basic" title="Totvs Stepper Basic">
 *  <file name="sample-thf-stepper-basic/sample-thf-stepper-basic.component.html"> </file>
 *  <file name="sample-thf-stepper-basic/sample-thf-stepper-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-stepper-labs" title="Totvs Stepper Labs">
 *  <file name="sample-thf-stepper-labs/sample-thf-stepper-labs.component.html"> </file>
 *  <file name="sample-thf-stepper-labs/sample-thf-stepper-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-stepper-sales" title="Totvs Stepper - Sales">
 *  <file name="sample-thf-stepper-sales/sample-thf-stepper-sales.component.html"> </file>
 *  <file name="sample-thf-stepper-sales/sample-thf-stepper-sales.component.ts"> </file>
 * </example>
 */
export class ThfStepperComponent extends ThfStepperBaseComponent {
    /**
     * @param {?} changeDetector
     */
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
    }
    /**
     * @return {?}
     */
    get currentStepIndex() {
        return this.step - 1;
    }
    /**
     * @return {?}
     */
    get stepList() {
        return this.useThfSteps && this.thfSteps || this.steps;
    }
    /**
     * @return {?}
     */
    get useThfSteps() {
        return !!this.thfSteps.length;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.activeFirstStep();
        this.thfSteps.changes.subscribe((/**
         * @return {?}
         */
        () => {
            this.controlStepsStatus(0, this.thfSteps.first);
        }));
    }
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     *
     * @param {?} index {number} Índice do `thf-step` que se deseja ativar.
     * @return {?}
     */
    active(index) {
        if (!this.useThfSteps) {
            return;
        }
        /** @type {?} */
        const stepsArray = this.getThfSteps();
        /** @type {?} */
        const step = stepsArray[index];
        /** @type {?} */
        const isDisabledStep = step.status === ThfStepperStatus.Disabled;
        /** @type {?} */
        const isErrorStep = step.status === ThfStepperStatus.Error;
        if (!isDisabledStep || isErrorStep) {
            this.changeStep(index, step);
        }
    }
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     * @return {?}
     */
    first() {
        if (!this.useThfSteps) {
            return;
        }
        /** @type {?} */
        const firstStep = this.thfSteps.first;
        /** @type {?} */
        const firstStepIndex = 0;
        this.changeStep(firstStepIndex, firstStep);
    }
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     * @return {?}
     */
    next() {
        if (!this.useThfSteps) {
            return;
        }
        const { steps, stepIndex } = this.getStepsAndIndex(this.currentActiveStep);
        /** @type {?} */
        const nextIndex = stepIndex + 1;
        /** @type {?} */
        const nextStep = steps[nextIndex];
        this.changeStep(nextIndex, nextStep);
    }
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
     * @return {?}
     */
    previous() {
        if (!this.useThfSteps) {
            return;
        }
        const { steps, stepIndex } = this.getStepsAndIndex(this.currentActiveStep);
        /** @type {?} */
        const previousIndex = stepIndex - 1;
        /** @type {?} */
        const previousStep = steps[previousIndex];
        this.changeStep(previousIndex, previousStep);
    }
    /**
     * @param {?} stepIndex
     * @param {?=} step
     * @return {?}
     */
    changeStep(stepIndex, step) {
        /** @type {?} */
        const isDifferentStep = (!this.currentActiveStep || step.id !== this.currentActiveStep.id);
        if (this.useThfSteps && isDifferentStep && this.allowNextStep(stepIndex)) {
            this.controlStepsStatus(stepIndex, step);
            this.onChangeStep.emit(step);
        }
        else if (!this.useThfSteps && stepIndex !== this.currentStepIndex && this.allowNextStep(stepIndex)) {
            // if para tratamento do modelo antigo do thf-stepper
            this.onChangeStep.emit(stepIndex + 1);
        }
    }
    /**
     * @param {?} step
     * @return {?}
     */
    onStepActive(step) {
        this.currentActiveStep = step;
        this.previousActiveStep = this.thfSteps.find((/**
         * @param {?} stepChild
         * @return {?}
         */
        stepChild => stepChild.status === ThfStepperStatus.Active && stepChild.id !== step.id));
        this.setPreviousStepAsDone();
    }
    /**
     * @param {?} step
     * @return {?}
     */
    trackByFn(step) {
        return step.id;
    }
    /**
     * @private
     * @return {?}
     */
    activeFirstStep() {
        /** @type {?} */
        const hasStepActive = this.thfSteps.some((/**
         * @param {?} thfStep
         * @return {?}
         */
        thfStep => thfStep.status === ThfStepperStatus.Active));
        if (this.useThfSteps && !hasStepActive) {
            this.changeStep(0, this.thfSteps.first);
        }
    }
    /**
     * @private
     * @param {?} nextStepIndex
     * @return {?}
     */
    allowNextStep(nextStepIndex) {
        if (!this.sequential) {
            return true;
        }
        if (this.useThfSteps) {
            return this.isBeforeStep(nextStepIndex) || this.canActiveNextStep(this.currentActiveStep);
        }
        return this.steps.slice(this.step, nextStepIndex).every((/**
         * @param {?} step
         * @return {?}
         */
        step => step.status === ThfStepperStatus.Done));
    }
    /**
     * @private
     * @param {?=} currentActiveStep
     * @return {?}
     */
    canActiveNextStep(currentActiveStep = (/** @type {?} */ ({}))) {
        if (!currentActiveStep.canActiveNextStep) {
            return true;
        }
        /** @type {?} */
        const canActiveNextStep = currentActiveStep.canActiveNextStep(currentActiveStep);
        currentActiveStep.status = this.getStepperStatusByCanActive(canActiveNextStep);
        return canActiveNextStep;
    }
    /**
     * @private
     * @param {?} stepIndex
     * @param {?} step
     * @return {?}
     */
    controlStepsStatus(stepIndex, step) {
        if (this.useThfSteps) {
            this.setStepAsActive(step);
            this.setNextStepAsDefault(step);
            if (this.isBeforeStep(stepIndex)) {
                this.setFinalSteppersAsDisabled(stepIndex);
            }
            this.changeDetector.detectChanges();
        }
    }
    /**
     * @private
     * @param {?} canActiveNextStep
     * @return {?}
     */
    getStepperStatusByCanActive(canActiveNextStep) {
        return canActiveNextStep ? ThfStepperStatus.Done : ThfStepperStatus.Error;
    }
    /**
     * @private
     * @param {?=} step
     * @return {?}
     */
    getStepsAndIndex(step = (/** @type {?} */ ({}))) {
        /** @type {?} */
        const steps = this.getThfSteps();
        /** @type {?} */
        const stepIndex = steps.findIndex((/**
         * @param {?} thfStep
         * @return {?}
         */
        thfStep => thfStep.id === step.id));
        return { steps, stepIndex };
    }
    /**
     * @private
     * @return {?}
     */
    getThfSteps() {
        return this.thfSteps.toArray();
    }
    /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    isBeforeStep(stepIndex) {
        /** @type {?} */
        const currentActiveStepIndex = (/**
         * @return {?}
         */
        () => this.getThfSteps().findIndex((/**
         * @param {?} step
         * @return {?}
         */
        step => step.id === this.currentActiveStep.id)));
        return !!this.currentActiveStep && currentActiveStepIndex() >= stepIndex;
    }
    /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    setFinalSteppersAsDisabled(stepIndex) {
        this.getThfSteps()
            .filter((/**
         * @param {?} step
         * @param {?} index
         * @return {?}
         */
        (step, index) => step && index >= stepIndex + 2))
            .forEach((/**
         * @param {?} step
         * @return {?}
         */
        step => step.status = ThfStepperStatus.Disabled));
    }
    /**
     * @private
     * @param {?} step
     * @return {?}
     */
    setStepAsActive(step) {
        step.status = ThfStepperStatus.Active;
    }
    /**
     * @private
     * @param {?} currentStep
     * @return {?}
     */
    setNextStepAsDefault(currentStep) {
        const { steps, stepIndex } = this.getStepsAndIndex(currentStep);
        /** @type {?} */
        const nextIndex = stepIndex + 1;
        if (nextIndex < this.thfSteps.length) {
            steps[nextIndex].status = ThfStepperStatus.Default;
        }
    }
    /**
     * @private
     * @return {?}
     */
    setPreviousStepAsDone() {
        if (this.previousActiveStep) {
            this.previousActiveStep.status = ThfStepperStatus.Done;
        }
    }
}
ThfStepperComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-stepper',
                template: "<div class=\"thf-stepper thf-stepper-{{ orientation }}\">\n\n  <div class=\"thf-stepper-container\">\n    <thf-stepper-step *ngFor=\"let step of stepList; let index = index; trackBy: trackByFn\"\n      class=\"thf-stepper-step-position\"\n      [t-circle-content]=\"index+1\"\n      [t-label]=\"step.label\"\n      [t-orientation]=\"orientation\"\n      [t-status]=\"step.status\"\n      [t-step-icons]=\"stepIcons\"\n      [t-step-size]=\"stepSize\"\n      (t-activated)=\"onStepActive(step)\"\n      (t-click)=\"changeStep(index, step)\"\n      (t-enter)=\"changeStep(index, step)\">\n    </thf-stepper-step>\n  </div>\n\n  <div *ngIf=\"useThfSteps\" class=\"thf-stepper-content\">\n    <ng-content></ng-content>\n  </div>\n\n</div>\n"
            }] }
];
/** @nocollapse */
ThfStepperComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThfStepperComponent.propDecorators = {
    thfSteps: [{ type: ContentChildren, args: [ThfStepComponent,] }]
};
if (false) {
    /** @type {?} */
    ThfStepperComponent.prototype.thfSteps;
    /**
     * @type {?}
     * @private
     */
    ThfStepperComponent.prototype.currentActiveStep;
    /**
     * @type {?}
     * @private
     */
    ThfStepperComponent.prototype.previousActiveStep;
    /**
     * @type {?}
     * @private
     */
    ThfStepperComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,