/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, convertToBoolean, isTypeof, removeDuplicatedOptions, thfLocaleDefault, validValue } from '../../../utils/util';
import { requiredFailed } from '../validators';
import { ThfComboFilterMode } from './thf-combo-filter-mode.enum';
/** @type {?} */
const THF_COMBO_DEBOUNCE_TIME_DEFAULT = 400;
/** @type {?} */
const THF_COMBO_FIELD_LABEL_DEFAULT = 'label';
/** @type {?} */
const THF_COMBO_FIELD_VALUE_DEFAULT = 'value';
/** @type {?} */
export const thfComboLiteralsDefault = {
    en: (/** @type {?} */ ({
        noData: 'No data found'
    })),
    es: (/** @type {?} */ ({
        noData: 'Datos no encontrados'
    })),
    pt: (/** @type {?} */ ({
        noData: 'Nenhum dado encontrado'
    }))
};
/**
 * \@description
 *
 * O thf-combo, semelhante ao thf-select, exibe uma lista de valores e permite ao usuário fazer a seleção de um desses valores,
 * mas no caso do thf-combo, o usuário ainda consegue filtrar os valores disponibilizados para seleção.
 *
 * Também há a possibilidade de usar serviço no thf-combo, através da propriedade t-filter-service.
 *
 * O comportamento do thf-combo permite ao usuário:
 *  - selecionar um item através do mouse;
 *  - navegar pelos itens utilizando as setas do teclado confirmando a seleção com "Enter";
 *  - pesquisar os itens da lista de seleção e em seguida navegar com as setas ou com o mouse;
 *  - digitar a descrição completa.
 *
 * O thf-combo guarda o último valor caso o usuário desista de uma busca, deixando o campo ou teclando "ESC".
 * Caso seja digitado no campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada
 * ao deixar o campo ou pressionando "Enter".
 *
 * É necessário que os itens da lista de selecão contenham sempre valor (value) e descrição (label) para que os itens apareçam corretamente
 * no thf-combo, itens que não estejam implementando corretamenta a interface ThfComboOption, serão descartados.
 *
 * O thf-combo ainda permite definir o modo que será feito o filtro, através da propriedade t-filter-mode.
 * @abstract
 */
export class ThfComboBaseComponent {
    constructor() {
        this._changeOnEnter = false;
        this._debounceTime = 400;
        this._disabled = false;
        this._disabledInitFilter = false;
        this._fieldLabel = 'label';
        this._fieldValue = 'value';
        this._filterMinlength = 0;
        this._filterMode = ThfComboFilterMode.startsWith;
        this._options = [];
        this._required = false;
        this.cacheOptions = [];
        this.cacheStaticOptions = [];
        this.firstInWriteValue = true;
        this.isFirstFilter = true;
        this.isFiltering = false;
        this.previousSearchValue = '';
        this.visibleOptions = [];
        /**
         * Mensagem apresentada enquanto o campo estiver vazio.
         */
        this.placeholder = '';
        /**
         * Indica que a lista definida na propriedade t-options será ordenada pela descrição.
         */
        this.sort = false;
        /**
         * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de
     * itens no componente.
     * Caso haja a necessidade de customização, então pode ser informado um serviço implementando a interface ThfComboFilter.
     *
     * Caso utilizado uma URL, o serviço deve ser retornado no padrão API TOTVS e utiliza as propriedades
     * `t-field-label` e `t-field-value` para a construção da lista de itens.
     *
     * Quando utilizada uma URL de serviço, então será concateanada nesta URL o valor que deseja-se filtrar da seguinte forma:
     * ```
     * url + ?filter=Peter
     * ```
     * @param {?} service
     * @return {?}
     */
    set filterService(service) {
        this._filterService = service;
        this.configAfterSetFilterService(service);
    }
    /**
     * @return {?}
     */
    get filterService() {
        return this._filterService;
    }
    /**
     * \@optional
     *
     * \@description
     * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
     * Será utilizada apenas quando houver serviço (`t-filter-service`).
     *
     * \@default `400`
     * @param {?} value
     * @return {?}
     */
    set debounceTime(value) {
        /** @type {?} */
        const parsedValue = parseInt((/** @type {?} */ (value)), 10);
        this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : THF_COMBO_DEBOUNCE_TIME_DEFAULT;
        this.unsubscribeKeyupObservable();
        this.initInputObservable();
    }
    /**
     * @return {?}
     */
    get debounceTime() {
        return this._debounceTime;
    }
    /**
     * \@optional
     *
     * \@description
     * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
     *
     * \@default `false`
     *
     * @param {?} value
     * @return {?}
     */
    set disabledInitFilter(value) {
        this._disabledInitFilter = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get disabledInitFilter() {
        return this._disabledInitFilter;
    }
    /**
     * \@optional
     *
     * \@description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`t-options`), esta propriedade será responsável pelo valor de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * ThfComboOption.
     *
     * \@default `value`
     * @param {?} value
     * @return {?}
     */
    set fieldValue(value) {
        this._fieldValue = value || THF_COMBO_FIELD_VALUE_DEFAULT;
        if (isTypeof(this.filterService, 'string') && this.service) {
            this.service.fieldValue = this._fieldValue;
        }
    }
    /**
     * @return {?}
     */
    get fieldValue() {
        return this._fieldValue;
    }
    /**
     * \@optional
     *
     * \@description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`t-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * ThfComboOption.
     *
     * \@default `label`
     * @param {?} value
     * @return {?}
     */
    set fieldLabel(value) {
        this._fieldLabel = value || THF_COMBO_FIELD_LABEL_DEFAULT;
        if (isTypeof(this.filterService, 'string') && this.service) {
            this.service.fieldLabel = this._fieldLabel;
        }
    }
    /**
     * @return {?}
     */
    get fieldLabel() {
        return this._fieldLabel;
    }
    /**
     * \@optional
     *
     * \@description
     * Valor mínimo de caracteres para realizar o filtro no serviço.
     *
     * \@default `0`
     * @param {?} value
     * @return {?}
     */
    set filterMinlength(value) {
        /** @type {?} */
        const parseValue = (typeof value === 'string') ? parseInt(value, 10) : value;
        this._filterMinlength = Number.isInteger(parseValue) ? parseValue : 0;
    }
    /**
     * @return {?}
     */
    get filterMinlength() {
        return this._filterMinlength;
    }
    /**
     * \@optional
     *
     * \@description
     * Indica que o campo será obrigatório.
     *
     * \@default `false`
     * @param {?} required
     * @return {?}
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.selectedValue);
    }
    /**
     * @return {?}
     */
    get required() {
        return this._required;
    }
    /**
     * \@optional
     *
     * \@description
     * Indica que o evento `t-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
     *
     * \@default `false`
     * @param {?} changeOnEnter
     * @return {?}
     */
    set changeOnEnter(changeOnEnter) {
        this._changeOnEnter = convertToBoolean(changeOnEnter);
    }
    /**
     * @return {?}
     */
    get changeOnEnter() {
        return this._changeOnEnter;
    }
    /**
     * \@optional
     *
     * \@description
     * Indica que o campo será desabilitado.
     *
     * \@default `false`
     * @param {?} disabled
     * @return {?}
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
        this.validateModel(this.selectedValue);
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfComboOption.
     * Esta lista conterá os valores e as descrições que serão apresentados na tela.
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options = Array.isArray(options) ? options : [];
        this.cacheStaticOptions = this.options;
        this.validAndSortOptions();
        removeDuplicatedOptions(this.options);
        this.updateComboList();
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * @param {?} sort
     * @return {?}
     */
    set setSort(sort) {
        this.sort = sort === '' ? true : convertToBoolean(sort);
        this.validAndSortOptions();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
     *
     * > Quando utilizar a propriedade `t-filter-service` esta propriedade será ignorada.
     *
     * \@default `startsWith`
     * @param {?} filterMode
     * @return {?}
     */
    set filterMode(filterMode) {
        this._filterMode = (filterMode in ThfComboFilterMode) ? filterMode : ThfComboFilterMode.startsWith;
        switch (this._filterMode.toString()) {
            case 'startsWith':
                this._filterMode = ThfComboFilterMode.startsWith;
                break;
            case 'contains':
                this._filterMode = ThfComboFilterMode.contains;
                break;
            case 'endsWith':
                this._filterMode = ThfComboFilterMode.endsWith;
                break;
        }
    }
    /**
     * @return {?}
     */
    get filterMode() {
        return this._filterMode;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Valor que será repassado como parâmetro aos métodos do serviço que implementam a interface *ThfComboFilter*.
     * @param {?} filterParams
     * @return {?}
     */
    set filterParams(filterParams) {
        this._filterParams = (filterParams || filterParams === 0 || filterParams === false) ? filterParams : undefined;
    }
    /**
     * @return {?}
     */
    get filterParams() {
        return this._filterParams;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto com as literais usadas no `thf-combo`.
     *
     * Para utilizar basta passar a literal que deseja customizar:
     *
     * ```
     *  const customLiterals: ThfComboLiterals = {
     *    noData: 'Nenhum valor'
     *  };
     * ```
     *
     * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
     *
     * ```
     * <thf-combo
     *   [t-literals]="customLiterals">
     * </thf-combo>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, thfComboLiteralsDefault[thfLocaleDefault], thfComboLiteralsDefault[browserLanguage()], value);
        }
        else {
            this._literals = thfComboLiteralsDefault[browserLanguage()];
        }
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || thfComboLiteralsDefault[browserLanguage()];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.updateComboList();
    }
    /**
     * @return {?}
     */
    onInitService() {
        if (this.filterService) {
            this.setService(this.filterService);
            this.initInputObservable();
        }
    }
    /**
     * @param {?} service
     * @return {?}
     */
    setService(service) {
        if (service) {
            if (isTypeof(service, 'object')) {
                this.service = (/** @type {?} */ (service));
            }
            else {
                this.service = this.defaultService;
                this.service.configProperties((/** @type {?} */ (service)), this.fieldLabel, this.fieldValue);
            }
        }
    }
    /**
     * @return {?}
     */
    validAndSortOptions() {
        if (this.options && this.options.length > 0) {
            // Remove os objetos que não contém valor e atribui o valor ao label caso este esteja vazio
            for (let i = 0; i < this.options.length; i++) {
                if (!validValue(this.options[i]['value'])) {
                    this.options.splice(i, 1);
                }
                else if (!this.options[i]['label']) {
                    this.options[i]['label'] = this.options[i]['value'].toString();
                }
            }
        }
        this.sortOptions();
    }
    /**
     * @return {?}
     */
    sortOptions() {
        if (this.options && this.options.length > 0 && this.sort) {
            this.options.sort(this.compareOptions);
        }
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    compareOptions(a, b) {
        if (a.label.toString().toLowerCase() < b.label.toString().toLowerCase()) {
            return -1;
        }
        if (a.label.toString().toLowerCase() > b.label.toString().toLowerCase()) {
            return 1;
        }
        return 0;
    }
    /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    compareMethod(search, option, filterMode) {
        switch (filterMode) {
            case ThfComboFilterMode.startsWith:
                return this.startsWith(search, option);
            case ThfComboFilterMode.contains:
                return this.contains(search, option);
            case ThfComboFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    }
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    startsWith(search, option) {
        return option.label.toLowerCase().startsWith(search.toLowerCase());
    }
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    contains(search, option) {
        return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
    }
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    endsWith(search, option) {
        return option.label.toLowerCase().endsWith(search.toLowerCase());
    }
    /**
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    getOptionFromValue(value, options) {
        return (options) ? options.find((/**
         * @param {?} option
         * @return {?}
         */
        (option) => this.isEqual(option.value, value))) : null;
    }
    /**
     * @param {?} label
     * @param {?} options
     * @return {?}
     */
    getOptionFromLabel(label, options) {
        if (options) {
            return options.find((/**
             * @param {?} option
             * @return {?}
             */
            (option) => {
                return option.label.toString().toLowerCase() === label.toString().toLowerCase();
            }));
        }
        else {
            return null;
        }
    }
    /**
     * @param {?} option
     * @param {?=} isUpdateModel
     * @param {?=} isWriteValue
     * @return {?}
     */
    updateSelectedValue(option, isUpdateModel = true, isWriteValue = false) {
        /** @type {?} */
        const optionLabel = option && option.label || '';
        this.updateInternalVariables(option);
        // atualiza o valor do input quando for changeOnEnter apenas se for para atualizar o model.
        if (this.changeOnEnter && isUpdateModel) {
            this.setInputValue(optionLabel);
        }
        else if (!this.changeOnEnter) {
            this.setInputValue(optionLabel);
        }
        if (isUpdateModel) {
            /** @type {?} */
            const optionValue = option && option.value || undefined;
            this.updateModel(optionValue, isWriteValue);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    callModelChange(value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);
    }
    /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    isEqual(value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) ||
            (value === undefined && inputValue !== undefined)) {
            value = `${value}`; // Transformando em string
        }
        return value === inputValue;
    }
    /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    searchForLabel(search, options, filterMode) {
        if (search && options && options.length) {
            /** @type {?} */
            const newOptions = [];
            options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            option => {
                if (option.label && (this.compareMethod(search, option, filterMode) || this.service)) {
                    newOptions.push(option);
                }
            }));
            this.selectedView = newOptions[0];
            this.updateComboList(newOptions);
        }
        else {
            this.updateComboList();
        }
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    updateComboList(options) {
        /** @type {?} */
        const copyOptions = options || [...this.options];
        /** @type {?} */
        const newOptions = !options && this.selectedValue ? [Object.assign({}, this.selectedOption)] : copyOptions;
        if (newOptions) {
            this.visibleOptions = newOptions;
            if (!this.selectedView && this.visibleOptions.length) {
                this.selectedView = this.visibleOptions[0];
            }
        }
    }
    /**
     * @param {?} value
     * @param {?} options
     * @param {?=} reverse
     * @return {?}
     */
    getNextOption(value, options, reverse = false) {
        /** @type {?} */
        const newOptions = [].concat(options);
        /** @type {?} */
        let optionFound = null;
        /** @type {?} */
        let found = false;
        if (reverse) {
            newOptions.reverse();
        }
        for (let i = 0; i < newOptions.length; i++) {
            /** @type {?} */
            const option = newOptions[i];
            if (!optionFound) {
                optionFound = option;
            }
            if (found) {
                return option;
            }
            if (this.isEqual(option.value, value)) {
                found = true;
            }
        }
        return optionFound;
    }
    /**
     * @return {?}
     */
    getIndexSelectedView() {
        for (let i = 0; i < this.visibleOptions.length; i++) {
            if (this.compareObjects(this.visibleOptions[i], this.selectedView)) {
                return i;
            }
        }
        return null;
    }
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    compareObjects(obj1, obj2) {
        return JSON.stringify(obj1) === JSON.stringify(obj2);
    }
    /**
     * @return {?}
     */
    verifyValidOption() {
        /** @type {?} */
        const inputValue = this.getInputValue();
        /** @type {?} */
        const optionFound = this.getOptionFromLabel(inputValue, this.options);
        if (optionFound && optionFound.value !== this.selectedValue) {
            this.updateSelectedValue(optionFound);
            this.previousSearchValue = optionFound.label;
            return;
        }
        else if (this.selectedValue && this.selectedOption && this.selectedOption.label !== inputValue) {
            this.updateSelectedValueWithOldOption();
            this.previousSearchValue = this.selectedOption.label;
            return;
        }
        else if (inputValue && !optionFound) {
            /** @type {?} */
            const isInputValueDiffSelectedLabel = !!(this.selectedOption && this.selectedOption.label !== inputValue);
            this.updateSelectedValue(null, isInputValueDiffSelectedLabel || this.changeOnEnter);
            this.previousSearchValue = '';
            return;
        }
    }
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (validValue(value) && !this.service && this.options && this.options.length) {
            /** @type {?} */
            const option = this.getOptionFromValue(value, this.options);
            this.updateSelectedValue(option);
            this.updateComboList();
            return;
        }
        // Se houver serviço busca pelo model.
        if (value && this.service) {
            return this.getObjectByValue(value);
        }
        if (!validValue(value)) {
            this.updateSelectedValue(null, true, true);
            this.updateComboList();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    validate(abstractControl) {
        if ((requiredFailed(this.required, this.disabled, abstractControl.value))) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    }
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    /**
     * @private
     * @param {?} service
     * @return {?}
     */
    configAfterSetFilterService(service) {
        if (service) {
            this.options = [];
            this.unsubscribeKeyupObservable();
            this.onInitService();
        }
        else {
            this.service = undefined;
            this.options = this.cacheStaticOptions;
        }
        this.visibleOptions = [];
        this.isFirstFilter = true;
    }
    /**
     * @private
     * @return {?}
     */
    unsubscribeKeyupObservable() {
        if (this.keyupSubscribe) {
            this.keyupSubscribe.unsubscribe();
        }
    }
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    updateInternalVariables(option) {
        if (option) {
            this.selectedView = option;
            this.selectedOption = option;
        }
        else {
            this.selectedView = undefined;
            this.selectedOption = undefined;
        }
    }
    /**
     * @private
     * @param {?} value
     * @param {?=} fromWriteValue
     * @return {?}
     */
    updateModel(value, fromWriteValue = false) {
        if (value !== this.selectedValue) {
            if (!fromWriteValue) {
                this.callModelChange(value);
            }
            this.change.emit(value);
        }
        this.selectedValue = value;
    }
    /**
     * @private
     * @return {?}
     */
    updateSelectedValueWithOldOption() {
        /** @type {?} */
        const oldOption = this.getOptionFromValue(this.selectedValue, this.options);
        if (oldOption && oldOption.label) {
            return this.updateSelectedValue(oldOption);
        }
    }
}
ThfComboBaseComponent.propDecorators = {
    label: [{ type: Input, args: ['t-label',] }],
    help: [{ type: Input, args: ['t-help',] }],
    placeholder: [{ type: Input, args: ['t-placeholder',] }],
    name: [{ type: Input, args: ['name',] }],
    filterService: [{ type: Input, args: ['t-filter-service',] }],
    debounceTime: [{ type: Input, args: ['t-debounce-time',] }],
    disabledInitFilter: [{ type: Input, args: ['t-disabled-init-filter',] }],
    fieldValue: [{ type: Input, args: ['t-field-value',] }],
    fieldLabel: [{ type: Input, args: ['t-field-label',] }],
    filterMinlength: [{ type: Input, args: ['t-filter-minlength',] }],
    required: [{ type: Input, args: ['t-required',] }],
    changeOnEnter: [{ type: Input, args: ['t-change-on-enter',] }],
    disabled: [{ type: Input, args: ['t-disabled',] }],
    icon: [{ type: Input, args: ['t-icon',] }],
    options: [{ type: Input, args: ['t-options',] }],
    optional: [{ type: Input, args: ['t-optional',] }],
    setSort: [{ type: Input, args: ['t-sort',] }],
    filterMode: [{ type: Input, args: ['t-filter-mode',] }],
    filterParams: [{ type: Input, args: ['t-filter-params',] }],
    literals: [{ type: Input, args: ['t-literals',] }],
    change: [{ type: Output, args: ['t-change',] }],
    ngModelChange: [{ type: Output, args: ['ngModelChange',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._changeOnEnter;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._debounceTime;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._disabledInitFilter;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._fieldLabel;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._fieldValue;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._filterMinlength;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._filterMode;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._filterParams;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._filterService;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype._required;
    /** @type {?} */
    ThfComboBaseComponent.prototype.cacheOptions;
    /** @type {?} */
    ThfComboBaseComponent.prototype.cacheStaticOptions;
    /** @type {?} */
    ThfComboBaseComponent.prototype.defaultService;
    /** @type {?} */
    ThfComboBaseComponent.prototype.firstInWriteValue;
    /** @type {?} */
    ThfComboBaseComponent.prototype.isFirstFilter;
    /** @type {?} */
    ThfComboBaseComponent.prototype.isFiltering;
    /** @type {?} */
    ThfComboBaseComponent.prototype.keyupSubscribe;
    /** @type {?} */
    ThfComboBaseComponent.prototype.onModelChange;
    /** @type {?} */
    ThfComboBaseComponent.prototype.onModelTouched;
    /** @type {?} */
    ThfComboBaseComponent.prototype.previousSearchValue;
    /** @type {?} */
    ThfComboBaseComponent.prototype.selectedOption;
    /** @type {?} */
    ThfComboBaseComponent.prototype.selectedValue;
    /** @type {?} */
    ThfComboBaseComponent.prototype.selectedView;
    /** @type {?} */
    ThfComboBaseComponent.prototype.service;
    /** @type {?} */
    ThfComboBaseComponent.prototype.visibleOptions;
    /**
     * @type {?}
     * @private
     */
    ThfComboBaseComponent.prototype.validatorChange;
    /**
     * Label no componente.
     * @type {?}
     */
    ThfComboBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    ThfComboBaseComponent.prototype.help;
    /**
     * Mensagem apresentada enquanto o campo estiver vazio.
     * @type {?}
     */
    ThfComboBaseComponent.prototype.placeholder;
    /**
     * Nome do componente.
     * @type {?}
     */
    ThfComboBaseComponent.prototype.name;
    /**
     * \@optional
     *
     * \@description
     *
     * Define o ícone que será exibido no início do campo.
     *
     * > Veja a disponibilidade de ícones em [biblioteca de ícones](guides/icons).
     * @type {?}
     */
    ThfComboBaseComponent.prototype.icon;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `t-required`;
     * - Não possuir `t-help` e/ou `t-label`.
     *
     * \@default `false`
     * @type {?}
     */
    ThfComboBaseComponent.prototype.optional;
    /**
     * Indica que a lista definida na propriedade t-options será ordenada pela descrição.
     * @type {?}
     */
    ThfComboBaseComponent.prototype.sort;
    /**
     * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
     * @type {?}
     */
    ThfComboBaseComponent.prototype.change;
    /** @type {?} */
    ThfComboBaseComponent.prototype.ngModelChange;
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfComboBaseComponent.prototype.setInputValue = function (value) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfComboBaseComponent.prototype.applyFilter = function (value) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfComboBaseComponent.prototype.getObjectByValue = function (value) { };
    /**
     * @abstract
     * @return {?}
     */
    ThfComboBaseComponent.prototype.getInputValue = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ThfComboBaseComponent.prototype.initInputObservable = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWNvbWJvLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1maWVsZC90aGYtY29tYm8vdGhmLWNvbWJvLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFcEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDekksT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUcvQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7TUFLNUQsK0JBQStCLEdBQUcsR0FBRzs7TUFDckMsNkJBQTZCLEdBQUcsT0FBTzs7TUFDdkMsNkJBQTZCLEdBQUcsT0FBTzs7QUFFN0MsTUFBTSxPQUFPLHVCQUF1QixHQUFHO0lBQ3JDLEVBQUUsRUFBRSxtQkFBbUI7UUFDckIsTUFBTSxFQUFFLGVBQWU7S0FDeEIsRUFBQTtJQUNELEVBQUUsRUFBRSxtQkFBbUI7UUFDckIsTUFBTSxFQUFFLHNCQUFzQjtLQUMvQixFQUFBO0lBQ0QsRUFBRSxFQUFFLG1CQUFtQjtRQUNyQixNQUFNLEVBQUUsd0JBQXdCO0tBQ2pDLEVBQUE7Q0FDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCRCxNQUFNLE9BQWdCLHFCQUFxQjtJQUEzQztRQUVVLG1CQUFjLEdBQWEsS0FBSyxDQUFDO1FBQ2pDLGtCQUFhLEdBQVksR0FBRyxDQUFDO1FBQzdCLGNBQVMsR0FBYSxLQUFLLENBQUM7UUFDNUIsd0JBQW1CLEdBQWEsS0FBSyxDQUFDO1FBQ3RDLGdCQUFXLEdBQVksT0FBTyxDQUFDO1FBQy9C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MEJyQixLQUFLLFNBQUMsaUJBQWlCO3VCQWlDdkIsS0FBSyxTQUFDLFlBQVk7cUJBaUJsQixNQUFNLFNBQUMsVUFBVTs0QkFHakIsTUFBTSxTQUFDLGVBQWU7Ozs7Ozs7SUFqWHZCLCtDQUF5Qzs7Ozs7SUFDekMsOENBQXFDOzs7OztJQUNyQywwQ0FBb0M7Ozs7O0lBQ3BDLG9EQUE4Qzs7Ozs7SUFDOUMsNENBQXVDOzs7OztJQUN2Qyw0Q0FBdUM7Ozs7O0lBQ3ZDLGlEQUFzQzs7Ozs7SUFDdEMsNENBQXlFOzs7OztJQUN6RSw4Q0FBNEI7Ozs7O0lBQzVCLCtDQUFpRDs7Ozs7SUFDakQsMENBQXFDOzs7OztJQUNyQyx5Q0FBNkM7Ozs7O0lBQzdDLDBDQUFvQzs7SUFFcEMsNkNBQXlDOztJQUN6QyxtREFBK0M7O0lBQy9DLCtDQUFzQzs7SUFDdEMsa0RBQWtDOztJQUNsQyw4Q0FBOEI7O0lBQzlCLDRDQUE2Qjs7SUFDN0IsK0NBQW9COztJQUNwQiw4Q0FBbUI7O0lBQ25CLCtDQUFvQjs7SUFDcEIsb0RBQWlDOztJQUNqQywrQ0FBK0I7O0lBQy9CLDhDQUFtQjs7SUFDbkIsNkNBQWtCOztJQUNsQix3Q0FBK0I7O0lBQy9CLCtDQUEyQzs7Ozs7SUFFM0MsZ0RBQTZCOzs7OztJQUc3QixzQ0FBaUM7Ozs7O0lBR2pDLHFDQUErQjs7Ozs7SUFHL0IsNENBQWtEOzs7OztJQUdsRCxxQ0FBNEI7Ozs7Ozs7Ozs7O0lBa001QixxQ0FBK0I7Ozs7Ozs7Ozs7Ozs7OztJQWlDL0IseUNBQXVDOzs7OztJQUd2QyxxQ0FBdUI7Ozs7O0lBOEZ2Qix1Q0FBeUU7O0lBR3pFLDhDQUFxRjs7Ozs7O0lBRXJGLHFFQUF5Qzs7Ozs7O0lBRXpDLG1FQUEwQzs7Ozs7O0lBRTFDLHdFQUErQzs7Ozs7SUFFL0MsZ0VBQWlDOzs7OztJQUVqQyxzRUFBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBicm93c2VyTGFuZ3VhZ2UsIGNvbnZlcnRUb0Jvb2xlYW4sIGlzVHlwZW9mLCByZW1vdmVEdXBsaWNhdGVkT3B0aW9ucywgdGhmTG9jYWxlRGVmYXVsdCwgdmFsaWRWYWx1ZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgcmVxdWlyZWRGYWlsZWQgfSBmcm9tICcuLi92YWxpZGF0b3JzJztcblxuaW1wb3J0IHsgVGhmQ29tYm9GaWx0ZXIgfSBmcm9tICcuL2ludGVyZmFjZXMvdGhmLWNvbWJvLWZpbHRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGhmQ29tYm9GaWx0ZXJNb2RlIH0gZnJvbSAnLi90aGYtY29tYm8tZmlsdGVyLW1vZGUuZW51bSc7XG5pbXBvcnQgeyBUaGZDb21ib0ZpbHRlclNlcnZpY2UgfSBmcm9tICcuL3RoZi1jb21iby1maWx0ZXIuc2VydmljZSc7XG5pbXBvcnQgeyBUaGZDb21ib0xpdGVyYWxzIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3RoZi1jb21iby1saXRlcmFscy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGhmQ29tYm9PcHRpb24gfSBmcm9tICcuL2ludGVyZmFjZXMvdGhmLWNvbWJvLW9wdGlvbi5pbnRlcmZhY2UnO1xuXG5jb25zdCBUSEZfQ09NQk9fREVCT1VOQ0VfVElNRV9ERUZBVUxUID0gNDAwO1xuY29uc3QgVEhGX0NPTUJPX0ZJRUxEX0xBQkVMX0RFRkFVTFQgPSAnbGFiZWwnO1xuY29uc3QgVEhGX0NPTUJPX0ZJRUxEX1ZBTFVFX0RFRkFVTFQgPSAndmFsdWUnO1xuXG5leHBvcnQgY29uc3QgdGhmQ29tYm9MaXRlcmFsc0RlZmF1bHQgPSB7XG4gIGVuOiA8VGhmQ29tYm9MaXRlcmFscz4ge1xuICAgIG5vRGF0YTogJ05vIGRhdGEgZm91bmQnXG4gIH0sXG4gIGVzOiA8VGhmQ29tYm9MaXRlcmFscz4ge1xuICAgIG5vRGF0YTogJ0RhdG9zIG5vIGVuY29udHJhZG9zJ1xuICB9LFxuICBwdDogPFRoZkNvbWJvTGl0ZXJhbHM+IHtcbiAgICBub0RhdGE6ICdOZW5odW0gZGFkbyBlbmNvbnRyYWRvJ1xuICB9XG59O1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gdGhmLWNvbWJvLCBzZW1lbGhhbnRlIGFvIHRoZi1zZWxlY3QsIGV4aWJlIHVtYSBsaXN0YSBkZSB2YWxvcmVzIGUgcGVybWl0ZSBhbyB1c3XDoXJpbyBmYXplciBhIHNlbGXDp8OjbyBkZSB1bSBkZXNzZXMgdmFsb3JlcyxcbiAqIG1hcyBubyBjYXNvIGRvIHRoZi1jb21ibywgbyB1c3XDoXJpbyBhaW5kYSBjb25zZWd1ZSBmaWx0cmFyIG9zIHZhbG9yZXMgZGlzcG9uaWJpbGl6YWRvcyBwYXJhIHNlbGXDp8Ojby5cbiAqXG4gKiBUYW1iw6ltIGjDoSBhIHBvc3NpYmlsaWRhZGUgZGUgdXNhciBzZXJ2acOnbyBubyB0aGYtY29tYm8sIGF0cmF2w6lzIGRhIHByb3ByaWVkYWRlIHQtZmlsdGVyLXNlcnZpY2UuXG4gKlxuICogTyBjb21wb3J0YW1lbnRvIGRvIHRoZi1jb21ibyBwZXJtaXRlIGFvIHVzdcOhcmlvOlxuICogIC0gc2VsZWNpb25hciB1bSBpdGVtIGF0cmF2w6lzIGRvIG1vdXNlO1xuICogIC0gbmF2ZWdhciBwZWxvcyBpdGVucyB1dGlsaXphbmRvIGFzIHNldGFzIGRvIHRlY2xhZG8gY29uZmlybWFuZG8gYSBzZWxlw6fDo28gY29tIFwiRW50ZXJcIjtcbiAqICAtIHBlc3F1aXNhciBvcyBpdGVucyBkYSBsaXN0YSBkZSBzZWxlw6fDo28gZSBlbSBzZWd1aWRhIG5hdmVnYXIgY29tIGFzIHNldGFzIG91IGNvbSBvIG1vdXNlO1xuICogIC0gZGlnaXRhciBhIGRlc2NyacOnw6NvIGNvbXBsZXRhLlxuICpcbiAqIE8gdGhmLWNvbWJvIGd1YXJkYSBvIMO6bHRpbW8gdmFsb3IgY2FzbyBvIHVzdcOhcmlvIGRlc2lzdGEgZGUgdW1hIGJ1c2NhLCBkZWl4YW5kbyBvIGNhbXBvIG91IHRlY2xhbmRvIFwiRVNDXCIuXG4gKiBDYXNvIHNlamEgZGlnaXRhZG8gbm8gY2FtcG8gZGUgYnVzY2EgYSBkZXNjcmnDp8OjbyBjb21wbGV0YSBkZSB1bSBpdGVtLCBlbnTDo28gYSBzZWxlw6fDo28gc2Vyw6EgYXV0b21hdGljYW1lbnRlIGVmZXR1YWRhXG4gKiBhbyBkZWl4YXIgbyBjYW1wbyBvdSBwcmVzc2lvbmFuZG8gXCJFbnRlclwiLlxuICpcbiAqIMOJIG5lY2Vzc8OhcmlvIHF1ZSBvcyBpdGVucyBkYSBsaXN0YSBkZSBzZWxlY8OjbyBjb250ZW5oYW0gc2VtcHJlIHZhbG9yICh2YWx1ZSkgZSBkZXNjcmnDp8OjbyAobGFiZWwpIHBhcmEgcXVlIG9zIGl0ZW5zIGFwYXJlw6dhbSBjb3JyZXRhbWVudGVcbiAqIG5vIHRoZi1jb21ibywgaXRlbnMgcXVlIG7Do28gZXN0ZWphbSBpbXBsZW1lbnRhbmRvIGNvcnJldGFtZW50YSBhIGludGVyZmFjZSBUaGZDb21ib09wdGlvbiwgc2Vyw6NvIGRlc2NhcnRhZG9zLlxuICpcbiAqIE8gdGhmLWNvbWJvIGFpbmRhIHBlcm1pdGUgZGVmaW5pciBvIG1vZG8gcXVlIHNlcsOhIGZlaXRvIG8gZmlsdHJvLCBhdHJhdsOpcyBkYSBwcm9wcmllZGFkZSB0LWZpbHRlci1tb2RlLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGhmQ29tYm9CYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCwgVmFsaWRhdG9yIHtcblxuICBwcml2YXRlIF9jaGFuZ2VPbkVudGVyPzogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF9kZWJvdW5jZVRpbWU/OiBudW1iZXIgPSA0MDA7XG4gIHByaXZhdGUgX2Rpc2FibGVkPzogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF9kaXNhYmxlZEluaXRGaWx0ZXI/OiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX2ZpZWxkTGFiZWw/OiBzdHJpbmcgPSAnbGFiZWwnO1xuICBwcml2YXRlIF9maWVsZFZhbHVlPzogc3RyaW5nID0gJ3ZhbHVlJztcbiAgcHJpdmF0ZSBfZmlsdGVyTWlubGVuZ3RoPzogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfZmlsdGVyTW9kZT86IFRoZkNvbWJvRmlsdGVyTW9kZSA9IFRoZkNvbWJvRmlsdGVyTW9kZS5zdGFydHNXaXRoO1xuICBwcml2YXRlIF9maWx0ZXJQYXJhbXM/OiBhbnk7XG4gIHByaXZhdGUgX2ZpbHRlclNlcnZpY2U/OiBUaGZDb21ib0ZpbHRlciB8IHN0cmluZztcbiAgcHJpdmF0ZSBfbGl0ZXJhbHM/OiBUaGZDb21ib0xpdGVyYWxzO1xuICBwcml2YXRlIF9vcHRpb25zOiBBcnJheTxUaGZDb21ib09wdGlvbj4gPSBbXTtcbiAgcHJpdmF0ZSBfcmVxdWlyZWQ/OiBib29sZWFuID0gZmFsc2U7XG5cbiAgY2FjaGVPcHRpb25zOiBBcnJheTxUaGZDb21ib09wdGlvbj4gPSBbXTtcbiAgY2FjaGVTdGF0aWNPcHRpb25zOiBBcnJheTxUaGZDb21ib09wdGlvbj4gPSBbXTtcbiAgZGVmYXVsdFNlcnZpY2U6IFRoZkNvbWJvRmlsdGVyU2VydmljZTtcbiAgZmlyc3RJbldyaXRlVmFsdWU6IGJvb2xlYW4gPSB0cnVlO1xuICBpc0ZpcnN0RmlsdGVyOiBib29sZWFuID0gdHJ1ZTtcbiAgaXNGaWx0ZXJpbmc6IGJvb2xlYW4gPSBmYWxzZTtcbiAga2V5dXBTdWJzY3JpYmU6IGFueTtcbiAgb25Nb2RlbENoYW5nZTogYW55O1xuICBvbk1vZGVsVG91Y2hlZDogYW55O1xuICBwcmV2aW91c1NlYXJjaFZhbHVlOiBzdHJpbmcgPSAnJztcbiAgc2VsZWN0ZWRPcHRpb246IFRoZkNvbWJvT3B0aW9uO1xuICBzZWxlY3RlZFZhbHVlOiBhbnk7XG4gIHNlbGVjdGVkVmlldzogYW55O1xuICBzZXJ2aWNlOiBUaGZDb21ib0ZpbHRlclNlcnZpY2U7XG4gIHZpc2libGVPcHRpb25zOiBBcnJheTxUaGZDb21ib09wdGlvbj4gPSBbXTtcblxuICBwcml2YXRlIHZhbGlkYXRvckNoYW5nZTogYW55O1xuXG4gIC8qKiBMYWJlbCBubyBjb21wb25lbnRlLiAqL1xuICBASW5wdXQoJ3QtbGFiZWwnKSBsYWJlbD86IHN0cmluZztcblxuICAvKiogVGV4dG8gZGUgYXBvaW8gcGFyYSBvIGNhbXBvLiAqL1xuICBASW5wdXQoJ3QtaGVscCcpIGhlbHA/OiBzdHJpbmc7XG5cbiAgLyoqIE1lbnNhZ2VtIGFwcmVzZW50YWRhIGVucXVhbnRvIG8gY2FtcG8gZXN0aXZlciB2YXppby4gKi9cbiAgQElucHV0KCd0LXBsYWNlaG9sZGVyJykgcGxhY2Vob2xkZXI/OiBzdHJpbmcgPSAnJztcblxuICAvKiogTm9tZSBkbyBjb21wb25lbnRlLiAqL1xuICBASW5wdXQoJ25hbWUnKSBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogTmVzdGEgcHJvcHJpZWRhZGUgZGV2ZSBzZXIgaW5mb3JtYWRhIGEgVVJMIGRvIHNlcnZpw6dvIGVtIHF1ZSBzZXLDoSByZWFsaXphZG8gbyBmaWx0cm8gcGFyYSBjYXJyZWdhbWVudG8gZGEgbGlzdGEgZGVcbiAgICogaXRlbnMgbm8gY29tcG9uZW50ZS5cbiAgICogQ2FzbyBoYWphIGEgbmVjZXNzaWRhZGUgZGUgY3VzdG9taXphw6fDo28sIGVudMOjbyBwb2RlIHNlciBpbmZvcm1hZG8gdW0gc2VydmnDp28gaW1wbGVtZW50YW5kbyBhIGludGVyZmFjZSBUaGZDb21ib0ZpbHRlci5cbiAgICpcbiAgICogQ2FzbyB1dGlsaXphZG8gdW1hIFVSTCwgbyBzZXJ2acOnbyBkZXZlIHNlciByZXRvcm5hZG8gbm8gcGFkcsOjbyBBUEkgVE9UVlMgZSB1dGlsaXphIGFzIHByb3ByaWVkYWRlc1xuICAgKiBgdC1maWVsZC1sYWJlbGAgZSBgdC1maWVsZC12YWx1ZWAgcGFyYSBhIGNvbnN0cnXDp8OjbyBkYSBsaXN0YSBkZSBpdGVucy5cbiAgICpcbiAgICogUXVhbmRvIHV0aWxpemFkYSB1bWEgVVJMIGRlIHNlcnZpw6dvLCBlbnTDo28gc2Vyw6EgY29uY2F0ZWFuYWRhIG5lc3RhIFVSTCBvIHZhbG9yIHF1ZSBkZXNlamEtc2UgZmlsdHJhciBkYSBzZWd1aW50ZSBmb3JtYTpcbiAgICogYGBgXG4gICAqIHVybCArID9maWx0ZXI9UGV0ZXJcbiAgICogYGBgXG4gICAqL1xuICBASW5wdXQoJ3QtZmlsdGVyLXNlcnZpY2UnKSBzZXQgZmlsdGVyU2VydmljZShzZXJ2aWNlOiBUaGZDb21ib0ZpbHRlciB8IHN0cmluZykge1xuICAgIHRoaXMuX2ZpbHRlclNlcnZpY2UgPSBzZXJ2aWNlO1xuXG4gICAgdGhpcy5jb25maWdBZnRlclNldEZpbHRlclNlcnZpY2Uoc2VydmljZSk7XG4gIH1cblxuICBnZXQgZmlsdGVyU2VydmljZSgpOiBUaGZDb21ib0ZpbHRlciB8IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpbHRlclNlcnZpY2U7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBFc3RhIHByb3ByaWVkYWRlIGRlZmluZSBlbSBxdWFudG8gdGVtcG8gKGVtIG1pbGlzc2VndW5kb3MpLCBhZ3VhcmRhIHBhcmEgYWNpb25hciBvIGV2ZW50byBkZSBmaWx0cm8gYXDDs3MgY2FkYSBwcmVzc2lvbmFtZW50byBkZSB0ZWNsYS5cbiAgICogU2Vyw6EgdXRpbGl6YWRhIGFwZW5hcyBxdWFuZG8gaG91dmVyIHNlcnZpw6dvIChgdC1maWx0ZXItc2VydmljZWApLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgNDAwYFxuICAgKi9cbiAgQElucHV0KCd0LWRlYm91bmNlLXRpbWUnKSBzZXQgZGVib3VuY2VUaW1lKHZhbHVlOiBudW1iZXIpIHtcbiAgICBjb25zdCBwYXJzZWRWYWx1ZSA9IHBhcnNlSW50KDxhbnk+IHZhbHVlLCAxMCk7XG5cbiAgICB0aGlzLl9kZWJvdW5jZVRpbWUgPSAhaXNOYU4ocGFyc2VkVmFsdWUpICYmIHBhcnNlZFZhbHVlID4gMCA/IHBhcnNlZFZhbHVlIDogVEhGX0NPTUJPX0RFQk9VTkNFX1RJTUVfREVGQVVMVDtcblxuICAgIHRoaXMudW5zdWJzY3JpYmVLZXl1cE9ic2VydmFibGUoKTtcbiAgICB0aGlzLmluaXRJbnB1dE9ic2VydmFibGUoKTtcbiAgfVxuXG4gIGdldCBkZWJvdW5jZVRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZGVib3VuY2VUaW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGVzYWJpbGl0YSBvIGZpbHRybyBpbmljaWFsIG5vIHNlcnZpw6dvLCBxdWUgw6kgZXhlY3V0YWRvIG5vIHByaW1laXJvIGNsaXF1ZSBubyBjYW1wby5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKlxuICAgKi9cbiAgQElucHV0KCd0LWRpc2FibGVkLWluaXQtZmlsdGVyJykgc2V0IGRpc2FibGVkSW5pdEZpbHRlcih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkSW5pdEZpbHRlciA9IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IGRpc2FibGVkSW5pdEZpbHRlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWRJbml0RmlsdGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGV2ZSBzZXIgaW5mb3JtYWRvIG8gbm9tZSBkYSBwcm9wcmllZGFkZSBkbyBvYmpldG8gcXVlIHNlcsOhIHV0aWxpemFkbyBwYXJhIGEgY29udmVyc8OjbyBkb3MgaXRlbnMgYXByZXNlbnRhZG9zIG5hIGxpc3RhIGRvIGNvbXBvbmVudGVcbiAgICogKGB0LW9wdGlvbnNgKSwgZXN0YSBwcm9wcmllZGFkZSBzZXLDoSByZXNwb25zw6F2ZWwgcGVsbyB2YWxvciBkZSBjYWRhIGl0ZW0gZGEgbGlzdGEuXG4gICAqXG4gICAqIE5lY2Vzc8OhcmlvIHF1YW5kbyBpbmZvcm1hciBvIHNlcnZpw6dvIGNvbW8gVVJMIGUgbyBtZXNtbyBuw6NvIGVzdGl2ZXIgcmV0b3JuYW5kbyB1bWEgbGlzdGEgZGUgb2JqZXRvcyBubyBwYWRyw6NvIGRhIGludGVyZmFjZVxuICAgKiBUaGZDb21ib09wdGlvbi5cbiAgICpcbiAgICogQGRlZmF1bHQgYHZhbHVlYFxuICAgKi9cbiAgQElucHV0KCd0LWZpZWxkLXZhbHVlJykgc2V0IGZpZWxkVmFsdWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2ZpZWxkVmFsdWUgPSB2YWx1ZSB8fCBUSEZfQ09NQk9fRklFTERfVkFMVUVfREVGQVVMVDtcblxuICAgIGlmIChpc1R5cGVvZih0aGlzLmZpbHRlclNlcnZpY2UsICdzdHJpbmcnKSAmJiB0aGlzLnNlcnZpY2UpIHtcbiAgICAgIHRoaXMuc2VydmljZS5maWVsZFZhbHVlID0gdGhpcy5fZmllbGRWYWx1ZTtcbiAgICB9XG4gIH1cblxuICBnZXQgZmllbGRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZmllbGRWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIERldmUgc2VyIGluZm9ybWFkbyBvIG5vbWUgZGEgcHJvcHJpZWRhZGUgZG8gb2JqZXRvIHF1ZSBzZXLDoSB1dGlsaXphZG8gcGFyYSBhIGNvbnZlcnPDo28gZG9zIGl0ZW5zIGFwcmVzZW50YWRvcyBuYSBsaXN0YSBkbyBjb21wb25lbnRlXG4gICAqIChgdC1vcHRpb25zYCksIGVzdGEgcHJvcHJpZWRhZGUgc2Vyw6EgcmVzcG9uc8OhdmVsIHBlbG8gdGV4dG8gZGUgYXByZXNlbnRhw6fDo28gZGUgY2FkYSBpdGVtIGRhIGxpc3RhLlxuICAgKlxuICAgKiBOZWNlc3PDoXJpbyBxdWFuZG8gaW5mb3JtYXIgbyBzZXJ2acOnbyBjb21vIFVSTCBlIG8gbWVzbW8gbsOjbyBlc3RpdmVyIHJldG9ybmFuZG8gdW1hIGxpc3RhIGRlIG9iamV0b3Mgbm8gcGFkcsOjbyBkYSBpbnRlcmZhY2VcbiAgICogVGhmQ29tYm9PcHRpb24uXG4gICAqXG4gICAqIEBkZWZhdWx0IGBsYWJlbGBcbiAgICovXG4gIEBJbnB1dCgndC1maWVsZC1sYWJlbCcpIHNldCBmaWVsZExhYmVsKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9maWVsZExhYmVsID0gdmFsdWUgfHwgVEhGX0NPTUJPX0ZJRUxEX0xBQkVMX0RFRkFVTFQ7XG5cbiAgICBpZiAoaXNUeXBlb2YodGhpcy5maWx0ZXJTZXJ2aWNlLCAnc3RyaW5nJykgJiYgdGhpcy5zZXJ2aWNlKSB7XG4gICAgICB0aGlzLnNlcnZpY2UuZmllbGRMYWJlbCA9IHRoaXMuX2ZpZWxkTGFiZWw7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGZpZWxkTGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpZWxkTGFiZWw7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBWYWxvciBtw61uaW1vIGRlIGNhcmFjdGVyZXMgcGFyYSByZWFsaXphciBvIGZpbHRybyBubyBzZXJ2acOnby5cbiAgICpcbiAgICogQGRlZmF1bHQgYDBgXG4gICAqL1xuICBASW5wdXQoJ3QtZmlsdGVyLW1pbmxlbmd0aCcpIHNldCBmaWx0ZXJNaW5sZW5ndGgodmFsdWU6IG51bWJlcikge1xuICAgIGNvbnN0IHBhcnNlVmFsdWUgPSAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgPyBwYXJzZUludCh2YWx1ZSwgMTApIDogdmFsdWU7XG5cbiAgICB0aGlzLl9maWx0ZXJNaW5sZW5ndGggPSBOdW1iZXIuaXNJbnRlZ2VyKHBhcnNlVmFsdWUpID8gcGFyc2VWYWx1ZSA6IDA7XG4gIH1cblxuICBnZXQgZmlsdGVyTWlubGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLl9maWx0ZXJNaW5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBJbmRpY2EgcXVlIG8gY2FtcG8gc2Vyw6Egb2JyaWdhdMOzcmlvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3QtcmVxdWlyZWQnKSBzZXQgcmVxdWlyZWQocmVxdWlyZWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9yZXF1aXJlZCA9IGNvbnZlcnRUb0Jvb2xlYW4ocmVxdWlyZWQpO1xuXG4gICAgdGhpcy52YWxpZGF0ZU1vZGVsKHRoaXMuc2VsZWN0ZWRWYWx1ZSk7XG4gIH1cblxuICBnZXQgcmVxdWlyZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlcXVpcmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSW5kaWNhIHF1ZSBvIGV2ZW50byBgdC1jaGFuZ2VgIHPDsyBzZXLDoSBkaXNwYXJhZG8gYW8gY2xpY2FyIG91IHByZXNzaW9uYXIgYSB0ZWNsYSBcIkVudGVyXCIgc29icmUgdW1hIG9ww6fDo28gc2VsZWNpb25hZGEuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgndC1jaGFuZ2Utb24tZW50ZXInKSBzZXQgY2hhbmdlT25FbnRlcihjaGFuZ2VPbkVudGVyOiBib29sZWFuKSB7XG4gICAgdGhpcy5fY2hhbmdlT25FbnRlciA9IGNvbnZlcnRUb0Jvb2xlYW4oY2hhbmdlT25FbnRlcik7XG4gIH1cblxuICBnZXQgY2hhbmdlT25FbnRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fY2hhbmdlT25FbnRlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEluZGljYSBxdWUgbyBjYW1wbyBzZXLDoSBkZXNhYmlsaXRhZG8uXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgndC1kaXNhYmxlZCcpIHNldCBkaXNhYmxlZChkaXNhYmxlZDogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gY29udmVydFRvQm9vbGVhbihkaXNhYmxlZCk7XG5cbiAgICB0aGlzLnZhbGlkYXRlTW9kZWwodGhpcy5zZWxlY3RlZFZhbHVlKTtcbiAgfVxuXG4gIGdldCBkaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgbyDDrWNvbmUgcXVlIHNlcsOhIGV4aWJpZG8gbm8gaW7DrWNpbyBkbyBjYW1wby5cbiAgICpcbiAgICogPiBWZWphIGEgZGlzcG9uaWJpbGlkYWRlIGRlIMOtY29uZXMgZW0gW2JpYmxpb3RlY2EgZGUgw61jb25lc10oZ3VpZGVzL2ljb25zKS5cbiAgICovXG4gIEBJbnB1dCgndC1pY29uJykgaWNvbj86IHN0cmluZztcblxuICAvKipcbiAgICogTmVzdGEgcHJvcHJpZWRhZGUgZGV2ZSBzZXIgZGVmaW5pZGEgdW1hIGxpc3RhIGRlIG9iamV0b3MgcXVlIGltcGxlbWVudGFtIGEgaW50ZXJmYWNlIFRoZkNvbWJvT3B0aW9uLlxuICAgKiBFc3RhIGxpc3RhIGNvbnRlcsOhIG9zIHZhbG9yZXMgZSBhcyBkZXNjcmnDp8O1ZXMgcXVlIHNlcsOjbyBhcHJlc2VudGFkb3MgbmEgdGVsYS5cbiAgICovXG4gIEBJbnB1dCgndC1vcHRpb25zJykgc2V0IG9wdGlvbnMob3B0aW9uczogQXJyYXk8VGhmQ29tYm9PcHRpb24+KSB7XG4gICAgdGhpcy5fb3B0aW9ucyA9IEFycmF5LmlzQXJyYXkob3B0aW9ucykgPyBvcHRpb25zIDogW107XG5cbiAgICB0aGlzLmNhY2hlU3RhdGljT3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIHRoaXMudmFsaWRBbmRTb3J0T3B0aW9ucygpO1xuICAgIHJlbW92ZUR1cGxpY2F0ZWRPcHRpb25zKHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy51cGRhdGVDb21ib0xpc3QoKTtcbiAgfVxuXG4gIGdldCBvcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIHNlIGEgaW5kaWNhw6fDo28gZGUgY2FtcG8gb3BjaW9uYWwgc2Vyw6EgZXhpYmlkYS5cbiAgICpcbiAgICogPiBOw6NvIHNlcsOhIGV4aWJpZGEgYSBpbmRpY2HDp8OjbyBzZTpcbiAgICogLSBPIGNhbXBvIGNvbnRlciBgdC1yZXF1aXJlZGA7XG4gICAqIC0gTsOjbyBwb3NzdWlyIGB0LWhlbHBgIGUvb3UgYHQtbGFiZWxgLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3Qtb3B0aW9uYWwnKSBvcHRpb25hbDogYm9vbGVhbjtcblxuICAvKiogSW5kaWNhIHF1ZSBhIGxpc3RhIGRlZmluaWRhIG5hIHByb3ByaWVkYWRlIHQtb3B0aW9ucyBzZXLDoSBvcmRlbmFkYSBwZWxhIGRlc2NyacOnw6NvLiAqL1xuICBzb3J0PzogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoJ3Qtc29ydCcpIHNldCBzZXRTb3J0KHNvcnQ6IHN0cmluZykge1xuICAgIHRoaXMuc29ydCA9IHNvcnQgPT09ICcnID8gdHJ1ZSA6IGNvbnZlcnRUb0Jvb2xlYW4oc29ydCk7XG5cbiAgICB0aGlzLnZhbGlkQW5kU29ydE9wdGlvbnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBvIG1vZG8gZGUgcGVzcXVpc2EgdXRpbGl6YWRvIG5vIGZpbHRybyBkYSBsaXN0YSBkZSBzZWxlw6fDo286IGBzdGFydHNXaXRoYCwgYGNvbnRhaW5zYCBvdSBgZW5kc1dpdGhgLlxuICAgKlxuICAgKiA+IFF1YW5kbyB1dGlsaXphciBhIHByb3ByaWVkYWRlIGB0LWZpbHRlci1zZXJ2aWNlYCBlc3RhIHByb3ByaWVkYWRlIHNlcsOhIGlnbm9yYWRhLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgc3RhcnRzV2l0aGBcbiAgICovXG4gIEBJbnB1dCgndC1maWx0ZXItbW9kZScpIHNldCBmaWx0ZXJNb2RlKGZpbHRlck1vZGU6IFRoZkNvbWJvRmlsdGVyTW9kZSkge1xuICAgIHRoaXMuX2ZpbHRlck1vZGUgPSAoZmlsdGVyTW9kZSBpbiBUaGZDb21ib0ZpbHRlck1vZGUpID8gZmlsdGVyTW9kZSA6IFRoZkNvbWJvRmlsdGVyTW9kZS5zdGFydHNXaXRoO1xuICAgIHN3aXRjaCAodGhpcy5fZmlsdGVyTW9kZS50b1N0cmluZygpKSB7XG4gICAgICBjYXNlICdzdGFydHNXaXRoJzpcbiAgICAgICAgdGhpcy5fZmlsdGVyTW9kZSA9IFRoZkNvbWJvRmlsdGVyTW9kZS5zdGFydHNXaXRoO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2NvbnRhaW5zJzpcbiAgICAgICAgdGhpcy5fZmlsdGVyTW9kZSA9IFRoZkNvbWJvRmlsdGVyTW9kZS5jb250YWlucztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdlbmRzV2l0aCc6XG4gICAgICAgIHRoaXMuX2ZpbHRlck1vZGUgPSBUaGZDb21ib0ZpbHRlck1vZGUuZW5kc1dpdGg7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGdldCBmaWx0ZXJNb2RlKCk6IFRoZkNvbWJvRmlsdGVyTW9kZSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpbHRlck1vZGU7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBWYWxvciBxdWUgc2Vyw6EgcmVwYXNzYWRvIGNvbW8gcGFyw6JtZXRybyBhb3MgbcOpdG9kb3MgZG8gc2VydmnDp28gcXVlIGltcGxlbWVudGFtIGEgaW50ZXJmYWNlICpUaGZDb21ib0ZpbHRlciouXG4gICAqL1xuICBASW5wdXQoJ3QtZmlsdGVyLXBhcmFtcycpIHNldCBmaWx0ZXJQYXJhbXMoZmlsdGVyUGFyYW1zOiBhbnkpIHtcbiAgICB0aGlzLl9maWx0ZXJQYXJhbXMgPSAoZmlsdGVyUGFyYW1zIHx8IGZpbHRlclBhcmFtcyA9PT0gMCB8fCBmaWx0ZXJQYXJhbXMgPT09IGZhbHNlKSA/IGZpbHRlclBhcmFtcyA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGdldCBmaWx0ZXJQYXJhbXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpbHRlclBhcmFtcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamV0byBjb20gYXMgbGl0ZXJhaXMgdXNhZGFzIG5vIGB0aGYtY29tYm9gLlxuICAgKlxuICAgKiBQYXJhIHV0aWxpemFyIGJhc3RhIHBhc3NhciBhIGxpdGVyYWwgcXVlIGRlc2VqYSBjdXN0b21pemFyOlxuICAgKlxuICAgKiBgYGBcbiAgICogIGNvbnN0IGN1c3RvbUxpdGVyYWxzOiBUaGZDb21ib0xpdGVyYWxzID0ge1xuICAgKiAgICBub0RhdGE6ICdOZW5odW0gdmFsb3InXG4gICAqICB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogRSBwYXJhIGNhcnJlZ2FyIGEgbGl0ZXJhbCBjdXN0b21pemFkYSwgYmFzdGEgYXBlbmFzIHBhc3NhciBvIG9iamV0byBwYXJhIG8gY29tcG9uZW50ZS5cbiAgICpcbiAgICogYGBgXG4gICAqIDx0aGYtY29tYm9cbiAgICogICBbdC1saXRlcmFsc109XCJjdXN0b21MaXRlcmFsc1wiPlxuICAgKiA8L3RoZi1jb21ibz5cbiAgICogYGBgXG4gICAqXG4gICAqID4gTyBvYmpldG8gcGFkcsOjbyBkZSBsaXRlcmFpcyBzZXLDoSB0cmFkdXppZG8gZGUgYWNvcmRvIGNvbSBvIGlkaW9tYSBkbyAqYnJvd3NlciogKHB0LCBlbiwgZXMpLlxuICAgKi9cbiAgQElucHV0KCd0LWxpdGVyYWxzJykgc2V0IGxpdGVyYWxzKHZhbHVlOiBUaGZDb21ib0xpdGVyYWxzKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmICEodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIHRoaXMuX2xpdGVyYWxzID0ge1xuICAgICAgICAuLi50aGZDb21ib0xpdGVyYWxzRGVmYXVsdFt0aGZMb2NhbGVEZWZhdWx0XSxcbiAgICAgICAgLi4udGhmQ29tYm9MaXRlcmFsc0RlZmF1bHRbYnJvd3Nlckxhbmd1YWdlKCldLFxuICAgICAgICAuLi52YWx1ZVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGl0ZXJhbHMgPSB0aGZDb21ib0xpdGVyYWxzRGVmYXVsdFticm93c2VyTGFuZ3VhZ2UoKV07XG4gICAgfVxuICB9XG5cbiAgZ2V0IGxpdGVyYWxzKCkge1xuICAgIHJldHVybiB0aGlzLl9saXRlcmFscyB8fCB0aGZDb21ib0xpdGVyYWxzRGVmYXVsdFticm93c2VyTGFuZ3VhZ2UoKV07XG4gIH1cblxuICAvKiogRGV2ZSBzZXIgaW5mb3JtYWRhIHVtYSBmdW7Dp8OjbyBxdWUgc2Vyw6EgZGlzcGFyYWRhIHF1YW5kbyBob3V2ZXIgYWx0ZXJhw6fDtWVzIG5vIG5nTW9kZWwuICovXG4gIEBPdXRwdXQoJ3QtY2hhbmdlJykgY2hhbmdlPzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAvLyBGdW7Dp8OjbyBwYXJhIGF0dWFsaXphciBvIG5nTW9kZWwgZG8gY29tcG9uZW50ZSwgbmVjZXNzw6FyaW8gcXVhbmRvIG7Do28gZm9yIHV0aWxpemFkbyBkZW50cm8gZGEgdGFnIGZvcm0uXG4gIEBPdXRwdXQoJ25nTW9kZWxDaGFuZ2UnKSBuZ01vZGVsQ2hhbmdlPzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBhYnN0cmFjdCBzZXRJbnB1dFZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuXG4gIGFic3RyYWN0IGFwcGx5RmlsdGVyKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuXG4gIGFic3RyYWN0IGdldE9iamVjdEJ5VmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG5cbiAgYWJzdHJhY3QgZ2V0SW5wdXRWYWx1ZSgpOiBzdHJpbmc7XG5cbiAgYWJzdHJhY3QgaW5pdElucHV0T2JzZXJ2YWJsZSgpOiB2b2lkO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudXBkYXRlQ29tYm9MaXN0KCk7XG4gIH1cblxuICBvbkluaXRTZXJ2aWNlKCkge1xuICAgIGlmICh0aGlzLmZpbHRlclNlcnZpY2UpIHtcbiAgICAgIHRoaXMuc2V0U2VydmljZSh0aGlzLmZpbHRlclNlcnZpY2UpO1xuICAgICAgdGhpcy5pbml0SW5wdXRPYnNlcnZhYmxlKCk7XG4gICAgfVxuICB9XG5cbiAgc2V0U2VydmljZShzZXJ2aWNlOiBUaGZDb21ib0ZpbHRlciB8IHN0cmluZykge1xuICAgIGlmIChzZXJ2aWNlKSB7XG4gICAgICBpZiAoaXNUeXBlb2Yoc2VydmljZSwgJ29iamVjdCcpKSB7XG4gICAgICAgIHRoaXMuc2VydmljZSA9IDxUaGZDb21ib0ZpbHRlclNlcnZpY2U+IHNlcnZpY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNlcnZpY2UgPSB0aGlzLmRlZmF1bHRTZXJ2aWNlO1xuICAgICAgICB0aGlzLnNlcnZpY2UuY29uZmlnUHJvcGVydGllcyg8c3RyaW5nPnNlcnZpY2UsIHRoaXMuZmllbGRMYWJlbCwgdGhpcy5maWVsZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YWxpZEFuZFNvcnRPcHRpb25zKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIFJlbW92ZSBvcyBvYmpldG9zIHF1ZSBuw6NvIGNvbnTDqW0gdmFsb3IgZSBhdHJpYnVpIG8gdmFsb3IgYW8gbGFiZWwgY2FzbyBlc3RlIGVzdGVqYSB2YXppb1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCF2YWxpZFZhbHVlKHRoaXMub3B0aW9uc1tpXVsndmFsdWUnXSkpIHtcbiAgICAgICAgICB0aGlzLm9wdGlvbnMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLm9wdGlvbnNbaV1bJ2xhYmVsJ10pIHtcbiAgICAgICAgICB0aGlzLm9wdGlvbnNbaV1bJ2xhYmVsJ10gPSB0aGlzLm9wdGlvbnNbaV1bJ3ZhbHVlJ10udG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnNvcnRPcHRpb25zKCk7XG4gIH1cblxuICBzb3J0T3B0aW9ucygpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5sZW5ndGggPiAwICYmIHRoaXMuc29ydCkge1xuICAgICAgdGhpcy5vcHRpb25zLnNvcnQodGhpcy5jb21wYXJlT3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY29tcGFyZU9wdGlvbnMoYTogYW55LCBiOiBhbnkpIHtcbiAgICBpZiAoYS5sYWJlbC50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkgPCBiLmxhYmVsLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBpZiAoYS5sYWJlbC50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkgPiBiLmxhYmVsLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgY29tcGFyZU1ldGhvZChzZWFyY2g6IHN0cmluZywgb3B0aW9uOiBUaGZDb21ib09wdGlvbiwgZmlsdGVyTW9kZTogVGhmQ29tYm9GaWx0ZXJNb2RlKSB7XG4gICAgc3dpdGNoIChmaWx0ZXJNb2RlKSB7XG4gICAgICBjYXNlIFRoZkNvbWJvRmlsdGVyTW9kZS5zdGFydHNXaXRoOlxuICAgICAgICByZXR1cm4gdGhpcy5zdGFydHNXaXRoKHNlYXJjaCwgb3B0aW9uKTtcbiAgICAgIGNhc2UgVGhmQ29tYm9GaWx0ZXJNb2RlLmNvbnRhaW5zOlxuICAgICAgICByZXR1cm4gdGhpcy5jb250YWlucyhzZWFyY2gsIG9wdGlvbik7XG4gICAgICBjYXNlIFRoZkNvbWJvRmlsdGVyTW9kZS5lbmRzV2l0aDpcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5kc1dpdGgoc2VhcmNoLCBvcHRpb24pO1xuICAgIH1cbiAgfVxuXG4gIHN0YXJ0c1dpdGgoc2VhcmNoOiBzdHJpbmcsIG9wdGlvbjogVGhmQ29tYm9PcHRpb24pIHtcbiAgICByZXR1cm4gb3B0aW9uLmxhYmVsLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChzZWFyY2gudG9Mb3dlckNhc2UoKSk7XG4gIH1cblxuICBjb250YWlucyhzZWFyY2g6IHN0cmluZywgb3B0aW9uOiBUaGZDb21ib09wdGlvbikge1xuICAgIHJldHVybiBvcHRpb24ubGFiZWwudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlYXJjaC50b0xvd2VyQ2FzZSgpKSA+IC0xO1xuICB9XG5cbiAgZW5kc1dpdGgoc2VhcmNoOiBzdHJpbmcsIG9wdGlvbjogVGhmQ29tYm9PcHRpb24pIHtcbiAgICByZXR1cm4gb3B0aW9uLmxhYmVsLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoc2VhcmNoLnRvTG93ZXJDYXNlKCkpO1xuICB9XG5cbiAgZ2V0T3B0aW9uRnJvbVZhbHVlKHZhbHVlOiBhbnksIG9wdGlvbnM6IGFueSkge1xuICAgIHJldHVybiAob3B0aW9ucykgPyBvcHRpb25zLmZpbmQoKG9wdGlvbjogYW55KSA9PiB0aGlzLmlzRXF1YWwob3B0aW9uLnZhbHVlLCB2YWx1ZSkpIDogbnVsbDtcbiAgfVxuXG4gIGdldE9wdGlvbkZyb21MYWJlbChsYWJlbDogYW55LCBvcHRpb25zOiBhbnkpIHtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuZmluZCgob3B0aW9uOiBhbnkpID0+IHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbi5sYWJlbC50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkgPT09IGxhYmVsLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVTZWxlY3RlZFZhbHVlKG9wdGlvbjogVGhmQ29tYm9PcHRpb24sIGlzVXBkYXRlTW9kZWw6IGJvb2xlYW4gPSB0cnVlLCBpc1dyaXRlVmFsdWUgPSBmYWxzZSkge1xuICAgIGNvbnN0IG9wdGlvbkxhYmVsID0gb3B0aW9uICYmIG9wdGlvbi5sYWJlbCB8fCAnJztcblxuICAgIHRoaXMudXBkYXRlSW50ZXJuYWxWYXJpYWJsZXMob3B0aW9uKTtcblxuICAgIC8vIGF0dWFsaXphIG8gdmFsb3IgZG8gaW5wdXQgcXVhbmRvIGZvciBjaGFuZ2VPbkVudGVyIGFwZW5hcyBzZSBmb3IgcGFyYSBhdHVhbGl6YXIgbyBtb2RlbC5cbiAgICBpZiAodGhpcy5jaGFuZ2VPbkVudGVyICYmIGlzVXBkYXRlTW9kZWwpIHtcbiAgICAgIHRoaXMuc2V0SW5wdXRWYWx1ZShvcHRpb25MYWJlbCk7XG4gICAgfSBlbHNlIGlmICghdGhpcy5jaGFuZ2VPbkVudGVyKSB7XG4gICAgICB0aGlzLnNldElucHV0VmFsdWUob3B0aW9uTGFiZWwpO1xuICAgIH1cblxuICAgIGlmIChpc1VwZGF0ZU1vZGVsKSB7XG4gICAgICBjb25zdCBvcHRpb25WYWx1ZSA9IG9wdGlvbiAmJiBvcHRpb24udmFsdWUgfHwgdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnVwZGF0ZU1vZGVsKG9wdGlvblZhbHVlLCBpc1dyaXRlVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxNb2RlbENoYW5nZSh2YWx1ZTogYW55KSB7XG4gICAgLy8gQ2FzbyBvIGNvbXBvbmVudGUgZXN0aXZlciBkZW50cm8gZGUgdW0gZm9ybSwgdGVyw6EgYWNlc3NvIGFvIG3DqXRvZG8gb25Nb2RlbENoYW5nZS5cbiAgICByZXR1cm4gKHRoaXMub25Nb2RlbENoYW5nZSkgPyB0aGlzLm9uTW9kZWxDaGFuZ2UodmFsdWUpIDogdGhpcy5uZ01vZGVsQ2hhbmdlLmVtaXQodmFsdWUpO1xuICB9XG5cbiAgaXNFcXVhbCh2YWx1ZTogYW55LCBpbnB1dFZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICBpZiAoKHZhbHVlIHx8IHZhbHVlID09PSAwKSAmJiBpbnB1dFZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKSA9PT0gaW5wdXRWYWx1ZS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmICgodmFsdWUgPT09IG51bGwgJiYgaW5wdXRWYWx1ZSAhPT0gbnVsbCkgfHxcbiAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgaW5wdXRWYWx1ZSAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgdmFsdWUgPSBgJHt2YWx1ZX1gOyAvLyBUcmFuc2Zvcm1hbmRvIGVtIHN0cmluZ1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZSA9PT0gaW5wdXRWYWx1ZTtcbiAgfVxuXG4gIHNlYXJjaEZvckxhYmVsKHNlYXJjaDogc3RyaW5nLCBvcHRpb25zOiBBcnJheTxUaGZDb21ib09wdGlvbj4sIGZpbHRlck1vZGU6IFRoZkNvbWJvRmlsdGVyTW9kZSkge1xuICAgIGlmIChzZWFyY2ggJiYgb3B0aW9ucyAmJiBvcHRpb25zLmxlbmd0aCkge1xuICAgICAgY29uc3QgbmV3T3B0aW9uczogQXJyYXk8VGhmQ29tYm9PcHRpb24+ID0gW107XG5cbiAgICAgIG9wdGlvbnMuZm9yRWFjaChvcHRpb24gPT4ge1xuICAgICAgICBpZiAob3B0aW9uLmxhYmVsICYmICh0aGlzLmNvbXBhcmVNZXRob2Qoc2VhcmNoLCBvcHRpb24sIGZpbHRlck1vZGUpIHx8IHRoaXMuc2VydmljZSkpIHtcbiAgICAgICAgICBuZXdPcHRpb25zLnB1c2gob3B0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc2VsZWN0ZWRWaWV3ID0gbmV3T3B0aW9uc1swXTtcbiAgICAgIHRoaXMudXBkYXRlQ29tYm9MaXN0KG5ld09wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVwZGF0ZUNvbWJvTGlzdCgpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUNvbWJvTGlzdChvcHRpb25zPzogQXJyYXk8VGhmQ29tYm9PcHRpb24+KSB7XG4gICAgY29uc3QgY29weU9wdGlvbnMgPSBvcHRpb25zIHx8IFsuLi50aGlzLm9wdGlvbnNdO1xuXG4gICAgY29uc3QgbmV3T3B0aW9ucyA9ICFvcHRpb25zICYmIHRoaXMuc2VsZWN0ZWRWYWx1ZSA/IFt7IC4uLnRoaXMuc2VsZWN0ZWRPcHRpb24gfV0gOiBjb3B5T3B0aW9ucztcblxuICAgIGlmIChuZXdPcHRpb25zKSB7XG4gICAgICB0aGlzLnZpc2libGVPcHRpb25zID0gbmV3T3B0aW9ucztcblxuICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkVmlldyAmJiB0aGlzLnZpc2libGVPcHRpb25zLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkVmlldyA9IHRoaXMudmlzaWJsZU9wdGlvbnNbMF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0TmV4dE9wdGlvbih2YWx1ZTogYW55LCBvcHRpb25zOiBBcnJheTxUaGZDb21ib09wdGlvbj4sIHJldmVyc2U6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIGNvbnN0IG5ld09wdGlvbnMgPSBbXS5jb25jYXQob3B0aW9ucyk7XG4gICAgbGV0IG9wdGlvbkZvdW5kID0gbnVsbDtcbiAgICBsZXQgZm91bmQgPSBmYWxzZTtcblxuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICBuZXdPcHRpb25zLnJldmVyc2UoKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld09wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG9wdGlvbiA9IG5ld09wdGlvbnMgW2ldO1xuICAgICAgaWYgKCFvcHRpb25Gb3VuZCkge1xuICAgICAgICBvcHRpb25Gb3VuZCA9IG9wdGlvbjtcbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICByZXR1cm4gb3B0aW9uO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNFcXVhbChvcHRpb24udmFsdWUsIHZhbHVlKSkge1xuICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25Gb3VuZDtcbiAgfVxuXG4gIGdldEluZGV4U2VsZWN0ZWRWaWV3KCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52aXNpYmxlT3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMuY29tcGFyZU9iamVjdHModGhpcy52aXNpYmxlT3B0aW9uc1tpXSwgdGhpcy5zZWxlY3RlZFZpZXcpKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbXBhcmVPYmplY3RzKG9iajE6IGFueSwgb2JqMjogYW55KSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iajEpID09PSBKU09OLnN0cmluZ2lmeShvYmoyKTtcbiAgfVxuXG4gIHZlcmlmeVZhbGlkT3B0aW9uKCkge1xuICAgIGNvbnN0IGlucHV0VmFsdWUgPSB0aGlzLmdldElucHV0VmFsdWUoKTtcblxuICAgIGNvbnN0IG9wdGlvbkZvdW5kID0gdGhpcy5nZXRPcHRpb25Gcm9tTGFiZWwoaW5wdXRWYWx1ZSwgdGhpcy5vcHRpb25zKTtcblxuICAgIGlmIChvcHRpb25Gb3VuZCAmJiBvcHRpb25Gb3VuZC52YWx1ZSAhPT0gdGhpcy5zZWxlY3RlZFZhbHVlKSB7XG5cbiAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRWYWx1ZShvcHRpb25Gb3VuZCk7XG5cbiAgICAgIHRoaXMucHJldmlvdXNTZWFyY2hWYWx1ZSA9IG9wdGlvbkZvdW5kLmxhYmVsO1xuICAgICAgcmV0dXJuO1xuXG4gICAgfSBlbHNlIGlmICh0aGlzLnNlbGVjdGVkVmFsdWUgJiYgdGhpcy5zZWxlY3RlZE9wdGlvbiAmJiB0aGlzLnNlbGVjdGVkT3B0aW9uLmxhYmVsICE9PSBpbnB1dFZhbHVlKSB7XG4gICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkVmFsdWVXaXRoT2xkT3B0aW9uKCk7XG5cbiAgICAgIHRoaXMucHJldmlvdXNTZWFyY2hWYWx1ZSA9IHRoaXMuc2VsZWN0ZWRPcHRpb24ubGFiZWw7XG4gICAgICByZXR1cm47XG5cbiAgICB9IGVsc2UgaWYgKGlucHV0VmFsdWUgJiYgIW9wdGlvbkZvdW5kKSB7XG4gICAgICBjb25zdCBpc0lucHV0VmFsdWVEaWZmU2VsZWN0ZWRMYWJlbCA9ICEhKHRoaXMuc2VsZWN0ZWRPcHRpb24gJiYgdGhpcy5zZWxlY3RlZE9wdGlvbi5sYWJlbCAhPT0gaW5wdXRWYWx1ZSk7XG5cbiAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRWYWx1ZShudWxsLCBpc0lucHV0VmFsdWVEaWZmU2VsZWN0ZWRMYWJlbCB8fCB0aGlzLmNoYW5nZU9uRW50ZXIpO1xuXG4gICAgICB0aGlzLnByZXZpb3VzU2VhcmNoVmFsdWUgPSAnJztcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgfVxuXG4gIC8vIFJlY2ViZSBhcyBhbHRlcmHDp8O1ZXMgZG8gbW9kZWxcbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KSB7XG5cbiAgICBpZiAodmFsaWRWYWx1ZSh2YWx1ZSkgJiYgIXRoaXMuc2VydmljZSAmJiB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLmxlbmd0aCkge1xuICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5nZXRPcHRpb25Gcm9tVmFsdWUodmFsdWUsIHRoaXMub3B0aW9ucyk7XG4gICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkVmFsdWUob3B0aW9uKTtcbiAgICAgIHRoaXMudXBkYXRlQ29tYm9MaXN0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2UgaG91dmVyIHNlcnZpw6dvIGJ1c2NhIHBlbG8gbW9kZWwuXG4gICAgaWYgKHZhbHVlICYmIHRoaXMuc2VydmljZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0QnlWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCF2YWxpZFZhbHVlKHZhbHVlKSkge1xuICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZFZhbHVlKG51bGwsIHRydWUsIHRydWUpO1xuICAgICAgdGhpcy51cGRhdGVDb21ib0xpc3QoKTtcbiAgICB9XG5cbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Nb2RlbENoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Nb2RlbFRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UoZm46ICgpID0+IHZvaWQpIHtcbiAgICB0aGlzLnZhbGlkYXRvckNoYW5nZSA9IGZuO1xuICB9XG5cbiAgdmFsaWRhdGUoYWJzdHJhY3RDb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueTsgfSB7XG5cbiAgICBpZiAoKHJlcXVpcmVkRmFpbGVkKHRoaXMucmVxdWlyZWQsIHRoaXMuZGlzYWJsZWQsIGFic3RyYWN0Q29udHJvbC52YWx1ZSkpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDoge1xuICAgICAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgfVxuXG4gIHByb3RlY3RlZCB2YWxpZGF0ZU1vZGVsKG1vZGVsOiBhbnkpIHtcbiAgICBpZiAodGhpcy52YWxpZGF0b3JDaGFuZ2UpIHtcbiAgICAgIHRoaXMudmFsaWRhdG9yQ2hhbmdlKG1vZGVsKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvbmZpZ0FmdGVyU2V0RmlsdGVyU2VydmljZShzZXJ2aWNlOiBUaGZDb21ib0ZpbHRlciB8IHN0cmluZykge1xuICAgIGlmIChzZXJ2aWNlKSB7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBbXTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmVLZXl1cE9ic2VydmFibGUoKTtcbiAgICAgIHRoaXMub25Jbml0U2VydmljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlcnZpY2UgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmNhY2hlU3RhdGljT3B0aW9ucztcbiAgICB9XG5cbiAgICB0aGlzLnZpc2libGVPcHRpb25zID0gW107XG4gICAgdGhpcy5pc0ZpcnN0RmlsdGVyID0gdHJ1ZTtcbiAgfVxuXG4gIHByaXZhdGUgdW5zdWJzY3JpYmVLZXl1cE9ic2VydmFibGUoKSB7XG4gICAgaWYgKHRoaXMua2V5dXBTdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMua2V5dXBTdWJzY3JpYmUudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUludGVybmFsVmFyaWFibGVzKG9wdGlvbjogVGhmQ29tYm9PcHRpb24pIHtcbiAgICBpZiAob3B0aW9uKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkVmlldyA9IG9wdGlvbjtcbiAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb24gPSBvcHRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRWaWV3ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5zZWxlY3RlZE9wdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZU1vZGVsKHZhbHVlOiBhbnksIGZyb21Xcml0ZVZhbHVlID0gZmFsc2UpOiB2b2lkIHtcbiAgICBpZiAodmFsdWUgIT09IHRoaXMuc2VsZWN0ZWRWYWx1ZSkge1xuXG4gICAgICBpZiAoIWZyb21Xcml0ZVZhbHVlKSB7XG4gICAgICAgIHRoaXMuY2FsbE1vZGVsQ2hhbmdlKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGFuZ2UuZW1pdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZWxlY3RlZFZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVNlbGVjdGVkVmFsdWVXaXRoT2xkT3B0aW9uKCkge1xuICAgIGNvbnN0IG9sZE9wdGlvbiA9IHRoaXMuZ2V0T3B0aW9uRnJvbVZhbHVlKHRoaXMuc2VsZWN0ZWRWYWx1ZSwgdGhpcy5vcHRpb25zKTtcblxuICAgIGlmIChvbGRPcHRpb24gJiYgb2xkT3B0aW9uLmxhYmVsKSB7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVTZWxlY3RlZFZhbHVlKG9sZE9wdGlvbik7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==