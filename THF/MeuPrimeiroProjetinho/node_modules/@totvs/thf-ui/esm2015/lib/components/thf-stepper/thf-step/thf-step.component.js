/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input } from '@angular/core';
import { uuid } from '../../../utils/util';
import { ThfStepperStatus } from '../enums/thf-stepper-status.enum';
/**
 * \@description
 *
 * O componente `thf-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `thf-stepper`, por exemplo:
 *
 * ```
 * <thf-stepper>
 *
 *    <thf-step t-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </thf-step>
 *
 *    <thf-step t-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </thf-step>
 *
 *  </thf-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `thf-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `thf-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `thf-step`, o componente `thf-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `thf-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `thf-stepper`](/documentation/thf-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
export class ThfStepComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this._status = ThfStepperStatus.Disabled;
        // ID do step
        this.id = uuid();
    }
    // Estado de exibição do `thf-step`.
    /**
     * @param {?} status
     * @return {?}
     */
    set status(status) {
        this._status = status;
        this.setDisplayOnActiveOrError();
    }
    /**
     * @return {?}
     */
    get status() {
        return this._status;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.setDisplayOnActiveOrError();
    }
    /**
     * @protected
     * @return {?}
     */
    setDisplayOnActiveOrError() {
        this.elementRef.nativeElement.style.display =
            (this.status === ThfStepperStatus.Active || this.status === ThfStepperStatus.Error) ? '' : 'none';
    }
}
ThfStepComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-step',
                template: "<ng-content></ng-content>\n"
            }] }
];
/** @nocollapse */
ThfStepComponent.ctorParameters = () => [
    { type: ElementRef }
];
ThfStepComponent.propDecorators = {
    canActiveNextStep: [{ type: Input, args: ['t-can-active-next-step',] }],
    label: [{ type: Input, args: ['t-label',] }],
    status: [{ type: Input, args: ['t-status',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfStepComponent.prototype._status;
    /** @type {?} */
    ThfStepComponent.prototype.id;
    /**
     * \@optional
     *
     * \@description
     *
     * Função chamada quando o próximo *step* for clicado ou quando o método `ThfStepperComponent.next()` for chamado.
     * Ao retornar `true` define que esse *step* ficará ativo e o atual como concluído (*done*).
     *
     * Ao ser disparada, a mesma receberá por parâmetro o `ThfStepComponent` atual.
     *
     * O contexto da função que será chamada, será o mesmo que o do `ThfStepComponent`, então para poder alterar
     * para o contexto do componente que o está utilizando, pode ser utilizado a propriedade `bind` do Javascript.
     * Por exemplo, para a função `validate`:
     *
     * ```
     * <thf-step t-label="Step 1" [t-can-active-next-step]="validate.bind(this)">
     * ...
     * </thf-step>
     * ```
     * @type {?}
     */
    ThfStepComponent.prototype.canActiveNextStep;
    /**
     * Título que será exibido descrevendo o passo (*step*).
     * @type {?}
     */
    ThfStepComponent.prototype.label;
    /**
     * @type {?}
     * @private
     */
    ThfStepComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXN0ZXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1zdGVwcGVyL3RoZi1zdGVwL3RoZi1zdGVwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFvQixTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkNwRSxNQUFNLE9BQU8sZ0JBQWdCOzs7O0lBMkMzQixZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBekNsQyxZQUFPLEdBQXNCLGdCQUFnQixDQUFDLFFBQVEsQ0FBQzs7UUFHL0QsT0FBRSxHQUFZLElBQUksRUFBRSxDQUFDO0lBc0N5QixDQUFDOzs7Ozs7SUFWL0MsSUFBdUIsTUFBTSxDQUFDLE1BQXdCO1FBQ3BELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBRXRCLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7OztJQUlELGtCQUFrQjtRQUNoQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztJQUNuQyxDQUFDOzs7OztJQUVTLHlCQUF5QjtRQUNqQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTztZQUN6QyxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssZ0JBQWdCLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3RHLENBQUM7OztZQXhERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLHVDQUFzQzthQUN2Qzs7OztZQTlDcUMsVUFBVTs7O2dDQTBFN0MsS0FBSyxTQUFDLHdCQUF3QjtvQkFHOUIsS0FBSyxTQUFDLFNBQVM7cUJBR2YsS0FBSyxTQUFDLFVBQVU7Ozs7Ozs7SUEvQmpCLG1DQUErRDs7SUFHL0QsOEJBQXFCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBc0JyQiw2Q0FBNkQ7Ozs7O0lBRzdELGlDQUFnQzs7Ozs7SUFhcEIsc0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyB1dWlkIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFRoZlN0ZXBwZXJTdGF0dXMgfSBmcm9tICcuLi9lbnVtcy90aGYtc3RlcHBlci1zdGF0dXMuZW51bSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGB0aGYtc3RlcGAgw6kgdXRpbGl6YWRvIHBhcmEgZW52b2x2ZXIgZSByZW5kZXJpemFyIG8gY29udGXDumRvIGRlIHVtIHBhc3NvICgqc3RlcCopIGRvIGB0aGYtc3RlcHBlcmAsIHBvciBleGVtcGxvOlxuICpcbiAqIGBgYFxuICogPHRoZi1zdGVwcGVyPlxuICpcbiAqICAgIDx0aGYtc3RlcCB0LWxhYmVsPVwiRW5kZXJlw6dvXCI+XG4gKlxuICogICAgICAgIDwhLS0gQ29udGXDumRvIHJlZmVyZW50ZSBhbyBlbmRlcmXDp28gLS0+XG4gKlxuICogICAgPC90aGYtc3RlcD5cbiAqXG4gKiAgICA8dGhmLXN0ZXAgdC1sYWJlbD1cIlBhZ2FtZW50b1wiPlxuICpcbiAqICAgICAgICA8IS0tIENvbnRlw7pkbyByZWZlcmVudGUgYW8gcGFnYW1lbnRvIC0tPlxuICpcbiAqICAgIDwvdGhmLXN0ZXA+XG4gKlxuICogIDwvdGhmLXN0ZXBwZXI+XG4gKiBgYGBcbiAqXG4gKiBBIHJlbmRlcml6YcOnw6NvIGRvIGNvbnRlw7pkbyBlbnZvbHZpZG8gbmEgdGVsYSBlIG8gY29udHJvbGUgZG9zIHN0YXR1cyBzw6NvIGZlaXRvcyBhdXRvbWF0aWNhbWVudGUuIE5vIHF1YWwsIG8gcHJpbWVpcm9cbiAqIGB0aGYtc3RlcGAgZW5jb250cmFkbyBzZXLDoSBjb2xvY2FkbyBjb21vIGF0aXZvLCBvIHByw7N4aW1vIGZpY2EgY29tIG8gc3RhdHVzICpkZWZhdWx0KiBlIG9zIGRlbWFpcyBmaWNhbVxuICogZGVzYWJpbGl0YWRvcyAoKmRpc2FibGVkKikuXG4gKlxuICogQW8gY2xpY2FyIG5vIGB0aGYtc3RlcGAgcXVlIGVzdMOhIGNvbSBvIHN0YXR1cyAqZGVmYXVsdCosIG8gcXVlIGVzdMOhIGF0aXZvIGZpY2Fyw6EgY29tIG9cbiAqIHN0YXR1cyBkZSBjb25jbHXDrWRvICgqZG9uZSopIGUgbyBwcsOzeGltbyBxdWUgZXN0YXZhIGRlc2FiaWxpdGFkbyBmaWNhcsOhIGNvbSBvIHN0YXR1cyAqZGVmYXVsdCogZSBvIHJlc3RhbnRlIHBlcm1hbmVjZXLDoVxuICogY29tIG8gc3RhdHVzIGRlc2FiaWxpdGFkby5cbiAqXG4gKiA+IEFvIHV0aWxpemFyIG8gYHRoZi1zdGVwYCwgbyBjb21wb25lbnRlIGB0aGYtc3RlcHBlcmAgZnVuY2lvbmFyw6EgZGUgZm9ybWEgc2VxdWVuY2lhbCwgb3Ugc2VqYSwgbsOjbyBzZXLDoSBwb3Nzw612ZWxcbiAqIHB1bGFyIHBhcmEgb3V0cm8gYHRoZi1zdGVwYCBxdWUgZXN0ZWphIGNvbSBvIHN0YXR1cyBpZ3VhbCBhIGRlc2FiaWxpdGFkbyAoKmRpc2FibGVkKikuXG4gKlxuICogQWNlc3NlIGEgW2RvY3VtZW50YcOnw6NvIGRvIGB0aGYtc3RlcHBlcmBdKC9kb2N1bWVudGF0aW9uL3RoZi1zdGVwcGVyKSBwYXJhIHRlciBtYWlzIGluZm9ybWHDp8O1ZXMgc29icmUgbyBzZXUgZnVuY2lvbmFtZW50b1xuICogZSBleGVtcGxvcyBkZSB1c28uXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoZi1zdGVwJyxcbiAgdGVtcGxhdGVVcmw6ICd0aGYtc3RlcC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgVGhmU3RlcENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuXG4gIHByaXZhdGUgX3N0YXR1cz86IFRoZlN0ZXBwZXJTdGF0dXMgPSBUaGZTdGVwcGVyU3RhdHVzLkRpc2FibGVkO1xuXG4gIC8vIElEIGRvIHN0ZXBcbiAgaWQ/OiBzdHJpbmcgPSB1dWlkKCk7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRnVuw6fDo28gY2hhbWFkYSBxdWFuZG8gbyBwcsOzeGltbyAqc3RlcCogZm9yIGNsaWNhZG8gb3UgcXVhbmRvIG8gbcOpdG9kbyBgVGhmU3RlcHBlckNvbXBvbmVudC5uZXh0KClgIGZvciBjaGFtYWRvLlxuICAgKiBBbyByZXRvcm5hciBgdHJ1ZWAgZGVmaW5lIHF1ZSBlc3NlICpzdGVwKiBmaWNhcsOhIGF0aXZvIGUgbyBhdHVhbCBjb21vIGNvbmNsdcOtZG8gKCpkb25lKikuXG4gICAqXG4gICAqIEFvIHNlciBkaXNwYXJhZGEsIGEgbWVzbWEgcmVjZWJlcsOhIHBvciBwYXLDom1ldHJvIG8gYFRoZlN0ZXBDb21wb25lbnRgIGF0dWFsLlxuICAgKlxuICAgKiBPIGNvbnRleHRvIGRhIGZ1bsOnw6NvIHF1ZSBzZXLDoSBjaGFtYWRhLCBzZXLDoSBvIG1lc21vIHF1ZSBvIGRvIGBUaGZTdGVwQ29tcG9uZW50YCwgZW50w6NvIHBhcmEgcG9kZXIgYWx0ZXJhclxuICAgKiBwYXJhIG8gY29udGV4dG8gZG8gY29tcG9uZW50ZSBxdWUgbyBlc3TDoSB1dGlsaXphbmRvLCBwb2RlIHNlciB1dGlsaXphZG8gYSBwcm9wcmllZGFkZSBgYmluZGAgZG8gSmF2YXNjcmlwdC5cbiAgICogUG9yIGV4ZW1wbG8sIHBhcmEgYSBmdW7Dp8OjbyBgdmFsaWRhdGVgOlxuICAgKlxuICAgKiBgYGBcbiAgICogPHRoZi1zdGVwIHQtbGFiZWw9XCJTdGVwIDFcIiBbdC1jYW4tYWN0aXZlLW5leHQtc3RlcF09XCJ2YWxpZGF0ZS5iaW5kKHRoaXMpXCI+XG4gICAqIC4uLlxuICAgKiA8L3RoZi1zdGVwPlxuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgndC1jYW4tYWN0aXZlLW5leHQtc3RlcCcpIGNhbkFjdGl2ZU5leHRTdGVwOiBGdW5jdGlvbjtcblxuICAvKiogVMOtdHVsbyBxdWUgc2Vyw6EgZXhpYmlkbyBkZXNjcmV2ZW5kbyBvIHBhc3NvICgqc3RlcCopLiAqL1xuICBASW5wdXQoJ3QtbGFiZWwnKSBsYWJlbDogc3RyaW5nO1xuXG4gIC8vIEVzdGFkbyBkZSBleGliacOnw6NvIGRvIGB0aGYtc3RlcGAuXG4gIEBJbnB1dCgndC1zdGF0dXMnKSBzZXQgc3RhdHVzKHN0YXR1czogVGhmU3RlcHBlclN0YXR1cykge1xuICAgIHRoaXMuX3N0YXR1cyA9IHN0YXR1cztcblxuICAgIHRoaXMuc2V0RGlzcGxheU9uQWN0aXZlT3JFcnJvcigpO1xuICB9XG5cbiAgZ2V0IHN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5zZXREaXNwbGF5T25BY3RpdmVPckVycm9yKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0RGlzcGxheU9uQWN0aXZlT3JFcnJvcigpIHtcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zdHlsZS5kaXNwbGF5ID1cbiAgICAgICh0aGlzLnN0YXR1cyA9PT0gVGhmU3RlcHBlclN0YXR1cy5BY3RpdmUgfHwgdGhpcy5zdGF0dXMgPT09IFRoZlN0ZXBwZXJTdGF0dXMuRXJyb3IpID8gJycgOiAnbm9uZSc7XG4gIH1cblxufVxuIl19