/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectorRef, Component, ContentChild, IterableDiffers, ViewChild } from '@angular/core';
import { isTypeof } from '../../utils/util';
import { ThfPopupComponent } from '../thf-popup/thf-popup.component';
import { ThfListViewBaseComponent } from './thf-list-view-base.component';
import { ThfListViewContentTemplateDirective } from './thf-list-view-content-template/thf-list-view-content-template.directive';
import { ThfListViewDetailTemplateDirective } from './thf-list-view-detail-template/thf-list-view-detail-template.directive';
/**
 * \@docsExtends ThfListViewBaseComponent
 *
 * \@example
 *
 * <example name="thf-list-view-basic" title="Totvs List View Basic">
 *  <file name="sample-thf-list-view-basic/sample-thf-list-view-basic.component.html"> </file>
 *  <file name="sample-thf-list-view-basic/sample-thf-list-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-list-view-labs" title="Totvs List View Labs">
 *  <file name="sample-thf-list-view-labs/sample-thf-list-view-labs.component.html"> </file>
 *  <file name="sample-thf-list-view-labs/sample-thf-list-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-list-view-hiring-processes" title="Totvs List View - Hiring Processes">
 *  <file name="sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.component.html"> </file>
 *  <file name="sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.component.ts"> </file>
 *  <file name="sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.service.ts"> </file>
 * </example>
 */
export class ThfListViewComponent extends ThfListViewBaseComponent {
    /**
     * @param {?} changeDetector
     * @param {?} differs
     */
    constructor(changeDetector, differs) {
        super();
        this.changeDetector = changeDetector;
        this.differ = differs.find([]).create(null);
    }
    /**
     * @return {?}
     */
    get hasContentTemplate() {
        return !!this.listViewContentTemplate;
    }
    /**
     * @return {?}
     */
    get hasDetailTemplate() {
        return !!this.listViewDetailTemplate;
    }
    /**
     * @return {?}
     */
    get displayShowMoreButton() {
        return this.items && this.items.length > 0 && this.showMore.observers.length > 0;
    }
    /**
     * @return {?}
     */
    get showButtonsActions() {
        return this.visibleActions && this.visibleActions.length > 0 && this.visibleActions.length <= 2;
    }
    /**
     * @return {?}
     */
    get showPopupActions() {
        return this.visibleActions && this.visibleActions.length > 2;
    }
    /**
     * @return {?}
     */
    get titleHasAction() {
        return this.titleAction.observers.length > 0;
    }
    /**
     * @return {?}
     */
    get visibleActions() {
        return this.actions && this.actions.filter((/**
         * @param {?} action
         * @return {?}
         */
        action => action.visible !== false));
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.initShowDetail();
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.checkItemsChange();
    }
    /**
     * @param {?} item
     * @return {?}
     */
    checkTitleType(item) {
        if (this.propertyLink && item[this.propertyLink]) {
            return item[this.propertyLink].startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    }
    /**
     * @param {?} item
     * @return {?}
     */
    getItemTitle(item) {
        return this.hasContentTemplate && this.listViewContentTemplate.title ?
            this.listViewContentTemplate.title(item) : item[this.propertyTitle];
    }
    /**
     * @return {?}
     */
    hasItems() {
        return this.items && this.items.length > 0;
    }
    /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    returnBooleanValue(listViewAction, item) {
        return isTypeof(listViewAction.disabled, 'function') ? ((/** @type {?} */ (listViewAction))).disabled(item) : listViewAction.disabled;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    trackBy(index) {
        return index;
    }
    /**
     * @param {?} item
     * @param {?} targetRef
     * @return {?}
     */
    togglePopup(item, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.thfPopupComponent.toggle(item);
    }
    /**
     * @private
     * @return {?}
     */
    checkItemsChange() {
        /** @type {?} */
        const changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && this.items && this.items.length && this.select && !this.hideSelectAll) {
            this.showHeader = true;
        }
    }
    /**
     * @private
     * @return {?}
     */
    initShowDetail() {
        if (this.items && this.items.length > 0 && this.hasDetailTemplate && this.listViewDetailTemplate.showDetail) {
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => item.$showDetail = this.listViewDetailTemplate.showDetail(item)));
        }
    }
}
ThfListViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-list-view',
                template: "\n<div\n  [class.thf-list-view-main-container-header]=\"showHeader\"\n  [class.thf-list-view-main-container]=\"!showHeader\"\n  [style.height.px]=\"height\">\n\n  <div *ngIf=\"showHeader\" class=\"thf-list-view-main-header\">\n    <div class=\"thf-checkbox-group-item\">\n      <div class=\"thf-list-view-main-select\">\n        <input class=\"thf-input thf-checkbox-group-input\" type=\"checkbox\"\n          [class.thf-checkbox-group-input-checked]=\"selectAll\"\n          [class.thf-checkbox-group-input-indeterminate]=\"selectAll === null\">\n        <label\n          class=\"thf-checkbox-group-label thf-clickable\"\n          (click)=\"selectAllListItems()\">\n          {{ literals.selectAll }}\n        </label>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"thf-list-view-main-content\">\n    <div class=\"thf-list-view\" *ngIf=\"!hasItems()\">\n      <div class=\"thf-list-view-container-no-data thf-text-center\">\n        <span> {{ literals.noData }} </span>\n      </div>\n    </div>\n\n    <ng-container *ngFor=\"let item of items; let index = index; trackBy: trackBy\">\n      <div class=\"thf-list-view\">\n        <div class=\"thf-list-view-container\">\n          <div class=\"thf-list-view-header\">\n            <div class=\"thf-list-view-title\" [ngSwitch]=\"checkTitleType(item)\">\n              <div *ngIf=\"select\" class=\"thf-list-view-select\">\n                <input class=\"thf-input thf-checkbox-group-input\" type=\"checkbox\"\n                  [class.thf-checkbox-group-input-checked]=\"item.$selected\">\n                <label class=\"thf-checkbox-group-label thf-clickable\" (click)=\"selectListItem(item)\"></label>\n              </div>\n              <a *ngSwitchCase=\"'externalLink'\"\n                class=\"thf-list-view-title-link\"\n                target=\"_blank\"\n                [href]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\">\n                {{ getItemTitle(item) }}\n              </a>\n              <a *ngSwitchCase=\"'internalLink'\"\n                class=\"thf-list-view-title-link\"\n                [routerLink]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\">\n                {{ getItemTitle(item) }}\n              </a>\n              <span *ngSwitchCase=\"'noLink'\"\n                class=\"thf-list-view-title-no-link\"\n                [class.thf-list-view-title-link]=\"titleHasAction\"\n                (click)=\"titleHasAction && runTitleAction(item)\">\n                {{ getItemTitle(item) }}\n              </span>\n            </div>\n\n            <div *ngIf=\"showButtonsActions\" class=\"thf-list-view-actions\">\n              <thf-button *ngFor=\"let action of visibleActions\"\n                t-small=\"true\"\n                [t-disabled]=\"returnBooleanValue(action, item)\"\n                [t-icon]=\"action.icon\"\n                [t-label]=\"action.label\"\n                [t-type]=\"action.type\"\n                (t-click)=\"onClickAction(action, item)\">\n              </thf-button>\n            </div>\n\n            <div *ngIf=\"showPopupActions\" class=\"thf-list-view-more-actions\">\n              <span #popupTarget\n                class=\"thf-icon thf-icon-more thf-list-view-more-icon thf-clickable\"\n                (click)=\"togglePopup(item, popupTarget)\">\n              </span>\n            </div>\n\n          </div>\n\n          <div *ngIf=\"hasContentTemplate\" class=\"thf-list-view-content\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewContentTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\">\n            </ng-template>\n          </div>\n\n          <div @showHideDetail *ngIf=\"hasDetailTemplate && item.$showDetail\" class=\"thf-list-view-detail\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewDetailTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\">\n            </ng-template>\n          </div>\n        </div>\n\n        <div *ngIf=\"hasDetailTemplate\" class=\"thf-list-view-detail-button\">\n          <span class=\"thf-clickable\" (click)=\"item.$showDetail = !item.$showDetail\">\n            {{ item.$showDetail ? literals.hideDetails : literals.showDetails }}\n          </span>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n\n<div *ngIf=\"displayShowMoreButton\" class=\"thf-mb-2 thf-text-center\">\n  <thf-button\n    [t-disabled]=\"showMoreDisabled\"\n    [t-label]=\"literals.loadMoreData\"\n    (t-click)=\"onShowMore()\">\n  </thf-button>\n</div>\n\n<thf-popup #popup [t-actions]=\"actions\" [t-target]=\"popupTarget\">\n</thf-popup>\n",
                animations: [
                    trigger('showHideDetail', [
                        state('*', style({ 'overflow-y': 'visible' })),
                        state('void', style({ 'overflow-y': 'hidden' })),
                        transition('* => void', [
                            style({ height: '*', 'overflow-y': 'hidden' }),
                            animate(100, style({ height: 0 }))
                        ]),
                        transition('void => *', [
                            style({ height: '0' }),
                            animate(100, style({ height: '*' }))
                        ])
                    ])
                ]
            }] }
];
/** @nocollapse */
ThfListViewComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: IterableDiffers }
];
ThfListViewComponent.propDecorators = {
    listViewContentTemplate: [{ type: ContentChild, args: [ThfListViewContentTemplateDirective, { static: true },] }],
    listViewDetailTemplate: [{ type: ContentChild, args: [ThfListViewDetailTemplateDirective, { static: true },] }],
    thfPopupComponent: [{ type: ViewChild, args: ['popup', { static: true },] }]
};
if (false) {
    /** @type {?} */
    ThfListViewComponent.prototype.listViewContentTemplate;
    /** @type {?} */
    ThfListViewComponent.prototype.listViewDetailTemplate;
    /** @type {?} */
    ThfListViewComponent.prototype.thfPopupComponent;
    /**
     * @type {?}
     * @private
     */
    ThfListViewComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    ThfListViewComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWxpc3Qtdmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLWxpc3Qtdmlldy90aGYtbGlzdC12aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRixPQUFPLEVBQW9CLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQVcsZUFBZSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsSSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFHckUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDMUUsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sMkVBQTJFLENBQUM7QUFDaEksT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0seUVBQXlFLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QzdILE1BQU0sT0FBTyxvQkFBcUIsU0FBUSx3QkFBd0I7Ozs7O0lBU2hFLFlBQW9CLGNBQWlDLEVBQUUsT0FBd0I7UUFDN0UsS0FBSyxFQUFFLENBQUM7UUFEVSxtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUFFbkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDOzs7O0lBRUQsSUFBSSxrQkFBa0I7UUFDcEIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDO0lBQ3hDLENBQUM7Ozs7SUFFRCxJQUFJLGlCQUFpQjtR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WSxFQUFFLFFBQVEsRUFBRSxDQUFDOzRCQUM5QyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO3lCQUNuQyxDQUFDO3dCQUNGLFVBQVUsQ0FBQyxXQUFXLEVBQUU7NEJBQ3RCLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQzs0QkFDdEIsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQzt5QkFDckMsQ0FBQztxQkFDSCxDQUFDO2lCQUNIO2FBQ0Y7Ozs7WUFoRDBCLGlCQUFpQjtZQUFvQyxlQUFlOzs7c0NBbUQ1RixZQUFZLFNBQUMsbUNBQW1DLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO3FDQUNsRSxZQUFZLFNBQUMsa0NBQWtDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO2dDQUVqRSxTQUFTLFNBQUMsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs7OztJQUhwQyx1REFBa0k7O0lBQ2xJLHNEQUErSDs7SUFFL0gsaURBQTJFOzs7OztJQUUzRSxzQ0FBZTs7Ozs7SUFFSCw4Q0FBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhbmltYXRlLCBzdGF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgRG9DaGVjaywgSXRlcmFibGVEaWZmZXJzLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgaXNUeXBlb2YgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcbmltcG9ydCB7IFRoZlBvcHVwQ29tcG9uZW50IH0gZnJvbSAnLi4vdGhmLXBvcHVwL3RoZi1wb3B1cC5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBUaGZMaXN0Vmlld0FjdGlvbiB9IGZyb20gJy4vaW50ZXJmYWNlcy90aGYtbGlzdC12aWV3LWFjdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGhmTGlzdFZpZXdCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi90aGYtbGlzdC12aWV3LWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IFRoZkxpc3RWaWV3Q29udGVudFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi90aGYtbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUvdGhmLWxpc3Qtdmlldy1jb250ZW50LXRlbXBsYXRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBUaGZMaXN0Vmlld0RldGFpbFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi90aGYtbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZS90aGYtbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuXG4vKipcbiAqIEBkb2NzRXh0ZW5kcyBUaGZMaXN0Vmlld0Jhc2VDb21wb25lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJ0aGYtbGlzdC12aWV3LWJhc2ljXCIgdGl0bGU9XCJUb3R2cyBMaXN0IFZpZXcgQmFzaWNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1saXN0LXZpZXctYmFzaWMvc2FtcGxlLXRoZi1saXN0LXZpZXctYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLWxpc3Qtdmlldy1iYXNpYy9zYW1wbGUtdGhmLWxpc3Qtdmlldy1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJ0aGYtbGlzdC12aWV3LWxhYnNcIiB0aXRsZT1cIlRvdHZzIExpc3QgVmlldyBMYWJzXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtbGlzdC12aWV3LWxhYnMvc2FtcGxlLXRoZi1saXN0LXZpZXctbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtbGlzdC12aWV3LWxhYnMvc2FtcGxlLXRoZi1saXN0LXZpZXctbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJ0aGYtbGlzdC12aWV3LWhpcmluZy1wcm9jZXNzZXNcIiB0aXRsZT1cIlRvdHZzIExpc3QgVmlldyAtIEhpcmluZyBQcm9jZXNzZXNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1saXN0LXZpZXctaGlyaW5nLXByb2Nlc3Nlcy9zYW1wbGUtdGhmLWxpc3Qtdmlldy1oaXJpbmctcHJvY2Vzc2VzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1saXN0LXZpZXctaGlyaW5nLXByb2Nlc3Nlcy9zYW1wbGUtdGhmLWxpc3Qtdmlldy1oaXJpbmctcHJvY2Vzc2VzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtbGlzdC12aWV3LWhpcmluZy1wcm9jZXNzZXMvc2FtcGxlLXRoZi1saXN0LXZpZXctaGlyaW5nLXByb2Nlc3Nlcy5zZXJ2aWNlLnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGhmLWxpc3QtdmlldycsXG4gIHRlbXBsYXRlVXJsOiAnLi90aGYtbGlzdC12aWV3LmNvbXBvbmVudC5odG1sJyxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ3Nob3dIaWRlRGV0YWlsJywgW1xuICAgICAgc3RhdGUoJyonLCBzdHlsZSh7ICdvdmVyZmxvdy15JzogJ3Zpc2libGUnIH0pKSxcbiAgICAgIHN0YXRlKCd2b2lkJywgc3R5bGUoeyAnb3ZlcmZsb3cteSc6ICdoaWRkZW4nIH0pKSxcbiAgICAgIHRyYW5zaXRpb24oJyogPT4gdm9pZCcsIFtcbiAgICAgICAgc3R5bGUoeyBoZWlnaHQ6ICcqJywgJ292ZXJmbG93LXknOiAnaGlkZGVuJyB9KSxcbiAgICAgICAgYW5pbWF0ZSgxMDAsIHN0eWxlKHsgaGVpZ2h0OiAwIH0pKVxuICAgICAgXSksXG4gICAgICB0cmFuc2l0aW9uKCd2b2lkID0+IConLCBbXG4gICAgICAgIHN0eWxlKHsgaGVpZ2h0OiAnMCcgfSksXG4gICAgICAgIGFuaW1hdGUoMTAwLCBzdHlsZSh7IGhlaWdodDogJyonIH0pKVxuICAgICAgXSlcbiAgICBdKVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFRoZkxpc3RWaWV3Q29tcG9uZW50IGV4dGVuZHMgVGhmTGlzdFZpZXdCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgRG9DaGVjayB7XG5cbiAgQENvbnRlbnRDaGlsZChUaGZMaXN0Vmlld0NvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZSwgeyBzdGF0aWM6IHRydWUgfSkgbGlzdFZpZXdDb250ZW50VGVtcGxhdGU6IFRoZkxpc3RWaWV3Q29udGVudFRlbXBsYXRlRGlyZWN0aXZlO1xuICBAQ29udGVudENoaWxkKFRoZkxpc3RWaWV3RGV0YWlsVGVtcGxhdGVEaXJlY3RpdmUsIHsgc3RhdGljOiB0cnVlIH0pIGxpc3RWaWV3RGV0YWlsVGVtcGxhdGU6IFRoZkxpc3RWaWV3RGV0YWlsVGVtcGxhdGVEaXJlY3RpdmU7XG5cbiAgQFZpZXdDaGlsZCgncG9wdXAnLCB7IHN0YXRpYzogdHJ1ZSB9KSB0aGZQb3B1cENvbXBvbmVudDogVGhmUG9wdXBDb21wb25lbnQ7XG5cbiAgcHJpdmF0ZSBkaWZmZXI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGRpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5kaWZmZXIgPSBkaWZmZXJzLmZpbmQoW10pLmNyZWF0ZShudWxsKTtcbiAgfVxuXG4gIGdldCBoYXNDb250ZW50VGVtcGxhdGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5saXN0Vmlld0NvbnRlbnRUZW1wbGF0ZTtcbiAgfVxuXG4gIGdldCBoYXNEZXRhaWxUZW1wbGF0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLmxpc3RWaWV3RGV0YWlsVGVtcGxhdGU7XG4gIH1cblxuICBnZXQgZGlzcGxheVNob3dNb3JlQnV0dG9uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLml0ZW1zICYmIHRoaXMuaXRlbXMubGVuZ3RoID4gMCAmJiB0aGlzLnNob3dNb3JlLm9ic2VydmVycy5sZW5ndGggPiAwO1xuICB9XG5cbiAgZ2V0IHNob3dCdXR0b25zQWN0aW9ucygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy52aXNpYmxlQWN0aW9ucyAmJiB0aGlzLnZpc2libGVBY3Rpb25zLmxlbmd0aCA+IDAgJiYgdGhpcy52aXNpYmxlQWN0aW9ucy5sZW5ndGggPD0gMjtcbiAgfVxuXG4gIGdldCBzaG93UG9wdXBBY3Rpb25zKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnZpc2libGVBY3Rpb25zICYmIHRoaXMudmlzaWJsZUFjdGlvbnMubGVuZ3RoID4gMjtcbiAgfVxuXG4gIGdldCB0aXRsZUhhc0FjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50aXRsZUFjdGlvbi5vYnNlcnZlcnMubGVuZ3RoID4gMDtcbiAgfVxuXG4gIGdldCB2aXNpYmxlQWN0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5hY3Rpb25zICYmIHRoaXMuYWN0aW9ucy5maWx0ZXIoYWN0aW9uID0+IGFjdGlvbi52aXNpYmxlICE9PSBmYWxzZSk7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pbml0U2hvd0RldGFpbCgpO1xuICB9XG5cbiAgbmdEb0NoZWNrKCkge1xuICAgIHRoaXMuY2hlY2tJdGVtc0NoYW5nZSgpO1xuICB9XG5cbiAgY2hlY2tUaXRsZVR5cGUoaXRlbTogYW55KSB7XG4gICAgaWYgKHRoaXMucHJvcGVydHlMaW5rICYmIGl0ZW1bdGhpcy5wcm9wZXJ0eUxpbmtdICkge1xuICAgICAgcmV0dXJuIGl0ZW1bdGhpcy5wcm9wZXJ0eUxpbmtdLnN0YXJ0c1dpdGgoJ2h0dHAnKSA/ICdleHRlcm5hbExpbmsnIDogJ2ludGVybmFsTGluayc7XG4gICAgfVxuXG4gICAgcmV0dXJuICdub0xpbmsnO1xuICB9XG5cbiAgZ2V0SXRlbVRpdGxlKGl0ZW0pIHtcbiAgICByZXR1cm4gdGhpcy5oYXNDb250ZW50VGVtcGxhdGUgJiYgdGhpcy5saXN0Vmlld0NvbnRlbnRUZW1wbGF0ZS50aXRsZSA/XG4gICAgdGhpcy5saXN0Vmlld0NvbnRlbnRUZW1wbGF0ZS50aXRsZShpdGVtKSA6IGl0ZW1bdGhpcy5wcm9wZXJ0eVRpdGxlXTtcbiAgfVxuXG4gIGhhc0l0ZW1zKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLml0ZW1zICYmIHRoaXMuaXRlbXMubGVuZ3RoID4gMDtcbiAgfVxuXG4gIHJldHVybkJvb2xlYW5WYWx1ZShsaXN0Vmlld0FjdGlvbjogVGhmTGlzdFZpZXdBY3Rpb24sIGl0ZW06IGFueSkge1xuICAgIHJldHVybiBpc1R5cGVvZihsaXN0Vmlld0FjdGlvbi5kaXNhYmxlZCwgJ2Z1bmN0aW9uJykgPyAoPGFueT5saXN0Vmlld0FjdGlvbikuZGlzYWJsZWQoaXRlbSkgOiBsaXN0Vmlld0FjdGlvbi5kaXNhYmxlZDtcbiAgfVxuXG4gIHRyYWNrQnkoaW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICB0b2dnbGVQb3B1cChpdGVtLCB0YXJnZXRSZWY6IEhUTUxFbGVtZW50KSB7XG4gICAgdGhpcy5wb3B1cFRhcmdldCA9IHRhcmdldFJlZjtcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yLmRldGVjdENoYW5nZXMoKTtcblxuICAgIHRoaXMudGhmUG9wdXBDb21wb25lbnQudG9nZ2xlKGl0ZW0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0l0ZW1zQ2hhbmdlKCkge1xuICAgIGNvbnN0IGNoYW5nZXNJdGVtcyA9IHRoaXMuZGlmZmVyLmRpZmYodGhpcy5pdGVtcyk7XG5cbiAgICBpZiAoY2hhbmdlc0l0ZW1zICYmIHRoaXMuc2VsZWN0QWxsKSB7XG4gICAgICB0aGlzLnNlbGVjdEFsbCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXNJdGVtcyAmJiB0aGlzLml0ZW1zICYmIHRoaXMuaXRlbXMubGVuZ3RoICYmIHRoaXMuc2VsZWN0ICYmICF0aGlzLmhpZGVTZWxlY3RBbGwpIHtcbiAgICAgIHRoaXMuc2hvd0hlYWRlciA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpbml0U2hvd0RldGFpbCgpIHtcbiAgICBpZiAodGhpcy5pdGVtcyAmJiB0aGlzLml0ZW1zLmxlbmd0aCA+IDAgJiYgdGhpcy5oYXNEZXRhaWxUZW1wbGF0ZSAmJiB0aGlzLmxpc3RWaWV3RGV0YWlsVGVtcGxhdGUuc2hvd0RldGFpbCkge1xuICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4gaXRlbS4kc2hvd0RldGFpbCA9IHRoaXMubGlzdFZpZXdEZXRhaWxUZW1wbGF0ZS5zaG93RGV0YWlsKGl0ZW0pKTtcbiAgICB9XG4gIH1cblxufVxuIl19