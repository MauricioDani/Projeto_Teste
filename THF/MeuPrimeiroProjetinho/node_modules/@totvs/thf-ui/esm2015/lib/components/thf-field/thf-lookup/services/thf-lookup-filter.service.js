/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { isTypeof } from '../../../../utils/util';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço padrão utilizado para filtrar os dados do componente thf-lookup.
 */
export class ThfLookupFilterService {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * @param {?} filter
     * @param {?} page
     * @param {?=} pageSize
     * @param {?=} filterParams
     * @return {?}
     */
    getFilteredData(filter, page, pageSize, filterParams) {
        /** @type {?} */
        const validatedFilterParams = this.validateParams(filterParams);
        return this.httpClient.get(this.url, { params: Object.assign({ page: page.toString(), pageSize: pageSize.toString() }, validatedFilterParams, { filter }) });
    }
    /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    getObjectByValue(value, filterParams) {
        /** @type {?} */
        const validatedFilterParams = this.validateParams(filterParams);
        return this.httpClient.get(`${this.url}/${value}`, { params: validatedFilterParams });
    }
    /**
     * @param {?} url
     * @return {?}
     */
    setUrl(url) {
        this.url = url;
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    validateParams(params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    }
}
ThfLookupFilterService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfLookupFilterService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfLookupFilterService.prototype.url;
    /**
     * @type {?}
     * @private
     */
    ThfLookupFilterService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWxvb2t1cC1maWx0ZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtZmllbGQvdGhmLWxvb2t1cC9zZXJ2aWNlcy90aGYtbG9va3VwLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7Ozs7Ozs7O0FBWWxELE1BQU0sT0FBTyxzQkFBc0I7Ozs7SUFJakMsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFHLENBQUM7Ozs7Ozs7O0lBRTlDLGVBQWUsQ0FBQyxNQUFXLEVBQUUsSUFBWSxFQUFFLFFBQWlCLEVBQUUsWUFBa0I7O2NBQ3hFLHFCQUFxQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDO1FBRS9ELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQ3hCLElBQUksQ0FBQyxHQUFHLEVBQ1IsRUFBRSxNQUFNLGtCQUFJLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxRQUFRLEVBQUUsSUFBSyxxQkFBcUIsSUFBRSxNQUFNLEdBQUUsRUFBRSxDQUN2RyxDQUFDO0lBQ0osQ0FBQzs7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsS0FBYSxFQUFFLFlBQWtCOztjQUMxQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQztRQUUvRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxDQUFDLENBQUM7SUFDeEYsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsR0FBVztRQUNoQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNqQixDQUFDOzs7Ozs7SUFFTyxjQUFjLENBQUMsTUFBVztRQUNoQyxPQUFPLFFBQVEsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNuRixDQUFDOzs7WUE1QkYsVUFBVTs7OztZQWhCRixVQUFVOzs7Ozs7O0lBbUJqQixxQ0FBb0I7Ozs7O0lBRVIsNENBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBpc1R5cGVvZiB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBUaGZMb29rdXBGaWx0ZXIgfSBmcm9tICcuLi9pbnRlcmZhY2VzL3RoZi1sb29rdXAtZmlsdGVyLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2VydmnDp28gcGFkcsOjbyB1dGlsaXphZG8gcGFyYSBmaWx0cmFyIG9zIGRhZG9zIGRvIGNvbXBvbmVudGUgdGhmLWxvb2t1cC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRoZkxvb2t1cEZpbHRlclNlcnZpY2UgaW1wbGVtZW50cyBUaGZMb29rdXBGaWx0ZXIge1xuXG4gIHByaXZhdGUgdXJsOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7fVxuXG4gIGdldEZpbHRlcmVkRGF0YShmaWx0ZXI6IGFueSwgcGFnZTogbnVtYmVyLCBwYWdlU2l6ZT86IG51bWJlciwgZmlsdGVyUGFyYW1zPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCB2YWxpZGF0ZWRGaWx0ZXJQYXJhbXMgPSB0aGlzLnZhbGlkYXRlUGFyYW1zKGZpbHRlclBhcmFtcyk7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldChcbiAgICAgIHRoaXMudXJsLFxuICAgICAgeyBwYXJhbXM6IHsgcGFnZTogcGFnZS50b1N0cmluZygpLCBwYWdlU2l6ZTogcGFnZVNpemUudG9TdHJpbmcoKSwgLi4udmFsaWRhdGVkRmlsdGVyUGFyYW1zLCBmaWx0ZXIgfSB9XG4gICAgKTtcbiAgfVxuXG4gIGdldE9iamVjdEJ5VmFsdWUodmFsdWU6IHN0cmluZywgZmlsdGVyUGFyYW1zPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCB2YWxpZGF0ZWRGaWx0ZXJQYXJhbXMgPSB0aGlzLnZhbGlkYXRlUGFyYW1zKGZpbHRlclBhcmFtcyk7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldChgJHt0aGlzLnVybH0vJHt2YWx1ZX1gLCB7IHBhcmFtczogdmFsaWRhdGVkRmlsdGVyUGFyYW1zIH0pO1xuICB9XG5cbiAgc2V0VXJsKHVybDogc3RyaW5nKSB7XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlUGFyYW1zKHBhcmFtczogYW55KSB7XG4gICAgcmV0dXJuIGlzVHlwZW9mKHBhcmFtcywgJ29iamVjdCcpICYmICFBcnJheS5pc0FycmF5KHBhcmFtcykgPyBwYXJhbXMgOiB1bmRlZmluZWQ7XG4gIH1cblxufVxuIl19