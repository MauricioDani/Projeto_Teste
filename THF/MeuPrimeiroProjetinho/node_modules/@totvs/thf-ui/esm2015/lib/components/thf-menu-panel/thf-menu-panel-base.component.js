/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { v4 as uuid } from 'uuid';
import { isExternalLink } from '../../utils/util';
/**
 * \@description
 *
 * Este é um componente de menu lateral composto apenas por ícones e com um nível, utilizado para navegação
 * em páginas internas, externas da aplicação ou aciona uma ação.
 *
 * O componente `thf-menu-panel` recebe uma lista de objetos do tipo `MenuPanelItem` com as informações dos
 * itens de menu como textos, links para redirecionamento, ações e ícones.
 */
export class ThfMenuPanelBaseComponent {
    /**
     * Lista dos itens do `thf-menu-panel`. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
     * @param {?} menus
     * @return {?}
     */
    set menus(menus) {
        this._menus = Array.isArray(menus) ? menus : [];
        this.setMenuExtraProperties(this._menus);
        this.validateMenus(this._menus);
    }
    /**
     * @return {?}
     */
    get menus() {
        return this._menus;
    }
    /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    setMenuExtraProperties(menus) {
        menus.forEach((/**
         * @param {?} menuItem
         * @return {?}
         */
        menuItem => this.setMenuItemProperties((/** @type {?} */ (menuItem)))));
    }
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    setMenuItemProperties(menuItem) {
        menuItem.id = menuItem.id || uuid();
        menuItem.type = this.setMenuType(menuItem);
    }
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    setMenuType(menuItem) {
        if (!menuItem.link) {
            return 'noLink';
        }
        if (isExternalLink(menuItem.link)) {
            return 'externalLink';
        }
        return 'internalLink';
    }
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    validateMenu(menuItem) {
        if (!menuItem.label) {
            throw new Error('O atributo ThfMenuPanelItem.label não pode ser vazio.');
        }
        if (!menuItem.icon) {
            throw new Error('O atributo ThfMenuPanelItem.icon não pode ser vazio.');
        }
    }
    /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    validateMenus(menus) {
        menus.forEach((/**
         * @param {?} menu
         * @return {?}
         */
        menu => this.validateMenu(menu)));
    }
}
ThfMenuPanelBaseComponent.propDecorators = {
    menus: [{ type: Input, args: ['t-menus',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfMenuPanelBaseComponent.prototype._menus;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLW1lbnUtcGFuZWwtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLW1lbnUtcGFuZWwvdGhmLW1lbnUtcGFuZWwtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLEVBQUUsSUFBSSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7Ozs7Ozs7O0FBY2xELE1BQU0sT0FBTyx5QkFBeUI7Ozs7OztJQUtwQyxJQUFzQixLQUFLLENBQUMsS0FBOEI7UUFDeEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUVoRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Ozs7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7Ozs7O0lBRU8sc0JBQXNCLENBQUMsS0FBOEI7UUFDM0QsS0FBSyxDQUFDLE9BQU87Ozs7UUFBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxtQkFBMkIsUUFBUSxFQUFBLENBQUMsRUFBQyxDQUFDO0lBQzdGLENBQUM7Ozs7OztJQUVPLHFCQUFxQixDQUFDLFFBQWtDO1FBQzlELFFBQVEsQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNwQyxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7Ozs7O0lBRU8sV0FBVyxDQUFDLFFBQTBCO1FBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFO1lBQ2xCLE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBRUQsSUFBSSxjQUFjLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sY0FBYyxDQUFDO1NBQ3ZCO1FBRUQsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQzs7Ozs7O0lBRU8sWUFBWSxDQUFDLFFBQTBCO1FBQzdDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO1lBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsdURBQXVELENBQUMsQ0FBQztTQUMxRTtRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQztTQUN6RTtJQUNILENBQUM7Ozs7OztJQUVPLGFBQWEsQ0FBQyxLQUFLO1FBQ3pCLEtBQUssQ0FBQyxPQUFPOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUM7SUFDakQsQ0FBQzs7O29CQTVDQSxLQUFLLFNBQUMsU0FBUzs7Ozs7OztJQUhoQiwyQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHY0IGFzIHV1aWQgfSBmcm9tICd1dWlkJztcbmltcG9ydCB7IGlzRXh0ZXJuYWxMaW5rIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFRoZk1lbnVQYW5lbEl0ZW0gfSBmcm9tICcuL3RoZi1tZW51LXBhbmVsLWl0ZW0vdGhmLW1lbnUtcGFuZWwtaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGhmTWVudVBhbmVsSXRlbUludGVybmFsIH0gZnJvbSAnLi90aGYtbWVudS1wYW5lbC1pdGVtL3RoZi1tZW51LXBhbmVsLWl0ZW0taW50ZXJuYWwuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RlIMOpIHVtIGNvbXBvbmVudGUgZGUgbWVudSBsYXRlcmFsIGNvbXBvc3RvIGFwZW5hcyBwb3Igw61jb25lcyBlIGNvbSB1bSBuw612ZWwsIHV0aWxpemFkbyBwYXJhIG5hdmVnYcOnw6NvXG4gKiBlbSBww6FnaW5hcyBpbnRlcm5hcywgZXh0ZXJuYXMgZGEgYXBsaWNhw6fDo28gb3UgYWNpb25hIHVtYSBhw6fDo28uXG4gKlxuICogTyBjb21wb25lbnRlIGB0aGYtbWVudS1wYW5lbGAgcmVjZWJlIHVtYSBsaXN0YSBkZSBvYmpldG9zIGRvIHRpcG8gYE1lbnVQYW5lbEl0ZW1gIGNvbSBhcyBpbmZvcm1hw6fDtWVzIGRvc1xuICogaXRlbnMgZGUgbWVudSBjb21vIHRleHRvcywgbGlua3MgcGFyYSByZWRpcmVjaW9uYW1lbnRvLCBhw6fDtWVzIGUgw61jb25lcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRoZk1lbnVQYW5lbEJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX21lbnVzO1xuXG4gIC8qKiBMaXN0YSBkb3MgaXRlbnMgZG8gYHRoZi1tZW51LXBhbmVsYC4gU2UgbyB2YWxvciBlc3RpdmVyIGluZGVmaW5pZG8gb3UgaW52w6FsaWRvLCBzZXLDoSBpbmljaWFsaXphZG8gY29tbyB1bSBhcnJheSB2YXppby4gKi9cbiAgQElucHV0KCd0LW1lbnVzJykgc2V0IG1lbnVzKG1lbnVzOiBBcnJheTxUaGZNZW51UGFuZWxJdGVtPikge1xuICAgIHRoaXMuX21lbnVzID0gQXJyYXkuaXNBcnJheShtZW51cykgPyBtZW51cyA6IFtdO1xuXG4gICAgdGhpcy5zZXRNZW51RXh0cmFQcm9wZXJ0aWVzKHRoaXMuX21lbnVzKTtcbiAgICB0aGlzLnZhbGlkYXRlTWVudXModGhpcy5fbWVudXMpO1xuICB9XG5cbiAgZ2V0IG1lbnVzKCkge1xuICAgIHJldHVybiB0aGlzLl9tZW51cztcbiAgfVxuXG4gIHByaXZhdGUgc2V0TWVudUV4dHJhUHJvcGVydGllcyhtZW51czogQXJyYXk8VGhmTWVudVBhbmVsSXRlbT4pIHtcbiAgICBtZW51cy5mb3JFYWNoKG1lbnVJdGVtID0+IHRoaXMuc2V0TWVudUl0ZW1Qcm9wZXJ0aWVzKDxUaGZNZW51UGFuZWxJdGVtSW50ZXJuYWw+IG1lbnVJdGVtKSk7XG4gIH1cblxuICBwcml2YXRlIHNldE1lbnVJdGVtUHJvcGVydGllcyhtZW51SXRlbTogVGhmTWVudVBhbmVsSXRlbUludGVybmFsKSB7XG4gICAgbWVudUl0ZW0uaWQgPSBtZW51SXRlbS5pZCB8fCB1dWlkKCk7XG4gICAgbWVudUl0ZW0udHlwZSA9IHRoaXMuc2V0TWVudVR5cGUobWVudUl0ZW0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRNZW51VHlwZShtZW51SXRlbTogVGhmTWVudVBhbmVsSXRlbSk6IHN0cmluZyB7XG4gICAgaWYgKCFtZW51SXRlbS5saW5rKSB7XG4gICAgICByZXR1cm4gJ25vTGluayc7XG4gICAgfVxuXG4gICAgaWYgKGlzRXh0ZXJuYWxMaW5rKG1lbnVJdGVtLmxpbmspKSB7XG4gICAgICByZXR1cm4gJ2V4dGVybmFsTGluayc7XG4gICAgfVxuXG4gICAgcmV0dXJuICdpbnRlcm5hbExpbmsnO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZU1lbnUobWVudUl0ZW06IFRoZk1lbnVQYW5lbEl0ZW0pIHtcbiAgICBpZiAoIW1lbnVJdGVtLmxhYmVsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ08gYXRyaWJ1dG8gVGhmTWVudVBhbmVsSXRlbS5sYWJlbCBuw6NvIHBvZGUgc2VyIHZhemlvLicpO1xuICAgIH1cblxuICAgIGlmICghbWVudUl0ZW0uaWNvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPIGF0cmlidXRvIFRoZk1lbnVQYW5lbEl0ZW0uaWNvbiBuw6NvIHBvZGUgc2VyIHZhemlvLicpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVNZW51cyhtZW51cyk6IHZvaWQge1xuICAgIG1lbnVzLmZvckVhY2gobWVudSA9PiB0aGlzLnZhbGlkYXRlTWVudShtZW51KSk7XG4gIH1cblxufVxuIl19