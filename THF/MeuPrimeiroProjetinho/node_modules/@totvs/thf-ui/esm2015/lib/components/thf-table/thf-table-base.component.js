/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, capitalizeFirstLetter, convertToBoolean, isTypeof, sortValues, thfLocaleDefault } from '../../utils/util';
/** @type {?} */
export const thfTableContainer = ['border', 'shadow'];
/** @type {?} */
export const thfTableContainerDefault = 'border';
/** @type {?} */
export const thfTableLiteralsDefault = {
    en: (/** @type {?} */ ({
        noColumns: 'Columns are not defined',
        noData: 'No data found',
        loadingData: 'Loading',
        loadMoreData: 'Load more data',
        seeCompleteSubtitle: 'See complete subtitle',
        completeSubtitle: 'Complete subtitle'
    })),
    es: (/** @type {?} */ ({
        noColumns: 'Columnas no definidas',
        noData: 'Datos no encontrados',
        loadingData: 'Cargando datos',
        loadMoreData: 'Cargar más resultados',
        seeCompleteSubtitle: 'Ver subtitulo completo',
        completeSubtitle: 'Subtitulo completo'
    })),
    pt: (/** @type {?} */ ({
        noColumns: 'Nenhuma definição de colunas',
        noData: 'Nenhum dado encontrado',
        loadingData: 'Carregando',
        loadMoreData: 'Carregar mais resultados',
        seeCompleteSubtitle: 'Ver legenda completa',
        completeSubtitle: 'Legenda completa'
    }))
};
/**
 * \@description
 *
 * Este componente de tabela é utilizado para exibição de listas, com diferentes tipos de dados que podem ser texto,
 * data, horário e número com formato personalizado.
 *
 * É possivel criar uma tabela com ordenação de dados, linhas com detalhes, coluna de seleção de linhas,
 * coluna com ações e também carregamento por demanda com o botão "Carregar mais resultados".
 *
 * Também existe a possibilidade de utilizar _template_ para os detalhes das linhas,
 * veja mais em **[t-table-row-template](/documentation/thf-table-row-template)**.
 *
 * Quando a largura de todas as colunas for definida, caso o tamanho total delas seja maior que a tabela, será exibido um scroll horizontal.
 *
 * @abstract
 */
export class ThfTableBaseComponent {
    /**
     * @param {?} thfDate
     */
    constructor(thfDate) {
        this.thfDate = thfDate;
        this._actions = [];
        this._columns = [];
        this._hideDetail = false;
        this._hideTextOverflow = false;
        this._loading = false;
        /**
         * Ação executada quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allSelected = new EventEmitter();
        /**
         * Ação executada quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allUnselected = new EventEmitter();
        /**
         * Ação executada ao selecionar uma linha do `thf-table`.
         */
        this.selected = new EventEmitter();
        /**
         * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
         * não é visível.
         */
        this.showMore = new EventEmitter();
        /**
         * Ação executada ao desmarcar a seleção de uma linha do `thf-table`.
         */
        this.unselected = new EventEmitter();
        this.selectAll = false;
        this.sortedColumn = { property: (/** @type {?} */ (null)), ascending: true };
    }
    /**
     * \@description
     *
     * Lista de itens da tabela.
     * > Se falso, será inicializado como um *array* vazio.
     * @param {?} items
     * @return {?}
     */
    set items(items) {
        this._items = Array.isArray(items) ? items : [];
        // when haven't items, selectAll should be unchecked.
        if (!this.hasItems()) {
            this.selectAll = false;
        }
        else if (!this.hasColumns()) {
            this.columns = this.getDefaultColumns(items[0]);
        }
    }
    /**
     * @return {?}
     */
    get items() {
        return this._items;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `ThfTableColumn`.
     * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
     * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
     *
     * @param {?} columns
     * @return {?}
     */
    set columns(columns) {
        this._columns = columns || [];
        if (this._columns.length) {
            this.setColumnLink();
            this.calculateWidthHeaders();
        }
        else if (this.hasItems()) {
            this._columns = this.getDefaultColumns(this.items[0]);
        }
    }
    /**
     * @return {?}
     */
    get columns() {
        return this._columns;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Adiciona um contorno arredondado ao `thf-table`, as opções são:
     * - `border`: com bordas/linhas.
     * - `shadow`: com sombras.
     *
     * \@default `border`
     * @param {?} value
     * @return {?}
     */
    set container(value) {
        this._container = thfTableContainer.includes(value) ? value : thfTableContainerDefault;
        this.showContainer(this._container);
    }
    /**
     * @return {?}
     */
    get container() {
        return this._container;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
     * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
     * o mesmo será exibido através do [`thf-tooltip`](/documentation/thf-tooltip).
     * @param {?} hideTextOverflow
     * @return {?}
     */
    set hideTextOverflow(hideTextOverflow) {
        this._hideTextOverflow = convertToBoolean(hideTextOverflow);
    }
    /**
     * @return {?}
     */
    get hideTextOverflow() {
        return this._hideTextOverflow;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define a altura da tabela em *pixels* e fixa o cabeçalho.
     * @param {?} height
     * @return {?}
     */
    set height(height) {
        this._height = height;
        this.calculateHeightTableContainer(height);
        this.calculateWidthHeaders();
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Habilita a visualização da lista de detalhes de cada linha da coluna.
     *
     * \@default `false`
     * @param {?} hideDetail
     * @return {?}
     */
    set hideDetail(hideDetail) {
        this._hideDetail = hideDetail != null && hideDetail.toString() === '' ? true : convertToBoolean(hideDetail);
        this.calculateWidthHeaders();
    }
    /**
     * @return {?}
     */
    get hideDetail() {
        return this._hideDetail;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto com as literais usadas no `thf-table`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: ThfTableLiterals = {
     *    loadMoreData: 'Buscar mais dados',
     *    loadingData: 'Processando',
     *    noColumns: 'Sem colunas',
     *    noData: 'Sem dados',
     *    seeCompleteSubtitle: 'Mostrar legenda completa',
     *    completeSubtitle: 'Todas legendas'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: ThfTableLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <thf-table
     *   [t-literals]="customLiterals">
     * </thf-table>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, thfTableLiteralsDefault[thfLocaleDefault], thfTableLiteralsDefault[browserLanguage()], value);
        }
        else {
            this._literals = thfTableLiteralsDefault[browserLanguage()];
        }
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || thfTableLiteralsDefault[browserLanguage()];
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
     *
     * \@default `false`
     * @param {?} loading
     * @return {?}
     */
    set loading(loading) {
        this._loading = convertToBoolean(loading);
        this.calculateWidthHeaders();
    }
    /**
     * @return {?}
     */
    get loading() {
        return this._loading;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Habilita na primeira coluna a opção de selecionar linhas,
     * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
     * > Exemplo: `item.$selected` ou `item['$selected']`.
     * > Os itens filhos possuem comportamento independente do item pai.
     *
     * \@default `false`
     * @param {?} checkbox
     * @return {?}
     */
    set checkbox(checkbox) {
        this._checkbox = (/** @type {?} */ (checkbox)) === '' ? true : convertToBoolean(checkbox);
        this.calculateWidthHeaders();
    }
    /**
     * @return {?}
     */
    get checkbox() {
        return this._checkbox;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define uma lista de ações.
     *
     * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
     * se encarrega de agrupá-las exibindo o ícone [**thf-icon-more**](/guides/icons) que listará as ações ao ser clicado.
     *
     * **A coluna de ações não será exibida quando:**
     *  - a lista conter valores inválidos ou indefinidos.
     *  - tenha uma única ação e a mesma não for visível.
     * @param {?} actions
     * @return {?}
     */
    set actions(actions) {
        this._actions = actions;
        this.calculateWidthHeaders();
    }
    /**
     * @return {?}
     */
    get actions() {
        return this._actions;
    }
    /**
     * @param {?} sort
     * @return {?}
     */
    set setSort(sort) {
        this.sort = sort === '' ? false : convertToBoolean(sort);
    }
    /**
     * @param {?} showMoreDisabled
     * @return {?}
     */
    set setShowMoreDisabled(showMoreDisabled) {
        this.showMoreDisabled = showMoreDisabled === '' ? false : convertToBoolean(showMoreDisabled);
    }
    /**
     * @param {?} striped
     * @return {?}
     */
    set setStriped(striped) {
        this.striped = striped === '' ? false : convertToBoolean(striped);
    }
    /**
     * @param {?} hideSelectAll
     * @return {?}
     */
    set setHideSelectAll(hideSelectAll) {
        this.hideSelectAll = hideSelectAll === '' ? false : convertToBoolean(hideSelectAll);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setSingleSelect(value) {
        this.singleSelect = value === '' ? true : convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.singleSelect || this.hideSelectAll) {
            this.selectAll = false;
            this.hideSelectAll = true;
        }
    }
    /**
     * @return {?}
     */
    selectAllRows() {
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                item.$selected = this.selectAll;
            }));
            this.emitSelectAllEvents(this.selectAll, this.items);
        }
    }
    /**
     * @param {?} row
     * @return {?}
     */
    selectRow(row) {
        row.$selected = !row.$selected;
        this.emitSelectEvents(row);
        this.configAfterSelectRow(this.items, row);
    }
    /**
     * @param {?} row
     * @return {?}
     */
    selectDetailRow(row) {
        this.emitSelectEvents(row);
    }
    // Colunas que são inseridas no <head> da tabela
    /**
     * @return {?}
     */
    getMainColumns() {
        /** @type {?} */
        const typesValid = ['string', 'number', 'boolean', 'date', 'time', 'dateTime', 'currency', 'subtitle', 'link', 'label', 'icon'];
        return this.columns.filter((/**
         * @param {?} col
         * @return {?}
         */
        col => !col.type || typesValid.includes(col.type)));
    }
    // Retorna a coluna da lista de colunas que é do tipo detail
    /**
     * @return {?}
     */
    getColumnMasterDetail() {
        return this.columns.find((/**
         * @param {?} col
         * @return {?}
         */
        col => col.type === 'detail'));
    }
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    getClassColor(row, column) {
        return column.color ? `thf-text-${this.getColumnColor(row, column)}` : '';
    }
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    getColumnColor(row, column) {
        /** @type {?} */
        const columnColor = column.color;
        return isTypeof(columnColor, 'function') ? columnColor(row, column.property) : columnColor;
    }
    // Retorna as colunas com status
    /**
     * @return {?}
     */
    getSubtitleColumns() {
        return this.columns.filter((/**
         * @param {?} col
         * @return {?}
         */
        col => col.type === 'subtitle'));
    }
    // Retorna as colunas com ícones
    /**
     * @return {?}
     */
    getIconColumns() {
        return this.columns.filter((/**
         * @param {?} col
         * @return {?}
         */
        col => col.type === 'icon'));
    }
    // Retorna o nome da coluna do tipo detail
    /**
     * @return {?}
     */
    getNameColumnDetail() {
        /** @type {?} */
        const detail = this.getColumnMasterDetail();
        return detail ? detail.property : null;
    }
    /**
     * Retorna as linhas do `thf-table` que estão selecionadas.
     * @return {?}
     */
    getSelectedRows() {
        return this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.$selected));
    }
    /**
     * Retorna as linhas do `thf-table` que não estão selecionadas.
     * @return {?}
     */
    getUnselectedRows() {
        return this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => !item.$selected));
    }
    /**
     * @return {?}
     */
    hasColumns() {
        return this.columns && this.columns.length > 0;
    }
    /**
     * @return {?}
     */
    hasItems() {
        return this.items && this.items.length > 0;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    toggleRowAction(row) {
        /** @type {?} */
        const toggleShowAction = row.$showAction;
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item.$showAction) {
                item.$showAction = false;
            }
        }));
        row.$showAction = !toggleShowAction;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    sortColumn(column) {
        if (!this.sort || column.type === 'detail') {
            return;
        }
        this.sortedColumn.ascending = this.sortedColumn.property === column ? !this.sortedColumn.ascending : true;
        this.sortArray(column, this.sortedColumn.ascending);
        this.sortedColumn.property = column;
    }
    /**
     * @param {?} column
     * @param {?} ascending
     * @return {?}
     */
    sortArray(column, ascending) {
        this.items.sort((/**
         * @param {?} leftSide
         * @param {?} rightSide
         * @return {?}
         */
        (leftSide, rightSide) => {
            if (column.type === 'date' || column.type === 'dateTime') {
                return this.thfDate.sortDate(leftSide[column.property], rightSide[column.property], ascending);
            }
            else {
                return sortValues(leftSide[column.property], rightSide[column.property], ascending);
            }
        }));
    }
    /**
     * @return {?}
     */
    onShowMore() {
        this.showMore.emit(null);
    }
    /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    getDefaultColumns(item) {
        /** @type {?} */
        const keys = Object.keys(item);
        return keys.filter((/**
         * @param {?} key
         * @return {?}
         */
        key => (typeof item[key] !== 'object'))).map((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            return { label: capitalizeFirstLetter(key), property: key };
        }));
    }
    /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    configAfterSelectRow(rows, row) {
        if (this.singleSelect) {
            this.unselectOtherRows(rows, row);
        }
        else if (!this.hideSelectAll) {
            this.selectAll = this.isEverySelected(rows);
        }
    }
    /**
     * @private
     * @param {?} selectAll
     * @param {?} rows
     * @return {?}
     */
    emitSelectAllEvents(selectAll, rows) {
        selectAll ? this.allSelected.emit(rows) : this.allUnselected.emit(rows);
    }
    /**
     * @private
     * @param {?} row
     * @return {?}
     */
    emitSelectEvents(row) {
        row.$selected ? this.selected.emit(row) : this.unselected.emit(row);
    }
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    isEverySelected(items) {
        /** @type {?} */
        const someCheckedOrIndeterminate = (/**
         * @param {?} item
         * @return {?}
         */
        item => item.$selected || item.$selected === null);
        /** @type {?} */
        const everyChecked = (/**
         * @param {?} item
         * @return {?}
         */
        item => item.$selected);
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    setColumnLink() {
        this.columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        column => {
            if (column['type'] === 'link' && !column['link']) {
                column['link'] = 'link';
            }
        }));
    }
    /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    unselectOtherRows(rows, row) {
        rows.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item !== row) {
                item.$selected = false;
            }
        }));
    }
}
ThfTableBaseComponent.propDecorators = {
    items: [{ type: Input, args: ['t-items',] }],
    columns: [{ type: Input, args: ['t-columns',] }],
    container: [{ type: Input, args: ['t-container',] }],
    hideTextOverflow: [{ type: Input, args: ['t-hide-text-overflow',] }],
    height: [{ type: Input, args: ['t-height',] }],
    hideDetail: [{ type: Input, args: ['t-hide-detail',] }],
    literals: [{ type: Input, args: ['t-literals',] }],
    loading: [{ type: Input, args: ['t-loading',] }],
    checkbox: [{ type: Input, args: ['t-checkbox',] }],
    actions: [{ type: Input, args: ['t-actions',] }],
    setSort: [{ type: Input, args: ['t-sort',] }],
    setShowMoreDisabled: [{ type: Input, args: ['t-show-more-disabled',] }],
    setStriped: [{ type: Input, args: ['t-striped',] }],
    setHideSelectAll: [{ type: Input, args: ['t-hide-select-all',] }],
    setSingleSelect: [{ type: Input, args: ['t-single-select',] }],
    allSelected: [{ type: Output, args: ['t-all-selected',] }],
    allUnselected: [{ type: Output, args: ['t-all-unselected',] }],
    selected: [{ type: Output, args: ['t-selected',] }],
    showMore: [{ type: Output, args: ['t-show-more',] }],
    unselected: [{ type: Output, args: ['t-unselected',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._checkbox;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._container;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._hideDetail;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._hideTextOverflow;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._items;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype._loading;
    /**
     * \@optional
     *
     * \@description
     *
     * Habilita em todas as colunas a opção de ordenação de dados. Caso a coluna seja do tipo 'data' ou 'dateTime' a
     * mesma deve respeitar os tipos de entrada definidos para que sejam ordenadas.
     *
     * \@default `false`
     * @type {?}
     */
    ThfTableBaseComponent.prototype.sort;
    /**
     * \@description
     *
     * Se verdadeiro, torna habilitado o botão "Carregar mais resultados".
     *
     * \@default `false`
     * @type {?}
     */
    ThfTableBaseComponent.prototype.showMoreDisabled;
    /**
     * \@description
     *
     * Habilita ou desabilita o estilo listrado da tabela (`striped`).
     * > Recomendado para tabelas com maior número de dados, facilitando a sua visualização na tabela.
     *
     * \@default `false`
     * @type {?}
     */
    ThfTableBaseComponent.prototype.striped;
    /**
     * \@description
     *
     * Esconde o *checkbox* para seleção de todas as linhas.
     *
     * > Sempre receberá *true* caso a seleção de apenas uma linha esteja ativa.
     *
     * \@default `false`
     * @type {?}
     */
    ThfTableBaseComponent.prototype.hideSelectAll;
    /**
     * \@description
     *
     * Define que somente uma linha da tabela pode ser selecionada.
     *
     * > Esta definição não se aplica aos itens filhos, os mesmos possuem comportamento independente do item pai.
     * @type {?}
     */
    ThfTableBaseComponent.prototype.singleSelect;
    /**
     * Ação executada quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
     * @type {?}
     */
    ThfTableBaseComponent.prototype.allSelected;
    /**
     * Ação executada quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
     * @type {?}
     */
    ThfTableBaseComponent.prototype.allUnselected;
    /**
     * Ação executada ao selecionar uma linha do `thf-table`.
     * @type {?}
     */
    ThfTableBaseComponent.prototype.selected;
    /**
     * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
     * não é visível.
     * @type {?}
     */
    ThfTableBaseComponent.prototype.showMore;
    /**
     * Ação executada ao desmarcar a seleção de uma linha do `thf-table`.
     * @type {?}
     */
    ThfTableBaseComponent.prototype.unselected;
    /** @type {?} */
    ThfTableBaseComponent.prototype.selectAll;
    /** @type {?} */
    ThfTableBaseComponent.prototype.sortedColumn;
    /**
     * @type {?}
     * @private
     */
    ThfTableBaseComponent.prototype.thfDate;
    /**
     * @abstract
     * @param {?} height
     * @return {?}
     */
    ThfTableBaseComponent.prototype.calculateHeightTableContainer = function (height) { };
    /**
     * @abstract
     * @return {?}
     */
    ThfTableBaseComponent.prototype.calculateWidthHeaders = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} container
     * @return {?}
     */
    ThfTableBaseComponent.prototype.showContainer = function (container) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXRhYmxlLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi10YWJsZS90aGYtdGFibGUtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsZUFBZSxFQUFFLHFCQUFxQixFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFPcEksTUFBTSxPQUFPLGlCQUFpQixHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQzs7QUFDckQsTUFBTSxPQUFPLHdCQUF3QixHQUFHLFFBQVE7O0FBRWhELE1BQU0sT0FBTyx1QkFBdUIsR0FBRztJQUNyQyxFQUFFLEVBQUUsbUJBQW1CO1FBQ3JCLFNBQVMsRUFBRSx5QkFBeUI7UUFDcEMsTUFBTSxFQUFFLGVBQWU7UUFDdkIsV0FBVyxFQUFFLFNBQVM7UUFDdEIsWUFBWSxFQUFFLGdCQUFnQjtRQUM5QixtQkFBbUIsRUFBRSx1QkFBdUI7UUFDNUMsZ0JBQWdCLEVBQUUsbUJBQW1CO0tBQ3RDLEVBQUE7SUFDRCxFQUFFLEVBQUUsbUJBQW1CO1FBQ3JCLFNBQVMsRUFBRSx1QkFBdUI7UUFDbEMsTUFBTSxFQUFFLHNCQUFzQjtRQUM5QixXQUFXLEVBQUUsZ0JBQWdCO1FBQzdCLFlBQVksRUFBRSx1QkFBdUI7UUFDckMsbUJBQW1CLEVBQUUsd0JBQXdCO1FBQzdDLGdCQUFnQixFQUFFLG9CQUFvQjtLQUN2QyxFQUFBO0lBQ0QsRUFBRSxFQUFFLG1CQUFtQjtRQUNyQixTQUFTLEVBQUUsOEJBQThCO1FBQ3pDLE1BQU0sRUFBRSx3QkFBd0I7UUFDaEMsV0FBVyxFQUFFLFlBQVk7UUFDekIsWUFB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NEM7Ozs7O0lBQzVDLHVDQUFzQzs7Ozs7SUFDdEMsMENBQW9DOzs7OztJQUNwQyx5Q0FBbUM7Ozs7Ozs7Ozs7OztJQXNQbkMscUNBQWU7Ozs7Ozs7OztJQVlmLGlEQUEyQjs7Ozs7Ozs7OztJQWEzQix3Q0FBa0I7Ozs7Ozs7Ozs7O0lBY2xCLDhDQUF3Qjs7Ozs7Ozs7O0lBWXhCLDZDQUF1Qjs7Ozs7SUFRdkIsNENBQW9GOzs7OztJQUtwRiw4Q0FBd0Y7Ozs7O0lBS3hGLHlDQUE2RTs7Ozs7O0lBTTdFLHlDQUE4RTs7Ozs7SUFLOUUsMkNBQWlGOztJQUVqRiwwQ0FBa0I7O0lBQ2xCLDZDQUFtRTs7Ozs7SUFFdkQsd0NBQStCOzs7Ozs7SUFTM0Msc0ZBQStDOzs7OztJQUUvQyx3RUFBaUM7Ozs7Ozs7SUFFakMseUVBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgYnJvd3Nlckxhbmd1YWdlLCBjYXBpdGFsaXplRmlyc3RMZXR0ZXIsIGNvbnZlcnRUb0Jvb2xlYW4sIGlzVHlwZW9mLCBzb3J0VmFsdWVzLCB0aGZMb2NhbGVEZWZhdWx0IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBUaGZEYXRlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RoZi1kYXRlL3RoZi1kYXRlLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBUaGZUYWJsZUFjdGlvbiB9IGZyb20gJy4vaW50ZXJmYWNlcy90aGYtdGFibGUtYWN0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaGZUYWJsZUNvbHVtbiB9IGZyb20gJy4vaW50ZXJmYWNlcy90aGYtdGFibGUtY29sdW1uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaGZUYWJsZUxpdGVyYWxzIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3RoZi10YWJsZS1saXRlcmFscy5pbnRlcmZhY2UnO1xuXG5leHBvcnQgY29uc3QgdGhmVGFibGVDb250YWluZXIgPSBbJ2JvcmRlcicsICdzaGFkb3cnXTtcbmV4cG9ydCBjb25zdCB0aGZUYWJsZUNvbnRhaW5lckRlZmF1bHQgPSAnYm9yZGVyJztcblxuZXhwb3J0IGNvbnN0IHRoZlRhYmxlTGl0ZXJhbHNEZWZhdWx0ID0ge1xuICBlbjogPFRoZlRhYmxlTGl0ZXJhbHM+IHtcbiAgICBub0NvbHVtbnM6ICdDb2x1bW5zIGFyZSBub3QgZGVmaW5lZCcsXG4gICAgbm9EYXRhOiAnTm8gZGF0YSBmb3VuZCcsXG4gICAgbG9hZGluZ0RhdGE6ICdMb2FkaW5nJyxcbiAgICBsb2FkTW9yZURhdGE6ICdMb2FkIG1vcmUgZGF0YScsXG4gICAgc2VlQ29tcGxldGVTdWJ0aXRsZTogJ1NlZSBjb21wbGV0ZSBzdWJ0aXRsZScsXG4gICAgY29tcGxldGVTdWJ0aXRsZTogJ0NvbXBsZXRlIHN1YnRpdGxlJ1xuICB9LFxuICBlczogPFRoZlRhYmxlTGl0ZXJhbHM+IHtcbiAgICBub0NvbHVtbnM6ICdDb2x1bW5hcyBubyBkZWZpbmlkYXMnLFxuICAgIG5vRGF0YTogJ0RhdG9zIG5vIGVuY29udHJhZG9zJyxcbiAgICBsb2FkaW5nRGF0YTogJ0NhcmdhbmRvIGRhdG9zJyxcbiAgICBsb2FkTW9yZURhdGE6ICdDYXJnYXIgbcOhcyByZXN1bHRhZG9zJyxcbiAgICBzZWVDb21wbGV0ZVN1YnRpdGxlOiAnVmVyIHN1YnRpdHVsbyBjb21wbGV0bycsXG4gICAgY29tcGxldGVTdWJ0aXRsZTogJ1N1YnRpdHVsbyBjb21wbGV0bydcbiAgfSxcbiAgcHQ6IDxUaGZUYWJsZUxpdGVyYWxzPiB7XG4gICAgbm9Db2x1bW5zOiAnTmVuaHVtYSBkZWZpbmnDp8OjbyBkZSBjb2x1bmFzJyxcbiAgICBub0RhdGE6ICdOZW5odW0gZGFkbyBlbmNvbnRyYWRvJyxcbiAgICBsb2FkaW5nRGF0YTogJ0NhcnJlZ2FuZG8nLFxuICAgIGxvYWRNb3JlRGF0YTogJ0NhcnJlZ2FyIG1haXMgcmVzdWx0YWRvcycsXG4gICAgc2VlQ29tcGxldGVTdWJ0aXRsZTogJ1ZlciBsZWdlbmRhIGNvbXBsZXRhJyxcbiAgICBjb21wbGV0ZVN1YnRpdGxlOiAnTGVnZW5kYSBjb21wbGV0YSdcbiAgfVxufTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgZGUgdGFiZWxhIMOpIHV0aWxpemFkbyBwYXJhIGV4aWJpw6fDo28gZGUgbGlzdGFzLCBjb20gZGlmZXJlbnRlcyB0aXBvcyBkZSBkYWRvcyBxdWUgcG9kZW0gc2VyIHRleHRvLFxuICogZGF0YSwgaG9yw6FyaW8gZSBuw7ptZXJvIGNvbSBmb3JtYXRvIHBlcnNvbmFsaXphZG8uXG4gKlxuICogw4kgcG9zc2l2ZWwgY3JpYXIgdW1hIHRhYmVsYSBjb20gb3JkZW5hw6fDo28gZGUgZGFkb3MsIGxpbmhhcyBjb20gZGV0YWxoZXMsIGNvbHVuYSBkZSBzZWxlw6fDo28gZGUgbGluaGFzLFxuICogY29sdW5hIGNvbSBhw6fDtWVzIGUgdGFtYsOpbSBjYXJyZWdhbWVudG8gcG9yIGRlbWFuZGEgY29tIG8gYm90w6NvIFwiQ2FycmVnYXIgbWFpcyByZXN1bHRhZG9zXCIuXG4gKlxuICogVGFtYsOpbSBleGlzdGUgYSBwb3NzaWJpbGlkYWRlIGRlIHV0aWxpemFyIF90ZW1wbGF0ZV8gcGFyYSBvcyBkZXRhbGhlcyBkYXMgbGluaGFzLFxuICogdmVqYSBtYWlzIGVtICoqW3QtdGFibGUtcm93LXRlbXBsYXRlXSgvZG9jdW1lbnRhdGlvbi90aGYtdGFibGUtcm93LXRlbXBsYXRlKSoqLlxuICpcbiAqIFF1YW5kbyBhIGxhcmd1cmEgZGUgdG9kYXMgYXMgY29sdW5hcyBmb3IgZGVmaW5pZGEsIGNhc28gbyB0YW1hbmhvIHRvdGFsIGRlbGFzIHNlamEgbWFpb3IgcXVlIGEgdGFiZWxhLCBzZXLDoSBleGliaWRvIHVtIHNjcm9sbCBob3Jpem9udGFsLlxuICpcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRoZlRhYmxlQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgcHJpdmF0ZSBfYWN0aW9ucz86IEFycmF5PFRoZlRhYmxlQWN0aW9uPiA9IFtdO1xuICBwcml2YXRlIF9jaGVja2JveD86IGJvb2xlYW47XG4gIHByaXZhdGUgX2NvbHVtbnM6IEFycmF5PFRoZlRhYmxlQ29sdW1uPiA9IFtdO1xuICBwcml2YXRlIF9jb250YWluZXI/OiBzdHJpbmc7XG4gIHByaXZhdGUgX2hlaWdodD86IG51bWJlcjtcbiAgcHJpdmF0ZSBfaGlkZURldGFpbD86IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfaGlkZVRleHRPdmVyZmxvdz86IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfaXRlbXM6IEFycmF5PFRoZlRhYmxlQ29sdW1uPjtcbiAgcHJpdmF0ZSBfbGl0ZXJhbHM6IFRoZlRhYmxlTGl0ZXJhbHM7XG4gIHByaXZhdGUgX2xvYWRpbmc/OiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBMaXN0YSBkZSBpdGVucyBkYSB0YWJlbGEuXG4gICAqID4gU2UgZmFsc28sIHNlcsOhIGluaWNpYWxpemFkbyBjb21vIHVtICphcnJheSogdmF6aW8uXG4gICAqL1xuICBASW5wdXQoJ3QtaXRlbXMnKSBzZXQgaXRlbXMoaXRlbXM6IEFycmF5PGFueT4pIHtcbiAgICB0aGlzLl9pdGVtcyA9IEFycmF5LmlzQXJyYXkoaXRlbXMpID8gaXRlbXMgOiBbXTtcblxuICAgIC8vIHdoZW4gaGF2ZW4ndCBpdGVtcywgc2VsZWN0QWxsIHNob3VsZCBiZSB1bmNoZWNrZWQuXG4gICAgaWYgKCF0aGlzLmhhc0l0ZW1zKCkpIHtcbiAgICAgIHRoaXMuc2VsZWN0QWxsID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmICghdGhpcy5oYXNDb2x1bW5zKCkpIHtcbiAgICAgIHRoaXMuY29sdW1ucyA9IHRoaXMuZ2V0RGVmYXVsdENvbHVtbnMoaXRlbXNbMF0pO1xuICAgIH1cbiAgfVxuXG4gIGdldCBpdGVtcygpIHtcbiAgICByZXR1cm4gdGhpcy5faXRlbXM7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBMaXN0YSBkYXMgY29sdW5hcyBkYSB0YWJlbGEsIGRldmUgcmVjZWJlciB1bSAqYXJyYXkqIGRlIG9iamV0b3MgcXVlIGltcGxlbWVudGFtIGEgaW50ZXJmYWNlIGBUaGZUYWJsZUNvbHVtbmAuXG4gICAqIFBvciBwYWRyw6NvIHJlY2ViZXLDoSBjb21vIHZhbG9yIGEgcHJpbWVpcmEgY29sdW5hIGRhIGxpc3RhIGRlIGl0ZW5zIGRhIHRhYmVsYS5cbiAgICogPiBDYXNvIG7Do28gZW5jb250cmUgdmFsb3IsIGEgbWVuc2FnZW0gJ05lbmh1bWEgZGVmaW5pw6fDo28gZGUgY29sdW5hcycgc2Vyw6EgZXhpYmlkYS5cbiAgICpcbiAgICovXG4gIEBJbnB1dCgndC1jb2x1bW5zJykgc2V0IGNvbHVtbnMoY29sdW1uczogQXJyYXk8VGhmVGFibGVDb2x1bW4+KSB7XG5cbiAgICB0aGlzLl9jb2x1bW5zID0gY29sdW1ucyB8fCBbXTtcblxuICAgIGlmICh0aGlzLl9jb2x1bW5zLmxlbmd0aCkge1xuICAgICAgdGhpcy5zZXRDb2x1bW5MaW5rKCk7XG4gICAgICB0aGlzLmNhbGN1bGF0ZVdpZHRoSGVhZGVycygpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5oYXNJdGVtcygpKSB7XG4gICAgICB0aGlzLl9jb2x1bW5zID0gIHRoaXMuZ2V0RGVmYXVsdENvbHVtbnModGhpcy5pdGVtc1swXSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGNvbHVtbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbHVtbnM7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBBZGljaW9uYSB1bSBjb250b3JubyBhcnJlZG9uZGFkbyBhbyBgdGhmLXRhYmxlYCwgYXMgb3DDp8O1ZXMgc8OjbzpcbiAgICogLSBgYm9yZGVyYDogY29tIGJvcmRhcy9saW5oYXMuXG4gICAqIC0gYHNoYWRvd2A6IGNvbSBzb21icmFzLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgYm9yZGVyYFxuICAgKi9cbiAgQElucHV0KCd0LWNvbnRhaW5lcicpIHNldCBjb250YWluZXIodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IHRoZlRhYmxlQ29udGFpbmVyLmluY2x1ZGVzKHZhbHVlKSA/IHZhbHVlIDogdGhmVGFibGVDb250YWluZXJEZWZhdWx0O1xuICAgIHRoaXMuc2hvd0NvbnRhaW5lcih0aGlzLl9jb250YWluZXIpO1xuICB9XG5cbiAgZ2V0IGNvbnRhaW5lcigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9jb250YWluZXI7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBTZSB2ZXJkYWRlaXJvLCBoYWJpbGl0YSBhIHF1ZWJyYSBkZSB0ZXh0byBhbyB0cmFuc2JvcmRhLWxvIGRlbnRybyBkZSBxdWFscXVlciBjb2x1bmEuXG4gICAqID4gUXVhbmRvIG9jb3JyZXIgYSBxdWVicmEgZGUgdGV4dG8sIGFvIHBhc3NhciBvIG1vdXNlIG5vIGNvbnRlw7pkbyBkYSBjw6lsdWxhLFxuICAgKiBvIG1lc21vIHNlcsOhIGV4aWJpZG8gYXRyYXbDqXMgZG8gW2B0aGYtdG9vbHRpcGBdKC9kb2N1bWVudGF0aW9uL3RoZi10b29sdGlwKS5cbiAgICovXG4gIEBJbnB1dCgndC1oaWRlLXRleHQtb3ZlcmZsb3cnKSBzZXQgaGlkZVRleHRPdmVyZmxvdyhoaWRlVGV4dE92ZXJmbG93OiBib29sZWFuKSB7XG4gICAgdGhpcy5faGlkZVRleHRPdmVyZmxvdyA9IGNvbnZlcnRUb0Jvb2xlYW4oaGlkZVRleHRPdmVyZmxvdyk7XG4gIH1cblxuICBnZXQgaGlkZVRleHRPdmVyZmxvdygpIHtcbiAgICByZXR1cm4gdGhpcy5faGlkZVRleHRPdmVyZmxvdztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBhIGFsdHVyYSBkYSB0YWJlbGEgZW0gKnBpeGVscyogZSBmaXhhIG8gY2FiZcOnYWxoby5cbiAgICovXG4gIEBJbnB1dCgndC1oZWlnaHQnKSBzZXQgaGVpZ2h0KGhlaWdodDogbnVtYmVyKSB7XG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHRoaXMuY2FsY3VsYXRlSGVpZ2h0VGFibGVDb250YWluZXIoaGVpZ2h0KTtcbiAgICB0aGlzLmNhbGN1bGF0ZVdpZHRoSGVhZGVycygpO1xuICB9XG5cbiAgZ2V0IGhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogSGFiaWxpdGEgYSB2aXN1YWxpemHDp8OjbyBkYSBsaXN0YSBkZSBkZXRhbGhlcyBkZSBjYWRhIGxpbmhhIGRhIGNvbHVuYS5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCd0LWhpZGUtZGV0YWlsJykgc2V0IGhpZGVEZXRhaWwoaGlkZURldGFpbDogYm9vbGVhbikge1xuICAgIHRoaXMuX2hpZGVEZXRhaWwgPSBoaWRlRGV0YWlsICE9IG51bGwgJiYgaGlkZURldGFpbC50b1N0cmluZygpID09PSAnJyA/IHRydWUgOiBjb252ZXJ0VG9Cb29sZWFuKGhpZGVEZXRhaWwpO1xuICAgIHRoaXMuY2FsY3VsYXRlV2lkdGhIZWFkZXJzKCk7XG4gIH1cblxuICBnZXQgaGlkZURldGFpbCgpIHtcbiAgICByZXR1cm4gdGhpcy5faGlkZURldGFpbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamV0byBjb20gYXMgbGl0ZXJhaXMgdXNhZGFzIG5vIGB0aGYtdGFibGVgLlxuICAgKlxuICAgKiBFeGlzdGVtIGR1YXMgbWFuZWlyYXMgZGUgY3VzdG9taXphciBvIGNvbXBvbmVudGUsIHBhc3NhbmRvIHVtIG9iamV0byBjb20gdG9kYXMgYXMgbGl0ZXJhaXMgZGlzcG9uw612ZWlzOlxuICAgKlxuICAgKiBgYGBcbiAgICogIGNvbnN0IGN1c3RvbUxpdGVyYWxzOiBUaGZUYWJsZUxpdGVyYWxzID0ge1xuICAgKiAgICBsb2FkTW9yZURhdGE6ICdCdXNjYXIgbWFpcyBkYWRvcycsXG4gICAqICAgIGxvYWRpbmdEYXRhOiAnUHJvY2Vzc2FuZG8nLFxuICAgKiAgICBub0NvbHVtbnM6ICdTZW0gY29sdW5hcycsXG4gICAqICAgIG5vRGF0YTogJ1NlbSBkYWRvcycsXG4gICAqICAgIHNlZUNvbXBsZXRlU3VidGl0bGU6ICdNb3N0cmFyIGxlZ2VuZGEgY29tcGxldGEnLFxuICAgKiAgICBjb21wbGV0ZVN1YnRpdGxlOiAnVG9kYXMgbGVnZW5kYXMnXG4gICAqICB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogT3UgcGFzc2FuZG8gYXBlbmFzIGFzIGxpdGVyYWlzIHF1ZSBkZXNlamEgY3VzdG9taXphcjpcbiAgICpcbiAgICogYGBgXG4gICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogVGhmVGFibGVMaXRlcmFscyA9IHtcbiAgICogICAgbm9EYXRhOiAnU2VtIGRhZG9zJ1xuICAgKiAgfTtcbiAgICogYGBgXG4gICAqXG4gICAqIEUgcGFyYSBjYXJyZWdhciBhcyBsaXRlcmFpcyBjdXN0b21pemFkYXMsIGJhc3RhIGFwZW5hcyBwYXNzYXIgbyBvYmpldG8gcGFyYSBvIGNvbXBvbmVudGUuXG4gICAqXG4gICAqIGBgYFxuICAgKiA8dGhmLXRhYmxlXG4gICAqICAgW3QtbGl0ZXJhbHNdPVwiY3VzdG9tTGl0ZXJhbHNcIj5cbiAgICogPC90aGYtdGFibGU+XG4gICAqIGBgYFxuICAgKlxuICAgKiAgPiBPIG9iamV0byBwYWRyw6NvIGRlIGxpdGVyYWlzIHNlcsOhIHRyYWR1emlkbyBkZSBhY29yZG8gY29tIG8gaWRpb21hIGRvICpicm93c2VyKiAocHQsIGVuLCBlcykuXG4gICAqL1xuICBASW5wdXQoJ3QtbGl0ZXJhbHMnKSBzZXQgbGl0ZXJhbHModmFsdWU6IFRoZlRhYmxlTGl0ZXJhbHMpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBPYmplY3QgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgdGhpcy5fbGl0ZXJhbHMgPSB7XG4gICAgICAgIC4uLnRoZlRhYmxlTGl0ZXJhbHNEZWZhdWx0W3RoZkxvY2FsZURlZmF1bHRdLFxuICAgICAgICAuLi50aGZUYWJsZUxpdGVyYWxzRGVmYXVsdFticm93c2VyTGFuZ3VhZ2UoKV0sXG4gICAgICAgIC4uLnZhbHVlXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXRlcmFscyA9IHRoZlRhYmxlTGl0ZXJhbHNEZWZhdWx0W2Jyb3dzZXJMYW5ndWFnZSgpXTtcbiAgICB9XG4gIH1cbiAgZ2V0IGxpdGVyYWxzKCkge1xuICAgIHJldHVybiB0aGlzLl9saXRlcmFscyB8fCB0aGZUYWJsZUxpdGVyYWxzRGVmYXVsdFticm93c2VyTGFuZ3VhZ2UoKV07XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBCbG9xdWVpYSBpbnRlcmHDp8OjbyBkbyB1c3XDoXJpbyBjb20gb3MgZGFkb3MgZGEgX3RhYmxlXywgYXByZXNlbnRhbmRvIHVtIF9sb2FkaW5nXyBhbyBjZW50cm8gZGEgbWVzbWEuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgndC1sb2FkaW5nJykgc2V0IGxvYWRpbmcobG9hZGluZzogYm9vbGVhbikge1xuICAgIHRoaXMuX2xvYWRpbmcgPSBjb252ZXJ0VG9Cb29sZWFuKGxvYWRpbmcpO1xuICAgIHRoaXMuY2FsY3VsYXRlV2lkdGhIZWFkZXJzKCk7XG4gIH1cblxuICBnZXQgbG9hZGluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9hZGluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEhhYmlsaXRhIG5hIHByaW1laXJhIGNvbHVuYSBhIG9ww6fDo28gZGUgc2VsZWNpb25hciBsaW5oYXMsXG4gICAqIHRvZG9zIG9zIGl0ZW5zIGRhIGxpc3RhIHBvc3N1ZW0gYSBwcm9wcmllZGFkZSBkaW7Dom1pY2EgYCRzZWxlY3RlZGAgcGFyYSBpZGVudGlmaWNhciBzZSBhIGxpbmhhIGVzdMOhIHNlbGVjaW9uYWRhLlxuICAgKiA+IEV4ZW1wbG86IGBpdGVtLiRzZWxlY3RlZGAgb3UgYGl0ZW1bJyRzZWxlY3RlZCddYC5cbiAgICogPiBPcyBpdGVucyBmaWxob3MgcG9zc3VlbSBjb21wb3J0YW1lbnRvIGluZGVwZW5kZW50ZSBkbyBpdGVtIHBhaS5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCd0LWNoZWNrYm94Jykgc2V0IGNoZWNrYm94KGNoZWNrYm94OiBib29sZWFuKSB7XG4gICAgdGhpcy5fY2hlY2tib3ggPSA8YW55PmNoZWNrYm94ID09PSAnJyA/IHRydWUgOiBjb252ZXJ0VG9Cb29sZWFuKGNoZWNrYm94KTtcbiAgICB0aGlzLmNhbGN1bGF0ZVdpZHRoSGVhZGVycygpO1xuICB9XG5cbiAgZ2V0IGNoZWNrYm94KCkge1xuICAgIHJldHVybiB0aGlzLl9jaGVja2JveDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSB1bWEgbGlzdGEgZGUgYcOnw7Vlcy5cbiAgICpcbiAgICogUXVhbmRvIGhvdXZlciBhcGVuYXMgdW1hIGHDp8OjbyBkZWZpbmlkYSBlbGEgc2Vyw6EgZXhpYmlkYSBkaXJldGFtZW50ZSBuYSBjb2x1bmEsIGNhc28gY29udHLDoXJpbywgbyBjb21wb25lbnRlXG4gICAqIHNlIGVuY2FycmVnYSBkZSBhZ3J1cMOhLWxhcyBleGliaW5kbyBvIMOtY29uZSBbKip0aGYtaWNvbi1tb3JlKipdKC9ndWlkZXMvaWNvbnMpIHF1ZSBsaXN0YXLDoSBhcyBhw6fDtWVzIGFvIHNlciBjbGljYWRvLlxuICAgKlxuICAgKiAqKkEgY29sdW5hIGRlIGHDp8O1ZXMgbsOjbyBzZXLDoSBleGliaWRhIHF1YW5kbzoqKlxuICAgKiAgLSBhIGxpc3RhIGNvbnRlciB2YWxvcmVzIGludsOhbGlkb3Mgb3UgaW5kZWZpbmlkb3MuXG4gICAqICAtIHRlbmhhIHVtYSDDum5pY2EgYcOnw6NvIGUgYSBtZXNtYSBuw6NvIGZvciB2aXPDrXZlbC5cbiAgICovXG4gIEBJbnB1dCgndC1hY3Rpb25zJykgc2V0IGFjdGlvbnMoYWN0aW9uczogQXJyYXk8VGhmVGFibGVBY3Rpb24+KSB7XG4gICAgdGhpcy5fYWN0aW9ucyA9IGFjdGlvbnM7XG4gICAgdGhpcy5jYWxjdWxhdGVXaWR0aEhlYWRlcnMoKTtcbiAgfVxuXG4gIGdldCBhY3Rpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9hY3Rpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogSGFiaWxpdGEgZW0gdG9kYXMgYXMgY29sdW5hcyBhIG9ww6fDo28gZGUgb3JkZW5hw6fDo28gZGUgZGFkb3MuIENhc28gYSBjb2x1bmEgc2VqYSBkbyB0aXBvICdkYXRhJyBvdSAnZGF0ZVRpbWUnIGFcbiAgICogbWVzbWEgZGV2ZSByZXNwZWl0YXIgb3MgdGlwb3MgZGUgZW50cmFkYSBkZWZpbmlkb3MgcGFyYSBxdWUgc2VqYW0gb3JkZW5hZGFzLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBzb3J0PzogYm9vbGVhbjtcbiAgQElucHV0KCd0LXNvcnQnKSBzZXQgc2V0U29ydChzb3J0OiBzdHJpbmcpIHtcbiAgICB0aGlzLnNvcnQgPSBzb3J0ID09PSAnJyA/IGZhbHNlIDogY29udmVydFRvQm9vbGVhbihzb3J0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogU2UgdmVyZGFkZWlybywgdG9ybmEgaGFiaWxpdGFkbyBvIGJvdMOjbyBcIkNhcnJlZ2FyIG1haXMgcmVzdWx0YWRvc1wiLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBzaG93TW9yZURpc2FibGVkPzogYm9vbGVhbjtcbiAgQElucHV0KCd0LXNob3ctbW9yZS1kaXNhYmxlZCcpIHNldCBzZXRTaG93TW9yZURpc2FibGVkKHNob3dNb3JlRGlzYWJsZWQ6IHN0cmluZykge1xuICAgIHRoaXMuc2hvd01vcmVEaXNhYmxlZCA9IHNob3dNb3JlRGlzYWJsZWQgPT09ICcnID8gZmFsc2UgOiBjb252ZXJ0VG9Cb29sZWFuKHNob3dNb3JlRGlzYWJsZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBIYWJpbGl0YSBvdSBkZXNhYmlsaXRhIG8gZXN0aWxvIGxpc3RyYWRvIGRhIHRhYmVsYSAoYHN0cmlwZWRgKS5cbiAgICogPiBSZWNvbWVuZGFkbyBwYXJhIHRhYmVsYXMgY29tIG1haW9yIG7Dum1lcm8gZGUgZGFkb3MsIGZhY2lsaXRhbmRvIGEgc3VhIHZpc3VhbGl6YcOnw6NvIG5hIHRhYmVsYS5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgc3RyaXBlZD86IGJvb2xlYW47XG4gIEBJbnB1dCgndC1zdHJpcGVkJykgc2V0IHNldFN0cmlwZWQoc3RyaXBlZDogc3RyaW5nKSB7XG4gICAgdGhpcy5zdHJpcGVkID0gc3RyaXBlZCA9PT0gJycgPyBmYWxzZSA6IGNvbnZlcnRUb0Jvb2xlYW4oc3RyaXBlZCk7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEVzY29uZGUgbyAqY2hlY2tib3gqIHBhcmEgc2VsZcOnw6NvIGRlIHRvZGFzIGFzIGxpbmhhcy5cbiAgICpcbiAgICogPiBTZW1wcmUgcmVjZWJlcsOhICp0cnVlKiBjYXNvIGEgc2VsZcOnw6NvIGRlIGFwZW5hcyB1bWEgbGluaGEgZXN0ZWphIGF0aXZhLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBoaWRlU2VsZWN0QWxsPzogYm9vbGVhbjtcbiAgQElucHV0KCd0LWhpZGUtc2VsZWN0LWFsbCcpIHNldCBzZXRIaWRlU2VsZWN0QWxsKGhpZGVTZWxlY3RBbGw6IHN0cmluZykge1xuICAgIHRoaXMuaGlkZVNlbGVjdEFsbCA9IGhpZGVTZWxlY3RBbGwgPT09ICcnID8gZmFsc2UgOiBjb252ZXJ0VG9Cb29sZWFuKGhpZGVTZWxlY3RBbGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgcXVlIHNvbWVudGUgdW1hIGxpbmhhIGRhIHRhYmVsYSBwb2RlIHNlciBzZWxlY2lvbmFkYS5cbiAgICpcbiAgICogPiBFc3RhIGRlZmluacOnw6NvIG7Do28gc2UgYXBsaWNhIGFvcyBpdGVucyBmaWxob3MsIG9zIG1lc21vcyBwb3NzdWVtIGNvbXBvcnRhbWVudG8gaW5kZXBlbmRlbnRlIGRvIGl0ZW0gcGFpLlxuICAgKi9cbiAgc2luZ2xlU2VsZWN0PzogYm9vbGVhbjtcbiAgQElucHV0KCd0LXNpbmdsZS1zZWxlY3QnKSBzZXQgc2V0U2luZ2xlU2VsZWN0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNpbmdsZVNlbGVjdCA9IHZhbHVlID09PSAnJyA/IHRydWUgOiBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBw6fDo28gZXhlY3V0YWRhIHF1YW5kbyB0b2RhcyBhcyBsaW5oYXMgc8OjbyBzZWxlY2lvbmFkYXMgcG9yIG1laW8gZG8gKmNoZWNrYm94KiBxdWUgc2VsZWNpb25hIHRvZGFzIGFzIGxpbmhhcy5cbiAgICovXG4gIEBPdXRwdXQoJ3QtYWxsLXNlbGVjdGVkJykgYWxsU2VsZWN0ZWQ/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIC8qKlxuICAgKiBBw6fDo28gZXhlY3V0YWRhIHF1YW5kbyBhIHNlbGXDp8OjbyBkYXMgbGluaGFzIMOpIGRlc21hcmNhZGEgcG9yIG1laW8gZG8gKmNoZWNrYm94KiBxdWUgc2VsZWNpb25hIHRvZGFzIGFzIGxpbmhhcy5cbiAgICovXG4gIEBPdXRwdXQoJ3QtYWxsLXVuc2VsZWN0ZWQnKSBhbGxVbnNlbGVjdGVkPzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAvKipcbiAgICogQcOnw6NvIGV4ZWN1dGFkYSBhbyBzZWxlY2lvbmFyIHVtYSBsaW5oYSBkbyBgdGhmLXRhYmxlYC5cbiAgICovXG4gIEBPdXRwdXQoJ3Qtc2VsZWN0ZWQnKSBzZWxlY3RlZD86IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgLyoqXG4gICAqIFJlY2ViZSB1bWEgYcOnw6NvIGRlIGNsaXF1ZSBwYXJhIG8gYm90w6NvIFwiQ2FycmVnYXIgbWFpcyByZXN1bHRhZG9zXCIsIGNhc28gbmVuaHVtYSBhw6fDo28gZm9yIGRlZmluaWRhIG8gbWVzbW9cbiAgICogbsOjbyDDqSB2aXPDrXZlbC5cbiAgICovXG4gIEBPdXRwdXQoJ3Qtc2hvdy1tb3JlJykgc2hvd01vcmU/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIC8qKlxuICAgKiBBw6fDo28gZXhlY3V0YWRhIGFvIGRlc21hcmNhciBhIHNlbGXDp8OjbyBkZSB1bWEgbGluaGEgZG8gYHRoZi10YWJsZWAuXG4gICAqL1xuICBAT3V0cHV0KCd0LXVuc2VsZWN0ZWQnKSB1bnNlbGVjdGVkPzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBzZWxlY3RBbGwgPSBmYWxzZTtcbiAgc29ydGVkQ29sdW1uID0geyBwcm9wZXJ0eTogPFRoZlRhYmxlQ29sdW1uPm51bGwsIGFzY2VuZGluZzogdHJ1ZSB9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGhmRGF0ZTogVGhmRGF0ZVNlcnZpY2UpIHsgfVxuXG4gIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnNpbmdsZVNlbGVjdCB8fCB0aGlzLmhpZGVTZWxlY3RBbGwpIHtcbiAgICAgIHRoaXMuc2VsZWN0QWxsID0gZmFsc2U7XG4gICAgICB0aGlzLmhpZGVTZWxlY3RBbGwgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGFic3RyYWN0IGNhbGN1bGF0ZUhlaWdodFRhYmxlQ29udGFpbmVyKGhlaWdodCk7XG5cbiAgYWJzdHJhY3QgY2FsY3VsYXRlV2lkdGhIZWFkZXJzKCk7XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IHNob3dDb250YWluZXIoY29udGFpbmVyKTtcblxuICBzZWxlY3RBbGxSb3dzKCkge1xuICAgIGlmICghdGhpcy5oaWRlU2VsZWN0QWxsKSB7XG4gICAgICB0aGlzLnNlbGVjdEFsbCA9ICF0aGlzLnNlbGVjdEFsbDtcblxuICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICBpdGVtLiRzZWxlY3RlZCA9IHRoaXMuc2VsZWN0QWxsO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuZW1pdFNlbGVjdEFsbEV2ZW50cyh0aGlzLnNlbGVjdEFsbCwgdGhpcy5pdGVtcyk7XG4gICAgfVxuICB9XG5cbiAgc2VsZWN0Um93KHJvdzogYW55KSB7XG4gICAgcm93LiRzZWxlY3RlZCA9ICFyb3cuJHNlbGVjdGVkO1xuXG4gICAgdGhpcy5lbWl0U2VsZWN0RXZlbnRzKHJvdyk7XG5cbiAgICB0aGlzLmNvbmZpZ0FmdGVyU2VsZWN0Um93KHRoaXMuaXRlbXMsIHJvdyk7XG4gIH1cblxuICBzZWxlY3REZXRhaWxSb3cocm93OiBhbnkpIHtcbiAgICB0aGlzLmVtaXRTZWxlY3RFdmVudHMocm93KTtcbiAgfVxuXG4gIC8vIENvbHVuYXMgcXVlIHPDo28gaW5zZXJpZGFzIG5vIDxoZWFkPiBkYSB0YWJlbGFcbiAgZ2V0TWFpbkNvbHVtbnMoKSB7XG4gICAgY29uc3QgdHlwZXNWYWxpZCA9IFsnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJywgJ2RhdGUnLCAndGltZScsICdkYXRlVGltZScsICdjdXJyZW5jeScsICdzdWJ0aXRsZScsICdsaW5rJywgJ2xhYmVsJywgJ2ljb24nXTtcblxuICAgIHJldHVybiB0aGlzLmNvbHVtbnMuZmlsdGVyKGNvbCA9PiAhY29sLnR5cGUgfHwgdHlwZXNWYWxpZC5pbmNsdWRlcyhjb2wudHlwZSkpO1xuICB9XG5cbiAgLy8gUmV0b3JuYSBhIGNvbHVuYSBkYSBsaXN0YSBkZSBjb2x1bmFzIHF1ZSDDqSBkbyB0aXBvIGRldGFpbFxuICBnZXRDb2x1bW5NYXN0ZXJEZXRhaWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sdW1ucy5maW5kKGNvbCA9PiBjb2wudHlwZSA9PT0gJ2RldGFpbCcpO1xuICB9XG5cbiAgZ2V0Q2xhc3NDb2xvcihyb3csIGNvbHVtbikge1xuICAgIHJldHVybiBjb2x1bW4uY29sb3IgPyBgdGhmLXRleHQtJHt0aGlzLmdldENvbHVtbkNvbG9yKHJvdywgY29sdW1uKX1gIDogJycgO1xuICB9XG5cbiAgZ2V0Q29sdW1uQ29sb3Iocm93LCBjb2x1bW4pIHtcbiAgICBjb25zdCBjb2x1bW5Db2xvciA9IGNvbHVtbi5jb2xvcjtcblxuICAgIHJldHVybiBpc1R5cGVvZihjb2x1bW5Db2xvciwgJ2Z1bmN0aW9uJykgPyBjb2x1bW5Db2xvcihyb3csIGNvbHVtbi5wcm9wZXJ0eSkgOiBjb2x1bW5Db2xvcjtcbiAgfVxuXG4gIC8vIFJldG9ybmEgYXMgY29sdW5hcyBjb20gc3RhdHVzXG4gIGdldFN1YnRpdGxlQ29sdW1ucygpIHtcbiAgICByZXR1cm4gdGhpcy5jb2x1bW5zLmZpbHRlcihjb2wgPT4gY29sLnR5cGUgPT09ICdzdWJ0aXRsZScpO1xuICB9XG5cbiAgLy8gUmV0b3JuYSBhcyBjb2x1bmFzIGNvbSDDrWNvbmVzXG4gIGdldEljb25Db2x1bW5zKCkge1xuICAgIHJldHVybiB0aGlzLmNvbHVtbnMuZmlsdGVyKGNvbCA9PiBjb2wudHlwZSA9PT0gJ2ljb24nKTtcbiAgfVxuXG4gIC8vIFJldG9ybmEgbyBub21lIGRhIGNvbHVuYSBkbyB0aXBvIGRldGFpbFxuICBnZXROYW1lQ29sdW1uRGV0YWlsKCkge1xuICAgIGNvbnN0IGRldGFpbCA9IHRoaXMuZ2V0Q29sdW1uTWFzdGVyRGV0YWlsKCk7XG4gICAgcmV0dXJuIGRldGFpbCA/IGRldGFpbC5wcm9wZXJ0eSA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0b3JuYSBhcyBsaW5oYXMgZG8gYHRoZi10YWJsZWAgcXVlIGVzdMOjbyBzZWxlY2lvbmFkYXMuXG4gICAqL1xuICBnZXRTZWxlY3RlZFJvd3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS4kc2VsZWN0ZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldG9ybmEgYXMgbGluaGFzIGRvIGB0aGYtdGFibGVgIHF1ZSBuw6NvIGVzdMOjbyBzZWxlY2lvbmFkYXMuXG4gICAqL1xuICBnZXRVbnNlbGVjdGVkUm93cygpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtcy5maWx0ZXIoaXRlbSA9PiAhaXRlbS4kc2VsZWN0ZWQpO1xuICB9XG5cbiAgaGFzQ29sdW1ucygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jb2x1bW5zICYmIHRoaXMuY29sdW1ucy5sZW5ndGggPiAwO1xuICB9XG5cbiAgaGFzSXRlbXMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMgJiYgdGhpcy5pdGVtcy5sZW5ndGggPiAwO1xuICB9XG5cbiAgdG9nZ2xlUm93QWN0aW9uKHJvdzogYW55KSB7XG4gICAgY29uc3QgdG9nZ2xlU2hvd0FjdGlvbiA9IHJvdy4kc2hvd0FjdGlvbjtcblxuICAgIHRoaXMuaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGlmIChpdGVtLiRzaG93QWN0aW9uKSB7XG4gICAgICAgIGl0ZW0uJHNob3dBY3Rpb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByb3cuJHNob3dBY3Rpb24gPSAhdG9nZ2xlU2hvd0FjdGlvbjtcbiAgfVxuXG4gIHNvcnRDb2x1bW4oY29sdW1uOiBUaGZUYWJsZUNvbHVtbikge1xuICAgIGlmICghdGhpcy5zb3J0IHx8IGNvbHVtbi50eXBlID09PSAnZGV0YWlsJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc29ydGVkQ29sdW1uLmFzY2VuZGluZyA9IHRoaXMuc29ydGVkQ29sdW1uLnByb3BlcnR5ID09PSBjb2x1bW4gPyAhdGhpcy5zb3J0ZWRDb2x1bW4uYXNjZW5kaW5nIDogdHJ1ZTtcblxuICAgIHRoaXMuc29ydEFycmF5KGNvbHVtbiwgdGhpcy5zb3J0ZWRDb2x1bW4uYXNjZW5kaW5nKTtcbiAgICB0aGlzLnNvcnRlZENvbHVtbi5wcm9wZXJ0eSA9IGNvbHVtbjtcbiAgfVxuXG4gIHNvcnRBcnJheShjb2x1bW46IFRoZlRhYmxlQ29sdW1uLCBhc2NlbmRpbmc6IGJvb2xlYW4pIHtcblxuICAgIHRoaXMuaXRlbXMuc29ydCgobGVmdFNpZGUsIHJpZ2h0U2lkZSk6IG51bWJlciA9PiB7XG5cbiAgICAgIGlmIChjb2x1bW4udHlwZSA9PT0gJ2RhdGUnIHx8IGNvbHVtbi50eXBlID09PSAnZGF0ZVRpbWUnICkge1xuICAgICAgICByZXR1cm4gdGhpcy50aGZEYXRlLnNvcnREYXRlKGxlZnRTaWRlW2NvbHVtbi5wcm9wZXJ0eV0sIHJpZ2h0U2lkZVtjb2x1bW4ucHJvcGVydHldLCBhc2NlbmRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNvcnRWYWx1ZXMobGVmdFNpZGVbY29sdW1uLnByb3BlcnR5XSwgcmlnaHRTaWRlW2NvbHVtbi5wcm9wZXJ0eV0sIGFzY2VuZGluZyk7XG4gICAgICB9XG5cbiAgICB9KTtcblxuICB9XG5cbiAgb25TaG93TW9yZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNob3dNb3JlLmVtaXQobnVsbCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0RGVmYXVsdENvbHVtbnMoaXRlbTogYW55KSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGl0ZW0pO1xuXG4gICAgcmV0dXJuIGtleXMuZmlsdGVyKGtleSA9PiAodHlwZW9mIGl0ZW1ba2V5XSAhPT0gJ29iamVjdCcpKS5tYXAoa2V5ID0+IHtcbiAgICAgIHJldHVybiB7IGxhYmVsOiBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoa2V5KSAsIHByb3BlcnR5OiBrZXkgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgY29uZmlnQWZ0ZXJTZWxlY3RSb3cocm93czogQXJyYXk8YW55Piwgcm93KSB7XG4gICAgaWYgKHRoaXMuc2luZ2xlU2VsZWN0KSB7XG5cbiAgICAgIHRoaXMudW5zZWxlY3RPdGhlclJvd3Mocm93cywgcm93KTtcblxuICAgIH0gZWxzZSBpZiAoIXRoaXMuaGlkZVNlbGVjdEFsbCkge1xuXG4gICAgICB0aGlzLnNlbGVjdEFsbCA9IHRoaXMuaXNFdmVyeVNlbGVjdGVkKHJvd3MpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZW1pdFNlbGVjdEFsbEV2ZW50cyhzZWxlY3RBbGw6IGJvb2xlYW4sIHJvd3M6IGFueSkge1xuICAgIHNlbGVjdEFsbCA/IHRoaXMuYWxsU2VsZWN0ZWQuZW1pdChyb3dzKSA6IHRoaXMuYWxsVW5zZWxlY3RlZC5lbWl0KHJvd3MpO1xuICB9XG5cbiAgcHJpdmF0ZSBlbWl0U2VsZWN0RXZlbnRzKHJvdzogYW55KSB7XG4gICAgcm93LiRzZWxlY3RlZCA/IHRoaXMuc2VsZWN0ZWQuZW1pdChyb3cpIDogdGhpcy51bnNlbGVjdGVkLmVtaXQocm93KTtcbiAgfVxuXG4gIHByaXZhdGUgaXNFdmVyeVNlbGVjdGVkKGl0ZW1zOiBBcnJheTxhbnk+KTogYm9vbGVhbiB7XG4gICAgY29uc3Qgc29tZUNoZWNrZWRPckluZGV0ZXJtaW5hdGUgPSBpdGVtID0+IGl0ZW0uJHNlbGVjdGVkIHx8IGl0ZW0uJHNlbGVjdGVkID09PSBudWxsO1xuICAgIGNvbnN0IGV2ZXJ5Q2hlY2tlZCA9IGl0ZW0gPT4gaXRlbS4kc2VsZWN0ZWQ7XG5cbiAgICBpZiAoaXRlbXMuZXZlcnkoZXZlcnlDaGVja2VkKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGl0ZW1zLnNvbWUoc29tZUNoZWNrZWRPckluZGV0ZXJtaW5hdGUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIHNldENvbHVtbkxpbmsoKSB7XG4gICAgdGhpcy5jb2x1bW5zLmZvckVhY2goY29sdW1uID0+IHtcbiAgICAgIGlmIChjb2x1bW5bJ3R5cGUnXSA9PT0gJ2xpbmsnICYmICFjb2x1bW5bJ2xpbmsnXSkge1xuICAgICAgICBjb2x1bW5bJ2xpbmsnXSA9ICdsaW5rJztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgdW5zZWxlY3RPdGhlclJvd3Mocm93czogQXJyYXk8YW55Piwgcm93KSB7XG4gICAgcm93cy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaWYgKGl0ZW0gIT09IHJvdykge1xuICAgICAgICBpdGVtLiRzZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==