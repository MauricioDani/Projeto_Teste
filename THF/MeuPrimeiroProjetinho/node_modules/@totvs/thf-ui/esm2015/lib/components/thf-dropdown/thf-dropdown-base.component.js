/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToBoolean } from './../../utils/util';
/**
 * \@description
 *
 * O componente `thf-dropdown` pode ser utilizado como um agrupador de ações e / ou opções.
 *
 * > Caso não haja configuração de rotas em sua aplicação, se faz necessário importar o `RouterModule`
 * no módulo principal para o correto funcionamento deste componente:
 *
 * ```
 * import { RouterModule } from '\@angular/router';
 *
 * \@NgModule({
 *   imports: [
 *     ...
 *     RouterModule.forRoot([]),
 *     ThfModule
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   exports: [],
 *   providers: [],
 *   bootstrap: [
 *     AppComponent
 *   ]
 * })
 * export class AppModule { }
 * ```
 * > Para maiores dúvidas referente à configuração de rotas, acesse em nosso portal /Guias /Começando
 * [/Configurando as rotas do thf-menu](/guides/getting-started).
 */
export class ThfDropdownBaseComponent {
    constructor() {
        this._disabled = false;
        this.icon = 'thf-icon-arrow-down';
        this.open = false;
    }
    /**
     * Lista de ações que serão exibidas no componente.
     * @param {?} value
     * @return {?}
     */
    set actions(value) {
        this._actions = Array.isArray(value) ? value : [];
    }
    /**
     * @return {?}
     */
    get actions() {
        return this._actions;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Desabilita o campo.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
}
ThfDropdownBaseComponent.propDecorators = {
    actions: [{ type: Input, args: ['t-actions',] }],
    disabled: [{ type: Input, args: ['t-disabled',] }],
    label: [{ type: Input, args: ['t-label',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfDropdownBaseComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    ThfDropdownBaseComponent.prototype._disabled;
    /** @type {?} */
    ThfDropdownBaseComponent.prototype.icon;
    /** @type {?} */
    ThfDropdownBaseComponent.prototype.open;
    /**
     * Adiciona um rótulo ao `dropdown`.
     * @type {?}
     */
    ThfDropdownBaseComponent.prototype.label;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWRyb3Bkb3duLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1kcm9wZG93bi90aGYtZHJvcGRvd24tYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0N0RCxNQUFNLE9BQU8sd0JBQXdCO0lBQXJDO1FBR1UsY0FBUyxHQUFZLEtBQUssQ0FBQztRQUVuQyxTQUFJLEdBQVcscUJBQXFCLENBQUM7UUFDckMsU0FBSSxHQUFZLEtBQUssQ0FBQztJQStCeEIsQ0FBQzs7Ozs7O0lBNUJDLElBQXdCLE9BQU8sQ0FBQyxLQUErQjtRQUM3RCxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3BELENBQUM7Ozs7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQzs7Ozs7Ozs7Ozs7O0lBV0QsSUFBeUIsUUFBUSxDQUFDLEtBQWM7UUFDOUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxDQUFDOzs7O0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7OztzQkF2QkEsS0FBSyxTQUFDLFdBQVc7dUJBaUJqQixLQUFLLFNBQUMsWUFBWTtvQkFTbEIsS0FBSyxTQUFDLFNBQVM7Ozs7Ozs7SUFqQ2hCLDRDQUEyQzs7Ozs7SUFDM0MsNkNBQW1DOztJQUVuQyx3Q0FBcUM7O0lBQ3JDLHdDQUFzQjs7Ozs7SUE2QnRCLHlDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0Jvb2xlYW4gfSBmcm9tICcuLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBUaGZEcm9wZG93bkFjdGlvbiB9IGZyb20gJy4vdGhmLWRyb3Bkb3duLWFjdGlvbi5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgdGhmLWRyb3Bkb3duYCBwb2RlIHNlciB1dGlsaXphZG8gY29tbyB1bSBhZ3J1cGFkb3IgZGUgYcOnw7VlcyBlIC8gb3Ugb3DDp8O1ZXMuXG4gKlxuICogPiBDYXNvIG7Do28gaGFqYSBjb25maWd1cmHDp8OjbyBkZSByb3RhcyBlbSBzdWEgYXBsaWNhw6fDo28sIHNlIGZheiBuZWNlc3PDoXJpbyBpbXBvcnRhciBvIGBSb3V0ZXJNb2R1bGVgXG4gKiBubyBtw7NkdWxvIHByaW5jaXBhbCBwYXJhIG8gY29ycmV0byBmdW5jaW9uYW1lbnRvIGRlc3RlIGNvbXBvbmVudGU6XG4gKlxuICogYGBgXG4gKiBpbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuICpcbiAqIEBOZ01vZHVsZSh7XG4gKiAgIGltcG9ydHM6IFtcbiAqICAgICAuLi5cbiAqICAgICBSb3V0ZXJNb2R1bGUuZm9yUm9vdChbXSksXG4gKiAgICAgVGhmTW9kdWxlXG4gKiAgIF0sXG4gKiAgIGRlY2xhcmF0aW9uczogW1xuICogICAgIEFwcENvbXBvbmVudFxuICogICBdLFxuICogICBleHBvcnRzOiBbXSxcbiAqICAgcHJvdmlkZXJzOiBbXSxcbiAqICAgYm9vdHN0cmFwOiBbXG4gKiAgICAgQXBwQ29tcG9uZW50XG4gKiAgIF1cbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHsgfVxuICogYGBgXG4gKiA+IFBhcmEgbWFpb3JlcyBkw7p2aWRhcyByZWZlcmVudGUgw6AgY29uZmlndXJhw6fDo28gZGUgcm90YXMsIGFjZXNzZSBlbSBub3NzbyBwb3J0YWwgL0d1aWFzIC9Db21lw6dhbmRvXG4gKiBbL0NvbmZpZ3VyYW5kbyBhcyByb3RhcyBkbyB0aGYtbWVudV0oL2d1aWRlcy9nZXR0aW5nLXN0YXJ0ZWQpLlxuICovXG5cbmV4cG9ydCBjbGFzcyBUaGZEcm9wZG93bkJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2FjdGlvbnM6IEFycmF5PFRoZkRyb3Bkb3duQWN0aW9uPjtcbiAgcHJpdmF0ZSBfZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBpY29uOiBzdHJpbmcgPSAndGhmLWljb24tYXJyb3ctZG93bic7XG4gIG9wZW46IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKiogTGlzdGEgZGUgYcOnw7VlcyBxdWUgc2Vyw6NvIGV4aWJpZGFzIG5vIGNvbXBvbmVudGUuICovXG4gIEBJbnB1dCgndC1hY3Rpb25zJykgc2V0IGFjdGlvbnModmFsdWU6IEFycmF5PFRoZkRyb3Bkb3duQWN0aW9uPikge1xuICAgIHRoaXMuX2FjdGlvbnMgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW107XG4gIH1cblxuICBnZXQgYWN0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlc2FiaWxpdGEgbyBjYW1wby5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCd0LWRpc2FibGVkJykgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICAvKiogQWRpY2lvbmEgdW0gcsOzdHVsbyBhbyBgZHJvcGRvd25gLiAqL1xuICBASW5wdXQoJ3QtbGFiZWwnKSBsYWJlbDogc3RyaW5nO1xuXG59XG4iXX0=