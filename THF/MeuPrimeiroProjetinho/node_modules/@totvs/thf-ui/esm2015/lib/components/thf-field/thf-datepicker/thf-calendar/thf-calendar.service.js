/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { setYearFrom0To100 } from '../../../../utils/util';
export class ThfCalendarService {
    constructor() {
        this.firstWeekDay = 0; // 0 = sunday
    }
    /**
     * @param {?} date
     * @return {?}
     */
    weekStartDate(date) {
        /** @type {?} */
        const startDate = new Date(date.getTime());
        while (startDate.getDay() !== this.firstWeekDay) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    monthDates(year, month, dayFormatter = null, weekFormatter = null) {
        if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
            throw Error(('month must be a number (Jan is 0)'));
        }
        /** @type {?} */
        const weeks = [];
        /** @type {?} */
        let week = [];
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let date = new Date(year, month, 1);
        setYearFrom0To100(date, year);
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while ((date.getMonth() <= month) && (date.getFullYear() === year));
        return weeks;
    }
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    monthDays(year, month) {
        /** @type {?} */
        const getDayOrZero = (/**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return date.getMonth() === month ? date : 0;
        });
        return this.monthDates(year, month, getDayOrZero);
    }
}
ThfCalendarService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfCalendarService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    ThfCalendarService.prototype.firstWeekDay;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWNhbGVuZGFyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLWZpZWxkL3RoZi1kYXRlcGlja2VyL3RoZi1jYWxlbmRhci90aGYtY2FsZW5kYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUczRCxNQUFNLE9BQU8sa0JBQWtCO0lBRzdCO1FBQ0UsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQyxhQUFhO0lBQ3RDLENBQUM7Ozs7O0lBRUQsYUFBYSxDQUFDLElBQVM7O2NBQ2YsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxQyxPQUFPLFNBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQy9DLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQzs7Ozs7Ozs7SUFFRCxVQUFVLENBQUMsSUFBUyxFQUFFLEtBQVUsRUFBRSxlQUFvQixJQUFJLEVBQUUsZ0JBQXFCLElBQUk7UUFDbkYsSUFBSSxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxFQUFFO1lBQzlELE1BQU0sS0FBSyxDQUFDLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO1NBQ3BEOztjQUVLLEtBQUssR0FBZSxFQUFFOztZQUN4QixJQUFJLEdBQWUsRUFBRTs7WUFDckIsQ0FBQyxHQUFHLENBQUM7O1lBQ0wsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5QixJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoQyxHQUFHO1lBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ2xDO1lBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkQsSUFBSSxHQUFHLEVBQUUsQ0FBQztTQUNYLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssSUFBSSxDQUFDLEVBQUU7UUFDdEUsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7Ozs7SUFFRCxTQUFTLENBQUMsSUFBUyxFQUFFLEtBQVU7O2NBQ3ZCLFlBQVk7Ozs7UUFBRyxVQUFTLElBQVM7WUFDckMsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUE7UUFDRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNwRCxDQUFDOzs7WUE3Q0YsVUFBVTs7Ozs7O0lBRVQsMENBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBzZXRZZWFyRnJvbTBUbzEwMCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGhmQ2FsZW5kYXJTZXJ2aWNlIHtcbiAgZmlyc3RXZWVrRGF5OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5maXJzdFdlZWtEYXkgPSAwOyAvLyAwID0gc3VuZGF5XG4gIH1cblxuICB3ZWVrU3RhcnREYXRlKGRhdGU6IGFueSkge1xuICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiAgICB3aGlsZSAoc3RhcnREYXRlLmdldERheSgpICE9PSB0aGlzLmZpcnN0V2Vla0RheSkge1xuICAgICAgc3RhcnREYXRlLnNldERhdGUoc3RhcnREYXRlLmdldERhdGUoKSAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnREYXRlO1xuICB9XG5cbiAgbW9udGhEYXRlcyh5ZWFyOiBhbnksIG1vbnRoOiBhbnksIGRheUZvcm1hdHRlcjogYW55ID0gbnVsbCwgd2Vla0Zvcm1hdHRlcjogYW55ID0gbnVsbCkge1xuICAgIGlmICgodHlwZW9mIG1vbnRoICE9PSAnbnVtYmVyJykgfHwgKG1vbnRoIDwgMCkgfHwgKG1vbnRoID4gMTEpKSB7XG4gICAgICB0aHJvdyBFcnJvcigoJ21vbnRoIG11c3QgYmUgYSBudW1iZXIgKEphbiBpcyAwKScpKTtcbiAgICB9XG5cbiAgICBjb25zdCB3ZWVrczogQXJyYXk8YW55PiA9IFtdO1xuICAgIGxldCB3ZWVrOiBBcnJheTxhbnk+ID0gW107XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBkYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGgsIDEpO1xuICAgIHNldFllYXJGcm9tMFRvMTAwKGRhdGUsIHllYXIpO1xuICAgIGRhdGUgPSB0aGlzLndlZWtTdGFydERhdGUoZGF0ZSk7XG5cbiAgICBkbyB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIHdlZWsucHVzaChkYXlGb3JtYXR0ZXIgPyBkYXlGb3JtYXR0ZXIoZGF0ZSkgOiBkYXRlKTtcbiAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiAgICAgICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgMSk7XG4gICAgICB9XG4gICAgICB3ZWVrcy5wdXNoKHdlZWtGb3JtYXR0ZXIgPyB3ZWVrRm9ybWF0dGVyKHdlZWspIDogd2Vlayk7XG4gICAgICB3ZWVrID0gW107XG4gICAgfSB3aGlsZSAoKGRhdGUuZ2V0TW9udGgoKSA8PSBtb250aCkgJiYgKGRhdGUuZ2V0RnVsbFllYXIoKSA9PT0geWVhcikpO1xuICAgIHJldHVybiB3ZWVrcztcbiAgfVxuXG4gIG1vbnRoRGF5cyh5ZWFyOiBhbnksIG1vbnRoOiBhbnkpIHtcbiAgICBjb25zdCBnZXREYXlPclplcm8gPSBmdW5jdGlvbihkYXRlOiBhbnkpIHtcbiAgICAgIHJldHVybiBkYXRlLmdldE1vbnRoKCkgPT09IG1vbnRoID8gZGF0ZSA6IDA7XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5tb250aERhdGVzKHllYXIsIG1vbnRoLCBnZXREYXlPclplcm8pO1xuICB9XG59XG4iXX0=