/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por exibir ícones nas colunas.
 */
export class ThfTableColumnIconComponent {
    /**
     * Lista de um ou mais ícones que serão exibidos em sua respectiva coluna.
     * @param {?} value
     * @return {?}
     */
    set icons(value) {
        this._icons = this.convertToColumnIcon(value);
    }
    /**
     * @return {?}
     */
    get icons() {
        return this._icons;
    }
    /**
     * @param {?} iconColumn
     * @return {?}
     */
    checkDisabled(iconColumn) {
        return iconColumn.disabled ? iconColumn.disabled(this.row) : false;
    }
    /**
     * @param {?} columnIcon
     * @return {?}
     */
    getIconColorClass(columnIcon) {
        /** @type {?} */
        const color = this.getIconColor(columnIcon) || this.getIconColor(this.column);
        return color ? `thf-text-${color}` : '';
    }
    /**
     * @param {?} iconColumn
     * @return {?}
     */
    onIconClick(iconColumn) {
        /** @type {?} */
        const isAbleAction = !this.checkDisabled(iconColumn);
        if (iconColumn.action && isAbleAction) {
            iconColumn.action(this.row, iconColumn);
        }
        else if (this.column.action && isAbleAction) {
            this.column.action(this.row, iconColumn || this.column);
        }
    }
    /**
     * @param {?} text
     * @param {?} iconColumn
     * @return {?}
     */
    tooltipMouseEnter(text, iconColumn) {
        if (this.checkDisabled(iconColumn)) {
            this.tooltipText = undefined;
        }
        else {
            this.tooltipText = text;
        }
    }
    /**
     * @return {?}
     */
    tooltipMouseLeave() {
        this.tooltipText = undefined;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    convertToColumnIcon(value) {
        if (value instanceof Array) {
            return value.map((/**
             * @param {?} val
             * @return {?}
             */
            val => {
                return typeof val === 'string' ? { value: val } : val;
            }));
        }
        if (typeof value === 'string') {
            return [{ value }];
        }
        return [];
    }
    /**
     * @private
     * @param {?} column
     * @return {?}
     */
    getIconColor(column) {
        return typeof column.color === 'function' ? column.color(this.row, column) : column.color;
    }
}
ThfTableColumnIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-table-column-icon',
                template: "<ng-container *ngFor=\"let iconColumn of icons\">\n  <span class=\"thf-icon\"\n    [class.thf-clickable]=\"!checkDisabled(iconColumn) && iconColumn.action || column.action \"\n    [ngClass]=\"[checkDisabled(iconColumn) ? 'thf-table-icon-disabled' : getIconColorClass(iconColumn), iconColumn.icon || iconColumn.value]\"\n    [t-tooltip]=\"tooltipText\"\n    (click)=\"onIconClick(iconColumn)\"\n    (mouseenter)=\"tooltipMouseEnter(iconColumn.tooltip, iconColumn)\"\n    (mouseleave)=\"tooltipMouseLeave()\">\n  </span>\n</ng-container>\n"
            }] }
];
ThfTableColumnIconComponent.propDecorators = {
    column: [{ type: Input, args: ['t-column',] }],
    icons: [{ type: Input, args: ['t-icons',] }],
    row: [{ type: Input, args: ['t-row',] }]
};
if (false) {
    /** @type {?} */
    ThfTableColumnIconComponent.prototype.tooltipText;
    /**
     * @type {?}
     * @private
     */
    ThfTableColumnIconComponent.prototype._icons;
    /** @type {?} */
    ThfTableColumnIconComponent.prototype.column;
    /** @type {?} */
    ThfTableColumnIconComponent.prototype.row;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXRhYmxlLWNvbHVtbi1pY29uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtdGFibGUvdGhmLXRhYmxlLWNvbHVtbi1pY29uL3RoZi10YWJsZS1jb2x1bW4taWNvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7OztBQWlCakQsTUFBTSxPQUFPLDJCQUEyQjs7Ozs7O0lBU3RDLElBQXNCLEtBQUssQ0FBQyxLQUF5RDtRQUNuRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7O0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBSUQsYUFBYSxDQUFDLFVBQThCO1FBQzFDLE9BQU8sVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNyRSxDQUFDOzs7OztJQUVELGlCQUFpQixDQUFDLFVBQThCOztjQUN4QyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFFN0UsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLFlBQVksS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMxQyxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxVQUE4Qjs7Y0FDbEMsWUFBWSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7UUFFcEQsSUFBSSxVQUFVLENBQUMsTUFBTSxJQUFJLFlBQVksRUFBRTtZQUNyQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDekM7YUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLFlBQVksRUFBRTtZQUM3QyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQVUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekQ7SUFDSCxDQUFDOzs7Ozs7SUFFRCxpQkFBaUIsQ0FBQyxJQUFZLEVBQUUsVUFBOEI7UUFDNUQsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDO1NBQzlCO2FBQU07WUFDTCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztTQUN6QjtJQUNILENBQUM7Ozs7SUFFRCxpQkFBaUI7UUFDZixJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztJQUMvQixDQUFDOzs7Ozs7SUFFTyxtQkFBbUIsQ0FBQyxLQUFVO1FBRXBDLElBQUksS0FBSyxZQUFZLEtBQUssRUFBRTtZQUMxQixPQUFPLEtBQUssQ0FBQyxHQUFHOzs7O1lBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3JCLE9BQU8sT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1lBQ3hELENBQUMsRUFBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3BCO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDOzs7Ozs7SUFFTyxZQUFZLENBQUMsTUFBMkM7UUFDOUQsT0FBTyxPQUFPLE1BQU0sQ0FBQyxLQUFLLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDNUYsQ0FBQzs7O1lBekVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyxxaUJBQXFEO2FBQ3REOzs7cUJBUUUsS0FBSyxTQUFDLFVBQVU7b0JBR2hCLEtBQUssU0FBQyxTQUFTO2tCQVFmLEtBQUssU0FBQyxPQUFPOzs7O0lBZmQsa0RBQW9COzs7OztJQUVwQiw2Q0FBMEM7O0lBRTFDLDZDQUEwQzs7SUFXMUMsMENBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBUaGZUYWJsZUNvbHVtbiB9IGZyb20gJy4uL2ludGVyZmFjZXMvdGhmLXRhYmxlLWNvbHVtbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGhmVGFibGVDb2x1bW5JY29uIH0gZnJvbSAnLi90aGYtdGFibGUtY29sdW1uLWljb24uaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIHJlc3BvbnPDoXZlbCBwb3IgZXhpYmlyIMOtY29uZXMgbmFzIGNvbHVuYXMuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoZi10YWJsZS1jb2x1bW4taWNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi90aGYtdGFibGUtY29sdW1uLWljb24uY29tcG9uZW50Lmh0bWwnXG59KVxuXG5leHBvcnQgY2xhc3MgVGhmVGFibGVDb2x1bW5JY29uQ29tcG9uZW50IHtcblxuICB0b29sdGlwVGV4dDogc3RyaW5nO1xuXG4gIHByaXZhdGUgX2ljb25zOiBBcnJheTxUaGZUYWJsZUNvbHVtbkljb24+O1xuXG4gIEBJbnB1dCgndC1jb2x1bW4nKSBjb2x1bW46IFRoZlRhYmxlQ29sdW1uO1xuXG4gIC8qKiBMaXN0YSBkZSB1bSBvdSBtYWlzIMOtY29uZXMgcXVlIHNlcsOjbyBleGliaWRvcyBlbSBzdWEgcmVzcGVjdGl2YSBjb2x1bmEuICovXG4gIEBJbnB1dCgndC1pY29ucycpIHNldCBpY29ucyh2YWx1ZTogQXJyYXk8VGhmVGFibGVDb2x1bW5JY29uPiB8IEFycmF5PHN0cmluZz4gfCBzdHJpbmcpIHtcbiAgICB0aGlzLl9pY29ucyA9IHRoaXMuY29udmVydFRvQ29sdW1uSWNvbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgaWNvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ljb25zO1xuICB9XG5cbiAgQElucHV0KCd0LXJvdycpIHJvdztcblxuICBjaGVja0Rpc2FibGVkKGljb25Db2x1bW46IFRoZlRhYmxlQ29sdW1uSWNvbikge1xuICAgIHJldHVybiBpY29uQ29sdW1uLmRpc2FibGVkID8gaWNvbkNvbHVtbi5kaXNhYmxlZCh0aGlzLnJvdykgOiBmYWxzZTtcbiAgfVxuXG4gIGdldEljb25Db2xvckNsYXNzKGNvbHVtbkljb246IFRoZlRhYmxlQ29sdW1uSWNvbikge1xuICAgIGNvbnN0IGNvbG9yID0gdGhpcy5nZXRJY29uQ29sb3IoY29sdW1uSWNvbikgfHwgdGhpcy5nZXRJY29uQ29sb3IodGhpcy5jb2x1bW4pO1xuXG4gICAgcmV0dXJuIGNvbG9yID8gYHRoZi10ZXh0LSR7Y29sb3J9YCA6ICcnO1xuICB9XG5cbiAgb25JY29uQ2xpY2soaWNvbkNvbHVtbjogVGhmVGFibGVDb2x1bW5JY29uKSB7XG4gICAgY29uc3QgaXNBYmxlQWN0aW9uID0gIXRoaXMuY2hlY2tEaXNhYmxlZChpY29uQ29sdW1uKTtcblxuICAgIGlmIChpY29uQ29sdW1uLmFjdGlvbiAmJiBpc0FibGVBY3Rpb24pIHtcbiAgICAgIGljb25Db2x1bW4uYWN0aW9uKHRoaXMucm93LCBpY29uQ29sdW1uKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29sdW1uLmFjdGlvbiAmJiBpc0FibGVBY3Rpb24pIHtcbiAgICAgIHRoaXMuY29sdW1uLmFjdGlvbih0aGlzLnJvdywgaWNvbkNvbHVtbiB8fCB0aGlzLmNvbHVtbik7XG4gICAgfVxuICB9XG5cbiAgdG9vbHRpcE1vdXNlRW50ZXIodGV4dDogc3RyaW5nLCBpY29uQ29sdW1uOiBUaGZUYWJsZUNvbHVtbkljb24pIHtcbiAgICBpZiAodGhpcy5jaGVja0Rpc2FibGVkKGljb25Db2x1bW4pKSB7XG4gICAgICB0aGlzLnRvb2x0aXBUZXh0ID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRvb2x0aXBUZXh0ID0gdGV4dDtcbiAgICB9XG4gIH1cblxuICB0b29sdGlwTW91c2VMZWF2ZSgpIHtcbiAgICB0aGlzLnRvb2x0aXBUZXh0ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBjb252ZXJ0VG9Db2x1bW5JY29uKHZhbHVlOiBhbnkpOiBBcnJheTxUaGZUYWJsZUNvbHVtbkljb24+IHtcblxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICByZXR1cm4gdmFsdWUubWFwKHZhbCA9PiB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/IHsgdmFsdWU6IHZhbCB9IDogdmFsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBbeyB2YWx1ZSB9XTtcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwcml2YXRlIGdldEljb25Db2xvcihjb2x1bW46IFRoZlRhYmxlQ29sdW1uSWNvbiB8IFRoZlRhYmxlQ29sdW1uKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBjb2x1bW4uY29sb3IgPT09ICdmdW5jdGlvbicgPyBjb2x1bW4uY29sb3IodGhpcy5yb3csIGNvbHVtbikgOiBjb2x1bW4uY29sb3I7XG4gIH1cblxufVxuIl19