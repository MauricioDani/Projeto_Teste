/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, NgZone, Renderer2 } from '@angular/core';
import { thfChartAngleStepInterval, thfChartCompleteCircle, thfChartPadding, thfChartStartAngle } from './thf-chart-pie.constant';
import { ThfChartDynamicTypeComponent } from '../thf-chart-dynamic-type.component';
export class ThfChartPieComponent extends ThfChartDynamicTypeComponent {
    /**
     * @param {?} el
     * @param {?} ngZone
     * @param {?} renderer
     */
    constructor(el, ngZone, renderer) {
        super();
        this.el = el;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.chartItemsEndAngleList = [];
        this.svgPathElementsList = [];
    }
    /**
     * @private
     * @param {?} value
     * @param {?} totalValue
     * @return {?}
     */
    static calculateEndAngle(value, totalValue) {
        return value / totalValue * (Math.PI * 2);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeWindowResizeListener();
        this.removeWindowScrollListener();
        this.animationRunning = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.chartInitSetup();
        this.setEventListeners();
    }
    /**
     * @private
     * @return {?}
     */
    animationSetup() {
        this.chartItemStartAngle = thfChartStartAngle;
        this.chartItemEndAngle = this.chartItemsEndAngleList[0];
        this.animationRunning = true;
        this.drawPathInit();
    }
    /**
     * @private
     * @return {?}
     */
    calculateAngleRadians() {
        this.series.forEach((/**
         * @param {?} serie
         * @param {?} index
         * @return {?}
         */
        (serie, index) => this.chartItemsEndAngleList[index] = ThfChartPieComponent.calculateEndAngle(serie.value, this.totalValue)));
    }
    /**
     * @private
     * @param {?} angleCurrentPosition
     * @return {?}
     */
    calculateCurrentEndAngle(angleCurrentPosition) {
        /** @type {?} */
        const isSerieDrawCompleted = this.chartItemStartAngle + angleCurrentPosition > this.chartItemStartAngle + this.chartItemEndAngle;
        if (isSerieDrawCompleted) {
            return (this.chartItemStartAngle + this.chartItemEndAngle) - thfChartCompleteCircle;
        }
        else {
            return this.chartItemStartAngle + angleCurrentPosition;
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    changeTooltipPosition(event) {
        if (this.tooltipElement && this.tooltipElement.classList.contains('thf-invisible')) {
            this.showTooltip();
        }
        /** @type {?} */
        const tooltipPositions = this.setTooltipPositions(event);
        this.renderer.setStyle(this.tooltipElement, 'left', `${tooltipPositions.left}px`);
        this.renderer.setStyle(this.tooltipElement, 'top', `${tooltipPositions.top}px`);
    }
    /**
     * @private
     * @return {?}
     */
    chartInitSetup() {
        this.calculateSVGContainerDimensions(this.chartWrapper, this.chartHeader, this.chartLegend);
        this.calculateTotalValue();
        this.calculateAngleRadians();
        this.createSVGElements();
        this.animationSetup();
    }
    /**
     * @private
     * @param {?} index
     * @param {?} serie
     * @param {?} svgPathsWrapper
     * @return {?}
     */
    createPath(index, serie, svgPathsWrapper) {
        /** @type {?} */
        const svgPath = this.renderer.createElement('svg:path', 'svg');
        this.renderer.setAttribute(svgPath, 'class', 'thf-path-item');
        this.renderer.setAttribute(svgPath, 'fill', this.colors[index]);
        this.renderer.setAttribute(svgPath, 'data-tooltip-category', serie.category);
        this.renderer.setAttribute(svgPath, 'data-tooltip-value', serie.value.toString());
        this.renderer.setAttribute(svgPath, 'data-tooltip-text', serie.tooltip || `${serie.category}: ${serie.value}`);
        svgPathsWrapper.appendChild(svgPath);
        this.renderer.appendChild(this.svgElement, svgPathsWrapper);
        this.svgPathElementsList.push(svgPath);
    }
    /**
     * @private
     * @return {?}
     */
    createPaths() {
        /** @type {?} */
        const svgPathsWrapper = this.renderer.createElement('svg:g', 'svg');
        this.series.forEach((/**
         * @param {?} serie
         * @param {?} index
         * @return {?}
         */
        (serie, index) => this.createPath(index, serie, svgPathsWrapper)));
    }
    /**
     * @private
     * @return {?}
     */
    createSVGElements() {
        this.svgElement = this.renderer.createElement('svg:svg', 'svg');
        this.renderer.setAttribute(this.svgElement, 'viewBox', `0 0 ${this.chartWrapper} ${this.centerX * 2}`);
        this.renderer.setAttribute(this.svgElement, 'preserveAspectRatio', 'xMidYMin meet');
        this.renderer.setAttribute(this.svgElement, 'class', 'thf-chart-svg-element');
        this.renderer.setAttribute(this.svgElement, 'width', `${this.chartWrapper - thfChartPadding * 2}`);
        this.renderer.setAttribute(this.svgElement, 'height', `${this.svgHeight}`);
        this.svgContainer.nativeElement.appendChild(this.svgElement);
        this.createPaths();
    }
    /**
     * @private
     * @param {?} path
     * @param {?} chartItemStartAngle
     * @param {?} chartItemEndAngle
     * @return {?}
     */
    drawPath(path, chartItemStartAngle, chartItemEndAngle) {
        /** @type {?} */
        const largeArc = (chartItemEndAngle - chartItemStartAngle) % (Math.PI * 2) > Math.PI ? 1 : 0;
        /** @type {?} */
        const startX = this.centerX + Math.cos(chartItemStartAngle) * this.centerX;
        /** @type {?} */
        const startY = this.centerX + Math.sin(chartItemStartAngle) * this.centerX;
        /** @type {?} */
        const endX = this.centerX + Math.cos(chartItemEndAngle) * this.centerX;
        /** @type {?} */
        const endY = this.centerX + Math.sin(chartItemEndAngle) * this.centerX;
        /** @type {?} */
        const pathCoordinates = [
            'M', startX, startY,
            'A', this.centerX, this.centerX, 0, largeArc, 1, endX, endY,
            'L', this.centerX, this.centerX,
            'Z'
        ].join(' ');
        return path.setAttribute('d', pathCoordinates);
    }
    /**
     * @private
     * @return {?}
     */
    drawPathInit() {
        if (!this.animationRunning) {
            return;
        }
        else {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => this.drawSeries()));
        }
    }
    /**
     * @private
     * @param {?=} currentSerieIndex
     * @param {?=} angleCurrentPosition
     * @return {?}
     */
    drawSeries(currentSerieIndex = 0, angleCurrentPosition = 0) {
        /** @type {?} */
        const isFinishedDrawingCurrentSeries = angleCurrentPosition > this.chartItemEndAngle;
        /** @type {?} */
        const isFinishedDrawingAllSeries = currentSerieIndex === this.svgPathElementsList.length;
        if (isFinishedDrawingAllSeries) {
            return;
        }
        if (isFinishedDrawingCurrentSeries) {
            this.chartItemStartAngle = this.chartItemStartAngle + this.chartItemEndAngle;
            currentSerieIndex++;
            this.chartItemEndAngle = this.chartItemsEndAngleList[currentSerieIndex];
            angleCurrentPosition = 0;
        }
        else {
            angleCurrentPosition += thfChartAngleStepInterval;
            this.drawPath(this.svgPathElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
        }
        window.requestAnimationFrame(this.drawSeries.bind(this, currentSerieIndex, angleCurrentPosition));
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    emitEventOnEnter(event) {
        this.onSerieHover.next(event);
    }
    /**
     * @private
     * @return {?}
     */
    onMouseClick() {
        /** @type {?} */
        const serieOnClick = { category: this.chartElementCategory, value: this.chartElementValue };
        this.onSerieClick.next(serieOnClick);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.tooltipElement = this.chartBody.nativeElement.lastChild;
        this.chartElementCategory = event.target.getAttributeNS(null, 'data-tooltip-category');
        this.chartElementValue = event.target.getAttributeNS(null, 'data-tooltip-value');
        this.tooltipText = event.target.getAttributeNS(null, 'data-tooltip-text');
        this.showTooltip();
        this.changeTooltipPosition(event);
        /** @type {?} */
        const serieOnEnter = { category: this.chartElementCategory, value: this.chartElementValue };
        this.emitEventOnEnter(serieOnEnter);
    }
    /**
     * @private
     * @return {?}
     */
    onWindowResize() {
        this.calculateSVGContainerDimensions(this.chartWrapper, this.chartHeader, this.chartLegend);
        this.renderer.setAttribute(this.svgElement, 'width', `${this.chartWrapper - thfChartPadding * 2}`);
        this.renderer.setAttribute(this.svgElement, 'height', `${this.svgHeight}`);
    }
    /**
     * @private
     * @return {?}
     */
    removeTooltip() {
        if (this.tooltipElement) {
            this.renderer.addClass(this.tooltipElement, 'thf-invisible');
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeWindowResizeListener() {
        if (this.windowResizeListener) {
            this.windowResizeListener();
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeWindowScrollListener() {
        if (this.windowScrollListener) {
            this.windowScrollListener();
        }
    }
    /**
     * @private
     * @return {?}
     */
    setEventListeners() {
        /** @type {?} */
        let chartSeries = this.el.nativeElement.querySelectorAll('.thf-path-item');
        chartSeries = Array.from(chartSeries);
        chartSeries.forEach((/**
         * @param {?} serie
         * @return {?}
         */
        serie => {
            this.renderer.listen(serie, 'click', this.onMouseClick.bind(this));
            this.renderer.listen(serie, 'mouseenter', this.onMouseEnter.bind(this));
            this.renderer.listen(serie, 'mousemove', this.changeTooltipPosition.bind(this));
            this.renderer.listen(serie, 'mouseleave', this.removeTooltip.bind(this));
        }));
        this.windowResizeListener = this.renderer.listen(window, 'resize', this.onWindowResize.bind(this));
        this.windowScrollListener = this.renderer.listen(this.checkingIfScrollsWithThfPage(), 'scroll', this.removeTooltip.bind(this));
    }
    /**
     * @private
     * @return {?}
     */
    checkingIfScrollsWithThfPage() {
        /** @type {?} */
        const thfPageContent = document.getElementsByClassName('thf-page-content');
        return thfPageContent.length ? thfPageContent[0] : window;
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    setTooltipPositions(event) {
        /** @type {?} */
        const displacement = 8;
        return {
            left: event.clientX - this.tooltipElement.offsetWidth / 2,
            top: event.clientY - this.tooltipElement.offsetHeight - displacement
        };
    }
    /**
     * @private
     * @return {?}
     */
    showTooltip() {
        this.renderer.removeClass(this.tooltipElement, 'thf-invisible');
    }
}
ThfChartPieComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-chart-pie',
                template: "<div #chartBody class=\"thf-chart-body\">\n  <div #svgContainer class=\"thf-chart-svg-container\"></div>\n  <div class=\"thf-chart-tooltip thf-tooltip thf-invisible\">\n    <div class=\"thf-tooltip-arrow thf-arrow-bottom\"></div>\n    <div class=\"thf-tooltip-content\">{{ tooltipText }}</div>\n  </div>\n</div>"
            }] }
];
/** @nocollapse */
ThfChartPieComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfChartPieComponent.prototype.animationRunning;
    /**
     * @type {?}
     * @private
     */
    ThfChartPieComponent.prototype.chartItemEndAngle;
    /**
     * @type {?}
     * @private
     */
    ThfChartPieComponent.prototype.chartItemStartAngle;
    /**
     * @type {?}
     * @private
     */
    ThfChartPieComponent.prototype.chartItemsEndAngleList;
    /**
     * @type {?}
     * @private
     */
    ThfChartPieComponent.prototype.svgPathElementsList;
    /**
     * @type {?}
     * @private
     */
    ThfChartPieComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ThfChartPieComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    ThfChartPieComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,