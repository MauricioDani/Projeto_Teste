/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por manipular os botões de aba.
 */
export class ThfTabButtonComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        // Função sera emitida quando a tab ficar ativada
        this.activated = new EventEmitter();
        // Função sera emitida quando a tab ficar desabilitada ou escondida
        this.changeState = new EventEmitter();
        // Método recebido do usuário para ser disparado quando clicar na aba
        this.click = new EventEmitter();
    }
    // Ativa o botão
    /**
     * @param {?} value
     * @return {?}
     */
    set active(value) {
        this._active = value;
        this.emitActivated();
    }
    /**
     * @return {?}
     */
    get active() {
        return this._active;
    }
    // Oculta o botão
    /**
     * @param {?} value
     * @return {?}
     */
    set hide(value) {
        this._hide = convertToBoolean(value);
        this.setDisplayOnHide();
    }
    /**
     * @return {?}
     */
    get hide() {
        return this._hide;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ((changes.hide && changes.hide.currentValue) || (changes.disabled && changes.disabled.currentValue)) {
            this.changeState.emit(this);
        }
    }
    /**
     * @return {?}
     */
    onClick() {
        if (!this.disabled) {
            this.click.emit(this.id);
        }
    }
    /**
     * @private
     * @return {?}
     */
    emitActivated() {
        if (this.active) {
            this.activated.emit(this);
        }
    }
    /**
     * @private
     * @return {?}
     */
    setDisplayOnHide() {
        this.elementRef.nativeElement.style.display = this.hide ? 'none' : '';
    }
}
ThfTabButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-tab-button',
                template: "<div\n  class=\"thf-tab-button-md\"\n  [attr.tabindex]=\"disabled ? null : 0\"\n  [class.thf-tab-button-active]=\"active\"\n  [class.thf-tab-button-disabled]=\"disabled\"\n  [class.thf-tab-button-sm]=\"small\"\n  (click)=\"onClick()\"\n  (keyup.enter)=\"onClick()\">\n\n  <span class=\"thf-tab-button-label\">\n    {{label}}\n  </span>\n</div>\n"
            }] }
];
/** @nocollapse */
ThfTabButtonComponent.ctorParameters = () => [
    { type: ElementRef }
];
ThfTabButtonComponent.propDecorators = {
    active: [{ type: Input, args: ['t-active',] }],
    disabled: [{ type: Input, args: ['t-disabled',] }],
    hide: [{ type: Input, args: ['t-hide',] }],
    id: [{ type: Input, args: ['t-id',] }],
    label: [{ type: Input, args: ['t-label',] }],
    small: [{ type: Input, args: ['t-small',] }],
    activated: [{ type: Output, args: ['t-activated',] }],
    changeState: [{ type: Output, args: ['t-change-state',] }],
    click: [{ type: Output, args: ['t-click',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTabButtonComponent.prototype._active;
    /**
     * @type {?}
     * @private
     */
    ThfTabButtonComponent.prototype._hide;
    /** @type {?} */
    ThfTabButtonComponent.prototype.disabled;
    /** @type {?} */
    ThfTabButtonComponent.prototype.id;
    /** @type {?} */
    ThfTabButtonComponent.prototype.label;
    /** @type {?} */
    ThfTabButtonComponent.prototype.small;
    /** @type {?} */
    ThfTabButtonComponent.prototype.activated;
    /** @type {?} */
    ThfTabButtonComponent.prototype.changeState;
    /** @type {?} */
    ThfTabButtonComponent.prototype.click;
    /**
     * @type {?}
     * @private
     */
    ThfTabButtonComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXRhYi1idXR0b24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi10YWJzL3RoZi10YWItYnV0dG9uL3RoZi10YWItYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxNQUFNLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRTdHLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7Ozs7OztBQWF2RCxNQUFNLE9BQU8scUJBQXFCOzs7O0lBZ0RoQyxZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZOztRQVJuQixjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7UUFHNUIsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDOztRQUd4QyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUVBLENBQUM7Ozs7OztJQTFDL0MsSUFBdUIsTUFBTSxDQUFDLEtBQWM7UUFDMUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFFckIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7Ozs7O0lBTUQsSUFBcUIsSUFBSSxDQUFDLEtBQWM7UUFDdEMsSUFBSSxDQUFDLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVyQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7O0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7Ozs7O0lBc0JELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ3RHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQzs7OztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFDOzs7OztJQUVPLGFBQWE7UUFDbkIsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDOzs7OztJQUVPLGdCQUFnQjtRQUN0QixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3hFLENBQUM7OztZQTFFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIscVdBQThDO2FBQy9DOzs7O1lBZG1CLFVBQVU7OztxQkFxQjNCLEtBQUssU0FBQyxVQUFVO3VCQVdoQixLQUFLLFNBQUMsWUFBWTttQkFHbEIsS0FBSyxTQUFDLFFBQVE7aUJBV2QsS0FBSyxTQUFDLE1BQU07b0JBR1osS0FBSyxTQUFDLFNBQVM7b0JBR2YsS0FBSyxTQUFDLFNBQVM7d0JBR2YsTUFBTSxTQUFDLGFBQWE7MEJBR3BCLE1BQU0sU0FBQyxnQkFBZ0I7b0JBR3ZCLE1BQU0sU0FBQyxTQUFTOzs7Ozs7O0lBNUNqQix3Q0FBeUI7Ozs7O0lBQ3pCLHNDQUF1Qjs7SUFjdkIseUNBQXVDOztJQWN2QyxtQ0FBMEI7O0lBRzFCLHNDQUFnQzs7SUFHaEMsc0NBQWlDOztJQUdqQywwQ0FBc0Q7O0lBR3RELDRDQUEyRDs7SUFHM0Qsc0NBQThDOzs7OztJQUVsQywyQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0Jvb2xlYW4gfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIHJlc3BvbnPDoXZlbCBwb3IgbWFuaXB1bGFyIG9zIGJvdMO1ZXMgZGUgYWJhLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aGYtdGFiLWJ1dHRvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi90aGYtdGFiLWJ1dHRvbi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgVGhmVGFiQnV0dG9uQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICBwcml2YXRlIF9hY3RpdmU6IGJvb2xlYW47XG4gIHByaXZhdGUgX2hpZGU6IGJvb2xlYW47XG5cbiAgLy8gQXRpdmEgbyBib3TDo29cbiAgQElucHV0KCd0LWFjdGl2ZScpIHNldCBhY3RpdmUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hY3RpdmUgPSB2YWx1ZTtcblxuICAgIHRoaXMuZW1pdEFjdGl2YXRlZCgpO1xuICB9XG5cbiAgZ2V0IGFjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICB9XG5cbiAgLy8gRGVzYWJpbGl0YSBvIGJvdMOjb1xuICBASW5wdXQoJ3QtZGlzYWJsZWQnKSBkaXNhYmxlZDogYm9vbGVhbjtcblxuICAvLyBPY3VsdGEgbyBib3TDo29cbiAgQElucHV0KCd0LWhpZGUnKSBzZXQgaGlkZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2hpZGUgPSBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcblxuICAgIHRoaXMuc2V0RGlzcGxheU9uSGlkZSgpO1xuICB9XG5cbiAgZ2V0IGhpZGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2hpZGU7XG4gIH1cblxuICAvLyBJZGVudGlmaWNhZG9yIGRvIGNvbXBvbmVudGVcbiAgQElucHV0KCd0LWlkJykgaWQ6IHN0cmluZztcblxuICAvLyBSw7N0dWxvIGRvIGJvdMOjb1xuICBASW5wdXQoJ3QtbGFiZWwnKSBsYWJlbDogc3RyaW5nO1xuXG4gIC8vIERpbWludWkgbyB0YW1hbmhvIGRvIGJvdMOjb1xuICBASW5wdXQoJ3Qtc21hbGwnKSBzbWFsbDogYm9vbGVhbjtcblxuICAvLyBGdW7Dp8OjbyBzZXJhIGVtaXRpZGEgcXVhbmRvIGEgdGFiIGZpY2FyIGF0aXZhZGFcbiAgQE91dHB1dCgndC1hY3RpdmF0ZWQnKSBhY3RpdmF0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLy8gRnVuw6fDo28gc2VyYSBlbWl0aWRhIHF1YW5kbyBhIHRhYiBmaWNhciBkZXNhYmlsaXRhZGEgb3UgZXNjb25kaWRhXG4gIEBPdXRwdXQoJ3QtY2hhbmdlLXN0YXRlJykgY2hhbmdlU3RhdGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLy8gTcOpdG9kbyByZWNlYmlkbyBkbyB1c3XDoXJpbyBwYXJhIHNlciBkaXNwYXJhZG8gcXVhbmRvIGNsaWNhciBuYSBhYmFcbiAgQE91dHB1dCgndC1jbGljaycpIGNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikgeyB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmICgoY2hhbmdlcy5oaWRlICYmIGNoYW5nZXMuaGlkZS5jdXJyZW50VmFsdWUpIHx8IChjaGFuZ2VzLmRpc2FibGVkICYmIGNoYW5nZXMuZGlzYWJsZWQuY3VycmVudFZhbHVlKSkge1xuICAgICAgdGhpcy5jaGFuZ2VTdGF0ZS5lbWl0KHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2xpY2soKSB7XG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmNsaWNrLmVtaXQodGhpcy5pZCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBlbWl0QWN0aXZhdGVkKCkge1xuICAgIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgICAgdGhpcy5hY3RpdmF0ZWQuZW1pdCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldERpc3BsYXlPbkhpZGUoKSB7XG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IHRoaXMuaGlkZSA/ICdub25lJyA6ICcnO1xuICB9XG5cbn1cbiJdfQ==