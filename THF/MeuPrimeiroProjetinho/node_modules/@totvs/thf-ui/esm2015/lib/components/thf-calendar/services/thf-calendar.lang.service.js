/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
export class ThfCalendarLangService {
    constructor() {
        this.language = 'pt';
        this.months = [
            {
                pt: 'Janeiro',
                en: 'January',
                es: 'Enero'
            },
            {
                pt: 'Fevereiro',
                en: 'February',
                es: 'Febrero'
            },
            {
                pt: 'Março',
                en: 'March',
                es: 'Marzo'
            },
            {
                pt: 'Abril',
                en: 'April',
                es: 'Abril'
            },
            {
                pt: 'Maio',
                en: 'May',
                es: 'Mayo'
            },
            {
                pt: 'Junho',
                en: 'June',
                es: 'Junio'
            },
            {
                pt: 'Julho',
                en: 'July',
                es: 'Julio'
            },
            {
                pt: 'Agosto',
                en: 'August',
                es: 'Agosto'
            },
            {
                pt: 'Setembro',
                en: 'September',
                es: 'Setiembre'
            },
            {
                pt: 'Outubro',
                en: 'October',
                es: 'Octubre'
            },
            {
                pt: 'Novembro',
                en: 'November',
                es: 'Noviembre'
            },
            {
                pt: 'Dezembro',
                en: 'December',
                es: 'Diciembre'
            }
        ];
        this.shortWeekDays = [
            {
                pt: 'Dom',
                en: 'Sun',
                es: 'Dom'
            },
            {
                pt: 'Seg',
                en: 'Mon',
                es: 'Lun'
            },
            {
                pt: 'Ter',
                en: 'Tue',
                es: 'Mar'
            },
            {
                pt: 'Qua',
                en: 'Wed',
                es: 'Mié'
            },
            {
                pt: 'Qui',
                en: 'Thu',
                es: 'Jue'
            },
            {
                pt: 'Sex',
                en: 'Fri',
                es: 'Vie'
            },
            {
                pt: 'Sáb',
                en: 'Sat',
                es: 'Sáb'
            }
        ];
        this.monthLabel = {
            pt: 'Mês',
            en: 'Month',
            es: 'Mes'
        };
        this.yearLabel = {
            pt: 'Ano',
            en: 'Year',
            es: 'Año'
        };
    }
    /**
     * @param {?} month
     * @return {?}
     */
    getMonth(month) {
        return this.months[month][this.language];
    }
    /**
     * @return {?}
     */
    getMonthLabel() {
        return this.monthLabel[this.language];
    }
    /**
     * @return {?}
     */
    getMonthsArray() {
        /** @type {?} */
        const arrMonths = Array();
        for (let i = 0; i < this.months.length; i++) {
            arrMonths.push(this.months[i][this.language]);
        }
        return arrMonths;
    }
    /**
     * @param {?} day
     * @return {?}
     */
    getWeekDays(day) {
        return this.shortWeekDays[day][this.language];
    }
    /**
     * @return {?}
     */
    getWeekDaysArray() {
        /** @type {?} */
        const arrWeekDays = Array();
        for (let i = 0; i < this.shortWeekDays.length; i++) {
            arrWeekDays.push(this.shortWeekDays[i][this.language]);
        }
        return arrWeekDays;
    }
    /**
     * @return {?}
     */
    getYearLabel() {
        return this.yearLabel[this.language];
    }
    /**
     * @param {?} language
     * @return {?}
     */
    setLanguage(language) {
        if (language && language.length >= 2) {
            language = language.toLowerCase().slice(0, 2);
            this.language = (language === 'pt' || language === 'en' || language === 'es') ? language : 'pt';
        }
    }
}
ThfCalendarLangService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfCalendarLangService.prototype.language;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarLangService.prototype.months;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarLangService.prototype.shortWeekDays;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarLangService.prototype.monthLabel;
    /**
     * @type {?}
     * @private
     */
    ThfCalendarLangService.prototype.yearLabel;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWNhbGVuZGFyLmxhbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtY2FsZW5kYXIvc2VydmljZXMvdGhmLWNhbGVuZGFyLmxhbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxNQUFNLE9BQU8sc0JBQXNCO0lBRG5DO1FBR1UsYUFBUSxHQUFHLElBQUksQ0FBQztRQUVoQixXQUFNLEdBQUc7WUFDZjtnQkFDRSxFQUFFLEVBQUUsU0FBUztnQkFDYixFQUFFLEVBQUUsU0FBUztnQkFDYixFQUFFLEVBQUUsT0FBTzthQUNaO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLFdBQVc7Z0JBQ2YsRUFBRSxFQUFFLFVBQVU7Z0JBQ2QsRUFBRSxFQUFFLFNBQVM7YUFDZDtZQUNEO2dCQUNFLEVBQUUsRUFBRSxPQUFPO2dCQUNYLEVBQUUsRUFBRSxPQUFPO2dCQUNYLEVBQUUsRUFBRSxPQUFPO2FBQ1o7WUFDRDtnQkFDRSxFQUFFLEVBQUUsT0FBTztnQkFDWCxFQUFFLEVBQUUsT0FBTztnQkFDWCxFQUFFLEVBQUUsT0FBTzthQUNaO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLE1BQU07Z0JBQ1YsRUFBRSxFQUFFLEtBQUs7Z0JBQ1QsRUFBRSxFQUFFLE1BQU07YUFDWDtZQUNEO2dCQUNFLEVBQUUsRUFBRSxPQUFPO2dCQUNYLEVBQUUsRUFBRSxNQUFNO2dCQUNWLEVBQUUsRUFBRSxPQUFPO2FBQ1o7WUFDRDtnQkFDRSxFQUFFLEVBQUUsT0FBTztnQkFDWCxFQUFFLEVBQUUsTUFBTTtnQkFDVixFQUFFLEVBQUUsT0FBTzthQUNaO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLFFBQVE7Z0JBQ1osRUFBRSxFQUFFLFFBQVE7Z0JBQ1osRUFBRSxFQUFFLFFBQVE7YUFDYjtZQUNEO2dCQUNFLEVB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TyxXQUFXLENBQUM7SUFDckIsQ0FBQzs7OztJQUVELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLFFBQWdCO1FBQzFCLElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQ3BDLFFBQVEsR0FBRyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsUUFBUSxLQUFLLElBQUksSUFBSSxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDakc7SUFDSCxDQUFDOzs7WUEzSkYsVUFBVTs7Ozs7OztJQUdULDBDQUF3Qjs7Ozs7SUFFeEIsd0NBNkRFOzs7OztJQUVGLCtDQW9DRTs7Ozs7SUFFRiw0Q0FJRTs7Ozs7SUFFRiwyQ0FJRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRoZkNhbGVuZGFyTGFuZ1NlcnZpY2Uge1xuXG4gIHByaXZhdGUgbGFuZ3VhZ2UgPSAncHQnO1xuXG4gIHByaXZhdGUgbW9udGhzID0gW1xuICAgIHtcbiAgICAgIHB0OiAnSmFuZWlybycsXG4gICAgICBlbjogJ0phbnVhcnknLFxuICAgICAgZXM6ICdFbmVybydcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnRmV2ZXJlaXJvJyxcbiAgICAgIGVuOiAnRmVicnVhcnknLFxuICAgICAgZXM6ICdGZWJyZXJvJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdNYXLDp28nLFxuICAgICAgZW46ICdNYXJjaCcsXG4gICAgICBlczogJ01hcnpvJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdBYnJpbCcsXG4gICAgICBlbjogJ0FwcmlsJyxcbiAgICAgIGVzOiAnQWJyaWwnXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ01haW8nLFxuICAgICAgZW46ICdNYXknLFxuICAgICAgZXM6ICdNYXlvJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdKdW5obycsXG4gICAgICBlbjogJ0p1bmUnLFxuICAgICAgZXM6ICdKdW5pbydcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnSnVsaG8nLFxuICAgICAgZW46ICdKdWx5JyxcbiAgICAgIGVzOiAnSnVsaW8nXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ0Fnb3N0bycsXG4gICAgICBlbjogJ0F1Z3VzdCcsXG4gICAgICBlczogJ0Fnb3N0bydcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnU2V0ZW1icm8nLFxuICAgICAgZW46ICdTZXB0ZW1iZXInLFxuICAgICAgZXM6ICdTZXRpZW1icmUnXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ091dHVicm8nLFxuICAgICAgZW46ICdPY3RvYmVyJyxcbiAgICAgIGVzOiAnT2N0dWJyZSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnTm92ZW1icm8nLFxuICAgICAgZW46ICdOb3ZlbWJlcicsXG4gICAgICBlczogJ05vdmllbWJyZSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnRGV6ZW1icm8nLFxuICAgICAgZW46ICdEZWNlbWJlcicsXG4gICAgICBlczogJ0RpY2llbWJyZSdcbiAgICB9XG4gIF07XG5cbiAgcHJpdmF0ZSBzaG9ydFdlZWtEYXlzID0gW1xuICAgIHtcbiAgICAgIHB0OiAnRG9tJyxcbiAgICAgIGVuOiAnU3VuJyxcbiAgICAgIGVzOiAnRG9tJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdTZWcnLFxuICAgICAgZW46ICdNb24nLFxuICAgICAgZXM6ICdMdW4nXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ1RlcicsXG4gICAgICBlbjogJ1R1ZScsXG4gICAgICBlczogJ01hcidcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnUXVhJyxcbiAgICAgIGVuOiAnV2VkJyxcbiAgICAgIGVzOiAnTWnDqSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnUXVpJyxcbiAgICAgIGVuOiAnVGh1JyxcbiAgICAgIGVzOiAnSnVlJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdTZXgnLFxuICAgICAgZW46ICdGcmknLFxuICAgICAgZXM6ICdWaWUnXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ1PDoWInLFxuICAgICAgZW46ICdTYXQnLFxuICAgICAgZXM6ICdTw6FiJ1xuICAgIH1cbiAgXTtcblxuICBwcml2YXRlIG1vbnRoTGFiZWwgPSB7XG4gICAgcHQ6ICdNw6pzJyxcbiAgICBlbjogJ01vbnRoJyxcbiAgICBlczogJ01lcydcbiAgfTtcblxuICBwcml2YXRlIHllYXJMYWJlbCA9IHtcbiAgICBwdDogJ0FubycsXG4gICAgZW46ICdZZWFyJyxcbiAgICBlczogJ0HDsW8nXG4gIH07XG5cbiAgZ2V0TW9udGgobW9udGg6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLm1vbnRoc1ttb250aF1bdGhpcy5sYW5ndWFnZV07XG4gIH1cblxuICBnZXRNb250aExhYmVsKCkge1xuICAgIHJldHVybiB0aGlzLm1vbnRoTGFiZWxbdGhpcy5sYW5ndWFnZV07XG4gIH1cblxuICBnZXRNb250aHNBcnJheSgpIHtcbiAgICBjb25zdCBhcnJNb250aHMgPSBBcnJheSgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tb250aHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyck1vbnRocy5wdXNoKHRoaXMubW9udGhzW2ldW3RoaXMubGFuZ3VhZ2VdKTtcbiAgICB9XG4gICAgcmV0dXJuIGFyck1vbnRocztcbiAgfVxuXG4gIGdldFdlZWtEYXlzKGRheTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hvcnRXZWVrRGF5c1tkYXldW3RoaXMubGFuZ3VhZ2VdO1xuICB9XG5cbiAgZ2V0V2Vla0RheXNBcnJheSgpIHtcbiAgICBjb25zdCBhcnJXZWVrRGF5cyA9IEFycmF5KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNob3J0V2Vla0RheXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycldlZWtEYXlzLnB1c2godGhpcy5zaG9ydFdlZWtEYXlzW2ldW3RoaXMubGFuZ3VhZ2VdKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycldlZWtEYXlzO1xuICB9XG5cbiAgZ2V0WWVhckxhYmVsKCkge1xuICAgIHJldHVybiB0aGlzLnllYXJMYWJlbFt0aGlzLmxhbmd1YWdlXTtcbiAgfVxuXG4gIHNldExhbmd1YWdlKGxhbmd1YWdlOiBzdHJpbmcpIHtcbiAgICBpZiAobGFuZ3VhZ2UgJiYgbGFuZ3VhZ2UubGVuZ3RoID49IDIpIHtcbiAgICAgIGxhbmd1YWdlID0gbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKS5zbGljZSgwLCAyKTtcbiAgICAgIHRoaXMubGFuZ3VhZ2UgPSAobGFuZ3VhZ2UgPT09ICdwdCcgfHwgbGFuZ3VhZ2UgPT09ICdlbicgfHwgbGFuZ3VhZ2UgPT09ICdlcycpID8gbGFuZ3VhZ2UgOiAncHQnO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=