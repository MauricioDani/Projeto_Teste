/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { v4 as uuid } from 'uuid';
import { browserLanguage, convertToBoolean, isKeyCodeEnter, thfLocaleDefault } from '../../utils/util';
/** @type {?} */
export const thfDisclaimerGroupLiteralsDefault = {
    en: { removeAll: 'Remove all' },
    es: { removeAll: 'Eliminar todos' },
    pt: { removeAll: 'Remover todos' }
};
/**
 * \@description
 *
 * O componente `thf-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
 *
 * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
 * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
 *
 * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
 * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
 *
 * > Veja a integração destas funcionalidade no componente [thf-page-list](/documentation/thf-page-list).
 */
export class ThfDisclaimerGroupBaseComponent {
    /**
     * @param {?} differs
     */
    constructor(differs) {
        this._disclaimers = [];
        this._hideRemoveAll = false;
        this.previousDisclaimers = [];
        this.literals = Object.assign({}, thfDisclaimerGroupLiteralsDefault[thfLocaleDefault], thfDisclaimerGroupLiteralsDefault[browserLanguage()]);
        /**
         * Função que será disparada quando a lista de *disclaimers* for modificada.
         */
        this.change = new EventEmitter();
        this.differ = differs.find([]).create(null);
    }
    /** Lista de *disclaimers*. */
    /**
     * \@description
     *
     * Lista de *disclaimers*.
     *
     * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `ThfDisclaimer`.
     *
     * Exemplo adicionando um *disclaimer* no array:
     *
     * ```
     * this.disclaimers = [...this.disclaimers, disclaimer];
     * ```
     *
     * ou
     *
     * ```
     * this.disclaimers = this.disclaimers.concat(disclaimer);
     * ```
     * @param {?} value
     * @return {?}
     */
    set disclaimers(value) {
        this.previousDisclaimers = [...this.disclaimers];
        this._disclaimers = this.checkDisclaimers(value);
    }
    /**
     * @return {?}
     */
    get disclaimers() {
        return this._disclaimers;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Oculta o botão para remover todos os *disclaimers* do grupo.
     *
     * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set hideRemoveAll(value) {
        this._hideRemoveAll = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get hideRemoveAll() {
        return this._hideRemoveAll;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.checkChanges();
    }
    /**
     * @param {?} disclaimer
     * @param {?=} emitChange
     * @return {?}
     */
    closeItem(disclaimer, emitChange = true) {
        /** @type {?} */
        const itemIndex = this.disclaimers.findIndex((/**
         * @param {?} d
         * @return {?}
         */
        d => d['$id'] === disclaimer['$id']));
        this.disclaimers.splice(itemIndex, 1);
        if (emitChange) {
            this.emitChangeDisclaimers();
        }
    }
    /**
     * @return {?}
     */
    isRemoveAll() {
        return !this.hideRemoveAll && this.disclaimers.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => !c.hideClose)).length > 1;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyPress(event) {
        if (isKeyCodeEnter(event)) {
            this.removeAllItems();
        }
    }
    /**
     * @return {?}
     */
    removeAllItems() {
        /** @type {?} */
        const removeItems = [];
        this.disclaimers.forEach((/**
         * @param {?} disclaimer
         * @return {?}
         */
        disclaimer => {
            if (!disclaimer.hideClose) {
                removeItems.push(disclaimer);
            }
        }));
        removeItems.forEach((/**
         * @param {?} disclaimer
         * @return {?}
         */
        disclaimer => this.closeItem(disclaimer, false)));
        this.emitChangeDisclaimers();
    }
    /**
     * @private
     * @return {?}
     */
    checkChanges() {
        if (this.differ) {
            /** @type {?} */
            const changes = this.differ.diff(this.disclaimers);
            if (changes && this.disclaimersAreChanged(this.disclaimers)) {
                this.emitChangeDisclaimers();
            }
        }
    }
    /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    checkDisclaimers(disclaimers) {
        if (Array.isArray(disclaimers)) {
            for (let i = 0; i < disclaimers.length; i++) {
                /** @type {?} */
                const disclaimer = disclaimers[i];
                if (disclaimer.value || disclaimer.value === 0 || disclaimer.value === false) {
                    disclaimer['$id'] = uuid();
                }
                else {
                    disclaimers.splice(i, 1);
                    i--;
                }
            }
            return disclaimers;
        }
        return [];
    }
    /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    disclaimersAreChanged(disclaimers) {
        /** @type {?} */
        const currentValues = disclaimers;
        if (currentValues.length !== this.previousDisclaimers.length) {
            return true;
        }
        return currentValues.some((/**
         * @param {?} disclaimer
         * @param {?} index
         * @return {?}
         */
        (disclaimer, index) => disclaimer.value !== this.previousDisclaimers[index].value
            || disclaimer.property !== this.previousDisclaimers[index].property));
    }
    /**
     * @private
     * @return {?}
     */
    emitChangeDisclaimers() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.change.emit(this.disclaimers);
        }));
        this.previousDisclaimers = [...this._disclaimers];
    }
}
ThfDisclaimerGroupBaseComponent.propDecorators = {
    disclaimers: [{ type: Input, args: ['t-disclaimers',] }],
    hideRemoveAll: [{ type: Input, args: ['t-hide-remove-all',] }],
    title: [{ type: Input, args: ['t-title',] }],
    change: [{ type: Output, args: ['t-change',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfDisclaimerGroupBaseComponent.prototype._disclaimers;
    /**
     * @type {?}
     * @private
     */
    ThfDisclaimerGroupBaseComponent.prototype._hideRemoveAll;
    /**
     * @type {?}
     * @private
     */
    ThfDisclaimerGroupBaseComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    ThfDisclaimerGroupBaseComponent.prototype.previousDisclaimers;
    /** @type {?} */
    ThfDisclaimerGroupBaseComponent.prototype.literals;
    /**
     * Título do grupo de *disclaimers*.
     * @type {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.title;
    /**
     * Função que será disparada quando a lista de *disclaimers* for modificada.
     * @type {?}
     */
    ThfDisclaimerGroupBaseComponent.prototype.change;
}
//# sourceMappingURL=data:application/json;base64,