/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { requiredFailed } from '../validators';
/**
 * \@description
 *
 * O componente `thf-rich-text` é um editor de textos enriquecidos.
 *
 * Para edição de texto simples sem formatação recomenda-se o uso do componente [**thf-textarea**](/documentation/thf-textarea).
 * @abstract
 */
export class ThfRichTextBaseComponent {
    constructor() {
        this.onChangeModel = null;
        this.invalid = false;
        // tslint:disable-next-line
        this.onTouched = null;
        /**
         * \@description
         *
         * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.
         */
        this.errorMessage = '';
        /**
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         */
        this.required = false;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define a altura da área de edição de texto.
     *
     * > Altura mínima do componente é `94` e a altura máxima é `262`.
     * @param {?} height
     * @return {?}
     */
    set height(height) {
        this._height = height;
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     *
     * \@default ''
     * @param {?} value
     * @return {?}
     */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    /**
     * @return {?}
     */
    get placeholder() {
        return this._placeholder;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo será somente leitura.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set readonly(value) {
        this._readonly = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get readonly() {
        return this._readonly;
    }
    /**
     * @param {?} required
     * @return {?}
     */
    set setRequired(required) {
        this.required = convertToBoolean(required);
        this.validateModel(this.value);
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    registerOnChange(func) {
        this.onChangeModel = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    registerOnTouched(func) {
        this.onTouched = func;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    validate(abstractControl) {
        if (requiredFailed(this.required, false, abstractControl.value)) {
            return { required: {
                    valid: false,
                } };
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    // Executa a função onChange
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    updateModel(value) {
        // Quando o rich-text não possui um formulário, então esta função não é registrada
        if (this.onChangeModel) {
            this.onChangeModel(value);
        }
    }
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    validateModel(value) {
        if (this.validatorChange) {
            this.validatorChange(value);
        }
    }
}
ThfRichTextBaseComponent.propDecorators = {
    errorMessage: [{ type: Input, args: ['t-error-message',] }],
    height: [{ type: Input, args: ['t-height',] }],
    help: [{ type: Input, args: ['t-help',] }],
    label: [{ type: Input, args: ['t-label',] }],
    name: [{ type: Input, args: ['name',] }],
    optional: [{ type: Input, args: ['t-optional',] }],
    placeholder: [{ type: Input, args: ['t-placeholder',] }],
    readonly: [{ type: Input, args: ['t-readonly',] }],
    setRequired: [{ type: Input, args: ['t-required',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfRichTextBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    ThfRichTextBaseComponent.prototype._placeholder;
    /**
     * @type {?}
     * @private
     */
    ThfRichTextBaseComponent.prototype._readonly;
    /** @type {?} */
    ThfRichTextBaseComponent.prototype.onChangeModel;
    /** @type {?} */
    ThfRichTextBaseComponent.prototype.invalid;
    /** @type {?} */
    ThfRichTextBaseComponent.prototype.value;
    /**
     * @type {?}
     * @private
     */
    ThfRichTextBaseComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    ThfRichTextBaseComponent.prototype.validatorChange;
    /**
     * \@description
     *
     * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.
     * @type {?}
     */
    ThfRichTextBaseComponent.prototype.errorMessage;
    /**
     * \@optional
     *
     * \@description
     *
     * Texto de apoio do campo.
     * @type {?}
     */
    ThfRichTextBaseComponent.prototype.help;
    /**
     * \@optional
     *
     * \@description
     *
     * Rótulo do campo.
     * @type {?}
     */
    ThfRichTextBaseComponent.prototype.label;
    /**
     * Nome e identificador do campo.
     * @type {?}
     */
    ThfRichTextBaseComponent.prototype.name;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `t-required`;
     * - Não possuir `t-help` e/ou `t-label`.
     *
     * \@default `false`
     * @type {?}
     */
    ThfRichTextBaseComponent.prototype.optional;
    /**
     * \@description
     *
     * Indica que o campo será obrigatório.
     *
     * \@default `false`
     * @type {?}
     */
    ThfRichTextBaseComponent.prototype.required;
}
//# sourceMappingURL=data:application/json;base64,