/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, ElementRef, HostListener, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { animate, AnimationBuilder, keyframes, style } from '@angular/animations';
import { ThfSlideBaseComponent } from './thf-slide-base.component';
import { ThfSlideContentTemplateDirective } from './directives/thf-slide-content-template.directive';
import { ThfSlideItemComponent } from './thf-slide-item/thf-slide-item.component';
/** @type {?} */
const thfSlideDefaultHeight = 336;
/** @type {?} */
const thfSlideIntervalMin = 1000;
/** @type {?} */
const thfSlideMinHeight = 192;
/** @type {?} */
const thfSlideTiming = '250ms ease';
/**
 * \@docsExtends ThfSlideBaseComponent
 *
 * \@example
 * <example name="thf-slide-basic" title="Totvs Slide Basic">
 *   <file name="sample-thf-slide-basic/sample-thf-slide-basic.component.html"> </file>
 *   <file name="sample-thf-slide-basic/sample-thf-slide-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-slide-labs" title="Totvs Slide Labs">
 *   <file name="sample-thf-slide-labs/sample-thf-slide-labs.component.html"> </file>
 *   <file name="sample-thf-slide-labs/sample-thf-slide-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-slide-useful-articles" title="Totvs Slide - Useful articles">
 *   <file name="sample-thf-slide-useful-articles/sample-thf-slide-useful-articles.component.html"> </file>
 *   <file name="sample-thf-slide-useful-articles/sample-thf-slide-useful-articles.component.ts"> </file>
 * </example>
 *
 * <example name="thf-slide-landscapes" title="Totvs Slide - Landscapes">
 *   <file name="sample-thf-slide-landscapes/sample-thf-slide-landscapes.component.html"> </file>
 *   <file name="sample-thf-slide-landscapes/sample-thf-slide-landscapes.component.ts"> </file>
 * </example>
 */
export class ThfSlideComponent extends ThfSlideBaseComponent {
    /**
     * @param {?} builder
     */
    constructor(builder) {
        super();
        this.builder = builder;
        this.isLoaded = false;
        this.currentSlideIndex = 0;
        this.slideItems = [];
    }
    /**
     * @private
     * @return {?}
     */
    get hasElements() {
        return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;
    }
    /**
     * @private
     * @return {?}
     */
    get isImageSlide() {
        return !this.slideContentTemplate;
    }
    /**
     * @private
     * @return {?}
     */
    get offset() {
        return this.currentSlideIndex * this.slideItemWidth;
    }
    /**
     * @return {?}
     */
    get hasSlides() {
        return !!this.slides && !!this.slides.length;
    }
    /**
     * @return {?}
     */
    onResize() {
        if (this.slide) {
            this.setSlideItemWidth();
            this.goToItem(this.currentSlideIndex);
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (!this.isLoaded && this.hasElements) {
            this.setSlideItemWidth();
            this.isLoaded = true;
            if (this.hasSlides) {
                this.startSlide();
            }
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    goToItem(index) {
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = index;
        this.animate(this.offset);
    }
    /**
     * @return {?}
     */
    nextControl() {
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.next();
    }
    /**
     * @return {?}
     */
    next() {
        if (this.currentSlideIndex + 1 === this.slideItems.length) {
            this.currentSlideIndex = 0;
            this.animate(0);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;
        this.animate(this.offset);
    }
    /**
     * @return {?}
     */
    previous() {
        if (this.currentSlideIndex === 0) {
            this.currentSlideIndex = this.slideItems.length - 1;
            this.animate(this.offset);
            return;
        }
        this.currentSlideIndex = ((this.currentSlideIndex - 1) + this.slideItems.length) % this.slideItems.length;
        this.animate(this.offset);
    }
    /**
     * @return {?}
     */
    previousControl() {
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.previous();
    }
    /**
     * @param {?} height
     * @return {?}
     */
    setSlideHeight(height) {
        this.setHeight(height);
    }
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    animate(offset) {
        if (this.hasElements) {
            /** @type {?} */
            const animation = this.buildTransitionAnimation(offset);
            this.player = animation.create(this.slide.nativeElement);
            this.player.play();
        }
    }
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    buildTransitionAnimation(offset) {
        return this.builder.build([
            animate(thfSlideTiming, keyframes([style({ transform: `translateX(-${offset}px)` })]))
        ]);
    }
    /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    createArrayForTemplate(slides) {
        this.slideItems = [...slides];
    }
    /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    createArrayFromSlides(slides) {
        /** @type {?} */
        const isStringArray = slides.every((/**
         * @param {?} item
         * @return {?}
         */
        item => typeof item === 'string'));
        if (isStringArray) {
            slides.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => this.slideItems.push({ image: `${element}` })));
        }
        else {
            this.slideItems = [...(/** @type {?} */ (slides))];
        }
    }
    /**
     * @private
     * @param {?} height
     * @return {?}
     */
    setDefaultHeight(height) {
        if (height && height <= thfSlideMinHeight || !height && this.isImageSlide) {
            this.slide.nativeElement.style.height = `${thfSlideDefaultHeight}px`;
            this.imageHeight = thfSlideDefaultHeight;
        }
        else {
            this.imageHeight = undefined;
        }
    }
    /**
     * @private
     * @param {?} height
     * @return {?}
     */
    setHeight(height) {
        if (height && height > thfSlideMinHeight) {
            this.slide.nativeElement.style.height = `${height}px`;
            this.imageHeight = height;
        }
        else {
            this.setDefaultHeight(height);
        }
    }
    /**
     * @private
     * @return {?}
     */
    setSlideItemWidth() {
        if (this.hasElements) {
            this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;
        }
    }
    /**
     * @protected
     * @return {?}
     */
    cancelInterval() {
        clearInterval(this.setInterval);
    }
    /**
     * @protected
     * @param {?} slides
     * @return {?}
     */
    setSlideItems(slides) {
        if (this.hasSlides) {
            this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);
        }
        else {
            this.slideItems = [];
            this.cancelInterval();
        }
    }
    /**
     * @protected
     * @return {?}
     */
    startSlide() {
        this.setSlideHeight(this.height);
        if (this.interval > thfSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = 0;
    }
    /**
     * @protected
     * @return {?}
     */
    startInterval() {
        if (this.setInterval) {
            this.cancelInterval();
        }
        this.setInterval = this.hasSlides && this.hasElements ? setInterval((/**
         * @return {?}
         */
        () => { this.next(); }), this.interval) : undefined;
    }
}
ThfSlideComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-slide',
                template: "<div class=\"thf-slide-wrapper\">\n  <div class=\"thf-slide-outer\">\n    <div class=\"thf-slide-inner\" #slide>\n      <ng-container *ngFor=\"let item of slideItems; let index = index;\">\n        <thf-slide-item\n          [t-action]=\"item.action\"\n          [t-data]=\"item\"\n          [t-image]=\"item.image\"\n          [t-image-height]=\"imageHeight\"\n          [t-template]=\"slideContentTemplate\"\n          [t-alt]=\"item.alt\"\n          [t-link]=\"item.link\">\n        </thf-slide-item>\n      </ng-container>\n    </div>\n\n    <thf-slide-control *ngIf=\"hasSlides && slides.length > 1\" \n      t-control=\"previous\"\n      (t-click)=\"previousControl()\">\n    </thf-slide-control>\n\n    <thf-slide-control *ngIf=\"hasSlides && slides.length > 1\"\n      t-control=\"next\"\n      (t-click)=\"nextControl()\">\n    </thf-slide-control>\n\n  </div>\n\n  <thf-slide-circles\n    *ngIf=\"hasSlides && slides.length > 1\"\n    [t-current-slide-index]=\"currentSlideIndex\"\n    [t-items]=\"slideItems\"\n    (t-click)=\"goToItem($event)\">\n  </thf-slide-circles>\n</div>\n"
            }] }
];
/** @nocollapse */
ThfSlideComponent.ctorParameters = () => [
    { type: AnimationBuilder }
];
ThfSlideComponent.propDecorators = {
    slideContentTemplate: [{ type: ContentChild, args: [ThfSlideContentTemplateDirective, { static: true },] }],
    slide: [{ type: ViewChild, args: ['slide', { static: true },] }],
    itemsElements: [{ type: ViewChildren, args: [ThfSlideItemComponent,] }],
    onResize: [{ type: HostListener, args: ['window:resize',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfSlideComponent.prototype.isLoaded;
    /**
     * @type {?}
     * @private
     */
    ThfSlideComponent.prototype.player;
    /**
     * @type {?}
     * @private
     */
    ThfSlideComponent.prototype.setInterval;
    /** @type {?} */
    ThfSlideComponent.prototype.currentSlideIndex;
    /** @type {?} */
    ThfSlideComponent.prototype.imageHeight;
    /** @type {?} */
    ThfSlideComponent.prototype.slideItems;
    /** @type {?} */
    ThfSlideComponent.prototype.slideItemWidth;
    /** @type {?} */
    ThfSlideComponent.prototype.slideContentTemplate;
    /**
     * @type {?}
     * @private
     */
    ThfSlideComponent.prototype.slide;
    /**
     * @type {?}
     * @private
     */
    ThfSlideComponent.prototype.itemsElements;
    /**
     * @type {?}
     * @private
     */
    ThfSlideComponent.prototype.builder;
}
//# sourceMappingURL=data:application/json;base64,