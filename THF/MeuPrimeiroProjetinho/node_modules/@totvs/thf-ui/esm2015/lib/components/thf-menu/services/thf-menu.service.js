/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço que implementa a interface `ThfMenuFilter`, utilizado para fazer requisições ao serviço informado pelo usuário,
 * caso for uma URL, no componente `thf-menu`.
 */
export class ThfMenuService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @return {?}
     */
    get url() { return this._url; }
    /**
     * @param {?} url
     * @return {?}
     */
    configProperties(url) {
        this._url = url;
    }
    /**
     * @param {?} search
     * @param {?=} params
     * @return {?}
     */
    getFilteredData(search, params) {
        /** @type {?} */
        const filterParams = Object.assign({ search }, params);
        return this.http.get(this.url, { params: filterParams })
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => response && response.items)));
    }
}
ThfMenuService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfMenuService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfMenuService.prototype._url;
    /**
     * @type {?}
     * @private
     */
    ThfMenuService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLW1lbnUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtbWVudS9zZXJ2aWNlcy90aGYtbWVudS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7OztBQWVyQyxNQUFNLE9BQU8sY0FBYzs7OztJQU16QixZQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQUksQ0FBQzs7OztJQUZ6QyxJQUFJLEdBQUcsS0FBYSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDOzs7OztJQUl2QyxnQkFBZ0IsQ0FBQyxHQUFXO1FBQzFCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ2xCLENBQUM7Ozs7OztJQUVELGVBQWUsQ0FBQyxNQUFjLEVBQUUsTUFBWTs7Y0FDcEMsWUFBWSxtQkFDaEIsTUFBTSxJQUNILE1BQU0sQ0FDVjtRQUVELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsQ0FBQzthQUNyRCxJQUFJLENBQUMsR0FBRzs7OztRQUFDLENBQUMsUUFBK0MsRUFBRSxFQUFFLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO0lBQ2hHLENBQUM7OztZQXJCRixVQUFVOzs7O1lBakJGLFVBQVU7Ozs7Ozs7SUFvQmpCLDhCQUFxQjs7Ozs7SUFJVCw4QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFRoZk1lbnVJdGVtRmlsdGVyZWQgfSBmcm9tICcuLi90aGYtbWVudS1pdGVtL3RoZi1tZW51LWl0ZW0tZmlsdGVyZWQuaW50ZXJmYWNlJztcbmltcG9ydCB7IFRoZk1lbnVGaWx0ZXIgfSBmcm9tICcuLi90aGYtbWVudS1maWx0ZXIvdGhmLW1lbnUtZmlsdGVyLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2VydmnDp28gcXVlIGltcGxlbWVudGEgYSBpbnRlcmZhY2UgYFRoZk1lbnVGaWx0ZXJgLCB1dGlsaXphZG8gcGFyYSBmYXplciByZXF1aXNpw6fDtWVzIGFvIHNlcnZpw6dvIGluZm9ybWFkbyBwZWxvIHVzdcOhcmlvLFxuICogY2FzbyBmb3IgdW1hIFVSTCwgbm8gY29tcG9uZW50ZSBgdGhmLW1lbnVgLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGhmTWVudVNlcnZpY2UgaW1wbGVtZW50cyBUaGZNZW51RmlsdGVyIHtcblxuICBwcml2YXRlIF91cmw6IHN0cmluZztcblxuICBnZXQgdXJsKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLl91cmw7IH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxuXG4gIGNvbmZpZ1Byb3BlcnRpZXModXJsOiBzdHJpbmcpIHtcbiAgICB0aGlzLl91cmwgPSB1cmw7XG4gIH1cblxuICBnZXRGaWx0ZXJlZERhdGEoc2VhcmNoOiBzdHJpbmcsIHBhcmFtcz86IGFueSk6IE9ic2VydmFibGU8QXJyYXk8VGhmTWVudUl0ZW1GaWx0ZXJlZD4+IHtcbiAgICBjb25zdCBmaWx0ZXJQYXJhbXMgPSB7XG4gICAgICBzZWFyY2gsXG4gICAgICAuLi5wYXJhbXNcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy51cmwsIHsgcGFyYW1zOiBmaWx0ZXJQYXJhbXMgfSlcbiAgICAgIC5waXBlKG1hcCgocmVzcG9uc2U6IHsgaXRlbXM6IEFycmF5PFRoZk1lbnVJdGVtRmlsdGVyZWQ+IH0pID0+IHJlc3BvbnNlICYmIHJlc3BvbnNlLml0ZW1zKSk7XG4gIH1cblxufVxuIl19