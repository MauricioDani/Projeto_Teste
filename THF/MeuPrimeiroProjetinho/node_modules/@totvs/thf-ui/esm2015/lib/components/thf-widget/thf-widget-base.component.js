/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Output, EventEmitter } from '@angular/core';
import { convertToBoolean, isTypeof } from '../../utils/util';
/**
 *
 * \@description
 *
 * O componente `thf-widget` é recomendado para exibição de *dashboards*, podendo ser utilizado
 * para incluir vários tipos de conteúdo como: gráficos, tabelas, grids e imagens.
 *
 * Além da exibição de conteúdos, este componente possibilita adicionar ações e um link
 * para ajuda, como também possibilita ser utilizado com ou sem sombra.
 *
 * Para controlar sua largura, é possível utilizar o [Grid System](/guides/grid-system) para um maior
 * controle de seu redimensionamento, assim possibilitando o tratamento para diferentes resoluções.
 * @abstract
 */
export class ThfWidgetBaseComponent {
    constructor() {
        this._disabled = false;
        this._noShadow = false;
        this._primary = false;
        this.containerHeight = 'auto';
        /**
         * Ação que será executada quando o usuário clicar sobre a área total do `thf-widget`.
         */
        this.click = new EventEmitter();
        /**
         * Função que será disparada com o valor do `t-disabled` quando esta propriedade for alterada.
         */
        this.onDisabled = new EventEmitter();
        /**
         * Função que será chamada na primeira ação.
         */
        this.primaryAction = new EventEmitter();
        /**
         * Função que será chamada na segunda ação.
         */
        this.secondaryAction = new EventEmitter();
        /**
         * Função chamada ao clicar no ícone de configuração
         */
        this.setting = new EventEmitter();
        /**
         * Função que será chamada ao clicar no título.
         */
        this.titleAction = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Aplicação de imagem de fundo.
     * > Se a imagem escolhida intervir na legibilidade do texto contido no `t-widget`,
     * pode-se utilizar a propriedade `t-primary` em conjunto para que os textos fiquem na cor branca.
     *
     * @param {?} value
     * @return {?}
     */
    set background(value) {
        this._background = (value && typeof value === 'string') ? value : undefined;
    }
    /**
     * @return {?}
     */
    get background() {
        return this._background;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Desabilita todas as ações do componente.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
        this.onDisabled.emit(this.disabled);
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define a altura do `thf-widget`.
     * A altura mínima para o `thf-widget` depende do que será exibido através das propriedades `t-primary-label`,
     * `t-setting`, `t-help` e `t-title`.
     * > Caso não seja informado valor, a propriedade irá assumir o tamanho do conteúdo.
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        this._height = parseInt((/** @type {?} */ (value)), 10);
        this.setHeight(this.height);
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Link de ajuda
     * @param {?} value
     * @return {?}
     */
    set help(value) {
        this._help = isTypeof(value, 'string') ? value : '';
        this.setHeight(this.height);
    }
    /**
     * @return {?}
     */
    get help() {
        return this._help;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Desabilita a sombra do `thf-widget`.
     *
     * \@default `true`
     * @param {?} value
     * @return {?}
     */
    set noShadow(value) {
        this._noShadow = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        this.setHeight(this.height);
    }
    /**
     * @return {?}
     */
    get noShadow() {
        return this._noShadow;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Opção para que o `thf-widget` fique em destaque.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set primary(value) {
        this._primary = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get primary() {
        return this._primary;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Descrição da primeira ação.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set primaryLabel(value) {
        this._primaryLabel = isTypeof(value, 'string') ? value : '';
        this.setHeight(this.height);
    }
    /**
     * @return {?}
     */
    get primaryLabel() {
        return this._primaryLabel;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Título do `thf-widget`.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set title(value) {
        this._title = isTypeof(value, 'string') ? value : '';
        this.setHeight(this.height);
    }
    /**
     * @return {?}
     */
    get title() {
        return this._title;
    }
}
ThfWidgetBaseComponent.propDecorators = {
    background: [{ type: Input, args: ['t-background',] }],
    disabled: [{ type: Input, args: ['t-disabled',] }],
    height: [{ type: Input, args: ['t-height',] }],
    help: [{ type: Input, args: ['t-help',] }],
    noShadow: [{ type: Input, args: ['t-no-shadow',] }],
    primary: [{ type: Input, args: ['t-primary',] }],
    primaryLabel: [{ type: Input, args: ['t-primary-label',] }],
    secondaryLabel: [{ type: Input, args: ['t-secondary-label',] }],
    title: [{ type: Input, args: ['t-title',] }],
    click: [{ type: Output, args: ['t-click',] }],
    onDisabled: [{ type: Output, args: ['t-on-disabled',] }],
    primaryAction: [{ type: Output, args: ['t-primary-action',] }],
    secondaryAction: [{ type: Output, args: ['t-secondary-action',] }],
    setting: [{ type: Output, args: ['t-setting',] }],
    titleAction: [{ type: Output, args: ['t-title-action',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfWidgetBaseComponent.prototype._background;
    /**
     * @type {?}
     * @private
     */
    ThfWidgetBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfWidgetBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    ThfWidgetBaseComponent.prototype._help;
    /**
     * @type {?}
     * @private
     */
    ThfWidgetBaseComponent.prototype._noShadow;
    /**
     * @type {?}
     * @private
     */
    ThfWidgetBaseComponent.prototype._primary;
    /**
     * @type {?}
     * @private
     */
    ThfWidgetBaseComponent.prototype._primaryLabel;
    /**
     * @type {?}
     * @private
     */
    ThfWidgetBaseComponent.prototype._title;
    /** @type {?} */
    ThfWidgetBaseComponent.prototype.containerHeight;
    /**
     * Descrição da segunda ação.
     * @type {?}
     */
    ThfWidgetBaseComponent.prototype.secondaryLabel;
    /**
     * Ação que será executada quando o usuário clicar sobre a área total do `thf-widget`.
     * @type {?}
     */
    ThfWidgetBaseComponent.prototype.click;
    /**
     * Função que será disparada com o valor do `t-disabled` quando esta propriedade for alterada.
     * @type {?}
     */
    ThfWidgetBaseComponent.prototype.onDisabled;
    /**
     * Função que será chamada na primeira ação.
     * @type {?}
     */
    ThfWidgetBaseComponent.prototype.primaryAction;
    /**
     * Função que será chamada na segunda ação.
     * @type {?}
     */
    ThfWidgetBaseComponent.prototype.secondaryAction;
    /**
     * Função chamada ao clicar no ícone de configuração
     * @type {?}
     */
    ThfWidgetBaseComponent.prototype.setting;
    /**
     * Função que será chamada ao clicar no título.
     * @type {?}
     */
    ThfWidgetBaseComponent.prototype.titleAction;
    /**
     * @abstract
     * @param {?} height
     * @return {?}
     */
    ThfWidgetBaseComponent.prototype.setHeight = function (height) { };
}
//# sourceMappingURL=data:application/json;base64,