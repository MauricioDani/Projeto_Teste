/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { ThfTagIcon } from './enums/thf-tag-icon.enum';
import { ThfTagOrientation } from './enums/thf-tag-orientation.enum';
import { ThfTagType } from './enums/thf-tag-type.enum';
/** @type {?} */
const thfTagOrientationDefault = ThfTagOrientation.Vertical;
/** @type {?} */
const thfTagTypeDefault = ThfTagType.Info;
/**
 * \@description
 *
 * Este componente apresenta um valor em um marcador colorido que pode conter ícone e *label*, as cores são definidas conforme o tipo
 * escolhido.
 * Seu uso é indicado para informações que necessitam de destaque em forma de marcação.
 */
export class ThfTagBaseComponent {
    constructor() {
        this._orientation = thfTagOrientationDefault;
        this._type = thfTagTypeDefault;
        this.thfTagOrientation = ThfTagOrientation;
        /**
         * \@optional
         *
         * \@description
         *
         * Ação que será executada quando o usuário clicar sobre o `thf-tag`
         * e que receberá como parâmetro um objeto contendo o valor e tipo de tag.
         */
        this.click = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Apresenta um ícone na tag conforme o tipo:
     * - `danger`: <span class="thf-icon thf-icon-close"></span>
     * - `info`: <span class="thf-icon thf-icon-info"></span>
     * - `success`: <span class="thf-icon thf-icon-ok"></span>
     * - `warning`: <span class="thf-icon thf-icon-warning"></span>
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set icon(value) {
        this._icon = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get icon() {
        return this._icon;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define o layout de exibição.
     *
     * \@default `vertical`
     * @param {?} value
     * @return {?}
     */
    set orientation(value) {
        this._orientation = ((/** @type {?} */ (Object))).values(ThfTagOrientation).includes(value) ? value : thfTagOrientationDefault;
    }
    /**
     * @return {?}
     */
    get orientation() {
        return this._orientation;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define o tipo e determina a cor do `thf-tag`.
     *
     * Valores válidos:
     *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
     *  - `warning`: cor amarela que representa aviso ou advertência.
     *  - `danger`: cor vermelha para erro ou aviso crítico.
     *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
     *
     * \@default `info`
     * @param {?} value
     * @return {?}
     */
    set type(value) {
        this._type = ((/** @type {?} */ (Object))).values(ThfTagType).includes(value) ? value : thfTagTypeDefault;
    }
    /**
     * @return {?}
     */
    get type() {
        return this._type;
    }
    /**
     * @return {?}
     */
    get iconFromType() {
        switch (this.type) {
            case ThfTagType.Danger: return ThfTagIcon.Danger;
            case ThfTagType.Info: return ThfTagIcon.Info;
            case ThfTagType.Success: return ThfTagIcon.Success;
            case ThfTagType.Warning: return ThfTagIcon.Warning;
        }
    }
}
ThfTagBaseComponent.propDecorators = {
    label: [{ type: Input, args: ['t-label',] }],
    icon: [{ type: Input, args: ['t-icon',] }],
    orientation: [{ type: Input, args: ['t-orientation',] }],
    type: [{ type: Input, args: ['t-type',] }],
    value: [{ type: Input, args: ['t-value',] }],
    click: [{ type: Output, args: ['t-click',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTagBaseComponent.prototype._icon;
    /**
     * @type {?}
     * @private
     */
    ThfTagBaseComponent.prototype._orientation;
    /**
     * @type {?}
     * @private
     */
    ThfTagBaseComponent.prototype._type;
    /** @type {?} */
    ThfTagBaseComponent.prototype.thfTagOrientation;
    /**
     * \@optional
     *
     * \@description
     *
     * Texto antes da tag.
     * @type {?}
     */
    ThfTagBaseComponent.prototype.label;
    /**
     * Texto da tag.
     * @type {?}
     */
    ThfTagBaseComponent.prototype.value;
    /**
     * \@optional
     *
     * \@description
     *
     * Ação que será executada quando o usuário clicar sobre o `thf-tag`
     * e que receberá como parâmetro um objeto contendo o valor e tipo de tag.
     * @type {?}
     */
    ThfTagBaseComponent.prototype.click;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXRhZy1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtdGFnL3RoZi10YWctYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVwRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFdkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDckUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDJCQUEyQixDQUFDOztNQUVqRCx3QkFBd0IsR0FBRyxpQkFBaUIsQ0FBQyxRQUFROztNQUNyRCxpQkFBaUIsR0FBRyxVQUFVLENBQUMsSUFBSTs7Ozs7Ozs7QUFTekMsTUFBTSxPQUFPLG1CQUFtQjtJQUFoQztRQUdVLGlCQUFZLEdBQXVCLHdCQUF3QixDQUFDO1FBQzVELFVBQUssR0FBZ0IsaUJBQWlCLENBQUM7UUFFL0Isc0JBQWlCLEdBQUcsaUJBQWlCLENBQUM7Ozs7Ozs7OztRQWdGbkMsVUFBSyxHQUF1QixJQUFJLFlBQVksRUFBYyxDQUFDO0lBY2hGLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7SUF0RUMsSUFBcUIsSUFBSSxDQUFDLEtBQWM7UUFDdEMsSUFBSSxDQUFDLEtBQUssR0FBRyxtQkFBSyxLQUFLLEVBQUEsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEUsQ0FBQzs7OztJQUNELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDOzs7Ozs7Ozs7Ozs7SUFXRCxJQUE0QixXQUFXLENBQUMsS0FBd0I7UUFDOUQsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLG1CQUFLLE1BQU0sRUFBQSxDQUFDLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDO0lBQ2pILENBQUM7Ozs7SUFDRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBaUJELElBQXFCLElBQUksQ0FBQyxLQUFpQjtRQUN6QyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsbUJBQUssTUFBTSxFQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO0lBQzVGLENBQUM7Ozs7SUFDRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQzs7OztJQWVELElBQUksWUFBWTtRQUNkLFFBQVEsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNqQixLQUFLLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUM7WUFFakQsS0FBSyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDO1lBRTdDLEtBQUssVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FBQztZQUVuRCxLQUFLLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUM7U0FDcEQ7SUFDSCxDQUFDOzs7b0JBbkZBLEtBQUssU0FBQyxTQUFTO21CQWVmLEtBQUssU0FBQyxRQUFROzBCQWdCZCxLQUFLLFNBQUMsZUFBZTttQkFzQnJCLEtBQUssU0FBQyxRQUFRO29CQVFkLEtBQUssU0FBQyxTQUFTO29CQVVmLE1BQU0sU0FBQyxTQUFTOzs7Ozs7O0lBcEZqQixvQ0FBd0I7Ozs7O0lBQ3hCLDJDQUFvRTs7Ozs7SUFDcEUsb0NBQStDOztJQUUvQyxnREFBc0Q7Ozs7Ozs7OztJQVN0RCxvQ0FBaUM7Ozs7O0lBNkRqQyxvQ0FBZ0M7Ozs7Ozs7Ozs7SUFVaEMsb0NBQThFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0Jvb2xlYW4gfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgVGhmVGFnSWNvbiB9IGZyb20gJy4vZW51bXMvdGhmLXRhZy1pY29uLmVudW0nO1xuaW1wb3J0IHsgVGhmVGFnSXRlbSB9IGZyb20gJy4vaW50ZXJmYWNlcy90aGYtdGFnLWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IFRoZlRhZ09yaWVudGF0aW9uIH0gZnJvbSAnLi9lbnVtcy90aGYtdGFnLW9yaWVudGF0aW9uLmVudW0nO1xuaW1wb3J0IHsgVGhmVGFnVHlwZSB9IGZyb20gJy4vZW51bXMvdGhmLXRhZy10eXBlLmVudW0nO1xuXG5jb25zdCB0aGZUYWdPcmllbnRhdGlvbkRlZmF1bHQgPSBUaGZUYWdPcmllbnRhdGlvbi5WZXJ0aWNhbDtcbmNvbnN0IHRoZlRhZ1R5cGVEZWZhdWx0ID0gVGhmVGFnVHlwZS5JbmZvO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBhcHJlc2VudGEgdW0gdmFsb3IgZW0gdW0gbWFyY2Fkb3IgY29sb3JpZG8gcXVlIHBvZGUgY29udGVyIMOtY29uZSBlICpsYWJlbCosIGFzIGNvcmVzIHPDo28gZGVmaW5pZGFzIGNvbmZvcm1lIG8gdGlwb1xuICogZXNjb2xoaWRvLlxuICogU2V1IHVzbyDDqSBpbmRpY2FkbyBwYXJhIGluZm9ybWHDp8O1ZXMgcXVlIG5lY2Vzc2l0YW0gZGUgZGVzdGFxdWUgZW0gZm9ybWEgZGUgbWFyY2HDp8Ojby5cbiAqL1xuZXhwb3J0IGNsYXNzIFRoZlRhZ0Jhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2ljb24/OiBib29sZWFuO1xuICBwcml2YXRlIF9vcmllbnRhdGlvbj86IFRoZlRhZ09yaWVudGF0aW9uID0gdGhmVGFnT3JpZW50YXRpb25EZWZhdWx0O1xuICBwcml2YXRlIF90eXBlPzogVGhmVGFnVHlwZSA9IHRoZlRhZ1R5cGVEZWZhdWx0O1xuXG4gIHB1YmxpYyByZWFkb25seSB0aGZUYWdPcmllbnRhdGlvbiA9IFRoZlRhZ09yaWVudGF0aW9uO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFRleHRvIGFudGVzIGRhIHRhZy5cbiAgICovXG4gIEBJbnB1dCgndC1sYWJlbCcpIGxhYmVsPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEFwcmVzZW50YSB1bSDDrWNvbmUgbmEgdGFnIGNvbmZvcm1lIG8gdGlwbzpcbiAgICogLSBgZGFuZ2VyYDogPHNwYW4gY2xhc3M9XCJ0aGYtaWNvbiB0aGYtaWNvbi1jbG9zZVwiPjwvc3Bhbj5cbiAgICogLSBgaW5mb2A6IDxzcGFuIGNsYXNzPVwidGhmLWljb24gdGhmLWljb24taW5mb1wiPjwvc3Bhbj5cbiAgICogLSBgc3VjY2Vzc2A6IDxzcGFuIGNsYXNzPVwidGhmLWljb24gdGhmLWljb24tb2tcIj48L3NwYW4+XG4gICAqIC0gYHdhcm5pbmdgOiA8c3BhbiBjbGFzcz1cInRoZi1pY29uIHRoZi1pY29uLXdhcm5pbmdcIj48L3NwYW4+XG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgndC1pY29uJykgc2V0IGljb24odmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9pY29uID0gPGFueT52YWx1ZSA9PT0gJycgPyB0cnVlIDogY29udmVydFRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cbiAgZ2V0IGljb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2ljb247XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgbyBsYXlvdXQgZGUgZXhpYmnDp8Ojby5cbiAgICpcbiAgICogQGRlZmF1bHQgYHZlcnRpY2FsYFxuICAgKi9cbiAgQElucHV0KCd0LW9yaWVudGF0aW9uJykgc2V0IG9yaWVudGF0aW9uKHZhbHVlOiBUaGZUYWdPcmllbnRhdGlvbikge1xuICAgIHRoaXMuX29yaWVudGF0aW9uID0gKDxhbnk+T2JqZWN0KS52YWx1ZXMoVGhmVGFnT3JpZW50YXRpb24pLmluY2x1ZGVzKHZhbHVlKSA/IHZhbHVlIDogdGhmVGFnT3JpZW50YXRpb25EZWZhdWx0O1xuICB9XG4gIGdldCBvcmllbnRhdGlvbigpOiBUaGZUYWdPcmllbnRhdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuX29yaWVudGF0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIG8gdGlwbyBlIGRldGVybWluYSBhIGNvciBkbyBgdGhmLXRhZ2AuXG4gICAqXG4gICAqIFZhbG9yZXMgdsOhbGlkb3M6XG4gICAqICAtIGBzdWNjZXNzYDogY29yIHZlcmRlIHV0aWxpemFkYSBwYXJhIHNpbWJvbGl6YXIgc3VjZXNzbyBvdSDDqnhpdG8uXG4gICAqICAtIGB3YXJuaW5nYDogY29yIGFtYXJlbGEgcXVlIHJlcHJlc2VudGEgYXZpc28gb3UgYWR2ZXJ0w6puY2lhLlxuICAgKiAgLSBgZGFuZ2VyYDogY29yIHZlcm1lbGhhIHBhcmEgZXJybyBvdSBhdmlzbyBjcsOtdGljby5cbiAgICogIC0gYGluZm9gOiBjb3IgY2luemEgZXNjdXJvIHF1ZSBjYXJhY3Rlcml6YSBjb250ZcO6ZG8gaW5mb3JtYXRpdm8uXG4gICAqXG4gICAqIEBkZWZhdWx0IGBpbmZvYFxuICAgKi9cbiAgQElucHV0KCd0LXR5cGUnKSBzZXQgdHlwZSh2YWx1ZTogVGhmVGFnVHlwZSkge1xuICAgIHRoaXMuX3R5cGUgPSAoPGFueT5PYmplY3QpLnZhbHVlcyhUaGZUYWdUeXBlKS5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IHRoZlRhZ1R5cGVEZWZhdWx0O1xuICB9XG4gIGdldCB0eXBlKCk6IFRoZlRhZ1R5cGUge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgLyoqIFRleHRvIGRhIHRhZy4gKi9cbiAgQElucHV0KCd0LXZhbHVlJykgdmFsdWU6IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBBw6fDo28gcXVlIHNlcsOhIGV4ZWN1dGFkYSBxdWFuZG8gbyB1c3XDoXJpbyBjbGljYXIgc29icmUgbyBgdGhmLXRhZ2BcbiAgICogZSBxdWUgcmVjZWJlcsOhIGNvbW8gcGFyw6JtZXRybyB1bSBvYmpldG8gY29udGVuZG8gbyB2YWxvciBlIHRpcG8gZGUgdGFnLlxuICAgKi9cbiAgQE91dHB1dCgndC1jbGljaycpIGNsaWNrPzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPFRoZlRhZ0l0ZW0+KCk7XG5cbiAgZ2V0IGljb25Gcm9tVHlwZSgpIHtcbiAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgY2FzZSBUaGZUYWdUeXBlLkRhbmdlcjogcmV0dXJuIFRoZlRhZ0ljb24uRGFuZ2VyO1xuXG4gICAgICBjYXNlIFRoZlRhZ1R5cGUuSW5mbzogcmV0dXJuIFRoZlRhZ0ljb24uSW5mbztcblxuICAgICAgY2FzZSBUaGZUYWdUeXBlLlN1Y2Nlc3M6IHJldHVybiBUaGZUYWdJY29uLlN1Y2Nlc3M7XG5cbiAgICAgIGNhc2UgVGhmVGFnVHlwZS5XYXJuaW5nOiByZXR1cm4gVGhmVGFnSWNvbi5XYXJuaW5nO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=