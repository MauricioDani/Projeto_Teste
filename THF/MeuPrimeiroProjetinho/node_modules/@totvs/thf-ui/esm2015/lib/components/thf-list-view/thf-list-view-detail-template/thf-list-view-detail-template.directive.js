/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef, Input } from '@angular/core';
/**
 * \@usedBy ThfListViewComponent
 *
 * \@description
 *
 * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
 * botão `Exibir detalhes` abaixo do conteúdo principal do item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <thf-list-view
 *   t-property-title="name"
 *   [t-items]="items">
 *
 *   <ng-template t-list-view-detail-template let-item let-code="index">
 *     <div class="thf-row">
 *       <thf-info class="thf-md-6" t-label="Code" [t-value]="code"></thf-info>
 *       <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
 *     </div>
 *   </ng-template>
 *
 * </thf-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <thf-list-view
 *    t-property-title="name"
 *    [t-items]="items">
 *    <div *t-list-view-detail-template="let item, let i=index" class="thf-row">
 *      <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
 *    </div>
 * </thf-list-view>
 * ...
 *
 * ```
 */
export class ThfListViewDetailTemplateDirective {
    // Necessário manter templateRef para o funcionamento do row template.
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
ThfListViewDetailTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[t-list-view-detail-template]'
            },] }
];
/** @nocollapse */
ThfListViewDetailTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
ThfListViewDetailTemplateDirective.propDecorators = {
    showDetail: [{ type: Input, args: ['t-show-detail',] }]
};
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Função que deve retornar um valor do tipo `boolean`, que será utilizado como a validação para que o detalhe de item
     * da lista inicie aberto ou fechado.
     *
     * @type {?}
     */
    ThfListViewDetailTemplateDirective.prototype.showDetail;
    /** @type {?} */
    ThfListViewDetailTemplateDirective.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1saXN0LXZpZXcvdGhmLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUvdGhmLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrRDlELE1BQU0sT0FBTyxrQ0FBa0M7Ozs7O0lBYzdDLFlBQW1CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUFJLENBQUM7OztZQWpCdEQsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSwrQkFBK0I7YUFDMUM7Ozs7WUFqRG1CLFdBQVc7Ozt5QkE2RDVCLEtBQUssU0FBQyxlQUFlOzs7Ozs7Ozs7Ozs7O0lBQXRCLHdEQUFzRDs7SUFHMUMseURBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBUZW1wbGF0ZVJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAdXNlZEJ5IFRoZkxpc3RWaWV3Q29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0YSBkaXJldGl2YSBwZXJtaXRlIHF1ZSBzZWphbSBhcHJlc2VudGFkYXMgaW5mb3JtYcOnw7VlcyBhZGljaW9uYWlzIGRlIGNhZGEgaXRlbSwgY29uc3RydWluZG8gdW1cbiAqIGJvdMOjbyBgRXhpYmlyIGRldGFsaGVzYCBhYmFpeG8gZG8gY29udGXDumRvIHByaW5jaXBhbCBkbyBpdGVtLlxuICpcbiAqIERldmUtc2UgdXRpbGl6YXIgY29tbyBwYXLDom1ldHJvIGEgcmVmZXLDqm5jaWEgZG8gaXRlbSBlL291IMOtbmRpY2UsIHNlbmRvIHBvciBwYWRyw6NvIG8gaXRlbS5cbiAqICAtIEl0ZW06IGBpdGVtYCBkZXRlcm1pbmEgbyBpdGVtIGRhIGxpbmhhIGNvcnJlbnRlLlxuICogIC0gw41uZGljZTogYGluZGV4YCBkZXRlcm1pbmEgbyDDrW5kaWNlIGRhIGxpbmhhIGNvcnJlbnRlLlxuICpcbiAqIEVzdGEgZGlyZXRpdmEgcG9kZSBzZXIgdXNhZGEgZGUgZHVhcyBmb3JtYXM6IGV4cGzDrWNpdGEgb3UgKnN5bnRheCBzdWdhciouIFZlamEgYSBzZWd1aXIgYW1ib3MsIHJlc3BlY3RpdmFtZW50ZTpcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogPHRoZi1saXN0LXZpZXdcbiAqICAgdC1wcm9wZXJ0eS10aXRsZT1cIm5hbWVcIlxuICogICBbdC1pdGVtc109XCJpdGVtc1wiPlxuICpcbiAqICAgPG5nLXRlbXBsYXRlIHQtbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZSBsZXQtaXRlbSBsZXQtY29kZT1cImluZGV4XCI+XG4gKiAgICAgPGRpdiBjbGFzcz1cInRoZi1yb3dcIj5cbiAqICAgICAgIDx0aGYtaW5mbyBjbGFzcz1cInRoZi1tZC02XCIgdC1sYWJlbD1cIkNvZGVcIiBbdC12YWx1ZV09XCJjb2RlXCI+PC90aGYtaW5mbz5cbiAqICAgICAgIDx0aGYtaW5mbyBjbGFzcz1cInRoZi1tZC0xMlwiIHQtbGFiZWw9XCJFbWFpbFwiIFt0LXZhbHVlXT1cIml0ZW0uZW1haWxcIj48L3RoZi1pbmZvPlxuICogICAgIDwvZGl2PlxuICogICA8L25nLXRlbXBsYXRlPlxuICpcbiAqIDwvdGhmLWxpc3Qtdmlldz5cbiAqXG4gKiAuLi5cbiAqIGBgYFxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8dGhmLWxpc3Qtdmlld1xuICogICAgdC1wcm9wZXJ0eS10aXRsZT1cIm5hbWVcIlxuICogICAgW3QtaXRlbXNdPVwiaXRlbXNcIj5cbiAqICAgIDxkaXYgKnQtbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZT1cImxldCBpdGVtLCBsZXQgaT1pbmRleFwiIGNsYXNzPVwidGhmLXJvd1wiPlxuICogICAgICA8dGhmLWluZm8gY2xhc3M9XCJ0aGYtbWQtMTJcIiB0LWxhYmVsPVwiRW1haWxcIiBbdC12YWx1ZV09XCJpdGVtLmVtYWlsXCI+PC90aGYtaW5mbz5cbiAqICAgIDwvZGl2PlxuICogPC90aGYtbGlzdC12aWV3PlxuICogLi4uXG4gKlxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1t0LWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBUaGZMaXN0Vmlld0RldGFpbFRlbXBsYXRlRGlyZWN0aXZlIHtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBGdW7Dp8OjbyBxdWUgZGV2ZSByZXRvcm5hciB1bSB2YWxvciBkbyB0aXBvIGBib29sZWFuYCwgcXVlIHNlcsOhIHV0aWxpemFkbyBjb21vIGEgdmFsaWRhw6fDo28gcGFyYSBxdWUgbyBkZXRhbGhlIGRlIGl0ZW1cbiAgICogZGEgbGlzdGEgaW5pY2llIGFiZXJ0byBvdSBmZWNoYWRvLlxuICAgKlxuICAgKi9cbiAgQElucHV0KCd0LXNob3ctZGV0YWlsJykgc2hvd0RldGFpbDogKGl0ZW0pID0+IGJvb2xlYW47XG5cbiAgLy8gTmVjZXNzw6FyaW8gbWFudGVyIHRlbXBsYXRlUmVmIHBhcmEgbyBmdW5jaW9uYW1lbnRvIGRvIHJvdyB0ZW1wbGF0ZS5cbiAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cblxufVxuIl19