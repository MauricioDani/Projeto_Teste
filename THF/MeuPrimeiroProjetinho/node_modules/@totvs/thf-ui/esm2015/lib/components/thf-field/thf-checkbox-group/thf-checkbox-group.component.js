/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, forwardRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ThfCheckboxGroupBaseComponent } from './thf-checkbox-group-base.component';
/**
 * \@docsExtends ThfCheckboxGroupBaseComponent
 *
 * \@example
 *
 * <example name="thf-checkbox-group-basic" title="Totvs Checkbox Group Basic">
 *  <file name="sample-thf-checkbox-group-basic/sample-thf-checkbox-group-basic.component.html"> </file>
 *  <file name="sample-thf-checkbox-group-basic/sample-thf-checkbox-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-checkbox-group-labs" title="Totvs Checkbox Group Labs">
 *  <file name="sample-thf-checkbox-group-labs/sample-thf-checkbox-group-labs.component.html"> </file>
 *  <file name="sample-thf-checkbox-group-labs/sample-thf-checkbox-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-checkbox-group-password-policy" title="Totvs Checkbox Group â€“ Security policy">
 *  <file name="sample-thf-checkbox-group-password-policy/sample-thf-checkbox-group-password-policy.component.html"> </file>
 *  <file name="sample-thf-checkbox-group-password-policy/sample-thf-checkbox-group-password-policy.component.ts"> </file>
 * </example>
 */
export class ThfCheckboxGroupComponent extends ThfCheckboxGroupBaseComponent {
    /**
     * @param {?} changeDetector
     */
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        this.changeDetector.detectChanges();
    }
    /**
     * @param {?} event
     * @param {?} option
     * @return {?}
     */
    onKeyDown(event, option) {
        /** @type {?} */
        const spaceBar = 32;
        if (event.which === spaceBar || event.keyCode === spaceBar) {
            this.checkOption(option);
            event.preventDefault();
        }
    }
}
ThfCheckboxGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-checkbox-group',
                template: "<thf-field-container\n  [t-help]=\"help\"\n  [t-label]=\"label\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content thf-checkbox-group-content\">\n    <div class=\"thf-row thf-pt-1 thf-pb-1\">\n\n      <div *ngFor=\"let option of options; let i = index\"\n        class=\"thf-checkbox-group-item thf-md-{{ mdColumns }} thf-lg-{{ columns }}\"\n        [class.thf-checkbox-group-item-disabled]=\"option.disabled || disabled\">\n\n        <input\n          class=\"thf-input thf-checkbox-group-input\"\n          type=\"checkbox\"\n          [class.thf-checkbox-group-input-checked]=\"checkedOptions[option.value]\"\n          [class.thf-checkbox-group-input-indeterminate]=\"checkedOptions[option.value] === null\"\n          [checked]=\"option.value\"\n          [disabled]=\"option.disabled || disabled\"\n          [id]=\"'checkbox_' + i\"\n          [required]=\"required\"\n          [value]=\"option.value\">\n\n        <label #checkboxLabel\n          class=\"thf-checkbox-group-label\"\n          [class.thf-clickable]=\"checkboxLabel.tabIndex === 0\"\n          [for]=\"'checkbox_' + i\"\n          [tabindex]=\"option.disabled || disabled ? -1 : 0\"\n          (click)=\"checkOption(option)\"\n          (keydown)=\"onKeyDown($event, option)\">\n            {{option.label}}\n        </label>\n      </div>\n\n    </div>\n  </div>\n\n  <thf-field-container-bottom></thf-field-container-bottom>\n\n</thf-field-container>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfCheckboxGroupComponent)),
                        multi: true,
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfCheckboxGroupComponent)),
                        multi: true,
                    }
                ]
            }] }
];
/** @nocollapse */
ThfCheckboxGroupComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfCheckboxGroupComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWNoZWNrYm94LWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtZmllbGQvdGhmLWNoZWNrYm94LWdyb3VwL3RoZi1jaGVja2JveC1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBb0IsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbEUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0scUNBQXFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVDcEYsTUFBTSxPQUFPLHlCQUEwQixTQUFRLDZCQUE2Qjs7OztJQUUxRSxZQUFvQixjQUFpQztRQUNuRCxLQUFLLEVBQUUsQ0FBQztRQURVLG1CQUFjLEdBQWQsY0FBYyxDQUFtQjtJQUVyRCxDQUFDOzs7O0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7Ozs7O0lBRUQsU0FBUyxDQUFDLEtBQW9CLEVBQUUsTUFBOEI7O2NBQ3RELFFBQVEsR0FBRyxFQUFFO1FBRW5CLElBQUksS0FBSyxDQUFDLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDMUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUV6QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDeEI7SUFDSCxDQUFDOzs7WUFsQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLHU4Q0FBa0Q7Z0JBQ2xELFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixFQUFDO3dCQUN4RCxLQUFLLEVBQUUsSUFBSTtxQkFDWjtvQkFDRDt3QkFDRSxPQUFPLEVBQUUsYUFBYTt3QkFDdEIsV0FBVyxFQUFFLFVBQVU7Ozt3QkFBQyxHQUFHLEVBQUUsQ0FBQyx5QkFBeUIsRUFBQzt3QkFDeEQsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQ0Y7YUFDRjs7OztZQXpDMEIsaUJBQWlCOzs7Ozs7O0lBNEM5QixtREFBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdDaGVja2VkLCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBmb3J3YXJkUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR19WQUxJREFUT1JTLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgVGhmQ2hlY2tib3hHcm91cEJhc2VDb21wb25lbnQgfSBmcm9tICcuL3RoZi1jaGVja2JveC1ncm91cC1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUaGZDaGVja2JveEdyb3VwT3B0aW9uIH0gZnJvbSAnLi90aGYtY2hlY2tib3gtZ3JvdXAtb3B0aW9uLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRvY3NFeHRlbmRzIFRoZkNoZWNrYm94R3JvdXBCYXNlQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwidGhmLWNoZWNrYm94LWdyb3VwLWJhc2ljXCIgdGl0bGU9XCJUb3R2cyBDaGVja2JveCBHcm91cCBCYXNpY1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLWNoZWNrYm94LWdyb3VwLWJhc2ljL3NhbXBsZS10aGYtY2hlY2tib3gtZ3JvdXAtYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLWNoZWNrYm94LWdyb3VwLWJhc2ljL3NhbXBsZS10aGYtY2hlY2tib3gtZ3JvdXAtYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwidGhmLWNoZWNrYm94LWdyb3VwLWxhYnNcIiB0aXRsZT1cIlRvdHZzIENoZWNrYm94IEdyb3VwIExhYnNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1jaGVja2JveC1ncm91cC1sYWJzL3NhbXBsZS10aGYtY2hlY2tib3gtZ3JvdXAtbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtY2hlY2tib3gtZ3JvdXAtbGFicy9zYW1wbGUtdGhmLWNoZWNrYm94LWdyb3VwLWxhYnMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwidGhmLWNoZWNrYm94LWdyb3VwLXBhc3N3b3JkLXBvbGljeVwiIHRpdGxlPVwiVG90dnMgQ2hlY2tib3ggR3JvdXAg4oCTIFNlY3VyaXR5IHBvbGljeVwiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLWNoZWNrYm94LWdyb3VwLXBhc3N3b3JkLXBvbGljeS9zYW1wbGUtdGhmLWNoZWNrYm94LWdyb3VwLXBhc3N3b3JkLXBvbGljeS5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtY2hlY2tib3gtZ3JvdXAtcGFzc3dvcmQtcG9saWN5L3NhbXBsZS10aGYtY2hlY2tib3gtZ3JvdXAtcGFzc3dvcmQtcG9saWN5LmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoZi1jaGVja2JveC1ncm91cCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90aGYtY2hlY2tib3gtZ3JvdXAuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRoZkNoZWNrYm94R3JvdXBDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGhmQ2hlY2tib3hHcm91cENvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgVGhmQ2hlY2tib3hHcm91cENvbXBvbmVudCBleHRlbmRzIFRoZkNoZWNrYm94R3JvdXBCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQge1xuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgb25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50LCBvcHRpb246IFRoZkNoZWNrYm94R3JvdXBPcHRpb24pIHtcbiAgICBjb25zdCBzcGFjZUJhciA9IDMyO1xuXG4gICAgaWYgKGV2ZW50LndoaWNoID09PSBzcGFjZUJhciB8fCBldmVudC5rZXlDb2RlID09PSBzcGFjZUJhcikge1xuICAgICAgdGhpcy5jaGVja09wdGlvbihvcHRpb24pO1xuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=