/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ThfInputGeneric } from '../thf-input-generic/thf-input-generic';
/**
 * @abstract
 */
export class ThfNumberBaseComponent extends ThfInputGeneric {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        super(elementRef);
        this.type = 'number';
    }
    /**
     * @param {?} e
     * @return {?}
     */
    eventOnInput(e) {
        if (!this.mask) {
            /** @type {?} */
            let value = e.target.value;
            /** @type {?} */
            const valueMaxlength = this.validMaxLength(this.maxlength, value);
            if (value !== valueMaxlength) {
                value = valueMaxlength;
                this.inputEl.nativeElement.value = value;
            }
            this.callOnChange(this.formatNumber(value));
        }
    }
    /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    validMaxLength(maxlength, value) {
        if (maxlength && value.length > maxlength) {
            /** @type {?} */
            const substringValue = value.toString().substring(0, maxlength);
            if (substringValue && this.isEndWithDot(substringValue)) {
                return substringValue.toString().substring(0, maxlength - 1);
            }
            return substringValue;
        }
        return value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValueModel(value) {
        if (this.inputEl) {
            if (value || value === 0) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.onChangePropagate(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else { // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        this.changeModel.emit(value);
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    isEndWithDot(value) {
        return value && value.lastIndexOf('.') === value.length - 1;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    formatNumber(value) {
        return value ? Number(value) : null;
    }
}
if (false) {
    /** @type {?} */
    ThfNumberBaseComponent.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLW51bWJlci1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtZmllbGQvdGhmLW51bWJlci90aGYtbnVtYmVyLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7Ozs7QUFFekUsTUFBTSxPQUFnQixzQkFBdUIsU0FBUSxlQUFlOzs7O0lBSWxFLFlBQVksVUFBc0I7UUFDaEMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBSHBCLFNBQUksR0FBRyxRQUFRLENBQUM7SUFJaEIsQ0FBQzs7Ozs7SUFFRCxZQUFZLENBQUMsQ0FBTTtRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTs7Z0JBQ1YsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSzs7a0JBQ3BCLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO1lBRWpFLElBQUksS0FBSyxLQUFLLGNBQWMsRUFBRTtnQkFDNUIsS0FBSyxHQUFHLGNBQWMsQ0FBQztnQkFFdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzthQUMxQztZQUVELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQzdDO0lBQ0gsQ0FBQzs7Ozs7O0lBRUQsY0FBYyxDQUFDLFNBQWlCLEVBQUUsS0FBYTtRQUU3QyxJQUFJLFNBQVMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLFNBQVMsRUFBRTs7a0JBQ25DLGNBQWMsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUM7WUFFL0QsSUFBSSxjQUFjLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsRUFBRTtnQkFDdkQsT0FBTyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDOUQ7WUFFRCxPQUFPLGNBQWMsQ0FBQztTQUN2QjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFRCxlQUFlLENBQUMsS0FBSztRQUNuQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxLQUFLLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtnQkFDeEIsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO29CQUNiLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUVqRix1RkFBdUY7b0JBQ3ZGLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUU7d0JBQzVCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO3FCQUNuRDtpQkFDRjtxQkFBTTtvQkFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2lCQUMxQzthQUNGO2lCQUFNLEVBQUUsb0RBQW9EO2dCQUMzRCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO2FBQ3ZDO1NBQ0Y7UUFFRCxxRUFBcUU7UUFFckUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFL0IsQ0FBQzs7Ozs7O0lBRU8sWUFBWSxDQUFDLEtBQWE7UUFDaEMsT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7Ozs7SUFFTyxZQUFZLENBQUMsS0FBSztRQUN4QixPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDdEMsQ0FBQztDQUVGOzs7SUFwRUMsc0NBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgVGhmSW5wdXRHZW5lcmljIH0gZnJvbSAnLi4vdGhmLWlucHV0LWdlbmVyaWMvdGhmLWlucHV0LWdlbmVyaWMnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGhmTnVtYmVyQmFzZUNvbXBvbmVudCBleHRlbmRzIFRoZklucHV0R2VuZXJpYyB7XG5cbiAgdHlwZSA9ICdudW1iZXInO1xuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcbiAgICBzdXBlcihlbGVtZW50UmVmKTtcbiAgfVxuXG4gIGV2ZW50T25JbnB1dChlOiBhbnkpIHtcbiAgICBpZiAoIXRoaXMubWFzaykge1xuICAgICAgbGV0IHZhbHVlID0gZS50YXJnZXQudmFsdWU7XG4gICAgICBjb25zdCB2YWx1ZU1heGxlbmd0aCA9IHRoaXMudmFsaWRNYXhMZW5ndGgodGhpcy5tYXhsZW5ndGgsIHZhbHVlKTtcblxuICAgICAgaWYgKHZhbHVlICE9PSB2YWx1ZU1heGxlbmd0aCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlTWF4bGVuZ3RoO1xuXG4gICAgICAgIHRoaXMuaW5wdXRFbC5uYXRpdmVFbGVtZW50LnZhbHVlID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FsbE9uQ2hhbmdlKHRoaXMuZm9ybWF0TnVtYmVyKHZhbHVlKSk7XG4gICAgfVxuICB9XG5cbiAgdmFsaWRNYXhMZW5ndGgobWF4bGVuZ3RoOiBudW1iZXIsIHZhbHVlOiBzdHJpbmcpIHtcblxuICAgIGlmIChtYXhsZW5ndGggJiYgdmFsdWUubGVuZ3RoID4gbWF4bGVuZ3RoKSB7XG4gICAgICBjb25zdCBzdWJzdHJpbmdWYWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIG1heGxlbmd0aCk7XG5cbiAgICAgIGlmIChzdWJzdHJpbmdWYWx1ZSAmJiB0aGlzLmlzRW5kV2l0aERvdChzdWJzdHJpbmdWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN1YnN0cmluZ1ZhbHVlLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIG1heGxlbmd0aCAtIDEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3Vic3RyaW5nVmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgd3JpdGVWYWx1ZU1vZGVsKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuaW5wdXRFbCkge1xuICAgICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICAgIGlmICh0aGlzLm1hc2spIHtcbiAgICAgICAgICB0aGlzLmlucHV0RWwubmF0aXZlRWxlbWVudC52YWx1ZSA9IHRoaXMub2JqTWFzay5jb250cm9sRm9ybWF0dGluZyhTdHJpbmcodmFsdWUpKTtcblxuICAgICAgICAgIC8vIFNlIG8gbW9kZWwgZm9yIGRlZmluaWRvIGNvbW8gZm9ybWF0YWRvLCBlbnTDo28gcHJlY2lzYSBhdHVhbGl6w6EtbG8gbm8gcHJpbWVpcm8gYWNlc3NvXG4gICAgICAgICAgaWYgKHRoaXMub2JqTWFzay5mb3JtYXRNb2RlbCkge1xuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZVByb3BhZ2F0ZSh0aGlzLm9iak1hc2sudmFsdWVUb01vZGVsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pbnB1dEVsLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHsgLy8gU2UgZm9yIG8gdmFsb3IgZm9yIHVuZGVmaW5lZCwgZGV2ZSBsaW1wYXIgbyBjYW1wb1xuICAgICAgICB0aGlzLmlucHV0RWwubmF0aXZlRWxlbWVudC52YWx1ZSA9ICcnO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEVtaXRlIGV2ZW50byBxdWFuZG8gbyBtb2RlbCDDqSBhdHVhbGl6YWRvLCBpbmNsdXNpdmUgYSBwcmltZWlyYSB2ZXpcblxuICAgIHRoaXMuY2hhbmdlTW9kZWwuZW1pdCh2YWx1ZSk7XG5cbiAgfVxuXG4gIHByaXZhdGUgaXNFbmRXaXRoRG90KHZhbHVlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdmFsdWUubGFzdEluZGV4T2YoJy4nKSA9PT0gdmFsdWUubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIHByaXZhdGUgZm9ybWF0TnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID8gTnVtYmVyKHZhbHVlKSA6IG51bGw7XG4gIH1cblxufVxuIl19