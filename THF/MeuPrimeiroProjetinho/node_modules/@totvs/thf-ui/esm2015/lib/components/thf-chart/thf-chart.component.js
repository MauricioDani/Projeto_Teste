/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ComponentFactoryResolver, ElementRef, HostListener, IterableDiffers, ViewChild, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs';
import { ThfChartBaseComponent } from './thf-chart-base.component';
import { ThfChartColors } from './thf-chart-colors.constant';
import { ThfChartPieComponent } from './thf-chart-types/thf-chart-pie/thf-chart-pie.component';
import { ThfChartType } from './enums/thf-chart-type.enum';
/**
 * \@docsExtends ThfChartBaseComponent
 *
 * \@example
 *
 * <example name="thf-chart-basic" title="Totvs Chart Basic">
 *  <file name="sample-thf-chart-basic/sample-thf-chart-basic.component.html"> </file>
 *  <file name="sample-thf-chart-basic/sample-thf-chart-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-chart-labs" title="Totvs Chart Labs">
 *  <file name="sample-thf-chart-labs/sample-thf-chart-labs.component.html"> </file>
 *  <file name="sample-thf-chart-labs/sample-thf-chart-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-chart-coffee-ranking" title="Totvs Chart - Coffee Ranking">
 *  <file name="sample-thf-chart-coffee-ranking/sample-thf-chart-coffee-ranking.component.html"> </file>
 *  <file name="sample-thf-chart-coffee-ranking/sample-thf-chart-coffee-ranking.component.ts"> </file>
 * </example>
 */
export class ThfChartComponent extends ThfChartBaseComponent {
    /**
     * @param {?} changeDetector
     * @param {?} componentFactoryResolver
     * @param {?} differs
     */
    constructor(changeDetector, componentFactoryResolver, differs) {
        super();
        this.changeDetector = changeDetector;
        this.componentFactoryResolver = componentFactoryResolver;
        this.differs = differs;
        this.calculatedElement = false;
        this.initialized = false;
        this.windowResizeListener = new Subject();
        this.mappings = {
            [ThfChartType.Pie]: ThfChartPieComponent,
        };
        this.onResize = (/**
         * @return {?}
         */
        () => this.windowResizeListener.next());
        this.differ = this.differs.find([]).create(null);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initialized = true;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        /** @type {?} */
        const charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
        // Permite que o chart seja calculado na primeira vez que o componente torna-se visÃ­vel,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (charWrapperWidth && !this.calculatedElement && this.initialized) {
            this.calculatedElement = true;
            this.getSeriesColor();
            this.dynamicComponentSetting();
        }
        this.checkingForSerieChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeWindowResizeListener();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getSeriesColor();
    }
    /**
     * @return {?}
     */
    rebuildComponent() {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.dynamicComponentSetting();
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkingForSerieChanges() {
        if (this.componentRef && this.differ) {
            /** @type {?} */
            const changeSeries = this.differ.diff(this.series);
            if (changeSeries) {
                this.getSeriesColor();
                this.rebuildComponent();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    createComponent() {
        /** @type {?} */
        const componentType = this.getComponentType(this.type);
        /** @type {?} */
        const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        this.componentRef = this.chartContainer.createComponent(factory);
        /** @type {?} */
        const instance = (/** @type {?} */ (this.componentRef.instance));
        this.setChartProperties(instance);
        return instance;
    }
    /**
     * @private
     * @return {?}
     */
    dynamicComponentSetting() {
        /** @type {?} */
        const instance = this.createComponent();
        this.setResizeListenerSubscribe(instance);
        this.changeDetector.detectChanges();
        this.setClickSubscribe(instance);
        this.setHoverSubscribe(instance);
    }
    /**
     * @private
     * @param {?} typeName
     * @return {?}
     */
    getComponentType(typeName) {
        return this.mappings[typeName];
    }
    /**
     * @private
     * @return {?}
     */
    getSeriesColor() {
        /** @type {?} */
        const colorsLength = ThfChartColors.length - 1;
        if (!this.series) {
            return this.colors = ThfChartColors[colorsLength];
        }
        /** @type {?} */
        const seriesLength = this.series.length - 1;
        if (seriesLength > colorsLength) {
            /** @type {?} */
            let colors = ThfChartColors[colorsLength];
            // recupera o resultado da divisao entre tamanho das series e o numero de cores disponiveis
            /** @type {?} */
            const quantityDuplicates = seriesLength / colorsLength;
            for (let i = 1; i <= quantityDuplicates; i++) {
                colors = colors.concat(ThfChartColors[colorsLength]);
            }
            return this.colors = colors;
        }
        return this.colors = ThfChartColors[seriesLength];
    }
    /**
     * @private
     * @return {?}
     */
    removeWindowResizeListener() {
        if (this.onResize) {
            this.onResize = (/**
             * @return {?}
             */
            () => { });
        }
    }
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    setChartProperties(instance) {
        instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;
        instance.chartLegend = this.chartLegend.nativeElement.offsetHeight;
        instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;
        instance.colors = this.colors;
        instance.height = this.height;
        instance.series = this.series || [];
    }
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    setClickSubscribe(instance) {
        instance.onSerieClick.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            this.onSeriesClick(event);
        }));
    }
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    setHoverSubscribe(instance) {
        instance.onSerieHover.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            this.onSeriesHover(event);
        }));
    }
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    setResizeListenerSubscribe(instance) {
        this.windowResizeListener.subscribe((/**
         * @return {?}
         */
        () => {
            instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;
            instance.chartLegend = this.chartLegend.nativeElement.offsetHeight;
            instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;
        }));
    }
}
ThfChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-chart',
                template: "<div #chartWrapper class=\"thf-chart-wrapper\">\n  <div #chartHeader class=\"thf-chart-header\">\n    <div class=\"thf-chart-title\">{{ title }}</div>\n  </div>\n  <ng-template #chartContainer></ng-template>\n  <div #chartLegend class=\"thf-chart-legend\">\n    <div class=\"thf-chart-legend-container\">\n      <div class=\"thf-chart-legend-item\" *ngFor=\"let serie of series; let i = index\">\n        <div class=\"thf-chart-legend-square\" [style.background]=\"colors[i]\"></div>\n        <span class=\"thf-chart-legend-text\">{{ serie.category }}</span>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
ThfChartComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: IterableDiffers }
];
ThfChartComponent.propDecorators = {
    chartContainer: [{ type: ViewChild, args: ['chartContainer', { read: ViewContainerRef, static: true },] }],
    chartHeader: [{ type: ViewChild, args: ['chartHeader', { static: true },] }],
    chartLegend: [{ type: ViewChild, args: ['chartLegend', { static: true },] }],
    chartWrapper: [{ type: ViewChild, args: ['chartWrapper', { static: true },] }],
    onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.calculatedElement;
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.windowResizeListener;
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.mappings;
    /** @type {?} */
    ThfChartComponent.prototype.colors;
    /** @type {?} */
    ThfChartComponent.prototype.chartContainer;
    /** @type {?} */
    ThfChartComponent.prototype.chartHeader;
    /** @type {?} */
    ThfChartComponent.prototype.chartLegend;
    /** @type {?} */
    ThfChartComponent.prototype.chartWrapper;
    /** @type {?} */
    ThfChartComponent.prototype.onResize;
    /** @type {?} */
    ThfChartComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    ThfChartComponent.prototype.differs;
}
//# sourceMappingURL=data:application/json;base64,