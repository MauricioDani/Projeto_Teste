/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToInt } from '../../utils/util';
/**
 * \@description
 *
 * O componente `thf-toolbar` é um cabeçalho para o título da aplicação e informações de usuário e notificações quando houver necessidade.
 */
export class ThfToolbarBaseComponent {
    constructor() {
        /**
         * Se falso, oculta o ícone de notificações.
         */
        this.showNotification = true;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Número de notificações.
     * @param {?} value
     * @return {?}
     */
    set notificationNumber(value) {
        this._notificationNumber = convertToInt(value, 0);
    }
    /**
     * @return {?}
     */
    get notificationNumber() {
        return this._notificationNumber;
    }
    /**
     * @return {?}
     */
    get isShowProfile() {
        return this.profile || this.profileActions;
    }
}
ThfToolbarBaseComponent.propDecorators = {
    actions: [{ type: Input, args: ['t-actions',] }],
    actionsIcon: [{ type: Input, args: ['t-actions-icon',] }],
    profile: [{ type: Input, args: ['t-profile',] }],
    profileActions: [{ type: Input, args: ['t-profile-actions',] }],
    showNotification: [{ type: Input, args: ['t-show-notification',] }],
    title: [{ type: Input, args: ['t-title',] }],
    notificationActions: [{ type: Input, args: ['t-notification-actions',] }],
    notificationNumber: [{ type: Input, args: ['t-notification-number',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfToolbarBaseComponent.prototype._notificationNumber;
    /**
     * \@optional
     *
     * \@description
     *
     * Define uma lista de ações que serão exibidas ao clicar no ícone declarado em `t-actions-icon`.
     * @type {?}
     */
    ThfToolbarBaseComponent.prototype.actions;
    /**
     * \@optional
     *
     * \@description
     *
     * Define um [ícone](/guides/icons) para a propriedade `t-actions`.
     *
     * > Caso não haja ações definidas em `t-actions`, o ícone não será exibido.
     *
     * \@default `thf-icon-more`
     * @type {?}
     */
    ThfToolbarBaseComponent.prototype.actionsIcon;
    /**
     * Define o objeto que será o cabeçalho da lista de ações com as informações do perfil.
     * @type {?}
     */
    ThfToolbarBaseComponent.prototype.profile;
    /**
     * Define uma lista de ações que serão exibidas ao clicar no ícone do perfil.
     * @type {?}
     */
    ThfToolbarBaseComponent.prototype.profileActions;
    /**
     * Se falso, oculta o ícone de notificações.
     * @type {?}
     */
    ThfToolbarBaseComponent.prototype.showNotification;
    /**
     * Título do *toolbar* e aplicação.
     * @type {?}
     */
    ThfToolbarBaseComponent.prototype.title;
    /**
     * \@optional
     *
     * \@description
     *
     * Lista de ações da notificação.
     * @type {?}
     */
    ThfToolbarBaseComponent.prototype.notificationActions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXRvb2xiYXItYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLXRvb2xiYXIvdGhmLXRvb2xiYXItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7Ozs7QUFVaEQsTUFBTSxPQUFPLHVCQUF1QjtJQUFwQzs7OztRQWlDZ0MscUJBQWdCLEdBQWEsSUFBSSxDQUFDO0lBZ0NsRSxDQUFDOzs7Ozs7Ozs7O0lBWEMsSUFBb0Msa0JBQWtCLENBQUMsS0FBYTtRQUNsRSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDOzs7O0lBRUQsSUFBSSxrQkFBa0I7UUFDcEIsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUM7SUFDbEMsQ0FBQzs7OztJQUVELElBQUksYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzdDLENBQUM7OztzQkFyREEsS0FBSyxTQUFDLFdBQVc7MEJBYWpCLEtBQUssU0FBQyxnQkFBZ0I7c0JBR3RCLEtBQUssU0FBQyxXQUFXOzZCQUdqQixLQUFLLFNBQUMsbUJBQW1COytCQUd6QixLQUFLLFNBQUMscUJBQXFCO29CQUczQixLQUFLLFNBQUMsU0FBUztrQ0FTZixLQUFLLFNBQUMsd0JBQXdCO2lDQVM5QixLQUFLLFNBQUMsdUJBQXVCOzs7Ozs7O0lBcEQ5QixzREFBcUM7Ozs7Ozs7OztJQVNyQywwQ0FBc0Q7Ozs7Ozs7Ozs7Ozs7SUFhdEQsOENBQThDOzs7OztJQUc5QywwQ0FBZ0Q7Ozs7O0lBR2hELGlEQUFxRTs7Ozs7SUFHckUsbURBQWdFOzs7OztJQUdoRSx3Q0FBZ0M7Ozs7Ozs7OztJQVNoQyxzREFBK0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9JbnQgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgVGhmVG9vbGJhckFjdGlvbiB9IGZyb20gJy4vdGhmLXRvb2xiYXItYWN0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaGZUb29sYmFyUHJvZmlsZSB9IGZyb20gJy4vdGhmLXRvb2xiYXItcHJvZmlsZS90aGYtdG9vbGJhci1wcm9maWxlLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGB0aGYtdG9vbGJhcmAgw6kgdW0gY2FiZcOnYWxobyBwYXJhIG8gdMOtdHVsbyBkYSBhcGxpY2HDp8OjbyBlIGluZm9ybWHDp8O1ZXMgZGUgdXN1w6FyaW8gZSBub3RpZmljYcOnw7VlcyBxdWFuZG8gaG91dmVyIG5lY2Vzc2lkYWRlLlxuICovXG5leHBvcnQgY2xhc3MgVGhmVG9vbGJhckJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX25vdGlmaWNhdGlvbk51bWJlcj86IG51bWJlcjtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgdW1hIGxpc3RhIGRlIGHDp8O1ZXMgcXVlIHNlcsOjbyBleGliaWRhcyBhbyBjbGljYXIgbm8gw61jb25lIGRlY2xhcmFkbyBlbSBgdC1hY3Rpb25zLWljb25gLlxuICAgKi9cbiAgQElucHV0KCd0LWFjdGlvbnMnKSBhY3Rpb25zPzogQXJyYXk8VGhmVG9vbGJhckFjdGlvbj47XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIHVtIFvDrWNvbmVdKC9ndWlkZXMvaWNvbnMpIHBhcmEgYSBwcm9wcmllZGFkZSBgdC1hY3Rpb25zYC5cbiAgICpcbiAgICogPiBDYXNvIG7Do28gaGFqYSBhw6fDtWVzIGRlZmluaWRhcyBlbSBgdC1hY3Rpb25zYCwgbyDDrWNvbmUgbsOjbyBzZXLDoSBleGliaWRvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgdGhmLWljb24tbW9yZWBcbiAgICovXG4gIEBJbnB1dCgndC1hY3Rpb25zLWljb24nKSBhY3Rpb25zSWNvbj86IHN0cmluZztcblxuIC8qKiBEZWZpbmUgbyBvYmpldG8gcXVlIHNlcsOhIG8gY2FiZcOnYWxobyBkYSBsaXN0YSBkZSBhw6fDtWVzIGNvbSBhcyBpbmZvcm1hw6fDtWVzIGRvIHBlcmZpbC4gKi9cbiAgQElucHV0KCd0LXByb2ZpbGUnKSBwcm9maWxlPzogVGhmVG9vbGJhclByb2ZpbGU7XG5cbiAvKiogRGVmaW5lIHVtYSBsaXN0YSBkZSBhw6fDtWVzIHF1ZSBzZXLDo28gZXhpYmlkYXMgYW8gY2xpY2FyIG5vIMOtY29uZSBkbyBwZXJmaWwuICovXG4gIEBJbnB1dCgndC1wcm9maWxlLWFjdGlvbnMnKSBwcm9maWxlQWN0aW9ucz86IEFycmF5PFRoZlRvb2xiYXJBY3Rpb24+O1xuXG4gIC8qKiBTZSBmYWxzbywgb2N1bHRhIG8gw61jb25lIGRlIG5vdGlmaWNhw6fDtWVzLiAqL1xuICBASW5wdXQoJ3Qtc2hvdy1ub3RpZmljYXRpb24nKSBzaG93Tm90aWZpY2F0aW9uPzogYm9vbGVhbiA9IHRydWU7XG5cbiAgLyoqIFTDrXR1bG8gZG8gKnRvb2xiYXIqIGUgYXBsaWNhw6fDo28uICovXG4gIEBJbnB1dCgndC10aXRsZScpIHRpdGxlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTGlzdGEgZGUgYcOnw7VlcyBkYSBub3RpZmljYcOnw6NvLlxuICAgKi9cbiAgQElucHV0KCd0LW5vdGlmaWNhdGlvbi1hY3Rpb25zJykgbm90aWZpY2F0aW9uQWN0aW9ucz86IEFycmF5PFRoZlRvb2xiYXJBY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE7Dum1lcm8gZGUgbm90aWZpY2HDp8O1ZXMuXG4gICAqL1xuICBASW5wdXQoJ3Qtbm90aWZpY2F0aW9uLW51bWJlcicpIHNldCBub3RpZmljYXRpb25OdW1iZXIodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX25vdGlmaWNhdGlvbk51bWJlciA9IGNvbnZlcnRUb0ludCh2YWx1ZSwgMCk7XG4gIH1cblxuICBnZXQgbm90aWZpY2F0aW9uTnVtYmVyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX25vdGlmaWNhdGlvbk51bWJlcjtcbiAgfVxuXG4gIGdldCBpc1Nob3dQcm9maWxlKCkge1xuICAgIHJldHVybiB0aGlzLnByb2ZpbGUgfHwgdGhpcy5wcm9maWxlQWN0aW9ucztcbiAgfVxufVxuIl19