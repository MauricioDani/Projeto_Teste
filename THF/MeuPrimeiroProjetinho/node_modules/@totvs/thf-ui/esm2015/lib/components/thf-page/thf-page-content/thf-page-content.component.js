/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer2 } from '@angular/core';
import { ThfPageContentBaseComponent } from './thf-page-content-base.component';
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfPageContentBaseComponent
 */
export class ThfPageContentComponent extends ThfPageContentBaseComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super();
        this.renderer = renderer;
        this.contentOpacity = 0;
        this.height = '90%';
        this.overflowY = 'none';
        this.initializeListeners();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.recalculateHeaderSize();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListeners();
    }
    /**
     * @return {?}
     */
    recalculateHeaderSize() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const pageHeaderElement = document.querySelector('div.thf-page-header');
            this.setHeightContent(pageHeaderElement);
            this.contentOpacity = 1;
        }));
    }
    /**
     * @param {?} thfPageHeader
     * @return {?}
     */
    setHeightContent(thfPageHeader) {
        /** @type {?} */
        const bodyHeight = document.body.clientHeight;
        /** @type {?} */
        const pageHeaderHeight = thfPageHeader ? thfPageHeader.offsetTop + thfPageHeader.offsetHeight : 0;
        /** @type {?} */
        const newHeight = bodyHeight - pageHeaderHeight;
        this.height = `${newHeight}px`;
    }
    /**
     * @private
     * @return {?}
     */
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        () => {
            this.recalculateHeaderSize();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    removeListeners() {
        this.resizeListener();
    }
}
ThfPageContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-content',
                template: "<div class=\"thf-page-content\"\n  [style.height]=\"height\"\n  [style.opacity]=\"contentOpacity\"\n  [style.overflow-y]=\"overflowY\">\n  <ng-content></ng-content>\n</div>\n"
            }] }
];
/** @nocollapse */
ThfPageContentComponent.ctorParameters = () => [
    { type: Renderer2 }
];
if (false) {
    /** @type {?} */
    ThfPageContentComponent.prototype.contentOpacity;
    /** @type {?} */
    ThfPageContentComponent.prototype.height;
    /** @type {?} */
    ThfPageContentComponent.prototype.overflowY;
    /** @type {?} */
    ThfPageContentComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhZ2UtY29udGVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLXBhZ2UvdGhmLXBhZ2UtY29udGVudC90aGYtcGFnZS1jb250ZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQWEsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRS9FLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDOzs7Ozs7QUFXaEYsTUFBTSxPQUFPLHVCQUF3QixTQUFRLDJCQUEyQjs7OztJQU10RSxZQUFtQixRQUFtQjtRQUNwQyxLQUFLLEVBQUUsQ0FBQztRQURTLGFBQVEsR0FBUixRQUFRLENBQVc7UUFKdEMsbUJBQWMsR0FBVyxDQUFDLENBQUM7UUFDM0IsV0FBTSxHQUFXLEtBQUssQ0FBQztRQUN2QixjQUFTLEdBQVcsTUFBTSxDQUFDO1FBSXpCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDL0IsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekIsQ0FBQzs7OztJQUVELHFCQUFxQjtRQUNuQixVQUFVOzs7UUFBQyxHQUFHLEVBQUU7O2tCQUNSLGlCQUFpQixHQUFnQixRQUFRLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUFDO1lBRXBGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3pDLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxhQUEwQjs7Y0FDbkMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWTs7Y0FDdkMsZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7O2NBQzNGLFNBQVMsR0FBRyxVQUFVLEdBQUcsZ0JBQWdCO1FBRS9DLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxTQUFTLElBQUksQ0FBQztJQUNqQyxDQUFDOzs7OztJQUVPLG1CQUFtQjtRQUN6QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxRQUFROzs7UUFBRSxHQUFHLEVBQUU7WUFDbEUsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDL0IsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVPLGVBQWU7UUFDckIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7OztZQWhERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsMExBQWdEO2FBQ2pEOzs7O1lBWjZDLFNBQVM7Ozs7SUFlckQsaURBQTJCOztJQUMzQix5Q0FBdUI7O0lBQ3ZCLDRDQUEyQjs7SUFFZiwyQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIE9uRGVzdHJveSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFRoZlBhZ2VDb250ZW50QmFzZUNvbXBvbmVudCB9IGZyb20gJy4vdGhmLXBhZ2UtY29udGVudC1iYXNlLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRvY3NFeHRlbmRzIFRoZlBhZ2VDb250ZW50QmFzZUNvbXBvbmVudFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aGYtcGFnZS1jb250ZW50JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RoZi1wYWdlLWNvbnRlbnQuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFRoZlBhZ2VDb250ZW50Q29tcG9uZW50IGV4dGVuZHMgVGhmUGFnZUNvbnRlbnRCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcblxuICBjb250ZW50T3BhY2l0eTogbnVtYmVyID0gMDtcbiAgaGVpZ2h0OiBzdHJpbmcgPSAnOTAlJztcbiAgb3ZlcmZsb3dZOiBzdHJpbmcgPSAnbm9uZSc7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZUxpc3RlbmVycygpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMucmVjYWxjdWxhdGVIZWFkZXJTaXplKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xuICB9XG5cbiAgcmVjYWxjdWxhdGVIZWFkZXJTaXplKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc3QgcGFnZUhlYWRlckVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2LnRoZi1wYWdlLWhlYWRlcicpO1xuXG4gICAgICB0aGlzLnNldEhlaWdodENvbnRlbnQocGFnZUhlYWRlckVsZW1lbnQpO1xuICAgICAgdGhpcy5jb250ZW50T3BhY2l0eSA9IDE7XG4gICAgfSk7XG4gIH1cblxuICBzZXRIZWlnaHRDb250ZW50KHRoZlBhZ2VIZWFkZXI6IEhUTUxFbGVtZW50KSB7XG4gICAgY29uc3QgYm9keUhlaWdodCA9IGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0O1xuICAgIGNvbnN0IHBhZ2VIZWFkZXJIZWlnaHQgPSB0aGZQYWdlSGVhZGVyID8gdGhmUGFnZUhlYWRlci5vZmZzZXRUb3AgKyB0aGZQYWdlSGVhZGVyLm9mZnNldEhlaWdodCA6IDA7XG4gICAgY29uc3QgbmV3SGVpZ2h0ID0gYm9keUhlaWdodCAtIHBhZ2VIZWFkZXJIZWlnaHQ7XG5cbiAgICB0aGlzLmhlaWdodCA9IGAke25ld0hlaWdodH1weGA7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5yZXNpemVMaXN0ZW5lciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCd3aW5kb3cnLCAncmVzaXplJywgKCkgPT4ge1xuICAgICAgdGhpcy5yZWNhbGN1bGF0ZUhlYWRlclNpemUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlTGlzdGVuZXJzKCkge1xuICAgIHRoaXMucmVzaXplTGlzdGVuZXIoKTtcbiAgfVxuXG59XG4iXX0=