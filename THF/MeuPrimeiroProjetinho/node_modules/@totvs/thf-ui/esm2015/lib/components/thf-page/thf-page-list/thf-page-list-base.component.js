/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { browserLanguage, thfLocaleDefault } from './../../../utils/util';
import { ThfPageDefaultBaseComponent } from '../thf-page-default/thf-page-default-base.component';
/** @type {?} */
export const thfPageListLiteralsDefault = {
    en: (/** @type {?} */ ({
        otherActions: 'Other actions'
    })),
    es: (/** @type {?} */ ({
        otherActions: 'Otras acciones'
    })),
    pt: (/** @type {?} */ ({
        otherActions: 'Outras ações'
    }))
};
/**
 * \@description
 *
 * O componente `thf-page-list` é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 *
 * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
 * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [thf-icon-search](/guides/icons)
 * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
 *
 * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
 * [`thf-disclaimer-group`](/documentation/thf-disclaimer-group).
 * @abstract
 */
export class ThfPageListBaseComponent extends ThfPageDefaultBaseComponent {
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto que implementa as propriedades da interface `ThfDisclaimerGroup`.
     * @param {?} value
     * @return {?}
     */
    set disclaimerGroup(value) {
        if (!value) {
            value = (/** @type {?} */ ({}));
        }
        this._disclaimerGroup = value;
    }
    /**
     * @return {?}
     */
    get disclaimerGroup() {
        return this._disclaimerGroup;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto com as literais usadas no `thf-page-list`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: ThfPageListLiterals = {
     *    otherActions: 'Mais ações'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: ThfPageListLiterals = {
     *    otherActions: 'Ações da página'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <thf-page-list
     *   [t-literals]="customLiterals">
     * </thf-page-list>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, thfPageListLiteralsDefault[thfLocaleDefault], thfPageListLiteralsDefault[browserLanguage()], value);
        }
        else {
            this._literals = thfPageListLiteralsDefault[browserLanguage()];
        }
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || thfPageListLiteralsDefault[browserLanguage()];
    }
}
ThfPageListBaseComponent.propDecorators = {
    breadcrumb: [{ type: Input, args: ['t-breadcrumb',] }],
    disclaimerGroup: [{ type: Input, args: ['t-disclaimer-group',] }],
    filter: [{ type: Input, args: ['t-filter',] }],
    literals: [{ type: Input, args: ['t-literals',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageListBaseComponent.prototype._disclaimerGroup;
    /**
     * @type {?}
     * @private
     */
    ThfPageListBaseComponent.prototype._literals;
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto que implementa as propriedades da interface `ThfBreadcrumb`.
     * @type {?}
     */
    ThfPageListBaseComponent.prototype.breadcrumb;
    /**
     * \@description
     *
     * Objeto que implementa as propriedades da interface `ThfPageFilter`.
     * @type {?}
     */
    ThfPageListBaseComponent.prototype.filter;
    /**
     * @type {?}
     * @protected
     */
    ThfPageListBaseComponent.prototype.resizeListener;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhZ2UtbGlzdC1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtcGFnZS90aGYtcGFnZS1saXN0L3RoZi1wYWdlLWxpc3QtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBSTFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHFEQUFxRCxDQUFDOztBQUlsRyxNQUFNLE9BQU8sMEJBQTBCLEdBQUc7SUFDeEMsRUFBRSxFQUFFLG1CQUFzQjtRQUN4QixZQUFZLEVBQUUsZUFBZTtLQUM5QixFQUFBO0lBQ0QsRUFBRSxFQUFFLG1CQUFzQjtRQUN4QixZQUFZLEVBQUUsZ0JBQWdCO0tBQy9CLEVBQUE7SUFDRCxFQUFFLEVBQUUsbUJBQXNCO1FBQ3hCLFlBQVksRUFBRSxjQUFjO0tBQzdCLEVBQUE7Q0FDRjs7Ozs7Ozs7Ozs7Ozs7O0FBZUQsTUFBTSxPQUFnQix3QkFBeUIsU0FBUSwyQkFBMkI7Ozs7Ozs7Ozs7SUFxQmhGLElBQWlDLGVBQWUsQ0FBQyxLQUF5QjtRQUN4RSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsS0FBSyxHQUFHLG1CQUFNLEVBQUUsRUFBQSxDQUFDO1NBQ2xCO1FBRUQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQy9CLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQTBDRCxJQUF5QixRQUFRLENBQUMsS0FBMEI7UUFDMUQsSUFBSSxLQUFLLFlBQVksTUFBTSxJQUFJLENBQUMsQ0FBQyxLQUFLLFlBQVksS0FBSyxDQUFDLEVBQUU7WUFDeEQsSUFBSSxDQUFDLFNBQVMscUJBQ1QsMEJBQTBCLENBQUMsZ0JBQWdCLENBQUMsRUFDNUMsMEJBQTBCLENBQUMsZUFBZSxFQUFFLENBQUMsRUFDN0MsS0FBSyxDQUNULENBQUM7U0FDSDthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRywwQkFBMEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1NBQ2hFO0lBQ0gsQ0FBQzs7OztJQUNELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsSUFBSSwwQkFBMEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7Ozt5QkExRUEsS0FBSyxTQUFDLGNBQWM7OEJBU3BCLEtBQUssU0FBQyxvQkFBb0I7cUJBaUIxQixLQUFLLFNBQUMsVUFBVTt1QkFtQ2hCLEtBQUssU0FBQyxZQUFZOzs7Ozs7O0lBdkVuQixvREFBOEM7Ozs7O0lBQzlDLDZDQUF1Qzs7Ozs7Ozs7O0lBU3ZDLDhDQUFrRDs7Ozs7OztJQTBCbEQsMENBQXlDOzs7OztJQWtEekMsa0RBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgYnJvd3Nlckxhbmd1YWdlLCB0aGZMb2NhbGVEZWZhdWx0IH0gZnJvbSAnLi8uLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgVGhmQnJlYWRjcnVtYiB9IGZyb20gJy4uLy4uL3RoZi1icmVhZGNydW1iL3RoZi1icmVhZGNydW1iLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaGZEaXNjbGFpbWVyR3JvdXAgfSBmcm9tICcuLi8uLi90aGYtZGlzY2xhaW1lci1ncm91cC90aGYtZGlzY2xhaW1lci1ncm91cC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGhmUGFnZURlZmF1bHRCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi4vdGhmLXBhZ2UtZGVmYXVsdC90aGYtcGFnZS1kZWZhdWx0LWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IFRoZlBhZ2VGaWx0ZXIgfSBmcm9tICcuLy4uL3RoZi1wYWdlLWZpbHRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGhmUGFnZUxpc3RMaXRlcmFscyB9IGZyb20gJy4vdGhmLXBhZ2UtbGlzdC1saXRlcmFscy5pbnRlcmZhY2UnO1xuXG5leHBvcnQgY29uc3QgdGhmUGFnZUxpc3RMaXRlcmFsc0RlZmF1bHQgPSB7XG4gIGVuOiA8VGhmUGFnZUxpc3RMaXRlcmFscz4ge1xuICAgIG90aGVyQWN0aW9uczogJ090aGVyIGFjdGlvbnMnXG4gIH0sXG4gIGVzOiA8VGhmUGFnZUxpc3RMaXRlcmFscz4ge1xuICAgIG90aGVyQWN0aW9uczogJ090cmFzIGFjY2lvbmVzJ1xuICB9LFxuICBwdDogPFRoZlBhZ2VMaXN0TGl0ZXJhbHM+IHtcbiAgICBvdGhlckFjdGlvbnM6ICdPdXRyYXMgYcOnw7VlcydcbiAgfVxufTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHRoZi1wYWdlLWxpc3RgIMOpIHV0aWxpemFkbyBjb21vIG8gY29udGFpbmVyIHByaW5jaXBhbCBwYXJhIGFzIHRlbGFzIGRlIGxpc3RhZ2VtIGRlIGRhZG9zLFxuICogcG9kZW5kbyBzZXIgYXByZXNlbnRhZG8gY29tbyBsaXN0YSBvdSB0YWJlbGEuXG4gKlxuICogRXN0ZSBjb21wb25lbnRlIHBvc3NpYmlsaXRhIHJlYWxpemFyIGZpbHRybyBkb3MgZGFkb3MsIG5vIHF1YWwgcGVybWl0ZSBxdWUgc2VqYSBhdHJpYnVpZG8gdW1hIGZ1bsOnw6NvIHF1ZSBzZXLDoSBleGVjdXRhZGEgbm8gbW9tZW50b1xuICogZGEgZmlsdHJhZ2VtLiBFc3RlIGNvbXBvcnRhbWVudG8gcG9kZSBzZXIgYWNpb25hZG8gdGFudG8gYW8gKmNsaWNrKiBkbyDDrWNvbmUgW3RoZi1pY29uLXNlYXJjaF0oL2d1aWRlcy9pY29ucylcbiAqIHF1YW50byBhbyBwcmVzc2lvbmFyIGRhIHRlY2xhICpFTlRFUiogcXVhbmRvIG8gZm9jbyBlc3RpdmVyIG5vIGNhbXBvIGRlIHBlc3F1aXNhLlxuICpcbiAqIFBhcmEgZmFjaWxpdGFyIGEgbWFuaXB1bGHDp8OjbyBlIHZpc3VhbGl6YcOnw6NvIGRvcyBmaWx0cm9zIGFwbGljYWRvcywgw6kgcG9zc8OtdmVsIHRhbWLDqW0gdXRpbGl6YXIgbyBjb21wb25lbnRlXG4gKiBbYHRoZi1kaXNjbGFpbWVyLWdyb3VwYF0oL2RvY3VtZW50YXRpb24vdGhmLWRpc2NsYWltZXItZ3JvdXApLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGhmUGFnZUxpc3RCYXNlQ29tcG9uZW50IGV4dGVuZHMgVGhmUGFnZURlZmF1bHRCYXNlQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9kaXNjbGFpbWVyR3JvdXA/OiBUaGZEaXNjbGFpbWVyR3JvdXA7XG4gIHByaXZhdGUgX2xpdGVyYWxzOiBUaGZQYWdlTGlzdExpdGVyYWxzO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamV0byBxdWUgaW1wbGVtZW50YSBhcyBwcm9wcmllZGFkZXMgZGEgaW50ZXJmYWNlIGBUaGZCcmVhZGNydW1iYC5cbiAgICovXG4gIEBJbnB1dCgndC1icmVhZGNydW1iJykgYnJlYWRjcnVtYj86IFRoZkJyZWFkY3J1bWI7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZXRvIHF1ZSBpbXBsZW1lbnRhIGFzIHByb3ByaWVkYWRlcyBkYSBpbnRlcmZhY2UgYFRoZkRpc2NsYWltZXJHcm91cGAuXG4gICAqL1xuICBASW5wdXQoJ3QtZGlzY2xhaW1lci1ncm91cCcpIHNldCBkaXNjbGFpbWVyR3JvdXAodmFsdWU6IFRoZkRpc2NsYWltZXJHcm91cCkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHZhbHVlID0gPGFueT4ge307XG4gICAgfVxuXG4gICAgdGhpcy5fZGlzY2xhaW1lckdyb3VwID0gdmFsdWU7XG4gIH1cblxuICBnZXQgZGlzY2xhaW1lckdyb3VwKCk6IFRoZkRpc2NsYWltZXJHcm91cCB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2NsYWltZXJHcm91cDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZXRvIHF1ZSBpbXBsZW1lbnRhIGFzIHByb3ByaWVkYWRlcyBkYSBpbnRlcmZhY2UgYFRoZlBhZ2VGaWx0ZXJgLlxuICAgKi9cbiAgQElucHV0KCd0LWZpbHRlcicpIGZpbHRlcjogVGhmUGFnZUZpbHRlcjtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmpldG8gY29tIGFzIGxpdGVyYWlzIHVzYWRhcyBubyBgdGhmLXBhZ2UtbGlzdGAuXG4gICAqXG4gICAqIEV4aXN0ZW0gZHVhcyBtYW5laXJhcyBkZSBjdXN0b21pemFyIG8gY29tcG9uZW50ZSwgcGFzc2FuZG8gdW0gb2JqZXRvIGNvbSB0b2RhcyBhcyBsaXRlcmFpcyBkaXNwb27DrXZlaXM6XG4gICAqXG4gICAqIGBgYFxuICAgKiAgY29uc3QgY3VzdG9tTGl0ZXJhbHM6IFRoZlBhZ2VMaXN0TGl0ZXJhbHMgPSB7XG4gICAqICAgIG90aGVyQWN0aW9uczogJ01haXMgYcOnw7VlcydcbiAgICogIH07XG4gICAqIGBgYFxuICAgKlxuICAgKiBPdSBwYXNzYW5kbyBhcGVuYXMgYXMgbGl0ZXJhaXMgcXVlIGRlc2VqYSBjdXN0b21pemFyOlxuICAgKlxuICAgKiBgYGBcbiAgICogIGNvbnN0IGN1c3RvbUxpdGVyYWxzOiBUaGZQYWdlTGlzdExpdGVyYWxzID0ge1xuICAgKiAgICBvdGhlckFjdGlvbnM6ICdBw6fDtWVzIGRhIHDDoWdpbmEnXG4gICAqICB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogRSBwYXJhIGNhcnJlZ2FyIGFzIGxpdGVyYWlzIGN1c3RvbWl6YWRhcywgYmFzdGEgYXBlbmFzIHBhc3NhciBvIG9iamV0byBwYXJhIG8gY29tcG9uZW50ZS5cbiAgICpcbiAgICogYGBgXG4gICAqIDx0aGYtcGFnZS1saXN0XG4gICAqICAgW3QtbGl0ZXJhbHNdPVwiY3VzdG9tTGl0ZXJhbHNcIj5cbiAgICogPC90aGYtcGFnZS1saXN0PlxuICAgKiBgYGBcbiAgICpcbiAgICogID4gTyBvYmpldG8gcGFkcsOjbyBkZSBsaXRlcmFpcyBzZXLDoSB0cmFkdXppZG8gZGUgYWNvcmRvIGNvbSBvIGlkaW9tYSBkbyBicm93c2VyIChwdCwgZW4sIGVzKS5cbiAgICovXG4gIEBJbnB1dCgndC1saXRlcmFscycpIHNldCBsaXRlcmFscyh2YWx1ZTogVGhmUGFnZUxpc3RMaXRlcmFscykge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCAmJiAhKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICB0aGlzLl9saXRlcmFscyA9IHtcbiAgICAgICAgLi4udGhmUGFnZUxpc3RMaXRlcmFsc0RlZmF1bHRbdGhmTG9jYWxlRGVmYXVsdF0sXG4gICAgICAgIC4uLnRoZlBhZ2VMaXN0TGl0ZXJhbHNEZWZhdWx0W2Jyb3dzZXJMYW5ndWFnZSgpXSxcbiAgICAgICAgLi4udmFsdWVcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpdGVyYWxzID0gdGhmUGFnZUxpc3RMaXRlcmFsc0RlZmF1bHRbYnJvd3Nlckxhbmd1YWdlKCldO1xuICAgIH1cbiAgfVxuICBnZXQgbGl0ZXJhbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xpdGVyYWxzIHx8IHRoZlBhZ2VMaXN0TGl0ZXJhbHNEZWZhdWx0W2Jyb3dzZXJMYW5ndWFnZSgpXTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcblxufVxuIl19