/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { ThfInputGeneric } from '../thf-input-generic/thf-input-generic';
/**
 * \@docsExtends ThfInputBaseComponent
 *
 * \@description
 * O thf-login é um input específico para login. Já possui tipo, estilo e ícone predefinidos.
 *
 * \@example
 *
 * <example name="thf-login-basic" title="Totvs Login Basic">
 *  <file name="sample-thf-login-basic/sample-thf-login-basic.component.html"> </file>
 *  <file name="sample-thf-login-basic/sample-thf-login-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-login-labs" title="Totvs Login Labs">
 *  <file name="sample-thf-login-labs/sample-thf-login-labs.component.html"> </file>
 *  <file name="sample-thf-login-labs/sample-thf-login-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-login-confirm" title="Totvs Login - Confirm Identity">
 *  <file name="sample-thf-login-confirm/sample-thf-login-confirm.component.html"> </file>
 *  <file name="sample-thf-login-confirm/sample-thf-login-confirm.component.ts"> </file>
 * </example>
 *
 */
export class ThfLoginComponent extends ThfInputGeneric {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
        this.type = 'text';
    }
    /**
     * @param {?} c
     * @return {?}
     */
    extraValidation(c) {
        return null;
    }
}
ThfLoginComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-login',
                template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n    <div class=\"thf-field-icon-container-left\">\n      <span class=\"thf-icon thf-field-icon thf-icon-user\" [class.thf-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inp\n      class=\"thf-input thf-input-icon-left\"\n      [attr.name]=\"name\"\n      [class.thf-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"></thf-clean>\n    </div>\n  </div>\n\n  <thf-field-container-bottom\n    [t-error-pattern]=\"getErrorPattern()\">\n  </thf-field-container-bottom>\n\n</thf-field-container>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfLoginComponent)),
                        multi: true,
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfLoginComponent)),
                        multi: true,
                    }
                ]
            }] }
];
/** @nocollapse */
ThfLoginComponent.ctorParameters = () => [
    { type: ElementRef }
];
if (false) {
    /** @type {?} */
    ThfLoginComponent.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWxvZ2luLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtZmllbGQvdGhmLWxvZ2luL3RoZi1sb2dpbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRSxPQUFPLEVBQW1CLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRW5GLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlDekUsTUFBTSxPQUFPLGlCQUFrQixTQUFRLGVBQWU7Ozs7SUFJcEQsWUFBWSxFQUFjO1FBQ3hCLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUhaLFNBQUksR0FBRyxNQUFNLENBQUM7SUFJZCxDQUFDOzs7OztJQUVELGVBQWUsQ0FBQyxDQUFrQjtRQUNoQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7OztZQXpCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLG1sQ0FBeUM7Z0JBQ3pDLFNBQVMsRUFBRTtvQkFDWDt3QkFDRSxPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixFQUFDO3dCQUNoRCxLQUFLLEVBQUUsSUFBSTtxQkFDWjtvQkFDRDt3QkFDRSxPQUFPLEVBQUUsYUFBYTt3QkFDdEIsV0FBVyxFQUFFLFVBQVU7Ozt3QkFBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsRUFBQzt3QkFDaEQsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQUM7YUFDSDs7OztZQTNDbUIsVUFBVTs7OztJQThDNUIsaUNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgTkdfVkFMVUVfQUNDRVNTT1IsIE5HX1ZBTElEQVRPUlMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IFRoZklucHV0R2VuZXJpYyB9IGZyb20gJy4uL3RoZi1pbnB1dC1nZW5lcmljL3RoZi1pbnB1dC1nZW5lcmljJztcblxuLyoqXG4gKiBAZG9jc0V4dGVuZHMgVGhmSW5wdXRCYXNlQ29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBPIHRoZi1sb2dpbiDDqSB1bSBpbnB1dCBlc3BlY8OtZmljbyBwYXJhIGxvZ2luLiBKw6EgcG9zc3VpIHRpcG8sIGVzdGlsbyBlIMOtY29uZSBwcmVkZWZpbmlkb3MuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwidGhmLWxvZ2luLWJhc2ljXCIgdGl0bGU9XCJUb3R2cyBMb2dpbiBCYXNpY1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLWxvZ2luLWJhc2ljL3NhbXBsZS10aGYtbG9naW4tYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLWxvZ2luLWJhc2ljL3NhbXBsZS10aGYtbG9naW4tYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwidGhmLWxvZ2luLWxhYnNcIiB0aXRsZT1cIlRvdHZzIExvZ2luIExhYnNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1sb2dpbi1sYWJzL3NhbXBsZS10aGYtbG9naW4tbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtbG9naW4tbGFicy9zYW1wbGUtdGhmLWxvZ2luLWxhYnMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwidGhmLWxvZ2luLWNvbmZpcm1cIiB0aXRsZT1cIlRvdHZzIExvZ2luIC0gQ29uZmlybSBJZGVudGl0eVwiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLWxvZ2luLWNvbmZpcm0vc2FtcGxlLXRoZi1sb2dpbi1jb25maXJtLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1sb2dpbi1jb25maXJtL3NhbXBsZS10aGYtbG9naW4tY29uZmlybS5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGhmLWxvZ2luJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RoZi1sb2dpbi5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW1xuICB7XG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGhmTG9naW5Db21wb25lbnQpLFxuICAgIG11bHRpOiB0cnVlLFxuICB9LFxuICB7XG4gICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaGZMb2dpbkNvbXBvbmVudCksXG4gICAgbXVsdGk6IHRydWUsXG4gIH1dXG59KVxuZXhwb3J0IGNsYXNzIFRoZkxvZ2luQ29tcG9uZW50IGV4dGVuZHMgVGhmSW5wdXRHZW5lcmljIHtcblxuICB0eXBlID0gJ3RleHQnO1xuXG4gIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmKSB7XG4gICAgc3VwZXIoZWwpO1xuICB9XG5cbiAgZXh0cmFWYWxpZGF0aW9uKGM6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55OyB9IHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG59XG4iXX0=