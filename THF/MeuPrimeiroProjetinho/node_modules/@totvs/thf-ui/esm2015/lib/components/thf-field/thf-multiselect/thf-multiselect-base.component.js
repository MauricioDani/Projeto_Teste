/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, convertToBoolean, removeDuplicatedOptions, removeUndefinedAndNullOptions, sortOptionsByProperty, thfLocaleDefault } from '../../../utils/util';
import { requiredFailed } from './../validators';
import { ThfMultiselectFilterMode } from './thf-multiselect-filter-mode.enum';
/** @type {?} */
export const thfMultiselectLiteralsDefault = {
    en: (/** @type {?} */ ({
        noData: 'No data found',
        placeholderSearch: 'Search'
    })),
    es: (/** @type {?} */ ({
        noData: 'Datos no encontrados',
        placeholderSearch: 'Busca'
    })),
    pt: (/** @type {?} */ ({
        noData: 'Nenhum dado encontrado',
        placeholderSearch: 'Buscar'
    }))
};
/**
 * \@description
 *
 * O thf-multiselect é um componente de múltipla seleção.
 * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.
 *
 * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do thf-checkbox-group, por ser mais simples
 * e mais rápido para a seleção do usuário.
 *
 * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o
 * thf-select, thf-combo ou thf-radio-group.
 * @abstract
 */
export class ThfMultiselectBaseComponent {
    constructor() {
        this._disabled = false;
        this._filterMode = ThfMultiselectFilterMode.startsWith;
        this._focus = false;
        this._hideSearch = false;
        this._required = false;
        this._sort = false;
        this.readyToValidation = false;
        this.selectedOptions = [];
        this.visibleOptionsDropdown = [];
        this.visibleDisclaimers = [];
        /**
         * Mensagem apresentada enquanto o campo estiver vazio.
         */
        this.placeholder = '';
        /**
         * \@description
         *
         * Placeholder do campo de pesquisa.
         *
         * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
         *
         * \@default `Buscar`
         */
        this.placeholderSearch = '';
        /**
         * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto com as literais usadas no `thf-multiselect`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: ThfMultiselectLiterals = {
     *    noData: 'Nenhum dado encontrado',
     *    placeholderSearch: 'Buscar'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: ThfMultiselectLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
     *
     * ```
     * <thf-multiselect
     *   [t-literals]="customLiterals">
     * </thf-thf-multiselect>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, thfMultiselectLiteralsDefault[thfLocaleDefault], thfMultiselectLiteralsDefault[browserLanguage()], value);
        }
        else {
            this._literals = thfMultiselectLiteralsDefault[browserLanguage()];
        }
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || thfMultiselectLiteralsDefault[browserLanguage()];
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (t-disabled).
     *
     * \@default `false`
     * @param {?} required
     * @return {?}
     */
    set required(required) {
        this._required = (/** @type {?} */ (required)) === '' ? true : convertToBoolean(required);
        this.updateModelToValidate();
    }
    /**
     * @return {?}
     */
    get required() {
        return this._required;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo será desabilitado.
     *
     * \@default `false`
     * @param {?} disabled
     * @return {?}
     */
    set disabled(disabled) {
        this._disabled = (/** @type {?} */ (disabled)) === '' ? true : convertToBoolean(disabled);
        this.updateModelToValidate();
        this.updateVisibleItems();
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Esconde o campo de pesquisa existente dentro do dropdown do thf-multiselect.
     *
     * \@default `false`
     * @param {?} hideSearch
     * @return {?}
     */
    set hideSearch(hideSearch) {
        this._hideSearch = (/** @type {?} */ (hideSearch)) === '' ? true : convertToBoolean(hideSearch);
    }
    /**
     * @return {?}
     */
    get hideSearch() {
        return this._hideSearch;
    }
    /**
     * \@description
     *
     * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfMultiselectOption.
     * Esta lista deve conter os valores e os labels que serão apresentados na tela.
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options = options;
        this.validAndSortOptions();
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que a lista definida na propriedade t-options será ordenada pelo label antes de ser apresentada no
     * dropdown.
     *
     * \@default `false`
     * @param {?} sort
     * @return {?}
     */
    set sort(sort) {
        this._sort = (/** @type {?} */ (sort)) === '' ? true : convertToBoolean(sort);
        this.validAndSortOptions();
    }
    /**
     * @return {?}
     */
    get sort() {
        return this._sort;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo iniciará com foco.
     *
     * \@default `false`
     * @param {?} focus
     * @return {?}
     */
    set focus(focus) {
        this._focus = (/** @type {?} */ (focus)) === '' ? true : convertToBoolean(focus);
    }
    /**
     * @return {?}
     */
    get focus() {
        return this._focus;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
     * Valores definidos no enum: ThfMultiselectFilterMode
     *
     * \@default `startsWith`
     * @param {?} filterMode
     * @return {?}
     */
    set filterMode(filterMode) {
        this._filterMode = (filterMode in ThfMultiselectFilterMode) ? filterMode : ThfMultiselectFilterMode.startsWith;
        switch (this._filterMode.toString()) {
            case 'startsWith':
                this._filterMode = ThfMultiselectFilterMode.startsWith;
                break;
            case 'contains':
                this._filterMode = ThfMultiselectFilterMode.contains;
                break;
            case 'endsWith':
                this._filterMode = ThfMultiselectFilterMode.endsWith;
                break;
        }
    }
    /**
     * @return {?}
     */
    get filterMode() {
        return this._filterMode;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.updateList(this.options);
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        // Seta esta variável para indicar que a tela já foi carregada e podem ser aplicadas as validações.
        // A partir desse momento, toda vez que uma propriedade que interfere na validação, for alterada, o model será atualizado
        // para que o campo seja validado novamente.
        this.readyToValidation = true;
    }
    /**
     * @return {?}
     */
    validAndSortOptions() {
        if (this.options && this.options.length) {
            removeUndefinedAndNullOptions(this.options);
            removeDuplicatedOptions(this.options);
            this.setUndefinedLabels(this.options);
            if (this.sort) {
                sortOptionsByProperty(this.options, 'label');
            }
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setUndefinedLabels(options) {
        options.forEach((/**
         * @param {?} option
         * @return {?}
         */
        option => {
            if (!option['label']) {
                option.label = option.value;
            }
        }));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    updateList(options) {
        if (options) {
            this.visibleOptionsDropdown = options;
        }
    }
    // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
    /**
     * @return {?}
     */
    updateModelToValidate() {
        if (this.readyToValidation) {
            // Este timeout é necessário para quando for atualizado o model e uma propriedade do Datepicker ao mesmo tempo.
            // Caso contrário, o writeValue não é disparado, não atualizando o model do componente.
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.callOnChange(this.selectedOptions);
            }));
        }
    }
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    callOnChange(selectedOptions) {
        if (this.onModelChange) {
            this.onModelChange(this.getValuesFromOptions(selectedOptions));
            this.eventChange(selectedOptions);
        }
    }
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    eventChange(selectedOptions) {
        if (selectedOptions && this.lastLengthModel !== selectedOptions.length) {
            this.change.emit(selectedOptions);
        }
        this.lastLengthModel = selectedOptions ? selectedOptions.length : null;
    }
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    getValuesFromOptions(selectedOptions) {
        return selectedOptions && selectedOptions.length ? selectedOptions.map((/**
         * @param {?} option
         * @return {?}
         */
        option => option.value)) : [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getLabelByValue(value) {
        /** @type {?} */
        const index = this.options.findIndex((/**
         * @param {?} option
         * @return {?}
         */
        option => option.value === value));
        return this.options[index].label;
    }
    /**
     * @param {?} selectedValues
     * @return {?}
     */
    changeItems(selectedValues) {
        this.updateSelectedOptions(selectedValues);
        this.callOnChange(this.selectedOptions);
    }
    /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    searchByLabel(search, options, filterMode) {
        if (search && options && options.length) {
            /** @type {?} */
            const newOptions = [];
            options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            option => {
                if (option.label && this.compareMethod(search, option, filterMode)) {
                    newOptions.push(option);
                }
            }));
            this.visibleOptionsDropdown = newOptions;
        }
    }
    /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    compareMethod(search, option, filterMode) {
        switch (filterMode) {
            case ThfMultiselectFilterMode.startsWith:
                return this.startsWith(search, option);
            case ThfMultiselectFilterMode.contains:
                return this.contains(search, option);
            case ThfMultiselectFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    }
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    startsWith(search, option) {
        return option.label.toLowerCase().startsWith(search.toLowerCase());
    }
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    contains(search, option) {
        return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
    }
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    endsWith(search, option) {
        return option.label.toLowerCase().endsWith(search.toLowerCase());
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return { required: {
                    valid: false,
                } };
        }
        return null;
    }
    /**
     * @param {?} values
     * @return {?}
     */
    updateSelectedOptions(values) {
        this.selectedOptions = [];
        values.forEach((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            option => {
                if (option.value === value) {
                    this.selectedOptions.push(option);
                }
            }));
        }));
        this.updateVisibleItems();
    }
    /**
     * @param {?} values
     * @return {?}
     */
    writeValue(values) {
        if (!values) {
            values = [];
            this.callOnChange([]);
        }
        // Validar se todos os items existem entre os options, senão atualizar o model
        this.updateSelectedOptions(values);
        if (this.selectedOptions.length < values.length) {
            this.callOnChange(this.selectedOptions);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
}
ThfMultiselectBaseComponent.propDecorators = {
    label: [{ type: Input, args: ['t-label',] }],
    help: [{ type: Input, args: ['t-help',] }],
    literals: [{ type: Input, args: ['t-literals',] }],
    optional: [{ type: Input, args: ['t-optional',] }],
    placeholder: [{ type: Input, args: ['t-placeholder',] }],
    placeholderSearch: [{ type: Input, args: ['t-placeholder-search',] }],
    name: [{ type: Input, args: ['name',] }],
    required: [{ type: Input, args: ['t-required',] }],
    disabled: [{ type: Input, args: ['t-disabled',] }],
    hideSearch: [{ type: Input, args: ['t-hide-search',] }],
    options: [{ type: Input, args: ['t-options',] }],
    sort: [{ type: Input, args: ['t-sort',] }],
    focus: [{ type: Input, args: ['t-focus',] }],
    filterMode: [{ type: Input, args: ['t-filter-mode',] }],
    change: [{ type: Output, args: ['t-change',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._filterMode;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._focus;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._hideSearch;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype._sort;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype.lastLengthModel;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype.onModelChange;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectBaseComponent.prototype.readyToValidation;
    /** @type {?} */
    ThfMultiselectBaseComponent.prototype.selectedOptions;
    /** @type {?} */
    ThfMultiselectBaseComponent.prototype.visibleOptionsDropdown;
    /** @type {?} */
    ThfMultiselectBaseComponent.prototype.visibleDisclaimers;
    /**
     * Label no componente.
     * @type {?}
     */
    ThfMultiselectBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    ThfMultiselectBaseComponent.prototype.help;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `t-required`;
     * - Não possuir `t-help` e/ou `t-label`.
     *
     * \@default `false`
     * @type {?}
     */
    ThfMultiselectBaseComponent.prototype.optional;
    /**
     * Mensagem apresentada enquanto o campo estiver vazio.
     * @type {?}
     */
    ThfMultiselectBaseComponent.prototype.placeholder;
    /**
     * \@description
     *
     * Placeholder do campo de pesquisa.
     *
     * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
     *
     * \@default `Buscar`
     * @type {?}
     */
    ThfMultiselectBaseComponent.prototype.placeholderSearch;
    /**
     * Nome do componente.
     * @type {?}
     */
    ThfMultiselectBaseComponent.prototype.name;
    /**
     * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
     * @type {?}
     */
    ThfMultiselectBaseComponent.prototype.change;
    /**
     * @type {?}
     * @protected
     */
    ThfMultiselectBaseComponent.prototype.clickOutListener;
    /**
     * @type {?}
     * @protected
     */
    ThfMultiselectBaseComponent.prototype.resizeListener;
    /**
     * @abstract
     * @return {?}
     */
    ThfMultiselectBaseComponent.prototype.updateVisibleItems = function () { };
}
//# sourceMappingURL=data:application/json;base64,