/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToInt } from '../../utils/util';
/** @type {?} */
const THF_BADGE_COLORS = [
    'color-01',
    'color-02',
    'color-03',
    'color-04',
    'color-05',
    'color-06',
    'color-07',
    'color-08',
    'color-09',
    'color-10',
    'color-11',
    'color-12',
];
/** @type {?} */
const THF_BADGE_COLOR_DEFAULT = 'color-07';
/**
 * \@description
 *
 * \@docsPrivate
 *
 * Componente utilizado no `thf-menu` para exibir por exemplo a quantidade de tarefas pendentes.
 */
export class ThfBadgeBaseComponent {
    /**
     * \@optional
     *
     * \@description
     *
     * Define a cor de fundo do componente e aceita os valores:
     *
     * <span class="dot thf-color-01"></span> `color-01`
     *
     * <span class="dot thf-color-02"></span> `color-02`
     *
     * <span class="dot thf-color-03"></span> `color-03`
     *
     * <span class="dot thf-color-04"></span> `color-04`
     *
     * <span class="dot thf-color-05"></span> `color-05`
     *
     * <span class="dot thf-color-06"></span> `color-06`
     *
     * <span class="dot thf-color-07"></span> `color-07`
     *
     * <span class="dot thf-color-08"></span> `color-08`
     *
     * <span class="dot thf-color-09"></span> `color-09`
     *
     * <span class="dot thf-color-10"></span> `color-10`
     *
     * <span class="dot thf-color-11"></span> `color-11`
     *
     * <span class="dot thf-color-12"></span> `color-12`
     *
     * \@default `color-07`
     * @param {?} value
     * @return {?}
     */
    set color(value) {
        this._color = THF_BADGE_COLORS.includes(value) ? value : THF_BADGE_COLOR_DEFAULT;
    }
    /**
     * @return {?}
     */
    get color() {
        return this._color;
    }
    /**
     * \@description
     *
     * Número exibido no componente, caso o mesmo seja maior que 99 o valor exibido será 99+.
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = convertToInt(value);
        this.setBadgeValue(this._value);
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setBadgeValue(value) {
        /** @type {?} */
        const validRangeValue = (value || value === 0) && (value >= 0 && value < 100);
        this.badgeValue = validRangeValue ? value.toString() : value > 99 ? '99+' : undefined;
    }
}
ThfBadgeBaseComponent.propDecorators = {
    color: [{ type: Input, args: ['t-color',] }],
    value: [{ type: Input, args: ['t-value',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfBadgeBaseComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    ThfBadgeBaseComponent.prototype._value;
    /** @type {?} */
    ThfBadgeBaseComponent.prototype.badgeValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWJhZGdlLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1iYWRnZS90aGYtYmFkZ2UtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDOztNQUUxQyxnQkFBZ0IsR0FBRztJQUN2QixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7Q0FDWDs7TUFDSyx1QkFBdUIsR0FBRyxVQUFVOzs7Ozs7OztBQVMxQyxNQUFNLE9BQU8scUJBQXFCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUF3Q2hDLElBQXNCLEtBQUssQ0FBQyxLQUFhO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDO0lBQ25GLENBQUM7Ozs7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7Ozs7Ozs7SUFPRCxJQUFzQixLQUFLLENBQUMsS0FBYTtRQUN2QyxJQUFJLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQyxDQUFDOzs7O0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7Ozs7OztJQUVPLGFBQWEsQ0FBQyxLQUFhOztjQUMzQixlQUFlLEdBQUcsQ0FBQyxLQUFLLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQzdFLElBQUksQ0FBQyxVQUFVLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ3hGLENBQUM7OztvQkF6QkEsS0FBSyxTQUFDLFNBQVM7b0JBYWYsS0FBSyxTQUFDLFNBQVM7Ozs7Ozs7SUFuRGhCLHVDQUF1Qjs7Ozs7SUFDdkIsdUNBQXVCOztJQUV2QiwyQ0FBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9JbnQgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuY29uc3QgVEhGX0JBREdFX0NPTE9SUyA9IFtcbiAgJ2NvbG9yLTAxJyxcbiAgJ2NvbG9yLTAyJyxcbiAgJ2NvbG9yLTAzJyxcbiAgJ2NvbG9yLTA0JyxcbiAgJ2NvbG9yLTA1JyxcbiAgJ2NvbG9yLTA2JyxcbiAgJ2NvbG9yLTA3JyxcbiAgJ2NvbG9yLTA4JyxcbiAgJ2NvbG9yLTA5JyxcbiAgJ2NvbG9yLTEwJyxcbiAgJ2NvbG9yLTExJyxcbiAgJ2NvbG9yLTEyJyxcbl07XG5jb25zdCBUSEZfQkFER0VfQ09MT1JfREVGQVVMVCA9ICdjb2xvci0wNyc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQ29tcG9uZW50ZSB1dGlsaXphZG8gbm8gYHRoZi1tZW51YCBwYXJhIGV4aWJpciBwb3IgZXhlbXBsbyBhIHF1YW50aWRhZGUgZGUgdGFyZWZhcyBwZW5kZW50ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUaGZCYWRnZUJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2NvbG9yOiBzdHJpbmc7XG4gIHByaXZhdGUgX3ZhbHVlOiBudW1iZXI7XG5cbiAgYmFkZ2VWYWx1ZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBhIGNvciBkZSBmdW5kbyBkbyBjb21wb25lbnRlIGUgYWNlaXRhIG9zIHZhbG9yZXM6XG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHRoZi1jb2xvci0wMVwiPjwvc3Bhbj4gYGNvbG9yLTAxYFxuICAgKlxuICAgKiA8c3BhbiBjbGFzcz1cImRvdCB0aGYtY29sb3ItMDJcIj48L3NwYW4+IGBjb2xvci0wMmBcbiAgICpcbiAgICogPHNwYW4gY2xhc3M9XCJkb3QgdGhmLWNvbG9yLTAzXCI+PC9zcGFuPiBgY29sb3ItMDNgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHRoZi1jb2xvci0wNFwiPjwvc3Bhbj4gYGNvbG9yLTA0YFxuICAgKlxuICAgKiA8c3BhbiBjbGFzcz1cImRvdCB0aGYtY29sb3ItMDVcIj48L3NwYW4+IGBjb2xvci0wNWBcbiAgICpcbiAgICogPHNwYW4gY2xhc3M9XCJkb3QgdGhmLWNvbG9yLTA2XCI+PC9zcGFuPiBgY29sb3ItMDZgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHRoZi1jb2xvci0wN1wiPjwvc3Bhbj4gYGNvbG9yLTA3YFxuICAgKlxuICAgKiA8c3BhbiBjbGFzcz1cImRvdCB0aGYtY29sb3ItMDhcIj48L3NwYW4+IGBjb2xvci0wOGBcbiAgICpcbiAgICogPHNwYW4gY2xhc3M9XCJkb3QgdGhmLWNvbG9yLTA5XCI+PC9zcGFuPiBgY29sb3ItMDlgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHRoZi1jb2xvci0xMFwiPjwvc3Bhbj4gYGNvbG9yLTEwYFxuICAgKlxuICAgKiA8c3BhbiBjbGFzcz1cImRvdCB0aGYtY29sb3ItMTFcIj48L3NwYW4+IGBjb2xvci0xMWBcbiAgICpcbiAgICogPHNwYW4gY2xhc3M9XCJkb3QgdGhmLWNvbG9yLTEyXCI+PC9zcGFuPiBgY29sb3ItMTJgXG4gICAqXG4gICAqIEBkZWZhdWx0IGBjb2xvci0wN2BcbiAgICovXG4gIEBJbnB1dCgndC1jb2xvcicpIHNldCBjb2xvcih2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fY29sb3IgPSBUSEZfQkFER0VfQ09MT1JTLmluY2x1ZGVzKHZhbHVlKSA/IHZhbHVlIDogVEhGX0JBREdFX0NPTE9SX0RFRkFVTFQ7XG4gIH1cblxuICBnZXQgY29sb3IoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fY29sb3I7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE7Dum1lcm8gZXhpYmlkbyBubyBjb21wb25lbnRlLCBjYXNvIG8gbWVzbW8gc2VqYSBtYWlvciBxdWUgOTkgbyB2YWxvciBleGliaWRvIHNlcsOhIDk5Ky5cbiAgICovXG4gIEBJbnB1dCgndC12YWx1ZScpIHNldCB2YWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fdmFsdWUgPSBjb252ZXJ0VG9JbnQodmFsdWUpO1xuICAgIHRoaXMuc2V0QmFkZ2VWYWx1ZSh0aGlzLl92YWx1ZSk7XG4gIH1cblxuICBnZXQgdmFsdWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBwcml2YXRlIHNldEJhZGdlVmFsdWUodmFsdWU6IG51bWJlcikge1xuICAgIGNvbnN0IHZhbGlkUmFuZ2VWYWx1ZSA9ICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkgJiYgKHZhbHVlID49IDAgJiYgdmFsdWUgPCAxMDApO1xuICAgIHRoaXMuYmFkZ2VWYWx1ZSA9IHZhbGlkUmFuZ2VWYWx1ZSA/IHZhbHVlLnRvU3RyaW5nKCkgOiB2YWx1ZSA+IDk5ID8gJzk5KycgOiB1bmRlZmluZWQ7XG4gIH1cblxufVxuIl19