/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Renderer2, ViewChild } from '@angular/core';
import { animate, AnimationBuilder, keyframes, style } from '@angular/animations';
import { ThfNavbarBaseComponent } from './thf-navbar-base.component';
import { ThfNavbarItemsComponent } from './thf-navbar-items/thf-navbar-items.component';
/**
 * \@docsExtends ThfNavbarBaseComponent
 */
export class ThfNavbarComponent extends ThfNavbarBaseComponent {
    /**
     * @param {?} renderer
     * @param {?} builder
     * @param {?} changeDetector
     */
    constructor(renderer, builder, changeDetector) {
        super();
        this.renderer = renderer;
        this.builder = builder;
        this.changeDetector = changeDetector;
        this.showItemsNavigation = false;
        this.offset = 0;
        this.windowResizeListener = this.renderer.listen(window, 'resize', this.displayItemsNavigation.bind(this));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.displayItemsNavigation();
        this.menuWrapperAdjust();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.mediaQuery) {
            this.mediaQuery.removeListener();
        }
    }
    /**
     * @param {?} orientation
     * @return {?}
     */
    navigateItems(orientation) {
        orientation === 'left' ? this.navigateLeft() : this.navigateRight();
        this.animate(this.offset);
    }
    /**
     * @private
     * @return {?}
     */
    adjustNavbarMenu() {
        /** @type {?} */
        const navbarMenu = document.querySelector('thf-navbar thf-menu');
        /** @type {?} */
        const page = document.querySelector('.thf-page');
        /** @type {?} */
        const navbarLogo = document.querySelector('.thf-navbar-logo');
        navbarMenu.setAttribute('style', `display: none`);
        if (page) {
            page.setAttribute('style', 'margin-left: 0; width: 100%');
        }
        if (navbarLogo) {
            navbarLogo.setAttribute('style', `padding: 0 16px 0 0!important`);
        }
        this.mediaQuery.addListener((/**
         * @param {?} changed
         * @return {?}
         */
        changed => {
            if (changed.matches) {
                navbarMenu.setAttribute('style', `display: block`);
                if (page) {
                    page.setAttribute('style', 'margin-left: 256; width: calc(100% - 256px)');
                }
            }
            else {
                navbarMenu.setAttribute('style', `display: none`);
                if (page) {
                    page.setAttribute('style', 'margin-left: 0; width: 100%');
                }
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    adjustUserMenu() {
        /** @type {?} */
        const userMenuItems = this.menu.menus;
        this.mediaQuery.addListener((/**
         * @param {?} changed
         * @return {?}
         */
        changed => {
            if (changed.matches) {
                /** @type {?} */
                const subItems = [{ label: this.literals.navbarLinks, subItems: this.items }];
                this.menu.menus = [...subItems, ...this.menu.menus];
            }
            else {
                this.menu.menus = userMenuItems;
            }
        }));
    }
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    animate(offset) {
        /** @type {?} */
        const animation = this.buildTransitionAnimation(offset);
        this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);
        this.player.play();
    }
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    buildTransitionAnimation(offset) {
        return this.builder.build([
            animate('250ms ease', keyframes([style({ transform: `translateX(${offset}px)` })]))
        ]);
    }
    /**
     * @private
     * @return {?}
     */
    displayItemsNavigation() {
        this.navbarItemsWidth = this.navbarItemsElement.nativeElement.offsetWidth;
        this.allNavbarItemsWidth =
            this.navbarItems.allNavbarItems.reduce((/**
             * @param {?} previous
             * @param {?} current
             * @return {?}
             */
            (previous, current) => previous + current.nativeElement.offsetWidth), 0);
        this.showItemsNavigation = this.navbarItemsWidth < this.allNavbarItemsWidth + 88;
        this.changeDetector.detectChanges();
        if (this.offset !== 0) {
            this.offset = 0;
            this.animate(this.offset);
        }
    }
    /**
     * @private
     * @return {?}
     */
    menuWrapperAdjust() {
        /** @type {?} */
        const body = document.querySelector('body');
        body.setAttribute('style', `height: calc(100% - 56px)`);
        this.mediaQuery = window.matchMedia('(max-width: 768px)');
        !this.menu ? this.adjustNavbarMenu() : this.adjustUserMenu();
    }
    /**
     * @private
     * @return {?}
     */
    navigateRight() {
        /** @type {?} */
        const maxAllowedOffset = this.allNavbarItemsWidth - this.navbarItemsElement.nativeElement.offsetWidth;
        /** @type {?} */
        const itemBreakPoint = (this.offset * -1) + this.navbarItemsElement.nativeElement.offsetWidth;
        /** @type {?} */
        let movementInPixels = 0;
        this.navbarItems.allNavbarItems.some((/**
         * @param {?} navbarItem
         * @return {?}
         */
        navbarItem => {
            /** @type {?} */
            const finalPosition = navbarItem.nativeElement.offsetWidth + navbarItem.nativeElement.offsetLeft;
            if (itemBreakPoint < finalPosition) {
                movementInPixels = navbarItem.nativeElement.offsetLeft;
                return true;
            }
        }));
        this.offset = (movementInPixels * -1);
        if ((this.offset * -1) >= maxAllowedOffset) {
            this.offset = maxAllowedOffset * -1;
            this.disableRight = true;
        }
    }
    /**
     * @private
     * @return {?}
     */
    navigateLeft() {
        this.disableRight = false;
        /** @type {?} */
        let movementInPixels;
        this.navbarItems.allNavbarItems.some((/**
         * @param {?} navbarItem
         * @return {?}
         */
        navbarItem => {
            /** @type {?} */
            const navbarItemOffset = navbarItem.nativeElement.offsetLeft;
            if (navbarItemOffset >= (this.offset * -1)) {
                movementInPixels = navbarItemOffset - (this.navbarItemsElement.nativeElement.offsetWidth - navbarItem.nativeElement.offsetWidth);
                return true;
            }
        }));
        this.offset = (movementInPixels * -1);
        if (this.offset > 0) {
            this.offset = 0;
        }
    }
}
ThfNavbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-navbar',
                template: "<header class=\"thf-navbar\"\n  [ngClass]=\"{'thf-navbar-shadow' : shadow}\">\n\n  <thf-navbar-logo\n    class=\"thf-navbar-logo\"\n    [t-logo]=\"logo\">\n  </thf-navbar-logo>\n\n  <thf-navbar-items\n    class=\"thf-navbar-items\"\n    [t-items]=\"items\">\n  </thf-navbar-items>\n\n  <thf-navbar-item-navigation *ngIf=\"showItemsNavigation\"\n    class=\"thf-navbar-item-navigation\"\n    [t-disable-left]=\"offset === 0\"\n    [t-disable-right]=\"disableRight && offset !== 0\"\n    (t-click)=\"navigateItems($event)\">\n  </thf-navbar-item-navigation>\n\n  <thf-navbar-actions\n    class=\"thf-navbar-actions\"\n    [t-icon-actions]=\"iconActions\">\n  </thf-navbar-actions>\n\n</header>\n\n<thf-menu *ngIf=\"!menu\"\n  [t-menus]=\"items\">\n</thf-menu>\n"
            }] }
];
/** @nocollapse */
ThfNavbarComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: AnimationBuilder },
    { type: ChangeDetectorRef }
];
ThfNavbarComponent.propDecorators = {
    navbarItemsElement: [{ type: ViewChild, args: [ThfNavbarItemsComponent, { read: ElementRef, static: true },] }],
    navbarItems: [{ type: ViewChild, args: [ThfNavbarItemsComponent, { static: true },] }]
};
if (false) {
    /** @type {?} */
    ThfNavbarComponent.prototype.disableRight;
    /** @type {?} */
    ThfNavbarComponent.prototype.showItemsNavigation;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.allNavbarItemsWidth;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.mediaQuery;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.navbarItemsWidth;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.offset;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.player;
    /**
     * @type {?}
     * @protected
     */
    ThfNavbarComponent.prototype.windowResizeListener;
    /** @type {?} */
    ThfNavbarComponent.prototype.navbarItemsElement;
    /** @type {?} */
    ThfNavbarComponent.prototype.navbarItems;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.builder;
    /**
     * @type {?}
     * @private
     */
    ThfNavbarComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,