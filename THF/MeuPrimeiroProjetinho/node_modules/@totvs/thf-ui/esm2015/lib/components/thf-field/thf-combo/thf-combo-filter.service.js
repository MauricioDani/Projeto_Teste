/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço padrão utilizado para filtrar os dados do componente thf-combo.
 */
export class ThfComboFilterService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.fieldLabel = 'label';
        this.fieldValue = 'value';
    }
    /**
     * @return {?}
     */
    get url() { return this._url; }
    /**
     * @param {?} param
     * @param {?=} filterParams
     * @return {?}
     */
    getFilteredData(param, filterParams) {
        /** @type {?} */
        const value = param.value;
        /** @type {?} */
        const params = new HttpParams({
            fromString: `filter=${value}`
        });
        return this.http.get(`${this.url}`, { responseType: 'json', params: params })
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => this.parseToArrayComboOption(response.items))));
    }
    /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    getObjectByValue(value, filterParams) {
        return this.http.get(`${this.url}/${value}`).pipe(map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.parseToComboOption(item))));
    }
    /**
     * @param {?} url
     * @param {?} fieldLabel
     * @param {?} fieldValue
     * @return {?}
     */
    configProperties(url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    }
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    parseToArrayComboOption(items) {
        if (items && items.length > 0) {
            return items.map((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                return this.parseToComboOption(item);
            }));
        }
        return [];
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    parseToComboOption(item) {
        if (item && item[this.fieldValue]) {
            /** @type {?} */
            const label = item[this.fieldLabel];
            /** @type {?} */
            const value = item[this.fieldValue];
            return { label, value };
        }
    }
}
ThfComboFilterService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfComboFilterService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfComboFilterService.prototype._url;
    /** @type {?} */
    ThfComboFilterService.prototype.fieldLabel;
    /** @type {?} */
    ThfComboFilterService.prototype.fieldValue;
    /**
     * @type {?}
     * @private
     */
    ThfComboFilterService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWNvbWJvLWZpbHRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1maWVsZC90aGYtY29tYm8vdGhmLWNvbWJvLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7OztBQWNyQyxNQUFNLE9BQU8scUJBQXFCOzs7O0lBU2hDLFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFMcEMsZUFBVSxHQUFXLE9BQU8sQ0FBQztRQUM3QixlQUFVLEdBQVcsT0FBTyxDQUFDO0lBSVcsQ0FBQzs7OztJQUZ6QyxJQUFJLEdBQUcsS0FBYSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDOzs7Ozs7SUFJdkMsZUFBZSxDQUFDLEtBQVUsRUFBRSxZQUFrQjs7Y0FDdEMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLOztjQUVuQixNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUM7WUFDNUIsVUFBVSxFQUFFLFVBQVUsS0FBSyxFQUFFO1NBQzlCLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFDLENBQUM7YUFDeEUsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxDQUFDLFFBQXFCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ3hGLENBQUM7Ozs7OztJQUVELGdCQUFnQixDQUFDLEtBQXNCLEVBQUUsWUFBa0I7UUFDekQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRzs7OztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNoRyxDQUFDOzs7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsR0FBVyxFQUFFLFVBQWtCLEVBQUUsVUFBa0I7UUFDbEUsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDaEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDL0IsQ0FBQzs7Ozs7O0lBRU8sdUJBQXVCLENBQUMsS0FBaUI7UUFDL0MsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFFN0IsT0FBTyxLQUFLLENBQUMsR0FBRzs7OztZQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN0QixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2QyxDQUFDLEVBQUMsQ0FBQztTQUVKO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDOzs7Ozs7SUFFTyxrQkFBa0IsQ0FBQyxJQUFTO1FBQ2xDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7O2tCQUUzQixLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7O2tCQUM3QixLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7WUFFbkMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQztTQUN6QjtJQUNILENBQUM7OztZQXJERixVQUFVOzs7O1lBakJGLFVBQVU7Ozs7Ozs7SUFvQmpCLHFDQUFxQjs7SUFFckIsMkNBQTZCOztJQUM3QiwyQ0FBNkI7Ozs7O0lBSWpCLHFDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgVGhmQ29tYm9GaWx0ZXIgfSBmcm9tICcuL2ludGVyZmFjZXMvdGhmLWNvbWJvLWZpbHRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGhmQ29tYm9PcHRpb24gfSBmcm9tICcuL2ludGVyZmFjZXMvdGhmLWNvbWJvLW9wdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGhmUmVzcG9uc2UgfSBmcm9tICcuL2ludGVyZmFjZXMvdGhmLXJlc3BvbnNlLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2VydmnDp28gcGFkcsOjbyB1dGlsaXphZG8gcGFyYSBmaWx0cmFyIG9zIGRhZG9zIGRvIGNvbXBvbmVudGUgdGhmLWNvbWJvLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGhmQ29tYm9GaWx0ZXJTZXJ2aWNlIGltcGxlbWVudHMgVGhmQ29tYm9GaWx0ZXIge1xuXG4gIHByaXZhdGUgX3VybDogc3RyaW5nO1xuXG4gIGZpZWxkTGFiZWw6IHN0cmluZyA9ICdsYWJlbCc7XG4gIGZpZWxkVmFsdWU6IHN0cmluZyA9ICd2YWx1ZSc7XG5cbiAgZ2V0IHVybCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5fdXJsOyB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7IH1cblxuICBnZXRGaWx0ZXJlZERhdGEocGFyYW06IGFueSwgZmlsdGVyUGFyYW1zPzogYW55KTogT2JzZXJ2YWJsZTxBcnJheTxUaGZDb21ib09wdGlvbj4+IHtcbiAgICBjb25zdCB2YWx1ZSA9IHBhcmFtLnZhbHVlO1xuXG4gICAgY29uc3QgcGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoe1xuICAgICAgZnJvbVN0cmluZzogYGZpbHRlcj0ke3ZhbHVlfWBcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGAke3RoaXMudXJsfWAsIHtyZXNwb25zZVR5cGU6ICdqc29uJywgcGFyYW1zOiBwYXJhbXN9KVxuICAgICAgLnBpcGUobWFwKChyZXNwb25zZTogVGhmUmVzcG9uc2UpID0+IHRoaXMucGFyc2VUb0FycmF5Q29tYm9PcHRpb24ocmVzcG9uc2UuaXRlbXMpKSk7XG4gIH1cblxuICBnZXRPYmplY3RCeVZhbHVlKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIsIGZpbHRlclBhcmFtcz86IGFueSk6IE9ic2VydmFibGU8VGhmQ29tYm9PcHRpb24+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldChgJHt0aGlzLnVybH0vJHt2YWx1ZX1gKS5waXBlKG1hcChpdGVtID0+IHRoaXMucGFyc2VUb0NvbWJvT3B0aW9uKGl0ZW0pKSk7XG4gIH1cblxuICBjb25maWdQcm9wZXJ0aWVzKHVybDogc3RyaW5nLCBmaWVsZExhYmVsOiBzdHJpbmcsIGZpZWxkVmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3VybCA9IHVybDtcbiAgICB0aGlzLmZpZWxkTGFiZWwgPSBmaWVsZExhYmVsO1xuICAgIHRoaXMuZmllbGRWYWx1ZSA9IGZpZWxkVmFsdWU7XG4gIH1cblxuICBwcml2YXRlIHBhcnNlVG9BcnJheUNvbWJvT3B0aW9uKGl0ZW1zOiBBcnJheTxhbnk+KTogQXJyYXk8VGhmQ29tYm9PcHRpb24+IHtcbiAgICBpZiAoaXRlbXMgJiYgaXRlbXMubGVuZ3RoID4gMCkge1xuXG4gICAgICByZXR1cm4gaXRlbXMubWFwKGl0ZW0gPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRvQ29tYm9PcHRpb24oaXRlbSk7XG4gICAgICB9KTtcblxuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VUb0NvbWJvT3B0aW9uKGl0ZW06IGFueSk6IFRoZkNvbWJvT3B0aW9uIHtcbiAgICBpZiAoaXRlbSAmJiBpdGVtW3RoaXMuZmllbGRWYWx1ZV0pIHtcblxuICAgICAgY29uc3QgbGFiZWwgPSBpdGVtW3RoaXMuZmllbGRMYWJlbF07XG4gICAgICBjb25zdCB2YWx1ZSA9IGl0ZW1bdGhpcy5maWVsZFZhbHVlXTtcblxuICAgICAgcmV0dXJuIHsgbGFiZWwsIHZhbHVlIH07XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==