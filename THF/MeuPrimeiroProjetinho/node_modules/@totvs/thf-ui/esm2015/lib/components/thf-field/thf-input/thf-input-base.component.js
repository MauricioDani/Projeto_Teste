/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { requiredFailed, maxlengthFailed, minlengthFailed, patternFailed } from './../validators';
import { ThfMask } from './thf-mask';
/**
 * \@description
 *
 * Este é um componente baseado em input, com várias propriedades do input nativo e outras
 * propriedades extras como: máscara, pattern, mensagem de erro e etc.
 * Você deve informar a variável que contém o valor como [(ngModel)]="variavel", para que o
 * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).
 * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.
 *
 * Importante:
 *
 * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então você precisa informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * Exemplo: [(ngModel)]="pessoa.nome" [ngModelOptions]="{standalone: true}"
 * @abstract
 */
export class ThfInputBaseComponent {
    constructor() {
        this._placeholder = '';
        this.passedWriteValue = false;
        /**
         * \@description
         *
         * Se verdadeiro, desabilita o campo.
         *
         * \@default `false`
         */
        this.disabled = false;
        /**
         * Indica que o campo será somente leitura.
         */
        this.readonly = false;
        /**
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * > Esta propriedade é desconsiderada quando o input está desabilitado `(t-disabled)`.
         *
         * \@default `false`
         */
        this.required = false;
        /**
         * Se verdadeiro, o campo iniciará com foco.
         */
        this.focus = false;
        /**
         * Se verdadeiro, o campo receberá um botão para ser limpo.
         */
        this.clean = false;
        /**
         * \@description
         *
         * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
         *
         * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
         */
        this.errorPattern = '';
        /**
         * \@description
         *
         * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
         * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
         * através da propriedade t-pattern.
         * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
         * mesmo quando desabilitado.
         */
        this.mask = '';
        /**
         * \@description
         *
         * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
         *
         * \@default `false`
         */
        this.maskFormatModel = false;
        /**
         * Evento disparado ao sair do campo.
         */
        this.blur = new EventEmitter();
        /**
         * Evento disparado ao entrar do campo.
         */
        this.enter = new EventEmitter();
        /**
         * Evento disparado ao alterar valor e deixar o campo.
         */
        this.change = new EventEmitter();
        /**
         * Evento disparado ao alterar valor do model.
         */
        this.changeModel = new EventEmitter();
        this.onChangePropagate = null;
        this.onTouched = null;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     *
     * \@default ''
     * @param {?} value
     * @return {?}
     */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    /**
     * @return {?}
     */
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    set setDisabled(disabled) {
        this.disabled = disabled === '' ? true : convertToBoolean(disabled);
        this.validateModel();
    }
    /**
     * @param {?} readonly
     * @return {?}
     */
    set setReadonly(readonly) {
        this.readonly = readonly === '' ? true : convertToBoolean(readonly);
    }
    /**
     * @param {?} required
     * @return {?}
     */
    set setRequired(required) {
        this.required = required === '' ? true : convertToBoolean(required);
        this.validateModel();
    }
    /**
     * @param {?} focus
     * @return {?}
     */
    set setFocus(focus) {
        this.focus = focus === '' ? true : convertToBoolean(focus);
    }
    /**
     * @param {?} clean
     * @return {?}
     */
    set setClean(clean) {
        this.clean = clean === '' ? true : convertToBoolean(clean);
    }
    /**
     * @param {?} pattern
     * @return {?}
     */
    set setPattern(pattern) {
        this.pattern = pattern;
        this.validateModel();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica a quantidade máxima de caracteres que o campo aceita.
     * @param {?} value
     * @return {?}
     */
    set maxlength(value) {
        if (!isNaN(parseInt((/** @type {?} */ (value)), 10))) {
            this._maxlength = parseInt((/** @type {?} */ (value)), 10);
            this.validateModel();
        }
        else if (!value) {
            this._maxlength = undefined;
            this.validateModel();
        }
    }
    /**
     * @return {?}
     */
    get maxlength() {
        return this._maxlength;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica a quantidade mínima de caracteres que o campo aceita.
     * @param {?} value
     * @return {?}
     */
    set minlength(value) {
        if (!isNaN(parseInt((/** @type {?} */ (value)), 10))) {
            this._minlength = parseInt((/** @type {?} */ (value)), 10);
            this.validateModel();
        }
        else if (!value) {
            this._minlength = undefined;
            this.validateModel();
        }
    }
    /**
     * @return {?}
     */
    get minlength() {
        return this._minlength;
    }
    /**
     * @param {?} mask
     * @return {?}
     */
    set setMask(mask) {
        this.mask = mask;
        // Atualiza Máscara do Campo
        this.objMask = new ThfMask(this.mask, this.maskFormatModel);
        this.validateModel();
    }
    /**
     * @param {?} maskFormatModel
     * @return {?}
     */
    set setMaskFormatModel(maskFormatModel) {
        this.maskFormatModel = maskFormatModel === '' ? true : convertToBoolean(maskFormatModel);
        if (this.objMask instanceof ThfMask) {
            this.objMask.formatModel = this.maskFormatModel;
            this.validateModel();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    callOnChange(value) {
        this.updateModel(value);
        this.controlChangeModelEmitter(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    callUpdateModelWithTimeout(value) {
        setTimeout((/**
         * @return {?}
         */
        () => this.updateModel(value)));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    controlChangeModelEmitter(value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    registerOnTouched(func) {
        this.onTouched = func;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateModel(value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        if (requiredFailed(this.required, this.disabled, this.getScreenValue())) {
            return { required: {
                    valid: false,
                } };
        }
        if (maxlengthFailed(this.maxlength, this.getScreenValue())) {
            return { maxlength: {
                    valid: false,
                } };
        }
        if (minlengthFailed(this.minlength, this.getScreenValue())) {
            return { minlength: {
                    valid: false,
                } };
        }
        if (patternFailed(this.pattern, c.value)) {
            this.validatePatternOnWriteValue(c.value);
            return { pattern: {
                    valid: false,
                } };
        }
        return this.extraValidation(c);
    }
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.writeValueModel(value);
    }
    /**
     * @protected
     * @return {?}
     */
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
    // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    validatePatternOnWriteValue(value) {
        if (value && this.passedWriteValue) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.updateModel(value);
            }));
            this.passedWriteValue = false;
        }
    }
}
ThfInputBaseComponent.propDecorators = {
    icon: [{ type: Input, args: ['t-icon',] }],
    label: [{ type: Input, args: ['t-label',] }],
    help: [{ type: Input, args: ['t-help',] }],
    name: [{ type: Input, args: ['name',] }],
    placeholder: [{ type: Input, args: ['t-placeholder',] }],
    setDisabled: [{ type: Input, args: ['t-disabled',] }],
    setReadonly: [{ type: Input, args: ['t-readonly',] }],
    setRequired: [{ type: Input, args: ['t-required',] }],
    setFocus: [{ type: Input, args: ['t-focus',] }],
    setClean: [{ type: Input, args: ['t-clean',] }],
    setPattern: [{ type: Input, args: ['t-pattern',] }],
    errorPattern: [{ type: Input, args: ['t-error-pattern',] }],
    maxlength: [{ type: Input, args: ['t-maxlength',] }],
    minlength: [{ type: Input, args: ['t-minlength',] }],
    setMask: [{ type: Input, args: ['t-mask',] }],
    setMaskFormatModel: [{ type: Input, args: ['t-mask-format-model',] }],
    optional: [{ type: Input, args: ['t-optional',] }],
    blur: [{ type: Output, args: ['t-blur',] }],
    enter: [{ type: Output, args: ['t-enter',] }],
    change: [{ type: Output, args: ['t-change',] }],
    changeModel: [{ type: Output, args: ['t-change-model',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfInputBaseComponent.prototype._maxlength;
    /**
     * @type {?}
     * @private
     */
    ThfInputBaseComponent.prototype._minlength;
    /**
     * @type {?}
     * @private
     */
    ThfInputBaseComponent.prototype._placeholder;
    /**
     * @type {?}
     * @protected
     */
    ThfInputBaseComponent.prototype.passedWriteValue;
    /**
     * @type {?}
     * @protected
     */
    ThfInputBaseComponent.prototype.validatorChange;
    /**
     * \@optional
     *
     * \@description
     *
     * Define o ícone que será exibido no início do campo.
     *
     * > Veja a disponibilidade de ícones em [biblioteca de ícones](guides/icons).
     * @type {?}
     */
    ThfInputBaseComponent.prototype.icon;
    /**
     * Rótulo do campo.
     * @type {?}
     */
    ThfInputBaseComponent.prototype.label;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    ThfInputBaseComponent.prototype.help;
    /**
     * Nome e identificador do campo.
     * @type {?}
     */
    ThfInputBaseComponent.prototype.name;
    /**
     * \@description
     *
     * Se verdadeiro, desabilita o campo.
     *
     * \@default `false`
     * @type {?}
     */
    ThfInputBaseComponent.prototype.disabled;
    /**
     * Indica que o campo será somente leitura.
     * @type {?}
     */
    ThfInputBaseComponent.prototype.readonly;
    /**
     * \@description
     *
     * Indica que o campo será obrigatório.
     *
     * > Esta propriedade é desconsiderada quando o input está desabilitado `(t-disabled)`.
     *
     * \@default `false`
     * @type {?}
     */
    ThfInputBaseComponent.prototype.required;
    /**
     * Se verdadeiro, o campo iniciará com foco.
     * @type {?}
     */
    ThfInputBaseComponent.prototype.focus;
    /**
     * Se verdadeiro, o campo receberá um botão para ser limpo.
     * @type {?}
     */
    ThfInputBaseComponent.prototype.clean;
    /**
     * \@description
     *
     * Expressão regular para validar o campo.
     * Quando o campo possuir uma máscara `(t-mask)` será automaticamente validado por ela, porém
     * é possível definir um t-pattern para substituir a validação da máscara.
     * @type {?}
     */
    ThfInputBaseComponent.prototype.pattern;
    /**
     * \@description
     *
     * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
     *
     * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
     * @type {?}
     */
    ThfInputBaseComponent.prototype.errorPattern;
    /**
     * \@description
     *
     * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
     * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
     * através da propriedade t-pattern.
     * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
     * mesmo quando desabilitado.
     * @type {?}
     */
    ThfInputBaseComponent.prototype.mask;
    /**
     * \@description
     *
     * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
     *
     * \@default `false`
     * @type {?}
     */
    ThfInputBaseComponent.prototype.maskFormatModel;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `t-required`;
     * - Não possuir `t-help` e/ou `t-label`.
     *
     * \@default `false`
     * @type {?}
     */
    ThfInputBaseComponent.prototype.optional;
    /**
     * Evento disparado ao sair do campo.
     * @type {?}
     */
    ThfInputBaseComponent.prototype.blur;
    /**
     * Evento disparado ao entrar do campo.
     * @type {?}
     */
    ThfInputBaseComponent.prototype.enter;
    /**
     * Evento disparado ao alterar valor e deixar o campo.
     * @type {?}
     */
    ThfInputBaseComponent.prototype.change;
    /**
     * Evento disparado ao alterar valor do model.
     * @type {?}
     */
    ThfInputBaseComponent.prototype.changeModel;
    /** @type {?} */
    ThfInputBaseComponent.prototype.type;
    /** @type {?} */
    ThfInputBaseComponent.prototype.onChangePropagate;
    /** @type {?} */
    ThfInputBaseComponent.prototype.onTouched;
    /** @type {?} */
    ThfInputBaseComponent.prototype.objMask;
    /** @type {?} */
    ThfInputBaseComponent.prototype.modelLastUpdate;
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfInputBaseComponent.prototype.writeValueModel = function (value) { };
    /**
     * @abstract
     * @param {?} c
     * @return {?}
     */
    ThfInputBaseComponent.prototype.extraValidation = function (c) { };
    /**
     * @abstract
     * @return {?}
     */
    ThfInputBaseComponent.prototype.getScreenValue = function () { };
}
//# sourceMappingURL=data:application/json;base64,