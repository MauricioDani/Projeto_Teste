/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { Component, ElementRef, forwardRef, Input } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { ThfInputGeneric } from '../thf-input-generic/thf-input-generic';
/**
 * \@docsExtends ThfInputBaseComponent
 *
 * \@description
 * O thf-password é um input específico para senhas. Já possui tipo, estilo e ícone predefinidos.
 *
 * \@example
 *
 * <example name="thf-password-basic" title="Totvs Password Basic">
 *   <file name="sample-thf-password-basic/sample-thf-password-basic.component.html"> </file>
 *   <file name="sample-thf-password-basic/sample-thf-password-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-password-labs" title="Totvs Password Labs">
 *   <file name="sample-thf-password-labs/sample-thf-password-labs.component.html"> </file>
 *   <file name="sample-thf-password-labs/sample-thf-password-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-password-reset" title="Totvs Password - Reset">
 *   <file name="sample-thf-password-reset/sample-thf-password-reset.component.html"> </file>
 *   <file name="sample-thf-password-reset/sample-thf-password-reset.component.ts"> </file>
 * </example>
 */
export class ThfPasswordComponent extends ThfInputGeneric {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
        this._hidePasswordPeek = false;
        this.type = 'password';
        this.visiblePassword = false;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Permite esconder a função de espiar a senha digitada.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set hidePasswordPeek(value) {
        this._hidePasswordPeek = convertToBoolean(value);
        if (value) {
            this.visiblePassword = false;
            this.type = 'password';
        }
    }
    /**
     * @return {?}
     */
    get hidePasswordPeek() {
        return this._hidePasswordPeek;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    extraValidation(c) {
        return null;
    }
    /**
     * @return {?}
     */
    showPassword() {
        this.visiblePassword = !this.visiblePassword;
        this.type = this.type === 'password' ? 'text' : 'password';
    }
}
ThfPasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-password',
                template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n    <div class=\"thf-field-icon-container-left\">\n      <span class=\"thf-icon thf-field-icon thf-icon-lock\"\n        [class.thf-field-icon-disabled]=\"disabled\">\n      </span>\n    </div>\n\n    <input #inp\n      class=\"thf-input thf-input-icon-left\"\n      [attr.name]=\"name\"\n      [class.thf-input-double-icon-right]=\"clean && inp.value && !hidePasswordPeek\"\n      [class.thf-input-icon-right]=\"clean || !hidePasswordPeek\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"disabled ? 'password' : type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <thf-clean\n        class=\"thf-icon thf-field-icon\"\n        [t-element-ref]=\"inputEl\"\n        (t-change-event)=\"clear($event)\">\n      </thf-clean>\n\n      <span *ngIf=\"!hidePasswordPeek && !disabled\"\n        class=\"thf-icon thf-field-icon\"\n        [ngClass]=\"visiblePassword ? 'thf-icon-eye' : 'thf-icon-eye-off thf-field-icon-disabled'\"\n        (click)=\"showPassword()\">\n      </span>\n    </div>\n  </div>\n\n  <thf-field-container-bottom\n    [t-error-pattern]=\"getErrorPattern()\">\n  </thf-field-container-bottom>\n\n</thf-field-container>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfPasswordComponent)),
                        multi: true,
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfPasswordComponent)),
                        multi: true,
                    }
                ]
            }] }
];
/** @nocollapse */
ThfPasswordComponent.ctorParameters = () => [
    { type: ElementRef }
];
ThfPasswordComponent.propDecorators = {
    hidePasswordPeek: [{ type: Input, args: ['t-hide-password-peek',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPasswordComponent.prototype._hidePasswordPeek;
    /** @type {?} */
    ThfPasswordComponent.prototype.type;
    /** @type {?} */
    ThfPasswordComponent.prototype.visiblePassword;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhc3N3b3JkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtZmllbGQvdGhmLXBhc3N3b3JkL3RoZi1wYXNzd29yZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBbUIsYUFBYSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkYsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdDekUsTUFBTSxPQUFPLG9CQUFxQixTQUFRLGVBQWU7Ozs7SUE0QnZELFlBQVksRUFBYztRQUN4QixLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUEzQkosc0JBQWlCLEdBQWEsS0FBSyxDQUFDO1FBRTVDLFNBQUksR0FBRyxVQUFVLENBQUM7UUFDbEIsb0JBQWUsR0FBRyxLQUFLLENBQUM7SUF5QnhCLENBQUM7Ozs7Ozs7Ozs7OztJQWRELElBQW1DLGdCQUFnQixDQUFDLEtBQWM7UUFDaEUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pELElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7WUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7U0FDeEI7SUFDSCxDQUFDOzs7O0lBRUQsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFNRCxlQUFlLENBQUMsQ0FBa0I7UUFDaEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7O0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQzdDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO0lBQzdELENBQUM7OztZQXRERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLHlpREFBNEM7Z0JBQzVDLFNBQVMsRUFBRTtvQkFDWDt3QkFDRSxPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixFQUFDO3dCQUNuRCxLQUFLLEVBQUUsSUFBSTtxQkFDWjtvQkFDRDt3QkFDRSxPQUFPLEVBQUUsYUFBYTt3QkFDdEIsV0FBVyxFQUFFLFVBQVU7Ozt3QkFBQyxHQUFHLEVBQUUsQ0FBQyxvQkFBb0IsRUFBQzt3QkFDbkQsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQUM7YUFDSDs7OztZQTFDbUIsVUFBVTs7OytCQTJEM0IsS0FBSyxTQUFDLHNCQUFzQjs7Ozs7OztJQWQ3QixpREFBNEM7O0lBRTVDLG9DQUFrQjs7SUFDbEIsK0NBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBOR19WQUxJREFUT1JTLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgZm9yd2FyZFJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgVGhmSW5wdXRHZW5lcmljIH0gZnJvbSAnLi4vdGhmLWlucHV0LWdlbmVyaWMvdGhmLWlucHV0LWdlbmVyaWMnO1xuXG4vKipcbiAqIEBkb2NzRXh0ZW5kcyBUaGZJbnB1dEJhc2VDb21wb25lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE8gdGhmLXBhc3N3b3JkIMOpIHVtIGlucHV0IGVzcGVjw61maWNvIHBhcmEgc2VuaGFzLiBKw6EgcG9zc3VpIHRpcG8sIGVzdGlsbyBlIMOtY29uZSBwcmVkZWZpbmlkb3MuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwidGhmLXBhc3N3b3JkLWJhc2ljXCIgdGl0bGU9XCJUb3R2cyBQYXNzd29yZCBCYXNpY1wiPlxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1wYXNzd29yZC1iYXNpYy9zYW1wbGUtdGhmLXBhc3N3b3JkLWJhc2ljLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtcGFzc3dvcmQtYmFzaWMvc2FtcGxlLXRoZi1wYXNzd29yZC1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJ0aGYtcGFzc3dvcmQtbGFic1wiIHRpdGxlPVwiVG90dnMgUGFzc3dvcmQgTGFic1wiPlxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1wYXNzd29yZC1sYWJzL3NhbXBsZS10aGYtcGFzc3dvcmQtbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLXBhc3N3b3JkLWxhYnMvc2FtcGxlLXRoZi1wYXNzd29yZC1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1wYXNzd29yZC1yZXNldFwiIHRpdGxlPVwiVG90dnMgUGFzc3dvcmQgLSBSZXNldFwiPlxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1wYXNzd29yZC1yZXNldC9zYW1wbGUtdGhmLXBhc3N3b3JkLXJlc2V0LmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtcGFzc3dvcmQtcmVzZXQvc2FtcGxlLXRoZi1wYXNzd29yZC1yZXNldC5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aGYtcGFzc3dvcmQnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGhmLXBhc3N3b3JkLmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzOiBbXG4gIHtcbiAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaGZQYXNzd29yZENvbXBvbmVudCksXG4gICAgbXVsdGk6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFRoZlBhc3N3b3JkQ29tcG9uZW50KSxcbiAgICBtdWx0aTogdHJ1ZSxcbiAgfV1cbn0pXG5leHBvcnQgY2xhc3MgVGhmUGFzc3dvcmRDb21wb25lbnQgZXh0ZW5kcyBUaGZJbnB1dEdlbmVyaWMge1xuXG4gIHByaXZhdGUgX2hpZGVQYXNzd29yZFBlZWs/OiBib29sZWFuID0gZmFsc2U7XG5cbiAgdHlwZSA9ICdwYXNzd29yZCc7XG4gIHZpc2libGVQYXNzd29yZCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFBlcm1pdGUgZXNjb25kZXIgYSBmdW7Dp8OjbyBkZSBlc3BpYXIgYSBzZW5oYSBkaWdpdGFkYS5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCd0LWhpZGUtcGFzc3dvcmQtcGVlaycpIHNldCBoaWRlUGFzc3dvcmRQZWVrKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faGlkZVBhc3N3b3JkUGVlayA9IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy52aXNpYmxlUGFzc3dvcmQgPSBmYWxzZTtcbiAgICAgIHRoaXMudHlwZSA9ICdwYXNzd29yZCc7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGhpZGVQYXNzd29yZFBlZWsoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2hpZGVQYXNzd29yZFBlZWs7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZikge1xuICAgIHN1cGVyKGVsKTtcbiAgfVxuXG4gIGV4dHJhVmFsaWRhdGlvbihjOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueTsgfSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzaG93UGFzc3dvcmQoKSB7XG4gICAgdGhpcy52aXNpYmxlUGFzc3dvcmQgPSAhdGhpcy52aXNpYmxlUGFzc3dvcmQ7XG4gICAgdGhpcy50eXBlID0gdGhpcy50eXBlID09PSAncGFzc3dvcmQnID8gJ3RleHQnIDogJ3Bhc3N3b3JkJztcbiAgfVxuXG59XG4iXX0=