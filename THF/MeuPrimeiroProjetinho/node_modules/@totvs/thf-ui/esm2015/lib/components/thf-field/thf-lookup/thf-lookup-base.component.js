/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, isTypeof } from '../../../utils/util';
import { requiredFailed } from '../validators';
/**
 * \@description
 *
 * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviço. Nesta janela é possível buscar e
 * selecionar o registro que será enviado para o campo. O `thf-lookup` permite que o usuário digite um valor e pressione a tecla *TAB* para
 * buscar um registro.
 *
 * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo será limpado.
 * No segundo caso ocorrerá após este perder o foco; ambos os casos o campo ficará inválido quando requerido.
 *
 * Este componente não é recomendado quando a busca dos dados possuir poucas informações, para isso utilize outros componentes como o
 * `thf-select` ou o `thf-combo`.
 * @abstract
 */
export class ThfLookupBaseComponent {
    /**
     * @param {?} defaultService
     */
    constructor(defaultService) {
        this.defaultService = defaultService;
        this._disabled = false;
        this._focus = false;
        this._required = false;
        this.oldValue = '';
        this.onChangePropagate = null;
        // tslint:disable-next-line
        this.onTouched = null;
        /**
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         */
        this.placeholder = '';
        /**
         * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
         * Será passado por parâmetro o objeto de erro retornado.
         */
        this.onError = new EventEmitter();
        /**
         * Evento será disparado quando ocorrer alguma seleção.
         * Será passado por parâmetro o objeto com o valor selecionado.
         */
        this.selected = new EventEmitter();
    }
    /**
     * Serviço responsável por buscar os dados da tabela na janela. Pode ser informado um serviço que implemente a interface
     * `ThfLookupFilter` ou uma URL.
     *
     * Quando utilizada uma URL de um serviço, será concatenada nesta URL o valor que deseja-se filtrar, por exemplo:
     *
     * ```
     * url + ?page=1&pageSize=20&filter=Peter
     * ```
     *
     * Se for definido a propriedade `t-filter-params`, o mesmo também será concatenado. Por exemplo, para o
     * parâmetro `{ age: 23 }` a URL ficaria:
     *
     * ```
     * url + ?page=1&pageSize=20&age=23&filter=Peter
     * ```
     *
     * > Esta URL deve retornar e receber os dados no padrão de
     * [API da TOTVS](http://tdn.totvs.com/display/public/INT/Guia+de+implementacao+das+APIs+TOTVS) e utiliza os valores
     * definidos nas propriedades `t-field-label` e `t-field-value` para a construção do `thf-lookup`.
     * @param {?} filterService
     * @return {?}
     */
    set filterService(filterService) {
        this._filterService = filterService;
        this.setService(this.filterService);
    }
    /**
     * @return {?}
     */
    get filterService() {
        return this._filterService;
    }
    /**
     * \@optional
     * \@description
     *
     * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (t-disabled).
     *
     * \@default `false`
     * @param {?} required
     * @return {?}
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.valueToModel);
    }
    /**
     * @return {?}
     */
    get required() {
        return this._required;
    }
    /**
     * \@description
     *
     * Indica que o campo iniciará com foco.
     *
     * \@default false
     * \@optional
     * @param {?} focus
     * @return {?}
     */
    set focus(focus) {
        this._focus = (/** @type {?} */ (focus)) === '' ? true : convertToBoolean(focus);
    }
    /**
     * @return {?}
     */
    get focus() {
        return this._focus;
    }
    /**
     * \@description
     *
     * Indica que o campo será desabilitado.
     *
     * \@default false
     * \@optional
     * @param {?} disabled
     * @return {?}
     */
    set disabled(disabled) {
        this._disabled = (/** @type {?} */ (disabled)) === '' ? true : convertToBoolean(disabled);
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initializeColumn();
    }
    /**
     * @private
     * @return {?}
     */
    initializeColumn() {
        if (this.fieldLabel) {
            this.keysDescription = [this.fieldLabel];
        }
        else {
            this.keysDescription = [];
            this.keysDescription = this.columns.filter((/**
             * @param {?} element
             * @return {?}
             */
            element => element.fieldLabel))
                .map((/**
             * @param {?} element
             * @return {?}
             */
            element => element.property));
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    /**
     * @param {?} func
     * @return {?}
     */
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    /**
     * @param {?} func
     * @return {?}
     */
    registerOnTouched(func) {
        this.onTouched = func;
    }
    // Seleciona o valor do model.
    /**
     * @param {?} valueSelected
     * @return {?}
     */
    selectValue(valueSelected) {
        this.valueToModel = valueSelected[this.fieldValue];
        this.callOnChange(this.valueToModel);
        this.selected.emit(valueSelected);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    callOnChange(value) {
        // Quando o input não possui um formulário, então esta função não é registrada.
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    searchById(value) {
        if (typeof (value) === 'string') {
            value = value.trim();
        }
        if (value !== '') {
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams).subscribe((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (element) {
                    this.oldValue = element[this.fieldLabel];
                    this.selectValue(element);
                    this.setViewValue(this.getFormattedLabel(element), element);
                }
                else {
                    this.cleanModel();
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                this.cleanModel();
                this.onError.emit(error);
            }));
        }
        else {
            this.cleanModel();
        }
    }
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value && value instanceof Object) {
            // Esta condição é executada quando é retornado o objeto selecionado do componente Thf Lookup Modal.
            this.oldValue = value[this.fieldLabel];
            this.valueToModel = value[this.fieldValue];
            this.setViewValue(this.getFormattedLabel(value), value);
        }
        else if (value) {
            // Esta condição é executada somente quando é passado o ID para realizar a busca pelo ID.
            this.searchById(value);
        }
        else {
            this.cleanViewValue();
        }
    }
    /**
     * @protected
     * @return {?}
     */
    cleanModel() {
        this.cleanViewValue();
        this.callOnChange(undefined);
    }
    /**
     * @protected
     * @return {?}
     */
    cleanViewValue() {
        this.setViewValue('', {});
        this.oldValue = '';
        this.valueToModel = null;
    }
    // Formata a label do campo.
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    getFormattedLabel(value) {
        return value ? this.keysDescription.map((/**
         * @param {?} column
         * @return {?}
         */
        column => value[column])).join(' - ') : '';
    }
    // Chama o método writeValue e preenche o model.
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    selectModel(value) {
        this.writeValue(value);
        if (value && value instanceof Object) {
            this.selectValue(value);
        }
    }
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    /**
     * @private
     * @param {?} service
     * @return {?}
     */
    setService(service) {
        if (isTypeof(service, 'object')) {
            this.service = (/** @type {?} */ (service));
        }
        if (service && isTypeof(service, 'string')) {
            this.service = this.defaultService;
            this.service.setUrl(service);
        }
    }
}
ThfLookupBaseComponent.propDecorators = {
    label: [{ type: Input, args: ['t-label',] }],
    literals: [{ type: Input, args: ['t-literals',] }],
    help: [{ type: Input, args: ['t-help',] }],
    placeholder: [{ type: Input, args: ['t-placeholder',] }],
    name: [{ type: Input, args: ['name',] }],
    fieldValue: [{ type: Input, args: ['t-field-value',] }],
    fieldLabel: [{ type: Input, args: ['t-field-label',] }],
    filterParams: [{ type: Input, args: ['t-filter-params',] }],
    fieldFormat: [{ type: Input, args: ['t-field-format',] }],
    columns: [{ type: Input, args: ['t-columns',] }],
    filterService: [{ type: Input, args: ['t-filter-service',] }],
    optional: [{ type: Input, args: ['t-optional',] }],
    required: [{ type: Input, args: ['t-required',] }],
    focus: [{ type: Input, args: ['t-focus',] }],
    disabled: [{ type: Input, args: ['t-disabled',] }],
    onError: [{ type: Output, args: ['t-error',] }],
    selected: [{ type: Output, args: ['t-selected',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfLookupBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfLookupBaseComponent.prototype._filterService;
    /**
     * @type {?}
     * @private
     */
    ThfLookupBaseComponent.prototype._focus;
    /**
     * @type {?}
     * @private
     */
    ThfLookupBaseComponent.prototype._required;
    /**
     * @type {?}
     * @protected
     */
    ThfLookupBaseComponent.prototype.getSubscription;
    /**
     * @type {?}
     * @protected
     */
    ThfLookupBaseComponent.prototype.keysDescription;
    /**
     * @type {?}
     * @protected
     */
    ThfLookupBaseComponent.prototype.oldValue;
    /**
     * @type {?}
     * @protected
     */
    ThfLookupBaseComponent.prototype.valueToModel;
    /**
     * @type {?}
     * @private
     */
    ThfLookupBaseComponent.prototype.onChangePropagate;
    /**
     * @type {?}
     * @private
     */
    ThfLookupBaseComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    ThfLookupBaseComponent.prototype.validatorChange;
    /** @type {?} */
    ThfLookupBaseComponent.prototype.service;
    /**
     * Label do campo.
     *
     * > Quando utilizar esta propriedade o seu valor será utilizado como título da modal do componente caso não tenha
     * sido definido um `modalTitle` na propriedade `t-literals`.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.label;
    /**
     * \@description
     *
     * Objeto com as literais usadas no `thf-lookup`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: ThfLookupLiterals = {
     *    modalPrimaryActionLabel: 'Select',
     *    modalSecondaryActionLabel: 'Cancel',
     *    modalPlaceholder: 'Search Value',
     *    modalTableNoColumns: 'No columns',
     *    modalTableNoData: 'No data',
     *    modalTableLoadingData: 'Loading data',
     *    modalTableLoadMoreData: 'Load more',
     *    modalTitle: 'Select a user'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: ThfLookupLiterals = {
     *    modalPrimaryActionLabel: 'Select'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <thf-lookup
     *   [t-literals]="customLiterals">
     * </thf-lookup>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.literals;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.help;
    /**
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.placeholder;
    /**
     * Nome e Id do componente.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.name;
    /**
     * \@description
     *
     * Indica a coluna que será utilizada como valor do campo.
     *
     * > Atenção: Caso não seja passada ou tenha o conteúdo incorreto, não irá atualizar o model do formulário.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.fieldValue;
    /**
     * Indica a coluna que será utilizada como descrição do campo e como filtro dentro da janela.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.fieldLabel;
    /**
     * Valor que será repassado como parâmetro aos métodos do serviço que implementam a interface `ThfLookupFilter`.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.filterParams;
    /**
     * \@optional
     *
     * \@description
     *
     * Formato de exibição do campo.
     *
     * Recebe uma função que deve retornar uma *string* com o/os valores do objeto formatados para exibição, por exemplo:
     *
     * ```
     * fieldFormat(obj) {
     *   return `${obj.id} - ${obj.name}`;
     * }
     * ```
     * > Esta propriedade sobrepõe o valor da propriedade `t-field-label` na descrição do campo.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.fieldFormat;
    /**
     * Lista das colunas da tabela.
     * Essa propriedade deve receber um array de objetos que implementam a interface ThfLookupColumn.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.columns;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `t-required`;
     * - Não possuir `t-help` e/ou `t-label`.
     *
     * \@default `false`
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.optional;
    /**
     * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
     * Será passado por parâmetro o objeto de erro retornado.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.onError;
    /**
     * Evento será disparado quando ocorrer alguma seleção.
     * Será passado por parâmetro o objeto com o valor selecionado.
     * @type {?}
     */
    ThfLookupBaseComponent.prototype.selected;
    /**
     * @type {?}
     * @private
     */
    ThfLookupBaseComponent.prototype.defaultService;
    /**
     * @abstract
     * @param {?} value
     * @param {?} object
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.setViewValue = function (value, object) { };
    /**
     * @abstract
     * @return {?}
     */
    ThfLookupBaseComponent.prototype.openLookup = function () { };
}
//# sourceMappingURL=data:application/json;base64,