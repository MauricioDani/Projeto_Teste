/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, EventEmitter, Input, Output } from '@angular/core';
/**
 * \@docsPrivate
 *
 * Este componente é de uso interno utilizado por componentes de entrada de dados com o objetivo de resetar as informações do model.
 *
 * Por padrão limpa o valor do campo e executa o método onChangePropagate, caso tenha a necessidade de tratar a função de limpar o campo,
 * deve implementar a interface ThfClean.
 * @abstract
 */
export class ThfCleanBaseComponent {
    constructor() {
        /**
         * Valor que será atribuído ao campo quando for clicado no thf-clean.
         */
        this.defaultValue = '';
        /**
         * Evento disparado quando executada ação do thf-clean.
         * Este evento deve ser usado para avisar para o componente que está usando o thf-clean, que o botão foi disparado,
         * e provavelmente será preciso emitir o evento para atualizar o model.
         */
        this.changeEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    clear() {
        this.setInputValue(this.defaultValue);
        this.changeEvent.emit(this.defaultValue);
    }
    /**
     * @return {?}
     */
    showIcon() {
        return this.defaultValue !== this.getInputValue() && this.hasCleanAttr() && !this.isDisabled() && !this.isReadonly();
    }
    // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
    // ou seja, se o thf-clean deve ser usado.
    /**
     * @private
     * @return {?}
     */
    hasCleanAttr() {
        return this.parentComponent.clean;
    }
    // Este método verifica se o componente pai está desabilitado.
    /**
     * @private
     * @return {?}
     */
    isDisabled() {
        return this.parentComponent.disabled;
    }
    // Este método verifica se o componente pai está somente leitura.
    /**
     * @private
     * @return {?}
     */
    isReadonly() {
        return this.parentComponent.readonly;
    }
}
ThfCleanBaseComponent.propDecorators = {
    inputRef: [{ type: Input, args: ['t-element-ref',] }],
    defaultValue: [{ type: Input, args: ['t-default-value',] }],
    changeEvent: [{ type: Output, args: ['t-change-event',] }]
};
if (false) {
    /**
     * Nesta propriedade deve-se informar o elementRef do campo de entrada que utilizará o thf-clean.
     * @type {?}
     */
    ThfCleanBaseComponent.prototype.inputRef;
    /**
     * Valor que será atribuído ao campo quando for clicado no thf-clean.
     * @type {?}
     */
    ThfCleanBaseComponent.prototype.defaultValue;
    /**
     * Evento disparado quando executada ação do thf-clean.
     * Este evento deve ser usado para avisar para o componente que está usando o thf-clean, que o botão foi disparado,
     * e provavelmente será preciso emitir o evento para atualizar o model.
     * @type {?}
     */
    ThfCleanBaseComponent.prototype.changeEvent;
    /**
     * @type {?}
     * @protected
     */
    ThfCleanBaseComponent.prototype.parentComponent;
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    ThfCleanBaseComponent.prototype.setInputValue = function (value) { };
    /**
     * @abstract
     * @return {?}
     */
    ThfCleanBaseComponent.prototype.getInputValue = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWNsZWFuLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1maWVsZC90aGYtY2xlYW4vdGhmLWNsZWFuLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7O0FBVXhFLE1BQU0sT0FBZ0IscUJBQXFCO0lBQTNDOzs7O1FBTTRCLGlCQUFZLEdBQVksRUFBRSxDQUFDOzs7Ozs7UUFPM0IsZ0JBQVcsR0FBdUIsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQWlDdEYsQ0FBQzs7OztJQTdCQyxLQUFLO1FBQ0gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzNDLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdkgsQ0FBQzs7Ozs7OztJQUlPLFlBQVk7UUFDbEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQztJQUNwQyxDQUFDOzs7Ozs7SUFHTyxVQUFVO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUM7SUFDdkMsQ0FBQzs7Ozs7O0lBR08sVUFBVTtRQUNoQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDO0lBQ3ZDLENBQUM7Ozt1QkFyQ0EsS0FBSyxTQUFDLGVBQWU7MkJBR3JCLEtBQUssU0FBQyxpQkFBaUI7MEJBT3ZCLE1BQU0sU0FBQyxnQkFBZ0I7Ozs7Ozs7SUFWeEIseUNBQTZDOzs7OztJQUc3Qyw2Q0FBcUQ7Ozs7Ozs7SUFPckQsNENBQW9GOzs7OztJQUVwRixnREFBK0I7Ozs7OztJQTJCL0IscUVBQTRDOzs7OztJQUU1QyxnRUFBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgw6kgZGUgdXNvIGludGVybm8gdXRpbGl6YWRvIHBvciBjb21wb25lbnRlcyBkZSBlbnRyYWRhIGRlIGRhZG9zIGNvbSBvIG9iamV0aXZvIGRlIHJlc2V0YXIgYXMgaW5mb3JtYcOnw7VlcyBkbyBtb2RlbC5cbiAqXG4gKiBQb3IgcGFkcsOjbyBsaW1wYSBvIHZhbG9yIGRvIGNhbXBvIGUgZXhlY3V0YSBvIG3DqXRvZG8gb25DaGFuZ2VQcm9wYWdhdGUsIGNhc28gdGVuaGEgYSBuZWNlc3NpZGFkZSBkZSB0cmF0YXIgYSBmdW7Dp8OjbyBkZSBsaW1wYXIgbyBjYW1wbyxcbiAqIGRldmUgaW1wbGVtZW50YXIgYSBpbnRlcmZhY2UgVGhmQ2xlYW4uXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUaGZDbGVhbkJhc2VDb21wb25lbnQge1xuXG4gIC8qKiBOZXN0YSBwcm9wcmllZGFkZSBkZXZlLXNlIGluZm9ybWFyIG8gZWxlbWVudFJlZiBkbyBjYW1wbyBkZSBlbnRyYWRhIHF1ZSB1dGlsaXphcsOhIG8gdGhmLWNsZWFuLiAqL1xuICBASW5wdXQoJ3QtZWxlbWVudC1yZWYnKSBpbnB1dFJlZjogRWxlbWVudFJlZjtcblxuICAvKiogVmFsb3IgcXVlIHNlcsOhIGF0cmlidcOtZG8gYW8gY2FtcG8gcXVhbmRvIGZvciBjbGljYWRvIG5vIHRoZi1jbGVhbi4gKi9cbiAgQElucHV0KCd0LWRlZmF1bHQtdmFsdWUnKSBkZWZhdWx0VmFsdWU/OiBzdHJpbmcgPSAnJztcblxuICAvKipcbiAgICogRXZlbnRvIGRpc3BhcmFkbyBxdWFuZG8gZXhlY3V0YWRhIGHDp8OjbyBkbyB0aGYtY2xlYW4uXG4gICAqIEVzdGUgZXZlbnRvIGRldmUgc2VyIHVzYWRvIHBhcmEgYXZpc2FyIHBhcmEgbyBjb21wb25lbnRlIHF1ZSBlc3TDoSB1c2FuZG8gbyB0aGYtY2xlYW4sIHF1ZSBvIGJvdMOjbyBmb2kgZGlzcGFyYWRvLFxuICAgKiBlIHByb3ZhdmVsbWVudGUgc2Vyw6EgcHJlY2lzbyBlbWl0aXIgbyBldmVudG8gcGFyYSBhdHVhbGl6YXIgbyBtb2RlbC5cbiAgICovXG4gIEBPdXRwdXQoJ3QtY2hhbmdlLWV2ZW50JykgY2hhbmdlRXZlbnQ/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIHByb3RlY3RlZCBwYXJlbnRDb21wb25lbnQ6IGFueTtcblxuICBjbGVhcigpIHtcbiAgICB0aGlzLnNldElucHV0VmFsdWUodGhpcy5kZWZhdWx0VmFsdWUpO1xuICAgIHRoaXMuY2hhbmdlRXZlbnQuZW1pdCh0aGlzLmRlZmF1bHRWYWx1ZSk7XG4gIH1cblxuICBzaG93SWNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0VmFsdWUgIT09IHRoaXMuZ2V0SW5wdXRWYWx1ZSgpICYmIHRoaXMuaGFzQ2xlYW5BdHRyKCkgJiYgIXRoaXMuaXNEaXNhYmxlZCgpICYmICF0aGlzLmlzUmVhZG9ubHkoKTtcbiAgfVxuXG4gIC8vIEVzdGUgbcOpdG9kbyB2ZXJpZmljYSBzZSBvIGNvbXBvbmVudGUgcGFpIHBvc3N1aSBhIHByb3ByaWVkYWRlIGNsZWFuIGRpZmVyZW50ZSBkZSB2YXppbyxcbiAgLy8gb3Ugc2VqYSwgc2UgbyB0aGYtY2xlYW4gZGV2ZSBzZXIgdXNhZG8uXG4gIHByaXZhdGUgaGFzQ2xlYW5BdHRyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBhcmVudENvbXBvbmVudC5jbGVhbjtcbiAgfVxuXG4gIC8vIEVzdGUgbcOpdG9kbyB2ZXJpZmljYSBzZSBvIGNvbXBvbmVudGUgcGFpIGVzdMOhIGRlc2FiaWxpdGFkby5cbiAgcHJpdmF0ZSBpc0Rpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBhcmVudENvbXBvbmVudC5kaXNhYmxlZDtcbiAgfVxuXG4gIC8vIEVzdGUgbcOpdG9kbyB2ZXJpZmljYSBzZSBvIGNvbXBvbmVudGUgcGFpIGVzdMOhIHNvbWVudGUgbGVpdHVyYS5cbiAgcHJpdmF0ZSBpc1JlYWRvbmx5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBhcmVudENvbXBvbmVudC5yZWFkb25seTtcbiAgfVxuXG4gIGFic3RyYWN0IHNldElucHV0VmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG5cbiAgYWJzdHJhY3QgZ2V0SW5wdXRWYWx1ZSgpOiBzdHJpbmc7XG5cbn1cbiJdfQ==