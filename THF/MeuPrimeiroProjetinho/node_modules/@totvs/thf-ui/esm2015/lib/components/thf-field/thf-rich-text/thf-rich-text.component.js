/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ThfRichTextBaseComponent } from './thf-rich-text-base.component';
/**
 * \@docsExtends ThfRichTextBaseComponent
 *
 * \@example
 *
 * <example name="thf-rich-text-basic" title="Totvs Rich Text Basic">
 *   <file name="sample-thf-rich-text-basic/sample-thf-rich-text-basic.component.html"> </file>
 *   <file name="sample-thf-rich-text-basic/sample-thf-rich-text-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-rich-text-recipe" title="Totvs Rich Text Recipe">
 *   <file name="sample-thf-rich-text-recipe/sample-thf-rich-text-recipe.component.html"> </file>
 *   <file name="sample-thf-rich-text-recipe/sample-thf-rich-text-recipe.component.ts"> </file>
 * </example>
 */
export class ThfRichTextComponent extends ThfRichTextBaseComponent {
    /**
     * @param {?} element
     */
    constructor(element) {
        super();
        this.element = element;
        this.listener = this.validateClassesForRequired.bind(this);
    }
    /**
     * @return {?}
     */
    get errorMsg() {
        return (this.errorMessage !== '' && !this.value && this.required && this.invalid) ? this.errorMessage : '';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // Se não tem ngModel ou reactive form adiciona validação com classes css
        if (!this.onChangeModel) {
            this.element.nativeElement.addEventListener('keyup', this.listener);
            this.element.nativeElement.addEventListener('cut', this.listener);
            this.element.nativeElement.addEventListener('paste', this.listener);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (!this.onChangeModel) {
            this.element.nativeElement.removeEventListener('keyup', this.listener);
            this.element.nativeElement.removeEventListener('cut', this.listener);
            this.element.nativeElement.removeEventListener('paste', this.listener);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateValue(value) {
        this.value = value;
        this.invalid = !value;
        this.updateModel(this.value);
    }
    /**
     * @private
     * @return {?}
     */
    validateClassesForRequired() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const value = this.value;
            /** @type {?} */
            const element = this.element.nativeElement;
            if (!value && this.required) {
                element.classList.add('ng-invalid');
                element.classList.add('ng-dirty');
            }
            else {
                element.classList.remove('ng-invalid');
            }
        }));
    }
}
ThfRichTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-rich-text',
                template: "<thf-field-container\n[t-help]=\"help\"\n[t-label]=\"label\"\n[t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n\n    <thf-rich-text-body #richTextBody\n      [t-height]=\"height\"\n      [t-model-value]=\"value\"\n      [t-placeholder]=\"placeholder\"\n      [t-readonly]=\"readonly\"\n      (t-commands)=\"richTextToolbar.setButtonsStates($event)\"\n      (t-value)=\"updateValue($event)\">\n    </thf-rich-text-body>\n\n    <thf-rich-text-toolbar #richTextToolbar\n      [t-readonly]=\"readonly\"\n      (t-command)=\"richTextBody.executeCommand($event)\">\n    </thf-rich-text-toolbar>\n\n  </div>\n\n  <thf-field-container-bottom [t-error-pattern]=\"errorMsg\"></thf-field-container-bottom>\n\n</thf-field-container>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfRichTextComponent)),
                        multi: true,
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfRichTextComponent)),
                        multi: true,
                    }
                ]
            }] }
];
/** @nocollapse */
ThfRichTextComponent.ctorParameters = () => [
    { type: ElementRef }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfRichTextComponent.prototype.listener;
    /**
     * @type {?}
     * @private
     */
    ThfRichTextComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXJpY2gtdGV4dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLWZpZWxkL3RoZi1yaWNoLXRleHQvdGhmLXJpY2gtdGV4dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFFNUYsT0FBTyxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWxFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0MxRSxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsd0JBQXdCOzs7O0lBUWhFLFlBQW9CLE9BQW1CO1FBQ3JDLEtBQUssRUFBRSxDQUFDO1FBRFUsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQU4vQixhQUFRLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQVE5RCxDQUFDOzs7O0lBTkQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzdHLENBQUM7Ozs7SUFNRCxlQUFlO1FBQ2IseUVBQXlFO1FBQ3pFLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDcEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNsRSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3JFO0lBQ0gsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDckUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN4RTtJQUNILENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLEtBQWE7UUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQztRQUN0QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDOzs7OztJQUVPLDBCQUEwQjtRQUNoQyxVQUFVOzs7UUFBQyxHQUFHLEVBQUU7O2tCQUNSLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSzs7a0JBQ2xCLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWE7WUFFMUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUMzQixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDcEMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDbkM7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDeEM7UUFDSCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7OztZQTlERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLHV3QkFBNkM7Z0JBQzdDLFNBQVMsRUFBRTtvQkFDWDt3QkFDRSxPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixFQUFDO3dCQUNuRCxLQUFLLEVBQUUsSUFBSTtxQkFDWjtvQkFDRDt3QkFDRSxPQUFPLEVBQUUsYUFBYTt3QkFDdEIsV0FBVyxFQUFFLFVBQVU7Ozt3QkFBQyxHQUFHLEVBQUUsQ0FBQyxvQkFBb0IsRUFBQzt3QkFDbkQsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQUM7YUFDSDs7OztZQW5Da0MsVUFBVTs7Ozs7OztJQXNDM0Msd0NBQThEOzs7OztJQU1sRCx1Q0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIGZvcndhcmRSZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOR19WQUxJREFUT1JTLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgVGhmUmljaFRleHRCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi90aGYtcmljaC10ZXh0LWJhc2UuY29tcG9uZW50JztcblxuLyoqXG4gKiBAZG9jc0V4dGVuZHMgVGhmUmljaFRleHRCYXNlQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwidGhmLXJpY2gtdGV4dC1iYXNpY1wiIHRpdGxlPVwiVG90dnMgUmljaCBUZXh0IEJhc2ljXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLXJpY2gtdGV4dC1iYXNpYy9zYW1wbGUtdGhmLXJpY2gtdGV4dC1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLXJpY2gtdGV4dC1iYXNpYy9zYW1wbGUtdGhmLXJpY2gtdGV4dC1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJ0aGYtcmljaC10ZXh0LXJlY2lwZVwiIHRpdGxlPVwiVG90dnMgUmljaCBUZXh0IFJlY2lwZVwiPlxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1yaWNoLXRleHQtcmVjaXBlL3NhbXBsZS10aGYtcmljaC10ZXh0LXJlY2lwZS5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLXJpY2gtdGV4dC1yZWNpcGUvc2FtcGxlLXRoZi1yaWNoLXRleHQtcmVjaXBlLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoZi1yaWNoLXRleHQnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGhmLXJpY2gtdGV4dC5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW1xuICB7XG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVGhmUmljaFRleHRDb21wb25lbnQpLFxuICAgIG11bHRpOiB0cnVlLFxuICB9LFxuICB7XG4gICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaGZSaWNoVGV4dENvbXBvbmVudCksXG4gICAgbXVsdGk6IHRydWUsXG4gIH1dXG59KVxuZXhwb3J0IGNsYXNzIFRoZlJpY2hUZXh0Q29tcG9uZW50IGV4dGVuZHMgVGhmUmljaFRleHRCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcblxuICBwcml2YXRlIGxpc3RlbmVyID0gdGhpcy52YWxpZGF0ZUNsYXNzZXNGb3JSZXF1aXJlZC5iaW5kKHRoaXMpO1xuXG4gIGdldCBlcnJvck1zZygpIHtcbiAgICByZXR1cm4gKHRoaXMuZXJyb3JNZXNzYWdlICE9PSAnJyAmJiAhdGhpcy52YWx1ZSAmJiB0aGlzLnJlcXVpcmVkICYmIHRoaXMuaW52YWxpZCkgPyB0aGlzLmVycm9yTWVzc2FnZSA6ICcnO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAvLyBTZSBuw6NvIHRlbSBuZ01vZGVsIG91IHJlYWN0aXZlIGZvcm0gYWRpY2lvbmEgdmFsaWRhw6fDo28gY29tIGNsYXNzZXMgY3NzXG4gICAgaWYgKCF0aGlzLm9uQ2hhbmdlTW9kZWwpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5saXN0ZW5lcik7XG4gICAgICB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjdXQnLCB0aGlzLmxpc3RlbmVyKTtcbiAgICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgdGhpcy5saXN0ZW5lcik7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKCF0aGlzLm9uQ2hhbmdlTW9kZWwpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5saXN0ZW5lcik7XG4gICAgICB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjdXQnLCB0aGlzLmxpc3RlbmVyKTtcbiAgICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgdGhpcy5saXN0ZW5lcik7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlVmFsdWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmludmFsaWQgPSAhdmFsdWU7XG4gICAgdGhpcy51cGRhdGVNb2RlbCh0aGlzLnZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVDbGFzc2VzRm9yUmVxdWlyZWQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICAgIGlmICghdmFsdWUgJiYgdGhpcy5yZXF1aXJlZCkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ25nLWludmFsaWQnKTtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCduZy1kaXJ0eScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCduZy1pbnZhbGlkJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuIl19