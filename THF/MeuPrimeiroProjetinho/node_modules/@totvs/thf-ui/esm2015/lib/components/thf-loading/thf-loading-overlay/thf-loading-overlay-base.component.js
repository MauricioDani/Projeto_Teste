/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToBoolean } from './../../../utils/util';
/** @type {?} */
export const thfLoadingOverlayLiteralsDefault = {
    en: (/** @type {?} */ ({
        loading: 'Loading',
    })),
    es: (/** @type {?} */ ({
        loading: 'Cargando',
    })),
    pt: (/** @type {?} */ ({
        loading: 'Carregando',
    }))
};
/**
 *
 * \@description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 */
export class ThfLoadingOverlayBaseComponent {
    /**
     * @param {?} languageService
     */
    constructor(languageService) {
        this.languageService = languageService;
        this._screenLock = false;
        if (!this.text) {
            this.text = this.getTextDefault();
        }
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define se o _overlay_ será aplicado a um container ou a página inteira.
     *
     * \@default `false`
     * @param {?} screenLock
     * @return {?}
     */
    set screenLock(screenLock) {
        this._screenLock = convertToBoolean(screenLock);
    }
    /**
     * @return {?}
     */
    get screenLock() {
        return this._screenLock;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Texto a ser exibido no componente.
     *
     * > O valor padrão será traduzido acordo com o idioma configurado no [**ThfI18n**](/documentation/thf-i18n) ou navegador.
     *
     * \@default `Carregando`
     * @param {?} value
     * @return {?}
     */
    set text(value) {
        this._text = value || this.getTextDefault();
    }
    /**
     * @return {?}
     */
    get text() {
        return this._text;
    }
    /**
     * @private
     * @return {?}
     */
    getTextDefault() {
        /** @type {?} */
        const language = this.languageService.getShortLanguage();
        return thfLoadingOverlayLiteralsDefault[language].loading;
    }
}
ThfLoadingOverlayBaseComponent.propDecorators = {
    screenLock: [{ type: Input, args: ['t-screen-lock',] }],
    text: [{ type: Input, args: ['t-text',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfLoadingOverlayBaseComponent.prototype._screenLock;
    /**
     * @type {?}
     * @private
     */
    ThfLoadingOverlayBaseComponent.prototype._text;
    /**
     * @type {?}
     * @private
     */
    ThfLoadingOverlayBaseComponent.prototype.languageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWxvYWRpbmctb3ZlcmxheS1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtbG9hZGluZy90aGYtbG9hZGluZy1vdmVybGF5L3RoZi1sb2FkaW5nLW92ZXJsYXktYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBTXpELE1BQU0sT0FBTyxnQ0FBZ0MsR0FBRztJQUM5QyxFQUFFLEVBQUUsbUJBQTRCO1FBQzlCLE9BQU8sRUFBRSxTQUFTO0tBQ25CLEVBQUE7SUFDRCxFQUFFLEVBQUUsbUJBQTRCO1FBQzlCLE9BQU8sRUFBRSxVQUFVO0tBQ3BCLEVBQUE7SUFDRCxFQUFFLEVBQUUsbUJBQTRCO1FBQzlCLE9BQU8sRUFBRSxZQUFZO0tBQ3RCLEVBQUE7Q0FDRjs7Ozs7Ozs7QUFTRCxNQUFNLE9BQU8sOEJBQThCOzs7O0lBeUN6QyxZQUFvQixlQUFtQztRQUFuQyxvQkFBZSxHQUFmLGVBQWUsQ0FBb0I7UUF2Qy9DLGdCQUFXLEdBQWEsS0FBSyxDQUFDO1FBd0NwQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ25DO0lBQ0gsQ0FBQzs7Ozs7Ozs7Ozs7O0lBL0JELElBQTRCLFVBQVUsQ0FBQyxVQUFtQjtRQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7Ozs7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7SUFhRCxJQUFxQixJQUFJLENBQUMsS0FBYTtRQUNyQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDOUMsQ0FBQzs7OztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDOzs7OztJQVFPLGNBQWM7O2NBQ2QsUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLEVBQUU7UUFFeEQsT0FBTyxnQ0FBZ0MsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDNUQsQ0FBQzs7O3lCQXJDQSxLQUFLLFNBQUMsZUFBZTttQkFtQnJCLEtBQUssU0FBQyxRQUFROzs7Ozs7O0lBL0JmLHFEQUFzQzs7Ozs7SUFDdEMsK0NBQXVCOzs7OztJQXNDWCx5REFBMkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi8uLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgVGhmTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvdGhmLWxhbmd1YWdlL3RoZi1sYW5ndWFnZS5zZXJ2aWNlJztcblxuaW1wb3J0IHsgVGhmTG9hZGluZ092ZXJsYXlMaXRlcmFscyB9IGZyb20gJy4vaW50ZXJmYWNlcy90aGYtbG9hZGluZy1vdmVybGF5LWxpdGVyYWxzLmludGVyZmFjZSc7XG5cbmV4cG9ydCBjb25zdCB0aGZMb2FkaW5nT3ZlcmxheUxpdGVyYWxzRGVmYXVsdCA9IHtcbiAgZW46IDxUaGZMb2FkaW5nT3ZlcmxheUxpdGVyYWxzPiB7XG4gICAgbG9hZGluZzogJ0xvYWRpbmcnLFxuICB9LFxuICBlczogPFRoZkxvYWRpbmdPdmVybGF5TGl0ZXJhbHM+IHtcbiAgICBsb2FkaW5nOiAnQ2FyZ2FuZG8nLFxuICB9LFxuICBwdDogPFRoZkxvYWRpbmdPdmVybGF5TGl0ZXJhbHM+IHtcbiAgICBsb2FkaW5nOiAnQ2FycmVnYW5kbycsXG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBtb3N0cmEgYW8gdXN1w6FyaW8gdW1hIGltYWdlbSBkZSBfbG9hZGluZ18gZSBibG9xdWVpYSBhIHDDoWdpbmEgaW50ZWlyYSBvdSBvIGNvbnRhaW5lciBlc2NvbGhpZG8sXG4gKiBlbnF1YW50byBhZ3VhcmRhIGEgcmVzcG9zdGEgZGUgYWxndW1hIHJlcXVpc2nDp8Ojby5cbiAqL1xuZXhwb3J0IGNsYXNzIFRoZkxvYWRpbmdPdmVybGF5QmFzZUNvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfc2NyZWVuTG9jaz86IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfdGV4dD86IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgc2UgbyBfb3ZlcmxheV8gc2Vyw6EgYXBsaWNhZG8gYSB1bSBjb250YWluZXIgb3UgYSBww6FnaW5hIGludGVpcmEuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgndC1zY3JlZW4tbG9jaycpIHNldCBzY3JlZW5Mb2NrKHNjcmVlbkxvY2s6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zY3JlZW5Mb2NrID0gY29udmVydFRvQm9vbGVhbihzY3JlZW5Mb2NrKTtcbiAgfVxuXG4gIGdldCBzY3JlZW5Mb2NrKCkge1xuICAgIHJldHVybiB0aGlzLl9zY3JlZW5Mb2NrO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVGV4dG8gYSBzZXIgZXhpYmlkbyBubyBjb21wb25lbnRlLlxuICAgKlxuICAgKiA+IE8gdmFsb3IgcGFkcsOjbyBzZXLDoSB0cmFkdXppZG8gYWNvcmRvIGNvbSBvIGlkaW9tYSBjb25maWd1cmFkbyBubyBbKipUaGZJMThuKipdKC9kb2N1bWVudGF0aW9uL3RoZi1pMThuKSBvdSBuYXZlZ2Fkb3IuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBDYXJyZWdhbmRvYFxuICAgKi9cbiAgQElucHV0KCd0LXRleHQnKSBzZXQgdGV4dCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdGV4dCA9IHZhbHVlIHx8IHRoaXMuZ2V0VGV4dERlZmF1bHQoKTtcbiAgfVxuXG4gIGdldCB0ZXh0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3RleHQ7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxhbmd1YWdlU2VydmljZTogVGhmTGFuZ3VhZ2VTZXJ2aWNlKSB7XG4gICAgaWYgKCF0aGlzLnRleHQpIHtcbiAgICAgIHRoaXMudGV4dCA9IHRoaXMuZ2V0VGV4dERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFRleHREZWZhdWx0KCk6IHN0cmluZyB7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSB0aGlzLmxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCk7XG5cbiAgICByZXR1cm4gdGhmTG9hZGluZ092ZXJsYXlMaXRlcmFsc0RlZmF1bHRbbGFuZ3VhZ2VdLmxvYWRpbmc7XG4gIH1cblxufVxuIl19