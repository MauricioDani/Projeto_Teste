/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Renderer2, ViewChild } from '@angular/core';
import { ThfControlPositionService } from './../../services/thf-control-position/thf-control-position.service';
import { ThfPopoverBaseComponent } from './thf-popover-base.component';
/**
 *
 * \@docsExtends ThfPopoverBaseComponent
 *
 * \@example
 *
 * <example name="thf-popover-basic" title="Totvs Popover Basic">
 *   <file name="sample-thf-popover-basic/sample-thf-popover-basic.component.html"> </file>
 *   <file name="sample-thf-popover-basic/sample-thf-popover-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popover-labs" title="Totvs Popover Labs">
 *   <file name="sample-thf-popover-labs/sample-thf-popover-labs.component.html"> </file>
 *   <file name="sample-thf-popover-labs/sample-thf-popover-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-popover-credit-card" title="Totvs Popover - Credit Card">
 *   <file name="sample-thf-popover-credit-card/sample-thf-popover-credit-card.component.html"> </file>
 *   <file name="sample-thf-popover-credit-card/sample-thf-popover-credit-card.component.ts"> </file>
 * </example>
 */
export class ThfPopoverComponent extends ThfPopoverBaseComponent {
    /**
     * @param {?} renderer
     * @param {?} thfControlPosition
     */
    constructor(renderer, thfControlPosition) {
        super();
        this.renderer = renderer;
        this.thfControlPosition = thfControlPosition;
        this.arrowDirection = 'left';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initEventListenerFunction();
        /** @type {?} */
        const popoverOffset = 8;
        this.thfControlPosition.setElements(this.popoverElement.nativeElement, popoverOffset, this.target);
        this.setRendererListenInit();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListeners();
    }
    /**
     * @return {?}
     */
    close() {
        this.isHidden = true;
    }
    /**
     * @return {?}
     */
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout((/**
         * @return {?}
         */
        () => {
            this.setPopoverPosition();
        }), 200);
    }
    /**
     * @return {?}
     */
    open() {
        this.addScrollEventListener();
        this.isHidden = false;
        this.setOpacity(0);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.thfControlPosition.adjustPosition(this.position);
            this.arrowDirection = this.thfControlPosition.getArrowDirection();
            this.setOpacity(1);
        }));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOpacity(value) {
        this.popoverElement.nativeElement.style.opacity = value;
    }
    /**
     * @return {?}
     */
    setPopoverPosition() {
        this.thfControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.thfControlPosition.getArrowDirection();
    }
    /**
     * @return {?}
     */
    setRendererListenInit() {
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (!this.isHidden) {
                this.debounceResize();
            }
        }));
        if (this.trigger === 'hover') {
            this.mouseEnterListener = this.renderer.listen(this.target.nativeElement, 'mouseenter', (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                this.open();
            }));
            this.mouseLeaveListener = this.renderer.listen(this.target.nativeElement, 'mouseleave', (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                this.close();
            }));
        }
        else {
            this.clickoutListener = this.renderer.listen('document', 'click', (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                this.togglePopup(event);
            }));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    togglePopup(event) {
        if (!this.isHidden && !this.popoverElement.nativeElement.contains(event.target) &&
            !this.target.nativeElement.contains(event.target)) {
            this.close();
        }
        else if (this.target.nativeElement.contains(event.target)) {
            this.popoverElement.nativeElement.hidden ? this.open() : this.close();
        }
    }
    /**
     * @private
     * @return {?}
     */
    addScrollEventListener() {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    }
    /**
     * @private
     * @return {?}
     */
    initEventListenerFunction() {
        this.eventListenerFunction = (/**
         * @return {?}
         */
        () => {
            this.setPopoverPosition();
        });
    }
    /**
     * @private
     * @return {?}
     */
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.mouseEnterListener) {
            this.mouseEnterListener();
        }
        if (this.mouseLeaveListener) {
            this.mouseLeaveListener();
        }
        this.resizeListener();
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    }
}
ThfPopoverComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-popover',
                template: "<div [hidden]=\"isHidden\" class=\"thf-popover\" #popoverElement>\n\n  <div *ngIf=\"!hideArrow\" class=\"thf-popover-arrow thf-arrow-{{ arrowDirection }}\"></div>\n\n  <div class=\"thf-popover-content\">\n    <span *ngIf=\"title\" class=\"thf-popover-title\">{{ title }}</span>\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                providers: [ThfControlPositionService]
            }] }
];
/** @nocollapse */
ThfPopoverComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ThfControlPositionService }
];
ThfPopoverComponent.propDecorators = {
    popoverElement: [{ type: ViewChild, args: ['popoverElement', { read: ElementRef, static: true },] }]
};
if (false) {
    /** @type {?} */
    ThfPopoverComponent.prototype.arrowDirection;
    /** @type {?} */
    ThfPopoverComponent.prototype.timeoutResize;
    /** @type {?} */
    ThfPopoverComponent.prototype.eventListenerFunction;
    /** @type {?} */
    ThfPopoverComponent.prototype.popoverElement;
    /**
     * @type {?}
     * @private
     */
    ThfPopoverComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ThfPopoverComponent.prototype.thfControlPosition;
}
//# sourceMappingURL=data:application/json;base64,