/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, IterableDiffers, Renderer2, ViewChild } from '@angular/core';
import { ThfBreadcrumbBaseComponent } from './thf-breadcrumb-base.component';
/**
 * \@docsExtends ThfBreadcrumbBaseComponent
 *
 * \@example
 *
 * <example name="thf-breadcrumb-basic" title="Totvs Breadcrumb Basic">
 *  <file name="sample-thf-breadcrumb-basic/sample-thf-breadcrumb-basic.component.html"> </file>
 *  <file name="sample-thf-breadcrumb-basic/sample-thf-breadcrumb-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-breadcrumb-labs" title="Totvs Breadcrumb Labs">
 *  <file name="sample-thf-breadcrumb-labs/sample-thf-breadcrumb-labs.component.html"> </file>
 *  <file name="sample-thf-breadcrumb-labs/sample-thf-breadcrumb-labs.component.ts"> </file>
 * </example>
 */
export class ThfBreadcrumbComponent extends ThfBreadcrumbBaseComponent {
    /**
     * @param {?} differs
     * @param {?} element
     * @param {?} renderer
     */
    constructor(differs, element, renderer) {
        super();
        this.element = element;
        this.renderer = renderer;
        this.showDropdown = false;
        this.showDropdownToggle = false;
        this._breadcrumbItemsLenght = 0;
        this.calculatedElement = false;
        this.hiddenWithoutResize = false;
        this.initialized = false;
        this.wasClickedonDropdown = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            /** @type {?} */
            const clickedOutIconDropdown = this.checkClickOutElement(event, this.dropdownIcon);
            if (clickedOutIconDropdown) {
                this.showDropdown = false;
                this.removeClickoutListener();
            }
        });
        this.differ = differs.find([]).create(null);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initialized = true;
        this.initializeResizeListener();
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        /** @type {?} */
        const breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se vis√≠vel,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (breadcrumbWidth && !this.calculatedElement && this.initialized) {
            this.initBreadcrumbSize();
        }
        if (this.hiddenWithoutResize) {
            this.debounceResize();
            this.hiddenWithoutResize = false;
        }
        this.checkChangeOnItems();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeClickoutListener();
        this.removeResizeListener();
    }
    /**
     * @return {?}
     */
    toggleDropdown() {
        this.showDropdown = !this.showDropdown;
        this.initializeClickoutListener();
    }
    /**
     * @private
     * @param {?} event
     * @param {?} element
     * @return {?}
     */
    checkClickOutElement(event, element) {
        return element && !element.nativeElement.contains(event.target);
    }
    /**
     * @private
     * @return {?}
     */
    checkChangeOnItems() {
        if (this.differ) {
            /** @type {?} */
            const changes = this.differ.diff(this.items);
            if (changes) {
                this.calcBreadcrumbItemsWidth();
                this.calculatedElement = false;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    calcBreadcrumb() {
        /** @type {?} */
        const breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();
        /** @type {?} */
        const breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite);
        if (breadcrumb <= this._breadcrumbItemsLenght) {
            this.enableBreadcrumbResponsive();
        }
        else {
            this.disableBreadcrumbResponsive();
        }
    }
    /**
     * @private
     * @return {?}
     */
    getBreadcrumbFavoriteWidth() {
        return this.favoriteService ? this.element.nativeElement
            .querySelector('.thf-breadcrumb-favorite').offsetWidth + 20 : 0;
    }
    /**
     * @private
     * @param {?} breadcrumbFavorite
     * @return {?}
     */
    getBreadcrumbWidth(breadcrumbFavorite) {
        return this.element.nativeElement.querySelector('.thf-breadcrumb').offsetWidth - breadcrumbFavorite;
    }
    /**
     * @private
     * @return {?}
     */
    calcBreadcrumbItemsWidth() {
        /** @type {?} */
        const breadcrumbItem = this.element.nativeElement
            .querySelectorAll('.thf-breadcrumb-item, .thf-breadcrumb-item-unclickable');
        this._breadcrumbItemsLenght = Array.from(breadcrumbItem)
            .map((/**
         * @param {?} breadcrumb
         * @return {?}
         */
        breadcrumb => breadcrumb['offsetWidth']))
            .reduce((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => a + b), 16);
    }
    /**
     * @private
     * @return {?}
     */
    enableBreadcrumbResponsive() {
        this.showDropdownToggle = true;
        this.itemsView = this.items.slice(-2);
        this.dropdownItems = this.items.slice(0, -2).reverse();
    }
    /**
     * @private
     * @return {?}
     */
    disableBreadcrumbResponsive() {
        this.showDropdownToggle = false;
        this.itemsView = [].concat(this.items);
        this.showDropdown = false;
    }
    /**
     * @private
     * @return {?}
     */
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.calculatedElement && !this.hiddenWithoutResize && this.breadcrumbElement.nativeElement.offsetWidth === 0) {
                this.hiddenWithoutResize = true;
            }
            else {
                this.calcBreadcrumb();
            }
        }), 50);
    }
    /**
     * @private
     * @return {?}
     */
    initBreadcrumbSize() {
        this.calcBreadcrumbItemsWidth();
        this.calcBreadcrumb();
        this.calculatedElement = true;
    }
    /**
     * @private
     * @return {?}
     */
    initializeClickoutListener() {
        this.clickoutListener = this.renderer.listen('document', 'click', this.wasClickedonDropdown);
    }
    /**
     * @private
     * @return {?}
     */
    initializeResizeListener() {
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.debounceResize();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    removeClickoutListener() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeResizeListener() {
        this.resizeListener();
    }
}
ThfBreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-breadcrumb',
                template: "<div class=\"thf-breadcrumb\" #breadcrumb>\n\n  <ul class=\"thf-breadcrumb-items\">\n\n    <li #dropdownIcon\n      *ngIf=\"showDropdownToggle\"\n      class=\"thf-breadcrumb-item thf-clickable\"\n      (click)=\"toggleDropdown()\">\n\n      <span class=\"thf-breadcrumb-icon-more thf-icon thf-icon-more\"></span>\n      <div class=\"thf-breadcrumb-arrow\"></div>\n    </li>\n\n    <div *ngFor=\"let item of itemsView, let itemIndex = index;\">\n      <thf-breadcrumb-item\n        [t-action]=\"item.action\"\n        [t-label]=\"item.label\"\n        [t-link]=\"item.link\"\n        [t-item-active]=\"itemIndex === (itemsView.length - 1)\">\n      </thf-breadcrumb-item>\n    </div>\n\n  </ul>\n\n  <thf-breadcrumb-favorite *ngIf=\"favoriteService\"\n    [t-favorite-service]=\"favoriteService\"\n    [t-item-active]=\"items[items.length - 1]\"\n    [t-params-service]=\"paramsService\">\n  </thf-breadcrumb-favorite>\n\n  <thf-breadcrumb-dropdown *ngIf=\"showDropdown\"\n    [t-items]=\"dropdownItems\">\n  </thf-breadcrumb-dropdown>\n\n</div>\n"
            }] }
];
/** @nocollapse */
ThfBreadcrumbComponent.ctorParameters = () => [
    { type: IterableDiffers },
    { type: ElementRef },
    { type: Renderer2 }
];
ThfBreadcrumbComponent.propDecorators = {
    breadcrumbElement: [{ type: ViewChild, args: ['breadcrumb', { read: ElementRef, static: true },] }],
    dropdownIcon: [{ type: ViewChild, args: ['dropdownIcon', { read: ElementRef, static: false },] }]
};
if (false) {
    /** @type {?} */
    ThfBreadcrumbComponent.prototype.showDropdown;
    /** @type {?} */
    ThfBreadcrumbComponent.prototype.showDropdownToggle;
    /** @type {?} */
    ThfBreadcrumbComponent.prototype.dropdownItems;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype._breadcrumbItemsLenght;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype.calculatedElement;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype.hiddenWithoutResize;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype.timeoutResize;
    /** @type {?} */
    ThfBreadcrumbComponent.prototype.breadcrumbElement;
    /** @type {?} */
    ThfBreadcrumbComponent.prototype.dropdownIcon;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype.wasClickedonDropdown;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbComponent.prototype.element;
    /** @type {?} */
    ThfBreadcrumbComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,