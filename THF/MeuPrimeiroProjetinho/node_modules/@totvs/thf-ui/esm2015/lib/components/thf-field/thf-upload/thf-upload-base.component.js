/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, convertToBoolean, isEquals, thfLocaleDefault } from '../../../utils/util';
import { requiredFailed } from '../validators';
import { ThfUploadFile } from './thf-upload-file';
import { ThfUploadStatus } from './thf-upload-status.enum';
/** @type {?} */
export const thfUploadLiteralsDefault = {
    en: (/** @type {?} */ ({
        selectFile: 'Select file',
        deleteFile: 'Delete',
        cancel: 'Cancel',
        tryAgain: 'Try again',
        startSending: 'Start sending'
    })),
    es: (/** @type {?} */ ({
        selectFile: 'Seleccionar archivo',
        deleteFile: 'Borrar',
        cancel: 'Cancelar',
        tryAgain: 'Intentar de nuevo',
        startSending: 'Iniciar carga'
    })),
    pt: (/** @type {?} */ ({
        selectFile: 'Selecionar arquivo',
        deleteFile: 'Excluir',
        cancel: 'Cancelar',
        tryAgain: 'Tentar Novamente',
        startSending: 'Iniciar envio'
    }))
};
/** @type {?} */
const thfUploadFormFieldDefault = 'files';
/**
 * \@description
 *
 * O componente `thf-upload` permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
 * Este componente também possibilita algumas configurações como:
 *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
 *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
 * clique em enviar.
 *  - Restrições de formatos de arquivo e tamanho.
 *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
 *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
 */
export class ThfUploadBaseComponent {
    /**
     * @param {?} uploadService
     */
    constructor(uploadService) {
        this.uploadService = uploadService;
        /**
         * Define o valor do atributo `name` do componente.
         */
        this.name = 'file';
        /**
         * \@optional
         *
         * \@description
         *
         * Define se o envio do arquivo será automático ao selecionar o mesmo.
         *
         * \@default `false`
         */
        this.autoUpload = false;
        /**
         * Função que será executada no momento de realizar o envio do arquivo,
         * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
         * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
         * que será enviado em conjunto com o arquivo na requisição, por exemplo:
         *
         * ```
         *   event.data = {id: 'id do usuario'};
         * ```
         */
        this.onUpload = new EventEmitter();
        /**
         * Evento será disparado quando ocorrer algum erro no envio do arquivo.
         * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
         */
        this.onError = new EventEmitter();
        /**
         * Evento será disparado quando o envio do arquivo for realizado com sucesso.
         * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
         */
        this.onSuccess = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da *tag* `form`.
        this.ngModelChange = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Omite o botão de seleção de arquivos.
     *
     * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
     * pela chamada do método `selectFiles()` para seleção de arquivos.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set hideSelectButton(value) {
        this._hideSelectButton = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get hideSelectButton() {
        return this._hideSelectButton;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Omite o botão de envio de arquivos.
     *
     * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
     * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set hideSendButton(value) {
        this._hideSendButton = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get hideSendButton() {
        return this._hideSendButton;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto com as literais usadas no `thf-upload`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: ThfUploadLiterals = {
     *    selectFile: 'Buscar arquivo',
     *    deleteFile: 'Deletar',
     *    cancel: 'Desistir',
     *    tryAgain: 'Recomeçar',
     *    startSending: 'Enviar'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: ThfUploadLiterals = {
     *    deleteFile: 'Deletar'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
     *
     * ```
     * <thf-upload
     *   [t-literals]="customLiterals">
     * </thf-upload>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, thfUploadLiteralsDefault[thfLocaleDefault], thfUploadLiteralsDefault[browserLanguage()], value);
        }
        else {
            this._literals = thfUploadLiteralsDefault[browserLanguage()];
        }
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || thfUploadLiteralsDefault[browserLanguage()];
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto que segue a definição da interface `ThfFileRestrictions`,
     * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
     * @param {?} restrictions
     * @return {?}
     */
    set fileRestrictions(restrictions) {
        this._fileRestrictions = restrictions;
        this.setAllowedExtensions(restrictions);
    }
    /**
     * @return {?}
     */
    get fileRestrictions() {
        return this._fileRestrictions;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Nome do campo de formulário que será enviado para o serviço informado na propriedade `t-url`.
     *
     * \@default `files`
     * @param {?} value
     * @return {?}
     */
    set formField(value) {
        this._formField = value && typeof value === 'string' ? value : thfUploadFormFieldDefault;
        this.getUploadService().formField = this.formField;
    }
    /**
     * @return {?}
     */
    get formField() {
        return this._formField;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo será desabilitado.
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
        this.validateModel(this.currentFiles);
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo será obrigatório.
     *
     * \@default `false`
     * @param {?} required
     * @return {?}
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.currentFiles);
    }
    /**
     * @return {?}
     */
    get required() {
        return this._required;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    }
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        if (model) {
            if (!isEquals(this.currentFiles, model)) {
                this.currentFiles = this.parseFiles(model);
            }
        }
        else {
            this.currentFiles = undefined;
        }
    }
    /**
     * @protected
     * @param {?} currentFilesLength
     * @return {?}
     */
    isExceededFileLimit(currentFilesLength) {
        return this.isMultiple &&
            this.fileRestrictions &&
            this.fileRestrictions.maxFiles > 0 &&
            this.fileRestrictions.maxFiles <= currentFilesLength;
    }
    // Faz o parse dos arquivos selecionados para arquivos do formato ThfUploadFile e atualiza os arquivos correntes.
    /**
     * @protected
     * @param {?} files
     * @return {?}
     */
    parseFiles(files) {
        /** @type {?} */
        let thfUploadFiles = this.currentFiles || [];
        /** @type {?} */
        const filesLength = files.length;
        for (let i = 0; i < filesLength; i++) {
            if (this.isExceededFileLimit(thfUploadFiles.length)) {
                break;
            }
            /** @type {?} */
            const file = new ThfUploadFile(files[i]);
            if (this.checkRestrictions(file)) {
                thfUploadFiles = this.insertFileInFiles(file, thfUploadFiles);
            }
        }
        return thfUploadFiles;
    }
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    // Verifica se o arquivo está de acordo com as restrições.
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    checkRestrictions(file) {
        /** @type {?} */
        const restrictions = this.fileRestrictions;
        if (restrictions) {
            /** @type {?} */
            const allowedExtensions = restrictions.allowedExtensions;
            /** @type {?} */
            const minFileSize = restrictions.minFileSize || 0;
            /** @type {?} */
            const maxFileSize = restrictions.maxFileSize || 31457280;
            // 30MB
            /** @type {?} */
            const isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
            /** @type {?} */
            const isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
            return isAccept && isAcceptSize;
        }
        return true;
    }
    /**
     * @private
     * @param {?} file
     * @param {?} files
     * @return {?}
     */
    existsFileSameName(file, files) {
        return files.some((/**
         * @param {?} currentFile
         * @return {?}
         */
        currentFile => file.name === currentFile.name));
    }
    /**
     * @private
     * @return {?}
     */
    getUploadService() {
        return this.uploadService;
    }
    /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    insertFileInFiles(newFile, files) {
        if (this.existsFileSameName(newFile, files)) {
            return this.updateExistsFileInFiles(newFile, files);
        }
        if (this.isMultiple) {
            files.push(newFile);
        }
        else {
            files.splice(0, files.length, newFile);
        }
        return files;
    }
    /**
     * @private
     * @param {?} extension
     * @param {?=} allowedExtensions
     * @return {?}
     */
    isAllowedExtension(extension, allowedExtensions = []) {
        return allowedExtensions.some((/**
         * @param {?} ext
         * @return {?}
         */
        ext => ext.toLowerCase() === extension));
    }
    /**
     * @private
     * @param {?=} restrictions
     * @return {?}
     */
    setAllowedExtensions(restrictions = {}) {
        /** @type {?} */
        const _allowedExtensions = restrictions.allowedExtensions || [];
        this.allowedExtensions = _allowedExtensions.join(',');
    }
    /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    updateExistsFileInFiles(newFile, files) {
        /** @type {?} */
        const fileIndex = files.findIndex((/**
         * @param {?} currentFile
         * @return {?}
         */
        currentFile => newFile.name === currentFile.name && currentFile.status !== ThfUploadStatus.Uploaded));
        if (fileIndex !== -1) {
            files.splice(fileIndex, 1, newFile);
        }
        return files;
    }
}
ThfUploadBaseComponent.propDecorators = {
    hideSelectButton: [{ type: Input, args: ['t-hide-select-button',] }],
    hideSendButton: [{ type: Input, args: ['t-hide-send-button',] }],
    label: [{ type: Input, args: ['t-label',] }],
    literals: [{ type: Input, args: ['t-literals',] }],
    help: [{ type: Input, args: ['t-help',] }],
    url: [{ type: Input, args: ['t-url',] }],
    fileRestrictions: [{ type: Input, args: ['t-restrictions',] }],
    name: [{ type: Input, args: ['name',] }],
    formField: [{ type: Input, args: ['t-form-field',] }],
    disabled: [{ type: Input, args: ['t-disabled',] }],
    autoUpload: [{ type: Input, args: ['t-auto-upload',] }],
    isMultiple: [{ type: Input, args: ['t-multiple',] }],
    optional: [{ type: Input, args: ['t-optional',] }],
    required: [{ type: Input, args: ['t-required',] }],
    onUpload: [{ type: Output, args: ['t-upload',] }],
    onError: [{ type: Output, args: ['t-error',] }],
    onSuccess: [{ type: Output, args: ['t-success',] }],
    ngModelChange: [{ type: Output, args: ['ngModelChange',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._fileRestrictions;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._formField;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._hideSelectButton;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._hideSendButton;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype._required;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.allowedExtensions;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.currentFiles;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.onModelChange;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseComponent.prototype.validatorChange;
    /**
     * Rótulo do campo.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.help;
    /**
     * URL que deve ser feita a requisição com os arquivos selecionados.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.url;
    /**
     * Define o valor do atributo `name` do componente.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.name;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se o envio do arquivo será automático ao selecionar o mesmo.
     *
     * \@default `false`
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.autoUpload;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se pode selecionar mais de um arquivo.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.isMultiple;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     *  - O campo conter `t-required`;
     *  - Não possuir `t-help` e/ou `t-label`.
     *
     * \@default `false`
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.optional;
    /**
     * Função que será executada no momento de realizar o envio do arquivo,
     * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
     * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
     * que será enviado em conjunto com o arquivo na requisição, por exemplo:
     *
     * ```
     *   event.data = {id: 'id do usuario'};
     * ```
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.onUpload;
    /**
     * Evento será disparado quando ocorrer algum erro no envio do arquivo.
     * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.onError;
    /**
     * Evento será disparado quando o envio do arquivo for realizado com sucesso.
     * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
     * @type {?}
     */
    ThfUploadBaseComponent.prototype.onSuccess;
    /** @type {?} */
    ThfUploadBaseComponent.prototype.ngModelChange;
    /**
     * @type {?}
     * @protected
     */
    ThfUploadBaseComponent.prototype.uploadService;
}
//# sourceMappingURL=data:application/json;base64,