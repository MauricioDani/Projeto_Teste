/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
import { ThfComponentInjectorService } from '../../../../services/thf-component-injector/thf-component-injector.service';
import { ThfLookupModalComponent } from '../thf-lookup-modal/thf-lookup-modal.component';
/**
 * \@docsPrivate
 *
 * Serviço responsável por controlar a abertura do componente Thf Lookup Modal.
 */
export class ThfLookupModalService {
    /**
     * @param {?} thfComponentInjector
     */
    constructor(thfComponentInjector) {
        this.thfComponentInjector = thfComponentInjector;
        this.componentRef = null;
        this.selectValueEvent = new EventEmitter();
    }
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param {?} params
     * @return {?}
     */
    openModal(params) {
        const { service, columns, filterParams, title, literals } = params;
        this.componentRef = this.thfComponentInjector.createComponentInApplication(ThfLookupModalComponent);
        this.componentRef.instance.title = title;
        this.componentRef.instance.columns = columns;
        this.componentRef.instance.filterService = service;
        this.componentRef.instance.filterParams = filterParams;
        this.componentRef.instance.literals = literals;
        this.componentRef.instance.model.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => {
            this.selectValue($event);
        }));
        this.componentRef.changeDetectorRef.detectChanges();
        this.componentRef.instance.openModal();
    }
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    /**
     * @param {?} value
     * @return {?}
     */
    selectValue(value) {
        if (value) {
            this.selectValueEvent.emit(value);
        }
        this.componentRef.destroy();
    }
}
ThfLookupModalService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfLookupModalService.ctorParameters = () => [
    { type: ThfComponentInjectorService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfLookupModalService.prototype.componentRef;
    /** @type {?} */
    ThfLookupModalService.prototype.selectValueEvent;
    /**
     * @type {?}
     * @private
     */
    ThfLookupModalService.prototype.thfComponentInjector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWxvb2t1cC1tb2RhbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1maWVsZC90aGYtbG9va3VwL3NlcnZpY2VzL3RoZi1sb29rdXAtbW9kYWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDRFQUE0RSxDQUFDO0FBSXpILE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDOzs7Ozs7QUFRekYsTUFBTSxPQUFPLHFCQUFxQjs7OztJQU1oQyxZQUFvQixvQkFBaUQ7UUFBakQseUJBQW9CLEdBQXBCLG9CQUFvQixDQUE2QjtRQUo3RCxpQkFBWSxHQUFzQixJQUFJLENBQUM7UUFFL0MscUJBQWdCLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFFVSxDQUFDOzs7Ozs7O0lBV3pFLFNBQVMsQ0FBQyxNQU1UO2NBQ08sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTTtRQUVsRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyw0QkFBNEIsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3BHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDekMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUM3QyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO1FBQ25ELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDdkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUzs7OztRQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2xELElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0IsQ0FBQyxFQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3BELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBRXpDLENBQUM7Ozs7OztJQUdELFdBQVcsQ0FBQyxLQUFLO1FBQ2YsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25DO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM5QixDQUFDOzs7WUEvQ0YsVUFBVTs7OztZQVhGLDJCQUEyQjs7Ozs7OztJQWNsQyw2Q0FBK0M7O0lBRS9DLGlEQUE4RDs7Ozs7SUFFbEQscURBQXlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50UmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgVGhmQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvdGhmLWNvbXBvbmVudC1pbmplY3Rvci90aGYtY29tcG9uZW50LWluamVjdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGhmTG9va3VwQ29sdW1uIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy90aGYtZmllbGQvdGhmLWxvb2t1cC9pbnRlcmZhY2VzL3RoZi1sb29rdXAtY29sdW1uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaGZMb29rdXBGaWx0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9jb21wb25lbnRzL3RoZi1maWVsZC90aGYtbG9va3VwL2ludGVyZmFjZXMvdGhmLWxvb2t1cC1maWx0ZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IFRoZkxvb2t1cExpdGVyYWxzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy90aGYtbG9va3VwLWxpdGVyYWxzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaGZMb29rdXBNb2RhbENvbXBvbmVudCB9IGZyb20gJy4uL3RoZi1sb29rdXAtbW9kYWwvdGhmLWxvb2t1cC1tb2RhbC5jb21wb25lbnQnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIFNlcnZpw6dvIHJlc3BvbnPDoXZlbCBwb3IgY29udHJvbGFyIGEgYWJlcnR1cmEgZG8gY29tcG9uZW50ZSBUaGYgTG9va3VwIE1vZGFsLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGhmTG9va3VwTW9kYWxTZXJ2aWNlIHtcblxuICBwcml2YXRlIGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPGFueT4gPSBudWxsO1xuXG4gIHNlbGVjdFZhbHVlRXZlbnQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0aGZDb21wb25lbnRJbmplY3RvcjogVGhmQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgYWJyaXIgYSBtb2RhbCBkZSBidXNjYSBkYXMgaW5mb3JtYcOnw7Vlcy5cbiAgICpcbiAgICogQHBhcmFtIHNlcnZpY2Uge1RoZkxvb2t1cEZpbHRlcn0gU2VydmnDp28gcmVzcG9uc8OhdmVsIHBvciByZWFsaXphciBhIGJ1c2NhIG5vIHNlcnZpw6dvIGRvcyBkYWRvcy5cbiAgICogQHBhcmFtIGNvbHVtbnMge0FycmF5PFRoZkxvb2t1cENvbHVtbj59IERlZmluacOnw6NvIGRhcyBjb2x1bmFzIG5hIG1vZGFsIGRlIGJ1c2NhLlxuICAgKiBAcGFyYW0gZmlsdGVyUGFyYW1zIHthbnl9IFZhbG9yIHF1ZSBzZXLDoSByZXBhc3NhZG8gYW9zIG3DqXRvZG9zIGRvIHNlcnZpw6dvIHBhcmEgYXV4aWxpYXIgbm8gZmlsdHJvIGRvcyBkYWRvcy5cbiAgICogQHBhcmFtIHRpdGxlIHtzdHJpbmd9IERlZmluacOnw6NvIGRvIHTDrXR1bG8gZGEgbW9kYWwuXG4gICAqIEBwYXJhbSBsaXRlcmFscyB7VGhmTG9va3VwTGl0ZXJhbHN9IExpdGVyYWlzIHV0aWxpemFkYXMgbm8gY29tcG9uZW50ZS5cbiAgICovXG4gIG9wZW5Nb2RhbChwYXJhbXM6IHtcbiAgICBzZXJ2aWNlOiBUaGZMb29rdXBGaWx0ZXIsXG4gICAgY29sdW1uczogQXJyYXk8VGhmTG9va3VwQ29sdW1uPixcbiAgICBmaWx0ZXJQYXJhbXM6IGFueSxcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIGxpdGVyYWxzOiBUaGZMb29rdXBMaXRlcmFsc1xuICB9KTogdm9pZCB7XG4gICAgY29uc3QgeyBzZXJ2aWNlLCBjb2x1bW5zLCBmaWx0ZXJQYXJhbXMsIHRpdGxlLCBsaXRlcmFscyB9ID0gcGFyYW1zO1xuXG4gICAgdGhpcy5jb21wb25lbnRSZWYgPSB0aGlzLnRoZkNvbXBvbmVudEluamVjdG9yLmNyZWF0ZUNvbXBvbmVudEluQXBwbGljYXRpb24oVGhmTG9va3VwTW9kYWxDb21wb25lbnQpO1xuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLnRpdGxlID0gdGl0bGU7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuY29sdW1ucyA9IGNvbHVtbnM7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZmlsdGVyU2VydmljZSA9IHNlcnZpY2U7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZmlsdGVyUGFyYW1zID0gZmlsdGVyUGFyYW1zO1xuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmxpdGVyYWxzID0gbGl0ZXJhbHM7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UubW9kZWwuc3Vic2NyaWJlKCRldmVudCA9PiB7XG4gICAgICB0aGlzLnNlbGVjdFZhbHVlKCRldmVudCk7XG4gICAgfSk7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLm9wZW5Nb2RhbCgpO1xuXG4gIH1cblxuICAvLyBFc3RlIG1ldG9kbyDDqSBjaGFtYWRvIHF1YW5kbyDDqSBzZWxlY2lvbmFkbyB1bSBpdGVtIG5hIGxvb2t1cCBtb2RhbC5cbiAgc2VsZWN0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuc2VsZWN0VmFsdWVFdmVudC5lbWl0KHZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5jb21wb25lbnRSZWYuZGVzdHJveSgpO1xuICB9XG59XG4iXX0=