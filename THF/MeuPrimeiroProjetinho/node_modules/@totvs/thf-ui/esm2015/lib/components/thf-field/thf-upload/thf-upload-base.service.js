/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpEventType, HttpRequest, HttpResponse } from '@angular/common/http';
export class ThfUploadBaseService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.formField = 'files';
        this.requests = [];
    }
    /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param {?} url URL da requisição a ser efetuada.
     * @param {?} files Arquivos a serem enviados.
     * @param {?} tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param {?} uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param {?} successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param {?} errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     * @return {?}
     */
    upload(url, files, tOnUpload, uploadCallback, successCallback, errorCallback) {
        /** @type {?} */
        const filesLength = files.length;
        /** @type {?} */
        const uploadEvent = {
            data: {},
            file: null
        };
        for (let i = 0; i < filesLength; i++) {
            /** @type {?} */
            const formData = new FormData();
            /** @type {?} */
            const file = files[i];
            /** @type {?} */
            const fileName = file.rawFile.name;
            formData.append(this.formField, file.rawFile, fileName);
            // Função upload, onde o desenvolvedor pode enviar dados para a requisição.
            if (tOnUpload) {
                uploadEvent['file'] = file;
                tOnUpload.emit(uploadEvent);
                formData.append('data', JSON.stringify(uploadEvent.data));
            }
            this.sendFile(url, file, formData, uploadCallback, successCallback, errorCallback);
        }
    }
    /**
     * @param {?} url
     * @param {?} file
     * @param {?} formData
     * @param {?} uploadCallback
     * @param {?} successCallback
     * @param {?} errorCallback
     * @return {?}
     */
    sendFile(url, file, formData, uploadCallback, successCallback, errorCallback) {
        /** @type {?} */
        const request = this.getRequest(url, formData).subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event.type === HttpEventType.UploadProgress) {
                this.addRequest(file, request);
                /** @type {?} */
                const percentDone = Math.round(100 * event.loaded / event.total);
                uploadCallback(file, percentDone);
            }
            else if (event instanceof HttpResponse) {
                // Sucesso, arquivos enviados.
                successCallback(file, event);
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            errorCallback(file, err);
        }));
    }
    /**
     * @param {?} url
     * @param {?} formData
     * @return {?}
     */
    getRequest(url, formData) {
        /** @type {?} */
        const req = new HttpRequest('POST', url, formData, {
            reportProgress: true
        });
        return this.http.request(req);
    }
    /**
     * @param {?} file
     * @param {?} callback
     * @return {?}
     */
    stopRequestByFile(file, callback) {
        /** @type {?} */
        const requestObj = this.requests.find((/**
         * @param {?} req
         * @return {?}
         */
        req => {
            return req.file.uid === file.uid;
        }));
        if (requestObj) {
            /** @type {?} */
            const request = requestObj.request;
            request.unsubscribe();
            this.removeRequest(requestObj);
            callback();
        }
    }
    /**
     * @param {?} requestObj
     * @return {?}
     */
    removeRequest(requestObj) {
        /** @type {?} */
        const index = this.requests.indexOf(requestObj);
        this.requests.splice(index, 1);
    }
    /**
     * @param {?} file
     * @param {?} request
     * @return {?}
     */
    addRequest(file, request) {
        /** @type {?} */
        const hasRequest = this.requests.some((/**
         * @param {?} req
         * @return {?}
         */
        req => {
            return req.file.uid === file.uid;
        }));
        if (!hasRequest) {
            this.requests.push({ file, request });
        }
    }
}
ThfUploadBaseService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfUploadBaseService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    ThfUploadBaseService.prototype.formField;
    /** @type {?} */
    ThfUploadBaseService.prototype.requests;
    /**
     * @type {?}
     * @private
     */
    ThfUploadBaseService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,