/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ThfUploadBaseComponent } from './thf-upload-base.component';
import { ThfUploadService } from './thf-upload.service';
import { ThfUploadStatus } from './thf-upload-status.enum';
/**
 * \@docsExtends ThfUploadBaseComponent
 *
 * \@example
 *
 * <example name="thf-upload-basic" title="Totvs Upload Basic">
 *   <file name="sample-thf-upload-basic/sample-thf-upload-basic.component.html"> </file>
 *   <file name="sample-thf-upload-basic/sample-thf-upload-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-upload-labs" title="Totvs Upload Labs">
 *   <file name="sample-thf-upload-labs/sample-thf-upload-labs.component.html"> </file>
 *   <file name="sample-thf-upload-labs/sample-thf-upload-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-upload-resume" title="Totvs Upload - Resume">
 *   <file name="sample-thf-upload-resume/sample-thf-upload-resume.component.html"> </file>
 *   <file name="sample-thf-upload-resume/sample-thf-upload-resume.component.ts"> </file>
 * </example>
 *
 * <example name="thf-upload-rs" title="Totvs Upload - Realize & Show">
 *   <file name="sample-thf-upload-rs/sample-thf-upload-rs.component.html"> </file>
 *   <file name="sample-thf-upload-rs/sample-thf-upload-rs.component.ts"> </file>
 * </example>
 */
export class ThfUploadComponent extends ThfUploadBaseComponent {
    /**
     * @param {?} elementRef
     * @param {?} uploadService
     */
    constructor(elementRef, uploadService) {
        super(uploadService);
        this.elementRef = elementRef;
        this.calledByCleanInputValue = false;
    }
    /**
     * @return {?}
     */
    get displaySendButton() {
        /** @type {?} */
        const currentFiles = this.currentFiles || [];
        return !this.hideSendButton && !this.autoUpload && (currentFiles.length > 0 && this.hasFileNotUploaded);
    }
    /**
     * @return {?}
     */
    get hasFileNotUploaded() {
        if (Array.isArray(this.currentFiles)) {
            return this.currentFiles.some((/**
             * @param {?} file
             * @return {?}
             */
            file => file.status !== ThfUploadStatus.Uploaded));
        }
        return false;
    }
    /**
     * @return {?}
     */
    get isDisabled() {
        /** @type {?} */
        const currentFiles = this.currentFiles || [];
        return this.hasAnyFileUploading(this.currentFiles) ||
            !this.url ||
            this.disabled ||
            this.isExceededFileLimit(currentFiles.length);
    }
    /**
     * Método responsável por **limpar** o(s) arquivo(s) selecionado(s).
     * @return {?}
     */
    clear() {
        this.currentFiles = undefined;
        this.updateModel([]);
        this.cleanInputValue();
    }
    // Função disparada ao selecionar algum arquivo.
    /**
     * @param {?} event
     * @return {?}
     */
    onFileChange(event) {
        // necessario este tratamento quando para IE, pois nele o change é disparado quando o campo é limpado também
        if (this.calledByCleanInputValue) {
            this.calledByCleanInputValue = false;
            return event.preventDefault();
        }
        /** @type {?} */
        const files = event.target.files;
        this.currentFiles = this.currentFiles || [];
        this.currentFiles = this.parseFiles(files);
        this.updateModel([...this.currentFiles]);
        if (this.autoUpload) {
            this.uploadFiles(this.currentFiles);
        }
        this.cleanInputValue();
    }
    // Remove o arquivo passado por parametro da lista dos arquivos correntes.
    /**
     * @param {?} file
     * @return {?}
     */
    removeFile(file) {
        /** @type {?} */
        const index = this.currentFiles.indexOf(file);
        this.currentFiles.splice(index, 1);
        this.updateModel([...this.currentFiles]);
    }
    /**
     * Método responsável por **abrir** a janela para seleção de arquivo(s).
     * @return {?}
     */
    selectFiles() {
        this.calledByCleanInputValue = false;
        this.inputFile.nativeElement.click();
    }
    /**
     * Método responsável por **enviar** o(s) arquivo(s) selecionado(s).
     * @return {?}
     */
    sendFiles() {
        if (this.currentFiles && this.currentFiles.length) {
            this.uploadFiles(this.currentFiles);
        }
    }
    // Retorna o tamanho do arquivo em KBytes.
    /**
     * @protected
     * @param {?} size
     * @return {?}
     */
    getFileSize(size) {
        /** @type {?} */
        let kbSize = 0;
        if (size) {
            kbSize = Math.ceil(size / 1024);
        }
        return `${kbSize} KB`;
    }
    // Retorna o thf-icon de acordo com o status do arquivo.
    /**
     * @protected
     * @param {?} file
     * @return {?}
     */
    getThfIcon(file) {
        switch (file.status) {
            case ThfUploadStatus.Uploaded:
                return 'thf-icon-ok';
            case ThfUploadStatus.Error:
                return 'thf-icon-close';
            case ThfUploadStatus.None:
                return 'thf-icon-info';
            case ThfUploadStatus.Uploading:
            default:
                return '';
        }
    }
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    /**
     * @protected
     * @param {?} files
     * @return {?}
     */
    hasAnyFileUploading(files) {
        if (files && files.length) {
            return files.some((/**
             * @param {?} file
             * @return {?}
             */
            file => file.status === ThfUploadStatus.Uploading));
        }
        return false;
    }
    // Valida se o status passado por parâmetro é igual ao status do arquivo.
    /**
     * @protected
     * @param {?} status
     * @param {?} file
     * @return {?}
     */
    isStatusFile(status, file) {
        return file.status === ThfUploadStatus[status];
    }
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    /**
     * @protected
     * @param {?} file
     * @return {?}
     */
    stopUpload(file) {
        this.uploadService.stopRequestByFile(file, (/**
         * @return {?}
         */
        () => {
            if (this.autoUpload) {
                this.removeFile(file);
            }
            else {
                this.stopUploadHandler(file);
            }
        }));
    }
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    /**
     * @protected
     * @param {?} files
     * @return {?}
     */
    uploadFiles(files) {
        /** @type {?} */
        const filesFiltered = files.filter((/**
         * @param {?} file
         * @return {?}
         */
        file => {
            return file.status !== ThfUploadStatus.Uploaded;
        }));
        this.uploadService.upload(this.url, filesFiltered, this.onUpload, (/**
         * @param {?} file
         * @param {?} percent
         * @return {?}
         */
        (file, percent) => {
            // UPLOADING
            this.uploadingHandler(file, percent);
        }), (/**
         * @param {?} file
         * @param {?} eventResponse
         * @return {?}
         */
        (file, eventResponse) => {
            // SUCCESS
            this.successHandler(file);
            this.onSuccess.emit(eventResponse);
        }), (/**
         * @param {?} file
         * @param {?} eventError
         * @return {?}
         */
        (file, eventError) => {
            // Error
            this.errorHandler(file);
            this.onError.emit(eventError);
        }));
    }
    // Atualiza a classe da div, que conter a classe 'thf-upload-filename', para 'thf-upload-filename-loading'.
    /**
     * @private
     * @param {?} uid
     * @return {?}
     */
    addFileNameClass(uid) {
        /** @type {?} */
        const divStatus = this.elementRef.nativeElement.querySelector(`div[id='${uid}'].thf-upload-progress`);
        /** @type {?} */
        const fileNameDiv = divStatus.querySelector('.thf-upload-filename');
        fileNameDiv.classList.add('thf-upload-filename-loading');
    }
    /**
     * @private
     * @return {?}
     */
    cleanInputValue() {
        this.calledByCleanInputValue = true;
        this.inputFile.nativeElement.value = '';
    }
    // Função disparada quando é retornado um erro no envio do arquivo.
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    errorHandler(file) {
        file.status = ThfUploadStatus.Error;
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress-error', 100);
    }
    // Remove a classe 'thf-upload-filename-loading' da div que conter a classe 'thf-upload-filename'.
    /**
     * @private
     * @param {?} uid
     * @return {?}
     */
    removeFileNameClass(uid) {
        /** @type {?} */
        const divStatus = this.elementRef.nativeElement.querySelector(`div[id='${uid}'].thf-upload-progress`);
        /** @type {?} */
        const fileNameDiv = divStatus.querySelector('.thf-upload-filename');
        fileNameDiv.classList.remove('thf-upload-filename-loading');
    }
    // Atualiza o status do progresso do envio do arquivo.
    /**
     * @private
     * @param {?} uid
     * @param {?} percent
     * @param {?} isShow
     * @return {?}
     */
    setProgressStatus(uid, percent, isShow) {
        /** @type {?} */
        const divStatus = this.elementRef.nativeElement.querySelector(`div[id='${uid}'].thf-upload-progress`);
        /** @type {?} */
        const divProgress = divStatus.querySelector('.thf-upload-progress-status');
        /** @type {?} */
        const isDisplay = isShow ? 'block' : 'none';
        divProgress.setAttribute('style', `display: ${isDisplay};`);
        divProgress.setAttribute('style', `width: ${percent}%;`);
    }
    // Atualiza o status do envio de arquivos.
    /**
     * @private
     * @param {?} file
     * @param {?} className
     * @param {?} percent
     * @return {?}
     */
    setUploadStatus(file, className, percent) {
        /** @type {?} */
        const uid = file.uid;
        /** @type {?} */
        const divStatus = this.elementRef.nativeElement.querySelector(`div[id='${uid}'].thf-upload-progress`);
        divStatus.classList.remove('thf-upload-progress-error', 'thf-upload-progress-success');
        divStatus.classList.add(className);
        if (percent > 5 && file.status !== ThfUploadStatus.None) {
            this.addFileNameClass(uid);
        }
    }
    // Função disparada ao parar um envio de arquivo.
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    stopUploadHandler(file) {
        file.status = ThfUploadStatus.None;
        this.removeFileNameClass(file.uid);
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress', 100);
    }
    // Função disparada quando o envio é realizado com sucesso.
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    successHandler(file) {
        file.status = ThfUploadStatus.Uploaded;
        this.setProgressStatus(file.uid, 0, false);
        this.setUploadStatus(file, 'thf-upload-progress-success', 100);
    }
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    updateModel(files) {
        this.onModelChange ? this.onModelChange(files) : this.ngModelChange.emit(files);
    }
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    /**
     * @private
     * @param {?} file
     * @param {?} percent
     * @return {?}
     */
    uploadingHandler(file, percent) {
        file.status = ThfUploadStatus.Uploading;
        this.setProgressStatus(file.uid, percent, true);
        this.setUploadStatus(file, 'thf-upload-progress', percent);
    }
}
ThfUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-upload',
                template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-upload\">\n    <input\n      #inputFile\n      class=\"thf-upload-input\"\n      type=\"file\"\n      [accept]=\"allowedExtensions\"\n      [attr.name]=\"name\"\n      [disabled]=\"isDisabled\"\n      [multiple]=\"isMultiple\"\n      [required]=\"required\"\n      (change)=\"onFileChange($event)\">\n\n    <thf-button\n      *ngIf=\"!hideSelectButton\"\n      class=\"thf-upload-button\"\n      for=\"file\"\n      [t-disabled]=\"isDisabled\"\n      [t-label]=\"literals.selectFile\"\n      (t-click)=\"selectFiles()\">\n    </thf-button>\n\n    <div class=\"thf-upload-progress\" *ngFor=\"let file of currentFiles\" [id]=\"file.uid\">\n      <div class=\"thf-upload-progress-status\"></div>\n      <div class=\"thf-upload-filename-foreground\">\n\n        <div class=\"thf-upload-filename\">\n          <span class=\"thf-icon {{ getThfIcon(file) }}\"></span> {{ file.name }} - {{ getFileSize(file.size) }}\n        </div>\n\n        <div class=\"thf-upload-group-actions\">\n          <span\n            *ngIf=\"isStatusFile('None', file) || isStatusFile('Error', file)\"\n            class=\"thf-upload-action\"\n            (click)=\"removeFile(file)\">\n            {{ literals.deleteFile }}\n          </span>\n\n          <span\n            *ngIf=\"isStatusFile('Uploading', file)\"\n            class=\"thf-upload-action\"\n            (click)=\"stopUpload(file)\">\n            {{ literals.cancel }}\n          </span>\n\n          <span\n            *ngIf=\"isStatusFile('Error', file)\"\n            class=\"thf-upload-action\"\n            (click)=\"uploadFiles([file])\">\n\n            {{ literals.tryAgain }}\n          </span>\n        </div>\n\n      </div>\n    </div>\n\n    <thf-button\n      *ngIf=\"displaySendButton\"\n      t-type=\"primary\"\n      [t-disabled]=\"hasAnyFileUploading(currentFiles)\"\n      [t-label]=\"literals.startSending\"\n      (t-click)=\"uploadFiles(currentFiles)\">\n    </thf-button>\n\n  </div>\n\n</thf-field-container>\n",
                providers: [
                    ThfUploadService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfUploadComponent)),
                        multi: true,
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfUploadComponent)),
                        multi: true,
                    }
                ]
            }] }
];
/** @nocollapse */
ThfUploadComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ThfUploadService }
];
ThfUploadComponent.propDecorators = {
    inputFile: [{ type: ViewChild, args: ['inputFile', { read: ElementRef, static: true },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfUploadComponent.prototype.calledByCleanInputValue;
    /**
     * @type {?}
     * @private
     */
    ThfUploadComponent.prototype.inputFile;
    /**
     * @type {?}
     * @private
     */
    ThfUploadComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,