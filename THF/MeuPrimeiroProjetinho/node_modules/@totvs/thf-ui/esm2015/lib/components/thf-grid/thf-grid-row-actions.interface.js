/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy ThfGridComponent
 *
 * \@description
 *
 * Ações executadas durante a manipulação das linhas do grid.
 * @record
 */
export function ThfGridRowActions() { }
if (false) {
    /**
     * Método executado após uma linha do grid ser removida.
     * @type {?|undefined}
     */
    ThfGridRowActions.prototype.afterRemove;
    /**
     * \@description
     *
     * Método executado após uma linha do grid ser salva, ao ser executado, o método irá receber um objeto com os dados atualizados.
     * @type {?|undefined}
     */
    ThfGridRowActions.prototype.afterSave;
    /**
     * \@description
     *
     * Método executado antes de uma nova linha ser inserida no grid, se o método retornar algo diferente de `true` a ação
     * será cancelada e a linha não será inserida.
     *
     * Ao ser executado o método irá receber a referência do objeto que será inserido, dessa forma é possível informar valores
     * para esse objeto.
     *
     * ```
     *  rowActions: ThfGridRowActions = {
     *    beforeInsert: this.onBeforeInsert.bind(this);
     *    ...
     *  };
     *
     *  // Inicia a linha já com as propriedades `name` e `created` preenchidas.
     *  onBeforeInsert(row: any) {
     *    row.name = 'Fulano';
     *    row.created = '2018-20-12';
     *    ...
     *
     *    return true;
     *  }
     * ```
     * @type {?|undefined}
     */
    ThfGridRowActions.prototype.beforeInsert;
    /**
     * \@description
     *
     * Método executado antes de uma linha ser removida do grid, ao ser executado, o método irá receber uma cópia do objeto
     * com os dados da linha que será removida, se o método retornar algo diferente de `true` a ação será cancelada e a linha
     * não será removida.
     * @type {?|undefined}
     */
    ThfGridRowActions.prototype.beforeRemove;
    /**
     * \@description
     *
     * Método executado antes de uma linha ser atualizada, ao ser executado, o método irá receber um objeto com os dados atualizados
     * e um objeto com uma cópia dos dados originais, se o método retornar algo diferente de `true` a ação será cancelada e
     * a linha não será atualizada permanecendo em edição / inserção.
     *
     * > Caso não seja permitido a atualização da linha, a sugestão é que seja apresentada uma mensagem ao usuário informando
     * > o motivo.
     *
     * ```
     *  rowActions: ThfGridRowActions = {
     *    beforeSave: this.onBeforeSave.bind(this);
     *    ...
     *  };
     *
     *  onBeforeSave(updatedRow: any, originalRow: any) {
     *    // Verifica se a propriedade `name` foi alterada.
     *    if (updatedRow.name !== originalRow.name) {
     *      return false;
     *    }
     *
     *    // Verifica se é menor de idade
     *    if (updatedRow.age < 18) {
     *      return false;
     *    }
     *    ...
     *
     *    updatedRow.updated = '2018-20-12';
     *
     *    return true;
     *  }
     * ```
     * @type {?|undefined}
     */
    ThfGridRowActions.prototype.beforeSave;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWdyaWQtcm93LWFjdGlvbnMuaW50ZXJmYWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1ncmlkL3RoZi1ncmlkLXJvdy1hY3Rpb25zLmludGVyZmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFPQSx1Q0FvRkM7Ozs7OztJQWpGQyx3Q0FBeUI7Ozs7Ozs7SUFPekIsc0NBQStCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUEyQi9CLHlDQUFxQzs7Ozs7Ozs7O0lBU3JDLHlDQUFxQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBb0NyQyx1Q0FBNEQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB1c2VkQnkgVGhmR3JpZENvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEHDp8O1ZXMgZXhlY3V0YWRhcyBkdXJhbnRlIGEgbWFuaXB1bGHDp8OjbyBkYXMgbGluaGFzIGRvIGdyaWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGhmR3JpZFJvd0FjdGlvbnMge1xuXG4gIC8qKiBNw6l0b2RvIGV4ZWN1dGFkbyBhcMOzcyB1bWEgbGluaGEgZG8gZ3JpZCBzZXIgcmVtb3ZpZGEuICovXG4gIGFmdGVyUmVtb3ZlPzogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE3DqXRvZG8gZXhlY3V0YWRvIGFww7NzIHVtYSBsaW5oYSBkbyBncmlkIHNlciBzYWx2YSwgYW8gc2VyIGV4ZWN1dGFkbywgbyBtw6l0b2RvIGlyw6EgcmVjZWJlciB1bSBvYmpldG8gY29tIG9zIGRhZG9zIGF0dWFsaXphZG9zLlxuICAgKi9cbiAgYWZ0ZXJTYXZlPzogKHJvdzogYW55KSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyBleGVjdXRhZG8gYW50ZXMgZGUgdW1hIG5vdmEgbGluaGEgc2VyIGluc2VyaWRhIG5vIGdyaWQsIHNlIG8gbcOpdG9kbyByZXRvcm5hciBhbGdvIGRpZmVyZW50ZSBkZSBgdHJ1ZWAgYSBhw6fDo29cbiAgICogc2Vyw6EgY2FuY2VsYWRhIGUgYSBsaW5oYSBuw6NvIHNlcsOhIGluc2VyaWRhLlxuICAgKlxuICAgKiBBbyBzZXIgZXhlY3V0YWRvIG8gbcOpdG9kbyBpcsOhIHJlY2ViZXIgYSByZWZlcsOqbmNpYSBkbyBvYmpldG8gcXVlIHNlcsOhIGluc2VyaWRvLCBkZXNzYSBmb3JtYSDDqSBwb3Nzw612ZWwgaW5mb3JtYXIgdmFsb3Jlc1xuICAgKiBwYXJhIGVzc2Ugb2JqZXRvLlxuICAgKlxuICAgKiBgYGBcbiAgICogIHJvd0FjdGlvbnM6IFRoZkdyaWRSb3dBY3Rpb25zID0ge1xuICAgKiAgICBiZWZvcmVJbnNlcnQ6IHRoaXMub25CZWZvcmVJbnNlcnQuYmluZCh0aGlzKTtcbiAgICogICAgLi4uXG4gICAqICB9O1xuICAgKlxuICAgKiAgLy8gSW5pY2lhIGEgbGluaGEgasOhIGNvbSBhcyBwcm9wcmllZGFkZXMgYG5hbWVgIGUgYGNyZWF0ZWRgIHByZWVuY2hpZGFzLlxuICAgKiAgb25CZWZvcmVJbnNlcnQocm93OiBhbnkpIHtcbiAgICogICAgcm93Lm5hbWUgPSAnRnVsYW5vJztcbiAgICogICAgcm93LmNyZWF0ZWQgPSAnMjAxOC0yMC0xMic7XG4gICAqICAgIC4uLlxuICAgKlxuICAgKiAgICByZXR1cm4gdHJ1ZTtcbiAgICogIH1cbiAgICogYGBgXG4gICAqL1xuICBiZWZvcmVJbnNlcnQ/OiAocm93OiBhbnkpID0+IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBNw6l0b2RvIGV4ZWN1dGFkbyBhbnRlcyBkZSB1bWEgbGluaGEgc2VyIHJlbW92aWRhIGRvIGdyaWQsIGFvIHNlciBleGVjdXRhZG8sIG8gbcOpdG9kbyBpcsOhIHJlY2ViZXIgdW1hIGPDs3BpYSBkbyBvYmpldG9cbiAgICogY29tIG9zIGRhZG9zIGRhIGxpbmhhIHF1ZSBzZXLDoSByZW1vdmlkYSwgc2UgbyBtw6l0b2RvIHJldG9ybmFyIGFsZ28gZGlmZXJlbnRlIGRlIGB0cnVlYCBhIGHDp8OjbyBzZXLDoSBjYW5jZWxhZGEgZSBhIGxpbmhhXG4gICAqIG7Do28gc2Vyw6EgcmVtb3ZpZGEuXG4gICAqL1xuICBiZWZvcmVSZW1vdmU/OiAocm93OiBhbnkpID0+IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBNw6l0b2RvIGV4ZWN1dGFkbyBhbnRlcyBkZSB1bWEgbGluaGEgc2VyIGF0dWFsaXphZGEsIGFvIHNlciBleGVjdXRhZG8sIG8gbcOpdG9kbyBpcsOhIHJlY2ViZXIgdW0gb2JqZXRvIGNvbSBvcyBkYWRvcyBhdHVhbGl6YWRvc1xuICAgKiBlIHVtIG9iamV0byBjb20gdW1hIGPDs3BpYSBkb3MgZGFkb3Mgb3JpZ2luYWlzLCBzZSBvIG3DqXRvZG8gcmV0b3JuYXIgYWxnbyBkaWZlcmVudGUgZGUgYHRydWVgIGEgYcOnw6NvIHNlcsOhIGNhbmNlbGFkYSBlXG4gICAqIGEgbGluaGEgbsOjbyBzZXLDoSBhdHVhbGl6YWRhIHBlcm1hbmVjZW5kbyBlbSBlZGnDp8OjbyAvIGluc2Vyw6fDo28uXG4gICAqXG4gICAqID4gQ2FzbyBuw6NvIHNlamEgcGVybWl0aWRvIGEgYXR1YWxpemHDp8OjbyBkYSBsaW5oYSwgYSBzdWdlc3TDo28gw6kgcXVlIHNlamEgYXByZXNlbnRhZGEgdW1hIG1lbnNhZ2VtIGFvIHVzdcOhcmlvIGluZm9ybWFuZG9cbiAgICogPiBvIG1vdGl2by5cbiAgICpcbiAgICogYGBgXG4gICAqICByb3dBY3Rpb25zOiBUaGZHcmlkUm93QWN0aW9ucyA9IHtcbiAgICogICAgYmVmb3JlU2F2ZTogdGhpcy5vbkJlZm9yZVNhdmUuYmluZCh0aGlzKTtcbiAgICogICAgLi4uXG4gICAqICB9O1xuICAgKlxuICAgKiAgb25CZWZvcmVTYXZlKHVwZGF0ZWRSb3c6IGFueSwgb3JpZ2luYWxSb3c6IGFueSkge1xuICAgKiAgICAvLyBWZXJpZmljYSBzZSBhIHByb3ByaWVkYWRlIGBuYW1lYCBmb2kgYWx0ZXJhZGEuXG4gICAqICAgIGlmICh1cGRhdGVkUm93Lm5hbWUgIT09IG9yaWdpbmFsUm93Lm5hbWUpIHtcbiAgICogICAgICByZXR1cm4gZmFsc2U7XG4gICAqICAgIH1cbiAgICpcbiAgICogICAgLy8gVmVyaWZpY2Egc2Ugw6kgbWVub3IgZGUgaWRhZGVcbiAgICogICAgaWYgKHVwZGF0ZWRSb3cuYWdlIDwgMTgpIHtcbiAgICogICAgICByZXR1cm4gZmFsc2U7XG4gICAqICAgIH1cbiAgICogICAgLi4uXG4gICAqXG4gICAqICAgIHVwZGF0ZWRSb3cudXBkYXRlZCA9ICcyMDE4LTIwLTEyJztcbiAgICpcbiAgICogICAgcmV0dXJuIHRydWU7XG4gICAqICB9XG4gICAqIGBgYFxuICAgKi9cbiAgYmVmb3JlU2F2ZT86ICh1cGRhdGVkUm93OiBhbnksIG9yaWdpbmFsUm93OiBhbnkpID0+IGJvb2xlYW47XG5cbn1cbiJdfQ==