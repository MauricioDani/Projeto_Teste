/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef } from '@angular/core';
/**
 * \@usedBy ThfListViewComponent
 *
 * \@description
 *
 * Esta diretiva permite que sejam apresentadas informações essenciais de cada item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <thf-list-view
 *   t-property-title="name"
 *   [t-items]="[{id: 1, name: "Register", email: register\@totvs.com}]">
 *
 *   <ng-template t-list-view-content-template let-item let-code="index">
 *     <div class="thf-row">
 *       <thf-info class="thf-md-6" t-label="Code" [t-value]="code"></thf-info>
 *       <thf-info class="thf-md-6" t-label="Email" [t-value]="item.email"></thf-info>
 *     </div>
 *   </ng-template>
 *
 * </thf-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <thf-list-view
 *    t-property-title="name"
 *    [t-items]="[{id: 1, name: "Register", email: register\@totvs.com}]">
 *
 *    <div *t-list-view-content-template="let item, let i=index" class="thf-row">
 *      <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
 *    </div>
 * </thf-list-view>
 * ...
 *
 * ```
 *
 * A diretiva **t-list-view-content-template**, possibilita também alterar o título dos itens. Para isto,
 * é necessário atribuir a referência da função que faz a alteração, à propriedade `t-title`,
 * a mesma deve retornar um valor do tipo *string*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * \@Component({
 *    selector: 'app-root',
 *    template: `
 *      ...
 *      <thf-list-view
 *        [t-items]="items">
 *        <ng-template t-list-view-content-template let-item [t-title]="customTitle">
 *          <div class="thf-row">
 *            <thf-info class="thf-md-12" t-label="Customer" [t-value]="item.customer"></thf-info>
 *          </div>
 *        </ng-template>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      customer: 'Supermarket 1',
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      customer: 'Supermarket 2'
 *    }];
 *
 *    customTitle(item) {
 *      return `${item.code} - ${item.product}`;
 *    }
 * }
 * ```
 */
export class ThfListViewContentTemplateDirective {
    // Necessário manter templateRef para o funcionamento do row template.
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
ThfListViewContentTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[t-list-view-content-template]'
            },] }
];
/** @nocollapse */
ThfListViewContentTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
ThfListViewContentTemplateDirective.propDecorators = {
    title: [{ type: Input, args: ['t-title',] }]
};
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Função que deve retornar um valor do tipo `string`, que será utilizado como o título de cada item da lista.
     *
     * > Por parâmetro será enviado o item corrente, onde poderá utilizá-lo para recuperar dados sobre o mesmo.
     * @type {?}
     */
    ThfListViewContentTemplateDirective.prototype.title;
    /** @type {?} */
    ThfListViewContentTemplateDirective.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWxpc3Qtdmlldy1jb250ZW50LXRlbXBsYXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtbGlzdC12aWV3L3RoZi1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZS90aGYtbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUY5RCxNQUFNLE9BQU8sbUNBQW1DOzs7OztJQWM5QyxZQUFtQixXQUE2QjtRQUE3QixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7SUFBSSxDQUFDOzs7WUFqQnRELFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0NBQWdDO2FBQzNDOzs7O1lBdEYwQixXQUFXOzs7b0JBa0duQyxLQUFLLFNBQUMsU0FBUzs7Ozs7Ozs7Ozs7OztJQUFoQixvREFBMEM7O0lBRzlCLDBEQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQHVzZWRCeSBUaGZMaXN0Vmlld0NvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGEgZGlyZXRpdmEgcGVybWl0ZSBxdWUgc2VqYW0gYXByZXNlbnRhZGFzIGluZm9ybWHDp8O1ZXMgZXNzZW5jaWFpcyBkZSBjYWRhIGl0ZW0uXG4gKlxuICogRGV2ZS1zZSB1dGlsaXphciBjb21vIHBhcsOibWV0cm8gYSByZWZlcsOqbmNpYSBkbyBpdGVtIGUvb3Ugw61uZGljZSwgc2VuZG8gcG9yIHBhZHLDo28gbyBpdGVtLlxuICogIC0gSXRlbTogYGl0ZW1gIGRldGVybWluYSBvIGl0ZW0gZGEgbGluaGEgY29ycmVudGUuXG4gKiAgLSDDjW5kaWNlOiBgaW5kZXhgIGRldGVybWluYSBvIMOtbmRpY2UgZGEgbGluaGEgY29ycmVudGUuXG4gKlxuICogRXN0YSBkaXJldGl2YSBwb2RlIHNlciB1c2FkYSBkZSBkdWFzIGZvcm1hczogZXhwbMOtY2l0YSBvdSAqc3ludGF4IHN1Z2FyKi4gVmVqYSBhIHNlZ3VpciBhbWJvcywgcmVzcGVjdGl2YW1lbnRlOlxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8dGhmLWxpc3Qtdmlld1xuICogICB0LXByb3BlcnR5LXRpdGxlPVwibmFtZVwiXG4gKiAgIFt0LWl0ZW1zXT1cIlt7aWQ6IDEsIG5hbWU6IFwiUmVnaXN0ZXJcIiwgZW1haWw6IHJlZ2lzdGVyQHRvdHZzLmNvbX1dXCI+XG4gKlxuICogICA8bmctdGVtcGxhdGUgdC1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZSBsZXQtaXRlbSBsZXQtY29kZT1cImluZGV4XCI+XG4gKiAgICAgPGRpdiBjbGFzcz1cInRoZi1yb3dcIj5cbiAqICAgICAgIDx0aGYtaW5mbyBjbGFzcz1cInRoZi1tZC02XCIgdC1sYWJlbD1cIkNvZGVcIiBbdC12YWx1ZV09XCJjb2RlXCI+PC90aGYtaW5mbz5cbiAqICAgICAgIDx0aGYtaW5mbyBjbGFzcz1cInRoZi1tZC02XCIgdC1sYWJlbD1cIkVtYWlsXCIgW3QtdmFsdWVdPVwiaXRlbS5lbWFpbFwiPjwvdGhmLWluZm8+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvbmctdGVtcGxhdGU+XG4gKlxuICogPC90aGYtbGlzdC12aWV3PlxuICpcbiAqIC4uLlxuICogYGBgXG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIDx0aGYtbGlzdC12aWV3XG4gKiAgICB0LXByb3BlcnR5LXRpdGxlPVwibmFtZVwiXG4gKiAgICBbdC1pdGVtc109XCJbe2lkOiAxLCBuYW1lOiBcIlJlZ2lzdGVyXCIsIGVtYWlsOiByZWdpc3RlckB0b3R2cy5jb219XVwiPlxuICpcbiAqICAgIDxkaXYgKnQtbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGU9XCJsZXQgaXRlbSwgbGV0IGk9aW5kZXhcIiBjbGFzcz1cInRoZi1yb3dcIj5cbiAqICAgICAgPHRoZi1pbmZvIGNsYXNzPVwidGhmLW1kLTEyXCIgdC1sYWJlbD1cIkVtYWlsXCIgW3QtdmFsdWVdPVwiaXRlbS5lbWFpbFwiPjwvdGhmLWluZm8+XG4gKiAgICA8L2Rpdj5cbiAqIDwvdGhmLWxpc3Qtdmlldz5cbiAqIC4uLlxuICpcbiAqIGBgYFxuICpcbiAqIEEgZGlyZXRpdmEgKip0LWxpc3Qtdmlldy1jb250ZW50LXRlbXBsYXRlKiosIHBvc3NpYmlsaXRhIHRhbWLDqW0gYWx0ZXJhciBvIHTDrXR1bG8gZG9zIGl0ZW5zLiBQYXJhIGlzdG8sXG4gKiDDqSBuZWNlc3PDoXJpbyBhdHJpYnVpciBhIHJlZmVyw6puY2lhIGRhIGZ1bsOnw6NvIHF1ZSBmYXogYSBhbHRlcmHDp8Ojbywgw6AgcHJvcHJpZWRhZGUgYHQtdGl0bGVgLFxuICogYSBtZXNtYSBkZXZlIHJldG9ybmFyIHVtIHZhbG9yIGRvIHRpcG8gKnN0cmluZyouIFZlamEgbyBleGVtcGxvIGEgc2VndWlyOlxuICpcbiAqIGBgYFxuICogLi4uXG4gKiBAQ29tcG9uZW50KHtcbiAqICAgIHNlbGVjdG9yOiAnYXBwLXJvb3QnLFxuICogICAgdGVtcGxhdGU6IGBcbiAqICAgICAgLi4uXG4gKiAgICAgIDx0aGYtbGlzdC12aWV3XG4gKiAgICAgICAgW3QtaXRlbXNdPVwiaXRlbXNcIj5cbiAqICAgICAgICA8bmctdGVtcGxhdGUgdC1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZSBsZXQtaXRlbSBbdC10aXRsZV09XCJjdXN0b21UaXRsZVwiPlxuICogICAgICAgICAgPGRpdiBjbGFzcz1cInRoZi1yb3dcIj5cbiAqICAgICAgICAgICAgPHRoZi1pbmZvIGNsYXNzPVwidGhmLW1kLTEyXCIgdC1sYWJlbD1cIkN1c3RvbWVyXCIgW3QtdmFsdWVdPVwiaXRlbS5jdXN0b21lclwiPjwvdGhmLWluZm8+XG4gKiAgICAgICAgICA8L2Rpdj5cbiAqICAgICAgICA8L25nLXRlbXBsYXRlPlxuICogICAgICAuLi5cbiAqICAgIGBcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgIHB1YmxpYyBpdGVtcyA9IFt7XG4gKiAgICAgIGNvZGU6IDEyMDAsXG4gKiAgICAgIHByb2R1Y3Q6ICdSaWNlJyxcbiAqICAgICAgY3VzdG9tZXI6ICdTdXBlcm1hcmtldCAxJyxcbiAqICAgIH0sIHtcbiAqICAgICAgY29kZTogMTM1NSxcbiAqICAgICAgcHJvZHVjdDogJ0JlYW4nLFxuICogICAgICBjdXN0b21lcjogJ1N1cGVybWFya2V0IDInXG4gKiAgICB9XTtcbiAqXG4gKiAgICBjdXN0b21UaXRsZShpdGVtKSB7XG4gKiAgICAgIHJldHVybiBgJHtpdGVtLmNvZGV9IC0gJHtpdGVtLnByb2R1Y3R9YDtcbiAqICAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbdC1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZV0nXG59KVxuZXhwb3J0IGNsYXNzIFRoZkxpc3RWaWV3Q29udGVudFRlbXBsYXRlRGlyZWN0aXZlIHtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBGdW7Dp8OjbyBxdWUgZGV2ZSByZXRvcm5hciB1bSB2YWxvciBkbyB0aXBvIGBzdHJpbmdgLCBxdWUgc2Vyw6EgdXRpbGl6YWRvIGNvbW8gbyB0w610dWxvIGRlIGNhZGEgaXRlbSBkYSBsaXN0YS5cbiAgICpcbiAgICogPiBQb3IgcGFyw6JtZXRybyBzZXLDoSBlbnZpYWRvIG8gaXRlbSBjb3JyZW50ZSwgb25kZSBwb2RlcsOhIHV0aWxpesOhLWxvIHBhcmEgcmVjdXBlcmFyIGRhZG9zIHNvYnJlIG8gbWVzbW8uXG4gICAqL1xuICBASW5wdXQoJ3QtdGl0bGUnKSB0aXRsZTogKGl0ZW0pID0+IHN0cmluZztcblxuICAvLyBOZWNlc3PDoXJpbyBtYW50ZXIgdGVtcGxhdGVSZWYgcGFyYSBvIGZ1bmNpb25hbWVudG8gZG8gcm93IHRlbXBsYXRlLlxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxuXG59XG4iXX0=