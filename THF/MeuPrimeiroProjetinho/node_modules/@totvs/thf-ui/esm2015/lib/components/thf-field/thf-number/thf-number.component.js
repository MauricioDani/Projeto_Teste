/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { minFailed, maxFailed } from '../validators';
import { ThfNumberBaseComponent } from './thf-number-base.component';
/**
 * \@docsExtends ThfInputBaseComponent
 *
 * \@description
 *
 * thf-number é um input específico para receber apenas números.
 * É possível configurar um valor mínimo, máximo e um step com t-min, t-max e t-step,
 * respectivamente.
 *
 * \@example
 *
 * <example name="thf-number-basic" title="Totvs Number Basic">
 *  <file name="sample-thf-number-basic/sample-thf-number-basic.component.html"> </file>
 *  <file name="sample-thf-number-basic/sample-thf-number-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-number-labs" title="Totvs Number Labs">
 *  <file name="sample-thf-number-labs/sample-thf-number-labs.component.html"> </file>
 *  <file name="sample-thf-number-labs/sample-thf-number-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-number-calculate" title="Totvs Number - Calculate">
 *  <file name="sample-thf-number-calculate/sample-thf-number-calculate.component.html"> </file>
 *  <file name="sample-thf-number-calculate/sample-thf-number-calculate.component.ts"> </file>
 * </example>
 */
export class ThfNumberComponent extends ThfNumberBaseComponent {
    /**
     * @param {?} el
     */
    constructor(el) {
        super(el);
        /**
         * \@optional
         *
         * \@description
         *
         * Intervalo.
         *
         * \@default 1
         */
        this.step = '1';
    }
    /**
     * @param {?} min
     * @return {?}
     */
    set setMin(min) {
        /** @type {?} */
        const parsedInt = parseInt(min, 10);
        this.min = !isNaN(parsedInt) ? parsedInt : undefined;
        this.validateModel();
    }
    /**
     * @param {?} max
     * @return {?}
     */
    set setMax(max) {
        /** @type {?} */
        const parsedInt = parseInt(max, 10);
        this.max = !isNaN(parsedInt) ? parsedInt : undefined;
        this.validateModel();
    }
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    extraValidation(abstractControl) {
        if (minFailed(this.min, abstractControl.value)) {
            return { min: {
                    valid: false,
                } };
        }
        if (maxFailed(this.max, abstractControl.value)) {
            return { max: {
                    valid: false,
                } };
        }
        return null;
    }
}
ThfNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-number',
                template: "<thf-field-container\n  [t-help]=\"help\"\n  [t-label]=\"label\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n    <input #inp\n      class=\"thf-input\"\n      type=\"number\"\n      [attr.max]=\"max\"\n      [attr.min]=\"min\"\n      [attr.name]=\"name\"\n      [attr.step]=\"step\"\n      [class.thf-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [tabindex]=\"disabled ? -1 : 0\"\n      (blur)=\"eventOnBlur($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <thf-clean [t-default-value]=\"null\"\n        [t-element-ref]=\"inputEl\"\n        (t-change-event)=\"clear($event)\">\n      </thf-clean>\n    </div>\n  </div>\n\n  <thf-field-container-bottom\n    [t-error-pattern]=\"getErrorPattern()\">\n  </thf-field-container-bottom>\n\n</thf-field-container>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfNumberComponent)),
                        multi: true,
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfNumberComponent)),
                        multi: true,
                    }
                ]
            }] }
];
/** @nocollapse */
ThfNumberComponent.ctorParameters = () => [
    { type: ElementRef }
];
ThfNumberComponent.propDecorators = {
    setMin: [{ type: Input, args: ['t-min',] }],
    setMax: [{ type: Input, args: ['t-max',] }],
    step: [{ type: Input, args: ['t-step',] }]
};
if (false) {
    /**
     * Valor mínimo.
     * @type {?}
     */
    ThfNumberComponent.prototype.min;
    /**
     * Valor máximo.
     * @type {?}
     */
    ThfNumberComponent.prototype.max;
    /**
     * \@optional
     *
     * \@description
     *
     * Intervalo.
     *
     * \@default 1
     * @type {?}
     */
    ThfNumberComponent.prototype.step;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLW51bWJlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLWZpZWxkL3RoZi1udW1iZXIvdGhmLW51bWJlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFtQixpQkFBaUIsRUFBRSxhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVuRixPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkNyRSxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsc0JBQXNCOzs7O0lBNkI1RCxZQUFZLEVBQWM7UUFDeEIsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDOzs7Ozs7Ozs7O1FBSEssU0FBSSxHQUFZLEdBQUcsQ0FBQztJQUlyQyxDQUFDOzs7OztJQTNCRCxJQUFvQixNQUFNLENBQUMsR0FBVzs7Y0FDOUIsU0FBUyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3JELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7OztJQUlELElBQW9CLE1BQU0sQ0FBQyxHQUFXOztjQUM5QixTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7UUFDbkMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDckQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBaUJELGVBQWUsQ0FBQyxlQUFnQztRQUU5QyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM5QyxPQUFPLEVBQUUsR0FBRyxFQUFFO29CQUNaLEtBQUssRUFBRSxLQUFLO2lCQUNiLEVBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDOUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtvQkFDWixLQUFLLEVBQUUsS0FBSztpQkFDYixFQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7O1lBL0RGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsaWhDQUEwQztnQkFDMUMsU0FBUyxFQUFFO29CQUNYO3dCQUNFLE9BQU8sRUFBRSxpQkFBaUI7d0JBQzFCLFdBQVcsRUFBRSxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMsa0JBQWtCLEVBQUM7d0JBQ2pELEtBQUssRUFBRSxJQUFJO3FCQUNaO29CQUNEO3dCQUNFLE9BQU8sRUFBRSxhQUFhO3dCQUN0QixXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixFQUFDO3dCQUNqRCxLQUFLLEVBQUUsSUFBSTtxQkFDWjtpQkFBQzthQUNIOzs7O1lBOUNtQixVQUFVOzs7cUJBbUQzQixLQUFLLFNBQUMsT0FBTztxQkFRYixLQUFLLFNBQUMsT0FBTzttQkFlYixLQUFLLFNBQUMsUUFBUTs7Ozs7OztJQXhCZixpQ0FBYTs7Ozs7SUFRYixpQ0FBYTs7Ozs7Ozs7Ozs7SUFnQmIsa0NBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBmb3J3YXJkUmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBOR19WQUxVRV9BQ0NFU1NPUiwgTkdfVkFMSURBVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgbWluRmFpbGVkLCBtYXhGYWlsZWQgfSBmcm9tICcuLi92YWxpZGF0b3JzJztcbmltcG9ydCB7IFRoZk51bWJlckJhc2VDb21wb25lbnQgfSBmcm9tICcuL3RoZi1udW1iZXItYmFzZS5jb21wb25lbnQnO1xuXG4vKipcbiAqIEBkb2NzRXh0ZW5kcyBUaGZJbnB1dEJhc2VDb21wb25lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiB0aGYtbnVtYmVyIMOpIHVtIGlucHV0IGVzcGVjw61maWNvIHBhcmEgcmVjZWJlciBhcGVuYXMgbsO6bWVyb3MuXG4gKiDDiSBwb3Nzw612ZWwgY29uZmlndXJhciB1bSB2YWxvciBtw61uaW1vLCBtw6F4aW1vIGUgdW0gc3RlcCBjb20gdC1taW4sIHQtbWF4IGUgdC1zdGVwLFxuICogcmVzcGVjdGl2YW1lbnRlLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1udW1iZXItYmFzaWNcIiB0aXRsZT1cIlRvdHZzIE51bWJlciBCYXNpY1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLW51bWJlci1iYXNpYy9zYW1wbGUtdGhmLW51bWJlci1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtbnVtYmVyLWJhc2ljL3NhbXBsZS10aGYtbnVtYmVyLWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1udW1iZXItbGFic1wiIHRpdGxlPVwiVG90dnMgTnVtYmVyIExhYnNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1udW1iZXItbGFicy9zYW1wbGUtdGhmLW51bWJlci1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1udW1iZXItbGFicy9zYW1wbGUtdGhmLW51bWJlci1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1udW1iZXItY2FsY3VsYXRlXCIgdGl0bGU9XCJUb3R2cyBOdW1iZXIgLSBDYWxjdWxhdGVcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1udW1iZXItY2FsY3VsYXRlL3NhbXBsZS10aGYtbnVtYmVyLWNhbGN1bGF0ZS5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtbnVtYmVyLWNhbGN1bGF0ZS9zYW1wbGUtdGhmLW51bWJlci1jYWxjdWxhdGUuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGhmLW51bWJlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi90aGYtbnVtYmVyLmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzOiBbXG4gIHtcbiAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaGZOdW1iZXJDb21wb25lbnQpLFxuICAgIG11bHRpOiB0cnVlLFxuICB9LFxuICB7XG4gICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUaGZOdW1iZXJDb21wb25lbnQpLFxuICAgIG11bHRpOiB0cnVlLFxuICB9XVxufSlcbmV4cG9ydCBjbGFzcyBUaGZOdW1iZXJDb21wb25lbnQgZXh0ZW5kcyBUaGZOdW1iZXJCYXNlQ29tcG9uZW50IHtcblxuICAvKiogVmFsb3IgbcOtbmltby4gKi9cbiAgbWluPzogbnVtYmVyO1xuICBASW5wdXQoJ3QtbWluJykgc2V0IHNldE1pbihtaW46IHN0cmluZykge1xuICAgIGNvbnN0IHBhcnNlZEludCA9IHBhcnNlSW50KG1pbiwgMTApO1xuICAgIHRoaXMubWluID0gIWlzTmFOKHBhcnNlZEludCkgPyBwYXJzZWRJbnQgOiB1bmRlZmluZWQ7XG4gICAgdGhpcy52YWxpZGF0ZU1vZGVsKCk7XG4gIH1cblxuICAvKiogVmFsb3IgbcOheGltby4gKi9cbiAgbWF4PzogbnVtYmVyO1xuICBASW5wdXQoJ3QtbWF4Jykgc2V0IHNldE1heChtYXg6IHN0cmluZykge1xuICAgIGNvbnN0IHBhcnNlZEludCA9IHBhcnNlSW50KG1heCwgMTApO1xuICAgIHRoaXMubWF4ID0gIWlzTmFOKHBhcnNlZEludCkgPyBwYXJzZWRJbnQgOiB1bmRlZmluZWQ7XG4gICAgdGhpcy52YWxpZGF0ZU1vZGVsKCk7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBJbnRlcnZhbG8uXG4gICAqXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIEBJbnB1dCgndC1zdGVwJykgc3RlcD86IHN0cmluZyA9ICcxJztcblxuICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZikge1xuICAgIHN1cGVyKGVsKTtcbiAgfVxuXG4gIGV4dHJhVmFsaWRhdGlvbihhYnN0cmFjdENvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55OyB9IHtcblxuICAgIGlmIChtaW5GYWlsZWQodGhpcy5taW4sIGFic3RyYWN0Q29udHJvbC52YWx1ZSkpIHtcbiAgICAgIHJldHVybiB7IG1pbjoge1xuICAgICAgICB2YWxpZDogZmFsc2UsXG4gICAgICB9fTtcbiAgICB9XG5cbiAgICBpZiAobWF4RmFpbGVkKHRoaXMubWF4LCBhYnN0cmFjdENvbnRyb2wudmFsdWUpKSB7XG4gICAgICByZXR1cm4geyBtYXg6IHtcbiAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgfX07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxufVxuIl19