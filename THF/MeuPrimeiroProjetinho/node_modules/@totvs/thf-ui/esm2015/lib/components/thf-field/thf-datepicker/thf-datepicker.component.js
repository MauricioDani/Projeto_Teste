/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, HostListener, Input, Renderer2, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { formatYear, isMobile, setYearFrom0To100 } from '../../../utils/util';
import { ThfControlPositionService } from './../../../services/thf-control-position/thf-control-position.service';
import { ThfCalendarComponent } from './thf-calendar/thf-calendar.component';
import { ThfDatepickerBaseComponent } from './thf-datepicker-base.component';
/** @type {?} */
const thfCalendarContentOffset = 8;
/** @type {?} */
const thfCalendarPositionDefault = 'bottom-left';
/**
 * \@docsExtends ThfDatepickerBaseComponent
 *
 * \@example
 *
 * <example name="thf-datepicker-basic" title="Totvs Datepicker Basic">
 *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.html"> </file>
 *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.ts"> </file>
 *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.po.ts"> </file>
 *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.e2e-spec.ts"> </file>
 * </example>
 *
 * <example name="thf-datepicker-labs" title="Totvs Datepicker Labs">
 *  <file name="sample-thf-datepicker-labs/sample-thf-datepicker-labs.component.html"> </file>
 *  <file name="sample-thf-datepicker-labs/sample-thf-datepicker-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-datepicker-airfare" title="Totvs Datepicker - Airfare">
 *  <file name="sample-thf-datepicker-airfare/sample-thf-datepicker-airfare.component.html"> </file>
 *  <file name="sample-thf-datepicker-airfare/sample-thf-datepicker-airfare.component.ts"> </file>
 * </example>
 *
 * <example name="thf-datepicker-airfare-reactive-form" title="Totvs Datepicker - Airfare Reactive Form">
 *  <file name="sample-thf-datepicker-airfare-reactive-form/sample-thf-datepicker-airfare-reactive-form.component.html"> </file>
 *  <file name="sample-thf-datepicker-airfare-reactive-form/sample-thf-datepicker-airfare-reactive-form.component.ts"> </file>
 * </example>
 */
export class ThfDatepickerComponent extends ThfDatepickerBaseComponent {
    /**
     * @param {?} controlPosition
     * @param {?} renderer
     * @param {?} el
     */
    constructor(controlPosition, renderer, el) {
        super();
        this.controlPosition = controlPosition;
        this.renderer = renderer;
        this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])$');
        this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])' +
            'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
            '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
            '(?:|:?[0-5]\\d)$');
        this.onScroll = (/**
         * @return {?}
         */
        () => {
            this.controlPosition.adjustPosition(thfCalendarPositionDefault);
        });
        this.el = el;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setDialogPickerStyleDisplay('none');
        // Põe o foco no Input, setado pelo t-focus
        if (this.focus) {
            this.inputEl.nativeElement.focus();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListeners();
    }
    /**
     * @return {?}
     */
    togglePicker() {
        if (this.disabled || this.readonly) {
            return;
        }
        if (!this.calendar.visible) {
            this.calendar.init();
            this.setCalendarPosition();
            this.initializeListeners();
        }
        else {
            this.inputEl.nativeElement.disabled = false;
            this.closeCalendar();
        }
    }
    /**
     * @return {?}
     */
    dateSelected() {
        this.inputEl.nativeElement.focus();
        this.inputEl.nativeElement.value = this.formatToDate(this.date);
        this.controlModel(this.date);
        this.closeCalendar();
    }
    // Esconde Picker quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    wasClickedOnPicker(event) {
        if (!this.dialogPicker || !this.iconDatepicker) {
            return;
        }
        if ((!this.dialogPicker.nativeElement.contains(event.target) || this.hasOverlayClass(event.target)) &&
            !this.iconDatepicker.nativeElement.contains(event.target) && !this.hasAttrCalendar(event.target)) {
            this.closeCalendar();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onKeyup($event) {
        if (this.readonly) {
            return;
        }
        this.objMask.keyup($event);
        // Controla a atualização do model, verificando se a data é valida
        if (this.objMask.valueToModel || this.objMask.valueToModel === '') {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                this.date = this.getDateFromString(this.inputEl.nativeElement.value);
            }
            else {
                this.date = undefined;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
        }
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    onKeydown($event) {
        if (this.readonly) {
            return;
        }
        this.objMask.keydown($event);
    }
    /**
     * @return {?}
     */
    hasInvalidClass() {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    }
    /**
     * @return {?}
     */
    getErrorPattern() {
        return (this.errorPattern !== '' && this.hasInvalidClass()) ? this.errorPattern : '';
    }
    /**
     * @return {?}
     */
    clear() {
        this.valueBeforeChange = this.formatToDate(this.date);
        this.date = undefined;
        this.controlModel(this.date);
        this.controlChangeEmitter();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    eventOnBlur($event) {
        /** @type {?} */
        const date = this.inputEl.nativeElement.value;
        /** @type {?} */
        const newDate = date ? this.getDateFromString(date) : undefined;
        this.objMask.blur($event);
        this.onblur.emit();
        if (this.objMask.valueToModel) {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(newDate);
                this.date = newDate;
            }
            else {
                this.date = undefined;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
            this.callOnChange(this.date);
        }
        this.controlChangeEmitter();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    eventOnChange($event) {
        /** @type {?} */
        const elementValue = this.inputEl.nativeElement.value;
        if (this.verifyMobile()) {
            this.controlModel(elementValue);
            this.callOnChange(elementValue);
        }
        this.onchange.emit(elementValue);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    eventOnClick($event) {
        if (this.verifyMobile()) {
            $event.target.blur();
            // abre o calendar quando clicar no input somente no mobile
            setTimeout((/**
             * @return {?}
             */
            () => this.togglePicker()), 0);
        }
        else {
            // Atualiza a posição do cursor ao clicar
            this.objMask.click($event);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    formatToDate(value) {
        if (!value) {
            return undefined;
        }
        /** @type {?} */
        let dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
        return dateFormatted;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    refreshValue(value) {
        if (value) {
            this.inputEl.nativeElement.value = this.formatToDate(value);
        }
    }
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (this.inputEl && value) {
            if (value instanceof Date) {
                /** @type {?} */
                const dateString = value.toString();
                this.hour = 'T' + dateString.substring(16, 24) + dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
                this.date = value;
                this.inputEl.nativeElement.value = this.formatToDate(value);
            }
            else if (this.isValidDateIso(value) || this.isValidExtendedIso(value)) {
                if (this.isValidDateIso(value)) {
                    this.isExtendedISO = false;
                }
                else {
                    this.hour = value.substring(10, 25);
                    this.isExtendedISO = true;
                }
                /** @type {?} */
                const day = parseInt(value.substring(8, 10), 10);
                /** @type {?} */
                const month = parseInt(value.substring(5, 7), 10) - 1;
                /** @type {?} */
                const year = parseInt(value.substring(0, 4), 10);
                /** @type {?} */
                const dateTemp = new Date(year, month, day);
                setYearFrom0To100(dateTemp, year);
                this.date = dateTemp;
                this.inputEl.nativeElement.value = this.formatToDate(dateTemp);
            }
            else {
                this.inputEl.nativeElement.value = '';
                this.date = undefined;
            }
            this.controlModel(this.date);
        }
        else if (this.inputEl) {
            this.inputEl.nativeElement.value = '';
            this.date = undefined;
        }
        this.valueBeforeChange = this.formatToDate(this.date);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isValidDateIso(value) {
        return this.dateRegex.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isValidExtendedIso(value) {
        return this.isoRegex.test(value);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    hasOverlayClass(element) {
        return element.classList.contains('thf-calendar-overlay');
    }
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    verifyMobile() {
        return isMobile();
    }
    /**
     * @private
     * @return {?}
     */
    closeCalendar() {
        this.calendar.close();
        this.removeListeners();
        this.setDialogPickerStyleDisplay('none');
    }
    /**
     * @private
     * @return {?}
     */
    controlChangeEmitter() {
        /** @type {?} */
        const dateModelFormatted = this.formatToDate(this.date);
        if (dateModelFormatted !== this.valueBeforeChange) {
            this.valueBeforeChange = dateModelFormatted;
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout((/**
             * @return {?}
             */
            () => {
                this.onchange.emit(dateModelFormatted);
            }), 200);
        }
    }
    /**
     * @private
     * @param {?} element
     * @return {?}
     */
    hasAttrCalendar(element) {
        /** @type {?} */
        const attrCalendar = 'attr-calendar';
        return (element && element.hasAttribute(attrCalendar)) || (element.parentElement && element.parentElement.hasAttribute(attrCalendar));
    }
    /**
     * @private
     * @return {?}
     */
    initializeListeners() {
        this.clickListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.wasClickedOnPicker(event);
        }));
        this.eventResizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        () => {
            this.closeCalendar();
        }));
        window.addEventListener('scroll', this.onScroll, true);
    }
    /**
     * @private
     * @return {?}
     */
    removeListeners() {
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setDialogPickerStyleDisplay(value) {
        this.dialogPicker.nativeElement.style.display = value;
    }
    /**
     * @private
     * @return {?}
     */
    setCalendarPosition() {
        this.setDialogPickerStyleDisplay('block');
        this.controlPosition.setElements(this.dialogPicker.nativeElement, thfCalendarContentOffset, this.inputEl, ['top-left', 'bottom-left'], false, true);
        this.controlPosition.adjustPosition(thfCalendarPositionDefault);
    }
}
ThfDatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-datepicker',
                template: "<thf-field-container\n  [t-help]=\"help\"\n  [t-label]=\"label\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n\n    <input #inp\n      class=\"thf-input thf-datepicker\"\n      [ngClass]=\"clean && inp.value ? 'thf-input-double-icon-right' : 'thf-input-icon-right'\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      (blur)=\"eventOnBlur($event)\"\n      (change)=\"eventOnChange($event)\"\n      (click)=\"eventOnClick($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear()\"></thf-clean>\n\n      <span #iconDatepicker\n        class=\"thf-icon thf-field-icon thf-icon-calendar\"\n        [class.thf-field-icon]=\"!disabled && !readonly\"\n        [class.thf-field-icon-disabled]=\"disabled || readonly\"\n        (click)=\"togglePicker()\">\n      </span>\n    </div>\n  </div>\n\n  <div #dialogPicker [class.thf-datepicker-popup-calendar]=\"!verifyMobile()\">\n    <thf-calendar #calendar\n      [(t-selected-date)]=\"date\"\n      [t-date-end]=\"maxDate\"\n      [t-date-start]=\"minDate\"\n      [t-locale]=\"locale\"\n      (t-submit)=\"dateSelected()\">\n    </thf-calendar>\n  </div>\n\n  <thf-field-container-bottom [t-error-pattern]=\"getErrorPattern()\"></thf-field-container-bottom>\n\n</thf-field-container>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfDatepickerComponent)),
                        multi: true,
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfDatepickerComponent)),
                        multi: true,
                    },
                    ThfControlPositionService
                ]
            }] }
];
/** @nocollapse */
ThfDatepickerComponent.ctorParameters = () => [
    { type: ThfControlPositionService },
    { type: Renderer2 },
    { type: ElementRef }
];
ThfDatepickerComponent.propDecorators = {
    calendar: [{ type: ViewChild, args: ['calendar', { static: true },] }],
    dialogPicker: [{ type: ViewChild, args: ['dialogPicker', { read: ElementRef, static: true },] }],
    iconDatepicker: [{ type: ViewChild, args: ['iconDatepicker', { read: ElementRef, static: true },] }],
    inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef, static: true },] }],
    label: [{ type: Input, args: ['t-label',] }],
    help: [{ type: Input, args: ['t-help',] }],
    onKeyup: [{ type: HostListener, args: ['keyup', ['$event'],] }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    ThfDatepickerComponent.prototype.date;
    /** @type {?} */
    ThfDatepickerComponent.prototype.el;
    /** @type {?} */
    ThfDatepickerComponent.prototype.hour;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.clickListener;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.dateRegex;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.isoRegex;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.timeoutChange;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.valueBeforeChange;
    /** @type {?} */
    ThfDatepickerComponent.prototype.eventListenerFunction;
    /** @type {?} */
    ThfDatepickerComponent.prototype.eventResizeListener;
    /** @type {?} */
    ThfDatepickerComponent.prototype.calendar;
    /** @type {?} */
    ThfDatepickerComponent.prototype.dialogPicker;
    /** @type {?} */
    ThfDatepickerComponent.prototype.iconDatepicker;
    /** @type {?} */
    ThfDatepickerComponent.prototype.inputEl;
    /**
     * Rótulo do campo.
     * @type {?}
     */
    ThfDatepickerComponent.prototype.label;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    ThfDatepickerComponent.prototype.help;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.onScroll;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.controlPosition;
    /**
     * @type {?}
     * @private
     */
    ThfDatepickerComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,