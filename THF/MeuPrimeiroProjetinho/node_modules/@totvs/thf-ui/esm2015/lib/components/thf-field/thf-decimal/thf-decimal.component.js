/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, Input, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { convertToInt } from '../../../utils/util';
import { ThfInputBaseComponent } from '../thf-input/thf-input-base.component';
/** @type {?} */
const THF_DECIMAL_DEFAULT_DECIMALS_LENGTH = 2;
/** @type {?} */
const THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH = 13;
/**
 *
 * \@docsExtends ThfInputBaseComponent
 *
 * \@description
 *
 * thf-decimal é um input específico para receber apenas números decimais.
 * Quando utilizado, o componente terá comportamento de um campo de 'text' com algumas características:
 *
 * - Aceita apenas números;
 * - Utiliza ',' como separador de decimal;
 * - Utiliza '.' para separação de milhar;
 * - É possível configurar a quantidade de casas decimais e a quantidade de digitos do campo.
 *
 * \@example
 *
 * <example name="thf-decimal-basic" title="Totvs Decimal Basic">
 *  <file name="sample-thf-decimal-basic/sample-thf-decimal-basic.component.html"> </file>
 *  <file name="sample-thf-decimal-basic/sample-thf-decimal-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-decimal-labs" title="Totvs Decimal Labs">
 *  <file name="sample-thf-decimal-labs/sample-thf-decimal-labs.component.html"> </file>
 *  <file name="sample-thf-decimal-labs/sample-thf-decimal-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-decimal-hourly-wage" title="Totvs Decimal - Hourly Wage">
 *  <file name="sample-thf-decimal-hourly-wage/sample-thf-decimal-hourly-wage.component.html"> </file>
 *  <file name="sample-thf-decimal-hourly-wage/sample-thf-decimal-hourly-wage.component.ts"> </file>
 * </example>
 *
 * <example name="thf-decimal-hourly-wage-reactive-form" title="Totvs Decimal - Hourly Wage Reactive Form">
 *  <file name="sample-thf-decimal-hourly-wage-reactive-form/sample-thf-decimal-hourly-wage-reactive-form.component.html"> </file>
 *  <file name="sample-thf-decimal-hourly-wage-reactive-form/sample-thf-decimal-hourly-wage-reactive-form.component.ts"> </file>
 * </example>
 */
export class ThfDecimalComponent extends ThfInputBaseComponent {
    /**
     * @param {?} el
     */
    constructor(el) {
        super();
        this.el = el;
        this._decimalsLength = THF_DECIMAL_DEFAULT_DECIMALS_LENGTH;
        this._thousandMaxlength = THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH;
        this.decimalSeparator = ',';
        this.fireChange = false;
        this.isKeyboardAndroid = false;
        this.minusSign = '-';
        this.oldDotsLength = null;
        this.thousandSeparator = '.';
        this.regex = {
            thousand: new RegExp('\\' + '.', 'g'),
            decimal: new RegExp('\\' + ',', 'g')
        };
        this.isKeyboardAndroid = !!navigator.userAgent.match(/Android/i);
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Quantidade máxima de casas decimais.
     *
     * \@default `2`
     * @param {?} value
     * @return {?}
     */
    set decimalsLength(value) {
        this._decimalsLength = convertToInt(value, THF_DECIMAL_DEFAULT_DECIMALS_LENGTH);
    }
    /**
     * @return {?}
     */
    get decimalsLength() {
        return this._decimalsLength;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Número máximo de dígitos antes do separador de decimal. O valor máximo possível deve ser menor ou igual a 13.
     *
     * \@default `13`
     * @param {?} value
     * @return {?}
     */
    set thousandMaxlength(value) {
        /** @type {?} */
        const thousandMaxlength = convertToInt(value, THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH);
        this._thousandMaxlength = thousandMaxlength <= THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH ?
            thousandMaxlength : THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH;
    }
    /**
     * @return {?}
     */
    get thousandMaxlength() {
        return this._thousandMaxlength;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.putFocus();
        this.setPaddingInput();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    clear(value) {
        this.callOnChange(value);
        this.controlChangeEmitter();
    }
    /**
     * @param {?} c
     * @return {?}
     */
    extraValidation(c) {
        return null;
    }
    /**
     * @return {?}
     */
    getScreenValue() {
        return (this.inputEl) ? this.inputEl.nativeElement.value : '';
    }
    /**
     * @return {?}
     */
    hasInvalidClass() {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.getScreenValue() !== '');
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    hasLetters(value = '') {
        return value.match(/[a-zA-Z:;+=_´^~"'@#$%¨&*()/\\|]+/);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    isValidNumber(event) {
        // - event.key não existia em alguns browsers, como Samsung browser e Firefox.
        /** @type {?} */
        const keyValue = (/** @type {?} */ (String.fromCharCode(event.which)));
        /** @type {?} */
        const validKey = event.which !== 8 && event.which !== 0;
        return !this.hasLetters(keyValue) && validKey;
    }
    // função responsável por adicionar os zeroes com as casa decimais ao sair do campo.
    /**
     * @param {?} event
     * @return {?}
     */
    onBlur(event) {
        /** @type {?} */
        const value = event.target.value;
        if (value) {
            if (this.hasLetters(value) || this.containsMoreThanOneComma(value)) {
                this.setViewValue('');
                this.callOnChange(undefined);
                return;
            }
            /** @type {?} */
            const valueWithoutThousandSeparator = this.formatValueWithoutThousandSeparator(value);
            this.setViewValue(this.formatToViewValue(valueWithoutThousandSeparator));
        }
        this.blur.emit();
        this.controlChangeEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFocus(event) {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.getScreenValue();
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onInput(event) {
        /** @type {?} */
        const selectionStart = event.target.selectionStart;
        /** @type {?} */
        const selectionEnd = event.target.selectionEnd;
        /** @type {?} */
        let modelValue;
        /** @type {?} */
        let viewValue;
        // - Browsers nativos do Android ex: Samsung Browser.
        if (this.isKeyboardAndroid) {
            this.onInputKeyboardAndroid(event);
        }
        modelValue = this.formatValueWithoutThousandSeparator(event.target.value);
        modelValue = this.addZeroBefore(modelValue);
        viewValue = this.formatMask(modelValue);
        // validação para não quebrar IE com placeholder definido e Input vazio
        if (viewValue) {
            this.setViewValue(viewValue);
            this.setCursorInput(event, selectionStart, selectionEnd);
        }
        this.callOnChange(this.formatToModelValue(modelValue));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onInputKeyboardAndroid(event) {
        /** @type {?} */
        const inputValue = event.target.value;
        /** @type {?} */
        const selectionStart = event.target.selectionStart;
        /** @type {?} */
        const hasLetters = this.hasLetters(inputValue);
        if (hasLetters) {
            this.setViewValue(inputValue.replace(hasLetters[0], ''));
            return event.preventDefault();
        }
        else {
            /** @type {?} */
            const position = selectionStart - 1;
            /** @type {?} */
            const key = inputValue.charAt(position);
            this.setPositionValue(event);
            if (this.isValidKey(event, key)) {
                this.setViewValue(inputValue);
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyPress(event) {
        this.isValidKey(event);
    }
    /**
     * @return {?}
     */
    setPaddingInput() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const selectorIcons = '.thf-field-icon-container:not(.thf-field-icon-container-left) > .thf-icon';
            /** @type {?} */
            let icons = this.el.nativeElement.querySelectorAll(selectorIcons).length;
            if (this.clean) {
                icons++;
            }
            if (icons) {
                this.inputEl.nativeElement.style.paddingRight = `${icons * 36}px`;
            }
        }));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValueModel(value) {
        if (this.inputEl) {
            if (value || value === 0) {
                /** @type {?} */
                const formatedViewValue = this.formatToViewValue(value);
                this.setViewValue(formatedViewValue);
            }
            else {
                this.setViewValue('');
            }
        }
        if (value) {
            this.change.emit(value);
        }
    }
    // reponsável por adicionar 0 antes da virgula (decimalSeparator).
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    addZeroBefore(value) {
        /** @type {?} */
        const isDecimalSeparator = value === this.decimalSeparator;
        return isDecimalSeparator ? `0${value}` : value;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    containsComma(value) {
        return value.includes(this.decimalSeparator);
    }
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    containsMoreThanOneComma(value = '') {
        /** @type {?} */
        const foundComma = value.match(/,/g);
        return !!(foundComma && foundComma.length > 1);
    }
    /**
     * @private
     * @return {?}
     */
    controlChangeEmitter() {
        /** @type {?} */
        const elementValue = this.getScreenValue();
        // Emite o evento change manualmente quando o campo é alterado
        // Este evento é controlado manualmente devido ao preventDefault existente na máscara
        // e devido ao controle do t-clean, que também precisa emitir change
        if (elementValue !== this.valueBeforeChange) {
            this.fireChange = true;
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.fireChange) {
                    this.change.emit(elementValue);
                }
            }), 200);
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    formatMask(value) {
        // necessário para não adicionar . nas casa decimais.
        // por exemplo: 12.345,123.45 (errado)
        // 12.345,12345 (correto)
        if (value.match(this.regex.decimal)) {
            /** @type {?} */
            const regex = new RegExp('(\\d)(?=(\\d{3})+(?!\\d),)', 'g');
            return value.toString().replace(regex, '$1.');
        }
        return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1.');
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    formatToModelValue(value) {
        /** @type {?} */
        const formattedValue = this.replaceCommaToDot(value);
        /** @type {?} */
        const parsedValue = formattedValue ? parseFloat(Number(formattedValue).toFixed(this.decimalsLength)) : undefined;
        return parsedValue === 0 || parsedValue ? parsedValue : undefined;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    formatToViewValue(value) {
        /** @type {?} */
        let formatedNumber;
        /** @type {?} */
        let numberValue;
        /** @type {?} */
        let valueBeforeDot;
        /** @type {?} */
        let valueAfterDot;
        // - Necessário para tratar valores que contenham decimalSeparator
        value = this.replaceCommaToDot(value);
        numberValue = Number(value).toFixed(this.decimalsLength);
        valueBeforeDot = this.getValueBeforeSeparator(numberValue, this.thousandSeparator);
        valueAfterDot = this.getValueAfterSeparator(numberValue, this.thousandSeparator);
        formatedNumber = this.formatMask(valueBeforeDot);
        if (this.decimalsLength === 0) {
            return formatedNumber;
        }
        else {
            return formatedNumber + this.decimalSeparator + valueAfterDot;
        }
    }
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    formatValueWithoutThousandSeparator(value = '') {
        return value.toString().replace(this.regex.thousand, '');
    }
    /**
     * @private
     * @param {?=} value
     * @param {?=} separator
     * @return {?}
     */
    getValueAfterSeparator(value = '', separator) {
        return value.split(separator)[1] || '';
    }
    /**
     * @private
     * @param {?=} value
     * @param {?=} separator
     * @return {?}
     */
    getValueBeforeSeparator(value = '', separator) {
        return value.split(separator)[0] || '';
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    hasLessDot(value) {
        if (value) {
            /** @type {?} */
            const dots = value.match(this.regex.thousand);
            /** @type {?} */
            const dotsLength = dots && dots.length;
            if (dotsLength < this.oldDotsLength) {
                this.oldDotsLength = dotsLength;
                return true;
            }
        }
        if (!value) {
            this.oldDotsLength = null;
        }
        return false;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    hasMoreDot(value) {
        if (value) {
            /** @type {?} */
            const dots = value.match(this.regex.thousand);
            /** @type {?} */
            const dotsLength = dots && dots.length;
            if (dotsLength > this.oldDotsLength) {
                this.oldDotsLength = dotsLength;
                return true;
            }
        }
        if (!value) {
            this.oldDotsLength = null;
        }
        return false;
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    hasMinusSignInvalidPosition(event) {
        /** @type {?} */
        const keyIsMinusSign = event.key === this.minusSign;
        /** @type {?} */
        const selectionStart = event.target.selectionStart;
        return keyIsMinusSign && selectionStart !== 0;
    }
    /**
     * @private
     * @param {?} event
     * @param {?} charCode
     * @return {?}
     */
    isInvalidKey(event, charCode) {
        /** @type {?} */
        const isInvalidNumber = !this.isValidNumber(event);
        return this.verifyInsertComma(event) || this.verifyThousandLength(event) ||
            this.verifyValueAfterComma(event) || this.verifyInsertMinusSign(event) ||
            this.hasMinusSignInvalidPosition(event) || isInvalidNumber ||
            this.validateCursorPositionBeforeSeparator(event) || this.verifyDecimalLengthIsZeroAndKeyPressedIsComma(charCode);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    isKeyDecimalSeparator(event) {
        return event.key === this.decimalSeparator || event.char === this.decimalSeparator;
    }
    /**
     * @private
     * @param {?} positionCursor
     * @param {?} value
     * @return {?}
     */
    isPositionAfterDecimalSeparator(positionCursor, value) {
        /** @type {?} */
        const indexComma = value && value.indexOf(this.decimalSeparator);
        if (indexComma && this.decimalsLength > 0) {
            return positionCursor > indexComma;
        }
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    isSelectionStartDifferentSelectionEnd(target) {
        return target.selectionStart !== target.selectionEnd;
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} key
     * @return {?}
     */
    isValidKey(event, key) {
        /** @type {?} */
        const charCode = event.which || event.keyCode;
        /** @type {?} */
        const validKey = event.which === 8 || event.which === 0;
        if (validKey && !this.isKeyboardAndroid) {
            return;
        }
        if (key) {
            event.key = key;
        }
        if (this.isInvalidKey(event, charCode)) {
            event.preventDefault();
            return false;
        }
        return true;
    }
    // Quando decimalsLength for 0 não deve permitir informar vírgula (decimalSeparator)
    /**
     * @private
     * @param {?} charCode
     * @return {?}
     */
    verifyDecimalLengthIsZeroAndKeyPressedIsComma(charCode) {
        return (charCode === 44 && this.decimalsLength === 0);
    }
    /**
     * @private
     * @return {?}
     */
    putFocus() {
        if (this.focus) {
            this.inputEl.nativeElement.focus();
        }
    }
    /**
     * @private
     * @param {?} target
     * @param {?} selectionStart
     * @param {?} selectionEnd
     * @return {?}
     */
    setInitialSelectionRange(target, selectionStart, selectionEnd) {
        if (selectionStart === 1 && selectionEnd === 1) {
            return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
        }
        return target.setSelectionRange(selectionStart - 1, selectionEnd - 1);
    }
    /**
     * @private
     * @param {?} value
     * @param {?} index
     * @param {?} replace
     * @return {?}
     */
    replaceAt(value, index, replace) {
        return value.substring(0, index) + replace + value.substring(index + 1);
    }
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    replaceCommaToDot(value = '') {
        return value.toString().replace(this.regex.decimal, '.');
    }
    /**
     * @private
     * @param {?} event
     * @param {?} selectionStart
     * @param {?} selectionEnd
     * @return {?}
     */
    setCursorInput(event, selectionStart, selectionEnd) {
        /** @type {?} */
        const target = event.target;
        /** @type {?} */
        const viewValue = target.value;
        // Caso houver mais . do que anteriormente soma o valor com 1.
        if (this.hasMoreDot(viewValue) || viewValue === ('0' + this.decimalSeparator)) {
            return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
        }
        // Caso houver menos . do que anteriormente subtrai o valor por 1.
        if (this.hasLessDot(viewValue)) {
            this.setInitialSelectionRange(target, selectionStart, selectionEnd);
        }
        return target.setSelectionRange(selectionStart, selectionEnd);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    setPositionValue(event) {
        /** @type {?} */
        const value = event.target.value;
        /** @type {?} */
        const position = event.target.selectionStart - 1;
        if (position > 0 && event.key === this.minusSign) {
            event.target.value = value.substring(0, position) + value.substr(position + 1);
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setViewValue(value) {
        this.inputEl.nativeElement.value = value;
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    validateCursorPositionBeforeSeparator(event) {
        /** @type {?} */
        const target = event.target;
        /** @type {?} */
        const originalValue = this.formatValueWithoutThousandSeparator(target.value);
        /** @type {?} */
        const valueBeforeSeparator = this.getValueBeforeSeparator(target.value, this.decimalSeparator);
        /** @type {?} */
        const valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
        if (this.isSelectionStartDifferentSelectionEnd(target)) {
            return false;
        }
        return target.selectionStart <= valueBeforeSeparator.length &&
            valueBeforeSeparatorOriginal.length === this.thousandMaxlength &&
            !this.isKeyDecimalSeparator(event);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    verifyThousandLength(event) {
        /** @type {?} */
        const target = event.target;
        /** @type {?} */
        const originalValue = this.formatValueWithoutThousandSeparator(target.value);
        /** @type {?} */
        const valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
        if (this.isSelectionStartDifferentSelectionEnd(target)) {
            return false;
        }
        return valueBeforeSeparatorOriginal.length >= this.thousandMaxlength &&
            !this.isKeyDecimalSeparator(event) &&
            this.isPositionAfterDecimalSeparator(target.selectionStart - this.decimalsLength, target.value);
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    verifyInsertComma(e) {
        /** @type {?} */
        const hasComma = this.containsComma(e.target.value);
        return hasComma && e.key === this.decimalSeparator;
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    verifyInsertMinusSign(event) {
        /** @type {?} */
        const value = event.target.value;
        /** @type {?} */
        const indexMinusSign = (value.lastIndexOf(this.minusSign) !== -1);
        /** @type {?} */
        const positionMinusSign = value.lastIndexOf('-');
        /** @type {?} */
        const occurancesMinusSign = value.match(new RegExp('-', 'g'));
        if (this.isKeyboardAndroid && indexMinusSign && occurancesMinusSign.length > 1) {
            event.target.value = this.replaceAt(value, positionMinusSign, '');
        }
        return indexMinusSign && event.key === this.minusSign;
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    verifyValueAfterComma(event) {
        /** @type {?} */
        const value = event.target.value;
        /** @type {?} */
        const selectionStart = event.target.selectionStart;
        /** @type {?} */
        const valueAfterSeparator = this.getValueAfterSeparator(value, this.decimalSeparator);
        return this.isPositionAfterDecimalSeparator(selectionStart, value) && valueAfterSeparator.length >= this.decimalsLength;
    }
}
ThfDecimalComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-decimal',
                template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n\n    <div *ngIf=\"icon\" class=\"thf-field-icon-container-left\">\n      <span class=\"thf-icon thf-field-icon {{ icon }}\" [class.thf-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inp\n      class=\"thf-input\"\n      type=\"text\"\n      (input)=\"onInput($event)\"\n      (focus)=\"onFocus($event)\"\n      (blur)=\"onBlur($event)\"\n      (keypress)=\"onKeyPress($event)\"\n      [attr.name]=\"name\"\n      [class.thf-input-icon-left]=\"icon\"\n      [class.thf-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"></thf-clean>\n    </div>\n  </div>\n\n  <thf-field-container-bottom>\n  </thf-field-container-bottom>\n\n</thf-field-container>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfDecimalComponent)),
                        multi: true,
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfDecimalComponent)),
                        multi: true,
                    }
                ]
            }] }
];
/** @nocollapse */
ThfDecimalComponent.ctorParameters = () => [
    { type: ElementRef }
];
ThfDecimalComponent.propDecorators = {
    inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef, static: true },] }],
    decimalsLength: [{ type: Input, args: ['t-decimals-length',] }],
    thousandMaxlength: [{ type: Input, args: ['t-thousand-maxlength',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfDecimalComponent.prototype._decimalsLength;
    /**
     * @type {?}
     * @private
     */
    ThfDecimalComponent.prototype._thousandMaxlength;
    /**
     * @type {?}
     * @private
     */
    ThfDecimalComponent.prototype.decimalSeparator;
    /**
     * @type {?}
     * @private
     */
    ThfDecimalComponent.prototype.fireChange;
    /**
     * @type {?}
     * @private
     */
    ThfDecimalComponent.prototype.isKeyboardAndroid;
    /**
     * @type {?}
     * @private
     */
    ThfDecimalComponent.prototype.minusSign;
    /**
     * @type {?}
     * @private
     */
    ThfDecimalComponent.prototype.oldDotsLength;
    /**
     * @type {?}
     * @private
     */
    ThfDecimalComponent.prototype.thousandSeparator;
    /**
     * @type {?}
     * @private
     */
    ThfDecimalComponent.prototype.valueBeforeChange;
    /**
     * @type {?}
     * @private
     */
    ThfDecimalComponent.prototype.regex;
    /** @type {?} */
    ThfDecimalComponent.prototype.inputEl;
    /**
     * @type {?}
     * @private
     */
    ThfDecimalComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,