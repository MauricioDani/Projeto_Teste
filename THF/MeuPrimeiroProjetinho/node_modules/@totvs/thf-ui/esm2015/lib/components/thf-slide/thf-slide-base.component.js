/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToInt } from './../../utils/util';
/** @type {?} */
const thfSlideIntervalDefault = 4000;
/**
 * \@description
 *
 * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
 * customizar sua visualização utilizando a diretiva **[t-slide-content-template](/documentation/thf-slide-content-template)**.
 *
 * #### Boas práticas:
 * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
 * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
 * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
 * @abstract
 */
export class ThfSlideBaseComponent {
    constructor() {
        this._interval = thfSlideIntervalDefault;
    }
    /**
     * \@optional
     *
     * \@description
     * Altura do thf-slide, caso seja slide com template customizado, não assume o valor `default`.
     *
     * \@default `336`
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        this._height = convertToInt(value);
        this.setSlideHeight(this.height);
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
     *
     * \@default `4000`
     * @param {?} value
     * @return {?}
     */
    set interval(value) {
        this._interval = convertToInt(value, thfSlideIntervalDefault);
        this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
    }
    /**
     * @return {?}
     */
    get interval() {
        return this._interval;
    }
    /**
     * \@description
     *
     * Array de imagens ou dados para o slide, pode ser de três formas:
     *
     * - Array implementando objetos da interface `ThfSlideItem`:
     * ```
     * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
     * ```
     * - Array de `strings` com os caminhos das imagens:
     * ```
     * ['/assets/image-1', '/assets/image-2' ]
     * ```
     * - Array com lista de itens (para utilizar template):
     * ```
     * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
     * ```
     *
     * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
     * @param {?} value
     * @return {?}
     */
    set slides(value) {
        this._slides = value;
        this.setSlideItems(value);
        if (value && value.length) {
            this.startSlide();
        }
    }
    /**
     * @return {?}
     */
    get slides() {
        return this._slides;
    }
}
ThfSlideBaseComponent.propDecorators = {
    height: [{ type: Input, args: ['t-height',] }],
    interval: [{ type: Input, args: ['t-interval',] }],
    slides: [{ type: Input, args: ['t-slides',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfSlideBaseComponent.prototype._interval;
    /**
     * @type {?}
     * @private
     */
    ThfSlideBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    ThfSlideBaseComponent.prototype._slides;
    /**
     * @abstract
     * @param {?} height
     * @return {?}
     */
    ThfSlideBaseComponent.prototype.setSlideHeight = function (height) { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThfSlideBaseComponent.prototype.cancelInterval = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    ThfSlideBaseComponent.prototype.setSlideItems = function (value) { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThfSlideBaseComponent.prototype.startSlide = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThfSlideBaseComponent.prototype.startInterval = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXNsaWRlLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1zbGlkZS90aGYtc2xpZGUtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDOztNQUk1Qyx1QkFBdUIsR0FBRyxJQUFJOzs7Ozs7Ozs7Ozs7O0FBYXBDLE1BQU0sT0FBZ0IscUJBQXFCO0lBQTNDO1FBRVUsY0FBUyxHQUFXLHVCQUF1QixDQUFDO0lBK0V0RCxDQUFDOzs7Ozs7Ozs7OztJQW5FQyxJQUF1QixNQUFNLENBQUMsS0FBYTtRQUN6QyxJQUFJLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7Ozs7Ozs7Ozs7OztJQVdELElBQXlCLFFBQVEsQ0FBQyxLQUFhO1FBQzdDLElBQUksQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4RSxDQUFDOzs7O0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBc0JELElBQXVCLE1BQU0sQ0FBQyxLQUF5QztRQUNyRSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTFCLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDekIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ25CO0lBQ0gsQ0FBQzs7OztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDOzs7cUJBMURBLEtBQUssU0FBQyxVQUFVO3VCQWtCaEIsS0FBSyxTQUFDLFlBQVk7cUJBNkJsQixLQUFLLFNBQUMsVUFBVTs7Ozs7OztJQTNEakIsMENBQW9EOzs7OztJQUNwRCx3Q0FBeUI7Ozs7O0lBQ3pCLHdDQUFvRDs7Ozs7O0lBc0VwRCx1RUFBOEM7Ozs7OztJQUU5QyxpRUFBMEM7Ozs7Ozs7SUFDMUMscUVBQWtGOzs7Ozs7SUFDbEYsNkRBQXNDOzs7Ozs7SUFDdEMsZ0VBQXlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvSW50IH0gZnJvbSAnLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgVGhmU2xpZGVJdGVtIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3RoZi1zbGlkZS1pdGVtLmludGVyZmFjZSc7XG5cbmNvbnN0IHRoZlNsaWRlSW50ZXJ2YWxEZWZhdWx0ID0gNDAwMDtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIGRlIHNsaWRlIHBhcmEgdmlzdWFsaXphw6fDo28gZSBjb250cm9sZSBkZSBlbGVtZW50b3MgZGUgZm9ybWEgY8OtY2xpY2EuIEV4aWJlIHVtIGNvbmp1bnRvIGRlIGltYWdlbnMgb3UgZGFkb3MgcXVlIHBlcm1pdGVtXG4gKiBjdXN0b21pemFyIHN1YSB2aXN1YWxpemHDp8OjbyB1dGlsaXphbmRvIGEgZGlyZXRpdmEgKipbdC1zbGlkZS1jb250ZW50LXRlbXBsYXRlXSgvZG9jdW1lbnRhdGlvbi90aGYtc2xpZGUtY29udGVudC10ZW1wbGF0ZSkqKi5cbiAqXG4gKiAjIyMjIEJvYXMgcHLDoXRpY2FzOlxuICogLSBVdGlsaXphciBpbWFnZW5zIG5vIHNsaWRlLCBtZXNtbyBxdWFuZG8gcG9zc3VpIGNvbnRlw7pkbyBwZXJzb25hbGl6YWRvLlxuICogLSBFdml0YXIgdXRpbGl6YXIgYXBlbmFzIHVtIHNsaWRlIGlzb2xhZG8sIHV0aWxpemUgcGVsbyBtZW5vcyBkb2lzLlxuICogLSBFdml0YXIgdXRpbGl6YXIgbWFpcyBkZSA1IHNsaWRlcywgcG9pcyBhIGlkZWlhIGRvIGNvbXBvbmVudGUgw6kgZGVzdGFjYXIgYXBlbmFzIGluZm9ybWHDp8O1ZXMgaW1wb3J0YW50ZXMuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUaGZTbGlkZUJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2ludGVydmFsOiBudW1iZXIgPSB0aGZTbGlkZUludGVydmFsRGVmYXVsdDtcbiAgcHJpdmF0ZSBfaGVpZ2h0PzogbnVtYmVyO1xuICBwcml2YXRlIF9zbGlkZXM6IEFycmF5PFRoZlNsaWRlSXRlbSB8IHN0cmluZyB8IGFueT47XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQWx0dXJhIGRvIHRoZi1zbGlkZSwgY2FzbyBzZWphIHNsaWRlIGNvbSB0ZW1wbGF0ZSBjdXN0b21pemFkbywgbsOjbyBhc3N1bWUgbyB2YWxvciBgZGVmYXVsdGAuXG4gICAqXG4gICAqIEBkZWZhdWx0IGAzMzZgXG4gICAqL1xuICBASW5wdXQoJ3QtaGVpZ2h0Jykgc2V0IGhlaWdodCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5faGVpZ2h0ID0gY29udmVydFRvSW50KHZhbHVlKTtcbiAgICB0aGlzLnNldFNsaWRlSGVpZ2h0KHRoaXMuaGVpZ2h0KTtcbiAgfVxuXG4gIGdldCBoZWlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVmFsb3IgZW0gbWlsaXNzZWd1bmRvcyBxdWUgZGVmaW5lIG8gdGVtcG8gZGUgdHJvY2EgZG9zIHNsaWRlcywgY2FzbyBvIHZhbG9yIHNlamEgbWVub3IgcXVlIGAxMDAwYCBvcyBzbGlkZXMgbsOjbyB0cm9jYW0gYXV0b21hdGljYW1lbnRlLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgNDAwMGBcbiAgICovXG4gIEBJbnB1dCgndC1pbnRlcnZhbCcpIHNldCBpbnRlcnZhbCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5faW50ZXJ2YWwgPSBjb252ZXJ0VG9JbnQodmFsdWUsIHRoZlNsaWRlSW50ZXJ2YWxEZWZhdWx0KTtcbiAgICB0aGlzLl9pbnRlcnZhbCA+PSAxMDAwID8gdGhpcy5zdGFydEludGVydmFsKCkgOiB0aGlzLmNhbmNlbEludGVydmFsKCk7XG4gIH1cblxuICBnZXQgaW50ZXJ2YWwoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5faW50ZXJ2YWw7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEFycmF5IGRlIGltYWdlbnMgb3UgZGFkb3MgcGFyYSBvIHNsaWRlLCBwb2RlIHNlciBkZSB0csOqcyBmb3JtYXM6XG4gICAqXG4gICAqIC0gQXJyYXkgaW1wbGVtZW50YW5kbyBvYmpldG9zIGRhIGludGVyZmFjZSBgVGhmU2xpZGVJdGVtYDpcbiAgICogYGBgXG4gICAqIFt7IGltYWdlOiAnL2Fzc2V0cy9pbWFnZS0xJywgYWN0aW9uOiAnaW1hZ2VDbGljay5iaW5kKHRoaXMpJ30sIHsgaW1hZ2U6ICcvYXNzZXRzL2ltYWdlLTInIH1dXG4gICAqIGBgYFxuICAgKiAtIEFycmF5IGRlIGBzdHJpbmdzYCBjb20gb3MgY2FtaW5ob3MgZGFzIGltYWdlbnM6XG4gICAqIGBgYFxuICAgKiBbJy9hc3NldHMvaW1hZ2UtMScsICcvYXNzZXRzL2ltYWdlLTInIF1cbiAgICogYGBgXG4gICAqIC0gQXJyYXkgY29tIGxpc3RhIGRlIGl0ZW5zIChwYXJhIHV0aWxpemFyIHRlbXBsYXRlKTpcbiAgICogYGBgXG4gICAqIFt7IGxhYmVsOiAnMScsIGltZzogJy9hc3NldHMvaW1hZ2UtMScgfSwgeyBsYWJlbDogJzInLCBpbWc6ICcvYXNzZXRzL2ltYWdlLTEnIH1dXG4gICAqIGBgYFxuICAgKlxuICAgKiA+IEFzIHNldGFzIGRlIG5hdmVnYcOnw6NvIGUgbyBjb250cm9sZSBjb20gY8OtcmN1bG9zIGFwZW5hcyBzZXLDo28gcmVuZGVyaXphZG9zIGNhc28gcG9zc3VhIG1haXMgZGUgdW0gc2xpZGUuXG4gICAqL1xuICBASW5wdXQoJ3Qtc2xpZGVzJykgc2V0IHNsaWRlcyh2YWx1ZTogQXJyYXk8VGhmU2xpZGVJdGVtIHwgc3RyaW5nIHwgYW55Pikge1xuICAgIHRoaXMuX3NsaWRlcyA9IHZhbHVlO1xuICAgIHRoaXMuc2V0U2xpZGVJdGVtcyh2YWx1ZSk7XG5cbiAgICBpZiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgICB0aGlzLnN0YXJ0U2xpZGUoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgc2xpZGVzKCk6IEFycmF5PFRoZlNsaWRlSXRlbSB8IHN0cmluZyB8IGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9zbGlkZXM7XG4gIH1cblxuICBhYnN0cmFjdCBzZXRTbGlkZUhlaWdodChoZWlnaHQ6IG51bWJlcik6IHZvaWQ7XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNhbmNlbEludGVydmFsKCk6IHZvaWQ7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzZXRTbGlkZUl0ZW1zKHZhbHVlOiBBcnJheTxUaGZTbGlkZUl0ZW0gfCBzdHJpbmcgfCBhbnk+KTogdm9pZDtcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHN0YXJ0U2xpZGUoKTogdm9pZDtcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHN0YXJ0SW50ZXJ2YWwoKTogdm9pZDtcblxufVxuIl19