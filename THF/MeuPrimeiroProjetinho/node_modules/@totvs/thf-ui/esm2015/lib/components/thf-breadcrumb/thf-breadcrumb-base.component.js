/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
/**
 * \@description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `t-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `t-params-service` que recebe um objeto contendo as informações.
 */
export class ThfBreadcrumbBaseComponent {
    constructor() {
        this.itemsView = [];
        this._items = [];
    }
    /**
     * \@description
     *
     * Lista de itens do _breadcrumb_.
     *
     * **Exemplo:**
     * ```
     * { label: 'Thf Portal', link: 'portal' }
     * ```
     * @param {?} items
     * @return {?}
     */
    set items(items) {
        this._items = items;
        this.itemsView = [].concat(items);
    }
    /**
     * @return {?}
     */
    get items() {
        return this._items;
    }
}
ThfBreadcrumbBaseComponent.propDecorators = {
    favoriteService: [{ type: Input, args: ['t-favorite-service',] }],
    items: [{ type: Input, args: ['t-items',] }],
    paramsService: [{ type: Input, args: ['t-params-service',] }]
};
if (false) {
    /** @type {?} */
    ThfBreadcrumbBaseComponent.prototype.itemsView;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbBaseComponent.prototype._items;
    /**
     * \@optional
     *
     * \@description
     *
     * Permite definir uma URL no componente `thf-breadcrumb` para favoritar ou desfavoritar.
     * > Para utilizar esta propriedade, o último `ThfBreadcrumbItem` da lista de items da propriedade `t-items` deve ter um link informado.
     *
     * > A API deve estar preparada para retornar um objeto no formato `{ isFavorite: boolean }`.
     *
     * Ao iniciar, o `thf-breadcrumb` faz um GET na URL definida na propriedade `t-favorite-service` e deve retornar a propriedade
     * `{ isFavorite: boolean }` do último `ThfBreadcrumbItem` definido na lista de itens da propriedade `t-items`.
     *
     * Ao clicar em favoritar ou desfavoritar o `thf-breadcrumb` faz um POST com o link e a propriedade `{ isFavorite: boolean }`
     * definidos no último item da propriedade `t-items`.
     *
     * > Caso algum parâmetro seja definido na propriedade `t-params-service`, o mesmo será enviado para a API e retornará
     * após fazer um GET ou POST.
     *
     * Exemplo de URL contendo o serviço de favoritar ou desfavoritar:
     *
     * ```
     * https://thf.totvs.com.br/sample/api/favorite
     * ```
     *
     * Ao fazer o GET o `thf-breadcrumb` concatena o link com a URL de serviço. Exemplo:
     *
     * ```
     * GET http://<domain>/api/favorite?url=/example
     * ```
     *
     * ```
     * GET http://thf.totvs.com.br/sample/api/favorite?url=/example
     * ```
     *
     * ```
     * POST
     * payload: { isFavorite: true, url: '/example' }
     * ```
     *
     * Caso possua parâmetros definidos na propriedade `t-params-service`:
     *
     * ```
     * POST
     * payload: { isFavorite: true, url: "/example", params: "{ id: 14, user: 'dev.totvs' }" }
     * ```
     *
     * Exemplos de retorno:
     *
     * ```
     * { isFavorite: true, url: "/example" }
     * ```
     *
     * ```
     * { isFavorite: false, url: "/example" }
     * ```
     *
     * ```
     * { isFavorite: false, url: "/example", params: "{ id: 14, user: 'dev.totvs' }" }
     * ```
     * @type {?}
     */
    ThfBreadcrumbBaseComponent.prototype.favoriteService;
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto que possibilita o envio de parâmetros adicionais à requisição.
     * @type {?}
     */
    ThfBreadcrumbBaseComponent.prototype.paramsService;
    /**
     * @type {?}
     * @protected
     */
    ThfBreadcrumbBaseComponent.prototype.clickoutListener;
    /**
     * @type {?}
     * @protected
     */
    ThfBreadcrumbBaseComponent.prototype.resizeListener;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWJyZWFkY3J1bWItYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLWJyZWFkY3J1bWIvdGhmLWJyZWFkY3J1bWItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQnRDLE1BQU0sT0FBTywwQkFBMEI7SUFBdkM7UUFFRSxjQUFTLEdBQTZCLEVBQUUsQ0FBQztRQUNqQyxXQUFNLEdBQTZCLEVBQUUsQ0FBQztJQWlHaEQsQ0FBQzs7Ozs7Ozs7Ozs7OztJQXRCQyxJQUFzQixLQUFLLENBQUMsS0FBK0I7UUFDekQsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Ozs7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7OzhCQW5CQSxLQUFLLFNBQUMsb0JBQW9CO29CQVkxQixLQUFLLFNBQUMsU0FBUzs0QkFnQmYsS0FBSyxTQUFDLGtCQUFrQjs7OztJQTVGekIsK0NBQXlDOzs7OztJQUN6Qyw0Q0FBOEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQStEOUMscURBQXNEOzs7Ozs7Ozs7SUE0QnRELG1EQUFrRDs7Ozs7SUFFbEQsc0RBQXVDOzs7OztJQUV2QyxvREFBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBUaGZCcmVhZGNydW1iSXRlbSB9IGZyb20gJy4vdGhmLWJyZWFkY3J1bWItaXRlbS5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBnZXJhIHVtYSBlc3RydXR1cmEgZGUgbmF2ZWdhw6fDo28gcXVlIGFwcmVzZW50YSBhbyB1c3XDoXJpbyBhIGxvY2FsaXphw6fDo29cbiAqIGRhIFVSTCBhdHVhbCwgZXhpYmluZG8gYXMgYW50ZWNlc3NvcmFzIGNvbmZvcm1lIMOpIHJlYWxpemFkbyBhIG5hdmVnYcOnw6NvIG5hIGFwbGljYcOnw6NvLlxuICpcbiAqIFF1YW5kbyBuw6NvIGhvdXZlciBlc3Bhw6dhbWVudG8gc3VmaWNpZW50ZSBwYXJhIGV4aWJpLWzDoXMsIG8gY29tcG9uZW50ZSBzZSBlbmNhcnJlZ2EgdGFtYsOpbVxuICogZGUgYWdydXBhciBhcyBVUkxzIGFudGVjZXNzb3JhcywgZ2VyYW5kbyBhc3NpbSB1bSDDrWNvbmUgcXVlIHBlcm1pdGUgYSB2aXN1YWxpemHDp8OjbyBlbSBjYXNjYXRhLlxuICpcbiAqIENhc28gdW0gZW5kZXJlw6dvIHNlamEgZXNwZWNpZmljYWRvIG5hIHByb3ByaWVkYWRlIGB0LWZhdm9yaXRlLXNlcnZpY2VgLCBvIGNvbXBvbmVudGUgcGVybWl0ZSBhbyB1c3XDoXJpb1xuICogZmF2b3JpdGFyIGEgVVJMLlxuICpcbiAqIEhhdmVuZG8gbmVjZXNzaWRhZGUgZGUgaW5jbHVpciBwYXLDom1ldHJvcyBuYSByZXF1aXNpw6fDo28gZG8gc2VydmnDp28sXG4gKiBvIGNvbXBvbmVudGUgZGlzcMO1ZSBkYSBwcm9wcmllZGFkZSBgdC1wYXJhbXMtc2VydmljZWAgcXVlIHJlY2ViZSB1bSBvYmpldG8gY29udGVuZG8gYXMgaW5mb3JtYcOnw7Vlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRoZkJyZWFkY3J1bWJCYXNlQ29tcG9uZW50IHtcblxuICBpdGVtc1ZpZXc6IEFycmF5PFRoZkJyZWFkY3J1bWJJdGVtPiA9IFtdO1xuICBwcml2YXRlIF9pdGVtczogQXJyYXk8VGhmQnJlYWRjcnVtYkl0ZW0+ID0gW107XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogUGVybWl0ZSBkZWZpbmlyIHVtYSBVUkwgbm8gY29tcG9uZW50ZSBgdGhmLWJyZWFkY3J1bWJgIHBhcmEgZmF2b3JpdGFyIG91IGRlc2Zhdm9yaXRhci5cbiAgICogPiBQYXJhIHV0aWxpemFyIGVzdGEgcHJvcHJpZWRhZGUsIG8gw7psdGltbyBgVGhmQnJlYWRjcnVtYkl0ZW1gIGRhIGxpc3RhIGRlIGl0ZW1zIGRhIHByb3ByaWVkYWRlIGB0LWl0ZW1zYCBkZXZlIHRlciB1bSBsaW5rIGluZm9ybWFkby5cbiAgICpcbiAgICogPiBBIEFQSSBkZXZlIGVzdGFyIHByZXBhcmFkYSBwYXJhIHJldG9ybmFyIHVtIG9iamV0byBubyBmb3JtYXRvIGB7IGlzRmF2b3JpdGU6IGJvb2xlYW4gfWAuXG4gICAqXG4gICAqIEFvIGluaWNpYXIsIG8gYHRoZi1icmVhZGNydW1iYCBmYXogdW0gR0VUIG5hIFVSTCBkZWZpbmlkYSBuYSBwcm9wcmllZGFkZSBgdC1mYXZvcml0ZS1zZXJ2aWNlYCBlIGRldmUgcmV0b3JuYXIgYSBwcm9wcmllZGFkZVxuICAgKiBgeyBpc0Zhdm9yaXRlOiBib29sZWFuIH1gIGRvIMO6bHRpbW8gYFRoZkJyZWFkY3J1bWJJdGVtYCBkZWZpbmlkbyBuYSBsaXN0YSBkZSBpdGVucyBkYSBwcm9wcmllZGFkZSBgdC1pdGVtc2AuXG4gICAqXG4gICAqIEFvIGNsaWNhciBlbSBmYXZvcml0YXIgb3UgZGVzZmF2b3JpdGFyIG8gYHRoZi1icmVhZGNydW1iYCBmYXogdW0gUE9TVCBjb20gbyBsaW5rIGUgYSBwcm9wcmllZGFkZSBgeyBpc0Zhdm9yaXRlOiBib29sZWFuIH1gXG4gICAqIGRlZmluaWRvcyBubyDDumx0aW1vIGl0ZW0gZGEgcHJvcHJpZWRhZGUgYHQtaXRlbXNgLlxuICAgKlxuICAgKiA+IENhc28gYWxndW0gcGFyw6JtZXRybyBzZWphIGRlZmluaWRvIG5hIHByb3ByaWVkYWRlIGB0LXBhcmFtcy1zZXJ2aWNlYCwgbyBtZXNtbyBzZXLDoSBlbnZpYWRvIHBhcmEgYSBBUEkgZSByZXRvcm5hcsOhXG4gICAqIGFww7NzIGZhemVyIHVtIEdFVCBvdSBQT1NULlxuICAgKlxuICAgKiBFeGVtcGxvIGRlIFVSTCBjb250ZW5kbyBvIHNlcnZpw6dvIGRlIGZhdm9yaXRhciBvdSBkZXNmYXZvcml0YXI6XG4gICAqXG4gICAqIGBgYFxuICAgKiBodHRwczovL3RoZi50b3R2cy5jb20uYnIvc2FtcGxlL2FwaS9mYXZvcml0ZVxuICAgKiBgYGBcbiAgICpcbiAgICogQW8gZmF6ZXIgbyBHRVQgbyBgdGhmLWJyZWFkY3J1bWJgIGNvbmNhdGVuYSBvIGxpbmsgY29tIGEgVVJMIGRlIHNlcnZpw6dvLiBFeGVtcGxvOlxuICAgKlxuICAgKiBgYGBcbiAgICogR0VUIGh0dHA6Ly88ZG9tYWluPi9hcGkvZmF2b3JpdGU/dXJsPS9leGFtcGxlXG4gICAqIGBgYFxuICAgKlxuICAgKiBgYGBcbiAgICogR0VUIGh0dHA6Ly90aGYudG90dnMuY29tLmJyL3NhbXBsZS9hcGkvZmF2b3JpdGU/dXJsPS9leGFtcGxlXG4gICAqIGBgYFxuICAgKlxuICAgKiBgYGBcbiAgICogUE9TVFxuICAgKiBwYXlsb2FkOiB7IGlzRmF2b3JpdGU6IHRydWUsIHVybDogJy9leGFtcGxlJyB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBDYXNvIHBvc3N1YSBwYXLDom1ldHJvcyBkZWZpbmlkb3MgbmEgcHJvcHJpZWRhZGUgYHQtcGFyYW1zLXNlcnZpY2VgOlxuICAgKlxuICAgKiBgYGBcbiAgICogUE9TVFxuICAgKiBwYXlsb2FkOiB7IGlzRmF2b3JpdGU6IHRydWUsIHVybDogXCIvZXhhbXBsZVwiLCBwYXJhbXM6IFwieyBpZDogMTQsIHVzZXI6ICdkZXYudG90dnMnIH1cIiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBFeGVtcGxvcyBkZSByZXRvcm5vOlxuICAgKlxuICAgKiBgYGBcbiAgICogeyBpc0Zhdm9yaXRlOiB0cnVlLCB1cmw6IFwiL2V4YW1wbGVcIiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBgYGBcbiAgICogeyBpc0Zhdm9yaXRlOiBmYWxzZSwgdXJsOiBcIi9leGFtcGxlXCIgfVxuICAgKiBgYGBcbiAgICpcbiAgICogYGBgXG4gICAqIHsgaXNGYXZvcml0ZTogZmFsc2UsIHVybDogXCIvZXhhbXBsZVwiLCBwYXJhbXM6IFwieyBpZDogMTQsIHVzZXI6ICdkZXYudG90dnMnIH1cIiB9XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KCd0LWZhdm9yaXRlLXNlcnZpY2UnKSBmYXZvcml0ZVNlcnZpY2U/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBMaXN0YSBkZSBpdGVucyBkbyBfYnJlYWRjcnVtYl8uXG4gICAqXG4gICAqICoqRXhlbXBsbzoqKlxuICAgKiBgYGBcbiAgICogeyBsYWJlbDogJ1RoZiBQb3J0YWwnLCBsaW5rOiAncG9ydGFsJyB9XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KCd0LWl0ZW1zJykgc2V0IGl0ZW1zKGl0ZW1zOiBBcnJheTxUaGZCcmVhZGNydW1iSXRlbT4pIHtcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgIHRoaXMuaXRlbXNWaWV3ID0gW10uY29uY2F0KGl0ZW1zKTtcbiAgfVxuXG4gIGdldCBpdGVtcygpIHtcbiAgICByZXR1cm4gdGhpcy5faXRlbXM7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmpldG8gcXVlIHBvc3NpYmlsaXRhIG8gZW52aW8gZGUgcGFyw6JtZXRyb3MgYWRpY2lvbmFpcyDDoCByZXF1aXNpw6fDo28uXG4gICAqL1xuICBASW5wdXQoJ3QtcGFyYW1zLXNlcnZpY2UnKSBwYXJhbXNTZXJ2aWNlPzogb2JqZWN0O1xuXG4gIHByb3RlY3RlZCBjbGlja291dExpc3RlbmVyOiAoKSA9PiB2b2lkO1xuXG4gIHByb3RlY3RlZCByZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcblxufVxuIl19