/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { ThfStepperOrientation } from './enums/thf-stepper-orientation.enum';
import { ThfStepperStatus } from './enums/thf-stepper-status.enum';
/** @type {?} */
const thfStepperOrientationDefault = ThfStepperOrientation.Horizontal;
/**
 * \@description
 *
 * O `thf-stepper` permite que um processo seja dividido em passos para que o usuário o realize
 * mais facilmente.
 *
 * Existem duas formas de utilização:
 *
 * 1 - Usando o componente [**thf-step**](/documentation/thf-step) para renderizar e descrever os passos.
 *
 * 2 - Através da propriedade `t-steps` para descrever os passos do processo, sendo responsabilidade do desenvolvedor o controle
 * de renderização do que será exibido a cada *step* ativo.
 *
 * Através de suas propriedades, é possível definir se sua orientação será horizontal ou vertical,
 * além da possibilidade de aumentar o tamanho dos *steps*.
 *
 * Também é possível navegar entre os *steps* através do teclado utilizando a tecla *tab* e, para ativar o *step* em foco basta
 * pressionar a tecla *enter*. Além disso, é possível ativar a exibição de ícones no lugar de números nos *steps* através da
 * propriedade [`t-step-icons`](/documentation/thf-stepper#stepIconsProperty).
 *
 * #### Utilizando os métodos do componente:
 *
 * Para acessar os métodos do componente é necessário ter a referência do mesmo.
 *
 * Por exemplo, utilizando um [**ViewChild**](https://angular.io/api/core/ViewChild):
 *
 * ```
 * \@ViewChild(ThfStepperComponent) thfStepperComponent: ThfStepperComponent;
 * ```
 *
 * E para acessar o método:
 *
 * ```
 * thfStepperComponent.next();
 * ```
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `thf-stepper`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `thf-stepper` por página.
 */
export class ThfStepperBaseComponent {
    constructor() {
        this._orientation = thfStepperOrientationDefault;
        this._sequential = true;
        this._step = 1;
        this._steps = [];
        /**
         * Ação que será executada quando o usuário mudar o passo do `thf-stepper`.
         */
        this.onChangeStep = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define a orientação de exibição do `thf-stepper`.
     *
     * > Veja os valores válidos no *enum* [ThfStepperOrientation](documentation/thf-stepper#stepperOrientation).
     *
     * \@default `ThfStepperOrientation.Horizontal`
     * @param {?} value
     * @return {?}
     */
    set orientation(value) {
        this._orientation = ((/** @type {?} */ (Object))).values(ThfStepperOrientation).includes(value) ? value : thfStepperOrientationDefault;
    }
    /**
     * @return {?}
     */
    get orientation() {
        return this._orientation;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Controla o passo atual do `thf-stepper`.
     *
     * > Ao utilizar esta propriedade e também utilizar o componente [**thf-step**](/documentation/thf-step),
     * o valor desta propriedade será ignorada permanecendo a definição do [**thf-step**](/documentation/thf-step).
     *
     * \@default `1`
     * @param {?} step
     * @return {?}
     */
    set step(step) {
        if (step >= 1 && step <= this.steps.length) {
            this._step = step;
            this._steps[this._step - 1].status = ThfStepperStatus.Active;
        }
    }
    /**
     * @return {?}
     */
    get step() {
        return this._step;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
     *
     * > Ao utilizar esta propriedade e também utilizar o componente [**thf-step**](/documentation/thf-step),
     * o valor desta propriedade será ignorada permanecendo a definição do [**thf-step**](/documentation/thf-step).
     * @param {?} steps
     * @return {?}
     */
    set steps(steps) {
        this._steps = Array.isArray(steps) ? steps : [];
        this._steps.forEach((/**
         * @param {?} step
         * @return {?}
         */
        step => step.status = ThfStepperStatus.Default));
        this.step = 1;
    }
    /**
     * @return {?}
     */
    get steps() {
        return this._steps;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define se o `thf-stepper` será sequencial ou aleatório.
     *
     * > Ao utilizar o componente [**thf-step**](/documentation/thf-step), o valor desta propriedade sempre será verdadeiro.
     *
     * \@default `true`
     * @param {?} sequential
     * @return {?}
     */
    set sequential(sequential) {
        this._sequential = convertToBoolean(sequential);
    }
    /**
     * @return {?}
     */
    get sequential() {
        return this._sequential;
    }
}
ThfStepperBaseComponent.propDecorators = {
    orientation: [{ type: Input, args: ['t-orientation',] }],
    step: [{ type: Input, args: ['t-step',] }],
    steps: [{ type: Input, args: ['t-steps',] }],
    stepIcons: [{ type: Input, args: ['t-step-icons',] }],
    stepSize: [{ type: Input, args: ['t-step-size',] }],
    sequential: [{ type: Input, args: ['t-sequential',] }],
    onChangeStep: [{ type: Output, args: ['t-change-step',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfStepperBaseComponent.prototype._orientation;
    /**
     * @type {?}
     * @private
     */
    ThfStepperBaseComponent.prototype._sequential;
    /**
     * @type {?}
     * @private
     */
    ThfStepperBaseComponent.prototype._step;
    /**
     * @type {?}
     * @private
     */
    ThfStepperBaseComponent.prototype._steps;
    /**
     *
     * \@optional
     *
     * \@description
     *
     * <a id="stepIconsProperty"></a>
     *
     * Habilita a exibição de ícone ao invés de número no centro do círculo dos *steps*.
     *
     * \@default `false`
     * @type {?}
     */
    ThfStepperBaseComponent.prototype.stepIcons;
    /**
     * \@optional
     *
     * \@description
     *
     * Define o tamanho dos *steps* em *pixels*, possibilitando um maior destaque.
     *
     * O valor informado deve ser entre `24` e `64`.
     *
     * > Valores que não se enquadrarem a esta regra serão ignorados, mantendo-se o valor *default*.
     *
     * \@default `24`
     * @type {?}
     */
    ThfStepperBaseComponent.prototype.stepSize;
    /**
     * Ação que será executada quando o usuário mudar o passo do `thf-stepper`.
     * @type {?}
     */
    ThfStepperBaseComponent.prototype.onChangeStep;
}
//# sourceMappingURL=data:application/json;base64,