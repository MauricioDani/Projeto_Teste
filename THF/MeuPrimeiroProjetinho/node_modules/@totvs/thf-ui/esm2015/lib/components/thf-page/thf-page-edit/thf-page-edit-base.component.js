/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, ViewChild } from '@angular/core';
import { browserLanguage, thfLocaleDefault } from './../../../utils/util';
import { ThfPageContentComponent } from '../thf-page-content/thf-page-content.component';
/** @type {?} */
export const thfPageEditLiteralsDefault = {
    en: (/** @type {?} */ ({
        cancel: 'Cancel',
        save: 'Save',
        saveNew: 'Save and New'
    })),
    es: (/** @type {?} */ ({
        cancel: 'Cancelar',
        save: 'Guardar',
        saveNew: 'Guardar y Nuevo'
    })),
    pt: (/** @type {?} */ ({
        cancel: 'Cancelar',
        save: 'Salvar',
        saveNew: 'Salvar e Novo'
    }))
};
/**
 * \@description
 *
 * O componente **thf-page-edit** é utilizado como container principal para tela de edição ou adição de um
 * registro.
 * Por padrão possui 3 ações, cada ação na tela executa uma função no componente que está utilizando o thf-page-edit,
 * são elas:
 *  - Cancelar (função: cancel);
 *  - Salvar e Novo (função: saveNew);
 *  - Salvar (função: save);
 *
 * Caso não estiver implementado alguma função, listado anteriormente, o mesmo não será apresentado.
 *
 * Os botões "Salvar" e "Salvar e Novo" podem ser habilitados/desabilitados utilizando a propriedade t-disable-submit.
 * Esta propriedade pode ser utilizada para desabilitar os botões caso exista um formulário inválido na página ou alguma
 * regra de negócio não tenha sido atendida.
 */
export class ThfPageEditBaseComponent {
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto com as literais usadas no `thf-page-edit`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: ThfPageEditLiterals = {
     *    cancel: 'Voltar',
     *    save: 'Confirmar',
     *    saveNew: 'Confirmar e criar um novo'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: ThfPageEditLiterals = {
     *    cancel: 'Cancelar processo'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <thf-page-edit
     *   [t-literals]="customLiterals">
     * </thf-page-edit>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, thfPageEditLiteralsDefault[thfLocaleDefault], thfPageEditLiteralsDefault[browserLanguage()], value);
        }
        else {
            this._literals = thfPageEditLiteralsDefault[browserLanguage()];
        }
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || thfPageEditLiteralsDefault[browserLanguage()];
    }
    /**
     * Título da página.
     * @param {?} title
     * @return {?}
     */
    set title(title) {
        this._title = title;
        this.thfPageContent.recalculateHeaderSize();
    }
    /**
     * @return {?}
     */
    get title() {
        return this._title;
    }
}
ThfPageEditBaseComponent.propDecorators = {
    thfPageContent: [{ type: ViewChild, args: [ThfPageContentComponent, { static: true },] }],
    breadcrumb: [{ type: Input, args: ['t-breadcrumb',] }],
    disableSubmit: [{ type: Input, args: ['t-disable-submit',] }],
    literals: [{ type: Input, args: ['t-literals',] }],
    title: [{ type: Input, args: ['t-title',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageEditBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    ThfPageEditBaseComponent.prototype._title;
    /** @type {?} */
    ThfPageEditBaseComponent.prototype.thfPageContent;
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?}
     */
    ThfPageEditBaseComponent.prototype.breadcrumb;
    /**
     * Desabilita botões de submissão (save e saveNew)
     * @type {?}
     */
    ThfPageEditBaseComponent.prototype.disableSubmit;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhZ2UtZWRpdC1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtcGFnZS90aGYtcGFnZS1lZGl0L3RoZi1wYWdlLWVkaXQtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUcxRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQzs7QUFHekYsTUFBTSxPQUFPLDBCQUEwQixHQUFHO0lBQ3hDLEVBQUUsRUFBRSxtQkFBc0I7UUFDeEIsTUFBTSxFQUFFLFFBQVE7UUFDaEIsSUFBSSxFQUFFLE1BQU07UUFDWixPQUFPLEVBQUUsY0FBYztLQUN4QixFQUFBO0lBQ0QsRUFBRSxFQUFFLG1CQUFzQjtRQUN4QixNQUFNLEVBQUUsVUFBVTtRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLE9BQU8sRUFBRSxpQkFBaUI7S0FDM0IsRUFBQTtJQUNELEVBQUUsRUFBRSxtQkFBc0I7UUFDeEIsTUFBTSxFQUFFLFVBQVU7UUFDbEIsSUFBSSxFQUFFLFFBQVE7UUFDZCxPQUFPLEVBQUUsZUFBZTtLQUN6QixFQUFBO0NBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CRCxNQUFNLE9BQU8sd0JBQXdCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWdEbkMsSUFBeUIsUUFBUSxDQUFDLEtBQTBCO1FBQzFELElBQUksS0FBSyxZQUFZLE1BQU0sSUFBSSxDQUFDLENBQUMsS0FBSyxZQUFZLEtBQUssQ0FBQyxFQUFFO1lBQ3hELElBQUksQ0FBQyxTQUFTLHFCQUNULDBCQUEwQixDQUFDLGdCQUFnQixDQUFDLEVBQzVDLDBCQUEwQixDQUFDLGVBQWUsRUFBRSxDQUFDLEVBQzdDLEtBQUssQ0FDVCxDQUFDO1NBQ0g7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLEdBQUcsMEJBQTBCLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztTQUNoRTtJQUNILENBQUM7Ozs7SUFDRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLElBQUksMEJBQTBCLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztJQUN6RSxDQUFDOzs7Ozs7SUFHRCxJQUFzQixLQUFLLENBQUMsS0FBYTtRQUN2QyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsY0FBYyxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDOUMsQ0FBQzs7OztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDOzs7NkJBbEVBLFNBQVMsU0FBQyx1QkFBdUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7eUJBR25ELEtBQUssU0FBQyxjQUFjOzRCQUdwQixLQUFLLFNBQUMsa0JBQWtCO3VCQXFDeEIsS0FBSyxTQUFDLFlBQVk7b0JBZ0JsQixLQUFLLFNBQUMsU0FBUzs7Ozs7OztJQTlEaEIsNkNBQXVDOzs7OztJQUN2QywwQ0FBdUI7O0lBRXZCLGtEQUE4Rjs7Ozs7SUFHOUYsOENBQWtEOzs7OztJQUdsRCxpREFBbUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGJyb3dzZXJMYW5ndWFnZSwgdGhmTG9jYWxlRGVmYXVsdCB9IGZyb20gJy4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFRoZkJyZWFkY3J1bWIgfSBmcm9tICcuLi8uLi90aGYtYnJlYWRjcnVtYi90aGYtYnJlYWRjcnVtYi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVGhmUGFnZUNvbnRlbnRDb21wb25lbnQgfSBmcm9tICcuLi90aGYtcGFnZS1jb250ZW50L3RoZi1wYWdlLWNvbnRlbnQuY29tcG9uZW50JztcbmltcG9ydCB7IFRoZlBhZ2VFZGl0TGl0ZXJhbHMgfSBmcm9tICcuL3RoZi1wYWdlLWVkaXQtbGl0ZXJhbHMuaW50ZXJmYWNlJztcblxuZXhwb3J0IGNvbnN0IHRoZlBhZ2VFZGl0TGl0ZXJhbHNEZWZhdWx0ID0ge1xuICBlbjogPFRoZlBhZ2VFZGl0TGl0ZXJhbHM+IHtcbiAgICBjYW5jZWw6ICdDYW5jZWwnLFxuICAgIHNhdmU6ICdTYXZlJyxcbiAgICBzYXZlTmV3OiAnU2F2ZSBhbmQgTmV3J1xuICB9LFxuICBlczogPFRoZlBhZ2VFZGl0TGl0ZXJhbHM+IHtcbiAgICBjYW5jZWw6ICdDYW5jZWxhcicsXG4gICAgc2F2ZTogJ0d1YXJkYXInLFxuICAgIHNhdmVOZXc6ICdHdWFyZGFyIHkgTnVldm8nXG4gIH0sXG4gIHB0OiA8VGhmUGFnZUVkaXRMaXRlcmFscz4ge1xuICAgIGNhbmNlbDogJ0NhbmNlbGFyJyxcbiAgICBzYXZlOiAnU2FsdmFyJyxcbiAgICBzYXZlTmV3OiAnU2FsdmFyIGUgTm92bydcbiAgfVxufTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgKip0aGYtcGFnZS1lZGl0Kiogw6kgdXRpbGl6YWRvIGNvbW8gY29udGFpbmVyIHByaW5jaXBhbCBwYXJhIHRlbGEgZGUgZWRpw6fDo28gb3UgYWRpw6fDo28gZGUgdW1cbiAqIHJlZ2lzdHJvLlxuICogUG9yIHBhZHLDo28gcG9zc3VpIDMgYcOnw7VlcywgY2FkYSBhw6fDo28gbmEgdGVsYSBleGVjdXRhIHVtYSBmdW7Dp8OjbyBubyBjb21wb25lbnRlIHF1ZSBlc3TDoSB1dGlsaXphbmRvIG8gdGhmLXBhZ2UtZWRpdCxcbiAqIHPDo28gZWxhczpcbiAqICAtIENhbmNlbGFyIChmdW7Dp8OjbzogY2FuY2VsKTtcbiAqICAtIFNhbHZhciBlIE5vdm8gKGZ1bsOnw6NvOiBzYXZlTmV3KTtcbiAqICAtIFNhbHZhciAoZnVuw6fDo286IHNhdmUpO1xuICpcbiAqIENhc28gbsOjbyBlc3RpdmVyIGltcGxlbWVudGFkbyBhbGd1bWEgZnVuw6fDo28sIGxpc3RhZG8gYW50ZXJpb3JtZW50ZSwgbyBtZXNtbyBuw6NvIHNlcsOhIGFwcmVzZW50YWRvLlxuICpcbiAqIE9zIGJvdMO1ZXMgXCJTYWx2YXJcIiBlIFwiU2FsdmFyIGUgTm92b1wiIHBvZGVtIHNlciBoYWJpbGl0YWRvcy9kZXNhYmlsaXRhZG9zIHV0aWxpemFuZG8gYSBwcm9wcmllZGFkZSB0LWRpc2FibGUtc3VibWl0LlxuICogRXN0YSBwcm9wcmllZGFkZSBwb2RlIHNlciB1dGlsaXphZGEgcGFyYSBkZXNhYmlsaXRhciBvcyBib3TDtWVzIGNhc28gZXhpc3RhIHVtIGZvcm11bMOhcmlvIGludsOhbGlkbyBuYSBww6FnaW5hIG91IGFsZ3VtYVxuICogcmVncmEgZGUgbmVnw7NjaW8gbsOjbyB0ZW5oYSBzaWRvIGF0ZW5kaWRhLlxuICovXG5leHBvcnQgY2xhc3MgVGhmUGFnZUVkaXRCYXNlQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9saXRlcmFsczogVGhmUGFnZUVkaXRMaXRlcmFscztcbiAgcHJpdmF0ZSBfdGl0bGU6IHN0cmluZztcblxuICBAVmlld0NoaWxkKFRoZlBhZ2VDb250ZW50Q29tcG9uZW50LCB7IHN0YXRpYzogdHJ1ZSB9KSB0aGZQYWdlQ29udGVudDogVGhmUGFnZUNvbnRlbnRDb21wb25lbnQ7XG5cbiAgLyoqIE9iamV0byBjb20gcHJvcHJpZWRhZGVzIGRvIGJyZWFkY3J1bWIuICovXG4gIEBJbnB1dCgndC1icmVhZGNydW1iJykgYnJlYWRjcnVtYj86IFRoZkJyZWFkY3J1bWI7XG5cbiAgLyoqIERlc2FiaWxpdGEgYm90w7VlcyBkZSBzdWJtaXNzw6NvIChzYXZlIGUgc2F2ZU5ldykgKi9cbiAgQElucHV0KCd0LWRpc2FibGUtc3VibWl0JykgZGlzYWJsZVN1Ym1pdD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZXRvIGNvbSBhcyBsaXRlcmFpcyB1c2FkYXMgbm8gYHRoZi1wYWdlLWVkaXRgLlxuICAgKlxuICAgKiBFeGlzdGVtIGR1YXMgbWFuZWlyYXMgZGUgY3VzdG9taXphciBvIGNvbXBvbmVudGUsIHBhc3NhbmRvIHVtIG9iamV0byBjb20gdG9kYXMgYXMgbGl0ZXJhaXMgZGlzcG9uw612ZWlzOlxuICAgKlxuICAgKiBgYGBcbiAgICogIGNvbnN0IGN1c3RvbUxpdGVyYWxzOiBUaGZQYWdlRWRpdExpdGVyYWxzID0ge1xuICAgKiAgICBjYW5jZWw6ICdWb2x0YXInLFxuICAgKiAgICBzYXZlOiAnQ29uZmlybWFyJyxcbiAgICogICAgc2F2ZU5ldzogJ0NvbmZpcm1hciBlIGNyaWFyIHVtIG5vdm8nXG4gICAqICB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogT3UgcGFzc2FuZG8gYXBlbmFzIGFzIGxpdGVyYWlzIHF1ZSBkZXNlamEgY3VzdG9taXphcjpcbiAgICpcbiAgICogYGBgXG4gICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogVGhmUGFnZUVkaXRMaXRlcmFscyA9IHtcbiAgICogICAgY2FuY2VsOiAnQ2FuY2VsYXIgcHJvY2Vzc28nXG4gICAqICB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogRSBwYXJhIGNhcnJlZ2FyIGFzIGxpdGVyYWlzIGN1c3RvbWl6YWRhcywgYmFzdGEgYXBlbmFzIHBhc3NhciBvIG9iamV0byBwYXJhIG8gY29tcG9uZW50ZS5cbiAgICpcbiAgICogYGBgXG4gICAqIDx0aGYtcGFnZS1lZGl0XG4gICAqICAgW3QtbGl0ZXJhbHNdPVwiY3VzdG9tTGl0ZXJhbHNcIj5cbiAgICogPC90aGYtcGFnZS1lZGl0PlxuICAgKiBgYGBcbiAgICpcbiAgICogID4gTyBvYmpldG8gcGFkcsOjbyBkZSBsaXRlcmFpcyBzZXLDoSB0cmFkdXppZG8gZGUgYWNvcmRvIGNvbSBvIGlkaW9tYSBkbyBicm93c2VyIChwdCwgZW4sIGVzKS5cbiAgICovXG4gIEBJbnB1dCgndC1saXRlcmFscycpIHNldCBsaXRlcmFscyh2YWx1ZTogVGhmUGFnZUVkaXRMaXRlcmFscykge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCAmJiAhKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICB0aGlzLl9saXRlcmFscyA9IHtcbiAgICAgICAgLi4udGhmUGFnZUVkaXRMaXRlcmFsc0RlZmF1bHRbdGhmTG9jYWxlRGVmYXVsdF0sXG4gICAgICAgIC4uLnRoZlBhZ2VFZGl0TGl0ZXJhbHNEZWZhdWx0W2Jyb3dzZXJMYW5ndWFnZSgpXSxcbiAgICAgICAgLi4udmFsdWVcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpdGVyYWxzID0gdGhmUGFnZUVkaXRMaXRlcmFsc0RlZmF1bHRbYnJvd3Nlckxhbmd1YWdlKCldO1xuICAgIH1cbiAgfVxuICBnZXQgbGl0ZXJhbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xpdGVyYWxzIHx8IHRoZlBhZ2VFZGl0TGl0ZXJhbHNEZWZhdWx0W2Jyb3dzZXJMYW5ndWFnZSgpXTtcbiAgfVxuXG4gIC8qKiBUw610dWxvIGRhIHDDoWdpbmEuICovXG4gIEBJbnB1dCgndC10aXRsZScpIHNldCB0aXRsZSh0aXRsZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLnRoZlBhZ2VDb250ZW50LnJlY2FsY3VsYXRlSGVhZGVyU2l6ZSgpO1xuICB9XG5cbiAgZ2V0IHRpdGxlKCkge1xuICAgIHJldHVybiB0aGlzLl90aXRsZTtcbiAgfVxuXG59XG4iXX0=