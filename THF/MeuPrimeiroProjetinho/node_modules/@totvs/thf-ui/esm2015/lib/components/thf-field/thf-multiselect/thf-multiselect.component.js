/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, forwardRef, Renderer2, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { isMobile } from './../../../utils/util';
import { ThfControlPositionService } from './../../../services/thf-control-position/thf-control-position.service';
import { ThfKeyCodeEnum } from './../../../enums/thf-key-code.enum';
import { ThfMultiselectBaseComponent } from './thf-multiselect-base.component';
/** @type {?} */
const thfMultiselectContainerOffset = 8;
/** @type {?} */
const thfMultiselectContainerPositionDefault = 'bottom';
/**
 * \@docsExtends ThfMultiselectBaseComponent
 *
 * \@example
 *
 * <example name="thf-multiselect-basic" title="Totvs Multiselect Basic">
 *   <file name="sample-thf-multiselect-basic/sample-thf-multiselect-basic.component.html"> </file>
 *   <file name="sample-thf-multiselect-basic/sample-thf-multiselect-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-multiselect-labs" title="Totvs Multiselect Labs">
 *   <file name="sample-thf-multiselect-labs/sample-thf-multiselect-labs.component.html"> </file>
 *   <file name="sample-thf-multiselect-labs/sample-thf-multiselect-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-multiselect-vacation" title="Totvs Multiselect - Vacation">
 *   <file name="sample-thf-multiselect-vacation/sample-thf-multiselect-vacation.component.html"> </file>
 *   <file name="sample-thf-multiselect-vacation/sample-thf-multiselect-vacation.component.ts"> </file>
 * </example>
 *
 * <example name="thf-multiselect-vacation-reactive-form" title="Totvs Multiselect - Vacation Reactive Form">
 *   <file name="sample-thf-multiselect-vacation-reactive-form/sample-thf-multiselect-vacation-reactive-form.component.html"> </file>
 *   <file name="sample-thf-multiselect-vacation-reactive-form/sample-thf-multiselect-vacation-reactive-form.component.ts"> </file>
 * </example>
 */
export class ThfMultiselectComponent extends ThfMultiselectBaseComponent {
    /**
     * @param {?} renderer
     * @param {?} changeDetector
     * @param {?} controlPosition
     * @param {?} el
     */
    constructor(renderer, changeDetector, controlPosition, el) {
        super();
        this.renderer = renderer;
        this.changeDetector = changeDetector;
        this.controlPosition = controlPosition;
        this.el = el;
        this.disclaimerOffset = 0;
        this.dropdownIcon = 'thf-icon-arrow-down';
        this.dropdownOpen = false;
        this.initialized = false;
        this.visibleElement = false;
        this.isCalculateVisibleItems = true;
        this.onScroll = (/**
         * @return {?}
         */
        () => {
            this.adjustContainerPosition();
        });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.focus) {
            this.inputElement.nativeElement.focus();
        }
        this.initialized = true;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        /** @type {?} */
        const inputWidth = this.inputElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
            this.debounceResize();
            this.visibleElement = true;
            return;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListeners();
    }
    /**
     * @return {?}
     */
    getInputWidth() {
        return this.el.nativeElement.querySelector('.thf-input').offsetWidth - 40;
    }
    /**
     * @return {?}
     */
    getDisclaimersWidth() {
        /** @type {?} */
        const disclaimers = this.el.nativeElement.querySelectorAll('thf-disclaimer');
        return Array.from(disclaimers).map((/**
         * @param {?} disclaimer
         * @return {?}
         */
        disclaimer => disclaimer['offsetWidth']));
    }
    /**
     * @return {?}
     */
    calculateVisibleItems() {
        /** @type {?} */
        const disclaimersWidth = this.getDisclaimersWidth();
        /** @type {?} */
        const inputWidth = this.getInputWidth();
        /** @type {?} */
        const extraDisclaimerSize = 38;
        /** @type {?} */
        const disclaimersVisible = disclaimersWidth[0];
        this.visibleDisclaimers = [];
        if (inputWidth > 0) {
            /** @type {?} */
            let sum = 0;
            /** @type {?} */
            let i = 0;
            for (i = 0; i < this.selectedOptions.length; i++) {
                sum += disclaimersWidth[i];
                this.visibleDisclaimers.push(this.selectedOptions[i]);
                if (sum > inputWidth) {
                    sum -= disclaimersWidth[i];
                    this.isCalculateVisibleItems = false;
                    break;
                }
            }
            if (disclaimersVisible || !this.selectedOptions.length) {
                if (i === this.selectedOptions.length) {
                    this.isCalculateVisibleItems = false;
                    return;
                }
                if (sum + extraDisclaimerSize > inputWidth) {
                    this.visibleDisclaimers.splice(-2, 2);
                    /** @type {?} */
                    const label = '+' + (this.selectedOptions.length + 1 - i).toString();
                    this.visibleDisclaimers.push({ value: '', label: label });
                }
                else {
                    this.visibleDisclaimers.splice(-1, 1);
                    /** @type {?} */
                    const label = '+' + (this.selectedOptions.length - i).toString();
                    this.visibleDisclaimers.push({ value: '', label: label });
                }
            }
        }
    }
    /**
     * @return {?}
     */
    updateVisibleItems() {
        this.visibleDisclaimers = [].concat(this.selectedOptions);
        this.debounceResize();
        // quando estiver dentro de modal
        if (!this.inputElement.nativeElement.offsetWidth) {
            this.isCalculateVisibleItems = true;
        }
    }
    /**
     * @return {?}
     */
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout((/**
         * @return {?}
         */
        () => {
            this.calculateVisibleItems();
        }), 200);
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    onKeyDown(event) {
        if (event.keyCode === ThfKeyCodeEnum.arrowUp || event.keyCode === ThfKeyCodeEnum.arrowDown) {
            event.preventDefault();
            this.controlDropdownVisibility(true);
            return;
        }
        if (event.keyCode === ThfKeyCodeEnum.tab) {
            this.controlDropdownVisibility(false);
            return;
        }
    }
    /**
     * @return {?}
     */
    toggleDropdownVisibility() {
        if (this.disabled) {
            return;
        }
        this.controlDropdownVisibility(!this.dropdownOpen);
    }
    /**
     * @param {?} toOpen
     * @return {?}
     */
    openDropdown(toOpen) {
        if (toOpen && !this.disabled) {
            this.controlDropdownVisibility(true);
        }
    }
    /**
     * @param {?} toOpen
     * @return {?}
     */
    controlDropdownVisibility(toOpen) {
        toOpen ? this.open() : this.close();
    }
    /**
     * @return {?}
     */
    scrollToSelectedOptions() {
        if (this.selectedOptions && this.selectedOptions.length) {
            /** @type {?} */
            const index = this.options.findIndex((/**
             * @param {?} option
             * @return {?}
             */
            option => option.value === this.selectedOptions[0].value));
            this.dropdown.scrollTo(index);
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setVisibleOptionsDropdown(options) {
        this.visibleOptionsDropdown = options;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    changeSearch(event) {
        (event && event.value) ? this.searchByLabel(event.value, this.options, this.filterMode) : this.setVisibleOptionsDropdown(this.options);
        // timeout necessário para reposicionar corretamente quando dropdown estiver pra cima do input e realizar busca no input
        setTimeout((/**
         * @return {?}
         */
        () => this.adjustContainerPosition()));
    }
    /**
     * @return {?}
     */
    getPlaceholder() {
        return (this.placeholder && !this.visibleDisclaimers.length) ? this.placeholder : '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    closeDisclaimer(value) {
        /** @type {?} */
        const index = this.selectedOptions.findIndex((/**
         * @param {?} option
         * @return {?}
         */
        option => option.value === value));
        this.selectedOptions.splice(index, 1);
        this.updateVisibleItems();
        this.callOnChange(this.selectedOptions);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    wasClickedOnToggle(event) {
        if (!this.inputElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            !this.dropdownElement.nativeElement.contains(event.target) &&
            !this.disclaimerContainerElement.nativeElement.contains(event.target) &&
            this.dropdownOpen) {
            this.controlDropdownVisibility(false);
        }
    }
    /**
     * @private
     * @return {?}
     */
    adjustContainerPosition() {
        this.controlPosition.adjustPosition(thfMultiselectContainerPositionDefault);
    }
    /**
     * @private
     * @return {?}
     */
    close() {
        this.dropdownIcon = 'thf-icon-arrow-down';
        this.dropdownOpen = false;
        this.dropdown.controlVisibility(false);
        this.setVisibleOptionsDropdown(this.options);
        this.removeListeners();
    }
    /**
     * @private
     * @return {?}
     */
    initializeListeners() {
        this.clickOutListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.wasClickedOnToggle(event);
        }));
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        () => {
            this.updateVisibleItems();
            isMobile() ? this.adjustContainerPosition() : this.close();
        }));
        window.addEventListener('scroll', this.onScroll, true);
    }
    /**
     * @private
     * @return {?}
     */
    open() {
        this.dropdownIcon = 'thf-icon-arrow-up';
        this.dropdownOpen = true;
        this.dropdown.controlVisibility(true);
        this.setVisibleOptionsDropdown(this.options);
        this.initializeListeners();
        this.scrollToSelectedOptions();
        this.changeDetector.detectChanges();
        this.setPositionDropdown();
    }
    /**
     * @private
     * @return {?}
     */
    removeListeners() {
        if (this.clickOutListener) {
            this.clickOutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    /**
     * @private
     * @return {?}
     */
    setPositionDropdown() {
        this.controlPosition.setElements(this.dropdown.container.nativeElement, thfMultiselectContainerOffset, this.inputElement, ['top', 'bottom'], true);
        this.adjustContainerPosition();
    }
}
ThfMultiselectComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-multiselect',
                template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\"\n    [class.thf-multiselect-show]=\"dropdownOpen\">\n\n    <input #inputElement\n      class=\"thf-input thf-input-icon-right thf-clickable\"\n      readonly\n      type=\"text\"\n      [value]=\"getPlaceholder()\"\n      [disabled]=\"disabled\"\n      (keydown)=\"onKeyDown($event)\"\n      (click)=\"toggleDropdownVisibility()\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <span #iconElement\n        class=\"thf-icon thf-field-icon {{ dropdownIcon }}\"\n        [ngClass]=\"disabled ? 'thf-field-icon-disabled' : ''\"\n        (click)=\"toggleDropdownVisibility()\">\n      </span>\n    </div>\n\n    <div #disclaimerContainer\n      class=\"thf-multiselect-field\"\n      [class.thf-multiselect-field-disabled]=\"disabled\">\n\n      <thf-disclaimer *ngFor=\"let disclaimer of visibleDisclaimers\"\n        [t-label]=\"disclaimer.label\"\n        [t-value]=\"disclaimer.value\"\n        [t-hide-close]=\"disclaimer.value === '' || disabled\"\n        [class.thf-clickable]=\"disclaimer.value === '' && !disabled\"\n        (click)=\"openDropdown(disclaimer.value === '')\"\n        (t-close-action)=\"closeDisclaimer(disclaimer.value)\">\n      </thf-disclaimer>\n    </div>\n  </div>\n\n  <thf-multiselect-dropdown #dropdownElement\n    [t-hide-search]=\"hideSearch\"\n    [t-literals]=\"literals\"\n    [t-options]=\"visibleOptionsDropdown\"\n    [t-selected-values]=\"getValuesFromOptions(selectedOptions)\"\n    [t-placeholder-search]=\"placeholderSearch\"\n    (t-change)=\"changeItems($event)\"\n    (t-change-search)=\"changeSearch($event)\"\n    (t-close-dropdown)=\"controlDropdownVisibility(false)\">\n  </thf-multiselect-dropdown>\n\n  <thf-field-container-bottom></thf-field-container-bottom>\n\n</thf-field-container>\n",
                providers: [
                    ThfControlPositionService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfMultiselectComponent)),
                        multi: true,
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ThfMultiselectComponent)),
                        multi: true,
                    }
                ]
            }] }
];
/** @nocollapse */
ThfMultiselectComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: ThfControlPositionService },
    { type: ElementRef }
];
ThfMultiselectComponent.propDecorators = {
    dropdownElement: [{ type: ViewChild, args: ['dropdownElement', { read: ElementRef, static: true },] }],
    dropdown: [{ type: ViewChild, args: ['dropdownElement', { static: true },] }],
    disclaimerContainerElement: [{ type: ViewChild, args: ['disclaimerContainer', { read: ElementRef, static: true },] }],
    iconElement: [{ type: ViewChild, args: ['iconElement', { read: ElementRef, static: true },] }],
    inputElement: [{ type: ViewChild, args: ['inputElement', { read: ElementRef, static: true },] }]
};
if (false) {
    /** @type {?} */
    ThfMultiselectComponent.prototype.dropdownElement;
    /** @type {?} */
    ThfMultiselectComponent.prototype.dropdown;
    /** @type {?} */
    ThfMultiselectComponent.prototype.disclaimerContainerElement;
    /** @type {?} */
    ThfMultiselectComponent.prototype.iconElement;
    /** @type {?} */
    ThfMultiselectComponent.prototype.inputElement;
    /** @type {?} */
    ThfMultiselectComponent.prototype.disclaimerOffset;
    /** @type {?} */
    ThfMultiselectComponent.prototype.dropdownIcon;
    /** @type {?} */
    ThfMultiselectComponent.prototype.dropdownOpen;
    /** @type {?} */
    ThfMultiselectComponent.prototype.initialized;
    /** @type {?} */
    ThfMultiselectComponent.prototype.positionDisclaimerExtra;
    /** @type {?} */
    ThfMultiselectComponent.prototype.timeoutResize;
    /** @type {?} */
    ThfMultiselectComponent.prototype.visibleElement;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectComponent.prototype.isCalculateVisibleItems;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectComponent.prototype.onScroll;
    /** @type {?} */
    ThfMultiselectComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectComponent.prototype.controlPosition;
    /**
     * @type {?}
     * @private
     */
    ThfMultiselectComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,