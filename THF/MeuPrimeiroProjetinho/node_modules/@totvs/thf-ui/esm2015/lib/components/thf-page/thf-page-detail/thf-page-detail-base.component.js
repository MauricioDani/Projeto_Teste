/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, ViewChild } from '@angular/core';
import { browserLanguage, thfLocaleDefault } from './../../../utils/util';
import { ThfPageContentComponent } from '../thf-page-content/thf-page-content.component';
/** @type {?} */
export const thfPageDetailLiteralsDefault = {
    en: (/** @type {?} */ ({
        back: 'Back',
        edit: 'Edit',
        remove: 'Remove'
    })),
    es: (/** @type {?} */ ({
        back: 'Volver',
        edit: 'Editar',
        remove: 'Eliminar'
    })),
    pt: (/** @type {?} */ ({
        back: 'Voltar',
        edit: 'Editar',
        remove: 'Remover'
    }))
};
/**
 * \@description
 *
 * O componente **thf-page-detail** é utilizado como container principal para a tela de detalhamento de um registro.
 * Por padrão possui 3 ações, cada ação na tela executa uma função no componente que está utilizando o thf-page-detail,
 * são elas:
 *  - Voltar (função: back);
 *  - Editar (função: edit);
 *  - Remover (função: remove);
 *
 * Caso não estiver implementado alguma função, listado anteriormente, o mesmo não será apresentado.
 */
export class ThfPageDetailBaseComponent {
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto com as literais usadas no `thf-page-detail`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: ThfPageDetailLiterals = {
     *    edit: 'Edição',
     *    remove: 'Exclusão',
     *    back: 'Menu'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: ThfPageDetailLiterals = {
     *    remove: 'Excluir registro permanentemente'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <thf-page-detail
     *   [t-literals]="customLiterals">
     * </thf-page-detail>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, thfPageDetailLiteralsDefault[thfLocaleDefault], thfPageDetailLiteralsDefault[browserLanguage()], value);
        }
        else {
            this._literals = thfPageDetailLiteralsDefault[browserLanguage()];
        }
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || thfPageDetailLiteralsDefault[browserLanguage()];
    }
    /**
     * Título da página.
     * @param {?} title
     * @return {?}
     */
    set title(title) {
        this._title = title;
        this.thfPageContent.recalculateHeaderSize();
    }
    /**
     * @return {?}
     */
    get title() {
        return this._title;
    }
}
ThfPageDetailBaseComponent.propDecorators = {
    thfPageContent: [{ type: ViewChild, args: [ThfPageContentComponent, { static: true },] }],
    breadcrumb: [{ type: Input, args: ['t-breadcrumb',] }],
    literals: [{ type: Input, args: ['t-literals',] }],
    title: [{ type: Input, args: ['t-title',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageDetailBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    ThfPageDetailBaseComponent.prototype._title;
    /** @type {?} */
    ThfPageDetailBaseComponent.prototype.thfPageContent;
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?}
     */
    ThfPageDetailBaseComponent.prototype.breadcrumb;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhZ2UtZGV0YWlsLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1wYWdlL3RoZi1wYWdlLWRldGFpbC90aGYtcGFnZS1kZXRhaWwtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUcxRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQzs7QUFHekYsTUFBTSxPQUFPLDRCQUE0QixHQUFHO0lBQzFDLEVBQUUsRUFBRSxtQkFBd0I7UUFDMUIsSUFBSSxFQUFFLE1BQU07UUFDWixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxRQUFRO0tBQ2pCLEVBQUE7SUFDRCxFQUFFLEVBQUUsbUJBQXdCO1FBQzFCLElBQUksRUFBRSxRQUFRO1FBQ2QsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsVUFBVTtLQUNuQixFQUFBO0lBQ0QsRUFBRSxFQUFFLG1CQUF3QjtRQUMxQixJQUFJLEVBQUUsUUFBUTtRQUNkLElBQUksRUFBRSxRQUFRO1FBQ2QsTUFBTSxFQUFFLFNBQVM7S0FDbEIsRUFBQTtDQUNGOzs7Ozs7Ozs7Ozs7O0FBY0QsTUFBTSxPQUFPLDBCQUEwQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUE2Q3JDLElBQXlCLFFBQVEsQ0FBQyxLQUE0QjtRQUM1RCxJQUFJLEtBQUssWUFBWSxNQUFNLElBQUksQ0FBQyxDQUFDLEtBQUssWUFBWSxLQUFLLENBQUMsRUFBRTtZQUN4RCxJQUFJLENBQUMsU0FBUyxxQkFDVCw0QkFBNEIsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUM5Qyw0QkFBNEIsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxFQUMvQyxLQUFLLENBQ1QsQ0FBQztTQUNIO2FBQU07WUFDTCxJQUFJLENBQUMsU0FBUyxHQUFHLDRCQUE0QixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7U0FDbEU7SUFDSCxDQUFDOzs7O0lBQ0QsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxJQUFJLDRCQUE0QixDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7SUFDM0UsQ0FBQzs7Ozs7O0lBR0QsSUFBc0IsS0FBSyxDQUFDLEtBQWE7UUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQzlDLENBQUM7Ozs7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7OzZCQS9EQSxTQUFTLFNBQUMsdUJBQXVCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO3lCQUduRCxLQUFLLFNBQUMsY0FBYzt1QkFxQ3BCLEtBQUssU0FBQyxZQUFZO29CQWdCbEIsS0FBSyxTQUFDLFNBQVM7Ozs7Ozs7SUEzRGhCLCtDQUF5Qzs7Ozs7SUFDekMsNENBQXVCOztJQUV2QixvREFBOEY7Ozs7O0lBRzlGLGdEQUFpRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgYnJvd3Nlckxhbmd1YWdlLCB0aGZMb2NhbGVEZWZhdWx0IH0gZnJvbSAnLi8uLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgVGhmQnJlYWRjcnVtYiB9IGZyb20gJy4uLy4uL3RoZi1icmVhZGNydW1iL3RoZi1icmVhZGNydW1iLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaGZQYWdlQ29udGVudENvbXBvbmVudCB9IGZyb20gJy4uL3RoZi1wYWdlLWNvbnRlbnQvdGhmLXBhZ2UtY29udGVudC5jb21wb25lbnQnO1xuaW1wb3J0IHsgVGhmUGFnZURldGFpbExpdGVyYWxzIH0gZnJvbSAnLi90aGYtcGFnZS1kZXRhaWwtbGl0ZXJhbHMuaW50ZXJmYWNlJztcblxuZXhwb3J0IGNvbnN0IHRoZlBhZ2VEZXRhaWxMaXRlcmFsc0RlZmF1bHQgPSB7XG4gIGVuOiA8VGhmUGFnZURldGFpbExpdGVyYWxzPiB7XG4gICAgYmFjazogJ0JhY2snLFxuICAgIGVkaXQ6ICdFZGl0JyxcbiAgICByZW1vdmU6ICdSZW1vdmUnXG4gIH0sXG4gIGVzOiA8VGhmUGFnZURldGFpbExpdGVyYWxzPiB7XG4gICAgYmFjazogJ1ZvbHZlcicsXG4gICAgZWRpdDogJ0VkaXRhcicsXG4gICAgcmVtb3ZlOiAnRWxpbWluYXInXG4gIH0sXG4gIHB0OiA8VGhmUGFnZURldGFpbExpdGVyYWxzPiB7XG4gICAgYmFjazogJ1ZvbHRhcicsXG4gICAgZWRpdDogJ0VkaXRhcicsXG4gICAgcmVtb3ZlOiAnUmVtb3ZlcidcbiAgfVxufTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgKip0aGYtcGFnZS1kZXRhaWwqKiDDqSB1dGlsaXphZG8gY29tbyBjb250YWluZXIgcHJpbmNpcGFsIHBhcmEgYSB0ZWxhIGRlIGRldGFsaGFtZW50byBkZSB1bSByZWdpc3Ryby5cbiAqIFBvciBwYWRyw6NvIHBvc3N1aSAzIGHDp8O1ZXMsIGNhZGEgYcOnw6NvIG5hIHRlbGEgZXhlY3V0YSB1bWEgZnVuw6fDo28gbm8gY29tcG9uZW50ZSBxdWUgZXN0w6EgdXRpbGl6YW5kbyBvIHRoZi1wYWdlLWRldGFpbCxcbiAqIHPDo28gZWxhczpcbiAqICAtIFZvbHRhciAoZnVuw6fDo286IGJhY2spO1xuICogIC0gRWRpdGFyIChmdW7Dp8OjbzogZWRpdCk7XG4gKiAgLSBSZW1vdmVyIChmdW7Dp8OjbzogcmVtb3ZlKTtcbiAqXG4gKiBDYXNvIG7Do28gZXN0aXZlciBpbXBsZW1lbnRhZG8gYWxndW1hIGZ1bsOnw6NvLCBsaXN0YWRvIGFudGVyaW9ybWVudGUsIG8gbWVzbW8gbsOjbyBzZXLDoSBhcHJlc2VudGFkby5cbiAqL1xuZXhwb3J0IGNsYXNzIFRoZlBhZ2VEZXRhaWxCYXNlQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9saXRlcmFsczogVGhmUGFnZURldGFpbExpdGVyYWxzO1xuICBwcml2YXRlIF90aXRsZTogc3RyaW5nO1xuXG4gIEBWaWV3Q2hpbGQoVGhmUGFnZUNvbnRlbnRDb21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pIHRoZlBhZ2VDb250ZW50OiBUaGZQYWdlQ29udGVudENvbXBvbmVudDtcblxuICAvKiogT2JqZXRvIGNvbSBwcm9wcmllZGFkZXMgZG8gYnJlYWRjcnVtYi4gKi9cbiAgQElucHV0KCd0LWJyZWFkY3J1bWInKSBicmVhZGNydW1iOiBUaGZCcmVhZGNydW1iO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamV0byBjb20gYXMgbGl0ZXJhaXMgdXNhZGFzIG5vIGB0aGYtcGFnZS1kZXRhaWxgLlxuICAgKlxuICAgKiBFeGlzdGVtIGR1YXMgbWFuZWlyYXMgZGUgY3VzdG9taXphciBvIGNvbXBvbmVudGUsIHBhc3NhbmRvIHVtIG9iamV0byBjb20gdG9kYXMgYXMgbGl0ZXJhaXMgZGlzcG9uw612ZWlzOlxuICAgKlxuICAgKiBgYGBcbiAgICogIGNvbnN0IGN1c3RvbUxpdGVyYWxzOiBUaGZQYWdlRGV0YWlsTGl0ZXJhbHMgPSB7XG4gICAqICAgIGVkaXQ6ICdFZGnDp8OjbycsXG4gICAqICAgIHJlbW92ZTogJ0V4Y2x1c8OjbycsXG4gICAqICAgIGJhY2s6ICdNZW51J1xuICAgKiAgfTtcbiAgICogYGBgXG4gICAqXG4gICAqIE91IHBhc3NhbmRvIGFwZW5hcyBhcyBsaXRlcmFpcyBxdWUgZGVzZWphIGN1c3RvbWl6YXI6XG4gICAqXG4gICAqIGBgYFxuICAgKiAgY29uc3QgY3VzdG9tTGl0ZXJhbHM6IFRoZlBhZ2VEZXRhaWxMaXRlcmFscyA9IHtcbiAgICogICAgcmVtb3ZlOiAnRXhjbHVpciByZWdpc3RybyBwZXJtYW5lbnRlbWVudGUnXG4gICAqICB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogRSBwYXJhIGNhcnJlZ2FyIGFzIGxpdGVyYWlzIGN1c3RvbWl6YWRhcywgYmFzdGEgYXBlbmFzIHBhc3NhciBvIG9iamV0byBwYXJhIG8gY29tcG9uZW50ZS5cbiAgICpcbiAgICogYGBgXG4gICAqIDx0aGYtcGFnZS1kZXRhaWxcbiAgICogICBbdC1saXRlcmFsc109XCJjdXN0b21MaXRlcmFsc1wiPlxuICAgKiA8L3RoZi1wYWdlLWRldGFpbD5cbiAgICogYGBgXG4gICAqXG4gICAqICA+IE8gb2JqZXRvIHBhZHLDo28gZGUgbGl0ZXJhaXMgc2Vyw6EgdHJhZHV6aWRvIGRlIGFjb3JkbyBjb20gbyBpZGlvbWEgZG8gYnJvd3NlciAocHQsIGVuLCBlcykuXG4gICAqL1xuICBASW5wdXQoJ3QtbGl0ZXJhbHMnKSBzZXQgbGl0ZXJhbHModmFsdWU6IFRoZlBhZ2VEZXRhaWxMaXRlcmFscykge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCAmJiAhKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICB0aGlzLl9saXRlcmFscyA9IHtcbiAgICAgICAgLi4udGhmUGFnZURldGFpbExpdGVyYWxzRGVmYXVsdFt0aGZMb2NhbGVEZWZhdWx0XSxcbiAgICAgICAgLi4udGhmUGFnZURldGFpbExpdGVyYWxzRGVmYXVsdFticm93c2VyTGFuZ3VhZ2UoKV0sXG4gICAgICAgIC4uLnZhbHVlXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXRlcmFscyA9IHRoZlBhZ2VEZXRhaWxMaXRlcmFsc0RlZmF1bHRbYnJvd3Nlckxhbmd1YWdlKCldO1xuICAgIH1cbiAgfVxuICBnZXQgbGl0ZXJhbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xpdGVyYWxzIHx8IHRoZlBhZ2VEZXRhaWxMaXRlcmFsc0RlZmF1bHRbYnJvd3Nlckxhbmd1YWdlKCldO1xuICB9XG5cbiAgLyoqIFTDrXR1bG8gZGEgcMOhZ2luYS4gKi9cbiAgQElucHV0KCd0LXRpdGxlJykgc2V0IHRpdGxlKHRpdGxlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90aXRsZSA9IHRpdGxlO1xuICAgIHRoaXMudGhmUGFnZUNvbnRlbnQucmVjYWxjdWxhdGVIZWFkZXJTaXplKCk7XG4gIH1cblxuICBnZXQgdGl0bGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpdGxlO1xuICB9XG5cbn1cbiJdfQ==