/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Input, Renderer2, ViewChild } from '@angular/core';
/**
 * \@description
 *
 * Componente grid.
 *
 * Ações / atalhos:
 *
 * - ARROW-UP: Navega para celula superior / Na ultima linha adiciona uma linha em branco no grid;
 * - ARROW-DOWN: Navega para celula inferior;
 * - ARROW-RIGHT: Navega para celula direita;
 * - ARROW-LEFT: Navega para celula esquerda;
 * - TAB: Navega para próxima celula;
 * - SHIFT+TAB: Navega para celula anterior;
 * - CTRL+DEL: Remove linha;
 * - DEL/BACKSPACE: Limpa celula;
 * - ENTER: Edita linha com valor atual/Confirma edição da celula;
 * - DOUBLE-CLICK: Edita linha com valor atual;
 * - ESC: Cancela edição da celula / Cancela inserção de linhas em branco;
 * - A..Z/0..9: Inicia edição com valor em branco.
 *
 * \@example
 *
 * <example name="thf-grid-basic" title="Totvs Grid Basic">
 *  <file name="sample-thf-grid-basic/sample-thf-grid-basic.component.html"> </file>
 *  <file name="sample-thf-grid-basic/sample-thf-grid-basic.component.ts"> </file>
 * </example>
 */
export class ThfGridComponent {
    /**
     * @param {?} changeDetectorRef
     * @param {?} elRef
     * @param {?} renderer
     */
    constructor(changeDetectorRef, elRef, renderer) {
        this.changeDetectorRef = changeDetectorRef;
        this.elRef = elRef;
        this.lastCell = '0-0';
        this.lastRow = 0;
        this.lastColumn = 0;
        this.currencyCell = '0-0';
        this.currencyRow = 0;
        this.currencyColumn = 0;
        this.logger = false;
        this.width = '100%';
        this.widthFreeze = 0;
        this.widthActions = 0;
        this._columns = [];
        /**
         * \@description
         *
         * Ações disparadas quando uma linha do grid é manipulada.
         */
        this.rowActions = {};
        /**
         * Lista com os dados que serão exibidos no grid.
         */
        this.data = [];
        this.debounceResize();
        this.resizeListener = renderer.listen('window', 'resize', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.debounceResize();
        }));
    }
    /**
     * Colunas exibidas no grid.
     * @param {?} value
     * @return {?}
     */
    set columns(value) {
        this._columns = [...value];
        this._columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        column => {
            column.label = column.label || column.property;
            if (column.freeze === true) {
                column.cssWidth = `${column.width || 100}px`;
            }
            else {
                column.cssWidth = column.width ? `${column.width}px` : '100%';
            }
        }));
    }
    /**
     * @return {?}
     */
    get columns() {
        return this._columns.filter((/**
         * @param {?} column
         * @return {?}
         */
        column => column.freeze !== true && column.action !== true));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.resizeListener) {
            this.resizeListener();
        }
    }
    /**
     * @private
     * @return {?}
     */
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const widthTableWrapper = this.tableWrapper.nativeElement.offsetWidth;
            this.width = `${widthTableWrapper - (this.widthFreeze + 8) - this.widthActions}px`;
        }), 100);
    }
    /**
     * @return {?}
     */
    get freezeColumns() {
        /** @type {?} */
        const freezeColumns = this._columns.filter((/**
         * @param {?} column
         * @return {?}
         */
        column => column.freeze === true));
        this.widthFreeze = freezeColumns.reduce((/**
         * @param {?} prev
         * @param {?} current
         * @return {?}
         */
        (prev, current) => prev + (current.width || 100)), 0);
        return freezeColumns;
    }
    /**
     * @return {?}
     */
    get actionColumns() {
        /** @type {?} */
        const actionsColumns = this._columns.filter((/**
         * @param {?} column
         * @return {?}
         */
        column => column.action === true));
        this.widthActions = actionsColumns.length > 0 ? 56 : 0;
        return actionsColumns;
    }
    /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    cancelRow(event, row) {
        /** @type {?} */
        const el = event.path.find((/**
         * @param {?} element
         * @return {?}
         */
        element => element.id));
        if (!el) {
            return;
        }
        const [x] = (el.id).split('-');
        if (this.isEmptyRow(x)) {
            if (!this.removeRow(event, row)) {
                return;
            }
            this.currencyObj = Object.assign({}, this.data[this.currencyRow - 1]);
        }
        else {
            this.data[+x - 1] = Object.assign({}, this.currencyObj);
            setTimeout((/**
             * @return {?}
             */
            () => this.selectCell(this.currencyRow, this.currencyColumn)));
        }
    }
    /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    removeRow(event, row) {
        if (this.rowActions.beforeRemove && !this.rowActions.beforeRemove(Object.assign({}, row))) {
            return false;
        }
        /** @type {?} */
        const index = this.data.indexOf(row);
        this.data.splice(index, 1);
        this.changeDetectorRef.detectChanges();
        if ((this.data.length === 0) || (index === this.data.length)) {
            this.selectCell(this.currencyRow - 1, this.currencyColumn);
        }
        else {
            this.selectCell(this.currencyRow, this.currencyColumn);
        }
        return true;
    }
    /**
     * @param {?} event
     * @param {?} direction
     * @return {?}
     */
    tableKeydown(event, direction) {
        let [row, col] = event.target.id.split('-');
        row = +row;
        col = +col;
        /** @type {?} */
        let prow = +row;
        /** @type {?} */
        let pcol = +col;
        // event.preventDefault();
        // event.stopPropagation();
        // debugger;
        if (direction === 'down') {
            if (row <= this.data.length) {
                prow++;
            }
            if (row === this.data.length) {
                if (row === 0 || !this.isEmptyRow(row)) {
                    if (this.saveRow(row)) {
                        if (!this.insertRow()) {
                            return;
                        }
                    }
                    else {
                        return;
                    }
                }
                else {
                    prow--;
                }
            }
        }
        else if ((direction === 'up') && (row > 0)) {
            prow--;
        }
        else if ((direction === 'left') && (col > 0)) {
            pcol--;
        }
        else if ((direction === 'right') && (col < this._columns.length - 1)) {
            pcol++;
        }
        else if (direction === 'next') {
            if (col < this._columns.length - 1) {
                pcol++;
                event.preventDefault();
            }
            else if (row < this.data.length) {
                pcol = 0;
                prow++;
                event.preventDefault();
            }
        }
        else if (direction === 'prior') {
            if (col > 0) {
                pcol--;
                event.preventDefault();
            }
            else if (row > 0) {
                pcol = this._columns.length - 1;
                prow--;
                event.preventDefault();
            }
        }
        if (this.currencyCell === `${prow}-${pcol}`) {
            // console.log('vazou');
            return;
        }
        // debugger;
        if (prow !== this.currencyRow && row > 0 && this.data.length >= row) {
            if (!this.isEmptyRow(row)) {
                if (!this.saveRow(row)) {
                    return;
                }
            }
            else {
                if (!this.removeRow(event, row)) {
                    return;
                }
            }
        }
        if (this.currencyRow !== prow) {
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
            // console.log('mudou de linha');
        }
        this.lastCell = event.target.id;
        this.lastRow = row;
        this.lastColumn = col;
        this.selectCell(prow, pcol);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    tableClick(event) {
        /** @type {?} */
        const el = event.path.find((/**
         * @param {?} element
         * @return {?}
         */
        element => element.id));
        if (!el) {
            this.selectCell(this.currencyRow, this.currencyColumn);
            return;
        }
        if (this.currencyCell === el.id) {
            return;
        }
        const [row, col] = (el.id).split('-');
        /** @type {?} */
        const prow = +row;
        /** @type {?} */
        const pcol = +col;
        if (prow !== this.currencyRow) {
            if (this.currencyRow > 0) {
                if (!this.isEmptyRow(this.currencyRow)) {
                    if (!this.saveRow(this.currencyRow)) {
                        this.selectCell(this.currencyRow, this.currencyColumn);
                        return;
                    }
                }
                else {
                    if (!this.removeRow(event, row)) {
                        return;
                    }
                }
            }
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
            // console.log('>>>>>>> ', prow - 1);
        }
        this.lastCell = this.currencyCell;
        this.lastRow = this.currencyRow;
        this.lastColumn = this.currencyColumn;
        this.currencyCell = el.id;
        this.currencyRow = prow;
        this.currencyColumn = pcol;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    saveRow(row) {
        // console.log(this.data[row - 1]);
        // console.log(this.data[row - 1]);
        /** @type {?} */
        const obj = this.data[row - 1];
        if (!Object.keys(obj).some((/**
         * @param {?} prop
         * @return {?}
         */
        prop => obj[prop] !== this.currencyObj[prop]))) {
            // console.log('tudo igual');
            return true;
        }
        if (this.rowActions.beforeSave && !this.rowActions.beforeSave(obj, this.currencyObj)) {
            return false;
        }
        /** @type {?} */
        const requireds = [];
        this.columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        column => {
            if (column.required === true && !obj[column.property]) {
                requireds.push(column.property);
            }
        }));
        return requireds.length === 0;
    }
    /**
     * @return {?}
     */
    insertRow() {
        /** @type {?} */
        const obj = {};
        if (this.rowActions.beforeInsert && !this.rowActions.beforeInsert(obj)) {
            return false;
        }
        // this.currencyObj = Object.assign({}, obj);
        this.data.push(obj);
        this.changeDetectorRef.detectChanges();
        return true;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    isEmptyRow(row) {
        /** @type {?} */
        const obj = this.data[row - 1];
        if (!obj) { // title
            return false;
        }
        /** @type {?} */
        const filled = Object.keys(obj).some((/**
         * @param {?} property
         * @return {?}
         */
        property => obj[property]));
        return !filled;
    }
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    selectCell(row, col) {
        /** @type {?} */
        const nextCell = this.elRef.nativeElement.querySelector(`[id='${row}-${col}']`);
        if (nextCell) {
            this.currencyCell = `${row}-${col}`;
            this.currencyRow = row;
            this.currencyColumn = col;
            nextCell.focus();
        }
    }
}
ThfGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-grid',
                template: "<div class=\"thf-grid-wrapper thf-grid-row-wrapper\" #wrapper>\n\n  <div *ngIf=\"logger\">\n    lastCell: {{ lastCell }} | currencyCell: {{ currencyCell }} <br>\n    lastRow: {{ lastRow }} | currencyRow: {{ currencyRow }} <br>\n    lastColumn: {{ lastColumn }} | currencyColumn: {{ currencyColumn }} <br>\n    <hr>\n    currencyObj: {{ currencyObj | json }}\n    <hr>\n  </div>\n\n  <div class=\"thf-grid\">\n    <div class=\"thf-grid-body\">\n      <div class=\"thf-grid-row\"\n        #table\n        (keydown.arrowup)=\"tableKeydown($event, 'up')\"\n        (keydown.arrowdown)=\"tableKeydown($event, 'down')\"\n        (keydown.arrowleft)=\"tableKeydown($event, 'left')\"\n        (keydown.arrowright)=\"tableKeydown($event, 'right')\"\n        (keydown.tab)=\"tableKeydown($event, 'next')\"\n        (keydown.shift.tab)=\"tableKeydown($event, 'prior')\"\n        (click)=\"tableClick($event)\"\n        (contextmenu)=\"tableClick($event)\"\n        (dblclick)=\"tableClick($event)\">\n\n        <div class=\"thf-grid-cell thf-grid-cell-freeze\" *ngIf=\"freezeColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divFreezeColumns\"></ng-container>\n        </div>\n\n        <div class=\"thf-grid-cell thf-grid-cell-normal\"\n          [style.width]=\"width\" [style.max-width]=\"width\" [style.min-width]=\"width\">\n          <ng-container *ngTemplateOutlet=\"divColumns\"></ng-container>\n        </div>\n\n        <div class=\"thf-grid-cell thf-grid-cell-action\" *ngIf=\"actionColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divActionColumns\"></ng-container>\n        </div>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- <div class=\"thf-grid-footer-wrapper\">\n    <div class=\"thf-grid-footer\">\n      <div class=\"links\"><a href=\"#\">RODAP\u00C9</a></div>\n    </div>\n  </div> -->\n\n</div>\n\n<!-- Coluna com as colunas congeladas -->\n<ng-template #divFreezeColumns>\n  <div class=\"thf-grid thf-grid-freeze\">\n    <div class=\"thf-grid-header-group\">\n      <div class=\"thf-grid-row\">\n        <thf-grid-head *ngFor=\"let column of freezeColumns; index as i\" class=\"thf-grid-title\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          t-freeze=\"true\"\n          t-position=\"{{ '0-' + i }}\"\n          [t-width]=\"column.width\"\n          [t-align]=\"column.align\"\n          [t-title]=\"column.label\">\n        </thf-grid-head>\n      </div>\n    </div>\n\n    <div class=\"thf-grid-body\">\n      <div class=\"thf-grid-row\" *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\">\n        <thf-grid-cell *ngFor=\"let column of freezeColumns; index as i\" class=\"thf-grid-cell\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          t-freeze=\"true\"\n          [t-align]=\"column.align\"\n          [t-readonly]=\"column.readonly\"\n          [t-required]=\"column.required\"\n          t-position=\"{{ (j + 1) + '-' + i }}\"\n          [t-width]=\"column.width\"\n          [(t-value)]=\"row[column.property]\">\n        </thf-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas congeladas -->\n\n<!-- Coluna com as colunas nornais -->\n<ng-template #divColumns>\n  <div class=\"thf-grid thf-grid-normal\">\n    <div class=\"thf-grid-header-group\">\n      <div class=\"thf-grid-row\">\n        <thf-grid-head *ngFor=\"let column of columns; index as i\" class=\"thf-grid-title\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          [t-align]=\"column.align\"\n          t-position=\"{{ '0-' + (i + freezeColumns.length) }}\"\n          [t-title]=\"column.label\"\n          [t-width]=\"column.width\">\n        </thf-grid-head>\n      </div>\n    </div>\n\n    <div class=\"thf-grid-body\">\n      <div class=\"thf-grid-row\" *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\">\n        <thf-grid-cell *ngFor=\"let column of columns; index as i\" class=\"thf-grid-cell\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          [t-align]=\"column.align\"\n          [t-readonly]=\"column.readonly\"\n          [t-required]=\"column.required\"\n          t-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length) }}\"\n          [(t-value)]=\"row[column.property]\"\n          [t-width]=\"column.width\">\n        </thf-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas nornais -->\n\n<!-- Coluna com as colunas de a\u00E7\u00E3o -->\n<ng-template #divActionColumns>\n    <div class=\"thf-grid thf-grid-actions\">\n      <div class=\"thf-grid-header-group\">\n        <div class=\"thf-grid-row\">\n          <thf-grid-head *ngFor=\"let column of actionColumns; index as i\" class=\"thf-grid-title\"\n            t-position=\"{{ '0-' + (i + freezeColumns.length + columns.length) }}\"\n            [t-title]=\"column.label\"\n            [t-align]=\"column.align\">\n          </thf-grid-head>\n        </div>\n      </div>\n\n      <div class=\"thf-grid-body\">\n        <div class=\"thf-grid-row\" *ngFor=\"let row of data; index as j\"\n          (keydown.control.delete)=\"removeRow($event, row)\"\n          (keydown.esc)=\"cancelRow($event, row)\">\n          <thf-grid-cell-action *ngFor=\"let column of actionColumns; index as i\" class=\"thf-grid-cell\"\n            t-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length + columns.length) }}\"\n            [t-value]=\"row[column.property]\">\n          </thf-grid-cell-action>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n  <!-- FIM: Coluna com as colunas de a\u00E7\u00E3o -->\n",
                styles: [".thf-grid-wrapper{overflow:auto;border:1px solid #eceeee}.thf-grid{display:table;border-right:none;border-bottom:none}.thf-grid-cell-normal::-webkit-scrollbar,.thf-grid-row-wrapper::-webkit-scrollbar{border-radius:2px;height:4px;opacity:.5;width:4px}.thf-grid-cell-normal::-webkit-scrollbar-thumb,.thf-grid-row-wrapper::-webkit-scrollbar-thumb{background-color:#0c9abe}.thf-grid .fixed{display:table}.thf-grid-header-group{display:table-header-group}.thf-grid-body{display:table-row-group}.thf-grid-row{display:table-row}.thf-grid-cell,.thf-grid-title{display:table-cell;border:none}.thf-grid-cell-freeze{border-right:2px solid #ceeaf2}.thf-grid-cell-action{color:#00f;border-left:2px solid #ceeaf2}.thf-grid-actions,.thf-grid-freeze,.thf-grid-normal{width:100%}.thf-grid-cell-normal{overflow:auto}.thf-grid-footer{display:table-footer-group}.thf-grid-footer-wrapper{border:1px solid #eceeee;border-top:none}"]
            }] }
];
/** @nocollapse */
ThfGridComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: Renderer2 }
];
ThfGridComponent.propDecorators = {
    tableElement: [{ type: ViewChild, args: ['table', { static: true },] }],
    tableWrapper: [{ type: ViewChild, args: ['wrapper', { static: true },] }],
    rowActions: [{ type: Input, args: ['t-row-actions',] }],
    columns: [{ type: Input, args: ['t-columns',] }],
    data: [{ type: Input, args: ['t-data',] }]
};
if (false) {
    /** @type {?} */
    ThfGridComponent.prototype.lastCell;
    /** @type {?} */
    ThfGridComponent.prototype.lastRow;
    /** @type {?} */
    ThfGridComponent.prototype.lastColumn;
    /** @type {?} */
    ThfGridComponent.prototype.currencyCell;
    /** @type {?} */
    ThfGridComponent.prototype.currencyRow;
    /** @type {?} */
    ThfGridComponent.prototype.currencyColumn;
    /** @type {?} */
    ThfGridComponent.prototype.currencyObj;
    /** @type {?} */
    ThfGridComponent.prototype.logger;
    /** @type {?} */
    ThfGridComponent.prototype.width;
    /** @type {?} */
    ThfGridComponent.prototype.widthFreeze;
    /** @type {?} */
    ThfGridComponent.prototype.widthActions;
    /**
     * @type {?}
     * @private
     */
    ThfGridComponent.prototype.resizeListener;
    /**
     * @type {?}
     * @private
     */
    ThfGridComponent.prototype.timeoutResize;
    /** @type {?} */
    ThfGridComponent.prototype.tableElement;
    /** @type {?} */
    ThfGridComponent.prototype.tableWrapper;
    /**
     * @type {?}
     * @private
     */
    ThfGridComponent.prototype._columns;
    /**
     * \@description
     *
     * Ações disparadas quando uma linha do grid é manipulada.
     * @type {?}
     */
    ThfGridComponent.prototype.rowActions;
    /**
     * Lista com os dados que serão exibidos no grid.
     * @type {?}
     */
    ThfGridComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    ThfGridComponent.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    ThfGridComponent.prototype.elRef;
}
//# sourceMappingURL=data:application/json;base64,