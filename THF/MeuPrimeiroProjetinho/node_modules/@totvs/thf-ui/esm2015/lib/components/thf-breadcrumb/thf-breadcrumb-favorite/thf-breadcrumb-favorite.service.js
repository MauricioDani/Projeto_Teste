/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço utilizado para favoritar/desfavoritar uma url no componente thf-breadcrumb.
 * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
 * objeto deve ser retornado.
 * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
 * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
 * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
 * junto com a requisição.
 *
 */
export class ThfBreadcrumbFavoriteService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @return {?}
     */
    get url() { return this._url; }
    /**
     * @return {?}
     */
    get bodyParams() { return this._bodyParams; }
    /**
     * @param {?} url
     * @param {?} params
     * @param {?} item
     * @return {?}
     */
    configService(url, params, item) {
        this._url = url;
        this._bodyParams = {
            isFavorite: false,
            url: item.link,
            params: params
        };
    }
    /**
     * @param {?} status
     * @return {?}
     */
    sendStatusFavorite(status) {
        this.bodyParams['isFavorite'] = status;
        return this.http.post(this.url, this.bodyParams);
    }
    /**
     * @return {?}
     */
    getFavorite() {
        return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
    }
}
ThfBreadcrumbFavoriteService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfBreadcrumbFavoriteService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbFavoriteService.prototype._url;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbFavoriteService.prototype._bodyParams;
    /**
     * @type {?}
     * @private
     */
    ThfBreadcrumbFavoriteService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWJyZWFkY3J1bWItZmF2b3JpdGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtYnJlYWRjcnVtYi90aGYtYnJlYWRjcnVtYi1mYXZvcml0ZS90aGYtYnJlYWRjcnVtYi1mYXZvcml0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O0FBbUIzQyxNQUFNLE9BQU8sNEJBQTRCOzs7O0lBU3ZDLFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7SUFBSSxDQUFDOzs7O0lBSnpDLElBQUksR0FBRyxLQUFhLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Ozs7SUFFdkMsSUFBSSxVQUFVLEtBQWEsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQzs7Ozs7OztJQUlyRCxhQUFhLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxXQUFXLEdBQUc7WUFDakIsVUFBVSxFQUFFLEtBQUs7WUFDakIsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxNQUFNO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDO0lBQ25HLENBQUM7OztZQTVCRixVQUFVOzs7O1lBbkJGLFVBQVU7Ozs7Ozs7SUFzQmpCLDRDQUFxQjs7Ozs7SUFDckIsbURBQTRCOzs7OztJQU1oQiw0Q0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2VydmnDp28gdXRpbGl6YWRvIHBhcmEgZmF2b3JpdGFyL2Rlc2Zhdm9yaXRhciB1bWEgdXJsIG5vIGNvbXBvbmVudGUgdGhmLWJyZWFkY3J1bWIuXG4gKiBBIEFQSSBkZXZlIHJldG9ybmFyIHVtIG9iamV0byBubyBmb3JtYXRvIHsgaXNGYXZvcml0ZTogYm9vbGVhbm8sIHVybDogc3RyaW5nIH0uIEVtIGFtYm9zIG9zIG3DqXRvZG9zLCBHRVQgZSBQT1NUIGVzdGVcbiAqIG9iamV0byBkZXZlIHNlciByZXRvcm5hZG8uXG4gKiBBbyBhbHRlcmFyIG8gc3RhdHVzIGRlIGZhdm9yaXRvLCBhIEFQSSBkZXZlIHJldG9ybmFyIG8gb2JqZXRvIGFjaW1hLCBjb20gbyBub3ZvIHN0YXR1cyBhdHVhbGl6YWRvLlxuICogTm8gbcOpdG9kbyBQT1NULCBleGlzdGUgYSBwb3NzaWJpbGlkYWRlIGRlIHNlciBlbnZpYWRvIHBhcsOibWV0cm9zIGp1bnRvIGNvbSBhIHJlcXVpc2nDp8Ojby4gTmVzdGUgY2FzbywgbyBvYmpldG8gZW52aWFkb1xuICogcGFyYSBhIEFQSSB0ZXLDoSBvIGZvcm1hdG86IHsgaXNGYXZvcml0ZTogYm9vbGVhbm8sIHVybDogc3RyaW5nLCBwYXJhbXM6IHt9IH0sIG9uZGUgcGFyYW1zIMOpIG8gb2JqZXRvIHF1ZSBwb2RlIHNlciBlbnZpYWRvXG4gKiBqdW50byBjb20gYSByZXF1aXNpw6fDo28uXG4gKlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGhmQnJlYWRjcnVtYkZhdm9yaXRlU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBfdXJsOiBzdHJpbmc7XG4gIHByaXZhdGUgX2JvZHlQYXJhbXM6IG9iamVjdDtcblxuICBnZXQgdXJsKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLl91cmw7IH1cblxuICBnZXQgYm9keVBhcmFtcygpOiBvYmplY3QgeyByZXR1cm4gdGhpcy5fYm9keVBhcmFtczsgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XG5cbiAgY29uZmlnU2VydmljZSh1cmwsIHBhcmFtcywgaXRlbSkge1xuICAgIHRoaXMuX3VybCA9IHVybDtcbiAgICB0aGlzLl9ib2R5UGFyYW1zID0ge1xuICAgICAgaXNGYXZvcml0ZTogZmFsc2UsXG4gICAgICB1cmw6IGl0ZW0ubGluayxcbiAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgfTtcbiAgfVxuXG4gIHNlbmRTdGF0dXNGYXZvcml0ZShzdGF0dXMpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHRoaXMuYm9keVBhcmFtc1snaXNGYXZvcml0ZSddID0gc3RhdHVzO1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh0aGlzLnVybCwgdGhpcy5ib2R5UGFyYW1zKTtcbiAgfVxuXG4gIGdldEZhdm9yaXRlKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy51cmwsIHsgcmVzcG9uc2VUeXBlOiAnanNvbicsIHBhcmFtczogeyB1cmw6IHRoaXMuYm9keVBhcmFtc1sndXJsJ10gfX0pO1xuICB9XG59XG4iXX0=