/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/** @type {?} */
const thfCalendarServiceFirstWeekDayDefault = 0;
export class ThfCalendarService {
    /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    monthDates(year, month, dayFormatter = null, weekFormatter = null) {
        if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
            throw Error(('month must be a number (Jan is 0)'));
        }
        /** @type {?} */
        const weeks = [];
        /** @type {?} */
        let week = [];
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let date = new Date(year, month, 1);
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while ((date.getMonth() <= month) && (date.getFullYear() === year));
        return weeks;
    }
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    monthDays(year, month) {
        /** @type {?} */
        const getDayOrZero = (/**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return date.getMonth() === month ? date : 0;
        });
        return this.monthDates(year, month, getDayOrZero);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    weekStartDate(date) {
        /** @type {?} */
        const startDate = new Date(date.getTime());
        while (startDate.getDay() !== thfCalendarServiceFirstWeekDayDefault) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    }
}
ThfCalendarService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWNhbGVuZGFyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLWNhbGVuZGFyL3NlcnZpY2VzL3RoZi1jYWxlbmRhci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztNQUVyQyxxQ0FBcUMsR0FBVyxDQUFDO0FBR3ZELE1BQU0sT0FBTyxrQkFBa0I7Ozs7Ozs7O0lBRTdCLFVBQVUsQ0FBQyxJQUFTLEVBQUUsS0FBVSxFQUFFLGVBQW9CLElBQUksRUFBRSxnQkFBcUIsSUFBSTtRQUNuRixJQUFJLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUU7WUFDOUQsTUFBTSxLQUFLLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7O2NBRUssS0FBSyxHQUFlLEVBQUU7O1lBQ3hCLElBQUksR0FBZSxFQUFFOztZQUNyQixDQUFDLEdBQUcsQ0FBQzs7WUFDTCxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFFbkMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksR0FBRyxHQUFHLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjtRQUVELElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhDLEdBQUc7WUFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BELElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDbEM7WUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2RCxJQUFJLEdBQUcsRUFBRSxDQUFDO1NBQ1gsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsRUFBRTtRQUN0RSxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7OztJQUVELFNBQVMsQ0FBQyxJQUFTLEVBQUUsS0FBVTs7Y0FDdkIsWUFBWTs7OztRQUFHLFVBQVMsSUFBUztZQUNyQyxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQTtRQUNELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3BELENBQUM7Ozs7O0lBRUQsYUFBYSxDQUFDLElBQVM7O2NBQ2YsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxQyxPQUFPLFNBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxxQ0FBcUMsRUFBRTtZQUNuRSxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUM1QztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7OztZQTVDRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5jb25zdCB0aGZDYWxlbmRhclNlcnZpY2VGaXJzdFdlZWtEYXlEZWZhdWx0OiBudW1iZXIgPSAwO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGhmQ2FsZW5kYXJTZXJ2aWNlIHtcblxuICBtb250aERhdGVzKHllYXI6IGFueSwgbW9udGg6IGFueSwgZGF5Rm9ybWF0dGVyOiBhbnkgPSBudWxsLCB3ZWVrRm9ybWF0dGVyOiBhbnkgPSBudWxsKSB7XG4gICAgaWYgKCh0eXBlb2YgbW9udGggIT09ICdudW1iZXInKSB8fCAobW9udGggPCAwKSB8fCAobW9udGggPiAxMSkpIHtcbiAgICAgIHRocm93IEVycm9yKCgnbW9udGggbXVzdCBiZSBhIG51bWJlciAoSmFuIGlzIDApJykpO1xuICAgIH1cblxuICAgIGNvbnN0IHdlZWtzOiBBcnJheTxhbnk+ID0gW107XG4gICAgbGV0IHdlZWs6IEFycmF5PGFueT4gPSBbXTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSk7XG5cbiAgICBpZiAoeWVhciA+PSAwICYmIHllYXIgPCAxMDApIHtcbiAgICAgIGRhdGUuc2V0RnVsbFllYXIoeWVhcik7XG4gICAgfVxuXG4gICAgZGF0ZSA9IHRoaXMud2Vla1N0YXJ0RGF0ZShkYXRlKTtcblxuICAgIGRvIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgd2Vlay5wdXNoKGRheUZvcm1hdHRlciA/IGRheUZvcm1hdHRlcihkYXRlKSA6IGRhdGUpO1xuICAgICAgICBkYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAxKTtcbiAgICAgIH1cbiAgICAgIHdlZWtzLnB1c2god2Vla0Zvcm1hdHRlciA/IHdlZWtGb3JtYXR0ZXIod2VlaykgOiB3ZWVrKTtcbiAgICAgIHdlZWsgPSBbXTtcbiAgICB9IHdoaWxlICgoZGF0ZS5nZXRNb250aCgpIDw9IG1vbnRoKSAmJiAoZGF0ZS5nZXRGdWxsWWVhcigpID09PSB5ZWFyKSk7XG4gICAgcmV0dXJuIHdlZWtzO1xuICB9XG5cbiAgbW9udGhEYXlzKHllYXI6IGFueSwgbW9udGg6IGFueSkge1xuICAgIGNvbnN0IGdldERheU9yWmVybyA9IGZ1bmN0aW9uKGRhdGU6IGFueSkge1xuICAgICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKSA9PT0gbW9udGggPyBkYXRlIDogMDtcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLm1vbnRoRGF0ZXMoeWVhciwgbW9udGgsIGdldERheU9yWmVybyk7XG4gIH1cblxuICB3ZWVrU3RhcnREYXRlKGRhdGU6IGFueSkge1xuICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiAgICB3aGlsZSAoc3RhcnREYXRlLmdldERheSgpICE9PSB0aGZDYWxlbmRhclNlcnZpY2VGaXJzdFdlZWtEYXlEZWZhdWx0KSB7XG4gICAgICBzdGFydERhdGUuc2V0RGF0ZShzdGFydERhdGUuZ2V0RGF0ZSgpIC0gMSk7XG4gICAgfVxuICAgIHJldHVybiBzdGFydERhdGU7XG4gIH1cblxufVxuIl19