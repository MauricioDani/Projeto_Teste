/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { isTypeof } from '../../../../utils/util';
import { getGridColumnsClasses, isVisibleField } from '../../thf-dynamic.util';
import { ThfDynamicFieldType } from '../../thf-dynamic-field-type.enum';
export class ThfDynamicFormFieldsBaseComponent {
    /**
     * @param {?} titleCasePipe
     */
    constructor(titleCasePipe) {
        this.titleCasePipe = titleCasePipe;
        this._value = {};
        this.visibleFields = [];
    }
    // array de objetos que implementam a interface ThfDynamicFormField, que serão exibidos no componente.
    /**
     * @param {?} value
     * @return {?}
     */
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
    }
    /**
     * @return {?}
     */
    get fields() {
        return this._fields;
    }
    // valor que será utilizado para iniciar valor no componente.
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = value && isTypeof(value, 'object') ? value : {};
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} value
     * @param {?} compareTo
     * @return {?}
     */
    compareTo(value, compareTo) {
        return value === compareTo;
    }
    // retorna um array com os objetos configurados e visiveis.
    /**
     * @protected
     * @return {?}
     */
    getVisibleFields() {
        /** @type {?} */
        const visibleFields = [];
        this.fields.forEach((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            if (this.existsProperty(visibleFields, field.property)) {
                this.printError(`"thf-dynamic-form" property "${field.property}" está duplicado. Interface: ThfDynamicFormField.`);
                return;
            }
            if (!field['property']) {
                this.printError('"thf-dynamic-form" É obrigatório ser especificado um property.');
                return;
            }
            if (isVisibleField(field)) {
                visibleFields.push(this.createField(field));
            }
        }));
        return visibleFields;
    }
    // converte um array em string para um array de objetos que contem label e value.
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    convertOptions(options) {
        /** @type {?} */
        const everyOptionString = options.every((/**
         * @param {?} option
         * @return {?}
         */
        option => typeof option === 'string'));
        if (everyOptionString) {
            return options.map((/**
             * @param {?} value
             * @return {?}
             */
            value => ({ label: value, value })));
        }
        return options;
    }
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    createField(field) {
        /** @type {?} */
        const control = this.getComponentControl(field);
        /** @type {?} */
        const options = !!field.options ? this.convertOptions(field.options) : undefined;
        /** @type {?} */
        const componentClass = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
        return Object.assign({ label: this.titleCasePipe.transform(field.property) }, field, { componentClass,
            control,
            options });
    }
    /**
     * @private
     * @param {?} fields
     * @param {?} property
     * @return {?}
     */
    existsProperty(fields, property) {
        return fields.some((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            return field.property === property;
        }));
    }
    // recupera o componente de acordo com algumas regras do field.
    /**
     * @private
     * @param {?=} field
     * @return {?}
     */
    getComponentControl(field = (/** @type {?} */ ({}))) {
        /** @type {?} */
        const type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        if (this.isNumberType(field, type)) {
            return 'number';
        }
        else if (this.isCurrencyType(field, type)) {
            return 'decimal';
        }
        else if (this.isSelect(field)) {
            return 'select';
        }
        else if (this.isRadioGroup(field)) {
            return 'radioGroup';
        }
        else if (this.isCheckboxGroup(field)) {
            return 'checkboxGroup';
        }
        else if (this.isMultiselect(field)) {
            return 'multiselect';
        }
        else if (this.compareTo(type, ThfDynamicFieldType.Boolean)) {
            return 'switch';
        }
        else if (this.compareTo(type, ThfDynamicFieldType.Date) || this.compareTo(type, ThfDynamicFieldType.DateTime)) {
            return 'datepicker';
        }
        else if (this.compareTo(type, ThfDynamicFieldType.Time)) {
            field.mask = field.mask || '99:99';
            return 'input';
        }
        else if (this.isCombo(field)) {
            return 'combo';
        }
        else if (this.isLookup(field)) {
            return 'lookup';
        }
        else if (this.isTextarea(field)) {
            return 'textarea';
        }
        else if (this.isPassword(field)) {
            return 'password';
        }
        return 'input';
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    isCheckboxGroup(field) {
        const { optionsService, optionsMulti, options } = field;
        return !optionsService && optionsMulti && !!options && options.length <= 3;
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    isCombo(field) {
        const { optionsService } = field;
        return !!optionsService && isTypeof(optionsService, 'string');
    }
    /**
     * @private
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    isCurrencyType(field, type) {
        const { mask, pattern } = field;
        return this.compareTo(type, ThfDynamicFieldType.Currency) && (!mask && !pattern);
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    isLookup(field) {
        const { searchService } = field;
        return !!searchService && isTypeof(searchService, 'string');
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    isMultiselect(field) {
        const { optionsService, optionsMulti, options } = field;
        return !optionsService && optionsMulti && !!options && options.length > 3;
    }
    /**
     * @private
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    isNumberType(field, type) {
        const { mask, pattern } = field;
        return this.compareTo(type, ThfDynamicFieldType.Number) && (!mask && !pattern);
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    isPassword(field) {
        const { secret } = field;
        return secret;
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    isRadioGroup(field) {
        const { optionsMulti, options } = field;
        return !optionsMulti && !!options && options.length <= 3;
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    isSelect(field) {
        const { optionsMulti, options } = field;
        return !optionsMulti && !!options && options.length > 3;
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    isTextarea(field) {
        const { rows } = field;
        return rows && rows >= 3;
    }
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    printError(error) {
        console.error(error);
    }
}
ThfDynamicFormFieldsBaseComponent.propDecorators = {
    fields: [{ type: Input, args: ['t-fields',] }],
    value: [{ type: Input, args: ['t-value',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfDynamicFormFieldsBaseComponent.prototype._fields;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicFormFieldsBaseComponent.prototype._value;
    /** @type {?} */
    ThfDynamicFormFieldsBaseComponent.prototype.visibleFields;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicFormFieldsBaseComponent.prototype.titleCasePipe;
}
//# sourceMappingURL=data:application/json;base64,