/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
/** @type {?} */
const Padding = 24;
/**
 * @abstract
 */
export class ThfChartDynamicTypeComponent {
    constructor() {
        this.onSerieClick = new Subject();
        this.onSerieHover = new Subject();
        this.series = [];
    }
    /**
     * @param {?} chartWrapperElement
     * @param {?} chartHeaderElement
     * @param {?} chartLegendElement
     * @return {?}
     */
    calculateSVGContainerDimensions(chartWrapperElement, chartHeaderElement, chartLegendElement) {
        /** @type {?} */
        const svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - (Padding * 2);
        this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;
        this.centerX = chartWrapperElement / 2;
    }
    /**
     * @return {?}
     */
    calculateTotalValue() {
        this.totalValue = this.series.reduce((/**
         * @param {?} previousValue
         * @param {?} serie
         * @return {?}
         */
        (previousValue, serie) => previousValue + serie.value), 0);
    }
}
ThfChartDynamicTypeComponent.propDecorators = {
    chartBody: [{ type: ViewChild, args: ['chartBody', { static: true },] }],
    svgContainer: [{ type: ViewChild, args: ['svgContainer', { static: true },] }]
};
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ThfChartDynamicTypeComponent.prototype.windowResizeListener;
    /**
     * @type {?}
     * @protected
     */
    ThfChartDynamicTypeComponent.prototype.windowScrollListener;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.centerX;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.chartElementCategory;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.chartElementValue;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.chartHeader;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.chartLegend;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.chartWrapper;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.colors;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.height;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.onSerieClick;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.onSerieHover;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.series;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.svgElement;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.svgHeight;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.target;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.tooltipElement;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.tooltipText;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.totalValue;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.chartBody;
    /** @type {?} */
    ThfChartDynamicTypeComponent.prototype.svgContainer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWNoYXJ0LWR5bmFtaWMtdHlwZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLWNoYXJ0L3RoZi1jaGFydC10eXBlcy90aGYtY2hhcnQtZHluYW1pYy10eXBlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7TUFJekIsT0FBTyxHQUFXLEVBQUU7Ozs7QUFFMUIsTUFBTSxPQUFnQiw0QkFBNEI7SUFBbEQ7UUFhRSxpQkFBWSxHQUErQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3pELGlCQUFZLEdBQStCLElBQUksT0FBTyxFQUFFLENBQUM7UUFDekQsV0FBTSxHQUFlLEVBQUUsQ0FBQztJQXdCMUIsQ0FBQzs7Ozs7OztJQVpDLCtCQUErQixDQUFDLG1CQUEyQixFQUFFLGtCQUEwQixFQUFFLGtCQUEwQjs7Y0FDM0csc0JBQXNCLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxrQkFBa0IsR0FBRyxrQkFBa0IsR0FBRyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFFcEcsSUFBSSxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUM7UUFDMUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsR0FBRyxDQUFDLENBQUM7SUFDekMsQ0FBQzs7OztJQUVELG1CQUFtQjtRQUNqQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTs7Ozs7UUFDbEMsQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLEtBQUssR0FBRSxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7d0JBZEEsU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7MkJBRXZDLFNBQVMsU0FBQyxjQUFjLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOzs7Ozs7O0lBdkIzQyw0REFBMkM7Ozs7O0lBQzNDLDREQUEyQzs7SUFFM0MsK0NBQWdCOztJQUNoQiw0REFBMEI7O0lBQzFCLHlEQUF1Qjs7SUFDdkIsbURBQW9COztJQUNwQixtREFBb0I7O0lBQ3BCLG9EQUFxQjs7SUFDckIsOENBQXNCOztJQUN0Qiw4Q0FBZTs7SUFDZixvREFBeUQ7O0lBQ3pELG9EQUF5RDs7SUFDekQsOENBQXdCOztJQUN4QixrREFBOEI7O0lBQzlCLGlEQUFrQjs7SUFDbEIsOENBQXVDOztJQUN2QyxzREFBa0M7O0lBQ2xDLG1EQUFvQjs7SUFDcEIsa0RBQW1COztJQUVuQixpREFBZ0U7O0lBRWhFLG9EQUFzRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFRoZlBpZUNoYXJ0U2VyaWVzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy90aGYtY2hhcnQtc2VyaWVzLmludGVyZmFjZSc7XG5cbmNvbnN0IFBhZGRpbmc6IG51bWJlciA9IDI0O1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGhmQ2hhcnREeW5hbWljVHlwZUNvbXBvbmVudCB7XG5cbiAgcHJvdGVjdGVkIHdpbmRvd1Jlc2l6ZUxpc3RlbmVyOiAoKSA9PiB2b2lkO1xuICBwcm90ZWN0ZWQgd2luZG93U2Nyb2xsTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG5cbiAgY2VudGVyWDogbnVtYmVyO1xuICBjaGFydEVsZW1lbnRDYXRlZ29yeTogYW55O1xuICBjaGFydEVsZW1lbnRWYWx1ZTogYW55O1xuICBjaGFydEhlYWRlcjogbnVtYmVyO1xuICBjaGFydExlZ2VuZDogbnVtYmVyO1xuICBjaGFydFdyYXBwZXI6IG51bWJlcjtcbiAgY29sb3JzOiBBcnJheTxzdHJpbmc+O1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgb25TZXJpZUNsaWNrOiBTdWJqZWN0PFRoZlBpZUNoYXJ0U2VyaWVzPiA9IG5ldyBTdWJqZWN0KCk7XG4gIG9uU2VyaWVIb3ZlcjogU3ViamVjdDxUaGZQaWVDaGFydFNlcmllcz4gPSBuZXcgU3ViamVjdCgpO1xuICBzZXJpZXM6IEFycmF5PGFueT4gPSBbXTtcbiAgc3ZnRWxlbWVudDogSFRNTE9iamVjdEVsZW1lbnQ7XG4gIHN2Z0hlaWdodDogbnVtYmVyO1xuICB0YXJnZXQ6IEhUTUxJbnB1dEVsZW1lbnQgJiBFdmVudFRhcmdldDtcbiAgdG9vbHRpcEVsZW1lbnQ6IEhUTUxPYmplY3RFbGVtZW50O1xuICB0b29sdGlwVGV4dDogc3RyaW5nO1xuICB0b3RhbFZhbHVlOiBudW1iZXI7XG5cbiAgQFZpZXdDaGlsZCgnY2hhcnRCb2R5JywgeyBzdGF0aWM6IHRydWUgfSkgY2hhcnRCb2R5OiBFbGVtZW50UmVmO1xuXG4gIEBWaWV3Q2hpbGQoJ3N2Z0NvbnRhaW5lcicsIHsgc3RhdGljOiB0cnVlIH0pIHN2Z0NvbnRhaW5lcjogRWxlbWVudFJlZjtcblxuICBjYWxjdWxhdGVTVkdDb250YWluZXJEaW1lbnNpb25zKGNoYXJ0V3JhcHBlckVsZW1lbnQ6IG51bWJlciwgY2hhcnRIZWFkZXJFbGVtZW50OiBudW1iZXIsIGNoYXJ0TGVnZW5kRWxlbWVudDogbnVtYmVyKSB7XG4gICAgY29uc3Qgc3ZnQ29udGFpbmVySGVpZ2h0Q2FsYyA9IHRoaXMuaGVpZ2h0IC0gY2hhcnRIZWFkZXJFbGVtZW50IC0gY2hhcnRMZWdlbmRFbGVtZW50IC0gKFBhZGRpbmcgKiAyKTtcblxuICAgIHRoaXMuc3ZnSGVpZ2h0ID0gc3ZnQ29udGFpbmVySGVpZ2h0Q2FsYyA8PSAwID8gMCA6IHN2Z0NvbnRhaW5lckhlaWdodENhbGM7XG4gICAgdGhpcy5jZW50ZXJYID0gY2hhcnRXcmFwcGVyRWxlbWVudCAvIDI7XG4gIH1cblxuICBjYWxjdWxhdGVUb3RhbFZhbHVlKCkge1xuICAgIHRoaXMudG90YWxWYWx1ZSA9IHRoaXMuc2VyaWVzLnJlZHVjZShcbiAgICAgIChwcmV2aW91c1ZhbHVlLCBzZXJpZSkgPT4gcHJldmlvdXNWYWx1ZSArIHNlcmllLnZhbHVlLCAwKTtcbiAgfVxuXG59XG4iXX0=