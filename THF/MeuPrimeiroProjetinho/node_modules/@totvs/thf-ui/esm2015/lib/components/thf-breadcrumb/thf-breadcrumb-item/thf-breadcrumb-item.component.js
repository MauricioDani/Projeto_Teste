/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que renderiza cada item do thf-breadcrumb.
 */
export class ThfBreadcrumbItemComponent {
    constructor() {
        // Especifica se item Ã© o link ativo.
        this.itemActive = false;
    }
}
ThfBreadcrumbItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-breadcrumb-item',
                template: "<li *ngIf=\"!itemActive\"\n  [class.thf-breadcrumb-item]=\"link || action\"\n  [class.thf-breadcrumb-item-unclickable]=\"!link && !action\">\n\n  <a *ngIf=\"link\" [routerLink]=\"link\">\n    <label class=\"thf-breadcrumb-label\">{{ label }}</label>\n    <div class=\"thf-breadcrumb-arrow\"></div>\n  </a>\n\n  <a *ngIf=\"!link && action\" (click)=\"action(label)\">\n    <label class=\"thf-breadcrumb-label\">{{ label }}</label>\n    <div class=\"thf-breadcrumb-arrow\"></div>\n  </a>\n\n  <a *ngIf=\"!link && !action\">\n    <label class=\"thf-breadcrumb-label\">{{ label }}</label>\n    <div class=\"thf-breadcrumb-arrow\"></div>\n  </a>\n</li>\n\n<li *ngIf=\"itemActive\" class=\"thf-breadcrumb-item-unclickable\">\n  <label class=\"thf-breadcrumb-label\">{{ label }}</label>\n</li>\n"
            }] }
];
ThfBreadcrumbItemComponent.propDecorators = {
    action: [{ type: Input, args: ['t-action',] }],
    label: [{ type: Input, args: ['t-label',] }],
    link: [{ type: Input, args: ['t-link',] }],
    itemActive: [{ type: Input, args: ['t-item-active',] }]
};
if (false) {
    /** @type {?} */
    ThfBreadcrumbItemComponent.prototype.action;
    /** @type {?} */
    ThfBreadcrumbItemComponent.prototype.label;
    /** @type {?} */
    ThfBreadcrumbItemComponent.prototype.link;
    /** @type {?} */
    ThfBreadcrumbItemComponent.prototype.itemActive;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWJyZWFkY3J1bWItaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLWJyZWFkY3J1bWIvdGhmLWJyZWFkY3J1bWItaXRlbS90aGYtYnJlYWRjcnVtYi1pdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0FBYWpELE1BQU0sT0FBTywwQkFBMEI7SUFKdkM7O1FBZ0IwQixlQUFVLEdBQVksS0FBSyxDQUFDO0lBQ3RELENBQUM7OztZQWpCQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsZ3lCQUFtRDthQUNwRDs7O3FCQUlFLEtBQUssU0FBQyxVQUFVO29CQUdoQixLQUFLLFNBQUMsU0FBUzttQkFHZixLQUFLLFNBQUMsUUFBUTt5QkFHZCxLQUFLLFNBQUMsZUFBZTs7OztJQVR0Qiw0Q0FBb0M7O0lBR3BDLDJDQUFnQzs7SUFHaEMsMENBQThCOztJQUc5QixnREFBb0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSBxdWUgcmVuZGVyaXphIGNhZGEgaXRlbSBkbyB0aGYtYnJlYWRjcnVtYi5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGhmLWJyZWFkY3J1bWItaXRlbScsXG4gIHRlbXBsYXRlVXJsOiAnLi90aGYtYnJlYWRjcnVtYi1pdGVtLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUaGZCcmVhZGNydW1iSXRlbUNvbXBvbmVudCB7XG5cbiAgLy8gQcOnw6NvIHF1ZSBzZXLDoSBleGVjdXRhZGEgYW8gY2xpY2FyIHNvYnJlIG8gaXRlbS5cbiAgQElucHV0KCd0LWFjdGlvbicpIGFjdGlvbjogRnVuY3Rpb247XG5cbiAgLy8gTGFiZWwgZG8gaXRlbS5cbiAgQElucHV0KCd0LWxhYmVsJykgbGFiZWw6IHN0cmluZztcblxuICAvLyBMaW5rIGRvIGl0ZW0uXG4gIEBJbnB1dCgndC1saW5rJykgbGluazogc3RyaW5nO1xuXG4gIC8vIEVzcGVjaWZpY2Egc2UgaXRlbSDDqSBvIGxpbmsgYXRpdm8uXG4gIEBJbnB1dCgndC1pdGVtLWFjdGl2ZScpIGl0ZW1BY3RpdmU6IGJvb2xlYW4gPSBmYWxzZTtcbn1cbiJdfQ==