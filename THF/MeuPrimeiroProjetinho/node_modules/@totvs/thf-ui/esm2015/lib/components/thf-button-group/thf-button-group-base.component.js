/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { ThfButtonGroupToggle } from './thf-button-group-toggle.enum';
/** @type {?} */
const THF_TOGGLE_TYPE_DEFAULT = 'none';
/**
 * \@description
 *
 * O componente `thf-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `thf-button-group` com apenas 1 ação, para isso utilize o `thf-button`.
 * - Procure utilizar no máximo 3 ações para cada `thf-button-group`.
 *
 * > As recomendações do `thf-button` também valem para o `thf-button-group`.
 */
export class ThfButtonGroupBaseComponent {
    constructor() {
        this._small = false;
        this._toggle = THF_TOGGLE_TYPE_DEFAULT;
        /**
         * Lista de botões.
         */
        this.buttons = [];
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Torna o grupo de botões com tamanho minificado.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set small(value) {
        this._small = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get small() {
        return this._small;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define o modo de seleção de botões.
     *
     * > Veja os valores válidos no *enum* `ThfMultiselectFilterMode`.
     *
     * \@default `none`
     * @param {?} value
     * @return {?}
     */
    set toggle(value) {
        this._toggle = ((/** @type {?} */ (Object))).values(ThfButtonGroupToggle).includes(value) ? value : THF_TOGGLE_TYPE_DEFAULT;
        this.checkSelecteds(this._toggle);
    }
    /**
     * @return {?}
     */
    get toggle() {
        return this._toggle;
    }
    /**
     * @param {?} buttonClicked
     * @param {?} buttonIndex
     * @return {?}
     */
    onButtonClick(buttonClicked, buttonIndex) {
        if (this.toggle === ThfButtonGroupToggle.Single) {
            this.buttons.forEach((/**
             * @param {?} button
             * @param {?} index
             * @return {?}
             */
            (button, index) => button.selected = index === buttonIndex ? !buttonClicked.selected : false));
        }
        else if (this.toggle === ThfButtonGroupToggle.Multiple) {
            buttonClicked.selected = !buttonClicked.selected;
        }
    }
    /**
     * @private
     * @param {?} toggleMode
     * @return {?}
     */
    checkSelecteds(toggleMode) {
        if (toggleMode === ThfButtonGroupToggle.None) {
            this.deselectAllButtons();
        }
        else if (toggleMode === ThfButtonGroupToggle.Single) {
            /** @type {?} */
            const hasMoreOneSelected = this.buttons.filter((/**
             * @param {?} button
             * @return {?}
             */
            button => button.selected)).length > 1;
            if (hasMoreOneSelected) {
                this.deselectAllButtons();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    deselectAllButtons() {
        this.buttons.forEach((/**
         * @param {?} button
         * @return {?}
         */
        button => button.selected = false));
    }
}
ThfButtonGroupBaseComponent.propDecorators = {
    buttons: [{ type: Input, args: ['t-buttons',] }],
    small: [{ type: Input, args: ['t-small',] }],
    toggle: [{ type: Input, args: ['t-toggle',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfButtonGroupBaseComponent.prototype._small;
    /**
     * @type {?}
     * @private
     */
    ThfButtonGroupBaseComponent.prototype._toggle;
    /**
     * Lista de botões.
     * @type {?}
     */
    ThfButtonGroupBaseComponent.prototype.buttons;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWJ1dHRvbi1ncm91cC1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtYnV0dG9uLWdyb3VwL3RoZi1idXR0b24tZ3JvdXAtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFcEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7O01BRWhFLHVCQUF1QixHQUFHLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJ0QyxNQUFNLE9BQU8sMkJBQTJCO0lBQXhDO1FBRVUsV0FBTSxHQUFhLEtBQUssQ0FBQztRQUN6QixZQUFPLEdBQVksdUJBQXVCLENBQUM7Ozs7UUFHL0IsWUFBTyxHQUE4QixFQUFFLENBQUM7SUFnRTlELENBQUM7Ozs7Ozs7Ozs7OztJQXJEQyxJQUFzQixLQUFLLENBQUMsS0FBYztRQUN4QyxJQUFJLENBQUMsTUFBTSxHQUFHLG1CQUFLLEtBQUssRUFBQSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDOzs7O0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7Ozs7Ozs7Ozs7Ozs7O0lBYUQsSUFBdUIsTUFBTSxDQUFDLEtBQWE7UUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLG1CQUFLLE1BQU0sRUFBQSxDQUFDLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDO1FBRTVHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Ozs7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7Ozs7O0lBRUQsYUFBYSxDQUFDLGFBQWlDLEVBQUUsV0FBbUI7UUFDbEUsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLG9CQUFvQixDQUFDLE1BQU0sRUFBRTtZQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU87Ozs7O1lBQUMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FDckMsTUFBTSxDQUFDLFFBQVEsR0FBRyxLQUFLLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBQyxDQUFDO1NBQzlFO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLG9CQUFvQixDQUFDLFFBQVEsRUFBRTtZQUN4RCxhQUFhLENBQUMsUUFBUSxHQUFHLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztTQUNsRDtJQUNILENBQUM7Ozs7OztJQUVPLGNBQWMsQ0FBQyxVQUFrQjtRQUN2QyxJQUFJLFVBQVUsS0FBSyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUU7WUFDNUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7U0FDM0I7YUFBTSxJQUFJLFVBQVUsS0FBSyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUU7O2tCQUMvQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU07Ozs7WUFBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQztZQUNwRixJQUFJLGtCQUFrQixFQUFFO2dCQUN0QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQzthQUMzQjtTQUNGO0lBQ0gsQ0FBQzs7Ozs7SUFFTyxrQkFBa0I7UUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPOzs7O1FBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLEtBQUssRUFBQyxDQUFDO0lBQzFELENBQUM7OztzQkE5REEsS0FBSyxTQUFDLFdBQVc7b0JBV2pCLEtBQUssU0FBQyxTQUFTO3FCQW1CZixLQUFLLFNBQUMsVUFBVTs7Ozs7OztJQWxDakIsNkNBQWlDOzs7OztJQUNqQyw4Q0FBbUQ7Ozs7O0lBR25ELDhDQUE0RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0Jvb2xlYW4gfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcbmltcG9ydCB7IFRoZkJ1dHRvbkdyb3VwSXRlbSB9IGZyb20gJy4vdGhmLWJ1dHRvbi1ncm91cC1pdGVtLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUaGZCdXR0b25Hcm91cFRvZ2dsZSB9IGZyb20gJy4vdGhmLWJ1dHRvbi1ncm91cC10b2dnbGUuZW51bSc7XG5cbmNvbnN0IFRIRl9UT0dHTEVfVFlQRV9ERUZBVUxUID0gJ25vbmUnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgdGhmLWJ1dHRvbi1ncm91cGAgw6kgZm9ybWFkbyBwb3IgdW0gY29uanVudG8gZGUgYm90w7VlcyBkaXN0cmlidcOtZG9zIGhvcml6b250YWxtZW50ZS5cbiAqIENhZGEgYm90w6NvIGRvIGdydXBvIMOpIHRyYXRhZG8gZGUgZm9ybWEgaW5kaXZpZHVhbCwgcmVjZWJlbmRvIGFzc2ltIHVtIHLDs3R1bG8sIHVtYSBhw6fDo28gYmVtIGNvbW8gc2UgZGV2ZXLDoSBlc3RhciBoYWJpbGl0YWRvIG91IG7Do28uXG4gKlxuICogRXN0ZSBjb21wb25lbnRlIGFsw6ltIGRlIHNlcnZpciBjb21vIHVtIGFncnVwYWRvciBkZSBib3TDtWVzIHBhcmEgYcOnw6NvLCB0YW1iw6ltIHBlcm1pdGUgcXVlIHNlamFtIHV0aWxpemFkb3NcbiAqIHBhcmEgc2VsZcOnw7VlcyBtdWx0aXBsYXMgZSDDum5pY2FzLlxuICpcbiAqIE8gZ3J1cG8gZGUgYm90w7VlcyBkZXZlIHNlciB1dGlsaXphZG8gcGFyYSBvcmdhbml6YXIgYXMgYcOnw7VlcyBkZSBtYW5laXJhIHVuaWZvcm1lIGUgdHJhbnNtaXRpciBhIGlkZWlhIGRlIHF1ZSBvcyBib3TDtWVzIGZhemVtXG4gKiBwYXJ0ZSBkZSB1bSBtZXNtbyBjb250ZXh0by5cbiAqXG4gKiAjIyMjIEJvYXMgcHLDoXRpY2FzXG4gKlxuICogLSBFdml0ZSB1c2FyIG8gYHRoZi1idXR0b24tZ3JvdXBgIGNvbSBhcGVuYXMgMSBhw6fDo28sIHBhcmEgaXNzbyB1dGlsaXplIG8gYHRoZi1idXR0b25gLlxuICogLSBQcm9jdXJlIHV0aWxpemFyIG5vIG3DoXhpbW8gMyBhw6fDtWVzIHBhcmEgY2FkYSBgdGhmLWJ1dHRvbi1ncm91cGAuXG4gKlxuICogPiBBcyByZWNvbWVuZGHDp8O1ZXMgZG8gYHRoZi1idXR0b25gIHRhbWLDqW0gdmFsZW0gcGFyYSBvIGB0aGYtYnV0dG9uLWdyb3VwYC5cbiAqL1xuZXhwb3J0IGNsYXNzIFRoZkJ1dHRvbkdyb3VwQmFzZUNvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfc21hbGw/OiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX3RvZ2dsZT86IHN0cmluZyA9IFRIRl9UT0dHTEVfVFlQRV9ERUZBVUxUO1xuXG4gIC8qKiBMaXN0YSBkZSBib3TDtWVzLiAqL1xuICBASW5wdXQoJ3QtYnV0dG9ucycpIGJ1dHRvbnM6IEFycmF5PFRoZkJ1dHRvbkdyb3VwSXRlbT4gPSBbXTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBUb3JuYSBvIGdydXBvIGRlIGJvdMO1ZXMgY29tIHRhbWFuaG8gbWluaWZpY2Fkby5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCd0LXNtYWxsJykgc2V0IHNtYWxsKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc21hbGwgPSA8YW55PnZhbHVlID09PSAnJyA/IHRydWUgOiBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBzbWFsbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc21hbGw7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgbyBtb2RvIGRlIHNlbGXDp8OjbyBkZSBib3TDtWVzLlxuICAgKlxuICAgKiA+IFZlamEgb3MgdmFsb3JlcyB2w6FsaWRvcyBubyAqZW51bSogYFRoZk11bHRpc2VsZWN0RmlsdGVyTW9kZWAuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBub25lYFxuICAgKi9cbiAgQElucHV0KCd0LXRvZ2dsZScpIHNldCB0b2dnbGUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3RvZ2dsZSA9ICg8YW55Pk9iamVjdCkudmFsdWVzKFRoZkJ1dHRvbkdyb3VwVG9nZ2xlKS5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IFRIRl9UT0dHTEVfVFlQRV9ERUZBVUxUO1xuXG4gICAgdGhpcy5jaGVja1NlbGVjdGVkcyh0aGlzLl90b2dnbGUpO1xuICB9XG5cbiAgZ2V0IHRvZ2dsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90b2dnbGU7XG4gIH1cblxuICBvbkJ1dHRvbkNsaWNrKGJ1dHRvbkNsaWNrZWQ6IFRoZkJ1dHRvbkdyb3VwSXRlbSwgYnV0dG9uSW5kZXg6IG51bWJlcikge1xuICAgIGlmICh0aGlzLnRvZ2dsZSA9PT0gVGhmQnV0dG9uR3JvdXBUb2dnbGUuU2luZ2xlKSB7XG4gICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uLCBpbmRleCkgPT5cbiAgICAgICAgYnV0dG9uLnNlbGVjdGVkID0gaW5kZXggPT09IGJ1dHRvbkluZGV4ID8gIWJ1dHRvbkNsaWNrZWQuc2VsZWN0ZWQgOiBmYWxzZSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnRvZ2dsZSA9PT0gVGhmQnV0dG9uR3JvdXBUb2dnbGUuTXVsdGlwbGUpIHtcbiAgICAgIGJ1dHRvbkNsaWNrZWQuc2VsZWN0ZWQgPSAhYnV0dG9uQ2xpY2tlZC5zZWxlY3RlZDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNoZWNrU2VsZWN0ZWRzKHRvZ2dsZU1vZGU6IHN0cmluZykge1xuICAgIGlmICh0b2dnbGVNb2RlID09PSBUaGZCdXR0b25Hcm91cFRvZ2dsZS5Ob25lKSB7XG4gICAgICB0aGlzLmRlc2VsZWN0QWxsQnV0dG9ucygpO1xuICAgIH0gZWxzZSBpZiAodG9nZ2xlTW9kZSA9PT0gVGhmQnV0dG9uR3JvdXBUb2dnbGUuU2luZ2xlKSB7XG4gICAgICBjb25zdCBoYXNNb3JlT25lU2VsZWN0ZWQgPSB0aGlzLmJ1dHRvbnMuZmlsdGVyKGJ1dHRvbiA9PiBidXR0b24uc2VsZWN0ZWQpLmxlbmd0aCA+IDE7XG4gICAgICBpZiAoaGFzTW9yZU9uZVNlbGVjdGVkKSB7XG4gICAgICAgIHRoaXMuZGVzZWxlY3RBbGxCdXR0b25zKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkZXNlbGVjdEFsbEJ1dHRvbnMoKSB7XG4gICAgdGhpcy5idXR0b25zLmZvckVhY2goYnV0dG9uID0+IGJ1dHRvbi5zZWxlY3RlZCA9IGZhbHNlKTtcbiAgfVxuXG59XG4iXX0=