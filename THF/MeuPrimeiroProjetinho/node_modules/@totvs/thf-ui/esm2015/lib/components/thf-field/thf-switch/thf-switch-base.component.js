/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { ThfSwitchLabelPosition } from './thf-switch-label-position.enum';
/**
 * \@description
 *
 * O componente `thf-switch` é um [checkbox](/documentation/thf-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
 * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
 *
 * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.
 *
 * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
 * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
 *
 * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
 */
export class ThfSwitchBaseComponent {
    constructor() {
        this._disabled = false;
        this.switchValue = false;
        /**
         * Texto exibido quando o valor do componente for `true`.
         *
         * \@default `true`
         */
        this.labelOn = 'true';
        /**
         * Texto exibido quando o valor do componente for `false`.
         *
         * \@default `false`
         */
        this.labelOff = 'false';
        /**
         * \@optional
         *
         * \@description
         *
         * Posição de exibição do rótulo.
         *
         * > Por padrão exibe à direita.
         */
        this.labelPosition = ThfSwitchLabelPosition.Right;
        /**
         * Evento disparado ao alterar valor do campo.
         */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
    }
    /**
     * @param {?} label
     * @return {?}
     */
    set setLabelOn(label) {
        this.labelOn = label || 'true';
    }
    /**
     * @param {?} label
     * @return {?}
     */
    set setLabelOff(label) {
        this.labelOff = label || 'false';
    }
    /**
     * @param {?} position
     * @return {?}
     */
    set setLabelPosition(position) {
        this.labelPosition = (position in ThfSwitchLabelPosition) ? parseInt((/** @type {?} */ (position)), 10) : ThfSwitchLabelPosition.Right;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica se o campo será desabilitado.
     *
     * \@default `false`
     * @param {?} disabled
     * @return {?}
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    changeValue(value) {
        if (this.switchValue !== value) {
            this.switchValue = value;
            if (this.propagateChange) {
                this.propagateChange(value);
            }
            else {
                this.ngModelChange.emit(value);
            }
            this.change.emit(this.switchValue);
        }
    }
    /**
     * @return {?}
     */
    eventClick() {
        if (!this.disabled) {
            this.changeValue(!this.switchValue);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.switchValue) {
            this.switchValue = !!value;
        }
    }
}
ThfSwitchBaseComponent.propDecorators = {
    name: [{ type: Input, args: ['name',] }],
    label: [{ type: Input, args: ['t-label',] }],
    help: [{ type: Input, args: ['t-help',] }],
    setLabelOn: [{ type: Input, args: ['t-label-on',] }],
    setLabelOff: [{ type: Input, args: ['t-label-off',] }],
    setLabelPosition: [{ type: Input, args: ['t-label-position',] }],
    disabled: [{ type: Input, args: ['t-disabled',] }],
    change: [{ type: Output, args: ['t-change',] }],
    ngModelChange: [{ type: Output, args: ['ngModelChange',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfSwitchBaseComponent.prototype._disabled;
    /** @type {?} */
    ThfSwitchBaseComponent.prototype.propagateChange;
    /** @type {?} */
    ThfSwitchBaseComponent.prototype.switchValue;
    /**
     * Nome do componente.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.name;
    /**
     * Rótulo exibido pelo componente.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.help;
    /**
     * Texto exibido quando o valor do componente for `true`.
     *
     * \@default `true`
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.labelOn;
    /**
     * Texto exibido quando o valor do componente for `false`.
     *
     * \@default `false`
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.labelOff;
    /**
     * \@optional
     *
     * \@description
     *
     * Posição de exibição do rótulo.
     *
     * > Por padrão exibe à direita.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.labelPosition;
    /**
     * Evento disparado ao alterar valor do campo.
     * @type {?}
     */
    ThfSwitchBaseComponent.prototype.change;
    /** @type {?} */
    ThfSwitchBaseComponent.prototype.ngModelChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXN3aXRjaC1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtZmllbGQvdGhmLXN3aXRjaC90aGYtc3dpdGNoLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdkQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7Ozs7Ozs7Ozs7Ozs7O0FBZTFFLE1BQU0sT0FBTyxzQkFBc0I7SUFBbkM7UUFFVSxjQUFTLEdBQWEsS0FBSyxDQUFDO1FBR3BDLGdCQUFXLEdBQVksS0FBSyxDQUFDOzs7Ozs7UUFnQjdCLFlBQU8sR0FBWSxNQUFNLENBQUM7Ozs7OztRQVUxQixhQUFRLEdBQVksT0FBTyxDQUFDOzs7Ozs7Ozs7O1FBYzVCLGtCQUFhLEdBQTRCLHNCQUFzQixDQUFDLEtBQUssQ0FBQzs7OztRQXVCbEQsV0FBTSxHQUF1QixJQUFJLFlBQVksRUFBTyxDQUFDOztRQUdoRCxrQkFBYSxHQUF1QixJQUFJLFlBQVksRUFBTyxDQUFDO0lBaUN2RixDQUFDOzs7OztJQWxGQyxJQUF5QixVQUFVLENBQUMsS0FBYTtRQUMvQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssSUFBSSxNQUFNLENBQUM7SUFDakMsQ0FBQzs7Ozs7SUFRRCxJQUEwQixXQUFXLENBQUMsS0FBYTtRQUNqRCxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssSUFBSSxPQUFPLENBQUM7SUFDbkMsQ0FBQzs7Ozs7SUFZRCxJQUErQixnQkFBZ0IsQ0FBQyxRQUFnQztRQUM5RSxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsUUFBUSxJQUFJLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxtQkFBSyxRQUFRLEVBQUEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDO0lBQ3pILENBQUM7Ozs7Ozs7Ozs7OztJQVdELElBQXlCLFFBQVEsQ0FBQyxRQUFpQjtRQUNqRCxJQUFJLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Ozs7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFRRCxXQUFXLENBQUMsS0FBVTtRQUNwQixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssS0FBSyxFQUFFO1lBQzlCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBRXpCLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM3QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNoQztZQUNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUM7Ozs7SUFFRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNyQztJQUNILENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsRUFBTztRQUN0QixJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7OztJQUVELGlCQUFpQixDQUFDLEVBQU8sSUFBVSxDQUFDOzs7OztJQUVwQyxVQUFVLENBQUMsS0FBVTtRQUNuQixJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQzlCLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztTQUM1QjtJQUNILENBQUM7OzttQkE5RkEsS0FBSyxTQUFDLE1BQU07b0JBR1osS0FBSyxTQUFDLFNBQVM7bUJBR2YsS0FBSyxTQUFDLFFBQVE7eUJBUWQsS0FBSyxTQUFDLFlBQVk7MEJBVWxCLEtBQUssU0FBQyxhQUFhOytCQWNuQixLQUFLLFNBQUMsa0JBQWtCO3VCQWF4QixLQUFLLFNBQUMsWUFBWTtxQkFTbEIsTUFBTSxTQUFDLFVBQVU7NEJBR2pCLE1BQU0sU0FBQyxlQUFlOzs7Ozs7O0lBckV2QiwyQ0FBb0M7O0lBRXBDLGlEQUFxQjs7SUFDckIsNkNBQTZCOzs7OztJQUc3QixzQ0FBNEI7Ozs7O0lBRzVCLHVDQUFpQzs7Ozs7SUFHakMsc0NBQStCOzs7Ozs7O0lBTy9CLHlDQUEwQjs7Ozs7OztJQVUxQiwwQ0FBNEI7Ozs7Ozs7Ozs7O0lBYzVCLCtDQUFzRTs7Ozs7SUF1QnRFLHdDQUF5RTs7SUFHekUsK0NBQXFGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBUaGZTd2l0Y2hMYWJlbFBvc2l0aW9uIH0gZnJvbSAnLi90aGYtc3dpdGNoLWxhYmVsLXBvc2l0aW9uLmVudW0nO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgdGhmLXN3aXRjaGAgw6kgdW0gW2NoZWNrYm94XSgvZG9jdW1lbnRhdGlvbi90aGYtY2hlY2tib3gtZ3JvdXApIG1haXMgaW50dWl0aXZvLCBwb2lzIGZheiBhbmFsb2dpYSBhIHVtIGludGVycnVwdG9yLlxuICogRGV2ZSBzZXIgdXNhZG8gcXVhbmRvIGRlc2VqYS1zZSB0cmFuc21pdGlyIGEgaWRlaWEgZGUgbGlnYXIgLyBkZXNsaWdhciB1bWEgZnVuY2lvbmFsaWRhZGUgZXNwZWPDrWZpY2EuXG4gKlxuICogUG9kZS1zZSBsaWdhciBvdSBkZWxpZ2FyIG8gYm90w6NvIHV0aWxpemFuZG8gYSB0ZWNsYSBkZSBlc3Bhw6dvIG91IG8gY2xpcXVlIGRvIG1vdXNlLlxuICpcbiAqIE8gdGV4dG8gZXhpYmlkbyBwb2RlIHNlciBhbHRlcmFkbyBkZSBhY29yZG8gY29tIG8gdmFsb3Igc2V0YWRvIGF1bWVudGFuZG8gYXMgcG9zc2liaWxpZGFkZXMgZGUgdXNvIGRvIGNvbXBvbmVudGUsXG4gKiBwb3J0YW50bywgcmVjb21lbmRhLXNlIGluZm9ybWFyIHRleHRvcyBxdWUgY29udGV4dHVhbGl6ZW0gc2V1IHVzbyBwYXJhIHF1ZSBmYWNpbGl0ZSBhIGNvbXByZWVuc8OjbyBkbyB1c3XDoXJpby5cbiAqXG4gKiA+IE8gY29tcG9uZW50ZSBuw6NvIGFsdGVyYSBvIHZhbG9yIGluY2lhbCBpbmZvcm1hZG8gbm8gKm1vZGVsKiwgcG9ydGFudG8gaW5kaWNhLXNlIGluaWNpYWxpemEtbG8gY2FzbyB0ZXIgbmVjZXNzaWRhZGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBUaGZTd2l0Y2hCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuXG4gIHByaXZhdGUgX2Rpc2FibGVkPzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByb3BhZ2F0ZUNoYW5nZTogYW55O1xuICBzd2l0Y2hWYWx1ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiBOb21lIGRvIGNvbXBvbmVudGUuICovXG4gIEBJbnB1dCgnbmFtZScpIG5hbWU6IHN0cmluZztcblxuICAvKiogUsOzdHVsbyBleGliaWRvIHBlbG8gY29tcG9uZW50ZS4gKi9cbiAgQElucHV0KCd0LWxhYmVsJykgbGFiZWw/OiBzdHJpbmc7XG5cbiAgLyoqIFRleHRvIGRlIGFwb2lvIHBhcmEgbyBjYW1wby4gKi9cbiAgQElucHV0KCd0LWhlbHAnKSBoZWxwPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUZXh0byBleGliaWRvIHF1YW5kbyBvIHZhbG9yIGRvIGNvbXBvbmVudGUgZm9yIGB0cnVlYC5cbiAgICpcbiAgICogQGRlZmF1bHQgYHRydWVgXG4gICAqL1xuICBsYWJlbE9uPzogc3RyaW5nID0gJ3RydWUnO1xuICBASW5wdXQoJ3QtbGFiZWwtb24nKSBzZXQgc2V0TGFiZWxPbihsYWJlbDogc3RyaW5nKSB7XG4gICAgdGhpcy5sYWJlbE9uID0gbGFiZWwgfHwgJ3RydWUnO1xuICB9XG5cbiAgLyoqXG4gICAqIFRleHRvIGV4aWJpZG8gcXVhbmRvIG8gdmFsb3IgZG8gY29tcG9uZW50ZSBmb3IgYGZhbHNlYC5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgbGFiZWxPZmY/OiBzdHJpbmcgPSAnZmFsc2UnO1xuICBASW5wdXQoJ3QtbGFiZWwtb2ZmJykgc2V0IHNldExhYmVsT2ZmKGxhYmVsOiBzdHJpbmcpIHtcbiAgICB0aGlzLmxhYmVsT2ZmID0gbGFiZWwgfHwgJ2ZhbHNlJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFBvc2nDp8OjbyBkZSBleGliacOnw6NvIGRvIHLDs3R1bG8uXG4gICAqXG4gICAqID4gUG9yIHBhZHLDo28gZXhpYmUgw6AgZGlyZWl0YS5cbiAgICovXG4gIGxhYmVsUG9zaXRpb24/OiBUaGZTd2l0Y2hMYWJlbFBvc2l0aW9uID0gVGhmU3dpdGNoTGFiZWxQb3NpdGlvbi5SaWdodDtcbiAgQElucHV0KCd0LWxhYmVsLXBvc2l0aW9uJykgc2V0IHNldExhYmVsUG9zaXRpb24ocG9zaXRpb246IFRoZlN3aXRjaExhYmVsUG9zaXRpb24pIHtcbiAgICB0aGlzLmxhYmVsUG9zaXRpb24gPSAocG9zaXRpb24gaW4gVGhmU3dpdGNoTGFiZWxQb3NpdGlvbikgPyBwYXJzZUludCg8YW55PnBvc2l0aW9uLCAxMCkgOiBUaGZTd2l0Y2hMYWJlbFBvc2l0aW9uLlJpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogSW5kaWNhIHNlIG8gY2FtcG8gc2Vyw6EgZGVzYWJpbGl0YWRvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3QtZGlzYWJsZWQnKSBzZXQgZGlzYWJsZWQoZGlzYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IGNvbnZlcnRUb0Jvb2xlYW4oZGlzYWJsZWQpO1xuICB9XG5cbiAgZ2V0IGRpc2FibGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuXG4gIC8qKiBFdmVudG8gZGlzcGFyYWRvIGFvIGFsdGVyYXIgdmFsb3IgZG8gY2FtcG8uICovXG4gIEBPdXRwdXQoJ3QtY2hhbmdlJykgY2hhbmdlPzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAvLyBGdW7Dp8OjbyBwYXJhIGF0dWFsaXphciBvIG5nTW9kZWwgZG8gY29tcG9uZW50ZSwgbmVjZXNzw6FyaW8gcXVhbmRvIG7Do28gZm9yIHV0aWxpemFkbyBkZW50cm8gZGEgdGFnIGZvcm0uXG4gIEBPdXRwdXQoJ25nTW9kZWxDaGFuZ2UnKSBuZ01vZGVsQ2hhbmdlPzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjaGFuZ2VWYWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgaWYgKHRoaXMuc3dpdGNoVmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLnN3aXRjaFZhbHVlID0gdmFsdWU7XG5cbiAgICAgIGlmICh0aGlzLnByb3BhZ2F0ZUNoYW5nZSkge1xuICAgICAgICB0aGlzLnByb3BhZ2F0ZUNoYW5nZSh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm5nTW9kZWxDaGFuZ2UuZW1pdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLmNoYW5nZS5lbWl0KHRoaXMuc3dpdGNoVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGV2ZW50Q2xpY2soKSB7XG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmNoYW5nZVZhbHVlKCF0aGlzLnN3aXRjaFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnByb3BhZ2F0ZUNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQgeyB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLnN3aXRjaFZhbHVlKSB7XG4gICAgICB0aGlzLnN3aXRjaFZhbHVlID0gISF2YWx1ZTtcbiAgICB9XG4gIH1cblxufVxuIl19