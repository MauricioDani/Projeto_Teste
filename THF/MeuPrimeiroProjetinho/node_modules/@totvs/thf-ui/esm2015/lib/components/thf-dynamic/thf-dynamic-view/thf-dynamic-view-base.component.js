/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToBoolean, isTypeof } from '../../../utils/util';
import { getGridColumnsClasses, isVisibleField } from '../thf-dynamic.util';
/**
 *
 * \@description
 *
 * Componente para listar dados dinamicamente a partir de uma lista de objetos.
 *
 * > Por padrão esse componente cria `thf-info` para exibição, é possível criar `thf-tag` passando a propriedade { tag: true }.
 *
 */
export class ThfDynamicViewBaseComponent {
    /**
     * @param {?} currencyPipe
     * @param {?} datePipe
     * @param {?} decimalPipe
     * @param {?} timePipe
     * @param {?} titleCasePipe
     */
    constructor(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) {
        this.currencyPipe = currencyPipe;
        this.datePipe = datePipe;
        this.decimalPipe = decimalPipe;
        this.timePipe = timePipe;
        this.titleCasePipe = titleCasePipe;
        this._fields = [];
        this._showAllValue = false;
        this._value = {};
        this.visibleFields = [];
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Lista de objetos que implementam a interface `ThfDynamicView`.
     *
     * > Ex: `[ { property: 'age' } ]`
     *
     * Regras de tipagem e formatação dos valores exibidos:
     *
     * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
     * como formato padrão.
     * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
     * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
     * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
     * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
     *
     * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `t-value`.
     *
     * \@default `[]`
     * @param {?} fields
     * @return {?}
     */
    set fields(fields) {
        this._fields = Array.isArray(fields) ? [...fields] : [];
    }
    /**
     * @return {?}
     */
    get fields() {
        return this._fields;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `t-value`.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set showAllValue(value) {
        this._showAllValue = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get showAllValue() {
        return this._showAllValue;
    }
    /**
     * \@description
     *
     * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
     * dos objetos contidos na propridade `t-fields`.
     *
     * > Ex: `{ age: '35' }`
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = value && isTypeof(value, 'object') ? value : {};
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    // retorna os fields com os valores recuperados do objeto value.
    /**
     * @protected
     * @return {?}
     */
    getConfiguredFields() {
        /** @type {?} */
        const newFields = [];
        this.fields.forEach((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            if (isVisibleField(field)) {
                newFields.push(this.createField(field));
            }
        }));
        return newFields;
    }
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    /**
     * @protected
     * @return {?}
     */
    getMergedFields() {
        /** @type {?} */
        const mergedFields = [...this.getConfiguredFields()];
        this.getValueFields().forEach((/**
         * @param {?} valueField
         * @return {?}
         */
        valueField => {
            /** @type {?} */
            const fieldIndex = mergedFields.findIndex((/**
             * @param {?} field
             * @return {?}
             */
            field => field.property === valueField.property));
            /** @type {?} */
            const property = valueField.property;
            if (fieldIndex === -1) {
                mergedFields.push(this.createField({ property }));
            }
        }));
        return mergedFields;
    }
    // retorna o objeto value como fields.
    /**
     * @protected
     * @return {?}
     */
    getValueFields() {
        return Object.keys(this.value).map((/**
         * @param {?} property
         * @return {?}
         */
        property => {
            return this.createField({ property });
        }));
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    createField(field) {
        /** @type {?} */
        const property = field.property;
        /** @type {?} */
        const value = this.transformValue(field.type, this.value[property], field.format);
        /** @type {?} */
        const classesGridColumns = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
        return Object.assign({ property,
            value, label: this.titleCasePipe.transform(property), cssClass: classesGridColumns }, field);
    }
    /**
     * @private
     * @param {?} type
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    transformValue(type, value, format) {
        /** @type {?} */
        let transformedValue = value;
        switch (type) {
            case 'currency':
                transformedValue = this.currencyPipe.transform(value, format || 'BRL', 'symbol', '1.2-2');
                break;
            case 'date':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy');
                break;
            case 'dateTime':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy HH:mm:ss');
                break;
            case 'number':
                transformedValue = this.decimalPipe.transform(value, format);
                break;
            case 'time':
                transformedValue = this.timePipe.transform(value, format || 'HH:mm:ss.ffffff');
                break;
        }
        return transformedValue;
    }
}
ThfDynamicViewBaseComponent.propDecorators = {
    fields: [{ type: Input, args: ['t-fields',] }],
    showAllValue: [{ type: Input, args: ['t-show-all-value',] }],
    value: [{ type: Input, args: ['t-value',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype._fields;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype._showAllValue;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype._value;
    /** @type {?} */
    ThfDynamicViewBaseComponent.prototype.visibleFields;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype.currencyPipe;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype.datePipe;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype.decimalPipe;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype.timePipe;
    /**
     * @type {?}
     * @private
     */
    ThfDynamicViewBaseComponent.prototype.titleCasePipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWR5bmFtaWMtdmlldy1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtZHluYW1pYy90aGYtZHluYW1pYy12aWV3L3RoZi1keW5hbWljLXZpZXctYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHdEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBR2pFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7Ozs7Ozs7OztBQVk1RSxNQUFNLE9BQU8sMkJBQTJCOzs7Ozs7OztJQXVFdEMsWUFDVSxZQUEwQixFQUMxQixRQUFrQixFQUNsQixXQUF3QixFQUN4QixRQUFxQixFQUNyQixhQUE0QjtRQUo1QixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLGFBQVEsR0FBUixRQUFRLENBQWE7UUFDckIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUExRTlCLFlBQU8sR0FBK0IsRUFBRSxDQUFDO1FBQ3pDLGtCQUFhLEdBQVksS0FBSyxDQUFDO1FBQy9CLFdBQU0sR0FBRyxFQUFFLENBQUM7UUFFcEIsa0JBQWEsR0FBRyxFQUFFLENBQUM7SUFzRXVCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUE5QzNDLElBQXVCLE1BQU0sQ0FBQyxNQUFrQztRQUM5RCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzFELENBQUM7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ZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDdXJyZW5jeVBpcGUsIERhdGVQaXBlLCBEZWNpbWFsUGlwZSwgVGl0bGVDYXNlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0Jvb2xlYW4sIGlzVHlwZW9mIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBUaGZUaW1lUGlwZSB9IGZyb20gJy4uLy4uLy4uL3BpcGVzL3RoZi10aW1lL3RoZi10aW1lLnBpcGUnO1xuXG5pbXBvcnQgeyBnZXRHcmlkQ29sdW1uc0NsYXNzZXMsIGlzVmlzaWJsZUZpZWxkIH0gZnJvbSAnLi4vdGhmLWR5bmFtaWMudXRpbCc7XG5pbXBvcnQgeyBUaGZEeW5hbWljVmlld0ZpZWxkIH0gZnJvbSAnLi90aGYtZHluYW1pYy12aWV3LWZpZWxkLmludGVyZmFjZSc7XG5cbi8qKlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcGFyYSBsaXN0YXIgZGFkb3MgZGluYW1pY2FtZW50ZSBhIHBhcnRpciBkZSB1bWEgbGlzdGEgZGUgb2JqZXRvcy5cbiAqXG4gKiA+IFBvciBwYWRyw6NvIGVzc2UgY29tcG9uZW50ZSBjcmlhIGB0aGYtaW5mb2AgcGFyYSBleGliacOnw6NvLCDDqSBwb3Nzw612ZWwgY3JpYXIgYHRoZi10YWdgIHBhc3NhbmRvIGEgcHJvcHJpZWRhZGUgeyB0YWc6IHRydWUgfS5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBUaGZEeW5hbWljVmlld0Jhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2ZpZWxkczogQXJyYXk8VGhmRHluYW1pY1ZpZXdGaWVsZD4gPSBbXTtcbiAgcHJpdmF0ZSBfc2hvd0FsbFZhbHVlOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX3ZhbHVlID0ge307XG5cbiAgdmlzaWJsZUZpZWxkcyA9IFtdO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIExpc3RhIGRlIG9iamV0b3MgcXVlIGltcGxlbWVudGFtIGEgaW50ZXJmYWNlIGBUaGZEeW5hbWljVmlld2AuXG4gICAqXG4gICAqID4gRXg6IGBbIHsgcHJvcGVydHk6ICdhZ2UnIH0gXWBcbiAgICpcbiAgICogUmVncmFzIGRlIHRpcGFnZW0gZSBmb3JtYXRhw6fDo28gZG9zIHZhbG9yZXMgZXhpYmlkb3M6XG4gICAqXG4gICAqIC0gQ2FzbyBvICp0eXBlKiBpbmZvcm1hZG8gc2VqYSAqY3VycmVuY3kqIGUgbsOjbyBzZWphIGluZm9ybWFkbyBvICpmb3JtYXQqIG8gbWVzbW8gcmVjZWJlIFwiJ0JSTCcsICdzeW1ib2wnLCAnMS4yLTInXCJcbiAgICogY29tbyBmb3JtYXRvIHBhZHLDo28uXG4gICAqIC0gQ2FzbyBvICp0eXBlKiBpbmZvcm1hZG8gc2VqYSAqZGF0ZSogZSBuw6NvIHNlamEgaW5mb3JtYWRvIG8gKmZvcm1hdCogbyBtZXNtbyByZWNlYmUgJ2RkL01NL3l5eXknIGNvbW8gZm9ybWF0byBwYWRyw6NvLlxuICAgKiAtIENhc28gbyAqdHlwZSogaW5mb3JtYWRvIHNlamEgKmRhdGVUaW1lKiBlIG7Do28gc2VqYSBpbmZvcm1hZG8gbyAqZm9ybWF0KiBvIG1lc21vIHJlY2ViZSAnZGQvTU0veXl5eSBISDptbTpzcycgY29tbyBmb3JtYXRvIHBhZHLDo28uXG4gICAqIC0gQ2FzbyBvICp0eXBlKiBpbmZvcm1hZG8gc2VqYSAqbnVtYmVyKiBlIG7Do28gc2VqYSBpbmZvcm1hZG8gbyAqZm9ybWF0KiBvIG1lc21vIG7Do28gc2Vyw6EgZm9ybWF0YWRvLlxuICAgKiAtIENhc28gbyAqdHlwZSogaW5mb3JtYWRvIHNlamEgKnRpbWUqIGUgbsOjbyBzZWphIGluZm9ybWFkbyBvICpmb3JtYXQqIG8gbWVzbW8gcmVjZWJlICdISDptbTpzcy5mZmZmZmYnIGNvbW8gZm9ybWF0byBwYWRyw6NvLlxuICAgKlxuICAgKiA+IEFzIHByb3ByaWVkYWRlcyBpbmZvcm1hZGFzIHNlcsOjbyBleGliaWRhcyBtZXNtbyBuw6NvIGNvbnRlbmRvIHZhbG9yIGRlIHJlZmVyw6puY2lhIG5vIG9iamV0byBkYSBwcm9wcmllZGFkZSBgdC12YWx1ZWAuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBbXWBcbiAgICovXG4gIEBJbnB1dCgndC1maWVsZHMnKSBzZXQgZmllbGRzKGZpZWxkczogQXJyYXk8VGhmRHluYW1pY1ZpZXdGaWVsZD4pIHtcbiAgICB0aGlzLl9maWVsZHMgPSBBcnJheS5pc0FycmF5KGZpZWxkcykgPyBbLi4uZmllbGRzXSA6IFtdO1xuICB9XG5cbiAgZ2V0IGZpZWxkcygpIHtcbiAgICByZXR1cm4gdGhpcy5fZmllbGRzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogSW5kaWNhIHNlIGV4aWJpcsOhIHRvZGFzIGFzIGluZm9ybWHDp8O1ZXMgY29udGlkYXMgZGVudHJvIGRvIG9iamV0byBpbmZvcm1hZG8gbmEgcHJvcHJpZWRhZGUgYHQtdmFsdWVgLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3Qtc2hvdy1hbGwtdmFsdWUnKSBzZXQgc2hvd0FsbFZhbHVlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2hvd0FsbFZhbHVlID0gY29udmVydFRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgc2hvd0FsbFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl9zaG93QWxsVmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamV0byBxdWUgc2Vyw6EgdXRpbGl6YWRvIHBhcmEgZXhpYmlyIGFzIGluZm9ybWHDp8O1ZXMgZGluw6JtaWNhcywgbyB2YWxvciBzZXLDoSByZWN1cGVyYWRvIGF0cmF2w6lzIGRvIGF0cmlidXRvICpwcm9wZXJ0eSpcbiAgICogZG9zIG9iamV0b3MgY29udGlkb3MgbmEgcHJvcHJpZGFkZSBgdC1maWVsZHNgLlxuICAgKlxuICAgKiA+IEV4OiBgeyBhZ2U6ICczNScgfWBcbiAgICovXG4gIEBJbnB1dCgndC12YWx1ZScpIHNldCB2YWx1ZSh2YWx1ZTogb2JqZWN0KSB7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWx1ZSAmJiBpc1R5cGVvZih2YWx1ZSwgJ29iamVjdCcpID8gdmFsdWUgOiB7fTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGN1cnJlbmN5UGlwZTogQ3VycmVuY3lQaXBlLFxuICAgIHByaXZhdGUgZGF0ZVBpcGU6IERhdGVQaXBlLFxuICAgIHByaXZhdGUgZGVjaW1hbFBpcGU6IERlY2ltYWxQaXBlLFxuICAgIHByaXZhdGUgdGltZVBpcGU6IFRoZlRpbWVQaXBlLFxuICAgIHByaXZhdGUgdGl0bGVDYXNlUGlwZTogVGl0bGVDYXNlUGlwZSkgeyB9XG5cbiAgLy8gcmV0b3JuYSBvcyBmaWVsZHMgY29tIG9zIHZhbG9yZXMgcmVjdXBlcmFkb3MgZG8gb2JqZXRvIHZhbHVlLlxuICBwcm90ZWN0ZWQgZ2V0Q29uZmlndXJlZEZpZWxkcygpIHtcbiAgICBjb25zdCBuZXdGaWVsZHMgPSBbXTtcblxuICAgIHRoaXMuZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgaWYgKGlzVmlzaWJsZUZpZWxkKGZpZWxkKSkge1xuICAgICAgICBuZXdGaWVsZHMucHVzaCh0aGlzLmNyZWF0ZUZpZWxkKGZpZWxkKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3RmllbGRzO1xuICB9XG5cbiAgLy8gcmV0b3JuYSBmaWVsZHMgbGlnYWRvIGFvIHZhbHVlIG1haXMgb3MgYXRyaWJ1dG9zIGRvIHZhbHVlIHF1ZSBuw6NvIHBvc3N1aWFtIGZpZWxkcy5cbiAgcHJvdGVjdGVkIGdldE1lcmdlZEZpZWxkcygpIHtcbiAgICBjb25zdCBtZXJnZWRGaWVsZHMgPSBbLi4udGhpcy5nZXRDb25maWd1cmVkRmllbGRzKCldO1xuXG4gICAgdGhpcy5nZXRWYWx1ZUZpZWxkcygpLmZvckVhY2godmFsdWVGaWVsZCA9PiB7XG4gICAgICBjb25zdCBmaWVsZEluZGV4ID0gbWVyZ2VkRmllbGRzLmZpbmRJbmRleChmaWVsZCA9PiBmaWVsZC5wcm9wZXJ0eSA9PT0gdmFsdWVGaWVsZC5wcm9wZXJ0eSk7XG4gICAgICBjb25zdCBwcm9wZXJ0eSA9IHZhbHVlRmllbGQucHJvcGVydHk7XG5cbiAgICAgIGlmIChmaWVsZEluZGV4ID09PSAtMSkge1xuICAgICAgICBtZXJnZWRGaWVsZHMucHVzaCh0aGlzLmNyZWF0ZUZpZWxkKHsgcHJvcGVydHkgfSkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1lcmdlZEZpZWxkcztcbiAgfVxuXG4gIC8vIHJldG9ybmEgbyBvYmpldG8gdmFsdWUgY29tbyBmaWVsZHMuXG4gIHByb3RlY3RlZCBnZXRWYWx1ZUZpZWxkcygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy52YWx1ZSkubWFwKHByb3BlcnR5ID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUZpZWxkKHsgcHJvcGVydHkgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUZpZWxkKGZpZWxkOiBUaGZEeW5hbWljVmlld0ZpZWxkKSB7XG4gICAgY29uc3QgcHJvcGVydHkgPSBmaWVsZC5wcm9wZXJ0eTtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMudHJhbnNmb3JtVmFsdWUoZmllbGQudHlwZSwgdGhpcy52YWx1ZVtwcm9wZXJ0eV0sIGZpZWxkLmZvcm1hdCk7XG5cbiAgICBjb25zdCBjbGFzc2VzR3JpZENvbHVtbnMgPSBnZXRHcmlkQ29sdW1uc0NsYXNzZXMoZmllbGQuZ3JpZFNtQ29sdW1ucyxcbiAgICAgIGZpZWxkLmdyaWRNZENvbHVtbnMsXG4gICAgICBmaWVsZC5ncmlkTGdDb2x1bW5zLFxuICAgICAgZmllbGQuZ3JpZFhsQ29sdW1ucyxcbiAgICAgIGZpZWxkLmdyaWRDb2x1bW5zKTtcblxuICAgIHJldHVybiB7XG4gICAgICBwcm9wZXJ0eSxcbiAgICAgIHZhbHVlLFxuICAgICAgbGFiZWw6IHRoaXMudGl0bGVDYXNlUGlwZS50cmFuc2Zvcm0ocHJvcGVydHkpLFxuICAgICAgY3NzQ2xhc3M6IGNsYXNzZXNHcmlkQ29sdW1ucyxcbiAgICAgIC4uLmZpZWxkXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgdHJhbnNmb3JtVmFsdWUodHlwZTogc3RyaW5nLCB2YWx1ZSwgZm9ybWF0KSB7XG4gICAgbGV0IHRyYW5zZm9ybWVkVmFsdWUgPSB2YWx1ZTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnY3VycmVuY3knOlxuICAgICAgICB0cmFuc2Zvcm1lZFZhbHVlID0gdGhpcy5jdXJyZW5jeVBpcGUudHJhbnNmb3JtKHZhbHVlLCBmb3JtYXQgfHwgJ0JSTCcsICdzeW1ib2wnLCAnMS4yLTInKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgdHJhbnNmb3JtZWRWYWx1ZSA9IHRoaXMuZGF0ZVBpcGUudHJhbnNmb3JtKHZhbHVlLCBmb3JtYXQgfHwgJ2RkL01NL3l5eXknKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdkYXRlVGltZSc6XG4gICAgICAgIHRyYW5zZm9ybWVkVmFsdWUgPSB0aGlzLmRhdGVQaXBlLnRyYW5zZm9ybSh2YWx1ZSwgZm9ybWF0IHx8ICdkZC9NTS95eXl5IEhIOm1tOnNzJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgdHJhbnNmb3JtZWRWYWx1ZSA9IHRoaXMuZGVjaW1hbFBpcGUudHJhbnNmb3JtKHZhbHVlLCBmb3JtYXQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RpbWUnOlxuICAgICAgICB0cmFuc2Zvcm1lZFZhbHVlID0gdGhpcy50aW1lUGlwZS50cmFuc2Zvcm0odmFsdWUsIGZvcm1hdCB8fCAnSEg6bW06c3MuZmZmZmZmJyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2Zvcm1lZFZhbHVlO1xuICB9XG5cbn1cbiJdfQ==