/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { ThfComponentInjectorService } from '../../services/thf-component-injector/thf-component-injector.service';
import { ThfLoadingOverlayComponent } from '../../components/thf-loading/thf-loading-overlay/thf-loading-overlay.component';
import { ThfHttpRequesControltService } from './thf-http-request-control-service';
import * as i0 from "@angular/core";
import * as i1 from "./thf-http-request-control-service";
import * as i2 from "../../services/thf-component-injector/thf-component-injector.service";
/** @type {?} */
const noCountPendingRequests = 'X-Totvs-No-Count-Pending-Requests';
/** @type {?} */
const screenLock = 'X-Totvs-Screen-Lock';
/**
 * \@description
 *
 * O serviço Totvs Http Request Interceptor realiza a contabilização de requisições pendentes na aplicação.
 *
 * Existe a possibilidade de não efetuar a contabilização das requisições pendentes, utilizando o parâmetro
 * `X-Totvs-No-Count-Pending-Requests`. Para isso deve ser informado no cabeçalho da requisição com o valor `'true'`,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Totvs-No-Count-Pending-Requests': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * Para obter a quantidade de requisições pendentes, deve inscrever-se no método `getCountPendingRequests` do
 * serviço `ThfHttpRequestInterceptorService`, com isso, ao realizar requisições utilizando `HttpClient`,
 * será retornado a quantidade de requisições pendentes.
 *
 * Também existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisição
 * deve-se passar o parâmetro `X-Totvs-Screen-Lock` no cabeçalho da requisição com valor `'true'`.
 *
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Totvs-Screen-Lock': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * Ao importar o módulo `ThfModule` na aplicação, o `thf-http-request-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 *
 * Segue abaixo um exemplo de uso:
 *
 * ```
 * import { HttpClient } from '\@angular/common/http';
 *
 * ...
 *
 * \@Injectable()
 * export class CustomersService {
 *
 *  headers = { 'X-Totvs-No-Count-Pending-Requests': true, 'X-Totvs-Screen-Lock': 'true' }
 *  pendingRequests: number = 0;
 *  subscription: Subscription;
 *
 *  constructor(
 *    private http: HttpClient,
 *    private httpRequestInterceptor: ThfHttpRequestInterceptorService) { }
 *
 *  ngOnDestroy(): void {
 *    this.subscription.unsubscribe();
 *  }
 *
 *  ngOnInit(): void {
 *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {
 *      this.pendingRequests = data;
 *    });
 *  }
 *
 *  getCustomers() {
 *    return this.http.get(`/customers/1`, { headers: headers });
 *  }
 *
 *  ...
 *
 * }
 * ```
 *
 * \@example
 * <example name='thf-http-request-interceptor-labs' title='Totvs Http Request Interceptor Labs'>
 *  <file name='sample-thf-http-request-interceptor-labs.component.ts'> </file>
 *  <file name='sample-thf-http-request-interceptor-labs.component.html'> </file>
 * </example>
 */
export class ThfHttpRequestInterceptorService {
    /**
     * @param {?} controlHttpRequest
     * @param {?} thfComponentInjector
     */
    constructor(controlHttpRequest, thfComponentInjector) {
        this.controlHttpRequest = controlHttpRequest;
        this.thfComponentInjector = thfComponentInjector;
        this.loadingOverlayComponent = undefined;
        this.pendingRequests = 0;
        this.overlayRequests = 0;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    intercept(request, next) {
        /** @type {?} */
        const requestClone = request.clone();
        request = this.requestCloneWithoutHeaderParam([noCountPendingRequests, screenLock], request);
        this.setCountPendingRequests(true, requestClone);
        this.setCountOverlayRequests(true, requestClone);
        return next.handle(request).pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (response instanceof HttpResponse) {
                this.setCountPendingRequests(false, requestClone);
                this.setCountOverlayRequests(false, requestClone);
            }
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.setCountPendingRequests(false, requestClone);
            this.setCountOverlayRequests(false, requestClone);
            return throwError(error);
        })));
    }
    /**
     * @return {?}
     */
    getCountPendingRequests() {
        return this.controlHttpRequest.getControlHttpRequest();
    }
    /**
     * @private
     * @return {?}
     */
    buildLoading() {
        if (!this.loadingOverlayComponent) {
            this.loadingOverlayComponent = this.thfComponentInjector.createComponentInApplication(ThfLoadingOverlayComponent);
            this.loadingOverlayComponent.instance.screenLock = true;
            this.loadingOverlayComponent.instance.changeDetector.detectChanges();
        }
    }
    /**
     * @private
     * @return {?}
     */
    destroyLoading() {
        if (this.loadingOverlayComponent) {
            this.thfComponentInjector.destroyComponentInApplication(this.loadingOverlayComponent);
            this.loadingOverlayComponent = undefined;
        }
    }
    /**
     * @private
     * @param {?} headersParams
     * @param {?} request
     * @return {?}
     */
    requestCloneWithoutHeaderParam(headersParams, request) {
        /** @type {?} */
        let isRequestClone = false;
        headersParams.forEach((/**
         * @param {?} headerParam
         * @return {?}
         */
        headerParam => {
            if (request.headers.has(headerParam)) {
                request.headers.delete(headerParam);
                isRequestClone = true;
            }
        }));
        return isRequestClone ? request.clone({ headers: request.headers }) : request;
    }
    /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    setCountPendingRequests(isIncrement, request) {
        /** @type {?} */
        const hasCountPendingRequestHeaderParam = request.headers.has(noCountPendingRequests);
        /** @type {?} */
        const headerParam = request.headers.get(noCountPendingRequests);
        if (hasCountPendingRequestHeaderParam && (headerParam.toString().toLowerCase() === 'true')) {
            return;
        }
        this.pendingRequests += isIncrement ? 1 : -1;
        this.controlHttpRequest.send(this.pendingRequests);
    }
    /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    setCountOverlayRequests(isIncrement, request) {
        /** @type {?} */
        const hasOverlayRequestHeaderParam = request.headers.has(screenLock);
        if (hasOverlayRequestHeaderParam) {
            /** @type {?} */
            const headerParam = request.headers.get(screenLock);
            if (headerParam.toString().toLowerCase() === 'false') {
                return;
            }
            this.overlayRequests += isIncrement ? 1 : -1;
            this.overlayRequests > 0 ? this.buildLoading() : this.destroyLoading();
        }
    }
}
ThfHttpRequestInterceptorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ThfHttpRequestInterceptorService.ctorParameters = () => [
    { type: ThfHttpRequesControltService },
    { type: ThfComponentInjectorService }
];
/** @nocollapse */ ThfHttpRequestInterceptorService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ThfHttpRequestInterceptorService_Factory() { return new ThfHttpRequestInterceptorService(i0.ɵɵinject(i1.ThfHttpRequesControltService), i0.ɵɵinject(i2.ThfComponentInjectorService)); }, token: ThfHttpRequestInterceptorService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfHttpRequestInterceptorService.prototype.loadingOverlayComponent;
    /**
     * @type {?}
     * @private
     */
    ThfHttpRequestInterceptorService.prototype.pendingRequests;
    /**
     * @type {?}
     * @private
     */
    ThfHttpRequestInterceptorService.prototype.overlayRequests;
    /**
     * @type {?}
     * @private
     */
    ThfHttpRequestInterceptorService.prototype.controlHttpRequest;
    /**
     * @type {?}
     * @private
     */
    ThfHttpRequestInterceptorService.prototype.thfComponentInjector;
}
//# sourceMappingURL=data:application/json;base64,