/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { THF_CONTROL_POSITIONS } from './../../services/thf-control-position/thf-control-position.constants';
/** @type {?} */
const CONTENT_MAX_LENGTH = 140;
/** @type {?} */
const THF_TOOLTIP_POSITION_DEFAULT = 'bottom';
/**
 * \@description
 *
 * A diretiva thf-tooltip deve ser utilizada para oferecer informações adicionais quando os usuários
 * passam o mouse sobre o elemento alvo ao qual ela está atribuída.
 *
 * O conteúdo é formado por um pequeno texto que deve contribuir para uma tomada de decisão ou
 * orientação do usuário. A ativação dele pode estar em qualquer componente ou tag HTML.
 *
 * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como
 * conteúdo deve-se utilizar o [**thf-popover**](https://thf.totvs.com.br/documentation/thf-popover?view=doc).
 */
export class ThfTooltipBaseDirective {
    constructor() {
        this._tooltip = '';
        this._tooltipPosition = 'bottom';
    }
    /**
     * \@description
     *
     * Habilita e atribui um texto ao thf-tooltip, com limitação de 140 caracteres.
     * @param {?} tooltip
     * @return {?}
     */
    set tooltip(tooltip) {
        if (tooltip && tooltip.length > CONTENT_MAX_LENGTH) {
            this._tooltip = tooltip.substring(0, CONTENT_MAX_LENGTH);
        }
        else {
            this._tooltip = tooltip;
        }
    }
    /**
     * @return {?}
     */
    get tooltip() {
        return this._tooltip;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define a posição que o thf-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * Posições válidas:
     * - `right`: Posiciona o thf-tooltip no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o thf-tooltip no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o thf-tooltip no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o thf-tooltip abaixo do componente alvo.
     * - `bottom-left`: Posiciona o thf-tooltip abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o thf-tooltip abaixo e à direita do componente alvo.
     * - `left`: Posiciona o thf-tooltip no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o thf-tooltip no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o thf-tooltip no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o thf-tooltip acima do componente alvo.
     * - `top-right`: Posiciona o thf-tooltip acima e à direita do componente alvo.
     * - `top-left`: Posiciona o thf-tooltip acima e à esquerda do componente alvo.
     *
     * \@default bottom
     * @param {?} position
     * @return {?}
     */
    set tooltipPosition(position) {
        this._tooltipPosition = THF_CONTROL_POSITIONS.includes(position) ? position : THF_TOOLTIP_POSITION_DEFAULT;
    }
    /**
     * @return {?}
     */
    get tooltipPosition() {
        return this._tooltipPosition;
    }
}
ThfTooltipBaseDirective.propDecorators = {
    tooltip: [{ type: Input, args: ['t-tooltip',] }],
    tooltipPosition: [{ type: Input, args: ['t-tooltip-position',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTooltipBaseDirective.prototype._tooltip;
    /**
     * @type {?}
     * @protected
     */
    ThfTooltipBaseDirective.prototype._tooltipPosition;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXRvb2x0aXAtYmFzZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvdGhmLXRvb2x0aXAvdGhmLXRvb2x0aXAtYmFzZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sc0VBQXNFLENBQUM7O01BRXZHLGtCQUFrQixHQUFHLEdBQUc7O01BQ3hCLDRCQUE0QixHQUFHLFFBQVE7Ozs7Ozs7Ozs7Ozs7QUFlN0MsTUFBTSxPQUFPLHVCQUF1QjtJQUFwQztRQUVVLGFBQVEsR0FBVyxFQUFFLENBQUM7UUFDcEIscUJBQWdCLEdBQVksUUFBUSxDQUFDO0lBa0RqRCxDQUFDOzs7Ozs7OztJQTNDQyxJQUF3QixPQUFPLENBQUMsT0FBZTtRQUM3QyxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLGtCQUFrQixFQUFFO1lBQ2pELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztTQUMzRDthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7U0FDekI7SUFDSCxDQUFDOzs7O0lBQ0QsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUEyQkQsSUFBaUMsZUFBZSxDQUFDLFFBQWdCO1FBQy9ELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsNEJBQTRCLENBQUM7SUFDN0csQ0FBQzs7OztJQUNELElBQUksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUMvQixDQUFDOzs7c0JBekNBLEtBQUssU0FBQyxXQUFXOzhCQW9DakIsS0FBSyxTQUFDLG9CQUFvQjs7Ozs7OztJQTVDM0IsMkNBQThCOzs7OztJQUM5QixtREFBK0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBUSEZfQ09OVFJPTF9QT1NJVElPTlMgfSBmcm9tICcuLy4uLy4uL3NlcnZpY2VzL3RoZi1jb250cm9sLXBvc2l0aW9uL3RoZi1jb250cm9sLXBvc2l0aW9uLmNvbnN0YW50cyc7XG5cbmNvbnN0IENPTlRFTlRfTUFYX0xFTkdUSCA9IDE0MDtcbmNvbnN0IFRIRl9UT09MVElQX1BPU0lUSU9OX0RFRkFVTFQgPSAnYm90dG9tJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBBIGRpcmV0aXZhIHRoZi10b29sdGlwIGRldmUgc2VyIHV0aWxpemFkYSBwYXJhIG9mZXJlY2VyIGluZm9ybWHDp8O1ZXMgYWRpY2lvbmFpcyBxdWFuZG8gb3MgdXN1w6FyaW9zXG4gKiBwYXNzYW0gbyBtb3VzZSBzb2JyZSBvIGVsZW1lbnRvIGFsdm8gYW8gcXVhbCBlbGEgZXN0w6EgYXRyaWJ1w61kYS5cbiAqXG4gKiBPIGNvbnRlw7pkbyDDqSBmb3JtYWRvIHBvciB1bSBwZXF1ZW5vIHRleHRvIHF1ZSBkZXZlIGNvbnRyaWJ1aXIgcGFyYSB1bWEgdG9tYWRhIGRlIGRlY2lzw6NvIG91XG4gKiBvcmllbnRhw6fDo28gZG8gdXN1w6FyaW8uIEEgYXRpdmHDp8OjbyBkZWxlIHBvZGUgZXN0YXIgZW0gcXVhbHF1ZXIgY29tcG9uZW50ZSBvdSB0YWcgSFRNTC5cbiAqXG4gKiBQYXJhIHRleHRvcyBtYWlvcmVzIG91IG5vIGNhc28gZGUgaGF2ZXIgYSBuZWNlc3NpZGFkZSBkZSB1dGlsaXphciBhbGd1bSBvdXRybyBlbGVtZW50byBjb21vXG4gKiBjb250ZcO6ZG8gZGV2ZS1zZSB1dGlsaXphciBvIFsqKnRoZi1wb3BvdmVyKipdKGh0dHBzOi8vdGhmLnRvdHZzLmNvbS5ici9kb2N1bWVudGF0aW9uL3RoZi1wb3BvdmVyP3ZpZXc9ZG9jKS5cbiAqL1xuXG5leHBvcnQgY2xhc3MgVGhmVG9vbHRpcEJhc2VEaXJlY3RpdmUge1xuXG4gIHByaXZhdGUgX3Rvb2x0aXA6IHN0cmluZyA9ICcnO1xuICBwcm90ZWN0ZWQgX3Rvb2x0aXBQb3NpdGlvbj86IHN0cmluZyA9ICdib3R0b20nO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogSGFiaWxpdGEgZSBhdHJpYnVpIHVtIHRleHRvIGFvIHRoZi10b29sdGlwLCBjb20gbGltaXRhw6fDo28gZGUgMTQwIGNhcmFjdGVyZXMuXG4gICAqL1xuICBASW5wdXQoJ3QtdG9vbHRpcCcpIHNldCB0b29sdGlwKHRvb2x0aXA6IHN0cmluZykge1xuICAgIGlmICh0b29sdGlwICYmIHRvb2x0aXAubGVuZ3RoID4gQ09OVEVOVF9NQVhfTEVOR1RIKSB7XG4gICAgICAgdGhpcy5fdG9vbHRpcCA9IHRvb2x0aXAuc3Vic3RyaW5nKDAsIENPTlRFTlRfTUFYX0xFTkdUSCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Rvb2x0aXAgPSB0b29sdGlwO1xuICAgIH1cbiAgfVxuICBnZXQgdG9vbHRpcCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdG9vbHRpcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBhIHBvc2nDp8OjbyBxdWUgbyB0aGYtdG9vbHRpcCBhYnJpcsOhIGVtIHJlbGHDp8OjbyBhbyBjb21wb25lbnRlIGFsdm8uIFN1Z2VyZS1zZSBxdWUgc2VqYVxuICAgKiB1c2FkYSBhIG9yaWVudGHDp8OjbyBcImJvdHRvbVwiIChhYmFpeG8pLCBwb3LDqW0gbyBtZXNtbyDDqSBmbGV4w612ZWwgZSBzZXLDoSByb3RhY2lvbmFkb1xuICAgKiBhdXRvbWF0aWNhbWVudGUgcGFyYSBzZSBhZGVxdWFyIGEgdGVsYSwgY2FzbyBuZWNlc3PDoXJpby5cbiAgICpcbiAgICogUG9zacOnw7VlcyB2w6FsaWRhczpcbiAgICogLSBgcmlnaHRgOiBQb3NpY2lvbmEgbyB0aGYtdG9vbHRpcCBubyBsYWRvIGRpcmVpdG8gZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGByaWdodC1ib3R0b21gOiBQb3NpY2lvbmEgbyB0aGYtdG9vbHRpcCBubyBsYWRvIGRpcmVpdG8gaW5mZXJpb3IgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGByaWdodC10b3BgOiBQb3NpY2lvbmEgbyB0aGYtdG9vbHRpcCBubyBsYWRvIGRpcmVpdG8gc3VwZXJpb3IgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGBib3R0b21gOiBQb3NpY2lvbmEgbyB0aGYtdG9vbHRpcCBhYmFpeG8gZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGBib3R0b20tbGVmdGA6IFBvc2ljaW9uYSBvIHRoZi10b29sdGlwIGFiYWl4byBlIMOgIGVzcXVlcmRhIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgYm90dG9tLXJpZ2h0YDogUG9zaWNpb25hIG8gdGhmLXRvb2x0aXAgYWJhaXhvIGUgw6AgZGlyZWl0YSBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYGxlZnRgOiBQb3NpY2lvbmEgbyB0aGYtdG9vbHRpcCBubyBsYWRvIGVzcXVlcmRvIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgbGVmdC10b3BgOiBQb3NpY2lvbmEgbyB0aGYtdG9vbHRpcCBubyBsYWRvIGVzcXVlcmRvIHN1cGVyaW9yIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgbGVmdC1ib3R0b21gOiBQb3NpY2lvbmEgbyB0aGYtdG9vbHRpcCBubyBsYWRvIGVzcXVlcmRvIGluZmVyaW9yIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgdG9wYDogUG9zaWNpb25hIG8gdGhmLXRvb2x0aXAgYWNpbWEgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGB0b3AtcmlnaHRgOiBQb3NpY2lvbmEgbyB0aGYtdG9vbHRpcCBhY2ltYSBlIMOgIGRpcmVpdGEgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGB0b3AtbGVmdGA6IFBvc2ljaW9uYSBvIHRoZi10b29sdGlwIGFjaW1hIGUgw6AgZXNxdWVyZGEgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBib3R0b21cbiAgICovXG4gIEBJbnB1dCgndC10b29sdGlwLXBvc2l0aW9uJykgc2V0IHRvb2x0aXBQb3NpdGlvbihwb3NpdGlvbjogc3RyaW5nKSB7XG4gICAgdGhpcy5fdG9vbHRpcFBvc2l0aW9uID0gVEhGX0NPTlRST0xfUE9TSVRJT05TLmluY2x1ZGVzKHBvc2l0aW9uKSA/IHBvc2l0aW9uIDogVEhGX1RPT0xUSVBfUE9TSVRJT05fREVGQVVMVDtcbiAgfVxuICBnZXQgdG9vbHRpcFBvc2l0aW9uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3Rvb2x0aXBQb3NpdGlvbjtcbiAgfVxuXG59XG4iXX0=