/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';
import { ThfControlPositionService } from './../../services/thf-control-position/thf-control-position.service';
import { ThfTooltipBaseDirective } from './thf-tooltip-base.directive';
/**
 * \@docsExtends ThfTooltipBaseDirective
 *
 * \@example
 *
 * <example name="thf-tooltip-basic" title="Totvs Tooltip Basic" >
 *  <file name="sample-thf-tooltip-basic/sample-thf-tooltip-basic.component.html"> </file>
 *  <file name="sample-thf-tooltip-basic/sample-thf-tooltip-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tooltip-labs" title="Totvs Tooltip Labs" >
 *  <file name="sample-thf-tooltip-labs/sample-thf-tooltip-labs.component.html"> </file>
 *  <file name="sample-thf-tooltip-labs/sample-thf-tooltip-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-tooltip-new-user" title="Totvs Tooltip - New User" >
 *  <file name="sample-thf-tooltip-new-user/sample-thf-tooltip-new-user.component.html"> </file>
 *  <file name="sample-thf-tooltip-new-user/sample-thf-tooltip-new-user.component.ts"> </file>
 * </example>
 *
 */
export class ThfTooltipDirective extends ThfTooltipBaseDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} thfControlPosition
     */
    constructor(elementRef, renderer, thfControlPosition) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.thfControlPosition = thfControlPosition;
        this.tooltipOffset = 8;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initScrollEventListenerFunction();
    }
    /**
     * @return {?}
     */
    onMouseEnter() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.tooltip) {
                this.tooltipContent ? this.showTooltip() : this.createTooltip();
                this.removeArrow(this.arrowDirection);
                this.thfControlPosition.adjustPosition(this.tooltipPosition);
                this.arrowDirection = this.thfControlPosition.getArrowDirection();
                this.addArrow(this.arrowDirection);
                this.lastTooltipText = this.tooltip;
            }
        }));
    }
    /**
     * @return {?}
     */
    onMouseLeave() {
        this.hideTooltip();
    }
    /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    addArrow(arrowDirection) {
        this.renderer.addClass(this.divArrow, `thf-arrow-${arrowDirection}`);
    }
    /**
     * @private
     * @return {?}
     */
    addScrollEventListener() {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    }
    // Monta a estrutura do tooltip
    /**
     * @private
     * @return {?}
     */
    createTooltip() {
        this.tooltipContent = this.renderer.createElement('div');
        this.renderer.addClass(this.tooltipContent, 'thf-tooltip');
        this.divArrow = this.renderer.createElement('div');
        this.renderer.addClass(this.divArrow, 'thf-tooltip-arrow');
        this.divContent = this.renderer.createElement('div');
        this.renderer.addClass(this.divContent, 'thf-tooltip-content');
        this.textContent = this.renderer.createText(this.tooltip);
        this.renderer.appendChild(this.divContent, this.textContent);
        this.renderer.appendChild(this.tooltipContent, this.divArrow);
        this.renderer.appendChild(this.tooltipContent, this.divContent);
        this.renderer.appendChild(this.elementRef.nativeElement, this.tooltipContent);
        this.thfControlPosition.setElements(this.tooltipContent, this.tooltipOffset, this.elementRef);
        this.addScrollEventListener();
    }
    /**
     * @private
     * @return {?}
     */
    initScrollEventListenerFunction() {
        this.eventListenerFunction = (/**
         * @return {?}
         */
        () => {
            if (!this.isHidden) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.thfControlPosition.adjustPosition(this.tooltipPosition);
                }));
            }
        });
    }
    /**
     * @private
     * @return {?}
     */
    hideTooltip() {
        if (this.tooltipContent) {
            this.renderer.addClass(this.tooltipContent, 'thf-invisible');
            this.isHidden = true;
            this.removeScrollEventListener();
        }
    }
    /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    removeArrow(arrowDirection) {
        if (this.elementRef.nativeElement.querySelector(`.thf-arrow-${arrowDirection}`)) {
            this.renderer.removeClass(this.divArrow, `thf-arrow-${arrowDirection}`);
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeScrollEventListener() {
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    }
    /**
     * @private
     * @return {?}
     */
    showTooltip() {
        this.renderer.removeClass(this.tooltipContent, 'thf-invisible');
        this.updateTextContent();
        this.isHidden = false;
        this.addScrollEventListener();
    }
    /**
     * @private
     * @return {?}
     */
    updateTextContent() {
        if (this.lastTooltipText !== this.tooltip) {
            this.renderer.removeChild(this.divContent, this.textContent);
            this.textContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.divContent, this.textContent);
        }
    }
}
ThfTooltipDirective.decorators = [
    { type: Directive, args: [{
                selector: '[t-tooltip]',
                providers: [ThfControlPositionService]
            },] }
];
/** @nocollapse */
ThfTooltipDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ThfControlPositionService }
];
ThfTooltipDirective.propDecorators = {
    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.arrowDirection;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.divArrow;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.divContent;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.isHidden;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.lastTooltipText;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.textContent;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.tooltipContent;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.tooltipOffset;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.eventListenerFunction;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ThfTooltipDirective.prototype.thfControlPosition;
}
//# sourceMappingURL=data:application/json;base64,