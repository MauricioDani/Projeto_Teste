/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isTypeof } from '../../utils/util';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Pipe responsável por apresentar um horário baseado no formato de entrada definido na API da Totvs.
 */
export class ThfTimePipe {
    /**
     * @param {?} time
     * @param {?=} format
     * @return {?}
     */
    transform(time, format) {
        /** @type {?} */
        const hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\.]?([0-9]{1,6})?$/g;
        if (isTypeof(time, 'string') && hourRegex.test(time)) {
            /** @type {?} */
            const amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;
            /** @type {?} */
            const miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);
            /** @type {?} */
            const formatMiliseconds = this.getFormatMiliseconds(amountOfF);
            return this.formatValue(time, format, formatMiliseconds, miliseconds);
        }
        return null;
    }
    /**
     * @private
     * @param {?} miliseconds
     * @param {?} amountOfF
     * @return {?}
     */
    addDotMiliseconds(miliseconds, amountOfF) {
        if (miliseconds && amountOfF) {
            miliseconds = '.' + miliseconds;
        }
        return miliseconds;
    }
    /**
     * @private
     * @param {?} time
     * @param {?} format
     * @param {?} formatMiliseconds
     * @param {?} miliseconds
     * @return {?}
     */
    formatValue(time, format, formatMiliseconds, miliseconds) {
        if (time && format) {
            /** @type {?} */
            const hour = time.substring(0, 2);
            /** @type {?} */
            const minutes = time.substring(3, 5);
            /** @type {?} */
            const seconds = time.substring(6, 8);
            format = format.replace('HH', hour);
            format = format.replace('mm', minutes);
            format = format.replace('ss', seconds);
            format = format.replace(`.${formatMiliseconds}`, miliseconds);
            return format;
        }
        else {
            return time;
        }
    }
    /**
     * @private
     * @param {?} amountOfF
     * @return {?}
     */
    getFormatMiliseconds(amountOfF) {
        /** @type {?} */
        let formatMiliseconds = '';
        for (let i = 0; i < amountOfF; i++) {
            formatMiliseconds += 'f';
        }
        return formatMiliseconds;
    }
}
ThfTimePipe.decorators = [
    { type: Pipe, args: [{
                name: 'thf_time'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXRpbWUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvdGhmLXRpbWUvdGhmLXRpbWUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFcEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7Ozs7OztBQVk1QyxNQUFNLE9BQU8sV0FBVzs7Ozs7O0lBRXRCLFNBQVMsQ0FBQyxJQUFZLEVBQUUsTUFBZTs7Y0FFL0IsU0FBUyxHQUFHLG9FQUFvRTtRQUV0RixJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTs7a0JBRTlDLFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7O2tCQUUxRSxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUM7O2tCQUNqRixpQkFBaUIsR0FBVyxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDO1lBRXRFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ3ZFO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7Ozs7O0lBRU8saUJBQWlCLENBQUMsV0FBbUIsRUFBRSxTQUFpQjtRQUM5RCxJQUFJLFdBQVcsSUFBSSxTQUFTLEVBQUU7WUFDNUIsV0FBVyxHQUFHLEdBQUcsR0FBRyxXQUFXLENBQUM7U0FDakM7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDOzs7Ozs7Ozs7SUFFTyxXQUFXLENBQUMsSUFBWSxFQUFFLE1BQWMsRUFBRSxpQkFBeUIsRUFBRSxXQUFtQjtRQUM5RixJQUFJLElBQUksSUFBSSxNQUFNLEVBQUU7O2tCQUNaLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7O2tCQUMzQixPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDOztrQkFDOUIsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUVwQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDcEMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN2QyxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLGlCQUFpQixFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFFOUQsT0FBTyxNQUFNLENBQUM7U0FDZjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUM7U0FDYjtJQUNILENBQUM7Ozs7OztJQUVPLG9CQUFvQixDQUFDLFNBQWlCOztZQUN4QyxpQkFBaUIsR0FBVyxFQUFFO1FBRWxDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbEMsaUJBQWlCLElBQUksR0FBRyxDQUFDO1NBQzFCO1FBRUQsT0FBTyxpQkFBaUIsQ0FBQztJQUMzQixDQUFDOzs7WUFyREYsSUFBSSxTQUFDO2dCQUNKLElBQUksRUFBRSxVQUFVO2FBQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBpc1R5cGVvZiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFBpcGUgcmVzcG9uc8OhdmVsIHBvciBhcHJlc2VudGFyIHVtIGhvcsOhcmlvIGJhc2VhZG8gbm8gZm9ybWF0byBkZSBlbnRyYWRhIGRlZmluaWRvIG5hIEFQSSBkYSBUb3R2cy5cbiAqL1xuQFBpcGUoe1xuICBuYW1lOiAndGhmX3RpbWUnXG59KVxuZXhwb3J0IGNsYXNzIFRoZlRpbWVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgdHJhbnNmb3JtKHRpbWU6IHN0cmluZywgZm9ybWF0Pzogc3RyaW5nKTogc3RyaW5nIHtcblxuICAgIGNvbnN0IGhvdXJSZWdleCA9IC9eKChbMC0xXVswLTldKXwoMlswLTNdKSk6WzAtNV1bMC05XTpbMC01XVswLTldW1xcLl0/KFswLTldezEsNn0pPyQvZztcblxuICAgIGlmIChpc1R5cGVvZih0aW1lLCAnc3RyaW5nJykgJiYgaG91clJlZ2V4LnRlc3QodGltZSkpIHtcblxuICAgICAgY29uc3QgYW1vdW50T2ZGID0gZm9ybWF0ID8gZm9ybWF0Lmxhc3RJbmRleE9mKCdmJykgLSBmb3JtYXQuaW5kZXhPZignZicpICsgMSA6IDA7XG5cbiAgICAgIGNvbnN0IG1pbGlzZWNvbmRzID0gdGhpcy5hZGREb3RNaWxpc2Vjb25kcyh0aW1lLnN1YnN0cmluZyg5LCA5ICsgYW1vdW50T2ZGKSwgYW1vdW50T2ZGKTtcbiAgICAgIGNvbnN0IGZvcm1hdE1pbGlzZWNvbmRzOiBzdHJpbmcgPSB0aGlzLmdldEZvcm1hdE1pbGlzZWNvbmRzKGFtb3VudE9mRik7XG5cbiAgICAgIHJldHVybiB0aGlzLmZvcm1hdFZhbHVlKHRpbWUsIGZvcm1hdCwgZm9ybWF0TWlsaXNlY29uZHMsIG1pbGlzZWNvbmRzKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIGFkZERvdE1pbGlzZWNvbmRzKG1pbGlzZWNvbmRzOiBzdHJpbmcsIGFtb3VudE9mRjogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAobWlsaXNlY29uZHMgJiYgYW1vdW50T2ZGKSB7XG4gICAgICBtaWxpc2Vjb25kcyA9ICcuJyArIG1pbGlzZWNvbmRzO1xuICAgIH1cbiAgICByZXR1cm4gbWlsaXNlY29uZHM7XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdFZhbHVlKHRpbWU6IHN0cmluZywgZm9ybWF0OiBzdHJpbmcsIGZvcm1hdE1pbGlzZWNvbmRzOiBzdHJpbmcsIG1pbGlzZWNvbmRzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICh0aW1lICYmIGZvcm1hdCkge1xuICAgICAgY29uc3QgaG91ciA9IHRpbWUuc3Vic3RyaW5nKDAsIDIpO1xuICAgICAgY29uc3QgbWludXRlcyA9IHRpbWUuc3Vic3RyaW5nKDMsIDUpO1xuICAgICAgY29uc3Qgc2Vjb25kcyA9IHRpbWUuc3Vic3RyaW5nKDYsIDgpO1xuXG4gICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnSEgnLCBob3VyKTtcbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKCdtbScsIG1pbnV0ZXMpO1xuICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoJ3NzJywgc2Vjb25kcyk7XG4gICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShgLiR7Zm9ybWF0TWlsaXNlY29uZHN9YCwgbWlsaXNlY29uZHMpO1xuXG4gICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGltZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEZvcm1hdE1pbGlzZWNvbmRzKGFtb3VudE9mRjogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBsZXQgZm9ybWF0TWlsaXNlY29uZHM6IHN0cmluZyA9ICcnO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbW91bnRPZkY7IGkrKykge1xuICAgICAgZm9ybWF0TWlsaXNlY29uZHMgKz0gJ2YnO1xuICAgIH1cblxuICAgIHJldHVybiBmb3JtYXRNaWxpc2Vjb25kcztcbiAgfVxuXG59XG4iXX0=