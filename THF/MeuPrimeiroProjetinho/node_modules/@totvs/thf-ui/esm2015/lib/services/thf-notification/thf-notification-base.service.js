/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ThfToasterOrientation } from './thf-toaster/thf-toaster-orientation.enum';
import { ThfToasterType } from './thf-toaster/thf-toaster-type.enum';
/**
 * \@description
 *
 * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
 *
 * - success,
 * - warning,
 * - error,
 * - information.
 *
 * Cada um destes métodos recebe como parâmetro o objeto "ThfNotification" que contém os dados da mensagem e o
 * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
 *
 * Estas notificações serão exibidas durante 10 segundos, após este tempo a mesma é removida automaticamente.
 * @abstract
 */
export class ThfNotificationBaseService {
    constructor() {
        // Array responsável por guardar a instância de thf-toaster's superiores.
        this.stackTop = [];
        // Array responsável por guardar a instância de thf-toaster's inferiores.
        this.stackBottom = [];
        // Duração do toaster ativo.
        this.durationToaster = 10000;
    }
    /**
     * Emite uma notificação de sucesso.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     * @return {?}
     */
    success(notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Success));
    }
    /**
     * Emite uma notificação de atenção.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    warning(notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Warning));
    }
    /**
     * Emite uma notificação de erro.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    error(notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Error));
    }
    /**
     * Emite uma notificação de informação.
     *
     * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    information(notification) {
        this.createToaster(this.buildToaster(notification, ThfToasterType.Information));
    }
    /**
     * \@docsPrivate
     *
     * Cria um objeto do tipo ThfToaster de acordo o tipo.
     *
     * @private
     * @param {?} notification {ThfNotification | string} Objeto ThfNotification com os dados da notificação
     * @param {?} type
     * @return {?}
     */
    buildToaster(notification, type) {
        /** @type {?} */
        let index = 0;
        /** @type {?} */
        let orientation;
        if (((/** @type {?} */ (notification))).orientation === undefined ||
            ((/** @type {?} */ (notification))).orientation === ThfToasterOrientation.Bottom) {
            index = this.stackBottom.length;
            orientation = ThfToasterOrientation.Bottom;
        }
        else {
            index = this.stackTop.length;
            orientation = ThfToasterOrientation.Top;
        }
        /** @type {?} */
        const toaster = {
            componentRef: undefined,
            message: ((/** @type {?} */ (notification))).message || (/** @type {?} */ (notification)),
            type: type,
            orientation: orientation,
            action: ((/** @type {?} */ (notification))).action,
            actionLabel: ((/** @type {?} */ (notification))).actionLabel,
            position: index
        };
        if (((/** @type {?} */ (notification))).action) {
            toaster.action = (/**
             * @param {?} param
             * @return {?}
             */
            (param) => {
                ((/** @type {?} */ (notification))).action();
                this.destroyToaster(param.componentRef);
            });
        }
        return toaster;
    }
}
if (false) {
    /** @type {?} */
    ThfNotificationBaseService.prototype.stackTop;
    /** @type {?} */
    ThfNotificationBaseService.prototype.stackBottom;
    /**
     * @type {?}
     * @protected
     */
    ThfNotificationBaseService.prototype.durationToaster;
    /**
     * \@docsPrivate
     *
     * Método responsável por criar o thf-toaster.
     *
     * @abstract
     * @param {?} toaster {ThfToaster} Objeto contendo as informações do toaster.
     * @return {?}
     */
    ThfNotificationBaseService.prototype.createToaster = function (toaster) { };
    /**
     * \@docsPrivate
     *
     * Método responsável por destruir o thf-toaster.
     *
     * @abstract
     * @param {?} toaster {ComponentRef} Número da posição ou instancia do toaster a ser destruído.
     * @return {?}
     */
    ThfNotificationBaseService.prototype.destroyToaster = function (toaster) { };
}
//# sourceMappingURL=data:application/json;base64,