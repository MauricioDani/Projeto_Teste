/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * <a id="thfI18nConfig"></a>
 *
 * Interface para a configuração do módulo `ThfI18nModule`.
 *
 * \@usedBy ThfI18nModule
 * @record
 */
export function ThfI18nConfig() { }
if (false) {
    /**
     * Configurações padrões.
     * @type {?|undefined}
     */
    ThfI18nConfig.prototype.default;
    /**
     * Deve ser atribuído a esta propriedade um objeto que contenha os contextos com os
     * idiomas suportados e suas respectivas traduções literais,
     * como também informar a propriedade `url` onde pode ser informado o serviço que retorne as literais traduzidas.
     *
     * Portanto podemos utilizar constantes, onde devemos informar o nome do contexto recebendo um objeto com os
     * idiomas suportados e o arquivo de literais, por exemplo:
     * ```
     *  import { generalEn } from './i18n/general-en';
     *  import { generalPt } from './i18n/general-pt';
     * ...
     *  general: {
     *    pt: generalPt,
     *    en: generalEn
     *  }
     * ...
     * ```
     *
     * E como informado, podemos utilizar a propriedade `url` que deve receber a URL do serviço que
     * retorne as literais traduzidas, por exemplo:
     * ```
     *   hcm: {
     *     url: 'http://localhost:3000/api/translations/hcm/'
     *   }
     * ```
     *
     * Ao optar por utilizar um serviço, deverá ser definida a URL específica do contexto,
     * como nos exemplos abaixo:
     * ```
     *  http://server:port/api/translations/crm
     *  http://server:port/api/translations/general
     * ```
     *
     * Os idiomas e literais serão automaticamente buscados com parâmetros na própria URL:
     * - `language`: o idioma será sempre passado por parâmetro, sendo recomendado a utilização do padrão suportado
     * pelos navegadores (`pt-br`, `en-us`);
     * - `literals`: as literais serão separadas por vírgula. Caso esse parâmetro não seja informado, o
     * serviço deve retornar todas as literais do idioma.
     *
     * Exemplos de requisição:
     * ```
     *  http://server:port/api/translations/crm?language=pt-br
     *  http://server:port/api/translations/crm?language=pt-br&literals=add,remove,text
     * ```
     *
     * > Sempre que o idioma solicitado não for encontrado, será buscado por `pt-br`.
     *
     * Existe também a possibilidade de utilizar ambos, onde será feito a busca das literais nas constantes e depois efetua
     * a busca no serviço, com isso as constantes podem servir como *backup* caso o serviço esteja indisponível, por exemplo:
     *
     * ```
     *  import { generalEn } from './i18n/general-en';
     *  import { generalPt } from './i18n/general-pt';
     * ...
     *  general: {
     *    pt: generalPt,
     *    en: generalEn,
     *    url: 'http://localhost:3000/api/translations/hcm/'
     *  }
     * ...
     * ```
     * > Caso a constante contenha alguma literal que o serviço não possua será utilizado a literal da constante.
     * @type {?}
     */
    ThfI18nConfig.prototype.contexts;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWkxOG4tY29uZmlnLmludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdWkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvdGhmLWkxOG4vaW50ZXJmYWNlcy90aGYtaTE4bi1jb25maWcuaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBV0EsbUNBcUVDOzs7Ozs7SUFsRUMsZ0NBQStCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWlFL0IsaUNBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGhmSTE4bkNvbmZpZ0RlZmF1bHQgfSBmcm9tICcuL3RoZi1pMThuLWNvbmZpZy1kZWZhdWx0LmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogPGEgaWQ9XCJ0aGZJMThuQ29uZmlnXCI+PC9hPlxuICpcbiAqIEludGVyZmFjZSBwYXJhIGEgY29uZmlndXJhw6fDo28gZG8gbcOzZHVsbyBgVGhmSTE4bk1vZHVsZWAuXG4gKlxuICogQHVzZWRCeSBUaGZJMThuTW9kdWxlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGhmSTE4bkNvbmZpZyB7XG5cbiAgLyoqIENvbmZpZ3VyYcOnw7VlcyBwYWRyw7Vlcy4gKi9cbiAgZGVmYXVsdD86IFRoZkkxOG5Db25maWdEZWZhdWx0O1xuXG4gIC8qKlxuICAgKiBEZXZlIHNlciBhdHJpYnXDrWRvIGEgZXN0YSBwcm9wcmllZGFkZSB1bSBvYmpldG8gcXVlIGNvbnRlbmhhIG9zIGNvbnRleHRvcyBjb20gb3NcbiAgICogaWRpb21hcyBzdXBvcnRhZG9zIGUgc3VhcyByZXNwZWN0aXZhcyB0cmFkdcOnw7VlcyBsaXRlcmFpcyxcbiAgICogY29tbyB0YW1iw6ltIGluZm9ybWFyIGEgcHJvcHJpZWRhZGUgYHVybGAgb25kZSBwb2RlIHNlciBpbmZvcm1hZG8gbyBzZXJ2acOnbyBxdWUgcmV0b3JuZSBhcyBsaXRlcmFpcyB0cmFkdXppZGFzLlxuICAgKlxuICAgKiBQb3J0YW50byBwb2RlbW9zIHV0aWxpemFyIGNvbnN0YW50ZXMsIG9uZGUgZGV2ZW1vcyBpbmZvcm1hciBvIG5vbWUgZG8gY29udGV4dG8gcmVjZWJlbmRvIHVtIG9iamV0byBjb20gb3NcbiAgICogaWRpb21hcyBzdXBvcnRhZG9zIGUgbyBhcnF1aXZvIGRlIGxpdGVyYWlzLCBwb3IgZXhlbXBsbzpcbiAgICogYGBgXG4gICAqICBpbXBvcnQgeyBnZW5lcmFsRW4gfSBmcm9tICcuL2kxOG4vZ2VuZXJhbC1lbic7XG4gICAqICBpbXBvcnQgeyBnZW5lcmFsUHQgfSBmcm9tICcuL2kxOG4vZ2VuZXJhbC1wdCc7XG4gICAqIC4uLlxuICAgKiAgZ2VuZXJhbDoge1xuICAgKiAgICBwdDogZ2VuZXJhbFB0LFxuICAgKiAgICBlbjogZ2VuZXJhbEVuXG4gICAqICB9XG4gICAqIC4uLlxuICAgKiBgYGBcbiAgICpcbiAgICogRSBjb21vIGluZm9ybWFkbywgcG9kZW1vcyB1dGlsaXphciBhIHByb3ByaWVkYWRlIGB1cmxgIHF1ZSBkZXZlIHJlY2ViZXIgYSBVUkwgZG8gc2VydmnDp28gcXVlXG4gICAqIHJldG9ybmUgYXMgbGl0ZXJhaXMgdHJhZHV6aWRhcywgcG9yIGV4ZW1wbG86XG4gICAqIGBgYFxuICAgKiAgIGhjbToge1xuICAgKiAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS90cmFuc2xhdGlvbnMvaGNtLydcbiAgICogICB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBBbyBvcHRhciBwb3IgdXRpbGl6YXIgdW0gc2VydmnDp28sIGRldmVyw6Egc2VyIGRlZmluaWRhIGEgVVJMIGVzcGVjw61maWNhIGRvIGNvbnRleHRvLFxuICAgKiBjb21vIG5vcyBleGVtcGxvcyBhYmFpeG86XG4gICAqIGBgYFxuICAgKiAgaHR0cDovL3NlcnZlcjpwb3J0L2FwaS90cmFuc2xhdGlvbnMvY3JtXG4gICAqICBodHRwOi8vc2VydmVyOnBvcnQvYXBpL3RyYW5zbGF0aW9ucy9nZW5lcmFsXG4gICAqIGBgYFxuICAgKlxuICAgKiBPcyBpZGlvbWFzIGUgbGl0ZXJhaXMgc2Vyw6NvIGF1dG9tYXRpY2FtZW50ZSBidXNjYWRvcyBjb20gcGFyw6JtZXRyb3MgbmEgcHLDs3ByaWEgVVJMOlxuICAgKiAtIGBsYW5ndWFnZWA6IG8gaWRpb21hIHNlcsOhIHNlbXByZSBwYXNzYWRvIHBvciBwYXLDom1ldHJvLCBzZW5kbyByZWNvbWVuZGFkbyBhIHV0aWxpemHDp8OjbyBkbyBwYWRyw6NvIHN1cG9ydGFkb1xuICAgKiBwZWxvcyBuYXZlZ2Fkb3JlcyAoYHB0LWJyYCwgYGVuLXVzYCk7XG4gICAqIC0gYGxpdGVyYWxzYDogYXMgbGl0ZXJhaXMgc2Vyw6NvIHNlcGFyYWRhcyBwb3IgdsOtcmd1bGEuIENhc28gZXNzZSBwYXLDom1ldHJvIG7Do28gc2VqYSBpbmZvcm1hZG8sIG9cbiAgICogc2VydmnDp28gZGV2ZSByZXRvcm5hciB0b2RhcyBhcyBsaXRlcmFpcyBkbyBpZGlvbWEuXG4gICAqXG4gICAqIEV4ZW1wbG9zIGRlIHJlcXVpc2nDp8OjbzpcbiAgICogYGBgXG4gICAqICBodHRwOi8vc2VydmVyOnBvcnQvYXBpL3RyYW5zbGF0aW9ucy9jcm0/bGFuZ3VhZ2U9cHQtYnJcbiAgICogIGh0dHA6Ly9zZXJ2ZXI6cG9ydC9hcGkvdHJhbnNsYXRpb25zL2NybT9sYW5ndWFnZT1wdC1iciZsaXRlcmFscz1hZGQscmVtb3ZlLHRleHRcbiAgICogYGBgXG4gICAqXG4gICAqID4gU2VtcHJlIHF1ZSBvIGlkaW9tYSBzb2xpY2l0YWRvIG7Do28gZm9yIGVuY29udHJhZG8sIHNlcsOhIGJ1c2NhZG8gcG9yIGBwdC1icmAuXG4gICAqXG4gICAqIEV4aXN0ZSB0YW1iw6ltIGEgcG9zc2liaWxpZGFkZSBkZSB1dGlsaXphciBhbWJvcywgb25kZSBzZXLDoSBmZWl0byBhIGJ1c2NhIGRhcyBsaXRlcmFpcyBuYXMgY29uc3RhbnRlcyBlIGRlcG9pcyBlZmV0dWFcbiAgICogYSBidXNjYSBubyBzZXJ2acOnbywgY29tIGlzc28gYXMgY29uc3RhbnRlcyBwb2RlbSBzZXJ2aXIgY29tbyAqYmFja3VwKiBjYXNvIG8gc2VydmnDp28gZXN0ZWphIGluZGlzcG9uw612ZWwsIHBvciBleGVtcGxvOlxuICAgKlxuICAgKiBgYGBcbiAgICogIGltcG9ydCB7IGdlbmVyYWxFbiB9IGZyb20gJy4vaTE4bi9nZW5lcmFsLWVuJztcbiAgICogIGltcG9ydCB7IGdlbmVyYWxQdCB9IGZyb20gJy4vaTE4bi9nZW5lcmFsLXB0JztcbiAgICogLi4uXG4gICAqICBnZW5lcmFsOiB7XG4gICAqICAgIHB0OiBnZW5lcmFsUHQsXG4gICAqICAgIGVuOiBnZW5lcmFsRW4sXG4gICAqICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvdHJhbnNsYXRpb25zL2hjbS8nXG4gICAqICB9XG4gICAqIC4uLlxuICAgKiBgYGBcbiAgICogPiBDYXNvIGEgY29uc3RhbnRlIGNvbnRlbmhhIGFsZ3VtYSBsaXRlcmFsIHF1ZSBvIHNlcnZpw6dvIG7Do28gcG9zc3VhIHNlcsOhIHV0aWxpemFkbyBhIGxpdGVyYWwgZGEgY29uc3RhbnRlLlxuICAgKi9cbiAgY29udGV4dHM6IG9iamVjdDtcbn1cbiJdfQ==