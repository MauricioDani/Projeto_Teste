/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ThfComponentInjectorService } from './../thf-component-injector/thf-component-injector.service';
import { ThfNotificationBaseService } from './thf-notification-base.service';
import { ThfToasterOrientation } from './thf-toaster/thf-toaster-orientation.enum';
import { ThfToasterComponent } from './thf-toaster/thf-toaster.component';
import * as i0 from "@angular/core";
import * as i1 from "../thf-component-injector/thf-component-injector.service";
/**
 * \@docsExtends ThfNotificationBaseService
 *
 * \@example
 *
 * <example name="thf-notification-basic" title="Totvs Notification Basic">
 *  <file name="sample-thf-notification-basic/sample-thf-notification-basic.component.html"> </file>
 *  <file name="sample-thf-notification-basic/sample-thf-notification-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-notification-labs" title="Totvs Notification Labs">
 *  <file name="sample-thf-notification-labs/sample-thf-notification-labs.component.html"> </file>
 *  <file name="sample-thf-notification-labs/sample-thf-notification-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-notification-sales" title="Totvs Notification - Sales">
 *  <file name="sample-thf-notification-sales/sample-thf-notification-sales.component.html"> </file>
 *  <file name="sample-thf-notification-sales/sample-thf-notification-sales.component.ts"> </file>
 * </example>
 */
export class ThfNotificationService extends ThfNotificationBaseService {
    /**
     * @param {?} thfComponentInjector
     */
    constructor(thfComponentInjector) {
        super();
        this.thfComponentInjector = thfComponentInjector;
    }
    /**
     * @param {?} toaster
     * @return {?}
     */
    createToaster(toaster) {
        /** @type {?} */
        const componentRef = this.thfComponentInjector.createComponentInApplication(ThfToasterComponent);
        toaster.componentRef = componentRef;
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.configToaster(toaster);
        if (toaster.orientation === ThfToasterOrientation.Top) {
            this.stackTop.push(componentRef);
        }
        else {
            this.stackBottom.push(componentRef);
        }
        this.observableOnClose(componentRef);
        if (toaster.action === undefined) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.destroyToaster(componentRef);
            }), this.durationToaster);
        }
    }
    /**
     * @param {?} toaster
     * @return {?}
     */
    destroyToaster(toaster) {
        /** @type {?} */
        let stack;
        if (toaster.instance.orientation === ThfToasterOrientation.Top) {
            stack = this.stackTop;
        }
        else {
            stack = this.stackBottom;
        }
        /** @type {?} */
        const index = stack.indexOf(toaster);
        stack.splice(index, 1);
        this.thfComponentInjector.destroyComponentInApplication(toaster);
        for (let count = 0; count < stack.length; count++) {
            stack[count].instance.changePosition(count);
        }
    }
    /**
     * @private
     * @param {?} componentRef
     * @return {?}
     */
    observableOnClose(componentRef) {
        componentRef.instance.observableOnClose.subscribe((/**
         * @return {?}
         */
        () => {
            this.destroyToaster(componentRef);
        }));
    }
}
ThfNotificationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ThfNotificationService.ctorParameters = () => [
    { type: ThfComponentInjectorService }
];
/** @nocollapse */ ThfNotificationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ThfNotificationService_Factory() { return new ThfNotificationService(i0.ɵɵinject(i1.ThfComponentInjectorService)); }, token: ThfNotificationService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfNotificationService.prototype.thfComponentInjector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLW5vdGlmaWNhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi11aS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90aGYtbm90aWZpY2F0aW9uL3RoZi1ub3RpZmljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFnQixVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sNERBQTRELENBQUM7QUFDekcsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFN0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDbkYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUNBQXFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEIxRSxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsMEJBQTBCOzs7O0lBRXBFLFlBQW9CLG9CQUFpRDtRQUNuRSxLQUFLLEVBQUUsQ0FBQztRQURVLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBNkI7SUFFckUsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsT0FBbUI7O2NBQ3pCLFlBQVksR0FBc0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLDRCQUE0QixDQUFDLG1CQUFtQixDQUFDO1FBRW5ILE9BQU8sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRXBDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMvQyxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3QyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEtBQUsscUJBQXFCLENBQUMsR0FBRyxFQUFFO1lBQ3JELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2xDO2FBQU07WUFDTCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNyQztRQUVELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVyQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ2hDLFVBQVU7OztZQUFDLEdBQUcsRUFBRTtnQkFDZCxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3BDLENBQUMsR0FBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFDOzs7OztJQUVELGNBQWMsQ0FBQyxPQUFZOztZQUNyQixLQUFLO1FBRVQsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsS0FBSyxxQkFBcUIsQ0FBQyxHQUFHLEVBQUU7WUFDOUQsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDdkI7YUFBTTtZQUNMLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQzFCOztjQUVLLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUNwQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV2QixJQUFJLENBQUMsb0JBQW9CLENBQUMsNkJBQTZCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFakUsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDakQsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDOzs7Ozs7SUFFTyxpQkFBaUIsQ0FBQyxZQUFpQjtRQUN6QyxZQUFZLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLFNBQVM7OztRQUFDLEdBQUcsRUFBRTtZQUNyRCxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BDLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBdkRGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQTdCUSwyQkFBMkI7Ozs7Ozs7O0lBZ0N0QixzREFBeUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgVGhmQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlIH0gZnJvbSAnLi8uLi90aGYtY29tcG9uZW50LWluamVjdG9yL3RoZi1jb21wb25lbnQtaW5qZWN0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBUaGZOb3RpZmljYXRpb25CYXNlU2VydmljZSB9IGZyb20gJy4vdGhmLW5vdGlmaWNhdGlvbi1iYXNlLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGhmVG9hc3RlciB9IGZyb20gJy4vdGhmLXRvYXN0ZXIvdGhmLXRvYXN0ZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IFRoZlRvYXN0ZXJPcmllbnRhdGlvbiB9IGZyb20gJy4vdGhmLXRvYXN0ZXIvdGhmLXRvYXN0ZXItb3JpZW50YXRpb24uZW51bSc7XG5pbXBvcnQgeyBUaGZUb2FzdGVyQ29tcG9uZW50IH0gZnJvbSAnLi90aGYtdG9hc3Rlci90aGYtdG9hc3Rlci5jb21wb25lbnQnO1xuXG4vKipcbiAqIEBkb2NzRXh0ZW5kcyBUaGZOb3RpZmljYXRpb25CYXNlU2VydmljZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1ub3RpZmljYXRpb24tYmFzaWNcIiB0aXRsZT1cIlRvdHZzIE5vdGlmaWNhdGlvbiBCYXNpY1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtdGhmLW5vdGlmaWNhdGlvbi1iYXNpYy9zYW1wbGUtdGhmLW5vdGlmaWNhdGlvbi1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtbm90aWZpY2F0aW9uLWJhc2ljL3NhbXBsZS10aGYtbm90aWZpY2F0aW9uLWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1ub3RpZmljYXRpb24tbGFic1wiIHRpdGxlPVwiVG90dnMgTm90aWZpY2F0aW9uIExhYnNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1ub3RpZmljYXRpb24tbGFicy9zYW1wbGUtdGhmLW5vdGlmaWNhdGlvbi1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1ub3RpZmljYXRpb24tbGFicy9zYW1wbGUtdGhmLW5vdGlmaWNhdGlvbi1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInRoZi1ub3RpZmljYXRpb24tc2FsZXNcIiB0aXRsZT1cIlRvdHZzIE5vdGlmaWNhdGlvbiAtIFNhbGVzXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS10aGYtbm90aWZpY2F0aW9uLXNhbGVzL3NhbXBsZS10aGYtbm90aWZpY2F0aW9uLXNhbGVzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXRoZi1ub3RpZmljYXRpb24tc2FsZXMvc2FtcGxlLXRoZi1ub3RpZmljYXRpb24tc2FsZXMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBUaGZOb3RpZmljYXRpb25TZXJ2aWNlIGV4dGVuZHMgVGhmTm90aWZpY2F0aW9uQmFzZVNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGhmQ29tcG9uZW50SW5qZWN0b3I6IFRoZkNvbXBvbmVudEluamVjdG9yU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBjcmVhdGVUb2FzdGVyKHRvYXN0ZXI6IFRoZlRvYXN0ZXIpOiB2b2lkIHtcbiAgICBjb25zdCBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+ID0gdGhpcy50aGZDb21wb25lbnRJbmplY3Rvci5jcmVhdGVDb21wb25lbnRJbkFwcGxpY2F0aW9uKFRoZlRvYXN0ZXJDb21wb25lbnQpO1xuXG4gICAgdG9hc3Rlci5jb21wb25lbnRSZWYgPSBjb21wb25lbnRSZWY7XG5cbiAgICBjb21wb25lbnRSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5jb25maWdUb2FzdGVyKHRvYXN0ZXIpO1xuXG4gICAgaWYgKHRvYXN0ZXIub3JpZW50YXRpb24gPT09IFRoZlRvYXN0ZXJPcmllbnRhdGlvbi5Ub3ApIHtcbiAgICAgIHRoaXMuc3RhY2tUb3AucHVzaChjb21wb25lbnRSZWYpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YWNrQm90dG9tLnB1c2goY29tcG9uZW50UmVmKTtcbiAgICB9XG5cbiAgICB0aGlzLm9ic2VydmFibGVPbkNsb3NlKGNvbXBvbmVudFJlZik7XG5cbiAgICBpZiAodG9hc3Rlci5hY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuZGVzdHJveVRvYXN0ZXIoY29tcG9uZW50UmVmKTtcbiAgICAgIH0sIHRoaXMuZHVyYXRpb25Ub2FzdGVyKTtcbiAgICB9XG4gIH1cblxuICBkZXN0cm95VG9hc3Rlcih0b2FzdGVyOiBhbnkpOiB2b2lkIHtcbiAgICBsZXQgc3RhY2s7XG5cbiAgICBpZiAodG9hc3Rlci5pbnN0YW5jZS5vcmllbnRhdGlvbiA9PT0gVGhmVG9hc3Rlck9yaWVudGF0aW9uLlRvcCkge1xuICAgICAgc3RhY2sgPSB0aGlzLnN0YWNrVG9wO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFjayA9IHRoaXMuc3RhY2tCb3R0b207XG4gICAgfVxuXG4gICAgY29uc3QgaW5kZXggPSBzdGFjay5pbmRleE9mKHRvYXN0ZXIpO1xuICAgIHN0YWNrLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICB0aGlzLnRoZkNvbXBvbmVudEluamVjdG9yLmRlc3Ryb3lDb21wb25lbnRJbkFwcGxpY2F0aW9uKHRvYXN0ZXIpO1xuXG4gICAgZm9yIChsZXQgY291bnQgPSAwOyBjb3VudCA8IHN0YWNrLmxlbmd0aDsgY291bnQrKykge1xuICAgICAgc3RhY2tbY291bnRdLmluc3RhbmNlLmNoYW5nZVBvc2l0aW9uKGNvdW50KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9ic2VydmFibGVPbkNsb3NlKGNvbXBvbmVudFJlZjogYW55KSB7XG4gICAgY29tcG9uZW50UmVmLmluc3RhbmNlLm9ic2VydmFibGVPbkNsb3NlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmRlc3Ryb3lUb2FzdGVyKGNvbXBvbmVudFJlZik7XG4gICAgfSk7XG4gIH1cblxufVxuIl19