/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { getBrowserLanguage, getShortLanguage, isLanguage, thfLocaleDefault, thfLocales } from '../../utils/util';
import * as i0 from "@angular/core";
/** @type {?} */
const thfDefaultLanguage = 'THF_DEFAULT_LANGUAGE';
/** @type {?} */
const thfLocaleKey = 'THF_USER_LOCALE';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço responsável por gerenciar as linguagens da aplicação.
 */
export class ThfLanguageService {
    /**
     * @param {?} language
     * @return {?}
     */
    set languageDefault(language) {
        if (language && isLanguage(language)) {
            localStorage.setItem(thfDefaultLanguage, language);
        }
    }
    /**
     * @return {?}
     */
    get languageDefault() {
        return localStorage.getItem(thfDefaultLanguage);
    }
    /**
     * \@description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `ThfI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo THF (`pt`, `en` ou `es`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     * @return {?}
     */
    getLanguage() {
        /** @type {?} */
        const language = localStorage.getItem(thfLocaleKey) || this.languageDefault || getBrowserLanguage();
        return language && language.toLowerCase();
    }
    /**
     * \@description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     * @return {?}
     */
    getLanguageDefault() {
        return this.languageDefault;
    }
    /**
     * \@description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * \@default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     * @return {?}
     */
    getShortLanguage() {
        /** @type {?} */
        const language = this.getLanguage();
        /** @type {?} */
        const shortLanguage = getShortLanguage(language);
        return thfLocales.includes(shortLanguage) ? shortLanguage : thfLocaleDefault;
    }
    /**
     * \@description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    setLanguage(language) {
        if (!isLanguage(language)) {
            return;
        }
        localStorage.setItem(thfLocaleKey, language.toLowerCase());
    }
    /**
     * \@description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    setLanguageDefault(language) {
        this.languageDefault = language;
    }
}
ThfLanguageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ ThfLanguageService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ThfLanguageService_Factory() { return new ThfLanguageService(); }, token: ThfLanguageService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWxhbmd1YWdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXVpLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3RoZi1sYW5ndWFnZS90aGYtbGFuZ3VhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7TUFFNUcsa0JBQWtCLEdBQUcsc0JBQXNCOztNQUMzQyxZQUFZLEdBQUcsaUJBQWlCOzs7Ozs7OztBQVl0QyxNQUFNLE9BQU8sa0JBQWtCOzs7OztJQUU3QixJQUFJLGVBQWUsQ0FBQyxRQUFnQjtRQUNsQyxJQUFJLFFBQVEsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDcEMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNwRDtJQUNILENBQUM7Ozs7SUFFRCxJQUFJLGVBQWU7UUFDakIsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDbEQsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFvQkQsV0FBVzs7Y0FDSCxRQUFRLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLENBQUMsZUFBZSxJQUFJLGtCQUFrQixFQUFFO1FBRW5HLE9BQU8sUUFBUSxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM1QyxDQUFDOzs7Ozs7Ozs7O0lBVUQsa0JBQWtCO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDOzs7Ozs7Ozs7OztJQVdELGdCQUFnQjs7Y0FDUixRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRTs7Y0FDN0IsYUFBYSxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQztRQUVoRCxPQUFPLFVBQVUsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7SUFDL0UsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7OztJQWdCRCxXQUFXLENBQUMsUUFBZ0I7UUFDMUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN6QixPQUFPO1NBQ1I7UUFFRCxZQUFZLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUM3RCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O0lBZ0JELGtCQUFrQixDQUFDLFFBQWdCO1FBQ2pDLElBQUksQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDO0lBQ2xDLENBQUM7OztZQXpHRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGdldEJyb3dzZXJMYW5ndWFnZSwgZ2V0U2hvcnRMYW5ndWFnZSwgaXNMYW5ndWFnZSwgdGhmTG9jYWxlRGVmYXVsdCwgdGhmTG9jYWxlcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5jb25zdCB0aGZEZWZhdWx0TGFuZ3VhZ2UgPSAnVEhGX0RFRkFVTFRfTEFOR1VBR0UnO1xuY29uc3QgdGhmTG9jYWxlS2V5ID0gJ1RIRl9VU0VSX0xPQ0FMRSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2VydmnDp28gcmVzcG9uc8OhdmVsIHBvciBnZXJlbmNpYXIgYXMgbGluZ3VhZ2VucyBkYSBhcGxpY2HDp8Ojby5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVGhmTGFuZ3VhZ2VTZXJ2aWNlIHtcblxuICBzZXQgbGFuZ3VhZ2VEZWZhdWx0KGxhbmd1YWdlOiBzdHJpbmcpIHtcbiAgICBpZiAobGFuZ3VhZ2UgJiYgaXNMYW5ndWFnZShsYW5ndWFnZSkpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoZkRlZmF1bHRMYW5ndWFnZSwgbGFuZ3VhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBsYW5ndWFnZURlZmF1bHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhmRGVmYXVsdExhbmd1YWdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIHJldG9ybmFyIG8gaWRpb21hIGF0aXZvLlxuICAgKlxuICAgKiBBIGJ1c2NhIGRvIGlkaW9tYSBzZXLDoSBmZWl0YSBuYSBzZWd1aW50ZSBvcmRlbTpcbiAgICpcbiAgICogICAxIC0gbyBpZGlvbWEgcXVlIGZvaSBhcm1hemVuYWRvIG5vICpsb2NhbFN0b3JhZ2UqLCBhdHJhdsOpcyBkbyBtw6l0b2RvIGBzZXRMYW5ndWFnZSgpYCB1dGlsaXphZG8gcGVsbyBpMThuLlxuICAgKlxuICAgKiAgIDIgLSBvIHZhbG9yIGluc2VyaWRvIG5hcyBjb25maWd1cmHDp8O1ZXMgZG8gbcOzZHVsbyBkbyBpMThuIGF0cmF2w6lzIGRvIHBhcsOibWV0cm8gYGNvbmZpZ2AsIHNlbmRvIG8gaWRpb21hIGluc2VyaWRvXG4gICAqIG5hIHByb3ByaWVkYWRlIGBsYW5ndWFnZWAgZGEgaW50ZXJmYWNlIGBUaGZJMThuQ29uZmlnRGVmYXVsdGAuXG4gICAqXG4gICAqICAgMyAtIG8gaWRpb21hIGRvIG5hdmVnYWRvciB1dGlsaXphZG8uXG4gICAqXG4gICAqID4gQ2FzbyBvIGlkaW9tYSBkbyBuYXZlZ2Fkb3IgbsOjbyBzZWphIHN1cG9ydGFkbyBwZWxvIFRIRiAoYHB0YCwgYGVuYCBvdSBgZXNgKSwgc2Vyw6EgcmV0b3JuYWRvIHZhbG9yIGBwdGAuXG4gICAqXG4gICAqICoqUmV0b3JubzoqKiBgc3RyaW5nYCBjb20gYSBzaWdsYSBkbyBpZGlvbWEgYXRpdm8uXG4gICAqL1xuICBnZXRMYW5ndWFnZSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGxhbmd1YWdlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhmTG9jYWxlS2V5KSB8fCB0aGlzLmxhbmd1YWdlRGVmYXVsdCB8fCBnZXRCcm93c2VyTGFuZ3VhZ2UoKTtcblxuICAgIHJldHVybiBsYW5ndWFnZSAmJiBsYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgcmV0b3JuYXIgbyBpZGlvbWEgKmRlZmF1bHQqIGRhIGFwbGljYcOnw6NvIGRlZmluaWRvIG5hcyBjb25maWd1cmHDp8O1ZXMgZG8gbcOzZHVsbyBkbyBpMThuIGF0cmF2w6lzXG4gICAqIGRvIHBhcsOibWV0cm8gYGNvbmZpZ2AuXG4gICAqXG4gICAqICoqUmV0b3JubzoqKiBgc3RyaW5nYCBjb20gYSBzaWdsYSBkbyBpZGlvbWEgKmRlZmF1bHQqLlxuICAgKi9cbiAgZ2V0TGFuZ3VhZ2VEZWZhdWx0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubGFuZ3VhZ2VEZWZhdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgcmV0b3JuYXIgYSBhYnJldmlhw6fDo28gZG8gaWRpb21hIGF0aXZvIG5hIGFwbGljYcOnw6NvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgcHRgXG4gICAqXG4gICAqICoqUmV0b3JubzoqKiBgc3RyaW5nYCBjb20gYSBzaWdsYSBhYnJldmlhZGEgZG8gaWRpb21hIGF0aXZvLlxuICAgKi9cbiAgZ2V0U2hvcnRMYW5ndWFnZSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGxhbmd1YWdlID0gdGhpcy5nZXRMYW5ndWFnZSgpO1xuICAgIGNvbnN0IHNob3J0TGFuZ3VhZ2UgPSBnZXRTaG9ydExhbmd1YWdlKGxhbmd1YWdlKTtcblxuICAgIHJldHVybiB0aGZMb2NhbGVzLmluY2x1ZGVzKHNob3J0TGFuZ3VhZ2UpID8gc2hvcnRMYW5ndWFnZSA6IHRoZkxvY2FsZURlZmF1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE3DqXRvZG8gcGFyYSBzYWx2YXIgbyBpZGlvbWEgZGEgYXBsaWNhw6fDo28gbm8gKnN0b3JhZ2UqLCB1dGlsaXphZG8gcGVsbyBzZXJ2acOnbyBkbyBpMThuLlxuICAgKlxuICAgKiA+IEFvIGRlZmluaXIgdW0gaWRpb21hIHBvciBlc3RlIG3DqXRvZG8sIHRvZG9zIG9zIG3Ds2R1bG9zIGRhIGFwbGljYcOnw6NvIHV0aWxpemFyw6NvIG8gaWRpb21hIGRlZmluaWRvLlxuICAgKlxuICAgKiBAcGFyYW0gbGFuZ3VhZ2Ugc2lnbGEgZG8gaWRpb21hLlxuICAgKlxuICAgKiBFc3RhIHNpZ2xhIGRldmUgc2VyIGNvbXBvc3RhIHBvciBkdWFzIGxldHJhcyByZXByZXNlbnRhbmRvIG8gaWRpb21hLFxuICAgKiBwb2RlbmRvIHNlciBhZGljaW9uYWRvIG91dHJhcyBkdWFzIGxldHJhcyByZXByZXNlbnRhbmRvIG8gcGHDrXMsIHBvciBleGVtcGxvOiBgcHRgLCBgcHQtQlJgLCBgcHQtYnJgLCBgZW5gIG91IGBlbi1VU2AuXG4gICAqXG4gICAqID4gQ2FzbyBzZWphIGluZm9ybWFkbyB1bSB2YWxvciBkaWZlcmVudGUgZGVzdGUgcGFkcsOjbywgbyBtZXNtbyBzZXLDoSBpZ25vcmFkby5cbiAgICovXG4gIHNldExhbmd1YWdlKGxhbmd1YWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoIWlzTGFuZ3VhZ2UobGFuZ3VhZ2UpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhmTG9jYWxlS2V5LCBsYW5ndWFnZS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyBxdWUgZGVmaW5lIG8gaWRpb21hIGNvbmZpZ3VyYWRvIGEgcGFydGlyIGRvIHBhcsOibWV0cm8gYGNvbmZpZ2AgdXRpbGl6YWRvIHBlbG8gbcOzZHVsbyBkbyBpMThuLlxuICAgKlxuICAgKiA+IEFvIGRlZmluaXIgdW0gaWRpb21hIHBvciBlc3RlIHNlcnZpw6dvLCBhcGVuYXMgbyBtw7NkdWxvIGRvIGkxOG4gcmVmZXJlbnRlIGEgZXN0YSBjb25maWd1cmHDp8OjbyB1dGlsaXphcsOhIG8gaWRpb21hIGRlZmluaWRvLlxuICAgKlxuICAgKiBAcGFyYW0gbGFuZ3VhZ2Ugc2lnbGEgZG8gaWRpb21hLlxuICAgKlxuICAgKiBFc3RhIHNpZ2xhIGRldmUgc2VyIGNvbXBvc3RhIHBvciBkdWFzIGxldHJhcyByZXByZXNlbnRhbmRvIG8gaWRpb21hLFxuICAgKiBwb2RlbmRvIHNlciBhZGljaW9uYWRvIG91dHJhcyBkdWFzIGxldHJhcyByZXByZXNlbnRhbmRvIG8gcGHDrXMsIHBvciBleGVtcGxvOiBgcHRgLCBgcHQtQlJgLCBgcHQtYnJgLCBgZW5gIG91IGBlbi1VU2AuXG4gICAqXG4gICAqID4gQ2FzbyBzZWphIGluZm9ybWFkbyB1bSB2YWxvciBkaWZlcmVudGUgZGVzdGUgcGFkcsOjbywgbyBtZXNtbyBzZXLDoSBpZ25vcmFkby5cbiAgICovXG4gIHNldExhbmd1YWdlRGVmYXVsdChsYW5ndWFnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5sYW5ndWFnZURlZmF1bHQgPSBsYW5ndWFnZTtcbiAgfVxuXG59XG4iXX0=