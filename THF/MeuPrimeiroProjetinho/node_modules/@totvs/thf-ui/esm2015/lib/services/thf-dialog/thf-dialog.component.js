/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild } from '@angular/core';
import { browserLanguage, thfLocaleDefault } from '../../utils/util';
import { ThfDialogType } from './thf-dialog.enum';
import { ThfModalComponent } from '../../components/thf-modal/thf-modal.component';
/** @type {?} */
export const thfDialogAlertLiteralsDefault = {
    en: (/** @type {?} */ ({ ok: 'Ok' })),
    es: (/** @type {?} */ ({ ok: 'Ok' })),
    pt: (/** @type {?} */ ({ ok: 'Ok' }))
};
/** @type {?} */
export const thfDialogConfirmLiteralsDefault = {
    en: (/** @type {?} */ ({ cancel: 'Cancel', confirm: 'Confirm' })),
    es: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' })),
    pt: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' }))
};
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que serve como container do thf-dialog.service
 */
export class ThfDialogComponent {
    constructor() {
        // Objeto primary do thfModal
        this.primaryAction = { label: 'ok', action: (/**
             * @return {?}
             */
            () => { }) };
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.closeSubscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.closeSubscription = this.thfModal.onXClosed.subscribe((/**
         * @param {?} close
         * @return {?}
         */
        close => this.destroy()));
    }
    // Fecha o thfModal
    /**
     * @return {?}
     */
    close() {
        this.thfModal.close();
        this.destroy();
    }
    /**
     * @return {?}
     */
    destroy() {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    }
    // Insere os valores recebidos de this.open para o thfModal
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    configDialog(primaryLabel, primaryAction, secondaryLabel, secondaryAction) {
        this.primaryAction = {
            label: primaryLabel,
            action: (/**
             * @return {?}
             */
            () => {
                if (primaryAction) {
                    primaryAction();
                }
                this.close();
            })
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: (/**
                 * @return {?}
                 */
                () => {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    this.close();
                })
            };
        }
    }
    // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de di√°lago solicitado
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    open(dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        this.setDialogLiterals(dialogOptions, dialogType);
        switch (dialogType) {
            case ThfDialogType.Confirm: {
                this.configDialog(this.literalsConfirm.confirm, ((/** @type {?} */ (dialogOptions))).confirm, this.literalsConfirm.cancel, ((/** @type {?} */ (dialogOptions))).cancel);
                break;
            }
            case ThfDialogType.Alert: {
                this.configDialog(this.literalsAlert.ok, ((/** @type {?} */ (dialogOptions))).ok);
                break;
            }
        }
        this.thfModal.open();
    }
    /**
     * @private
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @return {?}
     */
    setDialogLiterals(dialogOptions, dialogType) {
        /** @type {?} */
        const alertLiterals = thfDialogAlertLiteralsDefault;
        /** @type {?} */
        const confirmLiterals = thfDialogConfirmLiteralsDefault;
        /** @type {?} */
        const literals = dialogOptions.literals;
        if (dialogType === ThfDialogType.Alert) {
            this.literalsAlert = Object.assign({}, alertLiterals[thfLocaleDefault], alertLiterals[browserLanguage()], literals);
        }
        else {
            this.literalsConfirm = Object.assign({}, confirmLiterals[thfLocaleDefault], confirmLiterals[browserLanguage()], literals);
        }
    }
}
ThfDialogComponent.decorators = [
    { type: Component, args: [{
                template: "<thf-modal\n  [t-title]=\"title\"\n  [t-primary-action]=\"primaryAction\"\n  [t-secondary-action]=\"secondaryAction\">\n  {{ message }}\n</thf-modal>\n"
            }] }
];
ThfDialogComponent.propDecorators = {
    thfModal: [{ type: ViewChild, args: [ThfModalComponent, { static: true },] }]
};
if (false) {
    /** @type {?} */
    ThfDialogComponent.prototype.thfModal;
    /** @type {?} */
    ThfDialogComponent.prototype.title;
    /** @type {?} */
    ThfDialogComponent.prototype.message;
    /** @type {?} */
    ThfDialogComponent.prototype.primaryAction;
    /** @type {?} */
    ThfDialogComponent.prototype.secondaryAction;
    /** @type {?} */
    ThfDialogComponent.prototype.literalsAlert;
    /** @type {?} */
    ThfDialogComponent.prototype.literalsConfirm;
    /**
     * @type {?}
     * @private
     */
    ThfDialogComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    ThfDialogComponent.prototype.closeSubscription;
}
//# sourceMappingURL=data:application/json;base64,