/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { ThfToasterBaseComponent } from './thf-toaster-base.component';
import { ThfToasterType } from './thf-toaster-type.enum';
import { ThfToasterOrientation } from './thf-toaster-orientation.enum';
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfToasterBaseComponent
 */
export class ThfToasterComponent extends ThfToasterBaseComponent {
    /**
     * @param {?} changeDetector
     * @param {?=} elementeRef
     */
    constructor(changeDetector, elementeRef) {
        super();
        this.changeDetector = changeDetector;
        this.elementeRef = elementeRef;
        /* Margem do Toaster referênte à sua orientação e posição*/
        this.margin = 20;
        /* Observable para monitorar o Close to Toaster */
        this.observableOnClose = new Subject();
        /* Mostra ou oculta o Toaster */
        this.showToaster = true;
        /* Posição do Toaster*/
        this.toasterPosition = 'thf-toaster-bottom';
    }
    /* Muda a posição do Toaster na tela*/
    /**
     * @param {?} position
     * @return {?}
     */
    changePosition(position) {
        this.elementeRef.nativeElement.style.display = 'table';
        this.margin = 6 + (44 * (position)) + position * 6;
        if (this.orientation === ThfToasterOrientation.Top) {
            this.toaster.nativeElement.style.top = this.margin + 'px';
        }
        else {
            this.toaster.nativeElement.style.bottom = this.margin + 'px';
        }
    }
    /* Fecha o componente Toaster */
    /**
     * @return {?}
     */
    close() {
        this.showToaster = false;
        this.observableOnClose.next(true);
    }
    /* Configura o Toaster com os atributos passados para ele */
    /**
     * @param {?} thfToaster
     * @return {?}
     */
    configToaster(thfToaster) {
        this.type = thfToaster.type;
        this.message = thfToaster.message;
        this.orientation = thfToaster.orientation;
        this.position = thfToaster.position;
        this.action = thfToaster.action;
        this.actionLabel = (thfToaster.actionLabel) ? thfToaster.actionLabel : 'Fechar';
        this.componentRef = thfToaster.componentRef;
        /* Muda a orientação do Toaster */
        if (this.orientation === ThfToasterOrientation.Top) {
            this.toasterPosition = 'thf-toaster-top';
        }
        /* Muda a posição do Toaster */
        this.changePosition(this.position);
        /* Switch para o tipo de Toaster */
        switch (this.type) {
            case ThfToasterType.Error: {
                this.toasterType = 'thf-toaster-error';
                this.icon = 'thf-icon-close';
                break;
            }
            case ThfToasterType.Information: {
                this.toasterType = 'thf-toaster-info';
                this.icon = 'thf-icon-info';
                break;
            }
            case ThfToasterType.Success: {
                this.toasterType = 'thf-toaster-success';
                this.icon = 'thf-icon-ok';
                break;
            }
            case ThfToasterType.Warning: {
                this.toasterType = 'thf-toaster-warning';
                this.icon = 'thf-icon-warning';
                break;
            }
        }
        this.changeDetector.detectChanges();
    }
    /**
     * @return {?}
     */
    getShowToaster() {
        return this.showToaster;
    }
    /**
     * @return {?}
     */
    getIcon() {
        return this.icon;
    }
    /**
     * @return {?}
     */
    getToasterPosition() {
        return this.toasterPosition;
    }
    /**
     * @return {?}
     */
    getToasterType() {
        return this.toasterType;
    }
    /* Chama a função passada pelo atributo `action` */
    /**
     * @return {?}
     */
    thfToasterAction() {
        this.action(this);
    }
}
ThfToasterComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-toaster',
                template: "<div #toaster *ngIf=\"getShowToaster()\"\n  class=\"thf-toaster {{ getToasterType() }} {{ getToasterPosition() }} thf-clickable\"\n  (click)=\"close()\">\n\n  <div class=\"thf-toaster-message\">\n    <span class=\"thf-icon {{ getIcon() }}\"></span> {{ message }}\n  </div>\n\n  <div *ngIf=\"action !== undefined\" (click)=\"thfToasterAction()\" class=\"thf-toaster-action\">\n    {{ actionLabel }}\n  </div>\n\n</div>\n"
            }] }
];
/** @nocollapse */
ThfToasterComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
ThfToasterComponent.propDecorators = {
    toaster: [{ type: ViewChild, args: ['toaster', { static: false },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfToasterComponent.prototype.icon;
    /**
     * @type {?}
     * @private
     */
    ThfToasterComponent.prototype.margin;
    /**
     * @type {?}
     * @private
     */
    ThfToasterComponent.prototype.observableOnClose;
    /**
     * @type {?}
     * @private
     */
    ThfToasterComponent.prototype.showToaster;
    /**
     * @type {?}
     * @private
     */
    ThfToasterComponent.prototype.toasterPosition;
    /**
     * @type {?}
     * @private
     */
    ThfToasterComponent.prototype.toasterType;
    /** @type {?} */
    ThfToasterComponent.prototype.toaster;
    /** @type {?} */
    ThfToasterComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    ThfToasterComponent.prototype.elementeRef;
}
//# sourceMappingURL=data:application/json;base64,