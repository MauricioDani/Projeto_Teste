(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/router'), require('@angular/common/http'), require('@angular/forms'), require('rxjs'), require('uuid'), require('@angular/platform-browser'), require('rxjs/operators'), require('@angular/animations')) :
    typeof define === 'function' && define.amd ? define('@totvs/thf-ui', ['exports', '@angular/core', '@angular/common', '@angular/router', '@angular/common/http', '@angular/forms', 'rxjs', 'uuid', '@angular/platform-browser', 'rxjs/operators', '@angular/animations'], factory) :
    (global = global || self, factory((global.totvs = global.totvs || {}, global.totvs['thf-ui'] = {}), global.ng.core, global.ng.common, global.ng.router, global.ng.common.http, global.ng.forms, global.rxjs, global.uuid$1, global.ng.platformBrowser, global.rxjs.operators, global.ng.animations));
}(this, function (exports, core, common, router, http, forms, rxjs, uuid$1, platformBrowser, operators, animations) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var THF_AVATAR_SIZES = ['xs', 'sm', 'md', 'lg', 'xl'];
    /** @type {?} */
    var THF_AVATAR_SIZE_DEFAULT = 'md';
    /**
     * \@description
     *
     * O componente `thf-avatar` é um container para imagens em miniatura, possui um formato redondo e cinco opções de
     * tamanho, pode ser utilizado para mostrar a foto do perfil de um usuário, entre outras possibilidades.
     *
     * Além de poder ser utilizado separadamente, é possível usar o `thf-avatar` juntamente com outros componentes e criar
     * layouts ricos e bem interessantes para os usuários, como por exemplo, uma lista de itens ou produtos.
     */
    var ThfAvatarBaseComponent = /** @class */ (function () {
        function ThfAvatarBaseComponent() {
            this._size = 'md';
        }
        Object.defineProperty(ThfAvatarBaseComponent.prototype, "size", {
            get: /**
             * @return {?}
             */
            function () {
                return this._size;
            },
            /**
             * @optional
             *
             * @description
             *
             * Tamanho de exibição do componente.
             *
             * Valores válidos:
             *  - `xs` (24x24)
             *  - `sm` (32x32)
             *  - `md` (64x64)
             *  - `lg` (96x96)
             *  - `xl` (144x144)
             *
             * @default `md`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Tamanho de exibição do componente.
             *
             * Valores válidos:
             *  - `xs` (24x24)
             *  - `sm` (32x32)
             *  - `md` (64x64)
             *  - `lg` (96x96)
             *  - `xl` (144x144)
             *
             * \@default `md`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._size = THF_AVATAR_SIZES.includes(value) ? value : THF_AVATAR_SIZE_DEFAULT;
            },
            enumerable: true,
            configurable: true
        });
        ThfAvatarBaseComponent.propDecorators = {
            src: [{ type: core.Input, args: ['t-src',] }],
            size: [{ type: core.Input, args: ['t-size',] }]
        };
        return ThfAvatarBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfAvatarBaseComponent
     *
     * \@example
     *
     * <example name="thf-avatar-basic" title="Totvs Avatar Basic" >
     *  <file name="sample-thf-avatar-basic/sample-thf-avatar-basic.component.html"> </file>
     *  <file name="sample-thf-avatar-basic/sample-thf-avatar-basic.component.ts"> </file>
     *  <file name="sample-thf-avatar-basic/sample-thf-avatar-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-thf-avatar-basic/sample-thf-avatar-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="thf-avatar-labs" title="Totvs Avatar Labs" >
     *  <file name="sample-thf-avatar-labs/sample-thf-avatar-labs.component.html"> </file>
     *  <file name="sample-thf-avatar-labs/sample-thf-avatar-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-avatar-business-card" title="Totvs Avatar - Business Card" >
     *  <file name="sample-thf-avatar-business-card/sample-thf-avatar-business-card.component.html"> </file>
     *  <file name="sample-thf-avatar-business-card/sample-thf-avatar-business-card.component.ts"> </file>
     * </example>
     */
    var ThfAvatarComponent = /** @class */ (function (_super) {
        __extends(ThfAvatarComponent, _super);
        function ThfAvatarComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        ThfAvatarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            if (!this.src) {
                this.src = undefined;
            }
        };
        /**
         * @return {?}
         */
        ThfAvatarComponent.prototype.onError = /**
         * @return {?}
         */
        function () {
            this.src = undefined;
        };
        ThfAvatarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-avatar',
                        template: "<div class=\"thf-avatar thf-avatar-{{ size }}\">\n  <ng-container *ngIf=\"src; then sourceImage; else defaultIcon\"></ng-container>\n</div>\n\n<ng-template #sourceImage>\n  <img class=\"thf-avatar-image\" [src]=\"src\" alt=\"\" (error)=\"onError()\">\n</ng-template>\n\n<ng-template #defaultIcon>\n  <span class=\"thf-icon thf-icon-user thf-avatar-default-icon\"></span>\n</ng-template>\n"
                    }] }
        ];
        return ThfAvatarComponent;
    }(ThfAvatarBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente thf-avatar.
     */
    var ThfAvatarModule = /** @class */ (function () {
        function ThfAvatarModule() {
        }
        ThfAvatarModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            ThfAvatarComponent
                        ],
                        exports: [
                            ThfAvatarComponent
                        ]
                    },] }
        ];
        return ThfAvatarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
     * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
     *
     * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
     * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
     *
     * Caso um endereço seja especificado na propriedade `t-favorite-service`, o componente permite ao usuário
     * favoritar a URL.
     *
     * Havendo necessidade de incluir parâmetros na requisição do serviço,
     * o componente dispõe da propriedade `t-params-service` que recebe um objeto contendo as informações.
     */
    var ThfBreadcrumbBaseComponent = /** @class */ (function () {
        function ThfBreadcrumbBaseComponent() {
            this.itemsView = [];
            this._items = [];
        }
        Object.defineProperty(ThfBreadcrumbBaseComponent.prototype, "items", {
            get: /**
             * @return {?}
             */
            function () {
                return this._items;
            },
            /**
             * @description
             *
             * Lista de itens do _breadcrumb_.
             *
             * **Exemplo:**
             * ```
             * { label: 'Thf Portal', link: 'portal' }
             * ```
             */
            set: /**
             * \@description
             *
             * Lista de itens do _breadcrumb_.
             *
             * **Exemplo:**
             * ```
             * { label: 'Thf Portal', link: 'portal' }
             * ```
             * @param {?} items
             * @return {?}
             */
            function (items) {
                this._items = items;
                this.itemsView = [].concat(items);
            },
            enumerable: true,
            configurable: true
        });
        ThfBreadcrumbBaseComponent.propDecorators = {
            favoriteService: [{ type: core.Input, args: ['t-favorite-service',] }],
            items: [{ type: core.Input, args: ['t-items',] }],
            paramsService: [{ type: core.Input, args: ['t-params-service',] }]
        };
        return ThfBreadcrumbBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfBreadcrumbBaseComponent
     *
     * \@example
     *
     * <example name="thf-breadcrumb-basic" title="Totvs Breadcrumb Basic">
     *  <file name="sample-thf-breadcrumb-basic/sample-thf-breadcrumb-basic.component.html"> </file>
     *  <file name="sample-thf-breadcrumb-basic/sample-thf-breadcrumb-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-breadcrumb-labs" title="Totvs Breadcrumb Labs">
     *  <file name="sample-thf-breadcrumb-labs/sample-thf-breadcrumb-labs.component.html"> </file>
     *  <file name="sample-thf-breadcrumb-labs/sample-thf-breadcrumb-labs.component.ts"> </file>
     * </example>
     */
    var ThfBreadcrumbComponent = /** @class */ (function (_super) {
        __extends(ThfBreadcrumbComponent, _super);
        function ThfBreadcrumbComponent(differs, element, renderer) {
            var _this = _super.call(this) || this;
            _this.element = element;
            _this.renderer = renderer;
            _this.showDropdown = false;
            _this.showDropdownToggle = false;
            _this._breadcrumbItemsLenght = 0;
            _this.calculatedElement = false;
            _this.hiddenWithoutResize = false;
            _this.initialized = false;
            _this.wasClickedonDropdown = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                /** @type {?} */
                var clickedOutIconDropdown = _this.checkClickOutElement(event, _this.dropdownIcon);
                if (clickedOutIconDropdown) {
                    _this.showDropdown = false;
                    _this.removeClickoutListener();
                }
            });
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        /**
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.initialized = true;
            this.initializeResizeListener();
        };
        /**
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;
            // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
            // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
            if (breadcrumbWidth && !this.calculatedElement && this.initialized) {
                this.initBreadcrumbSize();
            }
            if (this.hiddenWithoutResize) {
                this.debounceResize();
                this.hiddenWithoutResize = false;
            }
            this.checkChangeOnItems();
        };
        /**
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.removeClickoutListener();
            this.removeResizeListener();
        };
        /**
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.toggleDropdown = /**
         * @return {?}
         */
        function () {
            this.showDropdown = !this.showDropdown;
            this.initializeClickoutListener();
        };
        /**
         * @private
         * @param {?} event
         * @param {?} element
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.checkClickOutElement = /**
         * @private
         * @param {?} event
         * @param {?} element
         * @return {?}
         */
        function (event, element) {
            return element && !element.nativeElement.contains(event.target);
        };
        /**
         * @private
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.checkChangeOnItems = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.differ) {
                /** @type {?} */
                var changes = this.differ.diff(this.items);
                if (changes) {
                    this.calcBreadcrumbItemsWidth();
                    this.calculatedElement = false;
                }
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.calcBreadcrumb = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();
            /** @type {?} */
            var breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite);
            if (breadcrumb <= this._breadcrumbItemsLenght) {
                this.enableBreadcrumbResponsive();
            }
            else {
                this.disableBreadcrumbResponsive();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.getBreadcrumbFavoriteWidth = /**
         * @private
         * @return {?}
         */
        function () {
            return this.favoriteService ? this.element.nativeElement
                .querySelector('.thf-breadcrumb-favorite').offsetWidth + 20 : 0;
        };
        /**
         * @private
         * @param {?} breadcrumbFavorite
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.getBreadcrumbWidth = /**
         * @private
         * @param {?} breadcrumbFavorite
         * @return {?}
         */
        function (breadcrumbFavorite) {
            return this.element.nativeElement.querySelector('.thf-breadcrumb').offsetWidth - breadcrumbFavorite;
        };
        /**
         * @private
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.calcBreadcrumbItemsWidth = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var breadcrumbItem = this.element.nativeElement
                .querySelectorAll('.thf-breadcrumb-item, .thf-breadcrumb-item-unclickable');
            this._breadcrumbItemsLenght = Array.from(breadcrumbItem)
                .map((/**
             * @param {?} breadcrumb
             * @return {?}
             */
            function (breadcrumb) { return breadcrumb['offsetWidth']; }))
                .reduce((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) { return a + b; }), 16);
        };
        /**
         * @private
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.enableBreadcrumbResponsive = /**
         * @private
         * @return {?}
         */
        function () {
            this.showDropdownToggle = true;
            this.itemsView = this.items.slice(-2);
            this.dropdownItems = this.items.slice(0, -2).reverse();
        };
        /**
         * @private
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.disableBreadcrumbResponsive = /**
         * @private
         * @return {?}
         */
        function () {
            this.showDropdownToggle = false;
            this.itemsView = [].concat(this.items);
            this.showDropdown = false;
        };
        /**
         * @private
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.debounceResize = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.calculatedElement && !_this.hiddenWithoutResize && _this.breadcrumbElement.nativeElement.offsetWidth === 0) {
                    _this.hiddenWithoutResize = true;
                }
                else {
                    _this.calcBreadcrumb();
                }
            }), 50);
        };
        /**
         * @private
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.initBreadcrumbSize = /**
         * @private
         * @return {?}
         */
        function () {
            this.calcBreadcrumbItemsWidth();
            this.calcBreadcrumb();
            this.calculatedElement = true;
        };
        /**
         * @private
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.initializeClickoutListener = /**
         * @private
         * @return {?}
         */
        function () {
            this.clickoutListener = this.renderer.listen('document', 'click', this.wasClickedonDropdown);
        };
        /**
         * @private
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.initializeResizeListener = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.debounceResize();
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.removeClickoutListener = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfBreadcrumbComponent.prototype.removeResizeListener = /**
         * @private
         * @return {?}
         */
        function () {
            this.resizeListener();
        };
        ThfBreadcrumbComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-breadcrumb',
                        template: "<div class=\"thf-breadcrumb\" #breadcrumb>\n\n  <ul class=\"thf-breadcrumb-items\">\n\n    <li #dropdownIcon\n      *ngIf=\"showDropdownToggle\"\n      class=\"thf-breadcrumb-item thf-clickable\"\n      (click)=\"toggleDropdown()\">\n\n      <span class=\"thf-breadcrumb-icon-more thf-icon thf-icon-more\"></span>\n      <div class=\"thf-breadcrumb-arrow\"></div>\n    </li>\n\n    <div *ngFor=\"let item of itemsView, let itemIndex = index;\">\n      <thf-breadcrumb-item\n        [t-action]=\"item.action\"\n        [t-label]=\"item.label\"\n        [t-link]=\"item.link\"\n        [t-item-active]=\"itemIndex === (itemsView.length - 1)\">\n      </thf-breadcrumb-item>\n    </div>\n\n  </ul>\n\n  <thf-breadcrumb-favorite *ngIf=\"favoriteService\"\n    [t-favorite-service]=\"favoriteService\"\n    [t-item-active]=\"items[items.length - 1]\"\n    [t-params-service]=\"paramsService\">\n  </thf-breadcrumb-favorite>\n\n  <thf-breadcrumb-dropdown *ngIf=\"showDropdown\"\n    [t-items]=\"dropdownItems\">\n  </thf-breadcrumb-dropdown>\n\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfBreadcrumbComponent.ctorParameters = function () { return [
            { type: core.IterableDiffers },
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        ThfBreadcrumbComponent.propDecorators = {
            breadcrumbElement: [{ type: core.ViewChild, args: ['breadcrumb', { read: core.ElementRef, static: true },] }],
            dropdownIcon: [{ type: core.ViewChild, args: ['dropdownIcon', { read: core.ElementRef, static: false },] }]
        };
        return ThfBreadcrumbComponent;
    }(ThfBreadcrumbBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente que renderiza o dropdown do thf-breadcrumb.
     */
    var ThfBreadcrumbDropdownComponent = /** @class */ (function () {
        function ThfBreadcrumbDropdownComponent() {
        }
        ThfBreadcrumbDropdownComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-breadcrumb-dropdown',
                        template: "<ul class=\"thf-breadcrumb-dropdown\">\n  <li class=\"thf-breadcrumb-dropdown-item\" *ngFor=\"let item of items\" [routerLink]=\"item.link\">\n    {{ item.label }}\n  </li>\n</ul>\n"
                    }] }
        ];
        ThfBreadcrumbDropdownComponent.propDecorators = {
            items: [{ type: core.Input, args: ['t-items',] }]
        };
        return ThfBreadcrumbDropdownComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Serviço utilizado para favoritar/desfavoritar uma url no componente thf-breadcrumb.
     * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
     * objeto deve ser retornado.
     * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
     * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
     * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
     * junto com a requisição.
     *
     */
    var ThfBreadcrumbFavoriteService = /** @class */ (function () {
        function ThfBreadcrumbFavoriteService(http) {
            this.http = http;
        }
        Object.defineProperty(ThfBreadcrumbFavoriteService.prototype, "url", {
            get: /**
             * @return {?}
             */
            function () { return this._url; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfBreadcrumbFavoriteService.prototype, "bodyParams", {
            get: /**
             * @return {?}
             */
            function () { return this._bodyParams; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} url
         * @param {?} params
         * @param {?} item
         * @return {?}
         */
        ThfBreadcrumbFavoriteService.prototype.configService = /**
         * @param {?} url
         * @param {?} params
         * @param {?} item
         * @return {?}
         */
        function (url, params, item) {
            this._url = url;
            this._bodyParams = {
                isFavorite: false,
                url: item.link,
                params: params
            };
        };
        /**
         * @param {?} status
         * @return {?}
         */
        ThfBreadcrumbFavoriteService.prototype.sendStatusFavorite = /**
         * @param {?} status
         * @return {?}
         */
        function (status) {
            this.bodyParams['isFavorite'] = status;
            return this.http.post(this.url, this.bodyParams);
        };
        /**
         * @return {?}
         */
        ThfBreadcrumbFavoriteService.prototype.getFavorite = /**
         * @return {?}
         */
        function () {
            return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
        };
        ThfBreadcrumbFavoriteService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfBreadcrumbFavoriteService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return ThfBreadcrumbFavoriteService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente que renderiza o serviço de favoritar do thf-breadcrumb.
     */
    var ThfBreadcrumbFavoriteComponent = /** @class */ (function () {
        function ThfBreadcrumbFavoriteComponent(service) {
            this.service = service;
            this.favorite = false;
        }
        /**
         * @return {?}
         */
        ThfBreadcrumbFavoriteComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.service.configService(this.favoriteService, this.paramsService, this.itemActive);
            this.getStatusFavorite();
        };
        /**
         * @return {?}
         */
        ThfBreadcrumbFavoriteComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.getSubscription) {
                this.getSubscription.unsubscribe();
            }
            if (this.setSubscription) {
                this.setSubscription.unsubscribe();
            }
        };
        /**
         * @return {?}
         */
        ThfBreadcrumbFavoriteComponent.prototype.toggleFavoriteAction = /**
         * @return {?}
         */
        function () {
            this.favorite ? this.setStatusFavorite(false) : this.setStatusFavorite(true);
        };
        /**
         * @private
         * @return {?}
         */
        ThfBreadcrumbFavoriteComponent.prototype.getStatusFavorite = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.getSubscription = this.service.getFavorite().subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) { return _this.favorite = result.isFavorite; }));
        };
        /**
         * @private
         * @param {?} status
         * @return {?}
         */
        ThfBreadcrumbFavoriteComponent.prototype.setStatusFavorite = /**
         * @private
         * @param {?} status
         * @return {?}
         */
        function (status) {
            var _this = this;
            this.setSubscription = this.service.sendStatusFavorite(status).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) { return _this.favorite = result.isFavorite; }));
        };
        ThfBreadcrumbFavoriteComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-breadcrumb-favorite',
                        template: "<div class=\"thf-breadcrumb-favorite thf-clickable\" (click)=\"toggleFavoriteAction()\">\n\n  <span\n    class=\"thf-icon thf-icon-star thf-breadcrumb-favorite-star thf-clickable\"\n    [class.thf-breadcrumb-favorite-star-active]=\"favorite\">\n  </span>\n\n  <span class=\"thf-hidden-sm thf-breadcrumb-favorite-label\" *ngIf=\"favorite\">Desfavoritar</span>\n  <span class=\"thf-hidden-sm thf-breadcrumb-favorite-label\" *ngIf=\"!favorite\">Favoritar</span>\n</div>\n",
                        providers: [ThfBreadcrumbFavoriteService]
                    }] }
        ];
        /** @nocollapse */
        ThfBreadcrumbFavoriteComponent.ctorParameters = function () { return [
            { type: ThfBreadcrumbFavoriteService }
        ]; };
        ThfBreadcrumbFavoriteComponent.propDecorators = {
            favoriteService: [{ type: core.Input, args: ['t-favorite-service',] }],
            itemActive: [{ type: core.Input, args: ['t-item-active',] }],
            paramsService: [{ type: core.Input, args: ['t-params-service',] }]
        };
        return ThfBreadcrumbFavoriteComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente que renderiza cada item do thf-breadcrumb.
     */
    var ThfBreadcrumbItemComponent = /** @class */ (function () {
        function ThfBreadcrumbItemComponent() {
            // Especifica se item é o link ativo.
            this.itemActive = false;
        }
        ThfBreadcrumbItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-breadcrumb-item',
                        template: "<li *ngIf=\"!itemActive\"\n  [class.thf-breadcrumb-item]=\"link || action\"\n  [class.thf-breadcrumb-item-unclickable]=\"!link && !action\">\n\n  <a *ngIf=\"link\" [routerLink]=\"link\">\n    <label class=\"thf-breadcrumb-label\">{{ label }}</label>\n    <div class=\"thf-breadcrumb-arrow\"></div>\n  </a>\n\n  <a *ngIf=\"!link && action\" (click)=\"action(label)\">\n    <label class=\"thf-breadcrumb-label\">{{ label }}</label>\n    <div class=\"thf-breadcrumb-arrow\"></div>\n  </a>\n\n  <a *ngIf=\"!link && !action\">\n    <label class=\"thf-breadcrumb-label\">{{ label }}</label>\n    <div class=\"thf-breadcrumb-arrow\"></div>\n  </a>\n</li>\n\n<li *ngIf=\"itemActive\" class=\"thf-breadcrumb-item-unclickable\">\n  <label class=\"thf-breadcrumb-label\">{{ label }}</label>\n</li>\n"
                    }] }
        ];
        ThfBreadcrumbItemComponent.propDecorators = {
            action: [{ type: core.Input, args: ['t-action',] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            link: [{ type: core.Input, args: ['t-link',] }],
            itemActive: [{ type: core.Input, args: ['t-item-active',] }]
        };
        return ThfBreadcrumbItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente thf-breadcrumb.
     *
     */
    var ThfBreadcrumbModule = /** @class */ (function () {
        function ThfBreadcrumbModule() {
        }
        ThfBreadcrumbModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            router.RouterModule
                        ],
                        declarations: [
                            ThfBreadcrumbComponent,
                            ThfBreadcrumbDropdownComponent,
                            ThfBreadcrumbFavoriteComponent,
                            ThfBreadcrumbItemComponent
                        ],
                        exports: [ThfBreadcrumbComponent]
                    },] }
        ];
        return ThfBreadcrumbModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // Idiomas suportados pelas páginas
    /** @type {?} */
    var thfLocales = ['pt', 'en', 'es'];
    // Idioma padrão
    /** @type {?} */
    var thfLocaleDefault = 'pt';
    /**
     * @deprecated
     * Utilize o método `getShortBrowserLanguage`.
     *
     * \@description
     * Retorna idioma do browser ou o idioma padrão.
     * @return {?}
     */
    function browserLanguage() {
        return getShortBrowserLanguage();
    }
    /**
     * Retorna o idioma atual do navegador
     * @return {?}
     */
    function getBrowserLanguage() {
        // navigator.userLanguage is the value for IE10
        /** @type {?} */
        var language = navigator.language || navigator['userLanguage'];
        /** @type {?} */
        var shortLanguage = getShortLanguage(language);
        return thfLocales.includes(shortLanguage) ? language : thfLocaleDefault;
    }
    /**
     * Retorna o idioma do navegador, com somente as duas primeiras letras. Por exemplo: "pt" ou "es".
     *
     * Caso o valor retornado pelo navegador não estiver dentro dos idiomas suportados pelo THF,
     * será retornado a linguagem padrão (thfLocaleDefault).
     * @return {?}
     */
    function getShortBrowserLanguage() {
        return getShortLanguage(getBrowserLanguage());
    }
    /**
     * Retorna o idioma com somente a abreviação do idioma (duas primeiras letras).
     * Por exemplo: "pt" ou "es".
     *
     * \@default pt
     * @param {?} language {string} linguagem.
     *
     * @return {?} sigla do idioma padrão {string}.
     *
     */
    function getShortLanguage(language) {
        return (language || thfLocaleDefault).toLowerCase().substring(0, 2);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isLanguage(value) {
        /** @type {?} */
        var languageRegex = new RegExp('^[a-z]{2}(\-[a-z]{2})?$', 'i');
        return languageRegex.test(value);
    }
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    function reloadCurrentPage() {
        window.location.assign(location.href);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    function convertToBoolean(val) {
        if (typeof val === 'string') {
            val = val.toLowerCase().trim();
            return (val === 'true' || val === 'on' || val === '');
        }
        if (typeof val === 'number') {
            return val === 1;
        }
        return !!val;
    }
    /**
     * @param {?} value
     * @param {?=} valueDefault
     * @return {?}
     */
    function convertToInt(value, valueDefault) {
        /** @type {?} */
        var validNumber = parseInt(value, 10);
        /** @type {?} */
        var validDefaultValue = parseInt(valueDefault, 10);
        /** @type {?} */
        var defaultValue = validDefaultValue || validDefaultValue === 0 ? validDefaultValue : undefined;
        return validNumber || validNumber === 0 ? validNumber : defaultValue;
    }
    /**
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    function isTypeof(object, type) {
        return typeof object === type;
    }
    /**
     *
     * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
     * ou a referência da mesma.
     *
     * @param {?} context Contexto do qual a função será executada.
     * @param {?=} param
     * @return {?}
     */
    function callFunction(fn, context, param) {
        if (isTypeof(fn, 'function')) {
            fn.call(context, param);
        }
        else {
            context[fn](param);
        }
    }
    /**
     * @param {?} value
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    function convertIsoToDate(value, start, end) {
        if (value) {
            /** @type {?} */
            var day = parseInt(value.substring(8, 10), 10);
            /** @type {?} */
            var month = parseInt(value.substring(5, 7), 10);
            /** @type {?} */
            var year = parseInt(value.substring(0, 4), 10);
            if (start) {
                /** @type {?} */
                var date = new Date(year, month - 1, day, 0, 0, 0);
                setYearFrom0To100(date, year);
                return date;
            }
            else if (end) {
                /** @type {?} */
                var date = new Date(year, month - 1, day, 23, 59, 59);
                setYearFrom0To100(date, year);
                return date;
            }
            else {
                /** @type {?} */
                var milliseconds = Date.parse(value);
                /** @type {?} */
                var timezone = new Date().getTimezoneOffset() * 60000;
                return new Date(milliseconds + timezone);
            }
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    function convertDateToISODate(date) {
        if (date) {
            /** @type {?} */
            var getMonth = date.getMonth() + 1;
            /** @type {?} */
            var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
            /** @type {?} */
            var month = getMonth < 10 ? '0' + getMonth : getMonth;
            /** @type {?} */
            var year = formatYear(date.getFullYear());
            return year + '-' + month + '-' + day;
        }
        else {
            return null;
        }
    }
    /**
     * @param {?} date
     * @param {?=} time
     * @return {?}
     */
    function convertDateToISOExtended(date, time) {
        if (date) {
            /** @type {?} */
            var getMonth = date.getMonth() + 1;
            /** @type {?} */
            var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
            /** @type {?} */
            var month = getMonth < 10 ? '0' + getMonth : getMonth;
            /** @type {?} */
            var year = formatYear(date.getFullYear());
            /** @type {?} */
            var dateString = date.toString();
            if (time !== null) {
                return year + '-' + month + '-' + day + time;
            }
            else {
                return year + '-' + month + '-' + day + 'T' + dateString.substring(16, 24) +
                    dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
            }
        }
        else {
            return null;
        }
    }
    /**
     * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
     * @param {?} year Ano
     * @return {?}
     */
    function formatYear(year) {
        if (year >= 1000) {
            return year.toString();
        }
        if (year > 99 && year < 1000) {
            return "0" + year;
        }
        if (year > 9 && year < 100) {
            return "00" + year;
        }
        if (year >= 0 && year < 10) {
            return "000" + year;
        }
    }
    // Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
    /**
     * @return {?}
     */
    function isIEOrEdge() {
        /** @type {?} */
        var userAgent = window.navigator.userAgent;
        return /msie\s|trident\/|edge\//i.test(userAgent);
    }
    // Verifica qual o dispositivo que está sendo usado
    /**
     * @return {?}
     */
    function isMobile() {
        /** @type {?} */
        var userAgent = window.navigator.userAgent;
        return userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone/i);
    }
    /**
     * @param {?} value
     * @param {?} comparedValue
     * @return {?}
     */
    function isEquals(value, comparedValue) {
        return JSON.stringify(value) === JSON.stringify(comparedValue);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    function isKeyCodeEnter(event) {
        return event.keyCode === 13 || event.which === 13;
    }
    /**
     * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
     * @param {?} date Data
     * @param {?} year Ano original
     * @return {?}
     */
    function setYearFrom0To100(date, year) {
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
    }
    /**
     * @param {?} options
     * @param {?} property
     * @return {?}
     */
    function sortOptionsByProperty(options, property) {
        options.sort((/**
         * @param {?} optionA
         * @param {?} optionB
         * @return {?}
         */
        function (optionA, optionB) {
            optionA = optionA[property].toString().toLowerCase();
            optionB = optionB[property].toString().toLowerCase();
            if (optionA < optionB) {
                return -1;
            }
            if (optionA > optionB) {
                return 1;
            }
            return 0;
        }));
    }
    /**
     * @param {?} list
     * @return {?}
     */
    function removeDuplicatedOptions(list) {
        var _loop_1 = function (i) {
            if (i === 0) {
                return out_i_1 = i, "continue";
            }
            if (list.findIndex((/**
             * @param {?} op
             * @return {?}
             */
            function (op) { return op.value === list[i].value; })) !== i) {
                list.splice(i, 1);
                i--;
            }
            out_i_1 = i;
        };
        var out_i_1;
        for (var i = 0; i < list.length; i++) {
            _loop_1(i);
            i = out_i_1;
        }
    }
    /**
     * @param {?} list
     * @return {?}
     */
    function removeUndefinedAndNullOptions(list) {
        for (var i = 0; i < list.length; i++) {
            if (list[i].value === undefined || list[i].value === null) {
                list.splice(i, 1);
                i--;
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function validValue(value) {
        return (value !== null && value !== undefined && value !== '') || value === false;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    function isExternalLink(url) {
        return url ? url.startsWith('http') : false;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    function openExternalLink(url) {
        window.open(url, '_blank');
    }
    /**
     * @param {?} link
     * @return {?}
     */
    function getFormattedLink(link) {
        /** @type {?} */
        var formattedLink = '';
        // Retira todos os pontos no começo da URL.
        if (link) {
            formattedLink = link.replace(/^(\.)+/g, '');
        }
        // Verifica se foi utilizado uma rota que não comece com barra.
        if (!formattedLink.startsWith('/')) {
            formattedLink = '/'.concat(formattedLink);
        }
        return formattedLink;
    }
    /**
     * Método responsável por ordenar dois valores.
     *
     * @param {?} leftSide Primeiro valor a ser comparado.
     * @param {?} rightSide Segundo valor a ser comparado.
     * @param {?=} ascending Determina se será em ordem ascendente ou descendente.
     * @return {?}
     */
    function sortValues(leftSide, rightSide, ascending) {
        if (ascending === void 0) { ascending = true; }
        if (ascending) {
            if (leftSide < rightSide) {
                return -1;
            }
            else if (leftSide > rightSide) {
                return 1;
            }
        }
        else if (ascending === false) {
            if (leftSide < rightSide) {
                return 1;
            }
            else if (leftSide > rightSide) {
                return -1;
            }
        }
        return 0;
    }
    /**
     * @param {?} date
     * @param {?} dateStart
     * @param {?} dateEnd
     * @return {?}
     */
    function validateDateRange(date, dateStart, dateEnd) {
        if (dateStart && dateEnd) {
            return (date >= dateStart && date <= dateEnd);
        }
        else if (dateStart && !dateEnd) {
            return (date >= dateStart);
        }
        else if (!dateStart && dateEnd) {
            return (date <= dateEnd);
        }
        else {
            return true;
        }
    }
    /**
     * @return {?}
     */
    function uuid() {
        /**
         * @return {?}
         */
        function hex4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return hex4() + hex4() + '-' + hex4() + '-' + hex4() + '-' +
            hex4() + '-' + hex4() + hex4() + hex4();
    }
    /**
     * @param {?} text
     * @return {?}
     */
    function capitalizeFirstLetter(text) {
        return "" + text.charAt(0).toUpperCase() + text.slice(1);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var THF_BUTTON_TYPES = ['default', 'primary', 'danger', 'link'];
    /** @type {?} */
    var THF_BUTTON_TYPE_DEFAULT = 'default';
    /**
     * \@description
     *
     * O `thf-button` permite que o usuário execute ações predefinidas pelo desenvolvedor.
     *
     * Através dos tipos, é possível identificar a importância de cada ação, sendo ela primária (`primary`) ou até mesmo uma
     * ação irreversível (`danger`), como a exclusão de um registro.
     *
     * #### Boas práticas
     *
     * - Evite `labels` extensos que quebram o layout do `thf-button`, use `labels` diretos, curtos e intuitivos.
     * - Utilize apenas um `thf-button` configurado como `primary` por página.
     * - Para ações irreversíveis use sempre o tipo `danger`.
     */
    var ThfButtonBaseComponent = /** @class */ (function () {
        function ThfButtonBaseComponent() {
            this._disabled = false;
            this._loading = false;
            this._small = false;
            this._type = 'default';
            /**
             * Ação que será executada quando o usuário clicar sobre o `thf-button`.
             */
            this.click = new core.EventEmitter();
        }
        Object.defineProperty(ThfButtonBaseComponent.prototype, "loading", {
            get: /**
             * @return {?}
             */
            function () {
                return this._loading;
            },
            /**
             * @optional
             *
             * @description
             *
             * Exibe um ícone de carregamento à esquerda do _label_ do botão.
             *
             * > Quando esta propriedade estiver habilitada, desabilitará o botão.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Exibe um ícone de carregamento à esquerda do _label_ do botão.
             *
             * > Quando esta propriedade estiver habilitada, desabilitará o botão.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._loading = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfButtonBaseComponent.prototype, "small", {
            get: /**
             * @return {?}
             */
            function () {
                return this._small;
            },
            /**
             * @optional
             *
             * @description
             *
             * Deixa o botão menor.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Deixa o botão menor.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._small = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfButtonBaseComponent.prototype, "type", {
            get: /**
             * @return {?}
             */
            function () {
                return this._type;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o estilo do `thf-button`.
             *
             * Valore válidos:
             *  - `default`: estilo padrão do `thf-button`.
             *  - `primary`: deixa o `thf-button` com destaque, deve ser usado para ações primárias.
             *  - `danger`: deve ser usado para ações que o usuário precisa ter cuidado ao executa-lá.
             *  - `link`: o `thf-button` recebe o estilo de um link.
             *
             * @default `default`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define o estilo do `thf-button`.
             *
             * Valore válidos:
             *  - `default`: estilo padrão do `thf-button`.
             *  - `primary`: deixa o `thf-button` com destaque, deve ser usado para ações primárias.
             *  - `danger`: deve ser usado para ações que o usuário precisa ter cuidado ao executa-lá.
             *  - `link`: o `thf-button` recebe o estilo de um link.
             *
             * \@default `default`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._type = THF_BUTTON_TYPES.includes(value) ? value : THF_BUTTON_TYPE_DEFAULT;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfButtonBaseComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o `thf-button` e não permite que o usuário interaja com o mesmo.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Desabilita o `thf-button` e não permite que o usuário interaja com o mesmo.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._disabled = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        ThfButtonBaseComponent.propDecorators = {
            label: [{ type: core.Input, args: ['t-label',] }],
            loading: [{ type: core.Input, args: ['t-loading',] }],
            icon: [{ type: core.Input, args: ['t-icon',] }],
            small: [{ type: core.Input, args: ['t-small',] }],
            type: [{ type: core.Input, args: ['t-type',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            click: [{ type: core.Output, args: ['t-click',] }]
        };
        return ThfButtonBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfButtonBaseComponent
     *
     * \@example
     *
     * <example name="thf-button-basic" title="Totvs Button Basic">
     *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.html"> </file>
     *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.ts"> </file>
     *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-thf-button-basic/sample-thf-button-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="thf-button-labs" title="Totvs Button Labs">
     *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.html"> </file>
     *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.ts"> </file>
     *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.e2e-spec.ts"> </file>
     *  <file name="sample-thf-button-labs/sample-thf-button-labs.component.po.ts"> </file>
     * </example>
     */
    var ThfButtonComponent = /** @class */ (function (_super) {
        __extends(ThfButtonComponent, _super);
        function ThfButtonComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        ThfButtonComponent.prototype.onClick = /**
         * @return {?}
         */
        function () {
            this.click.emit(null);
        };
        ThfButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-button',
                        template: "<button\n  class=\"thf-button thf-text-ellipsis\"\n  type=\"button\"\n  [class.thf-button-danger]=\"type === 'danger'\"\n  [class.thf-button-link]=\"type === 'link'\"\n  [class.thf-button-primary]=\"type === 'primary'\"\n  [class.thf-button-sm] = \"small\"\n  [class.thf-clickable]=\"type === 'link'\"\n  [disabled]=\"disabled || loading\"\n  (click)=\"onClick()\">\n\n  <span *ngIf=\"loading\" class=\"thf-icon thf-button-loading-icon\"></span>\n  <span *ngIf=\"icon\" class=\"thf-icon {{ icon }}\" aria-hidden=\"true\"></span>\n  <span *ngIf=\"label\" class=\"thf-button-label\">{{ label }}</span>\n</button>\n"
                    }] }
        ];
        return ThfButtonComponent;
    }(ThfButtonBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente thf-button.
     */
    var ThfButtonModule = /** @class */ (function () {
        function ThfButtonModule() {
        }
        ThfButtonModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            ThfButtonComponent
                        ],
                        exports: [
                            ThfButtonComponent
                        ]
                    },] }
        ];
        return ThfButtonModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     * \@description
     *
     * Serviço responsável por gerenciar as posições de um elemento em relação a um elemento alvo. Ele pode receber as
     * seguintes posições:
     *
     * - `right`: Posiciona o elemento no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o elemento no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o elemento no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o elemento abaixo do componente alvo.
     * - `bottom-left`: Posiciona o elemento abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o elemento abaixo e à direita do componente alvo.
     * - `left`: Posiciona o elemento no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o elemento no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o elemento no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o elemento acima do componente alvo.
     * - `top-right`: Posiciona o elemento acima e à direita do componente alvo.
     * - `top-left`: Posiciona o elemento acima e à esquerda do componente alvo.
     *
     * Caso o elemento não caiba na tela na posição indicada ele será rotacionado automaticamente para se adequar,
     * inicialmente no lado definido como padrão e em seguida seguindo o sentido horário.
     * @type {?}
     */
    var thfControlPositionSidesDefault = [
        'bottom', 'bottom-left', 'bottom-right',
        'left', 'left-top', 'left-bottom',
        'top', 'top-right', 'top-left',
        'right', 'right-bottom', 'right-top'
    ];
    var ThfControlPositionService = /** @class */ (function () {
        function ThfControlPositionService() {
            this.differenceDiagonalToWidthArrow = 3;
            this.isSetElementWidth = false;
            // offset da seta em relação ao canto do componente
            this.offsetArrow = 12;
        }
        /**
         * @description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
         *
         * @param value posição para exibição do elemento
         */
        /**
         * \@description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
         *
         * @param {?} value posição para exibição do elemento
         * @return {?}
         */
        ThfControlPositionService.prototype.adjustPosition = /**
         * \@description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
         *
         * @param {?} value posição para exibição do elemento
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var position = value || 'bottom';
            this.elementPosition(position);
            this.customPositions && this.customPositions.length ? this.adjustCustomPosition(position) : this.adjustDefaultPosition(position);
        };
        /**
         * @description Retorna a direção da seta, conforme a posição do elemento.
         */
        /**
         * \@description Retorna a direção da seta, conforme a posição do elemento.
         * @return {?}
         */
        ThfControlPositionService.prototype.getArrowDirection = /**
         * \@description Retorna a direção da seta, conforme a posição do elemento.
         * @return {?}
         */
        function () {
            return this.arrowDirection;
        };
        /**
         * @description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
         *
         * @param element elemento que será exibido
         * @param elementOffset offSet do elemento
         * @param targetElement elemento de onde deve partir a exibição
         * @param customPositions posições que sobrescreve as posições padrões
         * @param isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
         * @param isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
         */
        /**
         * \@description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
         *
         * @param {?} element elemento que será exibido
         * @param {?} elementOffset offSet do elemento
         * @param {?} targetElement elemento de onde deve partir a exibição
         * @param {?=} customPositions posições que sobrescreve as posições padrões
         * @param {?=} isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
         * @param {?=} isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
         * @return {?}
         */
        ThfControlPositionService.prototype.setElements = /**
         * \@description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
         *
         * @param {?} element elemento que será exibido
         * @param {?} elementOffset offSet do elemento
         * @param {?} targetElement elemento de onde deve partir a exibição
         * @param {?=} customPositions posições que sobrescreve as posições padrões
         * @param {?=} isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
         * @param {?=} isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
         * @return {?}
         */
        function (element, elementOffset, targetElement, customPositions, isSetElementWidth, isCornerAligned) {
            if (isSetElementWidth === void 0) { isSetElementWidth = false; }
            if (isCornerAligned === void 0) { isCornerAligned = false; }
            this.element = (element instanceof core.ElementRef) ? element.nativeElement : element;
            this.targetElement = (targetElement instanceof core.ElementRef) ? targetElement.nativeElement : targetElement;
            this.elementOffset = elementOffset;
            this.customPositions = customPositions;
            this.isSetElementWidth = isSetElementWidth;
            this.isCornerAligned = isCornerAligned;
        };
        /**
         * @private
         * @param {?} position
         * @return {?}
         */
        ThfControlPositionService.prototype.adjustCustomPosition = /**
         * @private
         * @param {?} position
         * @return {?}
         */
        function (position) {
            /** @type {?} */
            var positionLength = this.customPositions.length;
            /** @type {?} */
            var sidesCount = 0;
            while (sidesCount++ < positionLength) {
                if (this.overflowAllSides(position)) {
                    position = this.nextPosition(position, this.customPositions);
                    this.elementPosition(position);
                }
            }
        };
        /**
         * @private
         * @param {?} position
         * @return {?}
         */
        ThfControlPositionService.prototype.adjustDefaultPosition = /**
         * @private
         * @param {?} position
         * @return {?}
         */
        function (position) {
            /** @type {?} */
            var mainPositions = this.getMainPositions();
            /** @type {?} */
            var mainPositionLength = mainPositions.length;
            /** @type {?} */
            var mainSidesCount = 0;
            while (mainSidesCount++ < mainPositionLength) {
                /** @type {?} */
                var mainPosition = this.getMainPosition(position);
                this.elementPosition(position);
                if (this.overflowMain(mainPosition)) {
                    position = this.nextPosition(mainPosition, mainPositions);
                    continue;
                }
                else if (this.overflowAllSides(position)) {
                    this.verifySubPositions(position);
                    return;
                }
                return;
            }
        };
        /**
         * @private
         * @param {?} position
         * @return {?}
         */
        ThfControlPositionService.prototype.elementPosition = /**
         * @private
         * @param {?} position
         * @return {?}
         */
        function (position) {
            this.isCornerAligned ? this.setAlignedElementPosition(position) : this.setElementPosition(position);
        };
        /**
         * @private
         * @param {?} position
         * @return {?}
         */
        ThfControlPositionService.prototype.getMainPosition = /**
         * @private
         * @param {?} position
         * @return {?}
         */
        function (position) {
            return (position.indexOf('-') > -1) ? position.substring(0, position.indexOf('-')) : position;
        };
        /**
         * @private
         * @return {?}
         */
        ThfControlPositionService.prototype.getMainPositions = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var defaultMainPositions = ['top', 'right', 'bottom', 'left'];
            return this.customPositions && this.customPositions.length ?
                this.getMainPositionsByCustomPositions(this.customPositions) : defaultMainPositions;
        };
        /**
         * @private
         * @param {?} customPositions
         * @return {?}
         */
        ThfControlPositionService.prototype.getMainPositionsByCustomPositions = /**
         * @private
         * @param {?} customPositions
         * @return {?}
         */
        function (customPositions) {
            /** @type {?} */
            var mainPositions = [];
            /** @type {?} */
            var customPositionsLength = customPositions.length;
            for (var i = 0; i < customPositionsLength; i++) {
                /** @type {?} */
                var position = customPositions[i];
                /** @type {?} */
                var mainPosition = this.getMainPosition(position);
                if (!mainPositions.includes(mainPosition)) {
                    mainPositions.push(mainPosition);
                }
            }
            return mainPositions;
        };
        /**
         * @private
         * @return {?}
         */
        ThfControlPositionService.prototype.getOverflows = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var sizesAndPositions = this.getSizesAndPositions();
            return {
                right: (sizesAndPositions.element.right > sizesAndPositions.window.innerWidth),
                top: (sizesAndPositions.element.top <= 0),
                left: (sizesAndPositions.element.left <= 0),
                bottom: (sizesAndPositions.element.bottom > sizesAndPositions.window.innerHeight)
            };
        };
        /**
         * @private
         * @return {?}
         */
        ThfControlPositionService.prototype.getSizesAndPositions = /**
         * @private
         * @return {?}
         */
        function () {
            return {
                window: {
                    scrollY: window.scrollY,
                    scrollX: window.scrollX,
                    innerWidth: window.innerWidth,
                    innerHeight: window.innerHeight
                },
                element: this.element.getBoundingClientRect(),
                target: this.targetElement ? this.targetElement.getBoundingClientRect() : { top: 0, bottom: 0, right: 0, left: 0 }
            };
        };
        /**
         * @private
         * @param {?} position
         * @param {?=} positions
         * @return {?}
         */
        ThfControlPositionService.prototype.nextPosition = /**
         * @private
         * @param {?} position
         * @param {?=} positions
         * @return {?}
         */
        function (position, positions) {
            if (positions === void 0) { positions = []; }
            /** @type {?} */
            var index = positions.indexOf(position);
            /** @type {?} */
            var nextIndex = index + 1;
            if (index > -1 && nextIndex < positions.length) {
                return positions[nextIndex];
            }
            else {
                return positions[0];
            }
        };
        /**
         * @private
         * @param {?} position
         * @return {?}
         */
        ThfControlPositionService.prototype.overflowAllSides = /**
         * @private
         * @param {?} position
         * @return {?}
         */
        function (position) {
            /** @type {?} */
            var overflows = this.getOverflows();
            switch (position) {
                case 'top': return overflows.top || overflows.right || overflows.left;
                case 'top-right': return overflows.top || overflows.right;
                case 'top-left': return overflows.top || overflows.left;
                case 'right': return overflows.right || overflows.top || overflows.bottom;
                case 'right-top': return overflows.right || overflows.top;
                case 'right-bottom': return overflows.right || overflows.bottom;
                case 'bottom': return overflows.bottom || overflows.right || overflows.left;
                case 'bottom-right': return overflows.bottom || overflows.right;
                case 'bottom-left': return overflows.bottom || overflows.left;
                case 'left': return overflows.left || overflows.top || overflows.bottom;
                case 'left-top': return overflows.left || overflows.top;
                case 'left-bottom': return overflows.left || overflows.bottom;
            }
        };
        /**
         * @private
         * @param {?} position
         * @return {?}
         */
        ThfControlPositionService.prototype.overflowMain = /**
         * @private
         * @param {?} position
         * @return {?}
         */
        function (position) {
            /** @type {?} */
            var overflows = this.getOverflows();
            switch (position) {
                case 'top': return overflows.top;
                case 'right': return overflows.right;
                case 'bottom': return overflows.bottom;
                case 'left': return overflows.left;
            }
        };
        /**
         * @private
         * @param {?} elementPosition
         * @return {?}
         */
        ThfControlPositionService.prototype.setAlignedArrowDirection = /**
         * @private
         * @param {?} elementPosition
         * @return {?}
         */
        function (elementPosition) {
            switch (elementPosition) {
                case 'top-left': return 'bottom-left';
                case 'top-right': return 'bottom-right';
                case 'bottom-right': return 'top-right';
                case 'bottom-left': return 'top-left';
            }
        };
        /**
         * @private
         * @param {?} displacement
         * @param {?} sizesAndPositions
         * @return {?}
         */
        ThfControlPositionService.prototype.setAlignedBottomPositions = /**
         * @private
         * @param {?} displacement
         * @param {?} sizesAndPositions
         * @return {?}
         */
        function (displacement, sizesAndPositions) {
            this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
            this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
        };
        /**
         * @private
         * @param {?} position
         * @return {?}
         */
        ThfControlPositionService.prototype.setAlignedElementPosition = /**
         * @private
         * @param {?} position
         * @return {?}
         */
        function (position) {
            this.setElementWidth();
            /** @type {?} */
            var sizesAndPositions = this.getSizesAndPositions();
            switch (position) {
                case 'bottom-left':
                    this.setAlignedBottomPositions(0, sizesAndPositions);
                    break;
                case 'bottom-right':
                    this.setAlignedBottomPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                    break;
                case 'top-left':
                    this.setAlignedTopPositions(0, sizesAndPositions);
                    break;
                case 'top-right':
                    this.setAlignedTopPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                    break;
            }
            this.arrowDirection = this.setAlignedArrowDirection(position);
        };
        /**
         * @private
         * @param {?} displacement
         * @param {?} sizesAndPositions
         * @return {?}
         */
        ThfControlPositionService.prototype.setAlignedTopPositions = /**
         * @private
         * @param {?} displacement
         * @param {?} sizesAndPositions
         * @return {?}
         */
        function (displacement, sizesAndPositions) {
            this.element.style.top = sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
            this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
        };
        /**
         * @private
         * @param {?} elementPosition
         * @return {?}
         */
        ThfControlPositionService.prototype.setArrowDirection = /**
         * @private
         * @param {?} elementPosition
         * @return {?}
         */
        function (elementPosition) {
            switch (elementPosition) {
                case 'top': return 'bottom';
                case 'top-left': return 'bottom-right';
                case 'top-right': return 'bottom-left';
                case 'right': return 'left';
                case 'right-top': return 'left-bottom';
                case 'right-bottom': return 'left-top';
                case 'bottom': return 'top';
                case 'bottom-right': return 'top-left';
                case 'bottom-left': return 'top-right';
                case 'left': return 'right';
                case 'left-bottom': return 'right-top';
                case 'left-top': return 'right-bottom';
            }
        };
        /**
         * @private
         * @param {?} displacement
         * @param {?} sizesAndPositions
         * @return {?}
         */
        ThfControlPositionService.prototype.setBottomPositions = /**
         * @private
         * @param {?} displacement
         * @param {?} sizesAndPositions
         * @return {?}
         */
        function (displacement, sizesAndPositions) {
            this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
            this.element.style.left = sizesAndPositions.target.left + (sizesAndPositions.target.width / 2) - displacement + 'px';
        };
        /**
         * @private
         * @param {?} position
         * @return {?}
         */
        ThfControlPositionService.prototype.setElementPosition = /**
         * @private
         * @param {?} position
         * @return {?}
         */
        function (position) {
            this.setElementWidth();
            /** @type {?} */
            var sizesAndPositions = this.getSizesAndPositions();
            switch (position) {
                case 'top':
                    this.setTopPositions((sizesAndPositions.element.width / 2), sizesAndPositions);
                    break;
                case 'top-left':
                    this.setTopPositions((sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                    break;
                case 'top-right':
                    this.setTopPositions((this.offsetArrow + this.differenceDiagonalToWidthArrow), sizesAndPositions);
                    break;
                case 'right':
                    this.setRightPositions((sizesAndPositions.element.height / 2), sizesAndPositions);
                    break;
                case 'right-top':
                    this.setRightPositions((sizesAndPositions.element.height - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                    break;
                case 'right-bottom':
                    this.setRightPositions(this.offsetArrow, sizesAndPositions);
                    break;
                case 'bottom':
                    this.setBottomPositions((sizesAndPositions.element.width / 2), sizesAndPositions);
                    break;
                case 'bottom-right':
                    this.setBottomPositions((this.offsetArrow + this.differenceDiagonalToWidthArrow), sizesAndPositions);
                    break;
                case 'bottom-left':
                    this.setBottomPositions((sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                    break;
                case 'left':
                    this.setLeftPositions((sizesAndPositions.element.height / 2), sizesAndPositions);
                    break;
                case 'left-bottom':
                    this.setLeftPositions(this.offsetArrow, sizesAndPositions);
                    break;
                case 'left-top':
                    this.setLeftPositions((sizesAndPositions.element.height - this.offsetArrow), sizesAndPositions);
                    break;
            }
            this.arrowDirection = this.setArrowDirection(position);
        };
        /**
         * @private
         * @return {?}
         */
        ThfControlPositionService.prototype.setElementWidth = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.isSetElementWidth && this.targetElement) {
                this.element.style.width = this.targetElement.clientWidth + "px";
            }
        };
        /**
         * @private
         * @param {?} displacement
         * @param {?} sizesAndPositions
         * @return {?}
         */
        ThfControlPositionService.prototype.setLeftPositions = /**
         * @private
         * @param {?} displacement
         * @param {?} sizesAndPositions
         * @return {?}
         */
        function (displacement, sizesAndPositions) {
            this.element.style.top = sizesAndPositions.target.top - displacement + (sizesAndPositions.target.height / 2) + 'px';
            this.element.style.left = sizesAndPositions.target.left - sizesAndPositions.element.width - this.elementOffset + 'px';
        };
        /**
         * @private
         * @param {?} displacement
         * @param {?} sizesAndPositions
         * @return {?}
         */
        ThfControlPositionService.prototype.setRightPositions = /**
         * @private
         * @param {?} displacement
         * @param {?} sizesAndPositions
         * @return {?}
         */
        function (displacement, sizesAndPositions) {
            this.element.style.top = sizesAndPositions.target.top - displacement + (sizesAndPositions.target.height / 2) + 'px';
            this.element.style.left = sizesAndPositions.target.right + this.elementOffset + 'px';
        };
        /**
         * @private
         * @param {?} displacement
         * @param {?} sizesAndPositions
         * @return {?}
         */
        ThfControlPositionService.prototype.setTopPositions = /**
         * @private
         * @param {?} displacement
         * @param {?} sizesAndPositions
         * @return {?}
         */
        function (displacement, sizesAndPositions) {
            this.element.style.top = sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
            this.element.style.left = sizesAndPositions.target.left + (sizesAndPositions.target.width / 2) - displacement + 'px';
        };
        /**
         * @private
         * @param {?} position
         * @return {?}
         */
        ThfControlPositionService.prototype.verifySubPositions = /**
         * @private
         * @param {?} position
         * @return {?}
         */
        function (position) {
            if (position.indexOf('-') > -1) {
                position = position.substring(0, position.indexOf('-'));
                this.elementPosition(position);
            }
            /** @type {?} */
            var align = 0;
            while (align++ < 3) {
                if (this.overflowAllSides(position)) {
                    position = this.nextPosition(position, thfControlPositionSidesDefault);
                    this.elementPosition(position);
                }
                else {
                    return null;
                }
            }
        };
        ThfControlPositionService.decorators = [
            { type: core.Injectable }
        ];
        return ThfControlPositionService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // Array de posições.
    /** @type {?} */
    var THF_CONTROL_POSITIONS = [
        'right',
        'right-top',
        'right-bottom',
        'top',
        'top-left',
        'top-right',
        'left',
        'left-top',
        'left-bottom',
        'bottom',
        'bottom-left',
        'bottom-right'
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CONTENT_MAX_LENGTH = 140;
    /** @type {?} */
    var THF_TOOLTIP_POSITION_DEFAULT = 'bottom';
    /**
     * \@description
     *
     * A diretiva thf-tooltip deve ser utilizada para oferecer informações adicionais quando os usuários
     * passam o mouse sobre o elemento alvo ao qual ela está atribuída.
     *
     * O conteúdo é formado por um pequeno texto que deve contribuir para uma tomada de decisão ou
     * orientação do usuário. A ativação dele pode estar em qualquer componente ou tag HTML.
     *
     * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como
     * conteúdo deve-se utilizar o [**thf-popover**](https://thf.totvs.com.br/documentation/thf-popover?view=doc).
     */
    var ThfTooltipBaseDirective = /** @class */ (function () {
        function ThfTooltipBaseDirective() {
            this._tooltip = '';
            this._tooltipPosition = 'bottom';
        }
        Object.defineProperty(ThfTooltipBaseDirective.prototype, "tooltip", {
            get: /**
             * @return {?}
             */
            function () {
                return this._tooltip;
            },
            /**
             * @description
             *
             * Habilita e atribui um texto ao thf-tooltip, com limitação de 140 caracteres.
             */
            set: /**
             * \@description
             *
             * Habilita e atribui um texto ao thf-tooltip, com limitação de 140 caracteres.
             * @param {?} tooltip
             * @return {?}
             */
            function (tooltip) {
                if (tooltip && tooltip.length > CONTENT_MAX_LENGTH) {
                    this._tooltip = tooltip.substring(0, CONTENT_MAX_LENGTH);
                }
                else {
                    this._tooltip = tooltip;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTooltipBaseDirective.prototype, "tooltipPosition", {
            get: /**
             * @return {?}
             */
            function () {
                return this._tooltipPosition;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a posição que o thf-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
             * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
             * automaticamente para se adequar a tela, caso necessário.
             *
             * Posições válidas:
             * - `right`: Posiciona o thf-tooltip no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o thf-tooltip no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o thf-tooltip no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o thf-tooltip abaixo do componente alvo.
             * - `bottom-left`: Posiciona o thf-tooltip abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o thf-tooltip abaixo e à direita do componente alvo.
             * - `left`: Posiciona o thf-tooltip no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o thf-tooltip no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o thf-tooltip no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o thf-tooltip acima do componente alvo.
             * - `top-right`: Posiciona o thf-tooltip acima e à direita do componente alvo.
             * - `top-left`: Posiciona o thf-tooltip acima e à esquerda do componente alvo.
             *
             * @default bottom
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define a posição que o thf-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
             * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
             * automaticamente para se adequar a tela, caso necessário.
             *
             * Posições válidas:
             * - `right`: Posiciona o thf-tooltip no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o thf-tooltip no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o thf-tooltip no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o thf-tooltip abaixo do componente alvo.
             * - `bottom-left`: Posiciona o thf-tooltip abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o thf-tooltip abaixo e à direita do componente alvo.
             * - `left`: Posiciona o thf-tooltip no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o thf-tooltip no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o thf-tooltip no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o thf-tooltip acima do componente alvo.
             * - `top-right`: Posiciona o thf-tooltip acima e à direita do componente alvo.
             * - `top-left`: Posiciona o thf-tooltip acima e à esquerda do componente alvo.
             *
             * \@default bottom
             * @param {?} position
             * @return {?}
             */
            function (position) {
                this._tooltipPosition = THF_CONTROL_POSITIONS.includes(position) ? position : THF_TOOLTIP_POSITION_DEFAULT;
            },
            enumerable: true,
            configurable: true
        });
        ThfTooltipBaseDirective.propDecorators = {
            tooltip: [{ type: core.Input, args: ['t-tooltip',] }],
            tooltipPosition: [{ type: core.Input, args: ['t-tooltip-position',] }]
        };
        return ThfTooltipBaseDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfTooltipBaseDirective
     *
     * \@example
     *
     * <example name="thf-tooltip-basic" title="Totvs Tooltip Basic" >
     *  <file name="sample-thf-tooltip-basic/sample-thf-tooltip-basic.component.html"> </file>
     *  <file name="sample-thf-tooltip-basic/sample-thf-tooltip-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-tooltip-labs" title="Totvs Tooltip Labs" >
     *  <file name="sample-thf-tooltip-labs/sample-thf-tooltip-labs.component.html"> </file>
     *  <file name="sample-thf-tooltip-labs/sample-thf-tooltip-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-tooltip-new-user" title="Totvs Tooltip - New User" >
     *  <file name="sample-thf-tooltip-new-user/sample-thf-tooltip-new-user.component.html"> </file>
     *  <file name="sample-thf-tooltip-new-user/sample-thf-tooltip-new-user.component.ts"> </file>
     * </example>
     *
     */
    var ThfTooltipDirective = /** @class */ (function (_super) {
        __extends(ThfTooltipDirective, _super);
        function ThfTooltipDirective(elementRef, renderer, thfControlPosition) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.thfControlPosition = thfControlPosition;
            _this.tooltipOffset = 8;
            return _this;
        }
        /**
         * @return {?}
         */
        ThfTooltipDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.initScrollEventListenerFunction();
        };
        /**
         * @return {?}
         */
        ThfTooltipDirective.prototype.onMouseEnter = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.tooltip) {
                    _this.tooltipContent ? _this.showTooltip() : _this.createTooltip();
                    _this.removeArrow(_this.arrowDirection);
                    _this.thfControlPosition.adjustPosition(_this.tooltipPosition);
                    _this.arrowDirection = _this.thfControlPosition.getArrowDirection();
                    _this.addArrow(_this.arrowDirection);
                    _this.lastTooltipText = _this.tooltip;
                }
            }));
        };
        /**
         * @return {?}
         */
        ThfTooltipDirective.prototype.onMouseLeave = /**
         * @return {?}
         */
        function () {
            this.hideTooltip();
        };
        /**
         * @private
         * @param {?} arrowDirection
         * @return {?}
         */
        ThfTooltipDirective.prototype.addArrow = /**
         * @private
         * @param {?} arrowDirection
         * @return {?}
         */
        function (arrowDirection) {
            this.renderer.addClass(this.divArrow, "thf-arrow-" + arrowDirection);
        };
        /**
         * @private
         * @return {?}
         */
        ThfTooltipDirective.prototype.addScrollEventListener = /**
         * @private
         * @return {?}
         */
        function () {
            window.addEventListener('scroll', this.eventListenerFunction, true);
        };
        // Monta a estrutura do tooltip
        // Monta a estrutura do tooltip
        /**
         * @private
         * @return {?}
         */
        ThfTooltipDirective.prototype.createTooltip = 
        // Monta a estrutura do tooltip
        /**
         * @private
         * @return {?}
         */
        function () {
            this.tooltipContent = this.renderer.createElement('div');
            this.renderer.addClass(this.tooltipContent, 'thf-tooltip');
            this.divArrow = this.renderer.createElement('div');
            this.renderer.addClass(this.divArrow, 'thf-tooltip-arrow');
            this.divContent = this.renderer.createElement('div');
            this.renderer.addClass(this.divContent, 'thf-tooltip-content');
            this.textContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.divContent, this.textContent);
            this.renderer.appendChild(this.tooltipContent, this.divArrow);
            this.renderer.appendChild(this.tooltipContent, this.divContent);
            this.renderer.appendChild(this.elementRef.nativeElement, this.tooltipContent);
            this.thfControlPosition.setElements(this.tooltipContent, this.tooltipOffset, this.elementRef);
            this.addScrollEventListener();
        };
        /**
         * @private
         * @return {?}
         */
        ThfTooltipDirective.prototype.initScrollEventListenerFunction = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.eventListenerFunction = (/**
             * @return {?}
             */
            function () {
                if (!_this.isHidden) {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.thfControlPosition.adjustPosition(_this.tooltipPosition);
                    }));
                }
            });
        };
        /**
         * @private
         * @return {?}
         */
        ThfTooltipDirective.prototype.hideTooltip = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.tooltipContent) {
                this.renderer.addClass(this.tooltipContent, 'thf-invisible');
                this.isHidden = true;
                this.removeScrollEventListener();
            }
        };
        /**
         * @private
         * @param {?} arrowDirection
         * @return {?}
         */
        ThfTooltipDirective.prototype.removeArrow = /**
         * @private
         * @param {?} arrowDirection
         * @return {?}
         */
        function (arrowDirection) {
            if (this.elementRef.nativeElement.querySelector(".thf-arrow-" + arrowDirection)) {
                this.renderer.removeClass(this.divArrow, "thf-arrow-" + arrowDirection);
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfTooltipDirective.prototype.removeScrollEventListener = /**
         * @private
         * @return {?}
         */
        function () {
            window.removeEventListener('scroll', this.eventListenerFunction, true);
        };
        /**
         * @private
         * @return {?}
         */
        ThfTooltipDirective.prototype.showTooltip = /**
         * @private
         * @return {?}
         */
        function () {
            this.renderer.removeClass(this.tooltipContent, 'thf-invisible');
            this.updateTextContent();
            this.isHidden = false;
            this.addScrollEventListener();
        };
        /**
         * @private
         * @return {?}
         */
        ThfTooltipDirective.prototype.updateTextContent = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.lastTooltipText !== this.tooltip) {
                this.renderer.removeChild(this.divContent, this.textContent);
                this.textContent = this.renderer.createText(this.tooltip);
                this.renderer.appendChild(this.divContent, this.textContent);
            }
        };
        ThfTooltipDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[t-tooltip]',
                        providers: [ThfControlPositionService]
                    },] }
        ];
        /** @nocollapse */
        ThfTooltipDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: ThfControlPositionService }
        ]; };
        ThfTooltipDirective.propDecorators = {
            onMouseEnter: [{ type: core.HostListener, args: ['mouseenter',] }],
            onMouseLeave: [{ type: core.HostListener, args: ['mouseleave',] }]
        };
        return ThfTooltipDirective;
    }(ThfTooltipBaseDirective));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo da diretiva Thf-Tooltip.
     */
    var ThfTooltipModule = /** @class */ (function () {
        function ThfTooltipModule() {
        }
        ThfTooltipModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [ThfTooltipDirective],
                        exports: [ThfTooltipDirective]
                    },] }
        ];
        return ThfTooltipModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ThfButtonGroupToggle = {
        /** Seleção múltipla. */
        Multiple: 'multiple',
        /** Seleção desabilitada. */
        None: 'none',
        /** Seleção única. */
        Single: 'single',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var THF_TOGGLE_TYPE_DEFAULT = 'none';
    /**
     * \@description
     *
     * O componente `thf-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
     * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
     *
     * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
     * para seleções multiplas e únicas.
     *
     * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
     * parte de um mesmo contexto.
     *
     * #### Boas práticas
     *
     * - Evite usar o `thf-button-group` com apenas 1 ação, para isso utilize o `thf-button`.
     * - Procure utilizar no máximo 3 ações para cada `thf-button-group`.
     *
     * > As recomendações do `thf-button` também valem para o `thf-button-group`.
     */
    var ThfButtonGroupBaseComponent = /** @class */ (function () {
        function ThfButtonGroupBaseComponent() {
            this._small = false;
            this._toggle = THF_TOGGLE_TYPE_DEFAULT;
            /**
             * Lista de botões.
             */
            this.buttons = [];
        }
        Object.defineProperty(ThfButtonGroupBaseComponent.prototype, "small", {
            get: /**
             * @return {?}
             */
            function () {
                return this._small;
            },
            /**
             * @optional
             *
             * @description
             *
             * Torna o grupo de botões com tamanho minificado.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Torna o grupo de botões com tamanho minificado.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._small = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfButtonGroupBaseComponent.prototype, "toggle", {
            get: /**
             * @return {?}
             */
            function () {
                return this._toggle;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o modo de seleção de botões.
             *
             * > Veja os valores válidos no *enum* `ThfMultiselectFilterMode`.
             *
             * @default `none`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define o modo de seleção de botões.
             *
             * > Veja os valores válidos no *enum* `ThfMultiselectFilterMode`.
             *
             * \@default `none`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._toggle = ((/** @type {?} */ (Object))).values(ThfButtonGroupToggle).includes(value) ? value : THF_TOGGLE_TYPE_DEFAULT;
                this.checkSelecteds(this._toggle);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} buttonClicked
         * @param {?} buttonIndex
         * @return {?}
         */
        ThfButtonGroupBaseComponent.prototype.onButtonClick = /**
         * @param {?} buttonClicked
         * @param {?} buttonIndex
         * @return {?}
         */
        function (buttonClicked, buttonIndex) {
            if (this.toggle === ThfButtonGroupToggle.Single) {
                this.buttons.forEach((/**
                 * @param {?} button
                 * @param {?} index
                 * @return {?}
                 */
                function (button, index) {
                    return button.selected = index === buttonIndex ? !buttonClicked.selected : false;
                }));
            }
            else if (this.toggle === ThfButtonGroupToggle.Multiple) {
                buttonClicked.selected = !buttonClicked.selected;
            }
        };
        /**
         * @private
         * @param {?} toggleMode
         * @return {?}
         */
        ThfButtonGroupBaseComponent.prototype.checkSelecteds = /**
         * @private
         * @param {?} toggleMode
         * @return {?}
         */
        function (toggleMode) {
            if (toggleMode === ThfButtonGroupToggle.None) {
                this.deselectAllButtons();
            }
            else if (toggleMode === ThfButtonGroupToggle.Single) {
                /** @type {?} */
                var hasMoreOneSelected = this.buttons.filter((/**
                 * @param {?} button
                 * @return {?}
                 */
                function (button) { return button.selected; })).length > 1;
                if (hasMoreOneSelected) {
                    this.deselectAllButtons();
                }
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfButtonGroupBaseComponent.prototype.deselectAllButtons = /**
         * @private
         * @return {?}
         */
        function () {
            this.buttons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            function (button) { return button.selected = false; }));
        };
        ThfButtonGroupBaseComponent.propDecorators = {
            buttons: [{ type: core.Input, args: ['t-buttons',] }],
            small: [{ type: core.Input, args: ['t-small',] }],
            toggle: [{ type: core.Input, args: ['t-toggle',] }]
        };
        return ThfButtonGroupBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfButtonGroupBaseComponent
     *
     * \@example
     *
     * <example name="thf-button-group-basic" title="Totvs Button Group Basic">
     *  <file name="sample-thf-button-group-basic/sample-thf-button-group-basic.component.html"> </file>
     *  <file name="sample-thf-button-group-basic/sample-thf-button-group-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-button-group-labs" title="Totvs Button Group Labs">
     *  <file name="sample-thf-button-group-labs/sample-thf-button-group-labs.component.html"> </file>
     *  <file name="sample-thf-button-group-labs/sample-thf-button-group-labs.component.ts"> </file>
     * </example>
     *
     *
     * <example name="thf-button-group-attendance" title="Totvs Button Group - Attendance">
     *  <file name="sample-thf-button-group-attendance/sample-thf-button-group-attendance.component.html"> </file>
     *  <file name="sample-thf-button-group-attendance/sample-thf-button-group-attendance.component.ts"> </file>
     * </example>
     *
     * <example name="thf-button-group-post" title="Totvs Button Group - Post">
     *  <file name="sample-thf-button-group-post/sample-thf-button-group-post.component.html"> </file>
     *  <file name="sample-thf-button-group-post/sample-thf-button-group-post.component.ts"> </file>
     * </example>
     */
    var ThfButtonGroupComponent = /** @class */ (function (_super) {
        __extends(ThfButtonGroupComponent, _super);
        function ThfButtonGroupComponent(viewRef) {
            var _this = _super.call(this) || this;
            // Get instance of parent to execute the actions
            _this.parentRef = viewRef['_view']['component'];
            return _this;
        }
        ThfButtonGroupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-button-group',
                        template: "<div class=\"thf-button-group-container\">\n  <thf-button\n    *ngFor=\"let button of buttons; index as i\"\n    class=\"thf-sm-12 thf-button-group\"\n    [class.thf-button-group-button-selected]=\"button.selected\"\n    [class.thf-button-group-disabled]=\"button.disabled\"\n    t-tooltip-position=\"bottom\"\n    [t-disabled]=\"button.disabled\"\n    [t-icon]=\"button.icon\"\n    [t-label]=\"button.label\"\n    [t-small]=\"small\"\n    [t-tooltip]=\"!button.disabled ? button.tooltip : undefined\"\n    (t-click)=\"button.action.call(parentRef, button); onButtonClick(button, i)\">\n  </thf-button>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfButtonGroupComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef }
        ]; };
        return ThfButtonGroupComponent;
    }(ThfButtonGroupBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente thf-button-group.
     */
    var ThfButtonGroupModule = /** @class */ (function () {
        function ThfButtonGroupModule() {
        }
        ThfButtonGroupModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            ThfButtonModule,
                            ThfTooltipModule
                        ],
                        declarations: [
                            ThfButtonGroupComponent
                        ],
                        exports: [
                            ThfButtonGroupComponent
                        ]
                    },] }
        ];
        return ThfButtonGroupModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfCalendarLocales = ['pt', 'en', 'es'];
    /** @type {?} */
    var thfCalendarLocaleDefault = 'pt';
    /**
     * \@description
     *
     * O `thf-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
     * de direcionamento e nos *labels* do ano ou mês.
     *
     * Este componente pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     *
     * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
     * formato **Data (E8601DAw.): yyyy-mm-dd**.
     *
     * Importante:
     *
     * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
     * a data desabilitada porém o *model* não será alterado.
     * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
     */
    var ThfCalendarBaseComponent = /** @class */ (function () {
        function ThfCalendarBaseComponent(thfDate, thfCalendarLangService) {
            this.thfDate = thfDate;
            this.thfCalendarLangService = thfCalendarLangService;
            this.dayVisible = false;
            this.displayMonths = Array();
            this.displayWeekDays = Array();
            this.monthVisible = false;
            this.yearVisible = false;
            this.onTouched = null;
            this.propagateChange = null;
            this.today = new Date();
            /**
             * Evento disparado ao selecionar um dia do calendário.
             */
            this.change = new core.EventEmitter();
        }
        Object.defineProperty(ThfCalendarBaseComponent.prototype, "locale", {
            get: /**
             * @return {?}
             */
            function () {
                return this._locale;
            },
            /**
             * @optional
             *
             * @description
             *
             * Idioma do calendário.
             *
             * Valores válidos:
             *  - `pt`
             *  - `en`
             *  - `es`
             *
             * @default `pt`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Idioma do calendário.
             *
             * Valores válidos:
             *  - `pt`
             *  - `en`
             *  - `es`
             *
             * \@default `pt`
             * @param {?} locale
             * @return {?}
             */
            function (locale) {
                this._locale = thfCalendarLocales.includes(locale) ? locale : thfCalendarLocaleDefault;
                this.initializeLanguage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfCalendarBaseComponent.prototype, "maxDate", {
            get: /**
             * @return {?}
             */
            function () {
                return this._maxDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a data máxima possível de ser selecionada.
             *
             * Pode receber os seguintes formatos de data:
             *
             * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
             * ```
             * this.date = '2017-11-28T00:00:00-02:00';
             * ```
             *
             * - **Data (E8601DAw.): yyyy-mm-dd**
             * ```
             * this.date = '2017-11-28';
             * ```
             *
             * - **JavaScript Date Object:**
             * ```
             * this.date = new Date(2017, 10, 28);
             * ```
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define a data máxima possível de ser selecionada.
             *
             * Pode receber os seguintes formatos de data:
             *
             * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
             * ```
             * this.date = '2017-11-28T00:00:00-02:00';
             * ```
             *
             * - **Data (E8601DAw.): yyyy-mm-dd**
             * ```
             * this.date = '2017-11-28';
             * ```
             *
             * - **JavaScript Date Object:**
             * ```
             * this.date = new Date(2017, 10, 28);
             * ```
             * @param {?} maxDate
             * @return {?}
             */
            function (maxDate) {
                this._maxDate = this.thfDate.getDateForDateRange(maxDate, false);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfCalendarBaseComponent.prototype, "minDate", {
            get: /**
             * @return {?}
             */
            function () {
                return this._minDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a data mínima possível de ser selecionada.
             *
             * Pode receber os seguintes formatos de data:
             *
             * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
             * ```
             * this.date = '2017-11-28T00:00:00-02:00';
             * ```
             *
             * - **Data (E8601DAw.): yyyy-mm-dd**
             * ```
             * this.date = '2017-11-28';
             * ```
             *
             * - **JavaScript Date Object:**
             * ```
             * this.date = new Date(2017, 10, 28);
             * ```
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define a data mínima possível de ser selecionada.
             *
             * Pode receber os seguintes formatos de data:
             *
             * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
             * ```
             * this.date = '2017-11-28T00:00:00-02:00';
             * ```
             *
             * - **Data (E8601DAw.): yyyy-mm-dd**
             * ```
             * this.date = '2017-11-28';
             * ```
             *
             * - **JavaScript Date Object:**
             * ```
             * this.date = new Date(2017, 10, 28);
             * ```
             * @param {?} minDate
             * @return {?}
             */
            function (minDate) {
                this._minDate = this.thfDate.getDateForDateRange(minDate, true);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfCalendarBaseComponent.prototype.initializeLanguage = /**
         * @return {?}
         */
        function () {
            this.thfCalendarLangService.setLanguage(this.locale);
            this.displayWeekDays = this.thfCalendarLangService.getWeekDaysArray();
            this.displayMonths = this.thfCalendarLangService.getMonthsArray();
            this.displayMonth = this.displayMonths[this.displayMonthNumber];
        };
        ThfCalendarBaseComponent.propDecorators = {
            locale: [{ type: core.Input, args: ['t-locale',] }],
            maxDate: [{ type: core.Input, args: ['t-max-date',] }],
            minDate: [{ type: core.Input, args: ['t-min-date',] }],
            change: [{ type: core.Output, args: ['t-change',] }]
        };
        return ThfCalendarBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfCalendarLangService = /** @class */ (function () {
        function ThfCalendarLangService() {
            this.language = 'pt';
            this.months = [
                {
                    pt: 'Janeiro',
                    en: 'January',
                    es: 'Enero'
                },
                {
                    pt: 'Fevereiro',
                    en: 'February',
                    es: 'Febrero'
                },
                {
                    pt: 'Março',
                    en: 'March',
                    es: 'Marzo'
                },
                {
                    pt: 'Abril',
                    en: 'April',
                    es: 'Abril'
                },
                {
                    pt: 'Maio',
                    en: 'May',
                    es: 'Mayo'
                },
                {
                    pt: 'Junho',
                    en: 'June',
                    es: 'Junio'
                },
                {
                    pt: 'Julho',
                    en: 'July',
                    es: 'Julio'
                },
                {
                    pt: 'Agosto',
                    en: 'August',
                    es: 'Agosto'
                },
                {
                    pt: 'Setembro',
                    en: 'September',
                    es: 'Setiembre'
                },
                {
                    pt: 'Outubro',
                    en: 'October',
                    es: 'Octubre'
                },
                {
                    pt: 'Novembro',
                    en: 'November',
                    es: 'Noviembre'
                },
                {
                    pt: 'Dezembro',
                    en: 'December',
                    es: 'Diciembre'
                }
            ];
            this.shortWeekDays = [
                {
                    pt: 'Dom',
                    en: 'Sun',
                    es: 'Dom'
                },
                {
                    pt: 'Seg',
                    en: 'Mon',
                    es: 'Lun'
                },
                {
                    pt: 'Ter',
                    en: 'Tue',
                    es: 'Mar'
                },
                {
                    pt: 'Qua',
                    en: 'Wed',
                    es: 'Mié'
                },
                {
                    pt: 'Qui',
                    en: 'Thu',
                    es: 'Jue'
                },
                {
                    pt: 'Sex',
                    en: 'Fri',
                    es: 'Vie'
                },
                {
                    pt: 'Sáb',
                    en: 'Sat',
                    es: 'Sáb'
                }
            ];
            this.monthLabel = {
                pt: 'Mês',
                en: 'Month',
                es: 'Mes'
            };
            this.yearLabel = {
                pt: 'Ano',
                en: 'Year',
                es: 'Año'
            };
        }
        /**
         * @param {?} month
         * @return {?}
         */
        ThfCalendarLangService.prototype.getMonth = /**
         * @param {?} month
         * @return {?}
         */
        function (month) {
            return this.months[month][this.language];
        };
        /**
         * @return {?}
         */
        ThfCalendarLangService.prototype.getMonthLabel = /**
         * @return {?}
         */
        function () {
            return this.monthLabel[this.language];
        };
        /**
         * @return {?}
         */
        ThfCalendarLangService.prototype.getMonthsArray = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var arrMonths = Array();
            for (var i = 0; i < this.months.length; i++) {
                arrMonths.push(this.months[i][this.language]);
            }
            return arrMonths;
        };
        /**
         * @param {?} day
         * @return {?}
         */
        ThfCalendarLangService.prototype.getWeekDays = /**
         * @param {?} day
         * @return {?}
         */
        function (day) {
            return this.shortWeekDays[day][this.language];
        };
        /**
         * @return {?}
         */
        ThfCalendarLangService.prototype.getWeekDaysArray = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var arrWeekDays = Array();
            for (var i = 0; i < this.shortWeekDays.length; i++) {
                arrWeekDays.push(this.shortWeekDays[i][this.language]);
            }
            return arrWeekDays;
        };
        /**
         * @return {?}
         */
        ThfCalendarLangService.prototype.getYearLabel = /**
         * @return {?}
         */
        function () {
            return this.yearLabel[this.language];
        };
        /**
         * @param {?} language
         * @return {?}
         */
        ThfCalendarLangService.prototype.setLanguage = /**
         * @param {?} language
         * @return {?}
         */
        function (language) {
            if (language && language.length >= 2) {
                language = language.toLowerCase().slice(0, 2);
                this.language = (language === 'pt' || language === 'en' || language === 'es') ? language : 'pt';
            }
        };
        ThfCalendarLangService.decorators = [
            { type: core.Injectable }
        ];
        return ThfCalendarLangService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfCalendarServiceFirstWeekDayDefault = 0;
    var ThfCalendarService = /** @class */ (function () {
        function ThfCalendarService() {
        }
        /**
         * @param {?} year
         * @param {?} month
         * @param {?=} dayFormatter
         * @param {?=} weekFormatter
         * @return {?}
         */
        ThfCalendarService.prototype.monthDates = /**
         * @param {?} year
         * @param {?} month
         * @param {?=} dayFormatter
         * @param {?=} weekFormatter
         * @return {?}
         */
        function (year, month, dayFormatter, weekFormatter) {
            if (dayFormatter === void 0) { dayFormatter = null; }
            if (weekFormatter === void 0) { weekFormatter = null; }
            if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
                throw Error(('month must be a number (Jan is 0)'));
            }
            /** @type {?} */
            var weeks = [];
            /** @type {?} */
            var week = [];
            /** @type {?} */
            var i = 0;
            /** @type {?} */
            var date = new Date(year, month, 1);
            if (year >= 0 && year < 100) {
                date.setFullYear(year);
            }
            date = this.weekStartDate(date);
            do {
                for (i = 0; i < 7; i++) {
                    week.push(dayFormatter ? dayFormatter(date) : date);
                    date = new Date(date.getTime());
                    date.setDate(date.getDate() + 1);
                }
                weeks.push(weekFormatter ? weekFormatter(week) : week);
                week = [];
            } while ((date.getMonth() <= month) && (date.getFullYear() === year));
            return weeks;
        };
        /**
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        ThfCalendarService.prototype.monthDays = /**
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        function (year, month) {
            /** @type {?} */
            var getDayOrZero = (/**
             * @param {?} date
             * @return {?}
             */
            function (date) {
                return date.getMonth() === month ? date : 0;
            });
            return this.monthDates(year, month, getDayOrZero);
        };
        /**
         * @param {?} date
         * @return {?}
         */
        ThfCalendarService.prototype.weekStartDate = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            /** @type {?} */
            var startDate = new Date(date.getTime());
            while (startDate.getDay() !== thfCalendarServiceFirstWeekDayDefault) {
                startDate.setDate(startDate.getDate() - 1);
            }
            return startDate;
        };
        ThfCalendarService.decorators = [
            { type: core.Injectable }
        ];
        return ThfCalendarService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Serviço responsável por gerenciar o tratamento dos formatos de data e hora.
     */
    var ThfDateService = /** @class */ (function () {
        function ThfDateService() {
            this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
                '(?:0[1-9]|1[0-2])-' +
                '(?:0[1-9]|[12]\\d|3[01])$');
            this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
                '(?:0[1-9]|1[0-2])-' +
                '(?:0[1-9]|[12]\\d|3[01])' +
                'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
                '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
                '(?:|:?[0-5]\\d)$');
        }
        /**
         * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
         *
         * @param dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
         * @param minDate Definir `true` caso seja `minDate`.
         * @param maxDate Definir `true` caso seja `maxDate`.
         */
        /**
         * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
         *
         * @param {?} dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
         * @param {?} minDate Definir `true` caso seja `minDate`.
         * @param {?} maxDate Definir `true` caso seja `maxDate`.
         * @return {?}
         */
        ThfDateService.prototype.convertIsoToDate = /**
         * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
         *
         * @param {?} dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
         * @param {?} minDate Definir `true` caso seja `minDate`.
         * @param {?} maxDate Definir `true` caso seja `maxDate`.
         * @return {?}
         */
        function (dateString, minDate, maxDate) {
            if (dateString) {
                var _a = this.getDateFromIso(dateString), year = _a.year, month = _a.month, day = _a.day;
                if (minDate) {
                    /** @type {?} */
                    var date = new Date(year, month - 1, day, 0, 0, 0);
                    this.setYearFrom0To100(date, year);
                    return date;
                }
                else if (maxDate) {
                    /** @type {?} */
                    var date = new Date(year, month - 1, day, 23, 59, 59);
                    this.setYearFrom0To100(date, year);
                    return date;
                }
                else {
                    /** @type {?} */
                    var miliseconds = Date.parse(dateString);
                    /** @type {?} */
                    var timezone = new Date().getTimezoneOffset() * 60000;
                    return new Date(miliseconds + timezone);
                }
            }
        };
        /**
         * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
         *
         * @param date Data no formato `Date`.
         */
        /**
         * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
         *
         * @param {?} date Data no formato `Date`.
         * @return {?}
         */
        ThfDateService.prototype.convertDateToISO = /**
         * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
         *
         * @param {?} date Data no formato `Date`.
         * @return {?}
         */
        function (date) {
            if (date) {
                /** @type {?} */
                var fullYear = date.getFullYear();
                /** @type {?} */
                var getMonth = date.getMonth() + 1;
                /** @type {?} */
                var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
                /** @type {?} */
                var month = getMonth < 10 ? '0' + getMonth : getMonth;
                /** @type {?} */
                var year = this.formatYear(fullYear);
                return year + '-' + month + '-' + day;
            }
            else {
                return null;
            }
        };
        /**
         * Método responsável por adicionar zeros a esquerda do anos em formato string.
         *
         * @param year Ano a ser validado.
         */
        /**
         * Método responsável por adicionar zeros a esquerda do anos em formato string.
         *
         * @param {?} year Ano a ser validado.
         * @return {?}
         */
        ThfDateService.prototype.formatYear = /**
         * Método responsável por adicionar zeros a esquerda do anos em formato string.
         *
         * @param {?} year Ano a ser validado.
         * @return {?}
         */
        function (year) {
            if (year > 999) {
                return year.toString();
            }
            if (year > 99 && year < 1000) {
                return "0" + year;
            }
            if (year > 9 && year < 100) {
                return "00" + year;
            }
            if (year >= 0 && year < 10) {
                return "000" + year;
            }
        };
        /**
         * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
         *
         * @param isoDate Ano em formato string.
         */
        /**
         * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
         *
         * @param {?} isoDate Ano em formato string.
         * @return {?}
         */
        ThfDateService.prototype.getDateFromIso = /**
         * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
         *
         * @param {?} isoDate Ano em formato string.
         * @return {?}
         */
        function (isoDate) {
            /** @type {?} */
            var day = parseInt(isoDate.substring(8, 10), 10);
            /** @type {?} */
            var month = parseInt(isoDate.substring(5, 7), 10);
            /** @type {?} */
            var year = parseInt(isoDate.substring(0, 4), 10);
            return { year: year, month: month, day: day };
        };
        /**
         * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
         * caso `isMindate` seja igual a `false` .
         *
         * @param date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
         * @param isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
         */
        /**
         * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
         * caso `isMindate` seja igual a `false` .
         *
         * @param {?} date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
         * @param {?} isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
         * @return {?}
         */
        ThfDateService.prototype.getDateForDateRange = /**
         * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
         * caso `isMindate` seja igual a `false` .
         *
         * @param {?} date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
         * @param {?} isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
         * @return {?}
         */
        function (date, isMinDate) {
            /** @type {?} */
            var lastHour = isMinDate ? [0, 0, 0] : [23, 59, 59];
            if (date instanceof Date) {
                var _a = this.splitDate(date), year = _a.year, month = _a.month, day = _a.day;
                /** @type {?} */
                var validDate = new (Date.bind.apply(Date, __spread([void 0, year, month, day], lastHour)))();
                this.setYearFrom0To100(validDate, year);
                return validDate;
            }
            else if (this.isValidIso(date)) {
                return this.convertIsoToDate(date, isMinDate, !isMinDate);
            }
        };
        /**
         * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
         * @param dateA primeira data
         * @param dateB segunda data
         */
        /**
         * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
         * @param {?=} dateA primeira data
         * @param {?=} dateB segunda data
         * @return {?}
         */
        ThfDateService.prototype.isDateRangeValid = /**
         * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
         * @param {?=} dateA primeira data
         * @param {?=} dateB segunda data
         * @return {?}
         */
        function (dateA, dateB) {
            if (dateA === void 0) { dateA = ''; }
            if (dateB === void 0) { dateB = ''; }
            /** @type {?} */
            var dateASplitted = dateA.split('-').map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return parseInt(item, 10); }));
            /** @type {?} */
            var dateBSplitted = dateB.split('-').map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return parseInt(item, 10); }));
            for (var index = 0; index <= dateASplitted.length; index++) {
                if (dateASplitted[index] > dateBSplitted[index]) {
                    return true;
                }
                else if (dateASplitted[index] < dateBSplitted[index]) {
                    return false;
                }
            }
            return true;
        };
        /**
         * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
         *
         * @param stringDate Data.
         */
        /**
         * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
         *
         * @param {?} stringDate Data.
         * @return {?}
         */
        ThfDateService.prototype.isValidIso = /**
         * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
         *
         * @param {?} stringDate Data.
         * @return {?}
         */
        function (stringDate) {
            return this.dateRegex.test(stringDate) || this.isoRegex.test(stringDate);
        };
        /**
         * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
         *
         * @param date Data.
         * @param year .
         */
        /**
         * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
         *
         * @param {?} date Data.
         * @param {?} year .
         * @return {?}
         */
        ThfDateService.prototype.setYearFrom0To100 = /**
         * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
         *
         * @param {?} date Data.
         * @param {?} year .
         * @return {?}
         */
        function (date, year) {
            if (year >= 0 && year < 100) {
                date.setFullYear(year);
            }
        };
        /**
         * Método responsável por ordenar duas datas.
         *
         * @param leftSide Primeira data a ser comparada.
         * @param rightSide Segunda data a ser comparada.
         * @param ascending Determina se será em ordem crescente ou decrescente.
         */
        /**
         * Método responsável por ordenar duas datas.
         *
         * @param {?} leftSide Primeira data a ser comparada.
         * @param {?} rightSide Segunda data a ser comparada.
         * @param {?} ascending Determina se será em ordem crescente ou decrescente.
         * @return {?}
         */
        ThfDateService.prototype.sortDate = /**
         * Método responsável por ordenar duas datas.
         *
         * @param {?} leftSide Primeira data a ser comparada.
         * @param {?} rightSide Segunda data a ser comparada.
         * @param {?} ascending Determina se será em ordem crescente ou decrescente.
         * @return {?}
         */
        function (leftSide, rightSide, ascending) {
            return sortValues(this.validateDate(leftSide), this.validateDate(rightSide), ascending);
        };
        /**
         * Método responsável por retornar o dia , mês e ano de uma data informada.
         *
         * @param date Valor da data.
         */
        /**
         * Método responsável por retornar o dia , mês e ano de uma data informada.
         *
         * @param {?} date Valor da data.
         * @return {?}
         */
        ThfDateService.prototype.splitDate = /**
         * Método responsável por retornar o dia , mês e ano de uma data informada.
         *
         * @param {?} date Valor da data.
         * @return {?}
         */
        function (date) {
            /** @type {?} */
            var year = date.getFullYear();
            /** @type {?} */
            var month = date.getMonth();
            /** @type {?} */
            var day = date.getDate();
            return { year: year, month: month, day: day };
        };
        /**
         * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
         *
         * @param date Data a ser validada.
         * @param minDate Data inicial.
         * @param maxDate Data final.
         */
        /**
         * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
         *
         * @param {?} date Data a ser validada.
         * @param {?} minDate Data inicial.
         * @param {?} maxDate Data final.
         * @return {?}
         */
        ThfDateService.prototype.validateDateRange = /**
         * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
         *
         * @param {?} date Data a ser validada.
         * @param {?} minDate Data inicial.
         * @param {?} maxDate Data final.
         * @return {?}
         */
        function (date, minDate, maxDate) {
            if (minDate && maxDate) {
                return (date >= minDate && date <= maxDate);
            }
            else if (minDate && !maxDate) {
                return (date >= minDate);
            }
            else if (!minDate && maxDate) {
                return (date <= maxDate);
            }
            else {
                return true;
            }
        };
        /**
         * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
         * 'Date' padrão do javascript.
         *
         * @param date Data que será validada.
         */
        /**
         * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
         * 'Date' padrão do javascript.
         *
         * @private
         * @param {?} date Data que será validada.
         * @return {?}
         */
        ThfDateService.prototype.validateDate = /**
         * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
         * 'Date' padrão do javascript.
         *
         * @private
         * @param {?} date Data que será validada.
         * @return {?}
         */
        function (date) {
            /** @type {?} */
            var validDate = date instanceof Date ? this.convertDateToISO(date) : date;
            return this.isValidIso(validDate) ? validDate : undefined;
        };
        ThfDateService.decorators = [
            { type: core.Injectable }
        ];
        return ThfDateService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfCalendarBaseComponent
     *
     * \@example
     *
     * <example name="thf-calendar-basic" title="Totvs Calendar Basic" >
     *  <file name="sample-thf-calendar-basic/sample-thf-calendar-basic.component.html"> </file>
     *  <file name="sample-thf-calendar-basic/sample-thf-calendar-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-calendar-labs" title="Totvs Calendar Labs" >
     *  <file name="sample-thf-calendar-labs/sample-thf-calendar-labs.component.html"> </file>
     *  <file name="sample-thf-calendar-labs/sample-thf-calendar-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-calendar-ticket-sales" title="Totvs Calendar - Ticket Sales" >
     *  <file name="sample-thf-calendar-ticket-sales/sample-thf-calendar-ticket-sales.component.html"> </file>
     *  <file name="sample-thf-calendar-ticket-sales/sample-thf-calendar-ticket-sales.component.ts"> </file>
     * </example>
     */
    var ThfCalendarComponent = /** @class */ (function (_super) {
        __extends(ThfCalendarComponent, _super);
        function ThfCalendarComponent(thfCalendarService, thfCalendarLangService, thfDate) {
            var _this = _super.call(this, thfDate, thfCalendarLangService) || this;
            _this.thfCalendarService = thfCalendarService;
            return _this;
        }
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.init();
        };
        /**
         * @param {?} displayValue
         * @param {?} propertyValue
         * @return {?}
         */
        ThfCalendarComponent.prototype.getBackgroundColor = /**
         * @param {?} displayValue
         * @param {?} propertyValue
         * @return {?}
         */
        function (displayValue, propertyValue) {
            return (displayValue === propertyValue) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';
        };
        /**
         * @param {?} date
         * @return {?}
         */
        ThfCalendarComponent.prototype.getDayBackgroundColor = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return this.getDayColor(date, 'background');
        };
        /**
         * @param {?} date
         * @return {?}
         */
        ThfCalendarComponent.prototype.getDayForegroundColor = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return this.getDayColor(date, 'foreground');
        };
        /**
         * @param {?} displayValue
         * @param {?} propertyValue
         * @return {?}
         */
        ThfCalendarComponent.prototype.getForegroundColor = /**
         * @param {?} displayValue
         * @param {?} propertyValue
         * @return {?}
         */
        function (displayValue, propertyValue) {
            return (displayValue === propertyValue) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.getMonthLabel = /**
         * @return {?}
         */
        function () {
            return this.thfCalendarLangService.getMonthLabel();
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.getYearLabel = /**
         * @return {?}
         */
        function () {
            return this.thfCalendarLangService.getYearLabel();
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.onNextMonth = /**
         * @return {?}
         */
        function () {
            this.displayMonthNumber < 11 ? this.updateDisplay(this.displayYear, this.displayMonthNumber + 1) :
                this.updateDisplay(this.displayYear + 1, 0);
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.onPreviousMonth = /**
         * @return {?}
         */
        function () {
            this.displayMonthNumber > 0 ? this.updateDisplay(this.displayYear, this.displayMonthNumber - 1) :
                this.updateDisplay(this.displayYear - 1, 11);
        };
        // Ao selecionar uma data
        // Ao selecionar uma data
        /**
         * @param {?} date
         * @return {?}
         */
        ThfCalendarComponent.prototype.onSelectDate = 
        // Ao selecionar uma data
        /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            this.date = date;
            this.dateIso = this.thfDate.convertDateToISO(date);
            if (this.propagateChange) {
                this.propagateChange(this.dateIso);
            }
            this.change.emit(this.dateIso);
        };
        // Ao selecionar um mês
        // Ao selecionar um mês
        /**
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        ThfCalendarComponent.prototype.onSelectMonth = 
        // Ao selecionar um mês
        /**
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        function (year, month) {
            this.selectDay();
            this.updateDisplay(year, month);
        };
        // Ao selecionar um ano
        // Ao selecionar um ano
        /**
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        ThfCalendarComponent.prototype.onSelectYear = 
        // Ao selecionar um ano
        /**
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        function (year, month) {
            // Se veio da tela de seleção de mês
            this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
            this.currentYear = year;
            this.updateDisplay(year, month);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfCalendarComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.propagateChange = fn;
        };
        /**
         * @param {?} func
         * @return {?}
         */
        ThfCalendarComponent.prototype.registerOnTouched = /**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            this.onTouched = func;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfCalendarComponent.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.validatorChange = fn;
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.selectDay = /**
         * @return {?}
         */
        function () {
            this.dayVisible = true;
            this.monthVisible = false;
            this.yearVisible = false;
            this.lastDisplay = 'day';
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.selectMonth = /**
         * @return {?}
         */
        function () {
            this.dayVisible = false;
            this.monthVisible = true;
            this.yearVisible = false;
            this.lastDisplay = 'month';
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.selectYear = /**
         * @return {?}
         */
        function () {
            this.dayVisible = false;
            this.monthVisible = false;
            this.yearVisible = true;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfCalendarComponent.prototype.updateYear = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
        };
        /**
         * @param {?} model
         * @return {?}
         */
        ThfCalendarComponent.prototype.validateModel = /**
         * @param {?} model
         * @return {?}
         */
        function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        /**
         * @param {?} c
         * @return {?}
         */
        ThfCalendarComponent.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            return null;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfCalendarComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this.writeDate(value);
            }
            else {
                this.date = undefined;
                this.updateDate(this.today);
            }
        };
        /**
         * @private
         * @param {?} year
         * @return {?}
         */
        ThfCalendarComponent.prototype.addAllYearsInDecade = /**
         * @private
         * @param {?} year
         * @return {?}
         */
        function (year) {
            /** @type {?} */
            var i;
            for (i = year; i < year + 10; i++) {
                this.displayDecade.push(i);
            }
        };
        /**
         * @private
         * @param {?} date1
         * @param {?} date2
         * @return {?}
         */
        ThfCalendarComponent.prototype.equalsDate = /**
         * @private
         * @param {?} date1
         * @param {?} date2
         * @return {?}
         */
        function (date1, date2) {
            try {
                return date1.getFullYear() === date2.getFullYear() &&
                    date1.getMonth() === date2.getMonth() &&
                    date1.getDate() === date2.getDate();
            }
            catch (error) {
                return false;
            }
        };
        // Obtém um array de todos os anos desta década
        // Obtém um array de todos os anos desta década
        /**
         * @private
         * @param {?} year
         * @return {?}
         */
        ThfCalendarComponent.prototype.getDecadeArray = 
        // Obtém um array de todos os anos desta década
        /**
         * @private
         * @param {?} year
         * @return {?}
         */
        function (year) {
            this.displayDecade = Array();
            if (year % 10 !== 0) {
                while (year % 10 !== 0) {
                    year--;
                }
            }
            this.updateDecade(year);
        };
        /**
         * @private
         * @param {?} date
         * @param {?} local
         * @return {?}
         */
        ThfCalendarComponent.prototype.getColorForDate = /**
         * @private
         * @param {?} date
         * @param {?} local
         * @return {?}
         */
        function (date, local) {
            return this.thfDate.validateDateRange(date, this.minDate, this.maxDate) ? "thf-calendar-box-" + local + "-selected" :
                "thf-calendar-box-" + local + "-selected-disabled";
        };
        /**
         * @private
         * @param {?} date
         * @param {?} local
         * @return {?}
         */
        ThfCalendarComponent.prototype.getColorForDateRange = /**
         * @private
         * @param {?} date
         * @param {?} local
         * @return {?}
         */
        function (date, local) {
            return this.thfDate.validateDateRange(date, this.minDate, this.maxDate) ? "thf-calendar-box-" + local :
                "thf-calendar-box-" + local + "-disabled";
        };
        /**
         * @private
         * @param {?} date
         * @param {?} local
         * @return {?}
         */
        ThfCalendarComponent.prototype.getColorForToday = /**
         * @private
         * @param {?} date
         * @param {?} local
         * @return {?}
         */
        function (date, local) {
            return this.thfDate.validateDateRange(date, this.minDate, this.maxDate) ? "thf-calendar-box-" + local + "-today" :
                "thf-calendar-box-" + local + "-today-disabled";
        };
        /**
         * @private
         * @param {?} date
         * @param {?} local
         * @return {?}
         */
        ThfCalendarComponent.prototype.getDayColor = /**
         * @private
         * @param {?} date
         * @param {?} local
         * @return {?}
         */
        function (date, local) {
            if (this.equalsDate(date, this.date)) {
                return this.getColorForDate(date, local);
            }
            else if (this.equalsDate(date, this.today)) {
                return this.getColorForToday(date, local);
            }
            else {
                return this.getColorForDateRange(date, local);
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfCalendarComponent.prototype.init = /**
         * @private
         * @return {?}
         */
        function () {
            this.date && this.thfDate.isValidIso(this.thfDate.convertDateToISO(this.date)) ?
                this.updateDate(this.date) : this.updateDate(this.today);
            this.initializeLanguage();
            this.selectDay();
        };
        /**
         * @private
         * @param {?} date
         * @return {?}
         */
        ThfCalendarComponent.prototype.selectDateFromDate = /**
         * @private
         * @param {?} date
         * @return {?}
         */
        function (date) {
            this.date = date;
            this.onSelectDate(this.date);
        };
        /**
         * @private
         * @param {?} stringDate
         * @return {?}
         */
        ThfCalendarComponent.prototype.selectDateFromIso = /**
         * @private
         * @param {?} stringDate
         * @return {?}
         */
        function (stringDate) {
            var _a = this.thfDate.getDateFromIso(stringDate), year = _a.year, month = _a.month, day = _a.day;
            /** @type {?} */
            var date = new Date(year, month - 1, day);
            this.thfDate.setYearFrom0To100(date, year);
            this.date = date;
            this.onSelectDate(this.date);
        };
        /**
         * @private
         * @param {?} date
         * @return {?}
         */
        ThfCalendarComponent.prototype.updateDate = /**
         * @private
         * @param {?} date
         * @return {?}
         */
        function (date) {
            if (date) {
                this.currentMonthNumber = date.getMonth();
                this.currentYear = date.getFullYear();
                this.updateDisplay(this.currentYear, this.currentMonthNumber);
            }
        };
        /**
         * @private
         * @param {?} year
         * @return {?}
         */
        ThfCalendarComponent.prototype.updateDecade = /**
         * @private
         * @param {?} year
         * @return {?}
         */
        function (year) {
            this.addAllYearsInDecade(year);
            this.displayStartDecade = year;
            this.displayFinalDecade = year + 9;
        };
        /**
         * @private
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        ThfCalendarComponent.prototype.updateDisplay = /**
         * @private
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        function (year, month) {
            /** @type {?} */
            var calendarArray = this.thfCalendarService.monthDays(year, month);
            this.displayDays = [].concat.apply([], calendarArray);
            this.displayMonthNumber = month;
            this.displayMonth = this.displayMonths[month];
            this.displayYear = year;
            this.getDecadeArray(year);
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfCalendarComponent.prototype.writeDate = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value instanceof Date ? this.selectDateFromDate(value) : this.writeDateIso(value);
            this.updateDate(this.date);
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfCalendarComponent.prototype.writeDateIso = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.thfDate.isValidIso(value) ? this.selectDateFromIso(value) : this.date = undefined;
        };
        ThfCalendarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-calendar',
                        template: "<div class=\"thf-calendar\">\n  <div *ngIf=\"dayVisible\">\n    <div class=\"thf-calendar-nav\">\n      <span class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\" (click)=\"onPreviousMonth()\"></span>\n      <div class=\"thf-calendar-nav-title\" attr-calendar>\n        <span class=\"thf-clickable thf-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span>\n        <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\" (click)=\"onNextMonth()\"></span>\n    </div>\n    <div class=\"thf-calendar-content\">\n      <div class=\"thf-calendar-labels\">\n        <div class=\"thf-calendar-label\" *ngFor=\"let day of displayWeekDays\">\n            {{ day.toLowerCase() }}\n        </div>\n      </div>\n      <div class=\"thf-calendar-content-list-day\">\n        <div *ngFor=\"let day of displayDays\"\n          class=\"thf-calendar-day\"\n          [ngClass]=\"getDayBackgroundColor(day)\"\n          (click)=\"onSelectDate(day)\">\n          <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\">\n            {{ day.getDate() }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"monthVisible\">\n    <div class=\"thf-calendar-nav\">\n      <span class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\" (click)=\"updateYear(-1)\"></span>\n      <div class=\"thf-calendar-nav-title\" attr-calendar>\n        <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\" (click)=\"updateYear(1)\"></span>\n    </div>\n    <div class=\"thf-calendar-content\">\n      <div class=\"thf-calendar-labels\">\n        <div class=\"thf-calendar-label\">\n          {{ getMonthLabel() }}\n        </div>\n      </div>\n      <div class=\"thf-calendar-content-list-month\">\n        <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"thf-calendar-month\"\n          [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\"\n          (click)=\"onSelectMonth(displayYear, i)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\n            {{ month }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"yearVisible\">\n    <div class=\"thf-calendar-nav\">\n      <span class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\" (click)=\"updateYear(-10)\"></span>\n      <div class=\"thf-calendar-nav-title\">\n        {{ displayStartDecade }} - {{ displayFinalDecade }}\n      </div>\n      <span class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\" (click)=\"updateYear(10)\"></span>\n    </div>\n    <div class=\"thf-calendar-content\">\n      <div class=\"thf-calendar-labels\">\n        <div class=\"thf-calendar-label\">\n          {{ getYearLabel() }}\n        </div>\n      </div>\n      <div class=\"thf-calendar-content-list-year\">\n        <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"thf-calendar-year\"\n          [ngClass]=\"getBackgroundColor(year, currentYear)\"\n          (click)=\"onSelectYear(year, displayMonthNumber)\"attr-calendar>\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\n            {{ year }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n",
                        providers: [
                            ThfCalendarService,
                            ThfCalendarLangService,
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfCalendarComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfCalendarComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfCalendarComponent.ctorParameters = function () { return [
            { type: ThfCalendarService },
            { type: ThfCalendarLangService },
            { type: ThfDateService }
        ]; };
        return ThfCalendarComponent;
    }(ThfCalendarBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     * Módulo do componente `thf-calendar`.
     */
    var ThfCalendarModule = /** @class */ (function () {
        function ThfCalendarModule() {
        }
        ThfCalendarModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [ThfCalendarComponent],
                        exports: [ThfCalendarComponent],
                        providers: [
                            ThfCalendarLangService,
                            ThfCalendarService
                        ]
                    },] }
        ];
        return ThfCalendarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ThfChartType = {
        /**
         * **Gráfico pizza:** utilizado para exibir proporções de valores a partir de um todo.
         */
        Pie: 'pie',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfChartDefaultHeight = 400;
    /** @type {?} */
    var thfChartTypeDefault = ThfChartType.Pie;
    /** @type {?} */
    var thfChartMinHeight = 200;
    /**
     * \@description
     *
     * O `thf-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
     * visualização destes dados mais agradável.
     *
     * Este componente também possibilita a definição das seguintes propriedades: altura do gráfico; série(s) que irão compor o gráfico;
     * título do gráfico; e tipo de gráfico.
     *
     * Além das definições de propriedades, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
     * e outra que será executada ao passar o *mouse* sobre o elemento.
     *
     * #### Boas práticas
     *
     * - Para que o gráfico não fique ilegível e incompreensível, evite uma quantia excessiva de séries.
     *
     * @abstract
     */
    var ThfChartBaseComponent = /** @class */ (function () {
        function ThfChartBaseComponent() {
            this._height = thfChartDefaultHeight;
            this._type = thfChartTypeDefault;
            this.thfChartType = ThfChartType;
            /**
             * Evento executado quando o usuário clicar sobre um elemento do gráfico.
             *
             * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
             */
            this.seriesClick = new core.EventEmitter();
            /**
             * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
             *
             * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
             */
            this.seriesHover = new core.EventEmitter();
        }
        Object.defineProperty(ThfChartBaseComponent.prototype, "height", {
            get: /**
             * @return {?}
             */
            function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura do gráfico.
             *
             * > O valor mínimo que pode ser informado é 200.
             *
             * @default `400px`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define a altura do gráfico.
             *
             * > O valor mínimo que pode ser informado é 200.
             *
             * \@default `400px`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var intValue = convertToInt(value);
                /** @type {?} */
                var height;
                if (isTypeof(value, 'number')) {
                    height = intValue <= thfChartMinHeight ? thfChartMinHeight : intValue;
                }
                else {
                    height = thfChartDefaultHeight;
                }
                this._height = height;
                this.rebuildComponent();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfChartBaseComponent.prototype, "type", {
            // TODO quando houver a necessidade de informar um type.
            // /**
            //  * @optional
            //  *
            //  * @description
            //  *
            //  * Define o tipo de gráfico.
            //  *
            //  * > Veja os valores válidos no *enum* `ThfChartType`.
            //  *
            //  * @default `ThfChartType.Pie`
            //  */
            // @Input('t-type') set type(value: ThfChartType) {
            //   this._type = (<any>Object).values(ThfChartType).includes(value) ? value : thfChartTypeDefault;
            // }
            get: 
            // TODO quando houver a necessidade de informar um type.
            // /**
            //  * @optional
            //  *
            //  * @description
            //  *
            //  * Define o tipo de gráfico.
            //  *
            //  * > Veja os valores válidos no *enum* `ThfChartType`.
            //  *
            //  * @default `ThfChartType.Pie`
            //  */
            // @Input('t-type') set type(value: ThfChartType) {
            //   this._type = (<any>Object).values(ThfChartType).includes(value) ? value : thfChartTypeDefault;
            // }
            /**
             * @return {?}
             */
            function () {
                return this._type;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        ThfChartBaseComponent.prototype.onSeriesClick = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.seriesClick.emit(event);
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfChartBaseComponent.prototype.onSeriesHover = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.seriesHover.emit(event);
        };
        ThfChartBaseComponent.propDecorators = {
            height: [{ type: core.Input, args: ['t-height',] }],
            series: [{ type: core.Input, args: ['t-series',] }],
            title: [{ type: core.Input, args: ['t-title',] }],
            seriesClick: [{ type: core.Output, args: ['t-series-click',] }],
            seriesHover: [{ type: core.Output, args: ['t-series-hover',] }]
        };
        return ThfChartBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // Array de cores para gráficos definido pela equipe de UX Totvs.
    /** @type {?} */
    var ThfChartColors = [
        ['#29B6C5'],
        ['#0C6C94', '#29B6C5'],
        ['#0C6C94', '#29B6C5', '#C9ECF0'],
        ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2'],
        ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2', '#C9ECF0'],
        ['#0C6C94', '#00A5C5', '#0082A8', '#31628D', '#364473', '#32285C'],
        ['#0C6C94', '#00AACB', '#018DAE', '#277099', '#325783', '#35426E', '#32285D'],
        ['#0C6C94', '#00AFCE', '#0194B6', '#117FA2', '#0088AC', '#23789F', '#2B6992', '#32285C'],
        ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#32285C'],
        ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#32285C'],
        ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#36436F', '#32285C'],
        ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#36436F', '#333565', '#32285C'],
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfChartAnimationDurationTime = 1500;
    /** @type {?} */
    var thfChartAngleStepInterval = Math.PI * 2 / Math.floor(thfChartAnimationDurationTime / 60);
    /** @type {?} */
    var thfChartCompleteCircle = 0.0001;
    /** @type {?} */
    var thfChartPadding = 24;
    /** @type {?} */
    var thfChartStartAngle = -Math.PI / 2;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var Padding = 24;
    /**
     * @abstract
     */
    var ThfChartDynamicTypeComponent = /** @class */ (function () {
        function ThfChartDynamicTypeComponent() {
            this.onSerieClick = new rxjs.Subject();
            this.onSerieHover = new rxjs.Subject();
            this.series = [];
        }
        /**
         * @param {?} chartWrapperElement
         * @param {?} chartHeaderElement
         * @param {?} chartLegendElement
         * @return {?}
         */
        ThfChartDynamicTypeComponent.prototype.calculateSVGContainerDimensions = /**
         * @param {?} chartWrapperElement
         * @param {?} chartHeaderElement
         * @param {?} chartLegendElement
         * @return {?}
         */
        function (chartWrapperElement, chartHeaderElement, chartLegendElement) {
            /** @type {?} */
            var svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - (Padding * 2);
            this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;
            this.centerX = chartWrapperElement / 2;
        };
        /**
         * @return {?}
         */
        ThfChartDynamicTypeComponent.prototype.calculateTotalValue = /**
         * @return {?}
         */
        function () {
            this.totalValue = this.series.reduce((/**
             * @param {?} previousValue
             * @param {?} serie
             * @return {?}
             */
            function (previousValue, serie) { return previousValue + serie.value; }), 0);
        };
        ThfChartDynamicTypeComponent.propDecorators = {
            chartBody: [{ type: core.ViewChild, args: ['chartBody', { static: true },] }],
            svgContainer: [{ type: core.ViewChild, args: ['svgContainer', { static: true },] }]
        };
        return ThfChartDynamicTypeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfChartPieComponent = /** @class */ (function (_super) {
        __extends(ThfChartPieComponent, _super);
        function ThfChartPieComponent(el, ngZone, renderer) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this.ngZone = ngZone;
            _this.renderer = renderer;
            _this.chartItemsEndAngleList = [];
            _this.svgPathElementsList = [];
            return _this;
        }
        /**
         * @private
         * @param {?} value
         * @param {?} totalValue
         * @return {?}
         */
        ThfChartPieComponent.calculateEndAngle = /**
         * @private
         * @param {?} value
         * @param {?} totalValue
         * @return {?}
         */
        function (value, totalValue) {
            return value / totalValue * (Math.PI * 2);
        };
        /**
         * @return {?}
         */
        ThfChartPieComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.removeWindowResizeListener();
            this.removeWindowScrollListener();
            this.animationRunning = false;
        };
        /**
         * @return {?}
         */
        ThfChartPieComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.chartInitSetup();
            this.setEventListeners();
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartPieComponent.prototype.animationSetup = /**
         * @private
         * @return {?}
         */
        function () {
            this.chartItemStartAngle = thfChartStartAngle;
            this.chartItemEndAngle = this.chartItemsEndAngleList[0];
            this.animationRunning = true;
            this.drawPathInit();
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartPieComponent.prototype.calculateAngleRadians = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.series.forEach((/**
             * @param {?} serie
             * @param {?} index
             * @return {?}
             */
            function (serie, index) {
                return _this.chartItemsEndAngleList[index] = ThfChartPieComponent.calculateEndAngle(serie.value, _this.totalValue);
            }));
        };
        /**
         * @private
         * @param {?} angleCurrentPosition
         * @return {?}
         */
        ThfChartPieComponent.prototype.calculateCurrentEndAngle = /**
         * @private
         * @param {?} angleCurrentPosition
         * @return {?}
         */
        function (angleCurrentPosition) {
            /** @type {?} */
            var isSerieDrawCompleted = this.chartItemStartAngle + angleCurrentPosition > this.chartItemStartAngle + this.chartItemEndAngle;
            if (isSerieDrawCompleted) {
                return (this.chartItemStartAngle + this.chartItemEndAngle) - thfChartCompleteCircle;
            }
            else {
                return this.chartItemStartAngle + angleCurrentPosition;
            }
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfChartPieComponent.prototype.changeTooltipPosition = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.tooltipElement && this.tooltipElement.classList.contains('thf-invisible')) {
                this.showTooltip();
            }
            /** @type {?} */
            var tooltipPositions = this.setTooltipPositions(event);
            this.renderer.setStyle(this.tooltipElement, 'left', tooltipPositions.left + "px");
            this.renderer.setStyle(this.tooltipElement, 'top', tooltipPositions.top + "px");
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartPieComponent.prototype.chartInitSetup = /**
         * @private
         * @return {?}
         */
        function () {
            this.calculateSVGContainerDimensions(this.chartWrapper, this.chartHeader, this.chartLegend);
            this.calculateTotalValue();
            this.calculateAngleRadians();
            this.createSVGElements();
            this.animationSetup();
        };
        /**
         * @private
         * @param {?} index
         * @param {?} serie
         * @param {?} svgPathsWrapper
         * @return {?}
         */
        ThfChartPieComponent.prototype.createPath = /**
         * @private
         * @param {?} index
         * @param {?} serie
         * @param {?} svgPathsWrapper
         * @return {?}
         */
        function (index, serie, svgPathsWrapper) {
            /** @type {?} */
            var svgPath = this.renderer.createElement('svg:path', 'svg');
            this.renderer.setAttribute(svgPath, 'class', 'thf-path-item');
            this.renderer.setAttribute(svgPath, 'fill', this.colors[index]);
            this.renderer.setAttribute(svgPath, 'data-tooltip-category', serie.category);
            this.renderer.setAttribute(svgPath, 'data-tooltip-value', serie.value.toString());
            this.renderer.setAttribute(svgPath, 'data-tooltip-text', serie.tooltip || serie.category + ": " + serie.value);
            svgPathsWrapper.appendChild(svgPath);
            this.renderer.appendChild(this.svgElement, svgPathsWrapper);
            this.svgPathElementsList.push(svgPath);
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartPieComponent.prototype.createPaths = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var svgPathsWrapper = this.renderer.createElement('svg:g', 'svg');
            this.series.forEach((/**
             * @param {?} serie
             * @param {?} index
             * @return {?}
             */
            function (serie, index) { return _this.createPath(index, serie, svgPathsWrapper); }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartPieComponent.prototype.createSVGElements = /**
         * @private
         * @return {?}
         */
        function () {
            this.svgElement = this.renderer.createElement('svg:svg', 'svg');
            this.renderer.setAttribute(this.svgElement, 'viewBox', "0 0 " + this.chartWrapper + " " + this.centerX * 2);
            this.renderer.setAttribute(this.svgElement, 'preserveAspectRatio', 'xMidYMin meet');
            this.renderer.setAttribute(this.svgElement, 'class', 'thf-chart-svg-element');
            this.renderer.setAttribute(this.svgElement, 'width', "" + (this.chartWrapper - thfChartPadding * 2));
            this.renderer.setAttribute(this.svgElement, 'height', "" + this.svgHeight);
            this.svgContainer.nativeElement.appendChild(this.svgElement);
            this.createPaths();
        };
        /**
         * @private
         * @param {?} path
         * @param {?} chartItemStartAngle
         * @param {?} chartItemEndAngle
         * @return {?}
         */
        ThfChartPieComponent.prototype.drawPath = /**
         * @private
         * @param {?} path
         * @param {?} chartItemStartAngle
         * @param {?} chartItemEndAngle
         * @return {?}
         */
        function (path, chartItemStartAngle, chartItemEndAngle) {
            /** @type {?} */
            var largeArc = (chartItemEndAngle - chartItemStartAngle) % (Math.PI * 2) > Math.PI ? 1 : 0;
            /** @type {?} */
            var startX = this.centerX + Math.cos(chartItemStartAngle) * this.centerX;
            /** @type {?} */
            var startY = this.centerX + Math.sin(chartItemStartAngle) * this.centerX;
            /** @type {?} */
            var endX = this.centerX + Math.cos(chartItemEndAngle) * this.centerX;
            /** @type {?} */
            var endY = this.centerX + Math.sin(chartItemEndAngle) * this.centerX;
            /** @type {?} */
            var pathCoordinates = [
                'M', startX, startY,
                'A', this.centerX, this.centerX, 0, largeArc, 1, endX, endY,
                'L', this.centerX, this.centerX,
                'Z'
            ].join(' ');
            return path.setAttribute('d', pathCoordinates);
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartPieComponent.prototype.drawPathInit = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.animationRunning) {
                return;
            }
            else {
                this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return _this.drawSeries(); }));
            }
        };
        /**
         * @private
         * @param {?=} currentSerieIndex
         * @param {?=} angleCurrentPosition
         * @return {?}
         */
        ThfChartPieComponent.prototype.drawSeries = /**
         * @private
         * @param {?=} currentSerieIndex
         * @param {?=} angleCurrentPosition
         * @return {?}
         */
        function (currentSerieIndex, angleCurrentPosition) {
            if (currentSerieIndex === void 0) { currentSerieIndex = 0; }
            if (angleCurrentPosition === void 0) { angleCurrentPosition = 0; }
            /** @type {?} */
            var isFinishedDrawingCurrentSeries = angleCurrentPosition > this.chartItemEndAngle;
            /** @type {?} */
            var isFinishedDrawingAllSeries = currentSerieIndex === this.svgPathElementsList.length;
            if (isFinishedDrawingAllSeries) {
                return;
            }
            if (isFinishedDrawingCurrentSeries) {
                this.chartItemStartAngle = this.chartItemStartAngle + this.chartItemEndAngle;
                currentSerieIndex++;
                this.chartItemEndAngle = this.chartItemsEndAngleList[currentSerieIndex];
                angleCurrentPosition = 0;
            }
            else {
                angleCurrentPosition += thfChartAngleStepInterval;
                this.drawPath(this.svgPathElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
            }
            window.requestAnimationFrame(this.drawSeries.bind(this, currentSerieIndex, angleCurrentPosition));
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfChartPieComponent.prototype.emitEventOnEnter = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.onSerieHover.next(event);
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartPieComponent.prototype.onMouseClick = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var serieOnClick = { category: this.chartElementCategory, value: this.chartElementValue };
            this.onSerieClick.next(serieOnClick);
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfChartPieComponent.prototype.onMouseEnter = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.tooltipElement = this.chartBody.nativeElement.lastChild;
            this.chartElementCategory = event.target.getAttributeNS(null, 'data-tooltip-category');
            this.chartElementValue = event.target.getAttributeNS(null, 'data-tooltip-value');
            this.tooltipText = event.target.getAttributeNS(null, 'data-tooltip-text');
            this.showTooltip();
            this.changeTooltipPosition(event);
            /** @type {?} */
            var serieOnEnter = { category: this.chartElementCategory, value: this.chartElementValue };
            this.emitEventOnEnter(serieOnEnter);
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartPieComponent.prototype.onWindowResize = /**
         * @private
         * @return {?}
         */
        function () {
            this.calculateSVGContainerDimensions(this.chartWrapper, this.chartHeader, this.chartLegend);
            this.renderer.setAttribute(this.svgElement, 'width', "" + (this.chartWrapper - thfChartPadding * 2));
            this.renderer.setAttribute(this.svgElement, 'height', "" + this.svgHeight);
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartPieComponent.prototype.removeTooltip = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.tooltipElement) {
                this.renderer.addClass(this.tooltipElement, 'thf-invisible');
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartPieComponent.prototype.removeWindowResizeListener = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.windowResizeListener) {
                this.windowResizeListener();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartPieComponent.prototype.removeWindowScrollListener = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.windowScrollListener) {
                this.windowScrollListener();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartPieComponent.prototype.setEventListeners = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var chartSeries = this.el.nativeElement.querySelectorAll('.thf-path-item');
            chartSeries = Array.from(chartSeries);
            chartSeries.forEach((/**
             * @param {?} serie
             * @return {?}
             */
            function (serie) {
                _this.renderer.listen(serie, 'click', _this.onMouseClick.bind(_this));
                _this.renderer.listen(serie, 'mouseenter', _this.onMouseEnter.bind(_this));
                _this.renderer.listen(serie, 'mousemove', _this.changeTooltipPosition.bind(_this));
                _this.renderer.listen(serie, 'mouseleave', _this.removeTooltip.bind(_this));
            }));
            this.windowResizeListener = this.renderer.listen(window, 'resize', this.onWindowResize.bind(this));
            this.windowScrollListener = this.renderer.listen(this.checkingIfScrollsWithThfPage(), 'scroll', this.removeTooltip.bind(this));
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartPieComponent.prototype.checkingIfScrollsWithThfPage = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var thfPageContent = document.getElementsByClassName('thf-page-content');
            return thfPageContent.length ? thfPageContent[0] : window;
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfChartPieComponent.prototype.setTooltipPositions = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var displacement = 8;
            return {
                left: event.clientX - this.tooltipElement.offsetWidth / 2,
                top: event.clientY - this.tooltipElement.offsetHeight - displacement
            };
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartPieComponent.prototype.showTooltip = /**
         * @private
         * @return {?}
         */
        function () {
            this.renderer.removeClass(this.tooltipElement, 'thf-invisible');
        };
        ThfChartPieComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-chart-pie',
                        template: "<div #chartBody class=\"thf-chart-body\">\n  <div #svgContainer class=\"thf-chart-svg-container\"></div>\n  <div class=\"thf-chart-tooltip thf-tooltip thf-invisible\">\n    <div class=\"thf-tooltip-arrow thf-arrow-bottom\"></div>\n    <div class=\"thf-tooltip-content\">{{ tooltipText }}</div>\n  </div>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        ThfChartPieComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.NgZone },
            { type: core.Renderer2 }
        ]; };
        return ThfChartPieComponent;
    }(ThfChartDynamicTypeComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfChartBaseComponent
     *
     * \@example
     *
     * <example name="thf-chart-basic" title="Totvs Chart Basic">
     *  <file name="sample-thf-chart-basic/sample-thf-chart-basic.component.html"> </file>
     *  <file name="sample-thf-chart-basic/sample-thf-chart-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-chart-labs" title="Totvs Chart Labs">
     *  <file name="sample-thf-chart-labs/sample-thf-chart-labs.component.html"> </file>
     *  <file name="sample-thf-chart-labs/sample-thf-chart-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-chart-coffee-ranking" title="Totvs Chart - Coffee Ranking">
     *  <file name="sample-thf-chart-coffee-ranking/sample-thf-chart-coffee-ranking.component.html"> </file>
     *  <file name="sample-thf-chart-coffee-ranking/sample-thf-chart-coffee-ranking.component.ts"> </file>
     * </example>
     */
    var ThfChartComponent = /** @class */ (function (_super) {
        __extends(ThfChartComponent, _super);
        function ThfChartComponent(changeDetector, componentFactoryResolver, differs) {
            var _a;
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            _this.componentFactoryResolver = componentFactoryResolver;
            _this.differs = differs;
            _this.calculatedElement = false;
            _this.initialized = false;
            _this.windowResizeListener = new rxjs.Subject();
            _this.mappings = (_a = {},
                _a[ThfChartType.Pie] = ThfChartPieComponent,
                _a);
            _this.onResize = (/**
             * @return {?}
             */
            function () { return _this.windowResizeListener.next(); });
            _this.differ = _this.differs.find([]).create(null);
            return _this;
        }
        /**
         * @return {?}
         */
        ThfChartComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.initialized = true;
        };
        /**
         * @return {?}
         */
        ThfChartComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
            // Permite que o chart seja calculado na primeira vez que o componente torna-se visível,
            // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
            if (charWrapperWidth && !this.calculatedElement && this.initialized) {
                this.calculatedElement = true;
                this.getSeriesColor();
                this.dynamicComponentSetting();
            }
            this.checkingForSerieChanges();
        };
        /**
         * @return {?}
         */
        ThfChartComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.removeWindowResizeListener();
        };
        /**
         * @return {?}
         */
        ThfChartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.getSeriesColor();
        };
        /**
         * @return {?}
         */
        ThfChartComponent.prototype.rebuildComponent = /**
         * @return {?}
         */
        function () {
            if (this.componentRef) {
                this.componentRef.destroy();
                this.dynamicComponentSetting();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartComponent.prototype.checkingForSerieChanges = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.componentRef && this.differ) {
                /** @type {?} */
                var changeSeries = this.differ.diff(this.series);
                if (changeSeries) {
                    this.getSeriesColor();
                    this.rebuildComponent();
                }
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartComponent.prototype.createComponent = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var componentType = this.getComponentType(this.type);
            /** @type {?} */
            var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            this.componentRef = this.chartContainer.createComponent(factory);
            /** @type {?} */
            var instance = (/** @type {?} */ (this.componentRef.instance));
            this.setChartProperties(instance);
            return instance;
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartComponent.prototype.dynamicComponentSetting = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var instance = this.createComponent();
            this.setResizeListenerSubscribe(instance);
            this.changeDetector.detectChanges();
            this.setClickSubscribe(instance);
            this.setHoverSubscribe(instance);
        };
        /**
         * @private
         * @param {?} typeName
         * @return {?}
         */
        ThfChartComponent.prototype.getComponentType = /**
         * @private
         * @param {?} typeName
         * @return {?}
         */
        function (typeName) {
            return this.mappings[typeName];
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartComponent.prototype.getSeriesColor = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var colorsLength = ThfChartColors.length - 1;
            if (!this.series) {
                return this.colors = ThfChartColors[colorsLength];
            }
            /** @type {?} */
            var seriesLength = this.series.length - 1;
            if (seriesLength > colorsLength) {
                /** @type {?} */
                var colors = ThfChartColors[colorsLength];
                // recupera o resultado da divisao entre tamanho das series e o numero de cores disponiveis
                /** @type {?} */
                var quantityDuplicates = seriesLength / colorsLength;
                for (var i = 1; i <= quantityDuplicates; i++) {
                    colors = colors.concat(ThfChartColors[colorsLength]);
                }
                return this.colors = colors;
            }
            return this.colors = ThfChartColors[seriesLength];
        };
        /**
         * @private
         * @return {?}
         */
        ThfChartComponent.prototype.removeWindowResizeListener = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.onResize) {
                this.onResize = (/**
                 * @return {?}
                 */
                function () { });
            }
        };
        /**
         * @private
         * @param {?} instance
         * @return {?}
         */
        ThfChartComponent.prototype.setChartProperties = /**
         * @private
         * @param {?} instance
         * @return {?}
         */
        function (instance) {
            instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;
            instance.chartLegend = this.chartLegend.nativeElement.offsetHeight;
            instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;
            instance.colors = this.colors;
            instance.height = this.height;
            instance.series = this.series || [];
        };
        /**
         * @private
         * @param {?} instance
         * @return {?}
         */
        ThfChartComponent.prototype.setClickSubscribe = /**
         * @private
         * @param {?} instance
         * @return {?}
         */
        function (instance) {
            var _this = this;
            instance.onSerieClick.subscribe((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.onSeriesClick(event);
            }));
        };
        /**
         * @private
         * @param {?} instance
         * @return {?}
         */
        ThfChartComponent.prototype.setHoverSubscribe = /**
         * @private
         * @param {?} instance
         * @return {?}
         */
        function (instance) {
            var _this = this;
            instance.onSerieHover.subscribe((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.onSeriesHover(event);
            }));
        };
        /**
         * @private
         * @param {?} instance
         * @return {?}
         */
        ThfChartComponent.prototype.setResizeListenerSubscribe = /**
         * @private
         * @param {?} instance
         * @return {?}
         */
        function (instance) {
            var _this = this;
            this.windowResizeListener.subscribe((/**
             * @return {?}
             */
            function () {
                instance.chartHeader = _this.chartHeader.nativeElement.offsetHeight;
                instance.chartLegend = _this.chartLegend.nativeElement.offsetHeight;
                instance.chartWrapper = _this.chartWrapper.nativeElement.offsetWidth;
            }));
        };
        ThfChartComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-chart',
                        template: "<div #chartWrapper class=\"thf-chart-wrapper\">\n  <div #chartHeader class=\"thf-chart-header\">\n    <div class=\"thf-chart-title\">{{ title }}</div>\n  </div>\n  <ng-template #chartContainer></ng-template>\n  <div #chartLegend class=\"thf-chart-legend\">\n    <div class=\"thf-chart-legend-container\">\n      <div class=\"thf-chart-legend-item\" *ngFor=\"let serie of series; let i = index\">\n        <div class=\"thf-chart-legend-square\" [style.background]=\"colors[i]\"></div>\n        <span class=\"thf-chart-legend-text\">{{ serie.category }}</span>\n      </div>\n    </div>\n  </div>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfChartComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: core.ComponentFactoryResolver },
            { type: core.IterableDiffers }
        ]; };
        ThfChartComponent.propDecorators = {
            chartContainer: [{ type: core.ViewChild, args: ['chartContainer', { read: core.ViewContainerRef, static: true },] }],
            chartHeader: [{ type: core.ViewChild, args: ['chartHeader', { static: true },] }],
            chartLegend: [{ type: core.ViewChild, args: ['chartLegend', { static: true },] }],
            chartWrapper: [{ type: core.ViewChild, args: ['chartWrapper', { static: true },] }],
            onResize: [{ type: core.HostListener, args: ['window:resize', ['$event'],] }]
        };
        return ThfChartComponent;
    }(ThfChartBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente `thf-chart`.
     */
    var ThfChartModule = /** @class */ (function () {
        function ThfChartModule() {
        }
        ThfChartModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                        ],
                        declarations: [
                            ThfChartComponent,
                            ThfChartPieComponent,
                        ],
                        entryComponents: [
                            ThfChartPieComponent
                        ],
                        exports: [
                            ThfChartComponent,
                        ]
                    },] }
        ];
        return ThfChartModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O `thf-container` é um componente que visa facilitar o agrupamento de conteúdos.
     * Por padrão o mesmo exibe uma borda, um efeito de sombra ao seu redor e um espaçamento em sua parte interna, os quais
     * podem ser desabilitados. Ao remover sua borda a sombra também será removida. Além disso, sua altura acompanha a
     * quantidade do conteúdo, porém pode ser fixada. Para controlar sua largura, utilize o [Grid System](/guides/grid-system),
     * assim possibilitando o tratamento para diferentes resoluções.
     */
    var ThfContainerBaseComponent = /** @class */ (function () {
        function ThfContainerBaseComponent() {
            this._noBorder = false;
            this._noPadding = false;
            this._noShadow = false;
        }
        Object.defineProperty(ThfContainerBaseComponent.prototype, "height", {
            get: /**
             * @return {?}
             */
            function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura do `thf-container`.
             *
             * > Caso não seja definido um valor, a altura se ajustará de acordo com o conteúdo.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define a altura do `thf-container`.
             *
             * > Caso não seja definido um valor, a altura se ajustará de acordo com o conteúdo.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._height = convertToInt(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfContainerBaseComponent.prototype, "noBorder", {
            get: /**
             * @return {?}
             */
            function () {
                return this._noBorder;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita a borda e a sombra em torno do `thf-container`.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Desabilita a borda e a sombra em torno do `thf-container`.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._noBorder = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfContainerBaseComponent.prototype, "noPadding", {
            get: /**
             * @return {?}
             */
            function () {
                return this._noPadding;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o espaçamento interno do `thf-container`.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Desabilita o espaçamento interno do `thf-container`.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._noPadding = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfContainerBaseComponent.prototype, "noShadow", {
            get: /**
             * @return {?}
             */
            function () {
                return this._noShadow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o sombreamento em torno do `thf-container`.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Desabilita o sombreamento em torno do `thf-container`.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._noShadow = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        ThfContainerBaseComponent.propDecorators = {
            height: [{ type: core.Input, args: ['t-height',] }],
            noBorder: [{ type: core.Input, args: ['t-no-border',] }],
            noPadding: [{ type: core.Input, args: ['t-no-padding',] }],
            noShadow: [{ type: core.Input, args: ['t-no-shadow',] }]
        };
        return ThfContainerBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfContainerBaseComponent
     *
     * \@example
     *
     * <example name="thf-container-basic" title="Totvs Container Basic">
     *  <file name="sample-thf-container-basic/sample-thf-container-basic.component.html"> </file>
     *  <file name="sample-thf-container-basic/sample-thf-container-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-container-labs" title="Totvs Container Labs">
     *  <file name="sample-thf-container-labs/sample-thf-container-labs.component.html"> </file>
     *  <file name="sample-thf-container-labs/sample-thf-container-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-container-dashboard" title="Totvs Container - Dashboard">
     *  <file name="sample-thf-container-dashboard/sample-thf-container-dashboard.component.html"> </file>
     *  <file name="sample-thf-container-dashboard/sample-thf-container-dashboard.component.ts"> </file>
     *  <file name="sample-thf-container-dashboard/sample-thf-container-dashboard.service.ts"> </file>
     * </example>
     */
    var ThfContainerComponent = /** @class */ (function (_super) {
        __extends(ThfContainerComponent, _super);
        function ThfContainerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ThfContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-container',
                        template: "<div class=\"thf-container\"\n  [class.thf-container-no-border]=\"noBorder\"\n  [class.thf-container-no-padding]=\"noPadding\"\n  [class.thf-container-no-shadow]=\"noShadow\"\n  [style.height]=\"height ? height + 'px' : 'auto'\">\n  <ng-content></ng-content>\n</div>\n"
                    }] }
        ];
        return ThfContainerComponent;
    }(ThfContainerBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente `thf-container`.
     */
    var ThfContainerModule = /** @class */ (function () {
        function ThfContainerModule() {
        }
        ThfContainerModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        exports: [
                            ThfContainerComponent
                        ],
                        declarations: [
                            ThfContainerComponent
                        ]
                    },] }
        ];
        return ThfContainerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var THF_DISCLAIMER_TYPES = ['default', 'danger'];
    /** @type {?} */
    var THF_DISCLAIMER_DEFAULT_TYPE = 'default';
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * O componente thf-disclaimer é responsável por representar tags.
     * Seu uso é recomendado em buscas e em campos onde é necessário representar objetos selecionados,
     * como por exemplo, no thf-multi-select.
     *
     */
    var ThfDisclaimerBaseComponent = /** @class */ (function () {
        function ThfDisclaimerBaseComponent() {
            this._type = 'default';
            this._hideClose = false;
            this.showDisclaimer = true;
            /**
             * Evento disparado ao fechar o disclaimer.
             * Para este evento será passado como parâmetro um objeto com value, label e property.
             */
            this.closeAction = new core.EventEmitter();
        }
        Object.defineProperty(ThfDisclaimerBaseComponent.prototype, "hideClose", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hideClose;
            },
            /**
             * @description
             *
             * Esta propriedade esconde o botão para fechamento do thf-disclaimer, ao utilizar esta propriedade
             * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
             *
             * @default false
             */
            set: /**
             * \@description
             *
             * Esta propriedade esconde o botão para fechamento do thf-disclaimer, ao utilizar esta propriedade
             * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
             *
             * \@default false
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._hideClose = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDisclaimerBaseComponent.prototype, "type", {
            get: /**
             * @return {?}
             */
            function () {
                return this._type;
            },
            /**
             * @description
             *
             * Tipo do thf-disclaimer. Pode ser 'default' ou 'danger'.
             *
             * @default default
             * @optional
             */
            set: /**
             * \@description
             *
             * Tipo do thf-disclaimer. Pode ser 'default' ou 'danger'.
             *
             * \@default default
             * \@optional
             * @param {?} type
             * @return {?}
             */
            function (type) {
                this._type = THF_DISCLAIMER_TYPES.includes(type) ? type : THF_DISCLAIMER_DEFAULT_TYPE;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfDisclaimerBaseComponent.prototype.close = /**
         * @return {?}
         */
        function () {
            this.showDisclaimer = false;
            this.closeAction.emit({ value: this.value, label: this.label, property: this.property });
        };
        /**
         * @return {?}
         */
        ThfDisclaimerBaseComponent.prototype.getLabel = /**
         * @return {?}
         */
        function () {
            return this.label ? this.label : this.value;
        };
        ThfDisclaimerBaseComponent.propDecorators = {
            label: [{ type: core.Input, args: ['t-label',] }],
            value: [{ type: core.Input, args: ['t-value',] }],
            property: [{ type: core.Input, args: ['t-property',] }],
            hideClose: [{ type: core.Input, args: ['t-hide-close',] }],
            closeAction: [{ type: core.Output, args: ['t-close-action',] }],
            type: [{ type: core.Input, args: ['t-type',] }]
        };
        return ThfDisclaimerBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@docsExtends ThfDisclaimerBaseComponent
     *
     * \@examplePrivate
     *
     * <example-private name="thf-disclaimer" title="Totvs Disclaimer">
     *   <file name="sample-thf-disclaimer.component.html"> </file>
     *   <file name="sample-thf-disclaimer.component.ts"> </file>
     * </example-private>
     */
    var ThfDisclaimerComponent = /** @class */ (function (_super) {
        __extends(ThfDisclaimerComponent, _super);
        function ThfDisclaimerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} event
         * @return {?}
         */
        ThfDisclaimerComponent.prototype.onKeyPress = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (isKeyCodeEnter(event)) {
                this.close();
            }
        };
        ThfDisclaimerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-disclaimer',
                        template: "<div *ngIf=\"showDisclaimer === true\" class=\"thf-disclaimer\">\n\n  <span class=\"thf-disclaimer-label\"\n    [class.thf-disclaimer-label-danger]=\"type === 'danger'\">\n    {{getLabel()}}\n  </span>\n\n  <span *ngIf=\"hideClose === false\"\n    class=\"thf-disclaimer-remove thf-icon thf-icon-close thf-clickable\"\n    tabindex=\"0\"\n    [class.thf-disclaimer-remove-danger]=\"type === 'danger'\"\n    (click)=\"close()\"\n    (keydown)=\"onKeyPress($event)\">\n  </span>\n</div>\n"
                    }] }
        ];
        return ThfDisclaimerComponent;
    }(ThfDisclaimerBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     * Módulo do componente thf-disclaimer.
     */
    var ThfDisclaimerModule = /** @class */ (function () {
        function ThfDisclaimerModule() {
        }
        ThfDisclaimerModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [ThfDisclaimerComponent],
                        exports: [ThfDisclaimerComponent]
                    },] }
        ];
        return ThfDisclaimerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfDisclaimerGroupLiteralsDefault = {
        en: { removeAll: 'Remove all' },
        es: { removeAll: 'Eliminar todos' },
        pt: { removeAll: 'Remover todos' }
    };
    /**
     * \@description
     *
     * O componente `thf-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
     *
     * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
     * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
     *
     * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
     * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
     *
     * > Veja a integração destas funcionalidade no componente [thf-page-list](/documentation/thf-page-list).
     */
    var ThfDisclaimerGroupBaseComponent = /** @class */ (function () {
        function ThfDisclaimerGroupBaseComponent(differs) {
            this._disclaimers = [];
            this._hideRemoveAll = false;
            this.previousDisclaimers = [];
            this.literals = __assign({}, thfDisclaimerGroupLiteralsDefault[thfLocaleDefault], thfDisclaimerGroupLiteralsDefault[browserLanguage()]);
            /**
             * Função que será disparada quando a lista de *disclaimers* for modificada.
             */
            this.change = new core.EventEmitter();
            this.differ = differs.find([]).create(null);
        }
        Object.defineProperty(ThfDisclaimerGroupBaseComponent.prototype, "disclaimers", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disclaimers;
            },
            /** Lista de *disclaimers*. */
            /**
             * @description
             *
             * Lista de *disclaimers*.
             *
             * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `ThfDisclaimer`.
             *
             * Exemplo adicionando um *disclaimer* no array:
             *
             * ```
             * this.disclaimers = [...this.disclaimers, disclaimer];
             * ```
             *
             * ou
             *
             * ```
             * this.disclaimers = this.disclaimers.concat(disclaimer);
             * ```
             */
            set: /** Lista de *disclaimers*. */
            /**
             * \@description
             *
             * Lista de *disclaimers*.
             *
             * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `ThfDisclaimer`.
             *
             * Exemplo adicionando um *disclaimer* no array:
             *
             * ```
             * this.disclaimers = [...this.disclaimers, disclaimer];
             * ```
             *
             * ou
             *
             * ```
             * this.disclaimers = this.disclaimers.concat(disclaimer);
             * ```
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.previousDisclaimers = __spread(this.disclaimers);
                this._disclaimers = this.checkDisclaimers(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDisclaimerGroupBaseComponent.prototype, "hideRemoveAll", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hideRemoveAll;
            },
            /**
             * @optional
             *
             * @description
             *
             * Oculta o botão para remover todos os *disclaimers* do grupo.
             *
             * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Oculta o botão para remover todos os *disclaimers* do grupo.
             *
             * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._hideRemoveAll = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfDisclaimerGroupBaseComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
        function () {
            this.checkChanges();
        };
        /**
         * @param {?} disclaimer
         * @param {?=} emitChange
         * @return {?}
         */
        ThfDisclaimerGroupBaseComponent.prototype.closeItem = /**
         * @param {?} disclaimer
         * @param {?=} emitChange
         * @return {?}
         */
        function (disclaimer, emitChange) {
            if (emitChange === void 0) { emitChange = true; }
            /** @type {?} */
            var itemIndex = this.disclaimers.findIndex((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d['$id'] === disclaimer['$id']; }));
            this.disclaimers.splice(itemIndex, 1);
            if (emitChange) {
                this.emitChangeDisclaimers();
            }
        };
        /**
         * @return {?}
         */
        ThfDisclaimerGroupBaseComponent.prototype.isRemoveAll = /**
         * @return {?}
         */
        function () {
            return !this.hideRemoveAll && this.disclaimers.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return !c.hideClose; })).length > 1;
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfDisclaimerGroupBaseComponent.prototype.onKeyPress = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (isKeyCodeEnter(event)) {
                this.removeAllItems();
            }
        };
        /**
         * @return {?}
         */
        ThfDisclaimerGroupBaseComponent.prototype.removeAllItems = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var removeItems = [];
            this.disclaimers.forEach((/**
             * @param {?} disclaimer
             * @return {?}
             */
            function (disclaimer) {
                if (!disclaimer.hideClose) {
                    removeItems.push(disclaimer);
                }
            }));
            removeItems.forEach((/**
             * @param {?} disclaimer
             * @return {?}
             */
            function (disclaimer) { return _this.closeItem(disclaimer, false); }));
            this.emitChangeDisclaimers();
        };
        /**
         * @private
         * @return {?}
         */
        ThfDisclaimerGroupBaseComponent.prototype.checkChanges = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.differ) {
                /** @type {?} */
                var changes = this.differ.diff(this.disclaimers);
                if (changes && this.disclaimersAreChanged(this.disclaimers)) {
                    this.emitChangeDisclaimers();
                }
            }
        };
        /**
         * @private
         * @param {?} disclaimers
         * @return {?}
         */
        ThfDisclaimerGroupBaseComponent.prototype.checkDisclaimers = /**
         * @private
         * @param {?} disclaimers
         * @return {?}
         */
        function (disclaimers) {
            if (Array.isArray(disclaimers)) {
                for (var i = 0; i < disclaimers.length; i++) {
                    /** @type {?} */
                    var disclaimer = disclaimers[i];
                    if (disclaimer.value || disclaimer.value === 0 || disclaimer.value === false) {
                        disclaimer['$id'] = uuid$1.v4();
                    }
                    else {
                        disclaimers.splice(i, 1);
                        i--;
                    }
                }
                return disclaimers;
            }
            return [];
        };
        /**
         * @private
         * @param {?} disclaimers
         * @return {?}
         */
        ThfDisclaimerGroupBaseComponent.prototype.disclaimersAreChanged = /**
         * @private
         * @param {?} disclaimers
         * @return {?}
         */
        function (disclaimers) {
            var _this = this;
            /** @type {?} */
            var currentValues = disclaimers;
            if (currentValues.length !== this.previousDisclaimers.length) {
                return true;
            }
            return currentValues.some((/**
             * @param {?} disclaimer
             * @param {?} index
             * @return {?}
             */
            function (disclaimer, index) { return disclaimer.value !== _this.previousDisclaimers[index].value
                || disclaimer.property !== _this.previousDisclaimers[index].property; }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfDisclaimerGroupBaseComponent.prototype.emitChangeDisclaimers = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.change.emit(_this.disclaimers);
            }));
            this.previousDisclaimers = __spread(this._disclaimers);
        };
        ThfDisclaimerGroupBaseComponent.propDecorators = {
            disclaimers: [{ type: core.Input, args: ['t-disclaimers',] }],
            hideRemoveAll: [{ type: core.Input, args: ['t-hide-remove-all',] }],
            title: [{ type: core.Input, args: ['t-title',] }],
            change: [{ type: core.Output, args: ['t-change',] }]
        };
        return ThfDisclaimerGroupBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfDisclaimerGroupBaseComponent
     *
     * \@example
     *
     * <example name="thf-disclaimer-group-basic" title="Totvs Disclaimer Group Basic">
     *   <file name="sample-thf-disclaimer-group-basic/sample-thf-disclaimer-group-basic.component.html"> </file>
     *   <file name="sample-thf-disclaimer-group-basic/sample-thf-disclaimer-group-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-disclaimer-group-labs" title="Totvs Disclaimer Group Labs">
     *   <file name="sample-thf-disclaimer-group-labs/sample-thf-disclaimer-group-labs.component.html"> </file>
     *   <file name="sample-thf-disclaimer-group-labs/sample-thf-disclaimer-group-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-disclaimer-group-sw-planets" title="Totvs Disclaimer Group - Star Wars Planets">
     *   <file name="sample-thf-disclaimer-group-sw-planets/sample-thf-disclaimer-group-sw-planets.component.html"> </file>
     *   <file name="sample-thf-disclaimer-group-sw-planets/sample-thf-disclaimer-group-sw-planets.component.ts"> </file>
     *   <file name="sample-thf-disclaimer-group-sw-planets/sample-thf-disclaimer-group-sw-planets.service.ts"> </file>
     * </example>
     *
     */
    var ThfDisclaimerGroupComponent = /** @class */ (function (_super) {
        __extends(ThfDisclaimerGroupComponent, _super);
        function ThfDisclaimerGroupComponent(differs) {
            return _super.call(this, differs) || this;
        }
        ThfDisclaimerGroupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-disclaimer-group',
                        template: "<div class=\"thf-disclaimer-group\" *ngIf=\"disclaimers.length > 0\" >\n  <div class=\"thf-disclaimer-group-title\">{{ title }}</div>\n\n  <thf-disclaimer-remove *ngIf=\"isRemoveAll()\"\n    class=\"thf-disclaimer-group-disclaimer-align\"\n    [t-label]=\"literals.removeAll\"\n    (keydown)=\"onKeyPress($event)\"\n    (t-remove-all-action)=\"removeAllItems()\">\n  </thf-disclaimer-remove>\n\n  <thf-disclaimer *ngFor=\"let disclaimer of disclaimers\"\n    class=\"thf-disclaimer-group-disclaimer-align\"\n    [t-hide-close]=\"disclaimer.hideClose\"\n    [t-label]=\"disclaimer.label\"\n    [t-property]=\"disclaimer.property\"\n    [t-value]=\"disclaimer.value\"\n    (t-close-action)=\"closeItem(disclaimer)\">\n  </thf-disclaimer>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfDisclaimerGroupComponent.ctorParameters = function () { return [
            { type: core.IterableDiffers }
        ]; };
        return ThfDisclaimerGroupComponent;
    }(ThfDisclaimerGroupBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Este é um componente interno utilizado pelo thf-disclaimer-group, se comporta como um botão e recebe uma ação para remover todos os
     * thf-disclaimers do grupo.
     */
    var ThfDisclaimerRemoveComponent = /** @class */ (function () {
        function ThfDisclaimerRemoveComponent() {
            /**
             * Ação para remover todos.
             */
            this.removeAllAction = new core.EventEmitter();
        }
        // Emite a ação de remover todos.
        // Emite a ação de remover todos.
        /**
         * @return {?}
         */
        ThfDisclaimerRemoveComponent.prototype.removeAction = 
        // Emite a ação de remover todos.
        /**
         * @return {?}
         */
        function () {
            this.removeAllAction.emit();
        };
        ThfDisclaimerRemoveComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-disclaimer-remove',
                        template: "<thf-disclaimer\n  class=\"thf-clickable\"\n  tabindex=\"0\"\n  t-hide-close=\"true\"\n  t-type=\"danger\"\n  [t-label]=\"label\"\n  (click)=\"removeAction()\">\n</thf-disclaimer>\n"
                    }] }
        ];
        ThfDisclaimerRemoveComponent.propDecorators = {
            label: [{ type: core.Input, args: ['t-label',] }],
            removeAllAction: [{ type: core.Output, args: ['t-remove-all-action',] }]
        };
        return ThfDisclaimerRemoveComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente thf-disclaimer-group.
     */
    var ThfDisclaimerGroupModule = /** @class */ (function () {
        function ThfDisclaimerGroupModule() {
        }
        ThfDisclaimerGroupModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            ThfDisclaimerModule
                        ],
                        declarations: [ThfDisclaimerGroupComponent, ThfDisclaimerRemoveComponent],
                        exports: [ThfDisclaimerGroupComponent]
                    },] }
        ];
        return ThfDisclaimerGroupModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Este componente apresenta uma linha demarcadora de blocos e pode conter um *label*. Seu uso é indicado para definição
     * e organização de informações em uma tela e sua característica é semelhante à tag `<hr>`.
     */
    var ThfDividerBaseComponent = /** @class */ (function () {
        function ThfDividerBaseComponent() {
        }
        ThfDividerBaseComponent.propDecorators = {
            label: [{ type: core.Input, args: ['t-label',] }]
        };
        return ThfDividerBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfDividerBaseComponent
     *
     * \@example
     *
     * <example name="thf-divider-basic" title="Totvs Divider Basic" >
     *  <file name="sample-thf-divider-basic/sample-thf-divider-basic.component.html"> </file>
     *  <file name="sample-thf-divider-basic/sample-thf-divider-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-divider-labs" title="Totvs Divider Labs" >
     *  <file name="sample-thf-divider-labs/sample-thf-divider-labs.component.html"> </file>
     *  <file name="sample-thf-divider-labs/sample-thf-divider-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-divider-user-detail" title="Totvs Divider - User Detail" >
     *  <file name="sample-thf-divider-user-detail/sample-thf-divider-user-detail.component.html"> </file>
     *  <file name="sample-thf-divider-user-detail/sample-thf-divider-user-detail.component.ts"> </file>
     * </example>
     */
    var ThfDividerComponent = /** @class */ (function (_super) {
        __extends(ThfDividerComponent, _super);
        function ThfDividerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ThfDividerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-divider',
                        template: "<div class=\"thf-divider\">\n  <div *ngIf=\"label\" class=\"thf-divider-label\">{{ label }}</div>\n</div>\n"
                    }] }
        ];
        return ThfDividerComponent;
    }(ThfDividerBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente thf-divider.
     */
    var ThfDividerModule = /** @class */ (function () {
        function ThfDividerModule() {
        }
        ThfDividerModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            ThfDividerComponent
                        ],
                        exports: [
                            ThfDividerComponent
                        ]
                    },] }
        ];
        return ThfDividerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfPopupDefaultPosition = 'bottom-left';
    /**
     * \@description
     *
     * O componente `thf-popup` é um container pequeno recomendado para ações de navegação:
     * Ele abre sobreposto aos outros componentes.
     *
     * É possível escolher as posições do `thf-popup` em relação ao componente alvo, para isto veja a propriedade `t-position`.
     *
     * Também é possível informar um _template_ _header_ para o `thf-popup`, que será exibido acima das ações.
     * Para funcionar corretamente é preciso adicionar a propriedade `t-popup-header-template` no elemento que servirá de template, por exemplo:
     *
     * ```
     * <thf-popup [t-target]="target">
     *   <div t-popup-header-template>
     *     <div>
     *       Dev Totvs
     *     </div>
     *     <div>
     *       dev.totvs\@totvs.com.br
     *     </div>
     *   </div>
     * </thf-popup >
     * ```
     */
    var ThfPopupBaseComponent = /** @class */ (function () {
        function ThfPopupBaseComponent() {
            this._hideArrow = false;
            this._isCornerAlign = false;
            this._position = thfPopupDefaultPosition;
            this.arrowDirection = 'top-right';
            this.showPopup = false;
        }
        Object.defineProperty(ThfPopupBaseComponent.prototype, "actions", {
            get: /**
             * @return {?}
             */
            function () {
                return this._actions;
            },
            /** Lista de ações que serão exibidas no componente. */
            set: /**
             * Lista de ações que serão exibidas no componente.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._actions = Array.isArray(value) ? value : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPopupBaseComponent.prototype, "hideArrow", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hideArrow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Oculta a seta do componente *popup*.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Oculta a seta do componente *popup*.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._hideArrow = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPopupBaseComponent.prototype, "isCornerAlign", {
            get: /**
             * @return {?}
             */
            function () {
                return this._isCornerAlign;
            },
            // Define se o `thf-popup` será alinhado pelos cantos do elemento target.
            set: 
            // Define se o `thf-popup` será alinhado pelos cantos do elemento target.
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._isCornerAlign = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPopupBaseComponent.prototype, "position", {
            get: /**
             * @return {?}
             */
            function () {
                return this._position;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a posição inicial que o `thf-popup` abrirá em relação ao componente alvo. Sugere-se que seja
             * usada a orientação `bottom-left` (abaixo e a esquerda), porém o mesmo é flexível e será rotacionado
             * automaticamente para se adequar a tela, caso necessário.
             *
             * > Caso seja definido um `t-custom-positions` o componente irá abrir na posição definida na propriedade `t-position`
             * e caso não caiba na posição inicial ele irá rotacionar seguindo a ordem de posições definidas no `t-custom-positions`.
             *
             * Posições válidas:
             * - `right`: Posiciona o thf-popup no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o thf-popup no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o thf-popup no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o thf-popup abaixo do componente alvo.
             * - `bottom-left`: Posiciona o thf-popup abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o thf-popup abaixo e à direita do componente alvo.
             * - `left`: Posiciona o thf-popup no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o thf-popup no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o thf-popup no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o thf-popup acima do componente alvo.
             * - `top-right`: Posiciona o thf-popup acima e à direita do componente alvo.
             * - `top-left`: Posiciona o thf-popup acima e à esquerda do componente alvo.
             *
             * @default `bottom-left`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define a posição inicial que o `thf-popup` abrirá em relação ao componente alvo. Sugere-se que seja
             * usada a orientação `bottom-left` (abaixo e a esquerda), porém o mesmo é flexível e será rotacionado
             * automaticamente para se adequar a tela, caso necessário.
             *
             * > Caso seja definido um `t-custom-positions` o componente irá abrir na posição definida na propriedade `t-position`
             * e caso não caiba na posição inicial ele irá rotacionar seguindo a ordem de posições definidas no `t-custom-positions`.
             *
             * Posições válidas:
             * - `right`: Posiciona o thf-popup no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o thf-popup no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o thf-popup no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o thf-popup abaixo do componente alvo.
             * - `bottom-left`: Posiciona o thf-popup abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o thf-popup abaixo e à direita do componente alvo.
             * - `left`: Posiciona o thf-popup no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o thf-popup no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o thf-popup no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o thf-popup acima do componente alvo.
             * - `top-right`: Posiciona o thf-popup acima e à direita do componente alvo.
             * - `top-left`: Posiciona o thf-popup acima e à esquerda do componente alvo.
             *
             * \@default `bottom-left`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._position = THF_CONTROL_POSITIONS.includes(value) ? value : thfPopupDefaultPosition;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPopupBaseComponent.prototype, "customPositions", {
            get: /**
             * @return {?}
             */
            function () {
                return this._customPositions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define as posições e a sequência que o `thf-popup` poderá rotacionar. A sequência será definida pela ordem passada
             * no *array*. Caso não seja definido, o `thf-popup` irá rotacionar em todas as posições válidas.
             *
             * > O componente sempre irá abrir na posição definida no `t-position` e caso não caiba na posição definida o mesmo
             * irá rotacionar seguindo a ordem definida pelo `t-custom-position`.
             *
             * Posições válidas:
             * - `right`: Posiciona o thf-popup no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o thf-popup no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o thf-popup no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o thf-popup abaixo do componente alvo.
             * - `bottom-left`: Posiciona o thf-popup abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o thf-popup abaixo e à direita do componente alvo.
             * - `left`: Posiciona o thf-popup no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o thf-popup no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o thf-popup no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o thf-popup acima do componente alvo.
             * - `top-right`: Posiciona o thf-popup acima e à direita do componente alvo.
             * - `top-left`: Posiciona o thf-popup acima e à esquerda do componente alvo.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define as posições e a sequência que o `thf-popup` poderá rotacionar. A sequência será definida pela ordem passada
             * no *array*. Caso não seja definido, o `thf-popup` irá rotacionar em todas as posições válidas.
             *
             * > O componente sempre irá abrir na posição definida no `t-position` e caso não caiba na posição definida o mesmo
             * irá rotacionar seguindo a ordem definida pelo `t-custom-position`.
             *
             * Posições válidas:
             * - `right`: Posiciona o thf-popup no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o thf-popup no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o thf-popup no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o thf-popup abaixo do componente alvo.
             * - `bottom-left`: Posiciona o thf-popup abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o thf-popup abaixo e à direita do componente alvo.
             * - `left`: Posiciona o thf-popup no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o thf-popup no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o thf-popup no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o thf-popup acima do componente alvo.
             * - `top-right`: Posiciona o thf-popup acima e à direita do componente alvo.
             * - `top-left`: Posiciona o thf-popup acima e à esquerda do componente alvo.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._customPositions = Array.isArray(value) ? value : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPopupBaseComponent.prototype, "target", {
            get: /**
             * @return {?}
             */
            function () {
                return this._target;
            },
            /**
             * @description
             *
             * Para utilizar o `thf-popup` deve-se colocar uma variável local no componente que disparará o evento
             * de abertura no mesmo e com isso, invocará a função `toggle`, por exemplo:
             *
             * ```
             * <span #icon class="thf-icon thf-icon-credit-payment" (click)="popup.toggle()">
             *   Credit Actions
             * </span>
             *
             * <thf-popup #popup
             *   [t-actions]="actions"
             *   [t-target]="icon">
             * </thf-popup>
             * ```
             *
             * Caso o elemento alvo for um componente, será preciso obter o `ElementRef` do mesmo e passá-lo à propriedade, por exemplo:
             *
             * ```
             * // component.html
             *
             * <thf-button #thfButton
             *   t-label="Open Popover"
             *   (t-click)="popup.toggle()">
             * </thf-button>
             *
             * <thf-popup #popup
             *   [t-actions]="actions"
             *   [t-target]="thfButtonRef">
             * </thf-popup>
             *
             * // component.ts
             *
             * @ViewChild('thfButton', { read: ElementRef }) thfButtonRef: ElementRef;
             * ```
             */
            set: /**
             * \@description
             *
             * Para utilizar o `thf-popup` deve-se colocar uma variável local no componente que disparará o evento
             * de abertura no mesmo e com isso, invocará a função `toggle`, por exemplo:
             *
             * ```
             * <span #icon class="thf-icon thf-icon-credit-payment" (click)="popup.toggle()">
             *   Credit Actions
             * </span>
             *
             * <thf-popup #popup
             *   [t-actions]="actions"
             *   [t-target]="icon">
             * </thf-popup>
             * ```
             *
             * Caso o elemento alvo for um componente, será preciso obter o `ElementRef` do mesmo e passá-lo à propriedade, por exemplo:
             *
             * ```
             * // component.html
             *
             * <thf-button #thfButton
             *   t-label="Open Popover"
             *   (t-click)="popup.toggle()">
             * </thf-button>
             *
             * <thf-popup #popup
             *   [t-actions]="actions"
             *   [t-target]="thfButtonRef">
             * </thf-popup>
             *
             * // component.ts
             *
             * \@ViewChild('thfButton', { read: ElementRef }) thfButtonRef: ElementRef;
             * ```
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._target = (value instanceof core.ElementRef) ? value.nativeElement : value;
            },
            enumerable: true,
            configurable: true
        });
        ThfPopupBaseComponent.propDecorators = {
            actions: [{ type: core.Input, args: ['t-actions',] }],
            hideArrow: [{ type: core.Input, args: ['t-hide-arrow',] }],
            isCornerAlign: [{ type: core.Input, args: ['t-is-corner-align',] }],
            position: [{ type: core.Input, args: ['t-position',] }],
            customPositions: [{ type: core.Input, args: ['t-custom-positions',] }],
            target: [{ type: core.Input, args: ['t-target',] }]
        };
        return ThfPopupBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     *
     * \@docsExtends ThfPopupBaseComponent
     *
     * \@example
     *
     * <example name="thf-popup-basic" title="Totvs Popup - Basic">
     *   <file name="sample-thf-popup-basic/sample-thf-popup-basic.component.html"> </file>
     *   <file name="sample-thf-popup-basic/sample-thf-popup-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-popup-labs" title="Totvs Popup - Labs">
     *   <file name="sample-thf-popup-labs/sample-thf-popup-labs.component.html"> </file>
     *   <file name="sample-thf-popup-labs/sample-thf-popup-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-popup-email" title="Totvs Popup Email">
     *   <file name="sample-thf-popup-email/sample-thf-popup-email.component.html"> </file>
     *   <file name="sample-thf-popup-email/sample-thf-popup-email.component.ts"> </file>
     * </example>
     *
     */
    var ThfPopupComponent = /** @class */ (function (_super) {
        __extends(ThfPopupComponent, _super);
        function ThfPopupComponent(viewContainerRef, renderer, router, thfControlPosition, changeDetector) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.router = router;
            _this.thfControlPosition = thfControlPosition;
            _this.changeDetector = changeDetector;
            _this.onScroll = (/**
             * @return {?}
             */
            function () {
                if (_this.showPopup) {
                    _this.close();
                }
            });
            _this.parentRef = viewContainerRef['_view']['component'];
            return _this;
        }
        /**
         * Fecha o componente *popup*.
         *
         * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
         */
        /**
         * Fecha o componente *popup*.
         *
         * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
         * @return {?}
         */
        ThfPopupComponent.prototype.close = /**
         * Fecha o componente *popup*.
         *
         * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
         * @return {?}
         */
        function () {
            this.removeListeners();
            this.showPopup = false;
        };
        /**
         * @param {?} popupAction
         * @return {?}
         */
        ThfPopupComponent.prototype.onActionClick = /**
         * @param {?} popupAction
         * @return {?}
         */
        function (popupAction) {
            /** @type {?} */
            var actionNoDisabled = popupAction && !this.returnBooleanValue(popupAction, 'disabled');
            if (popupAction && popupAction.action && actionNoDisabled) {
                this.close();
                return callFunction(popupAction.action, this.parentRef, this.param || popupAction);
            }
            if (popupAction && popupAction.url && actionNoDisabled) {
                this.close();
                return this.openUrl(popupAction.url);
            }
        };
        /**
         * Abre o componente *popup*.
         *
         * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
         */
        /**
         * Abre o componente *popup*.
         *
         * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
         * @param {?=} param
         * @return {?}
         */
        ThfPopupComponent.prototype.open = /**
         * Abre o componente *popup*.
         *
         * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
         * @param {?=} param
         * @return {?}
         */
        function (param) {
            this.oldTarget = this.target;
            this.param = param;
            this.showPopup = true;
            this.changeDetector.detectChanges();
            this.validateInitialContent();
        };
        /**
         * @param {?} popupAction
         * @param {?} property
         * @return {?}
         */
        ThfPopupComponent.prototype.returnBooleanValue = /**
         * @param {?} popupAction
         * @param {?} property
         * @return {?}
         */
        function (popupAction, property) {
            return isTypeof(popupAction[property], 'function') ? popupAction[property](this.param || popupAction) : popupAction[property];
        };
        /**
         * Responsável por abrir e fechar o *popup*.
         *
         * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
         *
         * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
         */
        /**
         * Responsável por abrir e fechar o *popup*.
         *
         * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
         *
         * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
         * @param {?=} param
         * @return {?}
         */
        ThfPopupComponent.prototype.toggle = /**
         * Responsável por abrir e fechar o *popup*.
         *
         * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
         *
         * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
         * @param {?=} param
         * @return {?}
         */
        function (param) {
            this.showPopup && this.oldTarget === this.target ? this.close() : this.open(param);
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfPopupComponent.prototype.clickedOutDisabledItem = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var containsItemDisabled = this.elementContains(event.target, 'thf-popup-item-disabled') ||
                this.elementContains(event.target.parentElement, 'thf-popup-item-disabled');
            return !containsItemDisabled;
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfPopupComponent.prototype.clickedOutHeaderTemplate = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var popupHeaderTemplate = this.popupRef && this.popupRef.nativeElement.querySelector('[t-popup-header-template]');
            return !(popupHeaderTemplate && popupHeaderTemplate.contains(event.target));
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfPopupComponent.prototype.clickedOutTarget = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            return this.target && !this.target.contains(event.target);
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfPopupComponent.prototype.closePopupOnClickout = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.clickedOutTarget(event) && this.clickedOutDisabledItem(event) && this.clickedOutHeaderTemplate(event)) {
                this.close();
            }
        };
        /**
         * @private
         * @param {?} element
         * @param {?} className
         * @return {?}
         */
        ThfPopupComponent.prototype.elementContains = /**
         * @private
         * @param {?} element
         * @param {?} className
         * @return {?}
         */
        function (element, className) {
            return element && element.classList.contains(className);
        };
        /**
         * @private
         * @return {?}
         */
        ThfPopupComponent.prototype.hasContentToShow = /**
         * @private
         * @return {?}
         */
        function () {
            return !!(this.popupRef.nativeElement && this.popupRef.nativeElement.clientHeight);
        };
        /**
         * @private
         * @return {?}
         */
        ThfPopupComponent.prototype.initializeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', (/**
             * @return {?}
             */
            function () {
                _this.close();
            }));
            this.clickoutListener = this.renderer.listen('document', 'click', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.closePopupOnClickout(event);
            }));
            window.addEventListener('scroll', this.onScroll, true);
        };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        ThfPopupComponent.prototype.openUrl = /**
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            if (isExternalLink(url)) {
                return openExternalLink(url);
            }
            if (url) {
                return this.router.navigate([url]);
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfPopupComponent.prototype.removeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
            if (this.resizeListener) {
                this.resizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        /**
         * @private
         * @return {?}
         */
        ThfPopupComponent.prototype.setPosition = /**
         * @private
         * @return {?}
         */
        function () {
            this.thfControlPosition.setElements(this.popupRef.nativeElement, 8, this.target, this.customPositions, false, this.isCornerAlign);
            this.thfControlPosition.adjustPosition(this.position);
            this.arrowDirection = this.thfControlPosition.getArrowDirection();
        };
        /**
         * @private
         * @return {?}
         */
        ThfPopupComponent.prototype.validateInitialContent = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.hasContentToShow()) {
                this.setPosition();
                this.initializeListeners();
            }
            else {
                this.close();
            }
        };
        ThfPopupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-popup',
                        template: "<div #popupRef class=\"thf-popup\" *ngIf=\"showPopup\">\n\n  <div *ngIf=\"!hideArrow\" class=\"thf-popup-arrow thf-arrow-{{ arrowDirection }}\"></div>\n\n  <ng-content select=\"[t-popup-header-template]\"></ng-content>\n\n  <ng-container *ngFor=\"let action of actions; let actionIndex = index\">\n    <div *ngIf=\"action.visible !== false\"\n      [class.thf-popup-item-default]=\"action.type !== 'danger'\"\n      [class.thf-popup-item-danger]=\"action.type === 'danger'\"\n      [class.thf-popup-item-disabled]=\"returnBooleanValue(action, 'disabled')\"\n      [class.thf-popup-item-separator]=\"action.separator && actionIndex !== 0\"\n      [class.thf-popup-item-selected]=\"action.selected\"\n      (click)=\"onActionClick(action)\">\n\n      <span *ngIf=\"action.icon\" class=\"thf-icon {{ action.icon }} thf-popup-icon-item\"></span>\n      {{ action.label }}\n\n    </div>\n  </ng-container>\n\n</div>\n",
                        providers: [ThfControlPositionService]
                    }] }
        ];
        /** @nocollapse */
        ThfPopupComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: core.Renderer2 },
            { type: router.Router },
            { type: ThfControlPositionService },
            { type: core.ChangeDetectorRef }
        ]; };
        ThfPopupComponent.propDecorators = {
            popupRef: [{ type: core.ViewChild, args: ['popupRef', { read: core.ElementRef, static: false },] }]
        };
        return ThfPopupComponent;
    }(ThfPopupBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente thf-popup.
     */
    var ThfPopupModule = /** @class */ (function () {
        function ThfPopupModule() {
        }
        ThfPopupModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                        ],
                        declarations: [
                            ThfPopupComponent,
                        ],
                        exports: [
                            ThfPopupComponent
                        ],
                        providers: [],
                        schemas: []
                    },] }
        ];
        return ThfPopupModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O componente `thf-dropdown` pode ser utilizado como um agrupador de ações e / ou opções.
     *
     * > Caso não haja configuração de rotas em sua aplicação, se faz necessário importar o `RouterModule`
     * no módulo principal para o correto funcionamento deste componente:
     *
     * ```
     * import { RouterModule } from '\@angular/router';
     *
     * \@NgModule({
     *   imports: [
     *     ...
     *     RouterModule.forRoot([]),
     *     ThfModule
     *   ],
     *   declarations: [
     *     AppComponent
     *   ],
     *   exports: [],
     *   providers: [],
     *   bootstrap: [
     *     AppComponent
     *   ]
     * })
     * export class AppModule { }
     * ```
     * > Para maiores dúvidas referente à configuração de rotas, acesse em nosso portal /Guias /Começando
     * [/Configurando as rotas do thf-menu](/guides/getting-started).
     */
    var ThfDropdownBaseComponent = /** @class */ (function () {
        function ThfDropdownBaseComponent() {
            this._disabled = false;
            this.icon = 'thf-icon-arrow-down';
            this.open = false;
        }
        Object.defineProperty(ThfDropdownBaseComponent.prototype, "actions", {
            get: /**
             * @return {?}
             */
            function () {
                return this._actions;
            },
            /** Lista de ações que serão exibidas no componente. */
            set: /**
             * Lista de ações que serão exibidas no componente.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._actions = Array.isArray(value) ? value : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDropdownBaseComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o campo.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Desabilita o campo.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._disabled = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        ThfDropdownBaseComponent.propDecorators = {
            actions: [{ type: core.Input, args: ['t-actions',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            label: [{ type: core.Input, args: ['t-label',] }]
        };
        return ThfDropdownBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfDropdownBaseComponent
     *
     * \@example
     *
     * <example name="thf-dropdown-basic" title="Totvs Dropdown Basic" >
     *  <file name="sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.html"> </file>
     *  <file name="sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.ts"> </file>
     *  <file name="sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="thf-dropdown-labs" title="Totvs Dropdown Labs" >
     *  <file name="sample-thf-dropdown-labs/sample-thf-dropdown-labs.component.html"> </file>
     *  <file name="sample-thf-dropdown-labs/sample-thf-dropdown-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-dropdown-social-network" title="Totvs Dropdown - Social Network" >
     *  <file name="sample-thf-dropdown-social-network/sample-thf-dropdown-social-network.component.html"> </file>
     *  <file name="sample-thf-dropdown-social-network/sample-thf-dropdown-social-network.component.ts"> </file>
     * </example>
     */
    var ThfDropdownComponent = /** @class */ (function (_super) {
        __extends(ThfDropdownComponent, _super);
        function ThfDropdownComponent(renderer) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.onScroll = (/**
             * @return {?}
             */
            function () {
                if (_this.open) {
                    _this.hideDropdown();
                }
            });
            return _this;
        }
        /**
         * @param {?} event
         * @return {?}
         */
        ThfDropdownComponent.prototype.onKeyDown = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (isKeyCodeEnter(event)) {
                this.toggleDropdown();
            }
        };
        /**
         * @return {?}
         */
        ThfDropdownComponent.prototype.toggleDropdown = /**
         * @return {?}
         */
        function () {
            this.dropdownRef && !this.open && !this.disabled ? this.showDropdown() : this.hideDropdown();
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfDropdownComponent.prototype.checkClickArea = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            return this.dropdownRef && this.dropdownRef.nativeElement.contains(event.target);
        };
        /**
         * @private
         * @return {?}
         */
        ThfDropdownComponent.prototype.hideDropdown = /**
         * @private
         * @return {?}
         */
        function () {
            this.icon = 'thf-icon-arrow-down';
            this.removeListeners();
            this.popupRef.close();
            this.open = false;
        };
        /**
         * @private
         * @return {?}
         */
        ThfDropdownComponent.prototype.initializeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.clickoutListener = this.renderer.listen('document', 'click', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.wasClickedOnDropdown(event);
            }));
            this.resizeListener = this.renderer.listen('window', 'resize', (/**
             * @return {?}
             */
            function () {
                _this.hideDropdown();
            }));
            window.addEventListener('scroll', this.onScroll, true);
        };
        /**
         * @private
         * @return {?}
         */
        ThfDropdownComponent.prototype.removeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
            if (this.resizeListener) {
                this.resizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        /**
         * @private
         * @return {?}
         */
        ThfDropdownComponent.prototype.showDropdown = /**
         * @private
         * @return {?}
         */
        function () {
            this.icon = 'thf-icon-arrow-up';
            this.initializeListeners();
            this.popupRef.open();
            this.open = true;
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfDropdownComponent.prototype.wasClickedOnDropdown = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var clickedOnDropdown = this.checkClickArea(event);
            if (!clickedOnDropdown) {
                this.hideDropdown();
            }
        };
        ThfDropdownComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-dropdown',
                        template: "<div #dropdownRef\n  class=\"thf-dropdown\"\n  tabindex=\"{{ disabled ? -1 : 0 }}\"\n  (click)=\"toggleDropdown()\"\n  (keydown)=\"onKeyDown($event)\">\n\n  <div class=\"thf-dropdown-button\" [ngClass]=\"{'thf-dropdown-button-disabled' : disabled}\">\n    {{ label }}\n    <div class=\"thf-dropdown-icon thf-icon {{icon}}\"></div>\n  </div>\n\n  <thf-popup #popupRef\n    t-hide-arrow\n    t-is-corner-align\n    t-position=\"bottom-left\"\n    [t-actions]=\"actions\"\n    [t-custom-positions]=\"['bottom-left', 'top-left']\"\n    [t-target]=\"dropdownRef\">\n  </thf-popup>\n\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfDropdownComponent.ctorParameters = function () { return [
            { type: core.Renderer2 }
        ]; };
        ThfDropdownComponent.propDecorators = {
            dropdownRef: [{ type: core.ViewChild, args: ['dropdownRef', { read: core.ElementRef, static: true },] }],
            popupRef: [{ type: core.ViewChild, args: ['popupRef', { static: false },] }]
        };
        return ThfDropdownComponent;
    }(ThfDropdownBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     * Módulo do componente thf-dropdown.
     */
    var ThfDropdownModule = /** @class */ (function () {
        function ThfDropdownModule() {
        }
        ThfDropdownModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            ThfPopupModule
                        ],
                        declarations: [ThfDropdownComponent],
                        exports: [ThfDropdownComponent]
                    },] }
        ];
        return ThfDropdownModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfDefaultLanguage = 'THF_DEFAULT_LANGUAGE';
    /** @type {?} */
    var thfLocaleKey = 'THF_USER_LOCALE';
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Serviço responsável por gerenciar as linguagens da aplicação.
     */
    var ThfLanguageService = /** @class */ (function () {
        function ThfLanguageService() {
        }
        Object.defineProperty(ThfLanguageService.prototype, "languageDefault", {
            get: /**
             * @return {?}
             */
            function () {
                return localStorage.getItem(thfDefaultLanguage);
            },
            set: /**
             * @param {?} language
             * @return {?}
             */
            function (language) {
                if (language && isLanguage(language)) {
                    localStorage.setItem(thfDefaultLanguage, language);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @description
         *
         * Método responsável por retornar o idioma ativo.
         *
         * A busca do idioma será feita na seguinte ordem:
         *
         *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
         *
         *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
         * na propriedade `language` da interface `ThfI18nConfigDefault`.
         *
         *   3 - o idioma do navegador utilizado.
         *
         * > Caso o idioma do navegador não seja suportado pelo THF (`pt`, `en` ou `es`), será retornado valor `pt`.
         *
         * **Retorno:** `string` com a sigla do idioma ativo.
         */
        /**
         * \@description
         *
         * Método responsável por retornar o idioma ativo.
         *
         * A busca do idioma será feita na seguinte ordem:
         *
         *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
         *
         *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
         * na propriedade `language` da interface `ThfI18nConfigDefault`.
         *
         *   3 - o idioma do navegador utilizado.
         *
         * > Caso o idioma do navegador não seja suportado pelo THF (`pt`, `en` ou `es`), será retornado valor `pt`.
         *
         * **Retorno:** `string` com a sigla do idioma ativo.
         * @return {?}
         */
        ThfLanguageService.prototype.getLanguage = /**
         * \@description
         *
         * Método responsável por retornar o idioma ativo.
         *
         * A busca do idioma será feita na seguinte ordem:
         *
         *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
         *
         *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
         * na propriedade `language` da interface `ThfI18nConfigDefault`.
         *
         *   3 - o idioma do navegador utilizado.
         *
         * > Caso o idioma do navegador não seja suportado pelo THF (`pt`, `en` ou `es`), será retornado valor `pt`.
         *
         * **Retorno:** `string` com a sigla do idioma ativo.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var language = localStorage.getItem(thfLocaleKey) || this.languageDefault || getBrowserLanguage();
            return language && language.toLowerCase();
        };
        /**
         * @description
         *
         * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
         * do parâmetro `config`.
         *
         * **Retorno:** `string` com a sigla do idioma *default*.
         */
        /**
         * \@description
         *
         * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
         * do parâmetro `config`.
         *
         * **Retorno:** `string` com a sigla do idioma *default*.
         * @return {?}
         */
        ThfLanguageService.prototype.getLanguageDefault = /**
         * \@description
         *
         * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
         * do parâmetro `config`.
         *
         * **Retorno:** `string` com a sigla do idioma *default*.
         * @return {?}
         */
        function () {
            return this.languageDefault;
        };
        /**
         * @description
         *
         * Método responsável por retornar a abreviação do idioma ativo na aplicação.
         *
         * @default `pt`
         *
         * **Retorno:** `string` com a sigla abreviada do idioma ativo.
         */
        /**
         * \@description
         *
         * Método responsável por retornar a abreviação do idioma ativo na aplicação.
         *
         * \@default `pt`
         *
         * **Retorno:** `string` com a sigla abreviada do idioma ativo.
         * @return {?}
         */
        ThfLanguageService.prototype.getShortLanguage = /**
         * \@description
         *
         * Método responsável por retornar a abreviação do idioma ativo na aplicação.
         *
         * \@default `pt`
         *
         * **Retorno:** `string` com a sigla abreviada do idioma ativo.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var language = this.getLanguage();
            /** @type {?} */
            var shortLanguage = getShortLanguage(language);
            return thfLocales.includes(shortLanguage) ? shortLanguage : thfLocaleDefault;
        };
        /**
         * @description
         *
         * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
         *
         * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
         *
         * @param language sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma,
         * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         */
        /**
         * \@description
         *
         * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
         *
         * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
         *
         * @param {?} language sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma,
         * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         * @return {?}
         */
        ThfLanguageService.prototype.setLanguage = /**
         * \@description
         *
         * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
         *
         * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
         *
         * @param {?} language sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma,
         * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         * @return {?}
         */
        function (language) {
            if (!isLanguage(language)) {
                return;
            }
            localStorage.setItem(thfLocaleKey, language.toLowerCase());
        };
        /**
         * @description
         *
         * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
         *
         * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
         *
         * @param language sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma,
         * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         */
        /**
         * \@description
         *
         * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
         *
         * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
         *
         * @param {?} language sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma,
         * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         * @return {?}
         */
        ThfLanguageService.prototype.setLanguageDefault = /**
         * \@description
         *
         * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
         *
         * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
         *
         * @param {?} language sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma,
         * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         * @return {?}
         */
        function (language) {
            this.languageDefault = language;
        };
        ThfLanguageService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ ThfLanguageService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ThfLanguageService_Factory() { return new ThfLanguageService(); }, token: ThfLanguageService, providedIn: "root" });
        return ThfLanguageService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfLoadingOverlayLiteralsDefault = {
        en: (/** @type {?} */ ({
            loading: 'Loading',
        })),
        es: (/** @type {?} */ ({
            loading: 'Cargando',
        })),
        pt: (/** @type {?} */ ({
            loading: 'Carregando',
        }))
    };
    /**
     *
     * \@description
     *
     * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
     * enquanto aguarda a resposta de alguma requisição.
     */
    var ThfLoadingOverlayBaseComponent = /** @class */ (function () {
        function ThfLoadingOverlayBaseComponent(languageService) {
            this.languageService = languageService;
            this._screenLock = false;
            if (!this.text) {
                this.text = this.getTextDefault();
            }
        }
        Object.defineProperty(ThfLoadingOverlayBaseComponent.prototype, "screenLock", {
            get: /**
             * @return {?}
             */
            function () {
                return this._screenLock;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define se o _overlay_ será aplicado a um container ou a página inteira.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define se o _overlay_ será aplicado a um container ou a página inteira.
             *
             * \@default `false`
             * @param {?} screenLock
             * @return {?}
             */
            function (screenLock) {
                this._screenLock = convertToBoolean(screenLock);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfLoadingOverlayBaseComponent.prototype, "text", {
            get: /**
             * @return {?}
             */
            function () {
                return this._text;
            },
            /**
             * @optional
             *
             * @description
             *
             * Texto a ser exibido no componente.
             *
             * > O valor padrão será traduzido acordo com o idioma configurado no [**ThfI18n**](/documentation/thf-i18n) ou navegador.
             *
             * @default `Carregando`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Texto a ser exibido no componente.
             *
             * > O valor padrão será traduzido acordo com o idioma configurado no [**ThfI18n**](/documentation/thf-i18n) ou navegador.
             *
             * \@default `Carregando`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._text = value || this.getTextDefault();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @return {?}
         */
        ThfLoadingOverlayBaseComponent.prototype.getTextDefault = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var language = this.languageService.getShortLanguage();
            return thfLoadingOverlayLiteralsDefault[language].loading;
        };
        ThfLoadingOverlayBaseComponent.propDecorators = {
            screenLock: [{ type: core.Input, args: ['t-screen-lock',] }],
            text: [{ type: core.Input, args: ['t-text',] }]
        };
        return ThfLoadingOverlayBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     *
     * \@docsExtends ThfLoadingOverlayBaseComponent
     *
     * \@example
     *
     * <example name="thf-loading-overlay-basic" title="Totvs Loading Overlay Basic">
     *  <file name="sample-thf-loading-overlay-basic/sample-thf-loading-overlay-basic.component.html"> </file>
     *  <file name="sample-thf-loading-overlay-basic/sample-thf-loading-overlay-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-loading-overlay-labs" title="Totvs Loading Overlay Labs">
     *  <file name="sample-thf-loading-overlay-labs/sample-thf-loading-overlay-labs.component.html"> </file>
     *  <file name="sample-thf-loading-overlay-labs/sample-thf-loading-overlay-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-loading-overlay-connection-test" title="Totvs Loading Overlay - Connection Test">
     *  <file name="sample-thf-loading-overlay-connection-test/sample-thf-loading-overlay-connection-test.component.html"> </file>
     *  <file name="sample-thf-loading-overlay-connection-test/sample-thf-loading-overlay-connection-test.component.ts"> </file>
     * </example>
     */
    var ThfLoadingOverlayComponent = /** @class */ (function (_super) {
        __extends(ThfLoadingOverlayComponent, _super);
        function ThfLoadingOverlayComponent(changeDetector, languageService) {
            var _this = _super.call(this, languageService) || this;
            _this.changeDetector = changeDetector;
            return _this;
        }
        ThfLoadingOverlayComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-loading-overlay',
                        template: "<div\n  [class.thf-overlay-absolute]=\"!screenLock\"\n  [class.thf-overlay-fixed]=\"screenLock\">\n  <thf-loading class=\"thf-loading-overlay-content\" [t-text]=\"text\"></thf-loading>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfLoadingOverlayComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: ThfLanguageService }
        ]; };
        return ThfLoadingOverlayComponent;
    }(ThfLoadingOverlayBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do serviço `thf-language`.
     */
    var ThfLanguageModule = /** @class */ (function () {
        function ThfLanguageModule() {
        }
        ThfLanguageModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            ThfLanguageService
                        ]
                    },] }
        ];
        return ThfLanguageModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Este componente tem o objetivo de mostrar visualmente aos usuários que a aplicação está processando
     * ou aguardando a resposta de alguma requisição.
     */
    var ThfLoadingBaseComponent = /** @class */ (function () {
        function ThfLoadingBaseComponent() {
            /**
             * Texto a ser exibido no componente.
             */
            this.text = 'Carregando';
        }
        ThfLoadingBaseComponent.propDecorators = {
            text: [{ type: core.Input, args: ['t-text',] }]
        };
        return ThfLoadingBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@docsExtends ThfLoadingBaseComponent
     */
    var ThfLoadingComponent = /** @class */ (function (_super) {
        __extends(ThfLoadingComponent, _super);
        function ThfLoadingComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ThfLoadingComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-loading',
                        template: "<div class=\"thf-loading\">\n  <span class=\"thf-loading-icon\"></span>\n  <span class=\"thf-loading-label thf-text-ellipsis\" *ngIf=\"text\">{{text}}</span>\n</div>\n"
                    }] }
        ];
        return ThfLoadingComponent;
    }(ThfLoadingBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     *
     * \@description
     *
     * Módulo do componente thf-loading-overlay.
     */
    var ThfLoadingModule = /** @class */ (function () {
        function ThfLoadingModule() {
        }
        ThfLoadingModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            ThfLanguageModule
                        ],
                        declarations: [
                            ThfLoadingComponent,
                            ThfLoadingOverlayComponent
                        ],
                        exports: [
                            ThfLoadingComponent,
                            ThfLoadingOverlayComponent
                        ]
                    },] }
        ];
        return ThfLoadingModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O componente `thf-modal` é utilizado para incluir conteúdos rápidos e informativos.
     *
     * No cabeçalho do componente é possível definir um título e como também permite ocultar o ícone de fechamento da modal.
     *
     * Em seu corpo é possível definir um conteúdo informativo, podendo utilizar componentes como por exemplo `thf-chart`,
     * `thf-table` e os demais componentes do THF.
     *
     * No rodapé encontram-se os botões de ação primária e secundária, no qual permitem definir uma ação e um rótulo, bem como
     * definir um estado de carregando e / ou desabilitado. Também é possível definir o botão com o tipo *danger*.
     *
     * > É possível fechar a modal através da tecla *ESC*, quando a propriedade `t-hide-close` não estiver habilitada.
     */
    var ThfModalBaseComponent = /** @class */ (function () {
        function ThfModalBaseComponent() {
            this._hideClose = false;
            this._size = 'md';
            /**
             * Define o fechamento da modal ao clicar fora da mesma.
             * Informe o valor `true` para ativar o fechamento ao clicar fora da modal.
             */
            this.clickOut = false;
            // Controla se a modal fica oculto ou visível, por padrão é oculto
            this.isHidden = true;
            // Event emmiter para quando a modal é fechada pelo 'X'.
            this.onXClosed = new core.EventEmitter();
        }
        Object.defineProperty(ThfModalBaseComponent.prototype, "size", {
            get: /**
             * @return {?}
             */
            function () {
                return this._size;
            },
            /**
             * Define o tamanho da modal.
             *
             * Valores válidos:
             *  - `sm` (pequeno)
             *  - `md` (médio)
             *  - `lg` (grande)
             *  - `xl` (extra grande)
             *  - `auto` (automático)
             *
             * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
             * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
             *
             * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
             */
            set: /**
             * Define o tamanho da modal.
             *
             * Valores válidos:
             *  - `sm` (pequeno)
             *  - `md` (médio)
             *  - `lg` (grande)
             *  - `xl` (extra grande)
             *  - `auto` (automático)
             *
             * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
             * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
             *
             * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
                this._size = sizes.indexOf(value) > -1 ? value : 'md';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfModalBaseComponent.prototype, "setClickOut", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.clickOut = (value === '') ? false : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfModalBaseComponent.prototype, "hideClose", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hideClose;
            },
            /**
             * @optional
             *
             * @description
             *
             * Oculta o ícone de fechar do cabeçalho da modal.
             *
             * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Oculta o ícone de fechar do cabeçalho da modal.
             *
             * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._hideClose = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        /** Função para fechar a modal. */
        /**
         * Função para fechar a modal.
         * @param {?=} xClosed
         * @return {?}
         */
        ThfModalBaseComponent.prototype.close = /**
         * Função para fechar a modal.
         * @param {?=} xClosed
         * @return {?}
         */
        function (xClosed) {
            if (xClosed === void 0) { xClosed = false; }
            this.isHidden = true;
            if (xClosed) {
                this.onXClosed.emit(xClosed);
            }
        };
        /** Função para abrir a modal. */
        /**
         * Função para abrir a modal.
         * @return {?}
         */
        ThfModalBaseComponent.prototype.open = /**
         * Função para abrir a modal.
         * @return {?}
         */
        function () {
            this.validPrimaryAction();
            this.isHidden = false;
        };
        /**
         * @return {?}
         */
        ThfModalBaseComponent.prototype.validPrimaryAction = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.primaryAction) {
                this.primaryAction = {
                    action: (/**
                     * @return {?}
                     */
                    function () { return _this.close(); }),
                    label: 'Ok',
                };
            }
            if (!this.primaryAction['action']) {
                this.primaryAction['action'] = (/**
                 * @return {?}
                 */
                function () { return _this.close(); });
            }
            if (!this.primaryAction['label']) {
                this.primaryAction['label'] = 'Ok';
            }
        };
        ThfModalBaseComponent.propDecorators = {
            title: [{ type: core.Input, args: ['t-title',] }],
            primaryAction: [{ type: core.Input, args: ['t-primary-action',] }],
            secondaryAction: [{ type: core.Input, args: ['t-secondary-action',] }],
            size: [{ type: core.Input, args: ['t-size',] }],
            setClickOut: [{ type: core.Input, args: ['t-click-out',] }],
            hideClose: [{ type: core.Input, args: ['t-hide-close',] }]
        };
        return ThfModalBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfModalService = /** @class */ (function () {
        function ThfModalService() {
        }
        ThfModalService.decorators = [
            { type: core.Injectable }
        ];
        return ThfModalService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfModalBaseComponent
     *
     * \@example
     *
     * <example name="thf-modal-basic" title="Totvs Modal Basic">
     *  <file name="sample-thf-modal-basic/sample-thf-modal-basic.component.html"> </file>
     *  <file name="sample-thf-modal-basic/sample-thf-modal-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-modal-labs" title="Totvs Modal Labs">
     *  <file name="sample-thf-modal-labs/sample-thf-modal-labs.component.html"> </file>
     *  <file name="sample-thf-modal-labs/sample-thf-modal-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-modal-fruits-salad" title="Totvs Modal - Fruits Salad">
     *  <file name="sample-thf-modal-fruits-salad/sample-thf-modal-fruits-salad.component.html"> </file>
     *  <file name="sample-thf-modal-fruits-salad/sample-thf-modal-fruits-salad.component.ts"> </file>
     * </example>
     */
    var ThfModalComponent = /** @class */ (function (_super) {
        __extends(ThfModalComponent, _super);
        function ThfModalComponent(thfModalService, renderer, changeDetector) {
            var _this = _super.call(this) || this;
            _this.thfModalService = thfModalService;
            _this.renderer = renderer;
            _this.changeDetector = changeDetector;
            _this.focusableElements = 'input, select, textarea, button:not([disabled]), a';
            _this.id = uuid$1.v4();
            return _this;
        }
        /**
         * @param {?=} xClosed
         * @return {?}
         */
        ThfModalComponent.prototype.close = /**
         * @param {?=} xClosed
         * @return {?}
         */
        function (xClosed) {
            if (xClosed === void 0) { xClosed = false; }
            this.thfModalService.modalActive = undefined;
            _super.prototype.close.call(this, xClosed);
            this.removeEventListeners();
            if (this.sourceElement) {
                this.sourceElement.focus();
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfModalComponent.prototype.closeModalOnEscapeKey = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!this.hideClose) {
                event.preventDefault();
                event.stopPropagation();
                this.close();
            }
        };
        /**
         * @return {?}
         */
        ThfModalComponent.prototype.getPrimaryActionButtonType = /**
         * @return {?}
         */
        function () {
            return this.primaryAction.danger ? 'danger' : 'primary';
        };
        /**
         * @return {?}
         */
        ThfModalComponent.prototype.getSecondaryActionButtonType = /**
         * @return {?}
         */
        function () {
            return this.secondaryAction && this.secondaryAction.danger && !this.primaryAction.danger ? 'danger' : 'default';
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfModalComponent.prototype.onClickOut = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.clickOut && !this.modalContent.nativeElement.contains(event.target)) {
                this.close();
            }
        };
        /**
         * @return {?}
         */
        ThfModalComponent.prototype.open = /**
         * @return {?}
         */
        function () {
            this.sourceElement = document.activeElement;
            _super.prototype.open.call(this);
            this.handleFocus();
        };
        /**
         * @private
         * @return {?}
         */
        ThfModalComponent.prototype.handleFocus = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.thfModalService.modalActive = this.id;
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.modalContent) {
                    _this.initFocus();
                    document.addEventListener('focus', _this.focusFunction, true);
                }
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfModalComponent.prototype.initFocus = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.focusFunction = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.thfModalService.modalActive = _this.thfModalService.modalActive || _this.id;
                /** @type {?} */
                var modalElement = _this.modalContent.nativeElement;
                if (!modalElement.contains(event.target) && _this.thfModalService.modalActive === _this.id) {
                    event.stopPropagation();
                    _this.firstElement.focus();
                }
            });
            this.setFirstElement();
            if (this.hideClose) {
                this.firstElement.focus();
            }
            else {
                /** @type {?} */
                var firstFieldElement = this.modalContent.nativeElement.querySelectorAll(this.focusableElements)[1] ||
                    this.modalContent.nativeElement;
                firstFieldElement.focus();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfModalComponent.prototype.removeEventListeners = /**
         * @private
         * @return {?}
         */
        function () {
            document.removeEventListener('focus', this.focusFunction, true);
        };
        /**
         * @private
         * @return {?}
         */
        ThfModalComponent.prototype.setFirstElement = /**
         * @private
         * @return {?}
         */
        function () {
            this.firstElement = this.modalContent.nativeElement.querySelector(this.focusableElements) || this.modalContent.nativeElement;
        };
        ThfModalComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-modal',
                        template: "<div *ngIf=\"!isHidden\"\n  class=\"thf-modal\"\n  tabindex=\"0\"\n  (keydown.esc)=\"closeModalOnEscapeKey($event)\">\n\n  <div class=\"thf-modal-overlay\">\n    <div class=\"thf-modal-container thf-pb-2 thf-pt-2\" (click)=\"onClickOut($event)\">\n\n      <div class=\"thf-modal-vertical-align\">\n        <div #modalContent\n          class=\"thf-modal-content thf-modal-{{ size }}\"\n          tabindex=\"-1\">\n\n          <div class=\"thf-modal-header\">\n            <div class=\"thf-modal-title thf-text-ellipsis\">\n              {{ title }}\n            </div>\n\n            <a *ngIf=\"!hideClose\"\n              class=\"thf-modal-header-close-button\"\n              tabindex=\"0\"\n              (click)=\"close(true)\">\n              <span class=\"thf-icon thf-icon-close\"></span>\n            </a>\n          </div>\n\n          <div class=\"thf-modal-body\">\n            <ng-content></ng-content>\n          </div>\n\n          <div class=\"thf-modal-footer\">\n            <thf-button *ngIf=\"secondaryAction\"\n              [t-disabled]=\"secondaryAction.disabled\"\n              [t-label]=\"secondaryAction.label\"\n              [t-loading]=\"secondaryAction.loading\"\n              [t-type]=\"getSecondaryActionButtonType()\"\n              (t-click)=\"secondaryAction.action()\">\n            </thf-button>\n\n            <thf-button\n              class=\"thf-button-modal-first-action\"\n              [t-disabled]=\"primaryAction.disabled\"\n              [t-label]=\"primaryAction.label\"\n              [t-loading]=\"primaryAction.loading\"\n              [t-type]=\"getPrimaryActionButtonType()\"\n              (t-click)=\"primaryAction.action()\">\n            </thf-button>\n          </div>\n\n        </div>\n      </div>\n\n    </div>\n  </div>\n</div>\n\n"
                    }] }
        ];
        /** @nocollapse */
        ThfModalComponent.ctorParameters = function () { return [
            { type: ThfModalService },
            { type: core.Renderer2 },
            { type: core.ChangeDetectorRef }
        ]; };
        ThfModalComponent.propDecorators = {
            modalContent: [{ type: core.ViewChild, args: ['modalContent', { read: core.ElementRef, static: false },] }]
        };
        return ThfModalComponent;
    }(ThfModalBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     * Módulo do componente thf-modal
     */
    var ThfModalModule = /** @class */ (function () {
        function ThfModalModule() {
        }
        ThfModalModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            ThfButtonModule
                        ],
                        declarations: [
                            ThfModalComponent
                        ],
                        exports: [ThfModalComponent],
                        providers: [ThfModalService]
                    },] }
        ];
        return ThfModalModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Pipe responsável por apresentar um horário baseado no formato de entrada definido na API da Totvs.
     */
    var ThfTimePipe = /** @class */ (function () {
        function ThfTimePipe() {
        }
        /**
         * @param {?} time
         * @param {?=} format
         * @return {?}
         */
        ThfTimePipe.prototype.transform = /**
         * @param {?} time
         * @param {?=} format
         * @return {?}
         */
        function (time, format) {
            /** @type {?} */
            var hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\.]?([0-9]{1,6})?$/g;
            if (isTypeof(time, 'string') && hourRegex.test(time)) {
                /** @type {?} */
                var amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;
                /** @type {?} */
                var miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);
                /** @type {?} */
                var formatMiliseconds = this.getFormatMiliseconds(amountOfF);
                return this.formatValue(time, format, formatMiliseconds, miliseconds);
            }
            return null;
        };
        /**
         * @private
         * @param {?} miliseconds
         * @param {?} amountOfF
         * @return {?}
         */
        ThfTimePipe.prototype.addDotMiliseconds = /**
         * @private
         * @param {?} miliseconds
         * @param {?} amountOfF
         * @return {?}
         */
        function (miliseconds, amountOfF) {
            if (miliseconds && amountOfF) {
                miliseconds = '.' + miliseconds;
            }
            return miliseconds;
        };
        /**
         * @private
         * @param {?} time
         * @param {?} format
         * @param {?} formatMiliseconds
         * @param {?} miliseconds
         * @return {?}
         */
        ThfTimePipe.prototype.formatValue = /**
         * @private
         * @param {?} time
         * @param {?} format
         * @param {?} formatMiliseconds
         * @param {?} miliseconds
         * @return {?}
         */
        function (time, format, formatMiliseconds, miliseconds) {
            if (time && format) {
                /** @type {?} */
                var hour = time.substring(0, 2);
                /** @type {?} */
                var minutes = time.substring(3, 5);
                /** @type {?} */
                var seconds = time.substring(6, 8);
                format = format.replace('HH', hour);
                format = format.replace('mm', minutes);
                format = format.replace('ss', seconds);
                format = format.replace("." + formatMiliseconds, miliseconds);
                return format;
            }
            else {
                return time;
            }
        };
        /**
         * @private
         * @param {?} amountOfF
         * @return {?}
         */
        ThfTimePipe.prototype.getFormatMiliseconds = /**
         * @private
         * @param {?} amountOfF
         * @return {?}
         */
        function (amountOfF) {
            /** @type {?} */
            var formatMiliseconds = '';
            for (var i = 0; i < amountOfF; i++) {
                formatMiliseconds += 'f';
            }
            return formatMiliseconds;
        };
        ThfTimePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'thf_time'
                    },] }
        ];
        return ThfTimePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do pipe `thf-time`.
     */
    var ThfTimeModule = /** @class */ (function () {
        function ThfTimeModule() {
        }
        ThfTimeModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ThfTimePipe
                        ],
                        imports: [],
                        exports: [
                            ThfTimePipe
                        ],
                        providers: [],
                        bootstrap: []
                    },] }
        ];
        return ThfTimeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente responsável por exibir ícones nas colunas.
     */
    var ThfTableColumnIconComponent = /** @class */ (function () {
        function ThfTableColumnIconComponent() {
        }
        Object.defineProperty(ThfTableColumnIconComponent.prototype, "icons", {
            get: /**
             * @return {?}
             */
            function () {
                return this._icons;
            },
            /** Lista de um ou mais ícones que serão exibidos em sua respectiva coluna. */
            set: /**
             * Lista de um ou mais ícones que serão exibidos em sua respectiva coluna.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._icons = this.convertToColumnIcon(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} iconColumn
         * @return {?}
         */
        ThfTableColumnIconComponent.prototype.checkDisabled = /**
         * @param {?} iconColumn
         * @return {?}
         */
        function (iconColumn) {
            return iconColumn.disabled ? iconColumn.disabled(this.row) : false;
        };
        /**
         * @param {?} columnIcon
         * @return {?}
         */
        ThfTableColumnIconComponent.prototype.getIconColorClass = /**
         * @param {?} columnIcon
         * @return {?}
         */
        function (columnIcon) {
            /** @type {?} */
            var color = this.getIconColor(columnIcon) || this.getIconColor(this.column);
            return color ? "thf-text-" + color : '';
        };
        /**
         * @param {?} iconColumn
         * @return {?}
         */
        ThfTableColumnIconComponent.prototype.onIconClick = /**
         * @param {?} iconColumn
         * @return {?}
         */
        function (iconColumn) {
            /** @type {?} */
            var isAbleAction = !this.checkDisabled(iconColumn);
            if (iconColumn.action && isAbleAction) {
                iconColumn.action(this.row, iconColumn);
            }
            else if (this.column.action && isAbleAction) {
                this.column.action(this.row, iconColumn || this.column);
            }
        };
        /**
         * @param {?} text
         * @param {?} iconColumn
         * @return {?}
         */
        ThfTableColumnIconComponent.prototype.tooltipMouseEnter = /**
         * @param {?} text
         * @param {?} iconColumn
         * @return {?}
         */
        function (text, iconColumn) {
            if (this.checkDisabled(iconColumn)) {
                this.tooltipText = undefined;
            }
            else {
                this.tooltipText = text;
            }
        };
        /**
         * @return {?}
         */
        ThfTableColumnIconComponent.prototype.tooltipMouseLeave = /**
         * @return {?}
         */
        function () {
            this.tooltipText = undefined;
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfTableColumnIconComponent.prototype.convertToColumnIcon = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Array) {
                return value.map((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    return typeof val === 'string' ? { value: val } : val;
                }));
            }
            if (typeof value === 'string') {
                return [{ value: value }];
            }
            return [];
        };
        /**
         * @private
         * @param {?} column
         * @return {?}
         */
        ThfTableColumnIconComponent.prototype.getIconColor = /**
         * @private
         * @param {?} column
         * @return {?}
         */
        function (column) {
            return typeof column.color === 'function' ? column.color(this.row, column) : column.color;
        };
        ThfTableColumnIconComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-table-column-icon',
                        template: "<ng-container *ngFor=\"let iconColumn of icons\">\n  <span class=\"thf-icon\"\n    [class.thf-clickable]=\"!checkDisabled(iconColumn) && iconColumn.action || column.action \"\n    [ngClass]=\"[checkDisabled(iconColumn) ? 'thf-table-icon-disabled' : getIconColorClass(iconColumn), iconColumn.icon || iconColumn.value]\"\n    [t-tooltip]=\"tooltipText\"\n    (click)=\"onIconClick(iconColumn)\"\n    (mouseenter)=\"tooltipMouseEnter(iconColumn.tooltip, iconColumn)\"\n    (mouseleave)=\"tooltipMouseLeave()\">\n  </span>\n</ng-container>\n"
                    }] }
        ];
        ThfTableColumnIconComponent.propDecorators = {
            column: [{ type: core.Input, args: ['t-column',] }],
            icons: [{ type: core.Input, args: ['t-icons',] }],
            row: [{ type: core.Input, args: ['t-row',] }]
        };
        return ThfTableColumnIconComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ThfColorPaletteEnum = {
        /** #0c9abe */
        Color01: 'color-01',
        /** #2c85c8 */
        Color02: 'color-02',
        /** #2c43c8 */
        Color03: 'color-03',
        /** #5843c8 */
        Color04: 'color-04',
        /** #ab43c8 */
        Color05: 'color-05',
        /** #ab4391 */
        Color06: 'color-06',
        /** #c64840 */
        Color07: 'color-07',
        /** #ea9b3e */
        Color08: 'color-08',
        /** #abc249 */
        Color09: 'color-09',
        /** #56b96b */
        Color10: 'color-10',
        /** #00b28e */
        Color11: 'color-11',
        /** #06a6a5 */
        Color12: 'color-12',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfColorPaletteService = /** @class */ (function () {
        function ThfColorPaletteService() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        ThfColorPaletteService.prototype.getColor = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return ((/** @type {?} */ (Object))).values(ThfColorPaletteEnum).includes(value.color) ?
                value.color : this.getColorFromType(value.type || value.color);
        };
        /**
         * @private
         * @param {?} type
         * @return {?}
         */
        ThfColorPaletteService.prototype.getColorFromType = /**
         * @private
         * @param {?} type
         * @return {?}
         */
        function (type) {
            switch (type) {
                case 'danger':
                    return ThfColorPaletteEnum.Color07;
                case 'success':
                    return ThfColorPaletteEnum.Color11;
                case 'warning':
                    return ThfColorPaletteEnum.Color08;
                default:
                    return ThfColorPaletteEnum.Color01;
            }
        };
        ThfColorPaletteService.decorators = [
            { type: core.Injectable }
        ];
        return ThfColorPaletteService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente para a criação da representação da legenda, em formato de texto .
     */
    var ThfTableColumnLabelComponent = /** @class */ (function () {
        function ThfTableColumnLabelComponent(thfColorPaletteService) {
            this.thfColorPaletteService = thfColorPaletteService;
        }
        Object.defineProperty(ThfTableColumnLabelComponent.prototype, "value", {
            get: /**
             * @return {?}
             */
            function () {
                return this._value;
            },
            /** Objeto com os dados do label */
            set: /**
             * Objeto com os dados do label
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value) {
                    value.color = this.thfColorPaletteService.getColor(value);
                }
                this._value = value;
            },
            enumerable: true,
            configurable: true
        });
        ThfTableColumnLabelComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-table-column-label',
                        template: "<span\n  [class]=\"'thf-table-column-label thf-' + value?.color\">\n  {{ value?.label }}\n</span>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfTableColumnLabelComponent.ctorParameters = function () { return [
            { type: ThfColorPaletteService }
        ]; };
        ThfTableColumnLabelComponent.propDecorators = {
            value: [{ type: core.Input, args: ['t-value',] }]
        };
        return ThfTableColumnLabelComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente responsável por exibir link nas colunas.
     */
    var ThfTableColumnLinkComponent = /** @class */ (function () {
        function ThfTableColumnLinkComponent() {
        }
        Object.defineProperty(ThfTableColumnLinkComponent.prototype, "type", {
            get: /**
             * @return {?}
             */
            function () {
                if (this.disabled) {
                    return 'disabled';
                }
                if (this.action) {
                    return 'action';
                }
                if (isExternalLink(this.link)) {
                    return 'externalLink';
                }
                return 'internalLink';
            },
            enumerable: true,
            configurable: true
        });
        ThfTableColumnLinkComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-table-column-link',
                        template: "<ng-container [ngSwitch]=\"type\">\n  <p *ngSwitchCase=\"'disabled'\" class=\"thf-table-link-disabled\">{{ value }}</p>\n  <a *ngSwitchCase=\"'action'\" class=\"thf-table-link\" (click)=\"action(value, row)\">{{ value }}</a>\n  <a *ngSwitchCase=\"'externalLink'\" class=\"thf-table-link\" [href]=\"link\" target=\"_blank\">{{ value }}</a>\n  <a *ngSwitchCase=\"'internalLink'\" class=\"thf-table-link\" [routerLink]=\"link\">{{ value }}</a>\n</ng-container>\n"
                    }] }
        ];
        ThfTableColumnLinkComponent.propDecorators = {
            action: [{ type: core.Input, args: ['t-action',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            link: [{ type: core.Input, args: ['t-link',] }],
            row: [{ type: core.Input, args: ['t-row',] }],
            value: [{ type: core.Input, args: ['t-value',] }]
        };
        return ThfTableColumnLinkComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfTableContainer = ['border', 'shadow'];
    /** @type {?} */
    var thfTableContainerDefault = 'border';
    /** @type {?} */
    var thfTableLiteralsDefault = {
        en: (/** @type {?} */ ({
            noColumns: 'Columns are not defined',
            noData: 'No data found',
            loadingData: 'Loading',
            loadMoreData: 'Load more data',
            seeCompleteSubtitle: 'See complete subtitle',
            completeSubtitle: 'Complete subtitle'
        })),
        es: (/** @type {?} */ ({
            noColumns: 'Columnas no definidas',
            noData: 'Datos no encontrados',
            loadingData: 'Cargando datos',
            loadMoreData: 'Cargar más resultados',
            seeCompleteSubtitle: 'Ver subtitulo completo',
            completeSubtitle: 'Subtitulo completo'
        })),
        pt: (/** @type {?} */ ({
            noColumns: 'Nenhuma definição de colunas',
            noData: 'Nenhum dado encontrado',
            loadingData: 'Carregando',
            loadMoreData: 'Carregar mais resultados',
            seeCompleteSubtitle: 'Ver legenda completa',
            completeSubtitle: 'Legenda completa'
        }))
    };
    /**
     * \@description
     *
     * Este componente de tabela é utilizado para exibição de listas, com diferentes tipos de dados que podem ser texto,
     * data, horário e número com formato personalizado.
     *
     * É possivel criar uma tabela com ordenação de dados, linhas com detalhes, coluna de seleção de linhas,
     * coluna com ações e também carregamento por demanda com o botão "Carregar mais resultados".
     *
     * Também existe a possibilidade de utilizar _template_ para os detalhes das linhas,
     * veja mais em **[t-table-row-template](/documentation/thf-table-row-template)**.
     *
     * Quando a largura de todas as colunas for definida, caso o tamanho total delas seja maior que a tabela, será exibido um scroll horizontal.
     *
     * @abstract
     */
    var ThfTableBaseComponent = /** @class */ (function () {
        function ThfTableBaseComponent(thfDate) {
            this.thfDate = thfDate;
            this._actions = [];
            this._columns = [];
            this._hideDetail = false;
            this._hideTextOverflow = false;
            this._loading = false;
            /**
             * Ação executada quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
             */
            this.allSelected = new core.EventEmitter();
            /**
             * Ação executada quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
             */
            this.allUnselected = new core.EventEmitter();
            /**
             * Ação executada ao selecionar uma linha do `thf-table`.
             */
            this.selected = new core.EventEmitter();
            /**
             * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
             * não é visível.
             */
            this.showMore = new core.EventEmitter();
            /**
             * Ação executada ao desmarcar a seleção de uma linha do `thf-table`.
             */
            this.unselected = new core.EventEmitter();
            this.selectAll = false;
            this.sortedColumn = { property: (/** @type {?} */ (null)), ascending: true };
        }
        Object.defineProperty(ThfTableBaseComponent.prototype, "items", {
            get: /**
             * @return {?}
             */
            function () {
                return this._items;
            },
            /**
             * @description
             *
             * Lista de itens da tabela.
             * > Se falso, será inicializado como um *array* vazio.
             */
            set: /**
             * \@description
             *
             * Lista de itens da tabela.
             * > Se falso, será inicializado como um *array* vazio.
             * @param {?} items
             * @return {?}
             */
            function (items) {
                this._items = Array.isArray(items) ? items : [];
                // when haven't items, selectAll should be unchecked.
                if (!this.hasItems()) {
                    this.selectAll = false;
                }
                else if (!this.hasColumns()) {
                    this.columns = this.getDefaultColumns(items[0]);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableBaseComponent.prototype, "columns", {
            get: /**
             * @return {?}
             */
            function () {
                return this._columns;
            },
            /**
             * @optional
             *
             * @description
             *
             * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `ThfTableColumn`.
             * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
             * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
             *
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `ThfTableColumn`.
             * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
             * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
             *
             * @param {?} columns
             * @return {?}
             */
            function (columns) {
                this._columns = columns || [];
                if (this._columns.length) {
                    this.setColumnLink();
                    this.calculateWidthHeaders();
                }
                else if (this.hasItems()) {
                    this._columns = this.getDefaultColumns(this.items[0]);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableBaseComponent.prototype, "container", {
            get: /**
             * @return {?}
             */
            function () {
                return this._container;
            },
            /**
             * @optional
             *
             * @description
             *
             * Adiciona um contorno arredondado ao `thf-table`, as opções são:
             * - `border`: com bordas/linhas.
             * - `shadow`: com sombras.
             *
             * @default `border`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Adiciona um contorno arredondado ao `thf-table`, as opções são:
             * - `border`: com bordas/linhas.
             * - `shadow`: com sombras.
             *
             * \@default `border`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._container = thfTableContainer.includes(value) ? value : thfTableContainerDefault;
                this.showContainer(this._container);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableBaseComponent.prototype, "hideTextOverflow", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hideTextOverflow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
             * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
             * o mesmo será exibido através do [`thf-tooltip`](/documentation/thf-tooltip).
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
             * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
             * o mesmo será exibido através do [`thf-tooltip`](/documentation/thf-tooltip).
             * @param {?} hideTextOverflow
             * @return {?}
             */
            function (hideTextOverflow) {
                this._hideTextOverflow = convertToBoolean(hideTextOverflow);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableBaseComponent.prototype, "height", {
            get: /**
             * @return {?}
             */
            function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura da tabela em *pixels* e fixa o cabeçalho.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define a altura da tabela em *pixels* e fixa o cabeçalho.
             * @param {?} height
             * @return {?}
             */
            function (height) {
                this._height = height;
                this.calculateHeightTableContainer(height);
                this.calculateWidthHeaders();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableBaseComponent.prototype, "hideDetail", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hideDetail;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita a visualização da lista de detalhes de cada linha da coluna.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Habilita a visualização da lista de detalhes de cada linha da coluna.
             *
             * \@default `false`
             * @param {?} hideDetail
             * @return {?}
             */
            function (hideDetail) {
                this._hideDetail = hideDetail != null && hideDetail.toString() === '' ? true : convertToBoolean(hideDetail);
                this.calculateWidthHeaders();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableBaseComponent.prototype, "literals", {
            get: /**
             * @return {?}
             */
            function () {
                return this._literals || thfTableLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `thf-table`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfTableLiterals = {
             *    loadMoreData: 'Buscar mais dados',
             *    loadingData: 'Processando',
             *    noColumns: 'Sem colunas',
             *    noData: 'Sem dados',
             *    seeCompleteSubtitle: 'Mostrar legenda completa',
             *    completeSubtitle: 'Todas legendas'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfTableLiterals = {
             *    noData: 'Sem dados'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-table
             *   [t-literals]="customLiterals">
             * </thf-table>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Objeto com as literais usadas no `thf-table`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfTableLiterals = {
             *    loadMoreData: 'Buscar mais dados',
             *    loadingData: 'Processando',
             *    noColumns: 'Sem colunas',
             *    noData: 'Sem dados',
             *    seeCompleteSubtitle: 'Mostrar legenda completa',
             *    completeSubtitle: 'Todas legendas'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfTableLiterals = {
             *    noData: 'Sem dados'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-table
             *   [t-literals]="customLiterals">
             * </thf-table>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign({}, thfTableLiteralsDefault[thfLocaleDefault], thfTableLiteralsDefault[browserLanguage()], value);
                }
                else {
                    this._literals = thfTableLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableBaseComponent.prototype, "loading", {
            get: /**
             * @return {?}
             */
            function () {
                return this._loading;
            },
            /**
             * @optional
             *
             * @description
             *
             * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
             *
             * \@default `false`
             * @param {?} loading
             * @return {?}
             */
            function (loading) {
                this._loading = convertToBoolean(loading);
                this.calculateWidthHeaders();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableBaseComponent.prototype, "checkbox", {
            get: /**
             * @return {?}
             */
            function () {
                return this._checkbox;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita na primeira coluna a opção de selecionar linhas,
             * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
             * > Exemplo: `item.$selected` ou `item['$selected']`.
             * > Os itens filhos possuem comportamento independente do item pai.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Habilita na primeira coluna a opção de selecionar linhas,
             * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
             * > Exemplo: `item.$selected` ou `item['$selected']`.
             * > Os itens filhos possuem comportamento independente do item pai.
             *
             * \@default `false`
             * @param {?} checkbox
             * @return {?}
             */
            function (checkbox) {
                this._checkbox = (/** @type {?} */ (checkbox)) === '' ? true : convertToBoolean(checkbox);
                this.calculateWidthHeaders();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableBaseComponent.prototype, "actions", {
            get: /**
             * @return {?}
             */
            function () {
                return this._actions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma lista de ações.
             *
             * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
             * se encarrega de agrupá-las exibindo o ícone [**thf-icon-more**](/guides/icons) que listará as ações ao ser clicado.
             *
             * **A coluna de ações não será exibida quando:**
             *  - a lista conter valores inválidos ou indefinidos.
             *  - tenha uma única ação e a mesma não for visível.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define uma lista de ações.
             *
             * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
             * se encarrega de agrupá-las exibindo o ícone [**thf-icon-more**](/guides/icons) que listará as ações ao ser clicado.
             *
             * **A coluna de ações não será exibida quando:**
             *  - a lista conter valores inválidos ou indefinidos.
             *  - tenha uma única ação e a mesma não for visível.
             * @param {?} actions
             * @return {?}
             */
            function (actions) {
                this._actions = actions;
                this.calculateWidthHeaders();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableBaseComponent.prototype, "setSort", {
            set: /**
             * @param {?} sort
             * @return {?}
             */
            function (sort) {
                this.sort = sort === '' ? false : convertToBoolean(sort);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableBaseComponent.prototype, "setShowMoreDisabled", {
            set: /**
             * @param {?} showMoreDisabled
             * @return {?}
             */
            function (showMoreDisabled) {
                this.showMoreDisabled = showMoreDisabled === '' ? false : convertToBoolean(showMoreDisabled);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableBaseComponent.prototype, "setStriped", {
            set: /**
             * @param {?} striped
             * @return {?}
             */
            function (striped) {
                this.striped = striped === '' ? false : convertToBoolean(striped);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableBaseComponent.prototype, "setHideSelectAll", {
            set: /**
             * @param {?} hideSelectAll
             * @return {?}
             */
            function (hideSelectAll) {
                this.hideSelectAll = hideSelectAll === '' ? false : convertToBoolean(hideSelectAll);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableBaseComponent.prototype, "setSingleSelect", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.singleSelect = value === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfTableBaseComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            if (this.singleSelect || this.hideSelectAll) {
                this.selectAll = false;
                this.hideSelectAll = true;
            }
        };
        /**
         * @return {?}
         */
        ThfTableBaseComponent.prototype.selectAllRows = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.hideSelectAll) {
                this.selectAll = !this.selectAll;
                this.items.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    item.$selected = _this.selectAll;
                }));
                this.emitSelectAllEvents(this.selectAll, this.items);
            }
        };
        /**
         * @param {?} row
         * @return {?}
         */
        ThfTableBaseComponent.prototype.selectRow = /**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            row.$selected = !row.$selected;
            this.emitSelectEvents(row);
            this.configAfterSelectRow(this.items, row);
        };
        /**
         * @param {?} row
         * @return {?}
         */
        ThfTableBaseComponent.prototype.selectDetailRow = /**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            this.emitSelectEvents(row);
        };
        // Colunas que são inseridas no <head> da tabela
        // Colunas que são inseridas no <head> da tabela
        /**
         * @return {?}
         */
        ThfTableBaseComponent.prototype.getMainColumns = 
        // Colunas que são inseridas no <head> da tabela
        /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var typesValid = ['string', 'number', 'boolean', 'date', 'time', 'dateTime', 'currency', 'subtitle', 'link', 'label', 'icon'];
            return this.columns.filter((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return !col.type || typesValid.includes(col.type); }));
        };
        // Retorna a coluna da lista de colunas que é do tipo detail
        // Retorna a coluna da lista de colunas que é do tipo detail
        /**
         * @return {?}
         */
        ThfTableBaseComponent.prototype.getColumnMasterDetail = 
        // Retorna a coluna da lista de colunas que é do tipo detail
        /**
         * @return {?}
         */
        function () {
            return this.columns.find((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return col.type === 'detail'; }));
        };
        /**
         * @param {?} row
         * @param {?} column
         * @return {?}
         */
        ThfTableBaseComponent.prototype.getClassColor = /**
         * @param {?} row
         * @param {?} column
         * @return {?}
         */
        function (row, column) {
            return column.color ? "thf-text-" + this.getColumnColor(row, column) : '';
        };
        /**
         * @param {?} row
         * @param {?} column
         * @return {?}
         */
        ThfTableBaseComponent.prototype.getColumnColor = /**
         * @param {?} row
         * @param {?} column
         * @return {?}
         */
        function (row, column) {
            /** @type {?} */
            var columnColor = column.color;
            return isTypeof(columnColor, 'function') ? columnColor(row, column.property) : columnColor;
        };
        // Retorna as colunas com status
        // Retorna as colunas com status
        /**
         * @return {?}
         */
        ThfTableBaseComponent.prototype.getSubtitleColumns = 
        // Retorna as colunas com status
        /**
         * @return {?}
         */
        function () {
            return this.columns.filter((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return col.type === 'subtitle'; }));
        };
        // Retorna as colunas com ícones
        // Retorna as colunas com ícones
        /**
         * @return {?}
         */
        ThfTableBaseComponent.prototype.getIconColumns = 
        // Retorna as colunas com ícones
        /**
         * @return {?}
         */
        function () {
            return this.columns.filter((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return col.type === 'icon'; }));
        };
        // Retorna o nome da coluna do tipo detail
        // Retorna o nome da coluna do tipo detail
        /**
         * @return {?}
         */
        ThfTableBaseComponent.prototype.getNameColumnDetail = 
        // Retorna o nome da coluna do tipo detail
        /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var detail = this.getColumnMasterDetail();
            return detail ? detail.property : null;
        };
        /**
         * Retorna as linhas do `thf-table` que estão selecionadas.
         */
        /**
         * Retorna as linhas do `thf-table` que estão selecionadas.
         * @return {?}
         */
        ThfTableBaseComponent.prototype.getSelectedRows = /**
         * Retorna as linhas do `thf-table` que estão selecionadas.
         * @return {?}
         */
        function () {
            return this.items.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.$selected; }));
        };
        /**
         * Retorna as linhas do `thf-table` que não estão selecionadas.
         */
        /**
         * Retorna as linhas do `thf-table` que não estão selecionadas.
         * @return {?}
         */
        ThfTableBaseComponent.prototype.getUnselectedRows = /**
         * Retorna as linhas do `thf-table` que não estão selecionadas.
         * @return {?}
         */
        function () {
            return this.items.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return !item.$selected; }));
        };
        /**
         * @return {?}
         */
        ThfTableBaseComponent.prototype.hasColumns = /**
         * @return {?}
         */
        function () {
            return this.columns && this.columns.length > 0;
        };
        /**
         * @return {?}
         */
        ThfTableBaseComponent.prototype.hasItems = /**
         * @return {?}
         */
        function () {
            return this.items && this.items.length > 0;
        };
        /**
         * @param {?} row
         * @return {?}
         */
        ThfTableBaseComponent.prototype.toggleRowAction = /**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            /** @type {?} */
            var toggleShowAction = row.$showAction;
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item.$showAction) {
                    item.$showAction = false;
                }
            }));
            row.$showAction = !toggleShowAction;
        };
        /**
         * @param {?} column
         * @return {?}
         */
        ThfTableBaseComponent.prototype.sortColumn = /**
         * @param {?} column
         * @return {?}
         */
        function (column) {
            if (!this.sort || column.type === 'detail') {
                return;
            }
            this.sortedColumn.ascending = this.sortedColumn.property === column ? !this.sortedColumn.ascending : true;
            this.sortArray(column, this.sortedColumn.ascending);
            this.sortedColumn.property = column;
        };
        /**
         * @param {?} column
         * @param {?} ascending
         * @return {?}
         */
        ThfTableBaseComponent.prototype.sortArray = /**
         * @param {?} column
         * @param {?} ascending
         * @return {?}
         */
        function (column, ascending) {
            var _this = this;
            this.items.sort((/**
             * @param {?} leftSide
             * @param {?} rightSide
             * @return {?}
             */
            function (leftSide, rightSide) {
                if (column.type === 'date' || column.type === 'dateTime') {
                    return _this.thfDate.sortDate(leftSide[column.property], rightSide[column.property], ascending);
                }
                else {
                    return sortValues(leftSide[column.property], rightSide[column.property], ascending);
                }
            }));
        };
        /**
         * @return {?}
         */
        ThfTableBaseComponent.prototype.onShowMore = /**
         * @return {?}
         */
        function () {
            this.showMore.emit(null);
        };
        /**
         * @protected
         * @param {?} item
         * @return {?}
         */
        ThfTableBaseComponent.prototype.getDefaultColumns = /**
         * @protected
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var keys = Object.keys(item);
            return keys.filter((/**
             * @param {?} key
             * @return {?}
             */
            function (key) { return (typeof item[key] !== 'object'); })).map((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                return { label: capitalizeFirstLetter(key), property: key };
            }));
        };
        /**
         * @private
         * @param {?} rows
         * @param {?} row
         * @return {?}
         */
        ThfTableBaseComponent.prototype.configAfterSelectRow = /**
         * @private
         * @param {?} rows
         * @param {?} row
         * @return {?}
         */
        function (rows, row) {
            if (this.singleSelect) {
                this.unselectOtherRows(rows, row);
            }
            else if (!this.hideSelectAll) {
                this.selectAll = this.isEverySelected(rows);
            }
        };
        /**
         * @private
         * @param {?} selectAll
         * @param {?} rows
         * @return {?}
         */
        ThfTableBaseComponent.prototype.emitSelectAllEvents = /**
         * @private
         * @param {?} selectAll
         * @param {?} rows
         * @return {?}
         */
        function (selectAll, rows) {
            selectAll ? this.allSelected.emit(rows) : this.allUnselected.emit(rows);
        };
        /**
         * @private
         * @param {?} row
         * @return {?}
         */
        ThfTableBaseComponent.prototype.emitSelectEvents = /**
         * @private
         * @param {?} row
         * @return {?}
         */
        function (row) {
            row.$selected ? this.selected.emit(row) : this.unselected.emit(row);
        };
        /**
         * @private
         * @param {?} items
         * @return {?}
         */
        ThfTableBaseComponent.prototype.isEverySelected = /**
         * @private
         * @param {?} items
         * @return {?}
         */
        function (items) {
            /** @type {?} */
            var someCheckedOrIndeterminate = (/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.$selected || item.$selected === null; });
            /** @type {?} */
            var everyChecked = (/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.$selected; });
            if (items.every(everyChecked)) {
                return true;
            }
            if (items.some(someCheckedOrIndeterminate)) {
                return null;
            }
            return false;
        };
        /**
         * @private
         * @return {?}
         */
        ThfTableBaseComponent.prototype.setColumnLink = /**
         * @private
         * @return {?}
         */
        function () {
            this.columns.forEach((/**
             * @param {?} column
             * @return {?}
             */
            function (column) {
                if (column['type'] === 'link' && !column['link']) {
                    column['link'] = 'link';
                }
            }));
        };
        /**
         * @private
         * @param {?} rows
         * @param {?} row
         * @return {?}
         */
        ThfTableBaseComponent.prototype.unselectOtherRows = /**
         * @private
         * @param {?} rows
         * @param {?} row
         * @return {?}
         */
        function (rows, row) {
            rows.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item !== row) {
                    item.$selected = false;
                }
            }));
        };
        ThfTableBaseComponent.propDecorators = {
            items: [{ type: core.Input, args: ['t-items',] }],
            columns: [{ type: core.Input, args: ['t-columns',] }],
            container: [{ type: core.Input, args: ['t-container',] }],
            hideTextOverflow: [{ type: core.Input, args: ['t-hide-text-overflow',] }],
            height: [{ type: core.Input, args: ['t-height',] }],
            hideDetail: [{ type: core.Input, args: ['t-hide-detail',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }],
            loading: [{ type: core.Input, args: ['t-loading',] }],
            checkbox: [{ type: core.Input, args: ['t-checkbox',] }],
            actions: [{ type: core.Input, args: ['t-actions',] }],
            setSort: [{ type: core.Input, args: ['t-sort',] }],
            setShowMoreDisabled: [{ type: core.Input, args: ['t-show-more-disabled',] }],
            setStriped: [{ type: core.Input, args: ['t-striped',] }],
            setHideSelectAll: [{ type: core.Input, args: ['t-hide-select-all',] }],
            setSingleSelect: [{ type: core.Input, args: ['t-single-select',] }],
            allSelected: [{ type: core.Output, args: ['t-all-selected',] }],
            allUnselected: [{ type: core.Output, args: ['t-all-unselected',] }],
            selected: [{ type: core.Output, args: ['t-selected',] }],
            showMore: [{ type: core.Output, args: ['t-show-more',] }],
            unselected: [{ type: core.Output, args: ['t-unselected',] }]
        };
        return ThfTableBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@usedBy ThfTableComponent
     *
     * \@description
     *
     * Esta diretiva permite que seja apresentada informações adicionais a respeito de uma determinada linha de
     * dados, de forma que possam ser exibidas e ocultadas através do botão de acionamento.
     *
     * > Quando utilizada, sobrepõe as funcionalidade básicas do *master-detail*.
     *
     * Em seu uso, deve-se utilizar como parâmetro a referência da _linha_ e/ou _índice_, sendo por padrão linha. Caso não seja declarado,
     * o componente não exibirá conteúdo.
     *  - Linha: `row` determina o item da linha corrente.
     *  - Índice: `rowIndex` determina o índice da linha corrente.
     *
     * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <thf-table
     *   [t-columns]="columns"
     *   [t-items]="items">
     *     <ng-template t-table-row-template let-rowItem let-i="rowIndex" [t-table-row-template-show]="isShow">
     *       <detail-row [row]="rowItem"></detail-row>
     *     </ng-template>
     * ...
     * ```
     *
     * ```
     * ...
     * <thf-table
     *   [t-columns]="columns"
     *   [t-items]="items">
     *     <div *t-table-row-template="let rowItem, let i=rowIndex">
     *       <detail-row [row]="rowItem"></detail-row>
     *     </div>
     * ...
     *
     * ```
     *
     * A diretiva **t-table-row-template**, possibilita também que determinada linha apresente ou não seu _template_. Para isto,
     * é necessário atribuir a referência da função que faz esta verificação, à propriedade `t-table-row-template-show`,
     * a mesma deve retornar um valor do tipo *boolean*. Veja o exemplo a seguir:
     *
     * ```
     * ...
     * \@Component({
     *    selector: 'app-root',
     *    templateUrl: `
     *      ...
     *      <thf-table
     *        [t-columns]="columns"
     *        [t-items]="items">
     *          <ng-template t-table-row-template let-rowItem let-i="rowIndex" [t-table-row-template-show]="isUndelivered">
     *            <detail-row [row]="rowItem"> </detail-row>
     *          </div>
     *      ...
     *    `
     * })
     * export class AppComponent {
     *    public dataTable = [{
     *      code: 1200,
     *      product: 'Rice',
     *      costumer: 'Supermarket 1',
     *      quantity: 3,
     *      status: 'delivered',
     *      license_plate: 'MDJD9191',
     *      batch_product: 18041822,
     *      driver: 'José Oliveira'
     *    }, {
     *      code: 1355,
     *      product: 'Bean',
     *      costumer: 'Supermarket 2',
     *      quantity: 1,
     *      status: 'transport',
     *      license_plate: 'XXA5454',
     *      batch_product: 18041821,
     *      driver: 'Francisco Pereira'
     *    }];
     *
     *    isUndelivered(row, index: number) {
     *      return row.status !== 'delivered';
     *    }
     * }
     * ```
     * > No exemplo acima, somente será disponibilizado os detalhes de informações nas linhas cujo o valor de `status`
     * não correspondam à *delivered*.
     */
    var ThfTableRowTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function ThfTableRowTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        ThfTableRowTemplateDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[t-table-row-template]'
                    },] }
        ];
        /** @nocollapse */
        ThfTableRowTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        ThfTableRowTemplateDirective.propDecorators = {
            thfTableRowTemplateShow: [{ type: core.Input, args: ['t-table-row-template-show',] }]
        };
        return ThfTableRowTemplateDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfTableBaseComponent
     *
     * \@example
     *
     * <example name="thf-table-basic" title="Totvs Table Basic">
     *  <file name="sample-thf-table-basic/sample-thf-table-basic.component.ts"> </file>
     *  <file name="sample-thf-table-basic/sample-thf-table-basic.component.html"> </file>
     * </example>
     *
     * <example name="thf-table-labs" title="Totvs Table Labs">
     *  <file name="sample-thf-table-labs/sample-thf-table-labs.component.ts"> </file>
     *  <file name="sample-thf-table-labs/sample-thf-table-labs.component.html"> </file>
     *  <file name="sample-thf-table-labs/sample-thf-table-labs.component.e2e-spec.ts"> </file>
     *  <file name="sample-thf-table-labs/sample-thf-table-labs.component.po.ts"> </file>
     *  <file name="sample-thf-table-labs/sample-thf-table-labs.service.ts"> </file>
     * </example>
     *
     * <example name="thf-table-transport" title="Totvs Table - Transport">
     *  <file name="sample-thf-table-transport/sample-thf-table-transport.component.ts"> </file>
     *  <file name="sample-thf-table-transport/sample-thf-table-transport.component.html"> </file>
     *  <file name="sample-thf-table-transport/sample-thf-table-transport.service.ts"> </file>
     * </example>
     *
     * <example name="thf-table-airfare" title="Totvs Table - Airfare">
     *  <file name="sample-thf-table-airfare/sample-thf-table-airfare.component.ts"> </file>
     *  <file name="sample-thf-table-airfare/sample-thf-table-airfare.component.html"> </file>
     *  <file name="sample-thf-table-airfare/sample-thf-table-airfare.service.ts"> </file>
     * </example>
     *
     * <example name="thf-table-components" title="Totvs Table - Thf Field Components">
     *  <file name="sample-thf-table-components/sample-thf-table-components.component.ts"> </file>
     *  <file name="sample-thf-table-components/sample-thf-table-components.component.html"> </file>
     * </example>
     */
    var ThfTableComponent = /** @class */ (function (_super) {
        __extends(ThfTableComponent, _super);
        function ThfTableComponent(thfDate, differs, viewRef, renderer, changeDetector, decimalPipe, router) {
            var _this = _super.call(this, thfDate) || this;
            _this.changeDetector = changeDetector;
            _this.decimalPipe = decimalPipe;
            _this.router = router;
            _this.tableOpacity = 0;
            _this.initialized = false;
            _this.visibleElement = false;
            _this.parentRef = viewRef['_view']['component'];
            _this.differ = differs.find([]).create(null);
            // TODO: #5550 ao remover este listener, no portal, quando as colunas forem fixas não sofrem
            // alteração de largura, pois o ngDoCheck não é executado.
            _this.clickListener = renderer.listen('document', 'click', (/**
             * @return {?}
             */
            function () { }));
            _this.resizeListener = renderer.listen('window', 'resize', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.debounceResize();
            }));
            return _this;
        }
        Object.defineProperty(ThfTableComponent.prototype, "detailHideSelect", {
            get: /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var masterDetail = this.getColumnMasterDetail();
                return masterDetail && masterDetail.detail ? masterDetail.detail.hideSelect : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableComponent.prototype, "firstAction", {
            get: /**
             * @return {?}
             */
            function () {
                return this.visibleActions && this.visibleActions[0];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableComponent.prototype, "hasRowTemplate", {
            get: /**
             * @return {?}
             */
            function () {
                return !!this.tableRowTemplate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableComponent.prototype, "visibleActions", {
            get: /**
             * @return {?}
             */
            function () {
                return this.actions && this.actions.filter((/**
                 * @param {?} action
                 * @return {?}
                 */
                function (action) { return action.visible !== false; }));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfTableComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.initialized = true;
            if (!this.container) {
                this.hideContainer();
            }
        };
        /**
         * @return {?}
         */
        ThfTableComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
        function () {
            this.checkChangesItems();
            this.verifyCalculateHeightTableContainer();
            // Permite que os cabeçalhos sejam calculados na primeira vez que o componente torna-se visível,
            // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
            if (this.tableWrapperElement.nativeElement.offsetWidth && !this.visibleElement && this.initialized) {
                this.debounceResize();
                this.visibleElement = true;
            }
        };
        /**
         * @return {?}
         */
        ThfTableComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.removeListeners();
        };
        /**
         * @param {?} row
         * @param {?} column
         * @return {?}
         */
        ThfTableComponent.prototype.checkDisabled = /**
         * @param {?} row
         * @param {?} column
         * @return {?}
         */
        function (row, column) {
            return column.disabled ? column.disabled(row) : false;
        };
        /**
         * @param {?} row
         * @param {?} tableAction
         * @return {?}
         */
        ThfTableComponent.prototype.executeTableAction = /**
         * @param {?} row
         * @param {?} tableAction
         * @return {?}
         */
        function (row, tableAction) {
            if (!row.disabled && !this.validateTableAction(row, tableAction)) {
                tableAction.action.call(this.parentRef, row);
                this.toggleRowAction(row);
            }
        };
        /**
         * @return {?}
         */
        ThfTableComponent.prototype.columnCountForMasterDetail = /**
         * @return {?}
         */
        function () {
            return (this.getMainColumns().length + 1) + (this.actions.length > 0 ? 1 : 0) + (this.checkbox ? 1 : 0);
        };
        /**
         * @return {?}
         */
        ThfTableComponent.prototype.columnCount = /**
         * @return {?}
         */
        function () {
            return (this.getMainColumns().length +
                (this.actions.length > 0 ? 1 : 0) +
                (this.checkbox ? 1 : 0) +
                (!this.hideDetail && this.getColumnMasterDetail() !== undefined ? 1 : 0));
        };
        /**
         * @param {?} value
         * @param {?} format
         * @return {?}
         */
        ThfTableComponent.prototype.formatNumber = /**
         * @param {?} value
         * @param {?} format
         * @return {?}
         */
        function (value, format) {
            if (!format) {
                return value;
            }
            return this.decimalPipe.transform(value, format);
        };
        /**
         * @param {?} row
         * @param {?} subtitleColumn
         * @return {?}
         */
        ThfTableComponent.prototype.getSubtitleColumn = /**
         * @param {?} row
         * @param {?} subtitleColumn
         * @return {?}
         */
        function (row, subtitleColumn) {
            return subtitleColumn.subtitles.find((/**
             * @param {?} subtitleItem
             * @return {?}
             */
            function (subtitleItem) { return row[subtitleColumn.property] === subtitleItem.value; }));
        };
        /**
         * @param {?} rowValue
         * @param {?} columnBoolean
         * @return {?}
         */
        ThfTableComponent.prototype.getBooleanLabel = /**
         * @param {?} rowValue
         * @param {?} columnBoolean
         * @return {?}
         */
        function (rowValue, columnBoolean) {
            if (rowValue || rowValue === false || rowValue === 0) {
                rowValue = convertToBoolean(rowValue);
                if (columnBoolean.boolean) {
                    return rowValue ? columnBoolean.boolean.trueLabel || 'Sim' : columnBoolean.boolean.falseLabel || 'Não';
                }
                else {
                    return rowValue ? 'Sim' : 'Não';
                }
            }
            return rowValue;
        };
        /**
         * @param {?} row
         * @param {?} columnIcon
         * @return {?}
         */
        ThfTableComponent.prototype.getColumnIcons = /**
         * @param {?} row
         * @param {?} columnIcon
         * @return {?}
         */
        function (row, columnIcon) {
            /** @type {?} */
            var columnValues = row[columnIcon.property];
            if (columnIcon.icons) {
                if (columnValues instanceof Array) {
                    return this.mergeCustomIcons(columnValues, columnIcon.icons);
                }
                if (typeof columnValues === 'string') {
                    /** @type {?} */
                    var customIcon = columnIcon.icons.find((/**
                     * @param {?} icon
                     * @return {?}
                     */
                    function (icon) { return columnValues === icon.value; }));
                    if (customIcon) {
                        return [customIcon];
                    }
                }
            }
            return columnValues;
        };
        /**
         * @param {?} row
         * @param {?} columnLabel
         * @return {?}
         */
        ThfTableComponent.prototype.getColumnLabel = /**
         * @param {?} row
         * @param {?} columnLabel
         * @return {?}
         */
        function (row, columnLabel) {
            return columnLabel.labels.find((/**
             * @param {?} labelItem
             * @return {?}
             */
            function (labelItem) { return row[columnLabel.property] === labelItem.value; }));
        };
        /**
         * @param {?} column
         * @return {?}
         */
        ThfTableComponent.prototype.getColumnTitleLabel = /**
         * @param {?} column
         * @return {?}
         */
        function (column) {
            return column.label || capitalizeFirstLetter(column.property);
        };
        /**
         * @return {?}
         */
        ThfTableComponent.prototype.verifyWidthColumnsPixels = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var columns = this.getMainColumns();
            return columns.length ? columns.every((/**
             * @param {?} column
             * @return {?}
             */
            function (column) { return column.width && column.width.includes('px'); })) : false;
        };
        /**
         * @return {?}
         */
        ThfTableComponent.prototype.calculateWidthHeaders = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.height) {
                    _this.headersTable.forEach((/**
                     * @param {?} header
                     * @return {?}
                     */
                    function (header) {
                        /** @type {?} */
                        var divHeader = header.nativeElement.querySelector('.thf-table-header-fixed-inner');
                        if (divHeader) {
                            divHeader.style.width = header.nativeElement.offsetWidth + "px";
                        }
                    }));
                }
            }));
        };
        /**
         * @param {?} row
         * @return {?}
         */
        ThfTableComponent.prototype.containsMasterDetail = /**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            return row[this.getNameColumnDetail()] && row[this.getNameColumnDetail()].length;
        };
        /**
         * @param {?} row
         * @param {?} index
         * @return {?}
         */
        ThfTableComponent.prototype.isShowRowTemplate = /**
         * @param {?} row
         * @param {?} index
         * @return {?}
         */
        function (row, index) {
            if (this.tableRowTemplate && this.tableRowTemplate.thfTableRowTemplateShow) {
                return this.tableRowTemplate.thfTableRowTemplateShow(row, index);
            }
            return true;
        };
        /**
         * @param {?} row
         * @return {?}
         */
        ThfTableComponent.prototype.isShowMasterDetail = /**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            return !this.hideDetail &&
                this.getNameColumnDetail() &&
                row.$showDetail &&
                this.containsMasterDetail(row) &&
                !this.hasRowTemplate;
        };
        /**
         * @param {?} event
         * @param {?=} column
         * @param {?=} row
         * @return {?}
         */
        ThfTableComponent.prototype.tooltipMouseEnter = /**
         * @param {?} event
         * @param {?=} column
         * @param {?=} row
         * @return {?}
         */
        function (event, column, row) {
            this.tooltipText = undefined;
            if (this.hideTextOverflow &&
                event.target.offsetWidth < event.target.scrollWidth &&
                event.target.innerText.trim()) {
                return this.tooltipText = event.target.innerText;
            }
            if (column) {
                this.checkingIfColumnHasTooltip(column, row);
            }
        };
        /**
         * @return {?}
         */
        ThfTableComponent.prototype.tooltipMouseLeave = /**
         * @return {?}
         */
        function () {
            this.tooltipText = undefined;
        };
        /**
         * @return {?}
         */
        ThfTableComponent.prototype.verifyChangeHeightInFooter = /**
         * @return {?}
         */
        function () {
            return this.footerHeight !== this.getHeightTableFooter();
        };
        /**
         * @return {?}
         */
        ThfTableComponent.prototype.verifyCalculateHeightTableContainer = /**
         * @return {?}
         */
        function () {
            if (this.height && this.verifyChangeHeightInFooter()) {
                this.footerHeight = this.getHeightTableFooter();
                this.calculateHeightTableContainer(this.height);
            }
        };
        /**
         * @param {?} height
         * @return {?}
         */
        ThfTableComponent.prototype.calculateHeightTableContainer = /**
         * @param {?} height
         * @return {?}
         */
        function (height) {
            /** @type {?} */
            var value = parseFloat(height);
            this.heightTableContainer = value ? (value - this.getHeightTableFooter()) : undefined;
            this.setTableOpacity(1);
            this.changeDetector.detectChanges();
        };
        /**
         * @param {?} row
         * @param {?} targetRef
         * @return {?}
         */
        ThfTableComponent.prototype.togglePopup = /**
         * @param {?} row
         * @param {?} targetRef
         * @return {?}
         */
        function (row, targetRef) {
            this.popupTarget = targetRef;
            this.changeDetector.detectChanges();
            this.thfPopupComponent.toggle(row);
        };
        /**
         * @protected
         * @param {?} container
         * @return {?}
         */
        ThfTableComponent.prototype.showContainer = /**
         * @protected
         * @param {?} container
         * @return {?}
         */
        function (container) {
            /** @type {?} */
            var containerClassList = this.tableContainerElement.nativeElement.firstChild.classList;
            containerClassList.add('thf-container');
            container === 'border' ? containerClassList.add('thf-container-no-shadow') : containerClassList.remove('thf-container-no-shadow');
        };
        /**
         * @private
         * @return {?}
         */
        ThfTableComponent.prototype.checkChangesItems = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var changesItems = this.differ.diff(this.items);
            if (changesItems && this.selectAll) {
                this.selectAll = null;
            }
            if (changesItems && !this.hasColumns() && this.hasItems()) {
                this.columns = this.getDefaultColumns(this.items[0]);
            }
        };
        /**
         * @private
         * @param {?} column
         * @param {?} row
         * @return {?}
         */
        ThfTableComponent.prototype.checkingIfColumnHasTooltip = /**
         * @private
         * @param {?} column
         * @param {?} row
         * @return {?}
         */
        function (column, row) {
            if (column.type === 'link' && column.tooltip && !this.checkDisabled(row, column)) {
                return this.tooltipText = column.tooltip;
            }
            if (column.type === 'label') {
                /** @type {?} */
                var columnLabel = this.getColumnLabel(row, column);
                return this.tooltipText = columnLabel.tooltip;
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfTableComponent.prototype.getHeightTableFooter = /**
         * @private
         * @return {?}
         */
        function () {
            return this.tableFooterElement ? this.tableFooterElement.nativeElement.offsetHeight : 0;
        };
        /**
         * @private
         * @return {?}
         */
        ThfTableComponent.prototype.hideContainer = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var containerClassList = this.tableContainerElement.nativeElement.firstChild.classList;
            containerClassList.remove('thf-container');
        };
        /**
         * @private
         * @param {?} columnValues
         * @param {?} customIcons
         * @return {?}
         */
        ThfTableComponent.prototype.mergeCustomIcons = /**
         * @private
         * @param {?} columnValues
         * @param {?} customIcons
         * @return {?}
         */
        function (columnValues, customIcons) {
            /** @type {?} */
            var icons = [];
            columnValues.forEach((/**
             * @param {?} columnValue
             * @return {?}
             */
            function (columnValue) {
                /** @type {?} */
                var foundCustomIcon = customIcons.find((/**
                 * @param {?} customIcon
                 * @return {?}
                 */
                function (customIcon) { return columnValue === customIcon.icon || columnValue === customIcon.value; }));
                foundCustomIcon ? icons.push(foundCustomIcon) : icons.push(columnValue);
            }));
            return icons;
        };
        /**
         * @private
         * @param {?} row
         * @param {?} tableAction
         * @return {?}
         */
        ThfTableComponent.prototype.validateTableAction = /**
         * @private
         * @param {?} row
         * @param {?} tableAction
         * @return {?}
         */
        function (row, tableAction) {
            if (typeof tableAction.disabled === 'function') {
                return tableAction.disabled.call(this.parentRef, row);
            }
            else {
                return tableAction.disabled;
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfTableComponent.prototype.debounceResize = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.calculateWidthHeaders();
                // show the table
                _this.setTableOpacity(1);
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfTableComponent.prototype.removeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.resizeListener) {
                this.resizeListener();
            }
            if (this.clickListener) {
                this.clickListener();
            }
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfTableComponent.prototype.setTableOpacity = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.tableOpacity = value;
        };
        ThfTableComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-table',
                        template: "<thf-container #tableContainer t-no-padding>\n  <div [class.thf-table-container-relative]=\"loading\">\n    <div *ngIf=\"loading\" class=\"thf-table-overlay\">\n      <thf-loading class=\"thf-table-overlay-content\" [t-text]=\"literals.loadingData\"></thf-loading>\n    </div>\n\n    <div class=\"thf-table-main-container\">\n      <div #tableWrapper\n        class=\"thf-table-wrapper\"\n        [class.thf-table-header-fixed-columns-pixels]=\"verifyWidthColumnsPixels()\"\n        [style.opacity]=\"tableOpacity\">\n\n        <div class=\"thf-table-container\" *ngIf=\"height\" [style.height.px]=\"heightTableContainer\">\n          <div class=\"thf-table-header-fixed thf-table-header\"></div>\n          <div class=\"thf-table-container-fixed-inner\">\n            <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container>\n          </div>\n        </div>\n\n        <div *ngIf=\"!height\">\n          <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container>\n        </div>\n\n      </div>\n    </div>\n  </div>\n\n  <div class=\"thf-table-footer\" *ngIf=\"hasItems() && getSubtitleColumns().length\">\n    <div *ngFor=\"let column of getSubtitleColumns()\">\n      <thf-table-subtitle-footer [t-literals]=\"literals\" [t-subtitles]=\"column.subtitles\"></thf-table-subtitle-footer>\n    </div>\n  </div>\n</thf-container>\n\n<div class=\"thf-row thf-table-footer-show-more\" [class.thf-invisible]=\"showMore.observers.length === 0\" #tableFooter>\n  <thf-button\n    class=\"thf-offset-xl-4 thf-offset-lg-4 thf-offset-md-3 thf-lg-4 thf-md-6\"\n    [t-disabled]=\"showMoreDisabled\"\n    [t-label]=\"literals.loadMoreData\"\n    (t-click)=\"onShowMore()\">\n  </thf-button>\n</div>\n\n<ng-template #tableTemplate>\n  <table class=\"thf-table\"\n    [class.thf-table-striped]=\"striped\"\n    [class.thf-table-layout-fixed]=\"hideTextOverflow\">\n    <thead>\n      <tr [class.thf-table-header]=\"!height\">\n        <th *ngIf=\"checkbox && hasItems()\" class=\"thf-table-column-checkbox\">\n          <div [class.thf-table-header-fixed-inner]=\"height\">\n            <input *ngIf=\"!hideSelectAll\" type=\"checkbox\" class=\"thf-table-checkbox\"\n            [class.thf-table-checkbox-checked]=\"selectAll\"\n            [class.thf-table-checkbox-indeterminate]=\"selectAll === null\">\n            <label *ngIf=\"!hideSelectAll\" class=\"thf-table-checkbox-label thf-clickable\" (click)=\"selectAllRows()\"></label>\n          </div>\n        </th>\n        <th *ngIf=\"hasItems() && !hideDetail && getColumnMasterDetail() !== undefined || hasRowTemplate\"\n          class=\"thf-table-header-column thf-table-header-master-detail\">\n        </th>\n        <th *ngIf=\"!hasColumns()\" class=\"thf-table-header-column thf-text-center\">{{ literals.noColumns }}</th>\n        <th *ngFor=\"let column of getMainColumns(); let i = index\" #headersTable\n          class=\"thf-table-header-ellipsis\"\n          [style.width]=\"column.width\" [style.max-width]=\"column.width\" [style.min-width]=\"column.width\"\n          [class.thf-clickable]=\"sort\"\n          [class.thf-table-column-right]= \"column.type === 'currency' || column.type === 'number'\"\n          [class.thf-table-header-subtitle]=\"column.type === 'subtitle'\"\n          (click)=\"sortColumn(column)\">\n            <div *ngIf=\"height\" class=\"thf-table-header-fixed-inner\">\n              <ng-container *ngTemplateOutlet=\"contentHeaderTemplate\"></ng-container>\n            </div>\n            <div *ngIf=\"!height\">\n              <ng-container *ngTemplateOutlet=\"contentHeaderTemplate\"></ng-container>\n            </div>\n            <ng-template #contentHeaderTemplate>\n              <span *ngIf=\"sort\"\n                [class.thf-table-header-icon-unselected]= \"sortedColumn?.property !== column\"\n                [class.thf-table-header-icon-descending]= \"sortedColumn?.property === column && sortedColumn.ascending\"\n                [class.thf-table-header-icon-ascending]= \"sortedColumn?.property === column && !sortedColumn.ascending\">\n              </span>\n              <span\n                class=\"thf-table-header-ellipsis thf-table-header-block\"\n                [t-tooltip]=\"tooltipText\"\n                (mouseenter)=\"tooltipMouseEnter($event)\"\n                (mouseleave)=\"tooltipMouseLeave()\">\n                {{ getColumnTitleLabel(column) }}\n              </span>\n            </ng-template>\n        </th>\n        <th *ngIf=\"visibleActions.length > 1 && hasItems()\" class=\"thf-table-header-action\"></th>\n        <th *ngIf=\"visibleActions.length === 1 && hasItems()\" class=\"thf-table-header-single-action\"></th>\n      </tr>\n    </thead>\n\n    <tbody class=\"thf-table-group-row\" *ngIf=\"!hasItems()\">\n      <tr class=\"thf-table-row\">\n        <td [colSpan]=\"columnCount()\" class=\"thf-table-no-data thf-text-center\">\n          <span> {{ literals.noData }} </span>\n        </td>\n      </tr>\n    </tbody>\n\n    <tbody class=\"thf-table-group-row\" *ngFor=\"let row of items, let rowIndex = index;\">\n      <tr class=\"thf-table-row\" [class.thf-table-row-active]=\"row.$selected || row.$selected === null && checkbox\">\n        <td *ngIf=\"checkbox\" class=\"thf-table-column thf-table-column-checkbox\">\n          <ng-container *ngIf=\"singleSelect; then inputRadio; else inputCheckbox\"> </ng-container>\n\n          <ng-template #inputRadio>\n            <input type=\"radio\" class=\"thf-radio-group-input\" [class.thf-radio-group-input-checked]=\"row.$selected\">\n            <label class=\"thf-radio-group-label thf-clickable\" (click)=\"checkbox ? selectRow(row) : 'javascript:;'\"></label>\n          </ng-template>\n\n          <ng-template #inputCheckbox>\n            <input type=\"checkbox\" class=\"thf-table-checkbox\" [class.thf-table-checkbox-checked]=\"row.$selected\">\n            <label class=\"thf-table-checkbox-label thf-clickable\" (click)=\"checkbox ? selectRow(row) : 'javascript:;'\"></label>\n          </ng-template>\n\n        </td>\n        <td\n          *ngIf=\"(getColumnMasterDetail() !== undefined) && !hideDetail || hasRowTemplate\"\n          (click)=\"row.$showDetail = !row.$showDetail\"\n          class=\"thf-table-column-detail-toggle\">\n          <span\n            *ngIf=\"(containsMasterDetail(row) && !hasRowTemplate) || isShowRowTemplate(row, rowIndex) && hasRowTemplate\"\n            [class.thf-icon-arrow-up]=\"row.$showDetail\"\n            [class.thf-icon-arrow-down]=\"!row.$showDetail\"\n            class=\"thf-icon thf-clickable\">\n          </span>\n        </td>\n\n        <td *ngFor=\"let column of getMainColumns(), let columnIndex = index;\"\n          [style.width]=\"column.width\" [style.max-width]=\"column.width\" [style.min-width]=\"column.width\"\n          [class.thf-table-column]=\"column.type !== 'icon'\"\n          [class.thf-table-column-right]=\"column.type == 'currency' || column.type == 'number'\"\n          [class.thf-table-column-center]=\"column.type === 'subtitle'\"\n          [class.thf-table-column-icons]=\"column.type === 'icon'\"\n          [ngClass]=\"getClassColor(row, column)\"\n          (click)=\"checkbox ? selectRow(row) : 'javascript:;'\">\n          <div \n            class=\"thf-table-column-cell\"\n            [class.thf-table-body-ellipsis]=\"hideTextOverflow\"\n            [ngSwitch]=\"column.type\"\n            [t-tooltip]=\"tooltipText\"\n            (mouseenter)=\"tooltipMouseEnter($event, column, row)\"\n            (mouseleave)=\"tooltipMouseLeave()\">\n            <span *ngSwitchCase=\"'boolean'\">{{ getBooleanLabel(row[column.property], column) }}</span>\n            <span *ngSwitchCase=\"'currency'\">{{ row[column.property] | currency:column.format:'symbol':'1.2-2' }}</span>\n            <span *ngSwitchCase=\"'date'\" >{{ row[column.property] | date: column.format || 'dd/MM/yyyy' }}</span>\n            <span *ngSwitchCase=\"'time'\" >{{ row[column.property] | thf_time: column.format || 'HH:mm:ss.ffffff' }}</span>\n            <span *ngSwitchCase=\"'dateTime'\" >{{ row[column.property] | date: column.format || 'dd/MM/yyyy HH:mm:ss' }}</span>\n            <span *ngSwitchCase=\"'number'\">{{ formatNumber(row[column.property], column.format) }}</span>\n            <thf-table-column-link *ngSwitchCase=\"'link'\"\n              [t-action]=\"column.action\"\n              [t-disabled]=\"checkDisabled(row, column)\"\n              [t-link]=\"row[column.link]\"\n              [t-row]=\"row\"\n              [t-value]=\"row[column.property]\">\n            </thf-table-column-link>\n            <span *ngSwitchCase=\"'icon'\">\n              <thf-table-column-icon\n                [t-icons]=\"getColumnIcons(row, column)\"\n                [t-column]=\"column\"\n                [t-row]=\"row\">\n              </thf-table-column-icon>\n            </span>\n            <span *ngSwitchCase=\"'subtitle'\">\n              <thf-table-subtitle-circle [t-subtitle]=\"getSubtitleColumn(row, column)\"></thf-table-subtitle-circle>\n            </span>\n            <span *ngSwitchCase=\"'label'\">\n              <thf-table-column-label [t-value]=\"getColumnLabel(row, column)\"></thf-table-column-label>\n            </span>\n            <span *ngSwitchDefault>{{ row[column.property] }}</span>\n          </div>\n        </td>\n        <td *ngIf=\"visibleActions.length === 1\" class=\"thf-table-column thf-table-column-single-action\">\n          <div *ngIf=\"firstAction.visible !== false\"\n            class=\"thf-table-single-action thf-clickable\"\n            [class.thf-table-action-disabled]= \"firstAction.disabled ? validateTableAction(row, firstAction) : false\"\n            (click)=\"executeTableAction(row, firstAction)\">\n\n            <span *ngIf=\"firstAction.icon\" class=\"thf-icon {{ firstAction.icon }}\"></span>\n            {{ firstAction.label }}\n          </div>\n        </td>\n        <td *ngIf=\"visibleActions.length > 1\" class=\"thf-table-column-actions\">\n          <span #popupTarget class=\"thf-icon thf-icon-more thf-clickable\" (click)=\"togglePopup(row, popupTarget)\">\n          </span>\n        </td>\n      </tr>\n\n      <tr *ngIf=\"hasRowTemplate && row.$showDetail && isShowRowTemplate(row, rowIndex)\">\n        <td class=\"thf-table-row-template-container\" [colSpan]=\"columnCountForMasterDetail()\">\n\n          <ng-template\n            [ngTemplateOutlet]=\"tableRowTemplate.templateRef\"\n            [ngTemplateOutletContext]=\"{ $implicit: row, rowIndex: rowIndex }\">\n          </ng-template>\n\n        </td>\n      </tr>\n\n      <tr *ngIf=\"isShowMasterDetail(row)\">\n        <td class=\"thf-table-column-detail\" [colSpan]=\"columnCountForMasterDetail()\">\n\n          <thf-table-detail\n            [t-checkbox]=\"checkbox && !detailHideSelect\"\n            [t-detail]=\"getColumnMasterDetail().detail\"\n            [t-items]=\"row[getNameColumnDetail()]\"\n            (t-select-row)=\"selectDetailRow($event)\">\n          </thf-table-detail>\n\n        </td>\n      </tr>\n    </tbody>\n  </table>\n\n  <thf-popup #popup\n    [t-actions]=\"actions\"\n    [t-target]=\"popupTarget\">\n  </thf-popup>\n\n</ng-template>\n",
                        providers: [ThfDateService]
                    }] }
        ];
        /** @nocollapse */
        ThfTableComponent.ctorParameters = function () { return [
            { type: ThfDateService },
            { type: core.IterableDiffers },
            { type: core.ViewContainerRef },
            { type: core.Renderer2 },
            { type: core.ChangeDetectorRef },
            { type: common.DecimalPipe },
            { type: router.Router }
        ]; };
        ThfTableComponent.propDecorators = {
            tableRowTemplate: [{ type: core.ContentChild, args: [ThfTableRowTemplateDirective, { static: true },] }],
            thfPopupComponent: [{ type: core.ViewChild, args: ['popup', { static: false },] }],
            tableContainerElement: [{ type: core.ViewChild, args: ['tableContainer', { read: core.ElementRef, static: true },] }],
            tableFooterElement: [{ type: core.ViewChild, args: ['tableFooter', { read: core.ElementRef, static: true },] }],
            tableWrapperElement: [{ type: core.ViewChild, args: ['tableWrapper', { read: core.ElementRef, static: true },] }],
            actionsIconElement: [{ type: core.ViewChildren, args: ['actionsIconElement', { read: core.ElementRef },] }],
            actionsElement: [{ type: core.ViewChildren, args: ['actionsElement', { read: core.ElementRef },] }],
            headersTable: [{ type: core.ViewChildren, args: ['headersTable',] }]
        };
        return ThfTableComponent;
    }(ThfTableBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente responsável por apresentar o detalhe de cada linha da tabela.
     */
    var ThfTableDetailComponent = /** @class */ (function () {
        function ThfTableDetailComponent(decimalPipe) {
            this.decimalPipe = decimalPipe;
            /**
             * Define se a tabela possui a opção de `checkbox` habilitada.
             */
            this.hasCheckbox = false;
            /**
             * Ação executada ao selecionar ou desmarcar a seleção de uma linha de detalhe do `thf-table`.
             */
            this.selectRow = new core.EventEmitter();
        }
        Object.defineProperty(ThfTableDetailComponent.prototype, "detail", {
            get: /**
             * @return {?}
             */
            function () {
                return this._detail;
            },
            /**
             * Configuração da linha de detalhes.
             */
            set: /**
             * Configuração da linha de detalhes.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._detail = this.returnThfTableDetailObject(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableDetailComponent.prototype, "detailColumns", {
            get: /**
             * @return {?}
             */
            function () {
                return this.detail && this.detail.columns || [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableDetailComponent.prototype, "typeHeaderInline", {
            get: /**
             * @return {?}
             */
            function () {
                return this.detail && !this.detail['typeHeader'] || this.detail['typeHeader'] === 'inline';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTableDetailComponent.prototype, "typeHeaderTop", {
            get: /**
             * @return {?}
             */
            function () {
                return this.detail && this.detail['typeHeader'] === 'top';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @param {?} format
         * @return {?}
         */
        ThfTableDetailComponent.prototype.formatNumberDetail = /**
         * @param {?} value
         * @param {?} format
         * @return {?}
         */
        function (value, format) {
            if (!format) {
                return value;
            }
            return this.decimalPipe.transform(value, format);
        };
        /**
         * @param {?} detail
         * @return {?}
         */
        ThfTableDetailComponent.prototype.getColumnTitleLabel = /**
         * @param {?} detail
         * @return {?}
         */
        function (detail) {
            return detail.label || capitalizeFirstLetter(detail.property);
        };
        /**
         * @param {?} item
         * @return {?}
         */
        ThfTableDetailComponent.prototype.onSelectRow = /**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item.$selected = !item.$selected;
            this.selectRow.emit(item);
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfTableDetailComponent.prototype.returnThfTableDetailObject = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && isTypeof(value, 'object')) {
                if (value.columns) {
                    value.columns.forEach((/**
                     * @param {?} column
                     * @return {?}
                     */
                    function (column) { return column.property = column.property || column.column; }));
                }
                if (Array.isArray(value)) {
                    return { columns: value };
                }
                if (value.columns) {
                    return value;
                }
            }
        };
        ThfTableDetailComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-table-detail',
                        template: "<table class=\"thf-table-master-detail\">\n  <thead *ngIf=\"typeHeaderTop\">\n    <tr>\n      <th class=\"thf-table-header thf-table-column-checkbox\" *ngIf=\"hasCheckbox\"></th>\n      <th class=\"thf-table-header thf-table-header-column thf-table-header-master-detail\"></th>\n      <th class=\"thf-table-header thf-table-header-ellipsis\" *ngFor=\"let detail of detail.columns\">\n        {{ getColumnTitleLabel(detail) }}\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class=\"thf-table-detail-row\"\n        [class.thf-table-row-active]=\"item.$selected && hasCheckbox\"\n        *ngFor=\"let item of items\">\n\n      <ng-container *ngIf=\"hasCheckbox; else masterDetailSpace\">\n\n        <td class=\"thf-table-column-master-detail-space-checkbox\"></td>\n        <td class=\"thf-table-column thf-table-column-checkbox\">\n          <input\n            class=\"thf-table-checkbox\"\n            type=\"checkbox\"\n            [class.thf-table-checkbox-checked]=\"item.$selected\">\n          <label class=\"thf-table-checkbox-label thf-clickable\" (click)=\"onSelectRow(item)\">\n          </label>\n        </td>\n\n      </ng-container>\n\n      <ng-template #masterDetailSpace>\n        <td class=\"thf-table-column-master-detail-space\"></td>\n      </ng-template>\n\n      <td class=\"thf-table-column-master-detail thf-table-master-detail-label\"\n        (click)=\"hasCheckbox ? onSelectRow(item) : 'javascript:;'\"\n        *ngFor=\"let detail of detailColumns\">\n        <strong *ngIf=\"typeHeaderInline\"> {{ getColumnTitleLabel(detail) }}: </strong>\n\n        <ng-container [ngSwitch]=\"detail.type\">\n          <span *ngSwitchCase=\"'currency'\">{{ item[detail.property] | currency: detail.format:'symbol':'1.2-2' }}</span>\n          <span *ngSwitchCase=\"'date'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy' }}</span>\n          <span *ngSwitchCase=\"'time'\">{{ item[detail.property] | thf_time: detail.format || 'HH:mm:ss.ffffff' }}</span>\n          <span *ngSwitchCase=\"'dateTime'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy HH:mm:ss' }}</span>\n          <span *ngSwitchCase=\"'number'\">{{ formatNumberDetail(item[detail.property], detail.format) }}</span>\n          <span *ngSwitchDefault>{{ item[detail.property] }}</span>\n        </ng-container>\n      </td>\n    </tr>\n  </tbody>\n</table>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfTableDetailComponent.ctorParameters = function () { return [
            { type: common.DecimalPipe }
        ]; };
        ThfTableDetailComponent.propDecorators = {
            hasCheckbox: [{ type: core.Input, args: ['t-checkbox',] }],
            detail: [{ type: core.Input, args: ['t-detail',] }],
            items: [{ type: core.Input, args: ['t-items',] }],
            selectRow: [{ type: core.Output, args: ['t-select-row',] }]
        };
        return ThfTableDetailComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente para a criação de um botão e modal para visualização de todas as legendas.
     */
    var ThfTableShowSubtitleComponent = /** @class */ (function () {
        function ThfTableShowSubtitleComponent() {
        }
        ThfTableShowSubtitleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-table-show-subtitle',
                        template: "<div class=\"thf-table-footer-show-subtitle\" (click)=\"modal.open()\">\n  <div class=\"thf-table-footer-show-subtitle-container\">\n    <span class=\"thf-table-show-subtitle\">{{ literals.seeCompleteSubtitle }}</span>\n  </div>\n</div>\n\n<thf-modal #modal\n  t-size=\"sm\"\n  [t-title]=\"literals.completeSubtitle\">\n\n  <div *ngFor=\"let subtitle of subtitles\" class=\"thf-table-subtitle-footer-modal thf-row\">\n    <thf-table-subtitle-circle\n      t-hide-title=\"true\"\n      [t-subtitle]=\"subtitle\">\n    </thf-table-subtitle-circle>\n    <span class=\"thf-table-subtitle-text\">{{ subtitle.label }}</span>\n  </div>\n</thf-modal>\n"
                    }] }
        ];
        ThfTableShowSubtitleComponent.propDecorators = {
            subtitles: [{ type: core.Input, args: ['t-subtitles',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }]
        };
        return ThfTableShowSubtitleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente para a criação da representação da legenda, em formato de círculo.
     */
    var ThfTableSubtitleCircleComponent = /** @class */ (function () {
        function ThfTableSubtitleCircleComponent(thfColorPaletteService) {
            this.thfColorPaletteService = thfColorPaletteService;
            /**
             * Esconde a tooltip.
             */
            this.hideTitle = false;
        }
        Object.defineProperty(ThfTableSubtitleCircleComponent.prototype, "subtitle", {
            get: /**
             * @return {?}
             */
            function () {
                return this._subtitle;
            },
            /** Objeto com os dados da legenda. */
            set: /**
             * Objeto com os dados da legenda.
             * @param {?} subtitle
             * @return {?}
             */
            function (subtitle) {
                if (subtitle) {
                    subtitle.color = this.thfColorPaletteService.getColor(subtitle);
                }
                this._subtitle = subtitle;
            },
            enumerable: true,
            configurable: true
        });
        ThfTableSubtitleCircleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-table-subtitle-circle',
                        template: "<span\n  [title]=\"hideTitle ? '' : subtitle?.label\"\n  class=\"thf-table-subtitle-circle thf-{{ subtitle?.color }}\">\n  {{ subtitle?.content }}\n</span>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfTableSubtitleCircleComponent.ctorParameters = function () { return [
            { type: ThfColorPaletteService }
        ]; };
        ThfTableSubtitleCircleComponent.propDecorators = {
            subtitle: [{ type: core.Input, args: ['t-subtitle',] }],
            hideTitle: [{ type: core.Input, args: ['t-hide-title',] }]
        };
        return ThfTableSubtitleCircleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente para a criação de um conjunto de legendas.
     */
    var ThfTableSubtitleFooterComponent = /** @class */ (function () {
        function ThfTableSubtitleFooterComponent(element, renderer) {
            this.element = element;
            this.renderer = renderer;
        }
        /**
         * @return {?}
         */
        ThfTableSubtitleFooterComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.initializeResizeListener();
            this.debounceResize();
        };
        /**
         * @return {?}
         */
        ThfTableSubtitleFooterComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.removeResizeListener();
        };
        /**
         * @private
         * @return {?}
         */
        ThfTableSubtitleFooterComponent.prototype.debounceResize = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.toggleShowCompleteSubtitle();
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfTableSubtitleFooterComponent.prototype.getContainerSize = /**
         * @private
         * @return {?}
         */
        function () {
            return this.element.nativeElement.querySelector('.thf-table-subtitle-footer-container').offsetWidth;
        };
        /**
         * @private
         * @return {?}
         */
        ThfTableSubtitleFooterComponent.prototype.getItemsSize = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var items = this.element.nativeElement.querySelectorAll('.thf-table-subtitle-footer');
            return Array.from(items).map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item['offsetWidth']; })).reduce((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) { return a + b; }), 16);
        };
        /**
         * @private
         * @return {?}
         */
        ThfTableSubtitleFooterComponent.prototype.initializeResizeListener = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.debounceResize();
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfTableSubtitleFooterComponent.prototype.removeResizeListener = /**
         * @private
         * @return {?}
         */
        function () {
            this.resizeListener();
        };
        /**
         * @private
         * @return {?}
         */
        ThfTableSubtitleFooterComponent.prototype.toggleShowCompleteSubtitle = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var containerSize = this.getContainerSize();
            /** @type {?} */
            var itemsSize = this.getItemsSize();
            this.showSubtitle = itemsSize > containerSize;
        };
        ThfTableSubtitleFooterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-table-subtitle-footer',
                        template: "<div class=\"thf-table-subtitle-footer-container\">\n  <div *ngFor=\"let subtitle of subtitles\" class=\"thf-table-subtitle-footer\">\n    <thf-table-subtitle-circle\n      t-hide-title=\"true\"\n      [t-subtitle]=\"subtitle\">\n    </thf-table-subtitle-circle>\n    <span class=\"thf-table-subtitle-text\">{{ subtitle.label }}</span>\n  </div>\n  <thf-table-show-subtitle *ngIf=\"showSubtitle\"\n    [t-literals]=\"literals\"\n    [t-subtitles]=\"subtitles\">\n  </thf-table-show-subtitle>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfTableSubtitleFooterComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        ThfTableSubtitleFooterComponent.propDecorators = {
            literals: [{ type: core.Input, args: ['t-literals',] }],
            subtitles: [{ type: core.Input, args: ['t-subtitles',] }]
        };
        return ThfTableSubtitleFooterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     * Módulo do componente thf-table
     */
    var ThfTableModule = /** @class */ (function () {
        function ThfTableModule() {
        }
        ThfTableModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            router.RouterModule,
                            ThfButtonModule,
                            ThfContainerModule,
                            ThfLoadingModule,
                            ThfModalModule,
                            ThfPopupModule,
                            ThfTimeModule,
                            ThfTooltipModule
                        ],
                        declarations: [
                            ThfTableComponent,
                            ThfTableColumnIconComponent,
                            ThfTableColumnLabelComponent,
                            ThfTableColumnLinkComponent,
                            ThfTableDetailComponent,
                            ThfTableRowTemplateDirective,
                            ThfTableShowSubtitleComponent,
                            ThfTableSubtitleCircleComponent,
                            ThfTableSubtitleFooterComponent
                        ],
                        exports: [
                            ThfTableComponent,
                            ThfTableRowTemplateDirective
                        ],
                        providers: [common.DecimalPipe]
                    },] }
        ];
        return ThfTableModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfCalendarLangService$1 = /** @class */ (function () {
        function ThfCalendarLangService() {
            this.months = [
                {
                    pt: 'Janeiro',
                    en: 'January',
                    es: 'Enero'
                },
                {
                    pt: 'Fevereiro',
                    en: 'February',
                    es: 'Febrero'
                },
                {
                    pt: 'Março',
                    en: 'March',
                    es: 'Marzo'
                },
                {
                    pt: 'Abril',
                    en: 'April',
                    es: 'Abril'
                },
                {
                    pt: 'Maio',
                    en: 'May',
                    es: 'Mayo'
                },
                {
                    pt: 'Junho',
                    en: 'June',
                    es: 'Junio'
                },
                {
                    pt: 'Julho',
                    en: 'July',
                    es: 'Julio'
                },
                {
                    pt: 'Agosto',
                    en: 'August',
                    es: 'Agosto'
                },
                {
                    pt: 'Setembro',
                    en: 'September',
                    es: 'Setiembre'
                },
                {
                    pt: 'Outubro',
                    en: 'October',
                    es: 'Octubre'
                },
                {
                    pt: 'Novembro',
                    en: 'November',
                    es: 'Noviembre'
                },
                {
                    pt: 'Dezembro',
                    en: 'December',
                    es: 'Diciembre'
                }
            ];
            this.shortWeekDays = [
                {
                    pt: 'Dom',
                    en: 'Sun',
                    es: 'Dom'
                },
                {
                    pt: 'Seg',
                    en: 'Mon',
                    es: 'Lun'
                },
                {
                    pt: 'Ter',
                    en: 'Tue',
                    es: 'Mar'
                },
                {
                    pt: 'Qua',
                    en: 'Wed',
                    es: 'Mié'
                },
                {
                    pt: 'Qui',
                    en: 'Thu',
                    es: 'Jue'
                },
                {
                    pt: 'Sex',
                    en: 'Fri',
                    es: 'Vie'
                },
                {
                    pt: 'Sáb',
                    en: 'Sat',
                    es: 'Sáb'
                }
            ];
            this.wordMonth = {
                pt: 'Mês',
                en: 'Month',
                es: 'Mes'
            };
            this.wordYear = {
                pt: 'Ano',
                en: 'Year',
                es: 'Año'
            };
            this.lang = 'pt';
        }
        /**
         * @param {?} lang
         * @return {?}
         */
        ThfCalendarLangService.prototype.setLanguage = /**
         * @param {?} lang
         * @return {?}
         */
        function (lang) {
            if (lang && lang.length >= 2) {
                lang = lang.toLowerCase().slice(0, 2);
                this.lang = (lang === 'pt' || lang === 'en' || lang === 'es') ? lang : 'pt';
            }
        };
        /**
         * @return {?}
         */
        ThfCalendarLangService.prototype.getWordMonth = /**
         * @return {?}
         */
        function () {
            return this.wordMonth[this.lang];
        };
        /**
         * @return {?}
         */
        ThfCalendarLangService.prototype.getWordYear = /**
         * @return {?}
         */
        function () {
            return this.wordYear[this.lang];
        };
        /**
         * @param {?} month
         * @return {?}
         */
        ThfCalendarLangService.prototype.getMonth = /**
         * @param {?} month
         * @return {?}
         */
        function (month) {
            return this.months[month][this.lang];
        };
        /**
         * @return {?}
         */
        ThfCalendarLangService.prototype.getArrayMonths = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var arrMonths = Array();
            for (var i = 0; i < this.months.length; i++) {
                arrMonths.push(this.months[i][this.lang]);
            }
            return arrMonths;
        };
        /**
         * @param {?} day
         * @return {?}
         */
        ThfCalendarLangService.prototype.getWeedDays = /**
         * @param {?} day
         * @return {?}
         */
        function (day) {
            return this.shortWeekDays[day][this.lang];
        };
        /**
         * @return {?}
         */
        ThfCalendarLangService.prototype.getArrayWeekDays = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var arrWeekDays = Array();
            for (var i = 0; i < this.shortWeekDays.length; i++) {
                arrWeekDays.push(this.shortWeekDays[i][this.lang]);
            }
            return arrWeekDays;
        };
        ThfCalendarLangService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfCalendarLangService.ctorParameters = function () { return []; };
        return ThfCalendarLangService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfCalendarService$1 = /** @class */ (function () {
        function ThfCalendarService() {
            this.firstWeekDay = 0; // 0 = sunday
        }
        /**
         * @param {?} date
         * @return {?}
         */
        ThfCalendarService.prototype.weekStartDate = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            /** @type {?} */
            var startDate = new Date(date.getTime());
            while (startDate.getDay() !== this.firstWeekDay) {
                startDate.setDate(startDate.getDate() - 1);
            }
            return startDate;
        };
        /**
         * @param {?} year
         * @param {?} month
         * @param {?=} dayFormatter
         * @param {?=} weekFormatter
         * @return {?}
         */
        ThfCalendarService.prototype.monthDates = /**
         * @param {?} year
         * @param {?} month
         * @param {?=} dayFormatter
         * @param {?=} weekFormatter
         * @return {?}
         */
        function (year, month, dayFormatter, weekFormatter) {
            if (dayFormatter === void 0) { dayFormatter = null; }
            if (weekFormatter === void 0) { weekFormatter = null; }
            if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
                throw Error(('month must be a number (Jan is 0)'));
            }
            /** @type {?} */
            var weeks = [];
            /** @type {?} */
            var week = [];
            /** @type {?} */
            var i = 0;
            /** @type {?} */
            var date = new Date(year, month, 1);
            setYearFrom0To100(date, year);
            date = this.weekStartDate(date);
            do {
                for (i = 0; i < 7; i++) {
                    week.push(dayFormatter ? dayFormatter(date) : date);
                    date = new Date(date.getTime());
                    date.setDate(date.getDate() + 1);
                }
                weeks.push(weekFormatter ? weekFormatter(week) : week);
                week = [];
            } while ((date.getMonth() <= month) && (date.getFullYear() === year));
            return weeks;
        };
        /**
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        ThfCalendarService.prototype.monthDays = /**
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        function (year, month) {
            /** @type {?} */
            var getDayOrZero = (/**
             * @param {?} date
             * @return {?}
             */
            function (date) {
                return date.getMonth() === month ? date : 0;
            });
            return this.monthDates(year, month, getDayOrZero);
        };
        ThfCalendarService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfCalendarService.ctorParameters = function () { return []; };
        return ThfCalendarService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfCalendarLocaleDefault$1 = 'pt';
    /** @type {?} */
    var thfCalendarLocales$1 = ['pt', 'en', 'es'];
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente de calendário de uso interno
     */
    var ThfCalendarComponent$1 = /** @class */ (function () {
        function ThfCalendarComponent(thfCalendarService, thfCalendarLangService) {
            this.thfCalendarService = thfCalendarService;
            this.thfCalendarLangService = thfCalendarLangService;
            this.dayVisible = false;
            this.displayMonths = Array();
            this.displayWeedDays = Array();
            this.monthVisible = false;
            this.overlayInvisible = true;
            this.visible = false;
            this.yearVisible = false;
            this.isMobile = isMobile;
            this.today = new Date();
            this.selectedDateChange = new core.EventEmitter();
            this.submit = new core.EventEmitter();
        }
        Object.defineProperty(ThfCalendarComponent.prototype, "dateEnd", {
            get: /**
             * @return {?}
             */
            function () {
                return this._dateEnd;
            },
            /**
             * @optional
             *
             * @description
             *
             * Data máxima possível de ser selecionada no calendário.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Data máxima possível de ser selecionada no calendário.
             * @param {?} val
             * @return {?}
             */
            function (val) {
                if (val && val instanceof Date) {
                    /** @type {?} */
                    var year = val.getFullYear();
                    /** @type {?} */
                    var month = val.getMonth();
                    /** @type {?} */
                    var day = val.getDate();
                    /** @type {?} */
                    var date = new Date(year, month, day, 23, 59, 59);
                    setYearFrom0To100(date, year);
                    this._dateEnd = date;
                }
                else {
                    this._dateEnd = undefined;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfCalendarComponent.prototype, "locale", {
            get: /**
             * @return {?}
             */
            function () {
                return this._locale;
            },
            /**
             * @optional
             *
             * @description
             *
             * Idioma do calendário.
             *
             * Valores válidos:
             *  - `pt`
             *  - `en`
             *  - `es`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Idioma do calendário.
             *
             * Valores válidos:
             *  - `pt`
             *  - `en`
             *  - `es`
             * @param {?} locale
             * @return {?}
             */
            function (locale) {
                this._locale = thfCalendarLocales$1.includes(locale) ? locale : thfCalendarLocaleDefault$1;
                this.initializeLanguage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfCalendarComponent.prototype, "selectedDate", {
            get: /**
             * @return {?}
             */
            function () {
                return this._selectedDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Data selecionada no calendário.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Data selecionada no calendário.
             * @param {?} selectedDate
             * @return {?}
             */
            function (selectedDate) {
                this._selectedDate = selectedDate && selectedDate instanceof Date ? selectedDate : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfCalendarComponent.prototype, "dateStart", {
            get: /**
             * @return {?}
             */
            function () {
                return this._dateStart;
            },
            /**
             * @optional
             *
             * @description
             *
             * Data mínima possível de ser selecionada no calendário.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Data mínima possível de ser selecionada no calendário.
             * @param {?} val
             * @return {?}
             */
            function (val) {
                if (val && val instanceof Date) {
                    /** @type {?} */
                    var year = val.getFullYear();
                    /** @type {?} */
                    var month = val.getMonth();
                    /** @type {?} */
                    var day = val.getDate();
                    /** @type {?} */
                    var date = new Date(year, month, day, 0, 0, 0);
                    setYearFrom0To100(date, year);
                    this._dateStart = date;
                }
                else {
                    this._dateStart = undefined;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.close = /**
         * @return {?}
         */
        function () {
            this.overlayInvisible = true;
            this.visible = false;
        };
        // Obtém um array de todos os anos desta década
        // Obtém um array de todos os anos desta década
        /**
         * @param {?} year
         * @return {?}
         */
        ThfCalendarComponent.prototype.getArrayDecade = 
        // Obtém um array de todos os anos desta década
        /**
         * @param {?} year
         * @return {?}
         */
        function (year) {
            this.displayDecade = Array();
            if (year % 10 !== 0) {
                while (year % 10 !== 0) {
                    year--;
                }
            }
            this.updateDecade(year);
        };
        /**
         * @param {?} displayValue
         * @param {?} propertyValue
         * @return {?}
         */
        ThfCalendarComponent.prototype.getBackgroundColor = /**
         * @param {?} displayValue
         * @param {?} propertyValue
         * @return {?}
         */
        function (displayValue, propertyValue) {
            return (displayValue === propertyValue) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';
        };
        /**
         * @param {?} date
         * @return {?}
         */
        ThfCalendarComponent.prototype.getDayBackgroundColor = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            if (this.equalsDate(date, this.selectedDate)) {
                return 'thf-calendar-box-background-selected';
            }
            else if (this.equalsDate(date, this.today)) {
                return 'thf-calendar-box-background-today';
            }
            else if (date) {
                if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                    return 'thf-calendar-box-background';
                }
                else {
                    return 'thf-calendar-box-background-disabled';
                }
            }
            else {
                return '';
            }
        };
        /**
         * @param {?} date
         * @return {?}
         */
        ThfCalendarComponent.prototype.getDayForegroundColor = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            if (this.equalsDate(date, this.selectedDate)) {
                return 'thf-calendar-box-foreground-selected';
            }
            else if (this.equalsDate(date, this.today)) {
                return 'thf-calendar-box-foreground-today';
            }
            else {
                if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                    return 'thf-calendar-box-foreground';
                }
                else {
                    return 'thf-calendar-box-foreground-disabled';
                }
            }
        };
        /**
         * @param {?} displayValue
         * @param {?} propertyValue
         * @return {?}
         */
        ThfCalendarComponent.prototype.getForegroundColor = /**
         * @param {?} displayValue
         * @param {?} propertyValue
         * @return {?}
         */
        function (displayValue, propertyValue) {
            return (displayValue === propertyValue) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.getWordMonth = /**
         * @return {?}
         */
        function () {
            return this.thfCalendarLangService.getWordMonth();
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.getWordYear = /**
         * @return {?}
         */
        function () {
            return this.thfCalendarLangService.getWordYear();
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.init = /**
         * @return {?}
         */
        function () {
            this.selectedDate ? this.updateDate(this.selectedDate) : this.updateDate(this.today);
            this.initializeLanguage();
            this.selectDay();
            if (this.isMobile()) {
                this.overlayInvisible = false;
            }
            this.visible = true;
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.initializeLanguage = /**
         * @return {?}
         */
        function () {
            this.thfCalendarLangService.setLanguage(this.locale);
            this.displayWeedDays = this.thfCalendarLangService.getArrayWeekDays();
            this.displayMonths = this.thfCalendarLangService.getArrayMonths();
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.onNextMonth = /**
         * @return {?}
         */
        function () {
            if (this.displayMonthNumber < 11) {
                this.updateDisplay(this.displayYear, this.displayMonthNumber + 1);
            }
            else {
                this.updateDisplay(this.displayYear + 1, 0);
            }
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.onPrevMonth = /**
         * @return {?}
         */
        function () {
            if (this.displayMonthNumber > 0) {
                this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
            }
            else {
                this.updateDisplay(this.displayYear - 1, 11);
            }
        };
        // Ao selecionar uma data
        // Ao selecionar uma data
        /**
         * @param {?} date
         * @return {?}
         */
        ThfCalendarComponent.prototype.onSelectDate = 
        // Ao selecionar uma data
        /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                this.selectedDate = date;
                this.selectedDateChange.emit(date);
                this.submit.emit(date);
            }
        };
        // Ao selecionar um mês
        // Ao selecionar um mês
        /**
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        ThfCalendarComponent.prototype.onSelectMonth = 
        // Ao selecionar um mês
        /**
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        function (year, month) {
            this.selectDay();
            this.updateDisplay(year, month);
        };
        // Ao selecionar um ano
        // Ao selecionar um ano
        /**
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        ThfCalendarComponent.prototype.onSelectYear = 
        // Ao selecionar um ano
        /**
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        function (year, month) {
            // Se veio da tela de seleção de mês
            this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
            this.currentYear = year;
            this.updateDisplay(year, month);
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.selectDay = /**
         * @return {?}
         */
        function () {
            this.dayVisible = true;
            this.monthVisible = false;
            this.yearVisible = false;
            this.lastDisplay = 'day';
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.selectMonth = /**
         * @return {?}
         */
        function () {
            this.dayVisible = false;
            this.monthVisible = true;
            this.yearVisible = false;
            this.lastDisplay = 'month';
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.selectYear = /**
         * @return {?}
         */
        function () {
            this.dayVisible = false;
            this.monthVisible = false;
            this.yearVisible = true;
        };
        /**
         * @return {?}
         */
        ThfCalendarComponent.prototype.setMobileVisualization = /**
         * @return {?}
         */
        function () {
            return this.isMobile() ? 'thf-calendar thf-calendar-mobile' : 'thf-calendar';
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfCalendarComponent.prototype.updateYear = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
        };
        /**
         * @private
         * @param {?} year
         * @return {?}
         */
        ThfCalendarComponent.prototype.addAllYearsInDecade = /**
         * @private
         * @param {?} year
         * @return {?}
         */
        function (year) {
            /** @type {?} */
            var i;
            for (i = year; i < year + 10; i++) {
                this.displayDecade.push(i);
            }
        };
        /**
         * @private
         * @param {?} date1
         * @param {?} date2
         * @return {?}
         */
        ThfCalendarComponent.prototype.equalsDate = /**
         * @private
         * @param {?} date1
         * @param {?} date2
         * @return {?}
         */
        function (date1, date2) {
            try {
                return date1.getFullYear() === date2.getFullYear() &&
                    date1.getMonth() === date2.getMonth() &&
                    date1.getDate() === date2.getDate();
            }
            catch (error) {
                return false;
            }
        };
        /**
         * @private
         * @param {?} date
         * @return {?}
         */
        ThfCalendarComponent.prototype.updateDate = /**
         * @private
         * @param {?} date
         * @return {?}
         */
        function (date) {
            this.currentMonthNumber = date.getMonth();
            this.currentYear = date.getFullYear();
            this.updateDisplay(this.currentYear, this.currentMonthNumber);
        };
        /**
         * @private
         * @param {?} year
         * @return {?}
         */
        ThfCalendarComponent.prototype.updateDecade = /**
         * @private
         * @param {?} year
         * @return {?}
         */
        function (year) {
            this.addAllYearsInDecade(year);
            this.displayStartDecade = year;
            this.displayFinalDecade = year + 9;
        };
        /**
         * @private
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        ThfCalendarComponent.prototype.updateDisplay = /**
         * @private
         * @param {?} year
         * @param {?} month
         * @return {?}
         */
        function (year, month) {
            /** @type {?} */
            var calendarArray = this.thfCalendarService.monthDays(year, month);
            this.displayDays = [].concat.apply([], calendarArray);
            this.displayMonthNumber = month;
            this.displayMonth = this.displayMonths[month];
            this.displayYear = year;
            this.getArrayDecade(year);
        };
        ThfCalendarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-calendar',
                        template: "<div class=\"thf-calendar-overlay\" [class.thf-invisible]=\"overlayInvisible\"></div>\n<div *ngIf=\"visible\" [ngClass]=\"setMobileVisualization()\">\n  <div *ngIf=\"dayVisible\" #days>\n    <div class=\"thf-calendar-nav\">\n      <span (click)=\"onPrevMonth()\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span>\n      <div class=\"thf-calendar-nav-title\" attr-calendar>\n        <span class=\"thf-clickable thf-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span>\n        <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"onNextMonth()\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span>\n    </div>\n    <div class=\"thf-calendar-content\">\n      <div class=\"thf-calendar-labels\">\n        <div class=\"thf-calendar-label\" *ngFor=\"let day of displayWeedDays\">\n            {{ day.toLowerCase() }}\n        </div>\n      </div>\n      <div class=\"thf-calendar-content-list-day\">\n        <div *ngFor=\"let day of displayDays\" class=\"thf-calendar-day thf-calendar-box-background\" (click)=\"onSelectDate(day)\"\n          [ngClass]=\"getDayBackgroundColor(day)\">\n          <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\">\n            {{ day.getDate() }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"monthVisible\" #months>\n    <div class=\"thf-calendar-nav\">\n      <span (click)=\"updateYear(-1)\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span>\n      <div class=\"thf-calendar-nav-title\" attr-calendar>\n        <span class=\"thf-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"updateYear(1)\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span>\n    </div>\n    <div class=\"thf-calendar-content\">\n      <div class=\"thf-calendar-labels\">\n        <div class=\"thf-calendar-label\">\n          {{ getWordMonth() }}\n        </div>\n      </div>\n      <div class=\"thf-calendar-content-list-month\">\n        <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"thf-calendar-month\"\n        (click)=\"onSelectMonth(displayYear, i)\"\n        [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\n            {{ month }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"yearVisible\" #years>\n    <div class=\"thf-calendar-nav\">\n      <span (click)=\"updateYear(-10)\" class=\"thf-calendar-nav-left thf-icon thf-icon-arrow-left\"></span>\n      <div class=\"thf-calendar-nav-title\">\n        {{ displayStartDecade }} - {{ displayFinalDecade }}\n      </div>\n      <span (click)=\"updateYear(10)\" class=\"thf-calendar-nav-right thf-icon thf-icon-arrow-right\"></span>\n    </div>\n    <div class=\"thf-calendar-content\">\n      <div class=\"thf-calendar-labels\">\n        <div class=\"thf-calendar-label\">\n          {{ getWordYear() }}\n        </div>\n      </div>\n      <div class=\"thf-calendar-content-list-year\">\n        <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"thf-calendar-year\"\n        (click)=\"onSelectYear(year, displayMonthNumber)\"\n        [ngClass]=\"getBackgroundColor(year, currentYear)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\n            {{ year }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n",
                        providers: [ThfCalendarService$1, ThfCalendarLangService$1]
                    }] }
        ];
        /** @nocollapse */
        ThfCalendarComponent.ctorParameters = function () { return [
            { type: ThfCalendarService$1 },
            { type: ThfCalendarLangService$1 }
        ]; };
        ThfCalendarComponent.propDecorators = {
            elDays: [{ type: core.ViewChild, args: ['days', { read: core.ElementRef, static: true },] }],
            elMonths: [{ type: core.ViewChild, args: ['months', { read: core.ElementRef, static: true },] }],
            elYears: [{ type: core.ViewChild, args: ['years', { read: core.ElementRef, static: true },] }],
            dateEnd: [{ type: core.Input, args: ['t-date-end',] }],
            locale: [{ type: core.Input, args: ['t-locale',] }],
            selectedDate: [{ type: core.Input, args: ['t-selected-date',] }],
            dateStart: [{ type: core.Input, args: ['t-date-start',] }],
            selectedDateChange: [{ type: core.Output, args: ['t-selected-dateChange',] }],
            submit: [{ type: core.Output, args: ['t-submit',] }]
        };
        return ThfCalendarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} required
     * @param {?} disabled
     * @param {?} value
     * @return {?}
     */
    function requiredFailed(required, disabled, value) {
        /** @type {?} */
        var valid = ((typeof value === 'string' && value) || (typeof value === 'object' && value && value.length)
            || (typeof value === 'number' && (value || value === 0)) || (typeof value === 'boolean' && value));
        return (required && !disabled && !valid);
    }
    /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    function maxlengthFailed(maxlength, value) {
        /** @type {?} */
        var validMaxlength = maxlength || maxlength === 0;
        /** @type {?} */
        var validValue = (value || value === 0) && value.toString();
        return validMaxlength && validValue && validValue.length > Number(maxlength);
    }
    /**
     * @param {?} minlength
     * @param {?} value
     * @return {?}
     */
    function minlengthFailed(minlength, value) {
        /** @type {?} */
        var validMinlength = minlength || minlength === 0;
        /** @type {?} */
        var validValue = (value || value === 0) && value.toString();
        return validMinlength && validValue && validValue.length < Number(minlength);
    }
    /**
     * @param {?} pattern
     * @param {?} value
     * @return {?}
     */
    function patternFailed(pattern, value) {
        /** @type {?} */
        var reg;
        try {
            reg = new RegExp(pattern);
        }
        catch (e) {
            return true;
        }
        return (pattern && value && !reg.test(value));
    }
    /**
     * @param {?} min
     * @param {?} value
     * @return {?}
     */
    function minFailed(min, value) {
        /** @type {?} */
        var validValue = value || value === 0;
        /** @type {?} */
        var validMin = min || min === 0;
        return validValue && validMin && value < min;
    }
    /**
     * @param {?} max
     * @param {?} value
     * @return {?}
     */
    function maxFailed(max, value) {
        /** @type {?} */
        var validValue = value || value === 0;
        /** @type {?} */
        var validMax = max || max === 0;
        return validValue && validMax && value > max;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function dateFailed(value) {
        return (value && isNaN(Date.parse(value)));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfCheckboxGroupColumnsDefaultLength = 6;
    /** @type {?} */
    var thfCheckboxGroupColumnsTotalLength = 12;
    /**
     * \@description
     *
     * O componente `thf-checkbox-group` exibe uma lista de múltipla escolha onde o usuário pode marcar e desmarcar,
     * utilizando a tecla de espaço ou o clique do mouse, várias opções.
     *
     * > Para seleção única, utilize o [**Totvs Radio Group**](/documentation/thf-radio-group).
     *
     * Por padrão, o thf-checkbox-group retorna um array com os valores dos itens selecionados para o model.
     *
     * ```
     * favorites = ['THF', 'Angular'];
     * ```
     *
     * Na maioria das situações, o array com os objetos setados já atende as necessidades mas, caso o desenvolvedor
     * tenha necessidade de usar um valor indeterminado (`null`), ou seja, nem marcado (`true`) e nem desmarcado (`false`),
     * deve setar a propriedade `t-indeterminate` como `true`.
     *
     * Nesse caso, o thf-checkbox-group vai retornar um objeto com todas as opções disponíveis e seus valores.
     *
     * ```
     * favorites = {
     *  THF: true,
     *  Angular: true,
     *  VueJS: false,
     *  React: null // indeterminado
     * };
     * ```
     */
    var ThfCheckboxGroupBaseComponent = /** @class */ (function () {
        function ThfCheckboxGroupBaseComponent() {
            this.checkedOptions = {};
            this.checkedOptionsList = [];
            this.mdColumns = thfCheckboxGroupColumnsDefaultLength;
            this._columns = thfCheckboxGroupColumnsDefaultLength;
            this._disabled = false;
            this._indeterminate = false;
            this._required = false;
            // Função para atualizar o `ngModel` do componente, necessário quando não for utilizado dentro da tag form.
            this.ngModelChange = new core.EventEmitter();
            /**
             * Evento disparado ao alterar valor do campo
             */
            this.change = new core.EventEmitter();
        }
        Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "columns", {
            get: /**
             * @return {?}
             */
            function () {
                return this._columns;
            },
            /**
             * @optional
             *
             * @description
             *
             * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
             * - É possível exibir as opções entre `1` e `4` colunas.
             * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
             * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
             * o *grid system* será composto por `2` colunas.
             *
             * @default `2`
             *
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
             * - É possível exibir as opções entre `1` e `4` colunas.
             * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
             * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
             * o *grid system* será composto por `2` colunas.
             *
             * \@default `2`
             *
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var columns = convertToInt(value, thfCheckboxGroupColumnsDefaultLength);
                this._columns = this.getGridSystemColumns(columns, 4);
                this.mdColumns = this.getGridSystemColumns(columns, 2);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita todos os itens do checkbox.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Desabilita todos os itens do checkbox.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._disabled = convertToBoolean(value);
                this.validateModel(this.checkIndeterminate());
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "indeterminate", {
            get: /**
             * @return {?}
             */
            function () {
                return this._indeterminate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
             * a propriedade `t-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
             *
             * Quando essa propriedade é setada como `true`, o *thf-checkbox-group* passa a devolver um objeto completo para o
             * `ngModel`, diferente do array que contém apenas os valores selecionados.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
             * a propriedade `t-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
             *
             * Quando essa propriedade é setada como `true`, o *thf-checkbox-group* passa a devolver um objeto completo para o
             * `ngModel`, diferente do array que contém apenas os valores selecionados.
             *
             * \@default `false`
             * @param {?} indeterminate
             * @return {?}
             */
            function (indeterminate) {
                this._indeterminate = convertToBoolean(indeterminate);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "options", {
            get: /**
             * @return {?}
             */
            function () {
                return this._options;
            },
            /**
             * @optional
             *
             * @description
             * Lista de opções que serão exibidas
             * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfCheckboxGroupOption
             */
            set: /**
             * \@optional
             *
             * \@description
             * Lista de opções que serão exibidas
             * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfCheckboxGroupOption
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._options = Array.isArray(value) ? value : [];
                this.removeDuplicatedOptions();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfCheckboxGroupBaseComponent.prototype, "required", {
            get: /**
             * @return {?}
             */
            function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define que o campo será obrigatório.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define que o campo será obrigatório.
             *
             * \@default `false`
             * @param {?} required
             * @return {?}
             */
            function (required) {
                this._required = convertToBoolean(required);
                this.validateModel(this.checkIndeterminate());
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfCheckboxGroupBaseComponent.prototype.changeValue = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var value = this.checkIndeterminate();
            if (this.propagateChange) {
                this.propagateChange(value);
            }
            else {
                this.ngModelChange.emit(value);
            }
            this.change.emit(value);
        };
        /**
         * @return {?}
         */
        ThfCheckboxGroupBaseComponent.prototype.checkIndeterminate = /**
         * @return {?}
         */
        function () {
            return this.indeterminate ? this.checkedOptions : this.checkedOptionsList;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfCheckboxGroupBaseComponent.prototype.checkOption = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!this._disabled && !value.disabled) {
                this.checkOptionModel(value);
                this.changeValue();
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfCheckboxGroupBaseComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.propagateChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfCheckboxGroupBaseComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) { };
        /**
         * @param {?} optionsModel
         * @return {?}
         */
        ThfCheckboxGroupBaseComponent.prototype.writeValue = /**
         * @param {?} optionsModel
         * @return {?}
         */
        function (optionsModel) {
            if (optionsModel && this.checkedOptions !== optionsModel) {
                this.generateCheckOptions(optionsModel);
            }
            else {
                this.checkedOptionsList = [];
                this.checkedOptions = {};
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfCheckboxGroupBaseComponent.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.validatorChange = fn;
        };
        /**
         * @param {?} abstractControl
         * @return {?}
         */
        ThfCheckboxGroupBaseComponent.prototype.validate = /**
         * @param {?} abstractControl
         * @return {?}
         */
        function (abstractControl) {
            if ((!this.indeterminate && requiredFailed(this.required, this.disabled, abstractControl.value)) || this.isInvalidIndeterminate()) {
                return {
                    required: {
                        valid: false,
                    }
                };
            }
        };
        /**
         * @protected
         * @param {?} model
         * @return {?}
         */
        ThfCheckboxGroupBaseComponent.prototype.validateModel = /**
         * @protected
         * @param {?} model
         * @return {?}
         */
        function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        /**
         * @private
         * @param {?} columns
         * @param {?} maxColumns
         * @return {?}
         */
        ThfCheckboxGroupBaseComponent.prototype.checkColumnsRange = /**
         * @private
         * @param {?} columns
         * @param {?} maxColumns
         * @return {?}
         */
        function (columns, maxColumns) {
            /** @type {?} */
            var minColumns = 1;
            return columns >= minColumns && columns <= maxColumns;
        };
        /**
         * @private
         * @param {?} optionChecked
         * @return {?}
         */
        ThfCheckboxGroupBaseComponent.prototype.checkOptionModel = /**
         * @private
         * @param {?} optionChecked
         * @return {?}
         */
        function (optionChecked) {
            this.checkedOptions[optionChecked.value] = !this.checkedOptions[optionChecked.value];
            if (!this.indeterminate && this.checkedOptionsList.includes(optionChecked.value)) {
                this.checkedOptionsList.splice(this.checkedOptionsList.indexOf(optionChecked.value), 1);
            }
            else if (!this.indeterminate) {
                this.checkedOptionsList.push(optionChecked.value);
            }
        };
        /**
         * @private
         * @param {?} optionsModel
         * @return {?}
         */
        ThfCheckboxGroupBaseComponent.prototype.generateCheckOptions = /**
         * @private
         * @param {?} optionsModel
         * @return {?}
         */
        function (optionsModel) {
            var _this = this;
            this.checkedOptions = {};
            if (optionsModel instanceof Array) {
                this.checkedOptionsList = optionsModel;
                this.options.forEach((/**
                 * @param {?} option
                 * @return {?}
                 */
                function (option) {
                    _this.checkedOptions[option.value] = optionsModel.includes(option.value);
                }));
            }
            else {
                this.options.forEach((/**
                 * @param {?} option
                 * @return {?}
                 */
                function (option) {
                    optionsModel[option.value] = optionsModel[option.value] === undefined ? false : optionsModel[option.value];
                    _this.checkedOptions = optionsModel;
                }));
            }
        };
        /**
         * @private
         * @param {?} columns
         * @param {?} maxColumns
         * @return {?}
         */
        ThfCheckboxGroupBaseComponent.prototype.getGridSystemColumns = /**
         * @private
         * @param {?} columns
         * @param {?} maxColumns
         * @return {?}
         */
        function (columns, maxColumns) {
            /** @type {?} */
            var gridSystemColumns = thfCheckboxGroupColumnsTotalLength / columns;
            return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : thfCheckboxGroupColumnsDefaultLength;
        };
        /**
         * @private
         * @return {?}
         */
        ThfCheckboxGroupBaseComponent.prototype.isInvalidIndeterminate = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.indeterminate && this.required && this.checkedOptions) {
                return ((/** @type {?} */ (Object))).values(this.checkedOptions).every((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) { return value === false; }));
            }
            return false;
        };
        /**
         * @private
         * @return {?}
         */
        ThfCheckboxGroupBaseComponent.prototype.removeDuplicatedOptions = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.options.forEach((/**
             * @param {?} option
             * @param {?} index
             * @return {?}
             */
            function (option, index) {
                /** @type {?} */
                var duplicatedIndex = _this.options.findIndex((/**
                 * @param {?} optionFind
                 * @return {?}
                 */
                function (optionFind) { return optionFind.value === option.value; })) === index;
                if (!duplicatedIndex) {
                    _this.options.splice(_this.options.indexOf(option), 1);
                }
            }));
        };
        ThfCheckboxGroupBaseComponent.propDecorators = {
            name: [{ type: core.Input, args: ['name',] }],
            columns: [{ type: core.Input, args: ['t-columns',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            help: [{ type: core.Input, args: ['t-help',] }],
            indeterminate: [{ type: core.Input, args: ['t-indeterminate',] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            optional: [{ type: core.Input, args: ['t-optional',] }],
            options: [{ type: core.Input, args: ['t-options',] }],
            required: [{ type: core.Input, args: ['t-required',] }],
            ngModelChange: [{ type: core.Output, args: ['ngModelChange',] }],
            change: [{ type: core.Output, args: ['t-change',] }]
        };
        return ThfCheckboxGroupBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfCheckboxGroupBaseComponent
     *
     * \@example
     *
     * <example name="thf-checkbox-group-basic" title="Totvs Checkbox Group Basic">
     *  <file name="sample-thf-checkbox-group-basic/sample-thf-checkbox-group-basic.component.html"> </file>
     *  <file name="sample-thf-checkbox-group-basic/sample-thf-checkbox-group-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-checkbox-group-labs" title="Totvs Checkbox Group Labs">
     *  <file name="sample-thf-checkbox-group-labs/sample-thf-checkbox-group-labs.component.html"> </file>
     *  <file name="sample-thf-checkbox-group-labs/sample-thf-checkbox-group-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-checkbox-group-password-policy" title="Totvs Checkbox Group – Security policy">
     *  <file name="sample-thf-checkbox-group-password-policy/sample-thf-checkbox-group-password-policy.component.html"> </file>
     *  <file name="sample-thf-checkbox-group-password-policy/sample-thf-checkbox-group-password-policy.component.ts"> </file>
     * </example>
     */
    var ThfCheckboxGroupComponent = /** @class */ (function (_super) {
        __extends(ThfCheckboxGroupComponent, _super);
        function ThfCheckboxGroupComponent(changeDetector) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            return _this;
        }
        /**
         * @return {?}
         */
        ThfCheckboxGroupComponent.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
        function () {
            this.changeDetector.detectChanges();
        };
        /**
         * @param {?} event
         * @param {?} option
         * @return {?}
         */
        ThfCheckboxGroupComponent.prototype.onKeyDown = /**
         * @param {?} event
         * @param {?} option
         * @return {?}
         */
        function (event, option) {
            /** @type {?} */
            var spaceBar = 32;
            if (event.which === spaceBar || event.keyCode === spaceBar) {
                this.checkOption(option);
                event.preventDefault();
            }
        };
        ThfCheckboxGroupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-checkbox-group',
                        template: "<thf-field-container\n  [t-help]=\"help\"\n  [t-label]=\"label\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content thf-checkbox-group-content\">\n    <div class=\"thf-row thf-pt-1 thf-pb-1\">\n\n      <div *ngFor=\"let option of options; let i = index\"\n        class=\"thf-checkbox-group-item thf-md-{{ mdColumns }} thf-lg-{{ columns }}\"\n        [class.thf-checkbox-group-item-disabled]=\"option.disabled || disabled\">\n\n        <input\n          class=\"thf-input thf-checkbox-group-input\"\n          type=\"checkbox\"\n          [class.thf-checkbox-group-input-checked]=\"checkedOptions[option.value]\"\n          [class.thf-checkbox-group-input-indeterminate]=\"checkedOptions[option.value] === null\"\n          [checked]=\"option.value\"\n          [disabled]=\"option.disabled || disabled\"\n          [id]=\"'checkbox_' + i\"\n          [required]=\"required\"\n          [value]=\"option.value\">\n\n        <label #checkboxLabel\n          class=\"thf-checkbox-group-label\"\n          [class.thf-clickable]=\"checkboxLabel.tabIndex === 0\"\n          [for]=\"'checkbox_' + i\"\n          [tabindex]=\"option.disabled || disabled ? -1 : 0\"\n          (click)=\"checkOption(option)\"\n          (keydown)=\"onKeyDown($event, option)\">\n            {{option.label}}\n        </label>\n      </div>\n\n    </div>\n  </div>\n\n  <thf-field-container-bottom></thf-field-container-bottom>\n\n</thf-field-container>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfCheckboxGroupComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfCheckboxGroupComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfCheckboxGroupComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        return ThfCheckboxGroupComponent;
    }(ThfCheckboxGroupBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * Este componente é de uso interno utilizado por componentes de entrada de dados com o objetivo de resetar as informações do model.
     *
     * Por padrão limpa o valor do campo e executa o método onChangePropagate, caso tenha a necessidade de tratar a função de limpar o campo,
     * deve implementar a interface ThfClean.
     * @abstract
     */
    var ThfCleanBaseComponent = /** @class */ (function () {
        function ThfCleanBaseComponent() {
            /**
             * Valor que será atribuído ao campo quando for clicado no thf-clean.
             */
            this.defaultValue = '';
            /**
             * Evento disparado quando executada ação do thf-clean.
             * Este evento deve ser usado para avisar para o componente que está usando o thf-clean, que o botão foi disparado,
             * e provavelmente será preciso emitir o evento para atualizar o model.
             */
            this.changeEvent = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        ThfCleanBaseComponent.prototype.clear = /**
         * @return {?}
         */
        function () {
            this.setInputValue(this.defaultValue);
            this.changeEvent.emit(this.defaultValue);
        };
        /**
         * @return {?}
         */
        ThfCleanBaseComponent.prototype.showIcon = /**
         * @return {?}
         */
        function () {
            return this.defaultValue !== this.getInputValue() && this.hasCleanAttr() && !this.isDisabled() && !this.isReadonly();
        };
        // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
        // ou seja, se o thf-clean deve ser usado.
        // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
        // ou seja, se o thf-clean deve ser usado.
        /**
         * @private
         * @return {?}
         */
        ThfCleanBaseComponent.prototype.hasCleanAttr = 
        // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
        // ou seja, se o thf-clean deve ser usado.
        /**
         * @private
         * @return {?}
         */
        function () {
            return this.parentComponent.clean;
        };
        // Este método verifica se o componente pai está desabilitado.
        // Este método verifica se o componente pai está desabilitado.
        /**
         * @private
         * @return {?}
         */
        ThfCleanBaseComponent.prototype.isDisabled = 
        // Este método verifica se o componente pai está desabilitado.
        /**
         * @private
         * @return {?}
         */
        function () {
            return this.parentComponent.disabled;
        };
        // Este método verifica se o componente pai está somente leitura.
        // Este método verifica se o componente pai está somente leitura.
        /**
         * @private
         * @return {?}
         */
        ThfCleanBaseComponent.prototype.isReadonly = 
        // Este método verifica se o componente pai está somente leitura.
        /**
         * @private
         * @return {?}
         */
        function () {
            return this.parentComponent.readonly;
        };
        ThfCleanBaseComponent.propDecorators = {
            inputRef: [{ type: core.Input, args: ['t-element-ref',] }],
            defaultValue: [{ type: core.Input, args: ['t-default-value',] }],
            changeEvent: [{ type: core.Output, args: ['t-change-event',] }]
        };
        return ThfCleanBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@docsExtends ThfCleanBaseComponent
     *
     * \@examplePrivate
     *
     * <example-private name="thf-clean-labs" title="Totvs Clean Labs">
     *   <file name="sample-thf-clean-labs.component.html"> </file>
     *   <file name="sample-thf-clean-labs.component.ts"> </file>
     * </example-private>
     */
    var ThfCleanComponent = /** @class */ (function (_super) {
        __extends(ThfCleanComponent, _super);
        function ThfCleanComponent(viewRef) {
            var _this = _super.call(this) || this;
            _this.viewRef = viewRef;
            _this.parentComponent = _this.viewRef['_view']['component'];
            return _this;
        }
        /**
         * @param {?=} value
         * @return {?}
         */
        ThfCleanComponent.prototype.setInputValue = /**
         * @param {?=} value
         * @return {?}
         */
        function (value) {
            if (this.inputRef && this.inputRef.nativeElement) {
                this.inputRef.nativeElement.value = value;
            }
        };
        /**
         * @return {?}
         */
        ThfCleanComponent.prototype.getInputValue = /**
         * @return {?}
         */
        function () {
            if (this.inputRef && this.inputRef.nativeElement) {
                return this.inputRef.nativeElement.value;
            }
        };
        ThfCleanComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-clean',
                        template: "<span *ngIf=\"showIcon()\"\n  class=\"thf-icon thf-field-icon thf-icon-close\"\n  (click)=\"clear()\">\n</span>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfCleanComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef }
        ]; };
        return ThfCleanComponent;
    }(ThfCleanBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var ThfKeyCodeEnum = {
        /** Seta para baixo */
        arrowDown: 40,
        /** Seta para cima */
        arrowUp: 38,
        /** Backspace */
        backspace: 8,
        /** Delete */
        delete: 46,
        /** Enter */
        enter: 13,
        /** Esc */
        esc: 27,
        /** Espaço */
        space: 32,
        /** Tab */
        tab: 9,
    };
    ThfKeyCodeEnum[ThfKeyCodeEnum.arrowDown] = 'arrowDown';
    ThfKeyCodeEnum[ThfKeyCodeEnum.arrowUp] = 'arrowUp';
    ThfKeyCodeEnum[ThfKeyCodeEnum.backspace] = 'backspace';
    ThfKeyCodeEnum[ThfKeyCodeEnum.delete] = 'delete';
    ThfKeyCodeEnum[ThfKeyCodeEnum.enter] = 'enter';
    ThfKeyCodeEnum[ThfKeyCodeEnum.esc] = 'esc';
    ThfKeyCodeEnum[ThfKeyCodeEnum.space] = 'space';
    ThfKeyCodeEnum[ThfKeyCodeEnum.tab] = 'tab';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var ThfComboFilterMode = {
        /** Verifica se o texto *inicia* com o valor pesquisado. Caso não seja especificado um tipo, será esse o utilizado. */
        startsWith: 0,
        /** Verifica se o texto *contém* o valor pesquisado. */
        contains: 1,
        /** Verifica se o texto *finaliza* com o valor pesquisado. */
        endsWith: 2,
    };
    ThfComboFilterMode[ThfComboFilterMode.startsWith] = 'startsWith';
    ThfComboFilterMode[ThfComboFilterMode.contains] = 'contains';
    ThfComboFilterMode[ThfComboFilterMode.endsWith] = 'endsWith';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var THF_COMBO_DEBOUNCE_TIME_DEFAULT = 400;
    /** @type {?} */
    var THF_COMBO_FIELD_LABEL_DEFAULT = 'label';
    /** @type {?} */
    var THF_COMBO_FIELD_VALUE_DEFAULT = 'value';
    /** @type {?} */
    var thfComboLiteralsDefault = {
        en: (/** @type {?} */ ({
            noData: 'No data found'
        })),
        es: (/** @type {?} */ ({
            noData: 'Datos no encontrados'
        })),
        pt: (/** @type {?} */ ({
            noData: 'Nenhum dado encontrado'
        }))
    };
    /**
     * \@description
     *
     * O thf-combo, semelhante ao thf-select, exibe uma lista de valores e permite ao usuário fazer a seleção de um desses valores,
     * mas no caso do thf-combo, o usuário ainda consegue filtrar os valores disponibilizados para seleção.
     *
     * Também há a possibilidade de usar serviço no thf-combo, através da propriedade t-filter-service.
     *
     * O comportamento do thf-combo permite ao usuário:
     *  - selecionar um item através do mouse;
     *  - navegar pelos itens utilizando as setas do teclado confirmando a seleção com "Enter";
     *  - pesquisar os itens da lista de seleção e em seguida navegar com as setas ou com o mouse;
     *  - digitar a descrição completa.
     *
     * O thf-combo guarda o último valor caso o usuário desista de uma busca, deixando o campo ou teclando "ESC".
     * Caso seja digitado no campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada
     * ao deixar o campo ou pressionando "Enter".
     *
     * É necessário que os itens da lista de selecão contenham sempre valor (value) e descrição (label) para que os itens apareçam corretamente
     * no thf-combo, itens que não estejam implementando corretamenta a interface ThfComboOption, serão descartados.
     *
     * O thf-combo ainda permite definir o modo que será feito o filtro, através da propriedade t-filter-mode.
     * @abstract
     */
    var ThfComboBaseComponent = /** @class */ (function () {
        function ThfComboBaseComponent() {
            this._changeOnEnter = false;
            this._debounceTime = 400;
            this._disabled = false;
            this._disabledInitFilter = false;
            this._fieldLabel = 'label';
            this._fieldValue = 'value';
            this._filterMinlength = 0;
            this._filterMode = ThfComboFilterMode.startsWith;
            this._options = [];
            this._required = false;
            this.cacheOptions = [];
            this.cacheStaticOptions = [];
            this.firstInWriteValue = true;
            this.isFirstFilter = true;
            this.isFiltering = false;
            this.previousSearchValue = '';
            this.visibleOptions = [];
            /**
             * Mensagem apresentada enquanto o campo estiver vazio.
             */
            this.placeholder = '';
            /**
             * Indica que a lista definida na propriedade t-options será ordenada pela descrição.
             */
            this.sort = false;
            /**
             * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
             */
            this.change = new core.EventEmitter();
            // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
            this.ngModelChange = new core.EventEmitter();
        }
        Object.defineProperty(ThfComboBaseComponent.prototype, "filterService", {
            get: /**
             * @return {?}
             */
            function () {
                return this._filterService;
            },
            /**
             * @optional
             *
             * @description
             * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de
             * itens no componente.
             * Caso haja a necessidade de customização, então pode ser informado um serviço implementando a interface ThfComboFilter.
             *
             * Caso utilizado uma URL, o serviço deve ser retornado no padrão API TOTVS e utiliza as propriedades
             * `t-field-label` e `t-field-value` para a construção da lista de itens.
             *
             * Quando utilizada uma URL de serviço, então será concateanada nesta URL o valor que deseja-se filtrar da seguinte forma:
             * ```
             * url + ?filter=Peter
             * ```
             */
            set: /**
             * \@optional
             *
             * \@description
             * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de
             * itens no componente.
             * Caso haja a necessidade de customização, então pode ser informado um serviço implementando a interface ThfComboFilter.
             *
             * Caso utilizado uma URL, o serviço deve ser retornado no padrão API TOTVS e utiliza as propriedades
             * `t-field-label` e `t-field-value` para a construção da lista de itens.
             *
             * Quando utilizada uma URL de serviço, então será concateanada nesta URL o valor que deseja-se filtrar da seguinte forma:
             * ```
             * url + ?filter=Peter
             * ```
             * @param {?} service
             * @return {?}
             */
            function (service) {
                this._filterService = service;
                this.configAfterSetFilterService(service);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfComboBaseComponent.prototype, "debounceTime", {
            get: /**
             * @return {?}
             */
            function () {
                return this._debounceTime;
            },
            /**
             * @optional
             *
             * @description
             * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
             * Será utilizada apenas quando houver serviço (`t-filter-service`).
             *
             * @default `400`
             */
            set: /**
             * \@optional
             *
             * \@description
             * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
             * Será utilizada apenas quando houver serviço (`t-filter-service`).
             *
             * \@default `400`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var parsedValue = parseInt((/** @type {?} */ (value)), 10);
                this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : THF_COMBO_DEBOUNCE_TIME_DEFAULT;
                this.unsubscribeKeyupObservable();
                this.initInputObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfComboBaseComponent.prototype, "disabledInitFilter", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabledInitFilter;
            },
            /**
             * @optional
             *
             * @description
             * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
             *
             * @default `false`
             *
             */
            set: /**
             * \@optional
             *
             * \@description
             * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
             *
             * \@default `false`
             *
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._disabledInitFilter = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfComboBaseComponent.prototype, "fieldValue", {
            get: /**
             * @return {?}
             */
            function () {
                return this._fieldValue;
            },
            /**
             * @optional
             *
             * @description
             * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
             * (`t-options`), esta propriedade será responsável pelo valor de cada item da lista.
             *
             * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
             * ThfComboOption.
             *
             * @default `value`
             */
            set: /**
             * \@optional
             *
             * \@description
             * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
             * (`t-options`), esta propriedade será responsável pelo valor de cada item da lista.
             *
             * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
             * ThfComboOption.
             *
             * \@default `value`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._fieldValue = value || THF_COMBO_FIELD_VALUE_DEFAULT;
                if (isTypeof(this.filterService, 'string') && this.service) {
                    this.service.fieldValue = this._fieldValue;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfComboBaseComponent.prototype, "fieldLabel", {
            get: /**
             * @return {?}
             */
            function () {
                return this._fieldLabel;
            },
            /**
             * @optional
             *
             * @description
             * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
             * (`t-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
             *
             * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
             * ThfComboOption.
             *
             * @default `label`
             */
            set: /**
             * \@optional
             *
             * \@description
             * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
             * (`t-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
             *
             * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
             * ThfComboOption.
             *
             * \@default `label`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._fieldLabel = value || THF_COMBO_FIELD_LABEL_DEFAULT;
                if (isTypeof(this.filterService, 'string') && this.service) {
                    this.service.fieldLabel = this._fieldLabel;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfComboBaseComponent.prototype, "filterMinlength", {
            get: /**
             * @return {?}
             */
            function () {
                return this._filterMinlength;
            },
            /**
             * @optional
             *
             * @description
             * Valor mínimo de caracteres para realizar o filtro no serviço.
             *
             * @default `0`
             */
            set: /**
             * \@optional
             *
             * \@description
             * Valor mínimo de caracteres para realizar o filtro no serviço.
             *
             * \@default `0`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var parseValue = (typeof value === 'string') ? parseInt(value, 10) : value;
                this._filterMinlength = Number.isInteger(parseValue) ? parseValue : 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfComboBaseComponent.prototype, "required", {
            get: /**
             * @return {?}
             */
            function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             * Indica que o campo será obrigatório.
             *
             * \@default `false`
             * @param {?} required
             * @return {?}
             */
            function (required) {
                this._required = convertToBoolean(required);
                this.validateModel(this.selectedValue);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfComboBaseComponent.prototype, "changeOnEnter", {
            get: /**
             * @return {?}
             */
            function () {
                return this._changeOnEnter;
            },
            /**
             * @optional
             *
             * @description
             * Indica que o evento `t-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             * Indica que o evento `t-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
             *
             * \@default `false`
             * @param {?} changeOnEnter
             * @return {?}
             */
            function (changeOnEnter) {
                this._changeOnEnter = convertToBoolean(changeOnEnter);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfComboBaseComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             * Indica que o campo será desabilitado.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             * Indica que o campo será desabilitado.
             *
             * \@default `false`
             * @param {?} disabled
             * @return {?}
             */
            function (disabled) {
                this._disabled = convertToBoolean(disabled);
                this.validateModel(this.selectedValue);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfComboBaseComponent.prototype, "options", {
            get: /**
             * @return {?}
             */
            function () {
                return this._options;
            },
            /**
             * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfComboOption.
             * Esta lista conterá os valores e as descrições que serão apresentados na tela.
             */
            set: /**
             * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfComboOption.
             * Esta lista conterá os valores e as descrições que serão apresentados na tela.
             * @param {?} options
             * @return {?}
             */
            function (options) {
                this._options = Array.isArray(options) ? options : [];
                this.cacheStaticOptions = this.options;
                this.validAndSortOptions();
                removeDuplicatedOptions(this.options);
                this.updateComboList();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfComboBaseComponent.prototype, "setSort", {
            set: /**
             * @param {?} sort
             * @return {?}
             */
            function (sort) {
                this.sort = sort === '' ? true : convertToBoolean(sort);
                this.validAndSortOptions();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfComboBaseComponent.prototype, "filterMode", {
            get: /**
             * @return {?}
             */
            function () {
                return this._filterMode;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
             *
             * > Quando utilizar a propriedade `t-filter-service` esta propriedade será ignorada.
             *
             * @default `startsWith`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
             *
             * > Quando utilizar a propriedade `t-filter-service` esta propriedade será ignorada.
             *
             * \@default `startsWith`
             * @param {?} filterMode
             * @return {?}
             */
            function (filterMode) {
                this._filterMode = (filterMode in ThfComboFilterMode) ? filterMode : ThfComboFilterMode.startsWith;
                switch (this._filterMode.toString()) {
                    case 'startsWith':
                        this._filterMode = ThfComboFilterMode.startsWith;
                        break;
                    case 'contains':
                        this._filterMode = ThfComboFilterMode.contains;
                        break;
                    case 'endsWith':
                        this._filterMode = ThfComboFilterMode.endsWith;
                        break;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfComboBaseComponent.prototype, "filterParams", {
            get: /**
             * @return {?}
             */
            function () {
                return this._filterParams;
            },
            /**
             * @optional
             *
             * @description
             *
             * Valor que será repassado como parâmetro aos métodos do serviço que implementam a interface *ThfComboFilter*.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Valor que será repassado como parâmetro aos métodos do serviço que implementam a interface *ThfComboFilter*.
             * @param {?} filterParams
             * @return {?}
             */
            function (filterParams) {
                this._filterParams = (filterParams || filterParams === 0 || filterParams === false) ? filterParams : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfComboBaseComponent.prototype, "literals", {
            get: /**
             * @return {?}
             */
            function () {
                return this._literals || thfComboLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `thf-combo`.
             *
             * Para utilizar basta passar a literal que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfComboLiterals = {
             *    noData: 'Nenhum valor'
             *  };
             * ```
             *
             * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-combo
             *   [t-literals]="customLiterals">
             * </thf-combo>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Objeto com as literais usadas no `thf-combo`.
             *
             * Para utilizar basta passar a literal que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfComboLiterals = {
             *    noData: 'Nenhum valor'
             *  };
             * ```
             *
             * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-combo
             *   [t-literals]="customLiterals">
             * </thf-combo>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign({}, thfComboLiteralsDefault[thfLocaleDefault], thfComboLiteralsDefault[browserLanguage()], value);
                }
                else {
                    this._literals = thfComboLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfComboBaseComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.updateComboList();
        };
        /**
         * @return {?}
         */
        ThfComboBaseComponent.prototype.onInitService = /**
         * @return {?}
         */
        function () {
            if (this.filterService) {
                this.setService(this.filterService);
                this.initInputObservable();
            }
        };
        /**
         * @param {?} service
         * @return {?}
         */
        ThfComboBaseComponent.prototype.setService = /**
         * @param {?} service
         * @return {?}
         */
        function (service) {
            if (service) {
                if (isTypeof(service, 'object')) {
                    this.service = (/** @type {?} */ (service));
                }
                else {
                    this.service = this.defaultService;
                    this.service.configProperties((/** @type {?} */ (service)), this.fieldLabel, this.fieldValue);
                }
            }
        };
        /**
         * @return {?}
         */
        ThfComboBaseComponent.prototype.validAndSortOptions = /**
         * @return {?}
         */
        function () {
            if (this.options && this.options.length > 0) {
                // Remove os objetos que não contém valor e atribui o valor ao label caso este esteja vazio
                for (var i = 0; i < this.options.length; i++) {
                    if (!validValue(this.options[i]['value'])) {
                        this.options.splice(i, 1);
                    }
                    else if (!this.options[i]['label']) {
                        this.options[i]['label'] = this.options[i]['value'].toString();
                    }
                }
            }
            this.sortOptions();
        };
        /**
         * @return {?}
         */
        ThfComboBaseComponent.prototype.sortOptions = /**
         * @return {?}
         */
        function () {
            if (this.options && this.options.length > 0 && this.sort) {
                this.options.sort(this.compareOptions);
            }
        };
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        ThfComboBaseComponent.prototype.compareOptions = /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            if (a.label.toString().toLowerCase() < b.label.toString().toLowerCase()) {
                return -1;
            }
            if (a.label.toString().toLowerCase() > b.label.toString().toLowerCase()) {
                return 1;
            }
            return 0;
        };
        /**
         * @param {?} search
         * @param {?} option
         * @param {?} filterMode
         * @return {?}
         */
        ThfComboBaseComponent.prototype.compareMethod = /**
         * @param {?} search
         * @param {?} option
         * @param {?} filterMode
         * @return {?}
         */
        function (search, option, filterMode) {
            switch (filterMode) {
                case ThfComboFilterMode.startsWith:
                    return this.startsWith(search, option);
                case ThfComboFilterMode.contains:
                    return this.contains(search, option);
                case ThfComboFilterMode.endsWith:
                    return this.endsWith(search, option);
            }
        };
        /**
         * @param {?} search
         * @param {?} option
         * @return {?}
         */
        ThfComboBaseComponent.prototype.startsWith = /**
         * @param {?} search
         * @param {?} option
         * @return {?}
         */
        function (search, option) {
            return option.label.toLowerCase().startsWith(search.toLowerCase());
        };
        /**
         * @param {?} search
         * @param {?} option
         * @return {?}
         */
        ThfComboBaseComponent.prototype.contains = /**
         * @param {?} search
         * @param {?} option
         * @return {?}
         */
        function (search, option) {
            return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
        };
        /**
         * @param {?} search
         * @param {?} option
         * @return {?}
         */
        ThfComboBaseComponent.prototype.endsWith = /**
         * @param {?} search
         * @param {?} option
         * @return {?}
         */
        function (search, option) {
            return option.label.toLowerCase().endsWith(search.toLowerCase());
        };
        /**
         * @param {?} value
         * @param {?} options
         * @return {?}
         */
        ThfComboBaseComponent.prototype.getOptionFromValue = /**
         * @param {?} value
         * @param {?} options
         * @return {?}
         */
        function (value, options) {
            var _this = this;
            return (options) ? options.find((/**
             * @param {?} option
             * @return {?}
             */
            function (option) { return _this.isEqual(option.value, value); })) : null;
        };
        /**
         * @param {?} label
         * @param {?} options
         * @return {?}
         */
        ThfComboBaseComponent.prototype.getOptionFromLabel = /**
         * @param {?} label
         * @param {?} options
         * @return {?}
         */
        function (label, options) {
            if (options) {
                return options.find((/**
                 * @param {?} option
                 * @return {?}
                 */
                function (option) {
                    return option.label.toString().toLowerCase() === label.toString().toLowerCase();
                }));
            }
            else {
                return null;
            }
        };
        /**
         * @param {?} option
         * @param {?=} isUpdateModel
         * @param {?=} isWriteValue
         * @return {?}
         */
        ThfComboBaseComponent.prototype.updateSelectedValue = /**
         * @param {?} option
         * @param {?=} isUpdateModel
         * @param {?=} isWriteValue
         * @return {?}
         */
        function (option, isUpdateModel, isWriteValue) {
            if (isUpdateModel === void 0) { isUpdateModel = true; }
            if (isWriteValue === void 0) { isWriteValue = false; }
            /** @type {?} */
            var optionLabel = option && option.label || '';
            this.updateInternalVariables(option);
            // atualiza o valor do input quando for changeOnEnter apenas se for para atualizar o model.
            if (this.changeOnEnter && isUpdateModel) {
                this.setInputValue(optionLabel);
            }
            else if (!this.changeOnEnter) {
                this.setInputValue(optionLabel);
            }
            if (isUpdateModel) {
                /** @type {?} */
                var optionValue = option && option.value || undefined;
                this.updateModel(optionValue, isWriteValue);
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfComboBaseComponent.prototype.callModelChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
            return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);
        };
        /**
         * @param {?} value
         * @param {?} inputValue
         * @return {?}
         */
        ThfComboBaseComponent.prototype.isEqual = /**
         * @param {?} value
         * @param {?} inputValue
         * @return {?}
         */
        function (value, inputValue) {
            if ((value || value === 0) && inputValue) {
                return value.toString() === inputValue.toString();
            }
            if ((value === null && inputValue !== null) ||
                (value === undefined && inputValue !== undefined)) {
                value = "" + value; // Transformando em string
            }
            return value === inputValue;
        };
        /**
         * @param {?} search
         * @param {?} options
         * @param {?} filterMode
         * @return {?}
         */
        ThfComboBaseComponent.prototype.searchForLabel = /**
         * @param {?} search
         * @param {?} options
         * @param {?} filterMode
         * @return {?}
         */
        function (search, options, filterMode) {
            var _this = this;
            if (search && options && options.length) {
                /** @type {?} */
                var newOptions_1 = [];
                options.forEach((/**
                 * @param {?} option
                 * @return {?}
                 */
                function (option) {
                    if (option.label && (_this.compareMethod(search, option, filterMode) || _this.service)) {
                        newOptions_1.push(option);
                    }
                }));
                this.selectedView = newOptions_1[0];
                this.updateComboList(newOptions_1);
            }
            else {
                this.updateComboList();
            }
        };
        /**
         * @param {?=} options
         * @return {?}
         */
        ThfComboBaseComponent.prototype.updateComboList = /**
         * @param {?=} options
         * @return {?}
         */
        function (options) {
            /** @type {?} */
            var copyOptions = options || __spread(this.options);
            /** @type {?} */
            var newOptions = !options && this.selectedValue ? [__assign({}, this.selectedOption)] : copyOptions;
            if (newOptions) {
                this.visibleOptions = newOptions;
                if (!this.selectedView && this.visibleOptions.length) {
                    this.selectedView = this.visibleOptions[0];
                }
            }
        };
        /**
         * @param {?} value
         * @param {?} options
         * @param {?=} reverse
         * @return {?}
         */
        ThfComboBaseComponent.prototype.getNextOption = /**
         * @param {?} value
         * @param {?} options
         * @param {?=} reverse
         * @return {?}
         */
        function (value, options, reverse) {
            if (reverse === void 0) { reverse = false; }
            /** @type {?} */
            var newOptions = [].concat(options);
            /** @type {?} */
            var optionFound = null;
            /** @type {?} */
            var found = false;
            if (reverse) {
                newOptions.reverse();
            }
            for (var i = 0; i < newOptions.length; i++) {
                /** @type {?} */
                var option = newOptions[i];
                if (!optionFound) {
                    optionFound = option;
                }
                if (found) {
                    return option;
                }
                if (this.isEqual(option.value, value)) {
                    found = true;
                }
            }
            return optionFound;
        };
        /**
         * @return {?}
         */
        ThfComboBaseComponent.prototype.getIndexSelectedView = /**
         * @return {?}
         */
        function () {
            for (var i = 0; i < this.visibleOptions.length; i++) {
                if (this.compareObjects(this.visibleOptions[i], this.selectedView)) {
                    return i;
                }
            }
            return null;
        };
        /**
         * @param {?} obj1
         * @param {?} obj2
         * @return {?}
         */
        ThfComboBaseComponent.prototype.compareObjects = /**
         * @param {?} obj1
         * @param {?} obj2
         * @return {?}
         */
        function (obj1, obj2) {
            return JSON.stringify(obj1) === JSON.stringify(obj2);
        };
        /**
         * @return {?}
         */
        ThfComboBaseComponent.prototype.verifyValidOption = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var inputValue = this.getInputValue();
            /** @type {?} */
            var optionFound = this.getOptionFromLabel(inputValue, this.options);
            if (optionFound && optionFound.value !== this.selectedValue) {
                this.updateSelectedValue(optionFound);
                this.previousSearchValue = optionFound.label;
                return;
            }
            else if (this.selectedValue && this.selectedOption && this.selectedOption.label !== inputValue) {
                this.updateSelectedValueWithOldOption();
                this.previousSearchValue = this.selectedOption.label;
                return;
            }
            else if (inputValue && !optionFound) {
                /** @type {?} */
                var isInputValueDiffSelectedLabel = !!(this.selectedOption && this.selectedOption.label !== inputValue);
                this.updateSelectedValue(null, isInputValueDiffSelectedLabel || this.changeOnEnter);
                this.previousSearchValue = '';
                return;
            }
        };
        // Recebe as alterações do model
        // Recebe as alterações do model
        /**
         * @param {?} value
         * @return {?}
         */
        ThfComboBaseComponent.prototype.writeValue = 
        // Recebe as alterações do model
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (validValue(value) && !this.service && this.options && this.options.length) {
                /** @type {?} */
                var option = this.getOptionFromValue(value, this.options);
                this.updateSelectedValue(option);
                this.updateComboList();
                return;
            }
            // Se houver serviço busca pelo model.
            if (value && this.service) {
                return this.getObjectByValue(value);
            }
            if (!validValue(value)) {
                this.updateSelectedValue(null, true, true);
                this.updateComboList();
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfComboBaseComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onModelChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfComboBaseComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onModelTouched = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfComboBaseComponent.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.validatorChange = fn;
        };
        /**
         * @param {?} abstractControl
         * @return {?}
         */
        ThfComboBaseComponent.prototype.validate = /**
         * @param {?} abstractControl
         * @return {?}
         */
        function (abstractControl) {
            if ((requiredFailed(this.required, this.disabled, abstractControl.value))) {
                return {
                    required: {
                        valid: false,
                    }
                };
            }
        };
        /**
         * @protected
         * @param {?} model
         * @return {?}
         */
        ThfComboBaseComponent.prototype.validateModel = /**
         * @protected
         * @param {?} model
         * @return {?}
         */
        function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        /**
         * @private
         * @param {?} service
         * @return {?}
         */
        ThfComboBaseComponent.prototype.configAfterSetFilterService = /**
         * @private
         * @param {?} service
         * @return {?}
         */
        function (service) {
            if (service) {
                this.options = [];
                this.unsubscribeKeyupObservable();
                this.onInitService();
            }
            else {
                this.service = undefined;
                this.options = this.cacheStaticOptions;
            }
            this.visibleOptions = [];
            this.isFirstFilter = true;
        };
        /**
         * @private
         * @return {?}
         */
        ThfComboBaseComponent.prototype.unsubscribeKeyupObservable = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.keyupSubscribe) {
                this.keyupSubscribe.unsubscribe();
            }
        };
        /**
         * @private
         * @param {?} option
         * @return {?}
         */
        ThfComboBaseComponent.prototype.updateInternalVariables = /**
         * @private
         * @param {?} option
         * @return {?}
         */
        function (option) {
            if (option) {
                this.selectedView = option;
                this.selectedOption = option;
            }
            else {
                this.selectedView = undefined;
                this.selectedOption = undefined;
            }
        };
        /**
         * @private
         * @param {?} value
         * @param {?=} fromWriteValue
         * @return {?}
         */
        ThfComboBaseComponent.prototype.updateModel = /**
         * @private
         * @param {?} value
         * @param {?=} fromWriteValue
         * @return {?}
         */
        function (value, fromWriteValue) {
            if (fromWriteValue === void 0) { fromWriteValue = false; }
            if (value !== this.selectedValue) {
                if (!fromWriteValue) {
                    this.callModelChange(value);
                }
                this.change.emit(value);
            }
            this.selectedValue = value;
        };
        /**
         * @private
         * @return {?}
         */
        ThfComboBaseComponent.prototype.updateSelectedValueWithOldOption = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var oldOption = this.getOptionFromValue(this.selectedValue, this.options);
            if (oldOption && oldOption.label) {
                return this.updateSelectedValue(oldOption);
            }
        };
        ThfComboBaseComponent.propDecorators = {
            label: [{ type: core.Input, args: ['t-label',] }],
            help: [{ type: core.Input, args: ['t-help',] }],
            placeholder: [{ type: core.Input, args: ['t-placeholder',] }],
            name: [{ type: core.Input, args: ['name',] }],
            filterService: [{ type: core.Input, args: ['t-filter-service',] }],
            debounceTime: [{ type: core.Input, args: ['t-debounce-time',] }],
            disabledInitFilter: [{ type: core.Input, args: ['t-disabled-init-filter',] }],
            fieldValue: [{ type: core.Input, args: ['t-field-value',] }],
            fieldLabel: [{ type: core.Input, args: ['t-field-label',] }],
            filterMinlength: [{ type: core.Input, args: ['t-filter-minlength',] }],
            required: [{ type: core.Input, args: ['t-required',] }],
            changeOnEnter: [{ type: core.Input, args: ['t-change-on-enter',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            icon: [{ type: core.Input, args: ['t-icon',] }],
            options: [{ type: core.Input, args: ['t-options',] }],
            optional: [{ type: core.Input, args: ['t-optional',] }],
            setSort: [{ type: core.Input, args: ['t-sort',] }],
            filterMode: [{ type: core.Input, args: ['t-filter-mode',] }],
            filterParams: [{ type: core.Input, args: ['t-filter-params',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }],
            change: [{ type: core.Output, args: ['t-change',] }],
            ngModelChange: [{ type: core.Output, args: ['ngModelChange',] }]
        };
        return ThfComboBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Serviço padrão utilizado para filtrar os dados do componente thf-combo.
     */
    var ThfComboFilterService = /** @class */ (function () {
        function ThfComboFilterService(http) {
            this.http = http;
            this.fieldLabel = 'label';
            this.fieldValue = 'value';
        }
        Object.defineProperty(ThfComboFilterService.prototype, "url", {
            get: /**
             * @return {?}
             */
            function () { return this._url; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} param
         * @param {?=} filterParams
         * @return {?}
         */
        ThfComboFilterService.prototype.getFilteredData = /**
         * @param {?} param
         * @param {?=} filterParams
         * @return {?}
         */
        function (param, filterParams) {
            var _this = this;
            /** @type {?} */
            var value = param.value;
            /** @type {?} */
            var params = new http.HttpParams({
                fromString: "filter=" + value
            });
            return this.http.get("" + this.url, { responseType: 'json', params: params })
                .pipe(operators.map((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.parseToArrayComboOption(response.items); })));
        };
        /**
         * @param {?} value
         * @param {?=} filterParams
         * @return {?}
         */
        ThfComboFilterService.prototype.getObjectByValue = /**
         * @param {?} value
         * @param {?=} filterParams
         * @return {?}
         */
        function (value, filterParams) {
            var _this = this;
            return this.http.get(this.url + "/" + value).pipe(operators.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return _this.parseToComboOption(item); })));
        };
        /**
         * @param {?} url
         * @param {?} fieldLabel
         * @param {?} fieldValue
         * @return {?}
         */
        ThfComboFilterService.prototype.configProperties = /**
         * @param {?} url
         * @param {?} fieldLabel
         * @param {?} fieldValue
         * @return {?}
         */
        function (url, fieldLabel, fieldValue) {
            this._url = url;
            this.fieldLabel = fieldLabel;
            this.fieldValue = fieldValue;
        };
        /**
         * @private
         * @param {?} items
         * @return {?}
         */
        ThfComboFilterService.prototype.parseToArrayComboOption = /**
         * @private
         * @param {?} items
         * @return {?}
         */
        function (items) {
            var _this = this;
            if (items && items.length > 0) {
                return items.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    return _this.parseToComboOption(item);
                }));
            }
            return [];
        };
        /**
         * @private
         * @param {?} item
         * @return {?}
         */
        ThfComboFilterService.prototype.parseToComboOption = /**
         * @private
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item && item[this.fieldValue]) {
                /** @type {?} */
                var label = item[this.fieldLabel];
                /** @type {?} */
                var value = item[this.fieldValue];
                return { label: label, value: value };
            }
        };
        ThfComboFilterService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfComboFilterService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return ThfComboFilterService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfComboContainerOffset = 8;
    /** @type {?} */
    var thfComboContainerPositionDefault = 'bottom';
    /**
     * \@docsExtends ThfComboBaseComponent
     *
     * \@description
     * Utilizando thf-combo com serviço, é possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente
     * faça uma requisição à URL informada passando o valor digitado no campo. Se encontrado o valor, então o mesmo será selecionado, caso
     * não seja encontrado, então a lista de itens voltará para o estado inicial.
     *
     * \@example
     *
     * <example name="thf-combo-basic" title="Totvs Combo Basic">
     *   <file name="sample-thf-combo-basic/sample-thf-combo-basic.component.html"> </file>
     *   <file name="sample-thf-combo-basic/sample-thf-combo-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-combo-labs" title="Totvs Combo Labs">
     *   <file name="sample-thf-combo-labs/sample-thf-combo-labs.component.html"> </file>
     *   <file name="sample-thf-combo-labs/sample-thf-combo-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-combo-scheduling" title="Totvs Combo - Scheduling">
     *   <file name="sample-thf-combo-scheduling/sample-thf-combo-scheduling.component.html"> </file>
     *   <file name="sample-thf-combo-scheduling/sample-thf-combo-scheduling.component.ts"> </file>
     * </example>
     *
     * <example name="thf-combo-transfer" title="Totvs Combo - Banking Transfer">
     *   <file name="sample-thf-combo-transfer/sample-thf-combo-transfer.component.html"> </file>
     *   <file name="sample-thf-combo-transfer/sample-thf-combo-transfer.component.ts"> </file>
     * </example>
     *
     * <example name="thf-combo-heroes" title="Totvs Combo - Heroes">
     *   <file name="sample-thf-combo-heroes/sample-thf-combo-heroes.component.html"> </file>
     *   <file name="sample-thf-combo-heroes/sample-thf-combo-heroes.component.ts"> </file>
     * </example>
     *
     * <example name="thf-combo-heroes-reactive-form" title="Totvs Combo - Heroes Reactive Form">
     *   <file name="sample-thf-combo-heroes-reactive-form/sample-thf-combo-heroes-reactive-form.component.html"> </file>
     *   <file name="sample-thf-combo-heroes-reactive-form/sample-thf-combo-heroes-reactive-form.component.ts"> </file>
     * </example>
     *
     * <example name="thf-combo-hotels" title="Totvs Combo - Booking Hotel">
     *   <file name="sample-thf-combo-hotels/sample-thf-combo-hotels.component.html"> </file>
     *   <file name="sample-thf-combo-hotels/sample-thf-combo-hotels.component.ts"> </file>
     *   <file name="sample-thf-combo-hotels/sample-thf-combo-hotels.service.ts"> </file>
     * </example>
     */
    var ThfComboComponent = /** @class */ (function (_super) {
        __extends(ThfComboComponent, _super);
        function ThfComboComponent(element, differs, defaultService, renderer, changeDetector, controlPosition, sanitized) {
            var _this = _super.call(this) || this;
            _this.element = element;
            _this.differs = differs;
            _this.defaultService = defaultService;
            _this.renderer = renderer;
            _this.changeDetector = changeDetector;
            _this.controlPosition = controlPosition;
            _this.sanitized = sanitized;
            _this._isServerSearching = false;
            _this.comboIcon = 'thf-icon-arrow-down';
            _this.comboOpen = false;
            _this.isProcessingGetObjectByValue = false;
            _this.scrollTop = 0;
            _this.shouldMarkLetters = true;
            _this.onScroll = (/**
             * @return {?}
             */
            function () {
                _this.adjustContainerPosition();
            });
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        Object.defineProperty(ThfComboComponent.prototype, "isServerSearching", {
            get: /**
             * @return {?}
             */
            function () {
                return this._isServerSearching;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value) {
                    this._isServerSearching = value;
                    this.changeDetector.detectChanges();
                    this.setContainerPosition();
                    this.initializeListeners();
                }
                else {
                    this._isServerSearching = value;
                    this.removeListeners();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfComboComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var change = this.differ.diff(this.options);
            if (change) {
                this.validAndSortOptions();
                removeDuplicatedOptions(this.options);
            }
        };
        /**
         * @return {?}
         */
        ThfComboComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.removeListeners();
            if (this.filterSubscription) {
                this.filterSubscription.unsubscribe();
            }
            if (this.getSubscription) {
                this.getSubscription.unsubscribe();
            }
        };
        /**
         * @param {?=} event
         * @return {?}
         */
        ThfComboComponent.prototype.onKeyDown = /**
         * @param {?=} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var key = event.keyCode;
            /** @type {?} */
            var inputValue = event.target.value;
            // busca um registro quando acionar o tab
            if (this.service && key === ThfKeyCodeEnum.tab && inputValue) {
                this.controlComboVisibility(false);
                return this.getObjectByValue(inputValue);
            }
            // Teclas "up" e "down"
            if (key === ThfKeyCodeEnum.arrowUp || key === ThfKeyCodeEnum.arrowDown) {
                event.preventDefault();
                if (this.comboOpen) {
                    if (key === ThfKeyCodeEnum.arrowUp) {
                        this.selectPreviousOption();
                    }
                    else {
                        this.selectNextOption();
                    }
                }
                this.controlComboVisibility(true);
                this.isFiltering = this.changeOnEnter ? this.isFiltering : false;
                this.shouldMarkLetters = this.changeOnEnter ? this.shouldMarkLetters : false;
                return;
            }
            // Teclas "tab" ou "esc"
            if (key === ThfKeyCodeEnum.tab || key === ThfKeyCodeEnum.esc) {
                if (key === ThfKeyCodeEnum.esc && this.comboOpen) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                this.controlComboVisibility(false);
                this.verifyValidOption();
                if (!this.service) {
                    // caso for changeOnEnter e nao ter selectedValue deve limpar o selectedView para reinicia-lo.
                    this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
                    this.updateComboList();
                }
                return;
            }
            // Tecla "enter"
            if (key === ThfKeyCodeEnum.enter && this.selectedView && this.comboOpen) {
                /** @type {?} */
                var isUpdateModel = (this.selectedView.value !== this.selectedValue) || (inputValue !== this.selectedView.label);
                this.controlComboVisibility(false);
                this.updateSelectedValue(this.selectedView, isUpdateModel);
                this.isFiltering = false;
                this.updateComboList();
                return;
            }
            if (key === ThfKeyCodeEnum.enter) {
                this.controlComboVisibility(true);
            }
        };
        /**
         * @param {?=} event
         * @return {?}
         */
        ThfComboComponent.prototype.onKeyUp = /**
         * @param {?=} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var key = event.keyCode || event.which;
            /** @type {?} */
            var inputValue = event.target.value;
            /** @type {?} */
            var isValidKey = (key !== ThfKeyCodeEnum.arrowUp && key !== ThfKeyCodeEnum.arrowDown && key !== ThfKeyCodeEnum.enter);
            if (isValidKey) {
                if (inputValue) {
                    if (!this.service && this.previousSearchValue !== inputValue) {
                        this.shouldMarkLetters = true;
                        this.isFiltering = true;
                        this.searchForLabel(inputValue, this.options, this.filterMode);
                    }
                }
                else {
                    // quando apagar rapido o campo e conter serviço, valor, não disparava o keyup observable
                    // necessario este tratamento para retornar a lista 'default'.
                    /** @type {?} */
                    var useDefaultOptionsService = this.service && this.selectedValue && this.selectedOption.label === this.previousSearchValue;
                    this.updateSelectedValue(null);
                    if (!this.service) {
                        this.updateComboList();
                    }
                    else if (useDefaultOptionsService) {
                        this.updateComboList(__spread(this.cacheOptions));
                    }
                    this.isFiltering = false;
                }
                // caso o valor pesquisado for diferente do anterior deve abrir o combo
                if (this.previousSearchValue !== inputValue) {
                    this.changeDetector.detectChanges();
                    this.controlComboVisibility(true);
                }
            }
            this.previousSearchValue = inputValue;
        };
        /**
         * @return {?}
         */
        ThfComboComponent.prototype.initInputObservable = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.service) {
                /** @type {?} */
                var keyupObservable = rxjs.fromEvent(this.inputElement.nativeElement, 'keyup')
                    .pipe(operators.filter((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return _this.isValidCharacterToSearch(e.keyCode); })), operators.map((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.currentTarget.value; })), operators.distinctUntilChanged(), operators.tap((/**
                 * @return {?}
                 */
                function () {
                    _this.shouldMarkLetters = false;
                })), operators.debounceTime(this.debounceTime));
                this.keyupSubscribe = keyupObservable.subscribe((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (value.length >= _this.filterMinlength || !value) {
                        _this.controlApplyFilter(value);
                    }
                }));
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfComboComponent.prototype.controlApplyFilter = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!this.isProcessingGetObjectByValue && (!this.selectedOption || value !== this.selectedOption.label)) {
                this.applyFilter(value);
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfComboComponent.prototype.applyFilter = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this.controlComboVisibility(false);
            this.isServerSearching = true;
            /** @type {?} */
            var param = { property: this.fieldLabel, value: value };
            this.filterSubscription = this.service.getFilteredData(param, this.filterParams)
                .subscribe((/**
             * @param {?} items
             * @return {?}
             */
            function (items) { return _this.setOptionsByApplyFilter(value, items); }));
        };
        /**
         * @param {?} value
         * @param {?} items
         * @return {?}
         */
        ThfComboComponent.prototype.setOptionsByApplyFilter = /**
         * @param {?} value
         * @param {?} items
         * @return {?}
         */
        function (value, items) {
            this.shouldMarkLetters = true;
            this.isServerSearching = false;
            this.options = items;
            this.searchForLabel(value, items, this.filterMode);
            this.changeDetector.detectChanges();
            this.controlComboVisibility(true);
            if (this.isFirstFilter) {
                this.isFirstFilter = !this.isFirstFilter;
                this.cacheOptions = this.options;
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfComboComponent.prototype.getObjectByValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (!this.selectedValue) {
                this.isProcessingGetObjectByValue = true;
                this.getSubscription = this.service.getObjectByValue(value, this.filterParams)
                    .subscribe((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return _this.updateOptionByFilteredValue(item); }));
            }
        };
        /**
         * @param {?} item
         * @return {?}
         */
        ThfComboComponent.prototype.updateOptionByFilteredValue = /**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            var _this = this;
            if (item) {
                this.options = [item];
                this.onOptionClick(item);
            }
            else {
                this.updateSelectedValue(null);
            }
            setTimeout((/**
             * @return {?}
             */
            function () { _this.isProcessingGetObjectByValue = false; }), this.debounceTime);
        };
        /**
         * @return {?}
         */
        ThfComboComponent.prototype.selectPreviousOption = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var currentViewValue = this.selectedView && this.selectedView.value;
            if (currentViewValue) {
                /** @type {?} */
                var nextOption = this.getNextOption(currentViewValue, this.visibleOptions, true);
                this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
            }
            else if (this.visibleOptions.length) {
                /** @type {?} */
                var visibleOption = this.visibleOptions[this.visibleOptions.length - 1];
                this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
            }
        };
        /**
         * @return {?}
         */
        ThfComboComponent.prototype.selectNextOption = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var currentViewValue = this.selectedView && this.selectedView.value;
            if (currentViewValue) {
                /** @type {?} */
                var nextOption = this.getNextOption(currentViewValue, this.visibleOptions);
                this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
            }
            else if (this.visibleOptions.length) {
                /** @type {?} */
                var index = this.changeOnEnter ? 1 : 0;
                /** @type {?} */
                var visibleOption = this.visibleOptions[index];
                this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
            }
        };
        /**
         * @return {?}
         */
        ThfComboComponent.prototype.toggleComboVisibility = /**
         * @return {?}
         */
        function () {
            if (this.disabled) {
                return;
            }
            if (this.service && !this.disabledInitFilter) {
                this.applyFilterInFirstClick();
            }
            this.controlComboVisibility(!this.comboOpen);
        };
        /**
         * @return {?}
         */
        ThfComboComponent.prototype.applyFilterInFirstClick = /**
         * @return {?}
         */
        function () {
            if (this.isFirstFilter && !this.selectedValue) {
                this.applyFilter('');
            }
        };
        /**
         * @param {?} toOpen
         * @return {?}
         */
        ThfComboComponent.prototype.controlComboVisibility = /**
         * @param {?} toOpen
         * @return {?}
         */
        function (toOpen) {
            toOpen ? this.open() : this.close();
        };
        /**
         * @param {?} option
         * @return {?}
         */
        ThfComboComponent.prototype.onOptionClick = /**
         * @param {?} option
         * @return {?}
         */
        function (option) {
            /** @type {?} */
            var inputValue = this.getInputValue();
            /** @type {?} */
            var isUpdateModel = (option.value !== this.selectedValue) || !!(this.selectedView && inputValue !== this.selectedView.label);
            this.updateSelectedValue(option, isUpdateModel);
            this.controlComboVisibility(false);
            this.updateComboList([__assign({}, this.selectedView)]);
            this.previousSearchValue = this.selectedView.label;
        };
        /**
         * @param {?} index
         * @return {?}
         */
        ThfComboComponent.prototype.scrollTo = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            /** @type {?} */
            var scrollTop = (index <= 2) ? 0 : (index * 44) - 88;
            this.setScrollTop(scrollTop);
        };
        /**
         * @return {?}
         */
        ThfComboComponent.prototype.getInputValue = /**
         * @return {?}
         */
        function () {
            return this.inputElement.nativeElement.value;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfComboComponent.prototype.setInputValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.inputElement.nativeElement.value = value;
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfComboComponent.prototype.wasClickedOnToggle = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.comboOpen &&
                !this.inputElement.nativeElement.contains(event.target) &&
                !this.iconElement.nativeElement.contains(event.target) &&
                (!this.contentElement || !this.contentElement.nativeElement.contains(event.target))) {
                // Esconde Content do Combo quando for clicado fora
                this.controlComboVisibility(false);
                this.verifyValidOption();
                // caso for changeOnEnter deve limpar o selectedView para reinicia-lo
                this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
                this.updateComboList();
            }
            else {
                if (this.service && !this.getInputValue() && !this.isFirstFilter) {
                    this.applyFilter('');
                }
            }
        };
        /**
         * @param {?} label
         * @return {?}
         */
        ThfComboComponent.prototype.getLabelFormatted = /**
         * @param {?} label
         * @return {?}
         */
        function (label) {
            /** @type {?} */
            var format = label;
            if (this.isFiltering ||
                (this.service && this.getInputValue() && !this.compareObjects(this.cacheOptions, this.visibleOptions) && this.shouldMarkLetters)) {
                /** @type {?} */
                var labelInput = this.getInputValue().toString().toLowerCase();
                /** @type {?} */
                var labelLowerCase = label.toLowerCase();
                /** @type {?} */
                var openTagBold = '<span class="thf-font-text-large-bold">';
                /** @type {?} */
                var closeTagBold = '</span>';
                /** @type {?} */
                var startString = void 0;
                /** @type {?} */
                var middleString = void 0;
                /** @type {?} */
                var endString = void 0;
                switch (this.filterMode) {
                    case ThfComboFilterMode.startsWith:
                    case ThfComboFilterMode.contains:
                        startString = label.substring(0, labelLowerCase.indexOf(labelInput));
                        middleString = label.substring(labelLowerCase.indexOf(labelInput), labelLowerCase.indexOf(labelInput) + labelInput.length);
                        endString = label.substring(labelLowerCase.indexOf(labelInput) + labelInput.length);
                        format = startString + openTagBold + middleString + closeTagBold + endString;
                        break;
                    case ThfComboFilterMode.endsWith:
                        startString = label.substring(0, labelLowerCase.lastIndexOf(labelInput));
                        middleString = label.substring(labelLowerCase.lastIndexOf(labelInput));
                        format = startString + openTagBold + middleString + closeTagBold;
                        break;
                }
            }
            return this.safeHtml(format);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfComboComponent.prototype.safeHtml = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return this.sanitized.bypassSecurityTrustHtml(value);
        };
        /**
         * @param {?} keyCode
         * @return {?}
         */
        ThfComboComponent.prototype.isValidCharacterToSearch = /**
         * @param {?} keyCode
         * @return {?}
         */
        function (keyCode) {
            return (keyCode !== 9 && // tab
                keyCode !== 13 && // entet
                keyCode !== 16 && // shift
                keyCode !== 17 && // ctrl
                keyCode !== 18 && // alt
                keyCode !== 20 && // capslock
                keyCode !== 27 && // esc
                keyCode !== 37 && // seta
                keyCode !== 38 && // seta
                keyCode !== 39 && // seta
                keyCode !== 40 && // seta
                keyCode !== 93); // windows menu
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfComboComponent.prototype.searchOnEnter = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.service && !this.selectedView && value.length >= this.filterMinlength) {
                this.controlApplyFilter(value);
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfComboComponent.prototype.adjustContainerPosition = /**
         * @private
         * @return {?}
         */
        function () {
            this.controlPosition.adjustPosition(thfComboContainerPositionDefault);
        };
        /**
         * @private
         * @return {?}
         */
        ThfComboComponent.prototype.close = /**
         * @private
         * @return {?}
         */
        function () {
            this.comboOpen = false;
            this.changeDetector.detectChanges();
            this.comboIcon = 'thf-icon-arrow-down';
            this.removeListeners();
            this.isFiltering = false;
        };
        /**
         * @private
         * @return {?}
         */
        ThfComboComponent.prototype.initializeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.removeListeners();
            this.clickoutListener = this.renderer.listen('document', 'click', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.wasClickedOnToggle(event);
            }));
            this.eventResizeListener = this.renderer.listen('window', 'resize', (/**
             * @return {?}
             */
            function () {
                // timeout necessario pois a animação do thf-menu impacta no ajuste da posição do container.
                setTimeout((/**
                 * @return {?}
                 */
                function () { return _this.adjustContainerPosition(); }), 250);
            }));
            window.addEventListener('scroll', this.onScroll, true);
        };
        /**
         * @private
         * @return {?}
         */
        ThfComboComponent.prototype.open = /**
         * @private
         * @return {?}
         */
        function () {
            this.comboOpen = true;
            this.changeDetector.detectChanges();
            this.comboIcon = 'thf-icon-arrow-up';
            this.initializeListeners();
            this.inputElement.nativeElement.focus();
            this.scrollTo(this.getIndexSelectedView());
            this.setContainerPosition();
        };
        /**
         * @private
         * @return {?}
         */
        ThfComboComponent.prototype.removeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
            if (this.eventResizeListener) {
                this.eventResizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        /**
         * @private
         * @return {?}
         */
        ThfComboComponent.prototype.setContainerPosition = /**
         * @private
         * @return {?}
         */
        function () {
            this.controlPosition.setElements(this.containerElement.nativeElement, thfComboContainerOffset, this.inputElement, ['top', 'bottom'], true);
            this.adjustContainerPosition();
        };
        /**
         * @private
         * @param {?} scrollTop
         * @return {?}
         */
        ThfComboComponent.prototype.setScrollTop = /**
         * @private
         * @param {?} scrollTop
         * @return {?}
         */
        function (scrollTop) {
            if (this.contentElement) {
                this.contentElement.nativeElement.scrollTop = scrollTop;
            }
        };
        ThfComboComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-combo',
                        template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n    <div *ngIf=\"icon\" class=\"thf-field-icon-container-left\">\n      <span class=\"thf-icon thf-field-icon {{icon}}\" [class.thf-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inputElement\n      class=\"thf-input thf-combo-input\"\n      [class.thf-input-icon-left]=\"icon\"\n      autocomplete=\"off\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      (click)=\"toggleComboVisibility()\"\n      (keyup)=\"onKeyUp($event)\"\n      (keyup.enter)=\"searchOnEnter($event.target.value)\"\n      (keydown)=\"onKeyDown($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <span #iconArrow\n        class=\"thf-icon thf-field-icon {{ comboIcon }}\"\n        [class.thf-field-icon-disabled]=\"disabled\"\n        [class.thf-field-icon]=\"!disabled\"\n        (click)=\"toggleComboVisibility()\">\n      </span>\n    </div>\n  </div>\n\n  <div #containerElement class=\"thf-combo-container\" [hidden]=\"!comboOpen && !isServerSearching\">\n\n    <ng-container *ngIf=\"isServerSearching; then loadingTemplate; else optionsTemplate\">\n    </ng-container>\n\n  </div>\n\n  <thf-field-container-bottom></thf-field-container-bottom>\n\n</thf-field-container>\n\n<ng-template #loadingTemplate>\n  <div class=\"thf-combo-container-loading\">\n    <thf-loading></thf-loading>\n  </div>\n</ng-template>\n\n<ng-template #optionsTemplate>\n  <ng-container *ngIf=\"visibleOptions.length; then visibleOptionsTemplate ; else noDataTemplate\">\n  </ng-container>\n</ng-template>\n\n<ng-template #visibleOptionsTemplate>\n  <ul #contentElement class=\"thf-combo-container-content\">\n    <li *ngFor=\"let option of visibleOptions\"\n      [class.thf-combo-item-selected]=\"compareObjects(selectedView, option)\"\n      (click)=\"onOptionClick(option)\">\n      <a class=\"thf-combo-item\" [innerHTML]=\"getLabelFormatted(option?.label)\"></a>\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template #noDataTemplate>\n  <div class=\"thf-combo-container-no-data\">\n    <div class=\"thf-combo-no-data thf-text-center\">\n      <span>\n        {{ literals.noData }}\n      </span>\n    </div>\n  </div>\n</ng-template>\n",
                        providers: [
                            ThfComboFilterService,
                            ThfControlPositionService,
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfComboComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfComboComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfComboComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.IterableDiffers },
            { type: ThfComboFilterService },
            { type: core.Renderer2 },
            { type: core.ChangeDetectorRef },
            { type: ThfControlPositionService },
            { type: platformBrowser.DomSanitizer }
        ]; };
        ThfComboComponent.propDecorators = {
            containerElement: [{ type: core.ViewChild, args: ['containerElement', { read: core.ElementRef, static: false },] }],
            contentElement: [{ type: core.ViewChild, args: ['contentElement', { read: core.ElementRef, static: false },] }],
            iconElement: [{ type: core.ViewChild, args: ['iconArrow', { read: core.ElementRef, static: true },] }],
            inputElement: [{ type: core.ViewChild, args: ['inputElement', { read: core.ElementRef, static: true },] }]
        };
        return ThfComboComponent;
    }(ThfComboBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Para usar o thf-mask é preciso instanciar esta classe passando a máscara como
     * primeiro parâmetro, e no segundo parâmetro, deve se informado true, caso queira
     * que o model seja formatado ou false para o que o model seja limpo.
     */
    var /**
     * Para usar o thf-mask é preciso instanciar esta classe passando a máscara como
     * primeiro parâmetro, e no segundo parâmetro, deve se informado true, caso queira
     * que o model seja formatado ou false para o que o model seja limpo.
     */
    ThfMask = /** @class */ (function () {
        function ThfMask(mask, formatModel) {
            this.mask = '';
            this.formatModel = false;
            // controle de posição
            this.initialPosition = 0;
            this.finalPosition = 0;
            this.pattern = '';
            this.mask = mask;
            this.formatModel = formatModel;
            this.pattern = this.getRegexFromMask(mask);
        }
        Object.defineProperty(ThfMask.prototype, "getPattern", {
            get: /**
             * @return {?}
             */
            function () {
                return this.pattern;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMask.prototype, "getValueToInput", {
            get: /**
             * @return {?}
             */
            function () {
                return this.valueToInput;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMask.prototype, "setValueToInput", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.valueToInput = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMask.prototype, "getValueToModel", {
            get: /**
             * @return {?}
             */
            function () {
                return this.valueToModel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMask.prototype, "setValueToModel", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.valueToModel = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} $event
         * @return {?}
         */
        ThfMask.prototype.keyup = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if (this.mask) {
                /** @type {?} */
                var value = $event.target.value;
                // formata o valor quando for colado com control + v e reposiciona o cursor
                if ($event.keyCode === 17 || $event.keyCode === 91) {
                    $event.target.value = this.controlFormatting(value);
                    this.resetPositions($event);
                }
                $event.preventDefault();
                switch ($event.keyCode) {
                    case 37: // seta esquerda
                        if (this.initialPosition > 0) {
                            this.initialPosition--;
                        }
                        this.setPositionNotShiftKey($event);
                        this.setSelectionRange($event);
                        break;
                    case 39: // seta direita
                        if (this.initialPosition < value.toString().length) {
                            this.initialPosition++;
                        }
                        this.setPositionNotShiftKey($event);
                        this.setSelectionRange($event);
                        break;
                    case 35: // end
                        this.finalPosition = value.toString().length;
                        if ($event.shiftKey) {
                            this.setPositions($event);
                        }
                        else {
                            this.initialPosition = this.finalPosition;
                            this.setPositions($event);
                        }
                        break;
                    case 36: // HOME
                        if ($event.shiftKey) {
                            this.finalPosition = this.initialPosition;
                            this.initialPosition = 0;
                            this.setPositions($event);
                        }
                        else {
                            this.initialPosition = 0;
                            this.finalPosition = 0;
                            this.setPositions($event);
                        }
                        break;
                }
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        ThfMask.prototype.setPositionNotShiftKey = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if (!$event.shiftKey) {
                this.finalPosition = this.initialPosition;
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        ThfMask.prototype.setSelectionRange = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if (this.initialPosition > this.finalPosition) {
                $event.target.setSelectionRange(this.finalPosition, this.initialPosition);
            }
            else {
                $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        ThfMask.prototype.keydown = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if (this.mask) {
                /** @type {?} */
                var value = $event.target.value;
                if ($event.keyCode === 9) {
                    return;
                }
                if (!$event.ctrlKey && !$event.metaKey) {
                    $event.preventDefault();
                }
                // Não faz nada quando for digitado CTRL ou COMMAND e V
                // Já está sendo tratado no evento keyup
                if ($event.ctrlKey || $event.metaKey && ($event.keyCode !== 86) ||
                    ($event.keyCode >= 37 && $event.keyCode <= 40) || $event.keyCode === 16 || $event.keyCode === 9) {
                    return;
                }
                // Valida a tecla digitada
                if (this.isKeyValid($event.keyCode)) {
                    if (this.finalPosition === null) {
                        this.finalPosition = this.initialPosition;
                    }
                    this.revertPositions(this.initialPosition, this.finalPosition);
                    switch ($event.keyCode) {
                        case 8: // backspace
                            this.getPosition($event);
                            if (this.initialPosition < 0) {
                                this.initialPosition = 0;
                                this.setPositions($event);
                            }
                            if (this.initialPosition === this.finalPosition) {
                                this.checkMaskBefore($event, -1);
                                if (this.initialPosition !== 0) {
                                    value = value.slice(0, this.initialPosition - 1) + value.slice(this.finalPosition);
                                    value = this.controlFormatting(value);
                                    $event.target.value = value;
                                    this.changePosition($event, -1);
                                    this.checkMaskBefore($event, -1);
                                    this.setPositions($event);
                                    this.resetPositions($event);
                                }
                            }
                            else {
                                this.clearRangeSelection(value, $event, true);
                            }
                            this.setPositions($event);
                            break;
                        case 46: // delete
                            this.getPosition($event);
                            if (this.initialPosition === this.finalPosition) {
                                this.checkMaskAfter($event, 1);
                                value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition + 1);
                                value = this.controlFormatting(value);
                                $event.target.value = value;
                                this.setPositions($event);
                                this.resetPositions($event);
                            }
                            else {
                                this.clearRangeSelection(value, $event, false);
                            }
                            this.setPositions($event);
                            break;
                        default: // qualquer outra tecla válida
                            value = value.slice(0, this.initialPosition) + $event.key + value.slice(this.finalPosition);
                            value = this.controlFormatting(value);
                            $event.target.value = value;
                            this.changePosition($event, 1);
                            this.checkMaskBefore($event, 1);
                            this.setPositions($event);
                            this.resetPositions($event);
                            this.setPositions($event);
                    }
                }
            }
        };
        /**
         * @param {?} value
         * @param {?} $event
         * @param {?} isBackspace
         * @return {?}
         */
        ThfMask.prototype.clearRangeSelection = /**
         * @param {?} value
         * @param {?} $event
         * @param {?} isBackspace
         * @return {?}
         */
        function (value, $event, isBackspace) {
            value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition);
            value = this.controlFormatting(value);
            $event.target.value = value;
            if (isBackspace) {
                this.checkMaskBefore($event, -1);
            }
            this.setPositions($event);
            this.resetPositions($event);
        };
        // passa a posição do click para o controle de posição
        // passa a posição do click para o controle de posição
        /**
         * @param {?} $event
         * @return {?}
         */
        ThfMask.prototype.click = 
        // passa a posição do click para o controle de posição
        /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.initialPosition = $event.target.selectionStart;
            this.finalPosition = $event.target.selectionEnd;
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        ThfMask.prototype.blur = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            // Se houver algum valor definido na máscara
            if (this.mask) {
                // pega o valor do campo, formata e passa para o model
                /** @type {?} */
                var value = $event.target.value;
                value = this.controlFormatting(value);
                $event.target.value = value;
            }
        };
        /**
         * @param {?} initialPosition
         * @param {?} finalPosition
         * @return {?}
         */
        ThfMask.prototype.revertPositions = /**
         * @param {?} initialPosition
         * @param {?} finalPosition
         * @return {?}
         */
        function (initialPosition, finalPosition) {
            if (initialPosition > finalPosition) {
                // inverte o controle de posição caso o inicial esteja maior que o final
                /** @type {?} */
                var tempPosition = void 0;
                tempPosition = initialPosition;
                this.initialPosition = finalPosition;
                this.finalPosition = tempPosition;
            }
        };
        // reseta o controle de posição
        // reseta o controle de posição
        /**
         * @param {?} $event
         * @return {?}
         */
        ThfMask.prototype.resetPositions = 
        // reseta o controle de posição
        /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.initialPosition = $event.target.selectionStart;
            this.finalPosition = this.initialPosition;
        };
        // posiciona o cursor de acordo com o controle de posição
        // posiciona o cursor de acordo com o controle de posição
        /**
         * @param {?} $event
         * @return {?}
         */
        ThfMask.prototype.setPositions = 
        // posiciona o cursor de acordo com o controle de posição
        /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
        };
        // muda a posição do cursor e atualiza o controle de posição
        // muda a posição do cursor e atualiza o controle de posição
        /**
         * @param {?} $event
         * @param {?} value
         * @return {?}
         */
        ThfMask.prototype.changePosition = 
        // muda a posição do cursor e atualiza o controle de posição
        /**
         * @param {?} $event
         * @param {?} value
         * @return {?}
         */
        function ($event, value) {
            this.initialPosition = this.initialPosition + value;
            this.finalPosition = this.finalPosition + value;
            this.setPositions($event);
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        ThfMask.prototype.getPosition = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.initialPosition = $event.target.selectionStart;
            this.finalPosition = $event.target.selectionEnd;
            this.setPositions($event);
        };
        // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
        // quando houver valores opcionais (?)
        // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
        // quando houver valores opcionais (?)
        /**
         * @param {?} value
         * @return {?}
         */
        ThfMask.prototype.controlFormatting = 
        // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
        // quando houver valores opcionais (?)
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // Se o valor for vazio, retorna vazio
            if (!value) {
                this.valueToInput = '';
                this.valueToModel = '';
                return '';
            }
            /** @type {?} */
            var valueProcessed;
            /** @type {?} */
            var maskTmp = this.mask;
            // Array que será usado para armazenar todas as máscaras possíveis para
            // quando houver um valor opcional (?)
            /** @type {?} */
            var arrMasks = [];
            /** @type {?} */
            var contMasks = 0;
            // Enquanto houver algum 9? na máscara
            while (this.hasOptionalNumber(maskTmp)) {
                arrMasks.push(maskTmp);
                maskTmp = this.replaceOptionalNumber(maskTmp);
            }
            arrMasks.push(maskTmp);
            // Inverte o array
            arrMasks.reverse();
            // Informa que a formatação ainda não chegou ao fim
            this.formattingEnds = false;
            while (!this.formattingEnds) {
                // Seta a formatação como terminada
                // Então o método formatValue irá setar como não terminado caso haja
                this.formattingEnds = true;
                // Se não existe mais nenhuma máscara possível, então encerra a formatação
                if (!arrMasks[contMasks]) {
                    break;
                }
                // Chama a formatação passando a máscara e o valor
                valueProcessed = this.formatValue(value, arrMasks[contMasks]);
                contMasks++;
            }
            return valueProcessed;
        };
        // Função que formata a máscara com o valor passado
        // Função que formata a máscara com o valor passado
        /**
         * @param {?} value
         * @param {?} mask
         * @return {?}
         */
        ThfMask.prototype.formatValue = 
        // Função que formata a máscara com o valor passado
        /**
         * @param {?} value
         * @param {?} mask
         * @return {?}
         */
        function (value, mask) {
            // Remove as marcas de valor opciona (?)
            mask = mask.replace(/\?/g, '');
            // Substitui todos os caracteres que não são fixos da máscara por _
            /** @type {?} */
            var guide = mask.replace(this.listValidKeys(), '_');
            // Contador usado para percorrer o guide
            /** @type {?} */
            var contGuide = 0;
            // String final formatada
            /** @type {?} */
            var valueProcessed = '';
            // Remove do valor todos os caracteres fixos como ()/-+
            value = this.removeFormattingValue(value);
            // Percorre todo o valor e coloca a formatação de acordo com a máscara
            for (var i = 0; i < value.length; i++) {
                /** @type {?} */
                var charValue = value[i];
                // Se o guide acabou, seta a formatação como não terminada para que o método controlFormatting
                // tente formatar com outra possível máscara
                if (!guide[contGuide]) {
                    this.formattingEnds = false;
                    break;
                }
                // Percorre o Guide enquanto tem caracteres fixos
                while (this.isFixedCharacterGuide(guide[contGuide]) && guide[contGuide]) {
                    valueProcessed += guide[contGuide];
                    contGuide++;
                }
                // É um caracter válido de acordo com a máscara
                if (this.isKeyValidMask(charValue, mask[contGuide])) {
                    valueProcessed += charValue;
                    contGuide++;
                }
                else {
                    // Se não é um caracter válido, deve interromper.
                    break;
                }
            }
            if (this.formatModel) {
                this.valueToInput = valueProcessed;
                this.valueToModel = valueProcessed;
            }
            else {
                this.valueToInput = valueProcessed;
                this.valueToModel = this.removeFormattingValue(valueProcessed);
            }
            return valueProcessed;
        };
        // verifica se tem algum caracter de mascara antes do cursor
        // verifica se tem algum caracter de mascara antes do cursor
        /**
         * @param {?} $event
         * @param {?} position
         * @return {?}
         */
        ThfMask.prototype.checkMaskBefore = 
        // verifica se tem algum caracter de mascara antes do cursor
        /**
         * @param {?} $event
         * @param {?} position
         * @return {?}
         */
        function ($event, position) {
            if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition - 1))) {
                this.changePosition($event, position);
                this.checkMaskBefore($event, position);
            }
        };
        // verifica se tem algum caracter de mascara depois do cursor
        // verifica se tem algum caracter de mascara depois do cursor
        /**
         * @param {?} $event
         * @param {?} position
         * @return {?}
         */
        ThfMask.prototype.checkMaskAfter = 
        // verifica se tem algum caracter de mascara depois do cursor
        /**
         * @param {?} $event
         * @param {?} position
         * @return {?}
         */
        function ($event, position) {
            if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition))) {
                this.changePosition($event, position);
                this.checkMaskAfter($event, position);
            }
        };
        // Retorna a máscara sem um valor opcional
        // Retorna a máscara sem um valor opcional
        /**
         * @param {?} mask
         * @return {?}
         */
        ThfMask.prototype.replaceOptionalNumber = 
        // Retorna a máscara sem um valor opcional
        /**
         * @param {?} mask
         * @return {?}
         */
        function (mask) {
            /** @type {?} */
            var i = 9;
            while (i >= 0) {
                if (mask.indexOf(i + '?') > -1) {
                    return mask.replace(i + '?', '');
                }
                i--;
            }
            return mask;
        };
        // Verifica se contém caracteres permitidos somente na máscara \/() +-
        // Verifica se contém caracteres permitidos somente na máscara \/() +-
        /**
         * @param {?} key
         * @return {?}
         */
        ThfMask.prototype.isFixedCharacterGuide = 
        // Verifica se contém caracteres permitidos somente na máscara \/() +-
        /**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            return this.testRegex(key, this.getFixedCharacterGuide());
        };
        // Retorna caracteres permitidos somente na máscara \/() +-
        // Retorna caracteres permitidos somente na máscara \/() +-
        /**
         * @return {?}
         */
        ThfMask.prototype.getFixedCharacterGuide = 
        // Retorna caracteres permitidos somente na máscara \/() +-
        /**
         * @return {?}
         */
        function () {
            return /[\\\/() +-.\:]/g;
        };
        // Caracteres permitidos de serem digitados
        // Caracteres permitidos de serem digitados
        /**
         * @return {?}
         */
        ThfMask.prototype.listValidKeys = 
        // Caracteres permitidos de serem digitados
        /**
         * @return {?}
         */
        function () {
            return /[a-zA-Z0-9]/g;
        };
        // Se é um dígito válido
        // Se é um dígito válido
        /**
         * @param {?} keyCode
         * @return {?}
         */
        ThfMask.prototype.isKeyValid = 
        // Se é um dígito válido
        /**
         * @param {?} keyCode
         * @return {?}
         */
        function (keyCode) {
            return this.isKeyCodeValid(keyCode);
        };
        // Verifica se a tecla digitada é permitida
        // Permite apenas números, letras, backspace e del
        // Verifica se a tecla digitada é permitida
        // Permite apenas números, letras, backspace e del
        /**
         * @param {?} keyCode
         * @return {?}
         */
        ThfMask.prototype.isKeyCodeValid = 
        // Verifica se a tecla digitada é permitida
        // Permite apenas números, letras, backspace e del
        /**
         * @param {?} keyCode
         * @return {?}
         */
        function (keyCode) {
            return ((keyCode >= 48 && keyCode <= 57) ||
                (keyCode >= 65 && keyCode <= 90) ||
                (keyCode >= 96 && keyCode <= 105) ||
                (keyCode === 8) || keyCode === 9 ||
                (keyCode === 46));
        };
        // Se está de acordo com a máscara
        // Se está de acordo com a máscara
        /**
         * @param {?} key
         * @param {?} keyMask
         * @return {?}
         */
        ThfMask.prototype.isKeyValidMask = 
        // Se está de acordo com a máscara
        /**
         * @param {?} key
         * @param {?} keyMask
         * @return {?}
         */
        function (key, keyMask) {
            return this.testRegex(key, this.replaceMask(keyMask));
        };
        // Retorna se a chave foi aprovada pela expressão regular
        // Retorna se a chave foi aprovada pela expressão regular
        /**
         * @param {?} key
         * @param {?} regex
         * @return {?}
         */
        ThfMask.prototype.testRegex = 
        // Retorna se a chave foi aprovada pela expressão regular
        /**
         * @param {?} key
         * @param {?} regex
         * @return {?}
         */
        function (key, regex) {
            return regex.test(key);
        };
        // Remove a formatacão do valor
        // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
        // Remove a formatacão do valor
        // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
        /**
         * @param {?} value
         * @return {?}
         */
        ThfMask.prototype.removeFormattingValue = 
        // Remove a formatacão do valor
        // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return value.replace(this.getFixedCharacterGuide(), '');
        };
        // Verifica se contém valor opcional na máscara 0-9?
        // Verifica se contém valor opcional na máscara 0-9?
        /**
         * @param {?} mask
         * @return {?}
         */
        ThfMask.prototype.hasOptionalNumber = 
        // Verifica se contém valor opcional na máscara 0-9?
        /**
         * @param {?} mask
         * @return {?}
         */
        function (mask) {
            return mask.match(/\d\?/g);
        };
        // Retorna a expressão regular correspondente ao comando passado
        // Retorna a expressão regular correspondente ao comando passado
        /**
         * @param {?} char
         * @return {?}
         */
        ThfMask.prototype.replaceMask = 
        // Retorna a expressão regular correspondente ao comando passado
        /**
         * @param {?} char
         * @return {?}
         */
        function (char) {
            /** @type {?} */
            var regex = /./;
            switch (char) {
                case '0':
                    regex = /[0]/;
                    break;
                case '1':
                    regex = /[0-1]/;
                    break;
                case '2':
                    regex = /[0-2]/;
                    break;
                case '3':
                    regex = /[0-3]/;
                    break;
                case '4':
                    regex = /[0-4]/;
                    break;
                case '5':
                    regex = /[0-5]/;
                    break;
                case '6':
                    regex = /[0-6]/;
                    break;
                case '7':
                    regex = /[0-7]/;
                    break;
                case '8':
                    regex = /[0-8]/;
                    break;
                case '9':
                    regex = /[0-9]/;
                    break;
                case ' ':
                    regex = /\s/;
                    break;
                case '@':
                    regex = /[a-zA-Z]/;
                    break;
                case 'w':
                    regex = /[a-zA-Z0-9]/;
                    break;
            }
            return regex;
        };
        /**
         * @param {?} mask
         * @return {?}
         */
        ThfMask.prototype.getRegexFromMask = /**
         * @param {?} mask
         * @return {?}
         */
        function (mask) {
            if (mask) {
                /** @type {?} */
                var pattern = void 0;
                if (this.formatModel) {
                    pattern = mask.replace(/\\/g, '\\\\');
                    pattern = pattern.replace(/\+/g, '\\+');
                    pattern = pattern.replace(/\./g, '\\.');
                    pattern = pattern.replace(/-/g, '-');
                    pattern = pattern.replace(/\(/g, '\\(');
                    pattern = pattern.replace(/\)/g, '\\)');
                    pattern = pattern.replace(/\//g, '\\/');
                    pattern = pattern.replace(/\s/g, '\\s');
                    pattern = pattern.replace(/:/g, '\\:');
                    pattern = pattern.replace(/\@(?!\s)/g, '\\w');
                    pattern = pattern.replace(/\d/g, '\\w');
                }
                else {
                    pattern = mask.replace(/\\/g, '');
                    pattern = pattern.replace(/\+/g, '');
                    pattern = pattern.replace(/\./g, '');
                    pattern = pattern.replace(/-/g, '');
                    pattern = pattern.replace(/\(/g, '');
                    pattern = pattern.replace(/\)/g, '');
                    pattern = pattern.replace(/\//g, '');
                    pattern = pattern.replace(/\s/g, '');
                    pattern = pattern.replace(/:/g, '');
                    pattern = pattern.replace(/\@/g, '\\w');
                    pattern = pattern.replace(/\d/g, '\\w');
                }
                return pattern;
            }
            else {
                return null;
            }
        };
        return ThfMask;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfDatepickerFormatDefault = 'dd/mm/yyyy';
    /**
     * \@description
     *
     * O `thf-datepicker` é um componente específico para manipulação de datas permitindo a digitação e / ou seleção.
     *
     * O formato de exibição da data, ou seja, o formato que é apresentado ao usuário é o dd/mm/yyyy,
     * mas podem ser definidos outros padrões (veja mais na propriedade `t-format`).
     *
     * O idioma padrão do calendário será exibido de acordo com o navegador, caso tenha necessidade de alterar
     * use a propriedade `t-locale`.
     *
     * O datepicker aceita três formatos de data: o E8601DZw (yyyy-mm-ddThh:mm:ss+|-hh:mm), o E8601DAw (yyyy-mm-dd) e o
     * Date padrão do Javascript.
     *
     * > O formato de saída do *model* se ajusta conforme o formato de entrada, veja abaixo:
     *
     * - Formato de entrada e saída (E8601DZw) - `'2017-11-28T00:00:00-02:00'`;
     *
     * - Formato de entrada e saída (E8601DAw) - `'2017-11-28'`;
     *
     * - Formato de entrada (Date) - `new Date(2017, 10, 28)` e saída (E8601DAw) - `'2017-11-28'`;
     *
     * **Importante:**
     *
     * - Para utilizar datas com ano inferior a 100, verificar o comportamento do [`new Date`](https://www.w3schools.com/js/js_dates.asp)
     * e utilizar o método [`setFullYear`](https://www.w3schools.com/jsref/jsref_setfullyear.asp).
     * - Caso a data esteja inválida, o `model` receberá **'Data inválida'**.
     * - Caso o `input` esteja passando um `[(ngModel)]`, mas não tenha um `name`, então irá ocorrer um erro
     * do próprio Angular (`[ngModelOptions]="{standalone: true}"`).
     *
     * Exemplo:
     *
     * ```
     * <thf-datepicker
     *   [(ngModel)]="pessoa.nome"
     *   [ngModelOptions]="{standalone: true}"
     * </thf-datepicker>
     * ```
     *
     * > Não esqueça de importar o `FormsModule` em seu módulo, tal como para utilizar o `input default`.
     * @abstract
     */
    var ThfDatepickerBaseComponent = /** @class */ (function () {
        function ThfDatepickerBaseComponent() {
            this._format = thfDatepickerFormatDefault;
            this._placeholder = '';
            this.firstStart = true;
            this.hour = 'T00:00:01-00:00';
            this.isExtendedISO = false;
            this.onChangeModel = null;
            this.onTouchedModel = null;
            /**
             * Desabilita o campo.
             */
            this.disabled = false;
            /**
             * Torna o elemento somente leitura.
             */
            this.readonly = false;
            /**
             * Faz com que o campo seja obrigatório.
             */
            this.required = false;
            /**
             * Aplica foco ao elemento ao ser iniciado.
             */
            this.focus = false;
            /**
             * Habilita ação para limpar o campo.
             */
            this.clean = false;
            /**
             * Mensagem apresentada quando a data for inválida ou fora do período.
             *
             * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.
             */
            this.errorPattern = '';
            /**
             * Evento disparado ao sair do campo.
             */
            this.onblur = new core.EventEmitter();
            /**
             * Evento disparado ao alterar valor do campo.
             */
            this.onchange = new core.EventEmitter();
        }
        Object.defineProperty(ThfDatepickerBaseComponent.prototype, "placeholder", {
            get: /**
             * @return {?}
             */
            function () {
                return this._placeholder;
            },
            /**
             * @optional
             *
             * @description
             *
             * Mensagem que aparecerá enquanto o campo não estiver preenchido.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Mensagem que aparecerá enquanto o campo não estiver preenchido.
             * @param {?} placeholder
             * @return {?}
             */
            function (placeholder) {
                this._placeholder = isTypeof(placeholder, 'string') ? placeholder : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setDisabled", {
            set: /**
             * @param {?} disabled
             * @return {?}
             */
            function (disabled) {
                this.disabled = disabled === '' ? true : convertToBoolean(disabled);
                this.validateModel(convertDateToISOExtended(this.date, this.hour));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setReadonly", {
            set: /**
             * @param {?} readonly
             * @return {?}
             */
            function (readonly) {
                this.readonly = readonly === '' ? true : convertToBoolean(readonly);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setRequired", {
            set: /**
             * @param {?} required
             * @return {?}
             */
            function (required) {
                this.required = required === '' ? true : convertToBoolean(required);
                this.validateModel(convertDateToISOExtended(this.date, this.hour));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setFocus", {
            set: /**
             * @param {?} focus
             * @return {?}
             */
            function (focus) {
                this.focus = focus === '' ? true : convertToBoolean(focus);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerBaseComponent.prototype, "setClean", {
            set: /**
             * @param {?} clean
             * @return {?}
             */
            function (clean) {
                this.clean = clean === '' ? true : convertToBoolean(clean);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerBaseComponent.prototype, "minDate", {
            get: /**
             * @return {?}
             */
            function () {
                return this._minDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma data mínima para o `thf-datepicker`.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define uma data mínima para o `thf-datepicker`.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value instanceof Date) {
                    /** @type {?} */
                    var year = value.getFullYear();
                    /** @type {?} */
                    var date = new Date(year, value.getMonth(), value.getDate(), 0, 0, 0);
                    setYearFrom0To100(date, year);
                    this._minDate = date;
                }
                else {
                    this._minDate = convertIsoToDate(value, true, false);
                }
                this.validateModel(convertDateToISOExtended(this.date, this.hour));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerBaseComponent.prototype, "maxDate", {
            get: /**
             * @return {?}
             */
            function () {
                return this._maxDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma data máxima para o `thf-datepicker`.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define uma data máxima para o `thf-datepicker`.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value instanceof Date) {
                    /** @type {?} */
                    var year = value.getFullYear();
                    /** @type {?} */
                    var date = new Date(year, value.getMonth(), value.getDate(), 23, 59, 59);
                    setYearFrom0To100(date, year);
                    this._maxDate = date;
                }
                else {
                    this._maxDate = convertIsoToDate(value, false, true);
                }
                this.validateModel(convertDateToISOExtended(this.date, this.hour));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerBaseComponent.prototype, "format", {
            get: /**
             * @return {?}
             */
            function () {
                return this._format;
            },
            /**
             * @optional
             *
             * @description
             *
             * Formato de exibição da data.
             *
             * Valores válidos:
             *  - `dd/mm/yyyy`
             *  - `mm/dd/yyyy`
             *  - `yyyy/mm/dd`
             *
             * @default `dd/mm/yyyy`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Formato de exibição da data.
             *
             * Valores válidos:
             *  - `dd/mm/yyyy`
             *  - `mm/dd/yyyy`
             *  - `yyyy/mm/dd`
             *
             * \@default `dd/mm/yyyy`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value) {
                    value = value.toLowerCase();
                    if (value.match(/dd/) && value.match(/mm/) && value.match(/yyyy/)) {
                        this._format = value;
                        this.objMask = this.buildMask();
                        this.refreshValue(this.date);
                        return;
                    }
                }
                this._format = thfDatepickerFormatDefault;
                this.objMask = this.buildMask();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerBaseComponent.prototype, "locale", {
            get: /**
             * @return {?}
             */
            function () {
                return this._locale || getShortBrowserLanguage();
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value) {
                    this._locale = value.length >= 2 ? value : 'pt';
                }
                else {
                    this._locale = getShortBrowserLanguage();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfDatepickerBaseComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            // Classe de máscara
            this.objMask = this.buildMask();
        };
        // Converte um objeto string em Date
        // Converte um objeto string em Date
        /**
         * @param {?} dateString
         * @return {?}
         */
        ThfDatepickerBaseComponent.prototype.getDateFromString = 
        // Converte um objeto string em Date
        /**
         * @param {?} dateString
         * @return {?}
         */
        function (dateString) {
            /** @type {?} */
            var day = parseInt(dateString.substring(this.format.indexOf('d'), this.format.indexOf('d') + 2), 10);
            /** @type {?} */
            var month = parseInt(dateString.substring(this.format.indexOf('m'), this.format.indexOf('m') + 2), 10) - 1;
            /** @type {?} */
            var year = parseInt(dateString.substring(this.format.indexOf('y'), this.format.indexOf('y') + 4), 10);
            /** @type {?} */
            var date = new Date(year, month, day);
            setYearFrom0To100(date, year);
            return (date.getFullYear() === year && date.getMonth() === month && date.getDate() === day) ? date : null;
        };
        // Formata a data.
        // Formata a data.
        /**
         * @param {?} value
         * @return {?}
         */
        ThfDatepickerBaseComponent.prototype.formatToDate = 
        // Formata a data.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var dateFormatted = this.format;
            dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
            dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
            dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
            return dateFormatted;
        };
        // Método responsável por controlar o modelo.
        // Método responsável por controlar o modelo.
        /**
         * @param {?} date
         * @return {?}
         */
        ThfDatepickerBaseComponent.prototype.controlModel = 
        // Método responsável por controlar o modelo.
        /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            this.date = date;
            if (date && this.isExtendedISO) {
                this.callOnChange(convertDateToISOExtended(this.date, this.hour));
            }
            else if (date && !this.isExtendedISO) {
                this.callOnChange(convertDateToISODate(this.date));
            }
            else {
                date === undefined ? this.callOnChange('') : this.callOnChange('Data inválida');
            }
        };
        // Executa a função onChange
        // Executa a função onChange
        /**
         * @param {?} value
         * @param {?=} retry
         * @return {?}
         */
        ThfDatepickerBaseComponent.prototype.callOnChange = 
        // Executa a função onChange
        /**
         * @param {?} value
         * @param {?=} retry
         * @return {?}
         */
        function (value, retry) {
            var _this = this;
            if (retry === void 0) { retry = true; }
            if (this.onChangeModel) {
                this.onChangeModel(value);
            }
            else if (retry) {
                setTimeout((/**
                 * @return {?}
                 */
                function () { return _this.callOnChange(value, false); }));
            }
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        ThfDatepickerBaseComponent.prototype.registerOnChange = 
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            this.onChangeModel = func;
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        ThfDatepickerBaseComponent.prototype.registerOnTouched = 
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            this.onTouchedModel = func;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfDatepickerBaseComponent.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.validatorChange = fn;
        };
        /**
         * @protected
         * @param {?} model
         * @return {?}
         */
        ThfDatepickerBaseComponent.prototype.validateModel = /**
         * @protected
         * @param {?} model
         * @return {?}
         */
        function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        // Retorna um objeto do tipo ThfMask com a mascara configurada.
        // Retorna um objeto do tipo ThfMask com a mascara configurada.
        /**
         * @protected
         * @return {?}
         */
        ThfDatepickerBaseComponent.prototype.buildMask = 
        // Retorna um objeto do tipo ThfMask com a mascara configurada.
        /**
         * @protected
         * @return {?}
         */
        function () {
            /** @type {?} */
            var mask = this.format.toUpperCase();
            mask = mask.replace(/DD/g, '99');
            mask = mask.replace(/MM/g, '99');
            mask = mask.replace(/YYYY/g, '9999');
            return new ThfMask(mask, true);
        };
        /**
         * @param {?} c
         * @return {?}
         */
        ThfDatepickerBaseComponent.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            // Verifica se já possui algum error pattern padrão.
            this.errorPattern = this.errorPattern !== 'Data inválida' && this.errorPattern !== 'Data fora do período' ? this.errorPattern : '';
            if (dateFailed(c.value)) {
                this.errorPattern = this.errorPattern || 'Data inválida';
                return { date: {
                        valid: false,
                    } };
            }
            if (requiredFailed(this.required, this.disabled, c.value)) {
                return { required: {
                        valid: false,
                    } };
            }
            if ((this.date && !validateDateRange(this.date, this._minDate, this._maxDate))) {
                this.errorPattern = this.errorPattern || 'Data fora do período';
                return { date: {
                        valid: false,
                    } };
            }
            return null;
        };
        ThfDatepickerBaseComponent.propDecorators = {
            name: [{ type: core.Input, args: ['name',] }],
            placeholder: [{ type: core.Input, args: ['t-placeholder',] }],
            optional: [{ type: core.Input, args: ['t-optional',] }],
            setDisabled: [{ type: core.Input, args: ['t-disabled',] }],
            setReadonly: [{ type: core.Input, args: ['t-readonly',] }],
            setRequired: [{ type: core.Input, args: ['t-required',] }],
            setFocus: [{ type: core.Input, args: ['t-focus',] }],
            setClean: [{ type: core.Input, args: ['t-clean',] }],
            errorPattern: [{ type: core.Input, args: ['t-error-pattern',] }],
            minDate: [{ type: core.Input, args: ['t-min-date',] }],
            maxDate: [{ type: core.Input, args: ['t-max-date',] }],
            format: [{ type: core.Input, args: ['t-format',] }],
            locale: [{ type: core.Input, args: ['t-locale',] }],
            onblur: [{ type: core.Output, args: ['t-blur',] }],
            onchange: [{ type: core.Output, args: ['t-change',] }]
        };
        return ThfDatepickerBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfCalendarContentOffset = 8;
    /** @type {?} */
    var thfCalendarPositionDefault = 'bottom-left';
    /**
     * \@docsExtends ThfDatepickerBaseComponent
     *
     * \@example
     *
     * <example name="thf-datepicker-basic" title="Totvs Datepicker Basic">
     *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.html"> </file>
     *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.ts"> </file>
     *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.po.ts"> </file>
     *  <file name="sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.e2e-spec.ts"> </file>
     * </example>
     *
     * <example name="thf-datepicker-labs" title="Totvs Datepicker Labs">
     *  <file name="sample-thf-datepicker-labs/sample-thf-datepicker-labs.component.html"> </file>
     *  <file name="sample-thf-datepicker-labs/sample-thf-datepicker-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-datepicker-airfare" title="Totvs Datepicker - Airfare">
     *  <file name="sample-thf-datepicker-airfare/sample-thf-datepicker-airfare.component.html"> </file>
     *  <file name="sample-thf-datepicker-airfare/sample-thf-datepicker-airfare.component.ts"> </file>
     * </example>
     *
     * <example name="thf-datepicker-airfare-reactive-form" title="Totvs Datepicker - Airfare Reactive Form">
     *  <file name="sample-thf-datepicker-airfare-reactive-form/sample-thf-datepicker-airfare-reactive-form.component.html"> </file>
     *  <file name="sample-thf-datepicker-airfare-reactive-form/sample-thf-datepicker-airfare-reactive-form.component.ts"> </file>
     * </example>
     */
    var ThfDatepickerComponent = /** @class */ (function (_super) {
        __extends(ThfDatepickerComponent, _super);
        function ThfDatepickerComponent(controlPosition, renderer, el) {
            var _this = _super.call(this) || this;
            _this.controlPosition = controlPosition;
            _this.renderer = renderer;
            _this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
                '(?:0[1-9]|1[0-2])-' +
                '(?:0[1-9]|[12]\\d|3[01])$');
            _this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
                '(?:0[1-9]|1[0-2])-' +
                '(?:0[1-9]|[12]\\d|3[01])' +
                'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
                '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
                '(?:|:?[0-5]\\d)$');
            _this.onScroll = (/**
             * @return {?}
             */
            function () {
                _this.controlPosition.adjustPosition(thfCalendarPositionDefault);
            });
            _this.el = el;
            return _this;
        }
        /**
         * @return {?}
         */
        ThfDatepickerComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.setDialogPickerStyleDisplay('none');
            // Põe o foco no Input, setado pelo t-focus
            if (this.focus) {
                this.inputEl.nativeElement.focus();
            }
        };
        /**
         * @return {?}
         */
        ThfDatepickerComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.removeListeners();
        };
        /**
         * @return {?}
         */
        ThfDatepickerComponent.prototype.togglePicker = /**
         * @return {?}
         */
        function () {
            if (this.disabled || this.readonly) {
                return;
            }
            if (!this.calendar.visible) {
                this.calendar.init();
                this.setCalendarPosition();
                this.initializeListeners();
            }
            else {
                this.inputEl.nativeElement.disabled = false;
                this.closeCalendar();
            }
        };
        /**
         * @return {?}
         */
        ThfDatepickerComponent.prototype.dateSelected = /**
         * @return {?}
         */
        function () {
            this.inputEl.nativeElement.focus();
            this.inputEl.nativeElement.value = this.formatToDate(this.date);
            this.controlModel(this.date);
            this.closeCalendar();
        };
        // Esconde Picker quando for clicado fora
        // Esconde Picker quando for clicado fora
        /**
         * @param {?} event
         * @return {?}
         */
        ThfDatepickerComponent.prototype.wasClickedOnPicker = 
        // Esconde Picker quando for clicado fora
        /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!this.dialogPicker || !this.iconDatepicker) {
                return;
            }
            if ((!this.dialogPicker.nativeElement.contains(event.target) || this.hasOverlayClass(event.target)) &&
                !this.iconDatepicker.nativeElement.contains(event.target) && !this.hasAttrCalendar(event.target)) {
                this.closeCalendar();
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        ThfDatepickerComponent.prototype.onKeyup = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if (this.readonly) {
                return;
            }
            this.objMask.keyup($event);
            // Controla a atualização do model, verificando se a data é valida
            if (this.objMask.valueToModel || this.objMask.valueToModel === '') {
                if (this.objMask.valueToModel.length >= 10) {
                    this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                    this.date = this.getDateFromString(this.inputEl.nativeElement.value);
                }
                else {
                    this.date = undefined;
                    this.controlModel(this.date);
                }
            }
            else {
                this.date = undefined;
            }
        };
        /**
         * @param {?=} $event
         * @return {?}
         */
        ThfDatepickerComponent.prototype.onKeydown = /**
         * @param {?=} $event
         * @return {?}
         */
        function ($event) {
            if (this.readonly) {
                return;
            }
            this.objMask.keydown($event);
        };
        /**
         * @return {?}
         */
        ThfDatepickerComponent.prototype.hasInvalidClass = /**
         * @return {?}
         */
        function () {
            return (this.el.nativeElement.classList.contains('ng-invalid') &&
                this.el.nativeElement.classList.contains('ng-dirty') &&
                this.inputEl.nativeElement.value !== '');
        };
        /**
         * @return {?}
         */
        ThfDatepickerComponent.prototype.getErrorPattern = /**
         * @return {?}
         */
        function () {
            return (this.errorPattern !== '' && this.hasInvalidClass()) ? this.errorPattern : '';
        };
        /**
         * @return {?}
         */
        ThfDatepickerComponent.prototype.clear = /**
         * @return {?}
         */
        function () {
            this.valueBeforeChange = this.formatToDate(this.date);
            this.date = undefined;
            this.controlModel(this.date);
            this.controlChangeEmitter();
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        ThfDatepickerComponent.prototype.eventOnBlur = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            /** @type {?} */
            var date = this.inputEl.nativeElement.value;
            /** @type {?} */
            var newDate = date ? this.getDateFromString(date) : undefined;
            this.objMask.blur($event);
            this.onblur.emit();
            if (this.objMask.valueToModel) {
                if (this.objMask.valueToModel.length >= 10) {
                    this.controlModel(newDate);
                    this.date = newDate;
                }
                else {
                    this.date = undefined;
                    this.controlModel(this.date);
                }
            }
            else {
                this.date = undefined;
                this.callOnChange(this.date);
            }
            this.controlChangeEmitter();
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        ThfDatepickerComponent.prototype.eventOnChange = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            /** @type {?} */
            var elementValue = this.inputEl.nativeElement.value;
            if (this.verifyMobile()) {
                this.controlModel(elementValue);
                this.callOnChange(elementValue);
            }
            this.onchange.emit(elementValue);
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        ThfDatepickerComponent.prototype.eventOnClick = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            var _this = this;
            if (this.verifyMobile()) {
                $event.target.blur();
                // abre o calendar quando clicar no input somente no mobile
                setTimeout((/**
                 * @return {?}
                 */
                function () { return _this.togglePicker(); }), 0);
            }
            else {
                // Atualiza a posição do cursor ao clicar
                this.objMask.click($event);
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfDatepickerComponent.prototype.formatToDate = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!value) {
                return undefined;
            }
            /** @type {?} */
            var dateFormatted = this.format;
            dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
            dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
            dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
            return dateFormatted;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfDatepickerComponent.prototype.refreshValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this.inputEl.nativeElement.value = this.formatToDate(value);
            }
        };
        // Função implementada do ControlValueAccessor
        // Função implementada do ControlValueAccessor
        /**
         * @param {?} value
         * @return {?}
         */
        ThfDatepickerComponent.prototype.writeValue = 
        // Função implementada do ControlValueAccessor
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.inputEl && value) {
                if (value instanceof Date) {
                    /** @type {?} */
                    var dateString = value.toString();
                    this.hour = 'T' + dateString.substring(16, 24) + dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
                    this.date = value;
                    this.inputEl.nativeElement.value = this.formatToDate(value);
                }
                else if (this.isValidDateIso(value) || this.isValidExtendedIso(value)) {
                    if (this.isValidDateIso(value)) {
                        this.isExtendedISO = false;
                    }
                    else {
                        this.hour = value.substring(10, 25);
                        this.isExtendedISO = true;
                    }
                    /** @type {?} */
                    var day = parseInt(value.substring(8, 10), 10);
                    /** @type {?} */
                    var month = parseInt(value.substring(5, 7), 10) - 1;
                    /** @type {?} */
                    var year = parseInt(value.substring(0, 4), 10);
                    /** @type {?} */
                    var dateTemp = new Date(year, month, day);
                    setYearFrom0To100(dateTemp, year);
                    this.date = dateTemp;
                    this.inputEl.nativeElement.value = this.formatToDate(dateTemp);
                }
                else {
                    this.inputEl.nativeElement.value = '';
                    this.date = undefined;
                }
                this.controlModel(this.date);
            }
            else if (this.inputEl) {
                this.inputEl.nativeElement.value = '';
                this.date = undefined;
            }
            this.valueBeforeChange = this.formatToDate(this.date);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfDatepickerComponent.prototype.isValidDateIso = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return this.dateRegex.test(value);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfDatepickerComponent.prototype.isValidExtendedIso = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return this.isoRegex.test(value);
        };
        /**
         * @param {?} element
         * @return {?}
         */
        ThfDatepickerComponent.prototype.hasOverlayClass = /**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            return element.classList.contains('thf-calendar-overlay');
        };
        /* istanbul ignore next */
        /* istanbul ignore next */
        /**
         * @return {?}
         */
        ThfDatepickerComponent.prototype.verifyMobile = /* istanbul ignore next */
        /**
         * @return {?}
         */
        function () {
            return isMobile();
        };
        /**
         * @private
         * @return {?}
         */
        ThfDatepickerComponent.prototype.closeCalendar = /**
         * @private
         * @return {?}
         */
        function () {
            this.calendar.close();
            this.removeListeners();
            this.setDialogPickerStyleDisplay('none');
        };
        /**
         * @private
         * @return {?}
         */
        ThfDatepickerComponent.prototype.controlChangeEmitter = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var dateModelFormatted = this.formatToDate(this.date);
            if (dateModelFormatted !== this.valueBeforeChange) {
                this.valueBeforeChange = dateModelFormatted;
                clearTimeout(this.timeoutChange);
                this.timeoutChange = setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.onchange.emit(dateModelFormatted);
                }), 200);
            }
        };
        /**
         * @private
         * @param {?} element
         * @return {?}
         */
        ThfDatepickerComponent.prototype.hasAttrCalendar = /**
         * @private
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var attrCalendar = 'attr-calendar';
            return (element && element.hasAttribute(attrCalendar)) || (element.parentElement && element.parentElement.hasAttribute(attrCalendar));
        };
        /**
         * @private
         * @return {?}
         */
        ThfDatepickerComponent.prototype.initializeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.clickListener = this.renderer.listen('document', 'click', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.wasClickedOnPicker(event);
            }));
            this.eventResizeListener = this.renderer.listen('window', 'resize', (/**
             * @return {?}
             */
            function () {
                _this.closeCalendar();
            }));
            window.addEventListener('scroll', this.onScroll, true);
        };
        /**
         * @private
         * @return {?}
         */
        ThfDatepickerComponent.prototype.removeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.clickListener) {
                this.clickListener();
            }
            if (this.eventResizeListener) {
                this.eventResizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfDatepickerComponent.prototype.setDialogPickerStyleDisplay = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.dialogPicker.nativeElement.style.display = value;
        };
        /**
         * @private
         * @return {?}
         */
        ThfDatepickerComponent.prototype.setCalendarPosition = /**
         * @private
         * @return {?}
         */
        function () {
            this.setDialogPickerStyleDisplay('block');
            this.controlPosition.setElements(this.dialogPicker.nativeElement, thfCalendarContentOffset, this.inputEl, ['top-left', 'bottom-left'], false, true);
            this.controlPosition.adjustPosition(thfCalendarPositionDefault);
        };
        ThfDatepickerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-datepicker',
                        template: "<thf-field-container\n  [t-help]=\"help\"\n  [t-label]=\"label\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n\n    <input #inp\n      class=\"thf-input thf-datepicker\"\n      [ngClass]=\"clean && inp.value ? 'thf-input-double-icon-right' : 'thf-input-icon-right'\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      (blur)=\"eventOnBlur($event)\"\n      (change)=\"eventOnChange($event)\"\n      (click)=\"eventOnClick($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear()\"></thf-clean>\n\n      <span #iconDatepicker\n        class=\"thf-icon thf-field-icon thf-icon-calendar\"\n        [class.thf-field-icon]=\"!disabled && !readonly\"\n        [class.thf-field-icon-disabled]=\"disabled || readonly\"\n        (click)=\"togglePicker()\">\n      </span>\n    </div>\n  </div>\n\n  <div #dialogPicker [class.thf-datepicker-popup-calendar]=\"!verifyMobile()\">\n    <thf-calendar #calendar\n      [(t-selected-date)]=\"date\"\n      [t-date-end]=\"maxDate\"\n      [t-date-start]=\"minDate\"\n      [t-locale]=\"locale\"\n      (t-submit)=\"dateSelected()\">\n    </thf-calendar>\n  </div>\n\n  <thf-field-container-bottom [t-error-pattern]=\"getErrorPattern()\"></thf-field-container-bottom>\n\n</thf-field-container>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfDatepickerComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfDatepickerComponent; })),
                                multi: true,
                            },
                            ThfControlPositionService
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfDatepickerComponent.ctorParameters = function () { return [
            { type: ThfControlPositionService },
            { type: core.Renderer2 },
            { type: core.ElementRef }
        ]; };
        ThfDatepickerComponent.propDecorators = {
            calendar: [{ type: core.ViewChild, args: ['calendar', { static: true },] }],
            dialogPicker: [{ type: core.ViewChild, args: ['dialogPicker', { read: core.ElementRef, static: true },] }],
            iconDatepicker: [{ type: core.ViewChild, args: ['iconDatepicker', { read: core.ElementRef, static: true },] }],
            inputEl: [{ type: core.ViewChild, args: ['inp', { read: core.ElementRef, static: true },] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            help: [{ type: core.Input, args: ['t-help',] }],
            onKeyup: [{ type: core.HostListener, args: ['keyup', ['$event'],] }],
            onKeydown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
        };
        return ThfDatepickerComponent;
    }(ThfDatepickerBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfDatepickerRangeLiteralsDefault = {
        en: (/** @type {?} */ ({
            invalidFormat: 'Date in invalid format',
            startDateGreaterThanEndDate: 'Start date greater than end date',
        })),
        es: (/** @type {?} */ ({
            invalidFormat: 'Fecha en formato no válido',
            startDateGreaterThanEndDate: 'Fecha de inicio mayor que fecha final',
        })),
        pt: (/** @type {?} */ ({
            invalidFormat: 'Data no formato inválido',
            startDateGreaterThanEndDate: 'Data inicial maior que data final',
        }))
    };
    /**
     * \@description
     *
     * O `thf-datepicker-range` é um componente para seleção de um período entre duas datas, onde é possível informar apenas
     * a data inicial ou a data final.
     *
     * O componente `[(ngModel)]` do `thf-datepicker-range` trabalha com um objeto que implementa a interface
     * `ThfDatepickerRange`, contendo as seguintes propriedades:
     * ```
     * { "start": '2017-11-28', "end": '2017-11-30' }
     * ```
     *
     * <a id="accepted-formats"></a>
     * Este componente pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * new Date(2017, 10, 28);
     * ```
     *
     * > O componente respeitará o formato passado para o *model* via codificação. Porém, caso seja feita alteração em algum
     * dos valores de data em tela, o componente atribuirá o formato **Data (E8601DAw.): yyyy-mm-dd** ao model.
     *
     * Importante:
     *
     * - Quando preenchidas a data inicial e final, a data inicial deve ser sempre menor ou igual a data final;
     * - Ao passar uma data inválida via codificação, o valor será mantido no *model* e o `input` da tela aparecerá vazio;
     * - Permite trabalhar com as duas datas separadamente através das propriedades `t-start-date` e `t-end-date` no lugar do
     * `[(ngModel)]`, no entanto sem a validação do formulário;
     * - Para a validação do formulário, utilize o `[(ngModel)]`.
     * @abstract
     */
    var ThfDatepickerRangeBaseComponent = /** @class */ (function () {
        function ThfDatepickerRangeBaseComponent(thfDateService) {
            this.thfDateService = thfDateService;
            this.errorMessage = '';
            this._clean = false;
            this._readonly = false;
            this._required = false;
            this.dateRange = { start: '', end: '' };
            this.format = 'dd/mm/yyyy';
            this.isDateRangeInputFormatValid = true;
            this.isStartDateRangeInputValid = true;
            /**
             * \@optional
             *
             * \@description
             *
             * Evento disparado ao alterar valor do campo.
             */
            this.onChange = new core.EventEmitter();
        }
        Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "isDateRangeInputValid", {
            get: /**
             * @return {?}
             */
            function () {
                return this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "clean", {
            get: /**
             * @return {?}
             */
            function () {
                return this._clean;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita ação para limpar o campo.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Habilita ação para limpar o campo.
             *
             * \@default `false`
             * @param {?} clean
             * @return {?}
             */
            function (clean) {
                this._clean = convertToBoolean(clean);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita o campo.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Desabilita o campo.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._disabled = convertToBoolean(value);
                this.validateModel(this.dateRange);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "endDate", {
            get: /**
             * @return {?}
             */
            function () {
                return this._endDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Data final.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Data final.
             * @param {?} date
             * @return {?}
             */
            function (date) {
                this._endDate = this.convertPatternDateFormat(date);
                this.dateRange.end = this.endDate;
                this.updateScreenByModel(this.dateRange);
                this.updateModel(this.dateRange);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "literals", {
            get: /**
             * @return {?}
             */
            function () {
                return this._literals || thfDatepickerRangeLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `thf-datepicker-range`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfDatepickerRangeLiterals = {
             *    invalidFormat: 'Date in inconsistent format',
             *    startDateGreaterThanEndDate: 'End date less than start date'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfDatepickerRangeLiterals = {
             *    invalidFormat: 'Date in inconsistent format'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-datepicker-range
             *   [t-literals]="customLiterals">
             * </thf-datepicker-range>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Objeto com as literais usadas no `thf-datepicker-range`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfDatepickerRangeLiterals = {
             *    invalidFormat: 'Date in inconsistent format',
             *    startDateGreaterThanEndDate: 'End date less than start date'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfDatepickerRangeLiterals = {
             *    invalidFormat: 'Date in inconsistent format'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-datepicker-range
             *   [t-literals]="customLiterals">
             * </thf-datepicker-range>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign({}, thfDatepickerRangeLiteralsDefault[thfLocaleDefault], thfDatepickerRangeLiteralsDefault[browserLanguage()], value);
                }
                else {
                    this._literals = thfDatepickerRangeLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "readonly", {
            get: /**
             * @return {?}
             */
            function () {
                return this._readonly;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será somente leitura.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo será somente leitura.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._readonly = convertToBoolean(value);
                this.validateModel(this.dateRange);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "required", {
            get: /**
             * @return {?}
             */
            function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo será obrigatório.
             *
             * \@default `false`
             * @param {?} required
             * @return {?}
             */
            function (required) {
                this._required = convertToBoolean(required);
                this.validateModel(this.dateRange);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerRangeBaseComponent.prototype, "startDate", {
            get: /**
             * @return {?}
             */
            function () {
                return this._startDate;
            },
            /**
             * @optional
             *
             * @description
             *
             * Data inicial.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Data inicial.
             * @param {?} date
             * @return {?}
             */
            function (date) {
                this._startDate = this.convertPatternDateFormat(date);
                this.dateRange.start = this.startDate;
                this.updateScreenByModel(this.dateRange);
                this.updateModel(this.dateRange);
            },
            enumerable: true,
            configurable: true
        });
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        ThfDatepickerRangeBaseComponent.prototype.registerOnChange = 
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            this.onChangeModel = func;
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        ThfDatepickerRangeBaseComponent.prototype.registerOnTouched = 
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            this.onTouchedModel = func;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfDatepickerRangeBaseComponent.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.validatorChange = fn;
        };
        /**
         * @param {?} control
         * @return {?}
         */
        ThfDatepickerRangeBaseComponent.prototype.validate = /**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            /** @type {?} */
            var value = control.value || {};
            /** @type {?} */
            var startDate = value.start ? this.convertPatternDateFormat(value.start) : '';
            /** @type {?} */
            var endDate = value.end ? this.convertPatternDateFormat(value.end) : '';
            if (this.requiredDateRangeFailed(startDate, endDate)) {
                this.errorMessage = '';
                return { required: {
                        valid: false,
                    } };
            }
            if (this.dateRangeObjectFailed(control.value) || this.dateRangeFormatFailed(startDate, endDate)) {
                this.errorMessage = this.literals.invalidFormat;
                return { date: {
                        valid: false,
                    } };
            }
            if (this.dateRangeFailed(startDate, endDate)) {
                this.errorMessage = this.literals.startDateGreaterThanEndDate;
                return { date: {
                        valid: false,
                    } };
            }
            return null;
        };
        /**
         * @param {?} dateRange
         * @return {?}
         */
        ThfDatepickerRangeBaseComponent.prototype.writeValue = /**
         * @param {?} dateRange
         * @return {?}
         */
        function (dateRange) {
            this.resetDateRangeInputValidation();
            if (!dateRange || this.dateRangeObjectFailed(dateRange)) {
                this.dateRange = { start: '', end: '' };
            }
            if (!dateRange) {
                this.validateModel(this.dateRange);
            }
            if (this.dateRangeObjectFailed(dateRange)) {
                this.updateModel(dateRange);
            }
            if (this.isDateRangeObject(dateRange)) {
                this.dateRange = {
                    start: this.convertPatternDateFormat(dateRange.start),
                    end: this.convertPatternDateFormat(dateRange.end)
                };
                this.updateModel(this.dateRange);
            }
            this.updateScreenByModel(this.dateRange);
        };
        /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        ThfDatepickerRangeBaseComponent.prototype.dateFormatFailed = /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return value && !this.thfDateService.isValidIso(value);
        };
        // Executa a função onChange
        // Executa a função onChange
        /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        ThfDatepickerRangeBaseComponent.prototype.updateModel = 
        // Executa a função onChange
        /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var model = typeof (value) === 'object' ? __assign({}, value) : value;
            // Quando o input não possui um formulário, então esta função não é registrada
            if (this.onChangeModel) {
                this.onChangeModel(model);
            }
        };
        /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        ThfDatepickerRangeBaseComponent.prototype.validateModel = /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var model = __assign({}, value);
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfDatepickerRangeBaseComponent.prototype.convertPatternDateFormat = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Date) {
                return this.thfDateService.convertDateToISO(value);
            }
            return value;
        };
        /**
         * @private
         * @param {?} startDate
         * @param {?} endDate
         * @return {?}
         */
        ThfDatepickerRangeBaseComponent.prototype.dateRangeFailed = /**
         * @private
         * @param {?} startDate
         * @param {?} endDate
         * @return {?}
         */
        function (startDate, endDate) {
            return !this.thfDateService.isDateRangeValid(endDate, startDate) || !this.isStartDateRangeInputValid;
        };
        /**
         * @private
         * @param {?} startDate
         * @param {?} endDate
         * @return {?}
         */
        ThfDatepickerRangeBaseComponent.prototype.dateRangeFormatFailed = /**
         * @private
         * @param {?} startDate
         * @param {?} endDate
         * @return {?}
         */
        function (startDate, endDate) {
            return this.dateFormatFailed(endDate) || this.dateFormatFailed(startDate) || !this.isDateRangeInputFormatValid;
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfDatepickerRangeBaseComponent.prototype.dateRangeObjectFailed = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return value && !this.isDateRangeObject(value);
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfDatepickerRangeBaseComponent.prototype.isDateRangeObject = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return value && value.hasOwnProperty('start') && value.hasOwnProperty('end');
        };
        /**
         * @private
         * @param {?} startDate
         * @param {?} endDate
         * @return {?}
         */
        ThfDatepickerRangeBaseComponent.prototype.requiredDateRangeFailed = /**
         * @private
         * @param {?} startDate
         * @param {?} endDate
         * @return {?}
         */
        function (startDate, endDate) {
            return this.isDateRangeInputValid &&
                requiredFailed(this.required, this.disabled, startDate) &&
                requiredFailed(this.required, this.disabled, endDate);
        };
        ThfDatepickerRangeBaseComponent.propDecorators = {
            clean: [{ type: core.Input, args: ['t-clean',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            endDate: [{ type: core.Input, args: ['t-end-date',] }],
            help: [{ type: core.Input, args: ['t-help',] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }],
            optional: [{ type: core.Input, args: ['t-optional',] }],
            readonly: [{ type: core.Input, args: ['t-readonly',] }],
            required: [{ type: core.Input, args: ['t-required',] }],
            startDate: [{ type: core.Input, args: ['t-start-date',] }],
            onChange: [{ type: core.Output, args: ['t-change',] }]
        };
        return ThfDatepickerRangeBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var arrowLeftKey = 37;
    /** @type {?} */
    var arrowRightKey = 39;
    /** @type {?} */
    var backspaceKey = 8;
    /** @type {?} */
    var thfDatepickerRangeDateLengthDefault = 10;
    /**
     * \@docsExtends ThfDatepickerRangeBaseComponent
     *
     * \@example
     *
     * <example name="thf-datepicker-range-basic" title="Totvs Datepicker Range Basic">
     *  <file name="sample-thf-datepicker-range-basic/sample-thf-datepicker-range-basic.component.html"> </file>
     *  <file name="sample-thf-datepicker-range-basic/sample-thf-datepicker-range-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-datepicker-range-labs" title="Totvs Datepicker Range Labs">
     *  <file name="sample-thf-datepicker-range-labs/sample-thf-datepicker-range-labs.component.html"> </file>
     *  <file name="sample-thf-datepicker-range-labs/sample-thf-datepicker-range-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-datepicker-range-vacations" title="Totvs Datepicker Range - Vacations Suggestion">
     *  <file name="sample-thf-datepicker-range-vacations/sample-thf-datepicker-range-vacations.component.html"> </file>
     *  <file name="sample-thf-datepicker-range-vacations/sample-thf-datepicker-range-vacations.component.ts"> </file>
     * </example>
     *
     * <example name="thf-datepicker-range-vacations-reactive-form" title="Totvs Datepicker Range - Vacations Reactive Form">
     *  <file name="sample-thf-datepicker-range-vacations-reactive-form/sample-thf-datepicker-range-vacations-reactive-form.component.html">
     *  </file>
     *  <file name="sample-thf-datepicker-range-vacations-reactive-form/sample-thf-datepicker-range-vacations-reactive-form.component.ts">
     *  </file>
     * </example>
     */
    var ThfDatepickerRangeComponent = /** @class */ (function (_super) {
        __extends(ThfDatepickerRangeComponent, _super);
        function ThfDatepickerRangeComponent(thfDateService, thfDatepickerRangeElement) {
            var _this = _super.call(this, thfDateService) || this;
            _this.thfDatepickerRangeElement = thfDatepickerRangeElement;
            return _this;
        }
        Object.defineProperty(ThfDatepickerRangeComponent.prototype, "enableCleaner", {
            get: /**
             * @return {?}
             */
            function () {
                return (this.startDateInputValue || this.endDateInputValue) && !this.disabled && !this.readonly;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerRangeComponent.prototype, "endDateInputName", {
            get: /**
             * @return {?}
             */
            function () {
                return 'end-date';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerRangeComponent.prototype, "endDateInputValue", {
            get: /**
             * @return {?}
             */
            function () {
                return this.endDateInput.nativeElement.value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerRangeComponent.prototype, "getErrorMessage", {
            get: /**
             * @return {?}
             */
            function () {
                return (this.errorMessage !== '' && this.hasInvalidClass()) ? this.errorMessage : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerRangeComponent.prototype, "isDateRangeInputUncompleted", {
            get: /**
             * @return {?}
             */
            function () {
                return this.endDateInputValue.length < thfDatepickerRangeDateLengthDefault
                    && this.startDateInputValue.length < thfDatepickerRangeDateLengthDefault;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerRangeComponent.prototype, "isDirtyDateRangeInput", {
            get: /**
             * @return {?}
             */
            function () {
                return this.endDateInputValue.length > 0 || this.startDateInputValue.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerRangeComponent.prototype, "startDateInputName", {
            get: /**
             * @return {?}
             */
            function () {
                return 'start-date';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDatepickerRangeComponent.prototype, "startDateInputValue", {
            get: /**
             * @return {?}
             */
            function () {
                return this.startDateInput.nativeElement.value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        ThfDatepickerRangeComponent.getKeyCode = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            return event.keyCode || event.which;
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfDatepickerRangeComponent.getTargetElement = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            return event.target || event.srcElement;
        };
        /**
         * @param {?} keyCode
         * @return {?}
         */
        ThfDatepickerRangeComponent.isValidKey = /**
         * @param {?} keyCode
         * @return {?}
         */
        function (keyCode) {
            /** @type {?} */
            var isNumericKey = keyCode >= 48 && keyCode <= 57;
            /** @type {?} */
            var isNumericNumpadKey = keyCode >= 96 && keyCode <= 105;
            return isNumericKey || isNumericNumpadKey;
        };
        /**
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            // Classe de máscara
            this.thfMaskObject = this.buildMask();
        };
        /**
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.clear = /**
         * @return {?}
         */
        function () {
            this.resetDateRangeInputValidation();
            this.dateRange = { start: '', end: '' };
            this.updateScreenByModel(this.dateRange);
            this.updateModel(this.dateRange);
        };
        /**
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.onBlur = /**
         * @return {?}
         */
        function () {
            this.removeFocusFromDatePickerRangeField();
        };
        /**
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.onFocus = /**
         * @return {?}
         */
        function () {
            this.applyFocusOnDatePickerRangeField();
        };
        /**
         * @param {?=} event
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.onKeydown = /**
         * @param {?=} event
         * @return {?}
         */
        function (event) {
            if (this.readonly) {
                return;
            }
            if (this.isSetFocusOnBackspace(event)) {
                event.preventDefault();
                this.setFocusOnBackspace();
            }
            else {
                this.thfMaskObject.keydown(event);
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.onKeyup = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.readonly) {
                return;
            }
            /** @type {?} */
            var isStartDateTargetEvent = event.target.name === this.startDateInputName;
            this.setFocus(event);
            this.thfMaskObject.keyup(event);
            this.updateModelByScreen(isStartDateTargetEvent);
        };
        /**
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.resetDateRangeInputValidation = /**
         * @return {?}
         */
        function () {
            this.isStartDateRangeInputValid = true;
            this.isDateRangeInputFormatValid = true;
        };
        /**
         * @param {?} model
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.updateScreenByModel = /**
         * @param {?} model
         * @return {?}
         */
        function (model) {
            var _this = this;
            /** @type {?} */
            var dateRange = { start: (/** @type {?} */ (model.start)), end: (/** @type {?} */ (model.end)) };
            /** @type {?} */
            var isStartDateValid = this.thfDateService.isDateRangeValid(dateRange.end, dateRange.start);
            /** @type {?} */
            var isDateValid = (/**
             * @param {?} date
             * @return {?}
             */
            function (date) { return !_this.dateFormatFailed(date) && isStartDateValid; });
            /** @type {?} */
            var endDateFormated = isDateValid(dateRange.end) ? this.formatModelToScreen(dateRange.end) : '';
            /** @type {?} */
            var startDateFormated = isDateValid(dateRange.start) ? this.formatModelToScreen(dateRange.start) : '';
            this.endDateInput.nativeElement.value = endDateFormated;
            this.startDateInput.nativeElement.value = startDateFormated;
        };
        /**
         * @private
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.applyFocusOnDatePickerRangeField = /**
         * @private
         * @return {?}
         */
        function () {
            this.dateRangeField.nativeElement.classList.add('thf-datepicker-range-field-focused');
        };
        // Retorna um objeto do tipo ThfMask com a mascara configurada.
        // Retorna um objeto do tipo ThfMask com a mascara configurada.
        /**
         * @private
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.buildMask = 
        // Retorna um objeto do tipo ThfMask com a mascara configurada.
        /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var mask = this.format.toUpperCase();
            mask = mask.replace(/DD/g, '99');
            mask = mask.replace(/MM/g, '99');
            mask = mask.replace(/YYYY/g, '9999');
            return new ThfMask(mask, true);
        };
        /**
         * @private
         * @param {?} format
         * @param {?=} day
         * @param {?=} month
         * @param {?=} year
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.formatDate = /**
         * @private
         * @param {?} format
         * @param {?=} day
         * @param {?=} month
         * @param {?=} year
         * @return {?}
         */
        function (format, day, month, year) {
            if (day === void 0) { day = ''; }
            if (month === void 0) { month = ''; }
            if (year === void 0) { year = ''; }
            /** @type {?} */
            var dateFormatted = format;
            day = day && day.includes('T') ? day.slice(0, 2) : day;
            dateFormatted = dateFormatted.replace('dd', ('0' + day).slice(-2));
            dateFormatted = dateFormatted.replace('mm', ('0' + (month)).slice(-2));
            dateFormatted = dateFormatted.replace('yyyy', String(year));
            return dateFormatted;
        };
        /**
         * @private
         * @param {?=} value
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.formatScreenToModel = /**
         * @private
         * @param {?=} value
         * @return {?}
         */
        function (value) {
            if (value === void 0) { value = ''; }
            var _a = __read(value.split('/'), 3), day = _a[0], month = _a[1], year = _a[2];
            return value ? this.formatDate('yyyy-mm-dd', day, month, year) : '';
        };
        /**
         * @private
         * @param {?=} value
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.formatModelToScreen = /**
         * @private
         * @param {?=} value
         * @return {?}
         */
        function (value) {
            if (value === void 0) { value = ''; }
            var _a = __read(value.split('-'), 3), year = _a[0], month = _a[1], day = _a[2];
            return value ? this.formatDate(this.format, day, month, year) : '';
        };
        /**
         * @private
         * @param {?} startDate
         * @param {?} endDate
         * @param {?} isStartDateTargetEvent
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.getDateRangeFormatValidation = /**
         * @private
         * @param {?} startDate
         * @param {?} endDate
         * @param {?} isStartDateTargetEvent
         * @return {?}
         */
        function (startDate, endDate, isStartDateTargetEvent) {
            this.setDateRangeInputValidation(startDate, endDate);
            return {
                isValid: this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid,
                dateRangeModel: this.getValidatedModel(startDate, endDate, isStartDateTargetEvent)
            };
        };
        /**
         * @private
         * @param {?} startDate
         * @param {?} endDate
         * @param {?} isStartDateTargetEvent
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.getValidatedModel = /**
         * @private
         * @param {?} startDate
         * @param {?} endDate
         * @param {?} isStartDateTargetEvent
         * @return {?}
         */
        function (startDate, endDate, isStartDateTargetEvent) {
            /** @type {?} */
            var dateRangeModel = { start: '', end: '' };
            dateRangeModel.end = (isStartDateTargetEvent || this.isStartDateRangeInputValid)
                && !this.dateFormatFailed(endDate) ? endDate : '';
            dateRangeModel.start = (!isStartDateTargetEvent || this.isStartDateRangeInputValid)
                && !this.dateFormatFailed(startDate) ? startDate : '';
            return dateRangeModel;
        };
        /**
         * @private
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.hasInvalidClass = /**
         * @private
         * @return {?}
         */
        function () {
            return (this.thfDatepickerRangeElement.nativeElement.classList.contains('ng-invalid') &&
                this.thfDatepickerRangeElement.nativeElement.classList.contains('ng-dirty'));
        };
        /**
         * @private
         * @param {?} startDate
         * @param {?} endDate
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.isEqualBeforeValue = /**
         * @private
         * @param {?} startDate
         * @param {?} endDate
         * @return {?}
         */
        function (startDate, endDate) {
            return this.isDateRangeInputFormatValid && endDate === this.dateRange.end && startDate === this.dateRange.start;
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.isSetFocusOnBackspace = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            return event.target.name === this.endDateInputName &&
                this.endDateInput.nativeElement.selectionStart === 0 && this.endDateInput.nativeElement.selectionEnd === 0 &&
                event.keyCode === backspaceKey;
        };
        /**
         * @private
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.removeFocusFromDatePickerRangeField = /**
         * @private
         * @return {?}
         */
        function () {
            this.dateRangeField.nativeElement.classList.remove('thf-datepicker-range-field-focused');
        };
        /**
         * @private
         * @param {?} startDate
         * @param {?} endDate
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.setDateRangeInputValidation = /**
         * @private
         * @param {?} startDate
         * @param {?} endDate
         * @return {?}
         */
        function (startDate, endDate) {
            this.isStartDateRangeInputValid = this.thfDateService.isDateRangeValid(endDate, startDate);
            this.isDateRangeInputFormatValid = !this.dateFormatFailed(startDate) && !this.dateFormatFailed(endDate);
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.setFocus = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var inputElement = ThfDatepickerRangeComponent.getTargetElement(event);
            /** @type {?} */
            var keyCode = ThfDatepickerRangeComponent.getKeyCode(event);
            /** @type {?} */
            var inputName = inputElement['name'];
            this.setFocusOnArrowLeft(keyCode, inputName);
            this.setFocusOnArrowRight(keyCode, inputName, inputElement);
            this.setFocusOnStartDateCompleted(keyCode, inputName);
        };
        /**
         * @private
         * @param {?} position
         * @param {?} inputElement
         * @param {?} selectionRange
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.setFocusAndPosition = /**
         * @private
         * @param {?} position
         * @param {?} inputElement
         * @param {?} selectionRange
         * @return {?}
         */
        function (position, inputElement, selectionRange) {
            var _this = this;
            this.focusOnElement(inputElement);
            setTimeout((/**
             * @return {?}
             */
            function () {
                inputElement.nativeElement.setSelectionRange(selectionRange, selectionRange);
                _this.thfMaskObject.initialPosition = position;
                _this.thfMaskObject.finalPosition = position;
            }));
        };
        /**
         * @private
         * @param {?} inputElement
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.focusOnElement = /**
         * @private
         * @param {?} inputElement
         * @return {?}
         */
        function (inputElement) {
            inputElement.nativeElement.focus();
        };
        /**
         * @private
         * @param {?} keyCode
         * @param {?} inputName
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.setFocusOnArrowLeft = /**
         * @private
         * @param {?} keyCode
         * @param {?} inputName
         * @return {?}
         */
        function (keyCode, inputName) {
            /** @type {?} */
            var isCursorAtStartOfInput = this.endDateInput.nativeElement.selectionStart === 0;
            if (inputName === this.endDateInputName && isCursorAtStartOfInput && keyCode === arrowLeftKey) {
                /** @type {?} */
                var inputLength = this.startDateInput.nativeElement.value.length;
                this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
            }
        };
        /**
         * @private
         * @param {?} keyCode
         * @param {?} inputName
         * @param {?} inputElement
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.setFocusOnArrowRight = /**
         * @private
         * @param {?} keyCode
         * @param {?} inputName
         * @param {?} inputElement
         * @return {?}
         */
        function (keyCode, inputName, inputElement) {
            /** @type {?} */
            var isCursorAtEndOfInput = this.startDateInput.nativeElement.selectionStart === inputElement.value.length;
            if (inputName === this.startDateInputName && isCursorAtEndOfInput && keyCode === arrowRightKey) {
                this.setFocusAndPosition(0, this.endDateInput, 0);
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.setFocusOnBackspace = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var inputLength = this.startDateInput.nativeElement.value.length;
            this.startDateInput.nativeElement.value = this.startDateInputValue.slice(0, -1);
            this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
        };
        /**
         * @private
         * @param {?} keyCode
         * @param {?} inputName
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.setFocusOnStartDateCompleted = /**
         * @private
         * @param {?} keyCode
         * @param {?} inputName
         * @return {?}
         */
        function (keyCode, inputName) {
            /** @type {?} */
            var isLastKeyPressed = this.startDateInput.nativeElement.selectionStart === thfDatepickerRangeDateLengthDefault;
            /** @type {?} */
            var isNewDateCompleted = this.startDateInputValue.length === thfDatepickerRangeDateLengthDefault && isLastKeyPressed;
            /** @type {?} */
            var isValidKey = ThfDatepickerRangeComponent.isValidKey(keyCode);
            if (inputName === this.startDateInputName && isNewDateCompleted && isValidKey) {
                this.setFocusAndPosition(0, this.endDateInput, 0);
            }
        };
        /**
         * @private
         * @param {?} isStartDateTargetEvent
         * @return {?}
         */
        ThfDatepickerRangeComponent.prototype.updateModelByScreen = /**
         * @private
         * @param {?} isStartDateTargetEvent
         * @return {?}
         */
        function (isStartDateTargetEvent) {
            /** @type {?} */
            var endDateFormatted = this.formatScreenToModel(this.endDateInputValue);
            /** @type {?} */
            var startDateFormatted = this.formatScreenToModel(this.startDateInputValue);
            if (this.isDateRangeInputUncompleted && this.isDirtyDateRangeInput) {
                this.updateModel(this.dateRange);
                return;
            }
            if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
                this.resetDateRangeInputValidation();
                this.validateModel(this.dateRange);
                return;
            }
            /** @type {?} */
            var dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
            if (dateFormatValidation.isValid) {
                this.dateRange = { start: startDateFormatted, end: endDateFormatted };
                this.updateModel(this.dateRange);
                this.onChange.emit(__assign({}, this.dateRange));
            }
            if (!dateFormatValidation.isValid) {
                this.dateRange = __assign({}, dateFormatValidation.dateRangeModel);
                this.updateModel(dateFormatValidation.dateRangeModel);
            }
        };
        ThfDatepickerRangeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-datepicker-range',
                        template: "<thf-field-container\n  [t-help]=\"help\"\n  [t-label]=\"label\"\n  [t-optional]=\"!required && optional\">\n\n  <div\n    #dateRangeField\n    class=\"thf-datepicker-range-field thf-input\"\n    [class.thf-datepicker-range-field-disabled]=\"disabled\">\n\n    <div class=\"thf-datepicker-range-start-date\">\n      <input\n        #startDateInput\n        class=\"thf-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [disabled]=\"disabled\"\n        [name]=\"startDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur()\"\n        (focus)=\"onFocus()\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\">\n    </div>\n\n    <div class=\"thf-datepicker-range-separator\">-</div>\n\n    <div class=\"thf-datepicker-range-end-date\">\n      <input\n        #endDateInput\n        class=\"thf-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [disabled]=\"disabled\"\n        [name]=\"endDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur()\"\n        (focus)=\"onFocus()\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\">\n    </div>\n\n    <div class=\"thf-datepicker-range-icon\">\n      <thf-clean *ngIf=\"enableCleaner\" (t-change-event)=\"clear($event)\"></thf-clean>\n    </div>\n\n    <div class=\"thf-datepicker-range-icon\">\n      <span\n        class=\"thf-icon thf-field-icon thf-icon-calendar\"\n        [class.thf-field-icon-disabled]=\"disabled || readonly\">\n      </span>\n    </div>\n\n  </div>\n\n  <thf-field-container-bottom [t-error-pattern]=\"getErrorMessage\"></thf-field-container-bottom>\n</thf-field-container>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfDatepickerRangeComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfDatepickerRangeComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfDatepickerRangeComponent.ctorParameters = function () { return [
            { type: ThfDateService },
            { type: core.ElementRef }
        ]; };
        ThfDatepickerRangeComponent.propDecorators = {
            dateRangeField: [{ type: core.ViewChild, args: ['dateRangeField', { read: core.ElementRef, static: true },] }],
            endDateInput: [{ type: core.ViewChild, args: ['endDateInput', { read: core.ElementRef, static: true },] }],
            startDateInput: [{ type: core.ViewChild, args: ['startDateInput', { read: core.ElementRef, static: true },] }]
        };
        return ThfDatepickerRangeComponent;
    }(ThfDatepickerRangeBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Este é um componente baseado em input, com várias propriedades do input nativo e outras
     * propriedades extras como: máscara, pattern, mensagem de erro e etc.
     * Você deve informar a variável que contém o valor como [(ngModel)]="variavel", para que o
     * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).
     * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.
     *
     * Importante:
     *
     * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
     * Então você precisa informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
     * Exemplo: [(ngModel)]="pessoa.nome" [ngModelOptions]="{standalone: true}"
     * @abstract
     */
    var ThfInputBaseComponent = /** @class */ (function () {
        function ThfInputBaseComponent() {
            this._placeholder = '';
            this.passedWriteValue = false;
            /**
             * \@description
             *
             * Se verdadeiro, desabilita o campo.
             *
             * \@default `false`
             */
            this.disabled = false;
            /**
             * Indica que o campo será somente leitura.
             */
            this.readonly = false;
            /**
             * \@description
             *
             * Indica que o campo será obrigatório.
             *
             * > Esta propriedade é desconsiderada quando o input está desabilitado `(t-disabled)`.
             *
             * \@default `false`
             */
            this.required = false;
            /**
             * Se verdadeiro, o campo iniciará com foco.
             */
            this.focus = false;
            /**
             * Se verdadeiro, o campo receberá um botão para ser limpo.
             */
            this.clean = false;
            /**
             * \@description
             *
             * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
             *
             * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
             */
            this.errorPattern = '';
            /**
             * \@description
             *
             * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
             * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
             * através da propriedade t-pattern.
             * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
             * mesmo quando desabilitado.
             */
            this.mask = '';
            /**
             * \@description
             *
             * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
             *
             * \@default `false`
             */
            this.maskFormatModel = false;
            /**
             * Evento disparado ao sair do campo.
             */
            this.blur = new core.EventEmitter();
            /**
             * Evento disparado ao entrar do campo.
             */
            this.enter = new core.EventEmitter();
            /**
             * Evento disparado ao alterar valor e deixar o campo.
             */
            this.change = new core.EventEmitter();
            /**
             * Evento disparado ao alterar valor do model.
             */
            this.changeModel = new core.EventEmitter();
            this.onChangePropagate = null;
            this.onTouched = null;
        }
        Object.defineProperty(ThfInputBaseComponent.prototype, "placeholder", {
            get: /**
             * @return {?}
             */
            function () {
                return this._placeholder;
            },
            /**
             * @optional
             *
             * @description
             *
             * Mensagem que aparecerá enquanto o campo não estiver preenchido.
             *
             * @default ''
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Mensagem que aparecerá enquanto o campo não estiver preenchido.
             *
             * \@default ''
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._placeholder = value || '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfInputBaseComponent.prototype, "setDisabled", {
            set: /**
             * @param {?} disabled
             * @return {?}
             */
            function (disabled) {
                this.disabled = disabled === '' ? true : convertToBoolean(disabled);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfInputBaseComponent.prototype, "setReadonly", {
            set: /**
             * @param {?} readonly
             * @return {?}
             */
            function (readonly) {
                this.readonly = readonly === '' ? true : convertToBoolean(readonly);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfInputBaseComponent.prototype, "setRequired", {
            set: /**
             * @param {?} required
             * @return {?}
             */
            function (required) {
                this.required = required === '' ? true : convertToBoolean(required);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfInputBaseComponent.prototype, "setFocus", {
            set: /**
             * @param {?} focus
             * @return {?}
             */
            function (focus) {
                this.focus = focus === '' ? true : convertToBoolean(focus);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfInputBaseComponent.prototype, "setClean", {
            set: /**
             * @param {?} clean
             * @return {?}
             */
            function (clean) {
                this.clean = clean === '' ? true : convertToBoolean(clean);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfInputBaseComponent.prototype, "setPattern", {
            set: /**
             * @param {?} pattern
             * @return {?}
             */
            function (pattern) {
                this.pattern = pattern;
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfInputBaseComponent.prototype, "maxlength", {
            get: /**
             * @return {?}
             */
            function () {
                return this._maxlength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica a quantidade máxima de caracteres que o campo aceita.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica a quantidade máxima de caracteres que o campo aceita.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (!isNaN(parseInt((/** @type {?} */ (value)), 10))) {
                    this._maxlength = parseInt((/** @type {?} */ (value)), 10);
                    this.validateModel();
                }
                else if (!value) {
                    this._maxlength = undefined;
                    this.validateModel();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfInputBaseComponent.prototype, "minlength", {
            get: /**
             * @return {?}
             */
            function () {
                return this._minlength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica a quantidade mínima de caracteres que o campo aceita.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica a quantidade mínima de caracteres que o campo aceita.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (!isNaN(parseInt((/** @type {?} */ (value)), 10))) {
                    this._minlength = parseInt((/** @type {?} */ (value)), 10);
                    this.validateModel();
                }
                else if (!value) {
                    this._minlength = undefined;
                    this.validateModel();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfInputBaseComponent.prototype, "setMask", {
            set: /**
             * @param {?} mask
             * @return {?}
             */
            function (mask) {
                this.mask = mask;
                // Atualiza Máscara do Campo
                this.objMask = new ThfMask(this.mask, this.maskFormatModel);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfInputBaseComponent.prototype, "setMaskFormatModel", {
            set: /**
             * @param {?} maskFormatModel
             * @return {?}
             */
            function (maskFormatModel) {
                this.maskFormatModel = maskFormatModel === '' ? true : convertToBoolean(maskFormatModel);
                if (this.objMask instanceof ThfMask) {
                    this.objMask.formatModel = this.maskFormatModel;
                    this.validateModel();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        ThfInputBaseComponent.prototype.callOnChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.updateModel(value);
            this.controlChangeModelEmitter(value);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfInputBaseComponent.prototype.callUpdateModelWithTimeout = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.updateModel(value); }));
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfInputBaseComponent.prototype.controlChangeModelEmitter = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.modelLastUpdate !== value) {
                this.changeModel.emit(value);
                this.modelLastUpdate = value;
            }
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        ThfInputBaseComponent.prototype.registerOnChange = 
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            this.onChangePropagate = func;
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        ThfInputBaseComponent.prototype.registerOnTouched = 
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            this.onTouched = func;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfInputBaseComponent.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.validatorChange = fn;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfInputBaseComponent.prototype.updateModel = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // Quando o input não possui um formulário, então esta função não é registrada
            if (this.onChangePropagate) {
                this.onChangePropagate(value);
            }
        };
        /**
         * @param {?} c
         * @return {?}
         */
        ThfInputBaseComponent.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            if (requiredFailed(this.required, this.disabled, this.getScreenValue())) {
                return { required: {
                        valid: false,
                    } };
            }
            if (maxlengthFailed(this.maxlength, this.getScreenValue())) {
                return { maxlength: {
                        valid: false,
                    } };
            }
            if (minlengthFailed(this.minlength, this.getScreenValue())) {
                return { minlength: {
                        valid: false,
                    } };
            }
            if (patternFailed(this.pattern, c.value)) {
                this.validatePatternOnWriteValue(c.value);
                return { pattern: {
                        valid: false,
                    } };
            }
            return this.extraValidation(c);
        };
        // Função implementada do ControlValueAccessor
        // Função implementada do ControlValueAccessor
        /**
         * @param {?} value
         * @return {?}
         */
        ThfInputBaseComponent.prototype.writeValue = 
        // Função implementada do ControlValueAccessor
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.writeValueModel(value);
        };
        /**
         * @protected
         * @return {?}
         */
        ThfInputBaseComponent.prototype.validateModel = /**
         * @protected
         * @return {?}
         */
        function () {
            if (this.validatorChange) {
                this.validatorChange();
            }
        };
        // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
        // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfInputBaseComponent.prototype.validatePatternOnWriteValue = 
        // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (value && this.passedWriteValue) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.updateModel(value);
                }));
                this.passedWriteValue = false;
            }
        };
        ThfInputBaseComponent.propDecorators = {
            icon: [{ type: core.Input, args: ['t-icon',] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            help: [{ type: core.Input, args: ['t-help',] }],
            name: [{ type: core.Input, args: ['name',] }],
            placeholder: [{ type: core.Input, args: ['t-placeholder',] }],
            setDisabled: [{ type: core.Input, args: ['t-disabled',] }],
            setReadonly: [{ type: core.Input, args: ['t-readonly',] }],
            setRequired: [{ type: core.Input, args: ['t-required',] }],
            setFocus: [{ type: core.Input, args: ['t-focus',] }],
            setClean: [{ type: core.Input, args: ['t-clean',] }],
            setPattern: [{ type: core.Input, args: ['t-pattern',] }],
            errorPattern: [{ type: core.Input, args: ['t-error-pattern',] }],
            maxlength: [{ type: core.Input, args: ['t-maxlength',] }],
            minlength: [{ type: core.Input, args: ['t-minlength',] }],
            setMask: [{ type: core.Input, args: ['t-mask',] }],
            setMaskFormatModel: [{ type: core.Input, args: ['t-mask-format-model',] }],
            optional: [{ type: core.Input, args: ['t-optional',] }],
            blur: [{ type: core.Output, args: ['t-blur',] }],
            enter: [{ type: core.Output, args: ['t-enter',] }],
            change: [{ type: core.Output, args: ['t-change',] }],
            changeModel: [{ type: core.Output, args: ['t-change-model',] }]
        };
        return ThfInputBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var THF_DECIMAL_DEFAULT_DECIMALS_LENGTH = 2;
    /** @type {?} */
    var THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH = 13;
    /**
     *
     * \@docsExtends ThfInputBaseComponent
     *
     * \@description
     *
     * thf-decimal é um input específico para receber apenas números decimais.
     * Quando utilizado, o componente terá comportamento de um campo de 'text' com algumas características:
     *
     * - Aceita apenas números;
     * - Utiliza ',' como separador de decimal;
     * - Utiliza '.' para separação de milhar;
     * - É possível configurar a quantidade de casas decimais e a quantidade de digitos do campo.
     *
     * \@example
     *
     * <example name="thf-decimal-basic" title="Totvs Decimal Basic">
     *  <file name="sample-thf-decimal-basic/sample-thf-decimal-basic.component.html"> </file>
     *  <file name="sample-thf-decimal-basic/sample-thf-decimal-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-decimal-labs" title="Totvs Decimal Labs">
     *  <file name="sample-thf-decimal-labs/sample-thf-decimal-labs.component.html"> </file>
     *  <file name="sample-thf-decimal-labs/sample-thf-decimal-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-decimal-hourly-wage" title="Totvs Decimal - Hourly Wage">
     *  <file name="sample-thf-decimal-hourly-wage/sample-thf-decimal-hourly-wage.component.html"> </file>
     *  <file name="sample-thf-decimal-hourly-wage/sample-thf-decimal-hourly-wage.component.ts"> </file>
     * </example>
     *
     * <example name="thf-decimal-hourly-wage-reactive-form" title="Totvs Decimal - Hourly Wage Reactive Form">
     *  <file name="sample-thf-decimal-hourly-wage-reactive-form/sample-thf-decimal-hourly-wage-reactive-form.component.html"> </file>
     *  <file name="sample-thf-decimal-hourly-wage-reactive-form/sample-thf-decimal-hourly-wage-reactive-form.component.ts"> </file>
     * </example>
     */
    var ThfDecimalComponent = /** @class */ (function (_super) {
        __extends(ThfDecimalComponent, _super);
        function ThfDecimalComponent(el) {
            var _this = _super.call(this) || this;
            _this.el = el;
            _this._decimalsLength = THF_DECIMAL_DEFAULT_DECIMALS_LENGTH;
            _this._thousandMaxlength = THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH;
            _this.decimalSeparator = ',';
            _this.fireChange = false;
            _this.isKeyboardAndroid = false;
            _this.minusSign = '-';
            _this.oldDotsLength = null;
            _this.thousandSeparator = '.';
            _this.regex = {
                thousand: new RegExp('\\' + '.', 'g'),
                decimal: new RegExp('\\' + ',', 'g')
            };
            _this.isKeyboardAndroid = !!navigator.userAgent.match(/Android/i);
            return _this;
        }
        Object.defineProperty(ThfDecimalComponent.prototype, "decimalsLength", {
            get: /**
             * @return {?}
             */
            function () {
                return this._decimalsLength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Quantidade máxima de casas decimais.
             *
             * @default `2`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Quantidade máxima de casas decimais.
             *
             * \@default `2`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._decimalsLength = convertToInt(value, THF_DECIMAL_DEFAULT_DECIMALS_LENGTH);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDecimalComponent.prototype, "thousandMaxlength", {
            get: /**
             * @return {?}
             */
            function () {
                return this._thousandMaxlength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Número máximo de dígitos antes do separador de decimal. O valor máximo possível deve ser menor ou igual a 13.
             *
             * @default `13`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Número máximo de dígitos antes do separador de decimal. O valor máximo possível deve ser menor ou igual a 13.
             *
             * \@default `13`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var thousandMaxlength = convertToInt(value, THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH);
                this._thousandMaxlength = thousandMaxlength <= THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH ?
                    thousandMaxlength : THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfDecimalComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.putFocus();
            this.setPaddingInput();
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfDecimalComponent.prototype.clear = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.callOnChange(value);
            this.controlChangeEmitter();
        };
        /**
         * @param {?} c
         * @return {?}
         */
        ThfDecimalComponent.prototype.extraValidation = /**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            return null;
        };
        /**
         * @return {?}
         */
        ThfDecimalComponent.prototype.getScreenValue = /**
         * @return {?}
         */
        function () {
            return (this.inputEl) ? this.inputEl.nativeElement.value : '';
        };
        /**
         * @return {?}
         */
        ThfDecimalComponent.prototype.hasInvalidClass = /**
         * @return {?}
         */
        function () {
            return (this.el.nativeElement.classList.contains('ng-invalid') &&
                this.el.nativeElement.classList.contains('ng-dirty') &&
                this.getScreenValue() !== '');
        };
        /**
         * @param {?=} value
         * @return {?}
         */
        ThfDecimalComponent.prototype.hasLetters = /**
         * @param {?=} value
         * @return {?}
         */
        function (value) {
            if (value === void 0) { value = ''; }
            return value.match(/[a-zA-Z:;+=_´^~"'@#$%¨&*()/\\|]+/);
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfDecimalComponent.prototype.isValidNumber = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // - event.key não existia em alguns browsers, como Samsung browser e Firefox.
            /** @type {?} */
            var keyValue = (/** @type {?} */ (String.fromCharCode(event.which)));
            /** @type {?} */
            var validKey = event.which !== 8 && event.which !== 0;
            return !this.hasLetters(keyValue) && validKey;
        };
        // função responsável por adicionar os zeroes com as casa decimais ao sair do campo.
        // função responsável por adicionar os zeroes com as casa decimais ao sair do campo.
        /**
         * @param {?} event
         * @return {?}
         */
        ThfDecimalComponent.prototype.onBlur = 
        // função responsável por adicionar os zeroes com as casa decimais ao sair do campo.
        /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var value = event.target.value;
            if (value) {
                if (this.hasLetters(value) || this.containsMoreThanOneComma(value)) {
                    this.setViewValue('');
                    this.callOnChange(undefined);
                    return;
                }
                /** @type {?} */
                var valueWithoutThousandSeparator = this.formatValueWithoutThousandSeparator(value);
                this.setViewValue(this.formatToViewValue(valueWithoutThousandSeparator));
            }
            this.blur.emit();
            this.controlChangeEmitter();
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfDecimalComponent.prototype.onFocus = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // Atualiza valor da variável que será usada para verificar se o campo teve alteração
            this.valueBeforeChange = this.getScreenValue();
            // Dispara evento quando o usuário entrar no campo
            // Este evento também é disparado quando o campo inicia com foco.
            this.enter.emit();
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfDecimalComponent.prototype.onInput = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var selectionStart = event.target.selectionStart;
            /** @type {?} */
            var selectionEnd = event.target.selectionEnd;
            /** @type {?} */
            var modelValue;
            /** @type {?} */
            var viewValue;
            // - Browsers nativos do Android ex: Samsung Browser.
            if (this.isKeyboardAndroid) {
                this.onInputKeyboardAndroid(event);
            }
            modelValue = this.formatValueWithoutThousandSeparator(event.target.value);
            modelValue = this.addZeroBefore(modelValue);
            viewValue = this.formatMask(modelValue);
            // validação para não quebrar IE com placeholder definido e Input vazio
            if (viewValue) {
                this.setViewValue(viewValue);
                this.setCursorInput(event, selectionStart, selectionEnd);
            }
            this.callOnChange(this.formatToModelValue(modelValue));
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfDecimalComponent.prototype.onInputKeyboardAndroid = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var inputValue = event.target.value;
            /** @type {?} */
            var selectionStart = event.target.selectionStart;
            /** @type {?} */
            var hasLetters = this.hasLetters(inputValue);
            if (hasLetters) {
                this.setViewValue(inputValue.replace(hasLetters[0], ''));
                return event.preventDefault();
            }
            else {
                /** @type {?} */
                var position = selectionStart - 1;
                /** @type {?} */
                var key = inputValue.charAt(position);
                this.setPositionValue(event);
                if (this.isValidKey(event, key)) {
                    this.setViewValue(inputValue);
                }
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfDecimalComponent.prototype.onKeyPress = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.isValidKey(event);
        };
        /**
         * @return {?}
         */
        ThfDecimalComponent.prototype.setPaddingInput = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var selectorIcons = '.thf-field-icon-container:not(.thf-field-icon-container-left) > .thf-icon';
                /** @type {?} */
                var icons = _this.el.nativeElement.querySelectorAll(selectorIcons).length;
                if (_this.clean) {
                    icons++;
                }
                if (icons) {
                    _this.inputEl.nativeElement.style.paddingRight = icons * 36 + "px";
                }
            }));
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfDecimalComponent.prototype.writeValueModel = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.inputEl) {
                if (value || value === 0) {
                    /** @type {?} */
                    var formatedViewValue = this.formatToViewValue(value);
                    this.setViewValue(formatedViewValue);
                }
                else {
                    this.setViewValue('');
                }
            }
            if (value) {
                this.change.emit(value);
            }
        };
        // reponsável por adicionar 0 antes da virgula (decimalSeparator).
        // reponsável por adicionar 0 antes da virgula (decimalSeparator).
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfDecimalComponent.prototype.addZeroBefore = 
        // reponsável por adicionar 0 antes da virgula (decimalSeparator).
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var isDecimalSeparator = value === this.decimalSeparator;
            return isDecimalSeparator ? "0" + value : value;
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfDecimalComponent.prototype.containsComma = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return value.includes(this.decimalSeparator);
        };
        /**
         * @private
         * @param {?=} value
         * @return {?}
         */
        ThfDecimalComponent.prototype.containsMoreThanOneComma = /**
         * @private
         * @param {?=} value
         * @return {?}
         */
        function (value) {
            if (value === void 0) { value = ''; }
            /** @type {?} */
            var foundComma = value.match(/,/g);
            return !!(foundComma && foundComma.length > 1);
        };
        /**
         * @private
         * @return {?}
         */
        ThfDecimalComponent.prototype.controlChangeEmitter = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var elementValue = this.getScreenValue();
            // Emite o evento change manualmente quando o campo é alterado
            // Este evento é controlado manualmente devido ao preventDefault existente na máscara
            // e devido ao controle do t-clean, que também precisa emitir change
            if (elementValue !== this.valueBeforeChange) {
                this.fireChange = true;
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    if (_this.fireChange) {
                        _this.change.emit(elementValue);
                    }
                }), 200);
            }
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfDecimalComponent.prototype.formatMask = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // necessário para não adicionar . nas casa decimais.
            // por exemplo: 12.345,123.45 (errado)
            // 12.345,12345 (correto)
            if (value.match(this.regex.decimal)) {
                /** @type {?} */
                var regex = new RegExp('(\\d)(?=(\\d{3})+(?!\\d),)', 'g');
                return value.toString().replace(regex, '$1.');
            }
            return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1.');
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfDecimalComponent.prototype.formatToModelValue = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var formattedValue = this.replaceCommaToDot(value);
            /** @type {?} */
            var parsedValue = formattedValue ? parseFloat(Number(formattedValue).toFixed(this.decimalsLength)) : undefined;
            return parsedValue === 0 || parsedValue ? parsedValue : undefined;
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfDecimalComponent.prototype.formatToViewValue = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var formatedNumber;
            /** @type {?} */
            var numberValue;
            /** @type {?} */
            var valueBeforeDot;
            /** @type {?} */
            var valueAfterDot;
            // - Necessário para tratar valores que contenham decimalSeparator
            value = this.replaceCommaToDot(value);
            numberValue = Number(value).toFixed(this.decimalsLength);
            valueBeforeDot = this.getValueBeforeSeparator(numberValue, this.thousandSeparator);
            valueAfterDot = this.getValueAfterSeparator(numberValue, this.thousandSeparator);
            formatedNumber = this.formatMask(valueBeforeDot);
            if (this.decimalsLength === 0) {
                return formatedNumber;
            }
            else {
                return formatedNumber + this.decimalSeparator + valueAfterDot;
            }
        };
        /**
         * @private
         * @param {?=} value
         * @return {?}
         */
        ThfDecimalComponent.prototype.formatValueWithoutThousandSeparator = /**
         * @private
         * @param {?=} value
         * @return {?}
         */
        function (value) {
            if (value === void 0) { value = ''; }
            return value.toString().replace(this.regex.thousand, '');
        };
        /**
         * @private
         * @param {?=} value
         * @param {?=} separator
         * @return {?}
         */
        ThfDecimalComponent.prototype.getValueAfterSeparator = /**
         * @private
         * @param {?=} value
         * @param {?=} separator
         * @return {?}
         */
        function (value, separator) {
            if (value === void 0) { value = ''; }
            return value.split(separator)[1] || '';
        };
        /**
         * @private
         * @param {?=} value
         * @param {?=} separator
         * @return {?}
         */
        ThfDecimalComponent.prototype.getValueBeforeSeparator = /**
         * @private
         * @param {?=} value
         * @param {?=} separator
         * @return {?}
         */
        function (value, separator) {
            if (value === void 0) { value = ''; }
            return value.split(separator)[0] || '';
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfDecimalComponent.prototype.hasLessDot = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                /** @type {?} */
                var dots = value.match(this.regex.thousand);
                /** @type {?} */
                var dotsLength = dots && dots.length;
                if (dotsLength < this.oldDotsLength) {
                    this.oldDotsLength = dotsLength;
                    return true;
                }
            }
            if (!value) {
                this.oldDotsLength = null;
            }
            return false;
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfDecimalComponent.prototype.hasMoreDot = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                /** @type {?} */
                var dots = value.match(this.regex.thousand);
                /** @type {?} */
                var dotsLength = dots && dots.length;
                if (dotsLength > this.oldDotsLength) {
                    this.oldDotsLength = dotsLength;
                    return true;
                }
            }
            if (!value) {
                this.oldDotsLength = null;
            }
            return false;
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfDecimalComponent.prototype.hasMinusSignInvalidPosition = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var keyIsMinusSign = event.key === this.minusSign;
            /** @type {?} */
            var selectionStart = event.target.selectionStart;
            return keyIsMinusSign && selectionStart !== 0;
        };
        /**
         * @private
         * @param {?} event
         * @param {?} charCode
         * @return {?}
         */
        ThfDecimalComponent.prototype.isInvalidKey = /**
         * @private
         * @param {?} event
         * @param {?} charCode
         * @return {?}
         */
        function (event, charCode) {
            /** @type {?} */
            var isInvalidNumber = !this.isValidNumber(event);
            return this.verifyInsertComma(event) || this.verifyThousandLength(event) ||
                this.verifyValueAfterComma(event) || this.verifyInsertMinusSign(event) ||
                this.hasMinusSignInvalidPosition(event) || isInvalidNumber ||
                this.validateCursorPositionBeforeSeparator(event) || this.verifyDecimalLengthIsZeroAndKeyPressedIsComma(charCode);
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfDecimalComponent.prototype.isKeyDecimalSeparator = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            return event.key === this.decimalSeparator || event.char === this.decimalSeparator;
        };
        /**
         * @private
         * @param {?} positionCursor
         * @param {?} value
         * @return {?}
         */
        ThfDecimalComponent.prototype.isPositionAfterDecimalSeparator = /**
         * @private
         * @param {?} positionCursor
         * @param {?} value
         * @return {?}
         */
        function (positionCursor, value) {
            /** @type {?} */
            var indexComma = value && value.indexOf(this.decimalSeparator);
            if (indexComma && this.decimalsLength > 0) {
                return positionCursor > indexComma;
            }
        };
        /**
         * @private
         * @param {?} target
         * @return {?}
         */
        ThfDecimalComponent.prototype.isSelectionStartDifferentSelectionEnd = /**
         * @private
         * @param {?} target
         * @return {?}
         */
        function (target) {
            return target.selectionStart !== target.selectionEnd;
        };
        /**
         * @private
         * @param {?} event
         * @param {?=} key
         * @return {?}
         */
        ThfDecimalComponent.prototype.isValidKey = /**
         * @private
         * @param {?} event
         * @param {?=} key
         * @return {?}
         */
        function (event, key) {
            /** @type {?} */
            var charCode = event.which || event.keyCode;
            /** @type {?} */
            var validKey = event.which === 8 || event.which === 0;
            if (validKey && !this.isKeyboardAndroid) {
                return;
            }
            if (key) {
                event.key = key;
            }
            if (this.isInvalidKey(event, charCode)) {
                event.preventDefault();
                return false;
            }
            return true;
        };
        // Quando decimalsLength for 0 não deve permitir informar vírgula (decimalSeparator)
        // Quando decimalsLength for 0 não deve permitir informar vírgula (decimalSeparator)
        /**
         * @private
         * @param {?} charCode
         * @return {?}
         */
        ThfDecimalComponent.prototype.verifyDecimalLengthIsZeroAndKeyPressedIsComma = 
        // Quando decimalsLength for 0 não deve permitir informar vírgula (decimalSeparator)
        /**
         * @private
         * @param {?} charCode
         * @return {?}
         */
        function (charCode) {
            return (charCode === 44 && this.decimalsLength === 0);
        };
        /**
         * @private
         * @return {?}
         */
        ThfDecimalComponent.prototype.putFocus = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.focus) {
                this.inputEl.nativeElement.focus();
            }
        };
        /**
         * @private
         * @param {?} target
         * @param {?} selectionStart
         * @param {?} selectionEnd
         * @return {?}
         */
        ThfDecimalComponent.prototype.setInitialSelectionRange = /**
         * @private
         * @param {?} target
         * @param {?} selectionStart
         * @param {?} selectionEnd
         * @return {?}
         */
        function (target, selectionStart, selectionEnd) {
            if (selectionStart === 1 && selectionEnd === 1) {
                return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
            }
            return target.setSelectionRange(selectionStart - 1, selectionEnd - 1);
        };
        /**
         * @private
         * @param {?} value
         * @param {?} index
         * @param {?} replace
         * @return {?}
         */
        ThfDecimalComponent.prototype.replaceAt = /**
         * @private
         * @param {?} value
         * @param {?} index
         * @param {?} replace
         * @return {?}
         */
        function (value, index, replace) {
            return value.substring(0, index) + replace + value.substring(index + 1);
        };
        /**
         * @private
         * @param {?=} value
         * @return {?}
         */
        ThfDecimalComponent.prototype.replaceCommaToDot = /**
         * @private
         * @param {?=} value
         * @return {?}
         */
        function (value) {
            if (value === void 0) { value = ''; }
            return value.toString().replace(this.regex.decimal, '.');
        };
        /**
         * @private
         * @param {?} event
         * @param {?} selectionStart
         * @param {?} selectionEnd
         * @return {?}
         */
        ThfDecimalComponent.prototype.setCursorInput = /**
         * @private
         * @param {?} event
         * @param {?} selectionStart
         * @param {?} selectionEnd
         * @return {?}
         */
        function (event, selectionStart, selectionEnd) {
            /** @type {?} */
            var target = event.target;
            /** @type {?} */
            var viewValue = target.value;
            // Caso houver mais . do que anteriormente soma o valor com 1.
            if (this.hasMoreDot(viewValue) || viewValue === ('0' + this.decimalSeparator)) {
                return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
            }
            // Caso houver menos . do que anteriormente subtrai o valor por 1.
            if (this.hasLessDot(viewValue)) {
                this.setInitialSelectionRange(target, selectionStart, selectionEnd);
            }
            return target.setSelectionRange(selectionStart, selectionEnd);
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfDecimalComponent.prototype.setPositionValue = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var value = event.target.value;
            /** @type {?} */
            var position = event.target.selectionStart - 1;
            if (position > 0 && event.key === this.minusSign) {
                event.target.value = value.substring(0, position) + value.substr(position + 1);
            }
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfDecimalComponent.prototype.setViewValue = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.inputEl.nativeElement.value = value;
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfDecimalComponent.prototype.validateCursorPositionBeforeSeparator = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var target = event.target;
            /** @type {?} */
            var originalValue = this.formatValueWithoutThousandSeparator(target.value);
            /** @type {?} */
            var valueBeforeSeparator = this.getValueBeforeSeparator(target.value, this.decimalSeparator);
            /** @type {?} */
            var valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
            if (this.isSelectionStartDifferentSelectionEnd(target)) {
                return false;
            }
            return target.selectionStart <= valueBeforeSeparator.length &&
                valueBeforeSeparatorOriginal.length === this.thousandMaxlength &&
                !this.isKeyDecimalSeparator(event);
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfDecimalComponent.prototype.verifyThousandLength = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var target = event.target;
            /** @type {?} */
            var originalValue = this.formatValueWithoutThousandSeparator(target.value);
            /** @type {?} */
            var valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
            if (this.isSelectionStartDifferentSelectionEnd(target)) {
                return false;
            }
            return valueBeforeSeparatorOriginal.length >= this.thousandMaxlength &&
                !this.isKeyDecimalSeparator(event) &&
                this.isPositionAfterDecimalSeparator(target.selectionStart - this.decimalsLength, target.value);
        };
        /**
         * @private
         * @param {?} e
         * @return {?}
         */
        ThfDecimalComponent.prototype.verifyInsertComma = /**
         * @private
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var hasComma = this.containsComma(e.target.value);
            return hasComma && e.key === this.decimalSeparator;
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfDecimalComponent.prototype.verifyInsertMinusSign = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var value = event.target.value;
            /** @type {?} */
            var indexMinusSign = (value.lastIndexOf(this.minusSign) !== -1);
            /** @type {?} */
            var positionMinusSign = value.lastIndexOf('-');
            /** @type {?} */
            var occurancesMinusSign = value.match(new RegExp('-', 'g'));
            if (this.isKeyboardAndroid && indexMinusSign && occurancesMinusSign.length > 1) {
                event.target.value = this.replaceAt(value, positionMinusSign, '');
            }
            return indexMinusSign && event.key === this.minusSign;
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfDecimalComponent.prototype.verifyValueAfterComma = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var value = event.target.value;
            /** @type {?} */
            var selectionStart = event.target.selectionStart;
            /** @type {?} */
            var valueAfterSeparator = this.getValueAfterSeparator(value, this.decimalSeparator);
            return this.isPositionAfterDecimalSeparator(selectionStart, value) && valueAfterSeparator.length >= this.decimalsLength;
        };
        ThfDecimalComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-decimal',
                        template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n\n    <div *ngIf=\"icon\" class=\"thf-field-icon-container-left\">\n      <span class=\"thf-icon thf-field-icon {{ icon }}\" [class.thf-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inp\n      class=\"thf-input\"\n      type=\"text\"\n      (input)=\"onInput($event)\"\n      (focus)=\"onFocus($event)\"\n      (blur)=\"onBlur($event)\"\n      (keypress)=\"onKeyPress($event)\"\n      [attr.name]=\"name\"\n      [class.thf-input-icon-left]=\"icon\"\n      [class.thf-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"></thf-clean>\n    </div>\n  </div>\n\n  <thf-field-container-bottom>\n  </thf-field-container-bottom>\n\n</thf-field-container>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfDecimalComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfDecimalComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfDecimalComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        ThfDecimalComponent.propDecorators = {
            inputEl: [{ type: core.ViewChild, args: ['inp', { read: core.ElementRef, static: true },] }],
            decimalsLength: [{ type: core.Input, args: ['t-decimals-length',] }],
            thousandMaxlength: [{ type: core.Input, args: ['t-thousand-maxlength',] }]
        };
        return ThfDecimalComponent;
    }(ThfInputBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var ThfInputGeneric = /** @class */ (function (_super) {
        __extends(ThfInputGeneric, _super);
        function ThfInputGeneric(el) {
            var _this = _super.call(this) || this;
            _this.type = 'text';
            _this.el = el;
            return _this;
        }
        /**
         * @return {?}
         */
        ThfInputGeneric.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.afterViewInit();
        };
        /**
         * @return {?}
         */
        ThfInputGeneric.prototype.afterViewInit = /**
         * @return {?}
         */
        function () {
            this.putFocus();
            if (this.type !== 'password') {
                this.setPaddingInput();
            }
        };
        /**
         * @return {?}
         */
        ThfInputGeneric.prototype.setPaddingInput = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var selectorIcons = '.thf-field-icon-container:not(.thf-field-icon-container-left) > .thf-icon';
                /** @type {?} */
                var icons = _this.el.nativeElement.querySelectorAll(selectorIcons).length;
                if (_this.clean) {
                    icons++;
                }
                if (icons) {
                    _this.inputEl.nativeElement.style.paddingRight = icons * 36 + "px";
                }
            }));
        };
        /**
         * @return {?}
         */
        ThfInputGeneric.prototype.putFocus = /**
         * @return {?}
         */
        function () {
            if (this.focus) {
                this.inputEl.nativeElement.focus();
            }
        };
        /**
         * @param {?} e
         * @return {?}
         */
        ThfInputGeneric.prototype.onKeydown = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (this.mask && !this.readonly && e.target.keyCode !== 229) {
                this.eventOnBlur(e);
                this.objMask.keydown(e);
            }
        };
        /**
         * @param {?} e
         * @return {?}
         */
        ThfInputGeneric.prototype.onKeyup = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (this.mask && !this.readonly) {
                if (e.target.keyCode !== 229) {
                    this.eventOnBlur(e);
                    this.objMask.keyup(e);
                }
                this.callOnChange(this.objMask.valueToModel);
            }
        };
        /**
         * @param {?} e
         * @return {?}
         */
        ThfInputGeneric.prototype.eventOnInput = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!this.mask) {
                /** @type {?} */
                var value = this.validMaxLength(this.maxlength, e.target.value);
                this.inputEl.nativeElement.value = value;
                this.callOnChange(value);
            }
        };
        /**
         * @param {?} maxlength
         * @param {?} value
         * @return {?}
         */
        ThfInputGeneric.prototype.validMaxLength = /**
         * @param {?} maxlength
         * @param {?} value
         * @return {?}
         */
        function (maxlength, value) {
            return ((maxlength || maxlength === 0) && value.length > maxlength) ? value.toString().substring(0, maxlength) : value;
        };
        /**
         * @param {?} e
         * @return {?}
         */
        ThfInputGeneric.prototype.eventOnFocus = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            // Atualiza valor da variável que será usada para verificar se o campo teve alteração
            this.valueBeforeChange = this.inputEl.nativeElement.value;
            // Dispara evento quando o usuário entrar no campo
            // Este evento também é disparado quando o campo inicia com foco.
            this.enter.emit();
        };
        /**
         * @param {?} e
         * @return {?}
         */
        ThfInputGeneric.prototype.eventOnBlur = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (this.mask) {
                this.objMask.blur(e);
            }
            if (e.type === 'blur') {
                this.blur.emit();
                this.controlChangeEmitter();
            }
        };
        /**
         * @return {?}
         */
        ThfInputGeneric.prototype.controlChangeEmitter = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var elementValue = this.inputEl.nativeElement.value;
            // Emite o evento change manualmente quando o campo é alterado
            // Este evento é controlado manualmente devido ao preventDefault existente na máscara
            // e devido ao controle do t-clean, que também precisa emitir change
            if (elementValue !== this.valueBeforeChange) {
                clearTimeout(this.timeoutChange);
                this.timeoutChange = setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.change.emit(elementValue);
                }), 200);
            }
        };
        /**
         * @param {?} e
         * @return {?}
         */
        ThfInputGeneric.prototype.eventOnClick = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            // Atualiza a posição do cursor ao clicar
            if (this.mask) {
                this.objMask.click(e);
            }
        };
        /**
         * @return {?}
         */
        ThfInputGeneric.prototype.hasInvalidClass = /**
         * @return {?}
         */
        function () {
            return (this.el.nativeElement.classList.contains('ng-invalid') &&
                this.el.nativeElement.classList.contains('ng-dirty') &&
                this.inputEl.nativeElement.value !== '');
        };
        /**
         * @return {?}
         */
        ThfInputGeneric.prototype.getErrorPattern = /**
         * @return {?}
         */
        function () {
            return (this.errorPattern !== '' && this.hasInvalidClass()) ? this.errorPattern : '';
        };
        /**
         * @return {?}
         */
        ThfInputGeneric.prototype.validateClassesForPattern = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var value = this.getScreenValue();
            /** @type {?} */
            var element = this.el.nativeElement;
            if (value && !this.verifyPattern(this.pattern, value)) {
                element.classList.add('ng-invalid');
                element.classList.add('ng-dirty');
            }
            else {
                element.classList.remove('ng-invalid');
            }
        };
        /**
         * @param {?} pattern
         * @param {?} value
         * @return {?}
         */
        ThfInputGeneric.prototype.verifyPattern = /**
         * @param {?} pattern
         * @param {?} value
         * @return {?}
         */
        function (pattern, value) {
            return new RegExp(pattern).test(value);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfInputGeneric.prototype.clear = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.callOnChange(value);
            this.controlChangeEmitter();
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfInputGeneric.prototype.writeValueModel = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.passedWriteValue = true;
            if (this.inputEl) {
                if (value) {
                    if (this.mask) {
                        this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                        // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                        if (this.objMask.formatModel) {
                            this.callUpdateModelWithTimeout(this.objMask.valueToModel);
                        }
                    }
                    else {
                        this.inputEl.nativeElement.value = value;
                    }
                }
                else {
                    // Se o valor for indefinido, deve limpar o campo.
                    this.inputEl.nativeElement.value = '';
                }
            }
            // Emite evento quando o model é atualizado, inclusive a primeira vez
            if (value) {
                this.changeModel.emit(value);
            }
        };
        /**
         * @return {?}
         */
        ThfInputGeneric.prototype.getScreenValue = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var screenValue = this.inputEl && this.inputEl.nativeElement.value || undefined;
            if (this.type === 'number') {
                /** @type {?} */
                var parsedValue = parseFloat(screenValue);
                return parsedValue || parsedValue === 0 ? parsedValue : null;
            }
            else {
                return screenValue;
            }
        };
        ThfInputGeneric.propDecorators = {
            inputEl: [{ type: core.ViewChild, args: ['inp', { read: core.ElementRef, static: true },] }],
            onKeydown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }],
            onKeyup: [{ type: core.HostListener, args: ['keyup', ['$event'],] }]
        };
        return ThfInputGeneric;
    }(ThfInputBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfInputBaseComponent
     *
     * \@description
     *
     * thf-email é um input específico para receber E-mail, com o pattern já configurado.
     *
     * \@example
     *
     * <example name="thf-email-basic" title="Totvs Email Basic">
     *  <file name="sample-thf-email-basic/sample-thf-email-basic.component.html"> </file>
     *  <file name="sample-thf-email-basic/sample-thf-email-basic.component.ts"> </file>
     *  <file name="sample-thf-email-basic/sample-thf-email-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-thf-email-basic/sample-thf-email-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="thf-email-labs" title="Totvs Email Labs">
     *  <file name="sample-thf-email-labs/sample-thf-email-labs.component.html"> </file>
     *  <file name="sample-thf-email-labs/sample-thf-email-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-email-newsletter" title="Totvs Email - Newsletter">
     *  <file name="sample-thf-email-newsletter/sample-thf-email-newsletter.component.html"> </file>
     *  <file name="sample-thf-email-newsletter/sample-thf-email-newsletter.component.ts"> </file>
     * </example>
     */
    var ThfEmailComponent = /** @class */ (function (_super) {
        __extends(ThfEmailComponent, _super);
        function ThfEmailComponent(el) {
            var _this = _super.call(this, el) || this;
            _this.icon = 'thf-icon-mail';
            _this.maxlength = 254;
            _this.type = 'email';
            _this.pattern = '^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$';
            _this.mask = '';
            _this.listener = _this.validateClassesForPattern.bind(_this);
            return _this;
        }
        /**
         * @return {?}
         */
        ThfEmailComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                // Se não tem ngModel ou reactive form adiciona validação com classes css
                if (!_this.onChangePropagate) {
                    _this.inputEl.nativeElement.addEventListener('keyup', _this.listener);
                }
            }));
        };
        /**
         * @return {?}
         */
        ThfEmailComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (!this.onChangePropagate) {
                this.inputEl.nativeElement.removeEventListener('keyup', this.listener);
            }
        };
        /**
         * @param {?} c
         * @return {?}
         */
        ThfEmailComponent.prototype.extraValidation = /**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            return null;
        };
        ThfEmailComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-email',
                        template: "<thf-field-container\n  [t-help]=\"help\"\n  [t-label]=\"label\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n    <div *ngIf=\"icon\" class=\"thf-field-icon-container-left\">\n      <span class=\"thf-icon thf-field-icon {{ icon }}\" [class.thf-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inp\n      class=\"thf-input\"\n      [attr.name]=\"name\"\n      [class.thf-input-icon-left]=\"icon\"\n      [class.thf-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"></thf-clean>\n    </div>\n  </div>\n\n  <thf-field-container-bottom\n    [t-error-pattern]=\"getErrorPattern()\">\n  </thf-field-container-bottom>\n\n</thf-field-container>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfEmailComponent; })),
                                multi: true
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfEmailComponent; })),
                                multi: true
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfEmailComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        return ThfEmailComponent;
    }(ThfInputGeneric));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * Componente de uso interno, responsável por atribuir uma label para o campo
     */
    var ThfFieldContainerComponent = /** @class */ (function () {
        function ThfFieldContainerComponent() {
            this._optional = false;
        }
        Object.defineProperty(ThfFieldContainerComponent.prototype, "optional", {
            get: /**
             * @return {?}
             */
            function () {
                return this._optional;
            },
            /** Indica se o campo será opcional. */
            set: /**
             * Indica se o campo será opcional.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._optional = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfFieldContainerComponent.prototype.getOptionalText = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var browserLanguage = getShortBrowserLanguage();
            /** @type {?} */
            var optional = {
                pt: '(Opcional)',
                en: '(Optional)',
                es: '(Opcional)'
            };
            return optional[browserLanguage];
        };
        ThfFieldContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-field-container',
                        template: "<div class=\"thf-field-container\">\n  <div class=\"thf-field-container-title\">\n    <span class=\"thf-field-title\">{{ label }}</span>\n    <span class=\"thf-field-optional\" *ngIf=\"optional && (label || help)\">{{ getOptionalText() }}</span>\n  </div>\n\n  <div class=\"thf-field-help\" *ngIf=\"help\">{{ help }}</div>\n\n  <ng-content></ng-content>\n</div>\n"
                    }] }
        ];
        ThfFieldContainerComponent.propDecorators = {
            label: [{ type: core.Input, args: ['t-label',] }],
            help: [{ type: core.Input, args: ['t-help',] }],
            optional: [{ type: core.Input, args: ['t-optional',] }]
        };
        return ThfFieldContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente de uso interno, responsável por gerar uma margem inferior nos componentes que utilizam o thf-field-container.
     * Essa margem inferior pode conter uma mensagem de erro.
     */
    var ThfFieldContainerBottomComponent = /** @class */ (function () {
        function ThfFieldContainerBottomComponent() {
            /**
             * Mensagem que será apresentada quando o pattern ou a máscara não for satisfeita.
             * Obs: Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
             */
            this.errorPattern = '';
        }
        ThfFieldContainerBottomComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-field-container-bottom',
                        template: "<div class=\"thf-field-container-bottom\">\n  <span *ngIf=\"errorPattern\"  class=\"thf-field-container-bottom-text-error\">\n    <span class=\"thf-icon thf-icon-warning thf-field-container-icon-error\"></span>\n    {{ errorPattern }}\n  </span>\n</div>\n"
                    }] }
        ];
        ThfFieldContainerBottomComponent.propDecorators = {
            errorPattern: [{ type: core.Input, args: ['t-error-pattern',] }]
        };
        return ThfFieldContainerBottomComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfInputBaseComponent
     *
     * \@description
     * O thf-login é um input específico para login. Já possui tipo, estilo e ícone predefinidos.
     *
     * \@example
     *
     * <example name="thf-login-basic" title="Totvs Login Basic">
     *  <file name="sample-thf-login-basic/sample-thf-login-basic.component.html"> </file>
     *  <file name="sample-thf-login-basic/sample-thf-login-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-login-labs" title="Totvs Login Labs">
     *  <file name="sample-thf-login-labs/sample-thf-login-labs.component.html"> </file>
     *  <file name="sample-thf-login-labs/sample-thf-login-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-login-confirm" title="Totvs Login - Confirm Identity">
     *  <file name="sample-thf-login-confirm/sample-thf-login-confirm.component.html"> </file>
     *  <file name="sample-thf-login-confirm/sample-thf-login-confirm.component.ts"> </file>
     * </example>
     *
     */
    var ThfLoginComponent = /** @class */ (function (_super) {
        __extends(ThfLoginComponent, _super);
        function ThfLoginComponent(el) {
            var _this = _super.call(this, el) || this;
            _this.type = 'text';
            return _this;
        }
        /**
         * @param {?} c
         * @return {?}
         */
        ThfLoginComponent.prototype.extraValidation = /**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            return null;
        };
        ThfLoginComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-login',
                        template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n    <div class=\"thf-field-icon-container-left\">\n      <span class=\"thf-icon thf-field-icon thf-icon-user\" [class.thf-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inp\n      class=\"thf-input thf-input-icon-left\"\n      [attr.name]=\"name\"\n      [class.thf-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"></thf-clean>\n    </div>\n  </div>\n\n  <thf-field-container-bottom\n    [t-error-pattern]=\"getErrorPattern()\">\n  </thf-field-container-bottom>\n\n</thf-field-container>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfLoginComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfLoginComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfLoginComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        return ThfLoginComponent;
    }(ThfInputGeneric));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviço. Nesta janela é possível buscar e
     * selecionar o registro que será enviado para o campo. O `thf-lookup` permite que o usuário digite um valor e pressione a tecla *TAB* para
     * buscar um registro.
     *
     * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo será limpado.
     * No segundo caso ocorrerá após este perder o foco; ambos os casos o campo ficará inválido quando requerido.
     *
     * Este componente não é recomendado quando a busca dos dados possuir poucas informações, para isso utilize outros componentes como o
     * `thf-select` ou o `thf-combo`.
     * @abstract
     */
    var ThfLookupBaseComponent = /** @class */ (function () {
        function ThfLookupBaseComponent(defaultService) {
            this.defaultService = defaultService;
            this._disabled = false;
            this._focus = false;
            this._required = false;
            this.oldValue = '';
            this.onChangePropagate = null;
            // tslint:disable-next-line
            this.onTouched = null;
            /**
             * Mensagem que aparecerá enquanto o campo não estiver preenchido.
             */
            this.placeholder = '';
            /**
             * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
             * Será passado por parâmetro o objeto de erro retornado.
             */
            this.onError = new core.EventEmitter();
            /**
             * Evento será disparado quando ocorrer alguma seleção.
             * Será passado por parâmetro o objeto com o valor selecionado.
             */
            this.selected = new core.EventEmitter();
        }
        Object.defineProperty(ThfLookupBaseComponent.prototype, "filterService", {
            get: /**
             * @return {?}
             */
            function () {
                return this._filterService;
            },
            /**
             * Serviço responsável por buscar os dados da tabela na janela. Pode ser informado um serviço que implemente a interface
             * `ThfLookupFilter` ou uma URL.
             *
             * Quando utilizada uma URL de um serviço, será concatenada nesta URL o valor que deseja-se filtrar, por exemplo:
             *
             * ```
             * url + ?page=1&pageSize=20&filter=Peter
             * ```
             *
             * Se for definido a propriedade `t-filter-params`, o mesmo também será concatenado. Por exemplo, para o
             * parâmetro `{ age: 23 }` a URL ficaria:
             *
             * ```
             * url + ?page=1&pageSize=20&age=23&filter=Peter
             * ```
             *
             * > Esta URL deve retornar e receber os dados no padrão de
             * [API da TOTVS](http://tdn.totvs.com/display/public/INT/Guia+de+implementacao+das+APIs+TOTVS) e utiliza os valores
             * definidos nas propriedades `t-field-label` e `t-field-value` para a construção do `thf-lookup`.
             */
            set: /**
             * Serviço responsável por buscar os dados da tabela na janela. Pode ser informado um serviço que implemente a interface
             * `ThfLookupFilter` ou uma URL.
             *
             * Quando utilizada uma URL de um serviço, será concatenada nesta URL o valor que deseja-se filtrar, por exemplo:
             *
             * ```
             * url + ?page=1&pageSize=20&filter=Peter
             * ```
             *
             * Se for definido a propriedade `t-filter-params`, o mesmo também será concatenado. Por exemplo, para o
             * parâmetro `{ age: 23 }` a URL ficaria:
             *
             * ```
             * url + ?page=1&pageSize=20&age=23&filter=Peter
             * ```
             *
             * > Esta URL deve retornar e receber os dados no padrão de
             * [API da TOTVS](http://tdn.totvs.com/display/public/INT/Guia+de+implementacao+das+APIs+TOTVS) e utiliza os valores
             * definidos nas propriedades `t-field-label` e `t-field-value` para a construção do `thf-lookup`.
             * @param {?} filterService
             * @return {?}
             */
            function (filterService) {
                this._filterService = filterService;
                this.setService(this.filterService);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfLookupBaseComponent.prototype, "required", {
            get: /**
             * @return {?}
             */
            function () {
                return this._required;
            },
            /**
             * @optional
             * @description
             *
             * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (t-disabled).
             *
             * @default `false`
             */
            set: /**
             * \@optional
             * \@description
             *
             * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (t-disabled).
             *
             * \@default `false`
             * @param {?} required
             * @return {?}
             */
            function (required) {
                this._required = convertToBoolean(required);
                this.validateModel(this.valueToModel);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfLookupBaseComponent.prototype, "focus", {
            get: /**
             * @return {?}
             */
            function () {
                return this._focus;
            },
            /**
             * @description
             *
             * Indica que o campo iniciará com foco.
             *
             * @default false
             * @optional
             */
            set: /**
             * \@description
             *
             * Indica que o campo iniciará com foco.
             *
             * \@default false
             * \@optional
             * @param {?} focus
             * @return {?}
             */
            function (focus) {
                this._focus = (/** @type {?} */ (focus)) === '' ? true : convertToBoolean(focus);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfLookupBaseComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /**
             * @description
             *
             * Indica que o campo será desabilitado.
             *
             * @default false
             * @optional
             */
            set: /**
             * \@description
             *
             * Indica que o campo será desabilitado.
             *
             * \@default false
             * \@optional
             * @param {?} disabled
             * @return {?}
             */
            function (disabled) {
                this._disabled = (/** @type {?} */ (disabled)) === '' ? true : convertToBoolean(disabled);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.getSubscription) {
                this.getSubscription.unsubscribe();
            }
        };
        /**
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.initializeColumn();
        };
        /**
         * @private
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.initializeColumn = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.fieldLabel) {
                this.keysDescription = [this.fieldLabel];
            }
            else {
                this.keysDescription = [];
                this.keysDescription = this.columns.filter((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) { return element.fieldLabel; }))
                    .map((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) { return element.property; }));
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.validatorChange = fn;
        };
        // Função implementada do ControlValueAccessor.
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
        // Função implementada do ControlValueAccessor.
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
        /**
         * @param {?} func
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.registerOnChange = 
        // Função implementada do ControlValueAccessor.
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
        /**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            this.onChangePropagate = func;
        };
        // Função implementada do ControlValueAccessor.
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
        // Função implementada do ControlValueAccessor.
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
        /**
         * @param {?} func
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.registerOnTouched = 
        // Função implementada do ControlValueAccessor.
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
        /**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            this.onTouched = func;
        };
        // Seleciona o valor do model.
        // Seleciona o valor do model.
        /**
         * @param {?} valueSelected
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.selectValue = 
        // Seleciona o valor do model.
        /**
         * @param {?} valueSelected
         * @return {?}
         */
        function (valueSelected) {
            this.valueToModel = valueSelected[this.fieldValue];
            this.callOnChange(this.valueToModel);
            this.selected.emit(valueSelected);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.callOnChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // Quando o input não possui um formulário, então esta função não é registrada.
            if (this.onChangePropagate) {
                this.onChangePropagate(value);
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.searchById = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (typeof (value) === 'string') {
                value = value.trim();
            }
            if (value !== '') {
                this.getSubscription = this.service.getObjectByValue(value, this.filterParams).subscribe((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    if (element) {
                        _this.oldValue = element[_this.fieldLabel];
                        _this.selectValue(element);
                        _this.setViewValue(_this.getFormattedLabel(element), element);
                    }
                    else {
                        _this.cleanModel();
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.cleanModel();
                    _this.onError.emit(error);
                }));
            }
            else {
                this.cleanModel();
            }
        };
        /**
         * @param {?} abstractControl
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.validate = /**
         * @param {?} abstractControl
         * @return {?}
         */
        function (abstractControl) {
            if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false,
                    }
                };
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value instanceof Object) {
                // Esta condição é executada quando é retornado o objeto selecionado do componente Thf Lookup Modal.
                this.oldValue = value[this.fieldLabel];
                this.valueToModel = value[this.fieldValue];
                this.setViewValue(this.getFormattedLabel(value), value);
            }
            else if (value) {
                // Esta condição é executada somente quando é passado o ID para realizar a busca pelo ID.
                this.searchById(value);
            }
            else {
                this.cleanViewValue();
            }
        };
        /**
         * @protected
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.cleanModel = /**
         * @protected
         * @return {?}
         */
        function () {
            this.cleanViewValue();
            this.callOnChange(undefined);
        };
        /**
         * @protected
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.cleanViewValue = /**
         * @protected
         * @return {?}
         */
        function () {
            this.setViewValue('', {});
            this.oldValue = '';
            this.valueToModel = null;
        };
        // Formata a label do campo.
        // Formata a label do campo.
        /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.getFormattedLabel = 
        // Formata a label do campo.
        /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return value ? this.keysDescription.map((/**
             * @param {?} column
             * @return {?}
             */
            function (column) { return value[column]; })).join(' - ') : '';
        };
        // Chama o método writeValue e preenche o model.
        // Chama o método writeValue e preenche o model.
        /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.selectModel = 
        // Chama o método writeValue e preenche o model.
        /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.writeValue(value);
            if (value && value instanceof Object) {
                this.selectValue(value);
            }
        };
        /**
         * @protected
         * @param {?} model
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.validateModel = /**
         * @protected
         * @param {?} model
         * @return {?}
         */
        function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        /**
         * @private
         * @param {?} service
         * @return {?}
         */
        ThfLookupBaseComponent.prototype.setService = /**
         * @private
         * @param {?} service
         * @return {?}
         */
        function (service) {
            if (isTypeof(service, 'object')) {
                this.service = (/** @type {?} */ (service));
            }
            if (service && isTypeof(service, 'string')) {
                this.service = this.defaultService;
                this.service.setUrl(service);
            }
        };
        ThfLookupBaseComponent.propDecorators = {
            label: [{ type: core.Input, args: ['t-label',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }],
            help: [{ type: core.Input, args: ['t-help',] }],
            placeholder: [{ type: core.Input, args: ['t-placeholder',] }],
            name: [{ type: core.Input, args: ['name',] }],
            fieldValue: [{ type: core.Input, args: ['t-field-value',] }],
            fieldLabel: [{ type: core.Input, args: ['t-field-label',] }],
            filterParams: [{ type: core.Input, args: ['t-filter-params',] }],
            fieldFormat: [{ type: core.Input, args: ['t-field-format',] }],
            columns: [{ type: core.Input, args: ['t-columns',] }],
            filterService: [{ type: core.Input, args: ['t-filter-service',] }],
            optional: [{ type: core.Input, args: ['t-optional',] }],
            required: [{ type: core.Input, args: ['t-required',] }],
            focus: [{ type: core.Input, args: ['t-focus',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            onError: [{ type: core.Output, args: ['t-error',] }],
            selected: [{ type: core.Output, args: ['t-selected',] }]
        };
        return ThfLookupBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Serviço padrão utilizado para filtrar os dados do componente thf-lookup.
     */
    var ThfLookupFilterService = /** @class */ (function () {
        function ThfLookupFilterService(httpClient) {
            this.httpClient = httpClient;
        }
        /**
         * @param {?} filter
         * @param {?} page
         * @param {?=} pageSize
         * @param {?=} filterParams
         * @return {?}
         */
        ThfLookupFilterService.prototype.getFilteredData = /**
         * @param {?} filter
         * @param {?} page
         * @param {?=} pageSize
         * @param {?=} filterParams
         * @return {?}
         */
        function (filter, page, pageSize, filterParams) {
            /** @type {?} */
            var validatedFilterParams = this.validateParams(filterParams);
            return this.httpClient.get(this.url, { params: __assign({ page: page.toString(), pageSize: pageSize.toString() }, validatedFilterParams, { filter: filter }) });
        };
        /**
         * @param {?} value
         * @param {?=} filterParams
         * @return {?}
         */
        ThfLookupFilterService.prototype.getObjectByValue = /**
         * @param {?} value
         * @param {?=} filterParams
         * @return {?}
         */
        function (value, filterParams) {
            /** @type {?} */
            var validatedFilterParams = this.validateParams(filterParams);
            return this.httpClient.get(this.url + "/" + value, { params: validatedFilterParams });
        };
        /**
         * @param {?} url
         * @return {?}
         */
        ThfLookupFilterService.prototype.setUrl = /**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            this.url = url;
        };
        /**
         * @private
         * @param {?} params
         * @return {?}
         */
        ThfLookupFilterService.prototype.validateParams = /**
         * @private
         * @param {?} params
         * @return {?}
         */
        function (params) {
            return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
        };
        ThfLookupFilterService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfLookupFilterService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return ThfLookupFilterService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfComponentInjectorService = /** @class */ (function () {
        function ThfComponentInjectorService(componentResolver, applicationRef, injector) {
            this.componentResolver = componentResolver;
            this.applicationRef = applicationRef;
            this.injector = injector;
        }
        // Cria um dinamicamente no ApplicationRef
        // Cria um dinamicamente no ApplicationRef
        /**
         * @param {?} component
         * @return {?}
         */
        ThfComponentInjectorService.prototype.createComponentInApplication = 
        // Cria um dinamicamente no ApplicationRef
        /**
         * @param {?} component
         * @return {?}
         */
        function (component) {
            /** @type {?} */
            var componentRef = this.componentResolver.resolveComponentFactory(component).create(this.injector);
            this.applicationRef.attachView(componentRef.hostView);
            /** @type {?} */
            var domElem = ((/** @type {?} */ (componentRef.hostView))).rootNodes[0];
            document.body.appendChild(domElem);
            return componentRef;
        };
        // Destrói o componente e remove do ApplicationRef
        // Destrói o componente e remove do ApplicationRef
        /**
         * @param {?} componentRef
         * @return {?}
         */
        ThfComponentInjectorService.prototype.destroyComponentInApplication = 
        // Destrói o componente e remove do ApplicationRef
        /**
         * @param {?} componentRef
         * @return {?}
         */
        function (componentRef) {
            this.applicationRef.detachView(componentRef.hostView);
            componentRef.destroy();
        };
        ThfComponentInjectorService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ThfComponentInjectorService.ctorParameters = function () { return [
            { type: core.ComponentFactoryResolver },
            { type: core.ApplicationRef },
            { type: core.Injector }
        ]; };
        /** @nocollapse */ ThfComponentInjectorService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ThfComponentInjectorService_Factory() { return new ThfComponentInjectorService(core.ɵɵinject(core.ComponentFactoryResolver), core.ɵɵinject(core.ApplicationRef), core.ɵɵinject(core.INJECTOR)); }, token: ThfComponentInjectorService, providedIn: "root" });
        return ThfComponentInjectorService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfLookupLiteralsDefault = {
        en: (/** @type {?} */ ({
            modalPrimaryActionLabel: 'Select',
            modalSecondaryActionLabel: 'Cancel',
            modalPlaceholder: 'Search',
            modalTitle: 'Select a record',
            modalTableNoColumns: thfTableLiteralsDefault.en.noColumns,
            modalTableNoData: thfTableLiteralsDefault.en.noData,
            modalTableLoadingData: thfTableLiteralsDefault.en.loadingData,
            modalTableLoadMoreData: thfTableLiteralsDefault.en.loadMoreData
        })),
        es: (/** @type {?} */ ({
            modalPrimaryActionLabel: 'Seleccionar',
            modalSecondaryActionLabel: 'Cancelar',
            modalPlaceholder: 'Buscar',
            modalTitle: 'Seleccione un registro',
            modalTableNoColumns: thfTableLiteralsDefault.es.noColumns,
            modalTableNoData: thfTableLiteralsDefault.es.noData,
            modalTableLoadingData: thfTableLiteralsDefault.es.loadingData,
            modalTableLoadMoreData: thfTableLiteralsDefault.es.loadMoreData
        })),
        pt: (/** @type {?} */ ({
            modalPrimaryActionLabel: 'Selecionar',
            modalSecondaryActionLabel: 'Cancelar',
            modalPlaceholder: 'Pesquisar',
            modalTitle: 'Selecione um registro',
            modalTableNoColumns: thfTableLiteralsDefault.pt.noColumns,
            modalTableNoData: thfTableLiteralsDefault.pt.noData,
            modalTableLoadingData: thfTableLiteralsDefault.pt.loadingData,
            modalTableLoadMoreData: thfTableLiteralsDefault.pt.loadMoreData
        }))
    };
    /**
     * \@docsPrivate
     *
     * Classe base do componente Thf Lookup Modal.
     * @abstract
     */
    var ThfLookupModalBaseComponent = /** @class */ (function () {
        function ThfLookupModalBaseComponent() {
            var _this = this;
            this.hasNext = true;
            this.isLoading = false;
            this.page = 1;
            this.pageSize = 10;
            this.primaryAction = {
                action: (/**
                 * @return {?}
                 */
                function () {
                    _this.items.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    function (element) {
                        if (element['$selected']) {
                            _this.model.emit(element);
                            _this.thfModal.close();
                        }
                    }));
                }),
                label: this.literals.modalPrimaryActionLabel
            };
            this.searchValue = '';
            this.secondaryAction = {
                action: (/**
                 * @return {?}
                 */
                function () {
                    _this.model.emit(null);
                    _this.thfModal.close();
                }),
                label: this.literals.modalSecondaryActionLabel
            };
            /**
             * Evento utilizado ao selecionar um registro da tabela.
             */
            this.model = new core.EventEmitter();
        }
        Object.defineProperty(ThfLookupModalBaseComponent.prototype, "literals", {
            get: /**
             * @return {?}
             */
            function () {
                return this._literals || thfLookupLiteralsDefault[browserLanguage()];
            },
            /** Objeto com as literais usadas no `thf-lookup-modal`. */
            set: /**
             * Objeto com as literais usadas no `thf-lookup-modal`.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign({}, thfLookupLiteralsDefault[thfLocaleDefault], thfLookupLiteralsDefault[browserLanguage()], value);
                    if (value.modalTitle) {
                        this.title = this.literals.modalTitle;
                    }
                }
                else {
                    this._literals = thfLookupLiteralsDefault[browserLanguage()];
                }
                this.primaryAction.label = this.literals.modalPrimaryActionLabel;
                this.secondaryAction.label = this.literals.modalSecondaryActionLabel;
                this.setTableLiterals();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfLookupModalBaseComponent.prototype, "title", {
            get: /**
             * @return {?}
             */
            function () {
                return this._title;
            },
            /** Título da modal. */
            set: /**
             * Título da modal.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._title = isTypeof(value, 'string') ? value : this.literals.modalTitle;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfLookupModalBaseComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.filterSubscription) {
                this.filterSubscription.unsubscribe();
            }
            if (this.searchSubscription) {
                this.searchSubscription.unsubscribe();
            }
            if (this.showMoreSubscription) {
                this.showMoreSubscription.unsubscribe();
            }
        };
        /**
         * @return {?}
         */
        ThfLookupModalBaseComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.initializeData();
            this.setTableLiterals();
        };
        /**
         * @return {?}
         */
        ThfLookupModalBaseComponent.prototype.search = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.page = 1;
            if (this.searchValue) {
                this.isLoading = true;
                this.searchSubscription = this.getFilteredData(this.searchValue).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    _this.items = data.items;
                    _this.hasNext = data.hasNext;
                    _this.isLoading = false;
                }));
            }
            else {
                this.initializeData();
            }
        };
        /**
         * @return {?}
         */
        ThfLookupModalBaseComponent.prototype.showMoreEvent = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.page++;
            this.isLoading = true;
            this.showMoreSubscription = this.getFilteredData(this.searchValue).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                data.items.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    _this.items.push(item);
                }));
                _this.hasNext = data.hasNext;
                _this.isLoading = false;
            }));
        };
        /**
         * @private
         * @param {?} searchValue
         * @return {?}
         */
        ThfLookupModalBaseComponent.prototype.getFilteredData = /**
         * @private
         * @param {?} searchValue
         * @return {?}
         */
        function (searchValue) {
            return this.filterService.getFilteredData(searchValue, this.page, this.pageSize, this.filterParams);
        };
        /**
         * @private
         * @return {?}
         */
        ThfLookupModalBaseComponent.prototype.initializeData = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.isLoading = true;
            this.filterSubscription = this.getFilteredData('').subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.items = data.items;
                _this.hasNext = data.hasNext;
                _this.isLoading = false;
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfLookupModalBaseComponent.prototype.setTableLiterals = /**
         * @private
         * @return {?}
         */
        function () {
            this.tableLiterals = {
                'noColumns': this.literals.modalTableNoColumns,
                'noData': this.literals.modalTableNoData,
                'loadingData': this.literals.modalTableLoadingData,
                'loadMoreData': this.literals.modalTableLoadMoreData,
            };
        };
        ThfLookupModalBaseComponent.propDecorators = {
            thfModal: [{ type: core.ViewChild, args: [ThfModalComponent, { static: true },] }],
            columns: [{ type: core.Input, args: ['t-columns',] }],
            items: [{ type: core.Input, args: ['t-items',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }],
            title: [{ type: core.Input, args: ['t-title',] }],
            filterService: [{ type: core.Input, args: ['t-filter-service',] }],
            filterParams: [{ type: core.Input, args: ['t-filter-params',] }],
            model: [{ type: core.Output, args: ['t-change-model',] }]
        };
        return ThfLookupModalBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@docsExtends ThfLookupModalBaseComponent
     */
    var ThfLookupModalComponent = /** @class */ (function (_super) {
        __extends(ThfLookupModalComponent, _super);
        function ThfLookupModalComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.keyUpObservable = null;
            _this.containerHeight = 375;
            _this.tableHeight = 370;
            return _this;
        }
        /**
         * @return {?}
         */
        ThfLookupModalComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngOnInit.call(this);
            this.initializeEventInput();
            this.setTableHeight();
        };
        /**
         * @return {?}
         */
        ThfLookupModalComponent.prototype.initializeEventInput = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.keyUpObservable = rxjs.fromEvent(this.inputSearchEl.nativeElement, 'keyup')
                .pipe(operators.filter((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return _this.validateEnterPressed(e); })), operators.debounceTime(400));
            this.keyUpObservable.subscribe((/**
             * @return {?}
             */
            function () {
                _this.search();
            }));
        };
        /**
         * @return {?}
         */
        ThfLookupModalComponent.prototype.openModal = /**
         * @return {?}
         */
        function () {
            this.thfModal.open();
        };
        /**
         * @private
         * @return {?}
         */
        ThfLookupModalComponent.prototype.setTableHeight = /**
         * @private
         * @return {?}
         */
        function () {
            if (window.innerHeight < 615) {
                this.tableHeight -= 50;
                this.containerHeight -= 50;
            }
        };
        /**
         * @private
         * @param {?} e
         * @return {?}
         */
        ThfLookupModalComponent.prototype.validateEnterPressed = /**
         * @private
         * @param {?} e
         * @return {?}
         */
        function (e) {
            return e.keyCode === 13;
        };
        ThfLookupModalComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-lookup-modal',
                        template: "<thf-modal\n  t-click-out=\"false\"\n  t-hide-close=\"false\"\n  t-size=\"lg\"\n  [t-primary-action]=\"primaryAction\"\n  [t-secondary-action]=\"secondaryAction\"\n  [t-title]=\"title\">\n\n  <thf-field-container\n    class=\"thf-lookup-header thf-md-6 thf-pull-right\"\n    [t-optional]=\"false\">\n\n    <div class=\"thf-field-container-content\">\n      <input #inpsearch\n        class=\"thf-input thf-input-icon-right\"\n        name=\"contentSearch\"\n        [(ngModel)]=\"searchValue\"\n        [placeholder]=\"literals.modalPlaceholder\"\n        type=\"text\">\n\n      <div class=\"thf-field-icon-container-right\">\n        <span #iconLookup\n          class=\"thf-icon thf-field-icon thf-icon-search\"\n          (click)=\"search()\">\n        </span>\n      </div>\n    </div>\n\n  </thf-field-container>\n\n  <div class=\"thf-row thf-lookup-container-table\" [style.height.px]=\"containerHeight\">\n\n    <thf-table\n      class=\"thf-md-12\"\n      t-checkbox=\"true\"\n      t-hide-detail=\"true\"\n      t-single-select=\"true\"\n      t-sort=\"true\"\n      [t-columns]=\"columns\"\n      [t-height]=\"tableHeight\"\n      [t-items]=\"items\"\n      [t-literals]=\"tableLiterals\"\n      [t-loading]=\"isLoading\"\n      [t-show-more-disabled]=\"!hasNext\"\n      (t-show-more)=\"showMoreEvent()\">\n    </thf-table>\n\n  </div>\n\n</thf-modal>\n"
                    }] }
        ];
        ThfLookupModalComponent.propDecorators = {
            inputSearchEl: [{ type: core.ViewChild, args: ['inpsearch', { static: true },] }]
        };
        return ThfLookupModalComponent;
    }(ThfLookupModalBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * Serviço responsável por controlar a abertura do componente Thf Lookup Modal.
     */
    var ThfLookupModalService = /** @class */ (function () {
        function ThfLookupModalService(thfComponentInjector) {
            this.thfComponentInjector = thfComponentInjector;
            this.componentRef = null;
            this.selectValueEvent = new core.EventEmitter();
        }
        /**
         * Método responsável por abrir a modal de busca das informações.
         *
         * @param service {ThfLookupFilter} Serviço responsável por realizar a busca no serviço dos dados.
         * @param columns {Array<ThfLookupColumn>} Definição das colunas na modal de busca.
         * @param filterParams {any} Valor que será repassado aos métodos do serviço para auxiliar no filtro dos dados.
         * @param title {string} Definição do título da modal.
         * @param literals {ThfLookupLiterals} Literais utilizadas no componente.
         */
        /**
         * Método responsável por abrir a modal de busca das informações.
         *
         * @param {?} params
         * @return {?}
         */
        ThfLookupModalService.prototype.openModal = /**
         * Método responsável por abrir a modal de busca das informações.
         *
         * @param {?} params
         * @return {?}
         */
        function (params) {
            var _this = this;
            var service = params.service, columns = params.columns, filterParams = params.filterParams, title = params.title, literals = params.literals;
            this.componentRef = this.thfComponentInjector.createComponentInApplication(ThfLookupModalComponent);
            this.componentRef.instance.title = title;
            this.componentRef.instance.columns = columns;
            this.componentRef.instance.filterService = service;
            this.componentRef.instance.filterParams = filterParams;
            this.componentRef.instance.literals = literals;
            this.componentRef.instance.model.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) {
                _this.selectValue($event);
            }));
            this.componentRef.changeDetectorRef.detectChanges();
            this.componentRef.instance.openModal();
        };
        // Este metodo é chamado quando é selecionado um item na lookup modal.
        // Este metodo é chamado quando é selecionado um item na lookup modal.
        /**
         * @param {?} value
         * @return {?}
         */
        ThfLookupModalService.prototype.selectValue = 
        // Este metodo é chamado quando é selecionado um item na lookup modal.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this.selectValueEvent.emit(value);
            }
            this.componentRef.destroy();
        };
        ThfLookupModalService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfLookupModalService.ctorParameters = function () { return [
            { type: ThfComponentInjectorService }
        ]; };
        return ThfLookupModalService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfLookupBaseComponent
     *
     * \@description
     *
     * Quando existe muitos dados o thf-lookup por padrão traz apenas 10 itens na tabela e os demais são carregados por demanda através do
     * botão 'Carregar mais resultados'. Para que funcione corretamente, é importante que o serviço siga o
     * [Guia de implementação das APIs TOTVS](http://tdn.totvs.com/pages/releaseview.action?pageId=271660444).
     *
     * Importante:
     *
     * - Caso o thf-lookup contenha o [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
     * Então será necessário informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
     * ```
     * <thf-lookup
     *   [(ngModel)]="pessoa.nome"
     *   [ngModelOptions]="{standalone: true}">
     * </thf-lookup>
     * ```
     *
     * \@example
     *
     * <example name="thf-lookup-basic" title="Totvs Lookup Basic">
     *  <file name="sample-thf-lookup-basic/sample-thf-lookup-basic.component.html"> </file>
     *  <file name="sample-thf-lookup-basic/sample-thf-lookup-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-lookup-labs" title="Totvs Lookup Labs">
     *  <file name="sample-thf-lookup-labs/sample-thf-lookup-labs.component.html"> </file>
     *  <file name="sample-thf-lookup-labs/sample-thf-lookup-labs.component.ts"> </file>
     *  <file name="sample-thf-lookup.service.ts"> </file>
     * </example>
     *
     * <example name="thf-lookup-hero" title="Totvs Lookup - Hero">
     *  <file name="sample-thf-lookup-hero/sample-thf-lookup-hero.component.html"> </file>
     *  <file name="sample-thf-lookup-hero/sample-thf-lookup-hero.component.ts"> </file>
     *  <file name="sample-thf-lookup.service.ts"> </file>
     * </example>
     *
     * <example name="thf-lookup-hero-reactive-form" title="Totvs Lookup - Hero Reactive Form">
     *  <file name="sample-thf-lookup-hero-reactive-form/sample-thf-lookup-hero-reactive-form.component.html"> </file>
     *  <file name="sample-thf-lookup-hero-reactive-form/sample-thf-lookup-hero-reactive-form.component.ts"> </file>
     *  <file name="sample-thf-lookup.service.ts"> </file>
     * </example>
     *
     * <example name="thf-lookup-sw-films" title="Totvs Lookup - Star Wars films">
     *  <file name="sample-thf-lookup-sw-films/sample-thf-lookup-sw-films.component.html"> </file>
     *  <file name="sample-thf-lookup-sw-films/sample-thf-lookup-sw-films.component.ts"> </file>
     *  <file name="sample-thf-lookup-sw-films/sample-thf-lookup-sw-films.service.ts"> </file>
     * </example>
     */
    var ThfLookupComponent = /** @class */ (function (_super) {
        __extends(ThfLookupComponent, _super);
        function ThfLookupComponent(thfLookupFilterService, thfLookupModalService) {
            var _this = _super.call(this, thfLookupFilterService) || this;
            _this.thfLookupModalService = thfLookupModalService;
            return _this;
        }
        /**
         * @return {?}
         */
        ThfLookupComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.modalSubscription) {
                this.modalSubscription.unsubscribe();
            }
        };
        /**
         * @return {?}
         */
        ThfLookupComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngOnInit.call(this);
        };
        /**
         * @return {?}
         */
        ThfLookupComponent.prototype.openLookup = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.isAllowedOpenModal()) {
                var _a = this, service = _a.service, columns = _a.columns, filterParams = _a.filterParams, literals = _a.literals;
                this.thfLookupModalService.openModal({ service: service, columns: columns, filterParams: filterParams, title: this.label, literals: literals });
                if (!this.modalSubscription) {
                    this.modalSubscription = this.thfLookupModalService.selectValueEvent.subscribe((/**
                     * @param {?} element
                     * @return {?}
                     */
                    function (element) {
                        _this.selectModel(element);
                    }));
                }
            }
        };
        /**
         * @param {?} value
         * @param {?} object
         * @return {?}
         */
        ThfLookupComponent.prototype.setViewValue = /**
         * @param {?} value
         * @param {?} object
         * @return {?}
         */
        function (value, object) {
            if (this.fieldFormat) {
                this.setInputValueWithFieldFormat(object);
            }
            else {
                this.inputEl.nativeElement.value = this.valueToModel ? value : '';
            }
        };
        /**
         * @return {?}
         */
        ThfLookupComponent.prototype.getViewValue = /**
         * @return {?}
         */
        function () {
            return this.inputEl.nativeElement.value;
        };
        /**
         * @return {?}
         */
        ThfLookupComponent.prototype.searchEvent = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var value = this.getViewValue();
            if (this.oldValue !== value) {
                this.searchById(value);
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfLookupComponent.prototype.isAllowedOpenModal = /**
         * @private
         * @return {?}
         */
        function () {
            if (!this.service) {
                console.warn('No service informed');
            }
            return !!(this.service && !this.disabled);
        };
        /**
         * @private
         * @param {?} objectSelected
         * @return {?}
         */
        ThfLookupComponent.prototype.setInputValueWithFieldFormat = /**
         * @private
         * @param {?} objectSelected
         * @return {?}
         */
        function (objectSelected) {
            /** @type {?} */
            var isEmpty = Object.keys(objectSelected).length === 0;
            /** @type {?} */
            var fieldFormated = this.fieldFormat(objectSelected);
            this.oldValue = isEmpty ? '' : fieldFormated;
            this.inputEl.nativeElement.value = isEmpty ? '' : fieldFormated;
        };
        ThfLookupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-lookup',
                        template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n    <input #inp\n      class=\"thf-input thf-input-icon-right\"\n      type=\"text\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      (blur)=\"searchEvent()\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <span tabindex=\"1\" #iconLookup (click)=\"openLookup()\" (focus)=\"inp.focus()\" class=\"thf-icon thf-field-icon thf-icon-search\"\n        [class.thf-field-icon-disabled]=\"disabled\"\n        [class.thf-field-icon]=\"!disabled\">\n      </span>\n    </div>\n  </div>\n\n  <thf-field-container-bottom></thf-field-container-bottom>\n\n</thf-field-container>\n",
                        providers: [
                            ThfLookupFilterService,
                            ThfLookupModalService,
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfLookupComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfLookupComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfLookupComponent.ctorParameters = function () { return [
            { type: ThfLookupFilterService },
            { type: ThfLookupModalService }
        ]; };
        ThfLookupComponent.propDecorators = {
            inputEl: [{ type: core.ViewChild, args: ['inp', { read: core.ElementRef, static: true },] }]
        };
        return ThfLookupComponent;
    }(ThfLookupBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente de pesquisa que será criado dentro do dropdown do `thf-multiselect`.
     */
    var ThfMultiselectSearchComponent = /** @class */ (function () {
        function ThfMultiselectSearchComponent() {
            /**
             * Evento que será disparado a cada tecla digitada no campo de busca.
             */
            this.change = new core.EventEmitter();
        }
        Object.defineProperty(ThfMultiselectSearchComponent.prototype, "placeholder", {
            get: /**
             * @return {?}
             */
            function () {
                return this._placeholder || this.literals.placeholderSearch;
            },
            /**
             * @optional
             *
             * @description
             *
             * Placeholder do campo de pesquisa.
             *
             * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
             *
             * @default `Buscar`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Placeholder do campo de pesquisa.
             *
             * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
             *
             * \@default `Buscar`
             * @param {?} placeholder
             * @return {?}
             */
            function (placeholder) {
                this._placeholder = placeholder && isTypeof(placeholder, 'string') ? placeholder : this.literals.placeholderSearch;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        ThfMultiselectSearchComponent.prototype.onChange = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.change.emit({ event: event, value: this.inputElement.nativeElement.value });
        };
        /**
         * @return {?}
         */
        ThfMultiselectSearchComponent.prototype.setFocus = /**
         * @return {?}
         */
        function () {
            this.inputElement.nativeElement.focus();
        };
        /**
         * @return {?}
         */
        ThfMultiselectSearchComponent.prototype.clean = /**
         * @return {?}
         */
        function () {
            this.inputElement.nativeElement.value = '';
        };
        ThfMultiselectSearchComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-multiselect-search',
                        template: "<div class=\"thf-field-container-content thf-multiselect-container-search\">\n\n  <div class=\"thf-field-icon-container-left\">\n    <span class=\"thf-icon thf-icon-search thf-field-icon\"></span>\n  </div>\n\n  <input #inputElement\n    class=\"thf-input thf-input-icon-left\"\n    type=\"text\"\n    [placeholder]=\"placeholder\"\n    (keyup)=\"onChange($event)\">\n\n</div>\n"
                    }] }
        ];
        ThfMultiselectSearchComponent.propDecorators = {
            literals: [{ type: core.Input, args: ['t-literals',] }],
            placeholder: [{ type: core.Input, args: ['t-placeholder',] }],
            change: [{ type: core.Output, args: ['t-change',] }],
            inputElement: [{ type: core.ViewChild, args: ['inputElement', { read: core.ElementRef, static: true },] }]
        };
        return ThfMultiselectSearchComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
     */
    var ThfMultiselectDropdownComponent = /** @class */ (function () {
        function ThfMultiselectDropdownComponent() {
            this.scrollTop = 0;
            this.show = false;
            this.haveOptions = false;
            /**
             * Propriedade que indica se o campo de pesquisa deverá ser escondido.
             */
            this.hideSearch = false;
            /**
             * Propriedade que recebe a lista de opções selecionadas.
             */
            this.selectedValues = [];
            /**
             * Propriedade que recebe a lista de opções que deverão ser criadas no dropdown.
             */
            this.options = [];
            /**
             * Evento disparado a cada tecla digitada na pesquisa.
             */
            this.changeSearch = new core.EventEmitter();
            /**
             * Evento disparado a cada alteração na lista das opções selecionadas.
             */
            this.change = new core.EventEmitter();
            /**
             * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
             * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
             * para notificar o componente principal que deve fechar o dropdown.
             */
            this.closeDropdown = new core.EventEmitter();
        }
        /**
         * @param {?} index
         * @return {?}
         */
        ThfMultiselectDropdownComponent.prototype.scrollTo = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            this.scrollTop = (index <= 2) ? 0 : (index * 44) - 88;
        };
        /**
         * @param {?} option
         * @return {?}
         */
        ThfMultiselectDropdownComponent.prototype.isSelectedItem = /**
         * @param {?} option
         * @return {?}
         */
        function (option) {
            return this.selectedValues.some((/**
             * @param {?} selectedItem
             * @return {?}
             */
            function (selectedItem) { return selectedItem === option.value; }));
        };
        /**
         * @param {?} check
         * @param {?} option
         * @return {?}
         */
        ThfMultiselectDropdownComponent.prototype.clickItem = /**
         * @param {?} check
         * @param {?} option
         * @return {?}
         */
        function (check, option) {
            this.updateSelectedValues(check, option);
            if (!this.hideSearch) {
                this.searchElement.setFocus();
            }
        };
        /**
         * @param {?} checked
         * @param {?} option
         * @return {?}
         */
        ThfMultiselectDropdownComponent.prototype.updateSelectedValues = /**
         * @param {?} checked
         * @param {?} option
         * @return {?}
         */
        function (checked, option) {
            if (checked) {
                this.selectedValues.push(option.value);
            }
            else {
                /** @type {?} */
                var indexSelectedValues = this.selectedValues.indexOf(option.value);
                this.selectedValues.splice(indexSelectedValues, 1);
            }
            this.change.emit(this.selectedValues);
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfMultiselectDropdownComponent.prototype.callChangeSearch = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.changeSearch.emit(event);
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfMultiselectDropdownComponent.prototype.onKeydown = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.keyCode === 9) {
                this.closeDropdown.emit();
            }
        };
        /**
         * @param {?} toOpen
         * @return {?}
         */
        ThfMultiselectDropdownComponent.prototype.controlVisibility = /**
         * @param {?} toOpen
         * @return {?}
         */
        function (toOpen) {
            var _this = this;
            this.show = toOpen;
            this.checkInitialOptions();
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (toOpen && _this.searchElement && !_this.hideSearch) {
                    _this.searchElement.setFocus();
                    _this.searchElement.clean();
                }
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfMultiselectDropdownComponent.prototype.checkInitialOptions = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.options.length) {
                this.haveOptions = true;
            }
        };
        ThfMultiselectDropdownComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-multiselect-dropdown',
                        template: "<div #container class=\"thf-multiselect-container\" [hidden]=\"!show\">\n\n  <thf-multiselect-search #searchElement\n    *ngIf=\"!hideSearch && haveOptions\"\n    [t-literals]=\"literals\"\n    [t-placeholder]=\"placeholderSearch\"\n    (t-change)=\"callChangeSearch($event)\">\n  </thf-multiselect-search>\n\n  <ul class=\"thf-multiselect-items-container\" [scrollTop]=\"scrollTop\" #ulElement>\n    <div *ngIf=\"!options.length\" class=\"thf-multiselect-container-no-data thf-text-center\">\n      <span> {{ literals.noData }}</span>\n    </div>\n\n    <thf-multiselect-item *ngFor=\"let option of options\"\n      [t-option]=\"option\"\n      [t-selected]=\"isSelectedItem(option)\"\n      (t-change)=\"clickItem($event, option)\">\n    </thf-multiselect-item>\n  </ul>\n</div>\n"
                    }] }
        ];
        ThfMultiselectDropdownComponent.propDecorators = {
            hideSearch: [{ type: core.Input, args: ['t-hide-search',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }],
            placeholderSearch: [{ type: core.Input, args: ['t-placeholder-search',] }],
            selectedValues: [{ type: core.Input, args: ['t-selected-values',] }],
            options: [{ type: core.Input, args: ['t-options',] }],
            changeSearch: [{ type: core.Output, args: ['t-change-search',] }],
            change: [{ type: core.Output, args: ['t-change',] }],
            closeDropdown: [{ type: core.Output, args: ['t-close-dropdown',] }],
            container: [{ type: core.ViewChild, args: ['container', { read: core.ElementRef, static: true },] }],
            ulElement: [{ type: core.ViewChild, args: ['ulElement', { read: core.ElementRef, static: true },] }],
            searchElement: [{ type: core.ViewChild, args: ['searchElement', { static: false },] }],
            onKeydown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
        };
        return ThfMultiselectDropdownComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var ThfMultiselectFilterMode = {
        /** Verifica se o texto *inicia* com o valor pesquisado. */
        startsWith: 0,
        /** Verifica se o texto *contém* o valor pesquisado. */
        contains: 1,
        /** Verifica se o texto *finaliza* com o valor pesquisado. */
        endsWith: 2,
    };
    ThfMultiselectFilterMode[ThfMultiselectFilterMode.startsWith] = 'startsWith';
    ThfMultiselectFilterMode[ThfMultiselectFilterMode.contains] = 'contains';
    ThfMultiselectFilterMode[ThfMultiselectFilterMode.endsWith] = 'endsWith';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfMultiselectLiteralsDefault = {
        en: (/** @type {?} */ ({
            noData: 'No data found',
            placeholderSearch: 'Search'
        })),
        es: (/** @type {?} */ ({
            noData: 'Datos no encontrados',
            placeholderSearch: 'Busca'
        })),
        pt: (/** @type {?} */ ({
            noData: 'Nenhum dado encontrado',
            placeholderSearch: 'Buscar'
        }))
    };
    /**
     * \@description
     *
     * O thf-multiselect é um componente de múltipla seleção.
     * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.
     *
     * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do thf-checkbox-group, por ser mais simples
     * e mais rápido para a seleção do usuário.
     *
     * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o
     * thf-select, thf-combo ou thf-radio-group.
     * @abstract
     */
    var ThfMultiselectBaseComponent = /** @class */ (function () {
        function ThfMultiselectBaseComponent() {
            this._disabled = false;
            this._filterMode = ThfMultiselectFilterMode.startsWith;
            this._focus = false;
            this._hideSearch = false;
            this._required = false;
            this._sort = false;
            this.readyToValidation = false;
            this.selectedOptions = [];
            this.visibleOptionsDropdown = [];
            this.visibleDisclaimers = [];
            /**
             * Mensagem apresentada enquanto o campo estiver vazio.
             */
            this.placeholder = '';
            /**
             * \@description
             *
             * Placeholder do campo de pesquisa.
             *
             * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
             *
             * \@default `Buscar`
             */
            this.placeholderSearch = '';
            /**
             * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
             */
            this.change = new core.EventEmitter();
        }
        Object.defineProperty(ThfMultiselectBaseComponent.prototype, "literals", {
            get: /**
             * @return {?}
             */
            function () {
                return this._literals || thfMultiselectLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `thf-multiselect`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfMultiselectLiterals = {
             *    noData: 'Nenhum dado encontrado',
             *    placeholderSearch: 'Buscar'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfMultiselectLiterals = {
             *    noData: 'Sem dados'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
             *
             * ```
             * <thf-multiselect
             *   [t-literals]="customLiterals">
             * </thf-thf-multiselect>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Objeto com as literais usadas no `thf-multiselect`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfMultiselectLiterals = {
             *    noData: 'Nenhum dado encontrado',
             *    placeholderSearch: 'Buscar'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfMultiselectLiterals = {
             *    noData: 'Sem dados'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
             *
             * ```
             * <thf-multiselect
             *   [t-literals]="customLiterals">
             * </thf-thf-multiselect>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign({}, thfMultiselectLiteralsDefault[thfLocaleDefault], thfMultiselectLiteralsDefault[browserLanguage()], value);
                }
                else {
                    this._literals = thfMultiselectLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMultiselectBaseComponent.prototype, "required", {
            get: /**
             * @return {?}
             */
            function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (t-disabled).
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (t-disabled).
             *
             * \@default `false`
             * @param {?} required
             * @return {?}
             */
            function (required) {
                this._required = (/** @type {?} */ (required)) === '' ? true : convertToBoolean(required);
                this.updateModelToValidate();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMultiselectBaseComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será desabilitado.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo será desabilitado.
             *
             * \@default `false`
             * @param {?} disabled
             * @return {?}
             */
            function (disabled) {
                this._disabled = (/** @type {?} */ (disabled)) === '' ? true : convertToBoolean(disabled);
                this.updateModelToValidate();
                this.updateVisibleItems();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMultiselectBaseComponent.prototype, "hideSearch", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hideSearch;
            },
            /**
             * @optional
             *
             * @description
             *
             * Esconde o campo de pesquisa existente dentro do dropdown do thf-multiselect.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Esconde o campo de pesquisa existente dentro do dropdown do thf-multiselect.
             *
             * \@default `false`
             * @param {?} hideSearch
             * @return {?}
             */
            function (hideSearch) {
                this._hideSearch = (/** @type {?} */ (hideSearch)) === '' ? true : convertToBoolean(hideSearch);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMultiselectBaseComponent.prototype, "options", {
            get: /**
             * @return {?}
             */
            function () {
                return this._options;
            },
            /**
             * @description
             *
             * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfMultiselectOption.
             * Esta lista deve conter os valores e os labels que serão apresentados na tela.
             */
            set: /**
             * \@description
             *
             * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfMultiselectOption.
             * Esta lista deve conter os valores e os labels que serão apresentados na tela.
             * @param {?} options
             * @return {?}
             */
            function (options) {
                this._options = options;
                this.validAndSortOptions();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMultiselectBaseComponent.prototype, "sort", {
            get: /**
             * @return {?}
             */
            function () {
                return this._sort;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que a lista definida na propriedade t-options será ordenada pelo label antes de ser apresentada no
             * dropdown.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que a lista definida na propriedade t-options será ordenada pelo label antes de ser apresentada no
             * dropdown.
             *
             * \@default `false`
             * @param {?} sort
             * @return {?}
             */
            function (sort) {
                this._sort = (/** @type {?} */ (sort)) === '' ? true : convertToBoolean(sort);
                this.validAndSortOptions();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMultiselectBaseComponent.prototype, "focus", {
            get: /**
             * @return {?}
             */
            function () {
                return this._focus;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo iniciará com foco.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo iniciará com foco.
             *
             * \@default `false`
             * @param {?} focus
             * @return {?}
             */
            function (focus) {
                this._focus = (/** @type {?} */ (focus)) === '' ? true : convertToBoolean(focus);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMultiselectBaseComponent.prototype, "filterMode", {
            get: /**
             * @return {?}
             */
            function () {
                return this._filterMode;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
             * Valores definidos no enum: ThfMultiselectFilterMode
             *
             * @default `startsWith`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
             * Valores definidos no enum: ThfMultiselectFilterMode
             *
             * \@default `startsWith`
             * @param {?} filterMode
             * @return {?}
             */
            function (filterMode) {
                this._filterMode = (filterMode in ThfMultiselectFilterMode) ? filterMode : ThfMultiselectFilterMode.startsWith;
                switch (this._filterMode.toString()) {
                    case 'startsWith':
                        this._filterMode = ThfMultiselectFilterMode.startsWith;
                        break;
                    case 'contains':
                        this._filterMode = ThfMultiselectFilterMode.contains;
                        break;
                    case 'endsWith':
                        this._filterMode = ThfMultiselectFilterMode.endsWith;
                        break;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.updateList(this.options);
        };
        /**
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
        function () {
            // Seta esta variável para indicar que a tela já foi carregada e podem ser aplicadas as validações.
            // A partir desse momento, toda vez que uma propriedade que interfere na validação, for alterada, o model será atualizado
            // para que o campo seja validado novamente.
            this.readyToValidation = true;
        };
        /**
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.validAndSortOptions = /**
         * @return {?}
         */
        function () {
            if (this.options && this.options.length) {
                removeUndefinedAndNullOptions(this.options);
                removeDuplicatedOptions(this.options);
                this.setUndefinedLabels(this.options);
                if (this.sort) {
                    sortOptionsByProperty(this.options, 'label');
                }
            }
        };
        /**
         * @param {?} options
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.setUndefinedLabels = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                if (!option['label']) {
                    option.label = option.value;
                }
            }));
        };
        /**
         * @param {?} options
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.updateList = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            if (options) {
                this.visibleOptionsDropdown = options;
            }
        };
        // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
        // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
        /**
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.updateModelToValidate = 
        // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
        /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.readyToValidation) {
                // Este timeout é necessário para quando for atualizado o model e uma propriedade do Datepicker ao mesmo tempo.
                // Caso contrário, o writeValue não é disparado, não atualizando o model do componente.
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.callOnChange(_this.selectedOptions);
                }));
            }
        };
        /**
         * @param {?} selectedOptions
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.callOnChange = /**
         * @param {?} selectedOptions
         * @return {?}
         */
        function (selectedOptions) {
            if (this.onModelChange) {
                this.onModelChange(this.getValuesFromOptions(selectedOptions));
                this.eventChange(selectedOptions);
            }
        };
        /**
         * @param {?} selectedOptions
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.eventChange = /**
         * @param {?} selectedOptions
         * @return {?}
         */
        function (selectedOptions) {
            if (selectedOptions && this.lastLengthModel !== selectedOptions.length) {
                this.change.emit(selectedOptions);
            }
            this.lastLengthModel = selectedOptions ? selectedOptions.length : null;
        };
        /**
         * @param {?} selectedOptions
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.getValuesFromOptions = /**
         * @param {?} selectedOptions
         * @return {?}
         */
        function (selectedOptions) {
            return selectedOptions && selectedOptions.length ? selectedOptions.map((/**
             * @param {?} option
             * @return {?}
             */
            function (option) { return option.value; })) : [];
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.getLabelByValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var index = this.options.findIndex((/**
             * @param {?} option
             * @return {?}
             */
            function (option) { return option.value === value; }));
            return this.options[index].label;
        };
        /**
         * @param {?} selectedValues
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.changeItems = /**
         * @param {?} selectedValues
         * @return {?}
         */
        function (selectedValues) {
            this.updateSelectedOptions(selectedValues);
            this.callOnChange(this.selectedOptions);
        };
        /**
         * @param {?} search
         * @param {?} options
         * @param {?} filterMode
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.searchByLabel = /**
         * @param {?} search
         * @param {?} options
         * @param {?} filterMode
         * @return {?}
         */
        function (search, options, filterMode) {
            var _this = this;
            if (search && options && options.length) {
                /** @type {?} */
                var newOptions_1 = [];
                options.forEach((/**
                 * @param {?} option
                 * @return {?}
                 */
                function (option) {
                    if (option.label && _this.compareMethod(search, option, filterMode)) {
                        newOptions_1.push(option);
                    }
                }));
                this.visibleOptionsDropdown = newOptions_1;
            }
        };
        /**
         * @param {?} search
         * @param {?} option
         * @param {?} filterMode
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.compareMethod = /**
         * @param {?} search
         * @param {?} option
         * @param {?} filterMode
         * @return {?}
         */
        function (search, option, filterMode) {
            switch (filterMode) {
                case ThfMultiselectFilterMode.startsWith:
                    return this.startsWith(search, option);
                case ThfMultiselectFilterMode.contains:
                    return this.contains(search, option);
                case ThfMultiselectFilterMode.endsWith:
                    return this.endsWith(search, option);
            }
        };
        /**
         * @param {?} search
         * @param {?} option
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.startsWith = /**
         * @param {?} search
         * @param {?} option
         * @return {?}
         */
        function (search, option) {
            return option.label.toLowerCase().startsWith(search.toLowerCase());
        };
        /**
         * @param {?} search
         * @param {?} option
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.contains = /**
         * @param {?} search
         * @param {?} option
         * @return {?}
         */
        function (search, option) {
            return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
        };
        /**
         * @param {?} search
         * @param {?} option
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.endsWith = /**
         * @param {?} search
         * @param {?} option
         * @return {?}
         */
        function (search, option) {
            return option.label.toLowerCase().endsWith(search.toLowerCase());
        };
        /**
         * @param {?} c
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.validate = /**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            if (requiredFailed(this.required, this.disabled, c.value)) {
                return { required: {
                        valid: false,
                    } };
            }
            return null;
        };
        /**
         * @param {?} values
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.updateSelectedOptions = /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            var _this = this;
            this.selectedOptions = [];
            values.forEach((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                _this.options.forEach((/**
                 * @param {?} option
                 * @return {?}
                 */
                function (option) {
                    if (option.value === value) {
                        _this.selectedOptions.push(option);
                    }
                }));
            }));
            this.updateVisibleItems();
        };
        /**
         * @param {?} values
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.writeValue = /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            if (!values) {
                values = [];
                this.callOnChange([]);
            }
            // Validar se todos os items existem entre os options, senão atualizar o model
            this.updateSelectedOptions(values);
            if (this.selectedOptions.length < values.length) {
                this.callOnChange(this.selectedOptions);
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onModelChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfMultiselectBaseComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onModelTouched = fn;
        };
        ThfMultiselectBaseComponent.propDecorators = {
            label: [{ type: core.Input, args: ['t-label',] }],
            help: [{ type: core.Input, args: ['t-help',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }],
            optional: [{ type: core.Input, args: ['t-optional',] }],
            placeholder: [{ type: core.Input, args: ['t-placeholder',] }],
            placeholderSearch: [{ type: core.Input, args: ['t-placeholder-search',] }],
            name: [{ type: core.Input, args: ['name',] }],
            required: [{ type: core.Input, args: ['t-required',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            hideSearch: [{ type: core.Input, args: ['t-hide-search',] }],
            options: [{ type: core.Input, args: ['t-options',] }],
            sort: [{ type: core.Input, args: ['t-sort',] }],
            focus: [{ type: core.Input, args: ['t-focus',] }],
            filterMode: [{ type: core.Input, args: ['t-filter-mode',] }],
            change: [{ type: core.Output, args: ['t-change',] }]
        };
        return ThfMultiselectBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfMultiselectContainerOffset = 8;
    /** @type {?} */
    var thfMultiselectContainerPositionDefault = 'bottom';
    /**
     * \@docsExtends ThfMultiselectBaseComponent
     *
     * \@example
     *
     * <example name="thf-multiselect-basic" title="Totvs Multiselect Basic">
     *   <file name="sample-thf-multiselect-basic/sample-thf-multiselect-basic.component.html"> </file>
     *   <file name="sample-thf-multiselect-basic/sample-thf-multiselect-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-multiselect-labs" title="Totvs Multiselect Labs">
     *   <file name="sample-thf-multiselect-labs/sample-thf-multiselect-labs.component.html"> </file>
     *   <file name="sample-thf-multiselect-labs/sample-thf-multiselect-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-multiselect-vacation" title="Totvs Multiselect - Vacation">
     *   <file name="sample-thf-multiselect-vacation/sample-thf-multiselect-vacation.component.html"> </file>
     *   <file name="sample-thf-multiselect-vacation/sample-thf-multiselect-vacation.component.ts"> </file>
     * </example>
     *
     * <example name="thf-multiselect-vacation-reactive-form" title="Totvs Multiselect - Vacation Reactive Form">
     *   <file name="sample-thf-multiselect-vacation-reactive-form/sample-thf-multiselect-vacation-reactive-form.component.html"> </file>
     *   <file name="sample-thf-multiselect-vacation-reactive-form/sample-thf-multiselect-vacation-reactive-form.component.ts"> </file>
     * </example>
     */
    var ThfMultiselectComponent = /** @class */ (function (_super) {
        __extends(ThfMultiselectComponent, _super);
        function ThfMultiselectComponent(renderer, changeDetector, controlPosition, el) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.changeDetector = changeDetector;
            _this.controlPosition = controlPosition;
            _this.el = el;
            _this.disclaimerOffset = 0;
            _this.dropdownIcon = 'thf-icon-arrow-down';
            _this.dropdownOpen = false;
            _this.initialized = false;
            _this.visibleElement = false;
            _this.isCalculateVisibleItems = true;
            _this.onScroll = (/**
             * @return {?}
             */
            function () {
                _this.adjustContainerPosition();
            });
            return _this;
        }
        /**
         * @return {?}
         */
        ThfMultiselectComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            if (this.focus) {
                this.inputElement.nativeElement.focus();
            }
            this.initialized = true;
        };
        /**
         * @return {?}
         */
        ThfMultiselectComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var inputWidth = this.inputElement.nativeElement.offsetWidth;
            // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
            // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
            if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
                this.debounceResize();
                this.visibleElement = true;
                return;
            }
        };
        /**
         * @return {?}
         */
        ThfMultiselectComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.removeListeners();
        };
        /**
         * @return {?}
         */
        ThfMultiselectComponent.prototype.getInputWidth = /**
         * @return {?}
         */
        function () {
            return this.el.nativeElement.querySelector('.thf-input').offsetWidth - 40;
        };
        /**
         * @return {?}
         */
        ThfMultiselectComponent.prototype.getDisclaimersWidth = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var disclaimers = this.el.nativeElement.querySelectorAll('thf-disclaimer');
            return Array.from(disclaimers).map((/**
             * @param {?} disclaimer
             * @return {?}
             */
            function (disclaimer) { return disclaimer['offsetWidth']; }));
        };
        /**
         * @return {?}
         */
        ThfMultiselectComponent.prototype.calculateVisibleItems = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var disclaimersWidth = this.getDisclaimersWidth();
            /** @type {?} */
            var inputWidth = this.getInputWidth();
            /** @type {?} */
            var extraDisclaimerSize = 38;
            /** @type {?} */
            var disclaimersVisible = disclaimersWidth[0];
            this.visibleDisclaimers = [];
            if (inputWidth > 0) {
                /** @type {?} */
                var sum = 0;
                /** @type {?} */
                var i = 0;
                for (i = 0; i < this.selectedOptions.length; i++) {
                    sum += disclaimersWidth[i];
                    this.visibleDisclaimers.push(this.selectedOptions[i]);
                    if (sum > inputWidth) {
                        sum -= disclaimersWidth[i];
                        this.isCalculateVisibleItems = false;
                        break;
                    }
                }
                if (disclaimersVisible || !this.selectedOptions.length) {
                    if (i === this.selectedOptions.length) {
                        this.isCalculateVisibleItems = false;
                        return;
                    }
                    if (sum + extraDisclaimerSize > inputWidth) {
                        this.visibleDisclaimers.splice(-2, 2);
                        /** @type {?} */
                        var label = '+' + (this.selectedOptions.length + 1 - i).toString();
                        this.visibleDisclaimers.push({ value: '', label: label });
                    }
                    else {
                        this.visibleDisclaimers.splice(-1, 1);
                        /** @type {?} */
                        var label = '+' + (this.selectedOptions.length - i).toString();
                        this.visibleDisclaimers.push({ value: '', label: label });
                    }
                }
            }
        };
        /**
         * @return {?}
         */
        ThfMultiselectComponent.prototype.updateVisibleItems = /**
         * @return {?}
         */
        function () {
            this.visibleDisclaimers = [].concat(this.selectedOptions);
            this.debounceResize();
            // quando estiver dentro de modal
            if (!this.inputElement.nativeElement.offsetWidth) {
                this.isCalculateVisibleItems = true;
            }
        };
        /**
         * @return {?}
         */
        ThfMultiselectComponent.prototype.debounceResize = /**
         * @return {?}
         */
        function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.calculateVisibleItems();
            }), 200);
        };
        /**
         * @param {?=} event
         * @return {?}
         */
        ThfMultiselectComponent.prototype.onKeyDown = /**
         * @param {?=} event
         * @return {?}
         */
        function (event) {
            if (event.keyCode === ThfKeyCodeEnum.arrowUp || event.keyCode === ThfKeyCodeEnum.arrowDown) {
                event.preventDefault();
                this.controlDropdownVisibility(true);
                return;
            }
            if (event.keyCode === ThfKeyCodeEnum.tab) {
                this.controlDropdownVisibility(false);
                return;
            }
        };
        /**
         * @return {?}
         */
        ThfMultiselectComponent.prototype.toggleDropdownVisibility = /**
         * @return {?}
         */
        function () {
            if (this.disabled) {
                return;
            }
            this.controlDropdownVisibility(!this.dropdownOpen);
        };
        /**
         * @param {?} toOpen
         * @return {?}
         */
        ThfMultiselectComponent.prototype.openDropdown = /**
         * @param {?} toOpen
         * @return {?}
         */
        function (toOpen) {
            if (toOpen && !this.disabled) {
                this.controlDropdownVisibility(true);
            }
        };
        /**
         * @param {?} toOpen
         * @return {?}
         */
        ThfMultiselectComponent.prototype.controlDropdownVisibility = /**
         * @param {?} toOpen
         * @return {?}
         */
        function (toOpen) {
            toOpen ? this.open() : this.close();
        };
        /**
         * @return {?}
         */
        ThfMultiselectComponent.prototype.scrollToSelectedOptions = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.selectedOptions && this.selectedOptions.length) {
                /** @type {?} */
                var index = this.options.findIndex((/**
                 * @param {?} option
                 * @return {?}
                 */
                function (option) { return option.value === _this.selectedOptions[0].value; }));
                this.dropdown.scrollTo(index);
            }
        };
        /**
         * @param {?} options
         * @return {?}
         */
        ThfMultiselectComponent.prototype.setVisibleOptionsDropdown = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this.visibleOptionsDropdown = options;
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfMultiselectComponent.prototype.changeSearch = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            var _this = this;
            (event && event.value) ? this.searchByLabel(event.value, this.options, this.filterMode) : this.setVisibleOptionsDropdown(this.options);
            // timeout necessário para reposicionar corretamente quando dropdown estiver pra cima do input e realizar busca no input
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.adjustContainerPosition(); }));
        };
        /**
         * @return {?}
         */
        ThfMultiselectComponent.prototype.getPlaceholder = /**
         * @return {?}
         */
        function () {
            return (this.placeholder && !this.visibleDisclaimers.length) ? this.placeholder : '';
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfMultiselectComponent.prototype.closeDisclaimer = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var index = this.selectedOptions.findIndex((/**
             * @param {?} option
             * @return {?}
             */
            function (option) { return option.value === value; }));
            this.selectedOptions.splice(index, 1);
            this.updateVisibleItems();
            this.callOnChange(this.selectedOptions);
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfMultiselectComponent.prototype.wasClickedOnToggle = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!this.inputElement.nativeElement.contains(event.target) &&
                !this.iconElement.nativeElement.contains(event.target) &&
                !this.dropdownElement.nativeElement.contains(event.target) &&
                !this.disclaimerContainerElement.nativeElement.contains(event.target) &&
                this.dropdownOpen) {
                this.controlDropdownVisibility(false);
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfMultiselectComponent.prototype.adjustContainerPosition = /**
         * @private
         * @return {?}
         */
        function () {
            this.controlPosition.adjustPosition(thfMultiselectContainerPositionDefault);
        };
        /**
         * @private
         * @return {?}
         */
        ThfMultiselectComponent.prototype.close = /**
         * @private
         * @return {?}
         */
        function () {
            this.dropdownIcon = 'thf-icon-arrow-down';
            this.dropdownOpen = false;
            this.dropdown.controlVisibility(false);
            this.setVisibleOptionsDropdown(this.options);
            this.removeListeners();
        };
        /**
         * @private
         * @return {?}
         */
        ThfMultiselectComponent.prototype.initializeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.clickOutListener = this.renderer.listen('document', 'click', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.wasClickedOnToggle(event);
            }));
            this.resizeListener = this.renderer.listen('window', 'resize', (/**
             * @return {?}
             */
            function () {
                _this.updateVisibleItems();
                isMobile() ? _this.adjustContainerPosition() : _this.close();
            }));
            window.addEventListener('scroll', this.onScroll, true);
        };
        /**
         * @private
         * @return {?}
         */
        ThfMultiselectComponent.prototype.open = /**
         * @private
         * @return {?}
         */
        function () {
            this.dropdownIcon = 'thf-icon-arrow-up';
            this.dropdownOpen = true;
            this.dropdown.controlVisibility(true);
            this.setVisibleOptionsDropdown(this.options);
            this.initializeListeners();
            this.scrollToSelectedOptions();
            this.changeDetector.detectChanges();
            this.setPositionDropdown();
        };
        /**
         * @private
         * @return {?}
         */
        ThfMultiselectComponent.prototype.removeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.clickOutListener) {
                this.clickOutListener();
            }
            if (this.resizeListener) {
                this.resizeListener();
            }
            window.removeEventListener('scroll', this.onScroll, true);
        };
        /**
         * @private
         * @return {?}
         */
        ThfMultiselectComponent.prototype.setPositionDropdown = /**
         * @private
         * @return {?}
         */
        function () {
            this.controlPosition.setElements(this.dropdown.container.nativeElement, thfMultiselectContainerOffset, this.inputElement, ['top', 'bottom'], true);
            this.adjustContainerPosition();
        };
        ThfMultiselectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-multiselect',
                        template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\"\n    [class.thf-multiselect-show]=\"dropdownOpen\">\n\n    <input #inputElement\n      class=\"thf-input thf-input-icon-right thf-clickable\"\n      readonly\n      type=\"text\"\n      [value]=\"getPlaceholder()\"\n      [disabled]=\"disabled\"\n      (keydown)=\"onKeyDown($event)\"\n      (click)=\"toggleDropdownVisibility()\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <span #iconElement\n        class=\"thf-icon thf-field-icon {{ dropdownIcon }}\"\n        [ngClass]=\"disabled ? 'thf-field-icon-disabled' : ''\"\n        (click)=\"toggleDropdownVisibility()\">\n      </span>\n    </div>\n\n    <div #disclaimerContainer\n      class=\"thf-multiselect-field\"\n      [class.thf-multiselect-field-disabled]=\"disabled\">\n\n      <thf-disclaimer *ngFor=\"let disclaimer of visibleDisclaimers\"\n        [t-label]=\"disclaimer.label\"\n        [t-value]=\"disclaimer.value\"\n        [t-hide-close]=\"disclaimer.value === '' || disabled\"\n        [class.thf-clickable]=\"disclaimer.value === '' && !disabled\"\n        (click)=\"openDropdown(disclaimer.value === '')\"\n        (t-close-action)=\"closeDisclaimer(disclaimer.value)\">\n      </thf-disclaimer>\n    </div>\n  </div>\n\n  <thf-multiselect-dropdown #dropdownElement\n    [t-hide-search]=\"hideSearch\"\n    [t-literals]=\"literals\"\n    [t-options]=\"visibleOptionsDropdown\"\n    [t-selected-values]=\"getValuesFromOptions(selectedOptions)\"\n    [t-placeholder-search]=\"placeholderSearch\"\n    (t-change)=\"changeItems($event)\"\n    (t-change-search)=\"changeSearch($event)\"\n    (t-close-dropdown)=\"controlDropdownVisibility(false)\">\n  </thf-multiselect-dropdown>\n\n  <thf-field-container-bottom></thf-field-container-bottom>\n\n</thf-field-container>\n",
                        providers: [
                            ThfControlPositionService,
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfMultiselectComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfMultiselectComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfMultiselectComponent.ctorParameters = function () { return [
            { type: core.Renderer2 },
            { type: core.ChangeDetectorRef },
            { type: ThfControlPositionService },
            { type: core.ElementRef }
        ]; };
        ThfMultiselectComponent.propDecorators = {
            dropdownElement: [{ type: core.ViewChild, args: ['dropdownElement', { read: core.ElementRef, static: true },] }],
            dropdown: [{ type: core.ViewChild, args: ['dropdownElement', { static: true },] }],
            disclaimerContainerElement: [{ type: core.ViewChild, args: ['disclaimerContainer', { read: core.ElementRef, static: true },] }],
            iconElement: [{ type: core.ViewChild, args: ['iconElement', { read: core.ElementRef, static: true },] }],
            inputElement: [{ type: core.ViewChild, args: ['inputElement', { read: core.ElementRef, static: true },] }]
        };
        return ThfMultiselectComponent;
    }(ThfMultiselectBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente que constrói cada item no dropdown, contendo o checkbox e o label.
     */
    var ThfMultiselectItemComponent = /** @class */ (function () {
        function ThfMultiselectItemComponent() {
            /**
             * Opção que irá gerar o item, implementando a interface ThfMultiselectOption.
             */
            this.option = null;
            /**
             * Esta propriedade indica se o campo está selecionado ou não.
             */
            this.selected = false;
            /**
             * Evento que será disparado toda vez que o usuário marcar ou desmarcar um item.
             */
            this.change = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        ThfMultiselectItemComponent.prototype.itemClicked = /**
         * @return {?}
         */
        function () {
            this.selected = !this.selected;
            this.change.emit(this.selected);
        };
        ThfMultiselectItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-multiselect-item',
                        template: "<li [value]=\"option?.value\"\n  (click)=\"itemClicked()\"\n  [class.thf-multiselect-item-selected]=\"selected\">\n\n  <a class=\"thf-multiselect-item\">\n    <input\n      [checked]=\"selected\"\n      class=\"thf-multiselect-checkbox-input\"\n      [class.thf-multiselect-checkbox-input-checked]=\"selected\"\n      type=\"checkbox\">\n\n    <label class=\"thf-multiselect-checkbox-label thf-clickable\">\n      {{ option?.label }}\n    </label>\n  </a>\n</li>\n"
                    }] }
        ];
        ThfMultiselectItemComponent.propDecorators = {
            option: [{ type: core.Input, args: ['t-option',] }],
            selected: [{ type: core.Input, args: ['t-selected',] }],
            change: [{ type: core.Output, args: ['t-change',] }]
        };
        return ThfMultiselectItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfRichTextBodyCommands = [
        'bold', 'italic', 'underline', 'justifyleft', 'justifycenter', 'justifyright', 'justifyfull', 'insertUnorderedList'
    ];
    var ThfRichTextBodyComponent = /** @class */ (function () {
        function ThfRichTextBodyComponent() {
            this.commands = new core.EventEmitter();
            this.value = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        ThfRichTextBodyComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.bodyElement.nativeElement.designMode = 'on';
            // timeout necessário para setar o valor vindo do writeValue do componente principal.
            setTimeout((/**
             * @return {?}
             */
            function () { _this.updateValueWithModelValue(); }));
        };
        /**
         * @param {?} command
         * @return {?}
         */
        ThfRichTextBodyComponent.prototype.executeCommand = /**
         * @param {?} command
         * @return {?}
         */
        function (command) {
            this.bodyElement.nativeElement.focus();
            document.execCommand(command, false, null);
            this.updateModel();
            this.value.emit(this.modelValue);
        };
        /**
         * @return {?}
         */
        ThfRichTextBodyComponent.prototype.onClick = /**
         * @return {?}
         */
        function () {
            this.emitSelectionCommands();
        };
        /**
         * @return {?}
         */
        ThfRichTextBodyComponent.prototype.onKeyUp = /**
         * @return {?}
         */
        function () {
            // Tratamento necessário para eliminar a tag <br> criada no firefox quando o body for limpo.
            if (!this.bodyElement.nativeElement.innerText.trim() && this.bodyElement.nativeElement.firstChild) {
                this.bodyElement.nativeElement.firstChild.remove();
            }
            this.updateModel();
            this.emitSelectionCommands();
        };
        /**
         * @return {?}
         */
        ThfRichTextBodyComponent.prototype.update = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () { _this.updateModel(); }));
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onKeyUp(); }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfRichTextBodyComponent.prototype.emitSelectionCommands = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var commands = thfRichTextBodyCommands.filter((/**
             * @param {?} command
             * @return {?}
             */
            function (command) {
                return document.queryCommandState(command);
            }));
            this.commands.emit(commands);
        };
        /**
         * @private
         * @return {?}
         */
        ThfRichTextBodyComponent.prototype.updateModel = /**
         * @private
         * @return {?}
         */
        function () {
            this.modelValue = this.bodyElement.nativeElement.innerHTML;
            this.value.emit(this.modelValue);
        };
        /**
         * @private
         * @return {?}
         */
        ThfRichTextBodyComponent.prototype.updateValueWithModelValue = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.modelValue) {
                this.bodyElement.nativeElement.insertAdjacentHTML('afterbegin', this.modelValue);
            }
        };
        ThfRichTextBodyComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-rich-text-body',
                        template: "<div #bodyElement\n  class=\"thf-rich-text-body\"\n  [attr.contenteditable]=\"!readonly\"\n  [attr.data-placeholder]=\"placeholder\"\n  [style.height.px]=\"height\"\n  (click)=\"onClick()\"\n  (cut)=\"update()\"\n  (keyup)=\"onKeyUp()\"\n  (paste)=\"update()\">\n</div>\n"
                    }] }
        ];
        ThfRichTextBodyComponent.propDecorators = {
            bodyElement: [{ type: core.ViewChild, args: ['bodyElement', { static: true },] }],
            height: [{ type: core.Input, args: ['t-height',] }],
            modelValue: [{ type: core.Input, args: ['t-model-value',] }],
            placeholder: [{ type: core.Input, args: ['t-placeholder',] }],
            readonly: [{ type: core.Input, args: ['t-readonly',] }],
            commands: [{ type: core.Output, args: ['t-commands',] }],
            value: [{ type: core.Output, args: ['t-value',] }]
        };
        return ThfRichTextBodyComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O componente `thf-rich-text` é um editor de textos enriquecidos.
     *
     * Para edição de texto simples sem formatação recomenda-se o uso do componente [**thf-textarea**](/documentation/thf-textarea).
     * @abstract
     */
    var ThfRichTextBaseComponent = /** @class */ (function () {
        function ThfRichTextBaseComponent() {
            this.onChangeModel = null;
            this.invalid = false;
            // tslint:disable-next-line
            this.onTouched = null;
            /**
             * \@description
             *
             * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.
             */
            this.errorMessage = '';
            /**
             * \@description
             *
             * Indica que o campo será obrigatório.
             *
             * \@default `false`
             */
            this.required = false;
        }
        Object.defineProperty(ThfRichTextBaseComponent.prototype, "height", {
            get: /**
             * @return {?}
             */
            function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura da área de edição de texto.
             *
             * > Altura mínima do componente é `94` e a altura máxima é `262`.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define a altura da área de edição de texto.
             *
             * > Altura mínima do componente é `94` e a altura máxima é `262`.
             * @param {?} height
             * @return {?}
             */
            function (height) {
                this._height = height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfRichTextBaseComponent.prototype, "placeholder", {
            get: /**
             * @return {?}
             */
            function () {
                return this._placeholder;
            },
            /**
             * @optional
             *
             * @description
             *
             * Mensagem que aparecerá enquanto o campo não estiver preenchido.
             *
             * @default ''
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Mensagem que aparecerá enquanto o campo não estiver preenchido.
             *
             * \@default ''
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._placeholder = value || '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfRichTextBaseComponent.prototype, "readonly", {
            get: /**
             * @return {?}
             */
            function () {
                return this._readonly;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será somente leitura.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo será somente leitura.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._readonly = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfRichTextBaseComponent.prototype, "setRequired", {
            set: /**
             * @param {?} required
             * @return {?}
             */
            function (required) {
                this.required = convertToBoolean(required);
                this.validateModel(this.value);
            },
            enumerable: true,
            configurable: true
        });
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        ThfRichTextBaseComponent.prototype.registerOnChange = 
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            this.onChangeModel = func;
        };
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        ThfRichTextBaseComponent.prototype.registerOnTouched = 
        // Função implementada do ControlValueAccessor
        // Usada para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            this.onTouched = func;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfRichTextBaseComponent.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.validatorChange = fn;
        };
        /**
         * @param {?} abstractControl
         * @return {?}
         */
        ThfRichTextBaseComponent.prototype.validate = /**
         * @param {?} abstractControl
         * @return {?}
         */
        function (abstractControl) {
            if (requiredFailed(this.required, false, abstractControl.value)) {
                return { required: {
                        valid: false,
                    } };
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfRichTextBaseComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value;
        };
        // Executa a função onChange
        // Executa a função onChange
        /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        ThfRichTextBaseComponent.prototype.updateModel = 
        // Executa a função onChange
        /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // Quando o rich-text não possui um formulário, então esta função não é registrada
            if (this.onChangeModel) {
                this.onChangeModel(value);
            }
        };
        /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        ThfRichTextBaseComponent.prototype.validateModel = /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.validatorChange) {
                this.validatorChange(value);
            }
        };
        ThfRichTextBaseComponent.propDecorators = {
            errorMessage: [{ type: core.Input, args: ['t-error-message',] }],
            height: [{ type: core.Input, args: ['t-height',] }],
            help: [{ type: core.Input, args: ['t-help',] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            name: [{ type: core.Input, args: ['name',] }],
            optional: [{ type: core.Input, args: ['t-optional',] }],
            placeholder: [{ type: core.Input, args: ['t-placeholder',] }],
            readonly: [{ type: core.Input, args: ['t-readonly',] }],
            setRequired: [{ type: core.Input, args: ['t-required',] }]
        };
        return ThfRichTextBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfRichTextBaseComponent
     *
     * \@example
     *
     * <example name="thf-rich-text-basic" title="Totvs Rich Text Basic">
     *   <file name="sample-thf-rich-text-basic/sample-thf-rich-text-basic.component.html"> </file>
     *   <file name="sample-thf-rich-text-basic/sample-thf-rich-text-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-rich-text-recipe" title="Totvs Rich Text Recipe">
     *   <file name="sample-thf-rich-text-recipe/sample-thf-rich-text-recipe.component.html"> </file>
     *   <file name="sample-thf-rich-text-recipe/sample-thf-rich-text-recipe.component.ts"> </file>
     * </example>
     */
    var ThfRichTextComponent = /** @class */ (function (_super) {
        __extends(ThfRichTextComponent, _super);
        function ThfRichTextComponent(element) {
            var _this = _super.call(this) || this;
            _this.element = element;
            _this.listener = _this.validateClassesForRequired.bind(_this);
            return _this;
        }
        Object.defineProperty(ThfRichTextComponent.prototype, "errorMsg", {
            get: /**
             * @return {?}
             */
            function () {
                return (this.errorMessage !== '' && !this.value && this.required && this.invalid) ? this.errorMessage : '';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfRichTextComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            // Se não tem ngModel ou reactive form adiciona validação com classes css
            if (!this.onChangeModel) {
                this.element.nativeElement.addEventListener('keyup', this.listener);
                this.element.nativeElement.addEventListener('cut', this.listener);
                this.element.nativeElement.addEventListener('paste', this.listener);
            }
        };
        /**
         * @return {?}
         */
        ThfRichTextComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (!this.onChangeModel) {
                this.element.nativeElement.removeEventListener('keyup', this.listener);
                this.element.nativeElement.removeEventListener('cut', this.listener);
                this.element.nativeElement.removeEventListener('paste', this.listener);
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfRichTextComponent.prototype.updateValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value;
            this.invalid = !value;
            this.updateModel(this.value);
        };
        /**
         * @private
         * @return {?}
         */
        ThfRichTextComponent.prototype.validateClassesForRequired = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var value = _this.value;
                /** @type {?} */
                var element = _this.element.nativeElement;
                if (!value && _this.required) {
                    element.classList.add('ng-invalid');
                    element.classList.add('ng-dirty');
                }
                else {
                    element.classList.remove('ng-invalid');
                }
            }));
        };
        ThfRichTextComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-rich-text',
                        template: "<thf-field-container\n[t-help]=\"help\"\n[t-label]=\"label\"\n[t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n\n    <thf-rich-text-body #richTextBody\n      [t-height]=\"height\"\n      [t-model-value]=\"value\"\n      [t-placeholder]=\"placeholder\"\n      [t-readonly]=\"readonly\"\n      (t-commands)=\"richTextToolbar.setButtonsStates($event)\"\n      (t-value)=\"updateValue($event)\">\n    </thf-rich-text-body>\n\n    <thf-rich-text-toolbar #richTextToolbar\n      [t-readonly]=\"readonly\"\n      (t-command)=\"richTextBody.executeCommand($event)\">\n    </thf-rich-text-toolbar>\n\n  </div>\n\n  <thf-field-container-bottom [t-error-pattern]=\"errorMsg\"></thf-field-container-bottom>\n\n</thf-field-container>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfRichTextComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfRichTextComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfRichTextComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        return ThfRichTextComponent;
    }(ThfRichTextBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfRichTextLiteralsDefault = {
        en: {
            bold: 'Bold',
            italic: 'Italic',
            underline: 'Underline',
            left: 'Left',
            center: 'Center',
            right: 'Right',
            justify: 'Justify',
            unorderedList: 'Bulleted list'
        },
        es: {
            bold: 'Negrita',
            italic: 'Cursiva',
            underline: 'Subrayado',
            left: 'Izquierda',
            center: 'Centro',
            right: 'Derecha',
            justify: 'Justificado',
            unorderedList: 'Lista con viñetas'
        },
        pt: {
            bold: 'Negrito',
            italic: 'Itálico',
            underline: 'Sublinhado',
            left: 'Esquerda',
            center: 'Centro',
            right: 'Direita',
            justify: 'Justificado',
            unorderedList: 'Lista com marcadores'
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfRichTextToolbarComponent = /** @class */ (function () {
        function ThfRichTextToolbarComponent(languageService) {
            this.languageService = languageService;
            this.literals = __assign({}, thfRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
            this.alignButtons = [
                {
                    command: 'justifyleft',
                    icon: 'thf-icon-align-left',
                    tooltip: this.literals.left,
                    action: this.emitAlignCommand.bind(this, 'justifyleft'),
                    selected: true
                },
                {
                    command: 'justifycenter',
                    icon: 'thf-icon-align-center',
                    tooltip: this.literals.center,
                    action: this.emitAlignCommand.bind(this, 'justifycenter')
                },
                {
                    command: 'justifyright',
                    icon: 'thf-icon-align-right',
                    tooltip: this.literals.right,
                    action: this.emitAlignCommand.bind(this, 'justifyright')
                },
                {
                    command: 'justifyfull',
                    icon: 'thf-icon-align-justify',
                    tooltip: this.literals.justify,
                    action: this.emitAlignCommand.bind(this, 'justifyfull')
                }
            ];
            this.formatButtons = [
                {
                    command: 'bold',
                    icon: 'thf-icon-text-bold',
                    tooltip: this.literals.bold,
                    action: this.emitCommand.bind(this, 'bold')
                },
                {
                    command: 'italic',
                    icon: 'thf-icon-text-italic',
                    tooltip: this.literals.italic,
                    action: this.emitCommand.bind(this, 'italic')
                },
                {
                    command: 'underline',
                    icon: 'thf-icon-text-underline',
                    tooltip: this.literals.underline,
                    action: this.emitCommand.bind(this, 'underline')
                }
            ];
            this.listButtons = [
                {
                    command: 'insertUnorderedList',
                    icon: 'thf-icon-list',
                    tooltip: this.literals.unorderedList,
                    action: this.emitCommand.bind(this, 'insertUnorderedList')
                }
            ];
            this.command = new core.EventEmitter();
        }
        Object.defineProperty(ThfRichTextToolbarComponent.prototype, "readonly", {
            get: /**
             * @return {?}
             */
            function () {
                return this._readonly;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._readonly = value;
                this.toggleDisableButtons(this._readonly);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfRichTextToolbarComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.removeButtonFocus();
        };
        /**
         * @param {?} commands
         * @return {?}
         */
        ThfRichTextToolbarComponent.prototype.setButtonsStates = /**
         * @param {?} commands
         * @return {?}
         */
        function (commands) {
            if (!this.readonly) {
                this.alignButtons.forEach((/**
                 * @param {?} button
                 * @return {?}
                 */
                function (button) { button.selected = commands.includes(button.command); }));
                this.formatButtons.forEach((/**
                 * @param {?} button
                 * @return {?}
                 */
                function (button) { button.selected = commands.includes(button.command); }));
                this.listButtons[0].selected = commands.includes(this.listButtons[0].command);
            }
        };
        /**
         * @private
         * @param {?} command
         * @return {?}
         */
        ThfRichTextToolbarComponent.prototype.emitAlignCommand = /**
         * @private
         * @param {?} command
         * @return {?}
         */
        function (command) {
            /** @type {?} */
            var index = this.alignButtons.findIndex((/**
             * @param {?} btn
             * @return {?}
             */
            function (btn) { return btn.command === command; }));
            if (this.alignButtons[index].selected) {
                this.alignButtons[index].selected = false;
            }
            this.command.emit(command);
        };
        /**
         * @private
         * @param {?} command
         * @return {?}
         */
        ThfRichTextToolbarComponent.prototype.emitCommand = /**
         * @private
         * @param {?} command
         * @return {?}
         */
        function (command) {
            this.command.emit(command);
        };
        /**
         * @private
         * @return {?}
         */
        ThfRichTextToolbarComponent.prototype.removeButtonFocus = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var buttons = this.toolbarElement.nativeElement.querySelectorAll('button');
            buttons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            function (button) { button.setAttribute('tabindex', '-1'); }));
        };
        /**
         * @private
         * @param {?} state
         * @return {?}
         */
        ThfRichTextToolbarComponent.prototype.toggleDisableButtons = /**
         * @private
         * @param {?} state
         * @return {?}
         */
        function (state) {
            this.alignButtons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            function (button) { button.disabled = state; }));
            this.formatButtons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            function (button) { button.disabled = state; }));
            this.listButtons[0].disabled = state;
        };
        ThfRichTextToolbarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-rich-text-toolbar',
                        template: "<div class=\"thf-rich-text-toolbar\" #toolbarElement>\n  <div class=\"thf-rich-text-toolbar-button-align\">\n    <thf-button-group [t-buttons]=\"formatButtons\" t-toggle=\"multiple\"></thf-button-group>\n  </div>\n\n  <div class=\"thf-rich-text-toolbar-button-align\">\n    <thf-button-group [t-buttons]=\"alignButtons\" t-toggle=\"single\"></thf-button-group>\n  </div>\n\n  <div class=\"thf-rich-text-toolbar-button-align\">\n    <thf-button-group [t-buttons]=\"listButtons\" t-toggle=\"single\"></thf-button-group>\n  </div>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfRichTextToolbarComponent.ctorParameters = function () { return [
            { type: ThfLanguageService }
        ]; };
        ThfRichTextToolbarComponent.propDecorators = {
            toolbarElement: [{ type: core.ViewChild, args: ['toolbarElement', { static: true },] }],
            readonly: [{ type: core.Input, args: ['t-readonly',] }],
            command: [{ type: core.Output, args: ['t-command',] }]
        };
        return ThfRichTextToolbarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfInputBaseComponent
     *
     * \@example
     *
     * <example name="thf-input-basic" title="Totvs Input Basic">
     *  <file name="sample-thf-input-basic/sample-thf-input-basic.component.html"> </file>
     *  <file name="sample-thf-input-basic/sample-thf-input-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-input-labs" title="Totvs Input Labs">
     *  <file name="sample-thf-input-labs/sample-thf-input-labs.component.html"> </file>
     *  <file name="sample-thf-input-labs/sample-thf-input-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-input-reactive-form" title="Totvs Input - Reactive Form">
     *  <file name="sample-thf-input-reactive-form/sample-thf-input-reactive-form.component.html"> </file>
     *  <file name="sample-thf-input-reactive-form/sample-thf-input-reactive-form.component.ts"> </file>
     * </example>
     */
    var ThfInputComponent = /** @class */ (function (_super) {
        __extends(ThfInputComponent, _super);
        function ThfInputComponent(el) {
            return _super.call(this, el) || this;
        }
        /**
         * @param {?} c
         * @return {?}
         */
        ThfInputComponent.prototype.extraValidation = /**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            return null;
        };
        ThfInputComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-input',
                        template: "<thf-field-container\n  [t-help]=\"help\"\n  [t-label]=\"label\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n    <div *ngIf=\"icon\" class=\"thf-field-icon-container-left\">\n      <span class=\"thf-icon thf-field-icon {{ icon }}\" [class.thf-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inp\n      class=\"thf-input\"\n      [attr.name]=\"name\"\n      [class.thf-input-icon-left]=\"icon\"\n      [class.thf-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"></thf-clean>\n    </div>\n  </div>\n\n  <thf-field-container-bottom\n    [t-error-pattern]=\"getErrorPattern()\">\n  </thf-field-container-bottom>\n\n</thf-field-container>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfInputComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfInputComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfInputComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        return ThfInputComponent;
    }(ThfInputGeneric));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    ThfNumberBaseComponent = /** @class */ (function (_super) {
        __extends(ThfNumberBaseComponent, _super);
        function ThfNumberBaseComponent(elementRef) {
            var _this = _super.call(this, elementRef) || this;
            _this.type = 'number';
            return _this;
        }
        /**
         * @param {?} e
         * @return {?}
         */
        ThfNumberBaseComponent.prototype.eventOnInput = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!this.mask) {
                /** @type {?} */
                var value = e.target.value;
                /** @type {?} */
                var valueMaxlength = this.validMaxLength(this.maxlength, value);
                if (value !== valueMaxlength) {
                    value = valueMaxlength;
                    this.inputEl.nativeElement.value = value;
                }
                this.callOnChange(this.formatNumber(value));
            }
        };
        /**
         * @param {?} maxlength
         * @param {?} value
         * @return {?}
         */
        ThfNumberBaseComponent.prototype.validMaxLength = /**
         * @param {?} maxlength
         * @param {?} value
         * @return {?}
         */
        function (maxlength, value) {
            if (maxlength && value.length > maxlength) {
                /** @type {?} */
                var substringValue = value.toString().substring(0, maxlength);
                if (substringValue && this.isEndWithDot(substringValue)) {
                    return substringValue.toString().substring(0, maxlength - 1);
                }
                return substringValue;
            }
            return value;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfNumberBaseComponent.prototype.writeValueModel = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.inputEl) {
                if (value || value === 0) {
                    if (this.mask) {
                        this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                        // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                        if (this.objMask.formatModel) {
                            this.onChangePropagate(this.objMask.valueToModel);
                        }
                    }
                    else {
                        this.inputEl.nativeElement.value = value;
                    }
                }
                else { // Se for o valor for undefined, deve limpar o campo
                    this.inputEl.nativeElement.value = '';
                }
            }
            // Emite evento quando o model é atualizado, inclusive a primeira vez
            this.changeModel.emit(value);
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfNumberBaseComponent.prototype.isEndWithDot = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return value && value.lastIndexOf('.') === value.length - 1;
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfNumberBaseComponent.prototype.formatNumber = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return value ? Number(value) : null;
        };
        return ThfNumberBaseComponent;
    }(ThfInputGeneric));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfInputBaseComponent
     *
     * \@description
     *
     * thf-number é um input específico para receber apenas números.
     * É possível configurar um valor mínimo, máximo e um step com t-min, t-max e t-step,
     * respectivamente.
     *
     * \@example
     *
     * <example name="thf-number-basic" title="Totvs Number Basic">
     *  <file name="sample-thf-number-basic/sample-thf-number-basic.component.html"> </file>
     *  <file name="sample-thf-number-basic/sample-thf-number-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-number-labs" title="Totvs Number Labs">
     *  <file name="sample-thf-number-labs/sample-thf-number-labs.component.html"> </file>
     *  <file name="sample-thf-number-labs/sample-thf-number-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-number-calculate" title="Totvs Number - Calculate">
     *  <file name="sample-thf-number-calculate/sample-thf-number-calculate.component.html"> </file>
     *  <file name="sample-thf-number-calculate/sample-thf-number-calculate.component.ts"> </file>
     * </example>
     */
    var ThfNumberComponent = /** @class */ (function (_super) {
        __extends(ThfNumberComponent, _super);
        function ThfNumberComponent(el) {
            var _this = _super.call(this, el) || this;
            /**
             * \@optional
             *
             * \@description
             *
             * Intervalo.
             *
             * \@default 1
             */
            _this.step = '1';
            return _this;
        }
        Object.defineProperty(ThfNumberComponent.prototype, "setMin", {
            set: /**
             * @param {?} min
             * @return {?}
             */
            function (min) {
                /** @type {?} */
                var parsedInt = parseInt(min, 10);
                this.min = !isNaN(parsedInt) ? parsedInt : undefined;
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfNumberComponent.prototype, "setMax", {
            set: /**
             * @param {?} max
             * @return {?}
             */
            function (max) {
                /** @type {?} */
                var parsedInt = parseInt(max, 10);
                this.max = !isNaN(parsedInt) ? parsedInt : undefined;
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} abstractControl
         * @return {?}
         */
        ThfNumberComponent.prototype.extraValidation = /**
         * @param {?} abstractControl
         * @return {?}
         */
        function (abstractControl) {
            if (minFailed(this.min, abstractControl.value)) {
                return { min: {
                        valid: false,
                    } };
            }
            if (maxFailed(this.max, abstractControl.value)) {
                return { max: {
                        valid: false,
                    } };
            }
            return null;
        };
        ThfNumberComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-number',
                        template: "<thf-field-container\n  [t-help]=\"help\"\n  [t-label]=\"label\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n    <input #inp\n      class=\"thf-input\"\n      type=\"number\"\n      [attr.max]=\"max\"\n      [attr.min]=\"min\"\n      [attr.name]=\"name\"\n      [attr.step]=\"step\"\n      [class.thf-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [tabindex]=\"disabled ? -1 : 0\"\n      (blur)=\"eventOnBlur($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <thf-clean [t-default-value]=\"null\"\n        [t-element-ref]=\"inputEl\"\n        (t-change-event)=\"clear($event)\">\n      </thf-clean>\n    </div>\n  </div>\n\n  <thf-field-container-bottom\n    [t-error-pattern]=\"getErrorPattern()\">\n  </thf-field-container-bottom>\n\n</thf-field-container>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfNumberComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfNumberComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfNumberComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        ThfNumberComponent.propDecorators = {
            setMin: [{ type: core.Input, args: ['t-min',] }],
            setMax: [{ type: core.Input, args: ['t-max',] }],
            step: [{ type: core.Input, args: ['t-step',] }]
        };
        return ThfNumberComponent;
    }(ThfNumberBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfInputBaseComponent
     *
     * \@description
     * O thf-password é um input específico para senhas. Já possui tipo, estilo e ícone predefinidos.
     *
     * \@example
     *
     * <example name="thf-password-basic" title="Totvs Password Basic">
     *   <file name="sample-thf-password-basic/sample-thf-password-basic.component.html"> </file>
     *   <file name="sample-thf-password-basic/sample-thf-password-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-password-labs" title="Totvs Password Labs">
     *   <file name="sample-thf-password-labs/sample-thf-password-labs.component.html"> </file>
     *   <file name="sample-thf-password-labs/sample-thf-password-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-password-reset" title="Totvs Password - Reset">
     *   <file name="sample-thf-password-reset/sample-thf-password-reset.component.html"> </file>
     *   <file name="sample-thf-password-reset/sample-thf-password-reset.component.ts"> </file>
     * </example>
     */
    var ThfPasswordComponent = /** @class */ (function (_super) {
        __extends(ThfPasswordComponent, _super);
        function ThfPasswordComponent(el) {
            var _this = _super.call(this, el) || this;
            _this._hidePasswordPeek = false;
            _this.type = 'password';
            _this.visiblePassword = false;
            return _this;
        }
        Object.defineProperty(ThfPasswordComponent.prototype, "hidePasswordPeek", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hidePasswordPeek;
            },
            /**
             * @optional
             *
             * @description
             *
             * Permite esconder a função de espiar a senha digitada.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Permite esconder a função de espiar a senha digitada.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._hidePasswordPeek = convertToBoolean(value);
                if (value) {
                    this.visiblePassword = false;
                    this.type = 'password';
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} c
         * @return {?}
         */
        ThfPasswordComponent.prototype.extraValidation = /**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            return null;
        };
        /**
         * @return {?}
         */
        ThfPasswordComponent.prototype.showPassword = /**
         * @return {?}
         */
        function () {
            this.visiblePassword = !this.visiblePassword;
            this.type = this.type === 'password' ? 'text' : 'password';
        };
        ThfPasswordComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-password',
                        template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n    <div class=\"thf-field-icon-container-left\">\n      <span class=\"thf-icon thf-field-icon thf-icon-lock\"\n        [class.thf-field-icon-disabled]=\"disabled\">\n      </span>\n    </div>\n\n    <input #inp\n      class=\"thf-input thf-input-icon-left\"\n      [attr.name]=\"name\"\n      [class.thf-input-double-icon-right]=\"clean && inp.value && !hidePasswordPeek\"\n      [class.thf-input-icon-right]=\"clean || !hidePasswordPeek\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"disabled ? 'password' : type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <thf-clean\n        class=\"thf-icon thf-field-icon\"\n        [t-element-ref]=\"inputEl\"\n        (t-change-event)=\"clear($event)\">\n      </thf-clean>\n\n      <span *ngIf=\"!hidePasswordPeek && !disabled\"\n        class=\"thf-icon thf-field-icon\"\n        [ngClass]=\"visiblePassword ? 'thf-icon-eye' : 'thf-icon-eye-off thf-field-icon-disabled'\"\n        (click)=\"showPassword()\">\n      </span>\n    </div>\n  </div>\n\n  <thf-field-container-bottom\n    [t-error-pattern]=\"getErrorPattern()\">\n  </thf-field-container-bottom>\n\n</thf-field-container>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfPasswordComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfPasswordComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfPasswordComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        ThfPasswordComponent.propDecorators = {
            hidePasswordPeek: [{ type: core.Input, args: ['t-hide-password-peek',] }]
        };
        return ThfPasswordComponent;
    }(ThfInputGeneric));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfRadioGroupColumnsDefaultLength = 6;
    /** @type {?} */
    var thfRadioGroupColumnsTotalLength = 12;
    /**
     * \@description
     *
     * O componente `thf-radio-group` deve ser utilizado para disponibilizar múltiplas opções ao usuário, permitindo a ele que
     * selecione apenas uma delas. Seu uso é recomendado para um número pequeno de opções, caso contrário, recomenda-se o uso
     * do [**thf-combo**](/documentation/thf-combo) ou [**thf-select**](/documentation/thf-select).
     *
     * Este não é um componente de multiseleção, se for este o caso, deve-se utilizar o
     * [**thf-checkbox-group**](/documentation/thf-checkbox-group).
     *
     * > Ao passar um valor para o *model* que não esteja na lista de opções, o mesmo será definido como `undefined`.
     * @abstract
     */
    var ThfRadioGroupBaseComponent = /** @class */ (function () {
        function ThfRadioGroupBaseComponent() {
            this._columns = thfRadioGroupColumnsDefaultLength;
            this._disabled = false;
            this._required = false;
            this.mdColumns = thfRadioGroupColumnsDefaultLength;
            this.onChangePropagate = null;
            /**
             * Evento ao alterar valor do campo.
             */
            this.change = new core.EventEmitter();
        }
        Object.defineProperty(ThfRadioGroupBaseComponent.prototype, "columns", {
            get: /**
             * @return {?}
             */
            function () {
                return this._columns;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a quantidade de colunas para exibição das opções.
             *
             * **Considerações:**
             *  - É possível exibir as opções entre `1` e `4` colunas.
             *  - O número máximo de colunas é invariável nas seguintes resoluções:
             *    + `sm`: `1`
             *    + `md`: `2`
             *
             * @default `2`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define a quantidade de colunas para exibição das opções.
             *
             * **Considerações:**
             *  - É possível exibir as opções entre `1` e `4` colunas.
             *  - O número máximo de colunas é invariável nas seguintes resoluções:
             *    + `sm`: `1`
             *    + `md`: `2`
             *
             * \@default `2`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var columns = convertToInt(value, thfRadioGroupColumnsDefaultLength);
                this._columns = this.getGridSystemColumns(columns, 4);
                this.mdColumns = this.getGridSystemColumns(columns, 2);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfRadioGroupBaseComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será desabilitado.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo será desabilitado.
             *
             * \@default `false`
             * @param {?} disabled
             * @return {?}
             */
            function (disabled) {
                this._disabled = convertToBoolean(disabled);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfRadioGroupBaseComponent.prototype, "required", {
            get: /**
             * @return {?}
             */
            function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo será obrigatório.
             *
             * \@default `false`
             * @param {?} required
             * @return {?}
             */
            function (required) {
                this._required = convertToBoolean(required);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfRadioGroupBaseComponent.prototype, "options", {
            get: /**
             * @return {?}
             */
            function () {
                return this._options;
            },
            /**
             * Lista de opções que serão exibidas.
             * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfRadioGroupOption.
             */
            set: /**
             * Lista de opções que serão exibidas.
             * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfRadioGroupOption.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._options = value;
                removeDuplicatedOptions(this.options);
            },
            enumerable: true,
            configurable: true
        });
        // Função que controla quando deve ser emitido onChange e atualiza o Model
        // Função que controla quando deve ser emitido onChange e atualiza o Model
        /**
         * @param {?} changedValue
         * @return {?}
         */
        ThfRadioGroupBaseComponent.prototype.changeValue = 
        // Função que controla quando deve ser emitido onChange e atualiza o Model
        /**
         * @param {?} changedValue
         * @return {?}
         */
        function (changedValue) {
            if (this.onChangePropagate) {
                this.onChangePropagate(changedValue);
            }
            if (this.value !== changedValue) {
                this.change.emit(changedValue);
            }
            this.value = changedValue;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfRadioGroupBaseComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onChangePropagate = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfRadioGroupBaseComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) { };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfRadioGroupBaseComponent.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.validatorChange = fn;
        };
        /**
         * @param {?} abstractControl
         * @return {?}
         */
        ThfRadioGroupBaseComponent.prototype.validate = /**
         * @param {?} abstractControl
         * @return {?}
         */
        function (abstractControl) {
            if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false,
                    }
                };
            }
        };
        /**
         * @param {?} modelValue
         * @return {?}
         */
        ThfRadioGroupBaseComponent.prototype.writeValue = /**
         * @param {?} modelValue
         * @return {?}
         */
        function (modelValue) {
            this.value = modelValue;
            // Busca radio com o valor especificado
            /** @type {?} */
            var element = this.getElementByValue(modelValue);
            if (!element && this.onChangePropagate) {
                this.value = undefined;
                this.onChangePropagate(this.value);
            }
        };
        /**
         * @private
         * @param {?} columns
         * @param {?} maxColumns
         * @return {?}
         */
        ThfRadioGroupBaseComponent.prototype.checkColumnsRange = /**
         * @private
         * @param {?} columns
         * @param {?} maxColumns
         * @return {?}
         */
        function (columns, maxColumns) {
            /** @type {?} */
            var minColumns = 1;
            return columns >= minColumns && columns <= maxColumns;
        };
        /**
         * @private
         * @param {?} columns
         * @param {?} maxColumns
         * @return {?}
         */
        ThfRadioGroupBaseComponent.prototype.getGridSystemColumns = /**
         * @private
         * @param {?} columns
         * @param {?} maxColumns
         * @return {?}
         */
        function (columns, maxColumns) {
            /** @type {?} */
            var gridSystemColumns = thfRadioGroupColumnsTotalLength / columns;
            return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : thfRadioGroupColumnsDefaultLength;
        };
        /**
         * @private
         * @return {?}
         */
        ThfRadioGroupBaseComponent.prototype.validateModel = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.validatorChange) {
                this.validatorChange();
            }
        };
        ThfRadioGroupBaseComponent.propDecorators = {
            name: [{ type: core.Input, args: ['name',] }],
            columns: [{ type: core.Input, args: ['t-columns',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            required: [{ type: core.Input, args: ['t-required',] }],
            options: [{ type: core.Input, args: ['t-options',] }],
            optional: [{ type: core.Input, args: ['t-optional',] }],
            change: [{ type: core.Output, args: ['t-change',] }]
        };
        return ThfRadioGroupBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfRadioGroupBaseComponent
     *
     * \@example
     *
     * <example name="thf-radio-group-basic" title="Totvs Radio Group Basic">
     *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.html"> </file>
     *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.ts"> </file>
     *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.e2e-spec.ts"> </file>
     *  <file name="sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.po.ts"> </file>
     * </example>
     *
     * <example name="thf-radio-group-labs" title="Totvs Radio Group Labs">
     *  <file name="sample-thf-radio-group-labs/sample-thf-radio-group-labs.component.html"> </file>
     *  <file name="sample-thf-radio-group-labs/sample-thf-radio-group-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-radio-group-translator" title="Totvs Radio Group - Translator">
     *  <file name="sample-thf-radio-group-translator/sample-thf-radio-group-translator.component.html"> </file>
     *  <file name="sample-thf-radio-group-translator/sample-thf-radio-group-translator.component.ts"> </file>
     * </example>
     *
     * <example name="thf-radio-group-translator-reactive-form" title="Totvs Radio Group - Translator Reactive Form">
     *  <file name="sample-thf-radio-group-translator-reactive-form/sample-thf-radio-group-translator-reactive-form.component.html"> </file>
     *  <file name="sample-thf-radio-group-translator-reactive-form/sample-thf-radio-group-translator-reactive-form.component.ts"> </file>
     * </example>
     *
     */
    var ThfRadioGroupComponent = /** @class */ (function (_super) {
        __extends(ThfRadioGroupComponent, _super);
        function ThfRadioGroupComponent(differs) {
            var _this = _super.call(this) || this;
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        /**
         * @return {?}
         */
        ThfRadioGroupComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var change = this.differ.diff(this.options);
            if (change) {
                removeDuplicatedOptions(this.options);
            }
        };
        /**
         * @param {?} value
         * @param {?} disabled
         * @return {?}
         */
        ThfRadioGroupComponent.prototype.eventClick = /**
         * @param {?} value
         * @param {?} disabled
         * @return {?}
         */
        function (value, disabled) {
            if (!disabled) {
                this.changeValue(value);
            }
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfRadioGroupComponent.prototype.getElementByValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return this.inputEl.nativeElement.querySelector("input[value='" + value + "']");
        };
        /**
         * @param {?} event
         * @param {?} value
         * @return {?}
         */
        ThfRadioGroupComponent.prototype.onKeyUp = /**
         * @param {?} event
         * @param {?} value
         * @return {?}
         */
        function (event, value) {
            /** @type {?} */
            var key = event.keyCode || event.which;
            if (this.isArrowKey(key)) {
                this.changeValue(value);
            }
        };
        /**
         * @private
         * @param {?} key
         * @return {?}
         */
        ThfRadioGroupComponent.prototype.isArrowKey = /**
         * @private
         * @param {?} key
         * @return {?}
         */
        function (key) {
            return key >= 37 && key <= 40;
        };
        ThfRadioGroupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-radio-group',
                        template: "<thf-field-container\n  [t-help]=\"help\"\n  [t-label]=\"label\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-row thf-pt-1 thf-pb-1\" #inp>\n    <div *ngFor=\"let option of options\"\n      class=\"thf-radio-group-item thf-md-{{ mdColumns }} thf-lg-{{ columns }}\">\n\n      <input #input\n        class=\"thf-radio-group-input\"\n        type=\"radio\"\n        [attr.name]=\"name\"\n        [checked]=\"value === option.value\"\n        [class.thf-radio-group-input-checked]=\"value === option.value\"\n        [disabled]=\"option.disabled === true || disabled\"\n        [readonly]=\"readonly\"\n        [required]=\"required\"\n        [value]=\"option.value\"\n        (keyup)=\"onKeyUp($event, option.value)\">\n        <label\n          class=\"thf-radio-group-label\"\n          [class.thf-clickable]=\"!input.disabled\"\n          [for]=\"name\"\n          (click)=\"eventClick(option.value, option.disabled === true || disabled)\">\n        {{ option.label }}\n      </label>\n    </div>\n  </div>\n  <thf-field-container-bottom></thf-field-container-bottom>\n</thf-field-container>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfRadioGroupComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfRadioGroupComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfRadioGroupComponent.ctorParameters = function () { return [
            { type: core.IterableDiffers }
        ]; };
        ThfRadioGroupComponent.propDecorators = {
            label: [{ type: core.Input, args: ['t-label',] }],
            help: [{ type: core.Input, args: ['t-help',] }],
            inputEl: [{ type: core.ViewChild, args: ['inp', { read: core.ElementRef, static: true },] }]
        };
        return ThfRadioGroupComponent;
    }(ThfRadioGroupBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O componente thf-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
     * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
     * O thf-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
     * O thf-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
     *
     * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
     *
     * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
     * veja mais em **[t-select-option-template](/documentation/thf-select-option-template)**.
     * @abstract
     */
    var ThfSelectBaseComponent = /** @class */ (function () {
        function ThfSelectBaseComponent(element, changeDetector) {
            this.element = element;
            this._disabled = false;
            this._readonly = false;
            this._required = false;
            /**
             * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
             */
            this.change = new core.EventEmitter();
            // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
            this.ngModelChange = new core.EventEmitter();
            this.readyToValidation = false;
            this.element = element;
            this.changeDetector = changeDetector;
        }
        Object.defineProperty(ThfSelectBaseComponent.prototype, "options", {
            get: /**
             * @return {?}
             */
            function () {
                return this._options;
            },
            /**
             * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface ThfSelectOption.
             * Caso esta lista estiver vazia, o model será undefined.
             */
            set: /**
             * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface ThfSelectOption.
             * Caso esta lista estiver vazia, o model será undefined.
             * @param {?} options
             * @return {?}
             */
            function (options) {
                this._options = options;
                removeDuplicatedOptions(this._options);
                removeUndefinedAndNullOptions(this._options);
                this.onUpdateOptions();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfSelectBaseComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será desabilitado.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo será desabilitado.
             *
             * \@default `false`
             * @param {?} disabled
             * @return {?}
             */
            function (disabled) {
                this._disabled = convertToBoolean(disabled);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfSelectBaseComponent.prototype, "readonly", {
            get: /**
             * @return {?}
             */
            function () {
                return this._readonly;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será somente para leitura.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo será somente para leitura.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._readonly = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfSelectBaseComponent.prototype, "required", {
            get: /**
             * @return {?}
             */
            function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo será obrigatório.
             *
             * \@default `false`
             * @param {?} required
             * @return {?}
             */
            function (required) {
                this._required = convertToBoolean(required);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        ThfSelectBaseComponent.prototype.callModelChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
            return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfSelectBaseComponent.prototype.onChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.change.emit(value);
        };
        /**
         * @param {?} abstractControl
         * @return {?}
         */
        ThfSelectBaseComponent.prototype.validate = /**
         * @param {?} abstractControl
         * @return {?}
         */
        function (abstractControl) {
            if (requiredFailed(this._required, this._disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false,
                    }
                };
            }
            return null;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfSelectBaseComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onModelChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfSelectBaseComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onModelTouched = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfSelectBaseComponent.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onValidatorChange = fn;
        };
        /**
         * @private
         * @return {?}
         */
        ThfSelectBaseComponent.prototype.validateModel = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.onValidatorChange) {
                this.onValidatorChange();
            }
        };
        ThfSelectBaseComponent.propDecorators = {
            label: [{ type: core.Input, args: ['t-label',] }],
            name: [{ type: core.Input, args: ['name',] }],
            help: [{ type: core.Input, args: ['t-help',] }],
            placeholder: [{ type: core.Input, args: ['t-placeholder',] }],
            optional: [{ type: core.Input, args: ['t-optional',] }],
            options: [{ type: core.Input, args: ['t-options',] }],
            change: [{ type: core.Output, args: ['t-change',] }],
            ngModelChange: [{ type: core.Output, args: ['ngModelChange',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            readonly: [{ type: core.Input, args: ['t-readonly',] }],
            required: [{ type: core.Input, args: ['t-required',] }]
        };
        return ThfSelectBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@usedBy ThfSelectComponent
     *
     * \@description
     *
     * Esta diretiva permite personalizar o conteúdo dos itens exibidos na lista suspensa do componente.
     *
     * > Quando utilizada em _mobile_ será exibido o componente nativo.
     *
     * Para personalizar o conteúdo de cada item da lista deve-se utilizar a diretiva `t-select-option-template` com `ng-template`
     * dentro da tag `thf-select`.
     *
     * Para obter a referência do item atual, use `let-option`, com isso você terá acesso aos valores e poderá personalizar sua exibição.
     *
     * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <thf-select
     *   name="select"
     *   [(ngModel)]="select"
     *   [t-options]="options">
     *     <ng-template t-select-option-template let-option>
     *       <option-template [option]="option"></option-template>
     *     </ng-template>
     * </thf-select>
     * ...
     * ```
     *
     * ```
     * ...
     * <thf-select
     *   name="select"
     *   [(ngModel)]="select"
     *   [t-options]="options">
     *     <div *t-select-option-template="let option">
     *       <option-template [option]="option"></option-template>
     *     </div>
     * </thf-select>
     * ...
     *
     * ```
     */
    var ThfSelectOptionTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function ThfSelectOptionTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        ThfSelectOptionTemplateDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[t-select-option-template]'
                    },] }
        ];
        /** @nocollapse */
        ThfSelectOptionTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        return ThfSelectOptionTemplateDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfSelectContentOffset = 8;
    /** @type {?} */
    var thfSelectContentPositionDefault = 'bottom';
    /**
     * \@docsExtends ThfSelectBaseComponent
     *
     * \@example
     *
     * <example name="thf-select-basic" title="Totvs Select Basic">
     *   <file name="sample-thf-select-basic/sample-thf-select-basic.component.html"> </file>
     *   <file name="sample-thf-select-basic/sample-thf-select-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-select-labs" title="Totvs Select Labs">
     *   <file name="sample-thf-select-labs/sample-thf-select-labs.component.html"> </file>
     *   <file name="sample-thf-select-labs/sample-thf-select-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-select-customer-registration" title="Totvs Select - Customer registration">
     *   <file name="sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.html"> </file>
     *   <file name="sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.ts"> </file>
     *   <file name="sample-thf-select-customer-registration/sample-thf-select-customer-registration.service.ts"> </file>
     *   <file name='sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.e2e-spec.ts'> </file>
     *   <file name='sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.po.ts'> </file>
     * </example>
     */
    var ThfSelectComponent = /** @class */ (function (_super) {
        __extends(ThfSelectComponent, _super);
        function ThfSelectComponent(element, changeDetector, differs, renderer, controlPosition) {
            var _this = _super.call(this, element, changeDetector) || this;
            _this.renderer = renderer;
            _this.controlPosition = controlPosition;
            _this.isMobile = isMobile();
            _this.open = false;
            _this.selectIcon = 'thf-icon-arrow-down';
            _this.onScroll = (/**
             * @return {?}
             */
            function () {
                _this.controlPosition.adjustPosition(thfSelectContentPositionDefault);
            });
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        Object.defineProperty(ThfSelectComponent.prototype, "isInvisibleSelectNative", {
            get: /**
             * @return {?}
             */
            function () {
                return this.readonly && this.isMobile;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?=} $event
         * @return {?}
         */
        ThfSelectComponent.prototype.onKeydown = /**
         * @param {?=} $event
         * @return {?}
         */
        function ($event) {
            /** @type {?} */
            var charCode = $event.which || $event.keyCode;
            // Tratamentos para quando o readonly for ativado.
            if (this.readonly) {
                // deve matar o evento do teclado devido a alterar o valor do model mesmo com os options fechados
                if (charCode !== ThfKeyCodeEnum.tab) {
                    this.disableDefaultEventAndToggleButton();
                    $event.preventDefault();
                }
                return;
            }
            // Seleciona os itens com as teclas "up" e "down"
            if ((!this.open || $event.altKey) && (charCode === ThfKeyCodeEnum.arrowDown || charCode === ThfKeyCodeEnum.arrowUp)) {
                this.disableDefaultEventAndToggleButton();
            }
            // Abre o thf-select com as teclas "enter" e "espaço"
            if (charCode === ThfKeyCodeEnum.enter || charCode === ThfKeyCodeEnum.space) {
                this.disableDefaultEventAndToggleButton();
            }
            // Fecha o thf-select com a tecla "tab"
            if (this.open && charCode === ThfKeyCodeEnum.tab) {
                $event.preventDefault();
                this.toggleButton();
            }
        };
        /**
         * @return {?}
         */
        ThfSelectComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var change = this.differ.diff(this.options);
            if (change) {
                removeDuplicatedOptions(this.options);
                removeUndefinedAndNullOptions(this.options);
            }
        };
        /**
         * @return {?}
         */
        ThfSelectComponent.prototype.hideDropDown = /**
         * @return {?}
         */
        function () {
            this.selectIcon = 'thf-icon-arrow-down';
            this.selector('.thf-select-container').classList.remove('thf-select-show');
            this.open = false;
            this.changeDetector.markForCheck();
            this.selectElement.nativeElement.focus();
            this.removeListeners();
        };
        /**
         * @param {?} value
         * @param {?} inputValue
         * @return {?}
         */
        ThfSelectComponent.prototype.isEqual = /**
         * @param {?} value
         * @param {?} inputValue
         * @return {?}
         */
        function (value, inputValue) {
            if ((value || value === 0) && inputValue) {
                return value.toString() === inputValue.toString();
            }
            if ((value === null && inputValue !== null) ||
                (value === undefined && inputValue !== undefined)) {
                value = "" + value; // Transformando em string
            }
            return value === inputValue;
        };
        /**
         * @param {?} option
         * @return {?}
         */
        ThfSelectComponent.prototype.onOptionClick = /**
         * @param {?} option
         * @return {?}
         */
        function (option) {
            this.toggleButton();
            this.updateModel(option);
        };
        // Altera o valor ao selecionar um item.
        // Altera o valor ao selecionar um item.
        /**
         * @param {?} value
         * @return {?}
         */
        ThfSelectComponent.prototype.onSelectChange = 
        // Altera o valor ao selecionar um item.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            /** @type {?} */
            var ulDropdpwn = this.element.nativeElement.querySelector('ul.thf-select-content');
            if (value && this.options && this.options.length) {
                /** @type {?} */
                var optionFound = this.options.find((/**
                 * @param {?} option
                 * @return {?}
                 */
                function (option) {
                    return _this.isEqual(option.value, value);
                }));
                if (optionFound) {
                    /** @type {?} */
                    var index = this.options.indexOf(optionFound);
                    ulDropdpwn.scrollTop = this.scrollValue(index, ulDropdpwn.clientHeight);
                    this.updateModel(optionFound);
                }
            }
        };
        /**
         * @return {?}
         */
        ThfSelectComponent.prototype.onUpdateOptions = /**
         * @return {?}
         */
        function () {
            if (this.modelValue) {
                this.onSelectChange(this.modelValue);
            }
        };
        /**
         * @param {?} index
         * @param {?} clientHeight
         * @return {?}
         */
        ThfSelectComponent.prototype.scrollValue = /**
         * @param {?} index
         * @param {?} clientHeight
         * @return {?}
         */
        function (index, clientHeight) {
            /** @type {?} */
            var heightScrollValue = (index + 1) * this.getSelectItemHeight();
            return this.scrollPosition = heightScrollValue > clientHeight ? heightScrollValue : 0;
        };
        /**
         * @param {?} query
         * @return {?}
         */
        ThfSelectComponent.prototype.selector = /**
         * @param {?} query
         * @return {?}
         */
        function (query) {
            return this.element.nativeElement.querySelector(query);
        };
        /**
         * @return {?}
         */
        ThfSelectComponent.prototype.toggleButton = /**
         * @return {?}
         */
        function () {
            this.open ? this.hideDropDown() : this.showDropdown();
        };
        // Atualiza valores
        // Atualiza valores
        /**
         * @param {?} option
         * @return {?}
         */
        ThfSelectComponent.prototype.updateModel = 
        // Atualiza valores
        /**
         * @param {?} option
         * @return {?}
         */
        function (option) {
            if (this.selectedValue !== option.value) {
                this.selectedValue = option.value;
                this.selectElement.nativeElement.value = option.value;
                this.callModelChange(option.value);
                this.displayValue = option.label;
                this.onChange(option.value);
            }
        };
        // Esconde Content do Select quando for clicado fora
        // Esconde Content do Select quando for clicado fora
        /**
         * @param {?} event
         * @return {?}
         */
        ThfSelectComponent.prototype.wasClickedOnToggle = 
        // Esconde Content do Select quando for clicado fora
        /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!this.selectButtonElement.nativeElement.contains(event.target) &&
                !this.iconElement.nativeElement.contains(event.target)) {
                this.hideDropDown();
            }
        };
        // Recebe as alterações do model
        // Recebe as alterações do model
        /**
         * @param {?} value
         * @return {?}
         */
        ThfSelectComponent.prototype.writeValue = 
        // Recebe as alterações do model
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            /** @type {?} */
            var optionFound = this.options.find((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                return _this.isEqual(option.value, value);
            }));
            if (optionFound) {
                this.selectElement.nativeElement.value = optionFound.value;
                this.selectedValue = optionFound.value;
                this.displayValue = (optionFound.label);
            }
            else if (validValue(this.selectedValue)) {
                this.selectElement.nativeElement.value = undefined;
                this.callModelChange(undefined);
                this.selectedValue = undefined;
                this.displayValue = undefined;
            }
            this.modelValue = value;
            this.changeDetector.detectChanges();
        };
        // Método necessário para bloquear o evento default do select nativo.
        // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
        // Método necessário para bloquear o evento default do select nativo.
        // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
        /**
         * @private
         * @return {?}
         */
        ThfSelectComponent.prototype.disableDefaultEventAndToggleButton = 
        // Método necessário para bloquear o evento default do select nativo.
        // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
        /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.selectElement.nativeElement.style.display = 'none';
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.selectElement.nativeElement.style.display = 'block';
                _this.toggleButton();
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfSelectComponent.prototype.getSelectItemHeight = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var selectItem = this.selector('div.thf-select-item');
            return selectItem && selectItem.clientHeight;
        };
        /**
         * @private
         * @return {?}
         */
        ThfSelectComponent.prototype.initializeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.clickoutListener = this.renderer.listen('document', 'click', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.wasClickedOnToggle(event);
            }));
            this.eventResizeListener = this.renderer.listen('window', 'resize', (/**
             * @return {?}
             */
            function () {
                _this.hideDropDown();
            }));
            window.addEventListener('scroll', this.onScroll, true);
        };
        /**
         * @private
         * @return {?}
         */
        ThfSelectComponent.prototype.removeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
            this.eventResizeListener();
            window.removeEventListener('scroll', this.onScroll, true);
        };
        /**
         * @private
         * @return {?}
         */
        ThfSelectComponent.prototype.setPositionDropdown = /**
         * @private
         * @return {?}
         */
        function () {
            this.controlPosition.setElements(this.contentList.nativeElement, thfSelectContentOffset, this.selectButtonElement, ['top', 'bottom'], true);
            this.controlPosition.adjustPosition(thfSelectContentPositionDefault);
        };
        /**
         * @private
         * @return {?}
         */
        ThfSelectComponent.prototype.showDropdown = /**
         * @private
         * @return {?}
         */
        function () {
            if (!this.readonly) {
                this.selectElement.nativeElement.focus();
                if (this.options && this.options.length) {
                    /** @type {?} */
                    var ulDropdpwn = this.element.nativeElement.querySelector('ul.thf-select-content');
                    ulDropdpwn.scrollTop = this.scrollPosition;
                }
                this.selectIcon = 'thf-icon-arrow-up';
                this.selector('.thf-select-container').classList.add('thf-select-show');
                this.open = true;
                this.changeDetector.markForCheck();
                this.setPositionDropdown();
                this.initializeListeners();
            }
        };
        ThfSelectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-select',
                        template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <select #select\n    class=\"thf-select\"\n    [attr.name]=\"name\"\n    [disabled]=\"disabled\"\n    [ngClass]=\"{'thf-select-mobile' : isMobile, 'thf-invisible': isInvisibleSelectNative}\"\n    [required]=\"required\"\n    (change)=\"onSelectChange($event.target.value)\">\n    <option *ngIf=\"isMobile\" disabled hidden selected></option>\n    <option *ngFor=\"let option of options\"\n      [disabled]=\"readonly\"\n      [value]=\"option.value\"\n      (click)=\"onOptionClick(option)\">\n        {{option?.label}}\n    </option>\n  </select>\n\n  <div class=\"thf-select-container\">\n    <div #selectButton\n      class=\"thf-select-button\"\n      [ngClass]=\"{'thf-select-button-disabled' : disabled, 'thf-select-button-readonly' : readonly}\"\n      (click)=\"toggleButton()\">\n\n      <span>{{displayValue || placeholder}}</span>\n\n      <div class=\"thf-field-icon-container-right\">\n        <span #icon\n          class=\"thf-icon {{selectIcon}} thf-field-icon\"\n          [ngClass]=\"{'thf-field-icon-disabled' : disabled, 'thf-field-icon-readonly' : readonly}\"></span>\n      </div>\n    </div>\n\n    <ul #contentList\n      class=\"thf-select-content\"\n      [ngClass]=\"{'thf-invisible': isMobile}\">\n\n      <li *ngFor=\"let option of options\"\n        [class.thf-select-item-selected]=\"selectedValue == option.value\"\n        [value]=\"option.value\"\n        (click)=\"onOptionClick(option)\">\n        <div class=\"thf-select-item\">\n\n          <ng-container *ngIf=\"selectOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\n\n          <ng-template #defaultOptionTemplate>\n            <span>{{option?.label}}</span>\n          </ng-template>\n\n          <ng-template #optionTemplate\n            [ngTemplateOutlet]=\"selectOptionTemplate?.templateRef\"\n            [ngTemplateOutletContext]=\"{$implicit: option}\">\n          </ng-template>\n\n        </div>\n      </li>\n    </ul>\n  </div>\n\n  <thf-field-container-bottom></thf-field-container-bottom>\n\n</thf-field-container>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfSelectComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfSelectComponent; })),
                                multi: true,
                            },
                            ThfControlPositionService
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfSelectComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.ChangeDetectorRef },
            { type: core.IterableDiffers },
            { type: core.Renderer2 },
            { type: ThfControlPositionService }
        ]; };
        ThfSelectComponent.propDecorators = {
            selectOptionTemplate: [{ type: core.ContentChild, args: [ThfSelectOptionTemplateDirective, { static: true },] }],
            contentList: [{ type: core.ViewChild, args: ['contentList', { read: core.ElementRef, static: true },] }],
            iconElement: [{ type: core.ViewChild, args: ['icon', { read: core.ElementRef, static: true },] }],
            selectElement: [{ type: core.ViewChild, args: ['select', { read: core.ElementRef, static: true },] }],
            selectButtonElement: [{ type: core.ViewChild, args: ['selectButton', { read: core.ElementRef, static: true },] }],
            onKeydown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
        };
        return ThfSelectComponent;
    }(ThfSelectBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var ThfSwitchLabelPosition = {
        /** Posiciona o label do lado esquerdo do switch. */
        Right: 0,
        /** Posiciona o label do lado direito do switch. */
        Left: 1,
    };
    ThfSwitchLabelPosition[ThfSwitchLabelPosition.Right] = 'Right';
    ThfSwitchLabelPosition[ThfSwitchLabelPosition.Left] = 'Left';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O componente `thf-switch` é um [checkbox](/documentation/thf-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
     * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
     *
     * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.
     *
     * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
     * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
     *
     * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
     */
    var ThfSwitchBaseComponent = /** @class */ (function () {
        function ThfSwitchBaseComponent() {
            this._disabled = false;
            this.switchValue = false;
            /**
             * Texto exibido quando o valor do componente for `true`.
             *
             * \@default `true`
             */
            this.labelOn = 'true';
            /**
             * Texto exibido quando o valor do componente for `false`.
             *
             * \@default `false`
             */
            this.labelOff = 'false';
            /**
             * \@optional
             *
             * \@description
             *
             * Posição de exibição do rótulo.
             *
             * > Por padrão exibe à direita.
             */
            this.labelPosition = ThfSwitchLabelPosition.Right;
            /**
             * Evento disparado ao alterar valor do campo.
             */
            this.change = new core.EventEmitter();
            // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
            this.ngModelChange = new core.EventEmitter();
        }
        Object.defineProperty(ThfSwitchBaseComponent.prototype, "setLabelOn", {
            set: /**
             * @param {?} label
             * @return {?}
             */
            function (label) {
                this.labelOn = label || 'true';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfSwitchBaseComponent.prototype, "setLabelOff", {
            set: /**
             * @param {?} label
             * @return {?}
             */
            function (label) {
                this.labelOff = label || 'false';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfSwitchBaseComponent.prototype, "setLabelPosition", {
            set: /**
             * @param {?} position
             * @return {?}
             */
            function (position) {
                this.labelPosition = (position in ThfSwitchLabelPosition) ? parseInt((/** @type {?} */ (position)), 10) : ThfSwitchLabelPosition.Right;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfSwitchBaseComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica se o campo será desabilitado.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica se o campo será desabilitado.
             *
             * \@default `false`
             * @param {?} disabled
             * @return {?}
             */
            function (disabled) {
                this._disabled = convertToBoolean(disabled);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        ThfSwitchBaseComponent.prototype.changeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.switchValue !== value) {
                this.switchValue = value;
                if (this.propagateChange) {
                    this.propagateChange(value);
                }
                else {
                    this.ngModelChange.emit(value);
                }
                this.change.emit(this.switchValue);
            }
        };
        /**
         * @return {?}
         */
        ThfSwitchBaseComponent.prototype.eventClick = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.changeValue(!this.switchValue);
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfSwitchBaseComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.propagateChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfSwitchBaseComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) { };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfSwitchBaseComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this.switchValue) {
                this.switchValue = !!value;
            }
        };
        ThfSwitchBaseComponent.propDecorators = {
            name: [{ type: core.Input, args: ['name',] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            help: [{ type: core.Input, args: ['t-help',] }],
            setLabelOn: [{ type: core.Input, args: ['t-label-on',] }],
            setLabelOff: [{ type: core.Input, args: ['t-label-off',] }],
            setLabelPosition: [{ type: core.Input, args: ['t-label-position',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            change: [{ type: core.Output, args: ['t-change',] }],
            ngModelChange: [{ type: core.Output, args: ['ngModelChange',] }]
        };
        return ThfSwitchBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfSwitchBaseComponent
     *
     * \@example
     *
     * <example name="thf-switch-basic" title="Totvs Switch Basic">
     *   <file name="sample-thf-switch-basic/sample-thf-switch-basic.component.html"> </file>
     *   <file name="sample-thf-switch-basic/sample-thf-switch-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-switch-labs" title="Totvs Switch Labs">
     *   <file name="sample-thf-switch-labs/sample-thf-switch-labs.component.html"> </file>
     *   <file name="sample-thf-switch-labs/sample-thf-switch-labs.component.ts"> </file>
     *   <file name="sample-thf-switch-labs/sample-thf-switch-labs.component.e2e-spec.ts"> </file>
     *   <file name="sample-thf-switch-labs/sample-thf-switch-labs.component.po.ts"> </file>
     * </example>
     *
     * <example name="thf-switch-order" title="Totvs Switch - Order Summary">
     *   <file name="sample-thf-switch-order/sample-thf-switch-order.component.html"> </file>
     *   <file name="sample-thf-switch-order/sample-thf-switch-order.component.ts"> </file>
     * </example>
     *
     * <example name="thf-switch-order-reactive-form" title="Totvs Switch - Order Summary Reactive Form">
     *   <file name="sample-thf-switch-order-reactive-form/sample-thf-switch-order-reactive-form.component.html"> </file>
     *   <file name="sample-thf-switch-order-reactive-form/sample-thf-switch-order-reactive-form.component.ts"> </file>
     * </example>
     */
    var ThfSwitchComponent = /** @class */ (function (_super) {
        __extends(ThfSwitchComponent, _super);
        function ThfSwitchComponent(changeDetector) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            return _this;
        }
        /**
         * @return {?}
         */
        ThfSwitchComponent.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
        function () {
            this.changeDetector.detectChanges();
        };
        /**
         * @return {?}
         */
        ThfSwitchComponent.prototype.getLabelPosition = /**
         * @return {?}
         */
        function () {
            switch (this.labelPosition) {
                case ThfSwitchLabelPosition.Left: return 'left';
                case ThfSwitchLabelPosition.Right: return 'right';
                default: return 'right';
            }
        };
        /**
         * @return {?}
         */
        ThfSwitchComponent.prototype.getSwitchPosition = /**
         * @return {?}
         */
        function () {
            switch (this.labelPosition) {
                case ThfSwitchLabelPosition.Left: return 'right';
                case ThfSwitchLabelPosition.Right: return 'left';
                default: return 'left';
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfSwitchComponent.prototype.onKeyDown = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.which === 32 || event.keyCode === 32) {
                event.preventDefault();
                this.eventClick();
            }
        };
        ThfSwitchComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-switch',
                        template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\">\n\n  <div class=\"thf-field-container-content thf-switch-content\" [attr.name]=\"name\">\n    <div class=\"thf-switch-container thf-clickable\"\n      [class.thf-switch-container-disabled]=\"disabled\"\n      [class.thf-switch-container-off]=\"switchValue === false && !disabled\"\n      [class.thf-switch-container-on]=\"switchValue === true && !disabled\"\n      [class.thf-switch-container-right]=\"getSwitchPosition() === 'right'\"\n      [tabindex]=\"disabled ? -1 : 0\"\n      (click)=\"eventClick()\"\n      (keydown)=\"onKeyDown($event)\">\n\n      <div class=\"thf-switch-button\"\n        [class.thf-switch-button-on]=\"switchValue === true\"\n        [class.thf-switch-button-off]=\"switchValue === false\"\n        [class.thf-switch-button-disabled]=\"disabled\">\n\n        <span class=\"thf-icon thf-icon-{{ switchValue === true ? 'ok' : 'close' }}\"></span>\n      </div>\n    </div>\n\n    <span class=\"thf-switch-label thf-clickable thf-switch-label-{{ getLabelPosition() }}\"\n      (click)=\"eventClick()\">\n        {{ switchValue === true ? labelOn : labelOff }}\n    </span>\n  </div>\n\n  <thf-field-container-bottom></thf-field-container-bottom>\n</thf-field-container>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfSwitchComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfSwitchComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        return ThfSwitchComponent;
    }(ThfSwitchBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Este é um componente de entrada de dados que possibilita o preechimento com múltiplas linhas.
     * É recomendado para observações, detalhamentos e outras situações onde o usuário deva preencher com um texto.
     *
     * Importante:
     *
     * - A propriedade `name` é obrigatória para que o formulário e o `model` funcionem corretamente. Do contrário, ocorrerá um erro de
     * _Angular_, onde será necessário informar o atributo `name` ou o atributo `[ngModelOptions]="{standalone: true}"`, por exemplo:
     *
     * ```
     * <thf-textarea
     *   [(ngModel)]="pessoa.nome"
     *   [ngModelOptions]="{standalone: true}">
     * </thf-textarea>
     * ```
     * @abstract
     */
    var ThfTextareaBaseComponent = /** @class */ (function () {
        function ThfTextareaBaseComponent() {
            this._disabled = false;
            this._focus = false;
            this._readonly = false;
            this._required = false;
            this._rows = 3;
            this.onChangePropagate = null;
            // tslint:disable-next-line
            this.onTouched = null;
            /**
             * Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido.
             */
            this.placeholder = '';
            /**
             * Evento disparado ao sair do campo.
             */
            this.blur = new core.EventEmitter();
            /**
             * Evento disparado ao entrar do campo.
             */
            this.enter = new core.EventEmitter();
            /**
             * Evento disparado ao alterar valor e deixar o campo.
             */
            this.change = new core.EventEmitter();
            /**
             * Evento disparado ao alterar valor do model.
             */
            this.changeModel = new core.EventEmitter();
        }
        Object.defineProperty(ThfTextareaBaseComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será desabilitado.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo será desabilitado.
             *
             * \@default `false`
             * @param {?} disabled
             * @return {?}
             */
            function (disabled) {
                this._disabled = convertToBoolean(disabled);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTextareaBaseComponent.prototype, "readonly", {
            get: /**
             * @return {?}
             */
            function () {
                return this._readonly;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será somente leitura.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo será somente leitura.
             *
             * \@default `false`
             * @param {?} readonly
             * @return {?}
             */
            function (readonly) {
                this._readonly = convertToBoolean(readonly);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTextareaBaseComponent.prototype, "required", {
            get: /**
             * @return {?}
             */
            function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * > Esta propriedade é desconsiderada quando o _input_ está desabilitado `(t-disabled)`.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo será obrigatório.
             *
             * > Esta propriedade é desconsiderada quando o _input_ está desabilitado `(t-disabled)`.
             *
             * \@default `false`
             * @param {?} required
             * @return {?}
             */
            function (required) {
                this._required = convertToBoolean(required);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTextareaBaseComponent.prototype, "focus", {
            get: /**
             * @return {?}
             */
            function () {
                return this._focus;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo iniciará com foco.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo iniciará com foco.
             *
             * \@default `false`
             * @param {?} focus
             * @return {?}
             */
            function (focus) {
                this._focus = convertToBoolean(focus);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTextareaBaseComponent.prototype, "minlength", {
            get: /**
             * @return {?}
             */
            function () {
                return this._minlength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica a quantidade mínima de caracteres que o campo aceita.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica a quantidade mínima de caracteres que o campo aceita.
             * @param {?} minlength
             * @return {?}
             */
            function (minlength) {
                this._minlength = convertToInt(minlength);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTextareaBaseComponent.prototype, "maxlength", {
            get: /**
             * @return {?}
             */
            function () {
                return this._maxlength;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica a quantidade máxima de caracteres que o campo aceita.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica a quantidade máxima de caracteres que o campo aceita.
             * @param {?} maxlength
             * @return {?}
             */
            function (maxlength) {
                this._maxlength = convertToInt(maxlength);
                this.validateModel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTextareaBaseComponent.prototype, "rows", {
            get: /**
             * @return {?}
             */
            function () {
                return this._rows;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica a quantidade de linhas que serão exibidas.
             *
             * @default `3`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica a quantidade de linhas que serão exibidas.
             *
             * \@default `3`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._rows = isNaN(parseInt((/** @type {?} */ (value)), 10)) || value < 3 ? 3 : parseInt((/** @type {?} */ (value)), 10);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        ThfTextareaBaseComponent.prototype.callOnChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // Quando o input não possui um formulário, então esta função não é registrada
            if (this.onChangePropagate) {
                this.onChangePropagate(value);
            }
            this.controlChangeModelEmitter(value);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfTextareaBaseComponent.prototype.controlChangeModelEmitter = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.modelLastUpdate !== value) {
                this.changeModel.emit(value);
                this.modelLastUpdate = value;
            }
        };
        // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
        // usadas para interceptar as mudanças e não atualizar automaticamente o Model
        // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
        // usadas para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        ThfTextareaBaseComponent.prototype.registerOnChange = 
        // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
        // usadas para interceptar as mudanças e não atualizar automaticamente o Model
        /**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            this.onChangePropagate = func;
        };
        /**
         * @param {?} func
         * @return {?}
         */
        ThfTextareaBaseComponent.prototype.registerOnTouched = /**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            this.onTouched = func;
        };
        /**
         * @param {?} func
         * @return {?}
         */
        ThfTextareaBaseComponent.prototype.registerOnValidatorChange = /**
         * @param {?} func
         * @return {?}
         */
        function (func) {
            this.validatorChange = func;
        };
        /**
         * @param {?} abstractControl
         * @return {?}
         */
        ThfTextareaBaseComponent.prototype.validate = /**
         * @param {?} abstractControl
         * @return {?}
         */
        function (abstractControl) {
            if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
                return { required: {
                        valid: false,
                    } };
            }
            if (minlengthFailed(this.minlength, abstractControl.value)) {
                return { minlength: {
                        valid: false,
                    } };
            }
            if (maxlengthFailed(this.maxlength, abstractControl.value)) {
                return { maxlength: {
                        valid: false,
                    } };
            }
        };
        // Função implementada do ControlValueAccessor
        // Função implementada do ControlValueAccessor
        /**
         * @param {?} value
         * @return {?}
         */
        ThfTextareaBaseComponent.prototype.writeValue = 
        // Função implementada do ControlValueAccessor
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.writeValueModel(value);
        };
        /**
         * @protected
         * @return {?}
         */
        ThfTextareaBaseComponent.prototype.validateModel = /**
         * @protected
         * @return {?}
         */
        function () {
            if (this.validatorChange) {
                this.validatorChange();
            }
        };
        ThfTextareaBaseComponent.propDecorators = {
            label: [{ type: core.Input, args: ['t-label',] }],
            help: [{ type: core.Input, args: ['t-help',] }],
            placeholder: [{ type: core.Input, args: ['t-placeholder',] }],
            name: [{ type: core.Input, args: ['name',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            optional: [{ type: core.Input, args: ['t-optional',] }],
            readonly: [{ type: core.Input, args: ['t-readonly',] }],
            required: [{ type: core.Input, args: ['t-required',] }],
            focus: [{ type: core.Input, args: ['t-focus',] }],
            minlength: [{ type: core.Input, args: ['t-minlength',] }],
            maxlength: [{ type: core.Input, args: ['t-maxlength',] }],
            rows: [{ type: core.Input, args: ['t-rows',] }],
            blur: [{ type: core.Output, args: ['t-blur',] }],
            enter: [{ type: core.Output, args: ['t-enter',] }],
            change: [{ type: core.Output, args: ['t-change',] }],
            changeModel: [{ type: core.Output, args: ['t-change-model',] }]
        };
        return ThfTextareaBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfTextareaBaseComponent
     *
     * \@example
     *
     * <example name="thf-textarea-basic" title="Totvs Textarea Basic" >
     *  <file name="sample-thf-textarea-basic/sample-thf-textarea-basic.component.html"> </file>
     *  <file name="sample-thf-textarea-basic/sample-thf-textarea-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-textarea-labs" title="Totvs Textarea Labs" >
     *  <file name="sample-thf-textarea-labs/sample-thf-textarea-labs.component.html"> </file>
     *  <file name="sample-thf-textarea-labs/sample-thf-textarea-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-textarea-email" title="Totvs Textarea - Email" >
     *  <file name="sample-thf-textarea-email/sample-thf-textarea-email.component.html"> </file>
     *  <file name="sample-thf-textarea-email/sample-thf-textarea-email.component.ts"> </file>
     * </example>
     *
     * <example name="thf-textarea-email-reactive-form" title="Totvs Textarea - Email Reactive Form" >
     *  <file name="sample-thf-textarea-email-reactive-form/sample-thf-textarea-email-reactive-form.component.html"> </file>
     *  <file name="sample-thf-textarea-email-reactive-form/sample-thf-textarea-email-reactive-form.component.ts"> </file>
     * </example>
     *
     */
    var ThfTextareaComponent = /** @class */ (function (_super) {
        __extends(ThfTextareaComponent, _super);
        function ThfTextareaComponent() {
            var _this = _super.call(this) || this;
            _this.fireChange = false;
            return _this;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        ThfTextareaComponent.prototype.writeValueModel = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.inputEl) {
                if (!value) {
                    // Se for o valor for undefined, deve limpar o campo
                    this.inputEl.nativeElement.value = '';
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            // Emite evento quando o model é atualizado, inclusive a primeira vez
            if (value) {
                this.change.emit(value);
            }
        };
        /**
         * @param {?} maxlength
         * @param {?} value
         * @return {?}
         */
        ThfTextareaComponent.prototype.validMaxLength = /**
         * @param {?} maxlength
         * @param {?} value
         * @return {?}
         */
        function (maxlength, value) {
            return (maxlength && value.length > maxlength) ? value.toString().substring(0, maxlength) : value;
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfTextareaComponent.prototype.eventOnInput = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var value = this.validMaxLength(this.maxlength, event.target.value);
            this.callOnChange(value);
            this.inputEl.nativeElement.value = value;
        };
        /**
         * @return {?}
         */
        ThfTextareaComponent.prototype.eventOnFocus = /**
         * @return {?}
         */
        function () {
            // Atualiza valor da variável que será usada para verificar se o campo teve alteração
            this.valueBeforeChange = this.inputEl.nativeElement.value;
            // Dispara evento quando o usuário entrar no campo
            // Este evento também é disparado quando o campo inicia com foco.
            this.enter.emit();
        };
        /**
         * @return {?}
         */
        ThfTextareaComponent.prototype.eventOnBlur = /**
         * @return {?}
         */
        function () {
            this.blur.emit();
            this.controlChangeEmitter();
        };
        /**
         * @return {?}
         */
        ThfTextareaComponent.prototype.controlChangeEmitter = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var elementValue = this.inputEl.nativeElement.value;
            if (elementValue !== this.valueBeforeChange) {
                this.change.emit(elementValue);
            }
        };
        ThfTextareaComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-textarea',
                        template: "<thf-field-container\n  [t-help]=\"help\"\n  [t-label]=\"label\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n    <textarea #inp\n      class=\"thf-textarea\"\n      (blur)=\"eventOnBlur()\"\n      (focus)=\"eventOnFocus()\"\n      (input)=\"eventOnInput($event)\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [rows]=\"rows\">\n    </textarea>\n  </div>\n\n  <thf-field-container-bottom></thf-field-container-bottom>\n</thf-field-container>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfTextareaComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfTextareaComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfTextareaComponent.ctorParameters = function () { return []; };
        ThfTextareaComponent.propDecorators = {
            inputEl: [{ type: core.ViewChild, args: ['inp', { read: core.ElementRef, static: true },] }]
        };
        return ThfTextareaComponent;
    }(ThfTextareaBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var ThfUploadStatus = {
        // Enviou com sucesso.
        Uploaded: 0,
        // Está enviando.
        Uploading: 1,
        // Ocorreu algum erro no envio.
        Error: 2,
        // Não enviou ou aconteceu algum erro.
        None: 3,
    };
    ThfUploadStatus[ThfUploadStatus.Uploaded] = 'Uploaded';
    ThfUploadStatus[ThfUploadStatus.Uploading] = 'Uploading';
    ThfUploadStatus[ThfUploadStatus.Error] = 'Error';
    ThfUploadStatus[ThfUploadStatus.None] = 'None';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // Classe responsável pelo arquivo do THF Upload
    var 
    // Classe responsável pelo arquivo do THF Upload
    ThfUploadFile = /** @class */ (function () {
        function ThfUploadFile(file) {
            if (file) {
                this.name = file.name;
                this.extension = this.getExtension(file.name);
                this.size = file.size;
                this.rawFile = file;
                this.uid = this.generateUUID();
                this.status = ThfUploadStatus.None;
            }
        }
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfUploadFile.prototype.getExtension = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                /** @type {?} */
                var extension = value.substr(value.lastIndexOf('.'));
                return extension.toLowerCase();
            }
            return '';
        };
        /**
         * @private
         * @return {?}
         */
        ThfUploadFile.prototype.generateUUID = /**
         * @private
         * @return {?}
         */
        function () {
            /**
             * @return {?}
             */
            function s4() {
                return Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1);
            }
            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                s4() + '-' + s4() + s4() + s4();
        };
        return ThfUploadFile;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfUploadLiteralsDefault = {
        en: (/** @type {?} */ ({
            selectFile: 'Select file',
            deleteFile: 'Delete',
            cancel: 'Cancel',
            tryAgain: 'Try again',
            startSending: 'Start sending'
        })),
        es: (/** @type {?} */ ({
            selectFile: 'Seleccionar archivo',
            deleteFile: 'Borrar',
            cancel: 'Cancelar',
            tryAgain: 'Intentar de nuevo',
            startSending: 'Iniciar carga'
        })),
        pt: (/** @type {?} */ ({
            selectFile: 'Selecionar arquivo',
            deleteFile: 'Excluir',
            cancel: 'Cancelar',
            tryAgain: 'Tentar Novamente',
            startSending: 'Iniciar envio'
        }))
    };
    /** @type {?} */
    var thfUploadFormFieldDefault = 'files';
    /**
     * \@description
     *
     * O componente `thf-upload` permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
     * Este componente também possibilita algumas configurações como:
     *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
     *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
     * clique em enviar.
     *  - Restrições de formatos de arquivo e tamanho.
     *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
     *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
     */
    var ThfUploadBaseComponent = /** @class */ (function () {
        function ThfUploadBaseComponent(uploadService) {
            this.uploadService = uploadService;
            /**
             * Define o valor do atributo `name` do componente.
             */
            this.name = 'file';
            /**
             * \@optional
             *
             * \@description
             *
             * Define se o envio do arquivo será automático ao selecionar o mesmo.
             *
             * \@default `false`
             */
            this.autoUpload = false;
            /**
             * Função que será executada no momento de realizar o envio do arquivo,
             * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
             * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
             * que será enviado em conjunto com o arquivo na requisição, por exemplo:
             *
             * ```
             *   event.data = {id: 'id do usuario'};
             * ```
             */
            this.onUpload = new core.EventEmitter();
            /**
             * Evento será disparado quando ocorrer algum erro no envio do arquivo.
             * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
             */
            this.onError = new core.EventEmitter();
            /**
             * Evento será disparado quando o envio do arquivo for realizado com sucesso.
             * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
             */
            this.onSuccess = new core.EventEmitter();
            // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da *tag* `form`.
            this.ngModelChange = new core.EventEmitter();
        }
        Object.defineProperty(ThfUploadBaseComponent.prototype, "hideSelectButton", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hideSelectButton;
            },
            /**
             * @optional
             *
             * @description
             *
             * Omite o botão de seleção de arquivos.
             *
             * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
             * pela chamada do método `selectFiles()` para seleção de arquivos.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Omite o botão de seleção de arquivos.
             *
             * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
             * pela chamada do método `selectFiles()` para seleção de arquivos.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._hideSelectButton = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfUploadBaseComponent.prototype, "hideSendButton", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hideSendButton;
            },
            /**
             * @optional
             *
             * @description
             *
             * Omite o botão de envio de arquivos.
             *
             * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
             * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Omite o botão de envio de arquivos.
             *
             * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
             * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._hideSendButton = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfUploadBaseComponent.prototype, "literals", {
            get: /**
             * @return {?}
             */
            function () {
                return this._literals || thfUploadLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `thf-upload`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfUploadLiterals = {
             *    selectFile: 'Buscar arquivo',
             *    deleteFile: 'Deletar',
             *    cancel: 'Desistir',
             *    tryAgain: 'Recomeçar',
             *    startSending: 'Enviar'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfUploadLiterals = {
             *    deleteFile: 'Deletar'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
             *
             * ```
             * <thf-upload
             *   [t-literals]="customLiterals">
             * </thf-upload>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Objeto com as literais usadas no `thf-upload`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfUploadLiterals = {
             *    selectFile: 'Buscar arquivo',
             *    deleteFile: 'Deletar',
             *    cancel: 'Desistir',
             *    tryAgain: 'Recomeçar',
             *    startSending: 'Enviar'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfUploadLiterals = {
             *    deleteFile: 'Deletar'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
             *
             * ```
             * <thf-upload
             *   [t-literals]="customLiterals">
             * </thf-upload>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign({}, thfUploadLiteralsDefault[thfLocaleDefault], thfUploadLiteralsDefault[browserLanguage()], value);
                }
                else {
                    this._literals = thfUploadLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfUploadBaseComponent.prototype, "fileRestrictions", {
            get: /**
             * @return {?}
             */
            function () {
                return this._fileRestrictions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto que segue a definição da interface `ThfFileRestrictions`,
             * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Objeto que segue a definição da interface `ThfFileRestrictions`,
             * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
             * @param {?} restrictions
             * @return {?}
             */
            function (restrictions) {
                this._fileRestrictions = restrictions;
                this.setAllowedExtensions(restrictions);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfUploadBaseComponent.prototype, "formField", {
            get: /**
             * @return {?}
             */
            function () {
                return this._formField;
            },
            /**
             * @optional
             *
             * @description
             *
             * Nome do campo de formulário que será enviado para o serviço informado na propriedade `t-url`.
             *
             * @default `files`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Nome do campo de formulário que será enviado para o serviço informado na propriedade `t-url`.
             *
             * \@default `files`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._formField = value && typeof value === 'string' ? value : thfUploadFormFieldDefault;
                this.getUploadService().formField = this.formField;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfUploadBaseComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será desabilitado.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo será desabilitado.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._disabled = convertToBoolean(value);
                this.validateModel(this.currentFiles);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfUploadBaseComponent.prototype, "required", {
            get: /**
             * @return {?}
             */
            function () {
                return this._required;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o campo será obrigatório.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o campo será obrigatório.
             *
             * \@default `false`
             * @param {?} required
             * @return {?}
             */
            function (required) {
                this._required = convertToBoolean(required);
                this.validateModel(this.currentFiles);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfUploadBaseComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onModelChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfUploadBaseComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onModelTouched = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ThfUploadBaseComponent.prototype.registerOnValidatorChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.validatorChange = fn;
        };
        /**
         * @param {?} abstractControl
         * @return {?}
         */
        ThfUploadBaseComponent.prototype.validate = /**
         * @param {?} abstractControl
         * @return {?}
         */
        function (abstractControl) {
            if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
                return {
                    required: {
                        valid: false,
                    }
                };
            }
        };
        /**
         * @param {?} model
         * @return {?}
         */
        ThfUploadBaseComponent.prototype.writeValue = /**
         * @param {?} model
         * @return {?}
         */
        function (model) {
            if (model) {
                if (!isEquals(this.currentFiles, model)) {
                    this.currentFiles = this.parseFiles(model);
                }
            }
            else {
                this.currentFiles = undefined;
            }
        };
        /**
         * @protected
         * @param {?} currentFilesLength
         * @return {?}
         */
        ThfUploadBaseComponent.prototype.isExceededFileLimit = /**
         * @protected
         * @param {?} currentFilesLength
         * @return {?}
         */
        function (currentFilesLength) {
            return this.isMultiple &&
                this.fileRestrictions &&
                this.fileRestrictions.maxFiles > 0 &&
                this.fileRestrictions.maxFiles <= currentFilesLength;
        };
        // Faz o parse dos arquivos selecionados para arquivos do formato ThfUploadFile e atualiza os arquivos correntes.
        // Faz o parse dos arquivos selecionados para arquivos do formato ThfUploadFile e atualiza os arquivos correntes.
        /**
         * @protected
         * @param {?} files
         * @return {?}
         */
        ThfUploadBaseComponent.prototype.parseFiles = 
        // Faz o parse dos arquivos selecionados para arquivos do formato ThfUploadFile e atualiza os arquivos correntes.
        /**
         * @protected
         * @param {?} files
         * @return {?}
         */
        function (files) {
            /** @type {?} */
            var thfUploadFiles = this.currentFiles || [];
            /** @type {?} */
            var filesLength = files.length;
            for (var i = 0; i < filesLength; i++) {
                if (this.isExceededFileLimit(thfUploadFiles.length)) {
                    break;
                }
                /** @type {?} */
                var file = new ThfUploadFile(files[i]);
                if (this.checkRestrictions(file)) {
                    thfUploadFiles = this.insertFileInFiles(file, thfUploadFiles);
                }
            }
            return thfUploadFiles;
        };
        /**
         * @protected
         * @param {?} model
         * @return {?}
         */
        ThfUploadBaseComponent.prototype.validateModel = /**
         * @protected
         * @param {?} model
         * @return {?}
         */
        function (model) {
            if (this.validatorChange) {
                this.validatorChange(model);
            }
        };
        // Verifica se o arquivo está de acordo com as restrições.
        // Verifica se o arquivo está de acordo com as restrições.
        /**
         * @private
         * @param {?} file
         * @return {?}
         */
        ThfUploadBaseComponent.prototype.checkRestrictions = 
        // Verifica se o arquivo está de acordo com as restrições.
        /**
         * @private
         * @param {?} file
         * @return {?}
         */
        function (file) {
            /** @type {?} */
            var restrictions = this.fileRestrictions;
            if (restrictions) {
                /** @type {?} */
                var allowedExtensions = restrictions.allowedExtensions;
                /** @type {?} */
                var minFileSize = restrictions.minFileSize || 0;
                /** @type {?} */
                var maxFileSize = restrictions.maxFileSize || 31457280;
                // 30MB
                /** @type {?} */
                var isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
                /** @type {?} */
                var isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
                return isAccept && isAcceptSize;
            }
            return true;
        };
        /**
         * @private
         * @param {?} file
         * @param {?} files
         * @return {?}
         */
        ThfUploadBaseComponent.prototype.existsFileSameName = /**
         * @private
         * @param {?} file
         * @param {?} files
         * @return {?}
         */
        function (file, files) {
            return files.some((/**
             * @param {?} currentFile
             * @return {?}
             */
            function (currentFile) { return file.name === currentFile.name; }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfUploadBaseComponent.prototype.getUploadService = /**
         * @private
         * @return {?}
         */
        function () {
            return this.uploadService;
        };
        /**
         * @private
         * @param {?} newFile
         * @param {?} files
         * @return {?}
         */
        ThfUploadBaseComponent.prototype.insertFileInFiles = /**
         * @private
         * @param {?} newFile
         * @param {?} files
         * @return {?}
         */
        function (newFile, files) {
            if (this.existsFileSameName(newFile, files)) {
                return this.updateExistsFileInFiles(newFile, files);
            }
            if (this.isMultiple) {
                files.push(newFile);
            }
            else {
                files.splice(0, files.length, newFile);
            }
            return files;
        };
        /**
         * @private
         * @param {?} extension
         * @param {?=} allowedExtensions
         * @return {?}
         */
        ThfUploadBaseComponent.prototype.isAllowedExtension = /**
         * @private
         * @param {?} extension
         * @param {?=} allowedExtensions
         * @return {?}
         */
        function (extension, allowedExtensions) {
            if (allowedExtensions === void 0) { allowedExtensions = []; }
            return allowedExtensions.some((/**
             * @param {?} ext
             * @return {?}
             */
            function (ext) { return ext.toLowerCase() === extension; }));
        };
        /**
         * @private
         * @param {?=} restrictions
         * @return {?}
         */
        ThfUploadBaseComponent.prototype.setAllowedExtensions = /**
         * @private
         * @param {?=} restrictions
         * @return {?}
         */
        function (restrictions) {
            if (restrictions === void 0) { restrictions = {}; }
            /** @type {?} */
            var _allowedExtensions = restrictions.allowedExtensions || [];
            this.allowedExtensions = _allowedExtensions.join(',');
        };
        /**
         * @private
         * @param {?} newFile
         * @param {?} files
         * @return {?}
         */
        ThfUploadBaseComponent.prototype.updateExistsFileInFiles = /**
         * @private
         * @param {?} newFile
         * @param {?} files
         * @return {?}
         */
        function (newFile, files) {
            /** @type {?} */
            var fileIndex = files.findIndex((/**
             * @param {?} currentFile
             * @return {?}
             */
            function (currentFile) { return newFile.name === currentFile.name && currentFile.status !== ThfUploadStatus.Uploaded; }));
            if (fileIndex !== -1) {
                files.splice(fileIndex, 1, newFile);
            }
            return files;
        };
        ThfUploadBaseComponent.propDecorators = {
            hideSelectButton: [{ type: core.Input, args: ['t-hide-select-button',] }],
            hideSendButton: [{ type: core.Input, args: ['t-hide-send-button',] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }],
            help: [{ type: core.Input, args: ['t-help',] }],
            url: [{ type: core.Input, args: ['t-url',] }],
            fileRestrictions: [{ type: core.Input, args: ['t-restrictions',] }],
            name: [{ type: core.Input, args: ['name',] }],
            formField: [{ type: core.Input, args: ['t-form-field',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            autoUpload: [{ type: core.Input, args: ['t-auto-upload',] }],
            isMultiple: [{ type: core.Input, args: ['t-multiple',] }],
            optional: [{ type: core.Input, args: ['t-optional',] }],
            required: [{ type: core.Input, args: ['t-required',] }],
            onUpload: [{ type: core.Output, args: ['t-upload',] }],
            onError: [{ type: core.Output, args: ['t-error',] }],
            onSuccess: [{ type: core.Output, args: ['t-success',] }],
            ngModelChange: [{ type: core.Output, args: ['ngModelChange',] }]
        };
        return ThfUploadBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfUploadBaseService = /** @class */ (function () {
        function ThfUploadBaseService(http) {
            this.http = http;
            this.formField = 'files';
            this.requests = [];
        }
        /**
         * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
         *
         * @param url URL da requisição a ser efetuada.
         * @param files Arquivos a serem enviados.
         * @param tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
         * @param uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
         * @param successCallback Função a ser executada quando a requisição for efetuada com sucesso.
         * @param errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
         */
        /**
         * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
         *
         * @param {?} url URL da requisição a ser efetuada.
         * @param {?} files Arquivos a serem enviados.
         * @param {?} tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
         * @param {?} uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
         * @param {?} successCallback Função a ser executada quando a requisição for efetuada com sucesso.
         * @param {?} errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
         * @return {?}
         */
        ThfUploadBaseService.prototype.upload = /**
         * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
         *
         * @param {?} url URL da requisição a ser efetuada.
         * @param {?} files Arquivos a serem enviados.
         * @param {?} tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
         * @param {?} uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
         * @param {?} successCallback Função a ser executada quando a requisição for efetuada com sucesso.
         * @param {?} errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
         * @return {?}
         */
        function (url, files, tOnUpload, uploadCallback, successCallback, errorCallback) {
            /** @type {?} */
            var filesLength = files.length;
            /** @type {?} */
            var uploadEvent = {
                data: {},
                file: null
            };
            for (var i = 0; i < filesLength; i++) {
                /** @type {?} */
                var formData = new FormData();
                /** @type {?} */
                var file = files[i];
                /** @type {?} */
                var fileName = file.rawFile.name;
                formData.append(this.formField, file.rawFile, fileName);
                // Função upload, onde o desenvolvedor pode enviar dados para a requisição.
                if (tOnUpload) {
                    uploadEvent['file'] = file;
                    tOnUpload.emit(uploadEvent);
                    formData.append('data', JSON.stringify(uploadEvent.data));
                }
                this.sendFile(url, file, formData, uploadCallback, successCallback, errorCallback);
            }
        };
        /**
         * @param {?} url
         * @param {?} file
         * @param {?} formData
         * @param {?} uploadCallback
         * @param {?} successCallback
         * @param {?} errorCallback
         * @return {?}
         */
        ThfUploadBaseService.prototype.sendFile = /**
         * @param {?} url
         * @param {?} file
         * @param {?} formData
         * @param {?} uploadCallback
         * @param {?} successCallback
         * @param {?} errorCallback
         * @return {?}
         */
        function (url, file, formData, uploadCallback, successCallback, errorCallback) {
            var _this = this;
            /** @type {?} */
            var request = this.getRequest(url, formData).subscribe((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event.type === http.HttpEventType.UploadProgress) {
                    _this.addRequest(file, request);
                    /** @type {?} */
                    var percentDone = Math.round(100 * event.loaded / event.total);
                    uploadCallback(file, percentDone);
                }
                else if (event instanceof http.HttpResponse) {
                    // Sucesso, arquivos enviados.
                    successCallback(file, event);
                }
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                errorCallback(file, err);
            }));
        };
        /**
         * @param {?} url
         * @param {?} formData
         * @return {?}
         */
        ThfUploadBaseService.prototype.getRequest = /**
         * @param {?} url
         * @param {?} formData
         * @return {?}
         */
        function (url, formData) {
            /** @type {?} */
            var req = new http.HttpRequest('POST', url, formData, {
                reportProgress: true
            });
            return this.http.request(req);
        };
        /**
         * @param {?} file
         * @param {?} callback
         * @return {?}
         */
        ThfUploadBaseService.prototype.stopRequestByFile = /**
         * @param {?} file
         * @param {?} callback
         * @return {?}
         */
        function (file, callback) {
            /** @type {?} */
            var requestObj = this.requests.find((/**
             * @param {?} req
             * @return {?}
             */
            function (req) {
                return req.file.uid === file.uid;
            }));
            if (requestObj) {
                /** @type {?} */
                var request = requestObj.request;
                request.unsubscribe();
                this.removeRequest(requestObj);
                callback();
            }
        };
        /**
         * @param {?} requestObj
         * @return {?}
         */
        ThfUploadBaseService.prototype.removeRequest = /**
         * @param {?} requestObj
         * @return {?}
         */
        function (requestObj) {
            /** @type {?} */
            var index = this.requests.indexOf(requestObj);
            this.requests.splice(index, 1);
        };
        /**
         * @param {?} file
         * @param {?} request
         * @return {?}
         */
        ThfUploadBaseService.prototype.addRequest = /**
         * @param {?} file
         * @param {?} request
         * @return {?}
         */
        function (file, request) {
            /** @type {?} */
            var hasRequest = this.requests.some((/**
             * @param {?} req
             * @return {?}
             */
            function (req) {
                return req.file.uid === file.uid;
            }));
            if (!hasRequest) {
                this.requests.push({ file: file, request: request });
            }
        };
        ThfUploadBaseService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfUploadBaseService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return ThfUploadBaseService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfUploadService = /** @class */ (function (_super) {
        __extends(ThfUploadService, _super);
        function ThfUploadService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ThfUploadService.decorators = [
            { type: core.Injectable }
        ];
        return ThfUploadService;
    }(ThfUploadBaseService));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfUploadBaseComponent
     *
     * \@example
     *
     * <example name="thf-upload-basic" title="Totvs Upload Basic">
     *   <file name="sample-thf-upload-basic/sample-thf-upload-basic.component.html"> </file>
     *   <file name="sample-thf-upload-basic/sample-thf-upload-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-upload-labs" title="Totvs Upload Labs">
     *   <file name="sample-thf-upload-labs/sample-thf-upload-labs.component.html"> </file>
     *   <file name="sample-thf-upload-labs/sample-thf-upload-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-upload-resume" title="Totvs Upload - Resume">
     *   <file name="sample-thf-upload-resume/sample-thf-upload-resume.component.html"> </file>
     *   <file name="sample-thf-upload-resume/sample-thf-upload-resume.component.ts"> </file>
     * </example>
     *
     * <example name="thf-upload-rs" title="Totvs Upload - Realize & Show">
     *   <file name="sample-thf-upload-rs/sample-thf-upload-rs.component.html"> </file>
     *   <file name="sample-thf-upload-rs/sample-thf-upload-rs.component.ts"> </file>
     * </example>
     */
    var ThfUploadComponent = /** @class */ (function (_super) {
        __extends(ThfUploadComponent, _super);
        function ThfUploadComponent(elementRef, uploadService) {
            var _this = _super.call(this, uploadService) || this;
            _this.elementRef = elementRef;
            _this.calledByCleanInputValue = false;
            return _this;
        }
        Object.defineProperty(ThfUploadComponent.prototype, "displaySendButton", {
            get: /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var currentFiles = this.currentFiles || [];
                return !this.hideSendButton && !this.autoUpload && (currentFiles.length > 0 && this.hasFileNotUploaded);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfUploadComponent.prototype, "hasFileNotUploaded", {
            get: /**
             * @return {?}
             */
            function () {
                if (Array.isArray(this.currentFiles)) {
                    return this.currentFiles.some((/**
                     * @param {?} file
                     * @return {?}
                     */
                    function (file) { return file.status !== ThfUploadStatus.Uploaded; }));
                }
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfUploadComponent.prototype, "isDisabled", {
            get: /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var currentFiles = this.currentFiles || [];
                return this.hasAnyFileUploading(this.currentFiles) ||
                    !this.url ||
                    this.disabled ||
                    this.isExceededFileLimit(currentFiles.length);
            },
            enumerable: true,
            configurable: true
        });
        /** Método responsável por **limpar** o(s) arquivo(s) selecionado(s). */
        /**
         * Método responsável por **limpar** o(s) arquivo(s) selecionado(s).
         * @return {?}
         */
        ThfUploadComponent.prototype.clear = /**
         * Método responsável por **limpar** o(s) arquivo(s) selecionado(s).
         * @return {?}
         */
        function () {
            this.currentFiles = undefined;
            this.updateModel([]);
            this.cleanInputValue();
        };
        // Função disparada ao selecionar algum arquivo.
        // Função disparada ao selecionar algum arquivo.
        /**
         * @param {?} event
         * @return {?}
         */
        ThfUploadComponent.prototype.onFileChange = 
        // Função disparada ao selecionar algum arquivo.
        /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // necessario este tratamento quando para IE, pois nele o change é disparado quando o campo é limpado também
            if (this.calledByCleanInputValue) {
                this.calledByCleanInputValue = false;
                return event.preventDefault();
            }
            /** @type {?} */
            var files = event.target.files;
            this.currentFiles = this.currentFiles || [];
            this.currentFiles = this.parseFiles(files);
            this.updateModel(__spread(this.currentFiles));
            if (this.autoUpload) {
                this.uploadFiles(this.currentFiles);
            }
            this.cleanInputValue();
        };
        // Remove o arquivo passado por parametro da lista dos arquivos correntes.
        // Remove o arquivo passado por parametro da lista dos arquivos correntes.
        /**
         * @param {?} file
         * @return {?}
         */
        ThfUploadComponent.prototype.removeFile = 
        // Remove o arquivo passado por parametro da lista dos arquivos correntes.
        /**
         * @param {?} file
         * @return {?}
         */
        function (file) {
            /** @type {?} */
            var index = this.currentFiles.indexOf(file);
            this.currentFiles.splice(index, 1);
            this.updateModel(__spread(this.currentFiles));
        };
        /** Método responsável por **abrir** a janela para seleção de arquivo(s). */
        /**
         * Método responsável por **abrir** a janela para seleção de arquivo(s).
         * @return {?}
         */
        ThfUploadComponent.prototype.selectFiles = /**
         * Método responsável por **abrir** a janela para seleção de arquivo(s).
         * @return {?}
         */
        function () {
            this.calledByCleanInputValue = false;
            this.inputFile.nativeElement.click();
        };
        /** Método responsável por **enviar** o(s) arquivo(s) selecionado(s). */
        /**
         * Método responsável por **enviar** o(s) arquivo(s) selecionado(s).
         * @return {?}
         */
        ThfUploadComponent.prototype.sendFiles = /**
         * Método responsável por **enviar** o(s) arquivo(s) selecionado(s).
         * @return {?}
         */
        function () {
            if (this.currentFiles && this.currentFiles.length) {
                this.uploadFiles(this.currentFiles);
            }
        };
        // Retorna o tamanho do arquivo em KBytes.
        // Retorna o tamanho do arquivo em KBytes.
        /**
         * @protected
         * @param {?} size
         * @return {?}
         */
        ThfUploadComponent.prototype.getFileSize = 
        // Retorna o tamanho do arquivo em KBytes.
        /**
         * @protected
         * @param {?} size
         * @return {?}
         */
        function (size) {
            /** @type {?} */
            var kbSize = 0;
            if (size) {
                kbSize = Math.ceil(size / 1024);
            }
            return kbSize + " KB";
        };
        // Retorna o thf-icon de acordo com o status do arquivo.
        // Retorna o thf-icon de acordo com o status do arquivo.
        /**
         * @protected
         * @param {?} file
         * @return {?}
         */
        ThfUploadComponent.prototype.getThfIcon = 
        // Retorna o thf-icon de acordo com o status do arquivo.
        /**
         * @protected
         * @param {?} file
         * @return {?}
         */
        function (file) {
            switch (file.status) {
                case ThfUploadStatus.Uploaded:
                    return 'thf-icon-ok';
                case ThfUploadStatus.Error:
                    return 'thf-icon-close';
                case ThfUploadStatus.None:
                    return 'thf-icon-info';
                case ThfUploadStatus.Uploading:
                default:
                    return '';
            }
        };
        // Verifica se existe algum arquivo sendo enviado ao serviço.
        // Verifica se existe algum arquivo sendo enviado ao serviço.
        /**
         * @protected
         * @param {?} files
         * @return {?}
         */
        ThfUploadComponent.prototype.hasAnyFileUploading = 
        // Verifica se existe algum arquivo sendo enviado ao serviço.
        /**
         * @protected
         * @param {?} files
         * @return {?}
         */
        function (files) {
            if (files && files.length) {
                return files.some((/**
                 * @param {?} file
                 * @return {?}
                 */
                function (file) { return file.status === ThfUploadStatus.Uploading; }));
            }
            return false;
        };
        // Valida se o status passado por parâmetro é igual ao status do arquivo.
        // Valida se o status passado por parâmetro é igual ao status do arquivo.
        /**
         * @protected
         * @param {?} status
         * @param {?} file
         * @return {?}
         */
        ThfUploadComponent.prototype.isStatusFile = 
        // Valida se o status passado por parâmetro é igual ao status do arquivo.
        /**
         * @protected
         * @param {?} status
         * @param {?} file
         * @return {?}
         */
        function (status, file) {
            return file.status === ThfUploadStatus[status];
        };
        // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
        // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
        /**
         * @protected
         * @param {?} file
         * @return {?}
         */
        ThfUploadComponent.prototype.stopUpload = 
        // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
        /**
         * @protected
         * @param {?} file
         * @return {?}
         */
        function (file) {
            var _this = this;
            this.uploadService.stopRequestByFile(file, (/**
             * @return {?}
             */
            function () {
                if (_this.autoUpload) {
                    _this.removeFile(file);
                }
                else {
                    _this.stopUploadHandler(file);
                }
            }));
        };
        // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
        // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
        /**
         * @protected
         * @param {?} files
         * @return {?}
         */
        ThfUploadComponent.prototype.uploadFiles = 
        // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
        /**
         * @protected
         * @param {?} files
         * @return {?}
         */
        function (files) {
            var _this = this;
            /** @type {?} */
            var filesFiltered = files.filter((/**
             * @param {?} file
             * @return {?}
             */
            function (file) {
                return file.status !== ThfUploadStatus.Uploaded;
            }));
            this.uploadService.upload(this.url, filesFiltered, this.onUpload, (/**
             * @param {?} file
             * @param {?} percent
             * @return {?}
             */
            function (file, percent) {
                // UPLOADING
                _this.uploadingHandler(file, percent);
            }), (/**
             * @param {?} file
             * @param {?} eventResponse
             * @return {?}
             */
            function (file, eventResponse) {
                // SUCCESS
                _this.successHandler(file);
                _this.onSuccess.emit(eventResponse);
            }), (/**
             * @param {?} file
             * @param {?} eventError
             * @return {?}
             */
            function (file, eventError) {
                // Error
                _this.errorHandler(file);
                _this.onError.emit(eventError);
            }));
        };
        // Atualiza a classe da div, que conter a classe 'thf-upload-filename', para 'thf-upload-filename-loading'.
        // Atualiza a classe da div, que conter a classe 'thf-upload-filename', para 'thf-upload-filename-loading'.
        /**
         * @private
         * @param {?} uid
         * @return {?}
         */
        ThfUploadComponent.prototype.addFileNameClass = 
        // Atualiza a classe da div, que conter a classe 'thf-upload-filename', para 'thf-upload-filename-loading'.
        /**
         * @private
         * @param {?} uid
         * @return {?}
         */
        function (uid) {
            /** @type {?} */
            var divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
            /** @type {?} */
            var fileNameDiv = divStatus.querySelector('.thf-upload-filename');
            fileNameDiv.classList.add('thf-upload-filename-loading');
        };
        /**
         * @private
         * @return {?}
         */
        ThfUploadComponent.prototype.cleanInputValue = /**
         * @private
         * @return {?}
         */
        function () {
            this.calledByCleanInputValue = true;
            this.inputFile.nativeElement.value = '';
        };
        // Função disparada quando é retornado um erro no envio do arquivo.
        // Função disparada quando é retornado um erro no envio do arquivo.
        /**
         * @private
         * @param {?} file
         * @return {?}
         */
        ThfUploadComponent.prototype.errorHandler = 
        // Função disparada quando é retornado um erro no envio do arquivo.
        /**
         * @private
         * @param {?} file
         * @return {?}
         */
        function (file) {
            file.status = ThfUploadStatus.Error;
            this.setProgressStatus(file.uid, 0, false);
            this.setUploadStatus(file, 'thf-upload-progress-error', 100);
        };
        // Remove a classe 'thf-upload-filename-loading' da div que conter a classe 'thf-upload-filename'.
        // Remove a classe 'thf-upload-filename-loading' da div que conter a classe 'thf-upload-filename'.
        /**
         * @private
         * @param {?} uid
         * @return {?}
         */
        ThfUploadComponent.prototype.removeFileNameClass = 
        // Remove a classe 'thf-upload-filename-loading' da div que conter a classe 'thf-upload-filename'.
        /**
         * @private
         * @param {?} uid
         * @return {?}
         */
        function (uid) {
            /** @type {?} */
            var divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
            /** @type {?} */
            var fileNameDiv = divStatus.querySelector('.thf-upload-filename');
            fileNameDiv.classList.remove('thf-upload-filename-loading');
        };
        // Atualiza o status do progresso do envio do arquivo.
        // Atualiza o status do progresso do envio do arquivo.
        /**
         * @private
         * @param {?} uid
         * @param {?} percent
         * @param {?} isShow
         * @return {?}
         */
        ThfUploadComponent.prototype.setProgressStatus = 
        // Atualiza o status do progresso do envio do arquivo.
        /**
         * @private
         * @param {?} uid
         * @param {?} percent
         * @param {?} isShow
         * @return {?}
         */
        function (uid, percent, isShow) {
            /** @type {?} */
            var divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
            /** @type {?} */
            var divProgress = divStatus.querySelector('.thf-upload-progress-status');
            /** @type {?} */
            var isDisplay = isShow ? 'block' : 'none';
            divProgress.setAttribute('style', "display: " + isDisplay + ";");
            divProgress.setAttribute('style', "width: " + percent + "%;");
        };
        // Atualiza o status do envio de arquivos.
        // Atualiza o status do envio de arquivos.
        /**
         * @private
         * @param {?} file
         * @param {?} className
         * @param {?} percent
         * @return {?}
         */
        ThfUploadComponent.prototype.setUploadStatus = 
        // Atualiza o status do envio de arquivos.
        /**
         * @private
         * @param {?} file
         * @param {?} className
         * @param {?} percent
         * @return {?}
         */
        function (file, className, percent) {
            /** @type {?} */
            var uid = file.uid;
            /** @type {?} */
            var divStatus = this.elementRef.nativeElement.querySelector("div[id='" + uid + "'].thf-upload-progress");
            divStatus.classList.remove('thf-upload-progress-error', 'thf-upload-progress-success');
            divStatus.classList.add(className);
            if (percent > 5 && file.status !== ThfUploadStatus.None) {
                this.addFileNameClass(uid);
            }
        };
        // Função disparada ao parar um envio de arquivo.
        // Função disparada ao parar um envio de arquivo.
        /**
         * @private
         * @param {?} file
         * @return {?}
         */
        ThfUploadComponent.prototype.stopUploadHandler = 
        // Função disparada ao parar um envio de arquivo.
        /**
         * @private
         * @param {?} file
         * @return {?}
         */
        function (file) {
            file.status = ThfUploadStatus.None;
            this.removeFileNameClass(file.uid);
            this.setProgressStatus(file.uid, 0, false);
            this.setUploadStatus(file, 'thf-upload-progress', 100);
        };
        // Função disparada quando o envio é realizado com sucesso.
        // Função disparada quando o envio é realizado com sucesso.
        /**
         * @private
         * @param {?} file
         * @return {?}
         */
        ThfUploadComponent.prototype.successHandler = 
        // Função disparada quando o envio é realizado com sucesso.
        /**
         * @private
         * @param {?} file
         * @return {?}
         */
        function (file) {
            file.status = ThfUploadStatus.Uploaded;
            this.setProgressStatus(file.uid, 0, false);
            this.setUploadStatus(file, 'thf-upload-progress-success', 100);
        };
        // Atualiza o ngModel para os arquivos passados por parâmetro.
        // Atualiza o ngModel para os arquivos passados por parâmetro.
        /**
         * @private
         * @param {?} files
         * @return {?}
         */
        ThfUploadComponent.prototype.updateModel = 
        // Atualiza o ngModel para os arquivos passados por parâmetro.
        /**
         * @private
         * @param {?} files
         * @return {?}
         */
        function (files) {
            this.onModelChange ? this.onModelChange(files) : this.ngModelChange.emit(files);
        };
        // Função disparada enquanto o arquivo está sendo enviado ao serviço.
        // Função disparada enquanto o arquivo está sendo enviado ao serviço.
        /**
         * @private
         * @param {?} file
         * @param {?} percent
         * @return {?}
         */
        ThfUploadComponent.prototype.uploadingHandler = 
        // Função disparada enquanto o arquivo está sendo enviado ao serviço.
        /**
         * @private
         * @param {?} file
         * @param {?} percent
         * @return {?}
         */
        function (file, percent) {
            file.status = ThfUploadStatus.Uploading;
            this.setProgressStatus(file.uid, percent, true);
            this.setUploadStatus(file, 'thf-upload-progress', percent);
        };
        ThfUploadComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-upload',
                        template: "<thf-field-container\n  [t-label]=\"label\"\n  [t-help]=\"help\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-upload\">\n    <input\n      #inputFile\n      class=\"thf-upload-input\"\n      type=\"file\"\n      [accept]=\"allowedExtensions\"\n      [attr.name]=\"name\"\n      [disabled]=\"isDisabled\"\n      [multiple]=\"isMultiple\"\n      [required]=\"required\"\n      (change)=\"onFileChange($event)\">\n\n    <thf-button\n      *ngIf=\"!hideSelectButton\"\n      class=\"thf-upload-button\"\n      for=\"file\"\n      [t-disabled]=\"isDisabled\"\n      [t-label]=\"literals.selectFile\"\n      (t-click)=\"selectFiles()\">\n    </thf-button>\n\n    <div class=\"thf-upload-progress\" *ngFor=\"let file of currentFiles\" [id]=\"file.uid\">\n      <div class=\"thf-upload-progress-status\"></div>\n      <div class=\"thf-upload-filename-foreground\">\n\n        <div class=\"thf-upload-filename\">\n          <span class=\"thf-icon {{ getThfIcon(file) }}\"></span> {{ file.name }} - {{ getFileSize(file.size) }}\n        </div>\n\n        <div class=\"thf-upload-group-actions\">\n          <span\n            *ngIf=\"isStatusFile('None', file) || isStatusFile('Error', file)\"\n            class=\"thf-upload-action\"\n            (click)=\"removeFile(file)\">\n            {{ literals.deleteFile }}\n          </span>\n\n          <span\n            *ngIf=\"isStatusFile('Uploading', file)\"\n            class=\"thf-upload-action\"\n            (click)=\"stopUpload(file)\">\n            {{ literals.cancel }}\n          </span>\n\n          <span\n            *ngIf=\"isStatusFile('Error', file)\"\n            class=\"thf-upload-action\"\n            (click)=\"uploadFiles([file])\">\n\n            {{ literals.tryAgain }}\n          </span>\n        </div>\n\n      </div>\n    </div>\n\n    <thf-button\n      *ngIf=\"displaySendButton\"\n      t-type=\"primary\"\n      [t-disabled]=\"hasAnyFileUploading(currentFiles)\"\n      [t-label]=\"literals.startSending\"\n      (t-click)=\"uploadFiles(currentFiles)\">\n    </thf-button>\n\n  </div>\n\n</thf-field-container>\n",
                        providers: [
                            ThfUploadService,
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfUploadComponent; })),
                                multi: true,
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfUploadComponent; })),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfUploadComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: ThfUploadService }
        ]; };
        ThfUploadComponent.propDecorators = {
            inputFile: [{ type: core.ViewChild, args: ['inputFile', { read: core.ElementRef, static: true },] }]
        };
        return ThfUploadComponent;
    }(ThfUploadBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfInputBaseComponent
     *
     * \@description
     *
     * thf-url é um input específico para receber URL, com o pattern já configurado.
     *
     * \@example
     *
     * <example name="thf-url-basic" title="Totvs Url Basic">
     *   <file name="sample-thf-url-basic/sample-thf-url-basic.component.html"> </file>
     *   <file name="sample-thf-url-basic/sample-thf-url-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-url-labs" title="Totvs Url Labs">
     *   <file name="sample-thf-url-labs/sample-thf-url-labs.component.html"> </file>
     *   <file name="sample-thf-url-labs/sample-thf-url-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-url-shortener" title="Totvs Url - Shortener">
     *   <file name="sample-thf-url-shortener/sample-thf-url-shortener.component.html"> </file>
     *   <file name="sample-thf-url-shortener/sample-thf-url-shortener.component.ts"> </file>
     * </example>
     *
     */
    var ThfUrlComponent = /** @class */ (function (_super) {
        __extends(ThfUrlComponent, _super);
        function ThfUrlComponent(el) {
            var _this = _super.call(this, el) || this;
            _this.icon = 'thf-icon-world';
            _this.maxlength = 254;
            _this.type = 'url';
            _this.pattern = '^((https|http):\\/\\/)?' + // protocol
                '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
                '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
                '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
                '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
                '(\\#[-a-z\\d_]*)?$';
            _this.mask = '';
            _this.listener = _this.validateClassesForPattern.bind(_this);
            return _this;
        }
        /**
         * @return {?}
         */
        ThfUrlComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            // Se não tem ngModel ou reactive form adiciona validação com classes css
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (!_this.onChangePropagate) {
                    _this.inputEl.nativeElement.addEventListener('keyup', _this.listener);
                }
            }));
        };
        /**
         * @return {?}
         */
        ThfUrlComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (!this.onChangePropagate) {
                this.inputEl.nativeElement.removeEventListener('keyup', this.listener);
            }
        };
        /**
         * @param {?} c
         * @return {?}
         */
        ThfUrlComponent.prototype.extraValidation = /**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            return null;
        };
        ThfUrlComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-url',
                        template: "<thf-field-container\n  [t-help]=\"help\"\n  [t-label]=\"label\"\n  [t-optional]=\"!required && optional\">\n\n  <div class=\"thf-field-container-content\">\n    <div *ngIf=\"icon\" class=\"thf-field-icon-container-left\">\n      <span class=\"thf-icon thf-field-icon {{ icon }}\" [class.thf-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inp\n      class=\"thf-input\"\n      [attr.name]=\"name\"\n      [class.thf-input-icon-left]=\"icon\"\n      [class.thf-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"thf-field-icon-container-right\">\n      <thf-clean [t-element-ref]=\"inputEl\" (t-change-event)=\"clear($event)\"></thf-clean>\n    </div>\n  </div>\n\n  <thf-field-container-bottom\n    [t-error-pattern]=\"getErrorPattern()\">\n  </thf-field-container-bottom>\n\n</thf-field-container>\n",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfUrlComponent; })),
                                multi: true
                            },
                            {
                                provide: forms.NG_VALIDATORS,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ThfUrlComponent; })),
                                multi: true
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfUrlComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        return ThfUrlComponent;
    }(ThfInputGeneric));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo dos componentes thf-combo, thf-checkbox-group, thf-datepicker, thf-datepicker-range, thf-email, thf-input, thf-lookup,
     * thf-number, thf-multiselect, thf-password, thf-radio-group, thf-select, thf-switch, thf-textarea, thf-upload e thf-url.
     */
    var ThfFieldModule = /** @class */ (function () {
        function ThfFieldModule() {
        }
        ThfFieldModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            http.HttpClientModule,
                            ThfButtonModule,
                            ThfDisclaimerModule,
                            ThfLoadingModule,
                            ThfModalModule,
                            ThfTableModule,
                            ThfButtonGroupModule
                        ],
                        exports: [
                            ThfCheckboxGroupComponent,
                            ThfCleanComponent,
                            ThfComboComponent,
                            ThfDecimalComponent,
                            ThfDatepickerComponent,
                            ThfDatepickerRangeComponent,
                            ThfEmailComponent,
                            ThfInputComponent,
                            ThfLoginComponent,
                            ThfLookupComponent,
                            ThfLookupModalComponent,
                            ThfMultiselectComponent,
                            ThfNumberComponent,
                            ThfPasswordComponent,
                            ThfRadioGroupComponent,
                            ThfRichTextComponent,
                            ThfSelectComponent,
                            ThfSelectOptionTemplateDirective,
                            ThfSwitchComponent,
                            ThfTextareaComponent,
                            ThfUploadComponent,
                            ThfUrlComponent
                        ],
                        declarations: [
                            ThfCalendarComponent$1,
                            ThfCheckboxGroupComponent,
                            ThfCleanComponent,
                            ThfComboComponent,
                            ThfDecimalComponent,
                            ThfDatepickerComponent,
                            ThfDatepickerRangeComponent,
                            ThfEmailComponent,
                            ThfFieldContainerComponent,
                            ThfFieldContainerBottomComponent,
                            ThfInputComponent,
                            ThfLoginComponent,
                            ThfLookupComponent,
                            ThfLookupModalComponent,
                            ThfMultiselectComponent,
                            ThfMultiselectDropdownComponent,
                            ThfMultiselectItemComponent,
                            ThfMultiselectSearchComponent,
                            ThfNumberComponent,
                            ThfPasswordComponent,
                            ThfRadioGroupComponent,
                            ThfRichTextBodyComponent,
                            ThfRichTextComponent,
                            ThfRichTextToolbarComponent,
                            ThfSelectComponent,
                            ThfSelectOptionTemplateDirective,
                            ThfSwitchComponent,
                            ThfTextareaComponent,
                            ThfUploadComponent,
                            ThfUrlComponent
                        ],
                        providers: [],
                        entryComponents: [
                            ThfCalendarComponent$1,
                            ThfLookupModalComponent
                        ]
                    },] }
        ];
        return ThfFieldModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ThfInfoOrientation = {
        /** O valor será exibido na horizontal, ao lado direito em relação ao label. */
        Horizontal: 'horizontal',
        /** Exibe o valor na vertical, ou seja, abaixo do label. */
        Vertical: 'vertical',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfInfoOrientationDefault = ThfInfoOrientation.Vertical;
    var ThfInfoBaseComponent = /** @class */ (function () {
        function ThfInfoBaseComponent() {
            this._orientation = thfInfoOrientationDefault;
            this.thfInfoOrientation = ThfInfoOrientation;
        }
        Object.defineProperty(ThfInfoBaseComponent.prototype, "labelSize", {
            get: /**
             * @return {?}
             */
            function () {
                return this._labelSize;
            },
            /**
             * @optional
             *
             * @description
             *
             * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `t-label` quando o componente for
             * utilizado na orientação horizontal.
             *
             * Valores válidos:
             *  - `[1 .. 11]`
             *
             * > A propriedade `t-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `t-label` quando o componente for
             * utilizado na orientação horizontal.
             *
             * Valores válidos:
             *  - `[1 .. 11]`
             *
             * > A propriedade `t-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (isNaN(parseInt((/** @type {?} */ (value)), 10))) {
                    this._labelSize = undefined;
                }
                else {
                    value = parseInt((/** @type {?} */ (value)), 10);
                    this._labelSize = (value < 1 || value > 11) ? undefined : value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfInfoBaseComponent.prototype, "orientation", {
            get: /**
             * @return {?}
             */
            function () {
                return this._orientation;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o layout de exibição.
             *
             * > Quando definido na horizontal, pode-se utilizar a propriedade `t-label-size` para um maior controle das informações exibidas.
             *
             * @default `vertical`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define o layout de exibição.
             *
             * > Quando definido na horizontal, pode-se utilizar a propriedade `t-label-size` para um maior controle das informações exibidas.
             *
             * \@default `vertical`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._orientation = ((/** @type {?} */ (Object))).values(ThfInfoOrientation).includes(value) ? value : thfInfoOrientationDefault;
            },
            enumerable: true,
            configurable: true
        });
        ThfInfoBaseComponent.propDecorators = {
            label: [{ type: core.Input, args: ['t-label',] }],
            labelSize: [{ type: core.Input, args: ['t-label-size',] }],
            orientation: [{ type: core.Input, args: ['t-orientation',] }],
            value: [{ type: core.Input, args: ['t-value',] }]
        };
        return ThfInfoBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfInfoBaseComponent
     *
     * \@description
     *
     * Este componente tem como objetivo renderizar valores na tela no estilo label na parte superior e
     * valor na parte inferior. Facilita a exibição de dados pois vem com layout padrão Totvs.
     *
     * \@example
     *
     * <example name="thf-info-basic" title="Totvs Info Basic">
     *  <file name="sample-thf-info-basic/sample-thf-info-basic.component.html"> </file>
     *  <file name="sample-thf-info-basic/sample-thf-info-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-info-labs" title="Totvs Info Labs">
     *  <file name="sample-thf-info-labs/sample-thf-info-labs.component.html"> </file>
     *  <file name="sample-thf-info-labs/sample-thf-info-labs.component.ts"> </file>
     * </example>
     */
    var ThfInfoComponent = /** @class */ (function (_super) {
        __extends(ThfInfoComponent, _super);
        function ThfInfoComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ThfInfoComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-info',
                        template: "<div class=\"thf-info\" [class.thf-row]=\"orientation === thfInfoOrientation.Horizontal && labelSize\">\n  <div class=\"thf-info-container-title\"\n    [ngClass]=\"labelSize && orientation === thfInfoOrientation.Horizontal ? 'thf-sm-' + labelSize : ''\"\n    [class.thf-info-label-horizontal]=\"orientation === thfInfoOrientation.Horizontal\"\n    [class.thf-text-nowrap]=\"orientation === thfInfoOrientation.Horizontal && !labelSize\">\n    <span class=\"thf-info-label\">\n      {{ orientation === thfInfoOrientation.Horizontal ? label + ':' : label }}\n    </span>\n  </div>\n\n  <div [ngClass]=\"labelSize && orientation === thfInfoOrientation.Horizontal ? 'thf-sm-' + (12 - labelSize) : ''\"\n    [class.thf-info-container-content]=\"orientation !== thfInfoOrientation.Horizontal\"\n    [class.thf-info-value-horizontal]=\"orientation === thfInfoOrientation.Horizontal\">\n    <span class=\"thf-info-value\">{{ value }}</span>\n  </div>\n</div>\n"
                    }] }
        ];
        return ThfInfoComponent;
    }(ThfInfoBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente thf-info.
     */
    var ThfInfoModule = /** @class */ (function () {
        function ThfInfoModule() {
        }
        ThfInfoModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            ThfInfoComponent
                        ],
                        exports: [ThfInfoComponent],
                        providers: [],
                        schemas: []
                    },] }
        ];
        return ThfInfoModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ThfTagIcon = {
        /** Ícone fechar */
        Danger: 'close',
        /** Ícone de informação */
        Info: 'info',
        /** Ícone que representa confirmação */
        Success: 'ok',
        /** Ícone com ponto de exclamação */
        Warning: 'warning',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ThfTagOrientation = {
        /** A tag será exibida na horizontal, ao lado direito em relação ao label. */
        Horizontal: 'horizontal',
        /** Exibe a tag na vertical, ou seja, abaixo do label. */
        Vertical: 'vertical',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ThfTagType = {
        /** Erro, perigo, problema ou aviso crítico. */
        Danger: 'danger',
        /** Informativo ou explicativo. */
        Info: 'info',
        /** Confirmação, resultados positivos ou êxito */
        Success: 'success',
        /** Aviso ou advertência. */
        Warning: 'warning',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfTagOrientationDefault = ThfTagOrientation.Vertical;
    /** @type {?} */
    var thfTagTypeDefault = ThfTagType.Info;
    /**
     * \@description
     *
     * Este componente apresenta um valor em um marcador colorido que pode conter ícone e *label*, as cores são definidas conforme o tipo
     * escolhido.
     * Seu uso é indicado para informações que necessitam de destaque em forma de marcação.
     */
    var ThfTagBaseComponent = /** @class */ (function () {
        function ThfTagBaseComponent() {
            this._orientation = thfTagOrientationDefault;
            this._type = thfTagTypeDefault;
            this.thfTagOrientation = ThfTagOrientation;
            /**
             * \@optional
             *
             * \@description
             *
             * Ação que será executada quando o usuário clicar sobre o `thf-tag`
             * e que receberá como parâmetro um objeto contendo o valor e tipo de tag.
             */
            this.click = new core.EventEmitter();
        }
        Object.defineProperty(ThfTagBaseComponent.prototype, "icon", {
            get: /**
             * @return {?}
             */
            function () {
                return this._icon;
            },
            /**
             * @optional
             *
             * @description
             *
             * Apresenta um ícone na tag conforme o tipo:
             * - `danger`: <span class="thf-icon thf-icon-close"></span>
             * - `info`: <span class="thf-icon thf-icon-info"></span>
             * - `success`: <span class="thf-icon thf-icon-ok"></span>
             * - `warning`: <span class="thf-icon thf-icon-warning"></span>
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Apresenta um ícone na tag conforme o tipo:
             * - `danger`: <span class="thf-icon thf-icon-close"></span>
             * - `info`: <span class="thf-icon thf-icon-info"></span>
             * - `success`: <span class="thf-icon thf-icon-ok"></span>
             * - `warning`: <span class="thf-icon thf-icon-warning"></span>
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._icon = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTagBaseComponent.prototype, "orientation", {
            get: /**
             * @return {?}
             */
            function () {
                return this._orientation;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o layout de exibição.
             *
             * @default `vertical`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define o layout de exibição.
             *
             * \@default `vertical`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._orientation = ((/** @type {?} */ (Object))).values(ThfTagOrientation).includes(value) ? value : thfTagOrientationDefault;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTagBaseComponent.prototype, "type", {
            get: /**
             * @return {?}
             */
            function () {
                return this._type;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o tipo e determina a cor do `thf-tag`.
             *
             * Valores válidos:
             *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
             *  - `warning`: cor amarela que representa aviso ou advertência.
             *  - `danger`: cor vermelha para erro ou aviso crítico.
             *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
             *
             * @default `info`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define o tipo e determina a cor do `thf-tag`.
             *
             * Valores válidos:
             *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
             *  - `warning`: cor amarela que representa aviso ou advertência.
             *  - `danger`: cor vermelha para erro ou aviso crítico.
             *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
             *
             * \@default `info`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._type = ((/** @type {?} */ (Object))).values(ThfTagType).includes(value) ? value : thfTagTypeDefault;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTagBaseComponent.prototype, "iconFromType", {
            get: /**
             * @return {?}
             */
            function () {
                switch (this.type) {
                    case ThfTagType.Danger: return ThfTagIcon.Danger;
                    case ThfTagType.Info: return ThfTagIcon.Info;
                    case ThfTagType.Success: return ThfTagIcon.Success;
                    case ThfTagType.Warning: return ThfTagIcon.Warning;
                }
            },
            enumerable: true,
            configurable: true
        });
        ThfTagBaseComponent.propDecorators = {
            label: [{ type: core.Input, args: ['t-label',] }],
            icon: [{ type: core.Input, args: ['t-icon',] }],
            orientation: [{ type: core.Input, args: ['t-orientation',] }],
            type: [{ type: core.Input, args: ['t-type',] }],
            value: [{ type: core.Input, args: ['t-value',] }],
            click: [{ type: core.Output, args: ['t-click',] }]
        };
        return ThfTagBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfTagBaseComponent
     *
     * \@example
     *
     * <example name="thf-tag-basic" title="Totvs Tag Basic">
     *  <file name="sample-thf-tag-basic/sample-thf-tag-basic.component.html"> </file>
     *  <file name="sample-thf-tag-basic/sample-thf-tag-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-tag-labs" title="Totvs Tag Labs">
     *  <file name="sample-thf-tag-labs/sample-thf-tag-labs.component.html"> </file>
     *  <file name="sample-thf-tag-labs/sample-thf-tag-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-tag-bank-account" title="Totvs Tag - Bank Account">
     *  <file name="sample-thf-tag-bank-account/sample-thf-tag-bank-account.component.html"> </file>
     *  <file name="sample-thf-tag-bank-account/sample-thf-tag-bank-account.component.ts"> </file>
     * </example>
     */
    var ThfTagComponent = /** @class */ (function (_super) {
        __extends(ThfTagComponent, _super);
        function ThfTagComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        ThfTagComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.isClickable = this.click.observers.length > 0;
        };
        /**
         * @return {?}
         */
        ThfTagComponent.prototype.onClick = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var submittedTagItem = { value: this.value, type: this.type };
            this.click.emit(submittedTagItem);
        };
        ThfTagComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-tag',
                        template: "<div class=\"thf-tag-container\" [class.thf-tag-container-horizontal]=\"orientation === thfTagOrientation.Horizontal\">\n  <div *ngIf=\"label\" class=\"thf-tag-title thf-text-nowrap\">\n    <span class=\"thf-tag-label\">{{ orientation === thfTagOrientation.Horizontal ? label + ':' : label }}</span>\n  </div>\n  <div \n    class=\"thf-tag thf-tag-{{ type }}\" \n    [ngClass]=\"{'thf-clickable': isClickable}\"\n    (click)=\"onClick()\">\n    <span *ngIf=\"icon\" class=\"thf-icon thf-icon-{{ iconFromType }}\"></span>\n    <span class=\"thf-tag-value\">{{value}}</span>\n  </div>\n</div>\n"
                    }] }
        ];
        return ThfTagComponent;
    }(ThfTagBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente `thf-tag`.
     */
    var ThfTagModule = /** @class */ (function () {
        function ThfTagModule() {
        }
        ThfTagModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            ThfTagComponent
                        ],
                        exports: [
                            ThfTagComponent
                        ],
                        providers: [],
                        schemas: []
                    },] }
        ];
        return ThfTagModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     *
     * \@description
     *
     * Componente para criação de formulários dinâmicos a partir de uma lista de objetos.
     *
     * Também é possível verificar se o formulário está válido e informar valores para a exibição de informações.
     *
     * > Temos uma ferramenta para criação de formulários, onde é possível inicializá-lo através de um JSON.
     * [**Veja aqui**](tools/dynamic-form).
     */
    var ThfDynamicFormBaseComponent = /** @class */ (function () {
        function ThfDynamicFormBaseComponent() {
            this._groupForm = false;
            /**
             * \@optional
             *
             * \@description
             *
             * Na inicialização do componente será repassado o objeto de formulário utilizado no componente,
             * podendo ser utilizado para validações e/ou detecção de mudança dos valores.
             *
             * Portanto existem duas maneiras de recuperar o formulário,
             * através de *template reference* e através do *output*, veja os exemplos abaixo:
             *
             * > *template reference*
             *
             * ```html
             *  <thf-dynamic-form #dynamicForm>
             *  </thf-dynamic-form>
             *
             *  <thf-button t-label="Adicionar" [t-disabled]="dynamicForm?.form.invalid">
             *  </thf-button>
             *
             * ```
             *
             * > *Output*
             *
             * ```html
             *  ...
             *  <thf-dynamic-form (t-form)="getForm($event)">
             *  </thf-dynamic-form>
             *
             *  <thf-button t-label="Adicionar" [t-disabled]="dynamicForm?.invalid">
             *  </thf-button>
             *  ...
             *
             * ```
             *
             * ```ts
             *  ...
             *
             *  export class AppComponent {
             *
             *    dynamicForm: NgForm;
             *
             *    getForm(form: NgForm) {
             *      this.dynamicForm = form;
             *    }
             *
             *  }
             * ```
             *
             * > Caso a propriedade `t-group-form` for verdadeira não será repassado o formulário, pois o mesmo utilizará
             * o formulário pai.
             */
            this.formOutput = new core.EventEmitter();
        }
        Object.defineProperty(ThfDynamicFormBaseComponent.prototype, "groupForm", {
            get: /**
             * @return {?}
             */
            function () {
                return this._groupForm;
            },
            /**
             * @optional
             *
             * @description
             * Ao informar esta propriedade, o componente passará a utilizar o formulário pai para criar os `FormControl`
             * e com isso é possível recuperar o valor do formulário e suas validações a partir do formulário pai.
             *
             * ```html
             * <form #parentForm="ngForm">
             *
             *   <thf-dynamic-form t-group-form [t-fields]="fields"></thf-dynamic-form>
             *
             *  <thf-button t-label="Adicionar" [t-disabled]="parentForm.invalid"></thf-button>
             * </form>
             * ```
             */
            set: /**
             * \@optional
             *
             * \@description
             * Ao informar esta propriedade, o componente passará a utilizar o formulário pai para criar os `FormControl`
             * e com isso é possível recuperar o valor do formulário e suas validações a partir do formulário pai.
             *
             * ```html
             * <form #parentForm="ngForm">
             *
             *   <thf-dynamic-form t-group-form [t-fields]="fields"></thf-dynamic-form>
             *
             *  <thf-button t-label="Adicionar" [t-disabled]="parentForm.invalid"></thf-button>
             * </form>
             * ```
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._groupForm = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        ThfDynamicFormBaseComponent.propDecorators = {
            fields: [{ type: core.Input, args: ['t-fields',] }],
            value: [{ type: core.Input, args: ['t-value',] }],
            formOutput: [{ type: core.Output, args: ['t-form',] }],
            groupForm: [{ type: core.Input, args: ['t-group-form',] }]
        };
        return ThfDynamicFormBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfDynamicFormBaseComponent
     *
     * \@example
     *
     * <example name="thf-dynamic-form-basic" title="Totvs Dynamic Form Basic">
     *  <file name="sample-thf-dynamic-form-basic/sample-thf-dynamic-form-basic.component.html"> </file>
     *  <file name="sample-thf-dynamic-form-basic/sample-thf-dynamic-form-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-dynamic-form-register" title="Totvs Dynamic Form - Register">
     *  <file name="sample-thf-dynamic-form-register/sample-thf-dynamic-form-register.component.html"> </file>
     *  <file name="sample-thf-dynamic-form-register/sample-thf-dynamic-form-register.component.ts"> </file>
     * </example>
     */
    var ThfDynamicFormComponent = /** @class */ (function (_super) {
        __extends(ThfDynamicFormComponent, _super);
        function ThfDynamicFormComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ThfDynamicFormComponent.prototype, "form", {
            get: /**
             * @return {?}
             */
            function () {
                return this._form || (/** @type {?} */ ({}));
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                var _this = this;
                // necessario para nao ocorrer o ExpressionChangedAfterItHasBeenCheckedError
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this._form = value;
                    _this.emitForm();
                }));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @return {?}
         */
        ThfDynamicFormComponent.prototype.emitForm = /**
         * @private
         * @return {?}
         */
        function () {
            if (!this.groupForm && this.formOutput.observers.length) {
                this.formOutput.emit(this.form);
            }
        };
        ThfDynamicFormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-dynamic-form',
                        template: "\n<ng-container *ngIf=\"groupForm; then reuseFormTemplate; else uniqueFormTemplate\"></ng-container>\n\n<ng-template #reuseFormTemplate>\n\n  <thf-dynamic-form-fields [t-fields]=\"fields\" [t-value]=\"value\"></thf-dynamic-form-fields>\n\n</ng-template>\n\n<ng-template #uniqueFormTemplate>\n\n  <form #dynamicForm=\"ngForm\">\n\n    <thf-dynamic-form-fields [t-fields]=\"fields\" [t-value]=\"value\"></thf-dynamic-form-fields>\n\n  </form>\n\n</ng-template>\n"
                    }] }
        ];
        ThfDynamicFormComponent.propDecorators = {
            form: [{ type: core.ViewChild, args: ['dynamicForm', { static: false },] }]
        };
        return ThfDynamicFormComponent;
    }(ThfDynamicFormBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} smColumns
     * @param {?} mdColumns
     * @param {?} lgColumns
     * @param {?} xlColumns
     * @param {?} gridColumns
     * @return {?}
     */
    function getGridColumnsClasses(smColumns, mdColumns, lgColumns, xlColumns, gridColumns) {
        /** @type {?} */
        var systemGrid = {
            sm: smColumns || gridColumns || 12,
            md: mdColumns || gridColumns || 6,
            lg: lgColumns || gridColumns || 4,
            xl: xlColumns || gridColumns || 3
        };
        return "thf-sm-" + systemGrid.sm + " thf-md-" + systemGrid.md + " thf-lg-" + systemGrid.lg + " thf-xl-" + systemGrid.xl;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    function isVisibleField(field) {
        /** @type {?} */
        var containsVisible = 'visible' in field;
        return containsVisible ? field.visible : true;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ThfDynamicFieldType = {
        /** Valor booleano. */
        Boolean: 'boolean',
        /** Valor numérico que contém casas decimais e milhar. */
        Currency: 'currency',
        /** Valor para data. */
        Date: 'date',
        /** Valor para data e hora. */
        DateTime: 'datetime',
        /** Utilizado para informar/exibir hora. */
        Time: 'time',
        /** Valor númerico. */
        Number: 'number',
        /** Texto. */
        String: 'string',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfDynamicFormFieldsBaseComponent = /** @class */ (function () {
        function ThfDynamicFormFieldsBaseComponent(titleCasePipe) {
            this.titleCasePipe = titleCasePipe;
            this._value = {};
            this.visibleFields = [];
        }
        Object.defineProperty(ThfDynamicFormFieldsBaseComponent.prototype, "fields", {
            get: /**
             * @return {?}
             */
            function () {
                return this._fields;
            },
            // array de objetos que implementam a interface ThfDynamicFormField, que serão exibidos no componente.
            set: 
            // array de objetos que implementam a interface ThfDynamicFormField, que serão exibidos no componente.
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._fields = Array.isArray(value) ? __spread(value) : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDynamicFormFieldsBaseComponent.prototype, "value", {
            get: /**
             * @return {?}
             */
            function () {
                return this._value;
            },
            // valor que será utilizado para iniciar valor no componente.
            set: 
            // valor que será utilizado para iniciar valor no componente.
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._value = value && isTypeof(value, 'object') ? value : {};
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @param {?} compareTo
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.compareTo = /**
         * @param {?} value
         * @param {?} compareTo
         * @return {?}
         */
        function (value, compareTo) {
            return value === compareTo;
        };
        // retorna um array com os objetos configurados e visiveis.
        // retorna um array com os objetos configurados e visiveis.
        /**
         * @protected
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.getVisibleFields = 
        // retorna um array com os objetos configurados e visiveis.
        /**
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var visibleFields = [];
            this.fields.forEach((/**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                if (_this.existsProperty(visibleFields, field.property)) {
                    _this.printError("\"thf-dynamic-form\" property \"" + field.property + "\" est\u00E1 duplicado. Interface: ThfDynamicFormField.");
                    return;
                }
                if (!field['property']) {
                    _this.printError('"thf-dynamic-form" É obrigatório ser especificado um property.');
                    return;
                }
                if (isVisibleField(field)) {
                    visibleFields.push(_this.createField(field));
                }
            }));
            return visibleFields;
        };
        // converte um array em string para um array de objetos que contem label e value.
        // converte um array em string para um array de objetos que contem label e value.
        /**
         * @private
         * @param {?} options
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.convertOptions = 
        // converte um array em string para um array de objetos que contem label e value.
        /**
         * @private
         * @param {?} options
         * @return {?}
         */
        function (options) {
            /** @type {?} */
            var everyOptionString = options.every((/**
             * @param {?} option
             * @return {?}
             */
            function (option) { return typeof option === 'string'; }));
            if (everyOptionString) {
                return options.map((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) { return ({ label: value, value: value }); }));
            }
            return options;
        };
        // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
        // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.createField = 
        // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        function (field) {
            /** @type {?} */
            var control = this.getComponentControl(field);
            /** @type {?} */
            var options = !!field.options ? this.convertOptions(field.options) : undefined;
            /** @type {?} */
            var componentClass = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
            return __assign({ label: this.titleCasePipe.transform(field.property) }, field, { componentClass: componentClass,
                control: control,
                options: options });
        };
        /**
         * @private
         * @param {?} fields
         * @param {?} property
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.existsProperty = /**
         * @private
         * @param {?} fields
         * @param {?} property
         * @return {?}
         */
        function (fields, property) {
            return fields.some((/**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                return field.property === property;
            }));
        };
        // recupera o componente de acordo com algumas regras do field.
        // recupera o componente de acordo com algumas regras do field.
        /**
         * @private
         * @param {?=} field
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.getComponentControl = 
        // recupera o componente de acordo com algumas regras do field.
        /**
         * @private
         * @param {?=} field
         * @return {?}
         */
        function (field) {
            if (field === void 0) { field = (/** @type {?} */ ({})); }
            /** @type {?} */
            var type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
            if (this.isNumberType(field, type)) {
                return 'number';
            }
            else if (this.isCurrencyType(field, type)) {
                return 'decimal';
            }
            else if (this.isSelect(field)) {
                return 'select';
            }
            else if (this.isRadioGroup(field)) {
                return 'radioGroup';
            }
            else if (this.isCheckboxGroup(field)) {
                return 'checkboxGroup';
            }
            else if (this.isMultiselect(field)) {
                return 'multiselect';
            }
            else if (this.compareTo(type, ThfDynamicFieldType.Boolean)) {
                return 'switch';
            }
            else if (this.compareTo(type, ThfDynamicFieldType.Date) || this.compareTo(type, ThfDynamicFieldType.DateTime)) {
                return 'datepicker';
            }
            else if (this.compareTo(type, ThfDynamicFieldType.Time)) {
                field.mask = field.mask || '99:99';
                return 'input';
            }
            else if (this.isCombo(field)) {
                return 'combo';
            }
            else if (this.isLookup(field)) {
                return 'lookup';
            }
            else if (this.isTextarea(field)) {
                return 'textarea';
            }
            else if (this.isPassword(field)) {
                return 'password';
            }
            return 'input';
        };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.isCheckboxGroup = /**
         * @private
         * @param {?} field
         * @return {?}
         */
        function (field) {
            var optionsService = field.optionsService, optionsMulti = field.optionsMulti, options = field.options;
            return !optionsService && optionsMulti && !!options && options.length <= 3;
        };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.isCombo = /**
         * @private
         * @param {?} field
         * @return {?}
         */
        function (field) {
            var optionsService = field.optionsService;
            return !!optionsService && isTypeof(optionsService, 'string');
        };
        /**
         * @private
         * @param {?} field
         * @param {?} type
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.isCurrencyType = /**
         * @private
         * @param {?} field
         * @param {?} type
         * @return {?}
         */
        function (field, type) {
            var mask = field.mask, pattern = field.pattern;
            return this.compareTo(type, ThfDynamicFieldType.Currency) && (!mask && !pattern);
        };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.isLookup = /**
         * @private
         * @param {?} field
         * @return {?}
         */
        function (field) {
            var searchService = field.searchService;
            return !!searchService && isTypeof(searchService, 'string');
        };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.isMultiselect = /**
         * @private
         * @param {?} field
         * @return {?}
         */
        function (field) {
            var optionsService = field.optionsService, optionsMulti = field.optionsMulti, options = field.options;
            return !optionsService && optionsMulti && !!options && options.length > 3;
        };
        /**
         * @private
         * @param {?} field
         * @param {?} type
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.isNumberType = /**
         * @private
         * @param {?} field
         * @param {?} type
         * @return {?}
         */
        function (field, type) {
            var mask = field.mask, pattern = field.pattern;
            return this.compareTo(type, ThfDynamicFieldType.Number) && (!mask && !pattern);
        };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.isPassword = /**
         * @private
         * @param {?} field
         * @return {?}
         */
        function (field) {
            var secret = field.secret;
            return secret;
        };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.isRadioGroup = /**
         * @private
         * @param {?} field
         * @return {?}
         */
        function (field) {
            var optionsMulti = field.optionsMulti, options = field.options;
            return !optionsMulti && !!options && options.length <= 3;
        };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.isSelect = /**
         * @private
         * @param {?} field
         * @return {?}
         */
        function (field) {
            var optionsMulti = field.optionsMulti, options = field.options;
            return !optionsMulti && !!options && options.length > 3;
        };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.isTextarea = /**
         * @private
         * @param {?} field
         * @return {?}
         */
        function (field) {
            var rows = field.rows;
            return rows && rows >= 3;
        };
        /**
         * @private
         * @param {?} error
         * @return {?}
         */
        ThfDynamicFormFieldsBaseComponent.prototype.printError = /**
         * @private
         * @param {?} error
         * @return {?}
         */
        function (error) {
            console.error(error);
        };
        ThfDynamicFormFieldsBaseComponent.propDecorators = {
            fields: [{ type: core.Input, args: ['t-fields',] }],
            value: [{ type: core.Input, args: ['t-value',] }]
        };
        return ThfDynamicFormFieldsBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente de criação dos campos dinâmicos.
     */
    var ThfDynamicFormFieldsComponent = /** @class */ (function (_super) {
        __extends(ThfDynamicFormFieldsComponent, _super);
        function ThfDynamicFormFieldsComponent(titleCasePipe) {
            return _super.call(this, titleCasePipe) || this;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ThfDynamicFormFieldsComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.fields) {
                this.visibleFields = this.getVisibleFields();
            }
        };
        /**
         * @param {?} index
         * @return {?}
         */
        ThfDynamicFormFieldsComponent.prototype.trackBy = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            return index;
        };
        ThfDynamicFormFieldsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-dynamic-form-fields',
                        template: "<div class=\"thf-row\" *ngIf=\"visibleFields && visibleFields.length > 0\">\n  <ng-container *ngFor=\"let field of visibleFields; trackBy: trackBy\">\n\n    <thf-divider *ngIf=\"field?.divider?.trim()\" class=\"thf-sm-12\" [t-label]=\"field.divider\">\n    </thf-divider>\n\n    <thf-datepicker *ngIf=\"compareTo(field.control, 'datepicker')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      t-clean\n      [t-disabled]=\"field.disabled\"\n      [t-help]=\"field.help\"\n      [t-label]=\"field.label\"\n      [t-max-date]=\"field.maxValue\"\n      [t-min-date]=\"field.minValue\"\n      [t-required]=\"field.required\">\n    </thf-datepicker>\n\n    <thf-input *ngIf=\"compareTo(field.control, 'input')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      t-clean\n      [t-disabled]=\"field.disabled\"\n      [t-help]=\"field.help\"\n      [t-label]=\"field.label\"\n      [t-mask]=\"field.mask\"\n      [t-maxlength]=\"field.maxLength\"\n      [t-minlength]=\"field.minLength\"\n      [t-pattern]=\"field.pattern\"\n      [t-required]=\"field.required\">\n      </thf-input>\n\n    <thf-number *ngIf=\"compareTo(field.control, 'number')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      t-clean\n      [t-disabled]=\"field.disabled\"\n      [t-help]=\"field.help\"\n      [t-label]=\"field.label\"\n      [t-min]=\"field.minValue\"\n      [t-max]=\"field.maxValue\"\n      [t-maxlength]=\"field.maxLength\"\n      [t-minlength]=\"field.minLength\"\n      [t-required]=\"field.required\">\n    </thf-number>\n\n    <thf-decimal *ngIf=\"compareTo(field.control, 'decimal')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      t-clean\n      [t-disabled]=\"field.disabled\"\n      [t-help]=\"field.help\"\n      [t-label]=\"field.label\"\n      [t-required]=\"field.required\">\n    </thf-decimal>\n\n    <thf-select *ngIf=\"compareTo(field.control, 'select')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [t-disabled]=\"field.disabled\"\n      [t-help]=\"field.help\"\n      [t-label]=\"field.label\"\n      [t-options]=\"field.options\"\n      [t-required]=\"field.required\">\n    </thf-select>\n\n    <thf-radio-group *ngIf=\"compareTo(field.control, 'radioGroup')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      t-columns=\"3\"\n      [t-disabled]=\"field.disabled\"\n      [t-help]=\"field.help\"\n      [t-label]=\"field.label\"\n      [t-options]=\"field.options\"\n      [t-required]=\"field.required\">\n    </thf-radio-group>\n\n    <thf-switch *ngIf=\"compareTo(field.control, 'switch')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [t-disabled]=\"field.disabled\"\n      [t-help]=\"field.help\"\n      [t-label]=\"field.label\"\n      [t-label-off]=\"field.booleanFalse\"\n      [t-label-on]=\"field.booleanTrue\">\n    </thf-switch>\n\n    <thf-combo *ngIf=\"compareTo(field.control, 'combo')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [t-disabled]=\"field.disabled\"\n      [t-filter-service]=\"field.optionsService\"\n      [t-help]=\"field.help\"\n      [t-label]=\"field.label\"\n      [t-required]=\"field.required\">\n    </thf-combo>\n\n    <thf-lookup *ngIf=\"compareTo(field.control, 'lookup')\"\n      name=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      t-field-label=\"label\"\n      t-field-value=\"value\"\n      [ngClass]=\"field.componentClass\"\n      [t-columns]=\"field.columns\"\n      [t-disabled]=\"field.disabled\"\n      [t-filter-service]=\"field.searchService\"\n      [t-help]=\"field.help\"\n      [t-label]=\"field.label\"\n      [t-required]=\"field.required\">\n    </thf-lookup>\n\n    <thf-checkbox-group *ngIf=\"compareTo(field.control, 'checkboxGroup')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      t-columns=\"3\"\n      [t-disabled]=\"field.disabled\"\n      [t-help]=\"field.help\"\n      [t-label]=\"field.label\"\n      [t-options]=\"field.options\"\n      [t-required]=\"field.required\">\n    </thf-checkbox-group>\n\n    <thf-multiselect *ngIf=\"compareTo(field.control, 'multiselect')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [t-disabled]=\"field.disabled\"\n      [t-help]=\"field.help\"\n      [t-label]=\"field.label\"\n      [t-options]=\"field.options\"\n      [t-required]=\"field.required\">\n    </thf-multiselect>\n\n    <thf-textarea *ngIf=\"compareTo(field.control, 'textarea')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [t-disabled]=\"field.disabled\"\n      [t-help]=\"field.help\"\n      [t-label]=\"field.label\"\n      [t-maxlength]=\"field.maxLength\"\n      [t-minlength]=\"field.minLength\"\n      [t-required]=\"field.required\"\n      [t-rows]=\"field.rows\">\n    </thf-textarea>\n\n    <thf-password *ngIf=\"compareTo(field.control, 'password')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      t-clean\n      [t-disabled]=\"field.disabled\"\n      [t-help]=\"field.help\"\n      [t-label]=\"field.label\"\n      [t-maxlength]=\"field.maxLength\"\n      [t-minlength]=\"field.minLength\"\n      [t-required]=\"field.required\">\n  </thf-password>\n\n  </ng-container>\n</div>\n",
                        viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }]
                    }] }
        ];
        /** @nocollapse */
        ThfDynamicFormFieldsComponent.ctorParameters = function () { return [
            { type: common.TitleCasePipe }
        ]; };
        return ThfDynamicFormFieldsComponent;
    }(ThfDynamicFormFieldsBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     *
     * \@description
     *
     * Componente para listar dados dinamicamente a partir de uma lista de objetos.
     *
     * > Por padrão esse componente cria `thf-info` para exibição, é possível criar `thf-tag` passando a propriedade { tag: true }.
     *
     */
    var ThfDynamicViewBaseComponent = /** @class */ (function () {
        function ThfDynamicViewBaseComponent(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) {
            this.currencyPipe = currencyPipe;
            this.datePipe = datePipe;
            this.decimalPipe = decimalPipe;
            this.timePipe = timePipe;
            this.titleCasePipe = titleCasePipe;
            this._fields = [];
            this._showAllValue = false;
            this._value = {};
            this.visibleFields = [];
        }
        Object.defineProperty(ThfDynamicViewBaseComponent.prototype, "fields", {
            get: /**
             * @return {?}
             */
            function () {
                return this._fields;
            },
            /**
             * @optional
             *
             * @description
             *
             * Lista de objetos que implementam a interface `ThfDynamicView`.
             *
             * > Ex: `[ { property: 'age' } ]`
             *
             * Regras de tipagem e formatação dos valores exibidos:
             *
             * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
             * como formato padrão.
             * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
             * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
             * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
             * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
             *
             * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `t-value`.
             *
             * @default `[]`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Lista de objetos que implementam a interface `ThfDynamicView`.
             *
             * > Ex: `[ { property: 'age' } ]`
             *
             * Regras de tipagem e formatação dos valores exibidos:
             *
             * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
             * como formato padrão.
             * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
             * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
             * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
             * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
             *
             * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `t-value`.
             *
             * \@default `[]`
             * @param {?} fields
             * @return {?}
             */
            function (fields) {
                this._fields = Array.isArray(fields) ? __spread(fields) : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDynamicViewBaseComponent.prototype, "showAllValue", {
            get: /**
             * @return {?}
             */
            function () {
                return this._showAllValue;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `t-value`.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `t-value`.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._showAllValue = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfDynamicViewBaseComponent.prototype, "value", {
            get: /**
             * @return {?}
             */
            function () {
                return this._value;
            },
            /**
             * @description
             *
             * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
             * dos objetos contidos na propridade `t-fields`.
             *
             * > Ex: `{ age: '35' }`
             */
            set: /**
             * \@description
             *
             * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
             * dos objetos contidos na propridade `t-fields`.
             *
             * > Ex: `{ age: '35' }`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._value = value && isTypeof(value, 'object') ? value : {};
            },
            enumerable: true,
            configurable: true
        });
        // retorna os fields com os valores recuperados do objeto value.
        // retorna os fields com os valores recuperados do objeto value.
        /**
         * @protected
         * @return {?}
         */
        ThfDynamicViewBaseComponent.prototype.getConfiguredFields = 
        // retorna os fields com os valores recuperados do objeto value.
        /**
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var newFields = [];
            this.fields.forEach((/**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                if (isVisibleField(field)) {
                    newFields.push(_this.createField(field));
                }
            }));
            return newFields;
        };
        // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
        // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
        /**
         * @protected
         * @return {?}
         */
        ThfDynamicViewBaseComponent.prototype.getMergedFields = 
        // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
        /**
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var mergedFields = __spread(this.getConfiguredFields());
            this.getValueFields().forEach((/**
             * @param {?} valueField
             * @return {?}
             */
            function (valueField) {
                /** @type {?} */
                var fieldIndex = mergedFields.findIndex((/**
                 * @param {?} field
                 * @return {?}
                 */
                function (field) { return field.property === valueField.property; }));
                /** @type {?} */
                var property = valueField.property;
                if (fieldIndex === -1) {
                    mergedFields.push(_this.createField({ property: property }));
                }
            }));
            return mergedFields;
        };
        // retorna o objeto value como fields.
        // retorna o objeto value como fields.
        /**
         * @protected
         * @return {?}
         */
        ThfDynamicViewBaseComponent.prototype.getValueFields = 
        // retorna o objeto value como fields.
        /**
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            return Object.keys(this.value).map((/**
             * @param {?} property
             * @return {?}
             */
            function (property) {
                return _this.createField({ property: property });
            }));
        };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        ThfDynamicViewBaseComponent.prototype.createField = /**
         * @private
         * @param {?} field
         * @return {?}
         */
        function (field) {
            /** @type {?} */
            var property = field.property;
            /** @type {?} */
            var value = this.transformValue(field.type, this.value[property], field.format);
            /** @type {?} */
            var classesGridColumns = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
            return __assign({ property: property,
                value: value, label: this.titleCasePipe.transform(property), cssClass: classesGridColumns }, field);
        };
        /**
         * @private
         * @param {?} type
         * @param {?} value
         * @param {?} format
         * @return {?}
         */
        ThfDynamicViewBaseComponent.prototype.transformValue = /**
         * @private
         * @param {?} type
         * @param {?} value
         * @param {?} format
         * @return {?}
         */
        function (type, value, format) {
            /** @type {?} */
            var transformedValue = value;
            switch (type) {
                case 'currency':
                    transformedValue = this.currencyPipe.transform(value, format || 'BRL', 'symbol', '1.2-2');
                    break;
                case 'date':
                    transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy');
                    break;
                case 'dateTime':
                    transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy HH:mm:ss');
                    break;
                case 'number':
                    transformedValue = this.decimalPipe.transform(value, format);
                    break;
                case 'time':
                    transformedValue = this.timePipe.transform(value, format || 'HH:mm:ss.ffffff');
                    break;
            }
            return transformedValue;
        };
        ThfDynamicViewBaseComponent.propDecorators = {
            fields: [{ type: core.Input, args: ['t-fields',] }],
            showAllValue: [{ type: core.Input, args: ['t-show-all-value',] }],
            value: [{ type: core.Input, args: ['t-value',] }]
        };
        return ThfDynamicViewBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfDynamicViewBaseComponent
     *
     * \@example
     *
     * <example name="thf-dynamic-view-basic" title="Totvs Dynamic View Basic">
     *  <file name="sample-thf-dynamic-view-basic/sample-thf-dynamic-view-basic.component.html"> </file>
     *  <file name="sample-thf-dynamic-view-basic/sample-thf-dynamic-view-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-dynamic-view-employee" title="Totvs Dynamic View - Employee">
     *  <file name="sample-thf-dynamic-view-employee/sample-thf-dynamic-view-employee.component.html"> </file>
     *  <file name="sample-thf-dynamic-view-employee/sample-thf-dynamic-view-employee.component.ts"> </file>
     * </example>
     */
    var ThfDynamicViewComponent = /** @class */ (function (_super) {
        __extends(ThfDynamicViewComponent, _super);
        function ThfDynamicViewComponent(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) {
            return _super.call(this, currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) || this;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ThfDynamicViewComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.fields || changes.value || changes.showAllValue) {
                this.visibleFields = this.getVisibleFields();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfDynamicViewComponent.prototype.getVisibleFields = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.showAllValue) {
                return this.getMergedFields();
            }
            return this.value && this.fields.length ? this.getConfiguredFields() : this.getValueFields();
        };
        ThfDynamicViewComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-dynamic-view',
                        template: "<div class=\"thf-row\" *ngIf=\"visibleFields.length\">\n\n  <ng-template ngFor let-field [ngForOf]=\"visibleFields\">\n\n    <thf-divider *ngIf=\"field?.divider?.trim()\" class=\"thf-sm-12\" [t-label]=\"field.divider\">\n    </thf-divider>\n\n    <ng-container *ngTemplateOutlet=\"!field.tag ? thfInfo : thfTag; context: { $implicit: field }\">\n    </ng-container>\n\n  </ng-template>\n\n</div>\n\n<ng-template #thfInfo let-field>\n  <thf-info [ngClass]=\"field.cssClass\"\n    [t-label]=\"field.label\"\n    [t-value]=\"field.value\">\n  </thf-info>\n</ng-template>\n\n<ng-template #thfTag let-field>\n  <thf-tag [ngClass]=\"field.cssClass\"\n    [t-label]=\"field.label\"\n    [t-value]=\"field.value\">\n  </thf-tag>\n</ng-template>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfDynamicViewComponent.ctorParameters = function () { return [
            { type: common.CurrencyPipe },
            { type: common.DatePipe },
            { type: common.DecimalPipe },
            { type: ThfTimePipe },
            { type: common.TitleCasePipe }
        ]; };
        return ThfDynamicViewComponent;
    }(ThfDynamicViewBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfDynamicModule = /** @class */ (function () {
        function ThfDynamicModule() {
        }
        ThfDynamicModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            ThfDividerModule,
                            ThfInfoModule,
                            ThfFieldModule,
                            ThfTagModule,
                            ThfTimeModule
                        ],
                        declarations: [
                            ThfDynamicFormComponent,
                            ThfDynamicFormFieldsComponent,
                            ThfDynamicViewComponent
                        ],
                        exports: [
                            ThfDynamicFormComponent,
                            ThfDynamicViewComponent
                        ],
                        providers: [common.CurrencyPipe, common.DatePipe, common.DecimalPipe, ThfTimePipe, common.TitleCasePipe]
                    },] }
        ];
        return ThfDynamicModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfGridCellActionComponent = /** @class */ (function () {
        function ThfGridCellActionComponent() {
            this.position = '';
        }
        /**
         * @param {?} event
         * @return {?}
         */
        ThfGridCellActionComponent.prototype.onKeyDownContent = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // console.log('onKeyDownContent: ', event);
            // ENTER
            if (event.keyCode === 13) {
                event.preventDefault();
                // this.openActions(this.value);
                return;
            }
        };
        ThfGridCellActionComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-grid-cell-action',
                        template: "<div>\n  <div #contentElement [id]=\"position\"\n    class=\"thf-grid-cell-action-content\"\n    tabindex=\"0\"\n    (keydown)=\"onKeyDownContent($event)\">\n    <span>{{ value || '&nbsp;' }}</span>\n  </div>\n</div>\n\n",
                        styles: [".thf-grid-cell-action-content{border-bottom:1px solid #eceeee;border-left:none;border-right:1px solid #eceeee;border-top:none;font-family:NunitoSans;font-size:14px;height:44px;line-height:1.71;margin:0;max-height:44px;max-width:56px;min-height:44px;min-width:56px;padding:10px 16px;text-align:center;width:56px}.thf-grid-cell-action-content:focus{border:none;outline:#0c9abe solid 1px}"]
                    }] }
        ];
        /** @nocollapse */
        ThfGridCellActionComponent.ctorParameters = function () { return []; };
        ThfGridCellActionComponent.propDecorators = {
            position: [{ type: core.Input, args: ['t-position',] }],
            value: [{ type: core.Input, args: ['t-value',] }]
        };
        return ThfGridCellActionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfGridCellComponent = /** @class */ (function () {
        function ThfGridCellComponent(changeDetectorRef) {
            this.changeDetectorRef = changeDetectorRef;
            this._value = '';
            this.edit = false;
            this.editValue = '';
            this.align = 'left';
            this.freeze = false;
            this.tabIndex = -1;
            this.position = '';
            this.readonly = false;
            this.required = false;
            this.valueChange = new core.EventEmitter();
        }
        Object.defineProperty(ThfGridCellComponent.prototype, "width", {
            get: /**
             * @return {?}
             */
            function () {
                return this._width ? this._width + "px" : '100%';
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._width = value;
                if (this.freeze && !this._width) {
                    this._width = 100;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfGridCellComponent.prototype, "value", {
            get: /**
             * @return {?}
             */
            function () {
                return this._value;
            },
            // @Input('t-value') value?: string;
            set: 
            // @Input('t-value') value?: string;
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._value = value;
                this.valueChange.emit(this._value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        ThfGridCellComponent.prototype.onKeyDownContent = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // console.log('onKeyDownContent: ', event);
            // BACKSPACE / DELETE
            if ((!event.ctrlKey) && ((event.keyCode === 8) || (event.keyCode === 46))) {
                if (this.readonly) {
                    return;
                }
                event.preventDefault();
                this.value = '';
                return;
            }
            // ENTER
            if (event.keyCode === 13) {
                event.preventDefault();
                this.onEditCell(this.value);
                return;
            }
            // A..Z - 0..9
            if ((event.keyCode >= 65) && (event.keyCode <= 90) || (event.keyCode >= 48) && (event.keyCode <= 57)) {
                event.preventDefault();
                this.onEditCell(event.key);
                return;
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfGridCellComponent.prototype.dblclick = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // console.log('dblclick: ', event);
            event.preventDefault();
            this.onEditCell(this.value);
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfGridCellComponent.prototype.onBlurInput = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // console.log('onBlurInput: ', event);
            this.value = this.editValue;
            this.editValue = undefined;
            this.edit = false;
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfGridCellComponent.prototype.onKeyDownInput = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // console.log('onKeyDownInput: ', event);
            // ENTER
            if (event.keyCode === 13) {
                this.value = this.editValue;
                this.editValue = undefined;
                this.edit = false;
                this.changeDetectorRef.detectChanges();
                this.contentElement.nativeElement.focus();
            }
            // ESCAPE
            if (event.keyCode === 27) {
                this.editValue = undefined;
                this.edit = false;
                this.changeDetectorRef.detectChanges();
                this.contentElement.nativeElement.focus();
                event.stopPropagation();
            }
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfGridCellComponent.prototype.onEditCell = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.readonly) {
                return;
            }
            this.editValue = value;
            this.edit = true;
            this.changeDetectorRef.detectChanges();
            this.inputElement.nativeElement.focus();
        };
        ThfGridCellComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-grid-cell',
                        template: "<div>\n  <ng-container *ngIf=\"edit; then input; else content\"></ng-container>\n\n  <ng-template #content>\n    <div #contentElement\n      [id]=\"position\"\n      class=\"thf-grid-cell-content thf-grid-cell-{{ align }} {{ !value && required ? 'thf-grid-cell-required' : '' }}\"\n      (keydown)=\"onKeyDownContent($event)\"\n      tabindex=\"{{ readonly ? -1 : 0 }}\"\n      (dblclick)=dblclick($event)>\n      <span>{{ value || '&nbsp;' }}</span>\n    </div>\n  </ng-template>\n\n  <ng-template #input>\n    <input\n      [id]=\"position\"\n      #inputElement class=\"thf-grid-cell-input\"\n      [(ngModel)]=\"editValue\"\n      (keydown.arrowup)=\"$event.stopPropagation()\"\n      (keydown.arrowdown)=\"$event.stopPropagation()\"\n      (keydown.arrowleft)=\"$event.stopPropagation()\"\n      (keydown.arrowright)=\"$event.stopPropagation()\"\n      (keydown)=\"onKeyDownInput($event)\"\n      (blur)=\"onBlurInput($event)\">\n\n    <!-- <thf-input\n      #inputElement class=\"thf-grid-cell-input\"\n      [(ngModel)]=\"editValue\"\n      (keydown)=\"onKeyDownInput($event)\"\n      (t-blur)=\"onBlurInput($event)\">\n    </thf-input> -->\n  </ng-template>\n</div>\n\n",
                        styles: [".thf-grid-cell-content,.thf-grid-cell-input{border-bottom:1px solid #eceeee;border-left:none;border-right:1px solid #eceeee;border-top:none;font-family:NunitoSans;font-size:14px;height:44px;line-height:1.71;margin:0;overflow:hidden;padding:10px 16px;text-align:left;text-overflow:ellipsis;white-space:nowrap}.thf-grid-cell-center{text-align:center}.thf-grid-cell-right{text-align:right}.thf-grid-cell-content:focus{border:none;outline:#0c9abe solid 1px}.thf-grid-cell-required{border:1px dashed red}.thf-grid-cell-input{border:1px solid #0c9abe;box-shadow:0 0 4px 4px rgba(0,0,0,.1);outline:0;position:relative;min-width:100%;max-width:100%;width:100%}"]
                    }] }
        ];
        /** @nocollapse */
        ThfGridCellComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        ThfGridCellComponent.propDecorators = {
            align: [{ type: core.Input, args: ['t-align',] }],
            freeze: [{ type: core.Input, args: ['t-freeze',] }],
            tabIndex: [{ type: core.Input, args: ['t-tab-index',] }],
            position: [{ type: core.Input, args: ['t-position',] }],
            width: [{ type: core.Input, args: ['t-width',] }],
            readonly: [{ type: core.Input, args: ['t-readonly',] }],
            required: [{ type: core.Input, args: ['t-required',] }],
            valueChange: [{ type: core.Output, args: ['t-valueChange',] }],
            value: [{ type: core.Input, args: ['t-value',] }],
            inputElement: [{ type: core.ViewChild, args: ['inputElement', { static: true },] }],
            contentElement: [{ type: core.ViewChild, args: ['contentElement', { static: true },] }]
        };
        return ThfGridCellComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Componente grid.
     *
     * Ações / atalhos:
     *
     * - ARROW-UP: Navega para celula superior / Na ultima linha adiciona uma linha em branco no grid;
     * - ARROW-DOWN: Navega para celula inferior;
     * - ARROW-RIGHT: Navega para celula direita;
     * - ARROW-LEFT: Navega para celula esquerda;
     * - TAB: Navega para próxima celula;
     * - SHIFT+TAB: Navega para celula anterior;
     * - CTRL+DEL: Remove linha;
     * - DEL/BACKSPACE: Limpa celula;
     * - ENTER: Edita linha com valor atual/Confirma edição da celula;
     * - DOUBLE-CLICK: Edita linha com valor atual;
     * - ESC: Cancela edição da celula / Cancela inserção de linhas em branco;
     * - A..Z/0..9: Inicia edição com valor em branco.
     *
     * \@example
     *
     * <example name="thf-grid-basic" title="Totvs Grid Basic">
     *  <file name="sample-thf-grid-basic/sample-thf-grid-basic.component.html"> </file>
     *  <file name="sample-thf-grid-basic/sample-thf-grid-basic.component.ts"> </file>
     * </example>
     */
    var ThfGridComponent = /** @class */ (function () {
        function ThfGridComponent(changeDetectorRef, elRef, renderer) {
            var _this = this;
            this.changeDetectorRef = changeDetectorRef;
            this.elRef = elRef;
            this.lastCell = '0-0';
            this.lastRow = 0;
            this.lastColumn = 0;
            this.currencyCell = '0-0';
            this.currencyRow = 0;
            this.currencyColumn = 0;
            this.logger = false;
            this.width = '100%';
            this.widthFreeze = 0;
            this.widthActions = 0;
            this._columns = [];
            /**
             * \@description
             *
             * Ações disparadas quando uma linha do grid é manipulada.
             */
            this.rowActions = {};
            /**
             * Lista com os dados que serão exibidos no grid.
             */
            this.data = [];
            this.debounceResize();
            this.resizeListener = renderer.listen('window', 'resize', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.debounceResize();
            }));
        }
        Object.defineProperty(ThfGridComponent.prototype, "columns", {
            get: /**
             * @return {?}
             */
            function () {
                return this._columns.filter((/**
                 * @param {?} column
                 * @return {?}
                 */
                function (column) { return column.freeze !== true && column.action !== true; }));
            },
            /**
             * Colunas exibidas no grid.
             */
            set: /**
             * Colunas exibidas no grid.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._columns = __spread(value);
                this._columns.forEach((/**
                 * @param {?} column
                 * @return {?}
                 */
                function (column) {
                    column.label = column.label || column.property;
                    if (column.freeze === true) {
                        column.cssWidth = (column.width || 100) + "px";
                    }
                    else {
                        column.cssWidth = column.width ? column.width + "px" : '100%';
                    }
                }));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfGridComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.resizeListener) {
                this.resizeListener();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfGridComponent.prototype.debounceResize = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var widthTableWrapper = _this.tableWrapper.nativeElement.offsetWidth;
                _this.width = widthTableWrapper - (_this.widthFreeze + 8) - _this.widthActions + "px";
            }), 100);
        };
        Object.defineProperty(ThfGridComponent.prototype, "freezeColumns", {
            get: /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var freezeColumns = this._columns.filter((/**
                 * @param {?} column
                 * @return {?}
                 */
                function (column) { return column.freeze === true; }));
                this.widthFreeze = freezeColumns.reduce((/**
                 * @param {?} prev
                 * @param {?} current
                 * @return {?}
                 */
                function (prev, current) { return prev + (current.width || 100); }), 0);
                return freezeColumns;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfGridComponent.prototype, "actionColumns", {
            get: /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var actionsColumns = this._columns.filter((/**
                 * @param {?} column
                 * @return {?}
                 */
                function (column) { return column.action === true; }));
                this.widthActions = actionsColumns.length > 0 ? 56 : 0;
                return actionsColumns;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @param {?} row
         * @return {?}
         */
        ThfGridComponent.prototype.cancelRow = /**
         * @param {?} event
         * @param {?} row
         * @return {?}
         */
        function (event, row) {
            var _this = this;
            /** @type {?} */
            var el = event.path.find((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return element.id; }));
            if (!el) {
                return;
            }
            var _a = __read((el.id).split('-'), 1), x = _a[0];
            if (this.isEmptyRow(x)) {
                if (!this.removeRow(event, row)) {
                    return;
                }
                this.currencyObj = Object.assign({}, this.data[this.currencyRow - 1]);
            }
            else {
                this.data[+x - 1] = Object.assign({}, this.currencyObj);
                setTimeout((/**
                 * @return {?}
                 */
                function () { return _this.selectCell(_this.currencyRow, _this.currencyColumn); }));
            }
        };
        /**
         * @param {?} event
         * @param {?} row
         * @return {?}
         */
        ThfGridComponent.prototype.removeRow = /**
         * @param {?} event
         * @param {?} row
         * @return {?}
         */
        function (event, row) {
            if (this.rowActions.beforeRemove && !this.rowActions.beforeRemove(Object.assign({}, row))) {
                return false;
            }
            /** @type {?} */
            var index = this.data.indexOf(row);
            this.data.splice(index, 1);
            this.changeDetectorRef.detectChanges();
            if ((this.data.length === 0) || (index === this.data.length)) {
                this.selectCell(this.currencyRow - 1, this.currencyColumn);
            }
            else {
                this.selectCell(this.currencyRow, this.currencyColumn);
            }
            return true;
        };
        /**
         * @param {?} event
         * @param {?} direction
         * @return {?}
         */
        ThfGridComponent.prototype.tableKeydown = /**
         * @param {?} event
         * @param {?} direction
         * @return {?}
         */
        function (event, direction) {
            var _a = __read(event.target.id.split('-'), 2), row = _a[0], col = _a[1];
            row = +row;
            col = +col;
            /** @type {?} */
            var prow = +row;
            /** @type {?} */
            var pcol = +col;
            // event.preventDefault();
            // event.stopPropagation();
            // debugger;
            if (direction === 'down') {
                if (row <= this.data.length) {
                    prow++;
                }
                if (row === this.data.length) {
                    if (row === 0 || !this.isEmptyRow(row)) {
                        if (this.saveRow(row)) {
                            if (!this.insertRow()) {
                                return;
                            }
                        }
                        else {
                            return;
                        }
                    }
                    else {
                        prow--;
                    }
                }
            }
            else if ((direction === 'up') && (row > 0)) {
                prow--;
            }
            else if ((direction === 'left') && (col > 0)) {
                pcol--;
            }
            else if ((direction === 'right') && (col < this._columns.length - 1)) {
                pcol++;
            }
            else if (direction === 'next') {
                if (col < this._columns.length - 1) {
                    pcol++;
                    event.preventDefault();
                }
                else if (row < this.data.length) {
                    pcol = 0;
                    prow++;
                    event.preventDefault();
                }
            }
            else if (direction === 'prior') {
                if (col > 0) {
                    pcol--;
                    event.preventDefault();
                }
                else if (row > 0) {
                    pcol = this._columns.length - 1;
                    prow--;
                    event.preventDefault();
                }
            }
            if (this.currencyCell === prow + "-" + pcol) {
                // console.log('vazou');
                return;
            }
            // debugger;
            if (prow !== this.currencyRow && row > 0 && this.data.length >= row) {
                if (!this.isEmptyRow(row)) {
                    if (!this.saveRow(row)) {
                        return;
                    }
                }
                else {
                    if (!this.removeRow(event, row)) {
                        return;
                    }
                }
            }
            if (this.currencyRow !== prow) {
                this.currencyObj = Object.assign({}, this.data[prow - 1]);
                // console.log('mudou de linha');
            }
            this.lastCell = event.target.id;
            this.lastRow = row;
            this.lastColumn = col;
            this.selectCell(prow, pcol);
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfGridComponent.prototype.tableClick = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var el = event.path.find((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return element.id; }));
            if (!el) {
                this.selectCell(this.currencyRow, this.currencyColumn);
                return;
            }
            if (this.currencyCell === el.id) {
                return;
            }
            var _a = __read((el.id).split('-'), 2), row = _a[0], col = _a[1];
            /** @type {?} */
            var prow = +row;
            /** @type {?} */
            var pcol = +col;
            if (prow !== this.currencyRow) {
                if (this.currencyRow > 0) {
                    if (!this.isEmptyRow(this.currencyRow)) {
                        if (!this.saveRow(this.currencyRow)) {
                            this.selectCell(this.currencyRow, this.currencyColumn);
                            return;
                        }
                    }
                    else {
                        if (!this.removeRow(event, row)) {
                            return;
                        }
                    }
                }
                this.currencyObj = Object.assign({}, this.data[prow - 1]);
                // console.log('>>>>>>> ', prow - 1);
            }
            this.lastCell = this.currencyCell;
            this.lastRow = this.currencyRow;
            this.lastColumn = this.currencyColumn;
            this.currencyCell = el.id;
            this.currencyRow = prow;
            this.currencyColumn = pcol;
        };
        /**
         * @param {?} row
         * @return {?}
         */
        ThfGridComponent.prototype.saveRow = /**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            // console.log(this.data[row - 1]);
            var _this = this;
            // console.log(this.data[row - 1]);
            /** @type {?} */
            var obj = this.data[row - 1];
            if (!Object.keys(obj).some((/**
             * @param {?} prop
             * @return {?}
             */
            function (prop) { return obj[prop] !== _this.currencyObj[prop]; }))) {
                // console.log('tudo igual');
                return true;
            }
            if (this.rowActions.beforeSave && !this.rowActions.beforeSave(obj, this.currencyObj)) {
                return false;
            }
            /** @type {?} */
            var requireds = [];
            this.columns.forEach((/**
             * @param {?} column
             * @return {?}
             */
            function (column) {
                if (column.required === true && !obj[column.property]) {
                    requireds.push(column.property);
                }
            }));
            return requireds.length === 0;
        };
        /**
         * @return {?}
         */
        ThfGridComponent.prototype.insertRow = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var obj = {};
            if (this.rowActions.beforeInsert && !this.rowActions.beforeInsert(obj)) {
                return false;
            }
            // this.currencyObj = Object.assign({}, obj);
            this.data.push(obj);
            this.changeDetectorRef.detectChanges();
            return true;
        };
        /**
         * @param {?} row
         * @return {?}
         */
        ThfGridComponent.prototype.isEmptyRow = /**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            /** @type {?} */
            var obj = this.data[row - 1];
            if (!obj) { // title
                return false;
            }
            /** @type {?} */
            var filled = Object.keys(obj).some((/**
             * @param {?} property
             * @return {?}
             */
            function (property) { return obj[property]; }));
            return !filled;
        };
        /**
         * @param {?} row
         * @param {?} col
         * @return {?}
         */
        ThfGridComponent.prototype.selectCell = /**
         * @param {?} row
         * @param {?} col
         * @return {?}
         */
        function (row, col) {
            /** @type {?} */
            var nextCell = this.elRef.nativeElement.querySelector("[id='" + row + "-" + col + "']");
            if (nextCell) {
                this.currencyCell = row + "-" + col;
                this.currencyRow = row;
                this.currencyColumn = col;
                nextCell.focus();
            }
        };
        ThfGridComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-grid',
                        template: "<div class=\"thf-grid-wrapper thf-grid-row-wrapper\" #wrapper>\n\n  <div *ngIf=\"logger\">\n    lastCell: {{ lastCell }} | currencyCell: {{ currencyCell }} <br>\n    lastRow: {{ lastRow }} | currencyRow: {{ currencyRow }} <br>\n    lastColumn: {{ lastColumn }} | currencyColumn: {{ currencyColumn }} <br>\n    <hr>\n    currencyObj: {{ currencyObj | json }}\n    <hr>\n  </div>\n\n  <div class=\"thf-grid\">\n    <div class=\"thf-grid-body\">\n      <div class=\"thf-grid-row\"\n        #table\n        (keydown.arrowup)=\"tableKeydown($event, 'up')\"\n        (keydown.arrowdown)=\"tableKeydown($event, 'down')\"\n        (keydown.arrowleft)=\"tableKeydown($event, 'left')\"\n        (keydown.arrowright)=\"tableKeydown($event, 'right')\"\n        (keydown.tab)=\"tableKeydown($event, 'next')\"\n        (keydown.shift.tab)=\"tableKeydown($event, 'prior')\"\n        (click)=\"tableClick($event)\"\n        (contextmenu)=\"tableClick($event)\"\n        (dblclick)=\"tableClick($event)\">\n\n        <div class=\"thf-grid-cell thf-grid-cell-freeze\" *ngIf=\"freezeColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divFreezeColumns\"></ng-container>\n        </div>\n\n        <div class=\"thf-grid-cell thf-grid-cell-normal\"\n          [style.width]=\"width\" [style.max-width]=\"width\" [style.min-width]=\"width\">\n          <ng-container *ngTemplateOutlet=\"divColumns\"></ng-container>\n        </div>\n\n        <div class=\"thf-grid-cell thf-grid-cell-action\" *ngIf=\"actionColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divActionColumns\"></ng-container>\n        </div>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- <div class=\"thf-grid-footer-wrapper\">\n    <div class=\"thf-grid-footer\">\n      <div class=\"links\"><a href=\"#\">RODAP\u00C9</a></div>\n    </div>\n  </div> -->\n\n</div>\n\n<!-- Coluna com as colunas congeladas -->\n<ng-template #divFreezeColumns>\n  <div class=\"thf-grid thf-grid-freeze\">\n    <div class=\"thf-grid-header-group\">\n      <div class=\"thf-grid-row\">\n        <thf-grid-head *ngFor=\"let column of freezeColumns; index as i\" class=\"thf-grid-title\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          t-freeze=\"true\"\n          t-position=\"{{ '0-' + i }}\"\n          [t-width]=\"column.width\"\n          [t-align]=\"column.align\"\n          [t-title]=\"column.label\">\n        </thf-grid-head>\n      </div>\n    </div>\n\n    <div class=\"thf-grid-body\">\n      <div class=\"thf-grid-row\" *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\">\n        <thf-grid-cell *ngFor=\"let column of freezeColumns; index as i\" class=\"thf-grid-cell\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          t-freeze=\"true\"\n          [t-align]=\"column.align\"\n          [t-readonly]=\"column.readonly\"\n          [t-required]=\"column.required\"\n          t-position=\"{{ (j + 1) + '-' + i }}\"\n          [t-width]=\"column.width\"\n          [(t-value)]=\"row[column.property]\">\n        </thf-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas congeladas -->\n\n<!-- Coluna com as colunas nornais -->\n<ng-template #divColumns>\n  <div class=\"thf-grid thf-grid-normal\">\n    <div class=\"thf-grid-header-group\">\n      <div class=\"thf-grid-row\">\n        <thf-grid-head *ngFor=\"let column of columns; index as i\" class=\"thf-grid-title\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          [t-align]=\"column.align\"\n          t-position=\"{{ '0-' + (i + freezeColumns.length) }}\"\n          [t-title]=\"column.label\"\n          [t-width]=\"column.width\">\n        </thf-grid-head>\n      </div>\n    </div>\n\n    <div class=\"thf-grid-body\">\n      <div class=\"thf-grid-row\" *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\">\n        <thf-grid-cell *ngFor=\"let column of columns; index as i\" class=\"thf-grid-cell\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          [t-align]=\"column.align\"\n          [t-readonly]=\"column.readonly\"\n          [t-required]=\"column.required\"\n          t-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length) }}\"\n          [(t-value)]=\"row[column.property]\"\n          [t-width]=\"column.width\">\n        </thf-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas nornais -->\n\n<!-- Coluna com as colunas de a\u00E7\u00E3o -->\n<ng-template #divActionColumns>\n    <div class=\"thf-grid thf-grid-actions\">\n      <div class=\"thf-grid-header-group\">\n        <div class=\"thf-grid-row\">\n          <thf-grid-head *ngFor=\"let column of actionColumns; index as i\" class=\"thf-grid-title\"\n            t-position=\"{{ '0-' + (i + freezeColumns.length + columns.length) }}\"\n            [t-title]=\"column.label\"\n            [t-align]=\"column.align\">\n          </thf-grid-head>\n        </div>\n      </div>\n\n      <div class=\"thf-grid-body\">\n        <div class=\"thf-grid-row\" *ngFor=\"let row of data; index as j\"\n          (keydown.control.delete)=\"removeRow($event, row)\"\n          (keydown.esc)=\"cancelRow($event, row)\">\n          <thf-grid-cell-action *ngFor=\"let column of actionColumns; index as i\" class=\"thf-grid-cell\"\n            t-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length + columns.length) }}\"\n            [t-value]=\"row[column.property]\">\n          </thf-grid-cell-action>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n  <!-- FIM: Coluna com as colunas de a\u00E7\u00E3o -->\n",
                        styles: [".thf-grid-wrapper{overflow:auto;border:1px solid #eceeee}.thf-grid{display:table;border-right:none;border-bottom:none}.thf-grid-cell-normal::-webkit-scrollbar,.thf-grid-row-wrapper::-webkit-scrollbar{border-radius:2px;height:4px;opacity:.5;width:4px}.thf-grid-cell-normal::-webkit-scrollbar-thumb,.thf-grid-row-wrapper::-webkit-scrollbar-thumb{background-color:#0c9abe}.thf-grid .fixed{display:table}.thf-grid-header-group{display:table-header-group}.thf-grid-body{display:table-row-group}.thf-grid-row{display:table-row}.thf-grid-cell,.thf-grid-title{display:table-cell;border:none}.thf-grid-cell-freeze{border-right:2px solid #ceeaf2}.thf-grid-cell-action{color:#00f;border-left:2px solid #ceeaf2}.thf-grid-actions,.thf-grid-freeze,.thf-grid-normal{width:100%}.thf-grid-cell-normal{overflow:auto}.thf-grid-footer{display:table-footer-group}.thf-grid-footer-wrapper{border:1px solid #eceeee;border-top:none}"]
                    }] }
        ];
        /** @nocollapse */
        ThfGridComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        ThfGridComponent.propDecorators = {
            tableElement: [{ type: core.ViewChild, args: ['table', { static: true },] }],
            tableWrapper: [{ type: core.ViewChild, args: ['wrapper', { static: true },] }],
            rowActions: [{ type: core.Input, args: ['t-row-actions',] }],
            columns: [{ type: core.Input, args: ['t-columns',] }],
            data: [{ type: core.Input, args: ['t-data',] }]
        };
        return ThfGridComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfGridHeadComponent = /** @class */ (function () {
        function ThfGridHeadComponent(changeDetectorRef) {
            this.changeDetectorRef = changeDetectorRef;
            this.align = 'left';
            this.boolean = false;
            this.position = '';
            this.tabIndex = -1;
        }
        Object.defineProperty(ThfGridHeadComponent.prototype, "width", {
            get: /**
             * @return {?}
             */
            function () {
                return this._width ? this._width + "px" : '100%';
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._width = value;
            },
            enumerable: true,
            configurable: true
        });
        ThfGridHeadComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-grid-head',
                        template: "<div>\n  <div [id]=\"position\"\n    class=\"thf-grid-head-content thf-grid-head-{{ align }}\"\n    tabindex=\"{{ title ? 0 : -1 }}\">\n    <span>{{ title || '&nbsp;' }}</span>\n  </div>\n</div>\n\n",
                        styles: [".thf-grid-head-content{border-bottom:2px solid #ceeaf2;border-left:none;border-right:1px solid #eceeee;border-top:none;color:#0c9abe;font-family:NunitoSans-bold;font-size:14px;height:44px;line-height:1.71;margin:0;max-height:44px;min-height:44px;overflow:hidden;padding:10px 16px;text-align:left;text-overflow:ellipsis;white-space:nowrap}.thf-grid-head-center{text-align:center}.thf-grid-head-right{text-align:right}.thf-grid-head-content:focus{border:1px solid #0c9abe;outline:0}"]
                    }] }
        ];
        /** @nocollapse */
        ThfGridHeadComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        ThfGridHeadComponent.propDecorators = {
            align: [{ type: core.Input, args: ['t-align',] }],
            boolean: [{ type: core.Input, args: ['t-freeze',] }],
            position: [{ type: core.Input, args: ['t-position',] }],
            tabIndex: [{ type: core.Input, args: ['t-tab-index',] }],
            width: [{ type: core.Input, args: ['t-width',] }],
            title: [{ type: core.Input, args: ['t-title',] }]
        };
        return ThfGridHeadComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente thf-grid.
     */
    var ThfGridModule = /** @class */ (function () {
        function ThfGridModule() {
        }
        ThfGridModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            ThfFieldModule
                        ],
                        declarations: [
                            ThfGridCellActionComponent,
                            ThfGridCellComponent,
                            ThfGridComponent,
                            ThfGridHeadComponent
                        ],
                        exports: [
                            ThfGridComponent
                        ]
                    },] }
        ];
        return ThfGridModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfListViewLiteralsDefault = {
        en: (/** @type {?} */ ({
            hideDetails: 'Hide details',
            loadMoreData: 'Load more data',
            noData: 'No data found',
            selectAll: 'Select all',
            showDetails: 'Show details'
        })),
        es: (/** @type {?} */ ({
            hideDetails: 'Ocultar detalles',
            loadMoreData: 'Cargar más resultados',
            noData: 'Datos no encontrados',
            selectAll: 'Seleccionar todos',
            showDetails: 'Mostrar detalles'
        })),
        pt: (/** @type {?} */ ({
            hideDetails: 'Ocultar detalhes',
            loadMoreData: 'Carregar mais resultados',
            noData: 'Nenhum dado encontrado',
            selectAll: 'Selecionar todos',
            showDetails: 'Exibir detalhes'
        }))
    };
    /**
     * \@description
     *
     * Componente de lista que recebe um array de objetos e renderiza de forma dinâmica os dados de
     * acordo com a necessidade de cada tela e deve ser utilizado em conjunto com as diretivas de *templates*
     *  **[t-list-view-content-template](/documentation/thf-list-view-content-template)** e
     * **[t-list-view-detail-template](/documentation/thf-list-view-detail-template)**.
     *
     * O componente disponibiliza uma área específica para exibição informações adicionais,
     * através da diretiva **[t-list-view-detail-template](/documentation/thf-list-view-detail-template)**.
     */
    var ThfListViewBaseComponent = /** @class */ (function () {
        function ThfListViewBaseComponent() {
            this.selectAll = false;
            this.showHeader = false;
            /**
             * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
             *
             * > Caso nenhuma ação for definida o mesmo não ficará visível.
             */
            this.showMore = new core.EventEmitter();
            /**
             * Ação que será executada ao clicar no título.
             *
             * Ao ser disparado, o método inserido na ação irá receber como parâmetro o item da lista clicado.
             */
            this.titleAction = new core.EventEmitter();
        }
        Object.defineProperty(ThfListViewBaseComponent.prototype, "actions", {
            get: /**
             * @return {?}
             */
            function () {
                return this._actions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Lista de ações que serão exibidas no componente.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Lista de ações que serão exibidas no componente.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._actions = Array.isArray(value) ? value : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfListViewBaseComponent.prototype, "height", {
            get: /**
             * @return {?}
             */
            function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura do `thf-list-view` em *pixels*.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define a altura do `thf-list-view` em *pixels*.
             * @param {?} height
             * @return {?}
             */
            function (height) {
                this._height = height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfListViewBaseComponent.prototype, "hideSelectAll", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hideSelectAll;
            },
            /**
             * @description
             *
             * Esconde o *checkbox* para seleção de todos os itens.
             *
             * @default `false`
             */
            set: /**
             * \@description
             *
             * Esconde o *checkbox* para seleção de todos os itens.
             *
             * \@default `false`
             * @param {?} hideSelectAll
             * @return {?}
             */
            function (hideSelectAll) {
                this._hideSelectAll = convertToBoolean(hideSelectAll);
                this.showMainHeader();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfListViewBaseComponent.prototype, "items", {
            get: /**
             * @return {?}
             */
            function () {
                return this._items;
            },
            /** Lista de itens que serão exibidos no componente. */
            set: /**
             * Lista de itens que serão exibidos no componente.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._items = Array.isArray(value) ? value : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfListViewBaseComponent.prototype, "literals", {
            get: /**
             * @return {?}
             */
            function () {
                return this._literals || thfListViewLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `thf-list-view`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfListViewLiterals = {
             *    hideDetail: 'Ocultar detalhes completamente',
             *    loadMoreData: 'Mais dados',
             *    showDetail: 'Mostrar mais detalhes',
             *    selectAll: 'Selecionar todos os itens'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfListViewLiterals = {
             *    showDetail: 'Mostrar mais detalhes'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-list-view
             *   [t-literals]="customLiterals">
             * </thf-list-view>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Objeto com as literais usadas no `thf-list-view`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfListViewLiterals = {
             *    hideDetail: 'Ocultar detalhes completamente',
             *    loadMoreData: 'Mais dados',
             *    showDetail: 'Mostrar mais detalhes',
             *    selectAll: 'Selecionar todos os itens'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfListViewLiterals = {
             *    showDetail: 'Mostrar mais detalhes'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-list-view
             *   [t-literals]="customLiterals">
             * </thf-list-view>
             * ```
             *
             * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign({}, thfListViewLiteralsDefault[thfLocaleDefault], thfListViewLiteralsDefault[browserLanguage()], value);
                }
                else {
                    this._literals = thfListViewLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfListViewBaseComponent.prototype, "select", {
            get: /**
             * @return {?}
             */
            function () {
                return this._select;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
             * item está selecionado, por exemplo:
             *
             * ```
             *  item.$selected
             *
             *  // ou
             *
             *  item['$selected']
             * ```
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
             * item está selecionado, por exemplo:
             *
             * ```
             *  item.$selected
             *
             *  // ou
             *
             *  item['$selected']
             * ```
             *
             * \@default `false`
             * @param {?} select
             * @return {?}
             */
            function (select) {
                this._select = convertToBoolean(select);
                this.showMainHeader();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfListViewBaseComponent.prototype, "showMoreDisabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._showMoreDisabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Indica que o botão `Carregar Mais Resultados` será desabilitado.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Indica que o botão `Carregar Mais Resultados` será desabilitado.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._showMoreDisabled = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} listViewAction
         * @param {?} item
         * @return {?}
         */
        ThfListViewBaseComponent.prototype.onClickAction = /**
         * @param {?} listViewAction
         * @param {?} item
         * @return {?}
         */
        function (listViewAction, item) {
            /** @type {?} */
            var cleanItem = this.deleteInternalAttrs(item);
            if (listViewAction.action) {
                listViewAction.action(cleanItem);
            }
        };
        /**
         * @return {?}
         */
        ThfListViewBaseComponent.prototype.onShowMore = /**
         * @return {?}
         */
        function () {
            this.showMore.emit();
        };
        /**
         * @param {?} listItem
         * @return {?}
         */
        ThfListViewBaseComponent.prototype.runTitleAction = /**
         * @param {?} listItem
         * @return {?}
         */
        function (listItem) {
            /** @type {?} */
            var itemWithPublicProperties = this.deleteInternalAttrs(listItem);
            this.titleAction.emit(itemWithPublicProperties);
        };
        /**
         * @return {?}
         */
        ThfListViewBaseComponent.prototype.selectAllListItems = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.hideSelectAll) {
                this.selectAll = !this.selectAll;
                this.items.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    item.$selected = _this.selectAll;
                }));
            }
        };
        /**
         * @param {?} row
         * @return {?}
         */
        ThfListViewBaseComponent.prototype.selectListItem = /**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            row.$selected = !row.$selected;
            this.selectAll = this.checkIfItemsAreSelected(this.items);
        };
        /**
         * @private
         * @param {?} item
         * @return {?}
         */
        ThfListViewBaseComponent.prototype.deleteInternalAttrs = /**
         * @private
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var itemCopy = item ? __assign({}, item) : undefined;
            for (var key in itemCopy) {
                if (itemCopy.hasOwnProperty(key) && key.startsWith('$')) {
                    delete itemCopy[key];
                }
            }
            return itemCopy;
        };
        /**
         * @private
         * @param {?} items
         * @return {?}
         */
        ThfListViewBaseComponent.prototype.checkIfItemsAreSelected = /**
         * @private
         * @param {?} items
         * @return {?}
         */
        function (items) {
            /** @type {?} */
            var someCheckedOrIndeterminate = (/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.$selected || item.$selected === null; });
            /** @type {?} */
            var everyChecked = (/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.$selected; });
            if (items.every(everyChecked)) {
                return true;
            }
            if (items.some(someCheckedOrIndeterminate)) {
                return null;
            }
            return false;
        };
        /**
         * @private
         * @return {?}
         */
        ThfListViewBaseComponent.prototype.showMainHeader = /**
         * @private
         * @return {?}
         */
        function () {
            this.showHeader = !!(this.select && !this.hideSelectAll && this.items && this.items.length);
        };
        ThfListViewBaseComponent.propDecorators = {
            actions: [{ type: core.Input, args: ['t-actions',] }],
            height: [{ type: core.Input, args: ['t-height',] }],
            hideSelectAll: [{ type: core.Input, args: ['t-hide-select-all',] }],
            items: [{ type: core.Input, args: ['t-items',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }],
            propertyLink: [{ type: core.Input, args: ['t-property-link',] }],
            propertyTitle: [{ type: core.Input, args: ['t-property-title',] }],
            select: [{ type: core.Input, args: ['t-select',] }],
            showMoreDisabled: [{ type: core.Input, args: ['t-show-more-disabled',] }],
            showMore: [{ type: core.Output, args: ['t-show-more',] }],
            titleAction: [{ type: core.Output, args: ['t-title-action',] }]
        };
        return ThfListViewBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@usedBy ThfListViewComponent
     *
     * \@description
     *
     * Esta diretiva permite que sejam apresentadas informações essenciais de cada item.
     *
     * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
     *  - Item: `item` determina o item da linha corrente.
     *  - Índice: `index` determina o índice da linha corrente.
     *
     * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <thf-list-view
     *   t-property-title="name"
     *   [t-items]="[{id: 1, name: "Register", email: register\@totvs.com}]">
     *
     *   <ng-template t-list-view-content-template let-item let-code="index">
     *     <div class="thf-row">
     *       <thf-info class="thf-md-6" t-label="Code" [t-value]="code"></thf-info>
     *       <thf-info class="thf-md-6" t-label="Email" [t-value]="item.email"></thf-info>
     *     </div>
     *   </ng-template>
     *
     * </thf-list-view>
     *
     * ...
     * ```
     *
     * ```
     * ...
     * <thf-list-view
     *    t-property-title="name"
     *    [t-items]="[{id: 1, name: "Register", email: register\@totvs.com}]">
     *
     *    <div *t-list-view-content-template="let item, let i=index" class="thf-row">
     *      <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
     *    </div>
     * </thf-list-view>
     * ...
     *
     * ```
     *
     * A diretiva **t-list-view-content-template**, possibilita também alterar o título dos itens. Para isto,
     * é necessário atribuir a referência da função que faz a alteração, à propriedade `t-title`,
     * a mesma deve retornar um valor do tipo *string*. Veja o exemplo a seguir:
     *
     * ```
     * ...
     * \@Component({
     *    selector: 'app-root',
     *    template: `
     *      ...
     *      <thf-list-view
     *        [t-items]="items">
     *        <ng-template t-list-view-content-template let-item [t-title]="customTitle">
     *          <div class="thf-row">
     *            <thf-info class="thf-md-12" t-label="Customer" [t-value]="item.customer"></thf-info>
     *          </div>
     *        </ng-template>
     *      ...
     *    `
     * })
     * export class AppComponent {
     *    public items = [{
     *      code: 1200,
     *      product: 'Rice',
     *      customer: 'Supermarket 1',
     *    }, {
     *      code: 1355,
     *      product: 'Bean',
     *      customer: 'Supermarket 2'
     *    }];
     *
     *    customTitle(item) {
     *      return `${item.code} - ${item.product}`;
     *    }
     * }
     * ```
     */
    var ThfListViewContentTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function ThfListViewContentTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        ThfListViewContentTemplateDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[t-list-view-content-template]'
                    },] }
        ];
        /** @nocollapse */
        ThfListViewContentTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        ThfListViewContentTemplateDirective.propDecorators = {
            title: [{ type: core.Input, args: ['t-title',] }]
        };
        return ThfListViewContentTemplateDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@usedBy ThfListViewComponent
     *
     * \@description
     *
     * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
     * botão `Exibir detalhes` abaixo do conteúdo principal do item.
     *
     * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
     *  - Item: `item` determina o item da linha corrente.
     *  - Índice: `index` determina o índice da linha corrente.
     *
     * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <thf-list-view
     *   t-property-title="name"
     *   [t-items]="items">
     *
     *   <ng-template t-list-view-detail-template let-item let-code="index">
     *     <div class="thf-row">
     *       <thf-info class="thf-md-6" t-label="Code" [t-value]="code"></thf-info>
     *       <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
     *     </div>
     *   </ng-template>
     *
     * </thf-list-view>
     *
     * ...
     * ```
     *
     * ```
     * ...
     * <thf-list-view
     *    t-property-title="name"
     *    [t-items]="items">
     *    <div *t-list-view-detail-template="let item, let i=index" class="thf-row">
     *      <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
     *    </div>
     * </thf-list-view>
     * ...
     *
     * ```
     */
    var ThfListViewDetailTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function ThfListViewDetailTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        ThfListViewDetailTemplateDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[t-list-view-detail-template]'
                    },] }
        ];
        /** @nocollapse */
        ThfListViewDetailTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        ThfListViewDetailTemplateDirective.propDecorators = {
            showDetail: [{ type: core.Input, args: ['t-show-detail',] }]
        };
        return ThfListViewDetailTemplateDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfListViewBaseComponent
     *
     * \@example
     *
     * <example name="thf-list-view-basic" title="Totvs List View Basic">
     *  <file name="sample-thf-list-view-basic/sample-thf-list-view-basic.component.html"> </file>
     *  <file name="sample-thf-list-view-basic/sample-thf-list-view-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-list-view-labs" title="Totvs List View Labs">
     *  <file name="sample-thf-list-view-labs/sample-thf-list-view-labs.component.html"> </file>
     *  <file name="sample-thf-list-view-labs/sample-thf-list-view-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-list-view-hiring-processes" title="Totvs List View - Hiring Processes">
     *  <file name="sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.component.html"> </file>
     *  <file name="sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.component.ts"> </file>
     *  <file name="sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.service.ts"> </file>
     * </example>
     */
    var ThfListViewComponent = /** @class */ (function (_super) {
        __extends(ThfListViewComponent, _super);
        function ThfListViewComponent(changeDetector, differs) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        Object.defineProperty(ThfListViewComponent.prototype, "hasContentTemplate", {
            get: /**
             * @return {?}
             */
            function () {
                return !!this.listViewContentTemplate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfListViewComponent.prototype, "hasDetailTemplate", {
            get: /**
             * @return {?}
             */
            function () {
                return !!this.listViewDetailTemplate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfListViewComponent.prototype, "displayShowMoreButton", {
            get: /**
             * @return {?}
             */
            function () {
                return this.items && this.items.length > 0 && this.showMore.observers.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfListViewComponent.prototype, "showButtonsActions", {
            get: /**
             * @return {?}
             */
            function () {
                return this.visibleActions && this.visibleActions.length > 0 && this.visibleActions.length <= 2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfListViewComponent.prototype, "showPopupActions", {
            get: /**
             * @return {?}
             */
            function () {
                return this.visibleActions && this.visibleActions.length > 2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfListViewComponent.prototype, "titleHasAction", {
            get: /**
             * @return {?}
             */
            function () {
                return this.titleAction.observers.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfListViewComponent.prototype, "visibleActions", {
            get: /**
             * @return {?}
             */
            function () {
                return this.actions && this.actions.filter((/**
                 * @param {?} action
                 * @return {?}
                 */
                function (action) { return action.visible !== false; }));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfListViewComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            this.initShowDetail();
        };
        /**
         * @return {?}
         */
        ThfListViewComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
        function () {
            this.checkItemsChange();
        };
        /**
         * @param {?} item
         * @return {?}
         */
        ThfListViewComponent.prototype.checkTitleType = /**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (this.propertyLink && item[this.propertyLink]) {
                return item[this.propertyLink].startsWith('http') ? 'externalLink' : 'internalLink';
            }
            return 'noLink';
        };
        /**
         * @param {?} item
         * @return {?}
         */
        ThfListViewComponent.prototype.getItemTitle = /**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return this.hasContentTemplate && this.listViewContentTemplate.title ?
                this.listViewContentTemplate.title(item) : item[this.propertyTitle];
        };
        /**
         * @return {?}
         */
        ThfListViewComponent.prototype.hasItems = /**
         * @return {?}
         */
        function () {
            return this.items && this.items.length > 0;
        };
        /**
         * @param {?} listViewAction
         * @param {?} item
         * @return {?}
         */
        ThfListViewComponent.prototype.returnBooleanValue = /**
         * @param {?} listViewAction
         * @param {?} item
         * @return {?}
         */
        function (listViewAction, item) {
            return isTypeof(listViewAction.disabled, 'function') ? ((/** @type {?} */ (listViewAction))).disabled(item) : listViewAction.disabled;
        };
        /**
         * @param {?} index
         * @return {?}
         */
        ThfListViewComponent.prototype.trackBy = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            return index;
        };
        /**
         * @param {?} item
         * @param {?} targetRef
         * @return {?}
         */
        ThfListViewComponent.prototype.togglePopup = /**
         * @param {?} item
         * @param {?} targetRef
         * @return {?}
         */
        function (item, targetRef) {
            this.popupTarget = targetRef;
            this.changeDetector.detectChanges();
            this.thfPopupComponent.toggle(item);
        };
        /**
         * @private
         * @return {?}
         */
        ThfListViewComponent.prototype.checkItemsChange = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var changesItems = this.differ.diff(this.items);
            if (changesItems && this.selectAll) {
                this.selectAll = null;
            }
            if (changesItems && this.items && this.items.length && this.select && !this.hideSelectAll) {
                this.showHeader = true;
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfListViewComponent.prototype.initShowDetail = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.items && this.items.length > 0 && this.hasDetailTemplate && this.listViewDetailTemplate.showDetail) {
                this.items.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.$showDetail = _this.listViewDetailTemplate.showDetail(item); }));
            }
        };
        ThfListViewComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-list-view',
                        template: "\n<div\n  [class.thf-list-view-main-container-header]=\"showHeader\"\n  [class.thf-list-view-main-container]=\"!showHeader\"\n  [style.height.px]=\"height\">\n\n  <div *ngIf=\"showHeader\" class=\"thf-list-view-main-header\">\n    <div class=\"thf-checkbox-group-item\">\n      <div class=\"thf-list-view-main-select\">\n        <input class=\"thf-input thf-checkbox-group-input\" type=\"checkbox\"\n          [class.thf-checkbox-group-input-checked]=\"selectAll\"\n          [class.thf-checkbox-group-input-indeterminate]=\"selectAll === null\">\n        <label\n          class=\"thf-checkbox-group-label thf-clickable\"\n          (click)=\"selectAllListItems()\">\n          {{ literals.selectAll }}\n        </label>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"thf-list-view-main-content\">\n    <div class=\"thf-list-view\" *ngIf=\"!hasItems()\">\n      <div class=\"thf-list-view-container-no-data thf-text-center\">\n        <span> {{ literals.noData }} </span>\n      </div>\n    </div>\n\n    <ng-container *ngFor=\"let item of items; let index = index; trackBy: trackBy\">\n      <div class=\"thf-list-view\">\n        <div class=\"thf-list-view-container\">\n          <div class=\"thf-list-view-header\">\n            <div class=\"thf-list-view-title\" [ngSwitch]=\"checkTitleType(item)\">\n              <div *ngIf=\"select\" class=\"thf-list-view-select\">\n                <input class=\"thf-input thf-checkbox-group-input\" type=\"checkbox\"\n                  [class.thf-checkbox-group-input-checked]=\"item.$selected\">\n                <label class=\"thf-checkbox-group-label thf-clickable\" (click)=\"selectListItem(item)\"></label>\n              </div>\n              <a *ngSwitchCase=\"'externalLink'\"\n                class=\"thf-list-view-title-link\"\n                target=\"_blank\"\n                [href]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\">\n                {{ getItemTitle(item) }}\n              </a>\n              <a *ngSwitchCase=\"'internalLink'\"\n                class=\"thf-list-view-title-link\"\n                [routerLink]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\">\n                {{ getItemTitle(item) }}\n              </a>\n              <span *ngSwitchCase=\"'noLink'\"\n                class=\"thf-list-view-title-no-link\"\n                [class.thf-list-view-title-link]=\"titleHasAction\"\n                (click)=\"titleHasAction && runTitleAction(item)\">\n                {{ getItemTitle(item) }}\n              </span>\n            </div>\n\n            <div *ngIf=\"showButtonsActions\" class=\"thf-list-view-actions\">\n              <thf-button *ngFor=\"let action of visibleActions\"\n                t-small=\"true\"\n                [t-disabled]=\"returnBooleanValue(action, item)\"\n                [t-icon]=\"action.icon\"\n                [t-label]=\"action.label\"\n                [t-type]=\"action.type\"\n                (t-click)=\"onClickAction(action, item)\">\n              </thf-button>\n            </div>\n\n            <div *ngIf=\"showPopupActions\" class=\"thf-list-view-more-actions\">\n              <span #popupTarget\n                class=\"thf-icon thf-icon-more thf-list-view-more-icon thf-clickable\"\n                (click)=\"togglePopup(item, popupTarget)\">\n              </span>\n            </div>\n\n          </div>\n\n          <div *ngIf=\"hasContentTemplate\" class=\"thf-list-view-content\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewContentTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\">\n            </ng-template>\n          </div>\n\n          <div @showHideDetail *ngIf=\"hasDetailTemplate && item.$showDetail\" class=\"thf-list-view-detail\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewDetailTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\">\n            </ng-template>\n          </div>\n        </div>\n\n        <div *ngIf=\"hasDetailTemplate\" class=\"thf-list-view-detail-button\">\n          <span class=\"thf-clickable\" (click)=\"item.$showDetail = !item.$showDetail\">\n            {{ item.$showDetail ? literals.hideDetails : literals.showDetails }}\n          </span>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n\n<div *ngIf=\"displayShowMoreButton\" class=\"thf-mb-2 thf-text-center\">\n  <thf-button\n    [t-disabled]=\"showMoreDisabled\"\n    [t-label]=\"literals.loadMoreData\"\n    (t-click)=\"onShowMore()\">\n  </thf-button>\n</div>\n\n<thf-popup #popup [t-actions]=\"actions\" [t-target]=\"popupTarget\">\n</thf-popup>\n",
                        animations: [
                            animations.trigger('showHideDetail', [
                                animations.state('*', animations.style({ 'overflow-y': 'visible' })),
                                animations.state('void', animations.style({ 'overflow-y': 'hidden' })),
                                animations.transition('* => void', [
                                    animations.style({ height: '*', 'overflow-y': 'hidden' }),
                                    animations.animate(100, animations.style({ height: 0 }))
                                ]),
                                animations.transition('void => *', [
                                    animations.style({ height: '0' }),
                                    animations.animate(100, animations.style({ height: '*' }))
                                ])
                            ])
                        ]
                    }] }
        ];
        /** @nocollapse */
        ThfListViewComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: core.IterableDiffers }
        ]; };
        ThfListViewComponent.propDecorators = {
            listViewContentTemplate: [{ type: core.ContentChild, args: [ThfListViewContentTemplateDirective, { static: true },] }],
            listViewDetailTemplate: [{ type: core.ContentChild, args: [ThfListViewDetailTemplateDirective, { static: true },] }],
            thfPopupComponent: [{ type: core.ViewChild, args: ['popup', { static: true },] }]
        };
        return ThfListViewComponent;
    }(ThfListViewBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente `thf-list-view`.
     *
     * > Para o correto funcionamento do componente `thf-list-view`, deve ser importado o módulo `BrowserAnimationsModule` no
     * > módulo principal da sua aplicação.
     *
     * Módulo da aplicação:
     * ```
     * import { BrowserAnimationsModule } from '\@angular/platform-browser/animations';
     * import { ThfModule } from '\@totvs/thf-ui';
     * ...
     *
     * \@NgModule({
     *   imports: [
     *     BrowserModule,
     *     BrowserAnimationsModule,
     *     ...
     *     ThfModule
     *   ],
     *   declarations: [
     *     AppComponent,
     *     ...
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     */
    var ThfListViewModule = /** @class */ (function () {
        function ThfListViewModule() {
        }
        ThfListViewModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            router.RouterModule,
                            ThfButtonModule,
                            ThfPopupModule
                        ],
                        declarations: [
                            ThfListViewComponent,
                            ThfListViewContentTemplateDirective,
                            ThfListViewDetailTemplateDirective
                        ],
                        exports: [
                            ThfListViewComponent,
                            ThfListViewContentTemplateDirective,
                            ThfListViewDetailTemplateDirective
                        ],
                        providers: [],
                        schemas: []
                    },] }
        ];
        return ThfListViewModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var THF_BADGE_COLORS = [
        'color-01',
        'color-02',
        'color-03',
        'color-04',
        'color-05',
        'color-06',
        'color-07',
        'color-08',
        'color-09',
        'color-10',
        'color-11',
        'color-12',
    ];
    /** @type {?} */
    var THF_BADGE_COLOR_DEFAULT = 'color-07';
    /**
     * \@description
     *
     * \@docsPrivate
     *
     * Componente utilizado no `thf-menu` para exibir por exemplo a quantidade de tarefas pendentes.
     */
    var ThfBadgeBaseComponent = /** @class */ (function () {
        function ThfBadgeBaseComponent() {
        }
        Object.defineProperty(ThfBadgeBaseComponent.prototype, "color", {
            get: /**
             * @return {?}
             */
            function () {
                return this._color;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a cor de fundo do componente e aceita os valores:
             *
             * <span class="dot thf-color-01"></span> `color-01`
             *
             * <span class="dot thf-color-02"></span> `color-02`
             *
             * <span class="dot thf-color-03"></span> `color-03`
             *
             * <span class="dot thf-color-04"></span> `color-04`
             *
             * <span class="dot thf-color-05"></span> `color-05`
             *
             * <span class="dot thf-color-06"></span> `color-06`
             *
             * <span class="dot thf-color-07"></span> `color-07`
             *
             * <span class="dot thf-color-08"></span> `color-08`
             *
             * <span class="dot thf-color-09"></span> `color-09`
             *
             * <span class="dot thf-color-10"></span> `color-10`
             *
             * <span class="dot thf-color-11"></span> `color-11`
             *
             * <span class="dot thf-color-12"></span> `color-12`
             *
             * @default `color-07`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define a cor de fundo do componente e aceita os valores:
             *
             * <span class="dot thf-color-01"></span> `color-01`
             *
             * <span class="dot thf-color-02"></span> `color-02`
             *
             * <span class="dot thf-color-03"></span> `color-03`
             *
             * <span class="dot thf-color-04"></span> `color-04`
             *
             * <span class="dot thf-color-05"></span> `color-05`
             *
             * <span class="dot thf-color-06"></span> `color-06`
             *
             * <span class="dot thf-color-07"></span> `color-07`
             *
             * <span class="dot thf-color-08"></span> `color-08`
             *
             * <span class="dot thf-color-09"></span> `color-09`
             *
             * <span class="dot thf-color-10"></span> `color-10`
             *
             * <span class="dot thf-color-11"></span> `color-11`
             *
             * <span class="dot thf-color-12"></span> `color-12`
             *
             * \@default `color-07`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._color = THF_BADGE_COLORS.includes(value) ? value : THF_BADGE_COLOR_DEFAULT;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfBadgeBaseComponent.prototype, "value", {
            get: /**
             * @return {?}
             */
            function () {
                return this._value;
            },
            /**
             * @description
             *
             * Número exibido no componente, caso o mesmo seja maior que 99 o valor exibido será 99+.
             */
            set: /**
             * \@description
             *
             * Número exibido no componente, caso o mesmo seja maior que 99 o valor exibido será 99+.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._value = convertToInt(value);
                this.setBadgeValue(this._value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfBadgeBaseComponent.prototype.setBadgeValue = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var validRangeValue = (value || value === 0) && (value >= 0 && value < 100);
            this.badgeValue = validRangeValue ? value.toString() : value > 99 ? '99+' : undefined;
        };
        ThfBadgeBaseComponent.propDecorators = {
            color: [{ type: core.Input, args: ['t-color',] }],
            value: [{ type: core.Input, args: ['t-value',] }]
        };
        return ThfBadgeBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfBadgeBaseComponent
     *
     * \@docsPrivate
     */
    var ThfBadgeComponent = /** @class */ (function (_super) {
        __extends(ThfBadgeComponent, _super);
        function ThfBadgeComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ThfBadgeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-badge',
                        template: "<div class=\"thf-badge thf-{{ color }}\">\n  <span class=\"thf-badge-value\">{{ badgeValue }}</span>\n</div>\n"
                    }] }
        ];
        return ThfBadgeComponent;
    }(ThfBadgeBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente thf-badge.
     */
    var ThfBadgeModule = /** @class */ (function () {
        function ThfBadgeModule() {
        }
        ThfBadgeModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            ThfBadgeComponent
                        ],
                        exports: [
                            ThfBadgeComponent
                        ]
                    },] }
        ];
        return ThfBadgeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfMenuLiteralsDefault = {
        en: { itemNotFound: 'Item not found.' },
        es: { itemNotFound: 'Elemento no encontrado.' },
        pt: { itemNotFound: 'Item não encontrado.' }
    };
    /**
     * \@description
     *
     * Este é um componente de menu lateral que é utilizado para navegação nas páginas de uma aplicação.
     *
     * O componente thf-menu recebe uma lista de objetos do tipo `MenuItem` com as informações dos itens de menu como
     * textos, links para redirecionamento, ações, até 4 níveis de menu e ícones para o primeiro nível de menu.
     * @abstract
     */
    var ThfMenuBaseComponent = /** @class */ (function () {
        function ThfMenuBaseComponent(menuService) {
            this.menuService = menuService;
            this._collapsed = false;
            this._filter = false;
            this._maxLevel = 4;
            this._menus = [];
            this.literals = __assign({}, thfMenuLiteralsDefault[thfLocaleDefault], thfMenuLiteralsDefault[browserLanguage()]);
        }
        Object.defineProperty(ThfMenuBaseComponent.prototype, "collapsed", {
            get: /**
             * @return {?}
             */
            function () {
                return this._collapsed;
            },
            /**
             * @optional
             *
             * @description
             *
             * Colapsa (retrai) o menu e caso receba o valor `false` expande o menu.
             *
             * > Utilize esta propriedade para iniciar o menu colapsado.
             *
             * > Ao utilizar os métodos [`colapse`](documentation/thf-menu#colapseMethod), [`expand`](documentation/thf-menu#expandMethod) e
             * [`toggle`](documentation/thf-menu#toggleMethod) o valor desta propriedade não é alterado.
             *
             * **Importante:**
             *
             * > O menu será colapsado/expandido apenas se todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Colapsa (retrai) o menu e caso receba o valor `false` expande o menu.
             *
             * > Utilize esta propriedade para iniciar o menu colapsado.
             *
             * > Ao utilizar os métodos [`colapse`](documentation/thf-menu#colapseMethod), [`expand`](documentation/thf-menu#expandMethod) e
             * [`toggle`](documentation/thf-menu#toggleMethod) o valor desta propriedade não é alterado.
             *
             * **Importante:**
             *
             * > O menu será colapsado/expandido apenas se todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
             *
             * \@default `false`
             * @param {?} collapsed
             * @return {?}
             */
            function (collapsed) {
                this._collapsed = convertToBoolean(collapsed);
                this.validateCollapseClass();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMenuBaseComponent.prototype, "menus", {
            get: /**
             * @return {?}
             */
            function () {
                return this._menus;
            },
            /** Lista dos itens do menu. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
            set: /**
             * Lista dos itens do menu. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
             * @param {?} menus
             * @return {?}
             */
            function (menus) {
                this._menus = Array.isArray(menus) ? menus : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMenuBaseComponent.prototype, "maxLevel", {
            get: /**
             * @return {?}
             */
            function () {
                return this._maxLevel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMenuBaseComponent.prototype, "filter", {
            get: /**
             * @return {?}
             */
            function () {
                return this._filter;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita um campo para pesquisa no menu.
             * A pesquisa é realizada em todos os níveis do menu e busca apenas pelos itens que contém uma ação e/ou link definidos,
             * ou também, pode ser realizada através de um serviço definido na propriedade `t-service`.
             *
             * > O campo de pesquisa é desabilitado se o menu estiver colapsado.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Habilita um campo para pesquisa no menu.
             * A pesquisa é realizada em todos os níveis do menu e busca apenas pelos itens que contém uma ação e/ou link definidos,
             * ou também, pode ser realizada através de um serviço definido na propriedade `t-service`.
             *
             * > O campo de pesquisa é desabilitado se o menu estiver colapsado.
             *
             * \@default `false`
             * @param {?} filter
             * @return {?}
             */
            function (filter) {
                this._filter = (/** @type {?} */ (filter)) === '' ? true : convertToBoolean(filter);
                this.filteredItems = __spread(this._menus);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMenuBaseComponent.prototype, "service", {
            get: /**
             * @return {?}
             */
            function () {
                return this._service;
            },
            /**
             * @optional
             *
             * @description
             *
             * Nesta propriedade deve ser informada a URL do serviço em que será utilizado para realizar o filtro de itens do
             * menu quando realizar uma busca. Caso haja a necessidade de customização, pode ser informado um
             * serviço implementando a interface `ThfMenuFilter`.
             *
             * Caso utilizada uma URL, o serviço deve retornar os dados conforme o
             * [Guia de implementação de API da Totvs](http://tdn.totvs.com/display/public/INT/Guia+de+implementacao+das+APIs+TOTVS).
             *
             * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando o valor digitado
             * no parâmetro `search`, veja exemplo:
             *
             * > O filtro no serviço será realizado caso contenha no mínimo três caracteres no campo de busca, por exemplo `tot`.
             *
             * ```
             * <thf-menu t-service="/api/v1/fnd/menu">
             * </thf-menu>
             *
             * Requisição: GET /api/v1/fnd/menu?search=contas
             * ```
             *
             * > É necessário que propriedade `t-filter` esteja habilitada.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Nesta propriedade deve ser informada a URL do serviço em que será utilizado para realizar o filtro de itens do
             * menu quando realizar uma busca. Caso haja a necessidade de customização, pode ser informado um
             * serviço implementando a interface `ThfMenuFilter`.
             *
             * Caso utilizada uma URL, o serviço deve retornar os dados conforme o
             * [Guia de implementação de API da Totvs](http://tdn.totvs.com/display/public/INT/Guia+de+implementacao+das+APIs+TOTVS).
             *
             * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando o valor digitado
             * no parâmetro `search`, veja exemplo:
             *
             * > O filtro no serviço será realizado caso contenha no mínimo três caracteres no campo de busca, por exemplo `tot`.
             *
             * ```
             * <thf-menu t-service="/api/v1/fnd/menu">
             * </thf-menu>
             *
             * Requisição: GET /api/v1/fnd/menu?search=contas
             * ```
             *
             * > É necessário que propriedade `t-filter` esteja habilitada.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._service = value || undefined;
                this.configService(this.service);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMenuBaseComponent.prototype, "params", {
            get: /**
             * @return {?}
             */
            function () {
                return this._params;
            },
            /**
             * @optional
             *
             * @description
             *
             * Deve ser informado um objeto que deseja-se utilizar na requisição de filtro dos itens de menu.
             *
             * Caso utilizado um serviço customizado, implementando a interface `ThfMenuFilter`, o valor desta propriedade
             * será passado como parâmetro, na função `getFilteredData`.
             *
             * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando os valores informados
             * nesta propriedade em conjunto com o parâmetro `search`, veja exemplo:
             *
             * ```
             * <thf-menu t-service="/api/v1/fnd/menu" [t-params]="{ company: 1, user: 297767512 }">
             * </thf-menu>
             *
             * Requisição: GET /api/v1/fnd/menu?search=contas&company=1&user=297767512
             * ```
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Deve ser informado um objeto que deseja-se utilizar na requisição de filtro dos itens de menu.
             *
             * Caso utilizado um serviço customizado, implementando a interface `ThfMenuFilter`, o valor desta propriedade
             * será passado como parâmetro, na função `getFilteredData`.
             *
             * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando os valores informados
             * nesta propriedade em conjunto com o parâmetro `search`, veja exemplo:
             *
             * ```
             * <thf-menu t-service="/api/v1/fnd/menu" [t-params]="{ company: 1, user: 297767512 }">
             * </thf-menu>
             *
             * Requisição: GET /api/v1/fnd/menu?search=contas&company=1&user=297767512
             * ```
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._params = value && isTypeof(value, 'object') ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMenuBaseComponent.prototype, "logo", {
            get: /**
             * @return {?}
             */
            function () {
                return this._logo;
            },
            /**
             * @optional
             *
             * @description
             *
             * Caminho para a logomarca, que será exibida quando o componente estiver expandido, localizada na parte superior.
             *
             * > **Importante:**
             * - Caso esta propriedade estiver indefinida ou inválida o espaço para logomarca será removido.
             * - Como boa prática, indica-se utilizar imagens com até `24px` de altura e `224px` de largura,
             * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Caminho para a logomarca, que será exibida quando o componente estiver expandido, localizada na parte superior.
             *
             * > **Importante:**
             * - Caso esta propriedade estiver indefinida ou inválida o espaço para logomarca será removido.
             * - Como boa prática, indica-se utilizar imagens com até `24px` de altura e `224px` de largura,
             * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._logo = isTypeof(value, 'string') && value.trim() ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMenuBaseComponent.prototype, "shortLogo", {
            get: /**
             * @return {?}
             */
            function () {
                return this._shortLogo;
            },
            /**
             * @optional
             *
             * @description
             *
             * Caminho para a logomarca, que será exibida quando o componente estiver colapsado, localizada na parte superior.
             *
             * > **Importante:**
             * - Caso esta propriedade estiver indefinida ou inválida passa a assumir o valor informado na propriedade `t-logo` e na ausência desta o
             * espaço para logomarca será removido.
             * - Como boa prática, indica-se utilizar imagens com até `48px` de altura e `48px` de largura,
             * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
             * - Caso não informar um valor, esta propriedade passa a assumir o valor informado na propriedade `t-logo`.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Caminho para a logomarca, que será exibida quando o componente estiver colapsado, localizada na parte superior.
             *
             * > **Importante:**
             * - Caso esta propriedade estiver indefinida ou inválida passa a assumir o valor informado na propriedade `t-logo` e na ausência desta o
             * espaço para logomarca será removido.
             * - Como boa prática, indica-se utilizar imagens com até `48px` de altura e `48px` de largura,
             * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
             * - Caso não informar um valor, esta propriedade passa a assumir o valor informado na propriedade `t-logo`.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._shortLogo = isTypeof(value, 'string') && value.trim() ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @param {?} service
         * @return {?}
         */
        ThfMenuBaseComponent.prototype.configService = /**
         * @private
         * @param {?} service
         * @return {?}
         */
        function (service) {
            if (typeof service === 'string' && service.trim()) {
                // service url
                this.menuService.configProperties(service);
                this.filterService = this.menuService;
            }
            else if (typeof service === 'object' && service.getFilteredData) {
                // custom service
                this.filterService = service;
            }
            else {
                this.filterService = undefined;
            }
        };
        /**
         * @protected
         * @return {?}
         */
        ThfMenuBaseComponent.prototype.setMenuExtraProperties = /**
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            this.allowIcons = !!this.menus.length;
            this.allowCollapseMenu = !!this.menus.length;
            this.menus.forEach((/**
             * @param {?} menuItem
             * @return {?}
             */
            function (menuItem) {
                _this._level = 1;
                _this.allowIcons = _this.allowIcons ? validValue(menuItem.icon) : false;
                _this.allowCollapseMenu = _this.allowCollapseMenu && _this.allowIcons ? validValue(menuItem.shortLabel) : false;
                _this.removeBadgeAlert(menuItem);
                _this.setMenuItemProperties(menuItem);
                if (menuItem.subItems) {
                    _this._level++;
                    _this.processSubItems(menuItem);
                }
            }));
        };
        /**
         * @protected
         * @param {?} menuItem
         * @return {?}
         */
        ThfMenuBaseComponent.prototype.setMenuItemProperties = /**
         * @protected
         * @param {?} menuItem
         * @return {?}
         */
        function (menuItem) {
            menuItem['id'] = menuItem['id'] || uuid$1.v4();
            menuItem['level'] = this._level;
            menuItem['type'] = this.setMenuType(menuItem);
        };
        /**
         * @protected
         * @param {?} menus
         * @return {?}
         */
        ThfMenuBaseComponent.prototype.validateMenus = /**
         * @protected
         * @param {?} menus
         * @return {?}
         */
        function (menus) {
            var _this = this;
            menus.forEach((/**
             * @param {?} menu
             * @return {?}
             */
            function (menu) { return _this.validateMenu(menu); }));
        };
        /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        ThfMenuBaseComponent.prototype.processSubItems = /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            var _this = this;
            menu.subItems.forEach((/**
             * @param {?} menuItem
             * @param {?} index
             * @param {?} menuItems
             * @return {?}
             */
            function (menuItem, index, menuItems) {
                /** @type {?} */
                var previousItem = menuItems[index - 1];
                if (previousItem && previousItem.subItems) {
                    _this._level = previousItem['level'];
                }
                if (_this._level <= _this.maxLevel) {
                    _this.setMenuItemProperties(menuItem);
                    if (menuItem.subItems) {
                        _this._level++;
                        _this.processSubItems(menuItem);
                    }
                }
                if (!menu['badgeAlert']) {
                    menu = _this.setMenuBadgeAlert(menu, menuItem);
                }
            }));
            menu.subItems = Object.assign([], menu.subItems);
        };
        /**
         * @private
         * @param {?} menuItem
         * @return {?}
         */
        ThfMenuBaseComponent.prototype.removeBadgeAlert = /**
         * @private
         * @param {?} menuItem
         * @return {?}
         */
        function (menuItem) {
            var _this = this;
            if (menuItem['badgeAlert']) {
                delete menuItem['badgeAlert'];
            }
            if (menuItem.subItems) {
                menuItem.subItems.forEach((/**
                 * @param {?} subItem
                 * @return {?}
                 */
                function (subItem) { return _this.removeBadgeAlert(subItem); }));
            }
        };
        /**
         * @private
         * @param {?} parent
         * @param {?} child
         * @return {?}
         */
        ThfMenuBaseComponent.prototype.setMenuBadgeAlert = /**
         * @private
         * @param {?} parent
         * @param {?} child
         * @return {?}
         */
        function (parent, child) {
            /** @type {?} */
            var childHasSubItems = child.subItems && child.subItems.length;
            /** @type {?} */
            var childHasBadgeAlert = child['badgeAlert'];
            /** @type {?} */
            var childHasBadge = child.badge && convertToInt(child.badge.value) >= 0;
            parent['badgeAlert'] = childHasBadgeAlert || (childHasBadge && !childHasSubItems);
            return parent;
        };
        /**
         * @private
         * @param {?} menuItem
         * @return {?}
         */
        ThfMenuBaseComponent.prototype.setMenuType = /**
         * @private
         * @param {?} menuItem
         * @return {?}
         */
        function (menuItem) {
            if (menuItem.subItems && menuItem.subItems.length > 0 && this._level < this.maxLevel) {
                return 'subItems';
            }
            if (!menuItem.link) {
                return 'noLink';
            }
            if (isExternalLink(menuItem.link)) {
                return 'externalLink';
            }
            return 'internalLink';
        };
        /**
         * @private
         * @param {?} menuItem
         * @return {?}
         */
        ThfMenuBaseComponent.prototype.validateMenu = /**
         * @private
         * @param {?} menuItem
         * @return {?}
         */
        function (menuItem) {
            var _this = this;
            if (!menuItem.label || menuItem.label.trim() === '') {
                throw new Error('O atributo ThfMenuItem.label não pode ser vazio.');
            }
            else if (menuItem.subItems) {
                menuItem.subItems.forEach((/**
                 * @param {?} subItem
                 * @return {?}
                 */
                function (subItem) {
                    _this.validateMenu(subItem);
                }));
            }
        };
        ThfMenuBaseComponent.propDecorators = {
            collapsed: [{ type: core.Input, args: ['t-collapsed',] }],
            menus: [{ type: core.Input, args: ['t-menus',] }],
            filter: [{ type: core.Input, args: ['t-filter',] }],
            service: [{ type: core.Input, args: ['t-service',] }],
            params: [{ type: core.Input, args: ['t-params',] }],
            logo: [{ type: core.Input, args: ['t-logo',] }],
            shortLogo: [{ type: core.Input, args: ['t-short-logo',] }]
        };
        return ThfMenuBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@usedBy ThfMenuComponent
     *
     * \@description
     *
     * Esta diretiva permite adicionar um conteúdo personalizado entre a logo e o campo de filtro do cabeçalho do
     * [`thf-menu`](/documentation/thf-menu).
     *
     * Para personalizar o conteúdo do cabeçalho deve-se utilizar a diretiva `t-menu-header-template` dentro da *tag* do
     * [`thf-menu`](/documentation/thf-menu). Podendo ser utilizada de duas formas:
     *
     * Com `ng-template`
     * ```
     * ...
     * <thf-menu [t-menus]="menus">
     *   <ng-template t-menu-header-template>
     *     ...
     *   </ng-template>
     * </thf-menu>
     * ...
     * ```
     *
     * ou com *syntax sugar*
     * ```
     * ...
     * <thf-menu [t-menus]="menus">
     *   <div *t-menu-header-template>
     *     ...
     *   </div>
     * </thf-menu>
     * ...
     * ```
     *
     * > Quando o menu estiver colapsado ou tela for _mobile_ o conteúdo personalizado não será exibido.
     */
    var ThfMenuHeaderTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function ThfMenuHeaderTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        ThfMenuHeaderTemplateDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[t-menu-header-template]'
                    },] }
        ];
        /** @nocollapse */
        ThfMenuHeaderTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        return ThfMenuHeaderTemplateDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Serviço que implementa a comunicação entre os items do thf-menu.
     */
    var ThfMenuItemsService = /** @class */ (function () {
        function ThfMenuItemsService() {
            this.subjectParent = new rxjs.Subject();
            this.subjectChild = new rxjs.Subject();
        }
        // Envia informações do click do thf-menu-item para o thf-menu
        // Envia informações do click do thf-menu-item para o thf-menu
        /**
         * @param {?} menu
         * @return {?}
         */
        ThfMenuItemsService.prototype.sendToParentMenuClicked = 
        // Envia informações do click do thf-menu-item para o thf-menu
        /**
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            this.subjectChild.next(menu);
        };
        // Recebe do thf-menu-item sua informação de click.
        // Recebe do thf-menu-item sua informação de click.
        /**
         * @return {?}
         */
        ThfMenuItemsService.prototype.receiveFromChildMenuClicked = 
        // Recebe do thf-menu-item sua informação de click.
        /**
         * @return {?}
         */
        function () {
            return this.subjectChild.asObservable();
        };
        // Envia para os thf-menu-item a resposta do processamento de click de um thf-menu-item.
        // Envia para os thf-menu-item a resposta do processamento de click de um thf-menu-item.
        /**
         * @param {?} menu
         * @return {?}
         */
        ThfMenuItemsService.prototype.sendToChildMenuClicked = 
        // Envia para os thf-menu-item a resposta do processamento de click de um thf-menu-item.
        /**
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            this.subjectParent.next(menu);
        };
        // Recebe do thf-menu as informações processadas do click de um thf-menu-item.
        // Recebe do thf-menu as informações processadas do click de um thf-menu-item.
        /**
         * @return {?}
         */
        ThfMenuItemsService.prototype.receiveFromParentMenuClicked = 
        // Recebe do thf-menu as informações processadas do click de um thf-menu-item.
        /**
         * @return {?}
         */
        function () {
            return this.subjectParent.asObservable();
        };
        ThfMenuItemsService.decorators = [
            { type: core.Injectable }
        ];
        return ThfMenuItemsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Serviço que implementa a interface `ThfMenuFilter`, utilizado para fazer requisições ao serviço informado pelo usuário,
     * caso for uma URL, no componente `thf-menu`.
     */
    var ThfMenuService = /** @class */ (function () {
        function ThfMenuService(http) {
            this.http = http;
        }
        Object.defineProperty(ThfMenuService.prototype, "url", {
            get: /**
             * @return {?}
             */
            function () { return this._url; },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} url
         * @return {?}
         */
        ThfMenuService.prototype.configProperties = /**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            this._url = url;
        };
        /**
         * @param {?} search
         * @param {?=} params
         * @return {?}
         */
        ThfMenuService.prototype.getFilteredData = /**
         * @param {?} search
         * @param {?=} params
         * @return {?}
         */
        function (search, params) {
            /** @type {?} */
            var filterParams = __assign({ search: search }, params);
            return this.http.get(this.url, { params: filterParams })
                .pipe(operators.map((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return response && response.items; })));
        };
        ThfMenuService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfMenuService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return ThfMenuService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfMenuDebounceTime = 400;
    /** @type {?} */
    var thfMenuMinLength = 3;
    /** @type {?} */
    var thfMenuRootLevel = 1;
    /**
     * \@docsExtends ThfMenuBaseComponent
     *
     * \@description
     *
     * Aparece completo em telas com largura maior que 1200px, caso contrário o menu é escondido e chamado por meio de um botão.
     *
     * O menu também pode ser colapsado. Essa opção é habilitada quando todos os itens de primeiro nível possuírem ícones e textos curtos.
     * Se colapsado, somente os itens de primeiro nível serão exibidos e, caso o item selecionado possua sub-níveis,
     * então o menu alternará novamente para o estado aberto.
     *
     * Existe a possibilidade de customizar a logomarca, que é exibida na parte superior do componente.
     *
     * E para adicionar um conteúdo personalizado entre a logomarca e o campo de filtro,
     * basta adicionar este conteúdo com a diretiva [**t-menu-header-template**](/documentation/thf-menu-header-template).
     *
     * Caso utilizar o filtro de menus, é possível realizar buscas em serviço, apenas informando a URL do serviço ou a instância de
     * um serviço customizado implementando a interface `ThfMenuFilter`.
     *
     * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
     *  sua aplicação:
     *
     * ````
     * import { RouterModule, Routes } from '\@angular/router';
     *
     * ...
     *
     * \@NgModule({
     *   imports: [
     *     RouterModule,
     *     Routes,
     *     ...
     *     ThfModule,
     *     ...
     *   ],
     *   declarations: [
     *     AppComponent
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     *
     * Além disso é necessário criar um módulo configurando as rotas da aplicação.
     *
     * ```
     * import { NgModule } from '\@angular/core';
     *
     * import { RouterModule, Routes } from '\@angular/router';
     *
     * import { HelloWorldComponent } from './hello-world/hello-world.component';
     *
     * const routes: Routes = [
     *   {path: 'hello-world', component: HelloWorldComponent}
     * ];
     *
     * \@NgModule({
     *   imports: [RouterModule.forRoot(routes, {useHash: true})],
     *   exports: [RouterModule]
     * })
     * export class AppRoutingModule {}
     * ```
     *
     * \@example
     *
     * <example name="thf-menu-basic" title="Totvs Menu Basic">
     *   <file name="sample-thf-menu-basic/sample-thf-menu-basic.component.html"> </file>
     *   <file name="sample-thf-menu-basic/sample-thf-menu-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-menu-labs" title="Totvs Menu Labs">
     *   <file name="sample-thf-menu-labs/sample-thf-menu-labs.component.html"> </file>
     *   <file name="sample-thf-menu-labs/sample-thf-menu-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-menu-human-resources" title="Totvs Menu - Human Resources">
     *   <file name="sample-thf-menu-human-resources/sample-thf-menu-human-resources.component.html"> </file>
     *   <file name="sample-thf-menu-human-resources/sample-thf-menu-human-resources.component.ts"> </file>
     *   <file name="sample-thf-menu-human-resources/sample-thf-menu-human-resources.service.ts"> </file>
     * </example>
     */
    var ThfMenuComponent = /** @class */ (function (_super) {
        __extends(ThfMenuComponent, _super);
        function ThfMenuComponent(viewRef, element, renderer, router, menuItemsService, changeDetector, menuService) {
            var _this = _super.call(this, menuService) || this;
            _this.element = element;
            _this.renderer = renderer;
            _this.router = router;
            _this.menuItemsService = menuItemsService;
            _this.changeDetector = changeDetector;
            _this.filterLoading = false;
            _this.mobileOpened = false;
            _this.noData = false;
            _this.filteringItems = false;
            _this.menuInitialized = false;
            _this.menuPrevious = null;
            _this.parentRef = viewRef['_view']['component'];
            return _this;
        }
        Object.defineProperty(ThfMenuComponent.prototype, "isActiveItemMenuSubMenu", {
            get: /**
             * @private
             * @return {?}
             */
            function () {
                return this.activeMenuItem['level'] > this.groupedMenuItem['level'];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMenuComponent.prototype, "enableCollapse", {
            get: /**
             * @return {?}
             */
            function () {
                return this.isCollapsed && !this.collapsedMobile;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMenuComponent.prototype, "enableCollapseButton", {
            get: /**
             * @return {?}
             */
            function () {
                return this.allowCollapseMenu && !this.collapsed && !this.mobileOpened;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMenuComponent.prototype, "hasFooter", {
            get: /**
             * @return {?}
             */
            function () {
                return this.allowCollapseMenu && !this.mobileOpened && this.enableCollapseButton || (this.collapsed && !this.collapsedMobile);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMenuComponent.prototype, "isCollapsed", {
            get: /**
             * @return {?}
             */
            function () {
                return this.allowCollapseMenu && this.collapsed;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfMenuComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
        function () {
            if (this.filteringItems && this.filter) {
                return;
            }
            /** @type {?} */
            var menuCurrent = JSON.stringify(this.menus);
            if (this.menuPrevious !== menuCurrent || !this.menuInitialized) {
                this.updateMenu();
                this.validateCollapseClass();
            }
        };
        /**
         * @return {?}
         */
        ThfMenuComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.itemSubscription.unsubscribe();
            this.routeSubscription.unsubscribe();
            if (this.resizeListener) {
                this.resizeListener();
            }
        };
        /**
         * @return {?}
         */
        ThfMenuComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.subscribeToMenuItem();
            this.subscribeToRoute();
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var urlRouter = _this.checkingRouterChildrenFragments();
                _this.checkActiveMenuByUrl(urlRouter);
            }));
        };
        /**
         * @param {?} urlPath
         * @param {?} menus
         * @return {?}
         */
        ThfMenuComponent.prototype.activateMenuByUrl = /**
         * @param {?} urlPath
         * @param {?} menus
         * @return {?}
         */
        function (urlPath, menus) {
            var _this = this;
            if (menus) {
                return menus.some((/**
                 * @param {?} menu
                 * @return {?}
                 */
                function (menu) {
                    /** @type {?} */
                    var formattedLink = getFormattedLink(menu.link);
                    if (formattedLink === urlPath) {
                        _this.linkActive = formattedLink;
                        _this.activateMenuItem(menu);
                        return true;
                    }
                    else {
                        return _this.activateMenuByUrl(urlPath, menu.subItems);
                    }
                }));
            }
        };
        /**
         * @param {?} urlPath
         * @return {?}
         */
        ThfMenuComponent.prototype.checkActiveMenuByUrl = /**
         * @param {?} urlPath
         * @return {?}
         */
        function (urlPath) {
            if (!this.linkActive || this.linkActive !== urlPath) {
                this.activateMenuByUrl(urlPath, this.menus);
            }
        };
        /**
         * <a id="colapseMethod"></a>
         *
         * *Método para colapsar (retrair) o menu.
         */
        /**
         * <a id="colapseMethod"></a>
         *
         * *Método para colapsar (retrair) o menu.
         * @return {?}
         */
        ThfMenuComponent.prototype.collapse = /**
         * <a id="colapseMethod"></a>
         *
         * *Método para colapsar (retrair) o menu.
         * @return {?}
         */
        function () {
            this.validateToggleMenu(true);
        };
        /**
         * @param {?} filter
         * @return {?}
         */
        ThfMenuComponent.prototype.debounceFilter = /**
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            var _this = this;
            clearTimeout(this.timeoutFilter);
            this.timeoutFilter = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.filterProcess(filter);
            }), thfMenuDebounceTime);
        };
        /**
         * <a id="expandMethod"></a>
         *
         * *Método para expandir (aumentar) o menu.
         */
        /**
         * <a id="expandMethod"></a>
         *
         * *Método para expandir (aumentar) o menu.
         * @return {?}
         */
        ThfMenuComponent.prototype.expand = /**
         * <a id="expandMethod"></a>
         *
         * *Método para expandir (aumentar) o menu.
         * @return {?}
         */
        function () {
            this.validateToggleMenu(false);
        };
        /**
         * @return {?}
         */
        ThfMenuComponent.prototype.subscribeToMenuItem = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.itemSubscription = this.menuItemsService.receiveFromChildMenuClicked().subscribe((/**
             * @param {?} menu
             * @return {?}
             */
            function (menu) {
                _this.clickMenuItem(menu);
            }));
        };
        /**
         * @return {?}
         */
        ThfMenuComponent.prototype.subscribeToRoute = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.routeSubscription = this.router.events.subscribe((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                if (val instanceof router.NavigationEnd || val instanceof router.NavigationCancel) {
                    /** @type {?} */
                    var urlRouter = _this.checkingRouterChildrenFragments();
                    _this.checkActiveMenuByUrl(urlRouter);
                }
            }));
        };
        /**
         * <a id="toggleMethod"></a>
         * *Método que colapsa e expande o menu alternadamente.
         *
         * > *Os métodos apenas vão colapsar/expandir o menu se:
         *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
         */
        /**
         * <a id="toggleMethod"></a>
         * *Método que colapsa e expande o menu alternadamente.
         *
         * > *Os métodos apenas vão colapsar/expandir o menu se:
         *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
         * @return {?}
         */
        ThfMenuComponent.prototype.toggle = /**
         * <a id="toggleMethod"></a>
         * *Método que colapsa e expande o menu alternadamente.
         *
         * > *Os métodos apenas vão colapsar/expandir o menu se:
         *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
         * @return {?}
         */
        function () {
            this.validateToggleMenu(!this.collapsed);
        };
        /**
         * @return {?}
         */
        ThfMenuComponent.prototype.toggleMenuMobile = /**
         * @return {?}
         */
        function () {
            this.mobileOpened = !this.mobileOpened;
            this.collapsedMobile = this.collapsed && this.mobileOpened;
            this.validateCollapseClass(this.collapsedMobile);
            if (isMobile()) {
                return;
            }
            if (this.mobileOpened) {
                this.createResizeListener();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfMenuComponent.prototype.activateCollapseSubMenuItem = /**
         * @private
         * @return {?}
         */
        function () {
            this.clearGroupMenuIfFirstLevel(this.activeMenuItem);
            if (!this.collapsed && this.activeMenuItem['level'] > thfMenuRootLevel && this.isActiveItemMenuSubMenu) {
                this.openParentMenu(this.activeMenuItem);
            }
        };
        /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        ThfMenuComponent.prototype.activateMenuItem = /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            this.activeMenuItem = menu;
            this.linkActive = menu.link;
            if (this.activeMenuItem['level'] > thfMenuRootLevel) {
                this.openParentMenu(this.activeMenuItem);
            }
            else {
                this.groupedMenuItem = null;
            }
            this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem, activatedByRoute: true });
        };
        /**
         * @private
         * @param {?} menus
         * @return {?}
         */
        ThfMenuComponent.prototype.areSubMenus = /**
         * @private
         * @param {?} menus
         * @return {?}
         */
        function (menus) {
            return menus.every((/**
             * @param {?} menu
             * @return {?}
             */
            function (menu) { return menu['level'] > thfMenuRootLevel; }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfMenuComponent.prototype.checkingRouterChildrenFragments = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
            return childrenPrimary ? "/" + childrenPrimary.segments.map((/**
             * @param {?} it
             * @return {?}
             */
            function (it) { return it.path; })).join('/') : '';
        };
        /**
         * @private
         * @param {?} activeMenuItem
         * @return {?}
         */
        ThfMenuComponent.prototype.clearGroupMenuIfFirstLevel = /**
         * @private
         * @param {?} activeMenuItem
         * @return {?}
         */
        function (activeMenuItem) {
            if (activeMenuItem['level'] === thfMenuRootLevel) {
                this.groupedMenuItem = undefined;
            }
        };
        /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        ThfMenuComponent.prototype.clickMenuItem = /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            if (menu.action) {
                this.executeMenuAction(menu);
            }
            if (menu['type'] === 'externalLink') {
                openExternalLink(menu.link);
            }
            else if (menu['type'] === 'internalLink') {
                this.activateMenuItem(menu);
            }
            else if (menu['type'] === 'subItems') {
                if (this.filteringItems) {
                    this.filteringItems = false;
                }
                this.groupMenuItem(menu);
            }
            if (menu['type'] !== 'subItems') {
                this.mobileOpened = false;
            }
        };
        /**
         * @private
         * @param {?=} menuItem
         * @return {?}
         */
        ThfMenuComponent.prototype.convertToMenuItemFiltered = /**
         * @private
         * @param {?=} menuItem
         * @return {?}
         */
        function (menuItem) {
            if (menuItem === void 0) { menuItem = { label: '', link: '' }; }
            var label = menuItem.label, link = menuItem.link;
            /** @type {?} */
            var menuItemFiltered = { label: label, link: link };
            this.setMenuItemProperties(menuItemFiltered);
            return menuItemFiltered;
        };
        /**
         * @private
         * @return {?}
         */
        ThfMenuComponent.prototype.createResizeListener = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', (/**
             * @return {?}
             */
            function () {
                _this.toggleResize();
                _this.resizeListener();
            }));
        };
        /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        ThfMenuComponent.prototype.executeMenuAction = /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            if (typeof menu.action === 'string') {
                this.parentRef[menu.action](menu);
            }
            else {
                menu.action.call(this.parentRef, menu);
            }
        };
        /**
         * @private
         * @param {?} filter
         * @return {?}
         */
        ThfMenuComponent.prototype.filterItems = /**
         * @private
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            return __awaiter(this, void 0, void 0, function () {
                var trimFilter, _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            trimFilter = filter && filter.trim();
                            if (!trimFilter) return [3 /*break*/, 4];
                            this.filteredItems = [];
                            _a = this;
                            if (!this.filterService) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.filterOnService(trimFilter)];
                        case 1:
                            _b = _c.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            _b = this.filterLocalItems(trimFilter);
                            _c.label = 3;
                        case 3:
                            _a.filteredItems = _b;
                            this.filteringItems = true;
                            return [3 /*break*/, 5];
                        case 4:
                            this.filteredItems = __spread(this.menus);
                            this.filteringItems = false;
                            _c.label = 5;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @private
         * @param {?} filter
         * @return {?}
         */
        ThfMenuComponent.prototype.filterLocalItems = /**
         * @private
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            /** @type {?} */
            var filteredItems = [];
            this.findItems(this.menus, filter.toLowerCase(), filteredItems);
            return filteredItems;
        };
        /**
         * @private
         * @param {?} filter
         * @return {?}
         */
        ThfMenuComponent.prototype.filterProcess = /**
         * @private
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            var _this = this;
            this.filterLoading = true;
            this.filterItems(filter).then((/**
             * @return {?}
             */
            function () {
                _this.filterLoading = false;
                _this.showNoData();
                _this.changeDetector.detectChanges();
                _this.menuItemsService.sendToChildMenuClicked({ active: _this.activeMenuItem, grouped: _this.groupedMenuItem });
            })).catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.filterLoading = false;
                Promise.reject(error);
            }));
        };
        /**
         * @private
         * @param {?=} search
         * @return {?}
         */
        ThfMenuComponent.prototype.filterOnService = /**
         * @private
         * @param {?=} search
         * @return {?}
         */
        function (search) {
            if (search === void 0) { search = ''; }
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(search.length >= thfMenuMinLength)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.filterService.getFilteredData(search, this.params)
                                    .pipe(operators.map((/**
                                 * @param {?} menuItemsFiltered
                                 * @return {?}
                                 */
                                function (menuItemsFiltered) { return menuItemsFiltered.map((/**
                                 * @param {?} menuItem
                                 * @return {?}
                                 */
                                function (menuItem) { return _this.convertToMenuItemFiltered(menuItem); })); })))
                                    .toPromise()];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2: return [2 /*return*/, this.filteredItems];
                    }
                });
            });
        };
        /**
         * @private
         * @param {?} menus
         * @param {?} filter
         * @param {?} filteredItems
         * @return {?}
         */
        ThfMenuComponent.prototype.findItems = /**
         * @private
         * @param {?} menus
         * @param {?} filter
         * @param {?} filteredItems
         * @return {?}
         */
        function (menus, filter, filteredItems) {
            var _this = this;
            menus.forEach((/**
             * @param {?} menu
             * @return {?}
             */
            function (menu) {
                if ((menu.label.toLowerCase().includes(filter) && !menu.subItems) ||
                    (menu.subItems && _this.findItems(menu.subItems, filter, filteredItems))) {
                    filteredItems.push(menu);
                }
            }));
        };
        /**
         * @private
         * @param {?} menus
         * @param {?} menuItem
         * @return {?}
         */
        ThfMenuComponent.prototype.findParent = /**
         * @private
         * @param {?} menus
         * @param {?} menuItem
         * @return {?}
         */
        function (menus, menuItem) {
            /** @type {?} */
            var getParent = (/**
             * @param {?} menuItems
             * @param {?} id
             * @return {?}
             */
            function (menuItems, id) {
                if (menuItems) {
                    for (var index = 0; index < menuItems.length; index++) {
                        /** @type {?} */
                        var menu = menuItems[index];
                        if (menu.subItems && menu.subItems.find((/**
                         * @param {?} subItem
                         * @return {?}
                         */
                        function (subItem) { return subItem['id'] === id; }))) {
                            return menu;
                        }
                        /** @type {?} */
                        var found = getParent(menu.subItems, id);
                        if (found) {
                            return found;
                        }
                    }
                }
            });
            return getParent(menus, menuItem['id']);
        };
        /**
         * @private
         * @param {?} menus
         * @param {?} menu
         * @return {?}
         */
        ThfMenuComponent.prototype.findRootParent = /**
         * @private
         * @param {?} menus
         * @param {?} menu
         * @return {?}
         */
        function (menus, menu) {
            /** @type {?} */
            var findParent = this.findParent;
            /** @type {?} */
            var getRootParent = (/**
             * @param {?} menuItems
             * @param {?} menuItem
             * @return {?}
             */
            function (menuItems, menuItem) {
                /** @type {?} */
                var parent = findParent(menuItems, menuItem);
                if (parent['level'] !== thfMenuRootLevel) {
                    parent = getRootParent(menuItems, parent);
                }
                return parent;
            });
            return getRootParent(menus, menu);
        };
        /**
         * @private
         * @param {?} menus
         * @param {?} activeMenuItem
         * @param {?} groupedMenuItem
         * @return {?}
         */
        ThfMenuComponent.prototype.getActiveMenuParent = /**
         * @private
         * @param {?} menus
         * @param {?} activeMenuItem
         * @param {?} groupedMenuItem
         * @return {?}
         */
        function (menus, activeMenuItem, groupedMenuItem) {
            if (this.areSubMenus([groupedMenuItem, activeMenuItem])) {
                return this.findRootParent(menus, activeMenuItem);
            }
        };
        /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        ThfMenuComponent.prototype.groupMenuItem = /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            if (this.collapsed) {
                this.toggleMenuCollapse();
            }
            menu['isOpened'] = !menu['isOpened'];
            this.groupedMenuItem = menu;
            if (this.activeMenuItem && menu['isOpened']
                && this.isActiveItemMenuSubMenu
                && this.isRootMenuEqualGroupedMenu(this.menus, this.activeMenuItem, menu)) {
                this.activateMenuItem(this.activeMenuItem);
            }
            this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
        };
        /**
         * @private
         * @param {?} menus
         * @param {?} activeMenuItem
         * @param {?} groupedMenuItem
         * @return {?}
         */
        ThfMenuComponent.prototype.isRootMenuEqualGroupedMenu = /**
         * @private
         * @param {?} menus
         * @param {?} activeMenuItem
         * @param {?} groupedMenuItem
         * @return {?}
         */
        function (menus, activeMenuItem, groupedMenuItem) {
            /** @type {?} */
            var activeMenuRootParent = this.findRootParent(menus, activeMenuItem);
            return activeMenuRootParent['id'] === groupedMenuItem['id'];
        };
        /**
         * @private
         * @param {?} childMenu
         * @return {?}
         */
        ThfMenuComponent.prototype.openParentMenu = /**
         * @private
         * @param {?} childMenu
         * @return {?}
         */
        function (childMenu) {
            /** @type {?} */
            var parent = this.findParent(this.menus, childMenu);
            parent['isOpened'] = true;
            this.groupedMenuItem = parent;
        };
        /**
         * @private
         * @return {?}
         */
        ThfMenuComponent.prototype.showNoData = /**
         * @private
         * @return {?}
         */
        function () {
            this.noData = this.filteredItems.length === 0;
        };
        /**
         * @private
         * @return {?}
         */
        ThfMenuComponent.prototype.toggleGroupedMenuItem = /**
         * @private
         * @return {?}
         */
        function () {
            this.groupedMenuItem['isOpened'] = !this.collapsed && this.allowCollapseMenu;
        };
        /**
         * @private
         * @param {?=} collapsed
         * @return {?}
         */
        ThfMenuComponent.prototype.toggleMenuCollapse = /**
         * @private
         * @param {?=} collapsed
         * @return {?}
         */
        function (collapsed) {
            if (collapsed === void 0) { collapsed = false; }
            this.collapsed = collapsed;
            if (this.groupedMenuItem && this.activeMenuItem) {
                this.groupedMenuItem = this.getActiveMenuParent(this.menus, this.activeMenuItem, this.groupedMenuItem) || this.groupedMenuItem;
                this.toggleGroupedMenuItem();
            }
            if (this.activeMenuItem) {
                this.activateCollapseSubMenuItem();
                this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem, activatedByRoute: true });
            }
            this.updateMenu();
        };
        /**
         * @private
         * @return {?}
         */
        ThfMenuComponent.prototype.toggleResize = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.mobileOpened) {
                this.mobileOpened = false;
                this.collapsedMobile = false;
                this.validateCollapseClass(this.collapsedMobile);
            }
        };
        /**
         * @private
         * @param {?} collapsed
         * @return {?}
         */
        ThfMenuComponent.prototype.validateToggleMenu = /**
         * @private
         * @param {?} collapsed
         * @return {?}
         */
        function (collapsed) {
            if (!this.allowCollapseMenu) {
                return;
            }
            this.toggleMenuCollapse(collapsed);
        };
        /**
         * @private
         * @return {?}
         */
        ThfMenuComponent.prototype.updateMenu = /**
         * @private
         * @return {?}
         */
        function () {
            this.menuInitialized = true;
            this.setMenuExtraProperties();
            this.filteredItems = __spread(this.menus);
            this.menuPrevious = JSON.stringify(this.menus);
            this.validateMenus(this.menus);
        };
        /**
         * @protected
         * @param {?=} collapsedMobile
         * @return {?}
         */
        ThfMenuComponent.prototype.validateCollapseClass = /**
         * @protected
         * @param {?=} collapsedMobile
         * @return {?}
         */
        function (collapsedMobile) {
            /** @type {?} */
            var wrapper = this.element.nativeElement.parentNode;
            this.renderer[this.isCollapsed && !collapsedMobile ? 'addClass' : 'removeClass'](wrapper, 'thf-collapsed-menu');
        };
        ThfMenuComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-menu',
                        template: "<div *ngIf=\"mobileOpened\" class=\"thf-menu-overlay\" (click)=\"toggleMenuMobile()\"></div>\n<div class=\"thf-menu-mobile thf-clickable\" (click)=\"toggleMenuMobile()\">\n  <span class=\"thf-icon thf-icon-menu\"></span>\n</div>\n\n<div class=\"thf-menu\" [ngClass]=\"{ 'thf-menu-animation' : mobileOpened }\">\n\n  <div class=\"thf-menu-header\">\n    <div *ngIf=\"logo || (shortLogo && enableCollapse)\" class=\"thf-menu-header-container-logo\">\n      <a href=\"./\">\n        <img\n          [ngClass]=\"enableCollapse ? 'thf-menu-short-logo' : 'thf-menu-logo'\"\n          [src]=\"enableCollapse ? shortLogo || logo : logo\">\n      </a>\n    </div>\n\n    <div *ngIf=\"!enableCollapse && menuHeaderTemplate\" class=\"thf-menu-header-template\">\n      <ng-container *ngTemplateOutlet=\"menuHeaderTemplate.templateRef\"></ng-container>\n    </div>\n\n    <thf-menu-filter *ngIf=\"filter && !enableCollapse\"\n      [t-loading]=\"filterLoading\"\n      (t-filter)=\"debounceFilter($event)\">\n    </thf-menu-filter>\n  </div>\n\n  <nav class=\"thf-menu-body\">\n\n    <!-- Inner e outer para esconder scroll -->\n    <div class=\"thf-menu-outer\">\n      <div class=\"thf-menu-inner\">\n\n        <div *ngIf=\"noData\" class=\"thf-menu-item-wrapper\">\n          <div class=\"thf-menu-item-first\">\n            <div class=\"thf-menu-icon-container thf-menu-item-no-data\">\n              <span class=\"thf-icon thf-icon-info thf-menu-icon-item thf-lg-2\"></span>\n              <div class=\"thf-lg-10 thf-menu-icon-label\"> {{literals.itemNotFound}} </div>\n            </div>\n          </div>\n        </div>\n\n        <div *ngFor=\"let menu of filteredItems, let menuIndex = index;\" class=\"thf-menu-item-wrapper\">\n          <thf-menu-item\n            [class.thf-menu-item-first]=\"menuIndex === 0\"\n            [t-action]=\"menu.action\"\n            [t-badge-alert]=\"menu.badgeAlert\"\n            [t-badge-color]=\"menu.badge ? menu.badge.color : undefined\"\n            [t-badge-value]=\"menu.badge ? menu.badge.value : undefined\"\n            [t-collapsed-menu]=\"enableCollapse\"\n            [t-icon]=\"allowIcons ? menu.icon : null\"\n            [t-id]=\"menu.id\"\n            [t-label]=\"menu.label\"\n            [t-level]=\"menu.level\"\n            [t-link]=\"menu.link\"\n            [t-short-label]=\"menu.shortLabel\"\n            [t-sub-items]=\"menu.subItems\"\n            [t-type]=\"menu.type\">\n          </thf-menu-item>\n        </div>\n      </div>\n    </div>\n  </nav>\n\n  <div *ngIf=\"hasFooter\" class=\"thf-menu-footer\">\n    <a\n      class=\"thf-menu-collapse-button-icon thf-clickable\"\n      (click)=\"toggle()\">\n\n      <span class=\"thf-icon\"\n        [class.thf-icon-menu-close]=\"enableCollapseButton\"\n        [class.thf-icon-menu-open]=\"enableCollapse\">\n      </span>\n    </a>\n  </div>\n</div>\n",
                        providers: [ThfMenuItemsService, ThfMenuService]
                    }] }
        ];
        /** @nocollapse */
        ThfMenuComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: router.Router },
            { type: ThfMenuItemsService },
            { type: core.ChangeDetectorRef },
            { type: ThfMenuService }
        ]; };
        ThfMenuComponent.propDecorators = {
            menuHeaderTemplate: [{ type: core.ContentChild, args: [ThfMenuHeaderTemplateDirective, { static: true },] }]
        };
        return ThfMenuComponent;
    }(ThfMenuBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente que apresenta o campo de pesquisa no thf-menu.
     */
    var ThfMenuFilterComponent = /** @class */ (function () {
        function ThfMenuFilterComponent() {
            // Variável necessária para o thf-clean identificar que deve ser criado.
            this.clean = true;
            this.filter = new core.EventEmitter();
        }
        /**
         * @param {?} search
         * @return {?}
         */
        ThfMenuFilterComponent.prototype.filterItems = /**
         * @param {?} search
         * @return {?}
         */
        function (search) {
            this.filter.emit(search);
        };
        ThfMenuFilterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-menu-filter',
                        template: "<div class=\"thf-menu-filter-container\">\n\n  <input #inputFilter\n    type=\"text\"\n    class=\"thf-menu-filter\"\n    placeholder=\"Pesquisar\"\n    (keyup)=\"filterItems(inputFilter.value)\">\n\n  <div class=\"thf-menu-filter-search-icon-container\">\n    <span *ngIf=\"!loading\" class=\"thf-icon thf-menu-filter-icon thf-icon-search\"></span>\n    <span *ngIf=\"loading\" class=\"thf-icon thf-menu-filter-icon thf-loading-icon\"></span>\n  </div>\n  <div class=\"thf-menu-filter-close-icon-container\">\n    <thf-clean [t-element-ref]=\"inputFilterElement\" (t-change-event)=\"filterItems(inputFilter.value)\"></thf-clean>\n  </div>\n\n</div>\n"
                    }] }
        ];
        ThfMenuFilterComponent.propDecorators = {
            loading: [{ type: core.Input, args: ['t-loading',] }],
            inputFilterElement: [{ type: core.ViewChild, args: ['inputFilter', { read: core.ElementRef, static: true },] }],
            filter: [{ type: core.Output, args: ['t-filter',] }]
        };
        return ThfMenuFilterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // valor para que caibam 3 linhas de `label`
    /** @type {?} */
    var thfMenuItemSubItemSize = 98;
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente que implementa cada item do thf-menu.
     */
    var ThfMenuItemComponent = /** @class */ (function () {
        function ThfMenuItemComponent(menuItemsService) {
            this.menuItemsService = menuItemsService;
            this._isSelected = false;
            this._isSubItem = false;
            this.maxHeight = 0;
        }
        Object.defineProperty(ThfMenuItemComponent.prototype, "badgeValue", {
            get: /**
             * @return {?}
             */
            function () {
                return this._badgeValue;
            },
            // Valor do badge.
            set: 
            // Valor do badge.
            /**
             * @param {?} badgeValue
             * @return {?}
             */
            function (badgeValue) {
                this._badgeValue = convertToInt(badgeValue);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMenuItemComponent.prototype, "isSelected", {
            get: /**
             * @return {?}
             */
            function () {
                return this._isSelected;
            },
            // Indica se o item está selecionado.
            set: 
            // Indica se o item está selecionado.
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._isSelected = convertToBoolean(value);
                this.isSelectedSubItem = this.isSelected && this.isSubItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMenuItemComponent.prototype, "isSubItem", {
            get: /**
             * @return {?}
             */
            function () {
                return this._isSubItem;
            },
            // Indica se o item é um sub item
            set: 
            // Indica se o item é um sub item
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._isSubItem = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMenuItemComponent.prototype, "subItems", {
            get: /**
             * @return {?}
             */
            function () {
                return this._subItems;
            },
            // Lista de sub-items.
            set: 
            // Lista de sub-items.
            /**
             * @param {?} subitems
             * @return {?}
             */
            function (subitems) {
                this._subItems = subitems;
                if (this.isOpened) {
                    this.calcMenuSubItemsMaxHeight();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfMenuItemComponent.prototype, "canShowBadge", {
            get: /**
             * @return {?}
             */
            function () {
                return this.type !== 'subItems' && (this.badgeValue || this.badgeValue === 0) && this.badgeValue >= 0;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfMenuItemComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.itemSubscription.unsubscribe();
        };
        /**
         * @return {?}
         */
        ThfMenuItemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            // subscribe to menu component messages
            this.itemSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe((/**
             * @param {?} menu
             * @return {?}
             */
            function (menu) {
                _this.processMenuItem(menu);
            }));
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfMenuItemComponent.prototype.clickMenuItem = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!(event.ctrlKey || event.metaKey)) {
                event.preventDefault();
                // Emmit to parent
                this.menuItemsService.sendToParentMenuClicked({
                    link: this.link,
                    action: this.action,
                    id: this.id,
                    icon: this.icon,
                    label: this.label,
                    level: this.level,
                    subItems: this.subItems,
                    isSelected: this.isSelected,
                    isOpened: this.isOpened,
                    shortLabel: this.shortLabel,
                    type: this.type
                });
            }
        };
        /**
         * @private
         * @param {?} menuActive
         * @param {?} menuOpened
         * @param {?} hasSubItemOpened
         * @param {?} activatedByRoute
         * @return {?}
         */
        ThfMenuItemComponent.prototype.accordionAnimation = /**
         * @private
         * @param {?} menuActive
         * @param {?} menuOpened
         * @param {?} hasSubItemOpened
         * @param {?} activatedByRoute
         * @return {?}
         */
        function (menuActive, menuOpened, hasSubItemOpened, activatedByRoute) {
            if (this.id === menuOpened['id']) {
                this.maxHeight = this.subItems.length * thfMenuItemSubItemSize;
            }
            if (hasSubItemOpened) {
                this.maxHeight = menuOpened['isOpened'] ?
                    (this.maxHeight + menuOpened.subItems.length * thfMenuItemSubItemSize) :
                    (this.maxHeight - menuOpened.subItems.length * thfMenuItemSubItemSize);
                if (activatedByRoute) {
                    this.maxHeight = this.getMinimumHeight(0, this, menuActive);
                }
            }
        };
        /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        ThfMenuItemComponent.prototype.activateMenu = /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            this.isSelected = menu && this.id === menu.id;
        };
        /**
         * @private
         * @return {?}
         */
        ThfMenuItemComponent.prototype.calcMenuSubItemsMaxHeight = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var subItems = Array.from(_this.menuSubItems.nativeElement.querySelectorAll('.thf-menu-item'));
                subItems.forEach((/**
                 * @param {?} menuItem
                 * @return {?}
                 */
                function (menuItem) { return _this.maxHeight += menuItem.offsetHeight; }));
            }));
        };
        /**
         * @private
         * @param {?} minimumHeight
         * @param {?} menuItem
         * @param {?} menuActive
         * @return {?}
         */
        ThfMenuItemComponent.prototype.getMinimumHeight = /**
         * @private
         * @param {?} minimumHeight
         * @param {?} menuItem
         * @param {?} menuActive
         * @return {?}
         */
        function (minimumHeight, menuItem, menuActive) {
            minimumHeight += thfMenuItemSubItemSize;
            if (menuItem.subItems && this.hasSubItem(menuItem.subItems, menuActive['id'])) {
                for (var index = 0; index < menuItem.subItems.length; index++) {
                    minimumHeight = this.getMinimumHeight(minimumHeight, menuItem.subItems[index], menuActive);
                }
            }
            return minimumHeight;
        };
        /**
         * @private
         * @param {?} menuActive
         * @param {?} menuOpened
         * @param {?=} activatedByRoute
         * @return {?}
         */
        ThfMenuItemComponent.prototype.groupedMenu = /**
         * @private
         * @param {?} menuActive
         * @param {?} menuOpened
         * @param {?=} activatedByRoute
         * @return {?}
         */
        function (menuActive, menuOpened, activatedByRoute) {
            if (activatedByRoute === void 0) { activatedByRoute = false; }
            /** @type {?} */
            var hasSubItemOpened = (menuOpened && this.id !== menuOpened['id']) ? this.hasSubItem(this.subItems, menuOpened['id']) : false;
            this.isOpened = this.isMenuOpened(menuOpened, hasSubItemOpened);
            this.isSelected = (menuActive && !this.isOpened) ? this.hasSubItem(this.subItems, menuActive['id']) : false;
            if (!this.isOpened) {
                this.maxHeight = 0;
                return;
            }
            this.accordionAnimation(menuActive, menuOpened, hasSubItemOpened, activatedByRoute);
        };
        /**
         * @private
         * @param {?} subItems
         * @param {?} id
         * @return {?}
         */
        ThfMenuItemComponent.prototype.hasSubItem = /**
         * @private
         * @param {?} subItems
         * @param {?} id
         * @return {?}
         */
        function (subItems, id) {
            var _this = this;
            if (subItems) {
                return subItems.some((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    return item['id'] === id ? true : _this.hasSubItem(item.subItems, id);
                }));
            }
        };
        /**
         * @private
         * @param {?} menuOpened
         * @param {?} hasSubItemOpened
         * @return {?}
         */
        ThfMenuItemComponent.prototype.isMenuOpened = /**
         * @private
         * @param {?} menuOpened
         * @param {?} hasSubItemOpened
         * @return {?}
         */
        function (menuOpened, hasSubItemOpened) {
            if (menuOpened) {
                return (this.id === menuOpened['id']) ? menuOpened['isOpened'] : hasSubItemOpened;
            }
            return false;
        };
        /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        ThfMenuItemComponent.prototype.processMenuItem = /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            if (this.type === 'internalLink') {
                this.activateMenu(menu.active);
                return;
            }
            if (this.type === 'subItems') {
                this.groupedMenu(menu.active, menu.grouped, menu.activatedByRoute);
                return;
            }
        };
        ThfMenuItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-menu-item',
                        template: "<!-- menu com link interno -->\n<a *ngIf=\"type === 'internalLink'\" class=\"thf-menu-item-link\" [routerLink]=\"link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu com link externo -->\n<a *ngIf=\"type === 'externalLink'\" class=\"thf-menu-item-link\" [href]=\"link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu sem link -->\n<a *ngIf=\"type === 'noLink'\" class=\"thf-menu-item-link\" href=\"javascript:;\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu com sub itens -->\n<div *ngIf=\"type === 'subItems'\" class=\"thf-menu-item-link thf-clickable\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate;\"></ng-container>\n  <div #menuSubItems\n    class=\"thf-menu-sub-items\"\n    [hidden]=\"collapsedMenu\"\n    [style.maxHeight.px]=\"maxHeight\">\n    <div *ngFor=\"let subItem of subItems\">\n      <thf-menu-item\n        t-is-sub-item\n        [t-action]=\"subItem.action\"\n        [t-badge-alert]=\"subItem.badgeAlert\"\n        [t-badge-color]=\"subItem.badge ? subItem.badge.color : undefined\"\n        [t-badge-value]=\"subItem.badge ? subItem.badge.value : undefined\"\n        [t-id]=\"subItem.id\"\n        [t-label]=\"subItem.label\"\n        [t-level]=\"subItem.level\"\n        [t-link]=\"subItem.link\"\n        [t-sub-items]=\"subItem.subItems\"\n        [t-type]=\"subItem.type\">\n      </thf-menu-item>\n    </div>\n  </div>\n</div>\n\n<ng-template #menuItemTemplate>\n  <div class=\"thf-menu-item\"\n    [class.thf-menu-icon-container]=\"level === 1 && icon\"\n    [class.thf-menu-item-selected]=\"isSelected\"\n    [class.thf-menu-item-level-two]=\"level === 2\"\n    [class.thf-menu-item-level-three]=\"level === 3\"\n    [class.thf-menu-item-level-four]=\"level === 4\"\n    [class.thf-menu-item-grouper-up]=\"type === 'subItems' && isOpened\"\n    [class.thf-menu-item-grouper-down]=\"type === 'subItems' && !isOpened\"\n    [class.thf-menu-sub-item-selected]=\"isSelectedSubItem\"\n    (click)=\"clickMenuItem($event);\">\n    <thf-badge *ngIf=\"canShowBadge\"\n      [ngClass]=\"!collapsedMenu ? 'thf-menu-badge-align' : 'thf-menu-badge-align-collapsed'\"\n      [t-color]=\"badgeColor\"\n      [t-value]=\"badgeValue\">\n    </thf-badge>\n    <span *ngIf=\"level === 1 && icon\" class=\"thf-icon {{icon}} thf-menu-icon-item\"></span>\n    <div *ngIf=\"badgeAlert\"\n      class=\"thf-color-07\"\n      [ngClass]=\"!collapsedMenu ? 'thf-menu-badge-alert' : 'thf-menu-badge-alert-collapsed'\">\n    </div>\n    <span *ngIf=\"type === 'subItems' && !collapsedMenu\"\n      class=\"thf-icon thf-menu-group-icon\"\n      [class.thf-icon-arrow-up]=\"isOpened\"\n      [class.thf-icon-arrow-down]=\"!isOpened\">\n    </span>\n    <div [class.thf-menu-icon-label]=\"level === 1 && icon\">\n      {{ label }}\n    </div>\n    <div *ngIf=\"collapsedMenu\" class=\"thf-menu-short-label\">{{ shortLabel }}</div>\n  </div>\n</ng-template>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfMenuItemComponent.ctorParameters = function () { return [
            { type: ThfMenuItemsService }
        ]; };
        ThfMenuItemComponent.propDecorators = {
            action: [{ type: core.Input, args: ['t-action',] }],
            badgeAlert: [{ type: core.Input, args: ['t-badge-alert',] }],
            badgeColor: [{ type: core.Input, args: ['t-badge-color',] }],
            badgeValue: [{ type: core.Input, args: ['t-badge-value',] }],
            collapsedMenu: [{ type: core.Input, args: ['t-collapsed-menu',] }],
            icon: [{ type: core.Input, args: ['t-icon',] }],
            id: [{ type: core.Input, args: ['t-id',] }],
            isOpened: [{ type: core.Input, args: ['t-is-opened',] }],
            isSelected: [{ type: core.Input, args: ['t-is-selected',] }],
            isSubItem: [{ type: core.Input, args: ['t-is-sub-item',] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            level: [{ type: core.Input, args: ['t-level',] }],
            link: [{ type: core.Input, args: ['t-link',] }],
            shortLabel: [{ type: core.Input, args: ['t-short-label',] }],
            subItems: [{ type: core.Input, args: ['t-sub-items',] }],
            type: [{ type: core.Input, args: ['t-type',] }],
            menuSubItems: [{ type: core.ViewChild, args: ['menuSubItems', { static: false },] }]
        };
        return ThfMenuItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente thf-menu.
     */
    var ThfMenuModule = /** @class */ (function () {
        function ThfMenuModule() {
        }
        ThfMenuModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            router.RouterModule,
                            ThfBadgeModule,
                            ThfFieldModule
                        ],
                        declarations: [
                            ThfMenuComponent,
                            ThfMenuFilterComponent,
                            ThfMenuHeaderTemplateDirective,
                            ThfMenuItemComponent
                        ],
                        exports: [
                            ThfMenuComponent,
                            ThfMenuHeaderTemplateDirective
                        ]
                    },] }
        ];
        return ThfMenuModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Este é um componente de menu lateral composto apenas por ícones e com um nível, utilizado para navegação
     * em páginas internas, externas da aplicação ou aciona uma ação.
     *
     * O componente `thf-menu-panel` recebe uma lista de objetos do tipo `MenuPanelItem` com as informações dos
     * itens de menu como textos, links para redirecionamento, ações e ícones.
     */
    var ThfMenuPanelBaseComponent = /** @class */ (function () {
        function ThfMenuPanelBaseComponent() {
        }
        Object.defineProperty(ThfMenuPanelBaseComponent.prototype, "menus", {
            get: /**
             * @return {?}
             */
            function () {
                return this._menus;
            },
            /** Lista dos itens do `thf-menu-panel`. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
            set: /**
             * Lista dos itens do `thf-menu-panel`. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
             * @param {?} menus
             * @return {?}
             */
            function (menus) {
                this._menus = Array.isArray(menus) ? menus : [];
                this.setMenuExtraProperties(this._menus);
                this.validateMenus(this._menus);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @param {?} menus
         * @return {?}
         */
        ThfMenuPanelBaseComponent.prototype.setMenuExtraProperties = /**
         * @private
         * @param {?} menus
         * @return {?}
         */
        function (menus) {
            var _this = this;
            menus.forEach((/**
             * @param {?} menuItem
             * @return {?}
             */
            function (menuItem) { return _this.setMenuItemProperties((/** @type {?} */ (menuItem))); }));
        };
        /**
         * @private
         * @param {?} menuItem
         * @return {?}
         */
        ThfMenuPanelBaseComponent.prototype.setMenuItemProperties = /**
         * @private
         * @param {?} menuItem
         * @return {?}
         */
        function (menuItem) {
            menuItem.id = menuItem.id || uuid$1.v4();
            menuItem.type = this.setMenuType(menuItem);
        };
        /**
         * @private
         * @param {?} menuItem
         * @return {?}
         */
        ThfMenuPanelBaseComponent.prototype.setMenuType = /**
         * @private
         * @param {?} menuItem
         * @return {?}
         */
        function (menuItem) {
            if (!menuItem.link) {
                return 'noLink';
            }
            if (isExternalLink(menuItem.link)) {
                return 'externalLink';
            }
            return 'internalLink';
        };
        /**
         * @private
         * @param {?} menuItem
         * @return {?}
         */
        ThfMenuPanelBaseComponent.prototype.validateMenu = /**
         * @private
         * @param {?} menuItem
         * @return {?}
         */
        function (menuItem) {
            if (!menuItem.label) {
                throw new Error('O atributo ThfMenuPanelItem.label não pode ser vazio.');
            }
            if (!menuItem.icon) {
                throw new Error('O atributo ThfMenuPanelItem.icon não pode ser vazio.');
            }
        };
        /**
         * @private
         * @param {?} menus
         * @return {?}
         */
        ThfMenuPanelBaseComponent.prototype.validateMenus = /**
         * @private
         * @param {?} menus
         * @return {?}
         */
        function (menus) {
            var _this = this;
            menus.forEach((/**
             * @param {?} menu
             * @return {?}
             */
            function (menu) { return _this.validateMenu(menu); }));
        };
        ThfMenuPanelBaseComponent.propDecorators = {
            menus: [{ type: core.Input, args: ['t-menus',] }]
        };
        return ThfMenuPanelBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Serviço que implementa a comunicação entre os items do thf-menu-panel.
     */
    var ThfMenuPanelItemsService = /** @class */ (function () {
        function ThfMenuPanelItemsService() {
            this.subjectChild = new rxjs.Subject();
            this.subjectParent = new rxjs.Subject();
        }
        // Recebe do thf-menu-panel-item sua informação de click.
        // Recebe do thf-menu-panel-item sua informação de click.
        /**
         * @return {?}
         */
        ThfMenuPanelItemsService.prototype.receiveFromChildMenuClicked = 
        // Recebe do thf-menu-panel-item sua informação de click.
        /**
         * @return {?}
         */
        function () {
            return this.subjectChild.asObservable();
        };
        // Recebe do thf-menu-panel as informações processadas do click de um thf-menu-panel-item.
        // Recebe do thf-menu-panel as informações processadas do click de um thf-menu-panel-item.
        /**
         * @return {?}
         */
        ThfMenuPanelItemsService.prototype.receiveFromParentMenuClicked = 
        // Recebe do thf-menu-panel as informações processadas do click de um thf-menu-panel-item.
        /**
         * @return {?}
         */
        function () {
            return this.subjectParent.asObservable();
        };
        // Envia informações do click do thf-menu-panel-item para o thf-menu
        // Envia informações do click do thf-menu-panel-item para o thf-menu
        /**
         * @param {?} menu
         * @return {?}
         */
        ThfMenuPanelItemsService.prototype.sendToParentMenuClicked = 
        // Envia informações do click do thf-menu-panel-item para o thf-menu
        /**
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            this.subjectChild.next(menu);
        };
        // Envia para os thf-menu-panel-item a resposta do processamento de click de um thf-menu-panel-item.
        // Envia para os thf-menu-panel-item a resposta do processamento de click de um thf-menu-panel-item.
        /**
         * @param {?} menu
         * @return {?}
         */
        ThfMenuPanelItemsService.prototype.sendToChildMenuClicked = 
        // Envia para os thf-menu-panel-item a resposta do processamento de click de um thf-menu-panel-item.
        /**
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            this.subjectParent.next(menu);
        };
        ThfMenuPanelItemsService.decorators = [
            { type: core.Injectable }
        ];
        return ThfMenuPanelItemsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfMenuPanelBaseComponent
     *
     * \@description
     *
     * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
     *  sua aplicação:
     *
     * ````
     * import { RouterModule, Routes } from '\@angular/router';
     *
     * ...
     *
     * \@NgModule({
     *   imports: [
     *     RouterModule,
     *     Routes,
     *     ...
     *     ThfModule,
     *     ...
     *   ],
     *   declarations: [
     *     AppComponent
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     *
     * Além disso é necessário criar um módulo configurando as rotas da aplicação.
     *
     * ```
     * import { NgModule } from '\@angular/core';
     *
     * import { RouterModule, Routes } from '\@angular/router';
     *
     * import { HelloWorldComponent } from './hello-world/hello-world.component';
     *
     * const routes: Routes = [
     *   {path: 'hello-world', component: HelloWorldComponent}
     * ];
     *
     * \@NgModule({
     *   imports: [RouterModule.forRoot(routes, {useHash: true})],
     *   exports: [RouterModule]
     * })
     * export class AppRoutingModule {}
     * ```
     *
     * \@example
     *
     * <example name="thf-menu-panel-basic" title="Totvs Menu Panel Basic">
     *   <file name="sample-thf-menu-panel-basic/sample-thf-menu-panel-basic.component.html"> </file>
     *   <file name="sample-thf-menu-panel-basic/sample-thf-menu-panel-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-menu-panel-labs" title="Totvs Menu Panel Labs">
     *   <file name="sample-thf-menu-panel-labs/sample-thf-menu-panel-labs.component.html"> </file>
     *   <file name="sample-thf-menu-panel-labs/sample-thf-menu-panel-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-menu-panel-customer" title="Totvs Menu Panel - Customers">
     *   <file name="sample-thf-menu-panel-customer/sample-thf-menu-panel-customer.component.html"> </file>
     *   <file name="sample-thf-menu-panel-customer/sample-thf-menu-panel-customer.component.ts"> </file>
     * </example>
     */
    var ThfMenuPanelComponent = /** @class */ (function (_super) {
        __extends(ThfMenuPanelComponent, _super);
        function ThfMenuPanelComponent(viewRef, location, menuItemsService, router) {
            var _this = _super.call(this) || this;
            _this.location = location;
            _this.menuItemsService = menuItemsService;
            _this.router = router;
            _this.parentRef = viewRef['_view']['component'];
            return _this;
        }
        /**
         * @return {?}
         */
        ThfMenuPanelComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.itemSubscription.unsubscribe();
            this.routeSubscription.unsubscribe();
        };
        /**
         * @return {?}
         */
        ThfMenuPanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.subscribeToMenuItem();
            this.subscribeToRoute();
        };
        /**
         * @private
         * @param {?} urlPath
         * @param {?} menus
         * @return {?}
         */
        ThfMenuPanelComponent.prototype.activateMenuByUrl = /**
         * @private
         * @param {?} urlPath
         * @param {?} menus
         * @return {?}
         */
        function (urlPath, menus) {
            var _this = this;
            if (menus) {
                return menus.some((/**
                 * @param {?} menu
                 * @return {?}
                 */
                function (menu) {
                    if (getFormattedLink(menu.link) === urlPath) {
                        _this.activateMenuItem(menu);
                        return true;
                    }
                }));
            }
        };
        /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        ThfMenuPanelComponent.prototype.activateMenuItem = /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            this.activeMenuItem = menu;
            this.linkActive = getFormattedLink(menu.link);
            this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, activatedByRoute: true });
        };
        /**
         * @private
         * @param {?} urlPath
         * @return {?}
         */
        ThfMenuPanelComponent.prototype.checkActiveMenuByUrl = /**
         * @private
         * @param {?} urlPath
         * @return {?}
         */
        function (urlPath) {
            if (!this.linkActive || this.linkActive !== urlPath) {
                this.activateMenuByUrl(urlPath, this.menus);
            }
        };
        /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        ThfMenuPanelComponent.prototype.clickMenuItem = /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            if (menu.action) {
                callFunction(menu.action, this.parentRef, menu);
            }
            if (menu.type === 'externalLink') {
                openExternalLink(menu.link);
            }
            else if (menu.type === 'internalLink') {
                this.activateMenuItem(menu);
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfMenuPanelComponent.prototype.subscribeToRoute = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.routeSubscription = this.router.events.subscribe((/**
             * @param {?} rounterEvent
             * @return {?}
             */
            function (rounterEvent) {
                if (rounterEvent instanceof router.NavigationEnd) {
                    _this.checkActiveMenuByUrl(_this.location.path());
                }
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfMenuPanelComponent.prototype.subscribeToMenuItem = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.itemSubscription =
                this.menuItemsService.receiveFromChildMenuClicked().subscribe((/**
                 * @param {?} menu
                 * @return {?}
                 */
                function (menu) { return _this.clickMenuItem(menu); }));
        };
        ThfMenuPanelComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-menu-panel',
                        template: "<div class=\"thf-menu-panel\">\n  <div class=\"thf-menu-panel-logo-container\">\n    <a href=\"./\">\n      <div class=\"thf-menu-panel-logo\"></div>\n    </a>\n  </div>\n\n  <nav class=\"thf-menu-panel-container\">\n    <div class=\"thf-menu-panel-inner\">\n      <div *ngFor=\"let menu of menus, let menuIndex = index;\" class=\"thf-menu-panel-item-wrapper\">\n        <thf-menu-panel-item\n          [class.thf-menu-panel-item-first]=\"menuIndex === 0\"\n          [t-menu-item-internal]=\"menu\">\n        </thf-menu-panel-item>\n      </div>\n    </div>\n  </nav>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfMenuPanelComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: common.Location },
            { type: ThfMenuPanelItemsService },
            { type: router.Router }
        ]; };
        return ThfMenuPanelComponent;
    }(ThfMenuPanelBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente que implementa cada item do thf-menu-panel.
     */
    var ThfMenuPanelItemComponent = /** @class */ (function () {
        function ThfMenuPanelItemComponent(menuItemsService) {
            this.menuItemsService = menuItemsService;
        }
        /**
         * @return {?}
         */
        ThfMenuPanelItemComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.itemsSubscription.unsubscribe();
        };
        /**
         * @return {?}
         */
        ThfMenuPanelItemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            // subscribe to menu component messages
            this.subscribeMenuClickedFromParent();
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfMenuPanelItemComponent.prototype.clickMenuItem = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!(event.ctrlKey || event.metaKey)) {
                event.preventDefault();
                // Emmit to parent
                this.menuItemsService.sendToParentMenuClicked(this.menuItemInternal);
            }
        };
        /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        ThfMenuPanelItemComponent.prototype.activateMenu = /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            this.menuItemInternal.isSelected = this.menuItemInternal.id === menu.id;
        };
        /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        ThfMenuPanelItemComponent.prototype.processMenuItem = /**
         * @private
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            if (this.menuItemInternal.type === 'internalLink') {
                this.activateMenu(menu.active);
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfMenuPanelItemComponent.prototype.subscribeMenuClickedFromParent = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.itemsSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe((/**
             * @param {?} menu
             * @return {?}
             */
            function (menu) {
                _this.processMenuItem(menu);
            }));
        };
        ThfMenuPanelItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-menu-panel-item',
                        template: "<!-- menu com link interno -->\n<a *ngIf=\"menuItemInternal.type === 'internalLink'\" [routerLink]=\"menuItemInternal.link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n\n<!-- menu com link externo -->\n<a *ngIf=\"menuItemInternal.type === 'externalLink'\" [href]=\"menuItemInternal.link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n\n<!-- menu sem link -->\n<a *ngIf=\"menuItemInternal.type === 'noLink'\" href=\"javascript:;\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n\n<ng-template #menuItemTemplate>\n  <div class=\"thf-menu-panel-item\"\n    t-tooltip-position=\"right\"\n    [class.thf-menu-panel-item-selected]=\"menuItemInternal.isSelected\"\n    [t-tooltip]=\"menuItemInternal.label\"\n    (click)=\"clickMenuItem($event);\">\n    <span class=\"thf-icon {{menuItemInternal.icon}}\"></span>\n  </div>\n</ng-template>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfMenuPanelItemComponent.ctorParameters = function () { return [
            { type: ThfMenuPanelItemsService }
        ]; };
        ThfMenuPanelItemComponent.propDecorators = {
            menuItemInternal: [{ type: core.Input, args: ['t-menu-item-internal',] }]
        };
        return ThfMenuPanelItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente thf-menu-panel.
     */
    var ThfMenuPanelModule = /** @class */ (function () {
        function ThfMenuPanelModule() {
        }
        ThfMenuPanelModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            router.RouterModule,
                            ThfFieldModule,
                            ThfTooltipModule
                        ],
                        declarations: [
                            ThfMenuPanelComponent,
                            ThfMenuPanelItemComponent
                        ],
                        exports: [
                            ThfMenuPanelComponent
                        ],
                        providers: [
                            ThfMenuPanelItemsService
                        ]
                    },] }
        ];
        return ThfMenuPanelModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfNavbarActionComponent = /** @class */ (function () {
        function ThfNavbarActionComponent(viewContainerRef, router) {
            this.router = router;
            this.parentRef = viewContainerRef['_view']['component'];
        }
        /**
         * @return {?}
         */
        ThfNavbarActionComponent.prototype.onActionClick = /**
         * @return {?}
         */
        function () {
            if (this.action) {
                return callFunction(this.action, this.parentRef, this.param || this);
            }
            if (this.link) {
                return this.openUrl(this.link);
            }
        };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        ThfNavbarActionComponent.prototype.openUrl = /**
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            if (isExternalLink(url)) {
                return openExternalLink(url);
            }
            if (url) {
                return this.router.navigate([url]);
            }
        };
        ThfNavbarActionComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-navbar-action',
                        template: "<div tabindex=\"0\"\n  class=\"thf-navbar-action-content thf-clickable\"\n  (click)=\"onActionClick()\">\n\n  <span\n  class=\"thf-icon {{ icon }}\"\n  [t-tooltip]=\"tooltip\">\n  </span>\n\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfNavbarActionComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: router.Router }
        ]; };
        ThfNavbarActionComponent.propDecorators = {
            action: [{ type: core.Input, args: ['t-action',] }],
            icon: [{ type: core.Input, args: ['t-icon',] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            link: [{ type: core.Input, args: ['t-link',] }],
            tooltip: [{ type: core.Input, args: ['t-tooltip-text',] }]
        };
        return ThfNavbarActionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfNavbarActionPopupComponent = /** @class */ (function () {
        function ThfNavbarActionPopupComponent() {
        }
        /**
         * @return {?}
         */
        ThfNavbarActionPopupComponent.prototype.getLastIconAction = /**
         * @return {?}
         */
        function () {
            if (this.iconActions && this.iconActions.length > 0) {
                return this.iconActions[this.iconActions.length - 1].icon;
            }
        };
        ThfNavbarActionPopupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-navbar-action-popup',
                        template: "<div tabindex=\"0\" #target\n  class=\"thf-navbar-action-popup-content thf-clickable\"\n  (click)=\"popup.toggle()\">\n  <span class=\"thf-icon {{ getLastIconAction() }}\"></span>\n</div>\n\n<thf-popup #popup\n  [t-actions]=\"iconActions\"\n  [t-target]=\"target\">\n</thf-popup>\n"
                    }] }
        ];
        ThfNavbarActionPopupComponent.propDecorators = {
            iconActions: [{ type: core.Input, args: ['t-icon-actions',] }]
        };
        return ThfNavbarActionPopupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfNavbarActionsComponent = /** @class */ (function () {
        function ThfNavbarActionsComponent() {
        }
        Object.defineProperty(ThfNavbarActionsComponent.prototype, "iconActions", {
            get: /**
             * @return {?}
             */
            function () {
                return this._iconActions;
            },
            set: /**
             * @param {?} actions
             * @return {?}
             */
            function (actions) {
                this._iconActions = actions.map((/**
                 * @param {?} action
                 * @return {?}
                 */
                function (action) { return (__assign({}, action, { separator: true, url: action.link })); }));
            },
            enumerable: true,
            configurable: true
        });
        ThfNavbarActionsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-navbar-actions',
                        template: "<thf-navbar-action *ngFor=\"let iconAction of iconActions\"\n  class=\"thf-navbar-action\"\n  [t-action]=\"iconAction.action\"\n  [t-icon]=\"iconAction.icon\"\n  [t-label]=\"iconAction.label\"\n  [t-link]=\"iconAction.link\"\n  [t-tooltip-text]=\"iconAction.tooltip\">\n</thf-navbar-action>\n\n<thf-navbar-action-popup\n  class=\"thf-navbar-action-popup\"\n  [t-icon-actions]=\"iconActions\">\n</thf-navbar-action-popup>\n\n\n"
                    }] }
        ];
        ThfNavbarActionsComponent.propDecorators = {
            iconActions: [{ type: core.Input, args: ['t-icon-actions',] }]
        };
        return ThfNavbarActionsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfNavbarActionsModule = /** @class */ (function () {
        function ThfNavbarActionsModule() {
        }
        ThfNavbarActionsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            ThfPopupModule,
                            ThfTooltipModule
                        ],
                        declarations: [
                            ThfNavbarActionComponent,
                            ThfNavbarActionPopupComponent,
                            ThfNavbarActionsComponent
                        ],
                        exports: [
                            ThfNavbarActionsComponent
                        ]
                    },] }
        ];
        return ThfNavbarActionsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfNavbarLiteralsDefault = {
        en: (/** @type {?} */ ({
            navbarLinks: 'Navbar links'
        })),
        es: (/** @type {?} */ ({
            navbarLinks: 'Navbar links'
        })),
        pt: (/** @type {?} */ ({
            navbarLinks: 'Navbar links'
        }))
    };
    /**
     * \@description
     *
     * O componente `thf-navbar` é um cabeçalho fixo que permite apresentar uma lista de links para facilitar a navegação pelas
     * páginas da aplicação. Também possui ícones com ações.
     */
    var ThfNavbarBaseComponent = /** @class */ (function () {
        function ThfNavbarBaseComponent() {
            this._iconActions = [];
            this._items = [];
            this._shadow = false;
        }
        Object.defineProperty(ThfNavbarBaseComponent.prototype, "iconActions", {
            get: /**
             * @return {?}
             */
            function () {
                return this._iconActions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma lista de ações apresentadas em ícones no lado direito do `thf-navbar`.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define uma lista de ações apresentadas em ícones no lado direito do `thf-navbar`.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._iconActions = value || [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfNavbarBaseComponent.prototype, "items", {
            get: /**
             * @return {?}
             */
            function () {
                return this._items;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define uma lista de items do `thf-navbar`.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define uma lista de items do `thf-navbar`.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._items = value || [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfNavbarBaseComponent.prototype, "literals", {
            get: /**
             * @return {?}
             */
            function () {
                return this._literals || thfNavbarLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com a literal usada na propriedade `t-literals`.
             *
             * Para customizar a literal, basta declarar um objeto do tipo `ThfNavbarLiterals` conforme exemplo abaixo:
             *
             * ```
             *  const customLiterals: ThfNavbarLiterals = {
             *    navbarLinks: 'Itens de navegação'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-navbar
             *   [t-literals]="customLiterals">
             * </thf-navbar>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Objeto com a literal usada na propriedade `t-literals`.
             *
             * Para customizar a literal, basta declarar um objeto do tipo `ThfNavbarLiterals` conforme exemplo abaixo:
             *
             * ```
             *  const customLiterals: ThfNavbarLiterals = {
             *    navbarLinks: 'Itens de navegação'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-navbar
             *   [t-literals]="customLiterals">
             * </thf-navbar>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign({}, thfNavbarLiteralsDefault[thfLocaleDefault], thfNavbarLiteralsDefault[browserLanguage()], value);
                }
                else {
                    this._literals = thfNavbarLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfNavbarBaseComponent.prototype, "shadow", {
            get: /**
             * @return {?}
             */
            function () {
                return this._shadow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Aplica uma sombra na parte inferior do `thf-navbar`.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Aplica uma sombra na parte inferior do `thf-navbar`.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._shadow = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        ThfNavbarBaseComponent.propDecorators = {
            iconActions: [{ type: core.Input, args: ['t-icon-actions',] }],
            items: [{ type: core.Input, args: ['t-items',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }],
            logo: [{ type: core.Input, args: ['t-logo',] }],
            menu: [{ type: core.Input, args: ['t-menu',] }],
            shadow: [{ type: core.Input, args: ['t-shadow',] }]
        };
        return ThfNavbarBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfNavbarItemComponent = /** @class */ (function () {
        function ThfNavbarItemComponent() {
            this.click = new core.EventEmitter();
        }
        Object.defineProperty(ThfNavbarItemComponent.prototype, "type", {
            get: /**
             * @return {?}
             */
            function () {
                if (isExternalLink(this.link)) {
                    return 'externalLink';
                }
                return 'internalLink';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfNavbarItemComponent.prototype.itemClick = /**
         * @return {?}
         */
        function () {
            if (this.action) {
                this.action({ label: this.label, link: this.link });
            }
            this.click.emit();
        };
        ThfNavbarItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-navbar-item',
                        template: "<ng-container [ngSwitch]=\"type\">\n\n  <a *ngSwitchCase=\"'externalLink'\"\n    class=\"thf-navbar-item-link\"\n    [class.thf-clickable]=\"clickable\"\n    [href]=\"link\" \n    target=\"_blank\"\n    (click)=\"itemClick()\">{{ label }}</a>\n\n  <a *ngSwitchCase=\"'internalLink'\"\n    class=\"thf-navbar-item-link\"\n    [class.thf-clickable]=\"clickable\"\n    [routerLink]=\"link\"\n    (click)=\"itemClick()\">{{ label }}</a>\n\n</ng-container>\n"
                    }] }
        ];
        ThfNavbarItemComponent.propDecorators = {
            action: [{ type: core.Input, args: ['t-action',] }],
            clickable: [{ type: core.Input, args: ['t-clickable',] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            link: [{ type: core.Input, args: ['t-link',] }],
            click: [{ type: core.Output, args: ['t-click',] }]
        };
        return ThfNavbarItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfNavbarItemsComponent = /** @class */ (function () {
        function ThfNavbarItemsComponent(router) {
            this.router = router;
        }
        /**
         * @return {?}
         */
        ThfNavbarItemsComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.routeSubscription.unsubscribe();
        };
        /**
         * @return {?}
         */
        ThfNavbarItemsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.subscribeToRoute();
        };
        /**
         * @param {?} item
         * @return {?}
         */
        ThfNavbarItemsComponent.prototype.selectItem = /**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            this.selectedItem = item;
        };
        /**
         * @private
         * @param {?} urlRouter
         * @return {?}
         */
        ThfNavbarItemsComponent.prototype.checkActiveItemByUrl = /**
         * @private
         * @param {?} urlRouter
         * @return {?}
         */
        function (urlRouter) {
            this.selectedItem = this.items.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.link === urlRouter; }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfNavbarItemsComponent.prototype.checkRouterChildrenFragments = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
            return childrenPrimary ? "/" + childrenPrimary.segments.map((/**
             * @param {?} it
             * @return {?}
             */
            function (it) { return it.path; })).join('/') : '';
        };
        /**
         * @private
         * @return {?}
         */
        ThfNavbarItemsComponent.prototype.subscribeToRoute = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.routeSubscription = this.router.events.subscribe((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                if (val instanceof router.NavigationEnd || val instanceof router.NavigationCancel) {
                    /** @type {?} */
                    var urlRouter = _this.checkRouterChildrenFragments();
                    _this.checkActiveItemByUrl(urlRouter);
                }
            }));
        };
        ThfNavbarItemsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-navbar-items',
                        template: "<nav>\n  <ul class=\"thf-navbar-items-container\" #navbarItemsContainer>\n    <li *ngFor=\"let item of items\"\n      class=\"thf-navbar-item\"\n      [class.thf-navbar-item-selected]=\"selectedItem === item\">\n      <thf-navbar-item\n        [t-action]=\"item.action\"\n        [t-clickable]=\"selectedItem !== item\"\n        [t-label]=\"item.label\"\n        [t-link]=\"item.link\"\n        (t-click)=\"selectItem(item)\">\n      </thf-navbar-item>\n    </li>\n  </ul>\n</nav>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfNavbarItemsComponent.ctorParameters = function () { return [
            { type: router.Router }
        ]; };
        ThfNavbarItemsComponent.propDecorators = {
            navbarItemsContainer: [{ type: core.ViewChild, args: ['navbarItemsContainer', { read: core.ElementRef, static: true },] }],
            allNavbarItems: [{ type: core.ViewChildren, args: [ThfNavbarItemComponent, { read: core.ElementRef },] }],
            items: [{ type: core.Input, args: ['t-items',] }]
        };
        return ThfNavbarItemsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfNavbarBaseComponent
     */
    var ThfNavbarComponent = /** @class */ (function (_super) {
        __extends(ThfNavbarComponent, _super);
        function ThfNavbarComponent(renderer, builder, changeDetector) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.builder = builder;
            _this.changeDetector = changeDetector;
            _this.showItemsNavigation = false;
            _this.offset = 0;
            _this.windowResizeListener = _this.renderer.listen(window, 'resize', _this.displayItemsNavigation.bind(_this));
            return _this;
        }
        /**
         * @return {?}
         */
        ThfNavbarComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.displayItemsNavigation();
            this.menuWrapperAdjust();
        };
        /**
         * @return {?}
         */
        ThfNavbarComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.mediaQuery) {
                this.mediaQuery.removeListener();
            }
        };
        /**
         * @param {?} orientation
         * @return {?}
         */
        ThfNavbarComponent.prototype.navigateItems = /**
         * @param {?} orientation
         * @return {?}
         */
        function (orientation) {
            orientation === 'left' ? this.navigateLeft() : this.navigateRight();
            this.animate(this.offset);
        };
        /**
         * @private
         * @return {?}
         */
        ThfNavbarComponent.prototype.adjustNavbarMenu = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var navbarMenu = document.querySelector('thf-navbar thf-menu');
            /** @type {?} */
            var page = document.querySelector('.thf-page');
            /** @type {?} */
            var navbarLogo = document.querySelector('.thf-navbar-logo');
            navbarMenu.setAttribute('style', "display: none");
            if (page) {
                page.setAttribute('style', 'margin-left: 0; width: 100%');
            }
            if (navbarLogo) {
                navbarLogo.setAttribute('style', "padding: 0 16px 0 0!important");
            }
            this.mediaQuery.addListener((/**
             * @param {?} changed
             * @return {?}
             */
            function (changed) {
                if (changed.matches) {
                    navbarMenu.setAttribute('style', "display: block");
                    if (page) {
                        page.setAttribute('style', 'margin-left: 256; width: calc(100% - 256px)');
                    }
                }
                else {
                    navbarMenu.setAttribute('style', "display: none");
                    if (page) {
                        page.setAttribute('style', 'margin-left: 0; width: 100%');
                    }
                }
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfNavbarComponent.prototype.adjustUserMenu = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var userMenuItems = this.menu.menus;
            this.mediaQuery.addListener((/**
             * @param {?} changed
             * @return {?}
             */
            function (changed) {
                if (changed.matches) {
                    /** @type {?} */
                    var subItems = [{ label: _this.literals.navbarLinks, subItems: _this.items }];
                    _this.menu.menus = __spread(subItems, _this.menu.menus);
                }
                else {
                    _this.menu.menus = userMenuItems;
                }
            }));
        };
        /**
         * @private
         * @param {?} offset
         * @return {?}
         */
        ThfNavbarComponent.prototype.animate = /**
         * @private
         * @param {?} offset
         * @return {?}
         */
        function (offset) {
            /** @type {?} */
            var animation = this.buildTransitionAnimation(offset);
            this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);
            this.player.play();
        };
        /**
         * @private
         * @param {?} offset
         * @return {?}
         */
        ThfNavbarComponent.prototype.buildTransitionAnimation = /**
         * @private
         * @param {?} offset
         * @return {?}
         */
        function (offset) {
            return this.builder.build([
                animations.animate('250ms ease', animations.keyframes([animations.style({ transform: "translateX(" + offset + "px)" })]))
            ]);
        };
        /**
         * @private
         * @return {?}
         */
        ThfNavbarComponent.prototype.displayItemsNavigation = /**
         * @private
         * @return {?}
         */
        function () {
            this.navbarItemsWidth = this.navbarItemsElement.nativeElement.offsetWidth;
            this.allNavbarItemsWidth =
                this.navbarItems.allNavbarItems.reduce((/**
                 * @param {?} previous
                 * @param {?} current
                 * @return {?}
                 */
                function (previous, current) { return previous + current.nativeElement.offsetWidth; }), 0);
            this.showItemsNavigation = this.navbarItemsWidth < this.allNavbarItemsWidth + 88;
            this.changeDetector.detectChanges();
            if (this.offset !== 0) {
                this.offset = 0;
                this.animate(this.offset);
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfNavbarComponent.prototype.menuWrapperAdjust = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var body = document.querySelector('body');
            body.setAttribute('style', "height: calc(100% - 56px)");
            this.mediaQuery = window.matchMedia('(max-width: 768px)');
            !this.menu ? this.adjustNavbarMenu() : this.adjustUserMenu();
        };
        /**
         * @private
         * @return {?}
         */
        ThfNavbarComponent.prototype.navigateRight = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var maxAllowedOffset = this.allNavbarItemsWidth - this.navbarItemsElement.nativeElement.offsetWidth;
            /** @type {?} */
            var itemBreakPoint = (this.offset * -1) + this.navbarItemsElement.nativeElement.offsetWidth;
            /** @type {?} */
            var movementInPixels = 0;
            this.navbarItems.allNavbarItems.some((/**
             * @param {?} navbarItem
             * @return {?}
             */
            function (navbarItem) {
                /** @type {?} */
                var finalPosition = navbarItem.nativeElement.offsetWidth + navbarItem.nativeElement.offsetLeft;
                if (itemBreakPoint < finalPosition) {
                    movementInPixels = navbarItem.nativeElement.offsetLeft;
                    return true;
                }
            }));
            this.offset = (movementInPixels * -1);
            if ((this.offset * -1) >= maxAllowedOffset) {
                this.offset = maxAllowedOffset * -1;
                this.disableRight = true;
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfNavbarComponent.prototype.navigateLeft = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.disableRight = false;
            /** @type {?} */
            var movementInPixels;
            this.navbarItems.allNavbarItems.some((/**
             * @param {?} navbarItem
             * @return {?}
             */
            function (navbarItem) {
                /** @type {?} */
                var navbarItemOffset = navbarItem.nativeElement.offsetLeft;
                if (navbarItemOffset >= (_this.offset * -1)) {
                    movementInPixels = navbarItemOffset - (_this.navbarItemsElement.nativeElement.offsetWidth - navbarItem.nativeElement.offsetWidth);
                    return true;
                }
            }));
            this.offset = (movementInPixels * -1);
            if (this.offset > 0) {
                this.offset = 0;
            }
        };
        ThfNavbarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-navbar',
                        template: "<header class=\"thf-navbar\"\n  [ngClass]=\"{'thf-navbar-shadow' : shadow}\">\n\n  <thf-navbar-logo\n    class=\"thf-navbar-logo\"\n    [t-logo]=\"logo\">\n  </thf-navbar-logo>\n\n  <thf-navbar-items\n    class=\"thf-navbar-items\"\n    [t-items]=\"items\">\n  </thf-navbar-items>\n\n  <thf-navbar-item-navigation *ngIf=\"showItemsNavigation\"\n    class=\"thf-navbar-item-navigation\"\n    [t-disable-left]=\"offset === 0\"\n    [t-disable-right]=\"disableRight && offset !== 0\"\n    (t-click)=\"navigateItems($event)\">\n  </thf-navbar-item-navigation>\n\n  <thf-navbar-actions\n    class=\"thf-navbar-actions\"\n    [t-icon-actions]=\"iconActions\">\n  </thf-navbar-actions>\n\n</header>\n\n<thf-menu *ngIf=\"!menu\"\n  [t-menus]=\"items\">\n</thf-menu>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfNavbarComponent.ctorParameters = function () { return [
            { type: core.Renderer2 },
            { type: animations.AnimationBuilder },
            { type: core.ChangeDetectorRef }
        ]; };
        ThfNavbarComponent.propDecorators = {
            navbarItemsElement: [{ type: core.ViewChild, args: [ThfNavbarItemsComponent, { read: core.ElementRef, static: true },] }],
            navbarItems: [{ type: core.ViewChild, args: [ThfNavbarItemsComponent, { static: true },] }]
        };
        return ThfNavbarComponent;
    }(ThfNavbarBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfNavbarItemsModule = /** @class */ (function () {
        function ThfNavbarItemsModule() {
        }
        ThfNavbarItemsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            router.RouterModule
                        ],
                        declarations: [
                            ThfNavbarItemComponent,
                            ThfNavbarItemsComponent
                        ],
                        exports: [
                            ThfNavbarItemsComponent
                        ]
                    },] }
        ];
        return ThfNavbarItemsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfNavbarItemNavigationComponent = /** @class */ (function () {
        function ThfNavbarItemNavigationComponent() {
            this.click = new core.EventEmitter();
        }
        ThfNavbarItemNavigationComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-navbar-item-navigation',
                        template: "<div class=\"thf-navbar-item-navigation-icon\"\n  [ngClass]=\"{'thf-navbar-item-navigation-icon-disabled': disableLeft , 'thf-clickable': !disableLeft }\"\n  tabindex=\"0\"\n  (click)=\"disableLeft ? undefined : click.emit('left')\" >\n  <span class=\"thf-icon thf-icon-arrow-left\"></span>\n</div>\n<div class=\"thf-navbar-item-navigation-icon\"\n  [ngClass]=\"{'thf-navbar-item-navigation-icon-disabled': disableRight , 'thf-clickable': !disableRight }\"  \n  tabindex=\"0\"\n  (click)=\"disableRight ? undefined : click.emit('right')\">\n  <span class=\"thf-icon thf-icon-arrow-right\"></span>\n</div>\n"
                    }] }
        ];
        ThfNavbarItemNavigationComponent.propDecorators = {
            disableLeft: [{ type: core.Input, args: ['t-disable-left',] }],
            disableRight: [{ type: core.Input, args: ['t-disable-right',] }],
            click: [{ type: core.Output, args: ['t-click',] }]
        };
        return ThfNavbarItemNavigationComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfNavbarLogoComponent = /** @class */ (function () {
        function ThfNavbarLogoComponent() {
        }
        ThfNavbarLogoComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-navbar-logo',
                        template: "<a href=\"./\">\n  <img *ngIf=\"logo\" class=\"thf-navbar-logo-image\" alt=\"logo\" [src]=\"logo\">\n</a>\n"
                    }] }
        ];
        ThfNavbarLogoComponent.propDecorators = {
            logo: [{ type: core.Input, args: ['t-logo',] }]
        };
        return ThfNavbarLogoComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfNavbarModule = /** @class */ (function () {
        function ThfNavbarModule() {
        }
        ThfNavbarModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            ThfNavbarActionsModule,
                            ThfNavbarItemsModule,
                            ThfMenuModule
                        ],
                        declarations: [
                            ThfNavbarComponent,
                            ThfNavbarItemNavigationComponent,
                            ThfNavbarLogoComponent
                        ],
                        exports: [
                            ThfNavbarComponent
                        ]
                    },] }
        ];
        return ThfNavbarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * O componente **thf-page** é utilizado como container principal para os componentes thf-page-header, thf-page-content
     * e para as ações dos componentes thf-page-edit e thf-page-detail.
     *
     * Quando estiver sendo utilizado o componente thf-menu junto ao thf-page, ambos devem estar no mesmo nível
     * e inseridos em uma div com a classe **thf-wrapper**. Esta classe será responsável por fazer os cálculos
     * necessários de alinhamento dos componentes.
     *
     * O componente **thf-page** também pode ser utilizado sem o thf-menu e neste caso o corpo da página deve ser
     * definido com a altura de 100% para que o thf-page maximize seu tamanho.
     * ```
     * html, body {
     *   height:100%;
     * }
     * ```
     */
    var   /**
     * \@docsPrivate
     *
     * \@description
     *
     * O componente **thf-page** é utilizado como container principal para os componentes thf-page-header, thf-page-content
     * e para as ações dos componentes thf-page-edit e thf-page-detail.
     *
     * Quando estiver sendo utilizado o componente thf-menu junto ao thf-page, ambos devem estar no mesmo nível
     * e inseridos em uma div com a classe **thf-wrapper**. Esta classe será responsável por fazer os cálculos
     * necessários de alinhamento dos componentes.
     *
     * O componente **thf-page** também pode ser utilizado sem o thf-menu e neste caso o corpo da página deve ser
     * definido com a altura de 100% para que o thf-page maximize seu tamanho.
     * ```
     * html, body {
     *   height:100%;
     * }
     * ```
     */
    ThfPageBaseComponent = /** @class */ (function () {
        function ThfPageBaseComponent() {
        }
        return ThfPageBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@docsExtends ThfPageBaseComponent
     */
    var ThfPageComponent = /** @class */ (function (_super) {
        __extends(ThfPageComponent, _super);
        function ThfPageComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ThfPageComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page',
                        template: "<div class=\"thf-page\">\n  <ng-content>\n  </ng-content>\n</div>\n"
                    }] }
        ];
        return ThfPageComponent;
    }(ThfPageBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * O componente **thf-page-content** é utilizado como o container para o conteúdo da página.
     */
    var   /**
     * \@docsPrivate
     *
     * \@description
     *
     * O componente **thf-page-content** é utilizado como o container para o conteúdo da página.
     */
    ThfPageContentBaseComponent = /** @class */ (function () {
        function ThfPageContentBaseComponent() {
        }
        return ThfPageContentBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@docsExtends ThfPageContentBaseComponent
     */
    var ThfPageContentComponent = /** @class */ (function (_super) {
        __extends(ThfPageContentComponent, _super);
        function ThfPageContentComponent(renderer) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.contentOpacity = 0;
            _this.height = '90%';
            _this.overflowY = 'none';
            _this.initializeListeners();
            return _this;
        }
        /**
         * @return {?}
         */
        ThfPageContentComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.recalculateHeaderSize();
        };
        /**
         * @return {?}
         */
        ThfPageContentComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.removeListeners();
        };
        /**
         * @return {?}
         */
        ThfPageContentComponent.prototype.recalculateHeaderSize = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var pageHeaderElement = document.querySelector('div.thf-page-header');
                _this.setHeightContent(pageHeaderElement);
                _this.contentOpacity = 1;
            }));
        };
        /**
         * @param {?} thfPageHeader
         * @return {?}
         */
        ThfPageContentComponent.prototype.setHeightContent = /**
         * @param {?} thfPageHeader
         * @return {?}
         */
        function (thfPageHeader) {
            /** @type {?} */
            var bodyHeight = document.body.clientHeight;
            /** @type {?} */
            var pageHeaderHeight = thfPageHeader ? thfPageHeader.offsetTop + thfPageHeader.offsetHeight : 0;
            /** @type {?} */
            var newHeight = bodyHeight - pageHeaderHeight;
            this.height = newHeight + "px";
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageContentComponent.prototype.initializeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', (/**
             * @return {?}
             */
            function () {
                _this.recalculateHeaderSize();
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageContentComponent.prototype.removeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            this.resizeListener();
        };
        ThfPageContentComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-content',
                        template: "<div class=\"thf-page-content\"\n  [style.height]=\"height\"\n  [style.opacity]=\"contentOpacity\"\n  [style.overflow-y]=\"overflowY\">\n  <ng-content></ng-content>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfPageContentComponent.ctorParameters = function () { return [
            { type: core.Renderer2 }
        ]; };
        return ThfPageContentComponent;
    }(ThfPageContentBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O componente `thf-page-default` é utilizado como o container principal para as telas sem um template definido.
     * @abstract
     */
    var ThfPageDefaultBaseComponent = /** @class */ (function () {
        function ThfPageDefaultBaseComponent() {
            this._actions = [];
        }
        Object.defineProperty(ThfPageDefaultBaseComponent.prototype, "actions", {
            get: /**
             * @return {?}
             */
            function () {
                return this._actions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Nesta propriedade deve ser definido um array de objetos que implementam a interface `ThfPageAction`.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Nesta propriedade deve ser definido um array de objetos que implementam a interface `ThfPageAction`.
             * @param {?} actions
             * @return {?}
             */
            function (actions) {
                this._actions = Array.isArray(actions) ? actions : [];
                this.setDropdownActions();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDefaultBaseComponent.prototype, "title", {
            get: /**
             * @return {?}
             */
            function () {
                return this._title;
            },
            /** Título da página. */
            set: /**
             * Título da página.
             * @param {?} title
             * @return {?}
             */
            function (title) {
                this._title = title;
                this.thfPageContent.recalculateHeaderSize();
            },
            enumerable: true,
            configurable: true
        });
        ThfPageDefaultBaseComponent.propDecorators = {
            thfPageContent: [{ type: core.ViewChild, args: [ThfPageContentComponent, { static: true },] }],
            actions: [{ type: core.Input, args: ['t-actions',] }],
            breadcrumb: [{ type: core.Input, args: ['t-breadcrumb',] }],
            title: [{ type: core.Input, args: ['t-title',] }]
        };
        return ThfPageDefaultBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfPageDefaultBaseComponent
     *
     * \@example
     *
     * <example name="thf-page-default-basic" title="Totvs Page Default Basic">
     *  <file name="sample-thf-page-default-basic/sample-thf-page-default-basic.component.html"> </file>
     *  <file name="sample-thf-page-default-basic/sample-thf-page-default-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-default-labs" title="Totvs Page Default Labs">
     *  <file name="sample-thf-page-default-labs/sample-thf-page-default-labs.component.html"> </file>
     *  <file name="sample-thf-page-default-labs/sample-thf-page-default-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-default-dashboard" title="Totvs Page Default - Dashboard">
     *  <file name="sample-thf-page-default-dashboard/sample-thf-page-default-dashboard.component.html"> </file>
     *  <file name="sample-thf-page-default-dashboard/sample-thf-page-default-dashboard.component.ts"> </file>
     *  <file name="sample-thf-page-default-dashboard/sample-thf-page-default-dashboard.service.ts"> </file>
     * </example>
     */
    var ThfPageDefaultComponent = /** @class */ (function (_super) {
        __extends(ThfPageDefaultComponent, _super);
        function ThfPageDefaultComponent(viewRef, renderer, router) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.router = router;
            _this.limitPrimaryActions = 3;
            _this.maxWidthMobile = 480;
            _this.parentRef = viewRef['_view']['component'];
            return _this;
        }
        /**
         * @return {?}
         */
        ThfPageDefaultComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.setIsMobile();
            this.setDropdownActions();
            this.renderer.listen('window', 'resize', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.onResize(event);
            }));
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        ThfPageDefaultComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            this.setDropdownActions();
        };
        /**
         * @param {?} action
         * @return {?}
         */
        ThfPageDefaultComponent.prototype.actionIsDisabled = /**
         * @param {?} action
         * @return {?}
         */
        function (action) {
            return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;
        };
        /**
         * @param {?} item
         * @return {?}
         */
        ThfPageDefaultComponent.prototype.callAction = /**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item.url) {
                this.router.navigate([item.url]);
            }
            else if (item.action) {
                callFunction(item.action, this.parentRef);
            }
        };
        /**
         * @return {?}
         */
        ThfPageDefaultComponent.prototype.hasPageHeader = /**
         * @return {?}
         */
        function () {
            return !!(this.title || (this.actions && this.actions.length) || (this.breadcrumb && this.breadcrumb.items.length));
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfPageDefaultComponent.prototype.onResize = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var width = ((/** @type {?} */ (event.target))).innerWidth;
            if (width < this.maxWidthMobile) {
                this.isMobile = true;
                this.limitPrimaryActions = 2;
                this.setDropdownActions();
            }
            else {
                this.isMobile = false;
                this.limitPrimaryActions = 3;
                this.setDropdownActions();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageDefaultComponent.prototype.setIsMobile = /**
         * @private
         * @return {?}
         */
        function () {
            if (window.innerWidth < this.maxWidthMobile) {
                this.isMobile = true;
                this.limitPrimaryActions = 2;
            }
        };
        /**
         * @return {?}
         */
        ThfPageDefaultComponent.prototype.setDropdownActions = /**
         * @return {?}
         */
        function () {
            if (this.actions.length > this.limitPrimaryActions) {
                this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);
            }
        };
        ThfPageDefaultComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-default',
                        template: "<thf-page>\n\n  <!-- HEADER -->\n  <thf-page-header\n    *ngIf=\"hasPageHeader()\"\n    [t-breadcrumb]=\"breadcrumb\"\n    [t-title]=\"title\">\n\n    <!-- OPERATIONS -->\n    <div class=\"thf-page-header-actions\">\n      <thf-dropdown *ngIf=\"actions.length > limitPrimaryActions\"\n        t-label=\"Outras a\u00E7\u00F5es\"\n        [t-actions]=\"dropdownActions\">\n      </thf-dropdown>\n\n      <thf-button *ngIf=\"actions.length === 3 && actions[2] && !isMobile\"\n        [t-disabled]=\"actionIsDisabled(actions[2])\"\n        [t-label]=\"actions[2].label\"\n        (t-click)=\"callAction(actions[2])\">\n      </thf-button>\n\n      <thf-button *ngIf=\"actions[1] && (actions.length === 2 || !isMobile)\"\n        [t-disabled]=\"actionIsDisabled(actions[1])\"\n        [t-label]=\"actions[1].label\"\n        (t-click)=\"callAction(actions[1])\">\n      </thf-button>\n\n      <thf-button *ngIf=\"actions[0]\"\n        t-type=\"primary\"\n        [t-disabled]=\"actionIsDisabled(actions[0])\"\n        [t-icon]=\"actions[0].icon\"\n        [t-label]=\"actions[0].label\"\n        (t-click)=\"callAction(actions[0])\">\n      </thf-button>\n    </div>\n\n  </thf-page-header>\n\n  <!-- CONTENT -->\n  <thf-page-content>\n    <ng-content></ng-content>\n  </thf-page-content>\n\n</thf-page>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfPageDefaultComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: core.Renderer2 },
            { type: router.Router }
        ]; };
        return ThfPageDefaultComponent;
    }(ThfPageDefaultBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfPageDetailLiteralsDefault = {
        en: (/** @type {?} */ ({
            back: 'Back',
            edit: 'Edit',
            remove: 'Remove'
        })),
        es: (/** @type {?} */ ({
            back: 'Volver',
            edit: 'Editar',
            remove: 'Eliminar'
        })),
        pt: (/** @type {?} */ ({
            back: 'Voltar',
            edit: 'Editar',
            remove: 'Remover'
        }))
    };
    /**
     * \@description
     *
     * O componente **thf-page-detail** é utilizado como container principal para a tela de detalhamento de um registro.
     * Por padrão possui 3 ações, cada ação na tela executa uma função no componente que está utilizando o thf-page-detail,
     * são elas:
     *  - Voltar (função: back);
     *  - Editar (função: edit);
     *  - Remover (função: remove);
     *
     * Caso não estiver implementado alguma função, listado anteriormente, o mesmo não será apresentado.
     */
    var ThfPageDetailBaseComponent = /** @class */ (function () {
        function ThfPageDetailBaseComponent() {
        }
        Object.defineProperty(ThfPageDetailBaseComponent.prototype, "literals", {
            get: /**
             * @return {?}
             */
            function () {
                return this._literals || thfPageDetailLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `thf-page-detail`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfPageDetailLiterals = {
             *    edit: 'Edição',
             *    remove: 'Exclusão',
             *    back: 'Menu'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfPageDetailLiterals = {
             *    remove: 'Excluir registro permanentemente'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-page-detail
             *   [t-literals]="customLiterals">
             * </thf-page-detail>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Objeto com as literais usadas no `thf-page-detail`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfPageDetailLiterals = {
             *    edit: 'Edição',
             *    remove: 'Exclusão',
             *    back: 'Menu'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfPageDetailLiterals = {
             *    remove: 'Excluir registro permanentemente'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-page-detail
             *   [t-literals]="customLiterals">
             * </thf-page-detail>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign({}, thfPageDetailLiteralsDefault[thfLocaleDefault], thfPageDetailLiteralsDefault[browserLanguage()], value);
                }
                else {
                    this._literals = thfPageDetailLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDetailBaseComponent.prototype, "title", {
            get: /**
             * @return {?}
             */
            function () {
                return this._title;
            },
            /** Título da página. */
            set: /**
             * Título da página.
             * @param {?} title
             * @return {?}
             */
            function (title) {
                this._title = title;
                this.thfPageContent.recalculateHeaderSize();
            },
            enumerable: true,
            configurable: true
        });
        ThfPageDetailBaseComponent.propDecorators = {
            thfPageContent: [{ type: core.ViewChild, args: [ThfPageContentComponent, { static: true },] }],
            breadcrumb: [{ type: core.Input, args: ['t-breadcrumb',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }],
            title: [{ type: core.Input, args: ['t-title',] }]
        };
        return ThfPageDetailBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description Verifica se existe a função dentro do contexto.
     *
     * @param {?} action Nome da função que será verificada a existência no parentContext.
     *
     * @param {?} parentContext Contexto da qual a função será verificada.
     * @return {?}
     */
    function hasAction(action, parentContext) {
        return parentContext && parentContext[action];
    }
    /**
     * \@description Executa a função cujo o nome foi passado por parâmetro.
     *
     * @param {?} action Nome da função que será executada no parentContext.
     *
     * @param {?} parentContext Contexto da qual a função será executada.
     * @return {?}
     */
    function callAction(action, parentContext) {
        if (hasAction(action, parentContext)) {
            parentContext[action]();
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfPageDetailBaseComponent
     *
     * \@example
     *
     * <example name="thf-page-detail-basic" title="Totvs Page Detail Basic">
     *  <file name="sample-thf-page-detail-basic/sample-thf-page-detail-basic.component.html"> </file>
     *  <file name="sample-thf-page-detail-basic/sample-thf-page-detail-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-detail-labs" title="Totvs Page Detail Labs">
     *  <file name="sample-thf-page-detail-labs/sample-thf-page-detail-labs.component.html"> </file>
     *  <file name="sample-thf-page-detail-labs/sample-thf-page-detail-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-detail-user" title="Totvs Page Detail - User">
     *  <file name="sample-thf-page-detail-user/sample-thf-page-detail-user.component.html"> </file>
     *  <file name="sample-thf-page-detail-user/sample-thf-page-detail-user.component.ts"> </file>
     * </example>
     */
    var ThfPageDetailComponent = /** @class */ (function (_super) {
        __extends(ThfPageDetailComponent, _super);
        function ThfPageDetailComponent(viewRef) {
            var _this = _super.call(this) || this;
            _this.callActionFn = callAction;
            _this.hasActionFn = hasAction;
            _this.parentContext = viewRef['_view']['component'];
            return _this;
        }
        /**
         * @return {?}
         */
        ThfPageDetailComponent.prototype.hasAnyAction = /**
         * @return {?}
         */
        function () {
            return this.hasActionFn('back', this.parentContext) ||
                this.hasActionFn('edit', this.parentContext) ||
                this.hasActionFn('remove', this.parentContext);
        };
        /**
         * @param {?} property
         * @return {?}
         */
        ThfPageDetailComponent.prototype.hasEditFn = /**
         * @param {?} property
         * @return {?}
         */
        function (property) {
            if (property === 'icon') {
                return this.hasActionFn('edit', this.parentContext) ? '' : 'thf-icon-delete';
            }
            else if (property === 'type') {
                return this.hasActionFn('edit', this.parentContext) ? 'default' : 'primary';
            }
            else {
                return '';
            }
        };
        /**
         * @param {?} property
         * @return {?}
         */
        ThfPageDetailComponent.prototype.hasEditOrRemoveFn = /**
         * @param {?} property
         * @return {?}
         */
        function (property) {
            if (property === 'icon') {
                return this.hasActionFn('edit', this.parentContext) || this.hasActionFn('remove', this.parentContext) ? '' : 'thf-icon-arrow-left';
            }
            else if (property === 'type') {
                return this.hasActionFn('edit', this.parentContext) || this.hasActionFn('remove', this.parentContext) ? 'default' : 'primary';
            }
            else {
                return '';
            }
        };
        /**
         * @return {?}
         */
        ThfPageDetailComponent.prototype.hasPageHeader = /**
         * @return {?}
         */
        function () {
            return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));
        };
        ThfPageDetailComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-detail',
                        template: "<thf-page>\n  <!-- HEADER -->\n  <thf-page-header\n    *ngIf=\"hasPageHeader()\"\n    [t-breadcrumb]=\"breadcrumb\"\n    [t-title]=\"title\">\n\n    <!-- OPERATIONS -->\n    <div *ngIf=\"hasAnyAction()\" class=\"thf-page-header-actions\">\n      <thf-button *ngIf=\"hasActionFn('back', parentContext)\"\n        [t-icon]=\"hasEditOrRemoveFn('icon')\"\n        [t-label]=\"literals.back\"\n        [t-type]=\"hasEditOrRemoveFn('type')\"\n        (t-click)=\"callActionFn('back', parentContext)\">\n      </thf-button>\n\n      <thf-button *ngIf=\"hasActionFn('remove', parentContext)\"\n        [t-icon]=\"hasEditFn('icon')\"\n        [t-label]=\"literals.remove\"\n        [t-type]=\"hasEditFn('type')\"\n        (t-click)=\"callActionFn('remove', parentContext)\">\n      </thf-button>\n\n      <thf-button *ngIf=\"hasActionFn('edit', parentContext)\"\n        t-icon=\"thf-icon-edit\"\n        t-type=\"primary\"\n        [t-label]=\"literals.edit\"\n        (t-click)=\"callActionFn('edit', parentContext)\">\n      </thf-button>\n    </div>\n\n  </thf-page-header>\n\n  <!-- CONTENT -->\n  <thf-page-content>\n    <ng-content>\n    </ng-content>\n  </thf-page-content>\n\n</thf-page>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfPageDetailComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef }
        ]; };
        return ThfPageDetailComponent;
    }(ThfPageDetailBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfPageEditLiteralsDefault = {
        en: (/** @type {?} */ ({
            cancel: 'Cancel',
            save: 'Save',
            saveNew: 'Save and New'
        })),
        es: (/** @type {?} */ ({
            cancel: 'Cancelar',
            save: 'Guardar',
            saveNew: 'Guardar y Nuevo'
        })),
        pt: (/** @type {?} */ ({
            cancel: 'Cancelar',
            save: 'Salvar',
            saveNew: 'Salvar e Novo'
        }))
    };
    /**
     * \@description
     *
     * O componente **thf-page-edit** é utilizado como container principal para tela de edição ou adição de um
     * registro.
     * Por padrão possui 3 ações, cada ação na tela executa uma função no componente que está utilizando o thf-page-edit,
     * são elas:
     *  - Cancelar (função: cancel);
     *  - Salvar e Novo (função: saveNew);
     *  - Salvar (função: save);
     *
     * Caso não estiver implementado alguma função, listado anteriormente, o mesmo não será apresentado.
     *
     * Os botões "Salvar" e "Salvar e Novo" podem ser habilitados/desabilitados utilizando a propriedade t-disable-submit.
     * Esta propriedade pode ser utilizada para desabilitar os botões caso exista um formulário inválido na página ou alguma
     * regra de negócio não tenha sido atendida.
     */
    var ThfPageEditBaseComponent = /** @class */ (function () {
        function ThfPageEditBaseComponent() {
        }
        Object.defineProperty(ThfPageEditBaseComponent.prototype, "literals", {
            get: /**
             * @return {?}
             */
            function () {
                return this._literals || thfPageEditLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `thf-page-edit`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfPageEditLiterals = {
             *    cancel: 'Voltar',
             *    save: 'Confirmar',
             *    saveNew: 'Confirmar e criar um novo'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfPageEditLiterals = {
             *    cancel: 'Cancelar processo'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-page-edit
             *   [t-literals]="customLiterals">
             * </thf-page-edit>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Objeto com as literais usadas no `thf-page-edit`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfPageEditLiterals = {
             *    cancel: 'Voltar',
             *    save: 'Confirmar',
             *    saveNew: 'Confirmar e criar um novo'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfPageEditLiterals = {
             *    cancel: 'Cancelar processo'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-page-edit
             *   [t-literals]="customLiterals">
             * </thf-page-edit>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign({}, thfPageEditLiteralsDefault[thfLocaleDefault], thfPageEditLiteralsDefault[browserLanguage()], value);
                }
                else {
                    this._literals = thfPageEditLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageEditBaseComponent.prototype, "title", {
            get: /**
             * @return {?}
             */
            function () {
                return this._title;
            },
            /** Título da página. */
            set: /**
             * Título da página.
             * @param {?} title
             * @return {?}
             */
            function (title) {
                this._title = title;
                this.thfPageContent.recalculateHeaderSize();
            },
            enumerable: true,
            configurable: true
        });
        ThfPageEditBaseComponent.propDecorators = {
            thfPageContent: [{ type: core.ViewChild, args: [ThfPageContentComponent, { static: true },] }],
            breadcrumb: [{ type: core.Input, args: ['t-breadcrumb',] }],
            disableSubmit: [{ type: core.Input, args: ['t-disable-submit',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }],
            title: [{ type: core.Input, args: ['t-title',] }]
        };
        return ThfPageEditBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfPageEditBaseComponent
     *
     * \@example
     *
     * <example name="thf-page-edit-basic" title="Totvs Page Edit Basic">
     *  <file name="sample-thf-page-edit-basic/sample-thf-page-edit-basic.component.html"> </file>
     *  <file name="sample-thf-page-edit-basic/sample-thf-page-edit-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-edit-labs" title="Totvs Page Edit Labs">
     *  <file name="sample-thf-page-edit-labs/sample-thf-page-edit-labs.component.html"> </file>
     *  <file name="sample-thf-page-edit-labs/sample-thf-page-edit-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-edit-user" title="Totvs Page Edit - User">
     *  <file name="sample-thf-page-edit-user/sample-thf-page-edit-user.component.html"> </file>
     *  <file name="sample-thf-page-edit-user/sample-thf-page-edit-user.component.ts"> </file>
     * </example>
     */
    var ThfPageEditComponent = /** @class */ (function (_super) {
        __extends(ThfPageEditComponent, _super);
        function ThfPageEditComponent(viewRef) {
            var _this = _super.call(this) || this;
            _this.hasAction = hasAction;
            _this.callAction = callAction;
            _this.parentContext = viewRef['_view']['component'];
            return _this;
        }
        /**
         * @param {?} icon
         * @return {?}
         */
        ThfPageEditComponent.prototype.getIcon = /**
         * @param {?} icon
         * @return {?}
         */
        function (icon) {
            if (icon === 'cancel') {
                return this.isPrimaryAction('cancel') ? 'thf-icon-close' : '';
            }
            if (icon === 'saveNew') {
                return this.isPrimaryAction('saveNew') ? 'thf-icon-ok' : '';
            }
            return '';
        };
        /**
         * @param {?} type
         * @return {?}
         */
        ThfPageEditComponent.prototype.getType = /**
         * @param {?} type
         * @return {?}
         */
        function (type) {
            /** @type {?} */
            var isCancelPrimaryAction = type === 'cancel' && this.isPrimaryAction('cancel');
            /** @type {?} */
            var isSaveNewPrimaryAction = type === 'saveNew' && this.isPrimaryAction('saveNew');
            return isCancelPrimaryAction || isSaveNewPrimaryAction ? 'primary' : 'default';
        };
        /**
         * @return {?}
         */
        ThfPageEditComponent.prototype.hasAnyAction = /**
         * @return {?}
         */
        function () {
            return hasAction('cancel', this.parentContext) || hasAction('saveNew', this.parentContext) || hasAction('save', this.parentContext);
        };
        /**
         * @return {?}
         */
        ThfPageEditComponent.prototype.hasPageHeader = /**
         * @return {?}
         */
        function () {
            return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));
        };
        /**
         * @private
         * @param {?} action
         * @return {?}
         */
        ThfPageEditComponent.prototype.isPrimaryAction = /**
         * @private
         * @param {?} action
         * @return {?}
         */
        function (action) {
            /** @type {?} */
            var hasSaveAction = !hasAction('save', this.parentContext);
            if (action === 'saveNew') {
                return hasSaveAction;
            }
            if (action === 'cancel') {
                return !hasAction('saveNew', this.parentContext) && hasSaveAction;
            }
            return false;
        };
        ThfPageEditComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-edit',
                        template: "<thf-page>\n  <!-- HEADER -->\n  <thf-page-header\n    *ngIf=\"hasPageHeader()\"\n    [t-breadcrumb]=\"breadcrumb\"\n    [t-title]=\"title\">\n\n    <!-- OPERATIONS -->\n    <div *ngIf=\"hasAnyAction()\" class=\"thf-page-header-actions\">\n      <thf-button\n        *ngIf=\"hasAction('cancel', parentContext)\"\n        [t-icon]=\"getIcon('cancel')\"\n        [t-label]=\"literals.cancel\"\n        [t-type]=\"getType('cancel')\"\n        (t-click)=\"callAction('cancel', parentContext)\">\n      </thf-button>\n\n      <thf-button\n        *ngIf=\"hasAction('saveNew', parentContext)\"\n        [t-disabled]=\"disableSubmit\"\n        [t-icon]=\"getIcon('saveNew')\"\n        [t-label]=\"literals.saveNew\"\n        [t-type]=\"getType('saveNew')\"\n        (t-click)=\"callAction('saveNew', parentContext)\">\n      </thf-button>\n\n      <thf-button\n        *ngIf=\"hasAction('save', parentContext)\"\n        t-icon=\"thf-icon-ok\"\n        t-type=\"primary\"\n        [t-disabled]=\"disableSubmit\"\n        [t-label]=\"literals.save\"\n        (t-click)=\"callAction('save', parentContext)\">\n      </thf-button>\n    </div>\n\n  </thf-page-header>\n\n  <!-- CONTENT -->\n  <thf-page-content>\n    <ng-content>\n    </ng-content>\n  </thf-page-content>\n\n</thf-page>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfPageEditComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef }
        ]; };
        return ThfPageEditComponent;
    }(ThfPageEditBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * O componente **thf-page-header** é responsável pelo título da página e container dos botões de ações dos componentes
     * thf-page-list e thf-page-base.
     */
    var ThfPageHeaderBaseComponent = /** @class */ (function () {
        function ThfPageHeaderBaseComponent() {
        }
        Object.defineProperty(ThfPageHeaderBaseComponent.prototype, "breadcrumb", {
            get: /**
             * @return {?}
             */
            function () {
                return this._breadcrumb;
            },
            /** Objeto com propriedades do breadcrumb. */
            set: /**
             * Objeto com propriedades do breadcrumb.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._breadcrumb = value;
            },
            enumerable: true,
            configurable: true
        });
        ThfPageHeaderBaseComponent.propDecorators = {
            breadcrumb: [{ type: core.Input, args: ['t-breadcrumb',] }],
            title: [{ type: core.Input, args: ['t-title',] }]
        };
        return ThfPageHeaderBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     * \@docsExtends ThfPageHeaderBaseComponent
     */
    var ThfPageHeaderComponent = /** @class */ (function (_super) {
        __extends(ThfPageHeaderComponent, _super);
        function ThfPageHeaderComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ThfPageHeaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-header',
                        template: "<div class=\"thf-page-header\">\n  <!-- Breadcrumb -->\n  <div class=\"thf-page-header-breadcrumb\" *ngIf=\"breadcrumb && breadcrumb.items.length\">\n    <thf-breadcrumb\n      [t-favorite-service]=\"breadcrumb.favorite\"\n      [t-items]=\"breadcrumb.items\"\n      [t-params-service]=\"breadcrumb.params\">\n    </thf-breadcrumb>\n  </div> \n\n  <!-- Titulo -->\n  <h1 class=\"thf-page-header-title\" *ngIf=\"title\">\n    {{ title }}\n  </h1>\n\n  <!-- Opera\u00E7\u00F5es -->\n  <ng-content></ng-content>\n</div>\n"
                    }] }
        ];
        return ThfPageHeaderComponent;
    }(ThfPageHeaderBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfPageListLiteralsDefault = {
        en: (/** @type {?} */ ({
            otherActions: 'Other actions'
        })),
        es: (/** @type {?} */ ({
            otherActions: 'Otras acciones'
        })),
        pt: (/** @type {?} */ ({
            otherActions: 'Outras ações'
        }))
    };
    /**
     * \@description
     *
     * O componente `thf-page-list` é utilizado como o container principal para as telas de listagem de dados,
     * podendo ser apresentado como lista ou tabela.
     *
     * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
     * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [thf-icon-search](/guides/icons)
     * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
     *
     * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
     * [`thf-disclaimer-group`](/documentation/thf-disclaimer-group).
     * @abstract
     */
    var ThfPageListBaseComponent = /** @class */ (function (_super) {
        __extends(ThfPageListBaseComponent, _super);
        function ThfPageListBaseComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ThfPageListBaseComponent.prototype, "disclaimerGroup", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disclaimerGroup;
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto que implementa as propriedades da interface `ThfDisclaimerGroup`.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Objeto que implementa as propriedades da interface `ThfDisclaimerGroup`.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (!value) {
                    value = (/** @type {?} */ ({}));
                }
                this._disclaimerGroup = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageListBaseComponent.prototype, "literals", {
            get: /**
             * @return {?}
             */
            function () {
                return this._literals || thfPageListLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `thf-page-list`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfPageListLiterals = {
             *    otherActions: 'Mais ações'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfPageListLiterals = {
             *    otherActions: 'Ações da página'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-page-list
             *   [t-literals]="customLiterals">
             * </thf-page-list>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Objeto com as literais usadas no `thf-page-list`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfPageListLiterals = {
             *    otherActions: 'Mais ações'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfPageListLiterals = {
             *    otherActions: 'Ações da página'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-page-list
             *   [t-literals]="customLiterals">
             * </thf-page-list>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value instanceof Object && !(value instanceof Array)) {
                    this._literals = __assign({}, thfPageListLiteralsDefault[thfLocaleDefault], thfPageListLiteralsDefault[browserLanguage()], value);
                }
                else {
                    this._literals = thfPageListLiteralsDefault[browserLanguage()];
                }
            },
            enumerable: true,
            configurable: true
        });
        ThfPageListBaseComponent.propDecorators = {
            breadcrumb: [{ type: core.Input, args: ['t-breadcrumb',] }],
            disclaimerGroup: [{ type: core.Input, args: ['t-disclaimer-group',] }],
            filter: [{ type: core.Input, args: ['t-filter',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }]
        };
        return ThfPageListBaseComponent;
    }(ThfPageDefaultBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfPageListBaseComponent
     *
     * \@example
     *
     * <example name="thf-page-list-basic" title="Totvs Page List Basic">
     *  <file name="sample-thf-page-list-basic/sample-thf-page-list-basic.component.html"> </file>
     *  <file name="sample-thf-page-list-basic/sample-thf-page-list-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-list-labs" title="Totvs Page List Labs">
     *  <file name="sample-thf-page-list-labs/sample-thf-page-list-labs.component.html"> </file>
     *  <file name="sample-thf-page-list-labs/sample-thf-page-list-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-list-hiring-processes" title="Totvs Page List - Hiring Processes">
     *  <file name="sample-thf-page-list-hiring-processes/sample-thf-page-list-hiring-processes.component.html"> </file>
     *  <file name="sample-thf-page-list-hiring-processes/sample-thf-page-list-hiring-processes.component.ts"> </file>
     *  <file name="sample-thf-page-list-hiring-processes/sample-thf-page-list-hiring-processes.service.ts"> </file>
     * </example>
     */
    var ThfPageListComponent = /** @class */ (function (_super) {
        __extends(ThfPageListComponent, _super);
        function ThfPageListComponent(viewRef, renderer, router) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.router = router;
            _this.limitPrimaryActions = 3;
            _this.isRecalculate = true;
            _this.maxWidthMobile = 480;
            _this.callFunction = callFunction;
            _this.parentRef = viewRef['_view']['component'];
            _this.initializeListeners();
            return _this;
        }
        /**
         * @return {?}
         */
        ThfPageListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.advancedSearch = this.initFixedLiterals();
        };
        /**
         * @return {?}
         */
        ThfPageListComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            this.setIsMobile();
            this.setDropdownActions();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        ThfPageListComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            this.setDropdownActions();
        };
        /**
         * @return {?}
         */
        ThfPageListComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.removeListeners();
        };
        /**
         * @param {?} action
         * @return {?}
         */
        ThfPageListComponent.prototype.actionIsDisabled = /**
         * @param {?} action
         * @return {?}
         */
        function (action) {
            return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;
        };
        /**
         * @param {?} item
         * @return {?}
         */
        ThfPageListComponent.prototype.callAction = /**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item.url) {
                this.router.navigate([item.url]);
            }
            else if (item.action) {
                callFunction(item.action, this.parentRef);
            }
        };
        /**
         * @return {?}
         */
        ThfPageListComponent.prototype.hasPageHeader = /**
         * @return {?}
         */
        function () {
            return !!(this.title || (this.actions && this.actions.length) || (this.breadcrumb && this.breadcrumb.items.length));
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        ThfPageListComponent.prototype.onResize = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var width = ((/** @type {?} */ (event.target))).innerWidth;
            if (width < this.maxWidthMobile) {
                this.isMobile = true;
                this.limitPrimaryActions = 2;
                this.setDropdownActions();
            }
            else {
                this.isMobile = false;
                this.limitPrimaryActions = 3;
                this.setDropdownActions();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageListComponent.prototype.setIsMobile = /**
         * @private
         * @return {?}
         */
        function () {
            if (window.innerWidth < this.maxWidthMobile) {
                this.isMobile = true;
                this.limitPrimaryActions = 2;
            }
        };
        /**
         * @return {?}
         */
        ThfPageListComponent.prototype.setDropdownActions = /**
         * @return {?}
         */
        function () {
            if (this.actions.length > this.limitPrimaryActions) {
                this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);
            }
        };
        /**
         * @param {?} field
         * @return {?}
         */
        ThfPageListComponent.prototype.callActionFilter = /**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            this.callFunction(this.filter[field], this.parentRef);
        };
        /**
         * @return {?}
         */
        ThfPageListComponent.prototype.initFixedLiterals = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var locale = browserLanguage();
            /** @type {?} */
            var literal = {
                pt: {
                    advancedSearch: 'Busca avançada'
                },
                en: {
                    advancedSearch: 'Advanced search'
                },
                es: {
                    advancedSearch: 'Búsqueda avanzada'
                }
            };
            return literal[locale].advancedSearch;
        };
        /**
         * @param {?} key
         * @return {?}
         */
        ThfPageListComponent.prototype.onkeypress = /**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (key === 13) {
                this.callActionFilter('action');
            }
        };
        /**
         * @param {?} newModel
         * @return {?}
         */
        ThfPageListComponent.prototype.changeModel = /**
         * @param {?} newModel
         * @return {?}
         */
        function (newModel) {
            this.parentRef[this.filter.ngModel] = newModel;
        };
        // Recebe evento change do disclaimer e recalcula tela
        // Recebe evento change do disclaimer e recalcula tela
        /**
         * @param {?} disclaimers
         * @return {?}
         */
        ThfPageListComponent.prototype.onChangeDisclaimerGroup = 
        // Recebe evento change do disclaimer e recalcula tela
        /**
         * @param {?} disclaimers
         * @return {?}
         */
        function (disclaimers) {
            if ((disclaimers && disclaimers.length && this.isRecalculate) || (disclaimers.length === 0 && !this.isRecalculate)) {
                this.thfPageContent.recalculateHeaderSize();
                this.isRecalculate = !this.isRecalculate;
            }
            if (this.disclaimerGroup && this.disclaimerGroup.change) {
                this.disclaimerGroup.change(disclaimers);
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageListComponent.prototype.initializeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.onResize(event);
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageListComponent.prototype.removeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            this.resizeListener();
        };
        ThfPageListComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-list',
                        template: "<thf-page>\n\n  <!-- HEADER -->\n  <thf-page-header\n    *ngIf=\"hasPageHeader()\"\n    [class.thf-page-list-header-padding]=\"filter && !actions.length\"\n    [t-breadcrumb]=\"breadcrumb\"\n    [t-title]=\"title\">\n\n    <!-- OPERATIONS -->\n    <div class=\"thf-page-list-operations\">\n      <div class=\"thf-page-list-actions\"\n        [class.thf-page-list-actions-padding]=\"filter\">\n        <thf-button *ngIf=\"actions[0]\"\n          t-type=\"primary\"\n          [t-disabled]=\"actionIsDisabled(actions[0])\"\n          [t-icon]=\"actions[0].icon\"\n          [t-label]=\"actions[0].label\"\n          (t-click)=\"callAction(actions[0])\">\n        </thf-button>\n\n        <thf-button *ngIf=\"actions[1] && (actions.length === 2 || !isMobile)\"\n          [t-disabled]=\"actionIsDisabled(actions[1])\"\n          [t-label]=\"actions[1].label\"\n          (t-click)=\"callAction(actions[1])\">\n        </thf-button>\n\n        <thf-button *ngIf=\"actions.length == 3 && actions[2] && !isMobile\"\n          [t-disabled]=\"actionIsDisabled(actions[2])\"\n          [t-label]=\"actions[2].label\"\n          (t-click)=\"callAction(actions[2])\">\n        </thf-button>\n\n        <thf-dropdown *ngIf=\"actions.length > limitPrimaryActions\"\n          [t-actions]=\"dropdownActions\"\n          [t-label]=\"literals.otherActions\">\n        </thf-dropdown>\n      </div>\n\n      <!-- FILTER -->\n      <div class=\"thf-page-list-filter-wrapper\" *ngIf=\"filter\">\n\n        <div class=\"thf-field-container-content thf-page-filter-content\">\n          <div class=\"thf-field-icon-container-right\">\n            <span class=\"thf-icon thf-icon-search thf-field-icon\"\n              (click)=\"callActionFilter('action')\">\n            </span>\n          </div>\n\n          <input class=\"thf-input thf-input-icon-right\"\n            name=\"model\"\n            type=\"text\"\n            [ngModel]=\"parentRef[filter.ngModel]\"\n            [placeholder]=\"filter.placeholder || ''\"\n            (keypress)=\"onkeypress($event.keyCode)\"\n            (ngModelChange)=\"changeModel($event)\">\n        </div>\n\n        <div class=\"thf-page-list-filter-search\" *ngIf=\"filter.advancedAction\">\n          <span class=\"thf-page-list-filter-search-link\"\n            tabindex=\"0\"\n            (click)=\"callActionFilter('advancedAction')\"\n            (keydown.enter)=\"callActionFilter('advancedAction')\">\n              {{advancedSearch}}\n          </span>\n        </div>\n\n      </div>\n    </div>\n\n    <!-- DISCLAIMER -->\n    <thf-disclaimer-group *ngIf=\"!!disclaimerGroup\"\n      [class.thf-page-list-disclaimer-group]=\"!!disclaimerGroup?.disclaimers?.length\"\n      [t-disclaimers]=\"disclaimerGroup?.disclaimers\"\n      [t-hide-remove-all]=\"disclaimerGroup?.hideRemoveAll\"\n      [t-title]=\"disclaimerGroup?.title\"\n      (t-change)=\"onChangeDisclaimerGroup($event)\">\n    </thf-disclaimer-group>\n\n  </thf-page-header>\n\n  <!-- CONTENT -->\n  <thf-page-content>\n    <ng-content></ng-content>\n  </thf-page-content>\n\n</thf-page>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfPageListComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: core.Renderer2 },
            { type: router.Router }
        ]; };
        ThfPageListComponent.propDecorators = {
            thfPageContent: [{ type: core.ViewChild, args: [ThfPageContentComponent, { static: true },] }]
        };
        return ThfPageListComponent;
    }(ThfPageListBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     * Módulo dos componentes thf-page-default, thf-page-edit, thf-page-list, thf-page-login e thf-page-detail.
     */
    var ThfPageModule = /** @class */ (function () {
        function ThfPageModule() {
        }
        ThfPageModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            router.RouterModule,
                            ThfBreadcrumbModule,
                            ThfButtonModule,
                            ThfDisclaimerGroupModule,
                            ThfDropdownModule,
                            ThfFieldModule,
                            ThfModalModule
                        ],
                        declarations: [
                            ThfPageComponent,
                            ThfPageContentComponent,
                            ThfPageDefaultComponent,
                            ThfPageDetailComponent,
                            ThfPageEditComponent,
                            ThfPageHeaderComponent,
                            ThfPageListComponent
                        ],
                        exports: [
                            ThfPageDetailComponent,
                            ThfPageDefaultComponent,
                            ThfPageEditComponent,
                            ThfPageListComponent
                        ]
                    },] }
        ];
        return ThfPageModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var THF_POPOVER_DEFAULT_POSITION = 'right';
    /** @type {?} */
    var THF_POPOVER_DEFAULT_TRIGGER = 'click';
    /** @type {?} */
    var THF_POPOVER_TRIGGERS = ['click', 'hover'];
    /**
     * \@description
     *
     * O componente `thf-popover` é um container pequeno recomendado para incluir vários tipos de conteúdo como:
     * gráficos, textos, imagens e inputs. Ele abre sobreposto aos outros componentes.
     *
     * Para mostrar apenas pequenos textos recomenda-se o uso da diretiva
     * [**thf-tooltip**](https://thf.totvs.com.br/documentation/thf-tooltip?view=doc).
     *
     * Para conteúdos maiores recomenda-se o uso do [**thf-modal**](https://thf.totvs.com.br/documentation/thf-modal?view=doc).
     *
     * Ele contém um título e também é possível escolher as posições do popover em relação ao componente pai,
     * as posições permitidas são: `right`, `right-top`, `right-bottom`, `top`, `top-left`, `top-right`,
     * `left`, `left-top`, `left-bottom`, `bottom`, `bottom-left` e `bottom-right`.
     *
     * Também é possível escolher entre os dois eventos que podem abrir o *popover*.
     * Os eventos permitidos são: `click` e `hover`.
     *
     */
    var ThfPopoverBaseComponent = /** @class */ (function () {
        function ThfPopoverBaseComponent() {
            // Controla se o popover fica oculto ou visível, por padrão é oculto.
            this.isHidden = true;
            this._hideArrow = false;
            this._position = THF_POPOVER_DEFAULT_POSITION;
            this._trigger = THF_POPOVER_DEFAULT_TRIGGER;
        }
        Object.defineProperty(ThfPopoverBaseComponent.prototype, "hideArrow", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hideArrow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita a seta do componente *popover*.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Desabilita a seta do componente *popover*.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._hideArrow = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPopoverBaseComponent.prototype, "position", {
            get: /**
             * @return {?}
             */
            function () {
                return this._position;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a posição que o thf-popover abrirá em relação ao componente alvo. Sugere-se que seja
             * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
             * automaticamente para se adequar a tela, caso necessário.
             *
             * Posições válidas:
             * - `right`: Posiciona o thf-popover no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o thf-popover no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o thf-popover no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o thf-popover abaixo do componente alvo.
             * - `bottom-left`: Posiciona o thf-popover abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o thf-popover abaixo e à direita do componente alvo.
             * - `left`: Posiciona o thf-popover no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o thf-popover no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o thf-popover no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o thf-popover acima do componente alvo.
             * - `top-right`: Posiciona o thf-popover acima e à direita do componente alvo.
             * - `top-left`: Posiciona o thf-popover acima e à esquerda do componente alvo.
             *
             *
             * @default right
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define a posição que o thf-popover abrirá em relação ao componente alvo. Sugere-se que seja
             * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
             * automaticamente para se adequar a tela, caso necessário.
             *
             * Posições válidas:
             * - `right`: Posiciona o thf-popover no lado direito do componente alvo.
             * - `right-bottom`: Posiciona o thf-popover no lado direito inferior do componente alvo.
             * - `right-top`: Posiciona o thf-popover no lado direito superior do componente alvo.
             * - `bottom`: Posiciona o thf-popover abaixo do componente alvo.
             * - `bottom-left`: Posiciona o thf-popover abaixo e à esquerda do componente alvo.
             * - `bottom-right`: Posiciona o thf-popover abaixo e à direita do componente alvo.
             * - `left`: Posiciona o thf-popover no lado esquerdo do componente alvo.
             * - `left-top`: Posiciona o thf-popover no lado esquerdo superior do componente alvo.
             * - `left-bottom`: Posiciona o thf-popover no lado esquerdo inferior do componente alvo.
             * - `top`: Posiciona o thf-popover acima do componente alvo.
             * - `top-right`: Posiciona o thf-popover acima e à direita do componente alvo.
             * - `top-left`: Posiciona o thf-popover acima e à esquerda do componente alvo.
             *
             *
             * \@default right
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._position = THF_CONTROL_POSITIONS.includes(value) ? value : THF_POPOVER_DEFAULT_POSITION;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPopoverBaseComponent.prototype, "trigger", {
            get: /**
             * @return {?}
             */
            function () {
                return this._trigger;
            },
            /**
             * @description
             *
             * Define o evento que abrirá o thf-popover.
             *
             * Valores válidos:
             *  - `click`: Abre ao clicar no componente alvo.
             *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
             *
             * @default click
             * @optional
             */
            set: /**
             * \@description
             *
             * Define o evento que abrirá o thf-popover.
             *
             * Valores válidos:
             *  - `click`: Abre ao clicar no componente alvo.
             *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
             *
             * \@default click
             * \@optional
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._trigger = THF_POPOVER_TRIGGERS.includes(value) ? value : THF_POPOVER_DEFAULT_TRIGGER;
            },
            enumerable: true,
            configurable: true
        });
        ThfPopoverBaseComponent.propDecorators = {
            hideArrow: [{ type: core.Input, args: ['t-hide-arrow',] }],
            position: [{ type: core.Input, args: ['t-position',] }],
            target: [{ type: core.Input, args: ['t-target',] }],
            title: [{ type: core.Input, args: ['t-title',] }],
            trigger: [{ type: core.Input, args: ['t-trigger',] }]
        };
        return ThfPopoverBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     *
     * \@docsExtends ThfPopoverBaseComponent
     *
     * \@example
     *
     * <example name="thf-popover-basic" title="Totvs Popover Basic">
     *   <file name="sample-thf-popover-basic/sample-thf-popover-basic.component.html"> </file>
     *   <file name="sample-thf-popover-basic/sample-thf-popover-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-popover-labs" title="Totvs Popover Labs">
     *   <file name="sample-thf-popover-labs/sample-thf-popover-labs.component.html"> </file>
     *   <file name="sample-thf-popover-labs/sample-thf-popover-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-popover-credit-card" title="Totvs Popover - Credit Card">
     *   <file name="sample-thf-popover-credit-card/sample-thf-popover-credit-card.component.html"> </file>
     *   <file name="sample-thf-popover-credit-card/sample-thf-popover-credit-card.component.ts"> </file>
     * </example>
     */
    var ThfPopoverComponent = /** @class */ (function (_super) {
        __extends(ThfPopoverComponent, _super);
        function ThfPopoverComponent(renderer, thfControlPosition) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.thfControlPosition = thfControlPosition;
            _this.arrowDirection = 'left';
            return _this;
        }
        /**
         * @return {?}
         */
        ThfPopoverComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.initEventListenerFunction();
            /** @type {?} */
            var popoverOffset = 8;
            this.thfControlPosition.setElements(this.popoverElement.nativeElement, popoverOffset, this.target);
            this.setRendererListenInit();
        };
        /**
         * @return {?}
         */
        ThfPopoverComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.removeListeners();
        };
        /**
         * @return {?}
         */
        ThfPopoverComponent.prototype.close = /**
         * @return {?}
         */
        function () {
            this.isHidden = true;
        };
        /**
         * @return {?}
         */
        ThfPopoverComponent.prototype.debounceResize = /**
         * @return {?}
         */
        function () {
            var _this = this;
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.setPopoverPosition();
            }), 200);
        };
        /**
         * @return {?}
         */
        ThfPopoverComponent.prototype.open = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.addScrollEventListener();
            this.isHidden = false;
            this.setOpacity(0);
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.thfControlPosition.adjustPosition(_this.position);
                _this.arrowDirection = _this.thfControlPosition.getArrowDirection();
                _this.setOpacity(1);
            }));
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ThfPopoverComponent.prototype.setOpacity = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.popoverElement.nativeElement.style.opacity = value;
        };
        /**
         * @return {?}
         */
        ThfPopoverComponent.prototype.setPopoverPosition = /**
         * @return {?}
         */
        function () {
            this.thfControlPosition.adjustPosition(this.position);
            this.arrowDirection = this.thfControlPosition.getArrowDirection();
        };
        /**
         * @return {?}
         */
        ThfPopoverComponent.prototype.setRendererListenInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.resizeListener = this.renderer.listen('window', 'resize', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (!_this.isHidden) {
                    _this.debounceResize();
                }
            }));
            if (this.trigger === 'hover') {
                this.mouseEnterListener = this.renderer.listen(this.target.nativeElement, 'mouseenter', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    _this.open();
                }));
                this.mouseLeaveListener = this.renderer.listen(this.target.nativeElement, 'mouseleave', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    _this.close();
                }));
            }
            else {
                this.clickoutListener = this.renderer.listen('document', 'click', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    _this.togglePopup(event);
                }));
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfPopoverComponent.prototype.togglePopup = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!this.isHidden && !this.popoverElement.nativeElement.contains(event.target) &&
                !this.target.nativeElement.contains(event.target)) {
                this.close();
            }
            else if (this.target.nativeElement.contains(event.target)) {
                this.popoverElement.nativeElement.hidden ? this.open() : this.close();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfPopoverComponent.prototype.addScrollEventListener = /**
         * @private
         * @return {?}
         */
        function () {
            window.addEventListener('scroll', this.eventListenerFunction, true);
        };
        /**
         * @private
         * @return {?}
         */
        ThfPopoverComponent.prototype.initEventListenerFunction = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.eventListenerFunction = (/**
             * @return {?}
             */
            function () {
                _this.setPopoverPosition();
            });
        };
        /**
         * @private
         * @return {?}
         */
        ThfPopoverComponent.prototype.removeListeners = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.clickoutListener) {
                this.clickoutListener();
            }
            if (this.mouseEnterListener) {
                this.mouseEnterListener();
            }
            if (this.mouseLeaveListener) {
                this.mouseLeaveListener();
            }
            this.resizeListener();
            window.removeEventListener('scroll', this.eventListenerFunction, true);
        };
        ThfPopoverComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-popover',
                        template: "<div [hidden]=\"isHidden\" class=\"thf-popover\" #popoverElement>\n\n  <div *ngIf=\"!hideArrow\" class=\"thf-popover-arrow thf-arrow-{{ arrowDirection }}\"></div>\n\n  <div class=\"thf-popover-content\">\n    <span *ngIf=\"title\" class=\"thf-popover-title\">{{ title }}</span>\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                        providers: [ThfControlPositionService]
                    }] }
        ];
        /** @nocollapse */
        ThfPopoverComponent.ctorParameters = function () { return [
            { type: core.Renderer2 },
            { type: ThfControlPositionService }
        ]; };
        ThfPopoverComponent.propDecorators = {
            popoverElement: [{ type: core.ViewChild, args: ['popoverElement', { read: core.ElementRef, static: true },] }]
        };
        return ThfPopoverComponent;
    }(ThfPopoverBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     * Módulo do componente thf-popover.
     */
    var ThfPopoverModule = /** @class */ (function () {
        function ThfPopoverModule() {
        }
        ThfPopoverModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [ThfPopoverComponent],
                        exports: [ThfPopoverComponent]
                    },] }
        ];
        return ThfPopoverModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente para o conjunto de círculos que faz a passagem de itens do `thf-slide`.
     */
    var ThfSlideCirclesComponent = /** @class */ (function () {
        function ThfSlideCirclesComponent() {
            /**
             * Evento emitido ao clicar em um controle.
             */
            this.click = new core.EventEmitter();
        }
        ThfSlideCirclesComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-slide-circles',
                        template: "<div class=\"thf-slide-circles\">\n  <ng-container *ngFor=\"let item of items; let index = index;\">\n    <div\n      class=\"thf-slide-circle\"\n      [class.thf-slide-active-circle]=\"index === currentSlideIndex\"\n      (click)=\"click.emit(index)\">\n    </div>\n  </ng-container>\n</div>\n"
                    }] }
        ];
        ThfSlideCirclesComponent.propDecorators = {
            currentSlideIndex: [{ type: core.Input, args: ['t-current-slide-index',] }],
            items: [{ type: core.Input, args: ['t-items',] }],
            click: [{ type: core.Output, args: ['t-click',] }]
        };
        return ThfSlideCirclesComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfSlideIntervalDefault = 4000;
    /**
     * \@description
     *
     * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
     * customizar sua visualização utilizando a diretiva **[t-slide-content-template](/documentation/thf-slide-content-template)**.
     *
     * #### Boas práticas:
     * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
     * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
     * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
     * @abstract
     */
    var ThfSlideBaseComponent = /** @class */ (function () {
        function ThfSlideBaseComponent() {
            this._interval = thfSlideIntervalDefault;
        }
        Object.defineProperty(ThfSlideBaseComponent.prototype, "height", {
            get: /**
             * @return {?}
             */
            function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             * Altura do thf-slide, caso seja slide com template customizado, não assume o valor `default`.
             *
             * @default `336`
             */
            set: /**
             * \@optional
             *
             * \@description
             * Altura do thf-slide, caso seja slide com template customizado, não assume o valor `default`.
             *
             * \@default `336`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._height = convertToInt(value);
                this.setSlideHeight(this.height);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfSlideBaseComponent.prototype, "interval", {
            get: /**
             * @return {?}
             */
            function () {
                return this._interval;
            },
            /**
             * @optional
             *
             * @description
             *
             * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
             *
             * @default `4000`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
             *
             * \@default `4000`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._interval = convertToInt(value, thfSlideIntervalDefault);
                this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfSlideBaseComponent.prototype, "slides", {
            get: /**
             * @return {?}
             */
            function () {
                return this._slides;
            },
            /**
             * @description
             *
             * Array de imagens ou dados para o slide, pode ser de três formas:
             *
             * - Array implementando objetos da interface `ThfSlideItem`:
             * ```
             * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
             * ```
             * - Array de `strings` com os caminhos das imagens:
             * ```
             * ['/assets/image-1', '/assets/image-2' ]
             * ```
             * - Array com lista de itens (para utilizar template):
             * ```
             * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
             * ```
             *
             * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
             */
            set: /**
             * \@description
             *
             * Array de imagens ou dados para o slide, pode ser de três formas:
             *
             * - Array implementando objetos da interface `ThfSlideItem`:
             * ```
             * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
             * ```
             * - Array de `strings` com os caminhos das imagens:
             * ```
             * ['/assets/image-1', '/assets/image-2' ]
             * ```
             * - Array com lista de itens (para utilizar template):
             * ```
             * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
             * ```
             *
             * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._slides = value;
                this.setSlideItems(value);
                if (value && value.length) {
                    this.startSlide();
                }
            },
            enumerable: true,
            configurable: true
        });
        ThfSlideBaseComponent.propDecorators = {
            height: [{ type: core.Input, args: ['t-height',] }],
            interval: [{ type: core.Input, args: ['t-interval',] }],
            slides: [{ type: core.Input, args: ['t-slides',] }]
        };
        return ThfSlideBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@usedBy ThfSlideComponent
     *
     * \@description
     *
     * Esta diretiva permite a customização de um slide.
     *
     * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
     *  - Item: `item` determina o item do slide corrente.
     *  - Índice: `index` determina o índice do slide corrente.
     *
     * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
     *
     * ```
     * ...
     * <thf-slide
     *   [t-slides]="[{ id: 1, name: 'Register', email: 'register\@totvs.com' }]">
     *
     *   <ng-template t-slide-content-template let-item let-code="index">
     *     <div class="thf-row">
     *       <thf-info class="thf-md-6" t-label="Code" [t-value]="item.id"></thf-info>
     *       <thf-info class="thf-md-6" t-label="Email" [t-value]="item.email"></thf-info>
     *     </div>
     *   </ng-template>
     *
     * </thf-slide>
     *
     * ...
     * ```
     *
     * ```
     * ...
     * <thf-slide
     *    [t-slides]="[{ id: 1, name: 'Register', email: 'register\@totvs.com' }]">
     *
     *    <div *t-slide-content-template="let item, let i=index" class="thf-row">
     *      <thf-info class="thf-md-12" t-label="Email" [t-value]="item.email"></thf-info>
     *    </div>
     * </thf-slide>
     * ...
     *
     * ```
     */
    var ThfSlideContentTemplateDirective = /** @class */ (function () {
        // Necessário manter templateRef para o funcionamento do row template.
        function ThfSlideContentTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        ThfSlideContentTemplateDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[t-slide-content-template]'
                    },] }
        ];
        /** @nocollapse */
        ThfSlideContentTemplateDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        return ThfSlideContentTemplateDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente para cada item do thf-slide.
     */
    var ThfSlideItemComponent = /** @class */ (function () {
        function ThfSlideItemComponent() {
            this.isIEOrEdge = isIEOrEdge();
        }
        /**
         * @return {?}
         */
        ThfSlideItemComponent.prototype.setLinkType = /**
         * @return {?}
         */
        function () {
            if (!this.template && this.link) {
                return this.link.startsWith('http') ? 'externalLink' : 'internalLink';
            }
            return 'noLink';
        };
        ThfSlideItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-slide-item',
                        template: "<div #slideItem\n  class=\"thf-slide-item\"\n  [class.thf-slide-item-background-image]=\"!template && isIEOrEdge\"\n  [style.background-image]=\"!template && isIEOrEdge ? 'url(' + image + ')' : ''\"\n  [ngSwitch]=\"setLinkType()\">\n\n  <!-- slide com link interno -->\n  <a\n    *ngSwitchCase=\"'internalLink'\" \n    class=\"thf-slide-item-link\" \n    [routerLink]=\"link\">\n    <ng-container \n      [ngTemplateOutlet]=\"slideItemImage\" \n      [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image }}\">\n    </ng-container>\n  </a>\n  <!-- slide com link externo -->\n  <a \n    *ngSwitchCase=\"'externalLink'\"\n    class=\"thf-slide-item-link\" \n    [href]=\"link\">\n    <ng-container \n      [ngTemplateOutlet]=\"slideItemImage\" \n      [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image }}\">\n    </ng-container>\n  </a>\n  <!-- slide sem link -->\n  <a \n    *ngSwitchCase=\"'noLink'\"\n    [ngClass]=\"action ? 'thf-slide-item-link' : 'thf-slide-item-no-link'\"\n    (click)=\"action ? action(data) : undefined\">\n    <ng-container \n      [ngTemplateOutlet]=\"template ? slideItemTemplate : slideItemImage\"\n      [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image, data: data }}\">\n    </ng-container>\n  </a>\n\n</div>\n\n<ng-template #slideItemTemplate let-item='item'>\n  <div\n    *ngIf=\"template\"\n    class=\"thf-slide-item-content\">\n    <ng-template\n      [ngTemplateOutlet]=\"template.templateRef\"\n      [ngTemplateOutletContext]=\"{ $implicit: item.data, index: index }\">\n    </ng-template>\n  </div>\n</ng-template>\n\n<ng-template #slideItemImage let-item='item'>\n  <img\n    *ngIf=\"item.image && !isIEOrEdge\"\n    class=\"thf-slide-image\"\n    [alt]=\"item.alt\"\n    [src]=\"item.image\"\n    [style.height.px]=\"imageHeight\">\n</ng-template>\n"
                    }] }
        ];
        ThfSlideItemComponent.propDecorators = {
            itemElement: [{ type: core.ViewChild, args: ['slideItem', { static: true },] }],
            action: [{ type: core.Input, args: ['t-action',] }],
            alt: [{ type: core.Input, args: ['t-alt',] }],
            data: [{ type: core.Input, args: ['t-data',] }],
            image: [{ type: core.Input, args: ['t-image',] }],
            imageHeight: [{ type: core.Input, args: ['t-image-height',] }],
            template: [{ type: core.Input, args: ['t-template',] }],
            link: [{ type: core.Input, args: ['t-link',] }]
        };
        return ThfSlideItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfSlideDefaultHeight = 336;
    /** @type {?} */
    var thfSlideIntervalMin = 1000;
    /** @type {?} */
    var thfSlideMinHeight = 192;
    /** @type {?} */
    var thfSlideTiming = '250ms ease';
    /**
     * \@docsExtends ThfSlideBaseComponent
     *
     * \@example
     * <example name="thf-slide-basic" title="Totvs Slide Basic">
     *   <file name="sample-thf-slide-basic/sample-thf-slide-basic.component.html"> </file>
     *   <file name="sample-thf-slide-basic/sample-thf-slide-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-slide-labs" title="Totvs Slide Labs">
     *   <file name="sample-thf-slide-labs/sample-thf-slide-labs.component.html"> </file>
     *   <file name="sample-thf-slide-labs/sample-thf-slide-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-slide-useful-articles" title="Totvs Slide - Useful articles">
     *   <file name="sample-thf-slide-useful-articles/sample-thf-slide-useful-articles.component.html"> </file>
     *   <file name="sample-thf-slide-useful-articles/sample-thf-slide-useful-articles.component.ts"> </file>
     * </example>
     *
     * <example name="thf-slide-landscapes" title="Totvs Slide - Landscapes">
     *   <file name="sample-thf-slide-landscapes/sample-thf-slide-landscapes.component.html"> </file>
     *   <file name="sample-thf-slide-landscapes/sample-thf-slide-landscapes.component.ts"> </file>
     * </example>
     */
    var ThfSlideComponent = /** @class */ (function (_super) {
        __extends(ThfSlideComponent, _super);
        function ThfSlideComponent(builder) {
            var _this = _super.call(this) || this;
            _this.builder = builder;
            _this.isLoaded = false;
            _this.currentSlideIndex = 0;
            _this.slideItems = [];
            return _this;
        }
        Object.defineProperty(ThfSlideComponent.prototype, "hasElements", {
            get: /**
             * @private
             * @return {?}
             */
            function () {
                return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfSlideComponent.prototype, "isImageSlide", {
            get: /**
             * @private
             * @return {?}
             */
            function () {
                return !this.slideContentTemplate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfSlideComponent.prototype, "offset", {
            get: /**
             * @private
             * @return {?}
             */
            function () {
                return this.currentSlideIndex * this.slideItemWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfSlideComponent.prototype, "hasSlides", {
            get: /**
             * @return {?}
             */
            function () {
                return !!this.slides && !!this.slides.length;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfSlideComponent.prototype.onResize = /**
         * @return {?}
         */
        function () {
            if (this.slide) {
                this.setSlideItemWidth();
                this.goToItem(this.currentSlideIndex);
            }
        };
        /**
         * @return {?}
         */
        ThfSlideComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
        function () {
            if (!this.isLoaded && this.hasElements) {
                this.setSlideItemWidth();
                this.isLoaded = true;
                if (this.hasSlides) {
                    this.startSlide();
                }
            }
        };
        /**
         * @param {?} index
         * @return {?}
         */
        ThfSlideComponent.prototype.goToItem = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            if (this.interval > thfSlideIntervalMin) {
                this.startInterval();
            }
            this.currentSlideIndex = index;
            this.animate(this.offset);
        };
        /**
         * @return {?}
         */
        ThfSlideComponent.prototype.nextControl = /**
         * @return {?}
         */
        function () {
            if (this.interval > thfSlideIntervalMin) {
                this.startInterval();
            }
            this.next();
        };
        /**
         * @return {?}
         */
        ThfSlideComponent.prototype.next = /**
         * @return {?}
         */
        function () {
            if (this.currentSlideIndex + 1 === this.slideItems.length) {
                this.currentSlideIndex = 0;
                this.animate(0);
                return;
            }
            this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;
            this.animate(this.offset);
        };
        /**
         * @return {?}
         */
        ThfSlideComponent.prototype.previous = /**
         * @return {?}
         */
        function () {
            if (this.currentSlideIndex === 0) {
                this.currentSlideIndex = this.slideItems.length - 1;
                this.animate(this.offset);
                return;
            }
            this.currentSlideIndex = ((this.currentSlideIndex - 1) + this.slideItems.length) % this.slideItems.length;
            this.animate(this.offset);
        };
        /**
         * @return {?}
         */
        ThfSlideComponent.prototype.previousControl = /**
         * @return {?}
         */
        function () {
            if (this.interval > thfSlideIntervalMin) {
                this.startInterval();
            }
            this.previous();
        };
        /**
         * @param {?} height
         * @return {?}
         */
        ThfSlideComponent.prototype.setSlideHeight = /**
         * @param {?} height
         * @return {?}
         */
        function (height) {
            this.setHeight(height);
        };
        /**
         * @private
         * @param {?} offset
         * @return {?}
         */
        ThfSlideComponent.prototype.animate = /**
         * @private
         * @param {?} offset
         * @return {?}
         */
        function (offset) {
            if (this.hasElements) {
                /** @type {?} */
                var animation = this.buildTransitionAnimation(offset);
                this.player = animation.create(this.slide.nativeElement);
                this.player.play();
            }
        };
        /**
         * @private
         * @param {?} offset
         * @return {?}
         */
        ThfSlideComponent.prototype.buildTransitionAnimation = /**
         * @private
         * @param {?} offset
         * @return {?}
         */
        function (offset) {
            return this.builder.build([
                animations.animate(thfSlideTiming, animations.keyframes([animations.style({ transform: "translateX(-" + offset + "px)" })]))
            ]);
        };
        /**
         * @private
         * @param {?} slides
         * @return {?}
         */
        ThfSlideComponent.prototype.createArrayForTemplate = /**
         * @private
         * @param {?} slides
         * @return {?}
         */
        function (slides) {
            this.slideItems = __spread(slides);
        };
        /**
         * @private
         * @param {?} slides
         * @return {?}
         */
        ThfSlideComponent.prototype.createArrayFromSlides = /**
         * @private
         * @param {?} slides
         * @return {?}
         */
        function (slides) {
            var _this = this;
            /** @type {?} */
            var isStringArray = slides.every((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return typeof item === 'string'; }));
            if (isStringArray) {
                slides.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) { return _this.slideItems.push({ image: "" + element }); }));
            }
            else {
                this.slideItems = __spread((/** @type {?} */ (slides)));
            }
        };
        /**
         * @private
         * @param {?} height
         * @return {?}
         */
        ThfSlideComponent.prototype.setDefaultHeight = /**
         * @private
         * @param {?} height
         * @return {?}
         */
        function (height) {
            if (height && height <= thfSlideMinHeight || !height && this.isImageSlide) {
                this.slide.nativeElement.style.height = thfSlideDefaultHeight + "px";
                this.imageHeight = thfSlideDefaultHeight;
            }
            else {
                this.imageHeight = undefined;
            }
        };
        /**
         * @private
         * @param {?} height
         * @return {?}
         */
        ThfSlideComponent.prototype.setHeight = /**
         * @private
         * @param {?} height
         * @return {?}
         */
        function (height) {
            if (height && height > thfSlideMinHeight) {
                this.slide.nativeElement.style.height = height + "px";
                this.imageHeight = height;
            }
            else {
                this.setDefaultHeight(height);
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfSlideComponent.prototype.setSlideItemWidth = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.hasElements) {
                this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;
            }
        };
        /**
         * @protected
         * @return {?}
         */
        ThfSlideComponent.prototype.cancelInterval = /**
         * @protected
         * @return {?}
         */
        function () {
            clearInterval(this.setInterval);
        };
        /**
         * @protected
         * @param {?} slides
         * @return {?}
         */
        ThfSlideComponent.prototype.setSlideItems = /**
         * @protected
         * @param {?} slides
         * @return {?}
         */
        function (slides) {
            if (this.hasSlides) {
                this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);
            }
            else {
                this.slideItems = [];
                this.cancelInterval();
            }
        };
        /**
         * @protected
         * @return {?}
         */
        ThfSlideComponent.prototype.startSlide = /**
         * @protected
         * @return {?}
         */
        function () {
            this.setSlideHeight(this.height);
            if (this.interval > thfSlideIntervalMin) {
                this.startInterval();
            }
            this.currentSlideIndex = 0;
        };
        /**
         * @protected
         * @return {?}
         */
        ThfSlideComponent.prototype.startInterval = /**
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.setInterval) {
                this.cancelInterval();
            }
            this.setInterval = this.hasSlides && this.hasElements ? setInterval((/**
             * @return {?}
             */
            function () { _this.next(); }), this.interval) : undefined;
        };
        ThfSlideComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-slide',
                        template: "<div class=\"thf-slide-wrapper\">\n  <div class=\"thf-slide-outer\">\n    <div class=\"thf-slide-inner\" #slide>\n      <ng-container *ngFor=\"let item of slideItems; let index = index;\">\n        <thf-slide-item\n          [t-action]=\"item.action\"\n          [t-data]=\"item\"\n          [t-image]=\"item.image\"\n          [t-image-height]=\"imageHeight\"\n          [t-template]=\"slideContentTemplate\"\n          [t-alt]=\"item.alt\"\n          [t-link]=\"item.link\">\n        </thf-slide-item>\n      </ng-container>\n    </div>\n\n    <thf-slide-control *ngIf=\"hasSlides && slides.length > 1\" \n      t-control=\"previous\"\n      (t-click)=\"previousControl()\">\n    </thf-slide-control>\n\n    <thf-slide-control *ngIf=\"hasSlides && slides.length > 1\"\n      t-control=\"next\"\n      (t-click)=\"nextControl()\">\n    </thf-slide-control>\n\n  </div>\n\n  <thf-slide-circles\n    *ngIf=\"hasSlides && slides.length > 1\"\n    [t-current-slide-index]=\"currentSlideIndex\"\n    [t-items]=\"slideItems\"\n    (t-click)=\"goToItem($event)\">\n  </thf-slide-circles>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfSlideComponent.ctorParameters = function () { return [
            { type: animations.AnimationBuilder }
        ]; };
        ThfSlideComponent.propDecorators = {
            slideContentTemplate: [{ type: core.ContentChild, args: [ThfSlideContentTemplateDirective, { static: true },] }],
            slide: [{ type: core.ViewChild, args: ['slide', { static: true },] }],
            itemsElements: [{ type: core.ViewChildren, args: [ThfSlideItemComponent,] }],
            onResize: [{ type: core.HostListener, args: ['window:resize',] }]
        };
        return ThfSlideComponent;
    }(ThfSlideBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente para a seta que controla a passagem de itens do `thf-slide`.
     */
    var ThfSlideControlComponent = /** @class */ (function () {
        function ThfSlideControlComponent() {
            /**
             * Evento emitido ao clicar em um controle.
             */
            this.click = new core.EventEmitter();
        }
        ThfSlideControlComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-slide-control',
                        template: "<div class=\"thf-slide-control-{{control}}\">\n  <div class=\"thf-slide-arrow-circle\" (click)=\"click.emit();\">\n    <div class=\"thf-slide-arrow thf-slide-arrow-{{control}}\"></div>\n  </div>\n</div>\n"
                    }] }
        ];
        ThfSlideControlComponent.propDecorators = {
            control: [{ type: core.Input, args: ['t-control',] }],
            click: [{ type: core.Output, args: ['t-click',] }]
        };
        return ThfSlideControlComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente `thf-slide`.
     *
     * > Para o correto funcionamento do componente `thf-slide`, deve ser importado o módulo `BrowserAnimationsModule` no
     * > módulo principal da sua aplicação.
     *
     * Módulo da aplicação:
     * ```
     * import { BrowserAnimationsModule } from '\@angular/platform-browser/animations';
     * import { ThfModule } from '\@totvs/thf-ui';
     * ...
     *
     * \@NgModule({
     *   imports: [
     *     BrowserModule,
     *     BrowserAnimationsModule,
     *     ...
     *     ThfModule
     *   ],
     *   declarations: [
     *     AppComponent,
     *     ...
     *   ],
     *   providers: [],
     *   bootstrap: [AppComponent]
     * })
     * export class AppModule { }
     * ```
     */
    var ThfSlideModule = /** @class */ (function () {
        function ThfSlideModule() {
        }
        ThfSlideModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            router.RouterModule,
                            ThfContainerModule
                        ],
                        declarations: [
                            ThfSlideCirclesComponent,
                            ThfSlideComponent,
                            ThfSlideControlComponent,
                            ThfSlideContentTemplateDirective,
                            ThfSlideItemComponent,
                        ],
                        exports: [
                            ThfSlideComponent,
                            ThfSlideContentTemplateDirective
                        ],
                        providers: [],
                        schemas: []
                    },] }
        ];
        return ThfSlideModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ThfStepperStatus = {
        /** Define o estado do *step* como ativo. */
        Active: 'active',
        /** Define o estado do *step* como padrão. */
        Default: 'default',
        /** Define o estado do *step* como desabilitado. */
        Disabled: 'disabled',
        /** Define o estado do *step* como concluído. */
        Done: 'done',
        /** Define o estado do *step* com erro. */
        Error: 'error',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O componente `thf-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `thf-stepper`, por exemplo:
     *
     * ```
     * <thf-stepper>
     *
     *    <thf-step t-label="Endereço">
     *
     *        <!-- Conteúdo referente ao endereço -->
     *
     *    </thf-step>
     *
     *    <thf-step t-label="Pagamento">
     *
     *        <!-- Conteúdo referente ao pagamento -->
     *
     *    </thf-step>
     *
     *  </thf-stepper>
     * ```
     *
     * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
     * `thf-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
     * desabilitados (*disabled*).
     *
     * Ao clicar no `thf-step` que está com o status *default*, o que está ativo ficará com o
     * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
     * com o status desabilitado.
     *
     * > Ao utilizar o `thf-step`, o componente `thf-stepper` funcionará de forma sequencial, ou seja, não será possível
     * pular para outro `thf-step` que esteja com o status igual a desabilitado (*disabled*).
     *
     * Acesse a [documentação do `thf-stepper`](/documentation/thf-stepper) para ter mais informações sobre o seu funcionamento
     * e exemplos de uso.
     */
    var ThfStepComponent = /** @class */ (function () {
        function ThfStepComponent(elementRef) {
            this.elementRef = elementRef;
            this._status = ThfStepperStatus.Disabled;
            // ID do step
            this.id = uuid();
        }
        Object.defineProperty(ThfStepComponent.prototype, "status", {
            get: /**
             * @return {?}
             */
            function () {
                return this._status;
            },
            // Estado de exibição do `thf-step`.
            set: 
            // Estado de exibição do `thf-step`.
            /**
             * @param {?} status
             * @return {?}
             */
            function (status) {
                this._status = status;
                this.setDisplayOnActiveOrError();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfStepComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            this.setDisplayOnActiveOrError();
        };
        /**
         * @protected
         * @return {?}
         */
        ThfStepComponent.prototype.setDisplayOnActiveOrError = /**
         * @protected
         * @return {?}
         */
        function () {
            this.elementRef.nativeElement.style.display =
                (this.status === ThfStepperStatus.Active || this.status === ThfStepperStatus.Error) ? '' : 'none';
        };
        ThfStepComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-step',
                        template: "<ng-content></ng-content>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfStepComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        ThfStepComponent.propDecorators = {
            canActiveNextStep: [{ type: core.Input, args: ['t-can-active-next-step',] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            status: [{ type: core.Input, args: ['t-status',] }]
        };
        return ThfStepComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfMediumStepSize = 32;
    /** @type {?} */
    var thfLargeStepSize = 48;
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente responsável por exibir os círculos dos *steps*.
     */
    var ThfStepperCircleComponent = /** @class */ (function () {
        function ThfStepperCircleComponent() {
        }
        Object.defineProperty(ThfStepperCircleComponent.prototype, "isActive", {
            get: /**
             * @return {?}
             */
            function () {
                return this.status === ThfStepperStatus.Active;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperCircleComponent.prototype, "isDefault", {
            get: /**
             * @return {?}
             */
            function () {
                return this.status === ThfStepperStatus.Default;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperCircleComponent.prototype, "isDisabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this.status === ThfStepperStatus.Disabled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperCircleComponent.prototype, "isDone", {
            get: /**
             * @return {?}
             */
            function () {
                return this.status === ThfStepperStatus.Done;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperCircleComponent.prototype, "isError", {
            get: /**
             * @return {?}
             */
            function () {
                return this.status === ThfStepperStatus.Error;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperCircleComponent.prototype, "isLargeStep", {
            get: /**
             * @return {?}
             */
            function () {
                return this.size >= thfLargeStepSize;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperCircleComponent.prototype, "isMediumStep", {
            get: /**
             * @return {?}
             */
            function () {
                return this.size >= thfMediumStepSize && !this.isLargeStep;
            },
            enumerable: true,
            configurable: true
        });
        ThfStepperCircleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-stepper-circle',
                        template: "<div class=\"thf-stepper-circle\"\n  [class.thf-stepper-circle-with-icon]=\"icons\"\n  [style.height.px]=\"size\"\n  [style.width.px]=\"size\"\n  [tabindex]=\"isDisabled ? -1 : 0\">\n\n  <span class=\"thf-stepper-circle-content\"\n    [class.thf-icon]=\"icons\"\n    [class.thf-icon-exclamation]=\"icons && isError\"\n    [class.thf-icon-info]=\"icons && (isActive || isDefault || isDisabled)\"\n    [class.thf-icon-ok]=\"icons && isDone\"\n    [class.thf-stepper-circle-content-lg]=\"isLargeStep\"\n    [class.thf-stepper-circle-content-md]=\"isMediumStep\">\n\n    {{ !icons ? content: '' }}\n  </span>\n</div>\n"
                    }] }
        ];
        ThfStepperCircleComponent.propDecorators = {
            content: [{ type: core.Input, args: ['t-content',] }],
            icons: [{ type: core.Input, args: ['t-icons',] }],
            size: [{ type: core.Input, args: ['t-size',] }],
            status: [{ type: core.Input, args: ['t-status',] }]
        };
        return ThfStepperCircleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ThfStepperOrientation = {
        /** Define a exibição do componente na horizontal. */
        Horizontal: 'horizontal',
        /** Define a exibição do componente na vertical. */
        Vertical: 'vertical',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfStepperOrientationDefault = ThfStepperOrientation.Horizontal;
    /**
     * \@description
     *
     * O `thf-stepper` permite que um processo seja dividido em passos para que o usuário o realize
     * mais facilmente.
     *
     * Existem duas formas de utilização:
     *
     * 1 - Usando o componente [**thf-step**](/documentation/thf-step) para renderizar e descrever os passos.
     *
     * 2 - Através da propriedade `t-steps` para descrever os passos do processo, sendo responsabilidade do desenvolvedor o controle
     * de renderização do que será exibido a cada *step* ativo.
     *
     * Através de suas propriedades, é possível definir se sua orientação será horizontal ou vertical,
     * além da possibilidade de aumentar o tamanho dos *steps*.
     *
     * Também é possível navegar entre os *steps* através do teclado utilizando a tecla *tab* e, para ativar o *step* em foco basta
     * pressionar a tecla *enter*. Além disso, é possível ativar a exibição de ícones no lugar de números nos *steps* através da
     * propriedade [`t-step-icons`](/documentation/thf-stepper#stepIconsProperty).
     *
     * #### Utilizando os métodos do componente:
     *
     * Para acessar os métodos do componente é necessário ter a referência do mesmo.
     *
     * Por exemplo, utilizando um [**ViewChild**](https://angular.io/api/core/ViewChild):
     *
     * ```
     * \@ViewChild(ThfStepperComponent) thfStepperComponent: ThfStepperComponent;
     * ```
     *
     * E para acessar o método:
     *
     * ```
     * thfStepperComponent.next();
     * ```
     *
     * #### Boas práticas
     *
     * - Evite `labels` extensos que quebram o layout do `thf-stepper`, use `labels` diretos, curtos e intuitivos.
     * - Utilize apenas um `thf-stepper` por página.
     */
    var ThfStepperBaseComponent = /** @class */ (function () {
        function ThfStepperBaseComponent() {
            this._orientation = thfStepperOrientationDefault;
            this._sequential = true;
            this._step = 1;
            this._steps = [];
            /**
             * Ação que será executada quando o usuário mudar o passo do `thf-stepper`.
             */
            this.onChangeStep = new core.EventEmitter();
        }
        Object.defineProperty(ThfStepperBaseComponent.prototype, "orientation", {
            get: /**
             * @return {?}
             */
            function () {
                return this._orientation;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a orientação de exibição do `thf-stepper`.
             *
             * > Veja os valores válidos no *enum* [ThfStepperOrientation](documentation/thf-stepper#stepperOrientation).
             *
             * @default `ThfStepperOrientation.Horizontal`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define a orientação de exibição do `thf-stepper`.
             *
             * > Veja os valores válidos no *enum* [ThfStepperOrientation](documentation/thf-stepper#stepperOrientation).
             *
             * \@default `ThfStepperOrientation.Horizontal`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._orientation = ((/** @type {?} */ (Object))).values(ThfStepperOrientation).includes(value) ? value : thfStepperOrientationDefault;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperBaseComponent.prototype, "step", {
            get: /**
             * @return {?}
             */
            function () {
                return this._step;
            },
            /**
             * @optional
             *
             * @description
             *
             * Controla o passo atual do `thf-stepper`.
             *
             * > Ao utilizar esta propriedade e também utilizar o componente [**thf-step**](/documentation/thf-step),
             * o valor desta propriedade será ignorada permanecendo a definição do [**thf-step**](/documentation/thf-step).
             *
             * @default `1`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Controla o passo atual do `thf-stepper`.
             *
             * > Ao utilizar esta propriedade e também utilizar o componente [**thf-step**](/documentation/thf-step),
             * o valor desta propriedade será ignorada permanecendo a definição do [**thf-step**](/documentation/thf-step).
             *
             * \@default `1`
             * @param {?} step
             * @return {?}
             */
            function (step) {
                if (step >= 1 && step <= this.steps.length) {
                    this._step = step;
                    this._steps[this._step - 1].status = ThfStepperStatus.Active;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperBaseComponent.prototype, "steps", {
            get: /**
             * @return {?}
             */
            function () {
                return this._steps;
            },
            /**
             * @optional
             *
             * @description
             *
             * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
             *
             * > Ao utilizar esta propriedade e também utilizar o componente [**thf-step**](/documentation/thf-step),
             * o valor desta propriedade será ignorada permanecendo a definição do [**thf-step**](/documentation/thf-step).
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
             *
             * > Ao utilizar esta propriedade e também utilizar o componente [**thf-step**](/documentation/thf-step),
             * o valor desta propriedade será ignorada permanecendo a definição do [**thf-step**](/documentation/thf-step).
             * @param {?} steps
             * @return {?}
             */
            function (steps) {
                this._steps = Array.isArray(steps) ? steps : [];
                this._steps.forEach((/**
                 * @param {?} step
                 * @return {?}
                 */
                function (step) { return step.status = ThfStepperStatus.Default; }));
                this.step = 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperBaseComponent.prototype, "sequential", {
            get: /**
             * @return {?}
             */
            function () {
                return this._sequential;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define se o `thf-stepper` será sequencial ou aleatório.
             *
             * > Ao utilizar o componente [**thf-step**](/documentation/thf-step), o valor desta propriedade sempre será verdadeiro.
             *
             * @default `true`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define se o `thf-stepper` será sequencial ou aleatório.
             *
             * > Ao utilizar o componente [**thf-step**](/documentation/thf-step), o valor desta propriedade sempre será verdadeiro.
             *
             * \@default `true`
             * @param {?} sequential
             * @return {?}
             */
            function (sequential) {
                this._sequential = convertToBoolean(sequential);
            },
            enumerable: true,
            configurable: true
        });
        ThfStepperBaseComponent.propDecorators = {
            orientation: [{ type: core.Input, args: ['t-orientation',] }],
            step: [{ type: core.Input, args: ['t-step',] }],
            steps: [{ type: core.Input, args: ['t-steps',] }],
            stepIcons: [{ type: core.Input, args: ['t-step-icons',] }],
            stepSize: [{ type: core.Input, args: ['t-step-size',] }],
            sequential: [{ type: core.Input, args: ['t-sequential',] }],
            onChangeStep: [{ type: core.Output, args: ['t-change-step',] }]
        };
        return ThfStepperBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfStepperBaseComponent
     *
     * \@example
     *
     * <example name="thf-stepper-basic" title="Totvs Stepper Basic">
     *  <file name="sample-thf-stepper-basic/sample-thf-stepper-basic.component.html"> </file>
     *  <file name="sample-thf-stepper-basic/sample-thf-stepper-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-stepper-labs" title="Totvs Stepper Labs">
     *  <file name="sample-thf-stepper-labs/sample-thf-stepper-labs.component.html"> </file>
     *  <file name="sample-thf-stepper-labs/sample-thf-stepper-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-stepper-sales" title="Totvs Stepper - Sales">
     *  <file name="sample-thf-stepper-sales/sample-thf-stepper-sales.component.html"> </file>
     *  <file name="sample-thf-stepper-sales/sample-thf-stepper-sales.component.ts"> </file>
     * </example>
     */
    var ThfStepperComponent = /** @class */ (function (_super) {
        __extends(ThfStepperComponent, _super);
        function ThfStepperComponent(changeDetector) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            return _this;
        }
        Object.defineProperty(ThfStepperComponent.prototype, "currentStepIndex", {
            get: /**
             * @return {?}
             */
            function () {
                return this.step - 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperComponent.prototype, "stepList", {
            get: /**
             * @return {?}
             */
            function () {
                return this.useThfSteps && this.thfSteps || this.steps;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperComponent.prototype, "useThfSteps", {
            get: /**
             * @return {?}
             */
            function () {
                return !!this.thfSteps.length;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfStepperComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.activeFirstStep();
            this.thfSteps.changes.subscribe((/**
             * @return {?}
             */
            function () {
                _this.controlStepsStatus(0, _this.thfSteps.first);
            }));
        };
        /**
         * Altera o status do *step* para ativo.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
         *
         * @param index {number} Índice do `thf-step` que se deseja ativar.
         */
        /**
         * Altera o status do *step* para ativo.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
         *
         * @param {?} index {number} Índice do `thf-step` que se deseja ativar.
         * @return {?}
         */
        ThfStepperComponent.prototype.active = /**
         * Altera o status do *step* para ativo.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
         *
         * @param {?} index {number} Índice do `thf-step` que se deseja ativar.
         * @return {?}
         */
        function (index) {
            if (!this.useThfSteps) {
                return;
            }
            /** @type {?} */
            var stepsArray = this.getThfSteps();
            /** @type {?} */
            var step = stepsArray[index];
            /** @type {?} */
            var isDisabledStep = step.status === ThfStepperStatus.Disabled;
            /** @type {?} */
            var isErrorStep = step.status === ThfStepperStatus.Error;
            if (!isDisabledStep || isErrorStep) {
                this.changeStep(index, step);
            }
        };
        /**
         * Ativa o primeiro *step*.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
         */
        /**
         * Ativa o primeiro *step*.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
         * @return {?}
         */
        ThfStepperComponent.prototype.first = /**
         * Ativa o primeiro *step*.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
         * @return {?}
         */
        function () {
            if (!this.useThfSteps) {
                return;
            }
            /** @type {?} */
            var firstStep = this.thfSteps.first;
            /** @type {?} */
            var firstStepIndex = 0;
            this.changeStep(firstStepIndex, firstStep);
        };
        /**
         * Ativa o próximo *step*.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
         */
        /**
         * Ativa o próximo *step*.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
         * @return {?}
         */
        ThfStepperComponent.prototype.next = /**
         * Ativa o próximo *step*.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
         * @return {?}
         */
        function () {
            if (!this.useThfSteps) {
                return;
            }
            var _a = this.getStepsAndIndex(this.currentActiveStep), steps = _a.steps, stepIndex = _a.stepIndex;
            /** @type {?} */
            var nextIndex = stepIndex + 1;
            /** @type {?} */
            var nextStep = steps[nextIndex];
            this.changeStep(nextIndex, nextStep);
        };
        /**
         * Ativa o *step* anterior.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
         */
        /**
         * Ativa o *step* anterior.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
         * @return {?}
         */
        ThfStepperComponent.prototype.previous = /**
         * Ativa o *step* anterior.
         *
         * > Este método é valido apenas para as implementações que utilizam o componente [**thf-step**](/documentation/thf-step).
         * @return {?}
         */
        function () {
            if (!this.useThfSteps) {
                return;
            }
            var _a = this.getStepsAndIndex(this.currentActiveStep), steps = _a.steps, stepIndex = _a.stepIndex;
            /** @type {?} */
            var previousIndex = stepIndex - 1;
            /** @type {?} */
            var previousStep = steps[previousIndex];
            this.changeStep(previousIndex, previousStep);
        };
        /**
         * @param {?} stepIndex
         * @param {?=} step
         * @return {?}
         */
        ThfStepperComponent.prototype.changeStep = /**
         * @param {?} stepIndex
         * @param {?=} step
         * @return {?}
         */
        function (stepIndex, step) {
            /** @type {?} */
            var isDifferentStep = (!this.currentActiveStep || step.id !== this.currentActiveStep.id);
            if (this.useThfSteps && isDifferentStep && this.allowNextStep(stepIndex)) {
                this.controlStepsStatus(stepIndex, step);
                this.onChangeStep.emit(step);
            }
            else if (!this.useThfSteps && stepIndex !== this.currentStepIndex && this.allowNextStep(stepIndex)) {
                // if para tratamento do modelo antigo do thf-stepper
                this.onChangeStep.emit(stepIndex + 1);
            }
        };
        /**
         * @param {?} step
         * @return {?}
         */
        ThfStepperComponent.prototype.onStepActive = /**
         * @param {?} step
         * @return {?}
         */
        function (step) {
            this.currentActiveStep = step;
            this.previousActiveStep = this.thfSteps.find((/**
             * @param {?} stepChild
             * @return {?}
             */
            function (stepChild) { return stepChild.status === ThfStepperStatus.Active && stepChild.id !== step.id; }));
            this.setPreviousStepAsDone();
        };
        /**
         * @param {?} step
         * @return {?}
         */
        ThfStepperComponent.prototype.trackByFn = /**
         * @param {?} step
         * @return {?}
         */
        function (step) {
            return step.id;
        };
        /**
         * @private
         * @return {?}
         */
        ThfStepperComponent.prototype.activeFirstStep = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var hasStepActive = this.thfSteps.some((/**
             * @param {?} thfStep
             * @return {?}
             */
            function (thfStep) { return thfStep.status === ThfStepperStatus.Active; }));
            if (this.useThfSteps && !hasStepActive) {
                this.changeStep(0, this.thfSteps.first);
            }
        };
        /**
         * @private
         * @param {?} nextStepIndex
         * @return {?}
         */
        ThfStepperComponent.prototype.allowNextStep = /**
         * @private
         * @param {?} nextStepIndex
         * @return {?}
         */
        function (nextStepIndex) {
            if (!this.sequential) {
                return true;
            }
            if (this.useThfSteps) {
                return this.isBeforeStep(nextStepIndex) || this.canActiveNextStep(this.currentActiveStep);
            }
            return this.steps.slice(this.step, nextStepIndex).every((/**
             * @param {?} step
             * @return {?}
             */
            function (step) { return step.status === ThfStepperStatus.Done; }));
        };
        /**
         * @private
         * @param {?=} currentActiveStep
         * @return {?}
         */
        ThfStepperComponent.prototype.canActiveNextStep = /**
         * @private
         * @param {?=} currentActiveStep
         * @return {?}
         */
        function (currentActiveStep) {
            if (currentActiveStep === void 0) { currentActiveStep = (/** @type {?} */ ({})); }
            if (!currentActiveStep.canActiveNextStep) {
                return true;
            }
            /** @type {?} */
            var canActiveNextStep = currentActiveStep.canActiveNextStep(currentActiveStep);
            currentActiveStep.status = this.getStepperStatusByCanActive(canActiveNextStep);
            return canActiveNextStep;
        };
        /**
         * @private
         * @param {?} stepIndex
         * @param {?} step
         * @return {?}
         */
        ThfStepperComponent.prototype.controlStepsStatus = /**
         * @private
         * @param {?} stepIndex
         * @param {?} step
         * @return {?}
         */
        function (stepIndex, step) {
            if (this.useThfSteps) {
                this.setStepAsActive(step);
                this.setNextStepAsDefault(step);
                if (this.isBeforeStep(stepIndex)) {
                    this.setFinalSteppersAsDisabled(stepIndex);
                }
                this.changeDetector.detectChanges();
            }
        };
        /**
         * @private
         * @param {?} canActiveNextStep
         * @return {?}
         */
        ThfStepperComponent.prototype.getStepperStatusByCanActive = /**
         * @private
         * @param {?} canActiveNextStep
         * @return {?}
         */
        function (canActiveNextStep) {
            return canActiveNextStep ? ThfStepperStatus.Done : ThfStepperStatus.Error;
        };
        /**
         * @private
         * @param {?=} step
         * @return {?}
         */
        ThfStepperComponent.prototype.getStepsAndIndex = /**
         * @private
         * @param {?=} step
         * @return {?}
         */
        function (step) {
            if (step === void 0) { step = (/** @type {?} */ ({})); }
            /** @type {?} */
            var steps = this.getThfSteps();
            /** @type {?} */
            var stepIndex = steps.findIndex((/**
             * @param {?} thfStep
             * @return {?}
             */
            function (thfStep) { return thfStep.id === step.id; }));
            return { steps: steps, stepIndex: stepIndex };
        };
        /**
         * @private
         * @return {?}
         */
        ThfStepperComponent.prototype.getThfSteps = /**
         * @private
         * @return {?}
         */
        function () {
            return this.thfSteps.toArray();
        };
        /**
         * @private
         * @param {?} stepIndex
         * @return {?}
         */
        ThfStepperComponent.prototype.isBeforeStep = /**
         * @private
         * @param {?} stepIndex
         * @return {?}
         */
        function (stepIndex) {
            var _this = this;
            /** @type {?} */
            var currentActiveStepIndex = (/**
             * @return {?}
             */
            function () { return _this.getThfSteps().findIndex((/**
             * @param {?} step
             * @return {?}
             */
            function (step) { return step.id === _this.currentActiveStep.id; })); });
            return !!this.currentActiveStep && currentActiveStepIndex() >= stepIndex;
        };
        /**
         * @private
         * @param {?} stepIndex
         * @return {?}
         */
        ThfStepperComponent.prototype.setFinalSteppersAsDisabled = /**
         * @private
         * @param {?} stepIndex
         * @return {?}
         */
        function (stepIndex) {
            this.getThfSteps()
                .filter((/**
             * @param {?} step
             * @param {?} index
             * @return {?}
             */
            function (step, index) { return step && index >= stepIndex + 2; }))
                .forEach((/**
             * @param {?} step
             * @return {?}
             */
            function (step) { return step.status = ThfStepperStatus.Disabled; }));
        };
        /**
         * @private
         * @param {?} step
         * @return {?}
         */
        ThfStepperComponent.prototype.setStepAsActive = /**
         * @private
         * @param {?} step
         * @return {?}
         */
        function (step) {
            step.status = ThfStepperStatus.Active;
        };
        /**
         * @private
         * @param {?} currentStep
         * @return {?}
         */
        ThfStepperComponent.prototype.setNextStepAsDefault = /**
         * @private
         * @param {?} currentStep
         * @return {?}
         */
        function (currentStep) {
            var _a = this.getStepsAndIndex(currentStep), steps = _a.steps, stepIndex = _a.stepIndex;
            /** @type {?} */
            var nextIndex = stepIndex + 1;
            if (nextIndex < this.thfSteps.length) {
                steps[nextIndex].status = ThfStepperStatus.Default;
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfStepperComponent.prototype.setPreviousStepAsDone = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.previousActiveStep) {
                this.previousActiveStep.status = ThfStepperStatus.Done;
            }
        };
        ThfStepperComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-stepper',
                        template: "<div class=\"thf-stepper thf-stepper-{{ orientation }}\">\n\n  <div class=\"thf-stepper-container\">\n    <thf-stepper-step *ngFor=\"let step of stepList; let index = index; trackBy: trackByFn\"\n      class=\"thf-stepper-step-position\"\n      [t-circle-content]=\"index+1\"\n      [t-label]=\"step.label\"\n      [t-orientation]=\"orientation\"\n      [t-status]=\"step.status\"\n      [t-step-icons]=\"stepIcons\"\n      [t-step-size]=\"stepSize\"\n      (t-activated)=\"onStepActive(step)\"\n      (t-click)=\"changeStep(index, step)\"\n      (t-enter)=\"changeStep(index, step)\">\n    </thf-stepper-step>\n  </div>\n\n  <div *ngIf=\"useThfSteps\" class=\"thf-stepper-content\">\n    <ng-content></ng-content>\n  </div>\n\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfStepperComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        ThfStepperComponent.propDecorators = {
            thfSteps: [{ type: core.ContentChildren, args: [ThfStepComponent,] }]
        };
        return ThfStepperComponent;
    }(ThfStepperBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente responsável por exibir as legendas dos *steps*.
     */
    var ThfStepperLabelComponent = /** @class */ (function () {
        function ThfStepperLabelComponent() {
        }
        ThfStepperLabelComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-stepper-label',
                        template: "<div class=\"thf-stepper-label\">\n  {{ content }}\n</div>\n"
                    }] }
        ];
        ThfStepperLabelComponent.propDecorators = {
            content: [{ type: core.Input, args: ['t-content',] }]
        };
        return ThfStepperLabelComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfStepperStepSizeDefault = 24;
    /** @type {?} */
    var thfStepperStepSizeMax = 64;
    /** @type {?} */
    var thfStepLiteralsDefault = {
        en: { label: 'Step' },
        es: { label: 'Paso' },
        pt: { label: 'Passo' }
    };
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente que representa um *step* contendo as ligações das laterais (`thf-stepper-step-bar`) e a label.
     */
    var ThfStepperStepComponent = /** @class */ (function () {
        function ThfStepperStepComponent() {
            this._stepIcons = false;
            this._stepSize = thfStepperStepSizeDefault;
            this.literals = __assign({}, thfStepLiteralsDefault[thfLocaleDefault], thfStepLiteralsDefault[browserLanguage()]);
            // Evento que será emitido quando o status do *step* estiver ativo (`ThfStepperStatus.Active`).
            this.activated = new core.EventEmitter();
            // Evento que será emitido ao clicar no *step*.
            this.click = new core.EventEmitter();
            // Evento que será emitido ao focar no *step* e pressionar a tecla *enter*.
            this.enter = new core.EventEmitter();
        }
        Object.defineProperty(ThfStepperStepComponent.prototype, "label", {
            get: /**
             * @return {?}
             */
            function () {
                return this._label;
            },
            // Label do *step*.
            set: 
            // Label do *step*.
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._label = isTypeof(value, 'string') ? value : this.literals.label + " " + this.circleContent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperStepComponent.prototype, "status", {
            get: /**
             * @return {?}
             */
            function () {
                return this._status;
            },
            // Define o estado de exibição.
            set: 
            // Define o estado de exibição.
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._status = ((/** @type {?} */ (value))) ? value : undefined;
                if (this.status === ThfStepperStatus.Active) {
                    this.activated.emit();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperStepComponent.prototype, "stepIcons", {
            get: /**
             * @return {?}
             */
            function () {
                return this._stepIcons;
            },
            set: /**
             * @param {?} stepIcons
             * @return {?}
             */
            function (stepIcons) {
                this._stepIcons = convertToBoolean(stepIcons);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperStepComponent.prototype, "stepSize", {
            get: /**
             * @return {?}
             */
            function () {
                return this._stepSize;
            },
            // Tamanho do `step` em *pixels*, possibilitando um maior destaque.
            // O valor informado deve ser entre `24` e `64`.
            set: 
            // Tamanho do `step` em *pixels*, possibilitando um maior destaque.
            // O valor informado deve ser entre `24` e `64`.
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._stepSize = (value >= thfStepperStepSizeDefault && value <= thfStepperStepSizeMax) ? value : thfStepperStepSizeDefault;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperStepComponent.prototype, "halfStepSize", {
            get: /**
             * @return {?}
             */
            function () {
                return this.stepSize / 2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperStepComponent.prototype, "isVerticalOrientation", {
            get: /**
             * @return {?}
             */
            function () {
                return this.orientation === ThfStepperOrientation.Vertical;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfStepperStepComponent.prototype, "marginHorizontalBar", {
            get: /**
             * @return {?}
             */
            function () {
                return this.isVerticalOrientation ? undefined : this.halfStepSize;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} status
         * @return {?}
         */
        ThfStepperStepComponent.prototype.getStatusClass = /**
         * @param {?} status
         * @return {?}
         */
        function (status) {
            switch (status) {
                case ThfStepperStatus.Active:
                    return 'thf-stepper-step-active';
                case ThfStepperStatus.Disabled:
                    return 'thf-stepper-step-disabled';
                case ThfStepperStatus.Done:
                    return 'thf-stepper-step-done';
                case ThfStepperStatus.Error:
                    return 'thf-stepper-step-error';
                default:
                    return 'thf-stepper-step-default';
            }
        };
        /**
         * @return {?}
         */
        ThfStepperStepComponent.prototype.onClick = /**
         * @return {?}
         */
        function () {
            if (this.status !== ThfStepperStatus.Disabled) {
                this.click.emit();
            }
        };
        /**
         * @return {?}
         */
        ThfStepperStepComponent.prototype.onEnter = /**
         * @return {?}
         */
        function () {
            if (this.status !== ThfStepperStatus.Disabled) {
                this.enter.emit();
            }
        };
        ThfStepperStepComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-stepper-step',
                        template: "<div class=\"thf-stepper-step\"\n  [ngClass]=\"getStatusClass(status)\"\n  (click)=\"onClick()\"\n  (keydown.enter)=\"onEnter()\">\n\n  <div class=\"thf-stepper-step-container\" [style.width.px]=\"isVerticalOrientation ? stepSize : undefined\">\n\n    <div\n      [class.thf-stepper-step-bar-top]=\"isVerticalOrientation\"\n      [class.thf-stepper-step-bar-left]=\"!isVerticalOrientation\"\n      [style.margin-right.px]=\"marginHorizontalBar\">\n    </div>\n\n    <thf-stepper-circle\n      [t-content]=\"circleContent\"\n      [t-icons]=\"stepIcons\"\n      [t-size]=\"stepSize\"\n      [t-status]=\"status\">\n    </thf-stepper-circle>\n\n    <div\n      [class.thf-stepper-step-bar-bottom]=\"isVerticalOrientation\"\n      [class.thf-stepper-step-bar-right]=\"!isVerticalOrientation\"\n      [style.margin-left.px]=\"marginHorizontalBar\">\n    </div>\n\n  </div>\n\n  <thf-stepper-label\n    class=\"thf-stepper-step-label-position\"\n    [t-content]=\"label\">\n  </thf-stepper-label>\n</div>\n"
                    }] }
        ];
        ThfStepperStepComponent.propDecorators = {
            circleContent: [{ type: core.Input, args: ['t-circle-content',] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            orientation: [{ type: core.Input, args: ['t-orientation',] }],
            status: [{ type: core.Input, args: ['t-status',] }],
            stepIcons: [{ type: core.Input, args: ['t-step-icons',] }],
            stepSize: [{ type: core.Input, args: ['t-step-size',] }],
            activated: [{ type: core.Output, args: ['t-activated',] }],
            click: [{ type: core.Output, args: ['t-click',] }],
            enter: [{ type: core.Output, args: ['t-enter',] }]
        };
        return ThfStepperStepComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     * Módulo do componente thf-stepper
     */
    var ThfStepperModule = /** @class */ (function () {
        function ThfStepperModule() {
        }
        ThfStepperModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                        ],
                        declarations: [
                            ThfStepComponent,
                            ThfStepperCircleComponent,
                            ThfStepperComponent,
                            ThfStepperLabelComponent,
                            ThfStepperStepComponent
                        ],
                        exports: [
                            ThfStepComponent,
                            ThfStepperComponent
                        ]
                    },] }
        ];
        return ThfStepperModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente responsável por manipular os botões de aba.
     */
    var ThfTabButtonComponent = /** @class */ (function () {
        function ThfTabButtonComponent(elementRef) {
            this.elementRef = elementRef;
            // Função sera emitida quando a tab ficar ativada
            this.activated = new core.EventEmitter();
            // Função sera emitida quando a tab ficar desabilitada ou escondida
            this.changeState = new core.EventEmitter();
            // Método recebido do usuário para ser disparado quando clicar na aba
            this.click = new core.EventEmitter();
        }
        Object.defineProperty(ThfTabButtonComponent.prototype, "active", {
            get: /**
             * @return {?}
             */
            function () {
                return this._active;
            },
            // Ativa o botão
            set: 
            // Ativa o botão
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._active = value;
                this.emitActivated();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTabButtonComponent.prototype, "hide", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hide;
            },
            // Oculta o botão
            set: 
            // Oculta o botão
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._hide = convertToBoolean(value);
                this.setDisplayOnHide();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        ThfTabButtonComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if ((changes.hide && changes.hide.currentValue) || (changes.disabled && changes.disabled.currentValue)) {
                this.changeState.emit(this);
            }
        };
        /**
         * @return {?}
         */
        ThfTabButtonComponent.prototype.onClick = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.click.emit(this.id);
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfTabButtonComponent.prototype.emitActivated = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.active) {
                this.activated.emit(this);
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfTabButtonComponent.prototype.setDisplayOnHide = /**
         * @private
         * @return {?}
         */
        function () {
            this.elementRef.nativeElement.style.display = this.hide ? 'none' : '';
        };
        ThfTabButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-tab-button',
                        template: "<div\n  class=\"thf-tab-button-md\"\n  [attr.tabindex]=\"disabled ? null : 0\"\n  [class.thf-tab-button-active]=\"active\"\n  [class.thf-tab-button-disabled]=\"disabled\"\n  [class.thf-tab-button-sm]=\"small\"\n  (click)=\"onClick()\"\n  (keyup.enter)=\"onClick()\">\n\n  <span class=\"thf-tab-button-label\">\n    {{label}}\n  </span>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfTabButtonComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        ThfTabButtonComponent.propDecorators = {
            active: [{ type: core.Input, args: ['t-active',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            hide: [{ type: core.Input, args: ['t-hide',] }],
            id: [{ type: core.Input, args: ['t-id',] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            small: [{ type: core.Input, args: ['t-small',] }],
            activated: [{ type: core.Output, args: ['t-activated',] }],
            changeState: [{ type: core.Output, args: ['t-change-state',] }],
            click: [{ type: core.Output, args: ['t-click',] }]
        };
        return ThfTabButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O componente `thf-tab` renderiza uma aba na qual envolve um conteúdo HTML.
     *
     * Com este componente é possível atribuir um rótulo para auxiliar na identificação do conteúdo, ativar para que o mesmo seja exibido,
     * desabilitar para impossibilitar o acesso, bem como ocultar para indisponibilizar a aba.
     *
     * > Para controlar a navegação entre diversas abas, utilizar o componente [`thf-tabs`](/documentation/thf-tabs).
     * @abstract
     */
    var ThfTabBaseComponent = /** @class */ (function () {
        function ThfTabBaseComponent() {
            this._active = false;
            this._disabled = false;
            this._hide = false;
            // ID da aba
            this.id = uuid();
            /**
             * Método disparado ao clicar na aba.
             */
            this.click = new core.EventEmitter();
        }
        Object.defineProperty(ThfTabBaseComponent.prototype, "active", {
            get: /**
             * @return {?}
             */
            function () {
                return this._active;
            },
            /**
             * @optional
             *
             * @description
             *
             * Ativa a aba exibindo seu conteúdo.
             *
             * > Sugere-se utilizar na aba de conteúdo inicial.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Ativa a aba exibindo seu conteúdo.
             *
             * > Sugere-se utilizar na aba de conteúdo inicial.
             *
             * \@default `false`
             * @param {?} active
             * @return {?}
             */
            function (active) {
                this._active = convertToBoolean(active);
                this.setDisplayOnActive();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTabBaseComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita a aba.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Desabilita a aba.
             *
             * \@default `false`
             * @param {?} disabled
             * @return {?}
             */
            function (disabled) {
                this._disabled = convertToBoolean(disabled);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTabBaseComponent.prototype, "hide", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hide;
            },
            /**
             * @optional
             *
             * @description
             *
             * Oculta a aba.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Oculta a aba.
             *
             * \@default `false`
             * @param {?} hide
             * @return {?}
             */
            function (hide) {
                this._hide = convertToBoolean(hide);
            },
            enumerable: true,
            configurable: true
        });
        ThfTabBaseComponent.propDecorators = {
            active: [{ type: core.Input, args: ['t-active',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            hide: [{ type: core.Input, args: ['t-hide',] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            click: [{ type: core.Output, args: ['t-click',] }]
        };
        return ThfTabBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfTabBaseComponent
     */
    var ThfTabComponent = /** @class */ (function (_super) {
        __extends(ThfTabComponent, _super);
        function ThfTabComponent(elementRef) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            return _this;
        }
        /**
         * @return {?}
         */
        ThfTabComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            this.setDisplayOnActive();
        };
        /**
         * @protected
         * @return {?}
         */
        ThfTabComponent.prototype.setDisplayOnActive = /**
         * @protected
         * @return {?}
         */
        function () {
            this.elementRef.nativeElement.style.display = this.active ? '' : 'none';
        };
        ThfTabComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-tab',
                        template: "<ng-content></ng-content>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfTabComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        return ThfTabComponent;
    }(ThfTabBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente para agrupamento de componentes `thf-tab-button` que os rendereiza em uma um caixa de diálogo
     * no formato de lista.
     */
    var ThfTabDropdownComponent = /** @class */ (function () {
        function ThfTabDropdownComponent() {
            // Lista de abas
            this.tabs = [];
            // Evento que será emitido ao ativar uma aba
            this.activated = new core.EventEmitter();
            // Evento que será emitido a aba for desabilitada ou ocultada
            this.changeState = new core.EventEmitter();
            // Evento de click
            this.click = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        ThfTabDropdownComponent.prototype.getContainerClass = /**
         * @return {?}
         */
        function () {
            return this.small ? 'thf-tab-dropdown-container-sm' : 'thf-tab-dropdown-container';
        };
        /**
         * @return {?}
         */
        ThfTabDropdownComponent.prototype.togglePopover = /**
         * @return {?}
         */
        function () {
            this.popover.isHidden ? this.popover.open() : this.popover.close();
        };
        ThfTabDropdownComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-tab-dropdown',
                        template: "<div #tabDrop\n  class=\"thf-tab-dropdown-content thf-tab-button-md\"\n  [attr.tabindex]=\"0\"\n  [class.thf-tab-button-sm]=\"small\"\n  (keyup.enter)=\"togglePopover()\">\n  <div class=\"thf-tab-button-label\">\n    {{ label }}\n    <span class=\"thf-icon\" [ngClass]=\"(popover.isHidden ? 'thf-icon-arrow-down' : 'thf-icon-arrow-up')\">\n    </span>\n  </div>\n</div>\n\n<thf-popover #popover\n  t-hide-arrow\n  t-position=\"bottom\"\n  [t-target]=\"tabDropdown\">\n\n  <div [ngClass]=\"getContainerClass()\">\n    <thf-tab-button *ngFor=\"let tab of tabs\"\n      class=\"thf-tab-dropdown-button\"\n      [class.thf-tab-dropdown-button-active]=\"tab.active\"\n      [t-active]=\"tab.active\"\n      [t-disabled]=\"tab.disabled\"\n      [t-hide]=\"tab.hide\"\n      [t-id]=\"tab.id\"\n      [t-label]=\"tab.label\"\n      [t-small]=\"small\"\n      (t-activated)=\"activated.emit(tab)\"\n      (t-change-state)=\"changeState.emit(tab)\"\n      (t-click)=\"popover.close();click.emit(tab);\">\n    </thf-tab-button>\n  </div>\n\n</thf-popover>\n"
                    }] }
        ];
        ThfTabDropdownComponent.propDecorators = {
            popover: [{ type: core.ViewChild, args: ['popover', { static: true },] }],
            tabDropdown: [{ type: core.ViewChild, args: ['tabDrop', { read: core.ElementRef, static: true },] }],
            label: [{ type: core.Input, args: ['t-label',] }],
            small: [{ type: core.Input, args: ['t-small',] }],
            tabs: [{ type: core.Input, args: ['t-tabs',] }],
            activated: [{ type: core.Output, args: ['t-activated',] }],
            changeState: [{ type: core.Output, args: ['t-change-state',] }],
            click: [{ type: core.Output, args: ['t-click',] }]
        };
        return ThfTabDropdownComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O componente `thf-tabs` é responsável por agrupar [abas](/documentation/thf-tab) dispostas numa linha horizontal,
     * ideal para facilitar a organização de conteúdos.
     *
     * Até cinco abas o componente exibe todas normalmente. Contudo, a partir de seis abas, o componente torna visível
     * apenas as quatro primeiras, agrupando todas as demais na quinta aba rotulada de **Mais**.
     *
     * > As abas que estiverem agrupadas serão dispostas numa cascata suspensa que será exibida ao clicar no botão **Mais**.
     *
     * É possível realizar a navegação entre as abas através da tecla TAB do teclado.
     * Caso uma aba estiver desabilitada, não receberá foco de navegação.
     *
     * #### Boas práticas
     *
     * - Evite utilizar uma quantidade excessiva de abas, pois irá gerar um *scroll* muito longo no `dropdown`;
     * - Evite `labels` extensos para as `tabs` pois podem quebrar seu *layout*, use `labels` diretos, curtos e intuitivos.
     */
    var ThfTabsBaseComponent = /** @class */ (function () {
        function ThfTabsBaseComponent() {
            this._small = false;
        }
        Object.defineProperty(ThfTabsBaseComponent.prototype, "small", {
            get: /**
             * @return {?}
             */
            function () {
                return this._small;
            },
            /**
             * @optinal
             *
             * @description
             *
             * Diminui o tamanho das abas.
             *
             * @default `false`
             */
            set: /**
             * \@optinal
             *
             * \@description
             *
             * Diminui o tamanho das abas.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._small = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        ThfTabsBaseComponent.propDecorators = {
            small: [{ type: core.Input, args: ['t-small',] }]
        };
        return ThfTabsBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfTabsMaxNumberOfTabs = 5;
    /**
     * \@docsExtends ThfTabsBaseComponent
     *
     * \@example
     *
     * <example name="thf-tabs-basic" title="Totvs Tabs Basic">
     *  <file name="sample-thf-tabs-basic/sample-thf-tabs-basic.component.html"> </file>
     *  <file name="sample-thf-tabs-basic/sample-thf-tabs-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-tabs-labs" title="Totvs Tabs Labs">
     *  <file name="sample-thf-tabs-labs/sample-thf-tabs-labs.component.html"> </file>
     *  <file name="sample-thf-tabs-labs/sample-thf-tabs-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-tabs-travel" title="Totvs Tabs - Travel">
     *  <file name="sample-thf-tabs-travel/sample-thf-tabs-travel.component.html"> </file>
     *  <file name="sample-thf-tabs-travel/sample-thf-tabs-travel.component.ts"> </file>
     * </example>
     *
     * <example name="thf-tabs-business-conf" title="Totvs Tabs - Business Conference">
     *  <file name="sample-thf-tabs-business-conf/sample-thf-tabs-business-conf.component.html"> </file>
     *  <file name="sample-thf-tabs-business-conf/sample-thf-tabs-business-conf.component.ts"> </file>
     * </example>
     */
    var ThfTabsComponent = /** @class */ (function (_super) {
        __extends(ThfTabsComponent, _super);
        function ThfTabsComponent(changeDetector) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            _this.maxNumberOfTabs = thfTabsMaxNumberOfTabs;
            return _this;
        }
        Object.defineProperty(ThfTabsComponent.prototype, "isShowTabDropdown", {
            get: /**
             * @return {?}
             */
            function () {
                return this.visibleTabs.length > this.maxNumberOfTabs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTabsComponent.prototype, "overflowedTabs", {
            // tabs que serão apresentadas na aba "Mais"
            get: 
            // tabs que serão apresentadas na aba "Mais"
            /**
             * @return {?}
             */
            function () {
                var _this = this;
                return this.visibleTabs.filter((/**
                 * @param {?} _tab
                 * @param {?} index
                 * @return {?}
                 */
                function (_tab, index) { return index > (_this.maxNumberOfTabs - 2); }));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfTabsComponent.prototype, "visibleTabs", {
            get: /**
             * @return {?}
             */
            function () {
                return this.tabs.filter((/**
                 * @param {?} tab
                 * @return {?}
                 */
                function (tab) { return !tab.hide; }));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfTabsComponent.prototype.closePopover = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var containsPopoverVisible = this.tabDropdown && this.tabDropdown.popover && !this.tabDropdown.popover.isHidden;
            if (containsPopoverVisible) {
                this.tabDropdown.popover.close();
            }
        };
        /**
         * @param {?} tab
         * @return {?}
         */
        ThfTabsComponent.prototype.isVisibleTab = /**
         * @param {?} tab
         * @return {?}
         */
        function (tab) {
            /** @type {?} */
            var visibleTabIndex = this.visibleTabs.findIndex((/**
             * @param {?} visibleTab
             * @return {?}
             */
            function (visibleTab) { return visibleTab.id === tab.id; }));
            return (this.visibleTabs.length <= this.maxNumberOfTabs) || (visibleTabIndex < (this.maxNumberOfTabs - 1));
        };
        // Função disparada quando alguma tab ficar ativa
        // Função disparada quando alguma tab ficar ativa
        /**
         * @param {?} tab
         * @return {?}
         */
        ThfTabsComponent.prototype.onTabActive = 
        // Função disparada quando alguma tab ficar ativa
        /**
         * @param {?} tab
         * @return {?}
         */
        function (tab) {
            this.previousActiveTab = this.tabs.find((/**
             * @param {?} tabChild
             * @return {?}
             */
            function (tabChild) { return tabChild.active && tabChild.id !== tab.id; }));
            this.deactivateTab();
        };
        // funcao será disparada quando mudar o estado do thfTab para desabilitado ou escondido.
        // funcao será disparada quando mudar o estado do thfTab para desabilitado ou escondido.
        /**
         * @param {?} tab
         * @return {?}
         */
        ThfTabsComponent.prototype.onTabChangeState = 
        // funcao será disparada quando mudar o estado do thfTab para desabilitado ou escondido.
        /**
         * @param {?} tab
         * @return {?}
         */
        function (tab) {
            if (tab.active) {
                tab.active = false;
                this.activeDistinctTab();
                this.changeDetector.detectChanges();
            }
        };
        // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
        // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
        /**
         * @param {?} tab
         * @return {?}
         */
        ThfTabsComponent.prototype.selectedTab = 
        // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
        /**
         * @param {?} tab
         * @return {?}
         */
        function (tab) {
            tab.active = true;
            if (tab.click) {
                tab.click.emit(tab);
            }
            this.changeDetector.detectChanges();
        };
        /**
         * @param {?} _i
         * @param {?} tab
         * @return {?}
         */
        ThfTabsComponent.prototype.trackByFn = /**
         * @param {?} _i
         * @param {?} tab
         * @return {?}
         */
        function (_i, tab) {
            return tab.id;
        };
        // ativa a previousActiveTab ou primeira tab encontrada.
        // ativa a previousActiveTab ou primeira tab encontrada.
        /**
         * @private
         * @return {?}
         */
        ThfTabsComponent.prototype.activeDistinctTab = 
        // ativa a previousActiveTab ou primeira tab encontrada.
        /**
         * @private
         * @return {?}
         */
        function () {
            if (this.previousActiveTab) {
                this.previousActiveTab.active = true;
            }
            else {
                this.activeFirstTab();
            }
        };
        // Ativa a primeira Tab que não estiver desabilitada ou escondida.
        // Ativa a primeira Tab que não estiver desabilitada ou escondida.
        /**
         * @private
         * @return {?}
         */
        ThfTabsComponent.prototype.activeFirstTab = 
        // Ativa a primeira Tab que não estiver desabilitada ou escondida.
        /**
         * @private
         * @return {?}
         */
        function () {
            this.tabs.some((/**
             * @param {?} tabChild
             * @return {?}
             */
            function (tabChild) {
                if (!tabChild.disabled && !tabChild.hide) {
                    tabChild.active = true;
                    return true;
                }
            }));
        };
        // desativa previousActiveTab e dispara a detecção de mudança.
        // desativa previousActiveTab e dispara a detecção de mudança.
        /**
         * @private
         * @return {?}
         */
        ThfTabsComponent.prototype.deactivateTab = 
        // desativa previousActiveTab e dispara a detecção de mudança.
        /**
         * @private
         * @return {?}
         */
        function () {
            if (this.previousActiveTab) {
                this.previousActiveTab.active = false;
                this.changeDetector.detectChanges();
            }
        };
        ThfTabsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-tabs',
                        template: "<div class=\"thf-tabs-header\">\n\n  <ng-container *ngFor=\"let tab of tabs; trackBy: trackByFn\">\n    <thf-tab-button *ngIf=\"isVisibleTab(tab)\"\n      class=\"thf-tab-button\"\n      [t-active]=\"tab.active\"\n      [t-disabled]=\"tab.disabled\"\n      [t-id]=\"tab.id\"\n      [t-hide]=\"tab.hide\"\n      [t-label]=\"tab.label\"\n      [t-small]=\"small\"\n      (keyup.enter)=\"closePopover()\"\n      (t-activated)=\"onTabActive(tab)\"\n      (t-change-state)=\"onTabChangeState(tab)\"\n      (t-click)=\"selectedTab(tab)\">\n    </thf-tab-button>\n  </ng-container>\n\n  <thf-tab-dropdown #tabDropdown\n    *ngIf=\"isShowTabDropdown\"\n    class=\"thf-tab-button thf-tab-dropdown\"\n    t-label=\"Mais\"\n    [t-small]=\"small\"\n    [t-tabs]=\"overflowedTabs\"\n    (t-activated)=\"onTabActive($event)\"\n    (t-change-state)=\"onTabChangeState($event)\"\n    (t-click)=\"selectedTab($event)\">\n  </thf-tab-dropdown>\n</div>\n\n<div class=\"thf-tabs-container\">\n  <ng-content></ng-content>\n</div>\n\n"
                    }] }
        ];
        /** @nocollapse */
        ThfTabsComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        ThfTabsComponent.propDecorators = {
            tabs: [{ type: core.ContentChildren, args: [ThfTabComponent,] }],
            tabDropdown: [{ type: core.ViewChild, args: ['tabDropdown', { static: true },] }]
        };
        return ThfTabsComponent;
    }(ThfTabsBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     * Módulo do componente thf-tabs
     */
    var ThfTabsModule = /** @class */ (function () {
        function ThfTabsModule() {
        }
        ThfTabsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            ThfPopoverModule
                        ],
                        declarations: [
                            ThfTabButtonComponent,
                            ThfTabComponent,
                            ThfTabDropdownComponent,
                            ThfTabsComponent
                        ],
                        entryComponents: [
                            ThfTabButtonComponent,
                            ThfTabDropdownComponent
                        ],
                        exports: [
                            ThfTabComponent,
                            ThfTabsComponent
                        ]
                    },] }
        ];
        return ThfTabsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfToolbarActionsIconDefault = 'thf-icon-more';
    /**
     * \@docsPrivate
     *
     * \@usedBy ThfToolbarComponent
     *
     * \@description
     *
     * O componente `thf-toolbar-actions` tem como objetivo receber uma lista de ações e um ícone que podem ser personalizados.
     */
    var ThfToolbarActionsComponent = /** @class */ (function () {
        function ThfToolbarActionsComponent() {
            this._actionsIcon = thfToolbarActionsIconDefault;
        }
        Object.defineProperty(ThfToolbarActionsComponent.prototype, "actionsIcon", {
            get: /**
             * @return {?}
             */
            function () {
                return this._actionsIcon;
            },
            /** Define o ícone das ações. */
            set: /**
             * Define o ícone das ações.
             * @param {?} icon
             * @return {?}
             */
            function (icon) {
                this._actionsIcon = isTypeof(icon, 'string') ? icon : thfToolbarActionsIconDefault;
            },
            enumerable: true,
            configurable: true
        });
        ThfToolbarActionsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-toolbar-actions',
                        template: "<div class=\"thf-toolbar-actions thf-clickable\" (click)=\"popup.toggle()\">\n  <span #toolbarActions class=\"thf-icon {{ actionsIcon }} thf-toolbar-icon\"></span>\n</div>\n\n<thf-popup #popup\n  [t-actions]=\"actions\"\n  [t-target]=\"toolbarActions\">\n</thf-popup>\n",
                        providers: [ThfControlPositionService]
                    }] }
        ];
        ThfToolbarActionsComponent.propDecorators = {
            actions: [{ type: core.Input, args: ['t-actions',] }],
            actionsIcon: [{ type: core.Input, args: ['t-actions-icon',] }]
        };
        return ThfToolbarActionsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O componente `thf-toolbar` é um cabeçalho para o título da aplicação e informações de usuário e notificações quando houver necessidade.
     */
    var ThfToolbarBaseComponent = /** @class */ (function () {
        function ThfToolbarBaseComponent() {
            /**
             * Se falso, oculta o ícone de notificações.
             */
            this.showNotification = true;
        }
        Object.defineProperty(ThfToolbarBaseComponent.prototype, "notificationNumber", {
            get: /**
             * @return {?}
             */
            function () {
                return this._notificationNumber;
            },
            /**
             * @optional
             *
             * @description
             *
             * Número de notificações.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Número de notificações.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._notificationNumber = convertToInt(value, 0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfToolbarBaseComponent.prototype, "isShowProfile", {
            get: /**
             * @return {?}
             */
            function () {
                return this.profile || this.profileActions;
            },
            enumerable: true,
            configurable: true
        });
        ThfToolbarBaseComponent.propDecorators = {
            actions: [{ type: core.Input, args: ['t-actions',] }],
            actionsIcon: [{ type: core.Input, args: ['t-actions-icon',] }],
            profile: [{ type: core.Input, args: ['t-profile',] }],
            profileActions: [{ type: core.Input, args: ['t-profile-actions',] }],
            showNotification: [{ type: core.Input, args: ['t-show-notification',] }],
            title: [{ type: core.Input, args: ['t-title',] }],
            notificationActions: [{ type: core.Input, args: ['t-notification-actions',] }],
            notificationNumber: [{ type: core.Input, args: ['t-notification-number',] }]
        };
        return ThfToolbarBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfToolbarBaseComponent
     *
     * \@example
     *
     * <example name="thf-toolbar-basic" title="Totvs Toolbar Basic">
     *  <file name="sample-thf-toolbar-basic/sample-thf-toolbar-basic.component.html"> </file>
     *  <file name="sample-thf-toolbar-basic/sample-thf-toolbar-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-toolbar-labs" title="Totvs Toolbar Labs">
     *  <file name="sample-thf-toolbar-labs/sample-thf-toolbar-labs.component.html"> </file>
     *  <file name="sample-thf-toolbar-labs/sample-thf-toolbar-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-toolbar-logged" title="Totvs Toolbar - Logged">
     *  <file name="sample-thf-toolbar-logged/sample-thf-toolbar-logged.component.html"> </file>
     *  <file name="sample-thf-toolbar-logged/sample-thf-toolbar-logged.component.ts"> </file>
     * </example>
     */
    var ThfToolbarComponent = /** @class */ (function (_super) {
        __extends(ThfToolbarComponent, _super);
        function ThfToolbarComponent(titleService, viewRef) {
            var _this = _super.call(this) || this;
            _this.titleService = titleService;
            _this.parentRef = viewRef['_view']['component'];
            return _this;
        }
        /**
         * @return {?}
         */
        ThfToolbarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.setTitle(this.title);
        };
        /**
         * @private
         * @param {?} newTitle
         * @return {?}
         */
        ThfToolbarComponent.prototype.setTitle = /**
         * @private
         * @param {?} newTitle
         * @return {?}
         */
        function (newTitle) {
            this.titleService.setTitle(newTitle);
        };
        ThfToolbarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-toolbar',
                        template: "<div class=\"thf-toolbar\">\n  <div class=\"thf-toolbar-title\"> {{title}} </div>\n\n  <div class=\"thf-toolbar-group-icon\">\n    <thf-toolbar-actions *ngIf=\"actions && actions.length\"\n      [t-actions]=\"actions\"\n      [t-actions-icon]=\"actionsIcon\">\n    </thf-toolbar-actions>\n\n    <thf-toolbar-notification *ngIf=\"showNotification && notificationActions\"\n      [t-notification-actions]=\"notificationActions\"\n      [t-notification-number]=\"notificationNumber\">\n    </thf-toolbar-notification>\n\n    <thf-toolbar-profile *ngIf=\"isShowProfile\"\n      [t-profile]=\"profile || { avatar: userSrc, title: userName }\"\n      [t-profile-actions]=\"profileActions || userActions\">\n    </thf-toolbar-profile>\n  </div>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfToolbarComponent.ctorParameters = function () { return [
            { type: platformBrowser.Title },
            { type: core.ViewContainerRef }
        ]; };
        return ThfToolbarComponent;
    }(ThfToolbarBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@usedBy ThfToolbarComponent
     *
     * \@description
     *
     * O componente `thf-toolbar-notification` tem como objetivo notificar o usuário de novas ações da aplicação que necessitam de atenção,
     * como por exemplo um alerta de nova mensagem.
     *
     * O mesmo também permite que a cada nova notificação seja incrementado e exibido, ou não, este número em uma *tag* ao lado do
     * ícone de notificações.
     */
    var ThfToolbarNotificationComponent = /** @class */ (function () {
        function ThfToolbarNotificationComponent() {
            this._notificationNumber = 0;
        }
        Object.defineProperty(ThfToolbarNotificationComponent.prototype, "notificationNumber", {
            get: /**
             * @return {?}
             */
            function () {
                return this._notificationNumber;
            },
            /** Define o número de notificações. */
            set: /**
             * Define o número de notificações.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._notificationNumber = Number.isInteger(value) ? value : 0;
            },
            enumerable: true,
            configurable: true
        });
        ThfToolbarNotificationComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-toolbar-notification',
                        template: "<div class=\"thf-toolbar-notification thf-clickable\" (click)=\"popup.toggle()\">\n  <span #notification class=\"thf-icon thf-icon-notification thf-toolbar-icon\"></span>\n  <div *ngIf=\"notificationNumber\" class=\"thf-toolbar-notification-badge\">\n    {{ notificationNumber }}\n  </div>\n</div>\n\n<thf-popup #popup\n  [t-actions]=\"notificationActions\"\n  [t-target]=\"notification\">\n</thf-popup>\n",
                        providers: [ThfControlPositionService]
                    }] }
        ];
        ThfToolbarNotificationComponent.propDecorators = {
            notificationActions: [{ type: core.Input, args: ['t-notification-actions',] }],
            notificationNumber: [{ type: core.Input, args: ['t-notification-number',] }]
        };
        return ThfToolbarNotificationComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfToolbarProfileDefaultAvatar = './assets/images/totvs-logo-user.svg';
    /**
     * \@docsPrivate
     *
     * \@docsExtends ThfToolbarProfileComponent
     *
     * \@description
     *
     * Componente `thf-toolbar-profile`.
     */
    var ThfToolbarProfileComponent = /** @class */ (function () {
        function ThfToolbarProfileComponent() {
            this.defaultAvatar = thfToolbarProfileDefaultAvatar;
        }
        ThfToolbarProfileComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-toolbar-profile',
                        template: "<div #profileElement class=\"thf-toolbar-profile thf-clickable\" (click)=\"popup.toggle()\">\n  <ng-container *ngIf=\"profile.avatar; then avatar; else userIcon\"></ng-container>\n</div>\n\n<thf-popup #popup\n  [t-actions]=\"profileActions\"\n  [t-target]=\"profileElement\">\n\n  <div t-popup-header-template\n    *ngIf=\"profile?.title\"\n    class=\"thf-toolbar-profile-item-header\">\n\n    <thf-avatar\n      class=\"thf-toolbar-profile-item-avatar\"\n      t-size=\"sm\"\n      [t-src]=\"profile.avatar || defaultAvatar\">\n    </thf-avatar>\n\n    <div>\n      <div class=\"thf-toolbar-profile-item-header-title\">\n        {{ profile.title }}\n      </div>\n\n      <div *ngIf=\"profile.subtitle\" class=\"thf-toolbar-profile-item-header-subtitle\">\n        {{ profile.subtitle }}\n      </div>\n    </div>\n  </div>\n\n</thf-popup>\n\n<ng-template #avatar>\n  <thf-avatar t-size=\"xs\" [t-src]=\"profile.avatar\"></thf-avatar>\n</ng-template>\n\n<ng-template #userIcon>\n  <span class=\"thf-icon thf-icon-user thf-toolbar-icon\"></span>\n</ng-template>\n",
                        providers: [ThfControlPositionService]
                    }] }
        ];
        ThfToolbarProfileComponent.propDecorators = {
            profile: [{ type: core.Input, args: ['t-profile',] }],
            profileActions: [{ type: core.Input, args: ['t-profile-actions',] }]
        };
        return ThfToolbarProfileComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente thf-toolbar
     *
     */
    var ThfToolbarModule = /** @class */ (function () {
        function ThfToolbarModule() {
        }
        ThfToolbarModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            ThfAvatarModule,
                            ThfPopupModule
                        ],
                        declarations: [
                            ThfToolbarActionsComponent,
                            ThfToolbarComponent,
                            ThfToolbarNotificationComponent,
                            ThfToolbarProfileComponent
                        ],
                        exports: [
                            ThfToolbarComponent
                        ],
                        providers: [],
                        schemas: []
                    },] }
        ];
        return ThfToolbarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     *
     * \@description
     *
     * O componente `thf-widget` é recomendado para exibição de *dashboards*, podendo ser utilizado
     * para incluir vários tipos de conteúdo como: gráficos, tabelas, grids e imagens.
     *
     * Além da exibição de conteúdos, este componente possibilita adicionar ações e um link
     * para ajuda, como também possibilita ser utilizado com ou sem sombra.
     *
     * Para controlar sua largura, é possível utilizar o [Grid System](/guides/grid-system) para um maior
     * controle de seu redimensionamento, assim possibilitando o tratamento para diferentes resoluções.
     * @abstract
     */
    var ThfWidgetBaseComponent = /** @class */ (function () {
        function ThfWidgetBaseComponent() {
            this._disabled = false;
            this._noShadow = false;
            this._primary = false;
            this.containerHeight = 'auto';
            /**
             * Ação que será executada quando o usuário clicar sobre a área total do `thf-widget`.
             */
            this.click = new core.EventEmitter();
            /**
             * Função que será disparada com o valor do `t-disabled` quando esta propriedade for alterada.
             */
            this.onDisabled = new core.EventEmitter();
            /**
             * Função que será chamada na primeira ação.
             */
            this.primaryAction = new core.EventEmitter();
            /**
             * Função que será chamada na segunda ação.
             */
            this.secondaryAction = new core.EventEmitter();
            /**
             * Função chamada ao clicar no ícone de configuração
             */
            this.setting = new core.EventEmitter();
            /**
             * Função que será chamada ao clicar no título.
             */
            this.titleAction = new core.EventEmitter();
        }
        Object.defineProperty(ThfWidgetBaseComponent.prototype, "background", {
            get: /**
             * @return {?}
             */
            function () {
                return this._background;
            },
            /**
             * @optional
             *
             * @description
             *
             * Aplicação de imagem de fundo.
             * > Se a imagem escolhida intervir na legibilidade do texto contido no `t-widget`,
             * pode-se utilizar a propriedade `t-primary` em conjunto para que os textos fiquem na cor branca.
             *
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Aplicação de imagem de fundo.
             * > Se a imagem escolhida intervir na legibilidade do texto contido no `t-widget`,
             * pode-se utilizar a propriedade `t-primary` em conjunto para que os textos fiquem na cor branca.
             *
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._background = (value && typeof value === 'string') ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfWidgetBaseComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita todas as ações do componente.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Desabilita todas as ações do componente.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._disabled = convertToBoolean(value);
                this.onDisabled.emit(this.disabled);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfWidgetBaseComponent.prototype, "height", {
            get: /**
             * @return {?}
             */
            function () {
                return this._height;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define a altura do `thf-widget`.
             * A altura mínima para o `thf-widget` depende do que será exibido através das propriedades `t-primary-label`,
             * `t-setting`, `t-help` e `t-title`.
             * > Caso não seja informado valor, a propriedade irá assumir o tamanho do conteúdo.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define a altura do `thf-widget`.
             * A altura mínima para o `thf-widget` depende do que será exibido através das propriedades `t-primary-label`,
             * `t-setting`, `t-help` e `t-title`.
             * > Caso não seja informado valor, a propriedade irá assumir o tamanho do conteúdo.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._height = parseInt((/** @type {?} */ (value)), 10);
                this.setHeight(this.height);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfWidgetBaseComponent.prototype, "help", {
            get: /**
             * @return {?}
             */
            function () {
                return this._help;
            },
            /**
             * @optional
             *
             * @description
             *
             * Link de ajuda
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Link de ajuda
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._help = isTypeof(value, 'string') ? value : '';
                this.setHeight(this.height);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfWidgetBaseComponent.prototype, "noShadow", {
            get: /**
             * @return {?}
             */
            function () {
                return this._noShadow;
            },
            /**
             * @optional
             *
             * @description
             *
             * Desabilita a sombra do `thf-widget`.
             *
             * @default `true`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Desabilita a sombra do `thf-widget`.
             *
             * \@default `true`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._noShadow = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
                this.setHeight(this.height);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfWidgetBaseComponent.prototype, "primary", {
            get: /**
             * @return {?}
             */
            function () {
                return this._primary;
            },
            /**
             * @optional
             *
             * @description
             *
             * Opção para que o `thf-widget` fique em destaque.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Opção para que o `thf-widget` fique em destaque.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._primary = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfWidgetBaseComponent.prototype, "primaryLabel", {
            get: /**
             * @return {?}
             */
            function () {
                return this._primaryLabel;
            },
            /**
             * @optional
             *
             * @description
             *
             * Descrição da primeira ação.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Descrição da primeira ação.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._primaryLabel = isTypeof(value, 'string') ? value : '';
                this.setHeight(this.height);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfWidgetBaseComponent.prototype, "title", {
            get: /**
             * @return {?}
             */
            function () {
                return this._title;
            },
            /**
             * @optional
             *
             * @description
             *
             * Título do `thf-widget`.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Título do `thf-widget`.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._title = isTypeof(value, 'string') ? value : '';
                this.setHeight(this.height);
            },
            enumerable: true,
            configurable: true
        });
        ThfWidgetBaseComponent.propDecorators = {
            background: [{ type: core.Input, args: ['t-background',] }],
            disabled: [{ type: core.Input, args: ['t-disabled',] }],
            height: [{ type: core.Input, args: ['t-height',] }],
            help: [{ type: core.Input, args: ['t-help',] }],
            noShadow: [{ type: core.Input, args: ['t-no-shadow',] }],
            primary: [{ type: core.Input, args: ['t-primary',] }],
            primaryLabel: [{ type: core.Input, args: ['t-primary-label',] }],
            secondaryLabel: [{ type: core.Input, args: ['t-secondary-label',] }],
            title: [{ type: core.Input, args: ['t-title',] }],
            click: [{ type: core.Output, args: ['t-click',] }],
            onDisabled: [{ type: core.Output, args: ['t-on-disabled',] }],
            primaryAction: [{ type: core.Output, args: ['t-primary-action',] }],
            secondaryAction: [{ type: core.Output, args: ['t-secondary-action',] }],
            setting: [{ type: core.Output, args: ['t-setting',] }],
            titleAction: [{ type: core.Output, args: ['t-title-action',] }]
        };
        return ThfWidgetBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfWidgetBaseComponent
     *
     * \@example
     *
     * <example name="thf-widget-basic" title="Totvs Widget Basic">
     *  <file name="sample-thf-widget-basic/sample-thf-widget-basic.component.html"> </file>
     *  <file name="sample-thf-widget-basic/sample-thf-widget-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-widget-labs" title="Totvs Widget Labs">
     *  <file name="sample-thf-widget-labs/sample-thf-widget-labs.component.html"> </file>
     *  <file name="sample-thf-widget-labs/sample-thf-widget-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-widget-finance-dashboard" title="Totvs Widget - Finance dashboard">
     *  <file name="sample-thf-widget-finance-dashboard/sample-thf-widget-finance-dashboard.component.html"> </file>
     *  <file name="sample-thf-widget-finance-dashboard/sample-thf-widget-finance-dashboard.component.ts"> </file>
     * </example>
     *
     * <example name="thf-widget-card" title="Totvs Widget - Card">
     *  <file name="sample-thf-widget-card/sample-thf-widget-card.component.html"> </file>
     *  <file name="sample-thf-widget-card/sample-thf-widget-card.component.ts"> </file>
     * </example>
     *
     */
    var ThfWidgetComponent = /** @class */ (function (_super) {
        __extends(ThfWidgetComponent, _super);
        function ThfWidgetComponent(viewRef) {
            return _super.call(this) || this;
        }
        Object.defineProperty(ThfWidgetComponent.prototype, "showTitleAction", {
            get: /**
             * @return {?}
             */
            function () {
                return !!this.titleAction.observers[0];
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfWidgetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.setHeight(this.height);
        };
        /**
         * @return {?}
         */
        ThfWidgetComponent.prototype.hasTitleHelpOrSetting = /**
         * @return {?}
         */
        function () {
            return !!this.title || !!this.help || !!this.setting.observers[0];
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfWidgetComponent.prototype.onClick = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!this.disabled) {
                this.click.emit(event);
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfWidgetComponent.prototype.openHelp = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!this.disabled) {
                event.stopPropagation();
                window.open(this.help, '_blank');
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfWidgetComponent.prototype.runPrimaryAction = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!this.disabled) {
                event.stopPropagation();
                this.primaryAction.emit();
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfWidgetComponent.prototype.runSecondaryAction = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!this.disabled) {
                event.stopPropagation();
                this.secondaryAction.emit();
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfWidgetComponent.prototype.runTitleAction = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!this.disabled) {
                event.stopPropagation();
                this.titleAction.emit();
            }
        };
        /**
         * @param {?} height
         * @return {?}
         */
        ThfWidgetComponent.prototype.setHeight = /**
         * @param {?} height
         * @return {?}
         */
        function (height) {
            if (height) {
                /** @type {?} */
                var bodyHeight = height;
                /** @type {?} */
                var hasSettingOrHelp = this.setting.observers.length > 0 || this.help;
                /** @type {?} */
                var footerBorder = 1;
                /** @type {?} */
                var footerHeight = 40;
                /** @type {?} */
                var settingHeight = 37;
                /** @type {?} */
                var shadowHeight = 2;
                /** @type {?} */
                var titleHeight = 50;
                if (this.noShadow) {
                    bodyHeight -= shadowHeight;
                }
                if (hasSettingOrHelp && !this.title) {
                    bodyHeight -= settingHeight;
                }
                if (this.title) {
                    bodyHeight -= titleHeight;
                }
                if (this.primaryLabel) {
                    bodyHeight -= footerHeight + footerBorder;
                }
                this.containerHeight = bodyHeight + "px";
            }
            else {
                this.containerHeight = "auto";
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ThfWidgetComponent.prototype.settingOutput = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!this.disabled) {
                event.stopPropagation();
                this.setting.emit();
            }
        };
        ThfWidgetComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-widget',
                        template: "<div\n  [class.thf-clickable]=\"click.observers.length\"\n  [class.thf-widget]=\"!primary\"\n  [class.thf-widget-disabled]=\"disabled\"\n  [class.thf-widget-primary]=\"primary\"\n  [class.thf-widget-no-shadow]=\"noShadow\"\n  [style.background-image]=\"background ? 'url(' + background + ')' : undefined\"\n  (click)=\"onClick($event)\">\n\n  <div *ngIf=\"hasTitleHelpOrSetting()\" class=\"thf-widget-header\">\n\n    <span\n      *ngIf=\"showTitleAction; else noTitleAction\"\n      class=\"thf-widget-title-action\"\n      (click)=\"runTitleAction($event)\">\n      {{ title }}\n    </span>\n    <ng-template #noTitleAction>{{ title }}</ng-template>\n\n    <div *ngIf=\"setting.observers[0] || help\" class=\"thf-pull-right\">\n      <span id=\"settingAction\"\n        *ngIf=\"setting.observers[0]\"\n        class=\"thf-clickable thf-icon thf-icon-settings\"\n        (click)=\"settingOutput($event)\">\n      </span>\n      <span id=\"helpLink\"\n        *ngIf=\"help\"\n        class=\"thf-clickable thf-icon thf-icon-help\"\n        (click)=\"openHelp($event)\">\n      </span>\n    </div>\n  </div>\n\n  <thf-container\n    t-no-border\n    [t-height]=\"containerHeight\">\n    <div class=\"thf-widget-body\">\n      <ng-content></ng-content>\n    </div>\n  </thf-container>\n\n  <div *ngIf=\"primaryLabel\" class=\"thf-widget-footer\">\n\n    <div class=\"thf-widget-xl\" *ngIf=\"!secondaryLabel\">\n      <a class=\"thf-widget-action\" id='primaryAct' (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a>\n    </div>\n\n    <div class=\"thf-widget-md\" *ngIf=\"secondaryLabel\">\n      <a class=\"thf-widget-action\" id='primaryAct' (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a>\n    </div>\n    <div class=\"thf-widget-md\" *ngIf=\"secondaryLabel\">\n      <a class=\"thf-widget-action\" id='secondaryAct' (click)=\"runSecondaryAction($event)\">{{ secondaryLabel }}</a>\n    </div>\n\n  </div>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfWidgetComponent.ctorParameters = function () { return [
            { type: core.ViewContainerRef }
        ]; };
        return ThfWidgetComponent;
    }(ThfWidgetBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do componente thf-widget
     */
    var ThfWidgetModule = /** @class */ (function () {
        function ThfWidgetModule() {
        }
        ThfWidgetModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            ThfContainerModule
                        ],
                        exports: [
                            ThfWidgetComponent
                        ],
                        declarations: [ThfWidgetComponent]
                    },] }
        ];
        return ThfWidgetModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfComponentsModule = /** @class */ (function () {
        function ThfComponentsModule() {
        }
        ThfComponentsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [],
                        imports: [
                            ThfAvatarModule,
                            ThfBreadcrumbModule,
                            ThfButtonModule,
                            ThfButtonGroupModule,
                            ThfCalendarModule,
                            ThfChartModule,
                            ThfContainerModule,
                            ThfDisclaimerGroupModule,
                            ThfDisclaimerModule,
                            ThfDividerModule,
                            ThfDropdownModule,
                            ThfDynamicModule,
                            ThfFieldModule,
                            ThfGridModule,
                            ThfInfoModule,
                            ThfListViewModule,
                            ThfLoadingModule,
                            ThfMenuModule,
                            ThfMenuPanelModule,
                            ThfModalModule,
                            ThfNavbarModule,
                            ThfPageModule,
                            ThfPopoverModule,
                            ThfPopupModule,
                            ThfSlideModule,
                            ThfStepperModule,
                            ThfTableModule,
                            ThfTabsModule,
                            ThfTagModule,
                            ThfToolbarModule,
                            ThfWidgetModule
                        ],
                        exports: [
                            ThfAvatarModule,
                            ThfBreadcrumbModule,
                            ThfButtonModule,
                            ThfButtonGroupModule,
                            ThfCalendarModule,
                            ThfChartModule,
                            ThfContainerModule,
                            ThfDisclaimerGroupModule,
                            ThfDisclaimerModule,
                            ThfDividerModule,
                            ThfDropdownModule,
                            ThfDynamicModule,
                            ThfFieldModule,
                            ThfGridModule,
                            ThfInfoModule,
                            ThfListViewModule,
                            ThfLoadingModule,
                            ThfMenuModule,
                            ThfMenuPanelModule,
                            ThfModalModule,
                            ThfNavbarModule,
                            ThfPageModule,
                            ThfPopoverModule,
                            ThfPopupModule,
                            ThfSlideModule,
                            ThfStepperModule,
                            ThfTableModule,
                            ThfTabsModule,
                            ThfTagModule,
                            ThfToolbarModule,
                            ThfWidgetModule
                        ],
                        providers: [],
                        bootstrap: []
                    },] }
        ];
        return ThfComponentsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfDirectivesModule = /** @class */ (function () {
        function ThfDirectivesModule() {
        }
        ThfDirectivesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [],
                        imports: [
                            ThfTooltipModule
                        ],
                        exports: [
                            ThfTooltipModule
                        ],
                        providers: [],
                        bootstrap: []
                    },] }
        ];
        return ThfDirectivesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfGuardsModule = /** @class */ (function () {
        function ThfGuardsModule() {
        }
        ThfGuardsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [],
                        imports: [],
                        exports: [],
                        providers: [],
                        bootstrap: []
                    },] }
        ];
        return ThfGuardsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var ThfDialogType = {
        // Enum para alert
        Alert: 0,
        // Enum para confirm
        Confirm: 1,
    };
    ThfDialogType[ThfDialogType.Alert] = 'Alert';
    ThfDialogType[ThfDialogType.Confirm] = 'Confirm';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O thf-dialog é um serviço para exibição de caixas de diálogo, é possível customiza-los passando alguns parâmetros de acordo com a
     * necessidade do desenvolvedor.
     * @abstract
     */
    var   /**
     * \@description
     *
     * O thf-dialog é um serviço para exibição de caixas de diálogo, é possível customiza-los passando alguns parâmetros de acordo com a
     * necessidade do desenvolvedor.
     * @abstract
     */
    ThfDialogBaseService = /** @class */ (function () {
        function ThfDialogBaseService() {
        }
        /** Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento. */
        /**
         * Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento.
         * @param {?} confirmOptions
         * @return {?}
         */
        ThfDialogBaseService.prototype.confirm = /**
         * Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento.
         * @param {?} confirmOptions
         * @return {?}
         */
        function (confirmOptions) {
            this.openDialog(ThfDialogType.Confirm, confirmOptions);
        };
        /** Exibe um diálogo de alerta. */
        /**
         * Exibe um diálogo de alerta.
         * @param {?} alertOptions
         * @return {?}
         */
        ThfDialogBaseService.prototype.alert = /**
         * Exibe um diálogo de alerta.
         * @param {?} alertOptions
         * @return {?}
         */
        function (alertOptions) {
            this.openDialog(ThfDialogType.Alert, alertOptions);
        };
        return ThfDialogBaseService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfDialogAlertLiteralsDefault = {
        en: (/** @type {?} */ ({ ok: 'Ok' })),
        es: (/** @type {?} */ ({ ok: 'Ok' })),
        pt: (/** @type {?} */ ({ ok: 'Ok' }))
    };
    /** @type {?} */
    var thfDialogConfirmLiteralsDefault = {
        en: (/** @type {?} */ ({ cancel: 'Cancel', confirm: 'Confirm' })),
        es: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' })),
        pt: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' }))
    };
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente que serve como container do thf-dialog.service
     */
    var ThfDialogComponent = /** @class */ (function () {
        function ThfDialogComponent() {
            // Objeto primary do thfModal
            this.primaryAction = { label: 'ok', action: (/**
                 * @return {?}
                 */
                function () { }) };
        }
        /**
         * @return {?}
         */
        ThfDialogComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.closeSubscription.unsubscribe();
        };
        /**
         * @return {?}
         */
        ThfDialogComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.closeSubscription = this.thfModal.onXClosed.subscribe((/**
             * @param {?} close
             * @return {?}
             */
            function (close) { return _this.destroy(); }));
        };
        // Fecha o thfModal
        // Fecha o thfModal
        /**
         * @return {?}
         */
        ThfDialogComponent.prototype.close = 
        // Fecha o thfModal
        /**
         * @return {?}
         */
        function () {
            this.thfModal.close();
            this.destroy();
        };
        /**
         * @return {?}
         */
        ThfDialogComponent.prototype.destroy = /**
         * @return {?}
         */
        function () {
            if (this.componentRef) {
                this.componentRef.destroy();
            }
        };
        // Insere os valores recebidos de this.open para o thfModal
        // Insere os valores recebidos de this.open para o thfModal
        /**
         * @param {?=} primaryLabel
         * @param {?=} primaryAction
         * @param {?=} secondaryLabel
         * @param {?=} secondaryAction
         * @return {?}
         */
        ThfDialogComponent.prototype.configDialog = 
        // Insere os valores recebidos de this.open para o thfModal
        /**
         * @param {?=} primaryLabel
         * @param {?=} primaryAction
         * @param {?=} secondaryLabel
         * @param {?=} secondaryAction
         * @return {?}
         */
        function (primaryLabel, primaryAction, secondaryLabel, secondaryAction) {
            var _this = this;
            this.primaryAction = {
                label: primaryLabel,
                action: (/**
                 * @return {?}
                 */
                function () {
                    if (primaryAction) {
                        primaryAction();
                    }
                    _this.close();
                })
            };
            if (secondaryLabel) {
                this.secondaryAction = {
                    label: secondaryLabel,
                    action: (/**
                     * @return {?}
                     */
                    function () {
                        if (secondaryAction) {
                            secondaryAction();
                        }
                        _this.close();
                    })
                };
            }
        };
        // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diálago solicitado
        // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diálago solicitado
        /**
         * @param {?} dialogOptions
         * @param {?} dialogType
         * @param {?=} componentRef
         * @return {?}
         */
        ThfDialogComponent.prototype.open = 
        // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diálago solicitado
        /**
         * @param {?} dialogOptions
         * @param {?} dialogType
         * @param {?=} componentRef
         * @return {?}
         */
        function (dialogOptions, dialogType, componentRef) {
            this.title = dialogOptions.title;
            this.message = dialogOptions.message;
            this.componentRef = componentRef;
            this.setDialogLiterals(dialogOptions, dialogType);
            switch (dialogType) {
                case ThfDialogType.Confirm: {
                    this.configDialog(this.literalsConfirm.confirm, ((/** @type {?} */ (dialogOptions))).confirm, this.literalsConfirm.cancel, ((/** @type {?} */ (dialogOptions))).cancel);
                    break;
                }
                case ThfDialogType.Alert: {
                    this.configDialog(this.literalsAlert.ok, ((/** @type {?} */ (dialogOptions))).ok);
                    break;
                }
            }
            this.thfModal.open();
        };
        /**
         * @private
         * @param {?} dialogOptions
         * @param {?} dialogType
         * @return {?}
         */
        ThfDialogComponent.prototype.setDialogLiterals = /**
         * @private
         * @param {?} dialogOptions
         * @param {?} dialogType
         * @return {?}
         */
        function (dialogOptions, dialogType) {
            /** @type {?} */
            var alertLiterals = thfDialogAlertLiteralsDefault;
            /** @type {?} */
            var confirmLiterals = thfDialogConfirmLiteralsDefault;
            /** @type {?} */
            var literals = dialogOptions.literals;
            if (dialogType === ThfDialogType.Alert) {
                this.literalsAlert = __assign({}, alertLiterals[thfLocaleDefault], alertLiterals[browserLanguage()], literals);
            }
            else {
                this.literalsConfirm = __assign({}, confirmLiterals[thfLocaleDefault], confirmLiterals[browserLanguage()], literals);
            }
        };
        ThfDialogComponent.decorators = [
            { type: core.Component, args: [{
                        template: "<thf-modal\n  [t-title]=\"title\"\n  [t-primary-action]=\"primaryAction\"\n  [t-secondary-action]=\"secondaryAction\">\n  {{ message }}\n</thf-modal>\n"
                    }] }
        ];
        ThfDialogComponent.propDecorators = {
            thfModal: [{ type: core.ViewChild, args: [ThfModalComponent, { static: true },] }]
        };
        return ThfDialogComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfDialogBaseService
     *
     * \@example
     *
     * <example name="thf-dialog-basic" title="Totvs Dialog Basic">
     *  <file name="sample-thf-dialog-basic/sample-thf-dialog-basic.component.html"> </file>
     *  <file name="sample-thf-dialog-basic/sample-thf-dialog-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-dialog-labs" title="Totvs Dialog Labs">
     *  <file name="sample-thf-dialog-labs/sample-thf-dialog-labs.component.html"> </file>
     *  <file name="sample-thf-dialog-labs/sample-thf-dialog-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-dialog-cancel-credit-card" title="Totvs Dialog - Cancel Credit Card">
     *  <file name="sample-thf-dialog-cancel-credit-card/sample-thf-dialog-cancel-credit-card.component.html"> </file>
     *  <file name="sample-thf-dialog-cancel-credit-card/sample-thf-dialog-cancel-credit-card.component.ts"> </file>
     * </example>
     */
    var ThfDialogService = /** @class */ (function (_super) {
        __extends(ThfDialogService, _super);
        function ThfDialogService(thfComponentInjector) {
            var _this = _super.call(this) || this;
            _this.thfComponentInjector = thfComponentInjector;
            return _this;
        }
        /**
         * @param {?} dialogType
         * @param {?} dialogOptions
         * @return {?}
         */
        ThfDialogService.prototype.openDialog = /**
         * @param {?} dialogType
         * @param {?} dialogOptions
         * @return {?}
         */
        function (dialogType, dialogOptions) {
            /** @type {?} */
            var componentRef = this.thfComponentInjector.createComponentInApplication(ThfDialogComponent);
            componentRef.changeDetectorRef.detectChanges();
            componentRef.instance.open(dialogOptions, dialogType, componentRef);
        };
        ThfDialogService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfDialogService.ctorParameters = function () { return [
            { type: ThfComponentInjectorService }
        ]; };
        return ThfDialogService;
    }(ThfDialogBaseService));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var ThfToasterOrientation = {
        /** Orientção do componente fica no rodapé */
        Bottom: 0,
        /** Orientção do componente fica no topo */
        Top: 1,
    };
    ThfToasterOrientation[ThfToasterOrientation.Bottom] = 'Bottom';
    ThfToasterOrientation[ThfToasterOrientation.Top] = 'Top';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var ThfToasterType = {
        /** Enum para informações do tipo "Erro" */
        Error: 0,
        /** Enum para informações do tipo "Informação" */
        Information: 1,
        /** Enum para informações do tipo "Sucesso" */
        Success: 2,
        /** Enum para informações do tipo "Atenção" */
        Warning: 3,
    };
    ThfToasterType[ThfToasterType.Error] = 'Error';
    ThfToasterType[ThfToasterType.Information] = 'Information';
    ThfToasterType[ThfToasterType.Success] = 'Success';
    ThfToasterType[ThfToasterType.Warning] = 'Warning';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
     *
     * - success,
     * - warning,
     * - error,
     * - information.
     *
     * Cada um destes métodos recebe como parâmetro o objeto "ThfNotification" que contém os dados da mensagem e o
     * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
     *
     * Estas notificações serão exibidas durante 10 segundos, após este tempo a mesma é removida automaticamente.
     * @abstract
     */
    var   /**
     * \@description
     *
     * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
     *
     * - success,
     * - warning,
     * - error,
     * - information.
     *
     * Cada um destes métodos recebe como parâmetro o objeto "ThfNotification" que contém os dados da mensagem e o
     * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
     *
     * Estas notificações serão exibidas durante 10 segundos, após este tempo a mesma é removida automaticamente.
     * @abstract
     */
    ThfNotificationBaseService = /** @class */ (function () {
        function ThfNotificationBaseService() {
            // Array responsável por guardar a instância de thf-toaster's superiores.
            this.stackTop = [];
            // Array responsável por guardar a instância de thf-toaster's inferiores.
            this.stackBottom = [];
            // Duração do toaster ativo.
            this.durationToaster = 10000;
        }
        /**
         * Emite uma notificação de sucesso.
         *
         * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
         */
        /**
         * Emite uma notificação de sucesso.
         *
         * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
         * @return {?}
         */
        ThfNotificationBaseService.prototype.success = /**
         * Emite uma notificação de sucesso.
         *
         * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
         * @return {?}
         */
        function (notification) {
            this.createToaster(this.buildToaster(notification, ThfToasterType.Success));
        };
        /**
         * Emite uma notificação de atenção.
         *
         * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
         */
        /**
         * Emite uma notificação de atenção.
         *
         * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
         * @return {?}
         */
        ThfNotificationBaseService.prototype.warning = /**
         * Emite uma notificação de atenção.
         *
         * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
         * @return {?}
         */
        function (notification) {
            this.createToaster(this.buildToaster(notification, ThfToasterType.Warning));
        };
        /**
         * Emite uma notificação de erro.
         *
         * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
         */
        /**
         * Emite uma notificação de erro.
         *
         * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
         * @return {?}
         */
        ThfNotificationBaseService.prototype.error = /**
         * Emite uma notificação de erro.
         *
         * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
         * @return {?}
         */
        function (notification) {
            this.createToaster(this.buildToaster(notification, ThfToasterType.Error));
        };
        /**
         * Emite uma notificação de informação.
         *
         * @param notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
         */
        /**
         * Emite uma notificação de informação.
         *
         * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
         * @return {?}
         */
        ThfNotificationBaseService.prototype.information = /**
         * Emite uma notificação de informação.
         *
         * @param {?} notification {ThfNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
         * @return {?}
         */
        function (notification) {
            this.createToaster(this.buildToaster(notification, ThfToasterType.Information));
        };
        /**
         * @docsPrivate
         *
         * Cria um objeto do tipo ThfToaster de acordo o tipo.
         *
         * @param notification {ThfNotification | string} Objeto ThfNotification com os dados da notificação
         */
        /**
         * \@docsPrivate
         *
         * Cria um objeto do tipo ThfToaster de acordo o tipo.
         *
         * @private
         * @param {?} notification {ThfNotification | string} Objeto ThfNotification com os dados da notificação
         * @param {?} type
         * @return {?}
         */
        ThfNotificationBaseService.prototype.buildToaster = /**
         * \@docsPrivate
         *
         * Cria um objeto do tipo ThfToaster de acordo o tipo.
         *
         * @private
         * @param {?} notification {ThfNotification | string} Objeto ThfNotification com os dados da notificação
         * @param {?} type
         * @return {?}
         */
        function (notification, type) {
            var _this = this;
            /** @type {?} */
            var index = 0;
            /** @type {?} */
            var orientation;
            if (((/** @type {?} */ (notification))).orientation === undefined ||
                ((/** @type {?} */ (notification))).orientation === ThfToasterOrientation.Bottom) {
                index = this.stackBottom.length;
                orientation = ThfToasterOrientation.Bottom;
            }
            else {
                index = this.stackTop.length;
                orientation = ThfToasterOrientation.Top;
            }
            /** @type {?} */
            var toaster = {
                componentRef: undefined,
                message: ((/** @type {?} */ (notification))).message || (/** @type {?} */ (notification)),
                type: type,
                orientation: orientation,
                action: ((/** @type {?} */ (notification))).action,
                actionLabel: ((/** @type {?} */ (notification))).actionLabel,
                position: index
            };
            if (((/** @type {?} */ (notification))).action) {
                toaster.action = (/**
                 * @param {?} param
                 * @return {?}
                 */
                function (param) {
                    ((/** @type {?} */ (notification))).action();
                    _this.destroyToaster(param.componentRef);
                });
            }
            return toaster;
        };
        return ThfNotificationBaseService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * O componente thf-toaster foi construído para exibir notificações para o usuário.
     * @abstract
     */
    var   /**
     * \@docsPrivate
     *
     * \@description
     *
     * O componente thf-toaster foi construído para exibir notificações para o usuário.
     * @abstract
     */
    ThfToasterBaseComponent = /** @class */ (function () {
        function ThfToasterBaseComponent() {
            /**
             * Orientação da notificação, a mesma pode ser exibida na parte superior ou inferior da página.
             */
            this.orientation = ThfToasterOrientation.Bottom;
        }
        return ThfToasterBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@docsExtends ThfToasterBaseComponent
     */
    var ThfToasterComponent = /** @class */ (function (_super) {
        __extends(ThfToasterComponent, _super);
        function ThfToasterComponent(changeDetector, elementeRef) {
            var _this = _super.call(this) || this;
            _this.changeDetector = changeDetector;
            _this.elementeRef = elementeRef;
            /* Margem do Toaster referênte à sua orientação e posição*/
            _this.margin = 20;
            /* Observable para monitorar o Close to Toaster */
            _this.observableOnClose = new rxjs.Subject();
            /* Mostra ou oculta o Toaster */
            _this.showToaster = true;
            /* Posição do Toaster*/
            _this.toasterPosition = 'thf-toaster-bottom';
            return _this;
        }
        /* Muda a posição do Toaster na tela*/
        /* Muda a posição do Toaster na tela*/
        /**
         * @param {?} position
         * @return {?}
         */
        ThfToasterComponent.prototype.changePosition = /* Muda a posição do Toaster na tela*/
        /**
         * @param {?} position
         * @return {?}
         */
        function (position) {
            this.elementeRef.nativeElement.style.display = 'table';
            this.margin = 6 + (44 * (position)) + position * 6;
            if (this.orientation === ThfToasterOrientation.Top) {
                this.toaster.nativeElement.style.top = this.margin + 'px';
            }
            else {
                this.toaster.nativeElement.style.bottom = this.margin + 'px';
            }
        };
        /* Fecha o componente Toaster */
        /* Fecha o componente Toaster */
        /**
         * @return {?}
         */
        ThfToasterComponent.prototype.close = /* Fecha o componente Toaster */
        /**
         * @return {?}
         */
        function () {
            this.showToaster = false;
            this.observableOnClose.next(true);
        };
        /* Configura o Toaster com os atributos passados para ele */
        /* Configura o Toaster com os atributos passados para ele */
        /**
         * @param {?} thfToaster
         * @return {?}
         */
        ThfToasterComponent.prototype.configToaster = /* Configura o Toaster com os atributos passados para ele */
        /**
         * @param {?} thfToaster
         * @return {?}
         */
        function (thfToaster) {
            this.type = thfToaster.type;
            this.message = thfToaster.message;
            this.orientation = thfToaster.orientation;
            this.position = thfToaster.position;
            this.action = thfToaster.action;
            this.actionLabel = (thfToaster.actionLabel) ? thfToaster.actionLabel : 'Fechar';
            this.componentRef = thfToaster.componentRef;
            /* Muda a orientação do Toaster */
            if (this.orientation === ThfToasterOrientation.Top) {
                this.toasterPosition = 'thf-toaster-top';
            }
            /* Muda a posição do Toaster */
            this.changePosition(this.position);
            /* Switch para o tipo de Toaster */
            switch (this.type) {
                case ThfToasterType.Error: {
                    this.toasterType = 'thf-toaster-error';
                    this.icon = 'thf-icon-close';
                    break;
                }
                case ThfToasterType.Information: {
                    this.toasterType = 'thf-toaster-info';
                    this.icon = 'thf-icon-info';
                    break;
                }
                case ThfToasterType.Success: {
                    this.toasterType = 'thf-toaster-success';
                    this.icon = 'thf-icon-ok';
                    break;
                }
                case ThfToasterType.Warning: {
                    this.toasterType = 'thf-toaster-warning';
                    this.icon = 'thf-icon-warning';
                    break;
                }
            }
            this.changeDetector.detectChanges();
        };
        /**
         * @return {?}
         */
        ThfToasterComponent.prototype.getShowToaster = /**
         * @return {?}
         */
        function () {
            return this.showToaster;
        };
        /**
         * @return {?}
         */
        ThfToasterComponent.prototype.getIcon = /**
         * @return {?}
         */
        function () {
            return this.icon;
        };
        /**
         * @return {?}
         */
        ThfToasterComponent.prototype.getToasterPosition = /**
         * @return {?}
         */
        function () {
            return this.toasterPosition;
        };
        /**
         * @return {?}
         */
        ThfToasterComponent.prototype.getToasterType = /**
         * @return {?}
         */
        function () {
            return this.toasterType;
        };
        /* Chama a função passada pelo atributo `action` */
        /* Chama a função passada pelo atributo `action` */
        /**
         * @return {?}
         */
        ThfToasterComponent.prototype.thfToasterAction = /* Chama a função passada pelo atributo `action` */
        /**
         * @return {?}
         */
        function () {
            this.action(this);
        };
        ThfToasterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-toaster',
                        template: "<div #toaster *ngIf=\"getShowToaster()\"\n  class=\"thf-toaster {{ getToasterType() }} {{ getToasterPosition() }} thf-clickable\"\n  (click)=\"close()\">\n\n  <div class=\"thf-toaster-message\">\n    <span class=\"thf-icon {{ getIcon() }}\"></span> {{ message }}\n  </div>\n\n  <div *ngIf=\"action !== undefined\" (click)=\"thfToasterAction()\" class=\"thf-toaster-action\">\n    {{ actionLabel }}\n  </div>\n\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfToasterComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: core.ElementRef }
        ]; };
        ThfToasterComponent.propDecorators = {
            toaster: [{ type: core.ViewChild, args: ['toaster', { static: false },] }]
        };
        return ThfToasterComponent;
    }(ThfToasterBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfNotificationBaseService
     *
     * \@example
     *
     * <example name="thf-notification-basic" title="Totvs Notification Basic">
     *  <file name="sample-thf-notification-basic/sample-thf-notification-basic.component.html"> </file>
     *  <file name="sample-thf-notification-basic/sample-thf-notification-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-notification-labs" title="Totvs Notification Labs">
     *  <file name="sample-thf-notification-labs/sample-thf-notification-labs.component.html"> </file>
     *  <file name="sample-thf-notification-labs/sample-thf-notification-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-notification-sales" title="Totvs Notification - Sales">
     *  <file name="sample-thf-notification-sales/sample-thf-notification-sales.component.html"> </file>
     *  <file name="sample-thf-notification-sales/sample-thf-notification-sales.component.ts"> </file>
     * </example>
     */
    var ThfNotificationService = /** @class */ (function (_super) {
        __extends(ThfNotificationService, _super);
        function ThfNotificationService(thfComponentInjector) {
            var _this = _super.call(this) || this;
            _this.thfComponentInjector = thfComponentInjector;
            return _this;
        }
        /**
         * @param {?} toaster
         * @return {?}
         */
        ThfNotificationService.prototype.createToaster = /**
         * @param {?} toaster
         * @return {?}
         */
        function (toaster) {
            var _this = this;
            /** @type {?} */
            var componentRef = this.thfComponentInjector.createComponentInApplication(ThfToasterComponent);
            toaster.componentRef = componentRef;
            componentRef.changeDetectorRef.detectChanges();
            componentRef.instance.configToaster(toaster);
            if (toaster.orientation === ThfToasterOrientation.Top) {
                this.stackTop.push(componentRef);
            }
            else {
                this.stackBottom.push(componentRef);
            }
            this.observableOnClose(componentRef);
            if (toaster.action === undefined) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.destroyToaster(componentRef);
                }), this.durationToaster);
            }
        };
        /**
         * @param {?} toaster
         * @return {?}
         */
        ThfNotificationService.prototype.destroyToaster = /**
         * @param {?} toaster
         * @return {?}
         */
        function (toaster) {
            /** @type {?} */
            var stack;
            if (toaster.instance.orientation === ThfToasterOrientation.Top) {
                stack = this.stackTop;
            }
            else {
                stack = this.stackBottom;
            }
            /** @type {?} */
            var index = stack.indexOf(toaster);
            stack.splice(index, 1);
            this.thfComponentInjector.destroyComponentInApplication(toaster);
            for (var count = 0; count < stack.length; count++) {
                stack[count].instance.changePosition(count);
            }
        };
        /**
         * @private
         * @param {?} componentRef
         * @return {?}
         */
        ThfNotificationService.prototype.observableOnClose = /**
         * @private
         * @param {?} componentRef
         * @return {?}
         */
        function (componentRef) {
            var _this = this;
            componentRef.instance.observableOnClose.subscribe((/**
             * @return {?}
             */
            function () {
                _this.destroyToaster(componentRef);
            }));
        };
        ThfNotificationService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ThfNotificationService.ctorParameters = function () { return [
            { type: ThfComponentInjectorService }
        ]; };
        /** @nocollapse */ ThfNotificationService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ThfNotificationService_Factory() { return new ThfNotificationService(core.ɵɵinject(ThfComponentInjectorService)); }, token: ThfNotificationService, providedIn: "root" });
        return ThfNotificationService;
    }(ThfNotificationBaseService));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NO_ERROR_HEADER_PARAM = 'X-Totvs-No-Error';
    /**
     * \@description
     *
     * O serviço Totvs Http Interceptor realiza o tratamento de requisições HTTP conforme o padrão do
     * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/viewpage.action?pageId=484701395) para adaptá-lo
     * ao modelo do THF.
     *
     * Ao analisar o objeto `_messages` retornado pela requisição, o serviço exibirá notificações com mensagens na tela.
     * Os retornos de erros com códigos 4xx e 5xx são tratados automaticamente, sem a necessidade de incluir o `_messages`.
     *
     * Também existe a possibilidade de não apresentar a notificação quando houver algum erro com códigos 4xx e 5xx,
     * utilizando o parâmetro `X-Totvs-No-Error` que foi definido conforme o
     * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/viewpage.action?pageId=484701395) (em Cabeçalhos Customizados).
     * O parâmetro `X-Totvs-No-Error` deve ser informado no cabeçalho da requisição com o valor `'true'` para funcionar corretamente,
     * por exemplo:
     *
     * ```
     * ...
     *  const headers = { 'X-Totvs-No-Error': 'true' };
     *
     *  this.http.get(`/customers/1`, { headers: headers });
     * ...
     *
     * ```
     * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
     *
     * O `Content-Type` deve ser `application/json` e a estrutura de mensagem recebida pelo serviço deve seguir o
     * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/viewpage.action?pageId=484701395)
     * (em Mensagens de sucesso para coleções), exemplo:
     *  - _messages: lista de mensagens de erro ou informativo resultante do serviço.
     *    - type: success, warning, error, e information;
     *    - code: título ou código da mensagem;
     *    - message: texto da mensagem;
     *    - detailedMessage: detalhamento do erro ou informativo;
     *
     * Ao importar o módulo `ThfModule` na aplicação, o `thf-http-interceptor` é automaticamente configurado sem a necessidade
     * de qualquer configuração extra.
     *
     * Ao realizar requisições utilize o `HttpClient`, conforme exemplo abaixo:
     *
     * ```
     * import { HttpClient } from '\@angular/common/http';
     *
     * ...
     *
     * \@Injectable()
     * export class UserService {
     *
     *   constructor(private http: HttpClient) { }
     *
     *   getUsers() {
     *     return this.http.get('/api/users');
     *   }
     *
     *   ...
     *
     * }
     * ```
     *
     * @abstract
     */
    var   /**
     * \@description
     *
     * O serviço Totvs Http Interceptor realiza o tratamento de requisições HTTP conforme o padrão do
     * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/viewpage.action?pageId=484701395) para adaptá-lo
     * ao modelo do THF.
     *
     * Ao analisar o objeto `_messages` retornado pela requisição, o serviço exibirá notificações com mensagens na tela.
     * Os retornos de erros com códigos 4xx e 5xx são tratados automaticamente, sem a necessidade de incluir o `_messages`.
     *
     * Também existe a possibilidade de não apresentar a notificação quando houver algum erro com códigos 4xx e 5xx,
     * utilizando o parâmetro `X-Totvs-No-Error` que foi definido conforme o
     * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/viewpage.action?pageId=484701395) (em Cabeçalhos Customizados).
     * O parâmetro `X-Totvs-No-Error` deve ser informado no cabeçalho da requisição com o valor `'true'` para funcionar corretamente,
     * por exemplo:
     *
     * ```
     * ...
     *  const headers = { 'X-Totvs-No-Error': 'true' };
     *
     *  this.http.get(`/customers/1`, { headers: headers });
     * ...
     *
     * ```
     * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
     *
     * O `Content-Type` deve ser `application/json` e a estrutura de mensagem recebida pelo serviço deve seguir o
     * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/viewpage.action?pageId=484701395)
     * (em Mensagens de sucesso para coleções), exemplo:
     *  - _messages: lista de mensagens de erro ou informativo resultante do serviço.
     *    - type: success, warning, error, e information;
     *    - code: título ou código da mensagem;
     *    - message: texto da mensagem;
     *    - detailedMessage: detalhamento do erro ou informativo;
     *
     * Ao importar o módulo `ThfModule` na aplicação, o `thf-http-interceptor` é automaticamente configurado sem a necessidade
     * de qualquer configuração extra.
     *
     * Ao realizar requisições utilize o `HttpClient`, conforme exemplo abaixo:
     *
     * ```
     * import { HttpClient } from '\@angular/common/http';
     *
     * ...
     *
     * \@Injectable()
     * export class UserService {
     *
     *   constructor(private http: HttpClient) { }
     *
     *   getUsers() {
     *     return this.http.get('/api/users');
     *   }
     *
     *   ...
     *
     * }
     * ```
     *
     * @abstract
     */
    ThfHttpInterceptorBaseService = /** @class */ (function () {
        function ThfHttpInterceptorBaseService(notification, dialog) {
            this.notification = notification;
            this.dialog = dialog;
            this.notificationTypes = ['success', 'warning', 'error', 'information'];
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        ThfHttpInterceptorBaseService.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            var _this = this;
            /** @type {?} */
            var cloneRequest = request.clone();
            request = request.headers.has(NO_ERROR_HEADER_PARAM) ? this.cloneRequestWithoutNoErrorHeaderParam(request) : request;
            return next.handle(request).pipe(operators.tap((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response instanceof http.HttpResponse) {
                    _this.processResponse(response);
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.processErrorResponse(error, cloneRequest);
            })));
        };
        /**
         * @param {?} response
         * @return {?}
         */
        ThfHttpInterceptorBaseService.prototype.processResponse = /**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            var _this = this;
            if (response.body && response.body._messages) {
                /** @type {?} */
                var messages = response.body._messages;
                if (messages instanceof Array) {
                    messages.forEach((/**
                     * @param {?} message
                     * @return {?}
                     */
                    function (message) {
                        _this.showNotification(message);
                    }));
                }
                else {
                    this.showNotification(messages);
                }
            }
        };
        /**
         * @param {?} response
         * @param {?} request
         * @return {?}
         */
        ThfHttpInterceptorBaseService.prototype.processErrorResponse = /**
         * @param {?} response
         * @param {?} request
         * @return {?}
         */
        function (response, request) {
            /** @type {?} */
            var errorResponse = response.status !== 0
                ? response.error
                : { code: 0, message: 'Servidor não está respondendo.', detailedMessage: response.message };
            /** @type {?} */
            var hasNoErrorParam = this.hasNoErrorParam(request);
            // not show the notification when has NoError parameter on header of request.
            if (errorResponse && errorResponse.message && !hasNoErrorParam) {
                this.showNotification(__assign({}, errorResponse, { type: 'error' }));
            }
        };
        /**
         * @private
         * @param {?} request
         * @return {?}
         */
        ThfHttpInterceptorBaseService.prototype.cloneRequestWithoutNoErrorHeaderParam = /**
         * @private
         * @param {?} request
         * @return {?}
         */
        function (request) {
            return request && request.clone({ headers: request.headers.delete(NO_ERROR_HEADER_PARAM) });
        };
        /**
         * @private
         * @param {?} request
         * @return {?}
         */
        ThfHttpInterceptorBaseService.prototype.hasNoErrorParam = /**
         * @private
         * @param {?} request
         * @return {?}
         */
        function (request) {
            /** @type {?} */
            var noErrorParam = request && request.headers.get(NO_ERROR_HEADER_PARAM);
            return noErrorParam && noErrorParam.toString().toLocaleLowerCase() === 'true';
        };
        /**
         * @private
         * @param {?} response
         * @return {?}
         */
        ThfHttpInterceptorBaseService.prototype.showNotification = /**
         * @private
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var typeNotification = this.notificationTypes.includes(response.type) ? response.type : 'information';
            /** @type {?} */
            var notificationAction = this.generateNotificationAction(response);
            this.notification[typeNotification]({
                message: response.message,
                actionLabel: notificationAction.label,
                action: notificationAction.action
            });
        };
        /**
         * @private
         * @param {?} errorResponse
         * @return {?}
         */
        ThfHttpInterceptorBaseService.prototype.generateNotificationAction = /**
         * @private
         * @param {?} errorResponse
         * @return {?}
         */
        function (errorResponse) {
            /** @type {?} */
            var notificationAction;
            /** @type {?} */
            var notificationLabel;
            /** @type {?} */
            var notificationMessage = errorResponse.message.concat(" " + errorResponse.detailedMessage);
            if (errorResponse.details && errorResponse.details instanceof Array) {
                errorResponse.details.forEach((/**
                 * @param {?} detailError
                 * @return {?}
                 */
                function (detailError) {
                    notificationMessage += "\n" + detailError.message;
                }));
            }
            if (errorResponse.helpUrl && !(errorResponse.detailedMessage || errorResponse.details)) {
                notificationLabel = 'Ajuda';
                notificationAction = this.generateUrlHelpFunction(errorResponse.helpUrl);
            }
            else if (errorResponse.detailedMessage || errorResponse.details) {
                notificationLabel = 'Detalhes';
                notificationAction = this.generateDialogDetailFunction(errorResponse, notificationMessage);
            }
            return { label: notificationLabel, action: notificationAction };
        };
        /**
         * @private
         * @param {?} helpUrl
         * @return {?}
         */
        ThfHttpInterceptorBaseService.prototype.generateUrlHelpFunction = /**
         * @private
         * @param {?} helpUrl
         * @return {?}
         */
        function (helpUrl) {
            return (/**
             * @return {?}
             */
            function () { window.open(helpUrl, '_blank'); });
        };
        /**
         * @private
         * @param {?} errorResponse
         * @param {?} notificationMessage
         * @return {?}
         */
        ThfHttpInterceptorBaseService.prototype.generateDialogDetailFunction = /**
         * @private
         * @param {?} errorResponse
         * @param {?} notificationMessage
         * @return {?}
         */
        function (errorResponse, notificationMessage) {
            var _this = this;
            return (/**
             * @return {?}
             */
            function () {
                _this.dialog.alert({
                    title: errorResponse.code,
                    message: notificationMessage,
                    ok: errorResponse.helpUrl ? _this.generateUrlHelpFunction(errorResponse.helpUrl) : undefined
                });
            });
        };
        return ThfHttpInterceptorBaseService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfHttpInterceptorBaseService
     *
     * \@example
     * <example name='thf-http-interceptor-labs' title='Totvs Http Interceptor Labs'>
     *  <file name='sample-thf-http-interceptor-labs.component.ts'> </file>
     *  <file name='sample-thf-http-interceptor-labs.component.html'> </file>
     * </example>
     */
    var ThfHttpInterceptorService = /** @class */ (function (_super) {
        __extends(ThfHttpInterceptorService, _super);
        function ThfHttpInterceptorService(notification, dialog) {
            return _super.call(this, notification, dialog) || this;
        }
        ThfHttpInterceptorService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfHttpInterceptorService.ctorParameters = function () { return [
            { type: ThfNotificationService },
            { type: ThfDialogService }
        ]; };
        return ThfHttpInterceptorService;
    }(ThfHttpInterceptorBaseService));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfHttpInterceptorModule = /** @class */ (function () {
        function ThfHttpInterceptorModule() {
        }
        ThfHttpInterceptorModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            ThfHttpInterceptorService,
                            ThfDialogService,
                            ThfNotificationService,
                            {
                                provide: http.HTTP_INTERCEPTORS,
                                useClass: ThfHttpInterceptorService,
                                multi: true
                            }
                        ]
                    },] }
        ];
        return ThfHttpInterceptorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * Serviço responsável por efetuar o controle de interação com o serviço de interceptor `ThfHttpRequestInterceptorService`
     * gerenciando o seu estado.
     */
    var ThfHttpRequesControltService = /** @class */ (function () {
        function ThfHttpRequesControltService() {
            this.controlHttpRequest = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        ThfHttpRequesControltService.prototype.getControlHttpRequest = /**
         * @return {?}
         */
        function () {
            return this.controlHttpRequest.asObservable();
        };
        /**
         * @param {?=} value
         * @return {?}
         */
        ThfHttpRequesControltService.prototype.send = /**
         * @param {?=} value
         * @return {?}
         */
        function (value) {
            if (value === void 0) { value = 0; }
            this.controlHttpRequest.next(value);
        };
        ThfHttpRequesControltService.decorators = [
            { type: core.Injectable }
        ];
        return ThfHttpRequesControltService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var noCountPendingRequests = 'X-Totvs-No-Count-Pending-Requests';
    /** @type {?} */
    var screenLock = 'X-Totvs-Screen-Lock';
    /**
     * \@description
     *
     * O serviço Totvs Http Request Interceptor realiza a contabilização de requisições pendentes na aplicação.
     *
     * Existe a possibilidade de não efetuar a contabilização das requisições pendentes, utilizando o parâmetro
     * `X-Totvs-No-Count-Pending-Requests`. Para isso deve ser informado no cabeçalho da requisição com o valor `'true'`,
     * por exemplo:
     *
     * ```
     * ...
     *  const headers = { 'X-Totvs-No-Count-Pending-Requests': 'true' };
     *
     *  this.http.get(`/customers/1`, { headers: headers });
     * ...
     *
     * ```
     * Para obter a quantidade de requisições pendentes, deve inscrever-se no método `getCountPendingRequests` do
     * serviço `ThfHttpRequestInterceptorService`, com isso, ao realizar requisições utilizando `HttpClient`,
     * será retornado a quantidade de requisições pendentes.
     *
     * Também existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisição
     * deve-se passar o parâmetro `X-Totvs-Screen-Lock` no cabeçalho da requisição com valor `'true'`.
     *
     * por exemplo:
     *
     * ```
     * ...
     *  const headers = { 'X-Totvs-Screen-Lock': 'true' };
     *
     *  this.http.get(`/customers/1`, { headers: headers });
     * ...
     *
     * ```
     * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
     *
     * Ao importar o módulo `ThfModule` na aplicação, o `thf-http-request-interceptor` é automaticamente configurado sem a necessidade
     * de qualquer configuração extra.
     *
     *
     * Segue abaixo um exemplo de uso:
     *
     * ```
     * import { HttpClient } from '\@angular/common/http';
     *
     * ...
     *
     * \@Injectable()
     * export class CustomersService {
     *
     *  headers = { 'X-Totvs-No-Count-Pending-Requests': true, 'X-Totvs-Screen-Lock': 'true' }
     *  pendingRequests: number = 0;
     *  subscription: Subscription;
     *
     *  constructor(
     *    private http: HttpClient,
     *    private httpRequestInterceptor: ThfHttpRequestInterceptorService) { }
     *
     *  ngOnDestroy(): void {
     *    this.subscription.unsubscribe();
     *  }
     *
     *  ngOnInit(): void {
     *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {
     *      this.pendingRequests = data;
     *    });
     *  }
     *
     *  getCustomers() {
     *    return this.http.get(`/customers/1`, { headers: headers });
     *  }
     *
     *  ...
     *
     * }
     * ```
     *
     * \@example
     * <example name='thf-http-request-interceptor-labs' title='Totvs Http Request Interceptor Labs'>
     *  <file name='sample-thf-http-request-interceptor-labs.component.ts'> </file>
     *  <file name='sample-thf-http-request-interceptor-labs.component.html'> </file>
     * </example>
     */
    var ThfHttpRequestInterceptorService = /** @class */ (function () {
        function ThfHttpRequestInterceptorService(controlHttpRequest, thfComponentInjector) {
            this.controlHttpRequest = controlHttpRequest;
            this.thfComponentInjector = thfComponentInjector;
            this.loadingOverlayComponent = undefined;
            this.pendingRequests = 0;
            this.overlayRequests = 0;
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        ThfHttpRequestInterceptorService.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        function (request, next) {
            var _this = this;
            /** @type {?} */
            var requestClone = request.clone();
            request = this.requestCloneWithoutHeaderParam([noCountPendingRequests, screenLock], request);
            this.setCountPendingRequests(true, requestClone);
            this.setCountOverlayRequests(true, requestClone);
            return next.handle(request).pipe(operators.tap((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response instanceof http.HttpResponse) {
                    _this.setCountPendingRequests(false, requestClone);
                    _this.setCountOverlayRequests(false, requestClone);
                }
            })), operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.setCountPendingRequests(false, requestClone);
                _this.setCountOverlayRequests(false, requestClone);
                return rxjs.throwError(error);
            })));
        };
        /**
         * @return {?}
         */
        ThfHttpRequestInterceptorService.prototype.getCountPendingRequests = /**
         * @return {?}
         */
        function () {
            return this.controlHttpRequest.getControlHttpRequest();
        };
        /**
         * @private
         * @return {?}
         */
        ThfHttpRequestInterceptorService.prototype.buildLoading = /**
         * @private
         * @return {?}
         */
        function () {
            if (!this.loadingOverlayComponent) {
                this.loadingOverlayComponent = this.thfComponentInjector.createComponentInApplication(ThfLoadingOverlayComponent);
                this.loadingOverlayComponent.instance.screenLock = true;
                this.loadingOverlayComponent.instance.changeDetector.detectChanges();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfHttpRequestInterceptorService.prototype.destroyLoading = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.loadingOverlayComponent) {
                this.thfComponentInjector.destroyComponentInApplication(this.loadingOverlayComponent);
                this.loadingOverlayComponent = undefined;
            }
        };
        /**
         * @private
         * @param {?} headersParams
         * @param {?} request
         * @return {?}
         */
        ThfHttpRequestInterceptorService.prototype.requestCloneWithoutHeaderParam = /**
         * @private
         * @param {?} headersParams
         * @param {?} request
         * @return {?}
         */
        function (headersParams, request) {
            /** @type {?} */
            var isRequestClone = false;
            headersParams.forEach((/**
             * @param {?} headerParam
             * @return {?}
             */
            function (headerParam) {
                if (request.headers.has(headerParam)) {
                    request.headers.delete(headerParam);
                    isRequestClone = true;
                }
            }));
            return isRequestClone ? request.clone({ headers: request.headers }) : request;
        };
        /**
         * @private
         * @param {?} isIncrement
         * @param {?} request
         * @return {?}
         */
        ThfHttpRequestInterceptorService.prototype.setCountPendingRequests = /**
         * @private
         * @param {?} isIncrement
         * @param {?} request
         * @return {?}
         */
        function (isIncrement, request) {
            /** @type {?} */
            var hasCountPendingRequestHeaderParam = request.headers.has(noCountPendingRequests);
            /** @type {?} */
            var headerParam = request.headers.get(noCountPendingRequests);
            if (hasCountPendingRequestHeaderParam && (headerParam.toString().toLowerCase() === 'true')) {
                return;
            }
            this.pendingRequests += isIncrement ? 1 : -1;
            this.controlHttpRequest.send(this.pendingRequests);
        };
        /**
         * @private
         * @param {?} isIncrement
         * @param {?} request
         * @return {?}
         */
        ThfHttpRequestInterceptorService.prototype.setCountOverlayRequests = /**
         * @private
         * @param {?} isIncrement
         * @param {?} request
         * @return {?}
         */
        function (isIncrement, request) {
            /** @type {?} */
            var hasOverlayRequestHeaderParam = request.headers.has(screenLock);
            if (hasOverlayRequestHeaderParam) {
                /** @type {?} */
                var headerParam = request.headers.get(screenLock);
                if (headerParam.toString().toLowerCase() === 'false') {
                    return;
                }
                this.overlayRequests += isIncrement ? 1 : -1;
                this.overlayRequests > 0 ? this.buildLoading() : this.destroyLoading();
            }
        };
        ThfHttpRequestInterceptorService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ThfHttpRequestInterceptorService.ctorParameters = function () { return [
            { type: ThfHttpRequesControltService },
            { type: ThfComponentInjectorService }
        ]; };
        /** @nocollapse */ ThfHttpRequestInterceptorService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ThfHttpRequestInterceptorService_Factory() { return new ThfHttpRequestInterceptorService(core.ɵɵinject(ThfHttpRequesControltService), core.ɵɵinject(ThfComponentInjectorService)); }, token: ThfHttpRequestInterceptorService, providedIn: "root" });
        return ThfHttpRequestInterceptorService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfHttpRequestModule = /** @class */ (function () {
        function ThfHttpRequestModule() {
        }
        ThfHttpRequestModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            ThfHttpRequesControltService,
                            ThfHttpRequestInterceptorService,
                            ThfComponentInjectorService,
                            {
                                provide: http.HTTP_INTERCEPTORS,
                                useClass: ThfHttpRequestInterceptorService,
                                multi: true
                            }
                        ],
                        entryComponents: [ThfLoadingOverlayComponent, ThfLoadingComponent]
                    },] }
        ];
        return ThfHttpRequestModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfInterceptorsModule = /** @class */ (function () {
        function ThfInterceptorsModule() {
        }
        ThfInterceptorsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [],
                        imports: [
                            ThfHttpInterceptorModule,
                            ThfHttpRequestModule
                        ],
                        exports: [
                            ThfHttpInterceptorModule,
                            ThfHttpRequestModule
                        ],
                        providers: [],
                        bootstrap: []
                    },] }
        ];
        return ThfInterceptorsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPipesModule = /** @class */ (function () {
        function ThfPipesModule() {
        }
        ThfPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [],
                        imports: [
                            ThfTimeModule
                        ],
                        exports: [
                            ThfTimeModule
                        ],
                        providers: [],
                        bootstrap: []
                    },] }
        ];
        return ThfPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do serviço `thf-color-palette`.
     */
    var ThfColorPaletteModule = /** @class */ (function () {
        function ThfColorPaletteModule() {
        }
        ThfColorPaletteModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            ThfColorPaletteService
                        ],
                        bootstrap: []
                    },] }
        ];
        return ThfColorPaletteModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfComponentInjectorModule = /** @class */ (function () {
        function ThfComponentInjectorModule() {
        }
        ThfComponentInjectorModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [],
                        imports: [],
                        exports: [],
                        providers: [
                            ThfComponentInjectorService
                        ],
                        bootstrap: []
                    },] }
        ];
        return ThfComponentInjectorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do serviço thf-control-position.
     */
    var ThfControlPositionModule = /** @class */ (function () {
        function ThfControlPositionModule() {
        }
        ThfControlPositionModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            ThfControlPositionService
                        ]
                    },] }
        ];
        return ThfControlPositionModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do serviço `thf-date`.
     */
    var ThfDateTimeModule = /** @class */ (function () {
        function ThfDateTimeModule() {
        }
        ThfDateTimeModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            ThfDateService
                        ],
                        bootstrap: []
                    },] }
        ];
        return ThfDateTimeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfDialogModule = /** @class */ (function () {
        function ThfDialogModule() {
        }
        ThfDialogModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ThfDialogComponent
                        ],
                        imports: [
                            ThfModalModule
                        ],
                        exports: [
                            ThfDialogComponent
                        ],
                        entryComponents: [
                            ThfDialogComponent
                        ],
                        providers: [
                            ThfDialogService
                        ]
                    },] }
        ];
        return ThfDialogModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O pipe thf-i18n é responsável por tratar literais parâmetrizadas, dando mais flexibilidade as literais de tradução.
     * O número de parâmetros inseridos nas literais deve coincidir com a quantia de parâmetros passados por parâmetro,
     * os parâmetros serão substituidos de acordo com a ordem informada.
     *
     * Para inserir um parâmetro em uma literal, o mesmo deverá ser inserido entre chaves dentro da literal e posicionado
     * de acordo como deve ser exibido após a sua transformação.
     *
     * ```
     * const i18nPT = {
     *   pagination: 'Página {1} de {2} páginas.',
     *   totalPages: 'Total de {totalPages} encontradas.'
     * };
     * ```
     *
     * É possível passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem
     * informada na literal.
     *
     * ```
     * {{ i18nPT.pagination | thfI18n:[1,10] }}
     * {{ i18nPT.totalPages | thfI18n:10 }}
     * ```
     */
    var   /**
     * \@description
     *
     * O pipe thf-i18n é responsável por tratar literais parâmetrizadas, dando mais flexibilidade as literais de tradução.
     * O número de parâmetros inseridos nas literais deve coincidir com a quantia de parâmetros passados por parâmetro,
     * os parâmetros serão substituidos de acordo com a ordem informada.
     *
     * Para inserir um parâmetro em uma literal, o mesmo deverá ser inserido entre chaves dentro da literal e posicionado
     * de acordo como deve ser exibido após a sua transformação.
     *
     * ```
     * const i18nPT = {
     *   pagination: 'Página {1} de {2} páginas.',
     *   totalPages: 'Total de {totalPages} encontradas.'
     * };
     * ```
     *
     * É possível passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem
     * informada na literal.
     *
     * ```
     * {{ i18nPT.pagination | thfI18n:[1,10] }}
     * {{ i18nPT.totalPages | thfI18n:10 }}
     * ```
     */
    ThfI18nBasePipe = /** @class */ (function () {
        function ThfI18nBasePipe() {
        }
        /**
         * @param {?} value
         * @param {?} args
         * @return {?}
         */
        ThfI18nBasePipe.prototype.transform = /**
         * @param {?} value
         * @param {?} args
         * @return {?}
         */
        function (value, args) {
            var e_1, _a;
            if (!value) {
                return '';
            }
            if (!(args instanceof Array)) {
                args = [args];
            }
            try {
                for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
                    var arg = args_1_1.value;
                    value = value.replace(/(\{\w*\})+/, arg);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return value;
        };
        return ThfI18nBasePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfI18nBasePipe
     *
     * \@example
     * <example name='thf-i18n-pipe-labs' title='Totvs i18n Pipe Labs' >
     *  <file name='sample-thf-i18n-pipe-labs.component.html'> </file>
     *  <file name='sample-thf-i18n-pipe-labs.component.ts'> </file>
     *  <file name='sample-thf-i18n-pipe.component.html'> </file>
     *  <file name='sample-thf-i18n-pipe.component.ts'> </file>
     * </example>
     */
    var ThfI18nPipe = /** @class */ (function (_super) {
        __extends(ThfI18nPipe, _super);
        function ThfI18nPipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ThfI18nPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'thfI18n'
                    },] }
        ];
        return ThfI18nPipe;
    }(ThfI18nBasePipe));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfNotificationModule = /** @class */ (function () {
        function ThfNotificationModule() {
        }
        ThfNotificationModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ThfToasterComponent
                        ],
                        imports: [
                            common.CommonModule
                        ],
                        exports: [],
                        entryComponents: [
                            ThfToasterComponent
                        ],
                        providers: [],
                        bootstrap: []
                    },] }
        ];
        return ThfNotificationModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfServicesModule = /** @class */ (function () {
        function ThfServicesModule() {
        }
        ThfServicesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ThfI18nPipe
                        ],
                        imports: [
                            ThfColorPaletteModule,
                            ThfComponentInjectorModule,
                            ThfControlPositionModule,
                            ThfDateTimeModule,
                            ThfDialogModule,
                            ThfLanguageModule,
                            ThfNotificationModule
                        ],
                        exports: [
                            ThfColorPaletteModule,
                            ThfComponentInjectorModule,
                            ThfControlPositionModule,
                            ThfDateTimeModule,
                            ThfDialogModule,
                            ThfI18nPipe,
                            ThfNotificationModule
                        ],
                        providers: [],
                        bootstrap: []
                    },] }
        ];
        return ThfServicesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfModule = /** @class */ (function () {
        function ThfModule() {
        }
        ThfModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [],
                        imports: [
                            ThfComponentsModule,
                            ThfDirectivesModule,
                            ThfGuardsModule,
                            ThfInterceptorsModule,
                            ThfPipesModule,
                            ThfServicesModule
                        ],
                        exports: [
                            ThfComponentsModule,
                            ThfDirectivesModule,
                            ThfInterceptorsModule,
                            ThfGuardsModule,
                            ThfPipesModule,
                            ThfServicesModule
                        ],
                        providers: [ThfNotificationService],
                        bootstrap: []
                    },] }
        ];
        return ThfModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var I18N_CONFIG = new core.InjectionToken('I18N_CONFIG');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O serviço `ThfI18nService` possibilita utilizar múltiplos idiomas e contextos na aplicação.
     *
     * > Antes da utilização do serviço, é necessário realizar a
     * [importação e configuração do módulo `ThfI18nModule`](/documentation/thf-i18n#i18n-config).
     *
     * **Utilização do serviço `ThfI18nService`:**
     *
     * Para utilizar o serviço basta importá-lo nos componentes que necessitarem de literais e fazer a injeção de
     * dependência no construtor:
     * ```
     *  import { ThfI18nService } from '\@totvs/thf-ui';
     *  ...
     *  constructor(private thfI18nService: ThfI18nService) { }
     *  ...
     * ```
     *
     * Por fim realizar a busca pelas literais, inscrevendo-se no [Observable](https://angular.io/guide/observables) pelo
     * método `getLiterals()`.
     *
     * > O método `getLiterals()` pode receber um objeto do tipo da interface `ThfI18nLiterals` como parâmetro,
     * porém, nenhuma das propriedades são obrigatórias. Caso nenhum parâmetro seja passado, serão buscadas
     * todas as literais do contexto definido com padrão, no idioma definido como padrão.
     *
     * Exemplos de requisição:
     * ```
     * literals = {};
     * literalsEn = {};
     * literalsCrm = {};
     *
     * constructor(private thfI18nService: ThfI18nService) {
     *   thfI18nService.getLiterals()
     *     .subscribe((literals) => {
     *       this.literals = literals;
     *     });
     *
     *   thfI18nService.getLiterals({context: 'crm', literals: ['add', 'remove']})
     *     .subscribe((literals) => {
     *       this.literalsCrm = literals;
     *     });
     *
     *   thfI18nService.getLiterals({language: 'en-us'})
     *     .subscribe((literals) => {
     *       this.literalsEn = literals;
     *     });
     * }
     * ```
     *
     * Para apresentar as literais capturadas acima no HTML do componente, deve-se utilizar o
     * seguinte código:
     *
     * <pre ngNonBindable>
     * {{ literals?.add }}
     * {{ literals?.remove }}
     * </pre>
     *
     * Caso as literais contenham variáveis que precisem ser substituídas, pode-se utilizar o *pipe* `thfI18n`.
     * É possível informar propriedades do componente como `name` e `nickname` ou
     * informar o valor diretamente com "" ou número, conforme o exemplo abaixo:
     *
     * <pre ngNonBindable>
     * {{ literals?.people | thfI18n:[120] }}
     * {{ literals?.greeting | thfI18n:[name, nickname] }}
     * {{ literals?.greeting | thfI18n:["Brad", "Green"] }}
     * </pre>
     *
     * > É importante o uso do operador `?` (Elvis) para evitar erros enquanto as literais não forem carregadas.
     *
     * ### Teste unitário
     *
     * Abaixo segue um exemplo de *setup* inicial de teste unitário do *AppComponent* que utiliza o `ThfI18nService`:
     *
     * ```
     * import { async, TestBed } from '\@angular/core/testing';
     * import { HttpClientTestingModule } from '\@angular/common/http/testing';
     *
     * import { ThfI18nModule } from '\@totvs/thf-ui';
     *
     * import { AppComponent } from './app.component';
     *
     * describe('AppComponent', () => {
     *   const anotherPT = {
     *     text: 'texto',
     *     add: 'adicionar',
     *     remove: 'remover'
     *   };
     *
     *   const generalPT = {
     *     text: 'texto',
     *     add: 'adicionar',
     *     remove: 'remover'
     *   };
     *
     *   const config = {
     *     default: {
     *       language: 'pt-BR',
     *       context: 'general',
     *       cache: false
     *     },
     *     contexts: {
     *       general: {
     *         'pt-br': generalPT
     *       },
     *       another: {
     *         'pt-br': anotherPT
     *       }
     *     }
     *   };
     *
     *   beforeEach(async(() => {
     *     TestBed.configureTestingModule({
     *       declarations: [
     *         AppComponent
     *       ],
     *       imports: [
     *         HttpClientTestingModule,
     *         ThfI18nModule.config(config)
     *       ]
     *     }).compileComponents();
     *   }));
     *
     *   it('should create the app', async(() => {
     *     const fixture = TestBed.createComponent(AppComponent);
     *     const app = fixture.debugElement.componentInstance;
     *
     *     expect(app).toBeTruthy();
     *   }));
     *
     * });
     * ```
     */
    var ThfI18nBaseService = /** @class */ (function () {
        function ThfI18nBaseService(config, http, languageService) {
            this.config = config;
            this.http = http;
            this.languageService = languageService;
            this.varI18n = {};
            this.useCache = false;
            this.servicesContext = {};
            this.setConfig(config);
        }
        /**
         * <a id="get-language"></a>
         * Método que retorna o idioma padrão ativo.
         *
         * A busca deste idioma pelo método será feita na seguinte ordem:
         *
         *   1 - o idioma que foi armazenado no *localStorage*, através do método [`setLanguage()`](documentation/thf-i18n#setLanguage).
         *
         *   2 - o valor inserido no módulo do i18n através do parâmetro `config`, sendo o idioma inserido na propriedade
         * `language` da interface [`ThfI18nConfigDefault`](documentation/thf-i18n#thfI18nConfigDefault).
         *
         *   3 - o idioma do navegador utilizado.
         *
         * > Caso o idioma do navegador não seja suportado pelo THF (`pt`, `en` ou `es`), será retornado valor `pt`.
         *
         * **Retorno:**
         *
         * `string` com a sigla do idioma padrão.
         */
        /**
         * <a id="get-language"></a>
         * Método que retorna o idioma padrão ativo.
         *
         * A busca deste idioma pelo método será feita na seguinte ordem:
         *
         *   1 - o idioma que foi armazenado no *localStorage*, através do método [`setLanguage()`](documentation/thf-i18n#setLanguage).
         *
         *   2 - o valor inserido no módulo do i18n através do parâmetro `config`, sendo o idioma inserido na propriedade
         * `language` da interface [`ThfI18nConfigDefault`](documentation/thf-i18n#thfI18nConfigDefault).
         *
         *   3 - o idioma do navegador utilizado.
         *
         * > Caso o idioma do navegador não seja suportado pelo THF (`pt`, `en` ou `es`), será retornado valor `pt`.
         *
         * **Retorno:**
         *
         * `string` com a sigla do idioma padrão.
         * @return {?}
         */
        ThfI18nBaseService.prototype.getLanguage = /**
         * <a id="get-language"></a>
         * Método que retorna o idioma padrão ativo.
         *
         * A busca deste idioma pelo método será feita na seguinte ordem:
         *
         *   1 - o idioma que foi armazenado no *localStorage*, através do método [`setLanguage()`](documentation/thf-i18n#setLanguage).
         *
         *   2 - o valor inserido no módulo do i18n através do parâmetro `config`, sendo o idioma inserido na propriedade
         * `language` da interface [`ThfI18nConfigDefault`](documentation/thf-i18n#thfI18nConfigDefault).
         *
         *   3 - o idioma do navegador utilizado.
         *
         * > Caso o idioma do navegador não seja suportado pelo THF (`pt`, `en` ou `es`), será retornado valor `pt`.
         *
         * **Retorno:**
         *
         * `string` com a sigla do idioma padrão.
         * @return {?}
         */
        function () {
            return this.languageService.getLanguage();
        };
        /**
         * Método que retorna o idioma padrão ativo, com somente a abreviação do idioma (duas primeiras letras).
         * Por exemplo: "pt" ou "es".
         *
         * A busca deste idioma é baseada no método [**getLanguage()**](/documentation/thf-i18n#get-language).
         *
         * **Retorno:**
         *
         * `string` com a sigla do idioma padrão.
         */
        /**
         * Método que retorna o idioma padrão ativo, com somente a abreviação do idioma (duas primeiras letras).
         * Por exemplo: "pt" ou "es".
         *
         * A busca deste idioma é baseada no método [**getLanguage()**](/documentation/thf-i18n#get-language).
         *
         * **Retorno:**
         *
         * `string` com a sigla do idioma padrão.
         * @return {?}
         */
        ThfI18nBaseService.prototype.getShortLanguage = /**
         * Método que retorna o idioma padrão ativo, com somente a abreviação do idioma (duas primeiras letras).
         * Por exemplo: "pt" ou "es".
         *
         * A busca deste idioma é baseada no método [**getLanguage()**](/documentation/thf-i18n#get-language).
         *
         * **Retorno:**
         *
         * `string` com a sigla do idioma padrão.
         * @return {?}
         */
        function () {
            return this.languageService.getShortLanguage();
        };
        /**
         * <a id="setLanguage"></a>
         * Método para alterar o idioma padrão do módulo do i18n.
         *
         * Ao utilizar este método, o idioma ficará gravado no armazenamento local do navegador, que será utilizado pelo
         * serviço do `i18n` para buscar as literais no idioma padrão.
         *
         * @param language {string} Sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma,
         * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         *
         * @param reload {boolean} Indica se a página atual poderá ser recarregada após a alteração do idioma.
         *
         * Este recurso pode ser útil para os usuários que utilizam o método `getLiterals()` do serviço do i18n para poder
         * buscar novamente as literais no novo idioma configurado.
         */
        /**
         * <a id="setLanguage"></a>
         * Método para alterar o idioma padrão do módulo do i18n.
         *
         * Ao utilizar este método, o idioma ficará gravado no armazenamento local do navegador, que será utilizado pelo
         * serviço do `i18n` para buscar as literais no idioma padrão.
         *
         * @param {?} language {string} Sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma,
         * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         *
         * @param {?=} reload {boolean} Indica se a página atual poderá ser recarregada após a alteração do idioma.
         *
         * Este recurso pode ser útil para os usuários que utilizam o método `getLiterals()` do serviço do i18n para poder
         * buscar novamente as literais no novo idioma configurado.
         * @return {?}
         */
        ThfI18nBaseService.prototype.setLanguage = /**
         * <a id="setLanguage"></a>
         * Método para alterar o idioma padrão do módulo do i18n.
         *
         * Ao utilizar este método, o idioma ficará gravado no armazenamento local do navegador, que será utilizado pelo
         * serviço do `i18n` para buscar as literais no idioma padrão.
         *
         * @param {?} language {string} Sigla do idioma.
         *
         * Esta sigla deve ser composta por duas letras representando o idioma,
         * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
         *
         * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
         *
         * @param {?=} reload {boolean} Indica se a página atual poderá ser recarregada após a alteração do idioma.
         *
         * Este recurso pode ser útil para os usuários que utilizam o método `getLiterals()` do serviço do i18n para poder
         * buscar novamente as literais no novo idioma configurado.
         * @return {?}
         */
        function (language, reload) {
            if (!isLanguage(language)) {
                return;
            }
            this.languageService.setLanguage(language);
            if (reload) {
                reloadCurrentPage();
            }
        };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        ThfI18nBaseService.prototype.setConfig = /**
         * @private
         * @param {?} config
         * @return {?}
         */
        function (config) {
            // Seta as configurações padrões definidas no importação do módulo
            if (config['default']) {
                this.languageService.setLanguageDefault(config['default']['language']);
                this.contextDefault = (config['default']['context']) ? config['default']['context'] : '';
                this.useCache = (config['default']['cache']) ? config['default']['cache'] : false;
            }
            // Carrega a lista dos contextos e as contantes informadas
            if (config['contexts']) {
                this.setVarI18n(config['contexts']);
                // Se nenhum contexto foi definido como padrão,
                // então define o primeiro contexto
                if (!this.contextDefault) {
                    for (var context in config['contexts']) {
                        if (this.config['contexts'].hasOwnProperty(context)) {
                            this.contextDefault = context;
                            break;
                        }
                    }
                }
            }
        };
        /**
         * @param {?=} options
         * @return {?}
         */
        ThfI18nBaseService.prototype.getLiterals = /**
         * @param {?=} options
         * @return {?}
         */
        function (options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            /** @type {?} */
            var language = options['language'] ? options['language'].toLowerCase() : this.getLanguage();
            /** @type {?} */
            var context = (options['context']) ? options['context'] : this.contextDefault;
            /** @type {?} */
            var literals = (options['literals']) ? options['literals'] : [];
            return new rxjs.Observable((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                if (_this.servicesContext[context]) {
                    // Faz o processo de busca de um contexto que contém serviço
                    _this.getLiteralsFromContextService(language, context, literals, observer);
                }
                else {
                    // Faz o processo de busca de um contexto que utiliza constante
                    _this.getLiteralsFromContextConstant(language, context, literals, observer);
                }
            }));
        };
        // Processo de busca de um contexto que contém serviço.
        //    1 - Procura na variável I18n deste serviço
        //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
        //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
        //    4 - Se nenhuma literal for encontrada, então busca em pt-br
        // Processo de busca de um contexto que contém serviço.
        //    1 - Procura na variável I18n deste serviço
        //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
        //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
        //    4 - Se nenhuma literal for encontrada, então busca em pt-br
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} literals
         * @param {?} observer
         * @param {?=} translations
         * @param {?=} languageAlternative
         * @return {?}
         */
        ThfI18nBaseService.prototype.getLiteralsFromContextService = 
        // Processo de busca de um contexto que contém serviço.
        //    1 - Procura na variável I18n deste serviço
        //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
        //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
        //    4 - Se nenhuma literal for encontrada, então busca em pt-br
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} literals
         * @param {?} observer
         * @param {?=} translations
         * @param {?=} languageAlternative
         * @return {?}
         */
        function (language, context, literals, observer, translations, languageAlternative) {
            if (translations === void 0) { translations = {}; }
            if (languageAlternative === void 0) { languageAlternative = null; }
            // Idioma usado para tentar buscar as literais faltantes
            /** @type {?} */
            var languageSearch = (languageAlternative) ? languageAlternative : language;
            translations = this.mergeObject(translations, this.searchInVarI18n(languageSearch, context, literals));
            if (this.countObject(translations) > 0) {
                observer.next(translations);
            }
            // realiza a busca no localStorage e em seguida no serviço
            this.getLiteralsLocalStorageAndCache(languageSearch, context, literals, observer, translations, languageAlternative);
        };
        // Procura no local storage e em seguida no serviço
        // Caso não encontre nem no serviço, recomeça a busca em pt-br
        // Procura no local storage e em seguida no serviço
        // Caso não encontre nem no serviço, recomeça a busca em pt-br
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} literals
         * @param {?} observer
         * @param {?} translations
         * @param {?=} languageAlternative
         * @return {?}
         */
        ThfI18nBaseService.prototype.getLiteralsLocalStorageAndCache = 
        // Procura no local storage e em seguida no serviço
        // Caso não encontre nem no serviço, recomeça a busca em pt-br
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} literals
         * @param {?} observer
         * @param {?} translations
         * @param {?=} languageAlternative
         * @return {?}
         */
        function (language, context, literals, observer, translations, languageAlternative) {
            var _this = this;
            if (languageAlternative === void 0) { languageAlternative = null; }
            /** @type {?} */
            var languageSearch = (languageAlternative) ? languageAlternative : language;
            /** @type {?} */
            var translationTemp;
            // Verifica se usa cache
            if (this.useCache) {
                translationTemp = this.searchInLocalStorage(languageSearch, context, literals);
                if (this.countObject(translationTemp) > 0) {
                    this.updateVarI18n(language, context, translationTemp);
                    translations = this.mergeObject(translationTemp, translations);
                    observer.next(translations);
                }
            }
            // Busca do Serviço
            this.getHttpService(this.servicesContext[context], languageSearch, literals)
                .subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response) {
                    _this.updateLocalStorage(language, context, response);
                    _this.updateVarI18n(language, context, response);
                    translationTemp = _this.searchInVarI18n(language, context, literals);
                    translations = _this.mergeObject(translationTemp, translations);
                    observer.next(translations);
                }
                // Se não encontrou todas as literais pesquisadas no idioma
                // Então refaz o processo procurando em português
                if (literals.length > _this.countObject(translations)) {
                    if (languageAlternative === 'pt-br') {
                        // Se não encontrou nem em português, então retorna o nome das literais
                        translations = _this.completeFaultLiterals(language, context, literals, translations);
                        _this.updateLocalStorage(language, context, translations);
                        _this.updateVarI18n(language, context, translations);
                        observer.next(translations);
                    }
                    else {
                        _this.getLiteralsFromContextService(language, context, literals, observer, translations, 'pt-br');
                    }
                }
            }));
        };
        // Procura pela lista de literais
        // Se não encontrar todas, procura em pt-br
        // Procura pela lista de literais
        // Se não encontrar todas, procura em pt-br
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} literals
         * @param {?} observer
         * @param {?=} translations
         * @return {?}
         */
        ThfI18nBaseService.prototype.getLiteralsFromContextConstant = 
        // Procura pela lista de literais
        // Se não encontrar todas, procura em pt-br
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} literals
         * @param {?} observer
         * @param {?=} translations
         * @return {?}
         */
        function (language, context, literals, observer, translations) {
            if (translations === void 0) { translations = {}; }
            translations = this.mergeObject(translations, this.searchInVarI18n(language, context, literals));
            if (this.countObject(translations) > 0) {
                observer.next(translations);
            }
            // Se foi pesquisado por literais
            if (literals.length > 0) {
                // Se não encontrou todas as literais pesquisadas no idioma, procura em português
                if (literals.length > this.countObject(translations)) {
                    if (language === 'pt-br') {
                        // Se não encontrou nem em português, então retorna o nome das literais
                        translations = this.completeFaultLiterals(language, context, literals, translations);
                        observer.next(translations);
                    }
                    else {
                        this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
                    }
                }
            }
            else {
                // Se não encontrar nenhuma literal, procura em português
                if (this.countObject(translations) === 0 && language !== 'pt-br') {
                    this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
                }
                // caso não informar literais e não houver tradução
                observer.next(translations);
                observer.complete();
            }
        };
        // Busca pelas literais no local storage
        // Busca pelas literais no local storage
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} literals
         * @return {?}
         */
        ThfI18nBaseService.prototype.searchInLocalStorage = 
        // Busca pelas literais no local storage
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} literals
         * @return {?}
         */
        function (language, context, literals) {
            /** @type {?} */
            var translations = {};
            if (literals.length > 0) {
                for (var i = 0; i < literals.length; i++) {
                    /** @type {?} */
                    var literal = literals[i];
                    /** @type {?} */
                    var translation = localStorage.getItem(language + '-' + context + '-' + literal);
                    if (translation) {
                        translations[literal] = translation;
                    }
                }
            }
            return translations;
        };
        // Busca pelas literais na variável do serviço
        // Busca pelas literais na variável do serviço
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} literals
         * @return {?}
         */
        ThfI18nBaseService.prototype.searchInVarI18n = 
        // Busca pelas literais na variável do serviço
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} literals
         * @return {?}
         */
        function (language, context, literals) {
            /** @type {?} */
            var translations = {};
            if (this.varI18n[language] && this.varI18n[language][context]) {
                /** @type {?} */
                var content = this.varI18n[language][context];
                if (literals.length > 0) {
                    // Busca as literais desejadas
                    for (var i = 0; i < literals.length; i++) {
                        /** @type {?} */
                        var literal = literals[i];
                        if (content.hasOwnProperty(literal)) {
                            translations[literal] = content[literal];
                        }
                    }
                }
                else {
                    // Atribui todas as literais
                    translations = __assign({}, content);
                }
            }
            return translations;
        };
        // Atualiza o local storage
        // Atualiza o local storage
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} data
         * @return {?}
         */
        ThfI18nBaseService.prototype.updateLocalStorage = 
        // Atualiza o local storage
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} data
         * @return {?}
         */
        function (language, context, data) {
            if (this.useCache) {
                for (var literal in data) {
                    if (data.hasOwnProperty(literal)) {
                        localStorage.setItem(language + '-' + context + '-' + literal, data[literal]);
                    }
                }
            }
        };
        // Atualiza a variável local com as literais com os objetos passados na configuração
        // Atualiza a variável local com as literais com os objetos passados na configuração
        /**
         * @private
         * @param {?} contexts
         * @return {?}
         */
        ThfI18nBaseService.prototype.setVarI18n = 
        // Atualiza a variável local com as literais com os objetos passados na configuração
        /**
         * @private
         * @param {?} contexts
         * @return {?}
         */
        function (contexts) {
            // Percorre os contextos
            for (var context in contexts) {
                if (contexts.hasOwnProperty(context)) {
                    /** @type {?} */
                    var contextContent = contexts[context];
                    // Percorre os idiomas dentro do contexto
                    for (var language in contextContent) {
                        if (contextContent.hasOwnProperty(language)) {
                            /** @type {?} */
                            var languageContent = contextContent[language];
                            if (language === 'url') {
                                this.servicesContext[context] = languageContent;
                            }
                            else {
                                this.updateVarI18n(language, context, languageContent);
                            }
                        }
                    }
                }
            }
        };
        // Atualiza a variável local com as literais idioma e contexto
        // Atualiza a variável local com as literais idioma e contexto
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} data
         * @return {?}
         */
        ThfI18nBaseService.prototype.updateVarI18n = 
        // Atualiza a variável local com as literais idioma e contexto
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} data
         * @return {?}
         */
        function (language, context, data) {
            var _a;
            language = language.toLowerCase();
            if (!this.varI18n[language]) {
                this.varI18n[language] = (_a = {}, _a[context] = {}, _a);
            }
            if (!this.varI18n[language][context]) {
                this.varI18n[language][context] = {};
            }
            // Cria ou atualiza o contexto dentro do storage
            this.varI18n[language][context] = this.mergeObject(data, this.varI18n[language][context]);
        };
        /**
         * @private
         * @param {?} url
         * @param {?} language
         * @param {?} literals
         * @return {?}
         */
        ThfI18nBaseService.prototype.getHttpService = /**
         * @private
         * @param {?} url
         * @param {?} language
         * @param {?} literals
         * @return {?}
         */
        function (url, language, literals) {
            /** @type {?} */
            var param = '?language=' + language;
            if (literals.length > 0) {
                param += '&literals=' + literals.join();
            }
            // Remove a barra final do endereço
            url = (url.lastIndexOf('/') === url.length - 1) ? url.substr(0, url.length - 1) : url;
            return this.http.get(url + param);
        };
        // Completa com o nome da literais, as que não foram encontradas
        // Completa com o nome da literais, as que não foram encontradas
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} literals
         * @param {?} translations
         * @return {?}
         */
        ThfI18nBaseService.prototype.completeFaultLiterals = 
        // Completa com o nome da literais, as que não foram encontradas
        /**
         * @private
         * @param {?} language
         * @param {?} context
         * @param {?} literals
         * @param {?} translations
         * @return {?}
         */
        function (language, context, literals, translations) {
            for (var i = 0; i < literals.length; i++) {
                /** @type {?} */
                var literal = literals[i];
                if (!translations[literal]) {
                    translations[literal] = literal;
                }
            }
            return translations;
        };
        // Conta os atributos do objeto
        // Conta os atributos do objeto
        /**
         * @private
         * @param {?} obj
         * @return {?}
         */
        ThfI18nBaseService.prototype.countObject = 
        // Conta os atributos do objeto
        /**
         * @private
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            return Object.keys(obj).length;
        };
        // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
        // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
        /**
         * @private
         * @param {?} objPermanent
         * @param {?} obj
         * @return {?}
         */
        ThfI18nBaseService.prototype.mergeObject = 
        // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
        /**
         * @private
         * @param {?} objPermanent
         * @param {?} obj
         * @return {?}
         */
        function (objPermanent, obj) {
            return __assign({}, obj, objPermanent);
        };
        /** @nocollapse */
        ThfI18nBaseService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [I18N_CONFIG,] }] },
            { type: http.HttpClient, decorators: [{ type: core.Inject, args: [http.HttpClient,] }] },
            { type: ThfLanguageService }
        ]; };
        return ThfI18nBaseService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfI18nBaseService
     */
    var ThfI18nService = /** @class */ (function (_super) {
        __extends(ThfI18nService, _super);
        function ThfI18nService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ThfI18nService.decorators = [
            { type: core.Injectable }
        ];
        return ThfI18nService;
    }(ThfI18nBaseService));
    // Função usada para retornar instância para o módulo thf-i18n.module
    /**
     * @param {?} config
     * @param {?} http
     * @param {?} languageService
     * @return {?}
     */
    function returnThfI18nService(config, http, languageService) {
        return new ThfI18nService(config, http, languageService);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do serviço `ThfI18nService` para controle de idiomas com THF.
     *
     * Para utilização do serviço de idiomas `ThfI18nService`, deve-se importar este módulo mesmo já havendo importado
     * o módulo `ThfModule`. Na importação deve ser invocado o método `config`, informando um objeto que deve implementar
     * a interface [`ThfI18nConfig`](documentation/thf-i18n#thfI18nConfig) para configuração.
     *
     * <a id="i18n-config"></a>
     * **Exemplo de configuração do módulo do i18n:**
     * ```
     * import { ThfI18nConfig } from '\@totvs/thf-ui';
     *
     * import { generalEn } from './i18n/general-en';
     * import { generalPt } from './i18n/general-pt';
     *
     * const i18nConfig: ThfI18nConfig = {
     *   default: {
     *     language: 'pt-BR',
     *     context: 'general',
     *     cache: true
     *   },
     *   contexts: {
     *     general: {
     *       'pt-BR': generalPt,
     *       'en-US': generalEn
     *     },
     *     hcm: {
     *       url: 'http://10.1.1.1/api/translations/hcm/'
     *     }
     *   }
     * };
     *
     * \@NgModule({
     *   declarations: [],
     *   imports: [
     *     ThfModule,
     *     ThfI18nModule.config(i18nConfig)
     *   ],
     *   bootstrap: [AppComponent]
     * })
     * ```
     *
     * Para cada contexto é possível definir a origem das literais, que podem ser de um serviço REST ou
     * de um objeto. Exemplo:
     *
     * Arquivo general-pt.ts
     * ```
     * export const generalPt = {
     *  add: 'Adicionar',
     *  greeting: 'Prazer, {0} {1}',
     *  people: '{0} Pessoas,
     *  remove: 'Remover'
     * }
     * ```
     *
     * Arquivo general-en.ts
     * ```
     * export const generalEn = {
     *  add: 'Add',
     *  greeting: 'Nice to meet you, {0} {1}',
     *  people: '{0} People,
     *  remove: 'Remove'
     * }
     * ```
     *
     * **Exemplo de configuração de contextos usando constantes externas:**
     * ```
     * import { ThfI18nConfig } from '\@totvs/thf-ui';
     *
     * import { generalEn } from './i18n/general-en';
     * import { generalPt } from './i18n/general-pt';
     *
     * const i18nConfig: ThfI18nConfig = {
     *   contexts: {
     *     general: {
     *       'pt-BR': generalPt, // constantes em arquivos separados
     *       'en-US': generalEn // constantes em arquivos separados
     *     },
     *     crm: {
     *       url: 'http://10.0.0.1:3000/api/translations/crm'
     *     }
     *   },
     *   default: {}
     * }
     * ```
     *
     * **Exemplo de configuração de um contexto utilizando serviço:**
     *
     * Ao optar por utilizar um serviço para configuração de contexto, deverá ser definida a URL
     * específica do contexto, como nos exemplos abaixo:
     *
     *  - http://10.0.0.1:3000/api/translations/crm
     *  - http://10.0.0.1:3000/api/translations/general
     *
     * Os idiomas e literais serão automaticamente buscados com parâmetros na própria URL:
     * - **language**: o idioma será sempre passado por parâmetro e é recomendado utilizar uma das linguagens
     * suportadas pelo THF (`pt-br`, `en-us` ou `es-es`).
     * - **literals**: as literais serão separadas por vírgula. Caso esse parâmetro não seja informado, o
     * serviço deve retornar todas as literais do idioma.
     *
     * Exemplos de requisição:
     *
     *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br
     *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br&literals=add,remove,text
     *
     * > Sempre que o idioma solicitado não for encontrado, será buscado por `pt-br`.
     *
     * Além dos contextos, é possível definir as configurações *default* do sistema na configuração do
     * módulo utilizando a interface [`ThfI18nConfig`](documentation/thf-i18n#thfI18nConfig):
     *
     * **Exemplo de padrões definidos:**
     * ```
     * const i18nConfig: ThfI18nConfig = {
     *   contexts: {
     *     general: { }
     *   },
     *   default: {
     *    language: 'pt-BR',
     *    context: 'general',
     *    cache: true
     *   }
     * }
     * ```
     *
     * **Importante:**
     *
     * Recomenda-se que as definições *default* sejam realizadas apenas uma vez na aplicação,
     * preferencialmente no módulo `AppModule`.
     *
     * **i18n com *Lazy loading***
     *
     * Para aplicações que utilizem a abordagem de módulos com carregamento *lazy loading*, caso seja
     * definida outra configuração do `ThfI18nModule`, deve-se atentar os seguintes detalhes:
     *
     * - Caso existam literais comuns na aplicação, estas devem ser reimportadas;
     * - Não defina outra *default language* para este módulo. Caso for definida, será sobreposta para
     * toda a aplicação;
     * - Caso precise de módulos carregados via *lazy loading* com linguagens diferentes, utilize o
     * método [`setLanguage()`](documentation/thf-i18n#setLanguage) disponibilizado pelo `ThfI18nService`
     * para definir a linguagem da aplicação e dos módulos com as linguagens diferentes.
     */
    var ThfI18nModule = /** @class */ (function () {
        function ThfI18nModule() {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        ThfI18nModule.config = /**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            return {
                ngModule: ThfI18nModule,
                providers: [
                    {
                        provide: I18N_CONFIG,
                        useValue: config
                    },
                    {
                        provide: core.APP_INITIALIZER,
                        useFactory: initializeLanguageDefault,
                        multi: true,
                        deps: [I18N_CONFIG, ThfLanguageService]
                    },
                    {
                        provide: ThfI18nService,
                        useFactory: returnThfI18nService,
                        deps: [I18N_CONFIG, http.HttpClient, ThfLanguageService]
                    }
                ]
            };
        };
        ThfI18nModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            http.HttpClientModule,
                            ThfLanguageModule
                        ]
                    },] }
        ];
        return ThfI18nModule;
    }());
    /**
     * @param {?} config
     * @param {?} languageService
     * @return {?}
     */
    function initializeLanguageDefault(config, languageService) {
        // tslint:disable-next-line:prefer-immediate-return
        /** @type {?} */
        var setDefaultLanguage = (/**
         * @return {?}
         */
        function () {
            if (config.default.language) {
                languageService.setLanguageDefault(config.default.language);
            }
        });
        return setDefaultLanguage;
    }

    exports.ThfAvatarComponent = ThfAvatarComponent;
    exports.ThfAvatarModule = ThfAvatarModule;
    exports.ThfBreadcrumbComponent = ThfBreadcrumbComponent;
    exports.ThfBreadcrumbModule = ThfBreadcrumbModule;
    exports.ThfButtonComponent = ThfButtonComponent;
    exports.ThfButtonGroupComponent = ThfButtonGroupComponent;
    exports.ThfButtonGroupModule = ThfButtonGroupModule;
    exports.ThfButtonGroupToggle = ThfButtonGroupToggle;
    exports.ThfButtonModule = ThfButtonModule;
    exports.ThfCalendarComponent = ThfCalendarComponent;
    exports.ThfCalendarModule = ThfCalendarModule;
    exports.ThfChartComponent = ThfChartComponent;
    exports.ThfChartModule = ThfChartModule;
    exports.ThfChartType = ThfChartType;
    exports.ThfCheckboxGroupComponent = ThfCheckboxGroupComponent;
    exports.ThfComboComponent = ThfComboComponent;
    exports.ThfComboFilterMode = ThfComboFilterMode;
    exports.ThfComponentInjectorModule = ThfComponentInjectorModule;
    exports.ThfComponentInjectorService = ThfComponentInjectorService;
    exports.ThfComponentsModule = ThfComponentsModule;
    exports.ThfContainerComponent = ThfContainerComponent;
    exports.ThfContainerModule = ThfContainerModule;
    exports.ThfDatepickerComponent = ThfDatepickerComponent;
    exports.ThfDatepickerRangeComponent = ThfDatepickerRangeComponent;
    exports.ThfDecimalComponent = ThfDecimalComponent;
    exports.ThfDialogModule = ThfDialogModule;
    exports.ThfDialogService = ThfDialogService;
    exports.ThfDialogType = ThfDialogType;
    exports.ThfDirectivesModule = ThfDirectivesModule;
    exports.ThfDisclaimerGroupComponent = ThfDisclaimerGroupComponent;
    exports.ThfDisclaimerGroupModule = ThfDisclaimerGroupModule;
    exports.ThfDisclaimerModule = ThfDisclaimerModule;
    exports.ThfDividerComponent = ThfDividerComponent;
    exports.ThfDividerModule = ThfDividerModule;
    exports.ThfDropdownComponent = ThfDropdownComponent;
    exports.ThfDropdownModule = ThfDropdownModule;
    exports.ThfDynamicFieldType = ThfDynamicFieldType;
    exports.ThfDynamicFormComponent = ThfDynamicFormComponent;
    exports.ThfDynamicModule = ThfDynamicModule;
    exports.ThfDynamicViewComponent = ThfDynamicViewComponent;
    exports.ThfEmailComponent = ThfEmailComponent;
    exports.ThfFieldModule = ThfFieldModule;
    exports.ThfGridComponent = ThfGridComponent;
    exports.ThfGridModule = ThfGridModule;
    exports.ThfGuardsModule = ThfGuardsModule;
    exports.ThfHttpInterceptorModule = ThfHttpInterceptorModule;
    exports.ThfHttpInterceptorService = ThfHttpInterceptorService;
    exports.ThfHttpRequestInterceptorService = ThfHttpRequestInterceptorService;
    exports.ThfHttpRequestModule = ThfHttpRequestModule;
    exports.ThfI18nModule = ThfI18nModule;
    exports.ThfI18nPipe = ThfI18nPipe;
    exports.ThfI18nService = ThfI18nService;
    exports.ThfInfoComponent = ThfInfoComponent;
    exports.ThfInfoModule = ThfInfoModule;
    exports.ThfInfoOrientation = ThfInfoOrientation;
    exports.ThfInputComponent = ThfInputComponent;
    exports.ThfInterceptorsModule = ThfInterceptorsModule;
    exports.ThfListViewComponent = ThfListViewComponent;
    exports.ThfListViewContentTemplateDirective = ThfListViewContentTemplateDirective;
    exports.ThfListViewDetailTemplateDirective = ThfListViewDetailTemplateDirective;
    exports.ThfListViewModule = ThfListViewModule;
    exports.ThfLoadingModule = ThfLoadingModule;
    exports.ThfLoadingOverlayComponent = ThfLoadingOverlayComponent;
    exports.ThfLoginComponent = ThfLoginComponent;
    exports.ThfLookupComponent = ThfLookupComponent;
    exports.ThfMenuComponent = ThfMenuComponent;
    exports.ThfMenuModule = ThfMenuModule;
    exports.ThfMenuPanelComponent = ThfMenuPanelComponent;
    exports.ThfMenuPanelModule = ThfMenuPanelModule;
    exports.ThfModalComponent = ThfModalComponent;
    exports.ThfModalModule = ThfModalModule;
    exports.ThfModule = ThfModule;
    exports.ThfMultiselectComponent = ThfMultiselectComponent;
    exports.ThfMultiselectFilterMode = ThfMultiselectFilterMode;
    exports.ThfNavbarComponent = ThfNavbarComponent;
    exports.ThfNavbarModule = ThfNavbarModule;
    exports.ThfNotificationModule = ThfNotificationModule;
    exports.ThfNotificationService = ThfNotificationService;
    exports.ThfNumberComponent = ThfNumberComponent;
    exports.ThfPageDefaultComponent = ThfPageDefaultComponent;
    exports.ThfPageDetailComponent = ThfPageDetailComponent;
    exports.ThfPageEditComponent = ThfPageEditComponent;
    exports.ThfPageListComponent = ThfPageListComponent;
    exports.ThfPageModule = ThfPageModule;
    exports.ThfPasswordComponent = ThfPasswordComponent;
    exports.ThfPipesModule = ThfPipesModule;
    exports.ThfPopoverComponent = ThfPopoverComponent;
    exports.ThfPopoverModule = ThfPopoverModule;
    exports.ThfPopupComponent = ThfPopupComponent;
    exports.ThfPopupModule = ThfPopupModule;
    exports.ThfRadioGroupComponent = ThfRadioGroupComponent;
    exports.ThfRichTextComponent = ThfRichTextComponent;
    exports.ThfSelectComponent = ThfSelectComponent;
    exports.ThfSelectOptionTemplateDirective = ThfSelectOptionTemplateDirective;
    exports.ThfServicesModule = ThfServicesModule;
    exports.ThfSlideComponent = ThfSlideComponent;
    exports.ThfSlideModule = ThfSlideModule;
    exports.ThfStepComponent = ThfStepComponent;
    exports.ThfStepperComponent = ThfStepperComponent;
    exports.ThfStepperModule = ThfStepperModule;
    exports.ThfStepperOrientation = ThfStepperOrientation;
    exports.ThfStepperStatus = ThfStepperStatus;
    exports.ThfSwitchComponent = ThfSwitchComponent;
    exports.ThfSwitchLabelPosition = ThfSwitchLabelPosition;
    exports.ThfTabComponent = ThfTabComponent;
    exports.ThfTableComponent = ThfTableComponent;
    exports.ThfTableModule = ThfTableModule;
    exports.ThfTableRowTemplateDirective = ThfTableRowTemplateDirective;
    exports.ThfTabsComponent = ThfTabsComponent;
    exports.ThfTabsModule = ThfTabsModule;
    exports.ThfTagComponent = ThfTagComponent;
    exports.ThfTagModule = ThfTagModule;
    exports.ThfTagOrientation = ThfTagOrientation;
    exports.ThfTagType = ThfTagType;
    exports.ThfTextareaComponent = ThfTextareaComponent;
    exports.ThfTimeModule = ThfTimeModule;
    exports.ThfTimePipe = ThfTimePipe;
    exports.ThfToasterOrientation = ThfToasterOrientation;
    exports.ThfToasterType = ThfToasterType;
    exports.ThfToolbarComponent = ThfToolbarComponent;
    exports.ThfToolbarModule = ThfToolbarModule;
    exports.ThfTooltipDirective = ThfTooltipDirective;
    exports.ThfTooltipModule = ThfTooltipModule;
    exports.ThfUploadComponent = ThfUploadComponent;
    exports.ThfUrlComponent = ThfUrlComponent;
    exports.ThfWidgetComponent = ThfWidgetComponent;
    exports.ThfWidgetModule = ThfWidgetModule;
    exports.initializeLanguageDefault = initializeLanguageDefault;
    exports.returnThfI18nService = returnThfI18nService;
    exports.ɵa = ThfAvatarBaseComponent;
    exports.ɵb = ThfBreadcrumbBaseComponent;
    exports.ɵba = ThfInfoBaseComponent;
    exports.ɵbb = ThfLanguageModule;
    exports.ɵbc = ThfLanguageService;
    exports.ɵbd = ThfLoadingComponent;
    exports.ɵbe = ThfLoadingBaseComponent;
    exports.ɵbf = ThfLoadingOverlayBaseComponent;
    exports.ɵbg = ThfModalBaseComponent;
    exports.ɵbh = ThfModalService;
    exports.ɵbi = ThfTableBaseComponent;
    exports.ɵbj = ThfTableColumnIconComponent;
    exports.ɵbk = ThfTableColumnLabelComponent;
    exports.ɵbl = ThfColorPaletteService;
    exports.ɵbm = ThfTableColumnLinkComponent;
    exports.ɵbn = ThfTableDetailComponent;
    exports.ɵbo = ThfTableShowSubtitleComponent;
    exports.ɵbp = ThfTableSubtitleCircleComponent;
    exports.ɵbq = ThfTableSubtitleFooterComponent;
    exports.ɵbr = ThfCheckboxGroupBaseComponent;
    exports.ɵbs = ThfCleanComponent;
    exports.ɵbt = ThfCleanBaseComponent;
    exports.ɵbu = ThfComboBaseComponent;
    exports.ɵbv = ThfComboFilterService;
    exports.ɵbw = ThfInputBaseComponent;
    exports.ɵbx = ThfDatepickerBaseComponent;
    exports.ɵby = ThfDatepickerRangeBaseComponent;
    exports.ɵbz = ThfInputGeneric;
    exports.ɵc = ThfBreadcrumbDropdownComponent;
    exports.ɵca = ThfLookupBaseComponent;
    exports.ɵcb = ThfLookupFilterService;
    exports.ɵcc = ThfLookupModalService;
    exports.ɵcd = ThfLookupModalComponent;
    exports.ɵce = ThfLookupModalBaseComponent;
    exports.ɵcf = ThfMultiselectBaseComponent;
    exports.ɵcg = ThfNumberBaseComponent;
    exports.ɵch = ThfRadioGroupBaseComponent;
    exports.ɵci = ThfRichTextBaseComponent;
    exports.ɵcj = ThfSelectBaseComponent;
    exports.ɵck = ThfSwitchBaseComponent;
    exports.ɵcl = ThfTextareaBaseComponent;
    exports.ɵcm = ThfUploadBaseComponent;
    exports.ɵcn = ThfUploadService;
    exports.ɵco = ThfUploadBaseService;
    exports.ɵcp = ThfCalendarComponent$1;
    exports.ɵcq = ThfCalendarService$1;
    exports.ɵcr = ThfCalendarLangService$1;
    exports.ɵcs = ThfFieldContainerComponent;
    exports.ɵct = ThfFieldContainerBottomComponent;
    exports.ɵcu = ThfMultiselectDropdownComponent;
    exports.ɵcv = ThfMultiselectItemComponent;
    exports.ɵcw = ThfMultiselectSearchComponent;
    exports.ɵcx = ThfRichTextBodyComponent;
    exports.ɵcy = ThfRichTextToolbarComponent;
    exports.ɵcz = ThfTagBaseComponent;
    exports.ɵd = ThfBreadcrumbFavoriteComponent;
    exports.ɵda = ThfDynamicFormBaseComponent;
    exports.ɵdb = ThfDynamicFormFieldsComponent;
    exports.ɵdc = ThfDynamicFormFieldsBaseComponent;
    exports.ɵdd = ThfDynamicViewBaseComponent;
    exports.ɵde = ThfGridCellActionComponent;
    exports.ɵdf = ThfGridCellComponent;
    exports.ɵdg = ThfGridHeadComponent;
    exports.ɵdh = ThfListViewBaseComponent;
    exports.ɵdi = ThfBadgeModule;
    exports.ɵdj = ThfBadgeComponent;
    exports.ɵdk = ThfBadgeBaseComponent;
    exports.ɵdl = ThfMenuBaseComponent;
    exports.ɵdm = ThfMenuService;
    exports.ɵdn = ThfMenuItemsService;
    exports.ɵdo = ThfMenuHeaderTemplateDirective;
    exports.ɵdp = ThfMenuFilterComponent;
    exports.ɵdq = ThfMenuItemComponent;
    exports.ɵdr = ThfMenuPanelBaseComponent;
    exports.ɵds = ThfMenuPanelItemsService;
    exports.ɵdt = ThfMenuPanelItemComponent;
    exports.ɵdu = ThfNavbarActionsModule;
    exports.ɵdv = ThfNavbarActionComponent;
    exports.ɵdw = ThfNavbarActionPopupComponent;
    exports.ɵdx = ThfNavbarActionsComponent;
    exports.ɵdy = ThfNavbarItemsModule;
    exports.ɵdz = ThfNavbarItemComponent;
    exports.ɵe = ThfBreadcrumbFavoriteService;
    exports.ɵea = ThfNavbarItemsComponent;
    exports.ɵeb = ThfNavbarBaseComponent;
    exports.ɵec = ThfNavbarItemNavigationComponent;
    exports.ɵed = ThfNavbarLogoComponent;
    exports.ɵee = ThfPageComponent;
    exports.ɵef = ThfPageBaseComponent;
    exports.ɵeg = ThfPageContentComponent;
    exports.ɵeh = ThfPageContentBaseComponent;
    exports.ɵei = ThfPageDefaultBaseComponent;
    exports.ɵej = ThfPageDetailBaseComponent;
    exports.ɵek = ThfPageEditBaseComponent;
    exports.ɵel = ThfPageHeaderComponent;
    exports.ɵem = ThfPageHeaderBaseComponent;
    exports.ɵen = ThfPageListBaseComponent;
    exports.ɵeo = ThfPopoverBaseComponent;
    exports.ɵep = ThfSlideCirclesComponent;
    exports.ɵeq = ThfSlideBaseComponent;
    exports.ɵer = ThfSlideContentTemplateDirective;
    exports.ɵes = ThfSlideItemComponent;
    exports.ɵet = ThfSlideControlComponent;
    exports.ɵeu = ThfStepperCircleComponent;
    exports.ɵev = ThfStepperBaseComponent;
    exports.ɵew = ThfStepperLabelComponent;
    exports.ɵex = ThfStepperStepComponent;
    exports.ɵey = ThfTabButtonComponent;
    exports.ɵez = ThfTabBaseComponent;
    exports.ɵf = ThfBreadcrumbItemComponent;
    exports.ɵfa = ThfTabDropdownComponent;
    exports.ɵfb = ThfTabsBaseComponent;
    exports.ɵfc = ThfToolbarActionsComponent;
    exports.ɵfd = ThfToolbarBaseComponent;
    exports.ɵfe = ThfToolbarNotificationComponent;
    exports.ɵff = ThfToolbarProfileComponent;
    exports.ɵfg = ThfWidgetBaseComponent;
    exports.ɵfh = ThfHttpInterceptorBaseService;
    exports.ɵfi = ThfNotificationBaseService;
    exports.ɵfj = ThfDialogBaseService;
    exports.ɵfk = ThfHttpRequesControltService;
    exports.ɵfl = ThfI18nBasePipe;
    exports.ɵfm = ThfColorPaletteModule;
    exports.ɵfn = ThfControlPositionModule;
    exports.ɵfo = ThfDateTimeModule;
    exports.ɵfp = ThfDialogComponent;
    exports.ɵfq = ThfToasterComponent;
    exports.ɵfr = ThfToasterBaseComponent;
    exports.ɵfs = ThfI18nBaseService;
    exports.ɵft = I18N_CONFIG;
    exports.ɵg = ThfButtonBaseComponent;
    exports.ɵh = ThfTooltipBaseDirective;
    exports.ɵi = ThfControlPositionService;
    exports.ɵj = ThfButtonGroupBaseComponent;
    exports.ɵk = ThfCalendarBaseComponent;
    exports.ɵl = ThfDateService;
    exports.ɵm = ThfCalendarLangService;
    exports.ɵn = ThfCalendarService;
    exports.ɵo = ThfDateService;
    exports.ɵp = ThfChartBaseComponent;
    exports.ɵq = ThfChartPieComponent;
    exports.ɵr = ThfChartDynamicTypeComponent;
    exports.ɵs = ThfContainerBaseComponent;
    exports.ɵt = ThfDisclaimerComponent;
    exports.ɵu = ThfDisclaimerBaseComponent;
    exports.ɵv = ThfDisclaimerGroupBaseComponent;
    exports.ɵw = ThfDisclaimerRemoveComponent;
    exports.ɵx = ThfDividerBaseComponent;
    exports.ɵy = ThfPopupBaseComponent;
    exports.ɵz = ThfDropdownBaseComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=totvs-thf-ui.umd.js.map
