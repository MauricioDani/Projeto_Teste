{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@totvs/thf-ui/lib/components/thf-avatar/thf-avatar-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-avatar/thf-avatar.component.ts","ng://@totvs/thf-ui/lib/components/thf-avatar/thf-avatar.module.ts","ng://@totvs/thf-ui/lib/components/thf-breadcrumb/thf-breadcrumb-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-breadcrumb/thf-breadcrumb.component.ts","ng://@totvs/thf-ui/lib/components/thf-breadcrumb/thf-breadcrumb-dropdown/thf-breadcrumb-dropdown.component.ts","ng://@totvs/thf-ui/lib/components/thf-breadcrumb/thf-breadcrumb-favorite/thf-breadcrumb-favorite.service.ts","ng://@totvs/thf-ui/lib/components/thf-breadcrumb/thf-breadcrumb-favorite/thf-breadcrumb-favorite.component.ts","ng://@totvs/thf-ui/lib/components/thf-breadcrumb/thf-breadcrumb-item/thf-breadcrumb-item.component.ts","ng://@totvs/thf-ui/lib/components/thf-breadcrumb/thf-breadcrumb.module.ts","ng://@totvs/thf-ui/lib/utils/util.ts","ng://@totvs/thf-ui/lib/components/thf-button/thf-button-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-button/thf-button.component.ts","ng://@totvs/thf-ui/lib/components/thf-button/thf-button.module.ts","ng://@totvs/thf-ui/lib/services/thf-control-position/thf-control-position.service.ts","ng://@totvs/thf-ui/lib/services/thf-control-position/thf-control-position.constants.ts","ng://@totvs/thf-ui/lib/directives/thf-tooltip/thf-tooltip-base.directive.ts","ng://@totvs/thf-ui/lib/directives/thf-tooltip/thf-tooltip.directive.ts","ng://@totvs/thf-ui/lib/directives/thf-tooltip/thf-tooltip.module.ts","ng://@totvs/thf-ui/lib/components/thf-button-group/thf-button-group-toggle.enum.ts","ng://@totvs/thf-ui/lib/components/thf-button-group/thf-button-group-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-button-group/thf-button-group.component.ts","ng://@totvs/thf-ui/lib/components/thf-button-group/thf-button-group.module.ts","ng://@totvs/thf-ui/lib/components/thf-calendar/thf-calendar-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-calendar/services/thf-calendar.lang.service.ts","ng://@totvs/thf-ui/lib/components/thf-calendar/services/thf-calendar.service.ts","ng://@totvs/thf-ui/lib/services/thf-date/thf-date.service.ts","ng://@totvs/thf-ui/lib/components/thf-calendar/thf-calendar.component.ts","ng://@totvs/thf-ui/lib/components/thf-calendar/thf-calendar.module.ts","ng://@totvs/thf-ui/lib/components/thf-chart/enums/thf-chart-type.enum.ts","ng://@totvs/thf-ui/lib/components/thf-chart/thf-chart-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-chart/thf-chart-colors.constant.ts","ng://@totvs/thf-ui/lib/components/thf-chart/thf-chart-types/thf-chart-pie/thf-chart-pie.constant.ts","ng://@totvs/thf-ui/lib/components/thf-chart/thf-chart-types/thf-chart-dynamic-type.component.ts","ng://@totvs/thf-ui/lib/components/thf-chart/thf-chart-types/thf-chart-pie/thf-chart-pie.component.ts","ng://@totvs/thf-ui/lib/components/thf-chart/thf-chart.component.ts","ng://@totvs/thf-ui/lib/components/thf-chart/thf-chart.module.ts","ng://@totvs/thf-ui/lib/components/thf-container/thf-container-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-container/thf-container.component.ts","ng://@totvs/thf-ui/lib/components/thf-container/thf-container.module.ts","ng://@totvs/thf-ui/lib/components/thf-disclaimer/thf-disclaimer-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-disclaimer/thf-disclaimer.component.ts","ng://@totvs/thf-ui/lib/components/thf-disclaimer/thf-disclaimer.module.ts","ng://@totvs/thf-ui/lib/components/thf-disclaimer-group/thf-disclaimer-group-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-disclaimer-group/thf-disclaimer-group.component.ts","ng://@totvs/thf-ui/lib/components/thf-disclaimer-group/thf-disclaimer-remove/thf-disclaimer-remove.component.ts","ng://@totvs/thf-ui/lib/components/thf-disclaimer-group/thf-disclaimer-group.module.ts","ng://@totvs/thf-ui/lib/components/thf-divider/thf-divider-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-divider/thf-divider.component.ts","ng://@totvs/thf-ui/lib/components/thf-divider/thf-divider.module.ts","ng://@totvs/thf-ui/lib/components/thf-popup/thf-popup-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-popup/thf-popup.component.ts","ng://@totvs/thf-ui/lib/components/thf-popup/thf-popup.module.ts","ng://@totvs/thf-ui/lib/components/thf-dropdown/thf-dropdown-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-dropdown/thf-dropdown.component.ts","ng://@totvs/thf-ui/lib/components/thf-dropdown/thf-dropdown.module.ts","ng://@totvs/thf-ui/lib/services/thf-language/thf-language.service.ts","ng://@totvs/thf-ui/lib/components/thf-loading/thf-loading-overlay/thf-loading-overlay-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-loading/thf-loading-overlay/thf-loading-overlay.component.ts","ng://@totvs/thf-ui/lib/services/thf-language/thf-language.module.ts","ng://@totvs/thf-ui/lib/components/thf-loading/thf-loading-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-loading/thf-loading.component.ts","ng://@totvs/thf-ui/lib/components/thf-loading/thf-loading.module.ts","ng://@totvs/thf-ui/lib/components/thf-modal/thf-modal-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-modal/thf-modal-service.ts","ng://@totvs/thf-ui/lib/components/thf-modal/thf-modal.component.ts","ng://@totvs/thf-ui/lib/components/thf-modal/thf-modal.module.ts","ng://@totvs/thf-ui/lib/pipes/thf-time/thf-time.pipe.ts","ng://@totvs/thf-ui/lib/pipes/thf-time/thf-time.module.ts","ng://@totvs/thf-ui/lib/components/thf-table/thf-table-column-icon/thf-table-column-icon.component.ts","ng://@totvs/thf-ui/lib/enums/thf-color-palette.enum.ts","ng://@totvs/thf-ui/lib/services/thf-color-palette/thf-color-palette.service.ts","ng://@totvs/thf-ui/lib/components/thf-table/thf-table-column-label/thf-table-column-label.component.ts","ng://@totvs/thf-ui/lib/components/thf-table/thf-table-column-link/thf-table-column-link.component.ts","ng://@totvs/thf-ui/lib/components/thf-table/thf-table-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-table/thf-table-row-template/thf-table-row-template.directive.ts","ng://@totvs/thf-ui/lib/components/thf-table/thf-table.component.ts","ng://@totvs/thf-ui/lib/components/thf-table/thf-table-detail/thf-table-detail.component.ts","ng://@totvs/thf-ui/lib/components/thf-table/thf-table-show-subtitle/thf-table-show-subtitle.component.ts","ng://@totvs/thf-ui/lib/components/thf-table/thf-table-subtitle-circle/thf-table-subtitle-circle.component.ts","ng://@totvs/thf-ui/lib/components/thf-table/thf-table-subtitle-footer/thf-table-subtitle-footer.component.ts","ng://@totvs/thf-ui/lib/components/thf-table/thf-table.module.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-datepicker/thf-calendar/thf-calendar.lang.service.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-datepicker/thf-calendar/thf-calendar.service.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-datepicker/thf-calendar/thf-calendar.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/validators.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-checkbox-group/thf-checkbox-group-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-checkbox-group/thf-checkbox-group.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-clean/thf-clean-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-clean/thf-clean.component.ts","ng://@totvs/thf-ui/lib/enums/thf-key-code.enum.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-combo/thf-combo-filter-mode.enum.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-combo/thf-combo-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-combo/thf-combo-filter.service.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-combo/thf-combo.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-input/thf-mask.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-datepicker/thf-datepicker-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-datepicker/thf-datepicker.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-datepicker-range/thf-datepicker-range-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-datepicker-range/thf-datepicker-range.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-input/thf-input-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-decimal/thf-decimal.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-input-generic/thf-input-generic.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-email/thf-email.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-field-container/thf-field-container.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-field-container/thf-field-container-bottom/thf-field-container-bottom.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-login/thf-login.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-lookup/thf-lookup-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-lookup/services/thf-lookup-filter.service.ts","ng://@totvs/thf-ui/lib/services/thf-component-injector/thf-component-injector.service.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-lookup/thf-lookup-modal/thf-lookup-modal-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-lookup/thf-lookup-modal/thf-lookup-modal.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-lookup/services/thf-lookup-modal.service.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-lookup/thf-lookup.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-multiselect/thf-multiselect-search/thf-multiselect-search.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-multiselect/thf-multiselect-dropdown/thf-multiselect-dropdown.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-multiselect/thf-multiselect-filter-mode.enum.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-multiselect/thf-multiselect-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-multiselect/thf-multiselect.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-multiselect/thf-multiselect-item/thf-multiselect-item.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-rich-text/thf-rich-text-body/thf-rich-text-body.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-rich-text/thf-rich-text-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-rich-text/thf-rich-text.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-rich-text/thf-rich-text-literals.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-rich-text/thf-rich-text-toolbar/thf-rich-text-toolbar.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-input/thf-input.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-number/thf-number-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-number/thf-number.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-password/thf-password.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-radio-group/thf-radio-group-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-radio-group/thf-radio-group.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-select/thf-select-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-select/thf-select-option-template/thf-select-option-template.directive.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-select/thf-select.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-switch/thf-switch-label-position.enum.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-switch/thf-switch-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-switch/thf-switch.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-textarea/thf-textarea-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-textarea/thf-textarea.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-upload/thf-upload-status.enum.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-upload/thf-upload-file.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-upload/thf-upload-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-upload/thf-upload-base.service.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-upload/thf-upload.service.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-upload/thf-upload.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-url/thf-url.component.ts","ng://@totvs/thf-ui/lib/components/thf-field/thf-field.module.ts","ng://@totvs/thf-ui/lib/components/thf-info/thf-info-orietation.enum.ts","ng://@totvs/thf-ui/lib/components/thf-info/thf-info-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-info/thf-info.component.ts","ng://@totvs/thf-ui/lib/components/thf-info/thf-info.module.ts","ng://@totvs/thf-ui/lib/components/thf-tag/enums/thf-tag-icon.enum.ts","ng://@totvs/thf-ui/lib/components/thf-tag/enums/thf-tag-orientation.enum.ts","ng://@totvs/thf-ui/lib/components/thf-tag/enums/thf-tag-type.enum.ts","ng://@totvs/thf-ui/lib/components/thf-tag/thf-tag-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-tag/thf-tag.component.ts","ng://@totvs/thf-ui/lib/components/thf-tag/thf-tag.module.ts","ng://@totvs/thf-ui/lib/components/thf-dynamic/thf-dynamic-form/thf-dynamic-form-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-dynamic/thf-dynamic-form/thf-dynamic-form.component.ts","ng://@totvs/thf-ui/lib/components/thf-dynamic/thf-dynamic.util.ts","ng://@totvs/thf-ui/lib/components/thf-dynamic/thf-dynamic-field-type.enum.ts","ng://@totvs/thf-ui/lib/components/thf-dynamic/thf-dynamic-form/thf-dynamic-form-fields/thf-dynamic-form-fields-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-dynamic/thf-dynamic-form/thf-dynamic-form-fields/thf-dynamic-form-fields.component.ts","ng://@totvs/thf-ui/lib/components/thf-dynamic/thf-dynamic-view/thf-dynamic-view-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-dynamic/thf-dynamic-view/thf-dynamic-view.component.ts","ng://@totvs/thf-ui/lib/components/thf-dynamic/thf-dynamic.module.ts","ng://@totvs/thf-ui/lib/components/thf-grid/thf-grid-cell-action/thf-grid-cell-action.component.ts","ng://@totvs/thf-ui/lib/components/thf-grid/thf-grid-cell/thf-grid-cell.component.ts","ng://@totvs/thf-ui/lib/components/thf-grid/thf-grid.component.ts","ng://@totvs/thf-ui/lib/components/thf-grid/thf-grid-head/thf-grid-head.component.ts","ng://@totvs/thf-ui/lib/components/thf-grid/thf-grid.module.ts","ng://@totvs/thf-ui/lib/components/thf-list-view/thf-list-view-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-list-view/thf-list-view-content-template/thf-list-view-content-template.directive.ts","ng://@totvs/thf-ui/lib/components/thf-list-view/thf-list-view-detail-template/thf-list-view-detail-template.directive.ts","ng://@totvs/thf-ui/lib/components/thf-list-view/thf-list-view.component.ts","ng://@totvs/thf-ui/lib/components/thf-list-view/thf-list-view.module.ts","ng://@totvs/thf-ui/lib/components/thf-badge/thf-badge-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-badge/thf-badge.component.ts","ng://@totvs/thf-ui/lib/components/thf-badge/thf-badge.module.ts","ng://@totvs/thf-ui/lib/components/thf-menu/thf-menu-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-menu/thf-menu-header-template/thf-menu-header-template.directive.ts","ng://@totvs/thf-ui/lib/components/thf-menu/services/thf-menu-items.service.ts","ng://@totvs/thf-ui/lib/components/thf-menu/services/thf-menu.service.ts","ng://@totvs/thf-ui/lib/components/thf-menu/thf-menu.component.ts","ng://@totvs/thf-ui/lib/components/thf-menu/thf-menu-filter/thf-menu-filter.component.ts","ng://@totvs/thf-ui/lib/components/thf-menu/thf-menu-item/thf-menu-item.component.ts","ng://@totvs/thf-ui/lib/components/thf-menu/thf-menu.module.ts","ng://@totvs/thf-ui/lib/components/thf-menu-panel/thf-menu-panel-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-menu-panel/services/thf-menu-panel-items.service.ts","ng://@totvs/thf-ui/lib/components/thf-menu-panel/thf-menu-panel.component.ts","ng://@totvs/thf-ui/lib/components/thf-menu-panel/thf-menu-panel-item/thf-menu-panel-item.component.ts","ng://@totvs/thf-ui/lib/components/thf-menu-panel/thf-menu-panel.module.ts","ng://@totvs/thf-ui/lib/components/thf-navbar/thf-navbar-actions/thf-navbar-action/thf-navbar-action.component.ts","ng://@totvs/thf-ui/lib/components/thf-navbar/thf-navbar-actions/thf-navbar-action-popup/thf-navbar-action-popup.component.ts","ng://@totvs/thf-ui/lib/components/thf-navbar/thf-navbar-actions/thf-navbar-actions.component.ts","ng://@totvs/thf-ui/lib/components/thf-navbar/thf-navbar-actions/thf-navbar-actions.module.ts","ng://@totvs/thf-ui/lib/components/thf-navbar/thf-navbar-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-navbar/thf-navbar-items/thf-navbar-item/thf-navbar-item.component.ts","ng://@totvs/thf-ui/lib/components/thf-navbar/thf-navbar-items/thf-navbar-items.component.ts","ng://@totvs/thf-ui/lib/components/thf-navbar/thf-navbar.component.ts","ng://@totvs/thf-ui/lib/components/thf-navbar/thf-navbar-items/thf-navbar-items.module.ts","ng://@totvs/thf-ui/lib/components/thf-navbar/thf-navbar-item-navigation/thf-navbar-item-navigation.component.ts","ng://@totvs/thf-ui/lib/components/thf-navbar/thf-navbar-logo/thf-navbar-logo.component.ts","ng://@totvs/thf-ui/lib/components/thf-navbar/thf-navbar.module.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page.component.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page-content/thf-page-content-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page-content/thf-page-content.component.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page-default/thf-page-default-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page-default/thf-page-default.component.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page-detail/thf-page-detail-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page-util/thf-page-util.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page-detail/thf-page-detail.component.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page-edit/thf-page-edit-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page-edit/thf-page-edit.component.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page-header/thf-page-header-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page-header/thf-page-header.component.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page-list/thf-page-list-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page-list/thf-page-list.component.ts","ng://@totvs/thf-ui/lib/components/thf-page/thf-page.module.ts","ng://@totvs/thf-ui/lib/components/thf-popover/thf-popover-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-popover/thf-popover.component.ts","ng://@totvs/thf-ui/lib/components/thf-popover/thf-popover.module.ts","ng://@totvs/thf-ui/lib/components/thf-slide/thf-slide-circles/thf-slide-circles.component.ts","ng://@totvs/thf-ui/lib/components/thf-slide/thf-slide-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-slide/directives/thf-slide-content-template.directive.ts","ng://@totvs/thf-ui/lib/components/thf-slide/thf-slide-item/thf-slide-item.component.ts","ng://@totvs/thf-ui/lib/components/thf-slide/thf-slide.component.ts","ng://@totvs/thf-ui/lib/components/thf-slide/thf-slide-control/thf-slide-control.component.ts","ng://@totvs/thf-ui/lib/components/thf-slide/thf-slide.module.ts","ng://@totvs/thf-ui/lib/components/thf-stepper/enums/thf-stepper-status.enum.ts","ng://@totvs/thf-ui/lib/components/thf-stepper/thf-step/thf-step.component.ts","ng://@totvs/thf-ui/lib/components/thf-stepper/thf-stepper-circle/thf-stepper-circle.component.ts","ng://@totvs/thf-ui/lib/components/thf-stepper/enums/thf-stepper-orientation.enum.ts","ng://@totvs/thf-ui/lib/components/thf-stepper/thf-stepper-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-stepper/thf-stepper.component.ts","ng://@totvs/thf-ui/lib/components/thf-stepper/thf-stepper-label/thf-stepper-label.component.ts","ng://@totvs/thf-ui/lib/components/thf-stepper/thf-stepper-step/thf-stepper-step.component.ts","ng://@totvs/thf-ui/lib/components/thf-stepper/thf-stepper.module.ts","ng://@totvs/thf-ui/lib/components/thf-tabs/thf-tab-button/thf-tab-button.component.ts","ng://@totvs/thf-ui/lib/components/thf-tabs/thf-tab/thf-tab-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-tabs/thf-tab/thf-tab.component.ts","ng://@totvs/thf-ui/lib/components/thf-tabs/thf-tab-dropdown/thf-tab-dropdown.component.ts","ng://@totvs/thf-ui/lib/components/thf-tabs/thf-tabs-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-tabs/thf-tabs.component.ts","ng://@totvs/thf-ui/lib/components/thf-tabs/thf-tabs.module.ts","ng://@totvs/thf-ui/lib/components/thf-toolbar/thf-toolbar-actions/thf-toolbar-actions.component.ts","ng://@totvs/thf-ui/lib/components/thf-toolbar/thf-toolbar-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-toolbar/thf-toolbar.component.ts","ng://@totvs/thf-ui/lib/components/thf-toolbar/thf-toolbar-notification/thf-toolbar-notification.component.ts","ng://@totvs/thf-ui/lib/components/thf-toolbar/thf-toolbar-profile/thf-toolbar-profile.component.ts","ng://@totvs/thf-ui/lib/components/thf-toolbar/thf-toolbar.module.ts","ng://@totvs/thf-ui/lib/components/thf-widget/thf-widget-base.component.ts","ng://@totvs/thf-ui/lib/components/thf-widget/thf-widget.component.ts","ng://@totvs/thf-ui/lib/components/thf-widget/thf-widget.module.ts","ng://@totvs/thf-ui/lib/components/components.module.ts","ng://@totvs/thf-ui/lib/directives/directives.module.ts","ng://@totvs/thf-ui/lib/guards/guards.module.ts","ng://@totvs/thf-ui/lib/services/thf-dialog/thf-dialog.enum.ts","ng://@totvs/thf-ui/lib/services/thf-dialog/thf-dialog-base.service.ts","ng://@totvs/thf-ui/lib/services/thf-dialog/thf-dialog.component.ts","ng://@totvs/thf-ui/lib/services/thf-dialog/thf-dialog.service.ts","ng://@totvs/thf-ui/lib/services/thf-notification/thf-toaster/thf-toaster-orientation.enum.ts","ng://@totvs/thf-ui/lib/services/thf-notification/thf-toaster/thf-toaster-type.enum.ts","ng://@totvs/thf-ui/lib/services/thf-notification/thf-notification-base.service.ts","ng://@totvs/thf-ui/lib/services/thf-notification/thf-toaster/thf-toaster-base.component.ts","ng://@totvs/thf-ui/lib/services/thf-notification/thf-toaster/thf-toaster.component.ts","ng://@totvs/thf-ui/lib/services/thf-notification/thf-notification.service.ts","ng://@totvs/thf-ui/lib/interceptors/thf-http-interceptor/thf-http-interceptor-base.service.ts","ng://@totvs/thf-ui/lib/interceptors/thf-http-interceptor/thf-http-interceptor.service.ts","ng://@totvs/thf-ui/lib/interceptors/thf-http-interceptor/thf-http-interceptor.module.ts","ng://@totvs/thf-ui/lib/interceptors/thf-http-request/thf-http-request-control-service.ts","ng://@totvs/thf-ui/lib/interceptors/thf-http-request/thf-http-request-interceptor.service.ts","ng://@totvs/thf-ui/lib/interceptors/thf-http-request/thf-http-request.module.ts","ng://@totvs/thf-ui/lib/interceptors/interceptors.module.ts","ng://@totvs/thf-ui/lib/pipes/pipes.module.ts","ng://@totvs/thf-ui/lib/services/thf-color-palette/thf-color-palette.module.ts","ng://@totvs/thf-ui/lib/services/thf-component-injector/thf-component-injector.module.ts","ng://@totvs/thf-ui/lib/services/thf-control-position/thf-control-position.module.ts","ng://@totvs/thf-ui/lib/services/thf-date/thf-date.module.ts","ng://@totvs/thf-ui/lib/services/thf-dialog/thf-dialog.module.ts","ng://@totvs/thf-ui/lib/services/thf-i18n/thf-i18n-base.pipe.ts","ng://@totvs/thf-ui/lib/services/thf-i18n/thf-i18n.pipe.ts","ng://@totvs/thf-ui/lib/services/thf-notification/thf-notification.module.ts","ng://@totvs/thf-ui/lib/services/services.module.ts","ng://@totvs/thf-ui/lib/thf.module.ts","ng://@totvs/thf-ui/lib/services/thf-i18n/thf-i18n-config-injection-token.ts","ng://@totvs/thf-ui/lib/services/thf-i18n/thf-i18n-base.service.ts","ng://@totvs/thf-ui/lib/services/thf-i18n/thf-i18n.service.ts","ng://@totvs/thf-ui/lib/services/thf-i18n/thf-i18n.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__read","o","m","r","ar","error","__spread","concat","THF_AVATAR_SIZES","ThfAvatarBaseComponent","_size","defineProperty","includes","Input","args","ThfAvatarComponent","_super","tslib_1.__extends","ngOnInit","src","undefined","onError","Component","selector","template","ThfAvatarModule","NgModule","imports","CommonModule","declarations","exports","ThfBreadcrumbBaseComponent","itemsView","_items","items","ThfBreadcrumbComponent","differs","element","renderer","_this","showDropdown","showDropdownToggle","_breadcrumbItemsLenght","calculatedElement","hiddenWithoutResize","initialized","wasClickedonDropdown","event","checkClickOutElement","dropdownIcon","removeClickoutListener","differ","find","ngAfterViewInit","initializeResizeListener","ngDoCheck","breadcrumbElement","nativeElement","offsetWidth","initBreadcrumbSize","debounceResize","checkChangeOnItems","ngOnDestroy","removeResizeListener","toggleDropdown","initializeClickoutListener","contains","target","diff","calcBreadcrumbItemsWidth","calcBreadcrumb","breadcrumbFavorite","getBreadcrumbFavoriteWidth","getBreadcrumbWidth","enableBreadcrumbResponsive","disableBreadcrumbResponsive","favoriteService","querySelector","breadcrumbItem","querySelectorAll","from","map","breadcrumb","reduce","a","slice","dropdownItems","reverse","clearTimeout","timeoutResize","setTimeout","clickoutListener","listen","resizeListener","IterableDiffers","ElementRef","Renderer2","ViewChild","read","static","ThfBreadcrumbDropdownComponent","ThfBreadcrumbFavoriteService","http","_url","_bodyParams","configService","url","params","item","isFavorite","link","sendStatusFavorite","status","bodyParams","post","getFavorite","get","responseType","Injectable","HttpClient","ThfBreadcrumbFavoriteComponent","service","favorite","paramsService","itemActive","getStatusFavorite","getSubscription","unsubscribe","setSubscription","toggleFavoriteAction","setStatusFavorite","subscribe","providers","ThfBreadcrumbItemComponent","ThfBreadcrumbModule","RouterModule","thfLocales","thfLocaleDefault","browserLanguage","getShortBrowserLanguage","getBrowserLanguage","language","navigator","shortLanguage","getShortLanguage","toLowerCase","substring","isLanguage","RegExp","test","convertToBoolean","val","trim","convertToInt","valueDefault","validNumber","parseInt","validDefaultValue","defaultValue","isTypeof","object","type","callFunction","fn","context","param","convertIsoToDate","start","end","date","day","month","year","setYearFrom0To100","Date","milliseconds","parse","timezone","getTimezoneOffset","convertDateToISOExtended","time","getMonth","getDate","formatYear","getFullYear","dateString","toString","isMobile","window","userAgent","match","isKeyCodeEnter","keyCode","which","setFullYear","removeDuplicatedOptions","list","findIndex","splice","out_i_1","removeUndefinedAndNullOptions","validValue","isExternalLink","startsWith","openExternalLink","open","getFormattedLink","formattedLink","replace","sortValues","leftSide","rightSide","ascending","validateDateRange","dateStart","dateEnd","uuid","hex4","Math","floor","random","capitalizeFirstLetter","text","charAt","toUpperCase","THF_BUTTON_TYPES","ThfButtonBaseComponent","_disabled","_loading","_small","_type","click","EventEmitter","Output","ThfButtonComponent","onClick","emit","ThfButtonModule","thfControlPositionSidesDefault","ThfControlPositionService","differenceDiagonalToWidthArrow","isSetElementWidth","offsetArrow","adjustPosition","position","elementPosition","customPositions","adjustCustomPosition","adjustDefaultPosition","getArrowDirection","arrowDirection","setElements","elementOffset","targetElement","isCornerAligned","positionLength","sidesCount","overflowAllSides","nextPosition","mainPositions","getMainPositions","mainPositionLength","mainSidesCount","mainPosition","getMainPosition","overflowMain","verifySubPositions","setAlignedElementPosition","setElementPosition","indexOf","getMainPositionsByCustomPositions","customPositionsLength","getOverflows","sizesAndPositions","getSizesAndPositions","right","innerWidth","top","left","bottom","innerHeight","scrollY","scrollX","getBoundingClientRect","positions","index","nextIndex","overflows","setAlignedArrowDirection","setAlignedBottomPositions","displacement","style","setElementWidth","width","setAlignedTopPositions","height","setArrowDirection","setBottomPositions","setTopPositions","setRightPositions","setLeftPositions","clientWidth","align","THF_CONTROL_POSITIONS","ThfTooltipBaseDirective","_tooltip","_tooltipPosition","tooltip","ThfTooltipDirective","elementRef","thfControlPosition","tooltipOffset","initScrollEventListenerFunction","onMouseEnter","tooltipContent","showTooltip","createTooltip","removeArrow","tooltipPosition","addArrow","lastTooltipText","onMouseLeave","hideTooltip","addClass","divArrow","addScrollEventListener","addEventListener","eventListenerFunction","createElement","divContent","textContent","createText","appendChild","isHidden","removeScrollEventListener","removeClass","removeEventListener","updateTextContent","removeChild","Directive","HostListener","ThfTooltipModule","Multiple","None","Single","THF_TOGGLE_TYPE_DEFAULT","ThfButtonGroupBaseComponent","_toggle","buttons","values","ThfButtonGroupToggle","checkSelecteds","onButtonClick","buttonClicked","buttonIndex","toggle","forEach","button","selected","toggleMode","deselectAllButtons","filter","ThfButtonGroupComponent","viewRef","parentRef","ViewContainerRef","ThfButtonGroupModule","thfCalendarLocales","ThfCalendarBaseComponent","thfDate","thfCalendarLangService","dayVisible","displayMonths","displayWeekDays","monthVisible","yearVisible","onTouched","propagateChange","today","change","_locale","locale","initializeLanguage","_maxDate","maxDate","getDateForDateRange","_minDate","minDate","setLanguage","getWeekDaysArray","getMonthsArray","displayMonth","displayMonthNumber","ThfCalendarLangService","months","pt","en","es","shortWeekDays","monthLabel","yearLabel","getMonthLabel","arrMonths","getWeekDays","arrWeekDays","getYearLabel","ThfCalendarService","monthDates","dayFormatter","weekFormatter","Error","weeks","week","weekStartDate","getTime","setDate","monthDays","startDate","getDay","ThfDateService","dateRegex","isoRegex","_a","getDateFromIso","miliseconds","convertDateToISO","fullYear","isoDate","isMinDate","lastHour","splitDate","validDate","bind","isValidIso","isDateRangeValid","dateA","dateB","dateASplitted","split","dateBSplitted","stringDate","sortDate","validateDate","ThfCalendarComponent","thfCalendarService","init","getBackgroundColor","displayValue","propertyValue","getDayBackgroundColor","getDayColor","getDayForegroundColor","getForegroundColor","onNextMonth","updateDisplay","displayYear","onPreviousMonth","onSelectDate","dateIso","onSelectMonth","selectDay","onSelectYear","lastDisplay","selectMonth","currentYear","registerOnChange","registerOnTouched","func","registerOnValidatorChange","validatorChange","selectYear","updateYear","validateModel","model","validate","c","writeValue","writeDate","updateDate","addAllYearsInDecade","displayDecade","equalsDate","date1","date2","getDecadeArray","updateDecade","getColorForDate","local","getColorForDateRange","getColorForToday","selectDateFromDate","selectDateFromIso","currentMonthNumber","displayStartDecade","displayFinalDecade","calendarArray","displayDays","writeDateIso","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","ThfCalendarModule","Pie","thfChartDefaultHeight","thfChartTypeDefault","ThfChartType","ThfChartBaseComponent","_height","thfChartType","seriesClick","seriesHover","intValue","rebuildComponent","onSeriesClick","onSeriesHover","ThfChartColors","thfChartAngleStepInterval","PI","thfChartAnimationDurationTime","thfChartStartAngle","ThfChartDynamicTypeComponent","onSerieClick","Subject","onSerieHover","series","calculateSVGContainerDimensions","chartWrapperElement","chartHeaderElement","chartLegendElement","svgContainerHeightCalc","svgHeight","centerX","calculateTotalValue","totalValue","previousValue","serie","ThfChartPieComponent","el","ngZone","chartItemsEndAngleList","svgPathElementsList","calculateEndAngle","removeWindowResizeListener","removeWindowScrollListener","animationRunning","chartInitSetup","setEventListeners","animationSetup","chartItemStartAngle","chartItemEndAngle","drawPathInit","calculateAngleRadians","calculateCurrentEndAngle","angleCurrentPosition","changeTooltipPosition","tooltipElement","classList","tooltipPositions","setTooltipPositions","setStyle","chartWrapper","chartHeader","chartLegend","createSVGElements","createPath","svgPathsWrapper","svgPath","setAttribute","colors","category","svgElement","createPaths","thfChartPadding","svgContainer","drawPath","path","largeArc","startX","cos","startY","sin","endX","endY","pathCoordinates","join","runOutsideAngular","drawSeries","currentSerieIndex","isFinishedDrawingCurrentSeries","requestAnimationFrame","emitEventOnEnter","onMouseClick","serieOnClick","chartElementCategory","chartElementValue","chartBody","lastChild","getAttributeNS","tooltipText","serieOnEnter","onWindowResize","removeTooltip","windowResizeListener","windowScrollListener","chartSeries","checkingIfScrollsWithThfPage","thfPageContent","document","getElementsByClassName","clientX","clientY","offsetHeight","NgZone","ThfChartComponent","changeDetector","componentFactoryResolver","mappings","onResize","getSeriesColor","dynamicComponentSetting","checkingForSerieChanges","componentRef","destroy","createComponent","componentType","getComponentType","factory","resolveComponentFactory","chartContainer","instance","setChartProperties","setResizeListenerSubscribe","detectChanges","setClickSubscribe","setHoverSubscribe","typeName","colorsLength","seriesLength","quantityDuplicates","ChangeDetectorRef","ComponentFactoryResolver","ThfChartModule","entryComponents","ThfContainerBaseComponent","_noBorder","_noPadding","_noShadow","ThfContainerComponent","ThfContainerModule","THF_DISCLAIMER_TYPES","ThfDisclaimerBaseComponent","_hideClose","showDisclaimer","closeAction","close","property","getLabel","ThfDisclaimerComponent","onKeyPress","ThfDisclaimerModule","thfDisclaimerGroupLiteralsDefault","removeAll","ThfDisclaimerGroupBaseComponent","_disclaimers","_hideRemoveAll","previousDisclaimers","literals","disclaimers","checkDisclaimers","checkChanges","closeItem","disclaimer","emitChange","itemIndex","emitChangeDisclaimers","isRemoveAll","hideRemoveAll","hideClose","removeAllItems","removeItems","disclaimersAreChanged","isArray","currentValues","some","ThfDisclaimerGroupComponent","ThfDisclaimerRemoveComponent","removeAllAction","removeAction","ThfDisclaimerGroupModule","ThfDividerBaseComponent","ThfDividerComponent","ThfDividerModule","thfPopupDefaultPosition","ThfPopupBaseComponent","_hideArrow","_isCornerAlign","_position","showPopup","_actions","_customPositions","_target","ThfPopupComponent","viewContainerRef","router","onScroll","removeListeners","onActionClick","popupAction","actionNoDisabled","returnBooleanValue","action","openUrl","oldTarget","validateInitialContent","clickedOutDisabledItem","elementContains","parentElement","clickedOutHeaderTemplate","popupHeaderTemplate","popupRef","clickedOutTarget","closePopupOnClickout","className","hasContentToShow","clientHeight","initializeListeners","navigate","setPosition","isCornerAlign","Router","ThfPopupModule","schemas","ThfDropdownBaseComponent","icon","ThfDropdownComponent","hideDropdown","onKeyDown","dropdownRef","disabled","checkClickArea","wasClickedOnDropdown","ThfDropdownModule","ThfLanguageService","localStorage","getItem","setItem","getLanguage","languageDefault","getLanguageDefault","setLanguageDefault","providedIn","thfLoadingOverlayLiteralsDefault","loading","ThfLoadingOverlayBaseComponent","languageService","_screenLock","getTextDefault","screenLock","_text","ThfLoadingOverlayComponent","ThfLanguageModule","ThfLoadingBaseComponent","ThfLoadingComponent","ThfLoadingModule","ThfModalBaseComponent","clickOut","onXClosed","xClosed","validPrimaryAction","primaryAction","ThfModalService","ThfModalComponent","thfModalService","focusableElements","id","modalActive","removeEventListeners","sourceElement","focus","closeModalOnEscapeKey","preventDefault","stopPropagation","getPrimaryActionButtonType","danger","getSecondaryActionButtonType","secondaryAction","onClickOut","modalContent","activeElement","handleFocus","initFocus","focusFunction","firstElement","setFirstElement","ThfModalModule","ThfTimePipe","transform","format","amountOfF","lastIndexOf","addDotMiliseconds","formatMiliseconds","getFormatMiliseconds","formatValue","hour","minutes","seconds","Pipe","name","ThfTimeModule","bootstrap","ThfTableColumnIconComponent","_icons","convertToColumnIcon","checkDisabled","iconColumn","row","getIconColorClass","columnIcon","color","getIconColor","column","onIconClick","isAbleAction","tooltipMouseEnter","tooltipMouseLeave","Color01","Color02","Color03","Color04","Color05","Color06","Color07","Color08","Color09","Color10","Color11","Color12","ThfColorPaletteService","getColor","ThfColorPaletteEnum","getColorFromType","ThfTableColumnLabelComponent","thfColorPaletteService","_value","ThfTableColumnLinkComponent","thfTableContainer","thfTableLiteralsDefault","noColumns","noData","loadingData","loadMoreData","seeCompleteSubtitle","completeSubtitle","ThfTableBaseComponent","_columns","_hideDetail","_hideTextOverflow","allSelected","allUnselected","showMore","unselected","selectAll","sortedColumn","hasItems","hasColumns","columns","getDefaultColumns","setColumnLink","calculateWidthHeaders","_container","showContainer","hideTextOverflow","calculateHeightTableContainer","hideDetail","_literals","_checkbox","checkbox","actions","sort","showMoreDisabled","striped","hideSelectAll","singleSelect","ngOnChanges","selectAllRows","$selected","emitSelectAllEvents","selectRow","emitSelectEvents","configAfterSelectRow","selectDetailRow","getMainColumns","typesValid","col","getColumnMasterDetail","getClassColor","getColumnColor","columnColor","getSubtitleColumns","getIconColumns","getNameColumnDetail","detail","getSelectedRows","getUnselectedRows","toggleRowAction","toggleShowAction","$showAction","sortColumn","sortArray","onShowMore","keys","key","rows","unselectOtherRows","isEverySelected","every","ThfTableRowTemplateDirective","templateRef","TemplateRef","ThfTableComponent","decimalPipe","tableOpacity","visibleElement","clickListener","masterDetail","hideSelect","visibleActions","tableRowTemplate","visible","container","hideContainer","checkChangesItems","verifyCalculateHeightTableContainer","tableWrapperElement","executeTableAction","tableAction","validateTableAction","columnCountForMasterDetail","columnCount","formatNumber","getSubtitleColumn","subtitleColumn","subtitles","subtitleItem","getBooleanLabel","rowValue","columnBoolean","boolean","trueLabel","falseLabel","getColumnIcons","columnValues","icons","mergeCustomIcons","customIcon","getColumnLabel","columnLabel","labels","labelItem","getColumnTitleLabel","verifyWidthColumnsPixels","headersTable","header","divHeader","containsMasterDetail","isShowRowTemplate","thfTableRowTemplateShow","isShowMasterDetail","$showDetail","hasRowTemplate","scrollWidth","innerText","checkingIfColumnHasTooltip","verifyChangeHeightInFooter","footerHeight","getHeightTableFooter","parseFloat","heightTableContainer","setTableOpacity","togglePopup","targetRef","popupTarget","thfPopupComponent","containerClassList","tableContainerElement","firstChild","add","remove","changesItems","tableFooterElement","customIcons","columnValue","foundCustomIcon","DecimalPipe","ContentChild","ViewChildren","ThfTableDetailComponent","hasCheckbox","_detail","returnThfTableDetailObject","formatNumberDetail","onSelectRow","ThfTableShowSubtitleComponent","ThfTableSubtitleCircleComponent","hideTitle","_subtitle","subtitle","ThfTableSubtitleFooterComponent","toggleShowCompleteSubtitle","getContainerSize","getItemsSize","containerSize","itemsSize","showSubtitle","ThfTableModule","ThfCalendarLangService$1","wordMonth","wordYear","lang","getWordMonth","getWordYear","getArrayMonths","getWeedDays","getArrayWeekDays","ThfCalendarService$1","firstWeekDay","ThfCalendarComponent$1","displayWeedDays","overlayInvisible","selectedDateChange","submit","_dateEnd","_selectedDate","selectedDate","_dateStart","getArrayDecade","onPrevMonth","setMobileVisualization","requiredFailed","required","valid","maxlengthFailed","maxlength","validMaxlength","Number","minlengthFailed","minlength","validMinlength","thfCheckboxGroupColumnsDefaultLength","ThfCheckboxGroupBaseComponent","checkedOptions","checkedOptionsList","mdColumns","_indeterminate","_required","ngModelChange","getGridSystemColumns","checkIndeterminate","indeterminate","_options","changeValue","checkOption","checkOptionModel","optionsModel","generateCheckOptions","abstractControl","isInvalidIndeterminate","checkColumnsRange","maxColumns","optionChecked","options","option","gridSystemColumns","optionFind","ThfCheckboxGroupComponent","ngAfterViewChecked","ThfCleanBaseComponent","changeEvent","clear","setInputValue","showIcon","getInputValue","hasCleanAttr","isDisabled","isReadonly","parentComponent","clean","readonly","ThfCleanComponent","inputRef","arrowDown","arrowUp","backspace","delete","enter","esc","space","tab","endsWith","thfComboLiteralsDefault","ThfComboBaseComponent","_changeOnEnter","_debounceTime","_disabledInitFilter","_fieldLabel","_fieldValue","_filterMinlength","_filterMode","ThfComboFilterMode","cacheOptions","cacheStaticOptions","firstInWriteValue","isFirstFilter","isFiltering","previousSearchValue","visibleOptions","placeholder","_filterService","configAfterSetFilterService","parsedValue","isNaN","unsubscribeKeyupObservable","initInputObservable","filterService","fieldValue","fieldLabel","parseValue","isInteger","selectedValue","changeOnEnter","validAndSortOptions","updateComboList","filterMode","_filterParams","filterParams","onInitService","setService","defaultService","configProperties","sortOptions","compareOptions","compareMethod","search","getOptionFromValue","isEqual","getOptionFromLabel","updateSelectedValue","isUpdateModel","isWriteValue","optionLabel","updateInternalVariables","optionValue","updateModel","callModelChange","onModelChange","inputValue","searchForLabel","newOptions_1","selectedView","copyOptions","newOptions","selectedOption","getNextOption","optionFound","found","getIndexSelectedView","compareObjects","obj1","obj2","JSON","stringify","verifyValidOption","updateSelectedValueWithOldOption","isInputValueDiffSelectedLabel","getObjectByValue","onModelTouched","keyupSubscribe","fromWriteValue","oldOption","ThfComboFilterService","getFilteredData","HttpParams","fromString","pipe","response","parseToArrayComboOption","parseToComboOption","ThfComboComponent","controlPosition","sanitized","_isServerSearching","comboIcon","comboOpen","isProcessingGetObjectByValue","scrollTop","shouldMarkLetters","adjustContainerPosition","setContainerPosition","filterSubscription","ThfKeyCodeEnum","controlComboVisibility","selectPreviousOption","selectNextOption","onKeyUp","useDefaultOptionsService","keyupObservable","fromEvent","inputElement","isValidCharacterToSearch","currentTarget","distinctUntilChanged","tap","debounceTime","filterMinlength","controlApplyFilter","applyFilter","isServerSearching","setOptionsByApplyFilter","updateOptionByFilteredValue","onOptionClick","currentViewValue","nextOption","visibleOption","toggleComboVisibility","disabledInitFilter","applyFilterInFirstClick","toOpen","scrollTo","setScrollTop","wasClickedOnToggle","iconElement","contentElement","getLabelFormatted","labelInput","labelLowerCase","openTagBold","safeHtml","bypassSecurityTrustHtml","searchOnEnter","eventResizeListener","containerElement","DomSanitizer","ThfMask","mask","formatModel","initialPosition","finalPosition","pattern","getRegexFromMask","valueToInput","valueToModel","keyup","$event","controlFormatting","resetPositions","setPositionNotShiftKey","setSelectionRange","shiftKey","setPositions","keydown","ctrlKey","metaKey","isKeyValid","revertPositions","getPosition","checkMaskBefore","changePosition","clearRangeSelection","checkMaskAfter","isBackspace","selectionStart","selectionEnd","blur","tempPosition","valueProcessed","maskTmp","arrMasks","contMasks","hasOptionalNumber","replaceOptionalNumber","formattingEnds","guide","listValidKeys","contGuide","removeFormattingValue","charValue","isFixedCharacterGuide","isKeyValidMask","testRegex","getFixedCharacterGuide","isKeyCodeValid","keyMask","replaceMask","regex","char","thfDatepickerFormatDefault","ThfDatepickerBaseComponent","_format","_placeholder","firstStart","isExtendedISO","onChangeModel","onTouchedModel","errorPattern","onblur","onchange","objMask","buildMask","refreshValue","getDateFromString","formatToDate","dateFormatted","controlModel","callOnChange","convertDateToISODate","retry","thfCalendarPositionDefault","ThfDatepickerComponent","setDialogPickerStyleDisplay","inputEl","togglePicker","calendar","closeCalendar","setCalendarPosition","dateSelected","wasClickedOnPicker","dialogPicker","iconDatepicker","hasOverlayClass","hasAttrCalendar","onKeyup","onKeydown","hasInvalidClass","getErrorPattern","valueBeforeChange","controlChangeEmitter","eventOnBlur","newDate","eventOnChange","elementValue","verifyMobile","eventOnClick","isValidDateIso","isValidExtendedIso","dateTemp","dateModelFormatted","timeoutChange","hasAttribute","display","thfDatepickerRangeLiteralsDefault","invalidFormat","startDateGreaterThanEndDate","ThfDatepickerRangeBaseComponent","thfDateService","errorMessage","_clean","_readonly","dateRange","isDateRangeInputFormatValid","isStartDateRangeInputValid","onChange","_endDate","convertPatternDateFormat","endDate","updateScreenByModel","_startDate","control","requiredDateRangeFailed","dateRangeObjectFailed","dateRangeFormatFailed","dateRangeFailed","resetDateRangeInputValidation","isDateRangeObject","dateFormatFailed","isDateRangeInputValid","ThfDatepickerRangeComponent","thfDatepickerRangeElement","startDateInputValue","endDateInputValue","endDateInput","startDateInput","getKeyCode","getTargetElement","srcElement","isValidKey","thfMaskObject","onBlur","removeFocusFromDatePickerRangeField","onFocus","applyFocusOnDatePickerRangeField","isSetFocusOnBackspace","setFocusOnBackspace","isStartDateTargetEvent","startDateInputName","setFocus","updateModelByScreen","isStartDateValid","isDateValid","endDateFormated","formatModelToScreen","startDateFormated","dateRangeField","formatDate","String","formatScreenToModel","getDateRangeFormatValidation","setDateRangeInputValidation","isValid","dateRangeModel","getValidatedModel","isEqualBeforeValue","endDateInputName","inputName","setFocusOnArrowLeft","setFocusOnArrowRight","setFocusOnStartDateCompleted","setFocusAndPosition","selectionRange","focusOnElement","isCursorAtStartOfInput","inputLength","isCursorAtEndOfInput","isLastKeyPressed","isNewDateCompleted","endDateFormatted","startDateFormatted","isDateRangeInputUncompleted","isDirtyDateRangeInput","dateFormatValidation","ThfInputBaseComponent","passedWriteValue","maskFormatModel","changeModel","onChangePropagate","_maxlength","_minlength","controlChangeModelEmitter","callUpdateModelWithTimeout","modelLastUpdate","getScreenValue","reg","patternFailed","validatePatternOnWriteValue","extraValidation","writeValueModel","THF_DECIMAL_DEFAULT_DECIMALS_LENGTH","THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH","ThfDecimalComponent","_decimalsLength","_thousandMaxlength","decimalSeparator","fireChange","isKeyboardAndroid","minusSign","oldDotsLength","thousandSeparator","thousand","decimal","thousandMaxlength","putFocus","setPaddingInput","hasLetters","isValidNumber","keyValue","fromCharCode","validKey","containsMoreThanOneComma","setViewValue","valueWithoutThousandSeparator","formatValueWithoutThousandSeparator","formatToViewValue","onInput","modelValue","viewValue","onInputKeyboardAndroid","addZeroBefore","formatMask","setCursorInput","formatToModelValue","setPositionValue","paddingRight","formatedViewValue","containsComma","foundComma","formattedValue","replaceCommaToDot","toFixed","decimalsLength","formatedNumber","numberValue","valueBeforeDot","valueAfterDot","getValueBeforeSeparator","getValueAfterSeparator","separator","hasLessDot","dots","dotsLength","hasMoreDot","hasMinusSignInvalidPosition","keyIsMinusSign","isInvalidKey","charCode","isInvalidNumber","verifyInsertComma","verifyThousandLength","verifyValueAfterComma","verifyInsertMinusSign","validateCursorPositionBeforeSeparator","verifyDecimalLengthIsZeroAndKeyPressedIsComma","isKeyDecimalSeparator","isPositionAfterDecimalSeparator","positionCursor","indexComma","isSelectionStartDifferentSelectionEnd","setInitialSelectionRange","replaceAt","substr","originalValue","valueBeforeSeparator","valueBeforeSeparatorOriginal","indexMinusSign","positionMinusSign","occurancesMinusSign","valueAfterSeparator","ThfInputGeneric","afterViewInit","eventOnInput","validMaxLength","eventOnFocus","validateClassesForPattern","verifyPattern","screenValue","ThfEmailComponent","listener","ThfFieldContainerComponent","_optional","getOptionalText","ThfFieldContainerBottomComponent","ThfLoginComponent","ThfLookupBaseComponent","_focus","oldValue","initializeColumn","keysDescription","selectValue","valueSelected","searchById","getFormattedLabel","cleanModel","cleanViewValue","selectModel","setUrl","ThfLookupFilterService","httpClient","page","pageSize","validatedFilterParams","validateParams","ThfComponentInjectorService","componentResolver","applicationRef","injector","createComponentInApplication","component","attachView","hostView","domElem","rootNodes","destroyComponentInApplication","detachView","ApplicationRef","Injector","thfLookupLiteralsDefault","modalPrimaryActionLabel","modalSecondaryActionLabel","modalPlaceholder","modalTitle","modalTableNoColumns","modalTableNoData","modalTableLoadingData","modalTableLoadMoreData","ThfLookupModalBaseComponent","hasNext","isLoading","thfModal","searchValue","title","setTableLiterals","_title","searchSubscription","showMoreSubscription","initializeData","data","showMoreEvent","tableLiterals","ThfLookupModalComponent","keyUpObservable","containerHeight","tableHeight","initializeEventInput","setTableHeight","inputSearchEl","validateEnterPressed","openModal","ThfLookupModalService","thfComponentInjector","selectValueEvent","changeDetectorRef","ThfLookupComponent","thfLookupFilterService","thfLookupModalService","modalSubscription","openLookup","isAllowedOpenModal","fieldFormat","setInputValueWithFieldFormat","getViewValue","searchEvent","console","warn","objectSelected","isEmpty","fieldFormated","ThfMultiselectSearchComponent","placeholderSearch","ThfMultiselectDropdownComponent","show","haveOptions","hideSearch","selectedValues","changeSearch","closeDropdown","isSelectedItem","selectedItem","clickItem","check","updateSelectedValues","searchElement","checked","indexSelectedValues","callChangeSearch","controlVisibility","checkInitialOptions","thfMultiselectLiteralsDefault","ThfMultiselectBaseComponent","ThfMultiselectFilterMode","_hideSearch","_sort","readyToValidation","selectedOptions","visibleOptionsDropdown","visibleDisclaimers","updateModelToValidate","updateVisibleItems","updateList","ngAfterContentChecked","setUndefinedLabels","optionA","optionB","getValuesFromOptions","eventChange","lastLengthModel","getLabelByValue","changeItems","updateSelectedOptions","searchByLabel","ThfMultiselectComponent","disclaimerOffset","dropdownOpen","isCalculateVisibleItems","inputWidth","getInputWidth","getDisclaimersWidth","calculateVisibleItems","disclaimersWidth","disclaimersVisible","sum","controlDropdownVisibility","toggleDropdownVisibility","openDropdown","scrollToSelectedOptions","dropdown","setVisibleOptionsDropdown","getPlaceholder","closeDisclaimer","dropdownElement","disclaimerContainerElement","clickOutListener","setPositionDropdown","ThfMultiselectItemComponent","itemClicked","thfRichTextBodyCommands","ThfRichTextBodyComponent","commands","bodyElement","designMode","updateValueWithModelValue","executeCommand","command","execCommand","emitSelectionCommands","update","queryCommandState","innerHTML","insertAdjacentHTML","ThfRichTextBaseComponent","invalid","ThfRichTextComponent","validateClassesForRequired","updateValue","thfRichTextLiteralsDefault","bold","italic","underline","center","justify","unorderedList","ThfRichTextToolbarComponent","alignButtons","emitAlignCommand","formatButtons","emitCommand","listButtons","toggleDisableButtons","removeButtonFocus","setButtonsStates","btn","toolbarElement","state","ThfInputComponent","ThfNumberBaseComponent","valueMaxlength","substringValue","isEndWithDot","ThfNumberComponent","min","parsedInt","max","maxFailed","ThfPasswordComponent","_hidePasswordPeek","visiblePassword","showPassword","thfRadioGroupColumnsDefaultLength","ThfRadioGroupBaseComponent","changedValue","getElementByValue","ThfRadioGroupComponent","eventClick","isArrowKey","ThfSelectBaseComponent","onUpdateOptions","onValidatorChange","ThfSelectOptionTemplateDirective","thfSelectContentPositionDefault","ThfSelectComponent","selectIcon","disableDefaultEventAndToggleButton","altKey","toggleButton","hideDropDown","markForCheck","selectElement","onSelectChange","ulDropdpwn","scrollValue","heightScrollValue","getSelectItemHeight","scrollPosition","query","selectButtonElement","selectItem","contentList","changeDetection","ChangeDetectionStrategy","OnPush","Right","Left","ThfSwitchBaseComponent","switchValue","labelOn","labelOff","labelPosition","ThfSwitchLabelPosition","ThfSwitchComponent","getLabelPosition","getSwitchPosition","ThfTextareaBaseComponent","_rows","ThfTextareaComponent","Uploaded","Uploading","ThfUploadFile","file","extension","getExtension","size","rawFile","uid","generateUUID","ThfUploadStatus","s4","thfUploadLiteralsDefault","selectFile","deleteFile","cancel","tryAgain","startSending","ThfUploadBaseComponent","uploadService","autoUpload","onUpload","onSuccess","_hideSelectButton","_hideSendButton","_fileRestrictions","restrictions","setAllowedExtensions","_formField","getUploadService","formField","currentFiles","comparedValue","parseFiles","isExceededFileLimit","currentFilesLength","isMultiple","fileRestrictions","maxFiles","files","thfUploadFiles","filesLength","checkRestrictions","insertFileInFiles","allowedExtensions","minFileSize","maxFileSize","isAccept","isAllowedExtension","isAcceptSize","existsFileSameName","currentFile","newFile","updateExistsFileInFiles","ext","_allowedExtensions","fileIndex","ThfUploadBaseService","requests","upload","tOnUpload","uploadCallback","successCallback","errorCallback","uploadEvent","formData","FormData","fileName","append","sendFile","request","getRequest","HttpEventType","UploadProgress","addRequest","percentDone","round","loaded","total","HttpResponse","err","req","HttpRequest","reportProgress","stopRequestByFile","callback","requestObj","removeRequest","ThfUploadService","ThfUploadComponent","calledByCleanInputValue","hideSendButton","hasFileNotUploaded","hasAnyFileUploading","cleanInputValue","onFileChange","uploadFiles","removeFile","selectFiles","inputFile","sendFiles","getFileSize","kbSize","ceil","getThfIcon","isStatusFile","stopUpload","stopUploadHandler","filesFiltered","percent","uploadingHandler","eventResponse","successHandler","eventError","errorHandler","addFileNameClass","setProgressStatus","setUploadStatus","removeFileNameClass","isShow","divProgress","isDisplay","divStatus","ThfUrlComponent","ThfFieldModule","FormsModule","HttpClientModule","Horizontal","Vertical","thfInfoOrientationDefault","ThfInfoOrientation","ThfInfoBaseComponent","_orientation","thfInfoOrientation","_labelSize","ThfInfoComponent","ThfInfoModule","Danger","Info","Success","Warning","thfTagOrientationDefault","ThfTagOrientation","thfTagTypeDefault","ThfTagType","ThfTagBaseComponent","thfTagOrientation","_icon","ThfTagIcon","ThfTagComponent","isClickable","observers","submittedTagItem","ThfTagModule","ThfDynamicFormBaseComponent","_groupForm","formOutput","ThfDynamicFormComponent","_form","emitForm","groupForm","form","getGridColumnsClasses","smColumns","lgColumns","xlColumns","gridColumns","isVisibleField","field","Boolean","Currency","DateTime","Time","ThfDynamicFormFieldsBaseComponent","titleCasePipe","visibleFields","_fields","compareTo","getVisibleFields","fields","existsProperty","printError","createField","convertOptions","getComponentControl","componentClass","gridSmColumns","gridMdColumns","gridLgColumns","gridXlColumns","toLocaleLowerCase","isNumberType","isCurrencyType","isSelect","isRadioGroup","isCheckboxGroup","isMultiselect","ThfDynamicFieldType","isCombo","isLookup","isTextarea","isPassword","optionsService","optionsMulti","searchService","secret","ThfDynamicFormFieldsComponent","changes","trackBy","viewProviders","ControlContainer","NgForm","TitleCasePipe","ThfDynamicViewBaseComponent","currencyPipe","datePipe","timePipe","_showAllValue","getConfiguredFields","newFields","getMergedFields","mergedFields","getValueFields","valueField","fieldIndex","transformValue","classesGridColumns","cssClass","transformedValue","ThfDynamicViewComponent","showAllValue","CurrencyPipe","DatePipe","ThfDynamicModule","ThfGridCellActionComponent","onKeyDownContent","ThfGridCellComponent","edit","editValue","freeze","tabIndex","valueChange","_width","onEditCell","dblclick","onBlurInput","onKeyDownInput","ThfGridComponent","elRef","lastCell","lastRow","lastColumn","currencyCell","currencyRow","currencyColumn","logger","widthFreeze","widthActions","rowActions","cssWidth","widthTableWrapper","tableWrapper","freezeColumns","prev","current","actionsColumns","cancelRow","x","isEmptyRow","removeRow","currencyObj","selectCell","beforeRemove","tableKeydown","direction","prow","pcol","saveRow","insertRow","tableClick","obj","prop","beforeSave","requireds","beforeInsert","nextCell","ThfGridHeadComponent","ThfGridModule","thfListViewLiteralsDefault","hideDetails","showDetails","ThfListViewBaseComponent","showHeader","titleAction","_hideSelectAll","showMainHeader","_select","select","_showMoreDisabled","onClickAction","listViewAction","cleanItem","deleteInternalAttrs","runTitleAction","listItem","itemWithPublicProperties","selectAllListItems","selectListItem","checkIfItemsAreSelected","itemCopy","ThfListViewContentTemplateDirective","ThfListViewDetailTemplateDirective","ThfListViewComponent","listViewContentTemplate","listViewDetailTemplate","ngAfterContentInit","initShowDetail","checkItemsChange","checkTitleType","propertyLink","getItemTitle","hasContentTemplate","propertyTitle","hasDetailTemplate","showDetail","animations","trigger","overflow-y","transition","animate","ThfListViewModule","THF_BADGE_COLORS","ThfBadgeBaseComponent","_color","setBadgeValue","validRangeValue","badgeValue","ThfBadgeComponent","ThfBadgeModule","thfMenuLiteralsDefault","itemNotFound","ThfMenuBaseComponent","menuService","_collapsed","_filter","_maxLevel","_menus","collapsed","validateCollapseClass","menus","filteredItems","_service","_params","_logo","_shortLogo","setMenuExtraProperties","allowIcons","allowCollapseMenu","menuItem","_level","shortLabel","removeBadgeAlert","setMenuItemProperties","subItems","processSubItems","setMenuType","validateMenus","menu","validateMenu","menuItems","previousItem","maxLevel","setMenuBadgeAlert","subItem","parent","child","childHasSubItems","childHasBadgeAlert","childHasBadge","badge","ThfMenuHeaderTemplateDirective","ThfMenuItemsService","subjectParent","subjectChild","sendToParentMenuClicked","receiveFromChildMenuClicked","asObservable","sendToChildMenuClicked","receiveFromParentMenuClicked","ThfMenuService","ThfMenuComponent","menuItemsService","filterLoading","mobileOpened","filteringItems","menuInitialized","menuPrevious","activeMenuItem","groupedMenuItem","isCollapsed","collapsedMobile","enableCollapseButton","menuCurrent","updateMenu","itemSubscription","routeSubscription","subscribeToMenuItem","subscribeToRoute","urlRouter","checkingRouterChildrenFragments","checkActiveMenuByUrl","activateMenuByUrl","urlPath","linkActive","activateMenuItem","collapse","validateToggleMenu","debounceFilter","timeoutFilter","filterProcess","expand","clickMenuItem","events","NavigationEnd","NavigationCancel","toggleMenuMobile","createResizeListener","activateCollapseSubMenuItem","clearGroupMenuIfFirstLevel","isActiveItemMenuSubMenu","openParentMenu","active","grouped","activatedByRoute","areSubMenus","childrenPrimary","parseUrl","root","children","segments","it","executeMenuAction","groupMenuItem","convertToMenuItemFiltered","menuItemFiltered","toggleResize","filterItems","trimFilter","filterOnService","_b","_c","filterLocalItems","findItems","showNoData","catch","menuItemsFiltered","toPromise","findParent","getParent","findRootParent","getRootParent","getActiveMenuParent","toggleMenuCollapse","isRootMenuEqualGroupedMenu","childMenu","toggleGroupedMenuItem","wrapper","parentNode","ThfMenuFilterComponent","ThfMenuItemComponent","_isSelected","_isSubItem","maxHeight","_badgeValue","isSelectedSubItem","isSelected","isSubItem","_subItems","subitems","isOpened","calcMenuSubItemsMaxHeight","processMenuItem","level","accordionAnimation","menuActive","menuOpened","hasSubItemOpened","getMinimumHeight","activateMenu","menuSubItems","minimumHeight","hasSubItem","groupedMenu","isMenuOpened","ThfMenuModule","ThfMenuPanelBaseComponent","ThfMenuPanelItemsService","ThfMenuPanelComponent","location","rounterEvent","Location","ThfMenuPanelItemComponent","itemsSubscription","subscribeMenuClickedFromParent","menuItemInternal","ThfMenuPanelModule","ThfNavbarActionComponent","ThfNavbarActionPopupComponent","getLastIconAction","iconActions","ThfNavbarActionsComponent","_iconActions","ThfNavbarActionsModule","thfNavbarLiteralsDefault","navbarLinks","ThfNavbarBaseComponent","_shadow","ThfNavbarItemComponent","itemClick","ThfNavbarItemsComponent","checkActiveItemByUrl","checkRouterChildrenFragments","ThfNavbarComponent","builder","showItemsNavigation","offset","displayItemsNavigation","menuWrapperAdjust","mediaQuery","removeListener","navigateItems","orientation","navigateLeft","navigateRight","adjustNavbarMenu","navbarMenu","navbarLogo","addListener","changed","matches","adjustUserMenu","userMenuItems","animation","buildTransitionAnimation","player","navbarItems","navbarItemsContainer","play","build","keyframes","navbarItemsWidth","navbarItemsElement","allNavbarItemsWidth","allNavbarItems","previous","matchMedia","maxAllowedOffset","itemBreakPoint","movementInPixels","navbarItem","offsetLeft","disableRight","navbarItemOffset","AnimationBuilder","ThfNavbarItemsModule","ThfNavbarItemNavigationComponent","ThfNavbarLogoComponent","ThfNavbarModule","ThfPageComponent","ThfPageBaseComponent","ThfPageContentComponent","contentOpacity","overflowY","recalculateHeaderSize","pageHeaderElement","setHeightContent","thfPageHeader","newHeight","offsetTop","ThfPageContentBaseComponent","ThfPageDefaultBaseComponent","setDropdownActions","ThfPageDefaultComponent","limitPrimaryActions","maxWidthMobile","setIsMobile","actionIsDisabled","callAction","hasPageHeader","dropdownActions","thfPageDetailLiteralsDefault","back","ThfPageDetailBaseComponent","hasAction","parentContext","ThfPageDetailComponent","callActionFn","hasActionFn","hasAnyAction","hasEditFn","hasEditOrRemoveFn","thfPageEditLiteralsDefault","save","saveNew","ThfPageEditBaseComponent","ThfPageEditComponent","getIcon","isPrimaryAction","getType","isCancelPrimaryAction","isSaveNewPrimaryAction","hasSaveAction","ThfPageHeaderBaseComponent","_breadcrumb","ThfPageHeaderComponent","thfPageListLiteralsDefault","otherActions","ThfPageListBaseComponent","_disclaimerGroup","ThfPageListComponent","isRecalculate","advancedSearch","initFixedLiterals","callActionFilter","onkeypress","newModel","ngModel","onChangeDisclaimerGroup","disclaimerGroup","ThfPageModule","THF_POPOVER_DEFAULT_POSITION","THF_POPOVER_DEFAULT_TRIGGER","THF_POPOVER_TRIGGERS","ThfPopoverBaseComponent","_trigger","ThfPopoverComponent","initEventListenerFunction","popoverElement","setRendererListenInit","setPopoverPosition","setOpacity","opacity","mouseEnterListener","mouseLeaveListener","hidden","ThfPopoverModule","ThfSlideCirclesComponent","thfSlideIntervalDefault","ThfSlideBaseComponent","_interval","setSlideHeight","startInterval","cancelInterval","_slides","setSlideItems","startSlide","ThfSlideContentTemplateDirective","ThfSlideItemComponent","isIEOrEdge","setLinkType","ThfSlideComponent","isLoaded","currentSlideIndex","slideItems","slide","itemsElements","slideContentTemplate","slideItemWidth","slides","setSlideItemWidth","goToItem","hasElements","hasSlides","interval","nextControl","previousControl","setHeight","createArrayForTemplate","createArrayFromSlides","image","setDefaultHeight","isImageSlide","thfSlideDefaultHeight","imageHeight","first","itemElement","clearInterval","setInterval","ThfSlideControlComponent","ThfSlideModule","Active","Default","Disabled","Done","ThfStepComponent","_status","ThfStepperStatus","setDisplayOnActiveOrError","ThfStepperCircleComponent","isLargeStep","thfStepperOrientationDefault","ThfStepperOrientation","ThfStepperBaseComponent","_sequential","_step","_steps","onChangeStep","steps","sequential","ThfStepperComponent","useThfSteps","thfSteps","activeFirstStep","controlStepsStatus","getThfSteps","isDisabledStep","isErrorStep","changeStep","firstStep","getStepsAndIndex","currentActiveStep","stepIndex","nextStep","previousIndex","previousStep","isDifferentStep","allowNextStep","currentStepIndex","onStepActive","previousActiveStep","stepChild","setPreviousStepAsDone","trackByFn","hasStepActive","thfStep","nextStepIndex","isBeforeStep","canActiveNextStep","getStepperStatusByCanActive","setStepAsActive","setNextStepAsDefault","setFinalSteppersAsDisabled","toArray","currentStep","ContentChildren","ThfStepperLabelComponent","thfStepperStepSizeDefault","thfStepLiteralsDefault","ThfStepperStepComponent","_stepIcons","_stepSize","activated","_label","circleContent","stepIcons","stepSize","isVerticalOrientation","halfStepSize","getStatusClass","onEnter","ThfStepperModule","ThfTabButtonComponent","changeState","_active","emitActivated","_hide","setDisplayOnHide","hide","currentValue","ThfTabBaseComponent","setDisplayOnActive","ThfTabComponent","ThfTabDropdownComponent","tabs","getContainerClass","small","togglePopover","popover","ThfTabsBaseComponent","thfTabsMaxNumberOfTabs","ThfTabsComponent","maxNumberOfTabs","visibleTabs","_tab","closePopover","tabDropdown","isVisibleTab","visibleTabIndex","visibleTab","onTabActive","previousActiveTab","tabChild","deactivateTab","onTabChangeState","activeDistinctTab","selectedTab","_i","activeFirstTab","ThfTabsModule","thfToolbarActionsIconDefault","ThfToolbarActionsComponent","_actionsIcon","ThfToolbarBaseComponent","showNotification","_notificationNumber","profile","profileActions","ThfToolbarComponent","titleService","setTitle","newTitle","Title","ThfToolbarNotificationComponent","thfToolbarProfileDefaultAvatar","ThfToolbarProfileComponent","defaultAvatar","ThfToolbarModule","ThfWidgetBaseComponent","_primary","onDisabled","setting","_background","_help","_primaryLabel","ThfWidgetComponent","hasTitleHelpOrSetting","help","openHelp","runPrimaryAction","runSecondaryAction","bodyHeight","hasSettingOrHelp","noShadow","primaryLabel","settingOutput","ThfWidgetModule","ThfComponentsModule","ThfDirectivesModule","ThfGuardsModule","Alert","Confirm","ThfDialogBaseService","confirm","confirmOptions","openDialog","ThfDialogType","alert","alertOptions","thfDialogAlertLiteralsDefault","ok","thfDialogConfirmLiteralsDefault","ThfDialogComponent","closeSubscription","configDialog","secondaryLabel","dialogOptions","dialogType","message","setDialogLiterals","literalsConfirm","literalsAlert","alertLiterals","confirmLiterals","ThfDialogService","Bottom","Top","Information","ThfNotificationBaseService","stackTop","stackBottom","durationToaster","success","notification","createToaster","buildToaster","ThfToasterType","warning","information","ThfToasterOrientation","toaster","actionLabel","destroyToaster","ThfToasterComponent","elementeRef","margin","observableOnClose","showToaster","toasterPosition","configToaster","thfToaster","toasterType","getShowToaster","getToasterPosition","getToasterType","thfToasterAction","ThfToasterBaseComponent","ThfNotificationService","stack","count","ThfHttpInterceptorBaseService","dialog","notificationTypes","intercept","cloneRequest","clone","headers","has","cloneRequestWithoutNoErrorHeaderParam","handle","processResponse","processErrorResponse","_messages","messages","errorResponse","code","detailedMessage","hasNoErrorParam","noErrorParam","typeNotification","notificationAction","generateNotificationAction","notificationLabel","notificationMessage","details","detailError","helpUrl","generateDialogDetailFunction","generateUrlHelpFunction","ThfHttpInterceptorService","ThfHttpInterceptorModule","HTTP_INTERCEPTORS","useClass","ThfHttpRequesControltService","controlHttpRequest","getControlHttpRequest","send","ThfHttpRequestInterceptorService","loadingOverlayComponent","pendingRequests","overlayRequests","requestClone","requestCloneWithoutHeaderParam","setCountPendingRequests","setCountOverlayRequests","catchError","throwError","getCountPendingRequests","buildLoading","destroyLoading","headersParams","isRequestClone","headerParam","isIncrement","hasCountPendingRequestHeaderParam","ThfHttpRequestModule","ThfInterceptorsModule","ThfPipesModule","ThfColorPaletteModule","ThfComponentInjectorModule","ThfControlPositionModule","ThfDateTimeModule","ThfDialogModule","ThfI18nBasePipe","args_1","tslib_1.__values","args_1_1","arg","ThfI18nPipe","ThfNotificationModule","ThfServicesModule","ThfModule","I18N_CONFIG","InjectionToken","ThfI18nBaseService","config","varI18n","useCache","servicesContext","setConfig","reload","href","contextDefault","setVarI18n","getLiterals","Observable","observer","getLiteralsFromContextService","getLiteralsFromContextConstant","translations","languageAlternative","languageSearch","mergeObject","searchInVarI18n","countObject","getLiteralsLocalStorageAndCache","translationTemp","searchInLocalStorage","updateVarI18n","getHttpService","updateLocalStorage","completeFaultLiterals","complete","literal","translation","content","contexts","contextContent","languageContent","objPermanent","Inject","decorators","ThfI18nService","returnThfI18nService","ThfI18nModule","ngModule","useValue","APP_INITIALIZER","useFactory","initializeLanguageDefault","deps","default"],"mappings":"8zBAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YA8BzB,SAASI,EAAUC,EAASC,EAAYC,EAAGC,GAC9C,OAAO,IAAKD,IAAMA,EAAIE,UAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,SAAEK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAASF,EAAKI,GAAUA,EAAOC,KAAOT,EAAQQ,EAAOL,OAAS,IAAIN,EAAE,SAAUG,GAAWA,EAAQQ,EAAOL,SAAWO,KAAKR,EAAWK,GACnIH,GAAMN,EAAYA,EAAUL,MAAME,EAASC,GAAc,KAAKS,UAI/D,SAASM,EAAYhB,EAASiB,GACjC,IAAsGC,EAAGC,EAAG5B,EAAG6B,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPhC,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOiC,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEV,KAAMgB,EAAK,GAAIC,QAASD,EAAK,GAAIE,SAAUF,EAAK,IAAwB,mBAAXG,SAA0BT,EAAES,OAAOC,UAAY,WAAa,OAAO7C,OAAUmC,EACvJ,SAASM,EAAKhC,GAAK,OAAO,SAAUqC,GAAK,OACzC,SAAcC,GACV,GAAId,EAAG,MAAM,IAAIe,UAAU,mCAC3B,KAAOZ,GAAG,IACN,GAAIH,EAAI,EAAGC,IAAM5B,EAAY,EAARyC,EAAG,GAASb,EAAU,UAAIa,EAAG,GAAKb,EAAS,YAAO5B,EAAI4B,EAAU,YAAM5B,EAAEM,KAAKsB,GAAI,GAAKA,EAAET,SAAWnB,EAAIA,EAAEM,KAAKsB,EAAGa,EAAG,KAAKlB,KAAM,OAAOvB,EAE3J,OADI4B,EAAI,EAAG5B,IAAGyC,EAAK,CAAS,EAARA,EAAG,GAAQzC,EAAEiB,QACzBwB,EAAG,IACP,KAAK,EAAG,KAAK,EAAGzC,EAAIyC,EAAI,MACxB,KAAK,EAAc,OAAXX,EAAEC,QAAgB,CAAEd,MAAOwB,EAAG,GAAIlB,MAAM,GAChD,KAAK,EAAGO,EAAEC,QAASH,EAAIa,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKX,EAAEI,IAAIS,MAAOb,EAAEG,KAAKU,MAAO,SACxC,QACI,KAAkB3C,GAAZA,EAAI8B,EAAEG,MAAY5B,OAAS,GAAKL,EAAEA,EAAEK,OAAS,MAAkB,IAAVoC,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEX,EAAI,EAAG,SACjG,GAAc,IAAVW,EAAG,MAAczC,GAAMyC,EAAG,GAAKzC,EAAE,IAAMyC,EAAG,GAAKzC,EAAE,IAAM,CAAE8B,EAAEC,MAAQU,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYX,EAAEC,MAAQ/B,EAAE,GAAI,CAAE8B,EAAEC,MAAQ/B,EAAE,GAAIA,EAAIyC,EAAI,MAC7D,GAAIzC,GAAK8B,EAAEC,MAAQ/B,EAAE,GAAI,CAAE8B,EAAEC,MAAQ/B,EAAE,GAAI8B,EAAEI,IAAIU,KAAKH,GAAK,MACvDzC,EAAE,IAAI8B,EAAEI,IAAIS,MAChBb,EAAEG,KAAKU,MAAO,SAEtBF,EAAKf,EAAKpB,KAAKG,EAASqB,GAC1B,MAAOV,GAAKqB,EAAK,CAAC,EAAGrB,GAAIQ,EAAI,EAAI,QAAWD,EAAI3B,EAAI,EACtD,GAAY,EAARyC,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAExB,MAAOwB,EAAG,GAAKA,EAAG,QAAK,EAAQlB,MAAM,GArB9BL,CAAK,CAACf,EAAGqC,MAwCtD,SAASK,EAAOC,EAAG3C,GACtB,IAAI4C,EAAsB,mBAAXT,QAAyBQ,EAAER,OAAOC,UACjD,IAAKQ,EAAG,OAAOD,EACf,IAAmBE,EAAY5B,EAA3BlB,EAAI6C,EAAEzC,KAAKwC,GAAOG,EAAK,GAC3B,IACI,WAAc,IAAN9C,GAAgBA,KAAM,MAAQ6C,EAAI9C,EAAEiB,QAAQI,MAAM0B,EAAGL,KAAKI,EAAE/B,OAExE,MAAOiC,GAAS9B,EAAI,CAAE8B,MAAOA,GACjC,QACQ,IACQF,IAAMA,EAAEzB,OAASwB,EAAI7C,EAAU,YAAI6C,EAAEzC,KAAKJ,GAE1D,QAAkB,GAAIkB,EAAG,MAAMA,EAAE8B,OAE7B,OAAOD,EAGJ,SAASE,IACZ,IAAK,IAAIF,EAAK,GAAI/C,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3C+C,EAAKA,EAAGG,OAAOP,EAAOzC,UAAUF,KACpC,OAAO+C,MCzILI,EAAmB,CAAC,KAAM,KAAM,KAAM,KAAM,MAYlDC,EAAA,WAAA,SAAAA,IACU5D,KAAA6D,MAAgB,KA8B1B,OANErE,OAAAsE,eAAqBF,EAAA1D,UAAA,OAAI,KAGzB,WACE,OAAOF,KAAK6D,WAJd,SAA0BtC,GACxBvB,KAAK6D,MAAQF,EAAiBI,SAASxC,GAASA,EArCpB,mEAkB7ByC,EAAAA,MAAKC,KAAA,CAAC,uBAkBND,EAAAA,MAAKC,KAAA,CAAC,aAMTL,EA/BA,GCYAM,EAAA,SAAAC,GAAA,SAAAD,mDAgBA,OAZwCE,EAAAA,EAAAA,GAEtCF,EAAAhE,UAAAmE,SAAA,WACOrE,KAAKsE,MACRtE,KAAKsE,IAAMC,YAIfL,EAAAhE,UAAAsE,QAAA,WACExE,KAAKsE,IAAMC,+BAbdE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,aACVC,SAAA,6XAcFT,EAhBA,CAIwCN,GCpBxCgB,EAAA,WAAA,SAAAA,KAW+B,2BAX9BC,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZd,GAEFe,QAAS,CACPf,OAG2BU,EAX/B,GCSAM,EAAA,WAAA,SAAAA,IAEElF,KAAAmF,UAAsC,GAC9BnF,KAAAoF,OAAmC,GAiG7C,OAtBE5F,OAAAsE,eAAsBoB,EAAAhF,UAAA,QAAK,KAK3B,WACE,OAAOF,KAAKoF,YANd,SAA4BC,GAC1BrF,KAAKoF,OAASC,EACdrF,KAAKmF,UAAY,GAAGzB,OAAO2B,6EAd5BrB,EAAAA,MAAKC,KAAA,CAAC,qCAYND,EAAAA,MAAKC,KAAA,CAAC,kCAgBND,EAAAA,MAAKC,KAAA,CAAC,uBAMTiB,EApGA,GCCAI,EAAA,SAAAnB,GAoBE,SAAAmB,EAAYC,EAAkCC,EAA4BC,GAA1E,IAAAC,EACEvB,EAAAvD,KAAAZ,OAAOA,YADqC0F,EAAAF,QAAAA,EAA4BE,EAAAD,SAAAA,EAd1EC,EAAAC,cAAwB,EACxBD,EAAAE,oBAA8B,EAGtBF,EAAAG,uBAAiC,EACjCH,EAAAI,mBAAoB,EAEpBJ,EAAAK,qBAAsB,EACtBL,EAAAM,aAAc,EA4CdN,EAAAO,qBAAoB,SAAIC,GACCR,EAAKS,qBAAqBD,EAAOR,EAAKU,gBAGnEV,EAAKC,cAAe,EACpBD,EAAKW,2BAzCPX,EAAKY,OAASf,EAAQgB,KAAK,IAAIpG,OAAO,QA2I1C,OA7J4CiE,EAAAA,EAAAA,GAqB1CkB,EAAApF,UAAAsG,gBAAA,WACExG,KAAKgG,aAAc,EAEnBhG,KAAKyG,4BAGPnB,EAAApF,UAAAwG,UAAA,WAC0B1G,KAAK2G,kBAAkBC,cAAcC,cAIrC7G,KAAK8F,mBAAqB9F,KAAKgG,aACrDhG,KAAK8G,qBAGH9G,KAAK+F,sBACP/F,KAAK+G,iBACL/G,KAAK+F,qBAAsB,GAG7B/F,KAAKgH,sBAGP1B,EAAApF,UAAA+G,YAAA,WACEjH,KAAKqG,yBACLrG,KAAKkH,wBAGP5B,EAAApF,UAAAiH,eAAA,WACEnH,KAAK2F,cAAgB3F,KAAK2F,aAC1B3F,KAAKoH,8BAYC9B,EAAApF,UAAAiG,qBAAR,SAA6BD,EAAOV,GAClC,OAAOA,IAAYA,EAAQoB,cAAcS,SAASnB,EAAMoB,SAGlDhC,EAAApF,UAAA8G,mBAAR,WACMhH,KAAKsG,SACStG,KAAKsG,OAAOiB,KAAKvH,KAAKqF,SAEpCrF,KAAKwH,2BACLxH,KAAK8F,mBAAoB,KAKvBR,EAAApF,UAAAuH,eAAR,eACQC,EAAqB1H,KAAK2H,6BACb3H,KAAK4H,mBAAmBF,IAEzB1H,KAAK6F,uBACrB7F,KAAK6H,6BAEL7H,KAAK8H,+BAIDxC,EAAApF,UAAAyH,2BAAR,WACE,OAAO3H,KAAK+H,gBAAkB/H,KAAKwF,QAAQoB,cACxCoB,cAAc,4BAA4BnB,YAAc,GAAK,GAG1DvB,EAAApF,UAAA0H,mBAAR,SAA2BF,GACzB,OAAO1H,KAAKwF,QAAQoB,cAAcoB,cAAc,mBAAmBnB,YAAca,GAG3EpC,EAAApF,UAAAsH,yBAAR,eACQS,EAAiBjI,KAAKwF,QAAQoB,cACjCsB,iBAAiB,0DAEpBlI,KAAK6F,uBAAyBlG,MAAMwI,KAAKF,GACtCG,IAAG,SAACC,GAAc,OAAAA,EAAwB,cAC1CC,OAAM,SAAEC,EAAGhJ,GAAM,OAAAgJ,EAAIhJ,GAAG,KAGrB+F,EAAApF,UAAA2H,2BAAR,WACE7H,KAAK4F,oBAAqB,EAC1B5F,KAAKmF,UAAYnF,KAAKqF,MAAMmD,OAAO,GACnCxI,KAAKyI,cAAgBzI,KAAKqF,MAAMmD,MAAM,GAAI,GAAGE,WAGvCpD,EAAApF,UAAA4H,4BAAR,WACE9H,KAAK4F,oBAAqB,EAC1B5F,KAAKmF,UAAY,GAAGzB,OAAO1D,KAAKqF,OAChCrF,KAAK2F,cAAe,GAGdL,EAAApF,UAAA6G,eAAR,WAAA,IAAArB,EAAA1F,KACE2I,aAAa3I,KAAK4I,eAClB5I,KAAK4I,cAAgBC,WAAU,WAEzBnD,EAAKI,oBAAsBJ,EAAKK,qBAA4E,IAArDL,EAAKiB,kBAAkBC,cAAcC,YAC9FnB,EAAKK,qBAAsB,EAE3BL,EAAK+B,kBAGN,KAGGnC,EAAApF,UAAA4G,mBAAR,WACE9G,KAAKwH,2BACLxH,KAAKyH,iBACLzH,KAAK8F,mBAAoB,GAGnBR,EAAApF,UAAAkH,2BAAR,WACEpH,KAAK8I,iBAAmB9I,KAAKyF,SAASsD,OAAO,WAAY,QAAS/I,KAAKiG,uBAGjEX,EAAApF,UAAAuG,yBAAR,WAAA,IAAAf,EAAA1F,KACEA,KAAKgJ,eAAiBhJ,KAAKyF,SAASsD,OAAO,SAAU,SAAQ,SAAG7C,GAC9DR,EAAKqB,oBAIDzB,EAAApF,UAAAmG,uBAAR,WACMrG,KAAK8I,kBACP9I,KAAK8I,oBAIDxD,EAAApF,UAAAgH,qBAAR,WACElH,KAAKgJ,sCA9JRvE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,iBACVC,SAAA,miCAtBsDsE,EAAAA,uBAAZC,EAAAA,kBAAwCC,EAAAA,wDAqCjFC,EAAAA,UAASnF,KAAA,CAAC,aAAc,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,0BACpDF,EAAAA,UAASnF,KAAA,CAAC,eAAgB,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,OA+IzDhE,EAjKA,CAI4CJ,GCb5CqE,EAAA,WAAA,SAAAA,KASA,2BATC9E,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,0BACVC,SAAA,mNAKCX,EAAAA,MAAKC,KAAA,CAAC,cAETsF,EATA,GCQAC,EAAA,WAUE,SAAAA,EAAoBC,GAAAzJ,KAAAyJ,KAAAA,EAmBtB,OAvBEjK,OAAAsE,eAAI0F,EAAAtJ,UAAA,MAAG,KAAP,WAAoB,OAAOF,KAAK0J,sCAEhClK,OAAAsE,eAAI0F,EAAAtJ,UAAA,aAAU,KAAd,WAA2B,OAAOF,KAAK2J,6CAIvCH,EAAAtJ,UAAA0J,cAAA,SAAcC,EAAKC,EAAQC,GACzB/J,KAAK0J,KAAOG,EACZ7J,KAAK2J,YAAc,CACjBK,YAAY,EACZH,IAAKE,EAAKE,KACVH,OAAQA,IAIZN,EAAAtJ,UAAAgK,mBAAA,SAAmBC,GAEjB,OADAnK,KAAKoK,WAAuB,WAAID,EACzBnK,KAAKyJ,KAAKY,KAAKrK,KAAK6J,IAAK7J,KAAKoK,aAGvCZ,EAAAtJ,UAAAoK,YAAA,WACE,OAAOtK,KAAKyJ,KAAKc,IAAIvK,KAAK6J,IAAK,CAAEW,aAAc,OAAQV,OAAQ,CAAED,IAAK7J,KAAKoK,WAAgB,4BA3B9FK,EAAAA,sDAnBQC,EAAAA,cAgDTlB,EA7BA,GCLAmB,EAAA,WAoBE,SAAAA,EAAoBC,GAAA5K,KAAA4K,QAAAA,EAbpB5K,KAAA6K,UAAoB,EA2CtB,OA5BEF,EAAAzK,UAAAmE,SAAA,WACErE,KAAK4K,QAAQhB,cAAc5J,KAAK+H,gBAAiB/H,KAAK8K,cAAe9K,KAAK+K,YAC1E/K,KAAKgL,qBAGPL,EAAAzK,UAAA+G,YAAA,WAEMjH,KAAKiL,iBACPjL,KAAKiL,gBAAgBC,cAGnBlL,KAAKmL,iBACPnL,KAAKmL,gBAAgBD,eAIzBP,EAAAzK,UAAAkL,qBAAA,WACEpL,KAAK6K,SAAW7K,KAAKqL,mBAAkB,GAASrL,KAAKqL,mBAAkB,IAGjEV,EAAAzK,UAAA8K,kBAAR,WAAA,IAAAtF,EAAA1F,KACEA,KAAKiL,gBAAkBjL,KAAK4K,QAAQN,cAAcgB,UAAS,SAAC1J,GAAU,OAAA8D,EAAKmF,SAAWjJ,EAAOoI,cAGvFW,EAAAzK,UAAAmL,kBAAR,SAA0BlB,GAA1B,IAAAzE,EAAA1F,KACEA,KAAKmL,gBAAkBnL,KAAK4K,QAAQV,mBAAmBC,GAAQmB,UAAS,SAAC1J,GAAU,OAAA8D,EAAKmF,SAAWjJ,EAAOoI,kCA/C7GvF,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,0BACVC,SAAA,ucACA4G,UAAW,CAAC/B,gDAZLA,8CAqBNxF,EAAAA,MAAKC,KAAA,CAAC,0CAGND,EAAAA,MAAKC,KAAA,CAAC,wCAGND,EAAAA,MAAKC,KAAA,CAAC,uBAgCT0G,EAlDA,GCLAa,EAAA,WAAA,SAAAA,IAgB0BxL,KAAA+K,YAAsB,EAChD,2BAjBCtG,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,sBACVC,SAAA,yxBAKCX,EAAAA,MAAKC,KAAA,CAAC,2BAGND,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,8BAGND,EAAAA,MAAKC,KAAA,CAAC,oBACTuH,EAjBA,GCMAC,EAAA,WAAA,SAAAA,KAamC,2BAblC5G,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACA2G,EAAAA,cAEF1G,aAAc,CACZM,EACAiE,EACAoB,EACAa,GAEFvG,QAAS,CAACK,OAEuBmG,EAbnC,GCdaE,EAAa,CAAC,KAAM,KAAM,MAE1BC,EAAmB,KAShC,SAAgBC,IACd,OAAOC,IAMT,SAAgBC,QAERC,EAAWC,UAAUD,UAAYC,UAAwB,aACzDC,EAAgBC,EAAiBH,GAEvC,OAAOL,EAAW5H,SAASmI,GAAiBF,EAAWJ,EASzD,SAAgBE,IACd,OAAOK,EAAiBJ,KAa1B,SAAgBI,EAAiBH,GAC/B,OAAQA,GAAYJ,GAAkBQ,cAAcC,UAAU,EAAG,GAGnE,SAAgBC,EAAW/K,GAGzB,OAFsB,IAAIgL,OAAO,yBAA2B,KAEvCC,KAAKjL,GAQ5B,SAAgBkL,EAAiBC,GAC/B,MAAmB,iBAARA,EAEO,UADhBA,EAAMA,EAAIN,cAAcO,SACU,OAARD,GAAwB,KAARA,EAGzB,iBAARA,EACM,IAARA,IAGAA,EAGX,SAAgBE,EAAarL,EAAYsL,OACjCC,EAAcC,SAASxL,EAAO,IAC9ByL,EAAoBD,SAASF,EAAc,IAC3CI,EAAeD,GAA2C,IAAtBA,EAA0BA,EAAoBzI,UAExF,OAAOuI,GAA+B,IAAhBA,EAAoBA,EAAcG,EAG1D,SAAgBC,EAASC,EAAaC,GACpC,cAAcD,IAAWC,EAU3B,SAAgBC,EAAaC,EAASC,EAAcC,GAC9CN,EAASI,EAAI,YACfA,EAAG1M,KAAK2M,EAASC,GAEjBD,EAAQD,GAAIE,GAIhB,SAAgBC,EAAiBlM,EAAgBmM,EAAgBC,GAC/D,GAAIpM,EAAO,KAWDqM,EAVFC,EAAMd,SAASxL,EAAM8K,UAAU,EAAG,IAAK,IACvCyB,EAAQf,SAASxL,EAAM8K,UAAU,EAAG,GAAI,IACxC0B,EAAOhB,SAASxL,EAAM8K,UAAU,EAAG,GAAI,IAC7C,GAAIqB,EAKF,OAFAM,EAFMJ,EAAO,IAAIK,KAAKF,EAAMD,EAAQ,EAAGD,EAAK,EAAG,EAAG,GAE1BE,GAEjBH,EACF,GAAID,EAKT,OAFAK,EAFMJ,EAAO,IAAIK,KAAKF,EAAMD,EAAQ,EAAGD,EAAK,GAAI,GAAI,IAE5BE,GAEjBH,MAEDM,EAAeD,KAAKE,MAAM5M,GAC1B6M,EAA4C,KAAjC,IAAIH,MAAOI,oBAC5B,OAAO,IAAIJ,KAAKC,EAAeE,IAkBrC,SAAgBE,EAAyBV,EAAYW,GACnD,GAAIX,EAAM,KAEJY,EAAWZ,EAAKY,WAAa,EAC7BX,EAAMD,EAAKa,UAAY,GAAK,IAAMb,EAAKa,UAAYb,EAAKa,UACxDX,EAAQU,EAAW,GAAK,IAAMA,EAAWA,EACzCT,EAAOW,EAAWd,EAAKe,eAEvBC,EAAahB,EAAKiB,WAExB,OAAa,OAATN,EACKR,EAAO,IAAMD,EAAQ,IAAMD,EAAMU,EAEjCR,EAAO,IAAMD,EAAQ,IAAMD,EAAM,IAAMe,EAAWvC,UAAU,GAAI,IACnEuC,EAAWvC,UAAU,GAAI,IAAM,IAAMuC,EAAWvC,UAAU,GAAI,IAGlE,OAAO,KAQX,SAAgBqC,EAAWX,GAEzB,OAAIA,GAAQ,IACHA,EAAKc,WAGVd,EAAO,IAAMA,EAAO,IACf,IAAIA,EAGTA,EAAO,GAAKA,EAAO,IACd,KAAKA,EAGVA,GAAQ,GAAKA,EAAO,GACf,MAAMA,OADf,EAaF,SAAgBe,IAGd,OAFkBC,OAAO9C,UAAU+C,UAElBC,MAAM,4DAOzB,SAAgBC,EAAehJ,GAC7B,OAAyB,KAAlBA,EAAMiJ,SAAkC,KAAhBjJ,EAAMkJ,MAQvC,SAAgBpB,EAAkBJ,EAAYG,GACxCA,GAAQ,GAAKA,EAAO,KACtBH,EAAKyB,YAAYtB,GAmBrB,SAAgBuB,EAAwBC,GACtC,qBAAS/O,GACP,GAAU,IAANA,WADGA,EAAC,WAGJ+O,EAAKC,UAAS,SAACzM,GAAM,OAAAA,EAAGxB,QAAUgO,EAAK/O,GAAGe,UAAWf,IACvD+O,EAAKE,OAAOjP,EAAG,GACfA,OALKA,GAAAA,EAAI,EAAGA,EAAI+O,EAAK5O,OAAQH,MAAxBA,GAAAA,EAACkP,EAUZ,SAAgBC,EAA8BJ,GAC5C,IAAK,IAAI/O,EAAI,EAAGA,EAAI+O,EAAK5O,OAAQH,IAC3B+O,EAAK/O,GAAGe,QAAUgD,WAA+B,OAAlBgL,EAAK/O,GAAGe,QACzCgO,EAAKE,OAAOjP,EAAG,GACfA,KAKN,SAAgBoP,EAAWrO,GACzB,OAAkB,OAAVA,GAAkBA,IAAUgD,WAAuB,KAAVhD,IAA2B,IAAVA,EAGpE,SAAgBsO,EAAehG,GAC7B,QAAOA,GAAMA,EAAIiG,WAAW,QAG9B,SAAgBC,EAAiBlG,GAC/BkF,OAAOiB,KAAKnG,EAAK,UAGnB,SAAiBoG,EAAiBhG,OAC5BiG,EAAgB,GASpB,OAPIjG,IACFiG,EAAgBjG,EAAKkG,QAAQ,UAAW,KAGrCD,EAAcJ,WAAW,OAC5BI,EAAgB,IAAIxM,OAAOwM,IAEtBA,EAUT,SAAgBE,EAAWC,EAAkBC,EAAmBC,GAC9D,QAD8D,IAAAA,IAAAA,GAAA,GAC1DA,EAAW,CACb,GAAIF,EAAWC,EACb,OAAQ,EACH,GAAID,EAAWC,EACpB,OAAO,OAEJ,IAAkB,IAAdC,EAAqB,CAC9B,GAAIF,EAAWC,EACb,OAAO,EACF,GAAID,EAAWC,EACpB,OAAQ,EAGZ,OAAO,EAGT,SAAgBE,EAAkB5C,EAAY6C,EAAiBC,GAC7D,OAAID,GAAaC,EACP9C,GAAQ6C,GAAa7C,GAAQ8C,EAC5BD,IAAcC,EACf9C,GAAQ6C,KACNA,GAAaC,IACf9C,GAAQ8C,EAMpB,SAAgBC,KACd,SAASC,IACP,OAAOC,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WACzBlC,SAAS,IACTxC,UAAU,GAGf,OAAOuE,IAASA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACvDA,IAAS,IAAMA,IAASA,IAASA,IAGnC,SAAgBI,GAAsBC,GACpC,MAAO,GAAGA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKzI,MAAM,OCjUhD4I,GAAmB,CAAC,UAAW,UAAW,SAAU,QAiB1DC,GAAA,WAAA,SAAAA,IAEUrR,KAAAsR,WAAsB,EACtBtR,KAAAuR,UAAqB,EACrBvR,KAAAwR,QAAmB,EACnBxR,KAAAyR,MAAiB,UA4FNzR,KAAA0R,MAAQ,IAAIC,EAAAA,aAEjC,OAxEEnS,OAAAsE,eAAwBuN,EAAAnR,UAAA,UAAO,KAI/B,WACE,OAAOF,KAAKuR,cALd,SAAgChQ,GAC9BvB,KAAKuR,SAAW9E,EAAiBlL,oCAuBnC/B,OAAAsE,eAAsBuN,EAAAnR,UAAA,QAAK,KAG3B,WACE,OAAOF,KAAKwR,YAJd,SAA4BjQ,GAC1BvB,KAAKwR,OAAwB,KAAf,GAA2B/E,EAAiBlL,oCAqB5D/B,OAAAsE,eAAqBuN,EAAAnR,UAAA,OAAI,KAGzB,WACE,OAAOF,KAAKyR,WAJd,SAA0BlQ,GACxBvB,KAAKyR,MAAQL,GAAiBrN,SAASxC,GAASA,EA1FpB,2CAyG9B/B,OAAAsE,eAAyBuN,EAAAnR,UAAA,WAAQ,KAGjC,WACE,OAAOF,KAAKsR,eAJd,SAAkC/P,GAChCvB,KAAKsR,UAA2B,KAAf,GAA2B7E,EAAiBlL,mEA5E9DyC,EAAAA,MAAKC,KAAA,CAAC,4BAaND,EAAAA,MAAKC,KAAA,CAAC,2BAaND,EAAAA,MAAKC,KAAA,CAAC,yBAWND,EAAAA,MAAKC,KAAA,CAAC,yBAsBND,EAAAA,MAAKC,KAAA,CAAC,4BAgBND,EAAAA,MAAKC,KAAA,CAAC,6BAQN2N,EAAAA,OAAM3N,KAAA,CAAC,cAEVoN,EAnGA,GCEAQ,GAAA,SAAA1N,GAAA,SAAA0N,mDAUA,OANwCzN,EAAAA,EAAAA,GAEtCyN,EAAA3R,UAAA4R,QAAA,WACE9R,KAAK0R,MAAMK,KAAK,2BAPnBtN,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,aACVC,SAAA,mlBAQFkN,EAVA,CAIwCR,ICjBxCW,GAAA,WAAA,SAAAA,KAW+B,2BAX9BnN,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZ6M,IAEF5M,QAAS,CACP4M,QAG2BG,EAX/B,GCgBMC,GAAgD,CACpD,SAAU,cAAe,eACzB,OAAQ,WAAY,cACpB,MAAO,YAAa,WACpB,QAAS,eAAgB,aAG3BC,GAAA,WAAA,SAAAA,IAKUlS,KAAAmS,+BAAyC,EAIzCnS,KAAAoS,mBAA6B,EAE7BpS,KAAAqS,YAAsB,GA0UhC,OAlUEH,EAAAhS,UAAAoS,eAAA,SAAe/Q,OACPgR,EAAWhR,GAAS,SAC1BvB,KAAKwS,gBAAgBD,GACrBvS,KAAKyS,iBAAmBzS,KAAKyS,gBAAgB9R,OAASX,KAAK0S,qBAAqBH,GAAYvS,KAAK2S,sBAAsBJ,IAMzHL,EAAAhS,UAAA0S,kBAAA,WACE,OAAO5S,KAAK6S,gBAadX,EAAAhS,UAAA4S,YAAA,SAAYtN,EAAmCuN,EAAuBC,EAC1DP,EAAiCL,EAAoCa,QAApC,IAAAb,IAAAA,GAAA,QAAoC,IAAAa,IAAAA,GAAA,GAE/EjT,KAAKwF,QAAWA,aAAmB0D,EAAAA,WAAc1D,EAAQoB,cAAgBpB,EACzExF,KAAKgT,cAAiBA,aAAyB9J,EAAAA,WAAc8J,EAAcpM,cAAgBoM,EAE3FhT,KAAK+S,cAAgBA,EAErB/S,KAAKyS,gBAAkBA,EACvBzS,KAAKoS,kBAAoBA,EACzBpS,KAAKiT,gBAAkBA,GAGjBf,EAAAhS,UAAAwS,qBAAR,SAA6BH,GAK3B,QAJMW,EAAiBlT,KAAKyS,gBAAgB9R,OAExCwS,EAAa,EAEVA,IAAeD,GAChBlT,KAAKoT,iBAAiBb,KACxBA,EAAWvS,KAAKqT,aAAad,EAAUvS,KAAKyS,iBAC5CzS,KAAKwS,gBAAgBD,KAKnBL,EAAAhS,UAAAyS,sBAAR,SAA8BJ,GAM5B,QALMe,EAAgBtT,KAAKuT,mBACrBC,EAAqBF,EAAc3S,OAErC8S,EAAiB,EAEdA,IAAmBD,GAAoB,KACtCE,EAAe1T,KAAK2T,gBAAgBpB,GAG1C,GAFAvS,KAAKwS,gBAAgBD,IAEjBvS,KAAK4T,aAAaF,GAGf,OAAI1T,KAAKoT,iBAAiBb,QAC/BvS,KAAK6T,mBAAmBtB,QAI1B,EAPEA,EAAWvS,KAAKqT,aAAaK,EAAcJ,KAWzCpB,EAAAhS,UAAAsS,gBAAR,SAAwBD,GACtBvS,KAAKiT,gBAAkBjT,KAAK8T,0BAA0BvB,GAAYvS,KAAK+T,mBAAmBxB,IAGpFL,EAAAhS,UAAAyT,gBAAR,SAAwBpB,GACtB,OAAQA,EAASyB,QAAQ,MAAQ,EAAKzB,EAASlG,UAAU,EAAGkG,EAASyB,QAAQ,MAAQzB,GAG/EL,EAAAhS,UAAAqT,iBAAR,WAGE,OAAOvT,KAAKyS,iBAAmBzS,KAAKyS,gBAAgB9R,OAClDX,KAAKiU,kCAAkCjU,KAAKyS,iBAHjB,CAAC,MAAO,QAAS,SAAU,SAMlDP,EAAAhS,UAAA+T,kCAAR,SAA0CxB,GAIxC,QAHMa,EAAgB,GAChBY,EAAwBzB,EAAgB9R,OAErCH,EAAI,EAAGA,EAAI0T,EAAuB1T,IAAK,KACxC+R,EAAWE,EAAgBjS,GAE3BkT,EAAe1T,KAAK2T,gBAAgBpB,GAErCe,EAAcvP,SAAS2P,IAC1BJ,EAAcpQ,KAAKwQ,GAIvB,OAAOJ,GAGDpB,EAAAhS,UAAAiU,aAAR,eACQC,EAAoBpU,KAAKqU,uBAE/B,MAAO,CACLC,MAAQF,EAAkB5O,QAAQ8O,MAAQF,EAAkBrF,OAAOwF,WACnEC,IAAMJ,EAAkB5O,QAAQgP,KAAO,EACvCC,KAAOL,EAAkB5O,QAAQiP,MAAQ,EACzCC,OAASN,EAAkB5O,QAAQkP,OAASN,EAAkBrF,OAAO4F,cAIjEzC,EAAAhS,UAAAmU,qBAAR,WACE,MAAO,CACLtF,OAAQ,CACN6F,QAAS7F,OAAO6F,QAChBC,QAAS9F,OAAO8F,QAChBN,WAAYxF,OAAOwF,WACnBI,YAAa5F,OAAO4F,aAEtBnP,QAASxF,KAAKwF,QAAQsP,wBACtBxN,OAAQtH,KAAKgT,cAAgBhT,KAAKgT,cAAc8B,wBAA0B,CAAEN,IAAK,EAAGE,OAAQ,EAAGJ,MAAO,EAAGG,KAAM,KAI3GvC,EAAAhS,UAAAmT,aAAR,SAAqBd,EAAkBwC,QAAA,IAAAA,IAAAA,EAAA,QAC/BC,EAAQD,EAAUf,QAAQzB,GAC1B0C,EAAYD,EAAQ,EAE1B,OAAIA,GAAS,GAAKC,EAAYF,EAAUpU,OAE/BoU,EAAUE,GAEVF,EAAU,IAKb7C,EAAAhS,UAAAkT,iBAAR,SAAyBb,OACjB2C,EAAYlV,KAAKmU,eAEvB,OAAQ5B,GACN,IAAK,MAAO,OAAO2C,EAAUV,KAAOU,EAAUZ,OAASY,EAAUT,KACjE,IAAK,YAAa,OAAOS,EAAUV,KAAOU,EAAUZ,MACpD,IAAK,WAAY,OAAOY,EAAUV,KAAOU,EAAUT,KACnD,IAAK,QAAS,OAAOS,EAAUZ,OAASY,EAAUV,KAAOU,EAAUR,OACnE,IAAK,YAAa,OAAOQ,EAAUZ,OAASY,EAAUV,IACtD,IAAK,eAAgB,OAAOU,EAAUZ,OAASY,EAAUR,OACzD,IAAK,SAAU,OAAOQ,EAAUR,QAAUQ,EAAUZ,OAASY,EAAUT,KACvE,IAAK,eAAgB,OAAOS,EAAUR,QAAUQ,EAAUZ,MAC1D,IAAK,cAAe,OAAOY,EAAUR,QAAUQ,EAAUT,KACzD,IAAK,OAAQ,OAAOS,EAAUT,MAAQS,EAAUV,KAAOU,EAAUR,OACjE,IAAK,WAAY,OAAOQ,EAAUT,MAAQS,EAAUV,IACpD,IAAK,cAAe,OAAOU,EAAUT,MAAQS,EAAUR,SAInDxC,EAAAhS,UAAA0T,aAAR,SAAqBrB,OACb2C,EAAYlV,KAAKmU,eAEvB,OAAQ5B,GACN,IAAK,MAAO,OAAO2C,EAAUV,IAC7B,IAAK,QAAS,OAAOU,EAAUZ,MAC/B,IAAK,SAAU,OAAOY,EAAUR,OAChC,IAAK,OAAQ,OAAOQ,EAAUT,OAI1BvC,EAAAhS,UAAAiV,yBAAR,SAAiC3C,GAC/B,OAAQA,GACN,IAAK,WAAY,MAAO,cACxB,IAAK,YAAa,MAAO,eACzB,IAAK,eAAgB,MAAO,YAC5B,IAAK,cAAe,MAAO,aAIvBN,EAAAhS,UAAAkV,0BAAR,SAAkCC,EAAsBjB,GACtDpU,KAAKwF,QAAQ8P,MAAMd,IAAMJ,EAAkB9M,OAAOoN,OAAS1U,KAAK+S,cAAgB,KAChF/S,KAAKwF,QAAQ8P,MAAMb,KAAOL,EAAkB9M,OAAOmN,KAAOY,EAAe,MAGnEnD,EAAAhS,UAAA4T,0BAAR,SAAkCvB,GAChCvS,KAAKuV,sBAECnB,EAAyBpU,KAAKqU,uBAEpC,OAAQ9B,GACN,IAAK,cACHvS,KAAKoV,0BAA0B,EAAGhB,GAClC,MACF,IAAK,eACHpU,KAAKoV,0BAA0BhB,EAAkB5O,QAAQgQ,MAAQpB,EAAkB9M,OAAOkO,MAAOpB,GACjG,MACF,IAAK,WACHpU,KAAKyV,uBAAuB,EAAGrB,GAC/B,MACF,IAAK,YACHpU,KAAKyV,uBAAuBrB,EAAkB5O,QAAQgQ,MAAQpB,EAAkB9M,OAAOkO,MAAOpB,GAIlGpU,KAAK6S,eAAiB7S,KAAKmV,yBAAyB5C,IAI9CL,EAAAhS,UAAAuV,uBAAR,SAA+BJ,EAAsBjB,GACnDpU,KAAKwF,QAAQ8P,MAAMd,IAAMJ,EAAkB9M,OAAOkN,IAAMJ,EAAkB5O,QAAQkQ,OAAS1V,KAAK+S,cAAgB,KAChH/S,KAAKwF,QAAQ8P,MAAMb,KAAOL,EAAkB9M,OAAOmN,KAAOY,EAAe,MAGnEnD,EAAAhS,UAAAyV,kBAAR,SAA0BnD,GACxB,OAAQA,GACN,IAAK,MAAO,MAAO,SACnB,IAAK,WAAY,MAAO,eACxB,IAAK,YAAa,MAAO,cACzB,IAAK,QAAS,MAAO,OACrB,IAAK,YAAa,MAAO,cACzB,IAAK,eAAgB,MAAO,WAC5B,IAAK,SAAU,MAAO,MACtB,IAAK,eAAgB,MAAO,WAC5B,IAAK,cAAe,MAAO,YAC3B,IAAK,OAAQ,MAAO,QACpB,IAAK,cAAe,MAAO,YAC3B,IAAK,WAAY,MAAO,iBAIpBN,EAAAhS,UAAA0V,mBAAR,SAA2BP,EAAsBjB,GAC/CpU,KAAKwF,QAAQ8P,MAAMd,IAAMJ,EAAkB9M,OAAOoN,OAAS1U,KAAK+S,cAAgB,KAChF/S,KAAKwF,QAAQ8P,MAAMb,KAAOL,EAAkB9M,OAAOmN,KAAQL,EAAkB9M,OAAOkO,MAAQ,EAAKH,EAAe,MAG1GnD,EAAAhS,UAAA6T,mBAAR,SAA2BxB,GACzBvS,KAAKuV,sBAECnB,EAAoBpU,KAAKqU,uBAE/B,OAAQ9B,GACN,IAAK,MACHvS,KAAK6V,gBAAiBzB,EAAkB5O,QAAQgQ,MAAQ,EAAIpB,GAC5D,MACF,IAAK,WACHpU,KAAK6V,gBAAiBzB,EAAkB5O,QAAQgQ,MAAQxV,KAAKqS,YAAcrS,KAAKmS,+BAAiCiC,GACjH,MACF,IAAK,YACHpU,KAAK6V,gBAAiB7V,KAAKqS,YAAcrS,KAAKmS,+BAAiCiC,GAC/E,MACF,IAAK,QACHpU,KAAK8V,kBAAmB1B,EAAkB5O,QAAQkQ,OAAS,EAAItB,GAC/D,MACF,IAAK,YACHpU,KAAK8V,kBAAmB1B,EAAkB5O,QAAQkQ,OAAS1V,KAAKqS,YAAcrS,KAAKmS,+BACjFiC,GACF,MACF,IAAK,eACHpU,KAAK8V,kBAAkB9V,KAAKqS,YAAa+B,GACzC,MACF,IAAK,SACHpU,KAAK4V,mBAAoBxB,EAAkB5O,QAAQgQ,MAAQ,EAAIpB,GAC/D,MACF,IAAK,eACHpU,KAAK4V,mBAAoB5V,KAAKqS,YAAcrS,KAAKmS,+BAAiCiC,GAClF,MACF,IAAK,cACHpU,KAAK4V,mBAAoBxB,EAAkB5O,QAAQgQ,MAAQxV,KAAKqS,YAAcrS,KAAKmS,+BACjFiC,GACF,MACF,IAAK,OACHpU,KAAK+V,iBAAkB3B,EAAkB5O,QAAQkQ,OAAS,EAAItB,GAC9D,MACF,IAAK,cACHpU,KAAK+V,iBAAiB/V,KAAKqS,YAAa+B,GACxC,MACF,IAAK,WACHpU,KAAK+V,iBAAkB3B,EAAkB5O,QAAQkQ,OAAS1V,KAAKqS,YAAc+B,GAIjFpU,KAAK6S,eAAiB7S,KAAK2V,kBAAkBpD,IAGvCL,EAAAhS,UAAAqV,gBAAR,WACMvV,KAAKoS,mBAAqBpS,KAAKgT,gBACjChT,KAAKwF,QAAQ8P,MAAME,MAAWxV,KAAKgT,cAAcgD,YAAW,OAIxD9D,EAAAhS,UAAA6V,iBAAR,SAAyBV,EAAsBjB,GAC7CpU,KAAKwF,QAAQ8P,MAAMd,IAAMJ,EAAkB9M,OAAOkN,IAAMa,EAAgBjB,EAAkB9M,OAAOoO,OAAS,EAAK,KAC/G1V,KAAKwF,QAAQ8P,MAAMb,KAAOL,EAAkB9M,OAAOmN,KAAOL,EAAkB5O,QAAQgQ,MAAQxV,KAAK+S,cAAgB,MAG3Gb,EAAAhS,UAAA4V,kBAAR,SAA0BT,EAAsBjB,GAC9CpU,KAAKwF,QAAQ8P,MAAMd,IAAMJ,EAAkB9M,OAAOkN,IAAMa,EAAgBjB,EAAkB9M,OAAOoO,OAAS,EAAK,KAC/G1V,KAAKwF,QAAQ8P,MAAMb,KAAOL,EAAkB9M,OAAOgN,MAAQtU,KAAK+S,cAAgB,MAG1Eb,EAAAhS,UAAA2V,gBAAR,SAAwBR,EAAsBjB,GAC5CpU,KAAKwF,QAAQ8P,MAAMd,IAAMJ,EAAkB9M,OAAOkN,IAAMJ,EAAkB5O,QAAQkQ,OAAS1V,KAAK+S,cAAgB,KAChH/S,KAAKwF,QAAQ8P,MAAMb,KAAOL,EAAkB9M,OAAOmN,KAAQL,EAAkB9M,OAAOkO,MAAQ,EAAKH,EAAe,MAG1GnD,EAAAhS,UAAA2T,mBAAR,SAA2BtB,GACrBA,EAASyB,QAAQ,MAAQ,IAC3BzB,EAAWA,EAASlG,UAAU,EAAGkG,EAASyB,QAAQ,MAClDhU,KAAKwS,gBAAgBD,IAIvB,QADI0D,EAAQ,EACLA,IAAU,GAAG,CAClB,IAAIjW,KAAKoT,iBAAiBb,GAIxB,OAAO,KAHPA,EAAWvS,KAAKqT,aAAad,EAAUN,IACvCjS,KAAKwS,gBAAgBD,yBA9U5B9H,EAAAA,aAqVDyH,EArVA,GChCagE,GAAwB,CACnC,QACA,YACA,eACA,MACA,WACA,YACA,OACA,WACA,cACA,SACA,cACA,gBCOFC,GAAA,WAAA,SAAAA,IAEUnW,KAAAoW,SAAmB,GACjBpW,KAAAqW,iBAA4B,SAkDxC,OA3CE7W,OAAAsE,eAAwBqS,EAAAjW,UAAA,UAAO,KAO/B,WACE,OAAOF,KAAKoW,cARd,SAAgCE,GAC1BA,GAAWA,EAAQ3V,OA3BA,IA4BpBX,KAAKoW,SAAWE,EAAQjK,UAAU,EA5Bd,KA8BrBrM,KAAKoW,SAAWE,mCAgCpB9W,OAAAsE,eAAiCqS,EAAAjW,UAAA,kBAAe,KAGhD,WACE,OAAOF,KAAKqW,sBAJd,SAAiD9D,GAC/CvS,KAAKqW,iBAAmBH,GAAsBnS,SAASwO,GAAYA,EA9DlC,2EAyBlCvO,EAAAA,MAAKC,KAAA,CAAC,sCAoCND,EAAAA,MAAKC,KAAA,CAAC,yBAOTkS,EArDA,GCMAI,GAAA,SAAApS,GAiBE,SAAAoS,EAAoBC,EACA/Q,EACAgR,GAFpB,IAAA/Q,EAIEvB,EAAAvD,KAAAZ,OAAOA,YAJW0F,EAAA8Q,WAAAA,EACA9Q,EAAAD,SAAAA,EACAC,EAAA+Q,mBAAAA,EANZ/Q,EAAAgR,cAAwB,IAiHlC,OA1HyCtS,EAAAA,EAAAA,GAoBvCmS,EAAArW,UAAAmE,SAAA,WACErE,KAAK2W,mCAGqBJ,EAAArW,UAAA0W,aAA5B,WAAA,IAAAlR,EAAA1F,KACE6I,WAAU,WACJnD,EAAK4Q,UACP5Q,EAAKmR,eAAiBnR,EAAKoR,cAAgBpR,EAAKqR,gBAEhDrR,EAAKsR,YAAYtR,EAAKmN,gBAEtBnN,EAAK+Q,mBAAmBnE,eAAe5M,EAAKuR,iBAC5CvR,EAAKmN,eAAiBnN,EAAK+Q,mBAAmB7D,oBAE9ClN,EAAKwR,SAASxR,EAAKmN,gBAEnBnN,EAAKyR,gBAAkBzR,EAAK4Q,YAMNC,EAAArW,UAAAkX,aAA5B,WACEpX,KAAKqX,eAGCd,EAAArW,UAAAgX,SAAR,SAAiBrE,GACf7S,KAAKyF,SAAS6R,SAAStX,KAAKuX,SAAU,aAAa1E,IAG7C0D,EAAArW,UAAAsX,uBAAR,WACEzI,OAAO0I,iBAAiB,SAAUzX,KAAK0X,uBAAuB,IAIxDnB,EAAArW,UAAA6W,cAAR,WACE/W,KAAK6W,eAAiB7W,KAAKyF,SAASkS,cAAc,OAClD3X,KAAKyF,SAAS6R,SAAStX,KAAK6W,eAAgB,eAE5C7W,KAAKuX,SAAWvX,KAAKyF,SAASkS,cAAc,OAC5C3X,KAAKyF,SAAS6R,SAAStX,KAAKuX,SAAU,qBAEtCvX,KAAK4X,WAAa5X,KAAKyF,SAASkS,cAAc,OAC9C3X,KAAKyF,SAAS6R,SAAStX,KAAK4X,WAAY,uBAExC5X,KAAK6X,YAAc7X,KAAKyF,SAASqS,WAAW9X,KAAKsW,SAEjDtW,KAAKyF,SAASsS,YAAY/X,KAAK4X,WAAY5X,KAAK6X,aAChD7X,KAAKyF,SAASsS,YAAY/X,KAAK6W,eAAgB7W,KAAKuX,UACpDvX,KAAKyF,SAASsS,YAAY/X,KAAK6W,eAAgB7W,KAAK4X,YACpD5X,KAAKyF,SAASsS,YAAY/X,KAAKwW,WAAW5P,cAAe5G,KAAK6W,gBAE9D7W,KAAKyW,mBAAmB3D,YAAY9S,KAAK6W,eAAgB7W,KAAK0W,cAAe1W,KAAKwW,YAElFxW,KAAKwX,0BAGCjB,EAAArW,UAAAyW,gCAAR,WAAA,IAAAjR,EAAA1F,KACEA,KAAK0X,sBAAqB,WACnBhS,EAAKsS,UACRnP,WAAU,WACRnD,EAAK+Q,mBAAmBnE,eAAe5M,EAAKuR,qBAM5CV,EAAArW,UAAAmX,YAAR,WACMrX,KAAK6W,iBACP7W,KAAKyF,SAAS6R,SAAStX,KAAK6W,eAAgB,iBAC5C7W,KAAKgY,UAAW,EAEhBhY,KAAKiY,8BAID1B,EAAArW,UAAA8W,YAAR,SAAoBnE,GACd7S,KAAKwW,WAAW5P,cAAcoB,cAAc,cAAc6K,IAC5D7S,KAAKyF,SAASyS,YAAYlY,KAAKuX,SAAU,aAAa1E,IAIlD0D,EAAArW,UAAA+X,0BAAR,WACElJ,OAAOoJ,oBAAoB,SAAUnY,KAAK0X,uBAAuB,IAG3DnB,EAAArW,UAAA4W,YAAR,WACE9W,KAAKyF,SAASyS,YAAYlY,KAAK6W,eAAgB,iBAC/C7W,KAAKoY,oBACLpY,KAAKgY,UAAW,EAEhBhY,KAAKwX,0BAGCjB,EAAArW,UAAAkY,kBAAR,WACMpY,KAAKmX,kBAAoBnX,KAAKsW,UAChCtW,KAAKyF,SAAS4S,YAAYrY,KAAK4X,WAAY5X,KAAK6X,aAChD7X,KAAK6X,YAAc7X,KAAKyF,SAASqS,WAAW9X,KAAKsW,SACjDtW,KAAKyF,SAASsS,YAAY/X,KAAK4X,WAAY5X,KAAK6X,mCA1HrDS,EAAAA,UAASrU,KAAA,CAAC,CACTS,SAAU,cACV6G,UAAW,CAAE2G,iDA5BKhJ,EAAAA,kBAAkCC,EAAAA,iBAE7C+I,4CAoDNqG,EAAAA,aAAYtU,KAAA,CAAC,oCAkBbsU,EAAAA,aAAYtU,KAAA,CAAC,iBAgFhBsS,EA9HA,CAIyCJ,ICpBzCqC,GAAA,WAAA,SAAAA,KAQgC,2BAR/B3T,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,cAEFC,aAAc,CAACuR,IACftR,QAAS,CAACsR,QAGoBiC,EARhC,OCAEC,SAAW,WAGXC,KAAO,OAGPC,OAAS,UCVLC,GAA0B,OAqBhCC,GAAA,WAAA,SAAAA,IAEU7Y,KAAAwR,QAAmB,EACnBxR,KAAA8Y,QAAmBF,GAGP5Y,KAAA+Y,QAAqC,GAgE3D,OArDEvZ,OAAAsE,eAAsB+U,EAAA3Y,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAKwR,YALd,SAA4BjQ,GAC1BvB,KAAKwR,OAAwB,KAAf,GAA2B/E,EAAiBlL,oCAkB5D/B,OAAAsE,eAAuB+U,EAAA3Y,UAAA,SAAM,KAM7B,WACE,OAAOF,KAAK8Y,aAPd,SAA8BvX,GAC5BvB,KAAK8Y,QAAU,OAAcE,OAAOC,IAAsBlV,SAASxC,GAASA,EAAQqX,GAEpF5Y,KAAKkZ,eAAelZ,KAAK8Y,0CAO3BD,EAAA3Y,UAAAiZ,cAAA,SAAcC,EAAmCC,GAC3CrZ,KAAKsZ,SAAWL,GAAqBN,OACvC3Y,KAAK+Y,QAAQQ,QAAO,SAAEC,EAAQxE,GAC5B,OAAAwE,EAAOC,SAAWzE,IAAUqE,IAAeD,EAAcK,WAClDzZ,KAAKsZ,SAAWL,GAAqBR,WAC9CW,EAAcK,UAAYL,EAAcK,WAIpCZ,EAAA3Y,UAAAgZ,eAAR,SAAuBQ,GACrB,GAAIA,IAAeT,GAAqBP,KACtC1Y,KAAK2Z,0BACA,GAAID,IAAeT,GAAqBN,OAAQ,CAC1B3Y,KAAK+Y,QAAQa,OAAM,SAACJ,GAAU,OAAAA,EAAOC,WAAU9Y,OAAS,GAEjFX,KAAK2Z,uBAKHd,EAAA3Y,UAAAyZ,mBAAR,WACE3Z,KAAK+Y,QAAQQ,QAAO,SAACC,GAAU,OAAAA,EAAOC,UAAW,sCA7DlDzV,EAAAA,MAAKC,KAAA,CAAC,4BAWND,EAAAA,MAAKC,KAAA,CAAC,2BAmBND,EAAAA,MAAKC,KAAA,CAAC,eAkCT4U,EAtEA,GCGAgB,GAAA,SAAA1V,GAOE,SAAA0V,EAAYC,GAAZ,IAAApU,EACEvB,EAAAvD,KAAAZ,OAAOA,YAGP0F,EAAKqU,UAAYD,EAAe,MAAa,YAEjD,OAT6C1V,EAAAA,EAAAA,uBAJ5CK,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,mBACVC,SAAA,4nBAhCkBqV,EAAAA,oBA2CpBH,EAbA,CAI6ChB,ICrB7CoB,GAAA,WAAA,SAAAA,KAaoC,2BAbnCpV,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACAiN,GACAwG,IAEFxT,aAAc,CACZ6U,IAEF5U,QAAS,CACP4U,QAGgCI,EAbpC,GCRMC,GAAqB,CAAC,KAAM,KAAM,MAmCxCC,GAAA,WAoHE,SAAAA,EACSC,EACAC,GADAra,KAAAoa,QAAAA,EACApa,KAAAqa,uBAAAA,EAhHTra,KAAAsa,YAAsB,EAKtBta,KAAAua,cAA4B5a,QAE5BK,KAAAwa,gBAA8B7a,QAE9BK,KAAAya,cAAwB,EACxBza,KAAA0a,aAAuB,EAQb1a,KAAA2a,UAAiB,KACjB3a,KAAA4a,gBAAuB,KACvB5a,KAAA6a,MAAc,IAAI5M,KAwFRjO,KAAA8a,OAAS,IAAInJ,EAAAA,aAcnC,OArFEnS,OAAAsE,eAAuBqW,EAAAja,UAAA,SAAM,KAI7B,WACE,OAAOF,KAAK+a,aALd,SAA8BC,GAC5Bhb,KAAK+a,QAAUb,GAAmBnW,SAASiX,GAAUA,EA9ExB,KA+E7Bhb,KAAKib,sDA8BPzb,OAAAsE,eAAyBqW,EAAAja,UAAA,UAAO,KAGhC,WACE,OAAOF,KAAKkb,cAJd,SAAiCC,GAC/Bnb,KAAKkb,SAAWlb,KAAKoa,QAAQgB,oBAAoBD,GAAS,oCA8B5D3b,OAAAsE,eAAyBqW,EAAAja,UAAA,UAAO,KAGhC,WACE,OAAOF,KAAKqb,cAJd,SAAiCC,GAC/Btb,KAAKqb,SAAWrb,KAAKoa,QAAQgB,oBAAoBE,GAAS,oCAc5DnB,EAAAja,UAAA+a,mBAAA,WACEjb,KAAKqa,uBAAuBkB,YAAYvb,KAAKgb,QAC7Chb,KAAKwa,gBAAkBxa,KAAKqa,uBAAuBmB,mBACnDxb,KAAKua,cAAgBva,KAAKqa,uBAAuBoB,iBACjDzb,KAAK0b,aAAe1b,KAAKua,cAAcva,KAAK2b,qDAlF7C3X,EAAAA,MAAKC,KAAA,CAAC,6BAgCND,EAAAA,MAAKC,KAAA,CAAC,+BA+BND,EAAAA,MAAKC,KAAA,CAAC,8BAQN2N,EAAAA,OAAM3N,KAAA,CAAC,eAcVkW,EAhIA,GCxCAyB,GAAA,WAEA,SAAAA,IAGU5b,KAAAgM,SAAW,KAEXhM,KAAA6b,OAAS,CACf,CACEC,GAAI,UACJC,GAAI,UACJC,GAAI,SAEN,CACEF,GAAI,YACJC,GAAI,WACJC,GAAI,WAEN,CACEF,GAAI,QACJC,GAAI,QACJC,GAAI,SAEN,CACEF,GAAI,QACJC,GAAI,QACJC,GAAI,SAEN,CACEF,GAAI,OACJC,GAAI,MACJC,GAAI,QAEN,CACEF,GAAI,QACJC,GAAI,OACJC,GAAI,SAEN,CACEF,GAAI,QACJC,GAAI,OACJC,GAAI,SAEN,CACEF,GAAI,SACJC,GAAI,SACJC,GAAI,UAEN,CACEF,GAAI,WACJC,GAAI,YACJC,GAAI,aAEN,CACEF,GAAI,UACJC,GAAI,UACJC,GAAI,WAEN,CACEF,GAAI,WACJC,GAAI,WACJC,GAAI,aAEN,CACEF,GAAI,WACJC,GAAI,WACJC,GAAI,cAIAhc,KAAAic,cAAgB,CACtB,CACEH,GAAI,MACJC,GAAI,MACJC,GAAI,OAEN,CACEF,GAAI,MACJC,GAAI,MACJC,GAAI,OAEN,CACEF,GAAI,MACJC,GAAI,MACJC,GAAI,OAEN,CACEF,GAAI,MACJC,GAAI,MACJC,GAAI,OAEN,CACEF,GAAI,MACJC,GAAI,MACJC,GAAI,OAEN,CACEF,GAAI,MACJC,GAAI,MACJC,GAAI,OAEN,CACEF,GAAI,MACJC,GAAI,MACJC,GAAI,QAIAhc,KAAAkc,WAAa,CACnBJ,GAAI,MACJC,GAAI,QACJC,GAAI,OAGEhc,KAAAmc,UAAY,CAClBL,GAAI,MACJC,GAAI,OACJC,GAAI,OA0CR,OAvCEJ,EAAA1b,UAAAsO,SAAA,SAASV,GACP,OAAO9N,KAAK6b,OAAO/N,GAAO9N,KAAKgM,WAGjC4P,EAAA1b,UAAAkc,cAAA,WACE,OAAOpc,KAAKkc,WAAWlc,KAAKgM,WAG9B4P,EAAA1b,UAAAub,eAAA,WAEE,QADMY,EAAY1c,QACTa,EAAI,EAAGA,EAAIR,KAAK6b,OAAOlb,OAAQH,IACtC6b,EAAUnZ,KAAKlD,KAAK6b,OAAOrb,GAAGR,KAAKgM,WAErC,OAAOqQ,GAGTT,EAAA1b,UAAAoc,YAAA,SAAYzO,GACV,OAAO7N,KAAKic,cAAcpO,GAAK7N,KAAKgM,WAGtC4P,EAAA1b,UAAAsb,iBAAA,WAEE,QADMe,EAAc5c,QACXa,EAAI,EAAGA,EAAIR,KAAKic,cAActb,OAAQH,IAC7C+b,EAAYrZ,KAAKlD,KAAKic,cAAczb,GAAGR,KAAKgM,WAE9C,OAAOuQ,GAGTX,EAAA1b,UAAAsc,aAAA,WACE,OAAOxc,KAAKmc,UAAUnc,KAAKgM,WAG7B4P,EAAA1b,UAAAqb,YAAA,SAAYvP,GACNA,GAAYA,EAASrL,QAAU,IACjCqL,EAAWA,EAASI,cAAc5D,MAAM,EAAG,GAC3CxI,KAAKgM,SAAyB,OAAbA,GAAkC,OAAbA,GAAkC,OAAbA,EAAqBA,EAAW,2BAzJhGvB,EAAAA,aA6JDmR,EA/JA,GCIAa,GAAA,WAAA,SAAAA,KA8CA,OA3CEA,EAAAvc,UAAAwc,WAAA,SAAW3O,EAAWD,EAAY6O,EAA0BC,GAC1D,QADgC,IAAAD,IAAAA,EAAA,WAA0B,IAAAC,IAAAA,EAAA,MACpC,iBAAV9O,GAAwBA,EAAQ,GAAOA,EAAQ,GACzD,MAAM+O,MAAK,yCAGPC,EAAoB,GACtBC,EAAmB,GACnBvc,EAAI,EACJoN,EAAO,IAAIK,KAAKF,EAAMD,EAAO,GAE7BC,GAAQ,GAAKA,EAAO,KACtBH,EAAKyB,YAAYtB,GAGnBH,EAAO5N,KAAKgd,cAAcpP,GAE1B,EAAG,CACD,IAAKpN,EAAI,EAAGA,EAAI,EAAGA,IACjBuc,EAAK7Z,KAAKyZ,EAAeA,EAAa/O,GAAQA,IAC9CA,EAAO,IAAIK,KAAKL,EAAKqP,YAChBC,QAAQtP,EAAKa,UAAY,GAEhCqO,EAAM5Z,KAAK0Z,EAAgBA,EAAcG,GAAQA,GACjDA,EAAO,SACCnP,EAAKY,YAAcV,GAAWF,EAAKe,gBAAkBZ,GAC/D,OAAO+O,GAGTL,EAAAvc,UAAAid,UAAA,SAAUpP,EAAWD,GAInB,OAAO9N,KAAK0c,WAAW3O,EAAMD,EAHX,SAAYF,GAC5B,OAAOA,EAAKY,aAAeV,EAAQF,EAAO,KAK9C6O,EAAAvc,UAAA8c,cAAA,SAAcpP,GAEZ,QADMwP,EAAY,IAAInP,KAAKL,EAAKqP,WAzCkB,IA0C3CG,EAAUC,UACfD,EAAUF,QAAQE,EAAU3O,UAAY,GAE1C,OAAO2O,uBA3CV3S,EAAAA,aA8CDgS,EA9CA,GCOAa,GAAA,WAAA,SAAAA,IAGmBtd,KAAAud,UAAY,IAAIhR,OAAO,+EAIvBvM,KAAAwd,SAAW,IAAIjR,OAAO,4MA6MzC,OA/LE+Q,EAAApd,UAAAuN,iBAAA,SAAiBmB,EAAqB0M,EAAkBH,GACtD,GAAIvM,EAAY,CACR,IAAA6O,EAAAzd,KAAA0d,eAAA9O,GAAEb,EAAA0P,EAAA1P,KAAMD,EAAA2P,EAAA3P,MAAOD,EAAA4P,EAAA5P,IAErB,GAAIyN,EAAS,KACL1N,EAAO,IAAIK,KAAKF,EAAMD,EAAQ,EAAGD,EAAK,EAAG,EAAG,GAElD,OADA7N,KAAKgO,kBAAkBJ,EAAMG,GACtBH,EACF,GAAIuN,EAAS,CACZvN,EAAO,IAAIK,KAAKF,EAAMD,EAAQ,EAAGD,EAAK,GAAI,GAAI,IAEpD,OADA7N,KAAKgO,kBAAkBJ,EAAMG,GACtBH,MAED+P,EAAc1P,KAAKE,MAAMS,GACzBR,EAA4C,KAAjC,IAAIH,MAAOI,oBAC5B,OAAO,IAAIJ,KAAK0P,EAAcvP,KAUpCkP,EAAApd,UAAA0d,iBAAA,SAAiBhQ,GACf,GAAIA,EAAM,KACFiQ,EAAWjQ,EAAKe,cAChBH,EAAWZ,EAAKY,WAAa,EAC7BX,EAAMD,EAAKa,UAAY,GAAK,IAAMb,EAAKa,UAAYb,EAAKa,UACxDX,EAAQU,EAAW,GAAK,IAAMA,EAAWA,EAE/C,OADaxO,KAAK0O,WAAWmP,GACf,IAAM/P,EAAQ,IAAMD,EAElC,OAAO,MASXyP,EAAApd,UAAAwO,WAAA,SAAWX,GAET,OAAIA,EAAO,IACFA,EAAKc,WAGVd,EAAO,IAAMA,EAAO,IACf,IAAIA,EAGTA,EAAO,GAAKA,EAAO,IACd,KAAKA,EAGVA,GAAQ,GAAKA,EAAO,GACf,MAAMA,OADf,GAUFuP,EAAApd,UAAAwd,eAAA,SAAeI,OACPjQ,EAAMd,SAAS+Q,EAAQzR,UAAU,EAAG,IAAK,IACzCyB,EAAQf,SAAS+Q,EAAQzR,UAAU,EAAG,GAAI,IAGhD,MAAO,CAAE0B,KAFIhB,SAAS+Q,EAAQzR,UAAU,EAAG,GAAI,IAEhCyB,MAAKA,EAAED,IAAGA,IAU3ByP,EAAApd,UAAAkb,oBAAA,SAAoBxN,EAAWmQ,OACvBC,EAAWD,EAAY,CAAC,EAAG,EAAG,GAAK,CAAC,GAAI,GAAI,IAClD,GAAInQ,aAAgBK,KAAM,CAClB,IAAAwP,EAAAzd,KAAAie,UAAArQ,GAAEG,EAAA0P,EAAA1P,KAAMD,EAAA2P,EAAA3P,MAAOD,EAAA4P,EAAA5P,IACfqQ,EAAS,IAAOjQ,KAAIkQ,KAAAtd,MAAJoN,KAAIxK,EAAA,MAAA,EAACsK,EAAMD,EAAOD,GAAQmQ,KAEhD,OADAhe,KAAKgO,kBAAkBkQ,EAAWnQ,GAC3BmQ,EACF,GAAIle,KAAKoe,WAAWxQ,GACzB,OAAO5N,KAAKyN,iBAAiBG,EAAMmQ,GAAYA,IASnDT,EAAApd,UAAAme,iBAAA,SAAiBC,EAAoBC,QAApB,IAAAD,IAAAA,EAAA,SAAoB,IAAAC,IAAAA,EAAA,IAInC,QAHMC,EAAgBF,EAAMG,MAAM,KAAKrW,IAAG,SAAC2B,GAAQ,OAAAgD,SAAShD,EAAM,MAC5D2U,EAAgBH,EAAME,MAAM,KAAKrW,IAAG,SAAC2B,GAAQ,OAAAgD,SAAShD,EAAM,MAEzDiL,EAAQ,EAAGA,GAASwJ,EAAc7d,OAAQqU,IAAS,CAE1D,GAAIwJ,EAAcxJ,GAAS0J,EAAc1J,GACvC,OAAO,EACF,GAAIwJ,EAAcxJ,GAAS0J,EAAc1J,GAC9C,OAAO,EAKX,OAAO,GAQTsI,EAAApd,UAAAke,WAAA,SAAWO,GACT,OAAO3e,KAAKud,UAAU/Q,KAAKmS,IAAe3e,KAAKwd,SAAShR,KAAKmS,IAS/DrB,EAAApd,UAAA8N,kBAAA,SAAkBJ,EAAYG,GACxBA,GAAQ,GAAKA,EAAO,KACtBH,EAAKyB,YAAYtB,IAWrBuP,EAAApd,UAAA0e,SAAA,SAASvO,EAAyBC,EAA0BC,GAC1D,OAAOH,EAAWpQ,KAAK6e,aAAaxO,GAAWrQ,KAAK6e,aAAavO,GAAYC,IAQ/E+M,EAAApd,UAAA+d,UAAA,SAAUrQ,GAIR,MAAO,CAAEG,KAHIH,EAAKe,cAGHb,MAFDF,EAAKY,WAEGX,IADVD,EAAKa,YAWnB6O,EAAApd,UAAAsQ,kBAAA,SAAkB5C,EAAY0N,EAAeH,GAC3C,OAAIG,GAAWH,EACLvN,GAAQ0N,GAAW1N,GAAQuN,EAC1BG,IAAYH,EACbvN,GAAQ0N,KACNA,GAAWH,IACbvN,GAAQuN,GAYZmC,EAAApd,UAAA2e,aAAR,SAAqBjR,OACbsQ,EAAYtQ,aAAgBK,KAAOjO,KAAK4d,iBAAiBhQ,GAAQA,EAEvE,OAAO5N,KAAKoe,WAAWF,GAAaA,EAAY3Z,+BAjNnDkG,EAAAA,aAoND6S,EApNA,GCiBAwB,GAAA,SAAA3a,GAoBE,SAAA2a,EACUC,EACR1E,EACAD,GAHF,IAAA1U,EAIEvB,EAAAvD,KAAAZ,KAAMoa,EAASC,IAAuBra,YAH9B0F,EAAAqZ,mBAAAA,IAsOZ,OAzO0C3a,EAAAA,EAAAA,GASxC0a,EAAA5e,UAAAmE,SAAA,WACErE,KAAKgf,QAGPF,EAAA5e,UAAA+e,mBAAA,SAAmBC,EAAsBC,GACvC,OAAQD,IAAiBC,EAAiB,uCAAyC,+BAGrFL,EAAA5e,UAAAkf,sBAAA,SAAsBxR,GACpB,OAAO5N,KAAKqf,YAAYzR,EAAM,eAGhCkR,EAAA5e,UAAAof,sBAAA,SAAsB1R,GACpB,OAAO5N,KAAKqf,YAAYzR,EAAM,eAGhCkR,EAAA5e,UAAAqf,mBAAA,SAAmBL,EAAsBC,GACvC,OAAQD,IAAiBC,EAAiB,uCAAyC,+BAGrFL,EAAA5e,UAAAkc,cAAA,WACE,OAAOpc,KAAKqa,uBAAuB+B,iBAGrC0C,EAAA5e,UAAAsc,aAAA,WACE,OAAOxc,KAAKqa,uBAAuBmC,gBAGrCsC,EAAA5e,UAAAsf,YAAA,WACExf,KAAK2b,mBAAqB,GAAK3b,KAAKyf,cAAczf,KAAK0f,YAAa1f,KAAK2b,mBAAqB,GAC5F3b,KAAKyf,cAAczf,KAAK0f,YAAc,EAAG,IAG7CZ,EAAA5e,UAAAyf,gBAAA,WACE3f,KAAK2b,mBAAqB,EAAI3b,KAAKyf,cAAczf,KAAK0f,YAAa1f,KAAK2b,mBAAqB,GAC3F3b,KAAKyf,cAAczf,KAAK0f,YAAc,EAAG,KAI7CZ,EAAA5e,UAAA0f,aAAA,SAAahS,GACX5N,KAAK4N,KAAOA,EACZ5N,KAAK6f,QAAU7f,KAAKoa,QAAQwD,iBAAiBhQ,GACzC5N,KAAK4a,iBACP5a,KAAK4a,gBAAgB5a,KAAK6f,SAE5B7f,KAAK8a,OAAO/I,KAAK/R,KAAK6f,UAIxBf,EAAA5e,UAAA4f,cAAA,SAAc/R,EAAcD,GAC1B9N,KAAK+f,YACL/f,KAAKyf,cAAc1R,EAAMD,IAI3BgR,EAAA5e,UAAA8f,aAAA,SAAajS,EAAcD,GAEJ,UAArB9N,KAAKigB,YAA0BjgB,KAAKkgB,cAAgBlgB,KAAK+f,YAEzD/f,KAAKmgB,YAAcpS,EACnB/N,KAAKyf,cAAc1R,EAAMD,IAG3BgR,EAAA5e,UAAAkgB,iBAAA,SAAiB9S,GACftN,KAAK4a,gBAAkBtN,GAGzBwR,EAAA5e,UAAAmgB,kBAAA,SAAkBC,GAChBtgB,KAAK2a,UAAY2F,GAGnBxB,EAAA5e,UAAAqgB,0BAAA,SAA0BjT,GACxBtN,KAAKwgB,gBAAkBlT,GAGzBwR,EAAA5e,UAAA6f,UAAA,WACE/f,KAAKsa,YAAa,EAClBta,KAAKya,cAAe,EACpBza,KAAK0a,aAAc,EACnB1a,KAAKigB,YAAc,OAGrBnB,EAAA5e,UAAAggB,YAAA,WACElgB,KAAKsa,YAAa,EAClBta,KAAKya,cAAe,EACpBza,KAAK0a,aAAc,EACnB1a,KAAKigB,YAAc,SAGrBnB,EAAA5e,UAAAugB,WAAA,WACEzgB,KAAKsa,YAAa,EAClBta,KAAKya,cAAe,EACpBza,KAAK0a,aAAc,GAGrBoE,EAAA5e,UAAAwgB,WAAA,SAAWnf,GACTvB,KAAKyf,cAAczf,KAAK0f,YAAcne,EAAOvB,KAAK2b,qBAGpDmD,EAAA5e,UAAAygB,cAAA,SAAcC,GACR5gB,KAAKwgB,iBACPxgB,KAAKwgB,gBAAgBI,IAIzB9B,EAAA5e,UAAA2gB,SAAA,SAASC,GACP,OAAO,MAGThC,EAAA5e,UAAA6gB,WAAA,SAAWxf,GACLA,EACFvB,KAAKghB,UAAUzf,IAEfvB,KAAK4N,KAAOrJ,UACZvE,KAAKihB,WAAWjhB,KAAK6a,SAIjBiE,EAAA5e,UAAAghB,oBAAR,SAA4BnT,OACtBvN,EACJ,IAAKA,EAAIuN,EAAMvN,EAAIuN,EAAO,GAAIvN,IAC5BR,KAAKmhB,cAAcje,KAAK1C,IAIpBse,EAAA5e,UAAAkhB,WAAR,SAAmBC,EAAaC,GAC9B,IACE,OAAOD,EAAM1S,gBAAkB2S,EAAM3S,eACnC0S,EAAM7S,aAAe8S,EAAM9S,YAC3B6S,EAAM5S,YAAc6S,EAAM7S,UAC5B,MAAOjL,GACP,OAAO,IAKHsb,EAAA5e,UAAAqhB,eAAR,SAAuBxT,GAGrB,GAFA/N,KAAKmhB,cAAgBxhB,QAEjBoO,EAAO,IAAO,EAChB,KAAOA,EAAO,IAAO,GACnBA,IAGJ/N,KAAKwhB,aAAazT,IAGZ+Q,EAAA5e,UAAAuhB,gBAAR,SAAwB7T,EAAY8T,GAClC,OAAO1hB,KAAKoa,QAAQ5J,kBAAkB5C,EAAM5N,KAAKsb,QAAStb,KAAKmb,SAAW,oBAAoBuG,EAAK,YACjG,oBAAoBA,EAAK,sBAGrB5C,EAAA5e,UAAAyhB,qBAAR,SAA6B/T,EAAY8T,GACvC,OAAO1hB,KAAKoa,QAAQ5J,kBAAkB5C,EAAM5N,KAAKsb,QAAStb,KAAKmb,SAAW,oBAAoBuG,EAC5F,oBAAoBA,EAAK,aAGrB5C,EAAA5e,UAAA0hB,iBAAR,SAAyBhU,EAAY8T,GACnC,OAAO1hB,KAAKoa,QAAQ5J,kBAAkB5C,EAAM5N,KAAKsb,QAAStb,KAAKmb,SAAW,oBAAoBuG,EAAK,SACjG,oBAAoBA,EAAK,mBAGrB5C,EAAA5e,UAAAmf,YAAR,SAAoBzR,EAAY8T,GAC9B,OAAI1hB,KAAKohB,WAAWxT,EAAM5N,KAAK4N,MACtB5N,KAAKyhB,gBAAgB7T,EAAM8T,GACzB1hB,KAAKohB,WAAWxT,EAAM5N,KAAK6a,OAC7B7a,KAAK4hB,iBAAiBhU,EAAM8T,GAE5B1hB,KAAK2hB,qBAAqB/T,EAAM8T,IAInC5C,EAAA5e,UAAA8e,KAAR,WACEhf,KAAK4N,MAAQ5N,KAAKoa,QAAQgE,WAAWpe,KAAKoa,QAAQwD,iBAAiB5d,KAAK4N,OACtE5N,KAAKihB,WAAWjhB,KAAK4N,MAAQ5N,KAAKihB,WAAWjhB,KAAK6a,OACpD7a,KAAKib,qBACLjb,KAAK+f,aAGCjB,EAAA5e,UAAA2hB,mBAAR,SAA2BjU,GACzB5N,KAAK4N,KAAOA,EACZ5N,KAAK4f,aAAa5f,KAAK4N,OAGjBkR,EAAA5e,UAAA4hB,kBAAR,SAA0BnD,GAClB,IAAAlB,EAAAzd,KAAAoa,QAAAsD,eAAAiB,GAAE5Q,EAAA0P,EAAA1P,KAAMD,EAAA2P,EAAA3P,MAAOD,EAAA4P,EAAA5P,IACfD,EAAO,IAAIK,KAAKF,EAAMD,EAAQ,EAAGD,GACvC7N,KAAKoa,QAAQpM,kBAAkBJ,EAAMG,GACrC/N,KAAK4N,KAAOA,EACZ5N,KAAK4f,aAAa5f,KAAK4N,OAGjBkR,EAAA5e,UAAA+gB,WAAR,SAAmBrT,GACbA,IACF5N,KAAK+hB,mBAAqBnU,EAAKY,WAC/BxO,KAAKmgB,YAAcvS,EAAKe,cACxB3O,KAAKyf,cAAczf,KAAKmgB,YAAangB,KAAK+hB,sBAItCjD,EAAA5e,UAAAshB,aAAR,SAAqBzT,GACnB/N,KAAKkhB,oBAAoBnT,GACzB/N,KAAKgiB,mBAAqBjU,EAC1B/N,KAAKiiB,mBAAqBlU,EAAO,GAG3B+Q,EAAA5e,UAAAuf,cAAR,SAAsB1R,EAAcD,OAC5BoU,EAAgBliB,KAAK+e,mBAAmB5B,UAAUpP,EAAMD,GAC9D9N,KAAKmiB,YAAc,GAAGze,OAAO7C,MAAM,GAAIqhB,GACvCliB,KAAK2b,mBAAqB7N,EAC1B9N,KAAK0b,aAAe1b,KAAKua,cAAczM,GACvC9N,KAAK0f,YAAc3R,EACnB/N,KAAKuhB,eAAexT,IAGd+Q,EAAA5e,UAAA8gB,UAAR,SAAkBzf,GAChBA,aAAiB0M,KAAOjO,KAAK6hB,mBAAmBtgB,GAASvB,KAAKoiB,aAAa7gB,GAC3EvB,KAAKihB,WAAWjhB,KAAK4N,OAGfkR,EAAA5e,UAAAkiB,aAAR,SAAqB7gB,GACnBvB,KAAKoa,QAAQgE,WAAW7c,GAASvB,KAAK8hB,kBAAkBvgB,GAASvB,KAAK4N,KAAOrJ,+BAxPhFE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,eACVC,SAAA,2vGACA4G,UAAW,CACTkR,GACAb,GACA,CACEyG,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAA1D,IAC9B2D,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAA1D,IAC9B2D,OAAO,iDArCJhG,UADAb,UAEA0B,MAiRTwB,EA3PA,CAkB0C3E,ICnC1CwI,GAAA,WAAA,SAAAA,KAWiC,2BAXhC9d,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,cAEFC,aAAc,CAAC8Z,IACf7Z,QAAS,CAAC6Z,IACVvT,UAAW,CACTqQ,GACAa,QAG6BkG,EAXjC,OCCEC,IAAM,OCLFC,GAAwB,IACxBC,GAAsBC,GAAaH,IAoBzCI,GAAA,WAAA,SAAAA,IAEUhjB,KAAAijB,QAAmBJ,GACnB7iB,KAAAyR,MAAsBqR,GAEd9iB,KAAAkjB,aAAeH,GAmE/B/iB,KAAAmjB,YAAkC,IAAIxR,EAAAA,aAQtC3R,KAAAojB,YAAkC,IAAIzR,EAAAA,aAYxC,OA1EEnS,OAAAsE,eAAuBkf,EAAA9iB,UAAA,SAAM,KAe7B,WACE,OAAOF,KAAKijB,aAhBd,SAA8B1hB,OAExBmU,EADE2N,EAAWzW,EAAarL,GAI5BmU,EADExI,EAAS3L,EAAO,UACT8hB,GA1CW,IAAA,IA0CyCA,EAEpDR,GAGX7iB,KAAKijB,QAAUvN,EAEf1V,KAAKsjB,oDAgCP9jB,OAAAsE,eAAIkf,EAAA9iB,UAAA,OAAI,KAAR,WACE,OAAOF,KAAKyR,uCAmBduR,EAAA9iB,UAAAqjB,cAAA,SAAcrd,GACZlG,KAAKmjB,YAAYpR,KAAK7L,IAGxB8c,EAAA9iB,UAAAsjB,cAAA,SAActd,GACZlG,KAAKojB,YAAYrR,KAAK7L,oCArEvBlC,EAAAA,MAAKC,KAAA,CAAC,4BAuBND,EAAAA,MAAKC,KAAA,CAAC,2BAGND,EAAAA,MAAKC,KAAA,CAAC,gCA2BN2N,EAAAA,OAAM3N,KAAA,CAAC,uCAQP2N,EAAAA,OAAM3N,KAAA,CAAC,qBAaV+e,EA5FA,GC3BaS,GAAiB,CAC5B,CAAC,WACD,CAAC,UAAW,WACZ,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,UAAW,WAClC,CAAC,UAAW,UAAW,UAAW,UAAW,WAC7C,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WACxD,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WACnE,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAC9E,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WACzF,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WACpG,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAC/G,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YCX/GC,GAAsC,EAAV7S,KAAK8S,GAAS9S,KAAKC,MAAO8S,IAGtDC,IAAsBhT,KAAK8S,GAAK,ECG7CG,GAAA,WAAA,SAAAA,IAaE9jB,KAAA+jB,aAA2C,IAAIC,EAAAA,QAC/ChkB,KAAAikB,aAA2C,IAAID,EAAAA,QAC/ChkB,KAAAkkB,OAAqB,GAwBvB,OAZEJ,EAAA5jB,UAAAikB,gCAAA,SAAgCC,EAA6BC,EAA4BC,OACjFC,EAAyBvkB,KAAK0V,OAAS2O,EAAqBC,EAAkB,GAEpFtkB,KAAKwkB,UAAYD,GAA0B,EAAI,EAAIA,EACnDvkB,KAAKykB,QAAUL,EAAsB,GAGvCN,EAAA5jB,UAAAwkB,oBAAA,WACE1kB,KAAK2kB,WAAa3kB,KAAKkkB,OAAO5b,OAAM,SACjCsc,EAAeC,GAAU,OAAAD,EAAgBC,EAAMtjB,OAAO,uCAb1D6H,EAAAA,UAASnF,KAAA,CAAC,YAAa,CAAEqF,UAAQ,0BAEjCF,EAAAA,UAASnF,KAAA,CAAC,eAAgB,CAAEqF,UAAQ,OAcvCwa,EAvCA,kBCcE,SAAAgB,EAAoBC,EAAwBC,EAAwBvf,GAApE,IAAAC,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAqf,GAAAA,EAAwBrf,EAAAsf,OAAAA,EAAwBtf,EAAAD,SAAAA,EAP5DC,EAAAuf,uBAAwC,GACxCvf,EAAAwf,oBAAqC,KAyO/C,OA/O0C9gB,EAAAA,EAAAA,GAQzB0gB,EAAAK,kBAAf,SAAiC5jB,EAAeojB,GAC9C,OAAOpjB,EAAQojB,GAAwB,EAAV9T,KAAK8S,KAOpCmB,EAAA5kB,UAAA+G,YAAA,WACEjH,KAAKolB,6BACLplB,KAAKqlB,6BACLrlB,KAAKslB,kBAAmB,GAG1BR,EAAA5kB,UAAAmE,SAAA,WACErE,KAAKulB,iBACLvlB,KAAKwlB,qBAGCV,EAAA5kB,UAAAulB,eAAR,WACEzlB,KAAK0lB,oBAAsB7B,GAC3B7jB,KAAK2lB,kBAAoB3lB,KAAKilB,uBAAuB,GACrDjlB,KAAKslB,kBAAmB,EACxBtlB,KAAK4lB,gBAGCd,EAAA5kB,UAAA2lB,sBAAR,WAAA,IAAAngB,EAAA1F,KACEA,KAAKkkB,OAAO3K,QAAO,SAAEsL,EAAO7P,GAC1B,OAAAtP,EAAKuf,uBAAuBjQ,GAAS8P,EAAqBK,kBAAkBN,EAAMtjB,MAAOmE,EAAKif,eAI1FG,EAAA5kB,UAAA4lB,yBAAR,SAAiCC,GAG/B,OAF6B/lB,KAAK0lB,oBAAsBK,EAAuB/lB,KAAK0lB,oBAAsB1lB,KAAK2lB,kBAGrG3lB,KAAK0lB,oBAAsB1lB,KAAK2lB,kBFnDR,KEqDzB3lB,KAAK0lB,oBAAsBK,GAI9BjB,EAAA5kB,UAAA8lB,sBAAR,SAA8B9f,GACxBlG,KAAKimB,gBAAkBjmB,KAAKimB,eAAeC,UAAU7e,SAAS,kBAChErH,KAAK8W,kBAGDqP,EAAmBnmB,KAAKomB,oBAAoBlgB,GAClDlG,KAAKyF,SAAS4gB,SAASrmB,KAAKimB,eAAgB,OAAWE,EAAiB1R,KAAI,MAC5EzU,KAAKyF,SAAS4gB,SAASrmB,KAAKimB,eAAgB,MAAUE,EAAiB3R,IAAG,OAGpEsQ,EAAA5kB,UAAAqlB,eAAR,WACEvlB,KAAKmkB,gCAAgCnkB,KAAKsmB,aAActmB,KAAKumB,YAAavmB,KAAKwmB,aAC/ExmB,KAAK0kB,sBACL1kB,KAAK6lB,wBACL7lB,KAAKymB,oBACLzmB,KAAKylB,kBAGCX,EAAA5kB,UAAAwmB,WAAR,SAAmB1R,EAAe6P,EAA0B8B,OACpDC,EAAU5mB,KAAKyF,SAASkS,cAAc,WAAY,OAExD3X,KAAKyF,SAASohB,aAAaD,EAAS,QAAS,iBAC7C5mB,KAAKyF,SAASohB,aAAaD,EAAS,OAAQ5mB,KAAK8mB,OAAO9R,IACxDhV,KAAKyF,SAASohB,aAAaD,EAAS,wBAAyB/B,EAAMkC,UACnE/mB,KAAKyF,SAASohB,aAAaD,EAAS,qBAAsB/B,EAAMtjB,MAAMsN,YACtE7O,KAAKyF,SAASohB,aAAaD,EAAS,oBAAqB/B,EAAMvO,SAAcuO,EAAMkC,SAAQ,KAAKlC,EAAMtjB,OAEtGolB,EAAgB5O,YAAY6O,GAE5B5mB,KAAKyF,SAASsS,YAAY/X,KAAKgnB,WAAYL,GAC3C3mB,KAAKklB,oBAAoBhiB,KAAK0jB,IAGxB9B,EAAA5kB,UAAA+mB,YAAR,WAAA,IAAAvhB,EAAA1F,KACQ2mB,EAAkB3mB,KAAKyF,SAASkS,cAAc,QAAS,OAE7D3X,KAAKkkB,OAAO3K,QAAO,SAAEsL,EAAO7P,GAAU,OAAAtP,EAAKghB,WAAW1R,EAAO6P,EAAO8B,MAG9D7B,EAAA5kB,UAAAumB,kBAAR,WACEzmB,KAAKgnB,WAAahnB,KAAKyF,SAASkS,cAAc,UAAW,OAEzD3X,KAAKyF,SAASohB,aAAa7mB,KAAKgnB,WAAY,UAAW,OAAOhnB,KAAKsmB,aAAY,IAAmB,EAAftmB,KAAKykB,SACxFzkB,KAAKyF,SAASohB,aAAa7mB,KAAKgnB,WAAY,sBAAuB,iBACnEhnB,KAAKyF,SAASohB,aAAa7mB,KAAKgnB,WAAY,QAAS,yBACrDhnB,KAAKyF,SAASohB,aAAa7mB,KAAKgnB,WAAY,QAAS,IAAGhnB,KAAKsmB,aAAeY,KAC5ElnB,KAAKyF,SAASohB,aAAa7mB,KAAKgnB,WAAY,SAAU,GAAGhnB,KAAKwkB,WAE9DxkB,KAAKmnB,aAAavgB,cAAcmR,YAAY/X,KAAKgnB,YAEjDhnB,KAAKinB,eAGCnC,EAAA5kB,UAAAknB,SAAR,SAAiBC,EAAM3B,EAAqBC,OAEpC2B,GAAY3B,EAAoBD,IAAkC,EAAV7U,KAAK8S,IAAU9S,KAAK8S,GAAK,EAAI,EACrF4D,EAASvnB,KAAKykB,QAAU5T,KAAK2W,IAAI9B,GAAuB1lB,KAAKykB,QAC7DgD,EAASznB,KAAKykB,QAAU5T,KAAK6W,IAAIhC,GAAuB1lB,KAAKykB,QAC7DkD,EAAO3nB,KAAKykB,QAAU5T,KAAK2W,IAAI7B,GAAqB3lB,KAAKykB,QACzDmD,EAAO5nB,KAAKykB,QAAU5T,KAAK6W,IAAI/B,GAAqB3lB,KAAKykB,QAEzDoD,EAAkB,CACtB,IAAKN,EAAQE,EACb,IAAKznB,KAAKykB,QAASzkB,KAAKykB,QAAS,EAAG6C,EAAU,EAAGK,EAAMC,EACvD,IAAK5nB,KAAKykB,QAASzkB,KAAKykB,QACxB,KACAqD,KAAK,KAEP,OAAOT,EAAKR,aAAa,IAAKgB,IAGxB/C,EAAA5kB,UAAA0lB,aAAR,WAAA,IAAAlgB,EAAA1F,KAEOA,KAAKslB,kBAGRtlB,KAAKglB,OAAO+C,kBAAiB,WAAO,OAAAriB,EAAKsiB,gBAIrClD,EAAA5kB,UAAA8nB,WAAR,SAAmBC,EAA+BlC,QAA/B,IAAAkC,IAAAA,EAAA,QAA+B,IAAAlC,IAAAA,EAAA,OAC1CmC,EAAiCnC,EAAuB/lB,KAAK2lB,kBAChCsC,IAAsBjoB,KAAKklB,oBAAoBvkB,SAM7EunB,GAEHloB,KAAK0lB,oBAAsB1lB,KAAK0lB,oBAAsB1lB,KAAK2lB,kBAC3DsC,IACAjoB,KAAK2lB,kBAAoB3lB,KAAKilB,uBAAuBgD,GACrDlC,EAAuB,IAGvBA,GAAwBrC,GAExB1jB,KAAKonB,SACHpnB,KAAKklB,oBAAoB+C,GACzBjoB,KAAK0lB,oBACL1lB,KAAK8lB,yBAAyBC,KAIlChX,OAAOoZ,sBAAsBnoB,KAAKgoB,WAAW7J,KAAKne,KAAMioB,EAAmBlC,MAIrEjB,EAAA5kB,UAAAkoB,iBAAR,SAAyBliB,GACvBlG,KAAKikB,aAAaxiB,KAAKyE,IAGjB4e,EAAA5kB,UAAAmoB,aAAR,eACQC,EAAkC,CAAEvB,SAAU/mB,KAAKuoB,qBAAsBhnB,MAAOvB,KAAKwoB,mBAE3FxoB,KAAK+jB,aAAatiB,KAAK6mB,IAGjBxD,EAAA5kB,UAAA0W,aAAR,SAAqB1Q,GACnBlG,KAAKimB,eAAiBjmB,KAAKyoB,UAAU7hB,cAAc8hB,UACnD1oB,KAAKuoB,qBAAuBriB,EAAMoB,OAAOqhB,eAAe,KAAM,yBAC9D3oB,KAAKwoB,kBAAoBtiB,EAAMoB,OAAOqhB,eAAe,KAAM,sBAC3D3oB,KAAK4oB,YAAc1iB,EAAMoB,OAAOqhB,eAAe,KAAM,qBACrD3oB,KAAK8W,cACL9W,KAAKgmB,sBAAsB9f,OAErB2iB,EAAe,CAAE9B,SAAU/mB,KAAKuoB,qBAAsBhnB,MAAOvB,KAAKwoB,mBACxExoB,KAAKooB,iBAAiBS,IAGhB/D,EAAA5kB,UAAA4oB,eAAR,WACE9oB,KAAKmkB,gCAAgCnkB,KAAKsmB,aAActmB,KAAKumB,YAAavmB,KAAKwmB,aAC/ExmB,KAAKyF,SAASohB,aAAa7mB,KAAKgnB,WAAY,QAAS,IAAGhnB,KAAKsmB,aAAeY,KAC5ElnB,KAAKyF,SAASohB,aAAa7mB,KAAKgnB,WAAY,SAAU,GAAGhnB,KAAKwkB,YAGxDM,EAAA5kB,UAAA6oB,cAAR,WACM/oB,KAAKimB,gBACPjmB,KAAKyF,SAAS6R,SAAStX,KAAKimB,eAAgB,kBAIxCnB,EAAA5kB,UAAAklB,2BAAR,WACMplB,KAAKgpB,sBACPhpB,KAAKgpB,wBAIDlE,EAAA5kB,UAAAmlB,2BAAR,WACMrlB,KAAKipB,sBACPjpB,KAAKipB,wBAIDnE,EAAA5kB,UAAAslB,kBAAR,WAAA,IAAA9f,EAAA1F,KACMkpB,EAA6BlpB,KAAK+kB,GAAGne,cAAcsB,iBAAiB,mBACxEghB,EAAcvpB,MAAMwI,KAAK+gB,IAEb3P,QAAO,SAACsL,GAClBnf,EAAKD,SAASsD,OAAO8b,EAAO,QAASnf,EAAK2iB,aAAalK,KAAKzY,IAC5DA,EAAKD,SAASsD,OAAO8b,EAAO,aAAcnf,EAAKkR,aAAauH,KAAKzY,IACjEA,EAAKD,SAASsD,OAAO8b,EAAO,YAAanf,EAAKsgB,sBAAsB7H,KAAKzY,IACzEA,EAAKD,SAASsD,OAAO8b,EAAO,aAAcnf,EAAKqjB,cAAc5K,KAAKzY,MAGpE1F,KAAKgpB,qBAAuBhpB,KAAKyF,SAASsD,OAAOgG,OAAQ,SAAU/O,KAAK8oB,eAAe3K,KAAKne,OAC5FA,KAAKipB,qBAAuBjpB,KAAKyF,SAASsD,OAAO/I,KAAKmpB,+BAAgC,SAAUnpB,KAAK+oB,cAAc5K,KAAKne,QAGlH8kB,EAAA5kB,UAAAipB,6BAAR,eACQC,EAAiBC,SAASC,uBAAuB,oBAEvD,OAAOF,EAAezoB,OAASyoB,EAAe,GAAKra,QAG7C+V,EAAA5kB,UAAAkmB,oBAAR,SAA4BlgB,GAG1B,MAAO,CACLuO,KAAMvO,EAAMqjB,QAAUvpB,KAAKimB,eAAepf,YAAc,EACxD2N,IAAKtO,EAAMsjB,QAAUxpB,KAAKimB,eAAewD,aAJd,IAQvB3E,EAAA5kB,UAAA4W,YAAR,WACE9W,KAAKyF,SAASyS,YAAYlY,KAAKimB,eAAgB,sCAhPlDxhB,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,gBACVC,SAAA,6VARkBuE,EAAAA,kBAAYwgB,EAAAA,cAA2BvgB,EAAAA,aAyP3D2b,GA/O0ChB,ICqB1C6F,GAAA,SAAAxlB,GA4BE,SAAAwlB,EACSC,EACCC,EACAtkB,SAHVG,EAIIvB,EAAAvD,KAAAZ,OAAOA,YAHF0F,EAAAkkB,eAAAA,EACClkB,EAAAmkB,yBAAAA,EACAnkB,EAAAH,QAAAA,EAzBFG,EAAAI,mBAA6B,EAG7BJ,EAAAM,aAAuB,EACvBN,EAAAsjB,qBAAqC,IAAIhF,EAAAA,QAEzCte,EAAAokB,WAAQrM,EAAA,IACbsF,GAAaH,KAAMkC,MAatBpf,EAAAqkB,SAAQ,WAAS,OAAArkB,EAAKsjB,qBAAqBvnB,QAQvCiE,EAAKY,OAASZ,EAAKH,QAAQgB,KAAK,IAAIpG,OAAO,QAoIjD,OAlKuCiE,EAAAA,EAAAA,GAiCrCulB,EAAAzpB,UAAAsG,gBAAA,WACExG,KAAKgG,aAAc,GAGrB2jB,EAAAzpB,UAAAwG,UAAA,WAC2B1G,KAAKsmB,aAAa1f,cAAcC,cAIhC7G,KAAK8F,mBAAqB9F,KAAKgG,cACtDhG,KAAK8F,mBAAoB,EACzB9F,KAAKgqB,iBACLhqB,KAAKiqB,2BAGPjqB,KAAKkqB,2BAGPP,EAAAzpB,UAAA+G,YAAA,WACEjH,KAAKolB,8BAGPuE,EAAAzpB,UAAAmE,SAAA,WACErE,KAAKgqB,kBAGPL,EAAAzpB,UAAAojB,iBAAA,WACMtjB,KAAKmqB,eACPnqB,KAAKmqB,aAAaC,UAClBpqB,KAAKiqB,4BAIDN,EAAAzpB,UAAAgqB,wBAAR,WACMlqB,KAAKmqB,cAAgBnqB,KAAKsG,SACPtG,KAAKsG,OAAOiB,KAAKvH,KAAKkkB,UAEzClkB,KAAKgqB,iBACLhqB,KAAKsjB,sBAKHqG,EAAAzpB,UAAAmqB,gBAAR,eACQC,EAAgBtqB,KAAKuqB,iBAAiBvqB,KAAKoN,MAC3Cod,EAAUxqB,KAAK6pB,yBAAyBY,wBAAwBH,GAEtEtqB,KAAKmqB,aAAenqB,KAAK0qB,eAAeL,gBAAgBG,OAElDG,EAAyC3qB,KAAKmqB,aAAqB,SAIzE,OAFAnqB,KAAK4qB,mBAAmBD,GAEjBA,GAGDhB,EAAAzpB,UAAA+pB,wBAAR,eACQU,EAAW3qB,KAAKqqB,kBAEtBrqB,KAAK6qB,2BAA2BF,GAChC3qB,KAAK4pB,eAAekB,gBACpB9qB,KAAK+qB,kBAAkBJ,GACvB3qB,KAAKgrB,kBAAkBL,IAGjBhB,EAAAzpB,UAAAqqB,iBAAR,SAAyBU,GACvB,OAAOjrB,KAAK8pB,SAASmB,IAGftB,EAAAzpB,UAAA8pB,eAAR,eACQkB,EAAezH,GAAe9iB,OAAS,EAE7C,IAAKX,KAAKkkB,OACR,OAAOlkB,KAAK8mB,OAASrD,GAAeyH,OAGhCC,EAAenrB,KAAKkkB,OAAOvjB,OAAS,EAE1C,GAAIwqB,EAAeD,EAAc,CAM/B,QALIpE,EAASrD,GAAeyH,GAGtBE,EAAqBD,EAAeD,EAEjC1qB,EAAI,EAAGA,GAAK4qB,EAAoB5qB,IACvCsmB,EAASA,EAAOpjB,OAAO+f,GAAeyH,IAGxC,OAAOlrB,KAAK8mB,OAASA,EAGvB,OAAO9mB,KAAK8mB,OAASrD,GAAe0H,IAG9BxB,EAAAzpB,UAAAklB,2BAAR,WACMplB,KAAK+pB,WACP/pB,KAAK+pB,SAAQ,eAITJ,EAAAzpB,UAAA0qB,mBAAR,SAA2BD,GACzBA,EAASpE,YAAcvmB,KAAKumB,YAAY3f,cAAc6iB,aACtDkB,EAASnE,YAAcxmB,KAAKwmB,YAAY5f,cAAc6iB,aACtDkB,EAASrE,aAAetmB,KAAKsmB,aAAa1f,cAAcC,YACxD8jB,EAAS7D,OAAS9mB,KAAK8mB,OACvB6D,EAASjV,OAAS1V,KAAK0V,OACvBiV,EAASzG,OAASlkB,KAAKkkB,QAAU,IAG3ByF,EAAAzpB,UAAA6qB,kBAAR,SAA0BJ,GAA1B,IAAAjlB,EAAA1F,KACE2qB,EAAS5G,aAAazY,UAAS,SAACpF,GAC9BR,EAAK6d,cAAcrd,MAIfyjB,EAAAzpB,UAAA8qB,kBAAR,SAA0BL,GAA1B,IAAAjlB,EAAA1F,KACE2qB,EAAS1G,aAAa3Y,UAAS,SAACpF,GAC9BR,EAAK8d,cAActd,MAIfyjB,EAAAzpB,UAAA2qB,2BAAR,SAAmCF,GAAnC,IAAAjlB,EAAA1F,KACEA,KAAKgpB,qBAAqB1d,UAAS,WACjCqf,EAASpE,YAAc7gB,EAAK6gB,YAAY3f,cAAc6iB,aACtDkB,EAASnE,YAAc9gB,EAAK8gB,YAAY5f,cAAc6iB,aACtDkB,EAASrE,aAAe5gB,EAAK4gB,aAAa1f,cAAcC,mCAlK7DpC,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,YACVC,SAAA,wnBAjCsB0mB,EAAAA,yBAA8BC,EAAAA,gCACpDriB,EAAAA,2DAgDCG,EAAAA,UAASnF,KAAA,CAAC,iBAAkB,CAAEoF,KAAM2Q,EAAAA,iBAAkB1Q,UAAQ,yBAG9DF,EAAAA,UAASnF,KAAA,CAAC,cAAe,CAAEqF,UAAQ,yBACnCF,EAAAA,UAASnF,KAAA,CAAC,cAAe,CAAEqF,UAAQ,0BACnCF,EAAAA,UAASnF,KAAA,CAAC,eAAgB,CAAEqF,UAAQ,sBAEpCiP,EAAAA,aAAYtU,KAAA,CAAC,gBAAiB,CAAC,cA6IlC0lB,EAtKA,CAIuC3G,ICxBvCuI,GAAA,WAAA,SAAAA,KAe8B,2BAf7B1mB,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZ2kB,GACA7E,IAEF0G,gBAAiB,CACf1G,IAEF7f,QAAS,CACP0kB,QAG0B4B,EAf9B,GCEAE,GAAA,WAAA,SAAAA,IAGUzrB,KAAA0rB,WAAsB,EACtB1rB,KAAA2rB,YAAuB,EACvB3rB,KAAA4rB,WAAsB,EAsEhC,OA3DEpsB,OAAAsE,eAAuB2nB,EAAAvrB,UAAA,SAAM,KAI7B,WACE,OAAOF,KAAKijB,aALd,SAA8B1hB,GAC5BvB,KAAKijB,QAAUrW,EAAarL,oCAgB9B/B,OAAAsE,eAA0B2nB,EAAAvrB,UAAA,WAAQ,KAIlC,WACE,OAAOF,KAAK0rB,eALd,SAAmCnqB,GACjCvB,KAAK0rB,UAAYjf,EAAiBlL,oCAgBpC/B,OAAAsE,eAA2B2nB,EAAAvrB,UAAA,YAAS,KAIpC,WACE,OAAOF,KAAK2rB,gBALd,SAAqCpqB,GACnCvB,KAAK2rB,WAAalf,EAAiBlL,oCAgBrC/B,OAAAsE,eAA0B2nB,EAAAvrB,UAAA,WAAQ,KAIlC,WACE,OAAOF,KAAK4rB,eALd,SAAmCrqB,GACjCvB,KAAK4rB,UAAYnf,EAAiBlL,oEApDnCyC,EAAAA,MAAKC,KAAA,CAAC,8BAiBND,EAAAA,MAAKC,KAAA,CAAC,kCAiBND,EAAAA,MAAKC,KAAA,CAAC,kCAiBND,EAAAA,MAAKC,KAAA,CAAC,kBAQTwnB,EA3EA,GCYAI,GAAA,SAAA1nB,GAAA,SAAA0nB,mDAIuE,OAA5BznB,EAAAA,EAAAA,uBAJ1CK,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,gBACVC,SAAA,6QAEqEknB,EAJvE,CAI2CJ,ICnB3CK,GAAA,WAAA,SAAAA,KAWkC,2BAXjCjnB,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,cAEFE,QAAS,CACP4mB,IAEF7mB,aAAc,CACZ6mB,QAG8BC,EAXlC,GCNMC,GAAuB,CAAC,UAAW,UAazCC,GAAA,WAAA,SAAAA,IACUhsB,KAAAyR,MAAgB,UAChBzR,KAAAisB,YAAuB,EAE/BjsB,KAAAksB,gBAAiB,EAkCSlsB,KAAAmsB,YAAkC,IAAIxa,EAAAA,aA0BlE,OAtCEnS,OAAAsE,eAA2BkoB,EAAA9rB,UAAA,YAAS,KAIpC,WACE,OAAOF,KAAKisB,gBALd,SAAqC1qB,GACnCvB,KAAKisB,WAA4B,KAAf,GAA2Bxf,EAAiBlL,oCAqBhE/B,OAAAsE,eAAqBkoB,EAAA9rB,UAAA,OAAI,KAIzB,WACE,OAAOF,KAAKyR,WALd,SAA0BrE,GACxBpN,KAAKyR,MAAQsa,GAAqBhoB,SAASqJ,GAAQA,EA7DnB,2CAoElC4e,EAAA9rB,UAAAksB,MAAA,WACEpsB,KAAKksB,gBAAiB,EACtBlsB,KAAKmsB,YAAYpa,KAAK,CAACxQ,MAAOvB,KAAKuB,MAAOc,MAAOrC,KAAKqC,MAAOgqB,SAAUrsB,KAAKqsB,YAG9EL,EAAA9rB,UAAAosB,SAAA,WACE,OAAOtsB,KAAKqC,MAAQrC,KAAKqC,MAAQrC,KAAKuB,sCApDvCyC,EAAAA,MAAKC,KAAA,CAAC,0BAGND,EAAAA,MAAKC,KAAA,CAAC,6BAGND,EAAAA,MAAKC,KAAA,CAAC,iCAUND,EAAAA,MAAKC,KAAA,CAAC,qCAYN2N,EAAAA,OAAM3N,KAAA,CAAC,gCAUPD,EAAAA,MAAKC,KAAA,CAAC,aAgBT+nB,EAhEA,GCCAO,GAAA,SAAApoB,GAAA,SAAAooB,mDAcA,OAV4CnoB,EAAAA,EAAAA,GAE1CmoB,EAAArsB,UAAAssB,WAAA,SAAWtmB,GAELgJ,EAAehJ,IACjBlG,KAAKosB,6BATV3nB,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,iBACVC,SAAA,6dAYF4nB,EAdA,CAI4CP,ICb5CS,GAAA,WAAA,SAAAA,KAOmC,2BAPlC5nB,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,cAEFC,aAAc,CAACunB,IACftnB,QAAS,CAACsnB,QAEuBE,EAPnC,GCDaC,GAAoC,CAC/C3Q,GAAI,CAAE4Q,UAAW,cACjB3Q,GAAI,CAAE2Q,UAAW,kBACjB7Q,GAAI,CAAE6Q,UAAW,kBAgBnBC,GAAA,WAuEE,SAAAA,EAAYrnB,GArEJvF,KAAA6sB,aAAqC,GACrC7sB,KAAA8sB,gBAA0B,EAG1B9sB,KAAA+sB,oBAA4C,GAE3C/sB,KAAAgtB,SAAQ5sB,EAAA,GACVssB,GAAkC9gB,GAClC8gB,GAAkC7gB,MA2DrB7L,KAAA8a,OAA6B,IAAInJ,EAAAA,aAGnD3R,KAAKsG,OAASf,EAAQgB,KAAK,IAAIpG,OAAO,MAgG1C,OAtIEX,OAAAsE,eAA4B8oB,EAAA1sB,UAAA,cAAW,KAOvC,WACE,OAAOF,KAAK6sB,kBARd,SAAwCtrB,GAEtCvB,KAAK+sB,oBAAmBtpB,EAAOzD,KAAKitB,aACpCjtB,KAAK6sB,aAAe7sB,KAAKktB,iBAAiB3rB,oCAmB5C/B,OAAAsE,eACI8oB,EAAA1sB,UAAA,gBAAa,KAIjB,WACE,OAAOF,KAAK8sB,oBANd,SACkBvrB,GAChBvB,KAAK8sB,eAAgC,KAAf,GAA2BrgB,EAAiBlL,oCAiBpEqrB,EAAA1sB,UAAAwG,UAAA,WACE1G,KAAKmtB,gBAGPP,EAAA1sB,UAAAktB,UAAA,SAAUC,EAAiBC,QAAA,IAAAA,IAAAA,GAAA,OACnBC,EAAYvtB,KAAKitB,YAAYzd,UAAS,SAAClQ,GAAK,OAAAA,EAAO,MAAM+tB,EAAgB,MAC/ErtB,KAAKitB,YAAYxd,OAAO8d,EAAW,GAE/BD,GACFttB,KAAKwtB,yBAITZ,EAAA1sB,UAAAutB,YAAA,WACE,OAAQztB,KAAK0tB,eAAiB1tB,KAAKitB,YAAYrT,OAAM,SAACkH,GAAK,OAACA,EAAE6M,YAAWhtB,OAAS,GAGpFisB,EAAA1sB,UAAAssB,WAAA,SAAWtmB,GAELgJ,EAAehJ,IACjBlG,KAAK4tB,kBAKThB,EAAA1sB,UAAA0tB,eAAA,WAAA,IAAAloB,EAAA1F,KACQ6tB,EAAc,GAEpB7tB,KAAKitB,YAAY1T,QAAO,SAAC8T,GAClBA,EAAWM,WACdE,EAAY3qB,KAAKmqB,KAIrBQ,EAAYtU,QAAO,SAAC8T,GAAc,OAAA3nB,EAAK0nB,UAAUC,GAAY,KAE7DrtB,KAAKwtB,yBAGCZ,EAAA1sB,UAAAitB,aAAR,WAEMntB,KAAKsG,SACStG,KAAKsG,OAAOiB,KAAKvH,KAAKitB,cAEvBjtB,KAAK8tB,sBAAsB9tB,KAAKitB,cAC7CjtB,KAAKwtB,0BAOHZ,EAAA1sB,UAAAgtB,iBAAR,SAAyBD,GACvB,GAAIttB,MAAMouB,QAAQd,GAAc,CAE9B,IAAK,IAAIzsB,EAAI,EAAGA,EAAIysB,EAAYtsB,OAAQH,IAAK,KACrC6sB,EAAaJ,EAAYzsB,GAE3B6sB,EAAW9rB,OAA8B,IAArB8rB,EAAW9rB,QAAoC,IAArB8rB,EAAW9rB,MAE3D8rB,EAAgB,IAAI1c,EAAAA,MAIpBsc,EAAYxd,OAAOjP,EAAG,GACtBA,KAIJ,OAAOysB,EAGT,MAAO,IAGDL,EAAA1sB,UAAA4tB,sBAAR,SAA8Bb,GAA9B,IAAAvnB,EAAA1F,KACQguB,EAAsCf,EAE5C,OAAIe,EAAcrtB,SAAWX,KAAK+sB,oBAAoBpsB,QAI/CqtB,EAAcC,KAAI,SAAEZ,EAAYrY,GAAU,OAAAqY,EAAW9rB,QAAUmE,EAAKqnB,oBAAoB/X,GAAOzT,OACjG8rB,EAAWhB,WAAa3mB,EAAKqnB,oBAAoB/X,GAAOqX,YAGvDO,EAAA1sB,UAAAstB,sBAAR,WAAA,IAAA9nB,EAAA1F,KACE6I,WAAU,WACRnD,EAAKoV,OAAO/I,KAAKrM,EAAKunB,eAExBjtB,KAAK+sB,oBAAmBtpB,EAAOzD,KAAK6sB,oDAnIrC7oB,EAAAA,MAAKC,KAAA,CAAC,wCAsBND,EAAAA,MAAKC,KAAA,CAAC,oCAUND,EAAAA,MAAKC,KAAA,CAAC,2BAGN2N,EAAAA,OAAM3N,KAAA,CAAC,eAmGV2oB,EAxKA,GCDAsB,GAAA,SAAA/pB,GAME,SAAA+pB,EAAY3oB,UACVpB,EAAAvD,KAAAZ,KAAMuF,IAAQvF,KAGlB,OANiDoE,EAAAA,EAAAA,uBAJhDK,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,uBACVC,SAAA,2vBA5BkBsE,EAAAA,mBAoCpBilB,EAVA,CAIiDtB,ICrBjDuB,GAAA,WAAA,SAAAA,IAUiCnuB,KAAAouB,gBAAkB,IAAIzc,EAAAA,aAMvD,OAHEwc,EAAAjuB,UAAAmuB,aAAA,WACEruB,KAAKouB,gBAAgBrc,4BAdxBtN,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,wBACVC,SAAA,+MAKCX,EAAAA,MAAKC,KAAA,CAAC,oCAGN2N,EAAAA,OAAM3N,KAAA,CAAC,0BAMVkqB,EAhBA,GCIAG,GAAA,WAAA,SAAAA,KAQwC,2BARvCzpB,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACA0nB,IAEFznB,aAAc,CAACkpB,GAA6BC,IAC5ClpB,QAAS,CAACipB,QAE4BI,EARxC,GCLAC,GAAA,WAAA,SAAAA,KAKA,sCAFGvqB,EAAAA,MAAKC,KAAA,CAAC,cAETsqB,EALA,GCgBAC,GAAA,SAAArqB,GAAA,SAAAqqB,mDAImE,OAA1BpqB,EAAAA,EAAAA,uBAJxCK,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,cACVC,SAAA,4GAEiE6pB,EAJnE,CAIyCD,IClBzCE,GAAA,WAAA,SAAAA,KAWgC,2BAX/B5pB,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZwpB,IAEFvpB,QAAS,CACPupB,QAG4BC,EAXhC,GCHMC,GAA0B,cA0BhCC,GAAA,WAAA,SAAAA,IAIU3uB,KAAA4uB,YAAsB,EACtB5uB,KAAA6uB,gBAA0B,EAC1B7uB,KAAA8uB,UAAqBJ,GAG7B1uB,KAAA6S,eAAyB,YACzB7S,KAAA+uB,WAAqB,EA8JvB,OAvJEvvB,OAAAsE,eAAwB6qB,EAAAzuB,UAAA,UAAO,KAI/B,WACE,OAAOF,KAAKgvB,cALd,SAAgCztB,GAC9BvB,KAAKgvB,SAAWrvB,MAAMouB,QAAQxsB,GAASA,EAAQ,oCAgBjD/B,OAAAsE,eAA2B6qB,EAAAzuB,UAAA,YAAS,KAIpC,WACE,OAAOF,KAAK4uB,gBALd,SAAqCrtB,GACnCvB,KAAK4uB,WAAaniB,EAAiBlL,oCAQrC/B,OAAAsE,eAAgC6qB,EAAAzuB,UAAA,gBAAa,KAI7C,WACE,OAAOF,KAAK6uB,oBALd,SAA8CttB,GAC5CvB,KAAK6uB,eAAiBpiB,EAAiBlL,oCAmCzC/B,OAAAsE,eAAyB6qB,EAAAzuB,UAAA,WAAQ,KAIjC,WACE,OAAOF,KAAK8uB,eALd,SAAkCvtB,GAChCvB,KAAK8uB,UAAY5Y,GAAsBnS,SAASxC,GAASA,EAAQmtB,oCAgCnElvB,OAAAsE,eAAiC6qB,EAAAzuB,UAAA,kBAAe,KAIhD,WACE,OAAOF,KAAKivB,sBALd,SAAiD1tB,GAC/CvB,KAAKivB,iBAAmBtvB,MAAMouB,QAAQxsB,GAASA,EAAQ,oCA4CzD/B,OAAAsE,eAAuB6qB,EAAAzuB,UAAA,SAAM,KAI7B,WACE,OAAOF,KAAKkvB,aALd,SAA8B3tB,GAC5BvB,KAAKkvB,QAAW3tB,aAAiB2H,EAAAA,WAAc3H,EAAMqF,cAAgBrF,oEA7ItEyC,EAAAA,MAAKC,KAAA,CAAC,gCAiBND,EAAAA,MAAKC,KAAA,CAAC,uCASND,EAAAA,MAAKC,KAAA,CAAC,uCAoCND,EAAAA,MAAKC,KAAA,CAAC,uCAiCND,EAAAA,MAAKC,KAAA,CAAC,sCA6CND,EAAAA,MAAKC,KAAA,CAAC,eAWT0qB,EAxKA,GCFAQ,GAAA,SAAAhrB,GASE,SAAAgrB,EACEC,EACQ3pB,EACA4pB,EACA5Y,EACDmT,GALT,IAAAlkB,EAMEvB,EAAAvD,KAAAZ,OAAOA,YAJC0F,EAAAD,SAAAA,EACAC,EAAA2pB,OAAAA,EACA3pB,EAAA+Q,mBAAAA,EACD/Q,EAAAkkB,eAAAA,EAuGDlkB,EAAA4pB,SAAQ,WACV5pB,EAAKqpB,WACPrpB,EAAK0mB,SAvGP1mB,EAAKqU,UAAYqV,EAAwB,MAAa,YAgJ1D,OA3JuChrB,EAAAA,EAAAA,GAmBrC+qB,EAAAjvB,UAAAksB,MAAA,WACEpsB,KAAKuvB,kBAELvvB,KAAK+uB,WAAY,GAGnBI,EAAAjvB,UAAAsvB,cAAA,SAAcC,OACNC,EAAmBD,IAAgBzvB,KAAK2vB,mBAAmBF,EAAa,YAE9E,OAAIA,GAAeA,EAAYG,QAAUF,GACvC1vB,KAAKosB,QACE/e,EAAaoiB,EAAYG,OAAQ5vB,KAAK+Z,UAAW/Z,KAAKwN,OAASiiB,IAGpEA,GAAeA,EAAY5lB,KAAO6lB,GACpC1vB,KAAKosB,QACEpsB,KAAK6vB,QAAQJ,EAAY5lB,WAFlC,GAWFslB,EAAAjvB,UAAA8P,KAAA,SAAKxC,GACHxN,KAAK8vB,UAAY9vB,KAAKsH,OACtBtH,KAAKwN,MAAQA,EACbxN,KAAK+uB,WAAY,EACjB/uB,KAAK4pB,eAAekB,gBACpB9qB,KAAK+vB,0BAGPZ,EAAAjvB,UAAAyvB,mBAAA,SAAmBF,EAAkBpD,GACnC,OAAOnf,EAASuiB,EAAYpD,GAAW,YAAcoD,EAAYpD,GAAUrsB,KAAKwN,OAASiiB,GAAeA,EAAYpD,IAUtH8C,EAAAjvB,UAAAoZ,OAAA,SAAO9L,GACLxN,KAAK+uB,WAAa/uB,KAAK8vB,YAAc9vB,KAAKsH,OAAStH,KAAKosB,QAAUpsB,KAAKgQ,KAAKxC,IAGtE2hB,EAAAjvB,UAAA8vB,uBAAR,SAA+B9pB,GAI7B,QAH6BlG,KAAKiwB,gBAAgB/pB,EAAMoB,OAAQ,4BAC9DtH,KAAKiwB,gBAAgB/pB,EAAMoB,OAAO4oB,cAAe,6BAK7Cf,EAAAjvB,UAAAiwB,yBAAR,SAAiCjqB,OACzBkqB,EAAsBpwB,KAAKqwB,UAAYrwB,KAAKqwB,SAASzpB,cAAcoB,cAAc,6BACvF,QAASooB,GAAuBA,EAAoB/oB,SAASnB,EAAMoB,UAG7D6nB,EAAAjvB,UAAAowB,iBAAR,SAAyBpqB,GACvB,OAAOlG,KAAKsH,SAAWtH,KAAKsH,OAAOD,SAASnB,EAAMoB,SAG5C6nB,EAAAjvB,UAAAqwB,qBAAR,SAA6BrqB,GAEvBlG,KAAKswB,iBAAiBpqB,IAAUlG,KAAKgwB,uBAAuB9pB,IAAUlG,KAAKmwB,yBAAyBjqB,IAEtGlG,KAAKosB,SAKD+C,EAAAjvB,UAAA+vB,gBAAR,SAAwBzqB,EAAsBgrB,GAC5C,OAAOhrB,GAAWA,EAAQ0gB,UAAU7e,SAASmpB,IAGvCrB,EAAAjvB,UAAAuwB,iBAAR,WACE,SAAUzwB,KAAKqwB,SAASzpB,gBAAiB5G,KAAKqwB,SAASzpB,cAAc8pB,eAG/DvB,EAAAjvB,UAAAywB,oBAAR,WAAA,IAAAjrB,EAAA1F,KACEA,KAAKgJ,eAAiBhJ,KAAKyF,SAASsD,OAAO,SAAU,SAAQ,WAC3DrD,EAAK0mB,UAGPpsB,KAAK8I,iBAAmB9I,KAAKyF,SAASsD,OAAO,WAAY,QAAO,SAAG7C,GACjER,EAAK6qB,qBAAqBrqB,KAG5B6I,OAAO0I,iBAAiB,SAAUzX,KAAKsvB,UAAU,IAS3CH,EAAAjvB,UAAA2vB,QAAR,SAAgBhmB,GACd,OAAIgG,EAAehG,GACVkG,EAAiBlG,GAGtBA,EACK7J,KAAKqvB,OAAOuB,SAAS,CAAC/mB,SAD/B,GAKMslB,EAAAjvB,UAAAqvB,gBAAR,WACMvvB,KAAK8I,kBACP9I,KAAK8I,mBAGH9I,KAAKgJ,gBACPhJ,KAAKgJ,iBAGP+F,OAAOoJ,oBAAoB,SAAUnY,KAAKsvB,UAAU,IAG9CH,EAAAjvB,UAAA2wB,YAAR,WACE7wB,KAAKyW,mBAAmB3D,YAAY9S,KAAKqwB,SAASzpB,cAAe,EAAG5G,KAAKsH,OAAQtH,KAAKyS,iBAAiB,EAAOzS,KAAK8wB,eACnH9wB,KAAKyW,mBAAmBnE,eAAetS,KAAKuS,UAC5CvS,KAAK6S,eAAiB7S,KAAKyW,mBAAmB7D,qBAGxCuc,EAAAjvB,UAAA6vB,uBAAR,WACM/vB,KAAKywB,oBACPzwB,KAAK6wB,cACL7wB,KAAK2wB,uBAEL3wB,KAAKosB,6BA5JV3nB,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,YACVC,SAAA,23BACA4G,UAAW,CAAE2G,iDAlC0D8H,EAAAA,wBAAtB7Q,EAAAA,iBAC1C4nB,EAAAA,cAGA7e,UAJAmZ,EAAAA,uDAsCNjiB,EAAAA,UAASnF,KAAA,CAAC,WAAY,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,OAyJrD6lB,EAhKA,CAKuCR,IC1BvCqC,GAAA,WAAA,SAAAA,KAa8B,2BAb7BnsB,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZmqB,IAEFlqB,QAAS,CACPkqB,IAEF5jB,UAAW,GACX0lB,QAAS,OAEmBD,EAb9B,GC4BAE,GAAA,WAAA,SAAAA,IAGUlxB,KAAAsR,WAAqB,EAE7BtR,KAAAmxB,KAAe,sBACfnxB,KAAAgQ,MAAgB,EA+BlB,OA5BExQ,OAAAsE,eAAwBotB,EAAAhxB,UAAA,UAAO,KAI/B,WACE,OAAOF,KAAKgvB,cALd,SAAgCztB,GAC9BvB,KAAKgvB,SAAWrvB,MAAMouB,QAAQxsB,GAASA,EAAQ,oCAgBjD/B,OAAAsE,eAAyBotB,EAAAhxB,UAAA,WAAQ,KAIjC,WACE,OAAOF,KAAKsR,eALd,SAAkC/P,GAChCvB,KAAKsR,UAAY7E,EAAiBlL,qEAlBnCyC,EAAAA,MAAKC,KAAA,CAAC,+BAiBND,EAAAA,MAAKC,KAAA,CAAC,6BASND,EAAAA,MAAKC,KAAA,CAAC,cAETitB,EArCA,GCVAE,GAAA,SAAAjtB,GAYE,SAAAitB,EAAoB3rB,GAApB,IAAAC,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAD,SAAAA,EAqCZC,EAAA4pB,SAAQ,WACV5pB,EAAKsK,MACPtK,EAAK2rB,kBA+BX,OA9E0CjtB,EAAAA,EAAAA,GAYxCgtB,EAAAlxB,UAAAoxB,UAAA,SAAUprB,GACJgJ,EAAehJ,IACjBlG,KAAKmH,kBAITiqB,EAAAlxB,UAAAiH,eAAA,YACEnH,KAAKuxB,aAAgBvxB,KAAKgQ,MAAShQ,KAAKwxB,SAAiCxxB,KAAKqxB,eAA3BrxB,KAAK2F,gBAGlDyrB,EAAAlxB,UAAAuxB,eAAR,SAAuBvrB,GACrB,OAAOlG,KAAKuxB,aAAevxB,KAAKuxB,YAAY3qB,cAAcS,SAASnB,EAAMoB,SAGnE8pB,EAAAlxB,UAAAmxB,aAAR,WACErxB,KAAKmxB,KAAO,sBACZnxB,KAAKuvB,kBACLvvB,KAAKqwB,SAASjE,QACdpsB,KAAKgQ,MAAO,GAGNohB,EAAAlxB,UAAAywB,oBAAR,WAAA,IAAAjrB,EAAA1F,KACEA,KAAK8I,iBAAmB9I,KAAKyF,SAASsD,OAAO,WAAY,QAAO,SAAG7C,GACjER,EAAKgsB,qBAAqBxrB,KAG5BlG,KAAKgJ,eAAiBhJ,KAAKyF,SAASsD,OAAO,SAAU,SAAQ,WAC3DrD,EAAK2rB,iBAGPtiB,OAAO0I,iBAAiB,SAAUzX,KAAKsvB,UAAU,IAS3C8B,EAAAlxB,UAAAqvB,gBAAR,WACMvvB,KAAK8I,kBACP9I,KAAK8I,mBAGH9I,KAAKgJ,gBACPhJ,KAAKgJ,iBAGP+F,OAAOoJ,oBAAoB,SAAUnY,KAAKsvB,UAAU,IAG9C8B,EAAAlxB,UAAAyF,aAAR,WACE3F,KAAKmxB,KAAO,oBACZnxB,KAAK2wB,sBACL3wB,KAAKqwB,SAASrgB,OACdhQ,KAAKgQ,MAAO,GAGNohB,EAAAlxB,UAAAwxB,qBAAR,SAA6BxrB,GACDlG,KAAKyxB,eAAevrB,IAG5ClG,KAAKqxB,oCA9EV5sB,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,eACVC,SAAA,2mBA9B8BwE,EAAAA,kDAqC7BC,EAAAA,UAASnF,KAAA,CAAC,cAAe,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,sBACrDF,EAAAA,UAASnF,KAAA,CAAC,WAAY,CAAEqF,UAAQ,OAwEnC8nB,EAlFA,CAI0CF,ICtB1CS,GAAA,WAAA,SAAAA,KAQiC,2BARhC9sB,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACAisB,IAEFhsB,aAAc,CAACosB,IACfnsB,QAAS,CAACmsB,QAEqBO,EARjC,GCIAC,GAAA,WAAA,SAAAA,YAKEpyB,OAAAsE,eAAI8tB,EAAA1xB,UAAA,kBAAe,KAMnB,WACE,OAAO2xB,aAAaC,QAtBG,6BAezB,SAAoB9lB,GACdA,GAAYM,EAAWN,IACzB6lB,aAAaE,QAjBQ,uBAiBoB/lB,oCA0B7C4lB,EAAA1xB,UAAA8xB,YAAA,eACQhmB,EAAW6lB,aAAaC,QA3Cb,oBA2CsC9xB,KAAKiyB,iBAAmBlmB,IAE/E,OAAOC,GAAYA,EAASI,eAW9BwlB,EAAA1xB,UAAAgyB,mBAAA,WACE,OAAOlyB,KAAKiyB,iBAYdL,EAAA1xB,UAAAiM,iBAAA,eAEQD,EAAgBC,EADLnM,KAAKgyB,eAGtB,OAAOrmB,EAAW5H,SAASmI,GAAiBA,EAAgBN,GAiB9DgmB,EAAA1xB,UAAAqb,YAAA,SAAYvP,GACLM,EAAWN,IAIhB6lB,aAAaE,QA/FI,kBA+FkB/lB,EAASI,gBAiB9CwlB,EAAA1xB,UAAAiyB,mBAAA,SAAmBnmB,GACjBhM,KAAKiyB,gBAAkBjmB,uBAxG1BvB,EAAAA,WAAUxG,KAAA,CAAC,CACVmuB,WAAY,kHADd,GCNaC,GAAmC,CAC9CtW,GAAE,CACAuW,QAAS,WAEXtW,GAAE,CACAsW,QAAS,YAEXxW,GAAE,CACAwW,QAAS,eAWbC,GAAA,WAyCE,SAAAA,EAAoBC,GAAAxyB,KAAAwyB,gBAAAA,EAvCZxyB,KAAAyyB,aAAwB,EAwCzBzyB,KAAKiR,OACRjR,KAAKiR,KAAOjR,KAAK0yB,kBAUvB,OAvCElzB,OAAAsE,eAA4ByuB,EAAAryB,UAAA,aAAU,KAItC,WACE,OAAOF,KAAKyyB,iBALd,SAAuCE,GACrC3yB,KAAKyyB,YAAchmB,EAAiBkmB,oCAkBtCnzB,OAAAsE,eAAqByuB,EAAAryB,UAAA,OAAI,KAIzB,WACE,OAAOF,KAAK4yB,WALd,SAA0BrxB,GACxBvB,KAAK4yB,MAAQrxB,GAASvB,KAAK0yB,kDAarBH,EAAAryB,UAAAwyB,eAAR,eACQ1mB,EAAWhM,KAAKwyB,gBAAgBrmB,mBAEtC,OAAOkmB,GAAiCrmB,GAAUsmB,6CApCnDtuB,EAAAA,MAAKC,KAAA,CAAC,+BAmBND,EAAAA,MAAKC,KAAA,CAAC,aAoBTsuB,EArDA,GCAAM,GAAA,SAAA1uB,GAME,SAAA0uB,EAAmBjJ,EAAmC4I,GAAtD,IAAA9sB,EACEvB,EAAAvD,KAAAZ,KAAMwyB,IAAgBxyB,YADL0F,EAAAkkB,eAAAA,IAIrB,OANgDxlB,EAAAA,EAAAA,uBAJ/CK,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,sBACVC,SAAA,0OA7BkB0mB,EAAAA,yBAEXuG,MAmCTiB,EAVA,CAIgDN,ICtBhDO,GAAA,WAAA,SAAAA,KAKiC,2BALhCjuB,EAAAA,SAAQZ,KAAA,CAAC,CACRsH,UAAW,CACTqmB,QAG6BkB,EALjC,GCCAC,GAAA,WAAA,SAAAA,IAKmB/yB,KAAAiR,KAAgB,aAEnC,qCAFGjN,EAAAA,MAAKC,KAAA,CAAC,aAET8uB,EAPA,GCDAC,GAAA,SAAA7uB,GAAA,SAAA6uB,mDAImE,OAA1B5uB,EAAAA,EAAAA,uBAJxCK,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,cACVC,SAAA,sKAEiEquB,EAJnE,CAIyCD,ICCzCE,GAAA,WAAA,SAAAA,KAcgC,2BAd/BpuB,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACA+tB,IAEF9tB,aAAc,CACZguB,GACAH,IAEF5tB,QAAS,CACP+tB,GACAH,QAG4BI,EAdhC,GCMAC,GAAA,WAAA,SAAAA,IAEUlzB,KAAAisB,YAAuB,EACvBjsB,KAAA6D,MAAiB,KA2CzB7D,KAAAmzB,UAAqB,EAyBrBnzB,KAAAgY,UAAW,EAGJhY,KAAAozB,UAAY,IAAIzhB,EAAAA,aAiCzB,OA1EEnS,OAAAsE,eAAqBovB,EAAAhzB,UAAA,OAAI,KAKzB,WACE,OAAOF,KAAK6D,WANd,SAA0BtC,GAExBvB,KAAK6D,MADS,CAAC,KAAM,KAAM,KAAM,KAAM,QACpBmQ,QAAQzS,IAAU,EAAIA,EAAQ,sCAYnD/B,OAAAsE,eAA0BovB,EAAAhzB,UAAA,cAAW,KAArC,SAAsCqB,GACpCvB,KAAKmzB,SAAsB,KAAV5xB,GAAwBkL,EAAiBlL,oCAc5D/B,OAAAsE,eAA2BovB,EAAAhzB,UAAA,YAAS,KAIpC,WACE,OAAOF,KAAKisB,gBALd,SAAqC1qB,GACnCvB,KAAKisB,WAAaxf,EAAiBlL,oCAcrC2xB,EAAAhzB,UAAAksB,MAAA,SAAMiH,QAAA,IAAAA,IAAAA,GAAA,GACJrzB,KAAKgY,UAAW,EACZqb,GACFrzB,KAAKozB,UAAUrhB,KAAKshB,IAKxBH,EAAAhzB,UAAA8P,KAAA,WACEhQ,KAAKszB,qBAELtzB,KAAKgY,UAAW,GAGlBkb,EAAAhzB,UAAAozB,mBAAA,WAAA,IAAA5tB,EAAA1F,KACOA,KAAKuzB,gBACRvzB,KAAKuzB,cAAgB,CACnB3D,OAAM,WAAQ,OAAAlqB,EAAK0mB,SACnB/pB,MAAO,OAINrC,KAAKuzB,cAAsB,SAC9BvzB,KAAKuzB,cAAsB,OAAC,WAAS,OAAA7tB,EAAK0mB,UAEvCpsB,KAAKuzB,cAAqB,QAC7BvzB,KAAKuzB,cAAqB,MAAI,sCAjGjCvvB,EAAAA,MAAKC,KAAA,CAAC,kCAOND,EAAAA,MAAKC,KAAA,CAAC,6CAGND,EAAAA,MAAKC,KAAA,CAAC,oCAiBND,EAAAA,MAAKC,KAAA,CAAC,+BAcND,EAAAA,MAAKC,KAAA,CAAC,kCAeND,EAAAA,MAAKC,KAAA,CAAC,mBA6CTivB,EA3GA,GCpBAM,GAAA,WAEA,SAAAA,KAKA,2BALC/oB,EAAAA,aAKD+oB,EAPA,GC4BAC,GAAA,SAAAtvB,GAgBE,SAAAsvB,EAAoBC,EAA0CjuB,EAA6BmkB,GAA3F,IAAAlkB,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAguB,gBAAAA,EAA0ChuB,EAAAD,SAAAA,EAA6BC,EAAAkkB,eAAAA,EANnFlkB,EAAAiuB,kBAAoB,qDACpBjuB,EAAAkuB,GAAajjB,EAAAA,OA6FvB,OApGuCvM,EAAAA,EAAAA,GAgBrCqvB,EAAAvzB,UAAAksB,MAAA,SAAMiH,QAAA,IAAAA,IAAAA,GAAA,GACJrzB,KAAK0zB,gBAAgBG,YAActvB,UAEnCJ,EAAAjE,UAAMksB,MAAKxrB,KAAAZ,KAACqzB,GAEZrzB,KAAK8zB,uBAED9zB,KAAK+zB,eACP/zB,KAAK+zB,cAAcC,SAIvBP,EAAAvzB,UAAA+zB,sBAAA,SAAsB/tB,GACflG,KAAK2tB,YACRznB,EAAMguB,iBACNhuB,EAAMiuB,kBACNn0B,KAAKosB,UAITqH,EAAAvzB,UAAAk0B,2BAAA,WACE,OAAOp0B,KAAKuzB,cAAcc,OAAS,SAAW,WAGhDZ,EAAAvzB,UAAAo0B,6BAAA,WACE,OAAOt0B,KAAKu0B,iBAAmBv0B,KAAKu0B,gBAAgBF,SAAWr0B,KAAKuzB,cAAcc,OAAS,SAAW,WAGxGZ,EAAAvzB,UAAAs0B,WAAA,SAAWtuB,GACLlG,KAAKmzB,WAAanzB,KAAKy0B,aAAa7tB,cAAcS,SAASnB,EAAMoB,SACnEtH,KAAKosB,SAITqH,EAAAvzB,UAAA8P,KAAA,WACEhQ,KAAK+zB,cAAgB1K,SAASqL,cAE9BvwB,EAAAjE,UAAM8P,KAAIpP,KAAAZ,MAEVA,KAAK20B,eAGClB,EAAAvzB,UAAAy0B,YAAR,WAAA,IAAAjvB,EAAA1F,KACEA,KAAK0zB,gBAAgBG,YAAc7zB,KAAK4zB,GAExC/qB,WAAU,WACJnD,EAAK+uB,eACP/uB,EAAKkvB,YACLvL,SAAS5R,iBAAiB,QAAS/R,EAAKmvB,eAAe,OAKrDpB,EAAAvzB,UAAA00B,UAAR,WAAA,IAAAlvB,EAAA1F,MACEA,KAAK60B,cAAa,SAAI3uB,GACpBR,EAAKguB,gBAAgBG,YAAcnuB,EAAKguB,gBAAgBG,aAAenuB,EAAKkuB,GACvDluB,EAAK+uB,aAAa7tB,cAErBS,SAASnB,EAAMoB,SAAW5B,EAAKguB,gBAAgBG,cAAgBnuB,EAAKkuB,KACpF1tB,EAAMiuB,kBACNzuB,EAAKovB,aAAad,UAItBh0B,KAAK+0B,kBAED/0B,KAAK2tB,WACP3tB,KAAK80B,aAAad,SAGhBh0B,KAAKy0B,aAAa7tB,cAAcsB,iBAAiBlI,KAAK2zB,mBAAmB,IACzE3zB,KAAKy0B,aAAa7tB,eACFotB,SAIdP,EAAAvzB,UAAA4zB,qBAAR,WACEzK,SAASlR,oBAAoB,QAASnY,KAAK60B,eAAe,IAGpDpB,EAAAvzB,UAAA60B,gBAAR,WACE/0B,KAAK80B,aAAe90B,KAAKy0B,aAAa7tB,cAAcoB,cAAchI,KAAK2zB,oBAAsB3zB,KAAKy0B,aAAa7tB,mCArGlHnC,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,YACVC,SAAA,qvDAzBO6uB,UAL0CrqB,EAAAA,iBAA1CkiB,EAAAA,2DAkCNjiB,EAAAA,UAASnF,KAAA,CAAC,eAAgB,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,OAkGzDmqB,EAxGA,CAIuCP,ICrBvC8B,GAAA,WAAA,SAAAA,KAW8B,2BAX7BnwB,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACAiN,IAEFhN,aAAc,CACZyuB,IAEFxuB,QAAS,CAAEwuB,IACXloB,UAAW,CAACioB,QAEgBwB,EAX9B,GCAAC,GAAA,WAAA,SAAAA,KAuDA,OAlDEA,EAAA/0B,UAAAg1B,UAAA,SAAU3mB,EAAc4mB,GAItB,GAAIjoB,EAASqB,EAAM,WAFD,qEAEwB/B,KAAK+B,GAAO,KAE9C6mB,EAAYD,EAASA,EAAOE,YAAY,KAAOF,EAAOnhB,QAAQ,KAAO,EAAI,EAEzE2J,EAAc3d,KAAKs1B,kBAAkB/mB,EAAKlC,UAAU,EAAG,EAAI+oB,GAAYA,GACvEG,EAA4Bv1B,KAAKw1B,qBAAqBJ,GAE5D,OAAOp1B,KAAKy1B,YAAYlnB,EAAM4mB,EAAQI,EAAmB5X,GAE3D,OAAO,MAGDsX,EAAA/0B,UAAAo1B,kBAAR,SAA0B3X,EAAqByX,GAI7C,OAHIzX,GAAeyX,IACjBzX,EAAc,IAAMA,GAEfA,GAGDsX,EAAA/0B,UAAAu1B,YAAR,SAAoBlnB,EAAc4mB,EAAgBI,EAA2B5X,GAC3E,GAAIpP,GAAQ4mB,EAAQ,KACZO,EAAOnnB,EAAKlC,UAAU,EAAG,GACzBspB,EAAUpnB,EAAKlC,UAAU,EAAG,GAC5BupB,EAAUrnB,EAAKlC,UAAU,EAAG,GAOlC,OAFA8oB,GADAA,GADAA,GADAA,EAASA,EAAOhlB,QAAQ,KAAMulB,IACdvlB,QAAQ,KAAMwlB,IACdxlB,QAAQ,KAAMylB,IACdzlB,QAAQ,IAAIolB,EAAqB5X,GAIjD,OAAOpP,GAIH0mB,EAAA/0B,UAAAs1B,qBAAR,SAA6BJ,GAG3B,QAFIG,EAA4B,GAEvB/0B,EAAI,EAAGA,EAAI40B,EAAW50B,IAC7B+0B,GAAqB,IAGvB,OAAOA,uBApDVM,EAAAA,KAAI5xB,KAAA,CAAC,CACJ6xB,KAAM,eAsDRb,EAvDA,GCFAc,GAAA,WAAA,SAAAA,KAW6B,2BAX5BlxB,EAAAA,SAAQZ,KAAA,CAAC,CACRe,aAAc,CACZiwB,IAEFnwB,QAAS,GACTG,QAAS,CACPgwB,IAEF1pB,UAAW,GACXyqB,UAAW,OAEgBD,EAX7B,GCGAE,GAAA,WAAA,SAAAA,KA2EA,OA7DEz2B,OAAAsE,eAAsBmyB,EAAA/1B,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAKk2B,YALd,SAA4B30B,GAC1BvB,KAAKk2B,OAASl2B,KAAKm2B,oBAAoB50B,oCASzC00B,EAAA/1B,UAAAk2B,cAAA,SAAcC,GACZ,QAAOA,EAAW7E,UAAW6E,EAAW7E,SAASxxB,KAAKs2B,MAGxDL,EAAA/1B,UAAAq2B,kBAAA,SAAkBC,OACVC,EAAQz2B,KAAK02B,aAAaF,IAAex2B,KAAK02B,aAAa12B,KAAK22B,QAEtE,OAAOF,EAAQ,YAAYA,EAAU,IAGvCR,EAAA/1B,UAAA02B,YAAA,SAAYP,OACJQ,GAAgB72B,KAAKo2B,cAAcC,GAErCA,EAAWzG,QAAUiH,EACvBR,EAAWzG,OAAO5vB,KAAKs2B,IAAKD,GACnBr2B,KAAK22B,OAAO/G,QAAUiH,GAC/B72B,KAAK22B,OAAO/G,OAAO5vB,KAAKs2B,IAAKD,GAAcr2B,KAAK22B,SAIpDV,EAAA/1B,UAAA42B,kBAAA,SAAkB7lB,EAAcolB,GAC1Br2B,KAAKo2B,cAAcC,GACrBr2B,KAAK4oB,YAAcrkB,UAEnBvE,KAAK4oB,YAAc3X,GAIvBglB,EAAA/1B,UAAA62B,kBAAA,WACE/2B,KAAK4oB,YAAcrkB,WAGb0xB,EAAA/1B,UAAAi2B,oBAAR,SAA4B50B,GAE1B,OAAIA,aAAiB5B,MACZ4B,EAAM6G,IAAG,SAACsE,GACf,MAAsB,iBAARA,EAAmB,CAAEnL,MAAOmL,GAAQA,IAIjC,iBAAVnL,EACF,CAAC,CAAEA,MAAKA,IAGV,IAGD00B,EAAA/1B,UAAAw2B,aAAR,SAAqBC,GACnB,MAA+B,mBAAjBA,EAAOF,MAAuBE,EAAOF,MAAMz2B,KAAKs2B,IAAKK,GAAUA,EAAOF,2BAxEvFhyB,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,wBACVC,SAAA,kjBASCX,EAAAA,MAAKC,KAAA,CAAC,2BAGND,EAAAA,MAAKC,KAAA,CAAC,wBAQND,EAAAA,MAAKC,KAAA,CAAC,YAqDTgyB,EA3EA,OCFEe,QAAU,WAGVC,QAAU,WAGVC,QAAU,WAGVC,QAAU,WAGVC,QAAU,WAGVC,QAAU,WAGVC,QAAU,WAGVC,QAAU,WAGVC,QAAU,WAGVC,QAAU,WAGVC,QAAU,WAGVC,QAAU,YC3CZC,GAAA,WAIA,SAAAA,KAqBA,OAlBEA,EAAA13B,UAAA23B,SAAA,SAASt2B,GACP,OAAO,OAAcyX,OAAO8e,IAAqB/zB,SAASxC,EAAMk1B,OAC9Dl1B,EAAMk1B,MAAQz2B,KAAK+3B,iBAAiBx2B,EAAM6L,MAAQ7L,EAAMk1B,QAGpDmB,EAAA13B,UAAA63B,iBAAR,SAAyB3qB,GACvB,OAAQA,GACN,IAAK,SACH,OAAO0qB,GAAoBR,QAC7B,IAAK,UACH,OAAOQ,GAAoBJ,QAC7B,IAAK,UACH,OAAOI,GAAoBP,QAC7B,QACE,OAAOO,GAAoBd,8BAjBlCvsB,EAAAA,aAqBDmtB,EAzBA,GCaAI,GAAA,WAoBE,SAAAA,EAAoBC,GAAAj4B,KAAAi4B,uBAAAA,EAEtB,OAbEz4B,OAAAsE,eAAsBk0B,EAAA93B,UAAA,QAAK,KAO3B,WACE,OAAOF,KAAKk4B,YARd,SAA4B32B,GACtBA,IACFA,EAAMk1B,MAAQz2B,KAAKi4B,uBAAuBJ,SAASt2B,IAGrDvB,KAAKk4B,OAAS32B,uDAdjBkD,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,yBACVC,SAAA,mJAbOizB,qCAoBN5zB,EAAAA,MAAKC,KAAA,CAAC,cAaT+zB,EAtBA,GCFAG,GAAA,WAAA,SAAAA,KAmCA,OAlBE34B,OAAAsE,eAAIq0B,EAAAj4B,UAAA,OAAI,KAAR,WAEE,OAAIF,KAAKwxB,SACA,WAGLxxB,KAAK4vB,OACC,SAGN/f,EAAe7P,KAAKiK,MACf,eAGF,oEA/BVxF,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,wBACVC,SAAA,geAKCX,EAAAA,MAAKC,KAAA,CAAC,8BAEND,EAAAA,MAAKC,KAAA,CAAC,4BAEND,EAAAA,MAAKC,KAAA,CAAC,uBAEND,EAAAA,MAAKC,KAAA,CAAC,wBAEND,EAAAA,MAAKC,KAAA,CAAC,cAoBTk0B,EAnCA,GCFaC,GAAoB,CAAC,SAAU,UAG/BC,GAA0B,CACrCtc,GAAE,CACAuc,UAAW,0BACXC,OAAQ,gBACRC,YAAa,UACbC,aAAc,iBACdC,oBAAqB,wBACrBC,iBAAkB,qBAEpB3c,GAAE,CACAsc,UAAW,wBACXC,OAAQ,uBACRC,YAAa,iBACbC,aAAc,wBACdC,oBAAqB,yBACrBC,iBAAkB,sBAEpB7c,GAAE,CACAwc,UAAW,+BACXC,OAAQ,yBACRC,YAAa,aACbC,aAAc,2BACdC,oBAAqB,uBACrBC,iBAAkB,qBAmBtBC,GAAA,WAsVE,SAAAA,EAAoBxe,GAAApa,KAAAoa,QAAAA,EApVZpa,KAAAgvB,SAAmC,GAEnChvB,KAAA64B,SAAkC,GAGlC74B,KAAA84B,aAAwB,EACxB94B,KAAA+4B,mBAA8B,EAG9B/4B,KAAAuR,UAAqB,EAiTHvR,KAAAg5B,YAAkC,IAAIrnB,EAAAA,aAKpC3R,KAAAi5B,cAAoC,IAAItnB,EAAAA,aAK9C3R,KAAAyZ,SAA+B,IAAI9H,EAAAA,aAMlC3R,KAAAk5B,SAA+B,IAAIvnB,EAAAA,aAKlC3R,KAAAm5B,WAAiC,IAAIxnB,EAAAA,aAE7D3R,KAAAo5B,WAAY,EACZp5B,KAAAq5B,aAAe,CAAEhN,SAAQ,KAAwB9b,WAAW,GAuM9D,OAxgBE/Q,OAAAsE,eAAsB80B,EAAA14B,UAAA,QAAK,KAW3B,WACE,OAAOF,KAAKoF,YAZd,SAA4BC,GAC1BrF,KAAKoF,OAASzF,MAAMouB,QAAQ1oB,GAASA,EAAQ,GAGxCrF,KAAKs5B,WAEEt5B,KAAKu5B,eACfv5B,KAAKw5B,QAAUx5B,KAAKy5B,kBAAkBp0B,EAAM,KAF5CrF,KAAKo5B,WAAY,mCAoBrB55B,OAAAsE,eAAwB80B,EAAA14B,UAAA,UAAO,KAY/B,WACE,OAAOF,KAAK64B,cAbd,SAAgCW,GAE9Bx5B,KAAK64B,SAAWW,GAAW,GAEvBx5B,KAAK64B,SAASl4B,QAChBX,KAAK05B,gBACL15B,KAAK25B,yBACI35B,KAAKs5B,aACdt5B,KAAK64B,SAAY74B,KAAKy5B,kBAAkBz5B,KAAKqF,MAAM,sCAmBvD7F,OAAAsE,eAA0B80B,EAAA14B,UAAA,YAAS,KAKnC,WACE,OAAOF,KAAK45B,gBANd,SAAoCr4B,GAClCvB,KAAK45B,WAAaxB,GAAkBr0B,SAASxC,GAASA,EApHlB,SAqHpCvB,KAAK65B,cAAc75B,KAAK45B,6CAgB1Bp6B,OAAAsE,eAAmC80B,EAAA14B,UAAA,mBAAgB,KAInD,WACE,OAAOF,KAAK+4B,uBALd,SAAoDe,GAClD95B,KAAK+4B,kBAAoBtsB,EAAiBqtB,oCAc5Ct6B,OAAAsE,eAAuB80B,EAAA14B,UAAA,SAAM,KAM7B,WACE,OAAOF,KAAKijB,aAPd,SAA8BvN,GAC5B1V,KAAKijB,QAAUvN,EACf1V,KAAK+5B,8BAA8BrkB,GACnC1V,KAAK25B,yDAgBPn6B,OAAAsE,eAA4B80B,EAAA14B,UAAA,aAAU,KAKtC,WACE,OAAOF,KAAK84B,iBANd,SAAuCkB,GACrCh6B,KAAK84B,YAA4B,MAAdkB,GAAgD,KAA1BA,EAAWnrB,YAA2BpC,EAAiButB,GAChGh6B,KAAK25B,yDA6CPn6B,OAAAsE,eAAyB80B,EAAA14B,UAAA,WAAQ,KAWjC,WACE,OAAOF,KAAKi6B,WAAa5B,GAAwBxsB,UAZnD,SAAkCtK,GAC5BA,aAAiB/B,UAAY+B,aAAiB5B,OAChDK,KAAKi6B,UAAS75B,EAAA,GACTi4B,GAAwBzsB,GACxBysB,GAAwBxsB,KACxBtK,GAGLvB,KAAKi6B,UAAY5B,GAAwBxsB,sCAgB7CrM,OAAAsE,eAAwB80B,EAAA14B,UAAA,UAAO,KAK/B,WACE,OAAOF,KAAKuR,cANd,SAAgC+gB,GAC9BtyB,KAAKuR,SAAW9E,EAAiB6lB,GACjCtyB,KAAK25B,yDAmBPn6B,OAAAsE,eAAyB80B,EAAA14B,UAAA,WAAQ,KAKjC,WACE,OAAOF,KAAKk6B,eANd,SAAkCC,GAChCn6B,KAAKk6B,UAA8B,KAAlB,GAA8BztB,EAAiB0tB,GAChEn6B,KAAK25B,yDAqBPn6B,OAAAsE,eAAwB80B,EAAA14B,UAAA,UAAO,KAK/B,WACE,OAAOF,KAAKgvB,cANd,SAAgCoL,GAC9Bp6B,KAAKgvB,SAAWoL,EAChBp6B,KAAK25B,yDAkBPn6B,OAAAsE,eAAqB80B,EAAA14B,UAAA,UAAO,KAA5B,SAA6Bm6B,GAC3Br6B,KAAKq6B,KAAgB,KAATA,GAAsB5tB,EAAiB4tB,oCAWrD76B,OAAAsE,eAAmC80B,EAAA14B,UAAA,sBAAmB,KAAtD,SAAuDo6B,GACrDt6B,KAAKs6B,iBAAwC,KAArBA,GAAkC7tB,EAAiB6tB,oCAY7E96B,OAAAsE,eAAwB80B,EAAA14B,UAAA,aAAU,KAAlC,SAAmCq6B,GACjCv6B,KAAKu6B,QAAsB,KAAZA,GAAyB9tB,EAAiB8tB,oCAa3D/6B,OAAAsE,eAAgC80B,EAAA14B,UAAA,mBAAgB,KAAhD,SAAiDs6B,GAC/Cx6B,KAAKw6B,cAAkC,KAAlBA,GAA+B/tB,EAAiB+tB,oCAWvEh7B,OAAAsE,eAA8B80B,EAAA14B,UAAA,kBAAe,KAA7C,SAA8CqB,GAC5CvB,KAAKy6B,aAAyB,KAAVl5B,GAAsBkL,EAAiBlL,oCAkC7Dq3B,EAAA14B,UAAAw6B,YAAA,YACM16B,KAAKy6B,cAAgBz6B,KAAKw6B,iBAC5Bx6B,KAAKo5B,WAAY,EACjBp5B,KAAKw6B,eAAgB,IAUzB5B,EAAA14B,UAAAy6B,cAAA,WAAA,IAAAj1B,EAAA1F,KACOA,KAAKw6B,gBACRx6B,KAAKo5B,WAAap5B,KAAKo5B,UAEvBp5B,KAAKqF,MAAMkU,QAAO,SAACxP,GACjBA,EAAK6wB,UAAYl1B,EAAK0zB,YAGxBp5B,KAAK66B,oBAAoB76B,KAAKo5B,UAAWp5B,KAAKqF,SAIlDuzB,EAAA14B,UAAA46B,UAAA,SAAUxE,GACRA,EAAIsE,WAAatE,EAAIsE,UAErB56B,KAAK+6B,iBAAiBzE,GAEtBt2B,KAAKg7B,qBAAqBh7B,KAAKqF,MAAOixB,IAGxCsC,EAAA14B,UAAA+6B,gBAAA,SAAgB3E,GACdt2B,KAAK+6B,iBAAiBzE,IAIxBsC,EAAA14B,UAAAg7B,eAAA,eACQC,EAAa,CAAC,SAAU,SAAU,UAAW,OAAQ,OAAQ,WAAY,WAAY,WAAY,OAAQ,QAAS,QAExH,OAAOn7B,KAAKw5B,QAAQ5f,OAAM,SAACwhB,GAAO,OAACA,EAAIhuB,MAAQ+tB,EAAWp3B,SAASq3B,EAAIhuB,SAIzEwrB,EAAA14B,UAAAm7B,sBAAA,WACE,OAAOr7B,KAAKw5B,QAAQjzB,KAAI,SAAC60B,GAAO,MAAa,WAAbA,EAAIhuB,QAGtCwrB,EAAA14B,UAAAo7B,cAAA,SAAchF,EAAKK,GACjB,OAAOA,EAAOF,MAAQ,YAAYz2B,KAAKu7B,eAAejF,EAAKK,GAAY,IAGzEiC,EAAA14B,UAAAq7B,eAAA,SAAejF,EAAKK,OACZ6E,EAAc7E,EAAOF,MAE3B,OAAOvpB,EAASsuB,EAAa,YAAcA,EAAYlF,EAAKK,EAAOtK,UAAYmP,GAIjF5C,EAAA14B,UAAAu7B,mBAAA,WACE,OAAOz7B,KAAKw5B,QAAQ5f,OAAM,SAACwhB,GAAO,MAAa,aAAbA,EAAIhuB,QAIxCwrB,EAAA14B,UAAAw7B,eAAA,WACE,OAAO17B,KAAKw5B,QAAQ5f,OAAM,SAACwhB,GAAO,MAAa,SAAbA,EAAIhuB,QAIxCwrB,EAAA14B,UAAAy7B,oBAAA,eACQC,EAAS57B,KAAKq7B,wBACpB,OAAOO,EAASA,EAAOvP,SAAW,MAMpCuM,EAAA14B,UAAA27B,gBAAA,WACE,OAAO77B,KAAKqF,MAAMuU,OAAM,SAAC7P,GAAQ,OAAAA,EAAK6wB,aAMxChC,EAAA14B,UAAA47B,kBAAA,WACE,OAAO97B,KAAKqF,MAAMuU,OAAM,SAAC7P,GAAQ,OAACA,EAAK6wB,aAGzChC,EAAA14B,UAAAq5B,WAAA,WACE,OAAOv5B,KAAKw5B,SAAWx5B,KAAKw5B,QAAQ74B,OAAS,GAG/Ci4B,EAAA14B,UAAAo5B,SAAA,WACE,OAAOt5B,KAAKqF,OAASrF,KAAKqF,MAAM1E,OAAS,GAG3Ci4B,EAAA14B,UAAA67B,gBAAA,SAAgBzF,OACR0F,EAAmB1F,EAAI2F,YAE7Bj8B,KAAKqF,MAAMkU,QAAO,SAACxP,GACbA,EAAKkyB,cACPlyB,EAAKkyB,aAAc,KAGvB3F,EAAI2F,aAAeD,GAGrBpD,EAAA14B,UAAAg8B,WAAA,SAAWvF,GACJ32B,KAAKq6B,MAAwB,WAAhB1D,EAAOvpB,OAIzBpN,KAAKq5B,aAAa9oB,UAAYvQ,KAAKq5B,aAAahN,WAAasK,IAAU32B,KAAKq5B,aAAa9oB,UAEzFvQ,KAAKm8B,UAAUxF,EAAQ32B,KAAKq5B,aAAa9oB,WACzCvQ,KAAKq5B,aAAahN,SAAWsK,IAG/BiC,EAAA14B,UAAAi8B,UAAA,SAAUxF,EAAwBpmB,GAAlC,IAAA7K,EAAA1F,KAEEA,KAAKqF,MAAMg1B,KAAI,SAAEhqB,EAAUC,GAEzB,MAAoB,SAAhBqmB,EAAOvpB,MAAmC,aAAhBupB,EAAOvpB,KAC5B1H,EAAK0U,QAAQwE,SAASvO,EAASsmB,EAAOtK,UAAW/b,EAAUqmB,EAAOtK,UAAW9b,GAE7EH,EAAWC,EAASsmB,EAAOtK,UAAW/b,EAAUqmB,EAAOtK,UAAW9b,MAO/EqoB,EAAA14B,UAAAk8B,WAAA,WACEp8B,KAAKk5B,SAASnnB,KAAK,OAGX6mB,EAAA14B,UAAAu5B,kBAAV,SAA4B1vB,GAG1B,OAFavK,OAAO68B,KAAKtyB,GAEb6P,OAAM,SAAC0iB,GAAO,MAAsB,iBAAdvyB,EAAKuyB,KAAoBl0B,IAAG,SAACk0B,GAC7D,MAAO,CAAEj6B,MAAO2O,GAAsBsrB,GAAOjQ,SAAUiQ,MAInD1D,EAAA14B,UAAA86B,qBAAR,SAA6BuB,EAAkBjG,GACzCt2B,KAAKy6B,aAEPz6B,KAAKw8B,kBAAkBD,EAAMjG,GAEnBt2B,KAAKw6B,gBAEfx6B,KAAKo5B,UAAYp5B,KAAKy8B,gBAAgBF,KAIlC3D,EAAA14B,UAAA26B,oBAAR,SAA4BzB,EAAoBmD,GAC9CnD,EAAYp5B,KAAKg5B,YAAYjnB,KAAKwqB,GAAQv8B,KAAKi5B,cAAclnB,KAAKwqB,IAG5D3D,EAAA14B,UAAA66B,iBAAR,SAAyBzE,GACvBA,EAAIsE,UAAY56B,KAAKyZ,SAAS1H,KAAKukB,GAAOt2B,KAAKm5B,WAAWpnB,KAAKukB,IAGzDsC,EAAA14B,UAAAu8B,gBAAR,SAAwBp3B,GAItB,QAAIA,EAAMq3B,MAFQ,SAAG3yB,GAAQ,OAAAA,EAAK6wB,eAM9Bv1B,EAAM4oB,KAPsB,SAAGlkB,GAAQ,OAAAA,EAAK6wB,WAAgC,OAAnB7wB,EAAK6wB,aAQzD,MAMHhC,EAAA14B,UAAAw5B,cAAR,WACE15B,KAAKw5B,QAAQjgB,QAAO,SAACod,GACI,SAAnBA,EAAa,MAAiBA,EAAa,OAC7CA,EAAa,KAAI,WAKfiC,EAAA14B,UAAAs8B,kBAAR,SAA0BD,EAAkBjG,GAC1CiG,EAAKhjB,QAAO,SAACxP,GACPA,IAASusB,IACXvsB,EAAK6wB,WAAY,qCAngBtB52B,EAAAA,MAAKC,KAAA,CAAC,4BAyBND,EAAAA,MAAKC,KAAA,CAAC,gCA2BND,EAAAA,MAAKC,KAAA,CAAC,yCAkBND,EAAAA,MAAKC,KAAA,CAAC,wCAeND,EAAAA,MAAKC,KAAA,CAAC,gCAmBND,EAAAA,MAAKC,KAAA,CAAC,mCA+CND,EAAAA,MAAKC,KAAA,CAAC,+BAwBND,EAAAA,MAAKC,KAAA,CAAC,+BAqBND,EAAAA,MAAKC,KAAA,CAAC,+BAuBND,EAAAA,MAAKC,KAAA,CAAC,8BAoBND,EAAAA,MAAKC,KAAA,CAAC,uCAYND,EAAAA,MAAKC,KAAA,CAAC,4CAaND,EAAAA,MAAKC,KAAA,CAAC,uCAcND,EAAAA,MAAKC,KAAA,CAAC,8CAYND,EAAAA,MAAKC,KAAA,CAAC,wCAON2N,EAAAA,OAAM3N,KAAA,CAAC,yCAKP2N,EAAAA,OAAM3N,KAAA,CAAC,sCAKP2N,EAAAA,OAAM3N,KAAA,CAAC,gCAMP2N,EAAAA,OAAM3N,KAAA,CAAC,mCAKP2N,EAAAA,OAAM3N,KAAA,CAAC,mBA0MV20B,EA3hBA,GCoCA+D,GAAA,WAqBE,SAAAA,EAAmBC,GAAA58B,KAAA48B,YAAAA,EAErB,2BAvBCtkB,EAAAA,UAASrU,KAAA,CAAC,CACTS,SAAU,sEA3Fem4B,EAAAA,gEA4GxB74B,EAAAA,MAAKC,KAAA,CAAC,gCAKT04B,EAvBA,GCrCAG,GAAA,SAAA34B,GAkCE,SAAA24B,EACE1iB,EACA7U,EACAuU,EACArU,EACQmkB,EACAmT,EAEA1N,GARV,IAAA3pB,EAUEvB,EAAAvD,KAAAZ,KAAMoa,IAAQpa,YALN0F,EAAAkkB,eAAAA,EACAlkB,EAAAq3B,YAAAA,EAEAr3B,EAAA2pB,OAAAA,EApBV3pB,EAAAs3B,aAAuB,EAKft3B,EAAAM,aAAc,EAEdN,EAAAu3B,gBAAiB,EAiBvBv3B,EAAKqU,UAAYD,EAAe,MAAa,UAC7CpU,EAAKY,OAASf,EAAQgB,KAAK,IAAIpG,OAAO,MAItCuF,EAAKw3B,cAAgBz3B,EAASsD,OAAO,WAAY,QAAO,cAExDrD,EAAKsD,eAAiBvD,EAASsD,OAAO,SAAU,SAAQ,SAAG7C,GACzDR,EAAKqB,qBAqSX,OAtVuC3C,EAAAA,EAAAA,GAsDrC5E,OAAAsE,eAAIg5B,EAAA58B,UAAA,mBAAgB,KAApB,eACQi9B,EAAen9B,KAAKq7B,wBAC1B,SAAO8B,IAAgBA,EAAavB,SAASuB,EAAavB,OAAOwB,4CAGnE59B,OAAAsE,eAAIg5B,EAAA58B,UAAA,cAAW,KAAf,WACE,OAAOF,KAAKq9B,gBAAkBr9B,KAAKq9B,eAAe,oCAGpD79B,OAAAsE,eAAIg5B,EAAA58B,UAAA,iBAAc,KAAlB,WACE,QAASF,KAAKs9B,kDAGhB99B,OAAAsE,eAAIg5B,EAAA58B,UAAA,iBAAc,KAAlB,WACE,OAAOF,KAAKo6B,SAAWp6B,KAAKo6B,QAAQxgB,OAAM,SAACgW,GAAU,OAAmB,IAAnBA,EAAO2N,2CAG9DT,EAAA58B,UAAAsG,gBAAA,WACExG,KAAKgG,aAAc,EAEdhG,KAAKw9B,WACRx9B,KAAKy9B,iBAITX,EAAA58B,UAAAwG,UAAA,WACE1G,KAAK09B,oBACL19B,KAAK29B,sCAGD39B,KAAK49B,oBAAoBh3B,cAAcC,cAAgB7G,KAAKi9B,gBAAkBj9B,KAAKgG,cACrFhG,KAAK+G,iBACL/G,KAAKi9B,gBAAiB,IAI1BH,EAAA58B,UAAA+G,YAAA,WACEjH,KAAKuvB,mBAGPuN,EAAA58B,UAAAk2B,cAAA,SAAcE,EAAKK,GACjB,QAAOA,EAAOnF,UAAWmF,EAAOnF,SAAS8E,IAG3CwG,EAAA58B,UAAA29B,mBAAA,SAAmBvH,EAAUwH,GACtBxH,EAAI9E,UAAaxxB,KAAK+9B,oBAAoBzH,EAAKwH,KAClDA,EAAYlO,OAAOhvB,KAAKZ,KAAK+Z,UAAWuc,GACxCt2B,KAAK+7B,gBAAgBzF,KAIzBwG,EAAA58B,UAAA89B,2BAAA,WACE,OAAQh+B,KAAKk7B,iBAAiBv6B,OAAS,GAAMX,KAAKo6B,QAAQz5B,OAAS,EAAI,EAAI,IAAMX,KAAKm6B,SAAW,EAAI,IAGvG2C,EAAA58B,UAAA+9B,YAAA,WACE,OACEj+B,KAAKk7B,iBAAiBv6B,QACrBX,KAAKo6B,QAAQz5B,OAAS,EAAI,EAAI,IAC9BX,KAAKm6B,SAAW,EAAI,IACnBn6B,KAAKg6B,YAAch6B,KAAKq7B,0BAA4B92B,UAAgB,EAAJ,IAItEu4B,EAAA58B,UAAAg+B,aAAA,SAAa38B,EAAY4zB,GACvB,OAAKA,EAIEn1B,KAAK+8B,YAAY7H,UAAU3zB,EAAO4zB,GAHhC5zB,GAMXu7B,EAAA58B,UAAAi+B,kBAAA,SAAkB7H,EAAU8H,GAC1B,OAAOA,EAAeC,UAAU93B,KAAI,SAAC+3B,GAAgB,OAAAhI,EAAI8H,EAAe/R,YAAciS,EAAa/8B,SAGrGu7B,EAAA58B,UAAAq+B,gBAAA,SAAgBC,EAAeC,GAE7B,OAAID,IAAyB,IAAbA,GAAmC,IAAbA,GACpCA,EAAW/xB,EAAiB+xB,GAExBC,EAAcC,QACTF,EAAWC,EAAcC,QAAQC,WAAa,MAAQF,EAAcC,QAAQE,YAAc,MAE1FJ,EAAW,MAAQ,OAIvBA,GAGT1B,EAAA58B,UAAA2+B,eAAA,SAAevI,EAAUE,OACjBsI,EAAexI,EAAIE,EAAWnK,UAEpC,GAAImK,EAAWuI,MAAO,CAEpB,GAAID,aAAwBn/B,MAC1B,OAAOK,KAAKg/B,iBAAiBF,EAActI,EAAWuI,OAGxD,GAA4B,iBAAjBD,EAA2B,KAC9BG,EAAazI,EAAWuI,MAAMx4B,KAAI,SAAC4qB,GAAQ,OAAA2N,IAAiB3N,EAAK5vB,QACvE,GAAI09B,EACF,MAAO,CAAEA,IAMf,OAAOH,GAGThC,EAAA58B,UAAAg/B,eAAA,SAAe5I,EAAU6I,GACvB,OAAOA,EAAYC,OAAO74B,KAAI,SAAC84B,GAAa,OAAA/I,EAAI6I,EAAY9S,YAAcgT,EAAU99B,SAGtFu7B,EAAA58B,UAAAo/B,oBAAA,SAAoB3I,GAClB,OAAOA,EAAOt0B,OAAS2O,GAAsB2lB,EAAOtK,WAGtDyQ,EAAA58B,UAAAq/B,yBAAA,eACQ/F,EAAUx5B,KAAKk7B,iBACrB,QAAO1B,EAAQ74B,QAAS64B,EAAQkD,MAAK,SAAC/F,GAAU,OAAAA,EAAOnhB,OAASmhB,EAAOnhB,MAAMzR,SAAS,SAGxF+4B,EAAA58B,UAAAy5B,sBAAA,WAAA,IAAAj0B,EAAA1F,KACE6I,WAAU,WACJnD,EAAKgQ,QACPhQ,EAAK85B,aAAajmB,QAAO,SAACkmB,OAClBC,EAAYD,EAAO74B,cAAcoB,cAAc,iCACjD03B,IACFA,EAAUpqB,MAAME,MAAWiqB,EAAO74B,cAAcC,YAAW,WAOrEi2B,EAAA58B,UAAAy/B,qBAAA,SAAqBrJ,GACnB,OAAOA,EAAIt2B,KAAK27B,wBAA0BrF,EAAIt2B,KAAK27B,uBAAuBh7B,QAG5Em8B,EAAA58B,UAAA0/B,kBAAA,SAAkBtJ,EAAKthB,GAErB,OAAIhV,KAAKs9B,mBAAoBt9B,KAAKs9B,iBAAiBuC,yBAC1C7/B,KAAKs9B,iBAAiBuC,wBAAwBvJ,EAAKthB,IAM9D8nB,EAAA58B,UAAA4/B,mBAAA,SAAmBxJ,GACjB,OAAQt2B,KAAKg6B,YACXh6B,KAAK27B,uBACLrF,EAAIyJ,aACJ//B,KAAK2/B,qBAAqBrJ,KACzBt2B,KAAKggC,gBAGVlD,EAAA58B,UAAA42B,kBAAA,SAAkB5wB,EAAYywB,EAAyBL,GAGrD,GAFAt2B,KAAK4oB,YAAcrkB,UAEfvE,KAAK85B,kBACL5zB,EAAMoB,OAAOT,YAAcX,EAAMoB,OAAO24B,aACxC/5B,EAAMoB,OAAO44B,UAAUvzB,OACzB,OAAO3M,KAAK4oB,YAAc1iB,EAAMoB,OAAO44B,UAGrCvJ,GACF32B,KAAKmgC,2BAA2BxJ,EAAQL,IAI5CwG,EAAA58B,UAAA62B,kBAAA,WACE/2B,KAAK4oB,YAAcrkB,WAGrBu4B,EAAA58B,UAAAkgC,2BAAA,WACE,OAAOpgC,KAAKqgC,eAAiBrgC,KAAKsgC,wBAGpCxD,EAAA58B,UAAAy9B,oCAAA,WACM39B,KAAK0V,QAAU1V,KAAKogC,+BACtBpgC,KAAKqgC,aAAergC,KAAKsgC,uBACzBtgC,KAAK+5B,8BAA8B/5B,KAAK0V,UAI5ConB,EAAA58B,UAAA65B,8BAAA,SAA8BrkB,OACtBnU,EAAQg/B,WAAW7qB,GACzB1V,KAAKwgC,qBAAuBj/B,EAASA,EAAQvB,KAAKsgC,uBAA0B/7B,UAC5EvE,KAAKygC,gBAAgB,GACrBzgC,KAAK4pB,eAAekB,iBAGtBgS,EAAA58B,UAAAwgC,YAAA,SAAYpK,EAAKqK,GACf3gC,KAAK4gC,YAAcD,EACnB3gC,KAAK4pB,eAAekB,gBAEpB9qB,KAAK6gC,kBAAkBvnB,OAAOgd,IAGtBwG,EAAA58B,UAAA25B,cAAV,SAAwB2D,OAEhBsD,EAAqB9gC,KAAK+gC,sBAAsBn6B,cAAco6B,WAAW9a,UAE/E4a,EAAmBG,IAAI,iBAET,WAAdzD,EAAyBsD,EAAmBG,IAAI,2BAA6BH,EAAmBI,OAAO,4BAGjGpE,EAAA58B,UAAAw9B,kBAAR,eACQyD,EAAenhC,KAAKsG,OAAOiB,KAAKvH,KAAKqF,OAEvC87B,GAAgBnhC,KAAKo5B,YACvBp5B,KAAKo5B,UAAY,MAGf+H,IAAiBnhC,KAAKu5B,cAAgBv5B,KAAKs5B,aAC7Ct5B,KAAKw5B,QAAUx5B,KAAKy5B,kBAAkBz5B,KAAKqF,MAAM,MAI7Cy3B,EAAA58B,UAAAigC,2BAAR,SAAmCxJ,EAAQL,GACzC,GAAoB,SAAhBK,EAAOvpB,MAAmBupB,EAAOrgB,UAAYtW,KAAKo2B,cAAcE,EAAKK,GACvE,OAAO32B,KAAK4oB,YAAc+N,EAAOrgB,QAGnC,GAAoB,UAAhBqgB,EAAOvpB,KAAkB,KACrB+xB,EAAcn/B,KAAKk/B,eAAe5I,EAAKK,GAC7C,OAAO32B,KAAK4oB,YAAcuW,EAAY7oB,UAIlCwmB,EAAA58B,UAAAogC,qBAAR,WACE,OAAOtgC,KAAKohC,mBAAqBphC,KAAKohC,mBAAmBx6B,cAAc6iB,aAAe,GAGhFqT,EAAA58B,UAAAu9B,cAAR,WAC6Bz9B,KAAK+gC,sBAAsBn6B,cAAco6B,WAAW9a,UAC5Dgb,OAAO,kBAGpBpE,EAAA58B,UAAA8+B,iBAAR,SAAyBF,EAA6BuC,OAC9CtC,EAAQ,GASd,OAPAD,EAAavlB,QAAO,SAAC+nB,OAEbC,EAAkBF,EAAY96B,KAAI,SAAC04B,GAAc,OAAAqC,IAAgBrC,EAAW9N,MAAQmQ,IAAgBrC,EAAW19B,QACrHggC,EAAkBxC,EAAM77B,KAAKq+B,GAAmBxC,EAAM77B,KAAKo+B,KAItDvC,GAGDjC,EAAA58B,UAAA69B,oBAAR,SAA4BzH,EAAUwH,GACpC,MAAoC,mBAAzBA,EAAYtM,SACdsM,EAAYtM,SAAS5wB,KAAKZ,KAAK+Z,UAAWuc,GAE1CwH,EAAYtM,UAIfsL,EAAA58B,UAAA6G,eAAR,WAAA,IAAArB,EAAA1F,KACE2I,aAAa3I,KAAK4I,eAClB5I,KAAK4I,cAAgBC,WAAU,WAC7BnD,EAAKi0B,wBAGLj0B,EAAK+6B,gBAAgB,MAIjB3D,EAAA58B,UAAAqvB,gBAAR,WACMvvB,KAAKgJ,gBACPhJ,KAAKgJ,iBAGHhJ,KAAKk9B,eACPl9B,KAAKk9B,iBAIDJ,EAAA58B,UAAAugC,gBAAR,SAAwBl/B,GACtBvB,KAAKg9B,aAAez7B,uBAxVvBkD,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,YACVC,SAAA,uqVACA4G,UAAW,CAAC+R,iDAjDLA,UANyErU,EAAAA,uBACtB+Q,EAAAA,wBAApC7Q,EAAAA,iBADPkiB,EAAAA,yBAERmW,EAAAA,mBACAzQ,EAAAA,oDAwDN0Q,EAAAA,aAAYx9B,KAAA,CAAC04B,GAA8B,CAAErzB,UAAQ,+BAErDF,EAAAA,UAASnF,KAAA,CAAC,QAAS,CAAEqF,UAAQ,mCAE7BF,EAAAA,UAASnF,KAAA,CAAC,iBAAkB,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,gCACxDF,EAAAA,UAASnF,KAAA,CAAC,cAAe,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,iCACrDF,EAAAA,UAASnF,KAAA,CAAC,eAAgB,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,gCAEtDo4B,EAAAA,aAAYz9B,KAAA,CAAC,qBAAsB,CAAEoF,KAAMH,EAAAA,qCAC3Cw4B,EAAAA,aAAYz9B,KAAA,CAAC,iBAAkB,CAAEoF,KAAMH,EAAAA,mCACvCw4B,EAAAA,aAAYz9B,KAAA,CAAC,mBA0UhB64B,EA3VA,CAKuClE,IC3CvC+I,GAAA,WAkCE,SAAAA,EAAoB5E,GAAA/8B,KAAA+8B,YAAAA,EAvBC/8B,KAAA4hC,aAAwB,EAqBrB5hC,KAAA86B,UAAgC,IAAInpB,EAAAA,aAkD9D,OAlEEnS,OAAAsE,eAAuB69B,EAAAzhC,UAAA,SAAM,KAI7B,WACE,OAAOF,KAAK6hC,aALd,SAA8BtgC,GAC5BvB,KAAK6hC,QAAU7hC,KAAK8hC,2BAA2BvgC,oCAmBjD/B,OAAAsE,eAAI69B,EAAAzhC,UAAA,gBAAa,KAAjB,WACE,OAAOF,KAAK47B,QAAU57B,KAAK47B,OAAOpC,SAAW,oCAG/Ch6B,OAAAsE,eAAI69B,EAAAzhC,UAAA,mBAAgB,KAApB,WACE,OAAOF,KAAK47B,SAAW57B,KAAK47B,OAAmB,YAAmC,WAA9B57B,KAAK47B,OAAmB,4CAG9Ep8B,OAAAsE,eAAI69B,EAAAzhC,UAAA,gBAAa,KAAjB,WACE,OAAOF,KAAK47B,QAAwC,QAA9B57B,KAAK47B,OAAmB,4CAGhD+F,EAAAzhC,UAAA6hC,mBAAA,SAAmBxgC,EAAY4zB,GAC7B,OAAKA,EAIEn1B,KAAK+8B,YAAY7H,UAAU3zB,EAAO4zB,GAHhC5zB,GAMXogC,EAAAzhC,UAAAo/B,oBAAA,SAAoB1D,GAClB,OAAOA,EAAOv5B,OAAS2O,GAAsB4qB,EAAOvP,WAGtDsV,EAAAzhC,UAAA8hC,YAAA,SAAYj4B,GACVA,EAAK6wB,WAAa7wB,EAAK6wB,UACvB56B,KAAK86B,UAAU/oB,KAAKhI,IAGd43B,EAAAzhC,UAAA4hC,2BAAR,SAAmCvgC,GACjC,GAAIA,GAAS2L,EAAS3L,EAAO,UAAW,CAMtC,GAJIA,EAAMi4B,SACRj4B,EAAMi4B,QAAQjgB,QAAO,SAACod,GAAU,OAAAA,EAAOtK,SAAWsK,EAAOtK,UAAYsK,EAAOA,SAG1Eh3B,MAAMouB,QAAQxsB,GAChB,MAAO,CAAEi4B,QAASj4B,GAGpB,GAAIA,EAAMi4B,QACR,OAAOj4B,wBA7EdkD,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,mBACVC,SAAA,q1EAhBO68B,EAAAA,oDAyBNx9B,EAAAA,MAAKC,KAAA,CAAC,8BAKND,EAAAA,MAAKC,KAAA,CAAC,2BAWND,EAAAA,MAAKC,KAAA,CAAC,8BAKN2N,EAAAA,OAAM3N,KAAA,CAAC,mBAkDV09B,EAlFA,GCJAM,GAAA,WAAA,SAAAA,KAYA,2BAZCx9B,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,0BACVC,SAAA,wpBAKCX,EAAAA,MAAKC,KAAA,CAAC,iCAGND,EAAAA,MAAKC,KAAA,CAAC,iBAETg+B,EAZA,GCCAC,GAAA,WAuBE,SAAAA,EAAoBjK,GAAAj4B,KAAAi4B,uBAAAA,EAFpBj4B,KAAAmiC,WAAqB,EAIvB,OAhBE3iC,OAAAsE,eAAyBo+B,EAAAhiC,UAAA,WAAQ,KAMjC,WACE,OAAOF,KAAKoiC,eAPd,SAAkCC,GAC5BA,IACFA,EAAS5L,MAAQz2B,KAAKi4B,uBAAuBJ,SAASwK,IAExDriC,KAAKoiC,UAAYC,uDAbpB59B,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,4BACVC,SAAA,2MAZOizB,wCAmBN5zB,EAAAA,MAAKC,KAAA,CAAC,iCAWND,EAAAA,MAAKC,KAAA,CAAC,mBAKTi+B,EAzBA,GCDAI,GAAA,WAiBE,SAAAA,EAAoB98B,EAA4BC,GAA5BzF,KAAAwF,QAAAA,EAA4BxF,KAAAyF,SAAAA,EA6ClD,OA3CE68B,EAAApiC,UAAAsG,gBAAA,WACExG,KAAKyG,2BACLzG,KAAK+G,kBAGPu7B,EAAApiC,UAAA+G,YAAA,WACEjH,KAAKkH,wBAGCo7B,EAAApiC,UAAA6G,eAAR,WAAA,IAAArB,EAAA1F,KACE2I,aAAa3I,KAAK4I,eAClB5I,KAAK4I,cAAgBC,WAAU,WAC7BnD,EAAK68B,gCAIDD,EAAApiC,UAAAsiC,iBAAR,WACE,OAAOxiC,KAAKwF,QAAQoB,cAAcoB,cAAc,wCAAwCnB,aAGlFy7B,EAAApiC,UAAAuiC,aAAR,eACQp9B,EAAQrF,KAAKwF,QAAQoB,cAAcsB,iBAAiB,8BAE1D,OAAOvI,MAAMwI,KAAK9C,GAAO+C,IAAG,SAAC2B,GAAQ,OAAAA,EAAkB,cAAGzB,OAAM,SAAEC,EAAGhJ,GAAM,OAAAgJ,EAAIhJ,GAAG,KAG5E+iC,EAAApiC,UAAAuG,yBAAR,WAAA,IAAAf,EAAA1F,KACEA,KAAKgJ,eAAiBhJ,KAAKyF,SAASsD,OAAO,SAAU,SAAQ,SAAG7C,GAC9DR,EAAKqB,oBAIDu7B,EAAApiC,UAAAgH,qBAAR,WACElH,KAAKgJ,kBAGCs5B,EAAApiC,UAAAqiC,2BAAR,eACQG,EAAgB1iC,KAAKwiC,mBACrBG,EAAY3iC,KAAKyiC,eAEvBziC,KAAK4iC,aAAeD,EAAYD,uBA3DnCj+B,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,4BACVC,SAAA,mhBAbiCuE,EAAAA,kBAA8BC,EAAAA,+CAuB9DnF,EAAAA,MAAKC,KAAA,CAAC,iCAGND,EAAAA,MAAKC,KAAA,CAAC,kBA+CTq+B,EA9DA,GCeAO,GAAA,WAAA,SAAAA,KA6B8B,2BA7B7Bh+B,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACA2G,EAAAA,aACAsG,GACA8Z,GACAmH,GACA+B,GACAhE,GACA+E,GACAvd,IAEFxT,aAAc,CACZ83B,GACA7G,GACA+B,GACAG,GACAwJ,GACAhF,GACAsF,GACAC,GACAI,IAEFr9B,QAAS,CACP63B,GACAH,IAEFpxB,UAAW,CAACi2B,EAAAA,iBAEgBqB,EA7B9B,GC1BAC,GAAA,WAwHE,SAAAlnB,IAnHA5b,KAAA6b,OAAS,CACP,CACEC,GAAI,UACJC,GAAI,UACJC,GAAI,SAEN,CACEF,GAAI,YACJC,GAAI,WACJC,GAAI,WAEN,CACEF,GAAI,QACJC,GAAI,QACJC,GAAI,SAEN,CACEF,GAAI,QACJC,GAAI,QACJC,GAAI,SAEN,CACEF,GAAI,OACJC,GAAI,MACJC,GAAI,QAEN,CACEF,GAAI,QACJC,GAAI,OACJC,GAAI,SAEN,CACEF,GAAI,QACJC,GAAI,OACJC,GAAI,SAEN,CACEF,GAAI,SACJC,GAAI,SACJC,GAAI,UAEN,CACEF,GAAI,WACJC,GAAI,YACJC,GAAI,aAEN,CACEF,GAAI,UACJC,GAAI,UACJC,GAAI,WAEN,CACEF,GAAI,WACJC,GAAI,WACJC,GAAI,aAEN,CACEF,GAAI,WACJC,GAAI,WACJC,GAAI,cAIRhc,KAAAic,cAAgB,CACd,CACEH,GAAI,MACJC,GAAI,MACJC,GAAI,OAEN,CACEF,GAAI,MACJC,GAAI,MACJC,GAAI,OAEN,CACEF,GAAI,MACJC,GAAI,MACJC,GAAI,OAEN,CACEF,GAAI,MACJC,GAAI,MACJC,GAAI,OAEN,CACEF,GAAI,MACJC,GAAI,MACJC,GAAI,OAEN,CACEF,GAAI,MACJC,GAAI,MACJC,GAAI,OAEN,CACEF,GAAI,MACJC,GAAI,MACJC,GAAI,QAIRhc,KAAA+iC,UAAY,CACVjnB,GAAI,MACJC,GAAI,QACJC,GAAI,OAGNhc,KAAAgjC,SAAW,CACTlnB,GAAI,MACJC,GAAI,OACJC,GAAI,OAGNhc,KAAAijC,KAAO,KA0CT,OAtCErnB,EAAA1b,UAAAqb,YAAA,SAAY0nB,GACNA,GAAQA,EAAKtiC,QAAU,IACzBsiC,EAAOA,EAAK72B,cAAc5D,MAAM,EAAG,GACnCxI,KAAKijC,KAAiB,OAATA,GAA0B,OAATA,GAA0B,OAATA,EAAiBA,EAAO,OAI3ErnB,EAAA1b,UAAAgjC,aAAA,WACE,OAAOljC,KAAK+iC,UAAU/iC,KAAKijC,OAG7BrnB,EAAA1b,UAAAijC,YAAA,WACE,OAAOnjC,KAAKgjC,SAAShjC,KAAKijC,OAG5BrnB,EAAA1b,UAAAsO,SAAA,SAASV,GACP,OAAO9N,KAAK6b,OAAO/N,GAAO9N,KAAKijC,OAGjCrnB,EAAA1b,UAAAkjC,eAAA,WAEE,QADM/mB,EAAY1c,QACTa,EAAI,EAAGA,EAAIR,KAAK6b,OAAOlb,OAAQH,IACtC6b,EAAUnZ,KAAKlD,KAAK6b,OAAOrb,GAAGR,KAAKijC,OAErC,OAAO5mB,GAGTT,EAAA1b,UAAAmjC,YAAA,SAAYx1B,GACV,OAAO7N,KAAKic,cAAcpO,GAAK7N,KAAKijC,OAGtCrnB,EAAA1b,UAAAojC,iBAAA,WAEE,QADM/mB,EAAc5c,QACXa,EAAI,EAAGA,EAAIR,KAAKic,cAActb,OAAQH,IAC7C+b,EAAYrZ,KAAKlD,KAAKic,cAAczb,GAAGR,KAAKijC,OAE9C,OAAO1mB,uBA5JV9R,EAAAA,mDA8JDmR,EAhKA,GCAA2nB,GAAA,WAQE,SAAA9mB,IACEzc,KAAKwjC,aAAe,EAyCxB,OAtCE/mB,EAAAvc,UAAA8c,cAAA,SAAcpP,GAEZ,QADMwP,EAAY,IAAInP,KAAKL,EAAKqP,WACzBG,EAAUC,WAAard,KAAKwjC,cACjCpmB,EAAUF,QAAQE,EAAU3O,UAAY,GAE1C,OAAO2O,GAGTX,EAAAvc,UAAAwc,WAAA,SAAW3O,EAAWD,EAAY6O,EAA0BC,GAC1D,QADgC,IAAAD,IAAAA,EAAA,WAA0B,IAAAC,IAAAA,EAAA,MACpC,iBAAV9O,GAAwBA,EAAQ,GAAOA,EAAQ,GACzD,MAAM+O,MAAK,yCAGPC,EAAoB,GACtBC,EAAmB,GACnBvc,EAAI,EACJoN,EAAO,IAAIK,KAAKF,EAAMD,EAAO,GACjCE,EAAkBJ,EAAMG,GACxBH,EAAO5N,KAAKgd,cAAcpP,GAE1B,EAAG,CACD,IAAKpN,EAAI,EAAGA,EAAI,EAAGA,IACjBuc,EAAK7Z,KAAKyZ,EAAeA,EAAa/O,GAAQA,IAC9CA,EAAO,IAAIK,KAAKL,EAAKqP,YAChBC,QAAQtP,EAAKa,UAAY,GAEhCqO,EAAM5Z,KAAK0Z,EAAgBA,EAAcG,GAAQA,GACjDA,EAAO,SACCnP,EAAKY,YAAcV,GAAWF,EAAKe,gBAAkBZ,GAC/D,OAAO+O,GAGTL,EAAAvc,UAAAid,UAAA,SAAUpP,EAAWD,GAInB,OAAO9N,KAAK0c,WAAW3O,EAAMD,EAHX,SAAYF,GAC5B,OAAOA,EAAKY,aAAeV,EAAQF,EAAO,yBA1C/CnD,EAAAA,mDA8CDgS,EAlDA,GCOMvC,GAAqB,CAAC,KAAM,KAAM,MASxCupB,GAAA,WA4HE,SAAA3kB,EACUC,EACA1E,GADAra,KAAA+e,mBAAAA,EACA/e,KAAAqa,uBAAAA,EAlHVra,KAAAsa,YAAsB,EAKtBta,KAAAua,cAA4B5a,QAE5BK,KAAA0jC,gBAA8B/jC,QAE9BK,KAAAya,cAAwB,EACxBza,KAAA2jC,kBAA4B,EAC5B3jC,KAAAu9B,SAAmB,EACnBv9B,KAAA0a,aAAuB,EAKf1a,KAAA8O,SAAgBA,EAEhB9O,KAAA6a,MAAc,IAAI5M,KA0FOjO,KAAA4jC,mBAAqB,IAAIjyB,EAAAA,aACtC3R,KAAA6jC,OAAS,IAAIlyB,EAAAA,aAoMnC,OAlREnS,OAAAsE,eAAyBgb,EAAA5e,UAAA,UAAO,KAchC,WACE,OAAOF,KAAK8jC,cAfd,SAAiCp3B,GAC/B,GAAIA,GAAOA,aAAeuB,KAAM,KACxBF,EAAOrB,EAAIiC,cACXb,EAAQpB,EAAI8B,WACZX,EAAMnB,EAAI+B,UAEVb,EAAO,IAAIK,KAAKF,EAAMD,EAAOD,EAAK,GAAI,GAAI,IAChDG,EAAkBJ,EAAMG,GAExB/N,KAAK8jC,SAAWl2B,OAEhB5N,KAAK8jC,SAAWv/B,2CAmBpB/E,OAAAsE,eAAuBgb,EAAA5e,UAAA,SAAM,KAI7B,WACE,OAAOF,KAAK+a,aALd,SAA8BC,GAC5Bhb,KAAK+a,QAAUb,GAAmBnW,SAASiX,GAAUA,EArFxB,KAsF7Bhb,KAAKib,sDAaPzb,OAAAsE,eAA8Bgb,EAAA5e,UAAA,eAAY,KAG1C,WACE,OAAOF,KAAK+jC,mBAJd,SAA2CC,GACzChkC,KAAK+jC,cAAiBC,GAAgBA,aAAwB/1B,KAAO+1B,EAAez/B,2CAatF/E,OAAAsE,eAA2Bgb,EAAA5e,UAAA,YAAS,KAcpC,WACE,OAAOF,KAAKikC,gBAfd,SAAqCv3B,GACnC,GAAIA,GAAOA,aAAeuB,KAAM,KACxBF,EAAOrB,EAAIiC,cACXb,EAAQpB,EAAI8B,WACZX,EAAMnB,EAAI+B,UAEVb,EAAO,IAAIK,KAAKF,EAAMD,EAAOD,EAAK,EAAG,EAAG,GAC9CG,EAAkBJ,EAAMG,GAExB/N,KAAKikC,WAAar2B,OAElB5N,KAAKikC,WAAa1/B,2CAetBua,EAAA5e,UAAAksB,MAAA,WACEpsB,KAAK2jC,kBAAmB,EACxB3jC,KAAKu9B,SAAU,GAIjBze,EAAA5e,UAAAgkC,eAAA,SAAen2B,GAGb,GAFA/N,KAAKmhB,cAAgBxhB,QAEjBoO,EAAO,IAAO,EAChB,KAAOA,EAAO,IAAO,GACnBA,IAGJ/N,KAAKwhB,aAAazT,IAGpB+Q,EAAA5e,UAAA+e,mBAAA,SAAmBC,EAAsBC,GACvC,OAAQD,IAAiBC,EAAiB,uCAAyC,+BAGrFL,EAAA5e,UAAAkf,sBAAA,SAAsBxR,GACpB,OAAI5N,KAAKohB,WAAWxT,EAAM5N,KAAKgkC,cACtB,uCACEhkC,KAAKohB,WAAWxT,EAAM5N,KAAK6a,OAC7B,oCACEjN,EACL4C,EAAkB5C,EAAM5N,KAAKyQ,UAAWzQ,KAAK0Q,SACxC,8BAEA,uCAGF,IAIXoO,EAAA5e,UAAAof,sBAAA,SAAsB1R,GACpB,OAAI5N,KAAKohB,WAAWxT,EAAM5N,KAAKgkC,cACtB,uCACEhkC,KAAKohB,WAAWxT,EAAM5N,KAAK6a,OAC7B,oCAEHrK,EAAkB5C,EAAM5N,KAAKyQ,UAAWzQ,KAAK0Q,SACxC,8BAEA,wCAKboO,EAAA5e,UAAAqf,mBAAA,SAAmBL,EAAsBC,GACvC,OAAQD,IAAiBC,EAAiB,uCAAyC,+BAGrFL,EAAA5e,UAAAgjC,aAAA,WACE,OAAOljC,KAAKqa,uBAAuB6oB,gBAGrCpkB,EAAA5e,UAAAijC,YAAA,WACE,OAAOnjC,KAAKqa,uBAAuB8oB,eAGrCrkB,EAAA5e,UAAA8e,KAAA,WACEhf,KAAKgkC,aAAehkC,KAAKihB,WAAWjhB,KAAKgkC,cAAgBhkC,KAAKihB,WAAWjhB,KAAK6a,OAE9E7a,KAAKib,qBAELjb,KAAK+f,YAED/f,KAAK8O,aACP9O,KAAK2jC,kBAAmB,GAG1B3jC,KAAKu9B,SAAU,GAGjBze,EAAA5e,UAAA+a,mBAAA,WACEjb,KAAKqa,uBAAuBkB,YAAYvb,KAAKgb,QAC7Chb,KAAK0jC,gBAAkB1jC,KAAKqa,uBAAuBipB,mBACnDtjC,KAAKua,cAAgBva,KAAKqa,uBAAuB+oB,kBAGnDtkB,EAAA5e,UAAAsf,YAAA,WACMxf,KAAK2b,mBAAqB,GAC5B3b,KAAKyf,cAAczf,KAAK0f,YAAa1f,KAAK2b,mBAAqB,GAE/D3b,KAAKyf,cAAczf,KAAK0f,YAAc,EAAG,IAI7CZ,EAAA5e,UAAAikC,YAAA,WACMnkC,KAAK2b,mBAAqB,EAC5B3b,KAAKyf,cAAczf,KAAK0f,YAAa1f,KAAK2b,mBAAqB,GAE/D3b,KAAKyf,cAAczf,KAAK0f,YAAc,EAAG,KAK7CZ,EAAA5e,UAAA0f,aAAA,SAAahS,GACP4C,EAAkB5C,EAAM5N,KAAKyQ,UAAWzQ,KAAK0Q,WAC/C1Q,KAAKgkC,aAAep2B,EACpB5N,KAAK4jC,mBAAmB7xB,KAAKnE,GAC7B5N,KAAK6jC,OAAO9xB,KAAKnE,KAKrBkR,EAAA5e,UAAA4f,cAAA,SAAc/R,EAAcD,GAC1B9N,KAAK+f,YACL/f,KAAKyf,cAAc1R,EAAMD,IAI3BgR,EAAA5e,UAAA8f,aAAA,SAAajS,EAAcD,GAEJ,UAArB9N,KAAKigB,YAA0BjgB,KAAKkgB,cAAgBlgB,KAAK+f,YAEzD/f,KAAKmgB,YAAcpS,EACnB/N,KAAKyf,cAAc1R,EAAMD,IAG3BgR,EAAA5e,UAAA6f,UAAA,WACE/f,KAAKsa,YAAa,EAClBta,KAAKya,cAAe,EACpBza,KAAK0a,aAAc,EACnB1a,KAAKigB,YAAc,OAGrBnB,EAAA5e,UAAAggB,YAAA,WACElgB,KAAKsa,YAAa,EAClBta,KAAKya,cAAe,EACpBza,KAAK0a,aAAc,EACnB1a,KAAKigB,YAAc,SAGrBnB,EAAA5e,UAAAugB,WAAA,WACEzgB,KAAKsa,YAAa,EAClBta,KAAKya,cAAe,EACpBza,KAAK0a,aAAc,GAGrBoE,EAAA5e,UAAAkkC,uBAAA,WACE,OAAOpkC,KAAK8O,WAAa,mCAAqC,gBAGhEgQ,EAAA5e,UAAAwgB,WAAA,SAAWnf,GACTvB,KAAKyf,cAAczf,KAAK0f,YAAcne,EAAOvB,KAAK2b,qBAG5CmD,EAAA5e,UAAAghB,oBAAR,SAA4BnT,OACtBvN,EACJ,IAAKA,EAAIuN,EAAMvN,EAAIuN,EAAO,GAAIvN,IAC5BR,KAAKmhB,cAAcje,KAAK1C,IAIpBse,EAAA5e,UAAAkhB,WAAR,SAAmBC,EAAaC,GAC9B,IACE,OAAOD,EAAM1S,gBAAkB2S,EAAM3S,eACnC0S,EAAM7S,aAAe8S,EAAM9S,YAC3B6S,EAAM5S,YAAc6S,EAAM7S,UAC5B,MAAOjL,GACP,OAAO,IAIHsb,EAAA5e,UAAA+gB,WAAR,SAAmBrT,GACjB5N,KAAK+hB,mBAAqBnU,EAAKY,WAC/BxO,KAAKmgB,YAAcvS,EAAKe,cACxB3O,KAAKyf,cAAczf,KAAKmgB,YAAangB,KAAK+hB,qBAGpCjD,EAAA5e,UAAAshB,aAAR,SAAqBzT,GACnB/N,KAAKkhB,oBAAoBnT,GACzB/N,KAAKgiB,mBAAqBjU,EAC1B/N,KAAKiiB,mBAAqBlU,EAAO,GAG3B+Q,EAAA5e,UAAAuf,cAAR,SAAsB1R,EAAcD,OAC5BoU,EAAgBliB,KAAK+e,mBAAmB5B,UAAUpP,EAAMD,GAC9D9N,KAAKmiB,YAAc,GAAGze,OAAO7C,MAAM,GAAIqhB,GACvCliB,KAAK2b,mBAAqB7N,EAC1B9N,KAAK0b,aAAe1b,KAAKua,cAAczM,GACvC9N,KAAK0f,YAAc3R,EACnB/N,KAAKkkC,eAAen2B,wBA3TvBtJ,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,eACVC,SAAA,43GACA4G,UAAW,CAACkR,GAAoBb,iDAfzBa,UADAb,sCA8CNxS,EAAAA,UAASnF,KAAA,CAAC,OAAQ,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,sBAC9CF,EAAAA,UAASnF,KAAA,CAAC,SAAU,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,qBAChDF,EAAAA,UAASnF,KAAA,CAAC,QAAS,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,qBAS/CtF,EAAAA,MAAKC,KAAA,CAAC,8BA8BND,EAAAA,MAAKC,KAAA,CAAC,kCAeND,EAAAA,MAAKC,KAAA,CAAC,sCAcND,EAAAA,MAAKC,KAAA,CAAC,4CAkBN2N,EAAAA,OAAM3N,KAAA,CAAC,yCACP2N,EAAAA,OAAM3N,KAAA,CAAC,eAoMV6a,EA9TA,GCfA,SAAgBulB,GAAeC,EAAmB9S,EAAmBjwB,OAC7DgjC,EAA2B,iBAAVhjC,GAAsBA,GAA4B,iBAAVA,GAAsBA,GAASA,EAAMZ,QACjE,iBAAVY,IAAuBA,GAAmB,IAAVA,IAAmC,kBAAVA,GAAuBA,EACzG,OAAQ+iC,IAAa9S,IAAa+S,EAGpC,SAAgBC,GAAgBC,EAAmBljC,OAC3CmjC,EAAiBD,GAA2B,IAAdA,EAC9B70B,GAAcrO,GAAmB,IAAVA,IAAgBA,EAAMsN,WACnD,OAAO61B,GAAkB90B,GAAcA,EAAWjP,OAASgkC,OAAOF,GAGpE,SAAgBG,GAAgBC,EAAmBtjC,OAC3CujC,EAAiBD,GAA2B,IAAdA,EAC9Bj1B,GAAcrO,GAAmB,IAAVA,IAAgBA,EAAMsN,WACnD,OAAOi2B,GAAkBl1B,GAAcA,EAAWjP,OAASgkC,OAAOE,OCR9DE,GAA+C,EAgCrDC,GAAA,WAAA,SAAAA,IAEEhlC,KAAAilC,eAAsB,GACtBjlC,KAAAklC,mBAA0B,GAC1BllC,KAAAmlC,UAAoBJ,GAIZ/kC,KAAA64B,SAAmBkM,GACnB/kC,KAAAsR,WAAsB,EACtBtR,KAAAolC,gBAA2B,EAE3BplC,KAAAqlC,WAAsB,EA+HLrlC,KAAAslC,cAAoC,IAAI3zB,EAAAA,aAG7C3R,KAAA8a,OAA6B,IAAInJ,EAAAA,aAwHvD,OAvOEnS,OAAAsE,eAAwBkhC,EAAA9kC,UAAA,UAAO,KAO/B,WACE,OAAOF,KAAK64B,cARd,SAAgCt3B,OACxBi4B,EAAU5sB,EAAarL,EAAOwjC,IAEpC/kC,KAAK64B,SAAW74B,KAAKulC,qBAAqB/L,EAAS,GACnDx5B,KAAKmlC,UAAYnlC,KAAKulC,qBAAqB/L,EAAS,oCAgBtDh6B,OAAAsE,eAAyBkhC,EAAA9kC,UAAA,WAAQ,KAMjC,WACE,OAAOF,KAAKsR,eAPd,SAAkC/P,GAChCvB,KAAKsR,UAAY7E,EAAiBlL,GAElCvB,KAAK2gB,cAAc3gB,KAAKwlC,uDAuB1BhmC,OAAAsE,eAA8BkhC,EAAA9kC,UAAA,gBAAa,KAI3C,WACE,OAAOF,KAAKolC,oBALd,SAA4CK,GAC1CzlC,KAAKolC,eAAiB34B,EAAiBg5B,oCAgCzCjmC,OAAAsE,eAAwBkhC,EAAA9kC,UAAA,UAAO,KAK/B,WACE,OAAOF,KAAK0lC,cANd,SAAgCnkC,GAC9BvB,KAAK0lC,SAAW/lC,MAAMouB,QAAQxsB,GAASA,EAAQ,GAC/CvB,KAAKsP,2DAgBP9P,OAAAsE,eAAyBkhC,EAAA9kC,UAAA,WAAQ,KAMjC,WACE,OAAOF,KAAKqlC,eAPd,SAAkCf,GAChCtkC,KAAKqlC,UAAY54B,EAAiB63B,GAElCtkC,KAAK2gB,cAAc3gB,KAAKwlC,uDAa1BR,EAAA9kC,UAAAylC,YAAA,eAEQpkC,EAAQvB,KAAKwlC,qBAEfxlC,KAAK4a,gBACP5a,KAAK4a,gBAAgBrZ,GAErBvB,KAAKslC,cAAcvzB,KAAKxQ,GAG1BvB,KAAK8a,OAAO/I,KAAKxQ,IAGnByjC,EAAA9kC,UAAAslC,mBAAA,WACE,OAAOxlC,KAAKylC,cAAgBzlC,KAAKilC,eAAiBjlC,KAAKklC,oBAGzDF,EAAA9kC,UAAA0lC,YAAA,SAAYrkC,GACLvB,KAAKsR,WAAc/P,EAAMiwB,WAC5BxxB,KAAK6lC,iBAAiBtkC,GACtBvB,KAAK2lC,gBAITX,EAAA9kC,UAAAkgB,iBAAA,SAAiB9S,GACftN,KAAK4a,gBAAkBtN,GAGzB03B,EAAA9kC,UAAAmgB,kBAAA,SAAkB/S,KAElB03B,EAAA9kC,UAAA6gB,WAAA,SAAW+kB,GACLA,GAAgB9lC,KAAKilC,iBAAmBa,EAC1C9lC,KAAK+lC,qBAAqBD,IAE1B9lC,KAAKklC,mBAAqB,GAC1BllC,KAAKilC,eAAiB,KAI1BD,EAAA9kC,UAAAqgB,0BAAA,SAA0BjT,GACxBtN,KAAKwgB,gBAAkBlT,GAGzB03B,EAAA9kC,UAAA2gB,SAAA,SAASmlB,GAEP,IAAMhmC,KAAKylC,eAAiBpB,GAAerkC,KAAKskC,SAAUtkC,KAAKwxB,SAAUwU,EAAgBzkC,QAAWvB,KAAKimC,yBACvG,MAAO,CACL3B,SAAU,CACRC,OAAO,KAOLS,EAAA9kC,UAAAygB,cAAV,SAAwBC,GAClB5gB,KAAKwgB,iBACPxgB,KAAKwgB,gBAAgBI,IAIjBokB,EAAA9kC,UAAAgmC,kBAAR,SAA0B1M,EAAS2M,GAGjC,OAAO3M,GAFY,GAEaA,GAAW2M,GAGrCnB,EAAA9kC,UAAA2lC,iBAAR,SAAyBO,GACvBpmC,KAAKilC,eAAemB,EAAc7kC,QAAUvB,KAAKilC,eAAemB,EAAc7kC,QAEzEvB,KAAKylC,eAAiBzlC,KAAKklC,mBAAmBnhC,SAASqiC,EAAc7kC,OACxEvB,KAAKklC,mBAAmBz1B,OAAOzP,KAAKklC,mBAAmBlxB,QAAQoyB,EAAc7kC,OAAQ,GAE3EvB,KAAKylC,eACfzlC,KAAKklC,mBAAmBhiC,KAAKkjC,EAAc7kC,QAIvCyjC,EAAA9kC,UAAA6lC,qBAAR,SAA6BD,GAA7B,IAAApgC,EAAA1F,KAEEA,KAAKilC,eAAiB,GAElBa,aAAwBnmC,OAC1BK,KAAKklC,mBAAqBY,EAE1B9lC,KAAKqmC,QAAQ9sB,QAAO,SAAE+sB,GACpB5gC,EAAKu/B,eAAeqB,EAAO/kC,OAASukC,EAAa/hC,SAASuiC,EAAO/kC,UAGnEvB,KAAKqmC,QAAQ9sB,QAAO,SAAE+sB,GACpBR,EAAaQ,EAAO/kC,OAASukC,EAAaQ,EAAO/kC,SAAWgD,WAAoBuhC,EAAaQ,EAAO/kC,OACpGmE,EAAKu/B,eAAiBa,KAKpBd,EAAA9kC,UAAAqlC,qBAAR,SAA6B/L,EAAiB2M,OACtCI,EAhRyC,GAgRgB/M,EAE/D,OAAOx5B,KAAKkmC,kBAAkB1M,EAAS2M,GAAcI,EAAoBxB,IAGnEC,EAAA9kC,UAAA+lC,uBAAR,WACE,SAAIjmC,KAAKylC,eAAiBzlC,KAAKskC,UAAYtkC,KAAKilC,iBACvC,OAAcjsB,OAAOhZ,KAAKilC,gBAAgBvI,MAAK,SAACn7B,GAAS,OAAU,IAAVA,KAK5DyjC,EAAA9kC,UAAAoP,wBAAR,WAAA,IAAA5J,EAAA1F,KACEA,KAAKqmC,QAAQ9sB,QAAO,SAAE+sB,EAAQtxB,GACJtP,EAAK2gC,QAAQ72B,UAAS,SAAEg3B,GAAoB,OAAAA,EAAWjlC,QAAU+kC,EAAO/kC,UAAWyT,GAEzGtP,EAAK2gC,QAAQ52B,OAAO/J,EAAK2gC,QAAQryB,QAAQsyB,GAAS,oCAlPvDtiC,EAAAA,MAAKC,KAAA,CAAC,yBAgBND,EAAAA,MAAKC,KAAA,CAAC,+BAoBND,EAAAA,MAAKC,KAAA,CAAC,4BAWND,EAAAA,MAAKC,KAAA,CAAC,iCAeND,EAAAA,MAAKC,KAAA,CAAC,kCASND,EAAAA,MAAKC,KAAA,CAAC,6BAeND,EAAAA,MAAKC,KAAA,CAAC,+BASND,EAAAA,MAAKC,KAAA,CAAC,+BAkBND,EAAAA,MAAKC,KAAA,CAAC,qCAWN2N,EAAAA,OAAM3N,KAAA,CAAC,iCAGP2N,EAAAA,OAAM3N,KAAA,CAAC,eAwHV+gC,EAtQA,GCdAyB,GAAA,SAAAtiC,GAkBE,SAAAsiC,EAAoB7c,GAApB,IAAAlkB,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAkkB,eAAAA,IAkBtB,OApB+CxlB,EAAAA,EAAAA,GAM7CqiC,EAAAvmC,UAAAwmC,mBAAA,WACE1mC,KAAK4pB,eAAekB,iBAGtB2b,EAAAvmC,UAAAoxB,UAAA,SAAUprB,EAAsBogC,GACb,KAEbpgC,EAAMkJ,OAFO,KAEelJ,EAAMiJ,UACpCnP,KAAK4lC,YAAYU,GAEjBpgC,EAAMguB,uCAhCXzvB,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,qBACVC,SAAA,o5CACA4G,UAAW,CACT,CACE8W,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAikB,IAC9BhkB,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAAikB,IAC9BhkB,OAAO,iDAtCc4I,EAAAA,qBA8D3Bob,EApCA,CAgB+CzB,IChC/C2B,GAAA,WAAA,SAAAA,IAM4B3mC,KAAAiN,aAAwB,GAOxBjN,KAAA4mC,YAAkC,IAAIj1B,EAAAA,aAiClE,OA7BEg1B,EAAAzmC,UAAA2mC,MAAA,WACE7mC,KAAK8mC,cAAc9mC,KAAKiN,cACxBjN,KAAK4mC,YAAY70B,KAAK/R,KAAKiN,eAG7B05B,EAAAzmC,UAAA6mC,SAAA,WACE,OAAO/mC,KAAKiN,eAAiBjN,KAAKgnC,iBAAmBhnC,KAAKinC,iBAAmBjnC,KAAKknC,eAAiBlnC,KAAKmnC,cAKlGR,EAAAzmC,UAAA+mC,aAAR,WACE,OAAOjnC,KAAKonC,gBAAgBC,OAItBV,EAAAzmC,UAAAgnC,WAAR,WACE,OAAOlnC,KAAKonC,gBAAgB5V,UAItBmV,EAAAzmC,UAAAinC,WAAR,WACE,OAAOnnC,KAAKonC,gBAAgBE,4CApC7BtjC,EAAAA,MAAKC,KAAA,CAAC,uCAGND,EAAAA,MAAKC,KAAA,CAAC,wCAON2N,EAAAA,OAAM3N,KAAA,CAAC,qBAiCV0iC,EA9CA,GCMAY,GAAA,SAAApjC,GAME,SAAAojC,EAAoBztB,GAApB,IAAApU,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAoU,QAAAA,EAElBpU,EAAK0hC,gBAAkB1hC,EAAKoU,QAAe,MAAa,YAe5D,OAnBuC1V,EAAAA,EAAAA,GAOrCmjC,EAAArnC,UAAA4mC,cAAA,SAAcvlC,GACRvB,KAAKwnC,UAAYxnC,KAAKwnC,SAAS5gC,gBACjC5G,KAAKwnC,SAAS5gC,cAAcrF,MAAQA,IAIxCgmC,EAAArnC,UAAA8mC,cAAA,WACE,GAAIhnC,KAAKwnC,UAAYxnC,KAAKwnC,SAAS5gC,cACjC,OAAO5G,KAAKwnC,SAAS5gC,cAAcrF,2BAnBxCkD,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,YACVC,SAAA,2JAlBkBqV,EAAAA,oBAuCpButB,EAvBA,CAIuCZ,QCVnCc,UAAA,GAGAC,QAAA,GAGAC,UAAA,EAGAC,SAAA,GAGAC,MAAA,GAGAC,IAAA,GAGAC,MAAA,GAGAC,IAAA,oMCtBFl4B,WAAA,EAEAzI,SAAA,EAEA4gC,SAAA,4FCGWC,GAA0B,CACrCnsB,GAAE,CACAwc,OAAQ,iBAEVvc,GAAE,CACAuc,OAAQ,wBAEVzc,GAAE,CACAyc,OAAQ,2BA2BZ4P,GAAA,WAAA,SAAAA,IAEUnoC,KAAAooC,gBAA2B,EAC3BpoC,KAAAqoC,cAAyB,IACzBroC,KAAAsR,WAAsB,EACtBtR,KAAAsoC,qBAAgC,EAChCtoC,KAAAuoC,YAAuB,QACvBvoC,KAAAwoC,YAAuB,QACvBxoC,KAAAyoC,iBAA4B,EAC5BzoC,KAAA0oC,YAAmCC,GAAmB74B,WAItD9P,KAAA0lC,SAAkC,GAClC1lC,KAAAqlC,WAAsB,EAE9BrlC,KAAA4oC,aAAsC,GACtC5oC,KAAA6oC,mBAA4C,GAE5C7oC,KAAA8oC,mBAA6B,EAC7B9oC,KAAA+oC,eAAyB,EACzB/oC,KAAAgpC,aAAuB,EAIvBhpC,KAAAipC,oBAA8B,GAK9BjpC,KAAAkpC,eAAwC,GAWhBlpC,KAAAmpC,YAAuB,GAyO/CnpC,KAAAq6B,MAAiB,EA8FGr6B,KAAA8a,OAA6B,IAAInJ,EAAAA,aAG5B3R,KAAAslC,cAAoC,IAAI3zB,EAAAA,aAkVnE,OAvoBEnS,OAAAsE,eAA+BqkC,EAAAjoC,UAAA,gBAAa,KAM5C,WACE,OAAOF,KAAKopC,oBAPd,SAA6Cx+B,GAC3C5K,KAAKopC,eAAiBx+B,EAEtB5K,KAAKqpC,4BAA4Bz+B,oCAgBnCpL,OAAAsE,eAA8BqkC,EAAAjoC,UAAA,eAAY,KAS1C,WACE,OAAOF,KAAKqoC,mBAVd,SAA2C9mC,OACnC+nC,EAAcv8B,SAAQ,EAAc,IAE1C/M,KAAKqoC,eAAiBkB,MAAMD,IAAgBA,EAAc,EAAIA,EA3H1B,IA6HpCtpC,KAAKwpC,6BACLxpC,KAAKypC,uDAgBPjqC,OAAAsE,eAAqCqkC,EAAAjoC,UAAA,qBAAkB,KAIvD,WACE,OAAOF,KAAKsoC,yBALd,SAAwD/mC,GACtDvB,KAAKsoC,oBAAsB77B,EAAiBlL,oCAmB9C/B,OAAAsE,eAA4BqkC,EAAAjoC,UAAA,aAAU,KAQtC,WACE,OAAOF,KAAKwoC,iBATd,SAAuCjnC,GACrCvB,KAAKwoC,YAAcjnC,GAjKe,QAmK9B2L,EAASlN,KAAK0pC,cAAe,WAAa1pC,KAAK4K,UACjD5K,KAAK4K,QAAQ++B,WAAa3pC,KAAKwoC,8CAoBnChpC,OAAAsE,eAA4BqkC,EAAAjoC,UAAA,aAAU,KAQtC,WACE,OAAOF,KAAKuoC,iBATd,SAAuChnC,GACrCvB,KAAKuoC,YAAchnC,GA1Le,QA4L9B2L,EAASlN,KAAK0pC,cAAe,WAAa1pC,KAAK4K,UACjD5K,KAAK4K,QAAQg/B,WAAa5pC,KAAKuoC,8CAgBnC/oC,OAAAsE,eAAiCqkC,EAAAjoC,UAAA,kBAAe,KAMhD,WACE,OAAOF,KAAKyoC,sBAPd,SAAiDlnC,OACzCsoC,EAA+B,iBAAVtoC,EAAsBwL,SAASxL,EAAO,IAAMA,EAEvEvB,KAAKyoC,iBAAmB9D,OAAOmF,UAAUD,GAAcA,EAAa,mCAetErqC,OAAAsE,eAAyBqkC,EAAAjoC,UAAA,WAAQ,KAMjC,WACE,OAAOF,KAAKqlC,eAPd,SAAkCf,GAChCtkC,KAAKqlC,UAAY54B,EAAiB63B,GAElCtkC,KAAK2gB,cAAc3gB,KAAK+pC,gDAe1BvqC,OAAAsE,eAAgCqkC,EAAAjoC,UAAA,gBAAa,KAI7C,WACE,OAAOF,KAAKooC,oBALd,SAA8C4B,GAC5ChqC,KAAKooC,eAAiB37B,EAAiBu9B,oCAezCxqC,OAAAsE,eAAyBqkC,EAAAjoC,UAAA,WAAQ,KAMjC,WACE,OAAOF,KAAKsR,eAPd,SAAkCkgB,GAChCxxB,KAAKsR,UAAY7E,EAAiB+kB,GAElCxxB,KAAK2gB,cAAc3gB,KAAK+pC,gDAsB1BvqC,OAAAsE,eAAwBqkC,EAAAjoC,UAAA,UAAO,KAU/B,WACE,OAAOF,KAAK0lC,cAXd,SAAgCW,GAC9BrmC,KAAK0lC,SAAW/lC,MAAMouB,QAAQsY,GAAWA,EAAU,GAEnDrmC,KAAK6oC,mBAAqB7oC,KAAKqmC,QAE/BrmC,KAAKiqC,sBACL36B,EAAwBtP,KAAKqmC,SAC7BrmC,KAAKkqC,mDAwBP1qC,OAAAsE,eAAqBqkC,EAAAjoC,UAAA,UAAO,KAA5B,SAA6Bm6B,GAC3Br6B,KAAKq6B,KAAgB,KAATA,GAAqB5tB,EAAiB4tB,GAElDr6B,KAAKiqC,uDAcPzqC,OAAAsE,eAA4BqkC,EAAAjoC,UAAA,aAAU,KAetC,WACE,OAAOF,KAAK0oC,iBAhBd,SAAuCyB,GAErC,OADAnqC,KAAK0oC,YAAeyB,KAAcxB,GAAsBwB,EAAaxB,GAAmB74B,WAChF9P,KAAK0oC,YAAY75B,YACvB,IAAK,aACH7O,KAAK0oC,YAAcC,GAAmB74B,WACtC,MACF,IAAK,WACH9P,KAAK0oC,YAAcC,GAAmBthC,SACtC,MACF,IAAK,WACHrH,KAAK0oC,YAAcC,GAAmBV,2CAgB5CzoC,OAAAsE,eAA8BqkC,EAAAjoC,UAAA,eAAY,KAI1C,WACE,OAAOF,KAAKoqC,mBALd,SAA2CC,GACzCrqC,KAAKoqC,cAAiBC,GAAiC,IAAjBA,IAAuC,IAAjBA,EAA0BA,EAAe9lC,2CAgCvG/E,OAAAsE,eAAyBqkC,EAAAjoC,UAAA,WAAQ,KAYjC,WACE,OAAOF,KAAKi6B,WAAaiO,GAAwBr8B,UAbnD,SAAkCtK,GAC5BA,aAAiB/B,UAAY+B,aAAiB5B,OAChDK,KAAKi6B,UAAS75B,EAAA,GACT8nC,GAAwBt8B,GACxBs8B,GAAwBr8B,KACxBtK,GAGLvB,KAAKi6B,UAAYiO,GAAwBr8B,sCAwB7Cs8B,EAAAjoC,UAAAmE,SAAA,WACErE,KAAKkqC,mBAGP/B,EAAAjoC,UAAAoqC,cAAA,WACMtqC,KAAK0pC,gBACP1pC,KAAKuqC,WAAWvqC,KAAK0pC,eACrB1pC,KAAKypC,wBAITtB,EAAAjoC,UAAAqqC,WAAA,SAAW3/B,GACLA,IACEsC,EAAStC,EAAS,UACpB5K,KAAK4K,QAAO,GAEZ5K,KAAK4K,QAAU5K,KAAKwqC,eACpBxqC,KAAK4K,QAAQ6/B,iBAAgB,EAAkBzqC,KAAK4pC,WAAY5pC,KAAK2pC,eAK3ExB,EAAAjoC,UAAA+pC,oBAAA,WACE,GAAIjqC,KAAKqmC,SAAWrmC,KAAKqmC,QAAQ1lC,OAAS,EAExC,IAAK,IAAIH,EAAI,EAAGA,EAAIR,KAAKqmC,QAAQ1lC,OAAQH,IAClCoP,EAAW5P,KAAKqmC,QAAQ7lC,GAAU,OAE3BR,KAAKqmC,QAAQ7lC,GAAU,QACjCR,KAAKqmC,QAAQ7lC,GAAU,MAAIR,KAAKqmC,QAAQ7lC,GAAU,MAAEqO,YAFpD7O,KAAKqmC,QAAQ52B,OAAOjP,EAAG,GAM7BR,KAAK0qC,eAGPvC,EAAAjoC,UAAAwqC,YAAA,WACM1qC,KAAKqmC,SAAWrmC,KAAKqmC,QAAQ1lC,OAAS,GAAKX,KAAKq6B,MAClDr6B,KAAKqmC,QAAQhM,KAAKr6B,KAAK2qC,iBAI3BxC,EAAAjoC,UAAAyqC,eAAA,SAAepiC,EAAQhJ,GACrB,OAAIgJ,EAAElG,MAAMwM,WAAWzC,cAAgB7M,EAAE8C,MAAMwM,WAAWzC,eAChD,EAEN7D,EAAElG,MAAMwM,WAAWzC,cAAgB7M,EAAE8C,MAAMwM,WAAWzC,cACjD,EAEF,GAGT+7B,EAAAjoC,UAAA0qC,cAAA,SAAcC,EAAgBvE,EAAwB6D,GACpD,OAAQA,GACN,KAAKxB,GAAmB74B,WACtB,OAAO9P,KAAK8P,WAAW+6B,EAAQvE,GACjC,KAAKqC,GAAmBthC,SACtB,OAAOrH,KAAKqH,SAASwjC,EAAQvE,GAC/B,KAAKqC,GAAmBV,SACtB,OAAOjoC,KAAKioC,SAAS4C,EAAQvE,KAInC6B,EAAAjoC,UAAA4P,WAAA,SAAW+6B,EAAgBvE,GACzB,OAAOA,EAAOjkC,MAAM+J,cAAc0D,WAAW+6B,EAAOz+B,gBAGtD+7B,EAAAjoC,UAAAmH,SAAA,SAASwjC,EAAgBvE,GACvB,OAAOA,EAAOjkC,MAAM+J,cAAc4H,QAAQ62B,EAAOz+B,gBAAkB,GAGrE+7B,EAAAjoC,UAAA+nC,SAAA,SAAS4C,EAAgBvE,GACvB,OAAOA,EAAOjkC,MAAM+J,cAAc67B,SAAS4C,EAAOz+B,gBAGpD+7B,EAAAjoC,UAAA4qC,mBAAA,SAAmBvpC,EAAY8kC,GAA/B,IAAA3gC,EAAA1F,KACE,OAAO,EAAYqmC,EAAQ9/B,KAAI,SAAE+/B,GAAgB,OAAA5gC,EAAKqlC,QAAQzE,EAAO/kC,MAAOA,KAAU,MAGxF4mC,EAAAjoC,UAAA8qC,mBAAA,SAAmB3oC,EAAYgkC,GAC7B,OAAIA,EACKA,EAAQ9/B,KAAI,SAAE+/B,GACnB,OAAOA,EAAOjkC,MAAMwM,WAAWzC,gBAAkB/J,EAAMwM,WAAWzC,gBAG7D,MAIX+7B,EAAAjoC,UAAA+qC,oBAAA,SAAoB3E,EAAwB4E,EAA+BC,QAA/B,IAAAD,IAAAA,GAAA,QAA+B,IAAAC,IAAAA,GAAA,OACnEC,EAAc9E,GAAUA,EAAOjkC,OAAS,GAW9C,GATArC,KAAKqrC,wBAAwB/E,GAGzBtmC,KAAKgqC,eAAiBkB,EACxBlrC,KAAK8mC,cAAcsE,GACTprC,KAAKgqC,eACfhqC,KAAK8mC,cAAcsE,GAGjBF,EAAe,KACXI,EAAchF,GAAUA,EAAO/kC,OAASgD,UAE9CvE,KAAKurC,YAAYD,EAAaH,KAIlChD,EAAAjoC,UAAAsrC,gBAAA,SAAgBjqC,GAEd,OAAQvB,KAAkB,cAAIA,KAAKyrC,cAAclqC,GAASvB,KAAKslC,cAAcvzB,KAAKxQ,IAGpF4mC,EAAAjoC,UAAA6qC,QAAA,SAAQxpC,EAAYmqC,GAClB,OAAKnqC,GAAmB,IAAVA,IAAgBmqC,EACrBnqC,EAAMsN,aAAe68B,EAAW78B,aAG1B,OAAVtN,GAAiC,OAAfmqC,GAClBnqC,IAAUgD,WAAamnC,IAAennC,aACzChD,EAAQ,GAAGA,GAGNA,IAAUmqC,IAGnBvD,EAAAjoC,UAAAyrC,eAAA,SAAed,EAAgBxE,EAAgC8D,GAA/D,IAAAzkC,EAAA1F,KACE,GAAI6qC,GAAUxE,GAAWA,EAAQ1lC,OAAQ,KACjCirC,EAAoC,GAE1CvF,EAAQ9sB,QAAO,SAAC+sB,GACVA,EAAOjkC,QAAUqD,EAAKklC,cAAcC,EAAQvE,EAAQ6D,IAAezkC,EAAKkF,UAC1EghC,EAAW1oC,KAAKojC,KAIpBtmC,KAAK6rC,aAAeD,EAAW,GAC/B5rC,KAAKkqC,gBAAgB0B,QAErB5rC,KAAKkqC,mBAIT/B,EAAAjoC,UAAAgqC,gBAAA,SAAgB7D,OACRyF,EAAczF,GAAO5iC,EAAQzD,KAAKqmC,SAElC0F,GAAc1F,GAAWrmC,KAAK+pC,cAAgB,CAAA3pC,EAAA,GAAMJ,KAAKgsC,iBAAoBF,EAE/EC,IACF/rC,KAAKkpC,eAAiB6C,GAEjB/rC,KAAK6rC,cAAgB7rC,KAAKkpC,eAAevoC,SAC5CX,KAAK6rC,aAAe7rC,KAAKkpC,eAAe,MAK9Cf,EAAAjoC,UAAA+rC,cAAA,SAAc1qC,EAAY8kC,EAAgC39B,QAAA,IAAAA,IAAAA,GAAA,OAClDqjC,EAAa,GAAGroC,OAAO2iC,GACzB6F,EAAc,KACdC,GAAQ,EAERzjC,GACFqjC,EAAWrjC,UAGb,IAAK,IAAIlI,EAAI,EAAGA,EAAIurC,EAAWprC,OAAQH,IAAK,KACpC8lC,EAASyF,EAAYvrC,GAI3B,GAHK0rC,IACHA,EAAc5F,GAEZ6F,EACF,OAAO7F,EAELtmC,KAAK+qC,QAAQzE,EAAO/kC,MAAOA,KAC7B4qC,GAAQ,GAGZ,OAAOD,GAGT/D,EAAAjoC,UAAAksC,qBAAA,WACE,IAAK,IAAI5rC,EAAI,EAAGA,EAAIR,KAAKkpC,eAAevoC,OAAQH,IAC9C,GAAIR,KAAKqsC,eAAersC,KAAKkpC,eAAe1oC,GAAIR,KAAK6rC,cACnD,OAAOrrC,EAGX,OAAO,MAGT2nC,EAAAjoC,UAAAmsC,eAAA,SAAeC,EAAWC,GACxB,OAAOC,KAAKC,UAAUH,KAAUE,KAAKC,UAAUF,IAGjDpE,EAAAjoC,UAAAwsC,kBAAA,eACQhB,EAAa1rC,KAAKgnC,gBAElBkF,EAAclsC,KAAKgrC,mBAAmBU,EAAY1rC,KAAKqmC,SAE7D,GAAI6F,GAAeA,EAAY3qC,QAAUvB,KAAK+pC,cAK5C,OAHA/pC,KAAKirC,oBAAoBiB,QAEzBlsC,KAAKipC,oBAAsBiD,EAAY7pC,OAGlC,GAAIrC,KAAK+pC,eAAiB/pC,KAAKgsC,gBAAkBhsC,KAAKgsC,eAAe3pC,QAAUqpC,EAIpF,OAHA1rC,KAAK2sC,wCAEL3sC,KAAKipC,oBAAsBjpC,KAAKgsC,eAAe3pC,OAG1C,GAAIqpC,IAAeQ,EAAa,KAC/BU,KAAmC5sC,KAAKgsC,gBAAkBhsC,KAAKgsC,eAAe3pC,QAAUqpC,GAK9F,OAHA1rC,KAAKirC,oBAAoB,KAAM2B,GAAiC5sC,KAAKgqC,oBAErEhqC,KAAKipC,oBAAsB,MAO/Bd,EAAAjoC,UAAA6gB,WAAA,SAAWxf,GAET,GAAIqO,EAAWrO,KAAWvB,KAAK4K,SAAW5K,KAAKqmC,SAAWrmC,KAAKqmC,QAAQ1lC,OAAQ,KACvE2lC,EAAStmC,KAAK8qC,mBAAmBvpC,EAAOvB,KAAKqmC,SAGnD,OAFArmC,KAAKirC,oBAAoB3E,QACzBtmC,KAAKkqC,kBAKP,GAAI3oC,GAASvB,KAAK4K,QAChB,OAAO5K,KAAK6sC,iBAAiBtrC,GAG1BqO,EAAWrO,KACdvB,KAAKirC,oBAAoB,MAAM,GAAM,GACrCjrC,KAAKkqC,oBAKT/B,EAAAjoC,UAAAkgB,iBAAA,SAAiB9S,GACftN,KAAKyrC,cAAgBn+B,GAGvB66B,EAAAjoC,UAAAmgB,kBAAA,SAAkB/S,GAChBtN,KAAK8sC,eAAiBx/B,GAGxB66B,EAAAjoC,UAAAqgB,0BAAA,SAA0BjT,GACxBtN,KAAKwgB,gBAAkBlT,GAGzB66B,EAAAjoC,UAAA2gB,SAAA,SAASmlB,GAEP,GAAK3B,GAAerkC,KAAKskC,SAAUtkC,KAAKwxB,SAAUwU,EAAgBzkC,OAChE,MAAO,CACL+iC,SAAU,CACRC,OAAO,KAOL4D,EAAAjoC,UAAAygB,cAAV,SAAwBC,GAClB5gB,KAAKwgB,iBACPxgB,KAAKwgB,gBAAgBI,IAIjBunB,EAAAjoC,UAAAmpC,4BAAR,SAAoCz+B,GAC9BA,GACF5K,KAAKqmC,QAAU,GACfrmC,KAAKwpC,6BACLxpC,KAAKsqC,kBAELtqC,KAAK4K,QAAUrG,UACfvE,KAAKqmC,QAAUrmC,KAAK6oC,oBAGtB7oC,KAAKkpC,eAAiB,GACtBlpC,KAAK+oC,eAAgB,GAGfZ,EAAAjoC,UAAAspC,2BAAR,WACMxpC,KAAK+sC,gBACP/sC,KAAK+sC,eAAe7hC,eAIhBi9B,EAAAjoC,UAAAmrC,wBAAR,SAAgC/E,GAC1BA,GACFtmC,KAAK6rC,aAAevF,EACpBtmC,KAAKgsC,eAAiB1F,IAEtBtmC,KAAK6rC,aAAetnC,UACpBvE,KAAKgsC,eAAiBznC,YAIlB4jC,EAAAjoC,UAAAqrC,YAAR,SAAoBhqC,EAAYyrC,QAAA,IAAAA,IAAAA,GAAA,GAC1BzrC,IAAUvB,KAAK+pC,gBAEZiD,GACHhtC,KAAKwrC,gBAAgBjqC,GAGvBvB,KAAK8a,OAAO/I,KAAKxQ,IAGnBvB,KAAK+pC,cAAgBxoC,GAGf4mC,EAAAjoC,UAAAysC,iCAAR,eACQM,EAAYjtC,KAAK8qC,mBAAmB9qC,KAAK+pC,cAAe/pC,KAAKqmC,SAEnE,GAAI4G,GAAaA,EAAU5qC,MACzB,OAAOrC,KAAKirC,oBAAoBgC,mCA9pBnCjpC,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,+BAGND,EAAAA,MAAKC,KAAA,CAAC,+BAGND,EAAAA,MAAKC,KAAA,CAAC,+BAkBND,EAAAA,MAAKC,KAAA,CAAC,0CAmBND,EAAAA,MAAKC,KAAA,CAAC,+CAsBND,EAAAA,MAAKC,KAAA,CAAC,8CAoBND,EAAAA,MAAKC,KAAA,CAAC,qCAwBND,EAAAA,MAAKC,KAAA,CAAC,0CAoBND,EAAAA,MAAKC,KAAA,CAAC,wCAkBND,EAAAA,MAAKC,KAAA,CAAC,qCAkBND,EAAAA,MAAKC,KAAA,CAAC,uCAgBND,EAAAA,MAAKC,KAAA,CAAC,4BAmBND,EAAAA,MAAKC,KAAA,CAAC,2BAMND,EAAAA,MAAKC,KAAA,CAAC,+BA2BND,EAAAA,MAAKC,KAAA,CAAC,+BAIND,EAAAA,MAAKC,KAAA,CAAC,8BAiBND,EAAAA,MAAKC,KAAA,CAAC,uCA0BND,EAAAA,MAAKC,KAAA,CAAC,qCAiCND,EAAAA,MAAKC,KAAA,CAAC,8BAiBN2N,EAAAA,OAAM3N,KAAA,CAAC,mCAGP2N,EAAAA,OAAM3N,KAAA,CAAC,oBAkVVkkC,EArsBA,GClCA+E,GAAA,WAUE,SAAAA,EAAoBzjC,GAAAzJ,KAAAyJ,KAAAA,EALpBzJ,KAAA4pC,WAAqB,QACrB5pC,KAAA2pC,WAAqB,QAiDvB,OA/CEnqC,OAAAsE,eAAIopC,EAAAhtC,UAAA,MAAG,KAAP,WAAoB,OAAOF,KAAK0J,sCAIhCwjC,EAAAhtC,UAAAitC,gBAAA,SAAgB3/B,EAAY68B,GAA5B,IAAA3kC,EAAA1F,KACQuB,EAAQiM,EAAMjM,MAEduI,EAAS,IAAIsjC,EAAAA,WAAW,CAC5BC,WAAY,UAAU9rC,IAGxB,OAAOvB,KAAKyJ,KAAKc,IAAI,GAAGvK,KAAK6J,IAAO,CAACW,aAAc,OAAQV,OAAQA,IAChEwjC,KAAKllC,EAAAA,IAAG,SAAEmlC,GAA0B,OAAA7nC,EAAK8nC,wBAAwBD,EAASloC,WAG/E6nC,EAAAhtC,UAAA2sC,iBAAA,SAAiBtrC,EAAwB8oC,GAAzC,IAAA3kC,EAAA1F,KACE,OAAOA,KAAKyJ,KAAKc,IAAOvK,KAAK6J,IAAG,IAAItI,GAAS+rC,KAAKllC,EAAAA,IAAG,SAAC2B,GAAQ,OAAArE,EAAK+nC,mBAAmB1jC,OAGxFmjC,EAAAhtC,UAAAuqC,iBAAA,SAAiB5gC,EAAa+/B,EAAoBD,GAChD3pC,KAAK0J,KAAOG,EACZ7J,KAAK4pC,WAAaA,EAClB5pC,KAAK2pC,WAAaA,GAGZuD,EAAAhtC,UAAAstC,wBAAR,SAAgCnoC,GAAhC,IAAAK,EAAA1F,KACE,OAAIqF,GAASA,EAAM1E,OAAS,EAEnB0E,EAAM+C,IAAG,SAAC2B,GACf,OAAOrE,EAAK+nC,mBAAmB1jC,KAK5B,IAGDmjC,EAAAhtC,UAAAutC,mBAAR,SAA2B1jC,GACzB,GAAIA,GAAQA,EAAK/J,KAAK2pC,YAKpB,MAAO,CAAEtnC,MAHK0H,EAAK/J,KAAK4pC,YAGRroC,MAFFwI,EAAK/J,KAAK2pC,kCAjD7Bl/B,EAAAA,sDAjBQC,EAAAA,cAwETwiC,EAvDA,GCiDAQ,GAAA,SAAAvpC,GAyCE,SAAAupC,EACSloC,EACAD,EACAilC,EACA/kC,EACCmkB,EACA+jB,EACAC,GAPV,IAAAloC,EASEvB,EAAAvD,KAAAZ,OAAOA,YARA0F,EAAAF,QAAAA,EACAE,EAAAH,QAAAA,EACAG,EAAA8kC,eAAAA,EACA9kC,EAAAD,SAAAA,EACCC,EAAAkkB,eAAAA,EACAlkB,EAAAioC,gBAAAA,EACAjoC,EAAAkoC,UAAAA,EA5BFloC,EAAAmoC,oBAA8B,EAEtCnoC,EAAAooC,UAAoB,sBACpBpoC,EAAAqoC,WAAqB,EAErBroC,EAAAsoC,8BAAwC,EACxCtoC,EAAAuoC,UAAY,EAEZvoC,EAAAwoC,mBAA6B,EA2brBxoC,EAAA4pB,SAAQ,WACd5pB,EAAKyoC,2BApaLzoC,EAAKY,OAASf,EAAQgB,KAAK,IAAIpG,OAAO,QAod1C,OAtfuCiE,EAAAA,EAAAA,GAqCrC5E,OAAAsE,eAAI4pC,EAAAxtC,UAAA,oBAAiB,KAerB,WACE,OAAOF,KAAK6tC,wBAhBd,SAAsBtsC,GAChBA,GACFvB,KAAK6tC,mBAAqBtsC,EAE1BvB,KAAK4pB,eAAekB,gBAEpB9qB,KAAKouC,uBACLpuC,KAAK2wB,wBAEL3wB,KAAK6tC,mBAAqBtsC,EAE1BvB,KAAKuvB,oDAQTme,EAAAxtC,UAAAwG,UAAA,WACiB1G,KAAKsG,OAAOiB,KAAKvH,KAAKqmC,WAEnCrmC,KAAKiqC,sBACL36B,EAAwBtP,KAAKqmC,WAIjCqH,EAAAxtC,UAAA+G,YAAA,WACEjH,KAAKuvB,kBAEDvvB,KAAKquC,oBACPruC,KAAKquC,mBAAmBnjC,cAGtBlL,KAAKiL,iBACPjL,KAAKiL,gBAAgBC,eAIzBwiC,EAAAxtC,UAAAoxB,UAAA,SAAUprB,OACFo2B,EAAMp2B,EAAMiJ,QACZu8B,EAAaxlC,EAAMoB,OAAO/F,MAGhC,GAAIvB,KAAK4K,SAAW0xB,IAAQgS,GAAetG,KAAO0D,EAEhD,OADA1rC,KAAKuuC,wBAAuB,GACrBvuC,KAAK6sC,iBAAiBnB,GAI/B,GAAIpP,IAAQgS,GAAe5G,SAAWpL,IAAQgS,GAAe7G,UAc3D,OAbAvhC,EAAMguB,iBAEFl0B,KAAK+tC,YACHzR,IAAQgS,GAAe5G,QACzB1nC,KAAKwuC,uBAELxuC,KAAKyuC,oBAITzuC,KAAKuuC,wBAAuB,GAC5BvuC,KAAKgpC,cAAchpC,KAAKgqC,eAAgBhqC,KAAKgpC,iBAC7ChpC,KAAKkuC,oBAAoBluC,KAAKgqC,eAAgBhqC,KAAKkuC,mBAKrD,GAAI5R,IAAQgS,GAAetG,KAAO1L,IAAQgS,GAAexG,IAiBvD,OAfIxL,IAAQgS,GAAexG,KAAO9nC,KAAK+tC,YACrC7nC,EAAMguB,iBACNhuB,EAAMiuB,mBAGRn0B,KAAKuuC,wBAAuB,GAC5BvuC,KAAK0sC,yBAEA1sC,KAAK4K,UAER5K,KAAK6rC,aAAe7rC,KAAKgqC,gBAAkBhqC,KAAK+pC,cAAgBxlC,UAAYvE,KAAK6rC,aAEjF7rC,KAAKkqC,oBAOT,GAAI5N,IAAQgS,GAAezG,OAAS7nC,KAAK6rC,cAAgB7rC,KAAK+tC,UAAW,KACjE7C,EAAiBlrC,KAAK6rC,aAAatqC,QAAUvB,KAAK+pC,eAAmB2B,IAAe1rC,KAAK6rC,aAAaxpC,MAQ5G,OANArC,KAAKuuC,wBAAuB,GAE5BvuC,KAAKirC,oBAAoBjrC,KAAK6rC,aAAcX,GAC5ClrC,KAAKgpC,aAAc,OAEnBhpC,KAAKkqC,kBAIH5N,IAAQgS,GAAezG,OACzB7nC,KAAKuuC,wBAAuB,IAIhCb,EAAAxtC,UAAAwuC,QAAA,SAAQxoC,OACAo2B,EAAMp2B,EAAMiJ,SAAWjJ,EAAMkJ,MAC7Bs8B,EAAaxlC,EAAMoB,OAAO/F,MAIhC,GAFoB+6B,IAAQgS,GAAe5G,SAAWpL,IAAQgS,GAAe7G,WAAanL,IAAQgS,GAAezG,MAEjG,CAEd,GAAI6D,EACG1rC,KAAK4K,SAAW5K,KAAKipC,sBAAwByC,IAChD1rC,KAAKkuC,mBAAoB,EACzBluC,KAAKgpC,aAAc,EACnBhpC,KAAK2rC,eAAeD,EAAY1rC,KAAKqmC,QAASrmC,KAAKmqC,iBAGhD,KAGCwE,EAA2B3uC,KAAK4K,SAAW5K,KAAK+pC,eAAiB/pC,KAAKgsC,eAAe3pC,QAAUrC,KAAKipC,oBAE1GjpC,KAAKirC,oBAAoB,MAEpBjrC,KAAK4K,QAEC+jC,GACT3uC,KAAKkqC,gBAAezmC,EAAKzD,KAAK4oC,eAF9B5oC,KAAKkqC,kBAKPlqC,KAAKgpC,aAAc,EAIjBhpC,KAAKipC,sBAAwByC,IAC/B1rC,KAAK4pB,eAAekB,gBAEpB9qB,KAAKuuC,wBAAuB,IAKhCvuC,KAAKipC,oBAAsByC,GAG7BgC,EAAAxtC,UAAAupC,oBAAA,WAAA,IAAA/jC,EAAA1F,KACE,GAAIA,KAAK4K,QAAS,KACVgkC,EAAkBC,EAAAA,UAAU7uC,KAAK8uC,aAAaloC,cAAe,SACxC0mC,KACC1zB,EAAAA,OAAM,SAAElY,GAAW,OAAAgE,EAAKqpC,yBAAyBrtC,EAAEyN,WACnD/G,EAAAA,IAAG,SAAE1G,GAAW,OAAAA,EAAEstC,cAAcztC,QAChC0tC,EAAAA,uBACAC,EAAAA,IAAG,WACDxpC,EAAKwoC,mBAAoB,IAE3BiB,EAAAA,aAAanvC,KAAKmvC,eAG9CnvC,KAAK+sC,eAAiB6B,EAAgBtjC,UAAS,SAAC/J,IAC1CA,EAAMZ,QAAU+E,EAAK0pC,kBAAoB7tC,IAC3CmE,EAAK2pC,mBAAmB9tC,OAMhCmsC,EAAAxtC,UAAAmvC,mBAAA,SAAmB9tC,GACZvB,KAAKguC,8BAAkChuC,KAAKgsC,gBAAkBzqC,IAAUvB,KAAKgsC,eAAe3pC,OAC/FrC,KAAKsvC,YAAY/tC,IAIrBmsC,EAAAxtC,UAAAovC,YAAA,SAAY/tC,GAAZ,IAAAmE,EAAA1F,KACEA,KAAKuuC,wBAAuB,GAC5BvuC,KAAKuvC,mBAAoB,MAEnB/hC,EAAQ,CAAE6e,SAAUrsB,KAAK4pC,WAAYroC,MAAKA,GAEhDvB,KAAKquC,mBAAqBruC,KAAK4K,QAAQuiC,gBAAgB3/B,EAAOxN,KAAKqqC,cAChE/+B,UAAS,SAACjG,GAAS,OAAAK,EAAK8pC,wBAAwBjuC,EAAO8D,MAG5DqoC,EAAAxtC,UAAAsvC,wBAAA,SAAwBjuC,EAAO8D,GAC7BrF,KAAKkuC,mBAAoB,EACzBluC,KAAKuvC,mBAAoB,EACzBvvC,KAAKqmC,QAAUhhC,EAEfrF,KAAK2rC,eAAepqC,EAAO8D,EAAOrF,KAAKmqC,YAEvCnqC,KAAK4pB,eAAekB,gBAEpB9qB,KAAKuuC,wBAAuB,GAExBvuC,KAAK+oC,gBACP/oC,KAAK+oC,eAAiB/oC,KAAK+oC,cAE3B/oC,KAAK4oC,aAAe5oC,KAAKqmC,UAI7BqH,EAAAxtC,UAAA2sC,iBAAA,SAAiBtrC,GAAjB,IAAAmE,EAAA1F,KACOA,KAAK+pC,gBACR/pC,KAAKguC,8BAA+B,EAEpChuC,KAAKiL,gBAAkBjL,KAAK4K,QAAQiiC,iBAAiBtrC,EAAOvB,KAAKqqC,cAC9D/+B,UAAS,SAACvB,GAAQ,OAAArE,EAAK+pC,4BAA4B1lC,OAI1D2jC,EAAAxtC,UAAAuvC,4BAAA,SAA4B1lC,GAA5B,IAAArE,EAAA1F,KACM+J,GACF/J,KAAKqmC,QAAU,CAACt8B,GAChB/J,KAAK0vC,cAAc3lC,IAEnB/J,KAAKirC,oBAAoB,MAG3BpiC,WAAU,WAASnD,EAAKsoC,8BAA+B,GAAUhuC,KAAKmvC,eAGxEzB,EAAAxtC,UAAAsuC,qBAAA,eACQmB,EAAmB3vC,KAAK6rC,cAAgB7rC,KAAK6rC,aAAatqC,MAEhE,GAAIouC,EAAkB,KACdC,EAAa5vC,KAAKisC,cAAc0D,EAAkB3vC,KAAKkpC,gBAAgB,GAE7ElpC,KAAKirC,oBAAoB2E,EAAYA,GAAcA,EAAWruC,QAAUouC,IAAqB3vC,KAAKgqC,oBAC7F,GAAIhqC,KAAKkpC,eAAevoC,OAAQ,KAC/BkvC,EAAgB7vC,KAAKkpC,eAAelpC,KAAKkpC,eAAevoC,OAAS,GAEvEX,KAAKirC,oBAAoB4E,EAAeA,EAActuC,QAAUouC,IAAqB3vC,KAAKgqC,iBAI9F0D,EAAAxtC,UAAAuuC,iBAAA,eACQkB,EAAmB3vC,KAAK6rC,cAAgB7rC,KAAK6rC,aAAatqC,MAEhE,GAAIouC,EAAkB,KACdC,EAAa5vC,KAAKisC,cAAc0D,EAAkB3vC,KAAKkpC,gBAE7DlpC,KAAKirC,oBAAoB2E,EAAYA,GAAcA,EAAWruC,QAAUouC,IAAqB3vC,KAAKgqC,oBAC7F,GAAIhqC,KAAKkpC,eAAevoC,OAAQ,KAC/BqU,EAAQhV,KAAKgqC,cAAgB,EAAI,EAEjC6F,EAAgB7vC,KAAKkpC,eAAel0B,GAE1ChV,KAAKirC,oBAAoB4E,EAAeA,EAActuC,QAAUouC,IAAqB3vC,KAAKgqC,iBAI9F0D,EAAAxtC,UAAA4vC,sBAAA,WACM9vC,KAAKwxB,WAILxxB,KAAK4K,UAAY5K,KAAK+vC,oBACxB/vC,KAAKgwC,0BAGPhwC,KAAKuuC,wBAAwBvuC,KAAK+tC,aAGpCL,EAAAxtC,UAAA8vC,wBAAA,WACMhwC,KAAK+oC,gBAAkB/oC,KAAK+pC,eAC9B/pC,KAAKsvC,YAAY,KAIrB5B,EAAAxtC,UAAAquC,uBAAA,SAAuB0B,GACrBA,EAASjwC,KAAKgQ,OAAShQ,KAAKosB,SAG9BshB,EAAAxtC,UAAAwvC,cAAA,SAAcpJ,OACNoF,EAAa1rC,KAAKgnC,gBAClBkE,EAAiB5E,EAAO/kC,QAAUvB,KAAK+pC,kBAAqB/pC,KAAK6rC,cAAgBH,IAAe1rC,KAAK6rC,aAAaxpC,OAExHrC,KAAKirC,oBAAoB3E,EAAQ4E,GACjClrC,KAAKuuC,wBAAuB,GAC5BvuC,KAAKkqC,gBAAgB,CAAA9pC,EAAA,GAAMJ,KAAK6rC,gBAEhC7rC,KAAKipC,oBAAsBjpC,KAAK6rC,aAAaxpC,OAG/CqrC,EAAAxtC,UAAAgwC,SAAA,SAASl7B,OACDi5B,EAAaj5B,GAAS,EAAK,EAAa,GAARA,EAAc,GAEpDhV,KAAKmwC,aAAalC,IAGpBP,EAAAxtC,UAAA8mC,cAAA,WACE,OAAOhnC,KAAK8uC,aAAaloC,cAAcrF,OAGzCmsC,EAAAxtC,UAAA4mC,cAAA,SAAcvlC,GACZvB,KAAK8uC,aAAaloC,cAAcrF,MAAQA,GAG1CmsC,EAAAxtC,UAAAkwC,mBAAA,SAAmBlqC,IACblG,KAAK+tC,WACJ/tC,KAAK8uC,aAAaloC,cAAcS,SAASnB,EAAMoB,SAC/CtH,KAAKqwC,YAAYzpC,cAAcS,SAASnB,EAAMoB,SAC7CtH,KAAKswC,gBAAmBtwC,KAAKswC,eAAe1pC,cAAcS,SAASnB,EAAMoB,SAWzEtH,KAAK4K,SAAY5K,KAAKgnC,iBAAoBhnC,KAAK+oC,eACjD/oC,KAAKsvC,YAAY,KAVnBtvC,KAAKuuC,wBAAuB,GAE5BvuC,KAAK0sC,oBAGL1sC,KAAK6rC,aAAe7rC,KAAKgqC,gBAAkBhqC,KAAK+pC,cAAgBxlC,UAAYvE,KAAK6rC,aAEjF7rC,KAAKkqC,oBAQTwD,EAAAxtC,UAAAqwC,kBAAA,SAAkBluC,OACZ8yB,EAAS9yB,EAEb,GAAIrC,KAAKgpC,aACNhpC,KAAK4K,SAAW5K,KAAKgnC,kBAAoBhnC,KAAKqsC,eAAersC,KAAK4oC,aAAc5oC,KAAKkpC,iBAAmBlpC,KAAKkuC,kBAAoB,KAE5HsC,EAAaxwC,KAAKgnC,gBAAgBn4B,WAAWzC,cAC7CqkC,EAAiBpuC,EAAM+J,cAEvBskC,EAAc,0CAOpB,OAAQ1wC,KAAKmqC,YACX,KAAKxB,GAAmB74B,WACxB,KAAK64B,GAAmBthC,SAMtB8tB,EALc9yB,EAAMgK,UAAU,EAAGokC,EAAez8B,QAAQw8B,IAKjCE,EAJRruC,EAAMgK,UAAUokC,EAAez8B,QAAQw8B,GACpDC,EAAez8B,QAAQw8B,GAAcA,EAAW7vC,QAXjC,UAYL0B,EAAMgK,UAAUokC,EAAez8B,QAAQw8B,GAAcA,EAAW7vC,QAG5E,MACF,KAAKgoC,GAAmBV,SAItB9S,EAHc9yB,EAAMgK,UAAU,EAAGokC,EAAepb,YAAYmb,IAGrCE,EAFRruC,EAAMgK,UAAUokC,EAAepb,YAAYmb,IAlBzC,WAyBvB,OAAOxwC,KAAK2wC,SAASxb,IAGvBuY,EAAAxtC,UAAAywC,SAAA,SAASpvC,GACP,OAAOvB,KAAK4tC,UAAUgD,wBAAwBrvC,IAGhDmsC,EAAAxtC,UAAA6uC,yBAAA,SAAyB5/B,GACvB,OAAoB,IAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GACY,KAAZA,GAGVu+B,EAAAxtC,UAAA2wC,cAAA,SAActvC,GACRvB,KAAK4K,UAAY5K,KAAK6rC,cAAgBtqC,EAAMZ,QAAUX,KAAKovC,iBAC7DpvC,KAAKqvC,mBAAmB9tC,IAIpBmsC,EAAAxtC,UAAAiuC,wBAAR,WACEnuC,KAAK2tC,gBAAgBr7B,eAzegB,WA4e/Bo7B,EAAAxtC,UAAAksB,MAAR,WACEpsB,KAAK+tC,WAAY,EAEjB/tC,KAAK4pB,eAAekB,gBAEpB9qB,KAAK8tC,UAAY,sBAEjB9tC,KAAKuvB,kBAELvvB,KAAKgpC,aAAc,GAGb0E,EAAAxtC,UAAAywB,oBAAR,WAAA,IAAAjrB,EAAA1F,KACEA,KAAKuvB,kBAELvvB,KAAK8I,iBAAmB9I,KAAKyF,SAASsD,OAAO,WAAY,QAAO,SAAG7C,GACjER,EAAK0qC,mBAAmBlqC,KAG1BlG,KAAK8wC,oBAAsB9wC,KAAKyF,SAASsD,OAAO,SAAU,SAAQ,WAEhEF,WAAU,WAAO,OAAAnD,EAAKyoC,2BAA2B,OAGnDp/B,OAAO0I,iBAAiB,SAAUzX,KAAKsvB,UAAU,IAO3Coe,EAAAxtC,UAAA8P,KAAR,WACEhQ,KAAK+tC,WAAY,EAEjB/tC,KAAK4pB,eAAekB,gBAEpB9qB,KAAK8tC,UAAY,oBAEjB9tC,KAAK2wB,sBAEL3wB,KAAK8uC,aAAaloC,cAAcotB,QAChCh0B,KAAKkwC,SAASlwC,KAAKosC,wBAEnBpsC,KAAKouC,wBAGCV,EAAAxtC,UAAAqvB,gBAAR,WACMvvB,KAAK8I,kBACP9I,KAAK8I,mBAGH9I,KAAK8wC,qBACP9wC,KAAK8wC,sBAGP/hC,OAAOoJ,oBAAoB,SAAUnY,KAAKsvB,UAAU,IAG9Coe,EAAAxtC,UAAAkuC,qBAAR,WACEpuC,KAAK2tC,gBAAgB76B,YACnB9S,KAAK+wC,iBAAiBnqC,cAziBI,EA2iB1B5G,KAAK8uC,aACL,CAAC,MAAO,WACR,GAGF9uC,KAAKmuC,2BAGCT,EAAAxtC,UAAAiwC,aAAR,SAAqBlC,GACfjuC,KAAKswC,iBACPtwC,KAAKswC,eAAe1pC,cAAcqnC,UAAYA,wBApgBnDxpC,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,YACVC,SAAA,oxEACA4G,UAAW,CACT2hC,GACAh7B,GACA,CACEmQ,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAkrB,IAC9BjrB,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAAkrB,IAC9BjrB,OAAO,iDAhFmCvZ,EAAAA,kBAC9CD,EAAAA,uBAaOikC,UAbqB/jC,EAAAA,iBADrBkiB,EAAAA,yBASAnZ,UAPA8+B,EAAAA,0DAoGN5nC,EAAAA,UAASnF,KAAA,CAAC,mBAAoB,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,4BAC1DF,EAAAA,UAASnF,KAAA,CAAC,iBAAkB,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,yBACxDF,EAAAA,UAASnF,KAAA,CAAC,YAAa,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,0BACnDF,EAAAA,UAASnF,KAAA,CAAC,eAAgB,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,OAiezDokC,EAxgBA,CAkBuCvF,kBCjDrC,SAAA8I,EAAYC,EAAcC,GA7B1BnxC,KAAAkxC,KAAe,GACflxC,KAAAmxC,aAAuB,EAEvBnxC,KAAAoxC,gBAA0B,EAC1BpxC,KAAAqxC,cAAwB,EAExBrxC,KAAAsxC,QAAkB,GAwBhBtxC,KAAKkxC,KAAOA,EACZlxC,KAAKmxC,YAAcA,EACnBnxC,KAAKsxC,QAAUtxC,KAAKuxC,iBAAiBL,GA8czC,OAveE1xC,OAAAsE,eAAImtC,EAAA/wC,UAAA,aAAU,KAAd,WACE,OAAOF,KAAKsxC,yCAId9xC,OAAAsE,eAAImtC,EAAA/wC,UAAA,kBAAe,KAAnB,WACE,OAAOF,KAAKwxC,8CAEdhyC,OAAAsE,eAAImtC,EAAA/wC,UAAA,kBAAe,KAAnB,SAAoBqB,GAClBvB,KAAKwxC,aAAejwC,mCAItB/B,OAAAsE,eAAImtC,EAAA/wC,UAAA,kBAAe,KAAnB,WACE,OAAOF,KAAKyxC,8CAEdjyC,OAAAsE,eAAImtC,EAAA/wC,UAAA,kBAAe,KAAnB,SAAoBqB,GAClBvB,KAAKyxC,aAAelwC,mCAWtB0vC,EAAA/wC,UAAAwxC,MAAA,SAAMC,GACJ,GAAI3xC,KAAKkxC,KAAM,KACP3vC,EAAQowC,EAAOrqC,OAAO/F,MAS5B,OAPuB,KAAnBowC,EAAOxiC,SAAqC,KAAnBwiC,EAAOxiC,UAClCwiC,EAAOrqC,OAAO/F,MAAQvB,KAAK4xC,kBAAkBrwC,GAC7CvB,KAAK6xC,eAAeF,IAGtBA,EAAOzd,iBAECyd,EAAOxiC,SACb,KAAK,GACCnP,KAAKoxC,gBAAkB,GACzBpxC,KAAKoxC,kBAEPpxC,KAAK8xC,uBAAuBH,GAC5B3xC,KAAK+xC,kBAAkBJ,GACvB,MAEF,KAAK,GACC3xC,KAAKoxC,gBAAkB7vC,EAAMsN,WAAWlO,QAC1CX,KAAKoxC,kBAEPpxC,KAAK8xC,uBAAuBH,GAC5B3xC,KAAK+xC,kBAAkBJ,GACvB,MAEF,KAAK,GACH3xC,KAAKqxC,cAAgB9vC,EAAMsN,WAAWlO,OAClCgxC,EAAOK,SACThyC,KAAKiyC,aAAaN,IAElB3xC,KAAKoxC,gBAAkBpxC,KAAKqxC,cAC5BrxC,KAAKiyC,aAAaN,IAEpB,MAEF,KAAK,GACCA,EAAOK,UACThyC,KAAKqxC,cAAgBrxC,KAAKoxC,gBAC1BpxC,KAAKoxC,gBAAkB,EACvBpxC,KAAKiyC,aAAaN,KAElB3xC,KAAKoxC,gBAAkB,EACvBpxC,KAAKqxC,cAAgB,EACrBrxC,KAAKiyC,aAAaN,OAO5BV,EAAA/wC,UAAA4xC,uBAAA,SAAuBH,GAChBA,EAAOK,WACVhyC,KAAKqxC,cAAgBrxC,KAAKoxC,kBAI9BH,EAAA/wC,UAAA6xC,kBAAA,SAAkBJ,GACZ3xC,KAAKoxC,gBAAkBpxC,KAAKqxC,cAC9BM,EAAOrqC,OAAOyqC,kBAAkB/xC,KAAKqxC,cAAerxC,KAAKoxC,iBAEzDO,EAAOrqC,OAAOyqC,kBAAkB/xC,KAAKoxC,gBAAiBpxC,KAAKqxC,gBAI/DJ,EAAA/wC,UAAAgyC,QAAA,SAAQP,GACN,GAAI3xC,KAAKkxC,KAAM,KACT3vC,EAAgBowC,EAAOrqC,OAAO/F,MAClC,GAAuB,IAAnBowC,EAAOxiC,QACT,OASF,GANKwiC,EAAOQ,SAAYR,EAAOS,SAC7BT,EAAOzd,iBAKLyd,EAAOQ,SAAWR,EAAOS,SAA+B,KAAnBT,EAAOxiC,SAC7CwiC,EAAOxiC,SAAW,IAAMwiC,EAAOxiC,SAAW,IAA0B,KAAnBwiC,EAAOxiC,SAAqC,IAAnBwiC,EAAOxiC,QAClF,OAIF,GAAInP,KAAKqyC,WAAWV,EAAOxiC,SAMzB,OAL2B,OAAvBnP,KAAKqxC,gBACPrxC,KAAKqxC,cAAgBrxC,KAAKoxC,iBAE5BpxC,KAAKsyC,gBAAgBtyC,KAAKoxC,gBAAiBpxC,KAAKqxC,eAExCM,EAAOxiC,SACb,KAAK,EACHnP,KAAKuyC,YAAYZ,GACb3xC,KAAKoxC,gBAAkB,IACzBpxC,KAAKoxC,gBAAkB,EACvBpxC,KAAKiyC,aAAaN,IAEhB3xC,KAAKoxC,kBAAoBpxC,KAAKqxC,eAChCrxC,KAAKwyC,gBAAgBb,GAAS,GACD,IAAzB3xC,KAAKoxC,kBACP7vC,EAAQA,EAAMiH,MAAM,EAAGxI,KAAKoxC,gBAAkB,GAAK7vC,EAAMiH,MAAMxI,KAAKqxC,eACpE9vC,EAAQvB,KAAK4xC,kBAAkBrwC,GAC/BowC,EAAOrqC,OAAO/F,MAAQA,EACtBvB,KAAKyyC,eAAed,GAAU,GAC9B3xC,KAAKwyC,gBAAgBb,GAAS,GAC9B3xC,KAAKiyC,aAAaN,GAClB3xC,KAAK6xC,eAAeF,KAGtB3xC,KAAK0yC,oBAAoBnxC,EAAOowC,GAAQ,GAE1C3xC,KAAKiyC,aAAaN,GAClB,MAEF,KAAK,GACH3xC,KAAKuyC,YAAYZ,GACb3xC,KAAKoxC,kBAAoBpxC,KAAKqxC,eAChCrxC,KAAK2yC,eAAehB,EAAQ,GAC5BpwC,EAAQA,EAAMiH,MAAM,EAAGxI,KAAKoxC,iBAAmB7vC,EAAMiH,MAAMxI,KAAKqxC,cAAgB,GAChF9vC,EAAQvB,KAAK4xC,kBAAkBrwC,GAC/BowC,EAAOrqC,OAAO/F,MAAQA,EACtBvB,KAAKiyC,aAAaN,GAClB3xC,KAAK6xC,eAAeF,IAEpB3xC,KAAK0yC,oBAAoBnxC,EAAOowC,GAAQ,GAE1C3xC,KAAKiyC,aAAaN,GAClB,MAEF,QACEpwC,EAAQA,EAAMiH,MAAM,EAAGxI,KAAKoxC,iBAAmBO,EAAOrV,IAAM/6B,EAAMiH,MAAMxI,KAAKqxC,eAC7E9vC,EAAQvB,KAAK4xC,kBAAkBrwC,GAC/BowC,EAAOrqC,OAAO/F,MAAQA,EACtBvB,KAAKyyC,eAAed,EAAQ,GAC5B3xC,KAAKwyC,gBAAgBb,EAAQ,GAC7B3xC,KAAKiyC,aAAaN,GAClB3xC,KAAK6xC,eAAeF,GACpB3xC,KAAKiyC,aAAaN,MAM5BV,EAAA/wC,UAAAwyC,oBAAA,SAAoBnxC,EAAeowC,EAAaiB,GAC9CrxC,EAAQA,EAAMiH,MAAM,EAAGxI,KAAKoxC,iBAAmB7vC,EAAMiH,MAAMxI,KAAKqxC,eAChE9vC,EAAQvB,KAAK4xC,kBAAkBrwC,GAC/BowC,EAAOrqC,OAAO/F,MAAQA,EAElBqxC,GACF5yC,KAAKwyC,gBAAgBb,GAAS,GAGhC3xC,KAAKiyC,aAAaN,GAClB3xC,KAAK6xC,eAAeF,IAItBV,EAAA/wC,UAAAwR,MAAA,SAAMigC,GACJ3xC,KAAKoxC,gBAAkBO,EAAOrqC,OAAOurC,eACrC7yC,KAAKqxC,cAAgBM,EAAOrqC,OAAOwrC,cAGrC7B,EAAA/wC,UAAA6yC,KAAA,SAAKpB,GAEH,GAAI3xC,KAAKkxC,KAAM,KAET3vC,EAAQowC,EAAOrqC,OAAO/F,MAC1BA,EAAQvB,KAAK4xC,kBAAkBrwC,GAC/BowC,EAAOrqC,OAAO/F,MAAQA,IAI1B0vC,EAAA/wC,UAAAoyC,gBAAA,SAAgBlB,EAAyBC,GACvC,GAAID,EAAkBC,EAAe,KAE/B2B,EACJA,EAAe5B,EACfpxC,KAAKoxC,gBAAkBC,EACvBrxC,KAAKqxC,cAAgB2B,IAKzB/B,EAAA/wC,UAAA2xC,eAAA,SAAeF,GACb3xC,KAAKoxC,gBAAkBO,EAAOrqC,OAAOurC,eACrC7yC,KAAKqxC,cAAgBrxC,KAAKoxC,iBAI5BH,EAAA/wC,UAAA+xC,aAAA,SAAaN,GACXA,EAAOrqC,OAAOyqC,kBAAkB/xC,KAAKoxC,gBAAiBpxC,KAAKqxC,gBAI7DJ,EAAA/wC,UAAAuyC,eAAA,SAAed,EAAapwC,GAC1BvB,KAAKoxC,gBAAkBpxC,KAAKoxC,gBAAkB7vC,EAC9CvB,KAAKqxC,cAAgBrxC,KAAKqxC,cAAgB9vC,EAC1CvB,KAAKiyC,aAAaN,IAGpBV,EAAA/wC,UAAAqyC,YAAA,SAAYZ,GACV3xC,KAAKoxC,gBAAkBO,EAAOrqC,OAAOurC,eACrC7yC,KAAKqxC,cAAgBM,EAAOrqC,OAAOwrC,aACnC9yC,KAAKiyC,aAAaN,IAKpBV,EAAA/wC,UAAA0xC,kBAAA,SAAkBrwC,GAEhB,IAAKA,EAGH,OAFAvB,KAAKwxC,aAAe,GACpBxxC,KAAKyxC,aAAe,GACb,GAWT,QATIwB,EACAC,EAAUlzC,KAAKkxC,KAIbiC,EAAuB,GACzBC,EAAY,EAGTpzC,KAAKqzC,kBAAkBH,IAC5BC,EAASjwC,KAAKgwC,GACdA,EAAUlzC,KAAKszC,sBAAsBJ,GAUvC,IARAC,EAASjwC,KAAKgwC,GAGdC,EAASzqC,UAGT1I,KAAKuzC,gBAAiB,GAEdvzC,KAAKuzC,iBAGXvzC,KAAKuzC,gBAAiB,EAGjBJ,EAASC,KAKdH,EAAiBjzC,KAAKy1B,YAAYl0B,EAAO4xC,EAASC,IAClDA,IAGF,OAAOH,GAIThC,EAAA/wC,UAAAu1B,YAAA,SAAYl0B,EAAe2vC,OAMnBsC,GAHNtC,EAAOA,EAAK/gC,QAAQ,MAAO,KAGRA,QAAQnQ,KAAKyzC,gBAAiB,KAG7CC,EAAoB,EAGpBT,EAAyB,GAG7B1xC,EAAQvB,KAAK2zC,sBAAsBpyC,GAGnC,IAAK,IAAIf,EAAI,EAAGA,EAAIe,EAAMZ,OAAQH,IAAK,KAC/BozC,EAAYryC,EAAMf,GAIxB,IAAKgzC,EAAME,GAAY,CACrB1zC,KAAKuzC,gBAAiB,EACtB,MAIF,KAAOvzC,KAAK6zC,sBAAsBL,EAAME,KAAeF,EAAME,IAC3DT,GAAkBO,EAAME,GACxBA,IAIF,IAAI1zC,KAAK8zC,eAAeF,EAAW1C,EAAKwC,IAKtC,MAJAT,GAAkBW,EAClBF,IAcJ,OAPI1zC,KAAKmxC,aACPnxC,KAAKwxC,aAAeyB,EACpBjzC,KAAKyxC,aAAewB,IAEpBjzC,KAAKwxC,aAAeyB,EACpBjzC,KAAKyxC,aAAezxC,KAAK2zC,sBAAsBV,IAE1CA,GAGThC,EAAA/wC,UAAAsyC,gBAAA,SAAgBb,EAAap/B,GACvBvS,KAAK6zC,sBAAsBlC,EAAOrqC,OAAO/F,MAAMsN,WAAWqC,OAAOlR,KAAKoxC,gBAAkB,MAC1FpxC,KAAKyyC,eAAed,EAAQp/B,GAC5BvS,KAAKwyC,gBAAgBb,EAAQp/B,KAKjC0+B,EAAA/wC,UAAAyyC,eAAA,SAAehB,EAAap/B,GACtBvS,KAAK6zC,sBAAsBlC,EAAOrqC,OAAO/F,MAAMsN,WAAWqC,OAAOlR,KAAKoxC,oBACxEpxC,KAAKyyC,eAAed,EAAQp/B,GAC5BvS,KAAK2yC,eAAehB,EAAQp/B,KAKhC0+B,EAAA/wC,UAAAozC,sBAAA,SAAsBpC,GAEpB,QADI1wC,EAAI,EACDA,GAAK,GAAG,CACb,GAAI0wC,EAAKl9B,QAAQxT,EAAI,MAAQ,EAC3B,OAAO0wC,EAAK/gC,QAAQ3P,EAAI,IAAK,IAE/BA,IAEF,OAAO0wC,GAITD,EAAA/wC,UAAA2zC,sBAAA,SAAsBvX,GACpB,OAAOt8B,KAAK+zC,UAAUzX,EAAKt8B,KAAKg0C,2BAIlC/C,EAAA/wC,UAAA8zC,uBAAA,WACE,MAAO,mBAIT/C,EAAA/wC,UAAAuzC,cAAA,WACE,MAAO,gBAITxC,EAAA/wC,UAAAmyC,WAAA,SAAWljC,GACT,OAAOnP,KAAKi0C,eAAe9kC,IAK7B8hC,EAAA/wC,UAAA+zC,eAAA,SAAe9kC,GACb,OACGA,GAAW,IAAMA,GAAW,IAC5BA,GAAW,IAAMA,GAAW,IAC5BA,GAAW,IAAMA,GAAW,KAChB,IAAZA,GAA8B,IAAZA,GACN,KAAZA,GAKL8hC,EAAA/wC,UAAA4zC,eAAA,SAAexX,EAAU4X,GACvB,OAAOl0C,KAAK+zC,UAAUzX,EAAKt8B,KAAKm0C,YAAYD,KAI9CjD,EAAA/wC,UAAA6zC,UAAA,SAAUzX,EAAU8X,GAClB,OAAOA,EAAM5nC,KAAK8vB,IAKpB2U,EAAA/wC,UAAAyzC,sBAAA,SAAsBpyC,GACpB,OAAOA,EAAM4O,QAAQnQ,KAAKg0C,yBAA0B,KAItD/C,EAAA/wC,UAAAmzC,kBAAA,SAAkBnC,GAChB,OAAOA,EAAKjiC,MAAM,UAIpBgiC,EAAA/wC,UAAAi0C,YAAA,SAAYE,OACND,EAAQ,IACZ,OAAQC,GACN,IAAK,IAAKD,EAAQ,MACR,MACV,IAAK,IAAKA,EAAQ,QACR,MACV,IAAK,IAAKA,EAAQ,QACR,MACV,IAAK,IAAKA,EAAQ,QACR,MACV,IAAK,IAAKA,EAAQ,QACR,MACV,IAAK,IAAKA,EAAQ,QACR,MACV,IAAK,IAAKA,EAAQ,QACR,MACV,IAAK,IAAKA,EAAQ,QACR,MACV,IAAK,IAAKA,EAAQ,QACR,MACV,IAAK,IAAKA,EAAQ,QACR,MACV,IAAK,IAAKA,EAAQ,KACR,MACV,IAAK,IAAKA,EAAQ,WACR,MACV,IAAK,IAAKA,EAAQ,cAGpB,OAAOA,GAGTnD,EAAA/wC,UAAAqxC,iBAAA,SAAiBL,GACf,GAAIA,EAAM,CA2BR,OAzBIlxC,KAAKmxC,YACGD,EAAK/gC,QAAQ,MAAO,QACZA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,KAAM,KACdA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,KAAM,OACdA,QAAQ,YAAa,OACrBA,QAAQ,MAAO,OAEvB+gC,EAAK/gC,QAAQ,MAAO,IACZA,QAAQ,MAAO,IACfA,QAAQ,MAAO,IACfA,QAAQ,KAAM,IACdA,QAAQ,MAAO,IACfA,QAAQ,MAAO,IACfA,QAAQ,MAAO,IACfA,QAAQ,MAAO,IACfA,QAAQ,KAAM,IACdA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OAInC,OAAO,MAIb8gC,KC5eMqD,GAAqC,aA2C3CC,GAAA,WA4ME,SAAAA,IA1MQv0C,KAAAw0C,QAAmBF,GAGnBt0C,KAAAy0C,aAAwB,GAGtBz0C,KAAA00C,YAAa,EACb10C,KAAA01B,KAAe,kBACf11B,KAAA20C,eAAyB,EAEzB30C,KAAA40C,cAAqB,KACrB50C,KAAA60C,eAAsB,KAqChC70C,KAAAwxB,UAAqB,EAQrBxxB,KAAAsnC,UAAqB,EAMrBtnC,KAAAskC,UAAqB,EAQrBtkC,KAAAg0B,OAAkB,EAMlBh0B,KAAAqnC,OAAkB,EAUQrnC,KAAA80C,aAAwB,GA+GhC90C,KAAA+0C,OAA6B,IAAIpjC,EAAAA,aAG/B3R,KAAAg1C,SAA+B,IAAIrjC,EAAAA,aAwHzD,OAxSEnS,OAAAsE,eAA4BywC,EAAAr0C,UAAA,cAAW,KAIvC,WACE,OAAOF,KAAKy0C,kBALd,SAAwCtL,GACtCnpC,KAAKy0C,aAAevnC,EAASi8B,EAAa,UAAYA,EAAc,oCAwBtE3pC,OAAAsE,eAAyBywC,EAAAr0C,UAAA,cAAW,KAApC,SAAqCsxB,GACnCxxB,KAAKwxB,SAAwB,KAAbA,GAAyB/kB,EAAiB+kB,GAE1DxxB,KAAK2gB,cAAcrS,EAAyBtO,KAAK4N,KAAM5N,KAAK01B,wCAK9Dl2B,OAAAsE,eAAyBywC,EAAAr0C,UAAA,cAAW,KAApC,SAAqConC,GACnCtnC,KAAKsnC,SAAwB,KAAbA,GAAyB76B,EAAiB66B,oCAK5D9nC,OAAAsE,eAAyBywC,EAAAr0C,UAAA,cAAW,KAApC,SAAqCokC,GACnCtkC,KAAKskC,SAAwB,KAAbA,GAAyB73B,EAAiB63B,GAE1DtkC,KAAK2gB,cAAcrS,EAAyBtO,KAAK4N,KAAM5N,KAAK01B,wCAK9Dl2B,OAAAsE,eAAsBywC,EAAAr0C,UAAA,WAAQ,KAA9B,SAA+B8zB,GAC7Bh0B,KAAKg0B,MAAkB,KAAVA,GAAsBvnB,EAAiBunB,oCAKtDx0B,OAAAsE,eAAsBywC,EAAAr0C,UAAA,WAAQ,KAA9B,SAA+BmnC,GAC7BrnC,KAAKqnC,MAAkB,KAAVA,GAAsB56B,EAAiB46B,oCAiBtD7nC,OAAAsE,eAAyBywC,EAAAr0C,UAAA,UAAO,KAehC,WACE,OAAOF,KAAKqb,cAhBd,SAAiC9Z,GAC/B,GAAIA,aAAiB0M,KAAM,KACnBF,EAAOxM,EAAMoN,cAEbf,EAAO,IAAIK,KAAKF,EAAMxM,EAAMiN,WAAYjN,EAAMkN,UAAW,EAAG,EAAG,GACrET,EAAkBJ,EAAMG,GAExB/N,KAAKqb,SAAWzN,OAEhB5N,KAAKqb,SAAW5N,EAAiBlM,GAAO,GAAO,GAGjDvB,KAAK2gB,cAAcrS,EAAyBtO,KAAK4N,KAAM5N,KAAK01B,wCAc9Dl2B,OAAAsE,eAAyBywC,EAAAr0C,UAAA,UAAO,KAehC,WACE,OAAOF,KAAKkb,cAhBd,SAAiC3Z,GAC/B,GAAIA,aAAiB0M,KAAM,KACnBF,EAAOxM,EAAMoN,cAEbf,EAAO,IAAIK,KAAKF,EAAMxM,EAAMiN,WAAYjN,EAAMkN,UAAW,GAAI,GAAI,IACvET,EAAkBJ,EAAMG,GAExB/N,KAAKkb,SAAWtN,OAEhB5N,KAAKkb,SAAWzN,EAAiBlM,GAAO,GAAQ,GAGlDvB,KAAK2gB,cAAcrS,EAAyBtO,KAAK4N,KAAM5N,KAAK01B,wCAqB9Dl2B,OAAAsE,eAAuBywC,EAAAr0C,UAAA,SAAM,KAc7B,WACE,OAAOF,KAAKw0C,aAfd,SAA8BjzC,GAC5B,GAAIA,IACFA,EAAQA,EAAM6K,eACJ6C,MAAM,OAAS1N,EAAM0N,MAAM,OAAS1N,EAAM0N,MAAM,QAIxD,OAHAjP,KAAKw0C,QAAUjzC,EACfvB,KAAKi1C,QAAUj1C,KAAKk1C,iBACpBl1C,KAAKm1C,aAAan1C,KAAK4N,MAI3B5N,KAAKw0C,QAAUF,GACft0C,KAAKi1C,QAAUj1C,KAAKk1C,6CAoBtB11C,OAAAsE,eAAuBywC,EAAAr0C,UAAA,SAAM,KAO7B,WACE,OAAOF,KAAK+a,SAAWjP,SARzB,SAA8BvK,GAE1BvB,KAAK+a,QADHxZ,EACaA,EAAMZ,QAAU,EAAIY,EAAQ,KAE5BuK,qCAmBnByoC,EAAAr0C,UAAAmE,SAAA,WAEErE,KAAKi1C,QAAUj1C,KAAKk1C,aAItBX,EAAAr0C,UAAAk1C,kBAAA,SAAkBxmC,OACVf,EAAMd,SAAS6B,EAAWvC,UAAUrM,KAAKm1B,OAAOnhB,QAAQ,KAAMhU,KAAKm1B,OAAOnhB,QAAQ,KAAO,GAAI,IAC7FlG,EAAQf,SAAS6B,EAAWvC,UAAUrM,KAAKm1B,OAAOnhB,QAAQ,KAAMhU,KAAKm1B,OAAOnhB,QAAQ,KAAO,GAAI,IAAM,EACrGjG,EAAOhB,SAAS6B,EAAWvC,UAAUrM,KAAKm1B,OAAOnhB,QAAQ,KAAMhU,KAAKm1B,OAAOnhB,QAAQ,KAAO,GAAI,IAE9FpG,EAAO,IAAIK,KAAKF,EAAMD,EAAOD,GAInC,OAFAG,EAAkBJ,EAAMG,GAEhBH,EAAKe,gBAAkBZ,GAAQH,EAAKY,aAAeV,GAASF,EAAKa,YAAcZ,EAAOD,EAAO,MAIvG2mC,EAAAr0C,UAAAm1C,aAAA,SAAa9zC,OACP+zC,EAAgBt1C,KAAKm1B,OAMzB,OAFAmgB,GADAA,GADAA,EAAgBA,EAAcnlC,QAAQ,MAAO,IAAM5O,EAAMkN,WAAWjG,OAAO,KAC7C2H,QAAQ,MAAO,KAAO5O,EAAMiN,WAAa,IAAIhG,OAAO,KACpD2H,QAAQ,OAAQzB,EAAWnN,EAAMoN,iBAMjE4lC,EAAAr0C,UAAAq1C,aAAA,SAAa3nC,GACX5N,KAAK4N,KAAOA,EACRA,GAAQ5N,KAAK20C,cACf30C,KAAKw1C,aAAalnC,EAAyBtO,KAAK4N,KAAM5N,KAAK01B,OAClD9nB,IAAS5N,KAAK20C,cACvB30C,KAAKw1C,atFzKX,SAAqC5nC,GACnC,GAAIA,EAAM,KACFY,EAAWZ,EAAKY,WAAa,EAC7BX,EAAMD,EAAKa,UAAY,GAAK,IAAMb,EAAKa,UAAYb,EAAKa,UACxDX,EAAQU,EAAW,GAAK,IAAMA,EAAWA,EAG/C,OAFaE,EAAWd,EAAKe,eAEf,IAAMb,EAAQ,IAAMD,EAElC,OAAO,KsFgKa4nC,CAAqBz1C,KAAK4N,OAE5CA,IAASrJ,UAAYvE,KAAKw1C,aAAa,IAAMx1C,KAAKw1C,aAAa,kBAKnEjB,EAAAr0C,UAAAs1C,aAAA,SAAaj0C,EAAYm0C,GAAzB,IAAAhwC,EAAA1F,UAAyB,IAAA01C,IAAAA,GAAA,GACnB11C,KAAK40C,cACP50C,KAAK40C,cAAcrzC,GACVm0C,GACT7sC,WAAU,WAAO,OAAAnD,EAAK8vC,aAAaj0C,GAAO,MAM9CgzC,EAAAr0C,UAAAkgB,iBAAA,SAAiBE,GACftgB,KAAK40C,cAAgBt0B,GAKvBi0B,EAAAr0C,UAAAmgB,kBAAA,SAAkBC,GAChBtgB,KAAK60C,eAAiBv0B,GAGxBi0B,EAAAr0C,UAAAqgB,0BAAA,SAA0BjT,GACxBtN,KAAKwgB,gBAAkBlT,GAGfinC,EAAAr0C,UAAAygB,cAAV,SAAwBC,GAClB5gB,KAAKwgB,iBACPxgB,KAAKwgB,gBAAgBI,IAKf2zB,EAAAr0C,UAAAg1C,UAAV,eACMhE,EAAOlxC,KAAKm1B,OAAOhkB,cAMvB,OAFA+/B,GADAA,GADAA,EAAOA,EAAK/gC,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,QAAS,QAEtB,IAAI8gC,GAAQC,GAAM,IAG3BqD,EAAAr0C,UAAA2gB,SAAA,SAASC,GAIP,OAFA9gB,KAAK80C,aAAqC,kBAAtB90C,KAAK80C,cAA0D,yBAAtB90C,KAAK80C,aAA0C90C,KAAK80C,aAAe,IXjTzGvzC,EWmTRuf,EAAEvf,QXlTFgoC,MAAMt7B,KAAKE,MAAM5M,KWmT9BvB,KAAK80C,aAAe90C,KAAK80C,cAAgB,gBAElC,CAAElnC,KAAM,CACb22B,OAAO,KAIPF,GAAerkC,KAAKskC,SAAUtkC,KAAKwxB,SAAU1Q,EAAEvf,OAC1C,CAAE+iC,SAAU,CACjBC,OAAO,IAINvkC,KAAK4N,OAAS4C,EAAkBxQ,KAAK4N,KAAM5N,KAAKqb,SAAUrb,KAAKkb,WAClElb,KAAK80C,aAAe90C,KAAK80C,cAAgB,uBAElC,CAAElnC,KAAM,CACb22B,OAAO,KAIJ,KXzUX,IAA2BhjC,iCW2BxByC,EAAAA,MAAKC,KAAA,CAAC,6BASND,EAAAA,MAAKC,KAAA,CAAC,mCAqBND,EAAAA,MAAKC,KAAA,CAAC,mCAIND,EAAAA,MAAKC,KAAA,CAAC,mCAQND,EAAAA,MAAKC,KAAA,CAAC,mCAMND,EAAAA,MAAKC,KAAA,CAAC,gCAQND,EAAAA,MAAKC,KAAA,CAAC,6BAMND,EAAAA,MAAKC,KAAA,CAAC,iCASND,EAAAA,MAAKC,KAAA,CAAC,oCASND,EAAAA,MAAKC,KAAA,CAAC,+BA0BND,EAAAA,MAAKC,KAAA,CAAC,8BAiCND,EAAAA,MAAKC,KAAA,CAAC,4BA+BND,EAAAA,MAAKC,KAAA,CAAC,4BAYN2N,EAAAA,OAAM3N,KAAA,CAAC,4BAGP2N,EAAAA,OAAM3N,KAAA,CAAC,eAwHVswC,EAlUA,GCzCMoB,GAA6B,cA6BnCC,GAAA,SAAAzxC,GAkDE,SAAAyxC,EAAoBjI,EAAoDloC,EAAqBsf,GAA7F,IAAArf,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAioC,gBAAAA,EAAoDjoC,EAAAD,SAAAA,EA1BvDC,EAAA6X,UAAY,IAAIhR,OAAO,+EAGvB7G,EAAA8X,SAAW,IAAIjR,OAAO,4MA2R/B7G,EAAA4pB,SAAQ,WACd5pB,EAAKioC,gBAAgBr7B,eAAeqjC,KAnQpCjwC,EAAKqf,GAAKA,IAqSd,OAxU4C3gB,EAAAA,EAAAA,GAsC1CwxC,EAAA11C,UAAAsG,gBAAA,WACExG,KAAK61C,4BAA4B,QAE7B71C,KAAKg0B,OACPh0B,KAAK81C,QAAQlvC,cAAcotB,SAI/B4hB,EAAA11C,UAAA+G,YAAA,WACEjH,KAAKuvB,mBAGPqmB,EAAA11C,UAAA61C,aAAA,WACM/1C,KAAKwxB,UAAYxxB,KAAKsnC,WAIrBtnC,KAAKg2C,SAASzY,SAMjBv9B,KAAK81C,QAAQlvC,cAAc4qB,UAAW,EACtCxxB,KAAKi2C,kBANLj2C,KAAKg2C,SAASh3B,OACdhf,KAAKk2C,sBACLl2C,KAAK2wB,yBAQTilB,EAAA11C,UAAAi2C,aAAA,WACEn2C,KAAK81C,QAAQlvC,cAAcotB,QAC3Bh0B,KAAK81C,QAAQlvC,cAAcrF,MAAQvB,KAAKq1C,aAAar1C,KAAK4N,MAC1D5N,KAAKu1C,aAAav1C,KAAK4N,MACvB5N,KAAKi2C,iBAIPL,EAAA11C,UAAAk2C,mBAAA,SAAmBlwC,GACZlG,KAAKq2C,cAAiBr2C,KAAKs2C,iBAI1Bt2C,KAAKq2C,aAAazvC,cAAcS,SAASnB,EAAMoB,UAAWtH,KAAKu2C,gBAAgBrwC,EAAMoB,SACxFtH,KAAKs2C,eAAe1vC,cAAcS,SAASnB,EAAMoB,SAAYtH,KAAKw2C,gBAAgBtwC,EAAMoB,SACvFtH,KAAKi2C,kBAKXL,EAAA11C,UAAAu2C,QADA,SACQ9E,GACF3xC,KAAKsnC,WAITtnC,KAAKi1C,QAAQvD,MAAMC,GAEf3xC,KAAKi1C,QAAQxD,cAA8C,KAA9BzxC,KAAKi1C,QAAQxD,aACxCzxC,KAAKi1C,QAAQxD,aAAa9wC,QAAU,IACtCX,KAAKu1C,aAAav1C,KAAKo1C,kBAAkBp1C,KAAK81C,QAAQlvC,cAAcrF,QACpEvB,KAAK4N,KAAO5N,KAAKo1C,kBAAkBp1C,KAAK81C,QAAQlvC,cAAcrF,SAE9DvB,KAAK4N,KAAOrJ,UACZvE,KAAKu1C,aAAav1C,KAAK4N,OAGzB5N,KAAK4N,KAAOrJ,YAKhBqxC,EAAA11C,UAAAw2C,UADA,SACU/E,GACJ3xC,KAAKsnC,UAITtnC,KAAKi1C,QAAQ/C,QAAQP,IAGvBiE,EAAA11C,UAAAy2C,gBAAA,WACE,OAAQ32C,KAAK+kB,GAAGne,cAAcsf,UAAU7e,SAAS,eAC/CrH,KAAK+kB,GAAGne,cAAcsf,UAAU7e,SAAS,aACJ,KAArCrH,KAAK81C,QAAQlvC,cAAcrF,OAG/Bq0C,EAAA11C,UAAA02C,gBAAA,WACE,MAA8B,KAAtB52C,KAAK80C,cAAuB90C,KAAK22C,kBAAqB32C,KAAK80C,aAAe,IAGpFc,EAAA11C,UAAA2mC,MAAA,WACE7mC,KAAK62C,kBAAoB72C,KAAKq1C,aAAar1C,KAAK4N,MAChD5N,KAAK4N,KAAOrJ,UACZvE,KAAKu1C,aAAav1C,KAAK4N,MAEvB5N,KAAK82C,wBAGPlB,EAAA11C,UAAA62C,YAAA,SAAYpF,OAEJ/jC,EAAO5N,KAAK81C,QAAQlvC,cAAcrF,MAClCy1C,EAAUppC,EAAO5N,KAAKo1C,kBAAkBxnC,GAAQrJ,UACtDvE,KAAKi1C,QAAQlC,KAAKpB,GAClB3xC,KAAK+0C,OAAOhjC,OAER/R,KAAKi1C,QAAQxD,aACXzxC,KAAKi1C,QAAQxD,aAAa9wC,QAAU,IACtCX,KAAKu1C,aAAayB,GAClBh3C,KAAK4N,KAAOopC,IAEZh3C,KAAK4N,KAAOrJ,UACZvE,KAAKu1C,aAAav1C,KAAK4N,QAIzB5N,KAAK4N,KAAOrJ,UACZvE,KAAKw1C,aAAax1C,KAAK4N,OAGzB5N,KAAK82C,wBAIPlB,EAAA11C,UAAA+2C,cAAA,SAActF,OACNuF,EAAel3C,KAAK81C,QAAQlvC,cAAcrF,MAC5CvB,KAAKm3C,iBACPn3C,KAAKu1C,aAAa2B,GAClBl3C,KAAKw1C,aAAa0B,IAEpBl3C,KAAKg1C,SAASjjC,KAAKmlC,IAGrBtB,EAAA11C,UAAAk3C,aAAA,SAAazF,GAAb,IAAAjsC,EAAA1F,KACMA,KAAKm3C,gBACPxF,EAAOrqC,OAAOyrC,OAGdlqC,WAAU,WAAO,OAAAnD,EAAKqwC,gBAAgB,IAGtC/1C,KAAKi1C,QAAQvjC,MAAMigC,IAIvBiE,EAAA11C,UAAAm1C,aAAA,SAAa9zC,GACX,IAAKA,EACH,OAAOgD,cAGL+wC,EAAgBt1C,KAAKm1B,OAMzB,OAFAmgB,GADAA,GADAA,EAAgBA,EAAcnlC,QAAQ,MAAO,IAAM5O,EAAMkN,WAAWjG,OAAO,KAC7C2H,QAAQ,MAAO,KAAO5O,EAAMiN,WAAa,IAAIhG,OAAO,KACpD2H,QAAQ,OAAQzB,EAAWnN,EAAMoN,iBAKjEinC,EAAA11C,UAAAi1C,aAAA,SAAa5zC,GACPA,IACFvB,KAAK81C,QAAQlvC,cAAcrF,MAAQvB,KAAKq1C,aAAa9zC,KAKzDq0C,EAAA11C,UAAA6gB,WAAA,SAAWxf,GACT,GAAIvB,KAAK81C,SAAWv0C,EAAO,CACzB,GAAIA,aAAiB0M,KAAM,KACnBW,EAAarN,EAAMsN,WACzB7O,KAAK01B,KAAO,IAAM9mB,EAAWvC,UAAU,GAAI,IAAMuC,EAAWvC,UAAU,GAAI,IAAM,IAAMuC,EAAWvC,UAAU,GAAI,IAC/GrM,KAAK4N,KAAOrM,EACZvB,KAAK81C,QAAQlvC,cAAcrF,MAAQvB,KAAKq1C,aAAa9zC,QAEhD,GAAIvB,KAAKq3C,eAAe91C,IAAUvB,KAAKs3C,mBAAmB/1C,GAAQ,CAEnEvB,KAAKq3C,eAAe91C,GACtBvB,KAAK20C,eAAgB,GAErB30C,KAAK01B,KAAOn0B,EAAM8K,UAAU,GAAI,IAChCrM,KAAK20C,eAAgB,OAEjB9mC,EAAMd,SAASxL,EAAM8K,UAAU,EAAG,IAAK,IACvCyB,EAAQf,SAASxL,EAAM8K,UAAU,EAAG,GAAI,IAAM,EAC9C0B,EAAOhB,SAASxL,EAAM8K,UAAU,EAAG,GAAI,IAEvCkrC,EAAW,IAAItpC,KAAKF,EAAMD,EAAOD,GAEvCG,EAAkBupC,EAAUxpC,GAE5B/N,KAAK4N,KAAO2pC,EACZv3C,KAAK81C,QAAQlvC,cAAcrF,MAAQvB,KAAKq1C,aAAakC,QAErDv3C,KAAK81C,QAAQlvC,cAAcrF,MAAQ,GACnCvB,KAAK4N,KAAOrJ,UAEdvE,KAAKu1C,aAAav1C,KAAK4N,WACd5N,KAAK81C,UACd91C,KAAK81C,QAAQlvC,cAAcrF,MAAQ,GACnCvB,KAAK4N,KAAOrJ,WAGdvE,KAAK62C,kBAAoB72C,KAAKq1C,aAAar1C,KAAK4N,OAGlDgoC,EAAA11C,UAAAm3C,eAAA,SAAe91C,GACb,OAAOvB,KAAKud,UAAU/Q,KAAKjL,IAG7Bq0C,EAAA11C,UAAAo3C,mBAAA,SAAmB/1C,GACjB,OAAOvB,KAAKwd,SAAShR,KAAKjL,IAG5Bq0C,EAAA11C,UAAAq2C,gBAAA,SAAgB/wC,GACd,OAAOA,EAAQ0gB,UAAU7e,SAAS,yBAIpCuuC,EAAA11C,UAAAi3C,aAAA,WACE,OAAOroC,KAGD8mC,EAAA11C,UAAA+1C,cAAR,WACEj2C,KAAKg2C,SAAS5pB,QACdpsB,KAAKuvB,kBACLvvB,KAAK61C,4BAA4B,SAG3BD,EAAA11C,UAAA42C,qBAAR,WAAA,IAAApxC,EAAA1F,KACQw3C,EAAqBx3C,KAAKq1C,aAAar1C,KAAK4N,MAE9C4pC,IAAuBx3C,KAAK62C,oBAC9B72C,KAAK62C,kBAAoBW,EAEzB7uC,aAAa3I,KAAKy3C,eAClBz3C,KAAKy3C,cAAgB5uC,WAAU,WAC7BnD,EAAKsvC,SAASjjC,KAAKylC,IAClB,OAIC5B,EAAA11C,UAAAs2C,gBAAR,SAAwBhxC,GAGtB,OAAQA,GAAWA,EAAQkyC,aAFN,kBAEsClyC,EAAQ0qB,eAAiB1qB,EAAQ0qB,cAAcwnB,aAFrF,kBAKf9B,EAAA11C,UAAAywB,oBAAR,WAAA,IAAAjrB,EAAA1F,KACEA,KAAKk9B,cAAgBl9B,KAAKyF,SAASsD,OAAO,WAAY,QAAO,SAAG7C,GAC9DR,EAAK0wC,mBAAmBlwC,KAG1BlG,KAAK8wC,oBAAsB9wC,KAAKyF,SAASsD,OAAO,SAAU,SAAQ,WAChErD,EAAKuwC,kBAGPlnC,OAAO0I,iBAAiB,SAAUzX,KAAKsvB,UAAU,IAO3CsmB,EAAA11C,UAAAqvB,gBAAR,WACMvvB,KAAKk9B,eACPl9B,KAAKk9B,gBAGHl9B,KAAK8wC,qBACP9wC,KAAK8wC,sBAGP/hC,OAAOoJ,oBAAoB,SAAUnY,KAAKsvB,UAAU,IAG9CsmB,EAAA11C,UAAA21C,4BAAR,SAAoCt0C,GAClCvB,KAAKq2C,aAAazvC,cAAc0O,MAAMqiC,QAAUp2C,GAG1Cq0C,EAAA11C,UAAAg2C,oBAAR,WACEl2C,KAAK61C,4BAA4B,SAEjC71C,KAAK2tC,gBAAgB76B,YACnB9S,KAAKq2C,aAAazvC,cA5WS,EA8W3B5G,KAAK81C,QACL,CAAC,WAAY,gBACb,GACA,GAGF91C,KAAK2tC,gBAAgBr7B,eAAeqjC,yBAtVvClxC,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,iBACVC,SAAA,+5CACA4G,UAAW,CACT,CACE8W,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAozB,IAC9BnzB,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAAozB,IAC9BnzB,OAAO,GAETvQ,iDAjDKA,UAJkF/I,EAAAA,iBAAxDD,EAAAA,gDA8EhCE,EAAAA,UAASnF,KAAA,CAAC,WAAY,CAAEqF,UAAQ,0BAChCF,EAAAA,UAASnF,KAAA,CAAC,eAAgB,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,4BACtDF,EAAAA,UAASnF,KAAA,CAAC,iBAAkB,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,qBACxDF,EAAAA,UAASnF,KAAA,CAAC,MAAO,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,mBAG7CtF,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,2BAsDNsU,EAAAA,aAAYtU,KAAA,CAAC,QAAS,CAAC,8BAqBvBsU,EAAAA,aAAYtU,KAAA,CAAC,UAAW,CAAC,cA8N5B2xC,EAzVA,CAiB4CrB,IC9C/BqD,GAAoC,CAC/C77B,GAAE,CACA87B,cAAe,yBACfC,4BAA6B,oCAE/B97B,GAAE,CACA67B,cAAe,6BACfC,4BAA6B,yCAE/Bh8B,GAAE,CACA+7B,cAAe,2BACfC,4BAA6B,sCA6CjCC,GAAA,WAoOE,SAAAA,EAAsBC,GAAAh4C,KAAAg4C,eAAAA,EAlOtBh4C,KAAAi4C,aAAuB,GAEfj4C,KAAAk4C,QAAmB,EAInBl4C,KAAAm4C,WAAqB,EACrBn4C,KAAAqlC,WAAsB,EAKpBrlC,KAAAo4C,UAAgC,CAAE1qC,MAAO,GAAIC,IAAK,IAClD3N,KAAAm1B,OAAc,aACdn1B,KAAAq4C,6BAAuC,EACvCr4C,KAAAs4C,4BAAsC,EAiN5Bt4C,KAAAu4C,SAA+B,IAAI5mC,EAAAA,aAwIzD,OAtVEnS,OAAAsE,eAAIi0C,EAAA73C,UAAA,wBAAqB,KAAzB,WACE,OAAOF,KAAKq4C,6BAA+Br4C,KAAKs4C,4DAYlD94C,OAAAsE,eAAsBi0C,EAAA73C,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAKk4C,YALd,SAA4B7Q,GAC1BrnC,KAAKk4C,OAASzrC,EAAiB46B,oCAgBjC7nC,OAAAsE,eAAyBi0C,EAAA73C,UAAA,WAAQ,KAMjC,WACE,OAAOF,KAAKsR,eAPd,SAAkC/P,GAChCvB,KAAKsR,UAAY7E,EAAiBlL,GAElCvB,KAAK2gB,cAAc3gB,KAAKo4C,4CAc1B54C,OAAAsE,eAAyBi0C,EAAA73C,UAAA,UAAO,KAQhC,WACE,OAAOF,KAAKw4C,cATd,SAAiC5qC,GAC/B5N,KAAKw4C,SAAWx4C,KAAKy4C,yBAAyB7qC,GAC9C5N,KAAKo4C,UAAUzqC,IAAM3N,KAAK04C,QAE1B14C,KAAK24C,oBAAoB34C,KAAKo4C,WAC9Bp4C,KAAKurC,YAAYvrC,KAAKo4C,4CA2DxB54C,OAAAsE,eAAyBi0C,EAAA73C,UAAA,WAAQ,KAYjC,WACE,OAAOF,KAAKi6B,WAAa2d,GAAkC/rC,UAb7D,SAAkCtK,GAC5BA,aAAiB/B,UAAY+B,aAAiB5B,OAChDK,KAAKi6B,UAAS75B,EAAA,GACTw3C,GAAkChsC,GAClCgsC,GAAkC/rC,KAClCtK,GAGLvB,KAAKi6B,UAAY2d,GAAkC/rC,sCAgCvDrM,OAAAsE,eAAyBi0C,EAAA73C,UAAA,WAAQ,KAMjC,WACE,OAAOF,KAAKm4C,eAPd,SAAkC52C,GAChCvB,KAAKm4C,UAAY1rC,EAAiBlL,GAElCvB,KAAK2gB,cAAc3gB,KAAKo4C,4CAgB1B54C,OAAAsE,eAAyBi0C,EAAA73C,UAAA,WAAQ,KAMjC,WACE,OAAOF,KAAKqlC,eAPd,SAAkCf,GAChCtkC,KAAKqlC,UAAY54B,EAAiB63B,GAElCtkC,KAAK2gB,cAAc3gB,KAAKo4C,4CAc1B54C,OAAAsE,eAA2Bi0C,EAAA73C,UAAA,YAAS,KAQpC,WACE,OAAOF,KAAK44C,gBATd,SAAqChrC,GACnC5N,KAAK44C,WAAa54C,KAAKy4C,yBAAyB7qC,GAChD5N,KAAKo4C,UAAU1qC,MAAQ1N,KAAKod,UAE5Bpd,KAAK24C,oBAAoB34C,KAAKo4C,WAC9Bp4C,KAAKurC,YAAYvrC,KAAKo4C,4CAwBxBL,EAAA73C,UAAAkgB,iBAAA,SAAiBE,GACftgB,KAAK40C,cAAgBt0B,GAKvBy3B,EAAA73C,UAAAmgB,kBAAA,SAAkBC,GAChBtgB,KAAK60C,eAAiBv0B,GAGxBy3B,EAAA73C,UAAAqgB,0BAAA,SAA2BjT,GACzBtN,KAAKwgB,gBAAkBlT,GAGzByqC,EAAA73C,UAAA2gB,SAAA,SAASg4B,OAEDt3C,EAA4Bs3C,EAAQt3C,OAAS,GAC7C6b,EAAY7b,EAAMmM,MAAQ1N,KAAKy4C,yBAAyBl3C,EAAMmM,OAAS,GACvEgrC,EAAUn3C,EAAMoM,IAAM3N,KAAKy4C,yBAAyBl3C,EAAMoM,KAAO,GAEvE,OAAI3N,KAAK84C,wBAAwB17B,EAAWs7B,IAC1C14C,KAAKi4C,aAAe,GAEb,CAAE3T,SAAU,CACjBC,OAAO,KAIPvkC,KAAK+4C,sBAAsBF,EAAQt3C,QAAUvB,KAAKg5C,sBAAsB57B,EAAWs7B,IACrF14C,KAAKi4C,aAAej4C,KAAKgtB,SAAS6qB,cAE3B,CAAEjqC,KAAM,CACb22B,OAAO,KAIPvkC,KAAKi5C,gBAAgB77B,EAAWs7B,IAClC14C,KAAKi4C,aAAej4C,KAAKgtB,SAAS8qB,4BAE3B,CAAElqC,KAAM,CACb22B,OAAO,KAIJ,MAGTwT,EAAA73C,UAAA6gB,WAAA,SAAWq3B,GACTp4C,KAAKk5C,gCAEAd,IAAap4C,KAAK+4C,sBAAsBX,KAC3Cp4C,KAAKo4C,UAAY,CAAE1qC,MAAO,GAAIC,IAAK,KAGhCyqC,GACHp4C,KAAK2gB,cAAc3gB,KAAKo4C,WAGtBp4C,KAAK+4C,sBAAsBX,IAC7Bp4C,KAAKurC,YAAY6M,GAGfp4C,KAAKm5C,kBAAkBf,KACzBp4C,KAAKo4C,UAAY,CACf1qC,MAAO1N,KAAKy4C,yBAAyBL,EAAU1qC,OAC/CC,IAAK3N,KAAKy4C,yBAAyBL,EAAUzqC,MAG/C3N,KAAKurC,YAAYvrC,KAAKo4C,YAGxBp4C,KAAK24C,oBAAoB34C,KAAKo4C,YAGtBL,EAAA73C,UAAAk5C,iBAAV,SAA2B73C,GACzB,OAAOA,IAAUvB,KAAKg4C,eAAe55B,WAAW7c,IAIxCw2C,EAAA73C,UAAAqrC,YAAV,SAAsBhqC,OACdqf,EAA0B,iBAAlB,EAA0BxgB,EAAA,GAAQmB,GAAUA,EAEtDvB,KAAK40C,eACP50C,KAAK40C,cAAch0B,IAKbm3B,EAAA73C,UAAAygB,cAAV,SAAwBpf,OAChBqf,EAAKxgB,EAAA,GAAQmB,GACfvB,KAAKwgB,iBACPxgB,KAAKwgB,gBAAgBI,IAIjBm3B,EAAA73C,UAAAu4C,yBAAR,SAAiCl3C,GAE/B,OAAIA,aAAiB0M,KACZjO,KAAKg4C,eAAep6B,iBAAiBrc,GAGvCA,GAGDw2C,EAAA73C,UAAA+4C,gBAAR,SAAwB77B,EAAmBs7B,GACzC,OAAQ14C,KAAKg4C,eAAe35B,iBAAiBq6B,EAASt7B,KAAepd,KAAKs4C,4BAGpEP,EAAA73C,UAAA84C,sBAAR,SAA8B57B,EAAmBs7B,GAC/C,OAAO14C,KAAKo5C,iBAAiBV,IAAY14C,KAAKo5C,iBAAiBh8B,KAAepd,KAAKq4C,6BAG7EN,EAAA73C,UAAA64C,sBAAR,SAA8Bx3C,GAC5B,OAAOA,IAAUvB,KAAKm5C,kBAAkB53C,IAGlCw2C,EAAA73C,UAAAi5C,kBAAR,SAA0B53C,GACxB,OAAOA,GAASA,EAAM1B,eAAe,UAAY0B,EAAM1B,eAAe,QAGhEk4C,EAAA73C,UAAA44C,wBAAR,SAAgC17B,EAAmBs7B,GACjD,OAAO14C,KAAKq5C,uBACVhV,GAAerkC,KAAKskC,SAAUtkC,KAAKwxB,SAAUpU,IAC7CinB,GAAerkC,KAAKskC,SAAUtkC,KAAKwxB,SAAUknB,mCAtUhD10C,EAAAA,MAAKC,KAAA,CAAC,6BAiBND,EAAAA,MAAKC,KAAA,CAAC,+BAiBND,EAAAA,MAAKC,KAAA,CAAC,4BAmBND,EAAAA,MAAKC,KAAA,CAAC,yBASND,EAAAA,MAAKC,KAAA,CAAC,6BAoCND,EAAAA,MAAKC,KAAA,CAAC,gCA6BND,EAAAA,MAAKC,KAAA,CAAC,gCAWND,EAAAA,MAAKC,KAAA,CAAC,gCAmBND,EAAAA,MAAKC,KAAA,CAAC,iCAiBND,EAAAA,MAAKC,KAAA,CAAC,kCAmBN2N,EAAAA,OAAM3N,KAAA,CAAC,eAwIV8zC,EA1WA,GC1BAuB,GAAA,SAAAn1C,GAwEE,SAAAm1C,EAAYtB,EAAgCuB,GAA5C,IAAA7zC,EACEvB,EAAAvD,KAAAZ,KAAMg4C,IAAeh4C,YACrB0F,EAAK6zC,0BAA4BA,IAoPrC,OA/SiDn1C,EAAAA,EAAAA,GAS/C5E,OAAAsE,eAAIw1C,EAAAp5C,UAAA,gBAAa,KAAjB,WACE,OAAQF,KAAKw5C,qBAAuBx5C,KAAKy5C,qBAAuBz5C,KAAKwxB,WAAaxxB,KAAKsnC,0CAGzF9nC,OAAAsE,eAAIw1C,EAAAp5C,UAAA,mBAAgB,KAApB,WACE,MAAO,4CAGTV,OAAAsE,eAAIw1C,EAAAp5C,UAAA,oBAAiB,KAArB,WACE,OAAOF,KAAK05C,aAAa9yC,cAAcrF,uCAGzC/B,OAAAsE,eAAIw1C,EAAAp5C,UAAA,kBAAe,KAAnB,WACE,MAA8B,KAAtBF,KAAKi4C,cAAuBj4C,KAAK22C,kBAAqB32C,KAAKi4C,aAAe,oCAGpFz4C,OAAAsE,eAAIw1C,EAAAp5C,UAAA,8BAA2B,KAA/B,WACE,OAAOF,KAAKy5C,kBAAkB94C,OAtEU,IAuEnCX,KAAKw5C,oBAAoB74C,OAvEU,oCA0E1CnB,OAAAsE,eAAIw1C,EAAAp5C,UAAA,wBAAqB,KAAzB,WACE,OAAOF,KAAKy5C,kBAAkB94C,OAAS,GAAKX,KAAKw5C,oBAAoB74C,OAAS,mCAGhFnB,OAAAsE,eAAIw1C,EAAAp5C,UAAA,qBAAkB,KAAtB,WACE,MAAO,8CAGTV,OAAAsE,eAAIw1C,EAAAp5C,UAAA,sBAAmB,KAAvB,WACE,OAAOF,KAAK25C,eAAe/yC,cAAcrF,uCAGpC+3C,EAAAM,WAAP,SAAkB1zC,GAChB,OAAOA,EAAMiJ,SAAWjJ,EAAMkJ,OAGzBkqC,EAAAO,iBAAP,SAAwB3zC,GACtB,OAAOA,EAAMoB,QAAUpB,EAAM4zC,YAGxBR,EAAAS,WAAP,SAAkB5qC,GAIhB,OAHqBA,GAAW,IAAMA,GAAW,IACtBA,GAAW,IAAMA,GAAW,KAUzDmqC,EAAAp5C,UAAAmE,SAAA,WAEErE,KAAKg6C,cAAgBh6C,KAAKk1C,aAG5BoE,EAAAp5C,UAAA2mC,MAAA,WACE7mC,KAAKk5C,gCACLl5C,KAAKo4C,UAAY,CAAE1qC,MAAO,GAAIC,IAAK,IAEnC3N,KAAK24C,oBAAoB34C,KAAKo4C,WAC9Bp4C,KAAKurC,YAAYvrC,KAAKo4C,YAGxBkB,EAAAp5C,UAAA+5C,OAAA,WACEj6C,KAAKk6C,uCAGPZ,EAAAp5C,UAAAi6C,QAAA,WACEn6C,KAAKo6C,oCAGPd,EAAAp5C,UAAAw2C,UAAA,SAAUxwC,GAEJlG,KAAKsnC,WAILtnC,KAAKq6C,sBAAsBn0C,IAC7BA,EAAMguB,iBACNl0B,KAAKs6C,uBAELt6C,KAAKg6C,cAAc9H,QAAQhsC,KAK/BozC,EAAAp5C,UAAAu2C,QAAA,SAAQvwC,GACN,IAAIlG,KAAKsnC,SAAT,KAIMiT,EAAyBr0C,EAAMoB,OAAOwuB,OAAS91B,KAAKw6C,mBAE1Dx6C,KAAKy6C,SAASv0C,GACdlG,KAAKg6C,cAActI,MAAMxrC,GACzBlG,KAAK06C,oBAAoBH,KAG3BjB,EAAAp5C,UAAAg5C,8BAAA,WACEl5C,KAAKs4C,4BAA6B,EAClCt4C,KAAKq4C,6BAA8B,GAGrCiB,EAAAp5C,UAAAy4C,oBAAA,SAAoB/3B,GAApB,IAAAlb,EAAA1F,KACQo4C,EAAY,CAAE1qC,MAAOkT,EAAW,MAAYjT,IAAKiT,EAAS,KAC1D+5B,EAAmB36C,KAAKg4C,eAAe35B,iBAAiB+5B,EAAUzqC,IAAKyqC,EAAU1qC,OACjFktC,EAAW,SAAGhtC,GAAQ,OAAClI,EAAK0zC,iBAAiBxrC,IAAS+sC,GAEtDE,EAAkBD,EAAYxC,EAAUzqC,KAAO3N,KAAK86C,oBAAoB1C,EAAUzqC,KAAO,GACzFotC,EAAoBH,EAAYxC,EAAU1qC,OAAS1N,KAAK86C,oBAAoB1C,EAAU1qC,OAAS,GAErG1N,KAAK05C,aAAa9yC,cAAcrF,MAAQs5C,EACxC76C,KAAK25C,eAAe/yC,cAAcrF,MAAQw5C,GAGpCzB,EAAAp5C,UAAAk6C,iCAAR,WACEp6C,KAAKg7C,eAAep0C,cAAcsf,UAAU+a,IAAI,uCAI1CqY,EAAAp5C,UAAAg1C,UAAR,eACMhE,EAAOlxC,KAAKm1B,OAAOhkB,cAMvB,OAFA+/B,GADAA,GADAA,EAAOA,EAAK/gC,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,QAAS,QAEtB,IAAI8gC,GAAQC,GAAM,IAGnBoI,EAAAp5C,UAAA+6C,WAAR,SAAmB9lB,EAAgBtnB,EAAkBC,EAAoBC,QAAtC,IAAAF,IAAAA,EAAA,SAAkB,IAAAC,IAAAA,EAAA,SAAoB,IAAAC,IAAAA,EAAA,QACnEunC,EAAgBngB,EAQpB,OANAtnB,EAAMA,GAAOA,EAAI9J,SAAS,KAAO8J,EAAIrF,MAAM,EAAG,GAAKqF,EAInDynC,GADAA,GADAA,EAAgBA,EAAcnlC,QAAQ,MAAO,IAAMtC,GAAKrF,OAAO,KACjC2H,QAAQ,MAAO,IAAG,GAAY3H,OAAO,KACrC2H,QAAQ,OAAQ+qC,OAAOntC,KAK/CurC,EAAAp5C,UAAAi7C,oBAAR,SAA4B55C,QAAA,IAAAA,IAAAA,EAAA,IACpB,IAAAkc,EAAAta,EAAA5B,EAAAkd,MAAA,KAAA,GAAC5Q,EAAA4P,EAAA,GAAK3P,EAAA2P,EAAA,GAAO1P,EAAA0P,EAAA,GAEnB,OAAOlc,EAAQvB,KAAKi7C,WAAW,aAAcptC,EAAKC,EAAOC,GAAQ,IAG3DurC,EAAAp5C,UAAA46C,oBAAR,SAA4Bv5C,QAAA,IAAAA,IAAAA,EAAA,IACpB,IAAAkc,EAAAta,EAAA5B,EAAAkd,MAAA,KAAA,GAAC1Q,EAAA0P,EAAA,GAAM3P,EAAA2P,EAAA,GAAO5P,EAAA4P,EAAA,GAEpB,OAAOlc,EAAQvB,KAAKi7C,WAAWj7C,KAAKm1B,OAAQtnB,EAAKC,EAAOC,GAAQ,IAG1DurC,EAAAp5C,UAAAk7C,6BAAR,SAAqCh+B,EAAmBs7B,EAAiB6B,GAKvE,OAFAv6C,KAAKq7C,4BAA4Bj+B,EAAWs7B,GAErC,CACL4C,QAASt7C,KAAKq4C,6BAA+Br4C,KAAKs4C,2BAClDiD,eAAgBv7C,KAAKw7C,kBAAkBp+B,EAAWs7B,EAAS6B,KAKvDjB,EAAAp5C,UAAAs7C,kBAAR,SAA0Bp+B,EAAmBs7B,EAAiB6B,OACtDgB,EAAiB,CAAE7tC,MAAO,GAAIC,IAAK,IAQzC,OANA4tC,EAAe5tC,KAAO4sC,IAA0Bv6C,KAAKs4C,4BAC/Ct4C,KAAKo5C,iBAAiBV,GAAqB,GAAVA,EAEvC6C,EAAe7tC,MAAU6sC,IAA0Bv6C,KAAKs4C,4BAClDt4C,KAAKo5C,iBAAiBh8B,GAAyB,GAAZA,EAElCm+B,GAGDjC,EAAAp5C,UAAAy2C,gBAAR,WACE,OAAQ32C,KAAKu5C,0BAA0B3yC,cAAcsf,UAAU7e,SAAS,eACtErH,KAAKu5C,0BAA0B3yC,cAAcsf,UAAU7e,SAAS,aAG5DiyC,EAAAp5C,UAAAu7C,mBAAR,SAA2Br+B,EAAmBs7B,GAC5C,OAAO14C,KAAKq4C,6BAA+BK,IAAY14C,KAAKo4C,UAAUzqC,KAAOyP,IAAcpd,KAAKo4C,UAAU1qC,OAGpG4rC,EAAAp5C,UAAAm6C,sBAAR,SAA8Bn0C,GAC5B,OAAOA,EAAMoB,OAAOwuB,OAAS91B,KAAK07C,kBACmB,IAAnD17C,KAAK05C,aAAa9yC,cAAcisC,gBAAyE,IAAjD7yC,KAAK05C,aAAa9yC,cAAcksC,cAtPzE,IAuPf5sC,EAAMiJ,SAGFmqC,EAAAp5C,UAAAg6C,oCAAR,WACEl6C,KAAKg7C,eAAep0C,cAAcsf,UAAUgb,OAAO,uCAG7CoY,EAAAp5C,UAAAm7C,4BAAR,SAAoCj+B,EAAmBs7B,GACrD14C,KAAKs4C,2BAA6Bt4C,KAAKg4C,eAAe35B,iBAAiBq6B,EAASt7B,GAEhFpd,KAAKq4C,6BAA+Br4C,KAAKo5C,iBAAiBh8B,KAAepd,KAAKo5C,iBAAiBV,IAGzFY,EAAAp5C,UAAAu6C,SAAR,SAAiBv0C,OACT4oC,EAAewK,EAA4BO,iBAAiB3zC,GAC5DiJ,EAAUmqC,EAA4BM,WAAW1zC,GACjDy1C,EAAY7M,EAAmB,KAErC9uC,KAAK47C,oBAAoBzsC,EAASwsC,GAClC37C,KAAK67C,qBAAqB1sC,EAASwsC,EAAW7M,GAC9C9uC,KAAK87C,6BAA6B3sC,EAASwsC,IAGrCrC,EAAAp5C,UAAA67C,oBAAR,SAA4BxpC,EAAkBu8B,EAA0BkN,GAAxE,IAAAt2C,EAAA1F,KACEA,KAAKi8C,eAAenN,GAEpBjmC,WAAU,WACRimC,EAAaloC,cAAcmrC,kBAAkBiK,EAAgBA,GAC7Dt2C,EAAKs0C,cAAc5I,gBAAkB7+B,EACrC7M,EAAKs0C,cAAc3I,cAAgB9+B,KAI/B+mC,EAAAp5C,UAAA+7C,eAAR,SAAuBnN,GACrBA,EAAaloC,cAAcotB,SAGrBslB,EAAAp5C,UAAA07C,oBAAR,SAA4BzsC,EAAiBwsC,OACrCO,EAA4E,IAAnDl8C,KAAK05C,aAAa9yC,cAAcisC,eAE/D,GAAI8I,IAAc37C,KAAK07C,kBAAoBQ,GAjS1B,KAiSoD/sC,EAA0B,KACvFgtC,EAAcn8C,KAAK25C,eAAe/yC,cAAcrF,MAAMZ,OAC5DX,KAAK+7C,oBAAoBI,EAAan8C,KAAK25C,eAAgBwC,KAIvD7C,EAAAp5C,UAAA27C,qBAAR,SAA6B1sC,EAAiBwsC,EAAmB7M,OACzDsN,EAAuBp8C,KAAK25C,eAAe/yC,cAAcisC,iBAAmB/D,EAAavtC,MAAMZ,OAEjGg7C,IAAc37C,KAAKw6C,oBAAsB4B,GAzS3B,KAySmDjtC,GACnEnP,KAAK+7C,oBAAoB,EAAG/7C,KAAK05C,aAAc,IAI3CJ,EAAAp5C,UAAAo6C,oBAAR,eACQ6B,EAAcn8C,KAAK25C,eAAe/yC,cAAcrF,MAAMZ,OAE5DX,KAAK25C,eAAe/yC,cAAcrF,MAAQvB,KAAKw5C,oBAAoBhxC,MAAM,GAAI,GAC7ExI,KAAK+7C,oBAAoBI,EAAan8C,KAAK25C,eAAgBwC,IAGrD7C,EAAAp5C,UAAA47C,6BAAR,SAAqC3sC,EAAiBwsC,OAC9CU,EApTkC,KAoTfr8C,KAAK25C,eAAe/yC,cAAcisC,eACrDyJ,EArTkC,KAqTbt8C,KAAKw5C,oBAAoB74C,QAAkD07C,EAChGtC,EAAaT,EAA4BS,WAAW5qC,GAEtDwsC,IAAc37C,KAAKw6C,oBAAsB8B,GAAsBvC,GACjE/5C,KAAK+7C,oBAAoB,EAAG/7C,KAAK05C,aAAc,IAI3CJ,EAAAp5C,UAAAw6C,oBAAR,SAA4BH,OACpBgC,EAAmBv8C,KAAKm7C,oBAAoBn7C,KAAKy5C,mBACjD+C,EAAqBx8C,KAAKm7C,oBAAoBn7C,KAAKw5C,qBAEzD,GAAIx5C,KAAKy8C,6BAA+Bz8C,KAAK08C,sBAC3C18C,KAAKurC,YAAYvrC,KAAKo4C,eADxB,CAKA,GAAIp4C,KAAKy7C,mBAAmBe,EAAoBD,GAG9C,OAFAv8C,KAAKk5C,qCACLl5C,KAAK2gB,cAAc3gB,KAAKo4C,eAIpBuE,EAAuB38C,KAAKo7C,6BAA6BoB,EAAoBD,EAAkBhC,GAEjGoC,EAAqBrB,UACvBt7C,KAAKo4C,UAAY,CAAE1qC,MAAO8uC,EAAoB7uC,IAAK4uC,GACnDv8C,KAAKurC,YAAYvrC,KAAKo4C,WACtBp4C,KAAKu4C,SAASxmC,KAAI3R,EAAA,GAAMJ,KAAKo4C,aAG1BuE,EAAqBrB,UACxBt7C,KAAKo4C,UAASh4C,EAAA,GAAQu8C,EAAqBpB,gBAC3Cv7C,KAAKurC,YAAYoR,EAAqBpB,uCAzT3C92C,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,uBACVC,SAAA,smDACA4G,UAAW,CACX,CACE8W,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAA82B,IAC9B72B,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAA82B,IAC9B72B,OAAO,iDA/CFnF,UALWpU,EAAAA,sDA4DjBE,EAAAA,UAASnF,KAAA,CAAC,iBAAkB,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,0BACxDF,EAAAA,UAASnF,KAAA,CAAC,eAAgB,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,4BACtDF,EAAAA,UAASnF,KAAA,CAAC,iBAAkB,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,OAwS3DgwC,EA9TA,CAeiDvB,ICjCjD6E,GAAA,WAAA,SAAAA,IAIU58C,KAAAy0C,aAAwB,GAEtBz0C,KAAA68C,kBAA4B,EA8CtC78C,KAAAwxB,UAAqB,EAQrBxxB,KAAAsnC,UAAqB,EAcrBtnC,KAAAskC,UAAqB,EAQrBtkC,KAAAg0B,OAAkB,EAMlBh0B,KAAAqnC,OAAkB,EA0BQrnC,KAAA80C,aAAwB,GAyDlD90C,KAAAkxC,KAAgB,GAiBhBlxC,KAAA88C,iBAA4B,EA2BV98C,KAAA+yC,KAA2B,IAAIphC,EAAAA,aAG9B3R,KAAA6nC,MAA4B,IAAIl2B,EAAAA,aAG/B3R,KAAA8a,OAA6B,IAAInJ,EAAAA,aAG3B3R,KAAA+8C,YAAkC,IAAIprC,EAAAA,aAIhE3R,KAAAg9C,kBAAyB,KACzBh9C,KAAA2a,UAAiB,KA0GnB,OAzSEnb,OAAAsE,eAA4B84C,EAAA18C,UAAA,cAAW,KAGvC,WACE,OAAOF,KAAKy0C,kBAJd,SAAwClzC,GACtCvB,KAAKy0C,aAAelzC,GAAS,oCAc/B/B,OAAAsE,eAAyB84C,EAAA18C,UAAA,cAAW,KAApC,SAAqCsxB,GACnCxxB,KAAKwxB,SAAwB,KAAbA,GAAyB/kB,EAAiB+kB,GAE1DxxB,KAAK2gB,iDAKPnhB,OAAAsE,eAAyB84C,EAAA18C,UAAA,cAAW,KAApC,SAAqConC,GACnCtnC,KAAKsnC,SAAwB,KAAbA,GAAyB76B,EAAiB66B,oCAa5D9nC,OAAAsE,eAAyB84C,EAAA18C,UAAA,cAAW,KAApC,SAAqCokC,GACnCtkC,KAAKskC,SAAwB,KAAbA,GAAyB73B,EAAiB63B,GAE1DtkC,KAAK2gB,iDAKPnhB,OAAAsE,eAAsB84C,EAAA18C,UAAA,WAAQ,KAA9B,SAA+B8zB,GAC7Bh0B,KAAKg0B,MAAkB,KAAVA,GAAsBvnB,EAAiBunB,oCAKtDx0B,OAAAsE,eAAsB84C,EAAA18C,UAAA,WAAQ,KAA9B,SAA+BmnC,GAC7BrnC,KAAKqnC,MAAkB,KAAVA,GAAsB56B,EAAiB46B,oCAWtD7nC,OAAAsE,eAAwB84C,EAAA18C,UAAA,aAAU,KAAlC,SAAmCoxC,GACjCtxC,KAAKsxC,QAAUA,EAEftxC,KAAK2gB,iDAmBPnhB,OAAAsE,eAA0B84C,EAAA18C,UAAA,YAAS,KAYnC,WACE,OAAOF,KAAKi9C,gBAbd,SAAoC17C,GAC7BgoC,MAAMx8B,SAAQ,EAAc,KAIrBxL,IACVvB,KAAKi9C,WAAa14C,UAElBvE,KAAK2gB,kBANL3gB,KAAKi9C,WAAalwC,SAAQ,EAAc,IAExC/M,KAAK2gB,kDAmBTnhB,OAAAsE,eAA0B84C,EAAA18C,UAAA,YAAS,KAYnC,WACE,OAAOF,KAAKk9C,gBAbd,SAAoC37C,GAC7BgoC,MAAMx8B,SAAQ,EAAc,KAIrBxL,IACVvB,KAAKk9C,WAAa34C,UAElBvE,KAAK2gB,kBANL3gB,KAAKk9C,WAAanwC,SAAQ,EAAc,IAExC/M,KAAK2gB,kDAsBTnhB,OAAAsE,eAAqB84C,EAAA18C,UAAA,UAAO,KAA5B,SAA6BgxC,GAC3BlxC,KAAKkxC,KAAOA,EAGZlxC,KAAKi1C,QAAU,IAAIhE,GAAQjxC,KAAKkxC,KAAMlxC,KAAK88C,iBAE3C98C,KAAK2gB,iDAWPnhB,OAAAsE,eAAkC84C,EAAA18C,UAAA,qBAAkB,KAApD,SAAqD48C,GACnD98C,KAAK88C,gBAAsC,KAApBA,GAAgCrwC,EAAiBqwC,GAEpE98C,KAAKi1C,mBAAmBhE,KAC1BjxC,KAAKi1C,QAAQ9D,YAAcnxC,KAAK88C,gBAEhC98C,KAAK2gB,kDAsCTi8B,EAAA18C,UAAAs1C,aAAA,SAAaj0C,GACXvB,KAAKurC,YAAYhqC,GAEjBvB,KAAKm9C,0BAA0B57C,IAGjCq7C,EAAA18C,UAAAk9C,2BAAA,SAA2B77C,GAA3B,IAAAmE,EAAA1F,KACE6I,WAAU,WAAO,OAAAnD,EAAK6lC,YAAYhqC,MAGpCq7C,EAAA18C,UAAAi9C,0BAAA,SAA0B57C,GACpBvB,KAAKq9C,kBAAoB97C,IAC3BvB,KAAK+8C,YAAYhrC,KAAKxQ,GACtBvB,KAAKq9C,gBAAkB97C,IAM3Bq7C,EAAA18C,UAAAkgB,iBAAA,SAAiBE,GACftgB,KAAKg9C,kBAAoB18B,GAK3Bs8B,EAAA18C,UAAAmgB,kBAAA,SAAkBC,GAChBtgB,KAAK2a,UAAY2F,GAGnBs8B,EAAA18C,UAAAqgB,0BAAA,SAA0BjT,GACxBtN,KAAKwgB,gBAAkBlT,GAGzBsvC,EAAA18C,UAAAqrC,YAAA,SAAYhqC,GAENvB,KAAKg9C,mBACPh9C,KAAKg9C,kBAAkBz7C,IAI3Bq7C,EAAA18C,UAAA2gB,SAAA,SAASC,GAEP,OAAIujB,GAAerkC,KAAKskC,SAAUtkC,KAAKwxB,SAAUxxB,KAAKs9C,kBAC7C,CAAEhZ,SAAU,CACjBC,OAAO,IAIPC,GAAgBxkC,KAAKykC,UAAWzkC,KAAKs9C,kBAChC,CAAE7Y,UAAW,CAClBF,OAAO,IAIPK,GAAgB5kC,KAAK6kC,UAAW7kC,KAAKs9C,kBAChC,CAAEzY,UAAW,CAClBN,OAAO,IfpSf,SAA8B+M,EAAiB/vC,OACzCg8C,EACJ,IACEA,EAAM,IAAIhxC,OAAO+kC,GACjB,MAAO5vC,GACP,OAAO,EAET,OAAQ4vC,GAAW/vC,IAAUg8C,EAAI/wC,KAAKjL,GeiShCi8C,CAAcx9C,KAAKsxC,QAASxwB,EAAEvf,QAChCvB,KAAKy9C,4BAA4B38B,EAAEvf,OAC5B,CAAE+vC,QAAS,CAChB/M,OAAO,KAIJvkC,KAAK09C,gBAAgB58B,IAI9B87B,EAAA18C,UAAA6gB,WAAA,SAAWxf,GACTvB,KAAK29C,gBAAgBp8C,IAGbq7C,EAAA18C,UAAAygB,cAAV,WACM3gB,KAAKwgB,iBACPxgB,KAAKwgB,mBAcDo8B,EAAA18C,UAAAu9C,4BAAR,SAAoCl8C,GAApC,IAAAmE,EAAA1F,KACMuB,GAASvB,KAAK68C,mBAEhBh0C,WAAU,WACRnD,EAAK6lC,YAAYhqC,KAGnBvB,KAAK68C,kBAAmB,kCAzT3B74C,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,wBAGND,EAAAA,MAAKC,KAAA,CAAC,6BAWND,EAAAA,MAAKC,KAAA,CAAC,sCAeND,EAAAA,MAAKC,KAAA,CAAC,mCAQND,EAAAA,MAAKC,KAAA,CAAC,mCAcND,EAAAA,MAAKC,KAAA,CAAC,gCAQND,EAAAA,MAAKC,KAAA,CAAC,6BAMND,EAAAA,MAAKC,KAAA,CAAC,+BAYND,EAAAA,MAAKC,KAAA,CAAC,mCAaND,EAAAA,MAAKC,KAAA,CAAC,sCASND,EAAAA,MAAKC,KAAA,CAAC,kCAuBND,EAAAA,MAAKC,KAAA,CAAC,gCA0BND,EAAAA,MAAKC,KAAA,CAAC,sCAiBND,EAAAA,MAAKC,KAAA,CAAC,yCAuBND,EAAAA,MAAKC,KAAA,CAAC,4BAGN2N,EAAAA,OAAM3N,KAAA,CAAC,yBAGP2N,EAAAA,OAAM3N,KAAA,CAAC,2BAGP2N,EAAAA,OAAM3N,KAAA,CAAC,iCAGP2N,EAAAA,OAAM3N,KAAA,CAAC,qBA+GV24C,EA/UA,GChBMgB,GAAsC,EACtCC,GAAyC,GAsC/CC,GAAA,SAAA35C,GA0EE,SAAA25C,EAAoB/4B,GAApB,IAAArf,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAqf,GAAAA,EAxDZrf,EAAAq4C,gBAA2BH,GAC3Bl4C,EAAAs4C,mBAA8BH,GAE9Bn4C,EAAAu4C,iBAA2B,IAC3Bv4C,EAAAw4C,YAAsB,EACtBx4C,EAAAy4C,mBAA6B,EAC7Bz4C,EAAA04C,UAAoB,IACpB14C,EAAA24C,cAAgB,KAChB34C,EAAA44C,kBAA4B,IAG5B54C,EAAA0uC,MAAQ,CACdmK,SAAU,IAAIhyC,OAAO,MAAa,KAClCiyC,QAAS,IAAIjyC,OAAO,MAAa,MA6CjC7G,EAAKy4C,oBAAsBlyC,UAAU+C,UAAUC,MAAM,cA4azD,OAxeyC7K,EAAAA,EAAAA,GA6BvC5E,OAAAsE,eAAgCg6C,EAAA59C,UAAA,iBAAc,KAK9C,WACE,OAAOF,KAAK+9C,qBANd,SAA+Cx8C,GAC7CvB,KAAK+9C,gBAAkBnxC,EAAarL,EAAOq8C,qCAiB7Cp+C,OAAAsE,eAAmCg6C,EAAA59C,UAAA,oBAAiB,KAOpD,WACE,OAAOF,KAAKg+C,wBARd,SAAqDz8C,OAC7Ck9C,EAAoB7xC,EAAarL,EAAOs8C,IAE9C79C,KAAKg+C,mBAAqBS,GAAqBZ,GAC/CY,EAAoBZ,oCAYtBC,EAAA59C,UAAAsG,gBAAA,WACExG,KAAK0+C,WACL1+C,KAAK2+C,mBAGPb,EAAA59C,UAAA2mC,MAAA,SAAMtlC,GACJvB,KAAKw1C,aAAaj0C,GAClBvB,KAAK82C,wBAGPgH,EAAA59C,UAAAw9C,gBAAA,SAAgB58B,GACd,OAAO,MAGTg9B,EAAA59C,UAAAo9C,eAAA,WACE,OAAQt9C,KAAY,QAAIA,KAAK81C,QAAQlvC,cAAcrF,MAAQ,IAG7Du8C,EAAA59C,UAAAy2C,gBAAA,WACE,OACE32C,KAAK+kB,GAAGne,cAAcsf,UAAU7e,SAAS,eACzCrH,KAAK+kB,GAAGne,cAAcsf,UAAU7e,SAAS,aACf,KAA1BrH,KAAKs9C,kBAITQ,EAAA59C,UAAA0+C,WAAA,SAAWr9C,GACT,YADS,IAAAA,IAAAA,EAAA,IACFA,EAAM0N,MAAM,sCAGrB6uC,EAAA59C,UAAA2+C,cAAA,SAAc34C,OAEN44C,EAAiB5D,OAAO6D,aAAa74C,EAAMkJ,OAC3C4vC,EAA2B,IAAhB94C,EAAMkJ,OAA+B,IAAhBlJ,EAAMkJ,MAE5C,OAAQpP,KAAK4+C,WAAWE,IAAaE,GAIvClB,EAAA59C,UAAA+5C,OAAA,SAAO/zC,OACC3E,EAAQ2E,EAAMoB,OAAO/F,MAE3B,GAAIA,EAAO,CAET,GAAIvB,KAAK4+C,WAAWr9C,IAAUvB,KAAKi/C,yBAAyB19C,GAG1D,OAFAvB,KAAKk/C,aAAa,SAClBl/C,KAAKw1C,aAAajxC,eAId46C,EAAgCn/C,KAAKo/C,oCAAoC79C,GAC/EvB,KAAKk/C,aAAal/C,KAAKq/C,kBAAkBF,IAG3Cn/C,KAAK+yC,KAAKhhC,OACV/R,KAAK82C,wBAGPgH,EAAA59C,UAAAi6C,QAAA,SAAQj0C,GAENlG,KAAK62C,kBAAoB72C,KAAKs9C,iBAI9Bt9C,KAAK6nC,MAAM91B,QAGb+rC,EAAA59C,UAAAo/C,QAAA,SAAQp5C,OAIFq5C,EACAC,EAJE3M,EAAiB3sC,EAAMoB,OAAOurC,eAC9BC,EAAe5sC,EAAMoB,OAAOwrC,aAM9B9yC,KAAKm+C,mBACPn+C,KAAKy/C,uBAAuBv5C,GAG9Bq5C,EAAav/C,KAAKo/C,oCAAoCl5C,EAAMoB,OAAO/F,OACnEg+C,EAAav/C,KAAK0/C,cAAcH,IAChCC,EAAYx/C,KAAK2/C,WAAWJ,MAI1Bv/C,KAAKk/C,aAAaM,GAClBx/C,KAAK4/C,eAAe15C,EAAO2sC,EAAgBC,IAG7C9yC,KAAKw1C,aAAax1C,KAAK6/C,mBAAmBN,KAG5CzB,EAAA59C,UAAAu/C,uBAAA,SAAuBv5C,OACfwlC,EAAaxlC,EAAMoB,OAAO/F,MAC1BsxC,EAAiB3sC,EAAMoB,OAAOurC,eAC9B+L,EAAa5+C,KAAK4+C,WAAWlT,GAEnC,GAAIkT,EAGF,OAFA5+C,KAAKk/C,aAAaxT,EAAWv7B,QAAQyuC,EAAW,GAAI,KAE7C14C,EAAMguB,qBAEP3hB,EAAWsgC,EAAiB,EAC5BvW,EAAMoP,EAAWx6B,OAAOqB,GAE9BvS,KAAK8/C,iBAAiB55C,GAElBlG,KAAK+5C,WAAW7zC,EAAOo2B,IACzBt8B,KAAKk/C,aAAaxT,IAKxBoS,EAAA59C,UAAAssB,WAAA,SAAWtmB,GACTlG,KAAK+5C,WAAW7zC,IAGlB43C,EAAA59C,UAAAy+C,gBAAA,WAAA,IAAAj5C,EAAA1F,KACE6I,WAAU,eAEJk2B,EAAQr5B,EAAKqf,GAAGne,cAAcsB,iBADZ,6EAC4CvH,OAC9D+E,EAAK2hC,OACPtI,IAEEA,IACFr5B,EAAKowC,QAAQlvC,cAAc0O,MAAMyqC,aAA0B,GAARhhB,EAAU,SAKnE+e,EAAA59C,UAAAy9C,gBAAA,SAAgBp8C,GACd,GAAIvB,KAAK81C,QACP,GAAIv0C,GAAmB,IAAVA,EAAa,KAClBy+C,EAAoBhgD,KAAKq/C,kBAAkB99C,GACjDvB,KAAKk/C,aAAac,QAElBhgD,KAAKk/C,aAAa,IAIlB39C,GACFvB,KAAK8a,OAAO/I,KAAKxQ,IAKbu8C,EAAA59C,UAAAw/C,cAAR,SAAsBn+C,GAGpB,OAF2BA,IAAUvB,KAAKi+C,iBAEd,IAAI18C,EAAUA,GAGpCu8C,EAAA59C,UAAA+/C,cAAR,SAAsB1+C,GACpB,OAAOA,EAAMwC,SAAS/D,KAAKi+C,mBAGrBH,EAAA59C,UAAA++C,yBAAR,SAAiC19C,QAAA,IAAAA,IAAAA,EAAA,QACzB2+C,EAAa3+C,EAAM0N,MAAM,MAE/B,SAAUixC,GAAcA,EAAWv/C,OAAS,IAGtCm9C,EAAA59C,UAAA42C,qBAAR,WAAA,IAAApxC,EAAA1F,KACQk3C,EAAel3C,KAAKs9C,iBAKtBpG,IAAiBl3C,KAAK62C,oBACxB72C,KAAKk+C,YAAa,EAClBr1C,WAAU,WACJnD,EAAKw4C,YACPx4C,EAAKoV,OAAO/I,KAAKmlC,IAElB,OAIC4G,EAAA59C,UAAAy/C,WAAR,SAAmBp+C,GAKjB,GAAIA,EAAM0N,MAAMjP,KAAKo0C,MAAMoK,SAAU,KAC7BpK,EAAQ,IAAI7nC,OAAO,6BAA8B,KACvD,OAAOhL,EAAMsN,WAAWsB,QAAQikC,EAAO,OAGzC,OAAO7yC,EAAMsN,WAAWsB,QAAQ,0BAA2B,QAGrD2tC,EAAA59C,UAAA2/C,mBAAR,SAA2Bt+C,OACnB4+C,EAAiBngD,KAAKogD,kBAAkB7+C,GACxC+nC,EAAc6W,EAAiB5f,WAAWoE,OAAOwb,GAAgBE,QAAQrgD,KAAKsgD,iBAAmB/7C,UAEvG,OAAuB,IAAhB+kC,GAAqBA,EAAcA,EAAc/kC,WAGlDu5C,EAAA59C,UAAAm/C,kBAAR,SAA0B99C,OACpBg/C,EACAC,EACAC,EACAC,EAYJ,OATAn/C,EAAQvB,KAAKogD,kBAAkB7+C,GAE/Bi/C,EAAc7b,OAAOpjC,GAAO8+C,QAAQrgD,KAAKsgD,gBAEzCG,EAAiBzgD,KAAK2gD,wBAAwBH,EAAaxgD,KAAKs+C,mBAChEoC,EAAgB1gD,KAAK4gD,uBAAuBJ,EAAaxgD,KAAKs+C,mBAE9DiC,EAAiBvgD,KAAK2/C,WAAWc,GAEL,IAAxBzgD,KAAKsgD,eACAC,EAEAA,EAAiBvgD,KAAKi+C,iBAAmByC,GAK5C5C,EAAA59C,UAAAk/C,oCAAR,SAA4C79C,GAC1C,YAD0C,IAAAA,IAAAA,EAAA,IACnCA,EAAMsN,WAAWsB,QAAQnQ,KAAKo0C,MAAMmK,SAAU,KAG/CT,EAAA59C,UAAA0gD,uBAAR,SAA+Br/C,EAAYs/C,GACzC,YAD6B,IAAAt/C,IAAAA,EAAA,IACtBA,EAAMkd,MAAMoiC,GAAW,IAAM,IAG9B/C,EAAA59C,UAAAygD,wBAAR,SAAgCp/C,EAAYs/C,GAC1C,YAD8B,IAAAt/C,IAAAA,EAAA,IACvBA,EAAMkd,MAAMoiC,GAAW,IAAM,IAG9B/C,EAAA59C,UAAA4gD,WAAR,SAAmBv/C,GACjB,GAAIA,EAAO,KACHw/C,EAAOx/C,EAAM0N,MAAMjP,KAAKo0C,MAAMmK,UAC9ByC,EAAaD,GAAQA,EAAKpgD,OAEhC,GAAIqgD,EAAahhD,KAAKq+C,cAEpB,OADAr+C,KAAKq+C,cAAgB2C,GACd,EAMX,OAFKz/C,IAASvB,KAAKq+C,cAAgB,OAE5B,GAGDP,EAAA59C,UAAA+gD,WAAR,SAAmB1/C,GACjB,GAAIA,EAAO,KACHw/C,EAAOx/C,EAAM0N,MAAMjP,KAAKo0C,MAAMmK,UAC9ByC,EAAaD,GAAQA,EAAKpgD,OAEhC,GAAIqgD,EAAahhD,KAAKq+C,cAElB,OADAr+C,KAAKq+C,cAAgB2C,GACd,EAMb,OAFKz/C,IAASvB,KAAKq+C,cAAgB,OAE5B,GAGDP,EAAA59C,UAAAghD,4BAAR,SAAoCh7C,OAC5Bi7C,EAAiBj7C,EAAMo2B,MAAQt8B,KAAKo+C,UACpCvL,EAAiB3sC,EAAMoB,OAAOurC,eAEpC,OAAOsO,GAAqC,IAAnBtO,GAGnBiL,EAAA59C,UAAAkhD,aAAR,SAAqBl7C,EAAYm7C,OACzBC,GAAmBthD,KAAK6+C,cAAc34C,GAE5C,OAAOlG,KAAKuhD,kBAAkBr7C,IAAUlG,KAAKwhD,qBAAqBt7C,IAChElG,KAAKyhD,sBAAsBv7C,IAAUlG,KAAK0hD,sBAAsBx7C,IAChElG,KAAKkhD,4BAA4Bh7C,IAAUo7C,GAC3CthD,KAAK2hD,sCAAsCz7C,IAAUlG,KAAK4hD,8CAA8CP,IAGpGvD,EAAA59C,UAAA2hD,sBAAR,SAA8B37C,GAC5B,OAAOA,EAAMo2B,MAAQt8B,KAAKi+C,kBAAoB/3C,EAAMmuC,OAASr0C,KAAKi+C,kBAG5DH,EAAA59C,UAAA4hD,gCAAR,SAAwCC,EAAgBxgD,OAChDygD,EAAazgD,GAASA,EAAMyS,QAAQhU,KAAKi+C,kBAE/C,GAAI+D,GAAchiD,KAAKsgD,eAAiB,EACtC,OAAOyB,EAAiBC,GAIpBlE,EAAA59C,UAAA+hD,sCAAR,SAA8C36C,GAC5C,OAAOA,EAAOurC,iBAAmBvrC,EAAOwrC,cAGlCgL,EAAA59C,UAAA65C,WAAR,SAAmB7zC,EAAYo2B,OACvB+kB,EAAWn7C,EAAMkJ,OAASlJ,EAAMiJ,QAGtC,KAFiC,IAAhBjJ,EAAMkJ,OAA+B,IAAhBlJ,EAAMkJ,QAE3BpP,KAAKm+C,kBAQtB,OAJI7hB,IACFp2B,EAAMo2B,IAAMA,IAGVt8B,KAAKohD,aAAal7C,EAAOm7C,KAC3Bn7C,EAAMguB,kBACC,IAMH4pB,EAAA59C,UAAA0hD,8CAAR,SAAsDP,GACpD,OAAqB,KAAbA,GAA2C,IAAxBrhD,KAAKsgD,gBAG1BxC,EAAA59C,UAAAw+C,SAAR,WACM1+C,KAAKg0B,OACPh0B,KAAK81C,QAAQlvC,cAAcotB,SAIvB8pB,EAAA59C,UAAAgiD,yBAAR,SAAiC56C,EAAaurC,EAAgBC,GAC5D,OAAuB,IAAnBD,GAAyC,IAAjBC,EACnBxrC,EAAOyqC,kBAAkBc,EAAiB,EAAGC,EAAe,GAE9DxrC,EAAOyqC,kBAAkBc,EAAiB,EAAGC,EAAe,IAG7DgL,EAAA59C,UAAAiiD,UAAR,SAAkB5gD,EAAOyT,EAAO7E,GAC9B,OAAO5O,EAAM8K,UAAU,EAAG2I,GAAS7E,EAAU5O,EAAM8K,UAAU2I,EAAQ,IAG/D8oC,EAAA59C,UAAAkgD,kBAAR,SAA0B7+C,GACxB,YADwB,IAAAA,IAAAA,EAAA,IACjBA,EAAMsN,WAAWsB,QAAQnQ,KAAKo0C,MAAMoK,QAAS,MAG9CV,EAAA59C,UAAA0/C,eAAR,SAAuB15C,EAAO2sC,EAAgBC,OACtCxrC,EAASpB,EAAMoB,OACfk4C,EAAYl4C,EAAO/F,MAGzB,OAAIvB,KAAKihD,WAAWzB,IAAcA,IAAe,IAAMx/C,KAAKi+C,iBACnD32C,EAAOyqC,kBAAkBc,EAAiB,EAAGC,EAAe,IAIjE9yC,KAAK8gD,WAAWtB,IAClBx/C,KAAKkiD,yBAAyB56C,EAAQurC,EAAgBC,GAEjDxrC,EAAOyqC,kBAAkBc,EAAgBC,KAG1CgL,EAAA59C,UAAA4/C,iBAAR,SAAyB55C,OACjB3E,EAAQ2E,EAAMoB,OAAO/F,MACrBgR,EAAWrM,EAAMoB,OAAOurC,eAAiB,EAE3CtgC,EAAW,GAAKrM,EAAMo2B,MAAQt8B,KAAKo+C,YACrCl4C,EAAMoB,OAAO/F,MAAQA,EAAM8K,UAAU,EAAGkG,GAAYhR,EAAM6gD,OAAO7vC,EAAW,KAIxEurC,EAAA59C,UAAAg/C,aAAR,SAAqB39C,GACnBvB,KAAK81C,QAAQlvC,cAAcrF,MAAQA,GAG7Bu8C,EAAA59C,UAAAyhD,sCAAR,SAA8Cz7C,OACtCoB,EAASpB,EAAMoB,OACf+6C,EAAgBriD,KAAKo/C,oCAAoC93C,EAAO/F,OAChE+gD,EAAuBtiD,KAAK2gD,wBAAwBr5C,EAAO/F,MAAOvB,KAAKi+C,kBACvEsE,EAA+BviD,KAAK2gD,wBAAwB0B,EAAeriD,KAAKi+C,kBAEtF,OAAIj+C,KAAKiiD,sCAAsC36C,KAGxCA,EAAOurC,gBAAkByP,EAAqB3hD,QACrD4hD,EAA6B5hD,SAAWX,KAAKy+C,oBAC5Cz+C,KAAK6hD,sBAAsB37C,KAGtB43C,EAAA59C,UAAAshD,qBAAR,SAA6Bt7C,OACrBoB,EAASpB,EAAMoB,OACf+6C,EAAgBriD,KAAKo/C,oCAAoC93C,EAAO/F,OAChEghD,EAA+BviD,KAAK2gD,wBAAwB0B,EAAeriD,KAAKi+C,kBAEtF,OAAIj+C,KAAKiiD,sCAAsC36C,KAGxCi7C,EAA6B5hD,QAAUX,KAAKy+C,oBAChDz+C,KAAK6hD,sBAAsB37C,IAC5BlG,KAAK8hD,gCAAgCx6C,EAAOurC,eAAiB7yC,KAAKsgD,eAAgBh5C,EAAO/F,SAGrFu8C,EAAA59C,UAAAqhD,kBAAR,SAA0B7/C,GAGxB,OAFiB1B,KAAKigD,cAAcv+C,EAAE4F,OAAO/F,QAE1BG,EAAE46B,MAAQt8B,KAAKi+C,kBAG5BH,EAAA59C,UAAAwhD,sBAAR,SAA8Bx7C,OACtB3E,EAAQ2E,EAAMoB,OAAO/F,MACrBihD,GAAyD,IAAvCjhD,EAAM8zB,YAAYr1B,KAAKo+C,WACzCqE,EAAoBlhD,EAAM8zB,YAAY,KACtCqtB,EAAsBnhD,EAAM0N,MAAM,IAAI1C,OAAO,IAAK,MAKxD,OAHIvM,KAAKm+C,mBAAqBqE,GAAkBE,EAAoB/hD,OAAS,IAC3EuF,EAAMoB,OAAO/F,MAAQvB,KAAKmiD,UAAU5gD,EAAOkhD,EAAmB,KAEzDD,GAAkBt8C,EAAMo2B,MAAQt8B,KAAKo+C,WAGtCN,EAAA59C,UAAAuhD,sBAAR,SAA8Bv7C,OACtB3E,EAAQ2E,EAAMoB,OAAO/F,MACrBsxC,EAAiB3sC,EAAMoB,OAAOurC,eAC9B8P,EAAsB3iD,KAAK4gD,uBAAuBr/C,EAAOvB,KAAKi+C,kBAEpE,OAAOj+C,KAAK8hD,gCAAgCjP,EAAgBtxC,IAAUohD,EAAoBhiD,QAAUX,KAAKsgD,oCArf5G77C,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,cACVC,SAAA,mgCACA4G,UAAW,CACX,CACE8W,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAs7B,IAC9Br7B,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAAs7B,IAC9Br7B,OAAO,iDAzDwBvZ,EAAAA,+CA+EhCE,EAAAA,UAASnF,KAAA,CAAC,MAAO,CAACoF,KAAMH,EAAAA,WAAYI,UAAQ,4BAW5CtF,EAAAA,MAAKC,KAAA,CAAC,gDAkBND,EAAAA,MAAKC,KAAA,CAAC,2BAybT65C,EAxfA,CAgByClB,ICxDzCgG,GAAA,SAAAz+C,GAUE,SAAAy+C,EAAY79B,GAAZ,IAAArf,EACEvB,EAAAvD,KAAAZ,OAAOA,YAPT0F,EAAA0H,KAAO,OASL1H,EAAKqf,GAAKA,IAiLd,OA9L8C3gB,EAAAA,EAAAA,GAgB5Cw+C,EAAA1iD,UAAAsG,gBAAA,WACExG,KAAK6iD,iBAGPD,EAAA1iD,UAAA2iD,cAAA,WACE7iD,KAAK0+C,WACa,aAAd1+C,KAAKoN,MACPpN,KAAK2+C,mBAITiE,EAAA1iD,UAAAy+C,gBAAA,WAAA,IAAAj5C,EAAA1F,KACE6I,WAAU,eAEJk2B,EAAQr5B,EAAKqf,GAAGne,cAAcsB,iBADZ,6EAC4CvH,OAC9D+E,EAAK2hC,OACPtI,IAEEA,IACFr5B,EAAKowC,QAAQlvC,cAAc0O,MAAMyqC,aAA0B,GAARhhB,EAAU,SAKnE6jB,EAAA1iD,UAAAw+C,SAAA,WACM1+C,KAAKg0B,OACPh0B,KAAK81C,QAAQlvC,cAAcotB,SAIM4uB,EAAA1iD,UAAAw2C,UAArC,SAA+Ch1C,GACzC1B,KAAKkxC,OAASlxC,KAAKsnC,UAAiC,MAArB5lC,EAAE4F,OAAO6H,UAC1CnP,KAAK+2C,YAAYr1C,GACjB1B,KAAKi1C,QAAQ/C,QAAQxwC,KAIUkhD,EAAA1iD,UAAAu2C,QAAnC,SAA2C/0C,GACrC1B,KAAKkxC,OAASlxC,KAAKsnC,WACI,MAArB5lC,EAAE4F,OAAO6H,UACXnP,KAAK+2C,YAAYr1C,GACjB1B,KAAKi1C,QAAQvD,MAAMhwC,IAErB1B,KAAKw1C,aAAax1C,KAAKi1C,QAAQxD,gBAInCmR,EAAA1iD,UAAA4iD,aAAA,SAAaphD,GACX,IAAK1B,KAAKkxC,KAAM,KACR3vC,EAAQvB,KAAK+iD,eAAe/iD,KAAKykC,UAAW/iC,EAAE4F,OAAO/F,OAC3DvB,KAAK81C,QAAQlvC,cAAcrF,MAAQA,EACnCvB,KAAKw1C,aAAaj0C,KAItBqhD,EAAA1iD,UAAA6iD,eAAA,SAAete,EAAmBljC,GAChC,OAASkjC,GAA2B,IAAdA,IAAoBljC,EAAMZ,OAAS8jC,EAAaljC,EAAMsN,WAAWxC,UAAU,EAAGo4B,GAAaljC,GAGnHqhD,EAAA1iD,UAAA8iD,aAAA,SAAathD,GAEX1B,KAAK62C,kBAAoB72C,KAAK81C,QAAQlvC,cAAcrF,MAIpDvB,KAAK6nC,MAAM91B,QAGb6wC,EAAA1iD,UAAA62C,YAAA,SAAYr1C,GACN1B,KAAKkxC,MACPlxC,KAAKi1C,QAAQlC,KAAKrxC,GAGL,SAAXA,EAAE0L,OACJpN,KAAK+yC,KAAKhhC,OACV/R,KAAK82C,yBAKT8L,EAAA1iD,UAAA42C,qBAAA,WAAA,IAAApxC,EAAA1F,KACQk3C,EAAel3C,KAAK81C,QAAQlvC,cAAcrF,MAK5C21C,IAAiBl3C,KAAK62C,oBACxBluC,aAAa3I,KAAKy3C,eAClBz3C,KAAKy3C,cAAgB5uC,WAAU,WAC7BnD,EAAKoV,OAAO/I,KAAKmlC,IAChB,OAIP0L,EAAA1iD,UAAAk3C,aAAA,SAAa11C,GAEP1B,KAAKkxC,MACPlxC,KAAKi1C,QAAQvjC,MAAMhQ,IAIvBkhD,EAAA1iD,UAAAy2C,gBAAA,WACE,OACE32C,KAAK+kB,GAAGne,cAAcsf,UAAU7e,SAAS,eACzCrH,KAAK+kB,GAAGne,cAAcsf,UAAU7e,SAAS,aACJ,KAArCrH,KAAK81C,QAAQlvC,cAAcrF,OAI/BqhD,EAAA1iD,UAAA02C,gBAAA,WACE,MAA8B,KAAtB52C,KAAK80C,cAAuB90C,KAAK22C,kBAAqB32C,KAAK80C,aAAe,IAGpF8N,EAAA1iD,UAAA+iD,0BAAA,eACQ1hD,EAAQvB,KAAKs9C,iBACb93C,EAAUxF,KAAK+kB,GAAGne,cAEpBrF,IAAUvB,KAAKkjD,cAAcljD,KAAKsxC,QAAS/vC,IAC7CiE,EAAQ0gB,UAAU+a,IAAI,cACtBz7B,EAAQ0gB,UAAU+a,IAAI,aAEtBz7B,EAAQ0gB,UAAUgb,OAAO,eAI7B0hB,EAAA1iD,UAAAgjD,cAAA,SAAc5R,EAAiB/vC,GAC7B,OAAO,IAAIgL,OAAO+kC,GAAS9kC,KAAKjL,IAGlCqhD,EAAA1iD,UAAA2mC,MAAA,SAAMtlC,GACJvB,KAAKw1C,aAAaj0C,GAClBvB,KAAK82C,wBAGP8L,EAAA1iD,UAAAy9C,gBAAA,SAAgBp8C,GACdvB,KAAK68C,kBAAmB,EACpB78C,KAAK81C,UACHv0C,EACEvB,KAAKkxC,MACPlxC,KAAK81C,QAAQlvC,cAAcrF,MAAQvB,KAAKi1C,QAAQrD,kBAAkBsJ,OAAO35C,IAGrEvB,KAAKi1C,QAAQ9D,aACfnxC,KAAKo9C,2BAA2Bp9C,KAAKi1C,QAAQxD,eAI/CzxC,KAAK81C,QAAQlvC,cAAcrF,MAAQA,EAIrCvB,KAAK81C,QAAQlvC,cAAcrF,MAAQ,IAKnCA,GACFvB,KAAK+8C,YAAYhrC,KAAKxQ,IAI1BqhD,EAAA1iD,UAAAo9C,eAAA,eACQ6F,EAAcnjD,KAAK81C,SAAW91C,KAAK81C,QAAQlvC,cAAcrF,OAASgD,UAExE,GAAkB,WAAdvE,KAAKoN,KAAmB,KACpBk8B,EAAc/I,WAAW4iB,GAC/B,OAAO7Z,GAA+B,IAAhBA,EAAoBA,EAAc,KAExD,OAAO6Z,oCAtLV/5C,EAAAA,UAASnF,KAAA,CAAC,MAAO,CAACoF,KAAMH,EAAAA,WAAYI,UAAQ,uBA4C5CiP,EAAAA,aAAYtU,KAAA,CAAC,UAAW,CAAC,4BAOzBsU,EAAAA,aAAYtU,KAAA,CAAC,QAAS,CAAC,cAyI1B2+C,EA9LA,CAA8ChG,IC0B9CwG,GAAA,SAAAj/C,GA8BE,SAAAi/C,EAAYr+B,GAAZ,IAAArf,EACEvB,EAAAvD,KAAAZ,KAAM+kB,IAAG/kB,YAbX0F,EAAAyrB,KAAO,gBAEPzrB,EAAA++B,UAAoB,IAEpB/+B,EAAA0H,KAAO,QAEP1H,EAAA4rC,QAAU,6FAEV5rC,EAAAwrC,KAAO,GAECxrC,EAAA29C,SAAW39C,EAAKu9C,0BAA0B9kC,KAAKzY,KAwBzD,OApCuCtB,EAAAA,EAAAA,GAkBrCg/C,EAAAljD,UAAAsG,gBAAA,WAAA,IAAAd,EAAA1F,KACE6I,WAAU,WAEHnD,EAAKs3C,mBACRt3C,EAAKowC,QAAQlvC,cAAc6Q,iBAAiB,QAAS/R,EAAK29C,aAKhED,EAAAljD,UAAA+G,YAAA,WACOjH,KAAKg9C,mBACRh9C,KAAK81C,QAAQlvC,cAAcuR,oBAAoB,QAASnY,KAAKqjD,WAI/DD,EAAAljD,UAAAw9C,gBAAA,SAAgB58B,GAChB,OAAO,0BAlDVrc,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,YACVC,SAAA,4jCACA4G,UAAW,CACT,CACE8W,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAA4gC,IAC9B3gC,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAA4gC,IAC9B3gC,OAAO,iDA3CsBvZ,EAAAA,cAmFnCk6C,EApDA,CAgBuCR,ICtCvCU,GAAA,WAAA,SAAAA,IAMUtjD,KAAAujD,WAAqB,EA6B/B,OApBE/jD,OAAAsE,eAAyBw/C,EAAApjD,UAAA,WAAQ,KAIjC,WACE,OAAOF,KAAKujD,eALd,SAAkChiD,GAChCvB,KAAKujD,UAAY92C,EAAiBlL,oCAOpC+hD,EAAApjD,UAAAsjD,gBAAA,WASE,MANiB,CACf1nC,GAAI,aACJC,GAAI,aACJC,GAAI,cALkBlQ,0BAxB3BrH,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,sBACVC,SAAA,mYAOCX,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,4BAGND,EAAAA,MAAKC,KAAA,CAAC,iBAoBTq/C,EAnCA,GCCAG,GAAA,WAAA,SAAAA,IAU4BzjD,KAAA80C,aAAwB,GAEpD,2BAZCrwC,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,6BACVC,SAAA,oSAQCX,EAAAA,MAAKC,KAAA,CAAC,sBAETw/C,EAZA,GCmBAC,GAAA,SAAAv/C,GAmBE,SAAAu/C,EAAY3+B,GAAZ,IAAArf,EACEvB,EAAAvD,KAAAZ,KAAM+kB,IAAG/kB,YAHX0F,EAAA0H,KAAO,SAUT,OAZuChJ,EAAAA,EAAAA,GAQrCs/C,EAAAxjD,UAAAw9C,gBAAA,SAAgB58B,GACd,OAAO,0BAxBVrc,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,YACVC,SAAA,4hCACA4G,UAAW,CACX,CACE8W,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAkhC,IAC9BjhC,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAAkhC,IAC9BjhC,OAAO,iDAzCSvZ,EAAAA,cAwDpBw6C,EA3BA,CAeuCd,IClBvCe,GAAA,WA8NE,SAAAA,EAAoBnZ,GAAAxqC,KAAAwqC,eAAAA,EA5NZxqC,KAAAsR,WAAsB,EAEtBtR,KAAA4jD,QAAmB,EACnB5jD,KAAAqlC,WAAsB,EAIpBrlC,KAAA6jD,SAAmB,GAGrB7jD,KAAAg9C,kBAAyB,KAEzBh9C,KAAA2a,UAAiB,KAyDD3a,KAAAmpC,YAAuB,GA+I5BnpC,KAAAwE,QAA8B,IAAImN,EAAAA,aAM/B3R,KAAAyZ,SAA+B,IAAI9H,EAAAA,aA0J3D,OA9OEnS,OAAAsE,eAA+B6/C,EAAAzjD,UAAA,gBAAa,KAK5C,WACE,OAAOF,KAAKopC,oBANd,SAA6CM,GAC3C1pC,KAAKopC,eAAiBM,EACtB1pC,KAAKuqC,WAAWvqC,KAAK0pC,gDA8BvBlqC,OAAAsE,eAAyB6/C,EAAAzjD,UAAA,WAAQ,KAMjC,WACE,OAAOF,KAAKqlC,eAPd,SAAkCf,GAChCtkC,KAAKqlC,UAAY54B,EAAiB63B,GAElCtkC,KAAK2gB,cAAc3gB,KAAKyxC,+CAe1BjyC,OAAAsE,eAAsB6/C,EAAAzjD,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAK4jD,YALd,SAA4B5vB,GAC1Bh0B,KAAK4jD,OAAwB,KAAf,GAA2Bn3C,EAAiBunB,oCAe5Dx0B,OAAAsE,eAAyB6/C,EAAAzjD,UAAA,WAAQ,KAIjC,WACE,OAAOF,KAAKsR,eALd,SAAkCkgB,GAChCxxB,KAAKsR,UAA8B,KAAlB,GAA8B7E,EAAiB+kB,oCAqBlEmyB,EAAAzjD,UAAA+G,YAAA,WAEMjH,KAAKiL,iBACPjL,KAAKiL,gBAAgBC,eAIzBy4C,EAAAzjD,UAAAmE,SAAA,WACErE,KAAK8jD,oBAGCH,EAAAzjD,UAAA4jD,iBAAR,WACM9jD,KAAK4pC,WACP5pC,KAAK+jD,gBAAkB,CAAC/jD,KAAK4pC,aAE7B5pC,KAAK+jD,gBAAkB,GAEvB/jD,KAAK+jD,gBAAkB/jD,KAAKw5B,QAAQ5f,OAAM,SAACpU,GAAW,OAAAA,EAAQokC,aAC3DxhC,IAAG,SAAC5C,GAAW,OAAAA,EAAQ6mB,aAI9Bs3B,EAAAzjD,UAAAqgB,0BAAA,SAA0BjT,GACxBtN,KAAKwgB,gBAAkBlT,GAKzBq2C,EAAAzjD,UAAAkgB,iBAAA,SAAiBE,GACftgB,KAAKg9C,kBAAoB18B,GAK3BqjC,EAAAzjD,UAAAmgB,kBAAA,SAAkBC,GAChBtgB,KAAK2a,UAAY2F,GAInBqjC,EAAAzjD,UAAA8jD,YAAA,SAAYC,GACVjkD,KAAKyxC,aAAewS,EAAcjkD,KAAK2pC,YAEvC3pC,KAAKw1C,aAAax1C,KAAKyxC,cACvBzxC,KAAKyZ,SAAS1H,KAAKkyC,IAGrBN,EAAAzjD,UAAAs1C,aAAA,SAAaj0C,GAEPvB,KAAKg9C,mBACPh9C,KAAKg9C,kBAAkBz7C,IAI3BoiD,EAAAzjD,UAAAgkD,WAAA,SAAW3iD,GAAX,IAAAmE,EAAA1F,KACwB,iBAAlB,IACFuB,EAAQA,EAAMoL,QAGF,KAAVpL,EACFvB,KAAKiL,gBAAkBjL,KAAK4K,QAAQiiC,iBAAiBtrC,EAAOvB,KAAKqqC,cAAc/+B,UAAS,SAAC9F,GACnFA,GACFE,EAAKm+C,SAAWr+C,EAAQE,EAAKkkC,YAC7BlkC,EAAKs+C,YAAYx+C,GACjBE,EAAKw5C,aAAax5C,EAAKy+C,kBAAkB3+C,GAAUA,IAEnDE,EAAK0+C,cAER,SAAE5gD,GACDkC,EAAK0+C,aACL1+C,EAAKlB,QAAQuN,KAAKvO,KAIpBxD,KAAKokD,cAITT,EAAAzjD,UAAA2gB,SAAA,SAASmlB,GACP,GAAI3B,GAAerkC,KAAKskC,SAAUtkC,KAAKwxB,SAAUwU,EAAgBzkC,OAC/D,MAAO,CACL+iC,SAAU,CACRC,OAAO,KAMfof,EAAAzjD,UAAA6gB,WAAA,SAAWxf,GACLA,GAASA,aAAiB/B,QAE5BQ,KAAK6jD,SAAWtiD,EAAMvB,KAAK4pC,YAC3B5pC,KAAKyxC,aAAelwC,EAAMvB,KAAK2pC,YAC/B3pC,KAAKk/C,aAAal/C,KAAKmkD,kBAAkB5iD,GAAQA,IACxCA,EAETvB,KAAKkkD,WAAW3iD,GAEhBvB,KAAKqkD,kBAUCV,EAAAzjD,UAAAkkD,WAAV,WACEpkD,KAAKqkD,iBACLrkD,KAAKw1C,aAAajxC,YAGVo/C,EAAAzjD,UAAAmkD,eAAV,WACErkD,KAAKk/C,aAAa,GAAI,IACtBl/C,KAAK6jD,SAAW,GAChB7jD,KAAKyxC,aAAe,MAIZkS,EAAAzjD,UAAAikD,kBAAV,SAA4B5iD,GAC1B,OAAOA,EAAQvB,KAAK+jD,gBAAgB37C,IAAG,SAACuuB,GAAU,OAAAp1B,EAAMo1B,KAAS7O,KAAK,OAAS,IAIvE67B,EAAAzjD,UAAAokD,YAAV,SAAsB/iD,GACpBvB,KAAK+gB,WAAWxf,GACZA,GAASA,aAAiB/B,QAC5BQ,KAAKgkD,YAAYziD,IAIXoiD,EAAAzjD,UAAAygB,cAAV,SAAwBC,GAClB5gB,KAAKwgB,iBACPxgB,KAAKwgB,gBAAgBI,IAIjB+iC,EAAAzjD,UAAAqqC,WAAR,SAAmB3/B,GAEbsC,EAAStC,EAAS,YACpB5K,KAAK4K,QAAO,GAGVA,GAAWsC,EAAStC,EAAS,YAC/B5K,KAAK4K,QAAU5K,KAAKwqC,eACpBxqC,KAAK4K,QAAQ25C,OAAO35C,oCAxVvB5G,EAAAA,MAAKC,KAAA,CAAC,6BAwCND,EAAAA,MAAKC,KAAA,CAAC,4BAGND,EAAAA,MAAKC,KAAA,CAAC,+BAGND,EAAAA,MAAKC,KAAA,CAAC,+BAGND,EAAAA,MAAKC,KAAA,CAAC,4BASND,EAAAA,MAAKC,KAAA,CAAC,qCAGND,EAAAA,MAAKC,KAAA,CAAC,uCAGND,EAAAA,MAAKC,KAAA,CAAC,wCAkBND,EAAAA,MAAKC,KAAA,CAAC,mCAMND,EAAAA,MAAKC,KAAA,CAAC,oCAuBND,EAAAA,MAAKC,KAAA,CAAC,sCAsBND,EAAAA,MAAKC,KAAA,CAAC,gCAUND,EAAAA,MAAKC,KAAA,CAAC,6BAkBND,EAAAA,MAAKC,KAAA,CAAC,6BAgBND,EAAAA,MAAKC,KAAA,CAAC,+BAYN2N,EAAAA,OAAM3N,KAAA,CAAC,6BAMP2N,EAAAA,OAAM3N,KAAA,CAAC,iBA0JV0/C,EAtXA,GCVAa,GAAA,WAKE,SAAAA,EAAoBC,GAAAzkD,KAAAykD,WAAAA,EAyBtB,OAvBED,EAAAtkD,UAAAitC,gBAAA,SAAgBvzB,EAAa8qC,EAAcC,EAAmBta,OACtDua,EAAwB5kD,KAAK6kD,eAAexa,GAElD,OAAOrqC,KAAKykD,WAAWl6C,IACrBvK,KAAK6J,IACL,CAAEC,OAAM1J,EAAA,CAAIskD,KAAMA,EAAK71C,WAAY81C,SAAUA,EAAS91C,YAAe+1C,EAAqB,CAAEhrC,OAAMA,OAItG4qC,EAAAtkD,UAAA2sC,iBAAA,SAAiBtrC,EAAe8oC,OACxBua,EAAwB5kD,KAAK6kD,eAAexa,GAElD,OAAOrqC,KAAKykD,WAAWl6C,IAAOvK,KAAK6J,IAAG,IAAItI,EAAS,CAAEuI,OAAQ86C,KAG/DJ,EAAAtkD,UAAAqkD,OAAA,SAAO16C,GACL7J,KAAK6J,IAAMA,GAGL26C,EAAAtkD,UAAA2kD,eAAR,SAAuB/6C,GACrB,OAAOoD,EAASpD,EAAQ,YAAcnK,MAAMouB,QAAQjkB,GAAUA,EAASvF,+BA3B1EkG,EAAAA,sDAhBQC,EAAAA,cA8CT85C,EA9BA,GChBAM,GAAA,WAOE,SAAAA,EAAoBC,EAAqDC,EAAwCC,GAA7FjlD,KAAA+kD,kBAAAA,EAAqD/kD,KAAAglD,eAAAA,EAAwChlD,KAAAilD,SAAAA,SAGjHH,EAAA5kD,UAAAglD,6BAAA,SAA6BC,OACrBh7B,EAAenqB,KAAK+kD,kBAAkBt6B,wBAAwB06B,GAAWhlD,OAAOH,KAAKilD,UAC3FjlD,KAAKglD,eAAeI,WAAWj7B,EAAak7B,cACtCC,EAAgBn7B,EAAqB,SAAEo7B,UAAU,GAEvD,OADAl8B,SAASrnB,KAAK+V,YAAYutC,GACnBn7B,GAIT26B,EAAA5kD,UAAAslD,8BAAA,SAA8Br7B,GAC5BnqB,KAAKglD,eAAeS,WAAWt7B,EAAak7B,UAC5Cl7B,EAAaC,+BAnBhB3f,EAAAA,WAAUxG,KAAA,CAAC,CACVmuB,WAAY,oDAHqB9G,EAAAA,gCAA0Bo6B,EAAAA,sBAAgBC,EAAAA,+MAA7E,GCaaC,GAA2B,CACtC7pC,GAAE,CACA8pC,wBAAyB,SACzBC,0BAA2B,SAC3BC,iBAAkB,SAClBC,WAAY,kBACZC,oBAAqB5tB,GAAwBtc,GAAGuc,UAChD4tB,iBAAkB7tB,GAAwBtc,GAAGwc,OAC7C4tB,sBAAuB9tB,GAAwBtc,GAAGyc,YAClD4tB,uBAAwB/tB,GAAwBtc,GAAG0c,cAErDzc,GAAE,CACA6pC,wBAAyB,cACzBC,0BAA2B,WAC3BC,iBAAkB,SAClBC,WAAY,yBACZC,oBAAqB5tB,GAAwBrc,GAAGsc,UAChD4tB,iBAAkB7tB,GAAwBrc,GAAGuc,OAC7C4tB,sBAAuB9tB,GAAwBrc,GAAGwc,YAClD4tB,uBAAwB/tB,GAAwBrc,GAAGyc,cAErD3c,GAAE,CACA+pC,wBAAyB,aACzBC,0BAA2B,WAC3BC,iBAAkB,YAClBC,WAAY,wBACZC,oBAAqB5tB,GAAwBvc,GAAGwc,UAChD4tB,iBAAkB7tB,GAAwBvc,GAAGyc,OAC7C4tB,sBAAuB9tB,GAAwBvc,GAAG0c,YAClD4tB,uBAAwB/tB,GAAwBvc,GAAG2c,eASvD4tB,GAAA,WAAA,SAAAA,IAAA,IAAA3gD,EAAA1F,KAKEA,KAAAsmD,SAAU,EACVtmD,KAAAumD,WAAY,EACZvmD,KAAA0kD,KAAO,EACP1kD,KAAA2kD,SAAW,GACX3kD,KAAAuzB,cAAgC,CAC9B3D,OAAM,WACJlqB,EAAKL,MAAMkU,QAAO,SAAC/T,GACbA,EAAmB,YACrBE,EAAKkb,MAAM7O,KAAKvM,GAChBE,EAAK8gD,SAASp6B,YAIpB/pB,MAAOrC,KAAKgtB,SAAS64B,yBAEvB7lD,KAAAymD,YAAsB,GACtBzmD,KAAAu0B,gBAAkC,CAChC3E,OAAM,WACJlqB,EAAKkb,MAAM7O,KAAK,MAChBrM,EAAK8gD,SAASp6B,SAEhB/pB,MAAOrC,KAAKgtB,SAAS84B,2BA0DG9lD,KAAA4gB,MAA2B,IAAIjP,EAAAA,aAwE3D,OA9GEnS,OAAAsE,eAAyBuiD,EAAAnmD,UAAA,WAAQ,KAkBjC,WACE,OAAOF,KAAKi6B,WAAa2rB,GAAyB/5C,UAnBpD,SAAkCtK,GAC5BA,aAAiB/B,UAAY+B,aAAiB5B,QAChDK,KAAKi6B,UAAS75B,EAAA,GACTwlD,GAAyBh6C,GACzBg6C,GAAyB/5C,KACzBtK,GAEDA,EAAMykD,aACRhmD,KAAK0mD,MAAQ1mD,KAAKgtB,SAASg5B,aAG7BhmD,KAAKi6B,UAAY2rB,GAAyB/5C,KAE5C7L,KAAKuzB,cAAclxB,MAAQrC,KAAKgtB,SAAS64B,wBACzC7lD,KAAKu0B,gBAAgBlyB,MAAQrC,KAAKgtB,SAAS84B,0BAC3C9lD,KAAK2mD,oDAQPnnD,OAAAsE,eAAsBuiD,EAAAnmD,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAK4mD,YALd,SAA4BrlD,GAC1BvB,KAAK4mD,OAAS15C,EAAS3L,EAAO,UAAYA,EAAQvB,KAAKgtB,SAASg5B,4CAgBlEK,EAAAnmD,UAAA+G,YAAA,WACMjH,KAAKquC,oBACPruC,KAAKquC,mBAAmBnjC,cAGtBlL,KAAK6mD,oBACP7mD,KAAK6mD,mBAAmB37C,cAGtBlL,KAAK8mD,sBACP9mD,KAAK8mD,qBAAqB57C,eAI9Bm7C,EAAAnmD,UAAAmE,SAAA,WACErE,KAAK+mD,iBACL/mD,KAAK2mD,oBAGPN,EAAAnmD,UAAA2qC,OAAA,WAAA,IAAAnlC,EAAA1F,KACEA,KAAK0kD,KAAO,EACR1kD,KAAKymD,aACPzmD,KAAKumD,WAAY,EACjBvmD,KAAK6mD,mBAAqB7mD,KAAKmtC,gBAAgBntC,KAAKymD,aAAan7C,UAAS,SAAC07C,GACzEthD,EAAKL,MAAQ2hD,EAAK3hD,MAClBK,EAAK4gD,QAAUU,EAAKV,QACpB5gD,EAAK6gD,WAAY,KAGnBvmD,KAAK+mD,kBAITV,EAAAnmD,UAAA+mD,cAAA,WAAA,IAAAvhD,EAAA1F,KACEA,KAAK0kD,OACL1kD,KAAKumD,WAAY,EACjBvmD,KAAK8mD,qBAAuB9mD,KAAKmtC,gBAAgBntC,KAAKymD,aAAan7C,UAAS,SAAC07C,GAC3EA,EAAK3hD,MAAMkU,QAAO,SAACxP,GACjBrE,EAAKL,MAAMnC,KAAK6G,KAElBrE,EAAK4gD,QAAUU,EAAKV,QACpB5gD,EAAK6gD,WAAY,KAObF,EAAAnmD,UAAAitC,gBAAR,SAAwBsZ,GACtB,OAAOzmD,KAAK0pC,cAAcyD,gBAAgBsZ,EAAazmD,KAAK0kD,KAAM1kD,KAAK2kD,SAAU3kD,KAAKqqC,eAGhFgc,EAAAnmD,UAAA6mD,eAAR,WAAA,IAAArhD,EAAA1F,KACEA,KAAKumD,WAAY,EACjBvmD,KAAKquC,mBAAqBruC,KAAKmtC,gBAAgB,IAAI7hC,UAAS,SAAC07C,GAC3DthD,EAAKL,MAAQ2hD,EAAK3hD,MAClBK,EAAK4gD,QAAUU,EAAKV,QACpB5gD,EAAK6gD,WAAY,KAIbF,EAAAnmD,UAAAymD,iBAAR,WACE3mD,KAAKknD,cAAgB,CACnB5uB,UAAat4B,KAAKgtB,SAASi5B,oBAC3B1tB,OAAUv4B,KAAKgtB,SAASk5B,iBACxB1tB,YAAex4B,KAAKgtB,SAASm5B,sBAC7B1tB,aAAgBz4B,KAAKgtB,SAASo5B,2DAtHjCh9C,EAAAA,UAASnF,KAAA,CAACwvB,GAAmB,CAAEnqB,UAAQ,qBAMvCtF,EAAAA,MAAKC,KAAA,CAAC,4BAGND,EAAAA,MAAKC,KAAA,CAAC,6BAGND,EAAAA,MAAKC,KAAA,CAAC,6BAuBND,EAAAA,MAAKC,KAAA,CAAC,kCASND,EAAAA,MAAKC,KAAA,CAAC,0CAGND,EAAAA,MAAKC,KAAA,CAAC,kCAGN2N,EAAAA,OAAM3N,KAAA,CAAC,qBAwEVoiD,EA5JA,GCvCAc,GAAA,SAAAhjD,GAAA,SAAAgjD,IAAA,IAAAzhD,EAAA,OAAAvB,GAAAA,EAAAtD,MAAAb,KAAAU,YAAAV,YAQE0F,EAAA0hD,gBAAmC,KAEnC1hD,EAAA2hD,gBAA0B,IAC1B3hD,EAAA4hD,YAAsB,MAoCxB,OA3C6CljD,EAAAA,EAAAA,GAS3C+iD,EAAAjnD,UAAAmE,SAAA,WACEF,EAAAjE,UAAMmE,SAAQzD,KAAAZ,MAEdA,KAAKunD,uBACLvnD,KAAKwnD,kBAGPL,EAAAjnD,UAAAqnD,qBAAA,WAAA,IAAA7hD,EAAA1F,KACEA,KAAKonD,gBAAkBvY,EAAAA,UAAU7uC,KAAKynD,cAAc7gD,cAAe,SAChE0mC,KACC1zB,EAAAA,OAAM,SAAElY,GAAW,OAAAgE,EAAKgiD,qBAAqBhmD,KAC7CytC,EAAAA,aAAa,MAGjBnvC,KAAKonD,gBAAgB97C,UAAS,WAC5B5F,EAAKmlC,YAITsc,EAAAjnD,UAAAynD,UAAA,WACE3nD,KAAKwmD,SAASx2C,QAGRm3C,EAAAjnD,UAAAsnD,eAAR,WACMz4C,OAAO4F,YAAc,MACvB3U,KAAKsnD,aAAe,GACpBtnD,KAAKqnD,iBAAmB,KAIpBF,EAAAjnD,UAAAwnD,qBAAR,SAA6BhmD,GAC3B,OAAqB,KAAdA,EAAEyN,6BA5CZ1K,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,mBACVC,SAAA,q0CAICyE,EAAAA,UAASnF,KAAA,CAAC,YAAa,CAAEqF,UAAQ,OAyCpC69C,EA/CA,CAI6Cd,ICH7CuB,GAAA,WAOE,SAAAA,EAAoBC,GAAA7nD,KAAA6nD,qBAAAA,EAJZ7nD,KAAAmqB,aAAkC,KAE1CnqB,KAAA8nD,iBAAsC,IAAIn2C,EAAAA,aA2C5C,OA9BEi2C,EAAA1nD,UAAAynD,UAAA,SAAU79C,GAAV,IAAApE,EAAA1F,KAOU4K,EAAAd,EAAAc,QAAS4uB,EAAA1vB,EAAA0vB,QAAS6Q,EAAAvgC,EAAAugC,aAAcqc,EAAA58C,EAAA48C,MAAO15B,EAAAljB,EAAAkjB,SAE/ChtB,KAAKmqB,aAAenqB,KAAK6nD,qBAAqB3C,6BAA6BiC,IAC3EnnD,KAAKmqB,aAAaQ,SAAS+7B,MAAQA,EACnC1mD,KAAKmqB,aAAaQ,SAAS6O,QAAUA,EACrCx5B,KAAKmqB,aAAaQ,SAAS+e,cAAgB9+B,EAC3C5K,KAAKmqB,aAAaQ,SAAS0f,aAAeA,EAC1CrqC,KAAKmqB,aAAaQ,SAASqC,SAAWA,EACtChtB,KAAKmqB,aAAaQ,SAAS/J,MAAMtV,UAAS,SAACqmC,GACzCjsC,EAAKs+C,YAAYrS,KAEnB3xC,KAAKmqB,aAAa49B,kBAAkBj9B,gBACpC9qB,KAAKmqB,aAAaQ,SAASg9B,aAK7BC,EAAA1nD,UAAA8jD,YAAA,SAAYziD,GACNA,GACFvB,KAAK8nD,iBAAiB/1C,KAAKxQ,GAE7BvB,KAAKmqB,aAAaC,+BA9CrB3f,EAAAA,sDAXQq6C,MA2DT8C,EAhDA,GC+CAI,GAAA,SAAA7jD,GAuBE,SAAA6jD,EAAYC,EAAwDC,GAApE,IAAAxiD,EACEvB,EAAAvD,KAAAZ,KAAMioD,IAAuBjoD,YADqC0F,EAAAwiD,sBAAAA,IAiEtE,OAvEwC9jD,EAAAA,EAAAA,GAUtC4jD,EAAA9nD,UAAA+G,YAAA,WACMjH,KAAKmoD,mBACPnoD,KAAKmoD,kBAAkBj9C,eAI3B88C,EAAA9nD,UAAAmE,SAAA,WACEF,EAAAjE,UAAMmE,SAAQzD,KAAAZ,OAGhBgoD,EAAA9nD,UAAAkoD,WAAA,WAAA,IAAA1iD,EAAA1F,KACE,GAAIA,KAAKqoD,qBAAsB,CACvB,IAAEz9C,EAAF5K,KAAE4K,QAAS4uB,EAAXx5B,KAAWw5B,QAAS6Q,EAApBrqC,KAAoBqqC,aAAcrd,EAAlChtB,KAAkCgtB,SAExChtB,KAAKkoD,sBAAsBP,UAAU,CAAE/8C,QAAOA,EAAE4uB,QAAOA,EAAE6Q,aAAYA,EAAEqc,MAAO1mD,KAAKqC,MAAO2qB,SAAQA,IAE7FhtB,KAAKmoD,oBACRnoD,KAAKmoD,kBAAoBnoD,KAAKkoD,sBAAsBJ,iBAAiBx8C,UAAS,SAAC9F,GAC7EE,EAAK4+C,YAAY9+C,QAMzBwiD,EAAA9nD,UAAAg/C,aAAA,SAAa39C,EAAY4L,GACnBnN,KAAKsoD,YACPtoD,KAAKuoD,6BAA6Bp7C,GAElCnN,KAAK81C,QAAQlvC,cAAcrF,MAAQvB,KAAKyxC,aAAelwC,EAAQ,IAInEymD,EAAA9nD,UAAAsoD,aAAA,WACE,OAAOxoD,KAAK81C,QAAQlvC,cAAcrF,OAGpCymD,EAAA9nD,UAAAuoD,YAAA,eACQlnD,EAAQvB,KAAKwoD,eAEfxoD,KAAK6jD,WAAatiD,GACpBvB,KAAKkkD,WAAW3iD,IAIZymD,EAAA9nD,UAAAmoD,mBAAR,WAME,OAJKroD,KAAK4K,SACR89C,QAAQC,KAAK,0BAGL3oD,KAAK4K,SAAY5K,KAAKwxB,WAG1Bw2B,EAAA9nD,UAAAqoD,6BAAR,SAAqCK,OAC7BC,EAAiD,IAAvCrpD,OAAO68B,KAAKusB,GAAgBjoD,OACtCmoD,EAAgB9oD,KAAKsoD,YAAYM,GAEvC5oD,KAAK6jD,SAAWgF,EAAU,GAAKC,EAC/B9oD,KAAK81C,QAAQlvC,cAAcrF,MAAQsnD,EAAU,GAAKC,uBArFrDrkD,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,aACVC,SAAA,6vBACA4G,UAAW,CACTi5C,GACAoD,GACA,CACEvlC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAwlC,IAC9BvlC,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAAwlC,IAC9BvlC,OAAO,iDApEJ+hC,UACAoD,uCA0ENx+C,EAAAA,UAASnF,KAAA,CAAC,MAAO,CAACoF,KAAMH,EAAAA,WAAYI,UAAQ,OAmE/C0+C,EAxFA,CAiBwCrE,IChExCoF,GAAA,WAAA,SAAAA,IA+BsB/oD,KAAA8a,OAAS,IAAInJ,EAAAA,aAgBnC,OAzBEnS,OAAAsE,eAA4BilD,EAAA7oD,UAAA,cAAW,KAIvC,WACE,OAAOF,KAAKy0C,cAAgBz0C,KAAKgtB,SAASg8B,uBAL5C,SAAwC7f,GACtCnpC,KAAKy0C,aAAetL,GAAej8B,EAASi8B,EAAa,UAAYA,EAAcnpC,KAAKgtB,SAASg8B,mDAYnGD,EAAA7oD,UAAAq4C,SAAA,SAASryC,GACPlG,KAAK8a,OAAO/I,KAAK,CAAC7L,MAAOA,EAAO3E,MAAOvB,KAAK8uC,aAAaloC,cAAcrF,SAGzEwnD,EAAA7oD,UAAAu6C,SAAA,WACEz6C,KAAK8uC,aAAaloC,cAAcotB,SAGlC+0B,EAAA7oD,UAAAmnC,MAAA,WACErnC,KAAK8uC,aAAaloC,cAAcrF,MAAQ,wBA5C3CkD,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,yBACVC,SAAA,qZAOCX,EAAAA,MAAKC,KAAA,CAAC,mCAaND,EAAAA,MAAKC,KAAA,CAAC,iCASN2N,EAAAA,OAAM3N,KAAA,CAAC,kCAEPmF,EAAAA,UAASnF,KAAA,CAAC,eAAgB,CAACoF,KAAMH,EAAAA,WAAYI,UAAQ,OAcxDy/C,EA/CA,GCAAE,GAAA,WAAA,SAAAA,IAMEjpD,KAAAiuC,UAAY,EACZjuC,KAAAkpD,MAAgB,EAChBlpD,KAAAmpD,aAAuB,EAGCnpD,KAAAopD,YAAuB,EASnBppD,KAAAqpD,eAA6B,GAGrCrpD,KAAAqmC,QAAuC,GAGhCrmC,KAAAspD,aAAe,IAAI33C,EAAAA,aAG1B3R,KAAA8a,OAAS,IAAInJ,EAAAA,aAOL3R,KAAAupD,cAAgB,IAAI53C,EAAAA,aA8DlD,OAxDEs3C,EAAA/oD,UAAAgwC,SAAA,SAASl7B,GACPhV,KAAKiuC,UAAaj5B,GAAS,EAAK,EAAa,GAARA,EAAc,IAGrDi0C,EAAA/oD,UAAAspD,eAAA,SAAeljB,GACb,OAAOtmC,KAAKqpD,eAAep7B,KAAI,SAACw7B,GAAgB,OAAAA,IAAiBnjB,EAAO/kC,SAG1E0nD,EAAA/oD,UAAAwpD,UAAA,SAAUC,EAAOrjB,GACftmC,KAAK4pD,qBAAqBD,EAAOrjB,GAE5BtmC,KAAKopD,YACRppD,KAAK6pD,cAAcpP,YAIvBwO,EAAA/oD,UAAA0pD,qBAAA,SAAqBE,EAASxjB,GAC5B,GAAIwjB,EACF9pD,KAAKqpD,eAAenmD,KAAKojC,EAAO/kC,WAC3B,KACCwoD,EAAsB/pD,KAAKqpD,eAAer1C,QAAQsyB,EAAO/kC,OAC/DvB,KAAKqpD,eAAe55C,OAAOs6C,EAAqB,GAGlD/pD,KAAK8a,OAAO/I,KAAK/R,KAAKqpD,iBAGxBJ,EAAA/oD,UAAA8pD,iBAAA,SAAiB9jD,GACflG,KAAKspD,aAAav3C,KAAK7L,IAIzB+iD,EAAA/oD,UAAAw2C,UADA,SACUxwC,GACc,IAAlBA,EAAMiJ,SACRnP,KAAKupD,cAAcx3C,QAIvBk3C,EAAA/oD,UAAA+pD,kBAAA,SAAkBha,GAAlB,IAAAvqC,EAAA1F,KACEA,KAAKkpD,KAAOjZ,EACZjwC,KAAKkqD,sBAELrhD,WAAU,WACJonC,GAAUvqC,EAAKmkD,gBAAkBnkD,EAAK0jD,aACxC1jD,EAAKmkD,cAAcpP,WACnB/0C,EAAKmkD,cAAcxiB,YAKjB4hB,EAAA/oD,UAAAgqD,oBAAR,WACMlqD,KAAKqmC,QAAQ1lC,SACfX,KAAKmpD,aAAc,wBA9FxB1kD,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,2BACVC,SAAA,6xBASCX,EAAAA,MAAKC,KAAA,CAAC,mCAGND,EAAAA,MAAKC,KAAA,CAAC,yCAGND,EAAAA,MAAKC,KAAA,CAAC,gDAGND,EAAAA,MAAKC,KAAA,CAAC,sCAGND,EAAAA,MAAKC,KAAA,CAAC,mCAGN2N,EAAAA,OAAM3N,KAAA,CAAC,mCAGP2N,EAAAA,OAAM3N,KAAA,CAAC,mCAOP2N,EAAAA,OAAM3N,KAAA,CAAC,uCAEPmF,EAAAA,UAASnF,KAAA,CAAC,YAAa,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,uBACnDF,EAAAA,UAASnF,KAAA,CAAC,YAAa,CAACoF,KAAMH,EAAAA,WAAYI,UAAQ,2BAClDF,EAAAA,UAASnF,KAAA,CAAC,gBAAiB,CAAEqF,UAAQ,uBAiCrCiP,EAAAA,aAAYtU,KAAA,CAAC,UAAW,CAAC,cAyB5BglD,EAlGA,OCJEn5C,WAAA,EAEAzI,SAAA,EAEA4gC,SAAA,wFCFF,IAAakiB,GAAgC,CAC3CpuC,GAAE,CACAwc,OAAQ,gBACRywB,kBAAmB,UAErBhtC,GAAE,CACAuc,OAAQ,uBACRywB,kBAAmB,SAErBltC,GAAE,CACAyc,OAAQ,yBACRywB,kBAAmB,WAgBvBoB,GAAA,WAAA,SAAAA,IAEUpqD,KAAAsR,WAAsB,EACtBtR,KAAA0oC,YAAyC2hB,GAAyBv6C,WAClE9P,KAAA4jD,QAAmB,EACnB5jD,KAAAsqD,aAAwB,EAGxBtqD,KAAAqlC,WAAsB,EACtBrlC,KAAAuqD,OAAkB,EAMlBvqD,KAAAwqD,mBAAoB,EAE5BxqD,KAAAyqD,gBAA+C,GAC/CzqD,KAAA0qD,uBAAsD,GACtD1qD,KAAA2qD,mBAAqB,GAyEG3qD,KAAAmpC,YAAuB,GAWhBnpC,KAAAgpD,kBAA6B,GA+IxChpD,KAAA8a,OAA6B,IAAInJ,EAAAA,aAsKvD,OA/VEnS,OAAAsE,eAAyBsmD,EAAAlqD,UAAA,WAAQ,KAWjC,WACE,OAAOF,KAAKi6B,WAAakwB,GAA8Bt+C,UAZzD,SAAkCtK,GAC5BA,aAAiB/B,UAAY+B,aAAiB5B,OAChDK,KAAKi6B,UAAS75B,EAAA,GACT+pD,GAA8Bv+C,GAC9Bu+C,GAA8Bt+C,KAC9BtK,GAGLvB,KAAKi6B,UAAYkwB,GAA8Bt+C,sCAgDnDrM,OAAAsE,eAAyBsmD,EAAAlqD,UAAA,WAAQ,KAKjC,WACE,OAAOF,KAAKqlC,eANd,SAAkCf,GAChCtkC,KAAKqlC,UAA8B,KAAlB,GAA8B54B,EAAiB63B,GAChEtkC,KAAK4qD,yDAgBPprD,OAAAsE,eAAyBsmD,EAAAlqD,UAAA,WAAQ,KAOjC,WACE,OAAOF,KAAKsR,eARd,SAAkCkgB,GAChCxxB,KAAKsR,UAA8B,KAAlB,GAA8B7E,EAAiB+kB,GAChExxB,KAAK4qD,wBAEL5qD,KAAK6qD,sDAgBPrrD,OAAAsE,eAA4BsmD,EAAAlqD,UAAA,aAAU,KAItC,WACE,OAAOF,KAAKsqD,iBALd,SAAuClB,GACrCppD,KAAKsqD,YAAkC,KAApB,GAAgC79C,EAAiB28C,oCAatE5pD,OAAAsE,eAAwBsmD,EAAAlqD,UAAA,UAAO,KAM/B,WACE,OAAOF,KAAK0lC,cAPd,SAAgCW,GAC9BrmC,KAAK0lC,SAAWW,EAEhBrmC,KAAKiqC,uDAiBPzqC,OAAAsE,eAAqBsmD,EAAAlqD,UAAA,OAAI,KAMzB,WACE,OAAOF,KAAKuqD,WAPd,SAA0BlwB,GACxBr6B,KAAKuqD,MAAsB,KAAd,GAA0B99C,EAAiB4tB,GAExDr6B,KAAKiqC,uDAgBPzqC,OAAAsE,eAAsBsmD,EAAAlqD,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAK4jD,YALd,SAA4B5vB,GAC1Bh0B,KAAK4jD,OAAwB,KAAf,GAA2Bn3C,EAAiBunB,oCAiB5Dx0B,OAAAsE,eAA4BsmD,EAAAlqD,UAAA,aAAU,KAetC,WACE,OAAOF,KAAK0oC,iBAhBd,SAAuCyB,GAErC,OADAnqC,KAAK0oC,YAAeyB,KAAckgB,GAA4BlgB,EAAakgB,GAAyBv6C,WAC5F9P,KAAK0oC,YAAY75B,YACvB,IAAK,aACH7O,KAAK0oC,YAAc2hB,GAAyBv6C,WAC5C,MACF,IAAK,WACH9P,KAAK0oC,YAAc2hB,GAAyBhjD,SAC5C,MACF,IAAK,WACHrH,KAAK0oC,YAAc2hB,GAAyBpiB,2CAelDmiB,EAAAlqD,UAAAmE,SAAA,WACErE,KAAK8qD,WAAW9qD,KAAKqmC,UAGvB+jB,EAAAlqD,UAAA6qD,sBAAA,WAIE/qD,KAAKwqD,mBAAoB,GAG3BJ,EAAAlqD,UAAA+pC,oBAAA,W3GnFF,IAAsC5D,EAAqBha,E2GoFnDrsB,KAAKqmC,SAAWrmC,KAAKqmC,QAAQ1lC,SAE/BgP,EAA8B3P,KAAKqmC,SACnC/2B,EAAwBtP,KAAKqmC,SAC7BrmC,KAAKgrD,mBAAmBhrD,KAAKqmC,SAEzBrmC,KAAKq6B,O3G1FuBgM,E2G2FRrmC,KAAKqmC,Q3G3FwBha,E2G2Ff,Q3G1F1Cga,EAAQhM,KAAI,SAAE4wB,EAASC,GAIrB,OAHAD,EAAUA,EAAQ5+B,GAAUxd,WAAWzC,gBACvC8+C,EAAUA,EAAQ7+B,GAAUxd,WAAWzC,gBAG7B,EAEN6+C,EAAUC,EACL,EAEF,O2GqFTd,EAAAlqD,UAAA8qD,mBAAA,SAAmB3kB,GACjBA,EAAQ9sB,QAAO,SAAC+sB,GACTA,EAAc,QACjBA,EAAOjkC,MAAQikC,EAAO/kC,UAK5B6oD,EAAAlqD,UAAA4qD,WAAA,SAAWzkB,GACLA,IACFrmC,KAAK0qD,uBAAyBrkB,IAKlC+jB,EAAAlqD,UAAA0qD,sBAAA,WAAA,IAAAllD,EAAA1F,KACMA,KAAKwqD,mBAIP3hD,WAAU,WACRnD,EAAK8vC,aAAa9vC,EAAK+kD,oBAK7BL,EAAAlqD,UAAAs1C,aAAA,SAAaiV,GACPzqD,KAAKyrC,gBACPzrC,KAAKyrC,cAAczrC,KAAKmrD,qBAAqBV,IAC7CzqD,KAAKorD,YAAYX,KAIrBL,EAAAlqD,UAAAkrD,YAAA,SAAYX,GACNA,GAAmBzqD,KAAKqrD,kBAAoBZ,EAAgB9pD,QAC9DX,KAAK8a,OAAO/I,KAAK04C,GAEnBzqD,KAAKqrD,gBAAkBZ,EAAkBA,EAAgB9pD,OAAS,MAGpEypD,EAAAlqD,UAAAirD,qBAAA,SAAqBV,GACnB,OAAOA,GAAmBA,EAAgB9pD,OAAS8pD,EAAgBriD,IAAG,SAACk+B,GAAU,OAAAA,EAAO/kC,QAAS,IAGnG6oD,EAAAlqD,UAAAorD,gBAAA,SAAgB/pD,OACRyT,EAAQhV,KAAKqmC,QAAQ72B,UAAS,SAAC82B,GAAU,OAAAA,EAAO/kC,QAAUA,IAChE,OAAOvB,KAAKqmC,QAAQrxB,GAAO3S,OAG7B+nD,EAAAlqD,UAAAqrD,YAAA,SAAYlC,GACVrpD,KAAKwrD,sBAAsBnC,GAC3BrpD,KAAKw1C,aAAax1C,KAAKyqD,kBAGzBL,EAAAlqD,UAAAurD,cAAA,SAAc5gB,EAAgBxE,EAAsC8D,GAApE,IAAAzkC,EAAA1F,KACE,GAAI6qC,GAAUxE,GAAWA,EAAQ1lC,OAAQ,KACjCirC,EAA0C,GAChDvF,EAAQ9sB,QAAO,SAAC+sB,GACVA,EAAOjkC,OAASqD,EAAKklC,cAAcC,EAAQvE,EAAQ6D,IACrDyB,EAAW1oC,KAAKojC,KAGpBtmC,KAAK0qD,uBAAyB9e,IAIlCwe,EAAAlqD,UAAA0qC,cAAA,SAAcC,EAAgBvE,EAA8B6D,GAC1D,OAAQA,GACN,KAAKkgB,GAAyBv6C,WAC5B,OAAO9P,KAAK8P,WAAW+6B,EAAQvE,GACjC,KAAK+jB,GAAyBhjD,SAC5B,OAAOrH,KAAKqH,SAASwjC,EAAQvE,GAC/B,KAAK+jB,GAAyBpiB,SAC5B,OAAOjoC,KAAKioC,SAAS4C,EAAQvE,KAInC8jB,EAAAlqD,UAAA4P,WAAA,SAAW+6B,EAAgBvE,GACzB,OAAOA,EAAOjkC,MAAM+J,cAAc0D,WAAW+6B,EAAOz+B,gBAGtDg+C,EAAAlqD,UAAAmH,SAAA,SAASwjC,EAAgBvE,GACvB,OAAOA,EAAOjkC,MAAM+J,cAAc4H,QAAQ62B,EAAOz+B,gBAAkB,GAGrEg+C,EAAAlqD,UAAA+nC,SAAA,SAAS4C,EAAgBvE,GACvB,OAAOA,EAAOjkC,MAAM+J,cAAc67B,SAAS4C,EAAOz+B,gBAGpDg+C,EAAAlqD,UAAA2gB,SAAA,SAASC,GACP,OAAIujB,GAAerkC,KAAKskC,SAAUtkC,KAAKwxB,SAAU1Q,EAAEvf,OAC1C,CAAE+iC,SAAU,CACjBC,OAAO,IAIJ,MAGT6lB,EAAAlqD,UAAAsrD,sBAAA,SAAsBxyC,GAAtB,IAAAtT,EAAA1F,KACEA,KAAKyqD,gBAAkB,GAEvBzxC,EAAOO,QAAO,SAAChY,GACbmE,EAAK2gC,QAAQ9sB,QAAO,SAAC+sB,GACfA,EAAO/kC,QAAUA,GACnBmE,EAAK+kD,gBAAgBvnD,KAAKojC,OAKhCtmC,KAAK6qD,sBAGPT,EAAAlqD,UAAA6gB,WAAA,SAAW/H,GACJA,IACHA,EAAS,GACThZ,KAAKw1C,aAAa,KAIpBx1C,KAAKwrD,sBAAsBxyC,GAEvBhZ,KAAKyqD,gBAAgB9pD,OAASqY,EAAOrY,QACvCX,KAAKw1C,aAAax1C,KAAKyqD,kBAI3BL,EAAAlqD,UAAAkgB,iBAAA,SAAiB9S,GACftN,KAAKyrC,cAAgBn+B,GAGvB88C,EAAAlqD,UAAAmgB,kBAAA,SAAkB/S,GAChBtN,KAAK8sC,eAAiBx/B,kCAjYvBtJ,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,4BAoCND,EAAAA,MAAKC,KAAA,CAAC,gCA4BND,EAAAA,MAAKC,KAAA,CAAC,mCAGND,EAAAA,MAAKC,KAAA,CAAC,4CAWND,EAAAA,MAAKC,KAAA,CAAC,sCAGND,EAAAA,MAAKC,KAAA,CAAC,0BAWND,EAAAA,MAAKC,KAAA,CAAC,gCAkBND,EAAAA,MAAKC,KAAA,CAAC,kCAoBND,EAAAA,MAAKC,KAAA,CAAC,kCAcND,EAAAA,MAAKC,KAAA,CAAC,2BAoBND,EAAAA,MAAKC,KAAA,CAAC,yBAmBND,EAAAA,MAAKC,KAAA,CAAC,+BAkBND,EAAAA,MAAKC,KAAA,CAAC,iCAoBN2N,EAAAA,OAAM3N,KAAA,CAAC,eAsKVmmD,EA5ZA,GCCAsB,GAAA,SAAAvnD,GAmCE,SAAAunD,EACSjmD,EACCmkB,EACA+jB,EACA5oB,GAJV,IAAArf,EAKEvB,EAAAvD,KAAAZ,OAAOA,YAJA0F,EAAAD,SAAAA,EACCC,EAAAkkB,eAAAA,EACAlkB,EAAAioC,gBAAAA,EACAjoC,EAAAqf,GAAAA,EAdVrf,EAAAimD,iBAAmB,EACnBjmD,EAAAU,aAAuB,sBACvBV,EAAAkmD,cAAwB,EACxBlmD,EAAAM,aAAc,EAGdN,EAAAu3B,gBAAiB,EAETv3B,EAAAmmD,yBAAmC,EA4MnCnmD,EAAA4pB,SAAQ,WACd5pB,EAAKyoC,6BAwCT,OArQ6C/pC,EAAAA,EAAAA,GA0B3CsnD,EAAAxrD,UAAAsG,gBAAA,WACMxG,KAAKg0B,OACPh0B,KAAK8uC,aAAaloC,cAAcotB,QAElCh0B,KAAKgG,aAAc,GAGrB0lD,EAAAxrD,UAAAwG,UAAA,eACQolD,EAAa9rD,KAAK8uC,aAAaloC,cAAcC,YAGnD,GAAKilD,IAAe9rD,KAAKi9B,gBAAkBj9B,KAAKgG,aAAiB8lD,GAAc9rD,KAAK6rD,wBAGlF,OAFA7rD,KAAK+G,sBACL/G,KAAKi9B,gBAAiB,IAK1ByuB,EAAAxrD,UAAA+G,YAAA,WACEjH,KAAKuvB,mBAGPm8B,EAAAxrD,UAAA6rD,cAAA,WACE,OAAO/rD,KAAK+kB,GAAGne,cAAcoB,cAAc,cAAcnB,YAAc,IAGzE6kD,EAAAxrD,UAAA8rD,oBAAA,eACQ/+B,EAAcjtB,KAAK+kB,GAAGne,cAAcsB,iBAAiB,kBAC3D,OAAOvI,MAAMwI,KAAK8kB,GAAa7kB,IAAG,SAACilB,GAAc,OAAAA,EAAwB,eAG3Eq+B,EAAAxrD,UAAA+rD,sBAAA,eACQC,EAAmBlsD,KAAKgsD,sBACxBF,EAAa9rD,KAAK+rD,gBAElBI,EAAqBD,EAAiB,GAI5C,GAFAlsD,KAAK2qD,mBAAqB,GAEtBmB,EAAa,EAAG,KACdM,EAAM,EACN5rD,EAAI,EACR,IAAKA,EAAI,EAAGA,EAAIR,KAAKyqD,gBAAgB9pD,OAAQH,IAI3C,GAHA4rD,GAAOF,EAAiB1rD,GACxBR,KAAK2qD,mBAAmBznD,KAAKlD,KAAKyqD,gBAAgBjqD,IAE9C4rD,EAAMN,EAAY,CACpBM,GAAOF,EAAiB1rD,GACxBR,KAAK6rD,yBAA0B,EAC/B,MAIJ,GAAIM,IAAuBnsD,KAAKyqD,gBAAgB9pD,OAAQ,CAEtD,GAAIH,IAAMR,KAAKyqD,gBAAgB9pD,OAE7B,YADAX,KAAK6rD,yBAA0B,GAIjC,GAAIO,EA1BoB,GA0BQN,EAAY,CAC1C9rD,KAAK2qD,mBAAmBl7C,QAAQ,EAAG,OAC7BpN,EAAQ,KAAOrC,KAAKyqD,gBAAgB9pD,OAAS,EAAIH,GAAGqO,WAC1D7O,KAAK2qD,mBAAmBznD,KAAK,CAAC3B,MAAO,GAAIc,MAAOA,QAC3C,CACLrC,KAAK2qD,mBAAmBl7C,QAAQ,EAAG,GAC7BpN,EAAQ,KAAOrC,KAAKyqD,gBAAgB9pD,OAASH,GAAGqO,WACtD7O,KAAK2qD,mBAAmBznD,KAAK,CAAC3B,MAAO,GAAIc,MAAOA,QAOxDqpD,EAAAxrD,UAAA2qD,mBAAA,WACE7qD,KAAK2qD,mBAAqB,GAAGjnD,OAAO1D,KAAKyqD,iBAEzCzqD,KAAK+G,iBAGA/G,KAAK8uC,aAAaloC,cAAcC,cACnC7G,KAAK6rD,yBAA0B,IAInCH,EAAAxrD,UAAA6G,eAAA,WAAA,IAAArB,EAAA1F,KACE2I,aAAa3I,KAAK4I,eAClB5I,KAAK4I,cAAgBC,WAAU,WAC7BnD,EAAKumD,yBACJ,MAGLP,EAAAxrD,UAAAoxB,UAAA,SAAUprB,GACR,GAAIA,EAAMiJ,UAAYm/B,GAAe5G,SAAWxhC,EAAMiJ,UAAYm/B,GAAe7G,UAG/E,OAFAvhC,EAAMguB,sBACNl0B,KAAKqsD,2BAA0B,GAI7BnmD,EAAMiJ,UAAYm/B,GAAetG,KACnChoC,KAAKqsD,2BAA0B,IAKnCX,EAAAxrD,UAAAosD,yBAAA,WACMtsD,KAAKwxB,UAITxxB,KAAKqsD,2BAA2BrsD,KAAK4rD,eAGvCF,EAAAxrD,UAAAqsD,aAAA,SAAatc,GAEPA,IAAWjwC,KAAKwxB,UAClBxxB,KAAKqsD,2BAA0B,IAKnCX,EAAAxrD,UAAAmsD,0BAAA,SAA0Bpc,GACxBA,EAASjwC,KAAKgQ,OAAShQ,KAAKosB,SAG9Bs/B,EAAAxrD,UAAAssD,wBAAA,WAAA,IAAA9mD,EAAA1F,KACA,GAAIA,KAAKyqD,iBAAmBzqD,KAAKyqD,gBAAgB9pD,OAAQ,KAC/CqU,EAAQhV,KAAKqmC,QAAQ72B,UAAS,SAAC82B,GAAU,OAAAA,EAAO/kC,QAAUmE,EAAK+kD,gBAAgB,GAAGlpD,QACxFvB,KAAKysD,SAASvc,SAASl7B,KAI3B02C,EAAAxrD,UAAAwsD,0BAAA,SAA0BrmB,GACxBrmC,KAAK0qD,uBAAyBrkB,GAGhCqlB,EAAAxrD,UAAAopD,aAAA,SAAapjD,GAAb,IAAAR,EAAA1F,KACGkG,GAASA,EAAM3E,MAASvB,KAAKyrD,cAAcvlD,EAAM3E,MAAOvB,KAAKqmC,QAASrmC,KAAKmqC,YAAcnqC,KAAK0sD,0BAA0B1sD,KAAKqmC,SAG9Hx9B,WAAU,WAAO,OAAAnD,EAAKyoC,6BAGxBud,EAAAxrD,UAAAysD,eAAA,WACE,OAAQ3sD,KAAKmpC,cAAgBnpC,KAAK2qD,mBAAmBhqD,OAAUX,KAAKmpC,YAAc,IAGpFuiB,EAAAxrD,UAAA0sD,gBAAA,SAAgBrrD,OACRyT,EAAQhV,KAAKyqD,gBAAgBj7C,UAAS,SAAC82B,GAAU,OAAAA,EAAO/kC,QAAUA,IACxEvB,KAAKyqD,gBAAgBh7C,OAAOuF,EAAO,GAEnChV,KAAK6qD,qBACL7qD,KAAKw1C,aAAax1C,KAAKyqD,kBAGzBiB,EAAAxrD,UAAAkwC,mBAAA,SAAmBlqC,GACZlG,KAAK8uC,aAAaloC,cAAcS,SAASnB,EAAMoB,SACjDtH,KAAKqwC,YAAYzpC,cAAcS,SAASnB,EAAMoB,SAC9CtH,KAAK6sD,gBAAgBjmD,cAAcS,SAASnB,EAAMoB,SAClDtH,KAAK8sD,2BAA2BlmD,cAAcS,SAASnB,EAAMoB,UAC9DtH,KAAK4rD,cAEL5rD,KAAKqsD,2BAA0B,IAI3BX,EAAAxrD,UAAAiuC,wBAAR,WACEnuC,KAAK2tC,gBAAgBr7B,eA7OsB,WAgPrCo5C,EAAAxrD,UAAAksB,MAAR,WACEpsB,KAAKoG,aAAe,sBACpBpG,KAAK4rD,cAAe,EAEpB5rD,KAAKysD,SAASxC,mBAAkB,GAChCjqD,KAAK0sD,0BAA0B1sD,KAAKqmC,SAEpCrmC,KAAKuvB,mBAGCm8B,EAAAxrD,UAAAywB,oBAAR,WAAA,IAAAjrB,EAAA1F,KACEA,KAAK+sD,iBAAmB/sD,KAAKyF,SAASsD,OAAO,WAAY,QAAO,SAAG7C,GACjER,EAAK0qC,mBAAmBlqC,KAG1BlG,KAAKgJ,eAAiBhJ,KAAKyF,SAASsD,OAAO,SAAU,SAAQ,WAC3DrD,EAAKmlD,qBAEL/7C,IAAapJ,EAAKyoC,0BAA4BzoC,EAAK0mB,UAGrDrd,OAAO0I,iBAAiB,SAAUzX,KAAKsvB,UAAU,IAO3Co8B,EAAAxrD,UAAA8P,KAAR,WACEhQ,KAAKoG,aAAe,oBACpBpG,KAAK4rD,cAAe,EAEpB5rD,KAAKysD,SAASxC,mBAAkB,GAChCjqD,KAAK0sD,0BAA0B1sD,KAAKqmC,SACpCrmC,KAAK2wB,sBACL3wB,KAAKwsD,0BAELxsD,KAAK4pB,eAAekB,gBACpB9qB,KAAKgtD,uBAGCtB,EAAAxrD,UAAAqvB,gBAAR,WACMvvB,KAAK+sD,kBACP/sD,KAAK+sD,mBAGH/sD,KAAKgJ,gBACPhJ,KAAKgJ,iBAGP+F,OAAOoJ,oBAAoB,SAAUnY,KAAKsvB,UAAU,IAG9Co8B,EAAAxrD,UAAA8sD,oBAAR,WACEhtD,KAAK2tC,gBAAgB76B,YACnB9S,KAAKysD,SAASjvB,UAAU52B,cAxSQ,EA0ShC5G,KAAK8uC,aACL,CAAC,MAAO,WACR,GAGF9uC,KAAKmuC,+CAnRR1pC,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,kBACVC,SAAA,m0DACA4G,UAAW,CACT2G,GACA,CACEmQ,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAkpC,IAC9BjpC,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAAkpC,IAC9BjpC,OAAO,iDAnD8EtZ,EAAAA,iBAA1EkiB,EAAAA,yBAKRnZ,UAL+ChJ,EAAAA,uDAyDrDE,EAAAA,UAASnF,KAAA,CAAC,kBAAmB,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,sBACzDF,EAAAA,UAASnF,KAAA,CAAC,kBAAmB,CAAEqF,UAAQ,wCACvCF,EAAAA,UAASnF,KAAA,CAAC,sBAAuB,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,yBAC7DF,EAAAA,UAASnF,KAAA,CAAC,cAAe,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,0BACrDF,EAAAA,UAASnF,KAAA,CAAC,eAAgB,CAACoF,KAAMH,EAAAA,WAAYI,UAAQ,OA+PxDoiD,EAtRA,CAiB6CtB,IC7C7C6C,GAAA,WAAA,SAAAA,IAOqBjtD,KAAAsmC,OAA+B,KAG7BtmC,KAAAyZ,UAAqB,EAGtBzZ,KAAA8a,OAAS,IAAInJ,EAAAA,aAMnC,OAJEs7C,EAAA/sD,UAAAgtD,YAAA,WACEltD,KAAKyZ,UAAYzZ,KAAKyZ,SACtBzZ,KAAK8a,OAAO/I,KAAK/R,KAAKyZ,+BAjBzBhV,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,uBACVC,SAAA,qeAKCX,EAAAA,MAAKC,KAAA,CAAC,8BAGND,EAAAA,MAAKC,KAAA,CAAC,8BAGN2N,EAAAA,OAAM3N,KAAA,CAAC,eAMVgpD,EAnBA,GCTME,GAA0B,CAC9B,OAAQ,SAAU,YAAa,cAAe,gBAAiB,eAAgB,cAAe,uBAGhGC,GAAA,WAAA,SAAAA,IAgBwBptD,KAAAqtD,SAAW,IAAI17C,EAAAA,aAElB3R,KAAAuB,MAAQ,IAAIoQ,EAAAA,aAqDjC,OAnDEy7C,EAAAltD,UAAAmE,SAAA,WAAA,IAAAqB,EAAA1F,KACEA,KAAKstD,YAAY1mD,cAAc2mD,WAAa,KAG5C1kD,WAAU,WAASnD,EAAK8nD,+BAG1BJ,EAAAltD,UAAAutD,eAAA,SAAeC,GACb1tD,KAAKstD,YAAY1mD,cAAcotB,QAC/B3K,SAASskC,YAAYD,GAAS,EAAO,MACrC1tD,KAAKurC,cACLvrC,KAAKuB,MAAMwQ,KAAK/R,KAAKu/C,aAGvB6N,EAAAltD,UAAA4R,QAAA,WACE9R,KAAK4tD,yBAGPR,EAAAltD,UAAAwuC,QAAA,YAEO1uC,KAAKstD,YAAY1mD,cAAcs5B,UAAUvzB,QAAU3M,KAAKstD,YAAY1mD,cAAco6B,YACrFhhC,KAAKstD,YAAY1mD,cAAco6B,WAAWE,SAE5ClhC,KAAKurC,cACLvrC,KAAK4tD,yBAGPR,EAAAltD,UAAA2tD,OAAA,WAAA,IAAAnoD,EAAA1F,KACE6I,WAAU,WAASnD,EAAK6lC,gBACxB1iC,WAAU,WAASnD,EAAKgpC,aAGlB0e,EAAAltD,UAAA0tD,sBAAR,eACQP,EAA0BF,GAAwBvzC,OAAM,SAAC8zC,GAC7D,OAAOrkC,SAASykC,kBAAkBJ,KAGpC1tD,KAAKqtD,SAASt7C,KAAKs7C,IAGbD,EAAAltD,UAAAqrC,YAAR,WACEvrC,KAAKu/C,WAAav/C,KAAKstD,YAAY1mD,cAAcmnD,UACjD/tD,KAAKuB,MAAMwQ,KAAK/R,KAAKu/C,aAGf6N,EAAAltD,UAAAstD,0BAAR,WACMxtD,KAAKu/C,YACPv/C,KAAKstD,YAAY1mD,cAAconD,mBAAmB,aAAchuD,KAAKu/C,iCAnE1E96C,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,qBACVC,SAAA,2SAICyE,EAAAA,UAASnF,KAAA,CAAC,cAAe,CAAEqF,UAAQ,oBAEnCtF,EAAAA,MAAKC,KAAA,CAAC,gCAEND,EAAAA,MAAKC,KAAA,CAAC,sCAEND,EAAAA,MAAKC,KAAA,CAAC,mCAEND,EAAAA,MAAKC,KAAA,CAAC,gCAEN2N,EAAAA,OAAM3N,KAAA,CAAC,6BAEP2N,EAAAA,OAAM3N,KAAA,CAAC,cAqDVmpD,EAvEA,GCOAa,GAAA,WAAA,SAAAA,IAMEjuD,KAAA40C,cAAqB,KACrB50C,KAAAkuD,SAAmB,EAIXluD,KAAA2a,UAAiB,KAQC3a,KAAAi4C,aAAwB,GAgGlDj4C,KAAAskC,UAAqB,EAiDvB,OAtIE9kC,OAAAsE,eAAuBmqD,EAAA/tD,UAAA,SAAM,KAI7B,WACE,OAAOF,KAAKijB,aALd,SAA8BvN,GAC5B1V,KAAKijB,QAAUvN,mCAoDjBlW,OAAAsE,eAA4BmqD,EAAA/tD,UAAA,cAAW,KAIvC,WACE,OAAOF,KAAKy0C,kBALd,SAAwClzC,GACtCvB,KAAKy0C,aAAelzC,GAAS,oCAgB/B/B,OAAAsE,eAAyBmqD,EAAA/tD,UAAA,WAAQ,KAIjC,WACE,OAAOF,KAAKm4C,eALd,SAAkC52C,GAChCvB,KAAKm4C,UAAY1rC,EAAiBlL,oCAepC/B,OAAAsE,eAAyBmqD,EAAA/tD,UAAA,cAAW,KAApC,SAAqCokC,GACnCtkC,KAAKskC,SAAW73B,EAAiB63B,GAEjCtkC,KAAK2gB,cAAc3gB,KAAKuB,wCAK1B0sD,EAAA/tD,UAAAkgB,iBAAA,SAAiBE,GACftgB,KAAK40C,cAAgBt0B,GAKvB2tC,EAAA/tD,UAAAmgB,kBAAA,SAAkBC,GAChBtgB,KAAK2a,UAAY2F,GAGnB2tC,EAAA/tD,UAAAqgB,0BAAA,SAA0BjT,GACxBtN,KAAKwgB,gBAAkBlT,GAGzB2gD,EAAA/tD,UAAA2gB,SAAA,SAASmlB,GACP,GAAI3B,GAAerkC,KAAKskC,UAAU,EAAO0B,EAAgBzkC,OACvD,MAAO,CAAE+iC,SAAU,CACjBC,OAAO,KAKb0pB,EAAA/tD,UAAA6gB,WAAA,SAAWxf,GACTvB,KAAKuB,MAAQA,GAIL0sD,EAAA/tD,UAAAqrC,YAAV,SAAsBhqC,GAEhBvB,KAAK40C,eACP50C,KAAK40C,cAAcrzC,IAIb0sD,EAAA/tD,UAAAygB,cAAV,SAAwBpf,GAClBvB,KAAKwgB,iBACPxgB,KAAKwgB,gBAAgBjf,0CA7IxByC,EAAAA,MAAKC,KAAA,CAAC,mCAWND,EAAAA,MAAKC,KAAA,CAAC,0BAeND,EAAAA,MAAKC,KAAA,CAAC,yBASND,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,0BAeND,EAAAA,MAAKC,KAAA,CAAC,mCAWND,EAAAA,MAAKC,KAAA,CAAC,mCAiBND,EAAAA,MAAKC,KAAA,CAAC,mCAgBND,EAAAA,MAAKC,KAAA,CAAC,iBAgDTgqD,EApKA,GCQAE,GAAA,SAAAhqD,GAuBE,SAAAgqD,EAAoB3oD,GAApB,IAAAE,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAF,QAAAA,EANZE,EAAA29C,SAAW39C,EAAK0oD,2BAA2BjwC,KAAKzY,KA+C1D,OAjD0CtB,EAAAA,EAAAA,GAIxC5E,OAAAsE,eAAIqqD,EAAAjuD,UAAA,WAAQ,KAAZ,WACE,MAA8B,KAAtBF,KAAKi4C,eAAwBj4C,KAAKuB,OAASvB,KAAKskC,UAAYtkC,KAAKkuD,QAAWluD,KAAKi4C,aAAe,oCAO1GkW,EAAAjuD,UAAAsG,gBAAA,WAEOxG,KAAK40C,gBACR50C,KAAKwF,QAAQoB,cAAc6Q,iBAAiB,QAASzX,KAAKqjD,UAC1DrjD,KAAKwF,QAAQoB,cAAc6Q,iBAAiB,MAAOzX,KAAKqjD,UACxDrjD,KAAKwF,QAAQoB,cAAc6Q,iBAAiB,QAASzX,KAAKqjD,YAI9D8K,EAAAjuD,UAAA+G,YAAA,WACOjH,KAAK40C,gBACR50C,KAAKwF,QAAQoB,cAAcuR,oBAAoB,QAASnY,KAAKqjD,UAC7DrjD,KAAKwF,QAAQoB,cAAcuR,oBAAoB,MAAOnY,KAAKqjD,UAC3DrjD,KAAKwF,QAAQoB,cAAcuR,oBAAoB,QAASnY,KAAKqjD,YAIjE8K,EAAAjuD,UAAAmuD,YAAA,SAAY9sD,GACVvB,KAAKuB,MAAQA,EACbvB,KAAKkuD,SAAW3sD,EAChBvB,KAAKurC,YAAYvrC,KAAKuB,QAGhB4sD,EAAAjuD,UAAAkuD,2BAAR,WAAA,IAAA1oD,EAAA1F,KACE6I,WAAU,eACFtH,EAAQmE,EAAKnE,MACbiE,EAAUE,EAAKF,QAAQoB,eAExBrF,GAASmE,EAAK4+B,UACjB9+B,EAAQ0gB,UAAU+a,IAAI,cACtBz7B,EAAQ0gB,UAAU+a,IAAI,aAEtBz7B,EAAQ0gB,UAAUgb,OAAO,qCA3DhCz8B,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,gBACVC,SAAA,ouBACA4G,UAAW,CACX,CACE8W,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAA2rC,IAC9B1rC,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAA2rC,IAC9B1rC,OAAO,iDAjCwBvZ,EAAAA,cAqFnCilD,EAhEA,CAe0CF,ICpC7BK,GAA6B,CACxCvyC,GAAI,CACFwyC,KAAM,OACNC,OAAQ,SACRC,UAAW,YACXh6C,KAAM,OACNi6C,OAAQ,SACRp6C,MAAO,QACPq6C,QAAS,UACTC,cAAe,iBAEjB5yC,GAAI,CACFuyC,KAAM,UACNC,OAAQ,UACRC,UAAW,YACXh6C,KAAM,YACNi6C,OAAQ,SACRp6C,MAAO,UACPq6C,QAAS,cACTC,cAAe,qBAEjB9yC,GAAI,CACFyyC,KAAM,UACNC,OAAQ,UACRC,UAAW,aACXh6C,KAAM,WACNi6C,OAAQ,SACRp6C,MAAO,UACPq6C,QAAS,cACTC,cAAe,uCC4DjB,SAAAC,EAAoBr8B,GAAAxyB,KAAAwyB,gBAAAA,EA3EXxyB,KAAAgtB,SAAQ5sB,EAAA,GACZkuD,GAA2BtuD,KAAKwyB,gBAAgBrmB,qBAGrDnM,KAAA8uD,aAAyD,CACvD,CACEpB,QAAS,cACTv8B,KAAM,sBACN7a,QAAStW,KAAKgtB,SAASvY,KACvBmb,OAAQ5vB,KAAK+uD,iBAAiB5wC,KAAKne,KAAM,eACzCyZ,UAAU,GAEZ,CACEi0C,QAAS,gBACTv8B,KAAM,wBACN7a,QAAStW,KAAKgtB,SAAS0hC,OACvB9+B,OAAQ5vB,KAAK+uD,iBAAiB5wC,KAAKne,KAAM,kBAE3C,CACE0tD,QAAS,eACTv8B,KAAM,uBACN7a,QAAStW,KAAKgtB,SAAS1Y,MACvBsb,OAAQ5vB,KAAK+uD,iBAAiB5wC,KAAKne,KAAM,iBAE3C,CACE0tD,QAAS,cACTv8B,KAAM,yBACN7a,QAAStW,KAAKgtB,SAAS2hC,QACvB/+B,OAAQ5vB,KAAK+uD,iBAAiB5wC,KAAKne,KAAM,iBAI7CA,KAAAgvD,cAA0D,CACxD,CACEtB,QAAS,OACTv8B,KAAM,qBACN7a,QAAStW,KAAKgtB,SAASuhC,KACvB3+B,OAAQ5vB,KAAKivD,YAAY9wC,KAAKne,KAAM,SAEtC,CACE0tD,QAAS,SACTv8B,KAAM,uBACN7a,QAAStW,KAAKgtB,SAASwhC,OACvB5+B,OAAQ5vB,KAAKivD,YAAY9wC,KAAKne,KAAM,WAEtC,CACE0tD,QAAS,YACTv8B,KAAM,0BACN7a,QAAStW,KAAKgtB,SAASyhC,UACvB7+B,OAAQ5vB,KAAKivD,YAAY9wC,KAAKne,KAAM,eAIxCA,KAAAkvD,YAAwD,CACtD,CACExB,QAAS,sBACTv8B,KAAM,gBACN7a,QAAStW,KAAKgtB,SAAS4hC,cACvBh/B,OAAQ5vB,KAAKivD,YAAY9wC,KAAKne,KAAM,yBAenBA,KAAA0tD,QAAU,IAAI/7C,EAAAA,aAuCrC,OAhDEnS,OAAAsE,eAAyB+qD,EAAA3uD,UAAA,WAAQ,KAKjC,WACE,OAAOF,KAAKm4C,eANd,SAAkC52C,GAChCvB,KAAKm4C,UAAY52C,EACjBvB,KAAKmvD,qBAAqBnvD,KAAKm4C,4CAWjC0W,EAAA3uD,UAAAsG,gBAAA,WACExG,KAAKovD,qBAGPP,EAAA3uD,UAAAmvD,iBAAA,SAAiBhC,GACVrtD,KAAKsnC,WACRtnC,KAAK8uD,aAAav1C,QAAO,SAACC,GAAYA,EAAOC,SAAW4zC,EAAStpD,SAASyV,EAAOk0C,WACjF1tD,KAAKgvD,cAAcz1C,QAAO,SAACC,GAAYA,EAAOC,SAAW4zC,EAAStpD,SAASyV,EAAOk0C,WAClF1tD,KAAKkvD,YAAY,GAAGz1C,SAAW4zC,EAAStpD,SAAS/D,KAAKkvD,YAAY,GAAGxB,WAIjEmB,EAAA3uD,UAAA6uD,iBAAR,SAAyBrB,OACjB14C,EAAQhV,KAAK8uD,aAAat/C,UAAS,SAAE8/C,GAAO,OAAAA,EAAI5B,UAAYA,IAC9D1tD,KAAK8uD,aAAa95C,GAAOyE,WAC3BzZ,KAAK8uD,aAAa95C,GAAOyE,UAAW,GAEtCzZ,KAAK0tD,QAAQ37C,KAAK27C,IAGZmB,EAAA3uD,UAAA+uD,YAAR,SAAoBvB,GAClB1tD,KAAK0tD,QAAQ37C,KAAK27C,IAGZmB,EAAA3uD,UAAAkvD,kBAAR,WACkBpvD,KAAKuvD,eAAe3oD,cAAcsB,iBAAiB,UAC3DqR,QAAO,SAACC,GAAYA,EAAOqN,aAAa,WAAY,SAGtDgoC,EAAA3uD,UAAAivD,qBAAR,SAA6BK,GAC3BxvD,KAAK8uD,aAAav1C,QAAO,SAACC,GAAYA,EAAOgY,SAAWg+B,IACxDxvD,KAAKgvD,cAAcz1C,QAAO,SAACC,GAAYA,EAAOgY,SAAWg+B,IACzDxvD,KAAKkvD,YAAY,GAAG19B,SAAWg+B,uBArHlC/qD,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,wBACVC,SAAA,qjBANOitB,8CA0ENxoB,EAAAA,UAASnF,KAAA,CAAC,iBAAkB,CAAEqF,UAAQ,sBAEtCtF,EAAAA,MAAKC,KAAA,CAAC,+BASN2N,EAAAA,OAAM3N,KAAA,CAAC,gBAuCV4qD,KCrGAY,GAAA,SAAAtrD,GAiBE,SAAAsrD,EAAY1qC,UACV5gB,EAAAvD,KAAAZ,KAAM+kB,IAAG/kB,KAOb,OAVuCoE,EAAAA,EAAAA,GAMrCqrD,EAAAvvD,UAAAw9C,gBAAA,SAAgB58B,GACd,OAAO,0BAtBVrc,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,YACVC,SAAA,4jCACA4G,UAAW,CACX,CACE8W,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAitC,IAC9BhtC,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAAitC,IAC9BhtC,OAAO,iDArCSvZ,EAAAA,cAkDpBumD,EAzBA,CAeuC7M,mBChCrC,SAAA8M,EAAYl5C,GAAZ,IAAA9Q,EACEvB,EAAAvD,KAAAZ,KAAMwW,IAAWxW,YAHnB0F,EAAA0H,KAAO,WAoET,OAtEqDhJ,EAAAA,EAAAA,GAQnDsrD,EAAAxvD,UAAA4iD,aAAA,SAAaphD,GACX,IAAK1B,KAAKkxC,KAAM,KACV3vC,EAAQG,EAAE4F,OAAO/F,MACfouD,EAAiB3vD,KAAK+iD,eAAe/iD,KAAKykC,UAAWljC,GAEvDA,IAAUouD,IACZpuD,EAAQouD,EAER3vD,KAAK81C,QAAQlvC,cAAcrF,MAAQA,GAGrCvB,KAAKw1C,aAAax1C,KAAKk+B,aAAa38B,MAIxCmuD,EAAAxvD,UAAA6iD,eAAA,SAAete,EAAmBljC,GAEhC,GAAIkjC,GAAaljC,EAAMZ,OAAS8jC,EAAW,KACnCmrB,EAAiBruD,EAAMsN,WAAWxC,UAAU,EAAGo4B,GAErD,OAAImrB,GAAkB5vD,KAAK6vD,aAAaD,GAC/BA,EAAe/gD,WAAWxC,UAAU,EAAGo4B,EAAY,GAGrDmrB,EAGT,OAAOruD,GAGTmuD,EAAAxvD,UAAAy9C,gBAAA,SAAgBp8C,GACVvB,KAAK81C,UACHv0C,GAAmB,IAAVA,EACPvB,KAAKkxC,MACPlxC,KAAK81C,QAAQlvC,cAAcrF,MAAQvB,KAAKi1C,QAAQrD,kBAAkBsJ,OAAO35C,IAGrEvB,KAAKi1C,QAAQ9D,aACfnxC,KAAKg9C,kBAAkBh9C,KAAKi1C,QAAQxD,eAGtCzxC,KAAK81C,QAAQlvC,cAAcrF,MAAQA,EAGrCvB,KAAK81C,QAAQlvC,cAAcrF,MAAQ,IAMvCvB,KAAK+8C,YAAYhrC,KAAKxQ,IAIhBmuD,EAAAxvD,UAAA2vD,aAAR,SAAqBtuD,GACnB,OAAOA,GAASA,EAAM8zB,YAAY,OAAS9zB,EAAMZ,OAAS,GAGpD+uD,EAAAxvD,UAAAg+B,aAAR,SAAqB38B,GACnB,OAAOA,EAAQojC,OAAOpjC,GAAS,MAGnCmuD,GAtEqD9M,IC4BrDkN,GAAA,SAAA3rD,GA4CE,SAAA2rD,EAAY/qC,GAAZ,IAAArf,EACEvB,EAAAvD,KAAAZ,KAAM+kB,IAAG/kB,YAHM0F,EAAAlE,KAAgB,MAuBnC,OAlDwC4C,EAAAA,EAAAA,GAItC5E,OAAAsE,eAAoBgsD,EAAA5vD,UAAA,SAAM,KAA1B,SAA2B6vD,OACnBC,EAAYjjD,SAASgjD,EAAK,IAChC/vD,KAAK+vD,IAAOxmB,MAAMymB,GAAyBzrD,UAAZyrD,EAC/BhwD,KAAK2gB,iDAKPnhB,OAAAsE,eAAoBgsD,EAAA5vD,UAAA,SAAM,KAA1B,SAA2B+vD,OACnBD,EAAYjjD,SAASkjD,EAAK,IAChCjwD,KAAKiwD,IAAO1mB,MAAMymB,GAAyBzrD,UAAZyrD,EAC/BhwD,KAAK2gB,iDAkBPmvC,EAAA5vD,UAAAw9C,gBAAA,SAAgB1X,GAEd,O1CrDsB+pB,E0CqDR/vD,KAAK+vD,M1CrDgBxuD,E0CqDXykC,EAAgBzkC,Q1CpDJ,IAAVA,KACXwuD,GAAe,IAARA,IACSxuD,EAAQwuD,E0CmD9B,CAAEA,IAAK,CACZxrB,OAAO,I1CjDf,SAA0B0rB,EAAa1uD,GAGrC,OAFmBA,GAAmB,IAAVA,KACX0uD,GAAe,IAARA,IACS1uD,EAAQ0uD,E0CkDnCC,CAAUlwD,KAAKiwD,IAAKjqB,EAAgBzkC,OAC/B,CAAE0uD,IAAK,CACZ1rB,OAAO,IAIJ,K1CjEX,IAA0BwrB,EAAaxuD,uB0CGtCkD,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,aACVC,SAAA,w9BACA4G,UAAW,CACX,CACE8W,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAstC,IAC9BrtC,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAAstC,IAC9BrtC,OAAO,iDA5CSvZ,EAAAA,8CAmDjBlF,EAAAA,MAAKC,KAAA,CAAC,yBAQND,EAAAA,MAAKC,KAAA,CAAC,uBAeND,EAAAA,MAAKC,KAAA,CAAC,aAuBT6rD,EAjEA,CAewCJ,IClBxCS,GAAA,SAAAhsD,GA2CE,SAAAgsD,EAAYprC,GAAZ,IAAArf,EACEvB,EAAAvD,KAAAZ,KAAM+kB,IAAG/kB,YA3BH0F,EAAA0qD,mBAA8B,EAEtC1qD,EAAA0H,KAAO,WACP1H,EAAA2qD,iBAAkB,IAoCpB,OAzC0CjsD,EAAAA,EAAAA,GAgBxC5E,OAAAsE,eAAmCqsD,EAAAjwD,UAAA,mBAAgB,KAQnD,WACE,OAAOF,KAAKowD,uBATd,SAAoD7uD,GAClDvB,KAAKowD,kBAAoB3jD,EAAiBlL,GACtCA,IACFvB,KAAKqwD,iBAAkB,EACvBrwD,KAAKoN,KAAO,6CAYhB+iD,EAAAjwD,UAAAw9C,gBAAA,SAAgB58B,GACd,OAAO,MAGTqvC,EAAAjwD,UAAAowD,aAAA,WACEtwD,KAAKqwD,iBAAmBrwD,KAAKqwD,gBAC7BrwD,KAAKoN,KAAqB,aAAdpN,KAAKoN,KAAsB,OAAS,gCArDnD3I,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,eACVC,SAAA,4+CACA4G,UAAW,CACX,CACE8W,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAA2tC,IAC9B1tC,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAA2tC,IAC9B1tC,OAAO,iDAxCSvZ,EAAAA,wDA2DjBlF,EAAAA,MAAKC,KAAA,CAAC,2BAyBTksD,EAxDA,CAe0CvN,ICpCpC2N,GAA4C,EAelDC,GAAA,WAAA,SAAAA,IAEUxwD,KAAA64B,SAAmB03B,GACnBvwD,KAAAsR,WAAsB,EAEtBtR,KAAAqlC,WAAsB,EAE9BrlC,KAAAmlC,UAAoBorB,GAGZvwD,KAAAg9C,kBAAyB,KAkGbh9C,KAAA8a,OAA6B,IAAInJ,EAAAA,aAqEvD,OAlJEnS,OAAAsE,eAAwB0sD,EAAAtwD,UAAA,UAAO,KAO/B,WACE,OAAOF,KAAK64B,cARd,SAAgCt3B,OACxBi4B,EAAU5sB,EAAarL,EAAOgvD,IAEpCvwD,KAAK64B,SAAW74B,KAAKulC,qBAAqB/L,EAAS,GACnDx5B,KAAKmlC,UAAYnlC,KAAKulC,qBAAqB/L,EAAS,oCAgBtDh6B,OAAAsE,eAAyB0sD,EAAAtwD,UAAA,WAAQ,KAMjC,WACE,OAAOF,KAAKsR,eAPd,SAAkCkgB,GAChCxxB,KAAKsR,UAAY7E,EAAiB+kB,GAElCxxB,KAAK2gB,iDAgBPnhB,OAAAsE,eAAyB0sD,EAAAtwD,UAAA,WAAQ,KAMjC,WACE,OAAOF,KAAKqlC,eAPd,SAAkCf,GAChCtkC,KAAKqlC,UAAY54B,EAAiB63B,GAElCtkC,KAAK2gB,iDAWPnhB,OAAAsE,eAAwB0sD,EAAAtwD,UAAA,UAAO,KAI/B,WACE,OAAOF,KAAK0lC,cALd,SAAgCnkC,GAC9BvB,KAAK0lC,SAAWnkC,EAChB+N,EAAwBtP,KAAKqmC,0CA4B/BmqB,EAAAtwD,UAAAylC,YAAA,SAAY8qB,GACNzwD,KAAKg9C,mBACPh9C,KAAKg9C,kBAAkByT,GAGrBzwD,KAAKuB,QAAUkvD,GACjBzwD,KAAK8a,OAAO/I,KAAK0+C,GAGnBzwD,KAAKuB,MAAQkvD,GAGfD,EAAAtwD,UAAAkgB,iBAAA,SAAiB9S,GACftN,KAAKg9C,kBAAoB1vC,GAG3BkjD,EAAAtwD,UAAAmgB,kBAAA,SAAkB/S,KAElBkjD,EAAAtwD,UAAAqgB,0BAAA,SAA0BjT,GACxBtN,KAAKwgB,gBAAkBlT,GAGzBkjD,EAAAtwD,UAAA2gB,SAAA,SAASmlB,GAEP,GAAI3B,GAAerkC,KAAKskC,SAAUtkC,KAAKwxB,SAAUwU,EAAgBzkC,OAC/D,MAAO,CACL+iC,SAAU,CACRC,OAAO,KAOfisB,EAAAtwD,UAAA6gB,WAAA,SAAWw+B,GACTv/C,KAAKuB,MAAQg+C,GAGGv/C,KAAK0wD,kBAAkBnR,IACvBv/C,KAAKg9C,oBACnBh9C,KAAKuB,MAAQgD,UACbvE,KAAKg9C,kBAAkBh9C,KAAKuB,SAIxBivD,EAAAtwD,UAAAgmC,kBAAR,SAA0B1M,EAAS2M,GAGjC,OAAO3M,GAFY,GAEaA,GAAW2M,GAGrCqqB,EAAAtwD,UAAAqlC,qBAAR,SAA6B/L,EAAiB2M,OACtCI,EApLsC,GAoLgB/M,EAE5D,OAAOx5B,KAAKkmC,kBAAkB1M,EAAS2M,GAAcI,EAAoBgqB,IAGnEC,EAAAtwD,UAAAygB,cAAR,WACM3gB,KAAKwgB,iBACPxgB,KAAKwgB,iDA/JRxc,EAAAA,MAAKC,KAAA,CAAC,yBAiBND,EAAAA,MAAKC,KAAA,CAAC,+BAoBND,EAAAA,MAAKC,KAAA,CAAC,gCAmBND,EAAAA,MAAKC,KAAA,CAAC,+BAcND,EAAAA,MAAKC,KAAA,CAAC,+BAqBND,EAAAA,MAAKC,KAAA,CAAC,8BAGN2N,EAAAA,OAAM3N,KAAA,CAAC,eAqEVusD,EAjLA,GCYAG,GAAA,SAAAxsD,GA4BE,SAAAwsD,EAAYprD,GAAZ,IAAAG,EACEvB,EAAAvD,KAAAZ,OAAOA,YACP0F,EAAKY,OAASf,EAAQgB,KAAK,IAAIpG,OAAO,QAgC1C,OA9C4CiE,EAAAA,EAAAA,GAiB1CusD,EAAAzwD,UAAAwG,UAAA,WACiB1G,KAAKsG,OAAOiB,KAAKvH,KAAKqmC,UAEnC/2B,EAAwBtP,KAAKqmC,UAIjCsqB,EAAAzwD,UAAA0wD,WAAA,SAAWrvD,EAAYiwB,GAChBA,GACHxxB,KAAK2lC,YAAYpkC,IAIrBovD,EAAAzwD,UAAAwwD,kBAAA,SAAkBnvD,GAChB,OAAOvB,KAAK81C,QAAQlvC,cAAcoB,cAAc,gBAAgBzG,EAAK,OAGvEovD,EAAAzwD,UAAAwuC,QAAA,SAAQxoC,EAAsB3E,OACtB+6B,EAAMp2B,EAAMiJ,SAAWjJ,EAAMkJ,MAE/BpP,KAAK6wD,WAAWv0B,IAClBt8B,KAAK2lC,YAAYpkC,IAIbovD,EAAAzwD,UAAA2wD,WAAR,SAAmBv0B,GACjB,OAAOA,GAAO,IAAMA,GAAO,wBA3D9B73B,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,kBACVC,SAAA,qjCACA4G,UAAW,CACT,CACE8W,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAmuC,IAC9BluC,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAAmuC,IAC9BluC,OAAO,iDA/C+CxZ,EAAAA,kDAsDzDjF,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,2BAENmF,EAAAA,UAASnF,KAAA,CAAC,MAAO,CAACoF,KAAMH,EAAAA,WAAYI,UAAQ,OAsC/CqnD,EA9DA,CAgB4CH,IC9B5CM,GAAA,WAsHE,SAAAA,EAAmBtrD,EAAqBokB,GAArB5pB,KAAAwF,QAAAA,EApHXxF,KAAAsR,WAAsB,EAEtBtR,KAAAm4C,WAAqB,EACrBn4C,KAAAqlC,WAAsB,EA+CVrlC,KAAA8a,OAA6B,IAAInJ,EAAAA,aAG5B3R,KAAAslC,cAAoC,IAAI3zB,EAAAA,aA2DjE3R,KAAAwqD,mBAA6B,EAK3BxqD,KAAKwF,QAAUA,EACfxF,KAAK4pB,eAAiBA,EAiD1B,OAjIEpqB,OAAAsE,eAAwBgtD,EAAA5wD,UAAA,UAAO,KAO/B,WACE,OAAOF,KAAK0lC,cARd,SAAgCW,GAC9BrmC,KAAK0lC,SAAWW,EAChB/2B,EAAwBtP,KAAK0lC,UAC7B/1B,EAA8B3P,KAAK0lC,UACnC1lC,KAAK+wD,mDAsBPvxD,OAAAsE,eAAyBgtD,EAAA5wD,UAAA,WAAQ,KAKjC,WACE,OAAOF,KAAKsR,eANd,SAAkCkgB,GAChCxxB,KAAKsR,UAAY7E,EAAiB+kB,GAElCxxB,KAAK2gB,iDAePnhB,OAAAsE,eAAyBgtD,EAAA5wD,UAAA,WAAQ,KAIjC,WACE,OAAOF,KAAKm4C,eALd,SAAkC52C,GAChCvB,KAAKm4C,UAAY1rC,EAAiBlL,oCAgBpC/B,OAAAsE,eACIgtD,EAAA5wD,UAAA,WAAQ,KAKZ,WACE,OAAOF,KAAKqlC,eAPd,SACaf,GACXtkC,KAAKqlC,UAAY54B,EAAiB63B,GAElCtkC,KAAK2gB,iDAkBPmwC,EAAA5wD,UAAAsrC,gBAAA,SAAgBjqC,GAEd,OAAQvB,KAAkB,cAAIA,KAAKyrC,cAAclqC,GAASvB,KAAKslC,cAAcvzB,KAAKxQ,IAGpFuvD,EAAA5wD,UAAAq4C,SAAA,SAASh3C,GACPvB,KAAK8a,OAAO/I,KAAKxQ,IAGnBuvD,EAAA5wD,UAAA2gB,SAAA,SAASmlB,GAEP,OAAI3B,GAAerkC,KAAKqlC,UAAWrlC,KAAKsR,UAAW00B,EAAgBzkC,OAC1D,CACL+iC,SAAU,CACRC,OAAO,IAKN,MAGTusB,EAAA5wD,UAAAkgB,iBAAA,SAAiB9S,GACftN,KAAKyrC,cAAgBn+B,GAGvBwjD,EAAA5wD,UAAAmgB,kBAAA,SAAkB/S,GAChBtN,KAAK8sC,eAAiBx/B,GAGxBwjD,EAAA5wD,UAAAqgB,0BAAA,SAA0BjT,GACxBtN,KAAKgxD,kBAAoB1jD,GAGnBwjD,EAAA5wD,UAAAygB,cAAR,WACM3gB,KAAKgxD,mBACPhxD,KAAKgxD,oDArJRhtD,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,sBAGND,EAAAA,MAAKC,KAAA,CAAC,+BAGND,EAAAA,MAAKC,KAAA,CAAC,mCAeND,EAAAA,MAAKC,KAAA,CAAC,+BAMND,EAAAA,MAAKC,KAAA,CAAC,6BAYN2N,EAAAA,OAAM3N,KAAA,CAAC,mCAGP2N,EAAAA,OAAM3N,KAAA,CAAC,mCAWPD,EAAAA,MAAKC,KAAA,CAAC,gCAkBND,EAAAA,MAAKC,KAAA,CAAC,gCAiBND,EAAAA,MAAKC,KAAA,CAAC,iBAoET6sD,EAzKA,GCwBAG,GAAA,WAME,SAAAA,EAAmBr0B,GAAA58B,KAAA48B,YAAAA,EAErB,2BARCtkB,EAAAA,UAASrU,KAAA,CAAC,CACTS,SAAU,0EA9CQm4B,EAAAA,eAqDpBo0B,EARA,GChCMC,GAAkC,SAyBxCC,GAAA,SAAAhtD,GAwCE,SAAAgtD,EACE3rD,EACAokB,EACArkB,EACOE,EACCkoC,GALV,IAAAjoC,EAOEvB,EAAAvD,KAAAZ,KAAMwF,EAASokB,IAAe5pB,YAHvB0F,EAAAD,SAAAA,EACCC,EAAAioC,gBAAAA,EAxBVjoC,EAAAoJ,SAAgBA,IAEhBpJ,EAAAsK,MAAgB,EAEhBtK,EAAA0rD,WAAqB,sBAgNb1rD,EAAA4pB,SAAQ,WACd5pB,EAAKioC,gBAAgBr7B,eAAe4+C,KAzLpCxrD,EAAKY,OAASf,EAAQgB,KAAK,IAAIpG,OAAO,QAkO1C,OAjQwCiE,EAAAA,EAAAA,GAkCtC5E,OAAAsE,eAAIqtD,EAAAjxD,UAAA,0BAAuB,KAA3B,WACE,OAAOF,KAAKsnC,UAAYtnC,KAAK8O,0CAGMqiD,EAAAjxD,UAAAw2C,UAArC,SAA+C/E,OAEvC0P,EAAW1P,EAAOviC,OAASuiC,EAAOxiC,QAGpCnP,KAAKsnC,SAEH+Z,IAAa/S,GAAetG,MAC9BhoC,KAAKqxD,qCACL1f,EAAOzd,mBAMLl0B,KAAKgQ,OAAQ2hC,EAAO2f,QAAYjQ,IAAa/S,GAAe7G,WAAa4Z,IAAa/S,GAAe5G,SACzG1nC,KAAKqxD,qCAIHhQ,IAAa/S,GAAezG,OAASwZ,IAAa/S,GAAevG,OACnE/nC,KAAKqxD,qCAIHrxD,KAAKgQ,MAAQqxC,IAAa/S,GAAetG,MAC3C2J,EAAOzd,iBACPl0B,KAAKuxD,kBAITJ,EAAAjxD,UAAAwG,UAAA,WACiB1G,KAAKsG,OAAOiB,KAAKvH,KAAKqmC,WAEnC/2B,EAAwBtP,KAAKqmC,SAC7B12B,EAA8B3P,KAAKqmC,WAIvC8qB,EAAAjxD,UAAAsxD,aAAA,WACExxD,KAAKoxD,WAAa,sBAClBpxD,KAAK0E,SAAS,yBAAyBwhB,UAAUgb,OAAO,mBACxDlhC,KAAKgQ,MAAO,EAEZhQ,KAAK4pB,eAAe6nC,eACpBzxD,KAAK0xD,cAAc9qD,cAAcotB,QAEjCh0B,KAAKuvB,mBAGP4hC,EAAAjxD,UAAA6qC,QAAA,SAAQxpC,EAAYmqC,GAClB,OAAKnqC,GAAmB,IAAVA,IAAgBmqC,EACrBnqC,EAAMsN,aAAe68B,EAAW78B,aAG1B,OAAVtN,GAAiC,OAAfmqC,GAClBnqC,IAAUgD,WAAamnC,IAAennC,aACzChD,EAAQ,GAAGA,GAGNA,IAAUmqC,IAGnBylB,EAAAjxD,UAAAwvC,cAAA,SAAcpJ,GACZtmC,KAAKuxD,eACLvxD,KAAKurC,YAAYjF,IAInB6qB,EAAAjxD,UAAAyxD,eAAA,SAAepwD,GAAf,IAAAmE,EAAA1F,KACQ4xD,EAAa5xD,KAAKwF,QAAQoB,cAAcoB,cAAc,yBAE5D,GAAIzG,GAASvB,KAAKqmC,SAAWrmC,KAAKqmC,QAAQ1lC,OAAQ,KAE1CurC,EAA+BlsC,KAAKqmC,QAAQ9/B,KAAI,SAAC+/B,GACrD,OAAO5gC,EAAKqlC,QAAQzE,EAAO/kC,MAAOA,KAGpC,GAAI2qC,EAAa,KACTl3B,EAAQhV,KAAKqmC,QAAQryB,QAAQk4B,GACnC0lB,EAAW3jB,UAAajuC,KAAK6xD,YAAY78C,EAAO48C,EAAWlhC,cAC3D1wB,KAAKurC,YAAYW,MAKvBilB,EAAAjxD,UAAA6wD,gBAAA,WACM/wD,KAAKu/C,YACPv/C,KAAK2xD,eAAe3xD,KAAKu/C,aAI7B4R,EAAAjxD,UAAA2xD,YAAA,SAAY78C,EAAO0b,OACXohC,GAA6B98C,EAAQ,GAAKhV,KAAK+xD,sBACrD,OAAO/xD,KAAKgyD,eAAiBF,EAAoBphC,EAAeohC,EAAqB,GAGvFX,EAAAjxD,UAAAwE,SAAA,SAASutD,GACP,OAAOjyD,KAAKwF,QAAQoB,cAAcoB,cAAciqD,IAGlDd,EAAAjxD,UAAAqxD,aAAA,WACEvxD,KAAKgQ,KAAOhQ,KAAKwxD,eAAiBxxD,KAAK2F,gBAIzCwrD,EAAAjxD,UAAAqrC,YAAA,SAAYjF,GACNtmC,KAAK+pC,gBAAkBzD,EAAO/kC,QAChCvB,KAAK+pC,cAAgBzD,EAAO/kC,MAC5BvB,KAAK0xD,cAAc9qD,cAAcrF,MAAQ+kC,EAAO/kC,MAChDvB,KAAKwrC,gBAAgBlF,EAAO/kC,OAC5BvB,KAAKkf,aAAeonB,EAAOjkC,MAC3BrC,KAAKu4C,SAASjS,EAAO/kC,SAKzB4vD,EAAAjxD,UAAAkwC,mBAAA,SAAmBlqC,GACZlG,KAAKkyD,oBAAoBtrD,cAAcS,SAASnB,EAAMoB,SACtDtH,KAAKqwC,YAAYzpC,cAAcS,SAASnB,EAAMoB,SACjDtH,KAAKwxD,gBAKTL,EAAAjxD,UAAA6gB,WAAA,SAAWxf,GAAX,IAAAmE,EAAA1F,KAEQksC,EAAclsC,KAAKqmC,QAAQ9/B,KAAI,SAAC+/B,GACpC,OAAO5gC,EAAKqlC,QAAQzE,EAAO/kC,MAAOA,KAGhC2qC,GACFlsC,KAAK0xD,cAAc9qD,cAAcrF,MAAQ2qC,EAAY3qC,MACrDvB,KAAK+pC,cAAgBmC,EAAY3qC,MACjCvB,KAAKkf,aAAgBgtB,EAAiB,OAE7Bt8B,EAAW5P,KAAK+pC,iBACzB/pC,KAAK0xD,cAAc9qD,cAAcrF,MAAQgD,UACzCvE,KAAKwrC,gBAAgBjnC,WACrBvE,KAAK+pC,cAAgBxlC,UACrBvE,KAAKkf,aAAe3a,WAGtBvE,KAAKu/C,WAAah+C,EAClBvB,KAAK4pB,eAAekB,iBAKdqmC,EAAAjxD,UAAAmxD,mCAAR,WAAA,IAAA3rD,EAAA1F,KACEA,KAAK0xD,cAAc9qD,cAAc0O,MAAMqiC,QAAU,OAEjD9uC,WAAU,WACRnD,EAAKgsD,cAAc9qD,cAAc0O,MAAMqiC,QAAU,QACjDjyC,EAAK6rD,kBAIDJ,EAAAjxD,UAAA6xD,oBAAR,eACQI,EAAanyD,KAAK0E,SAAS,uBAEjC,OAAOytD,GAAcA,EAAWzhC,cAG1BygC,EAAAjxD,UAAAywB,oBAAR,WAAA,IAAAjrB,EAAA1F,KAEEA,KAAK8I,iBAAmB9I,KAAKyF,SAASsD,OAAO,WAAY,QAAO,SAAG7C,GACjER,EAAK0qC,mBAAmBlqC,KAG1BlG,KAAK8wC,oBAAsB9wC,KAAKyF,SAASsD,OAAO,SAAU,SAAQ,WAChErD,EAAK8rD,iBAGPziD,OAAO0I,iBAAiB,SAAUzX,KAAKsvB,UAAU,IAO3C6hC,EAAAjxD,UAAAqvB,gBAAR,WACMvvB,KAAK8I,kBACP9I,KAAK8I,mBAGP9I,KAAK8wC,sBACL/hC,OAAOoJ,oBAAoB,SAAUnY,KAAKsvB,UAAU,IAG9C6hC,EAAAjxD,UAAA8sD,oBAAR,WAEEhtD,KAAK2tC,gBAAgB76B,YACnB9S,KAAKoyD,YAAYxrD,cAnRQ,EAqRzB5G,KAAKkyD,oBACL,CAAC,MAAO,WACR,GAGFlyD,KAAK2tC,gBAAgBr7B,eAAe4+C,KAG9BC,EAAAjxD,UAAAyF,aAAR,WACE,IAAK3F,KAAKsnC,SAAU,CAElB,GADAtnC,KAAK0xD,cAAc9qD,cAAcotB,QAC7Bh0B,KAAKqmC,SAAWrmC,KAAKqmC,QAAQ1lC,OACZX,KAAKwF,QAAQoB,cAAcoB,cAAc,yBACjDimC,UAAYjuC,KAAKgyD,eAE9BhyD,KAAKoxD,WAAa,oBAClBpxD,KAAK0E,SAAS,yBAAyBwhB,UAAU+a,IAAI,mBACrDjhC,KAAKgQ,MAAO,EACZhQ,KAAK4pB,eAAe6nC,eACpBzxD,KAAKgtD,sBACLhtD,KAAK2wB,4CA/QVlsB,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,aACVC,SAAA,ykEACA0tD,gBAAiBC,EAAAA,wBAAwBC,OACzChnD,UAAW,CACT,CACE8W,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAA2uC,IAC9B1uC,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAA2uC,IAC9B1uC,OAAO,GAETvQ,iDArDmFhJ,EAAAA,kBAArDmiB,EAAAA,yBAChCpiB,EAAAA,uBAAiBE,EAAAA,iBAIV+I,oDAkENuvB,EAAAA,aAAYx9B,KAAA,CAACgtD,GAAkC,CAAE3nD,UAAQ,yBAEzDF,EAAAA,UAASnF,KAAA,CAAC,cAAe,CAACoF,KAAMH,EAAAA,WAAYI,UAAQ,yBACpDF,EAAAA,UAASnF,KAAA,CAAC,OAAQ,CAACoF,KAAMH,EAAAA,WAAYI,UAAQ,2BAC7CF,EAAAA,UAASnF,KAAA,CAAC,SAAU,CAACoF,KAAMH,EAAAA,WAAYI,UAAQ,iCAC/CF,EAAAA,UAASnF,KAAA,CAAC,eAAgB,CAACoF,KAAMH,EAAAA,WAAYI,UAAQ,uBAkBrDiP,EAAAA,aAAYtU,KAAA,CAAC,UAAW,CAAC,cA2N5BktD,EAnRA,CAkBwCL,QC/CtC0B,MAAA,EAEAC,KAAA,2CCSF,IAAAC,GAAA,WAAA,SAAAA,IAEU1yD,KAAAsR,WAAsB,EAG9BtR,KAAA2yD,aAAuB,EAgBvB3yD,KAAA4yD,QAAmB,OAUnB5yD,KAAA6yD,SAAoB,QAcpB7yD,KAAA8yD,cAAyCC,GAAuBP,MAuB5CxyD,KAAA8a,OAA6B,IAAInJ,EAAAA,aAG5B3R,KAAAslC,cAAoC,IAAI3zB,EAAAA,aAiCnE,OAlFEnS,OAAAsE,eAAyB4uD,EAAAxyD,UAAA,aAAU,KAAnC,SAAoCmC,GAClCrC,KAAK4yD,QAAUvwD,GAAS,wCAS1B7C,OAAAsE,eAA0B4uD,EAAAxyD,UAAA,cAAW,KAArC,SAAsCmC,GACpCrC,KAAK6yD,SAAWxwD,GAAS,yCAa3B7C,OAAAsE,eAA+B4uD,EAAAxyD,UAAA,mBAAgB,KAA/C,SAAgDqS,GAC9CvS,KAAK8yD,cAAiBvgD,KAAYwgD,GAA0BhmD,SAAQ,EAAgB,IAAMgmD,GAAuBP,uCAYnHhzD,OAAAsE,eAAyB4uD,EAAAxyD,UAAA,WAAQ,KAIjC,WACE,OAAOF,KAAKsR,eALd,SAAkCkgB,GAChCxxB,KAAKsR,UAAY7E,EAAiB+kB,oCAapCkhC,EAAAxyD,UAAAylC,YAAA,SAAYpkC,GACNvB,KAAK2yD,cAAgBpxD,IACvBvB,KAAK2yD,YAAcpxD,EAEfvB,KAAK4a,gBACP5a,KAAK4a,gBAAgBrZ,GAErBvB,KAAKslC,cAAcvzB,KAAKxQ,GAE1BvB,KAAK8a,OAAO/I,KAAK/R,KAAK2yD,eAI1BD,EAAAxyD,UAAA0wD,WAAA,WACO5wD,KAAKwxB,UACRxxB,KAAK2lC,aAAa3lC,KAAK2yD,cAI3BD,EAAAxyD,UAAAkgB,iBAAA,SAAiB9S,GACftN,KAAK4a,gBAAkBtN,GAGzBolD,EAAAxyD,UAAAmgB,kBAAA,SAAkB/S,KAElBolD,EAAAxyD,UAAA6gB,WAAA,SAAWxf,GACLA,IAAUvB,KAAK2yD,cACjB3yD,KAAK2yD,cAAgBpxD,kCA5FxByC,EAAAA,MAAKC,KAAA,CAAC,uBAGND,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,8BAQND,EAAAA,MAAKC,KAAA,CAAC,mCAUND,EAAAA,MAAKC,KAAA,CAAC,yCAcND,EAAAA,MAAKC,KAAA,CAAC,sCAaND,EAAAA,MAAKC,KAAA,CAAC,8BASN2N,EAAAA,OAAM3N,KAAA,CAAC,mCAGP2N,EAAAA,OAAM3N,KAAA,CAAC,oBAiCVyuD,EAxGA,GCaAM,GAAA,SAAA7uD,GAaE,SAAA6uD,EAAoBppC,GAApB,IAAAlkB,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAkkB,eAAAA,IA+BtB,OAjCwCxlB,EAAAA,EAAAA,GAMtC4uD,EAAA9yD,UAAAwmC,mBAAA,WACE1mC,KAAK4pB,eAAekB,iBAGtBkoC,EAAA9yD,UAAA+yD,iBAAA,WACE,OAAQjzD,KAAK8yD,eACX,KAAKC,GAAuBN,KAAM,MAAO,OACzC,KAAKM,GAAuBP,MAC5B,QAAS,MAAO,UAIpBQ,EAAA9yD,UAAAgzD,kBAAA,WACE,OAAQlzD,KAAK8yD,eACX,KAAKC,GAAuBN,KAAM,MAAO,QACzC,KAAKM,GAAuBP,MAC5B,QAAS,MAAO,SAIpBQ,EAAA9yD,UAAAoxB,UAAA,SAAUprB,GACY,KAAhBA,EAAMkJ,OAAkC,KAAlBlJ,EAAMiJ,UAC9BjJ,EAAMguB,iBACNl0B,KAAK4wD,mCAxCVnsD,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,aACVC,SAAA,itCACA4G,UAAW,CACT,CACE8W,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAwwC,IAC9BvwC,OAAO,iDAxCc4I,EAAAA,qBA6E3B2nC,EA5CA,CAWwCN,ICpBxCS,GAAA,WAAA,SAAAA,IAEUnzD,KAAAsR,WAAqB,EACrBtR,KAAA4jD,QAAkB,EAGlB5jD,KAAAm4C,WAAqB,EACrBn4C,KAAAqlC,WAAqB,EACrBrlC,KAAAozD,MAAgB,EAGhBpzD,KAAAg9C,kBAAyB,KAEzBh9C,KAAA2a,UAAiB,KAUD3a,KAAAmpC,YAAuB,GA6I7BnpC,KAAA+yC,KAA2B,IAAIphC,EAAAA,aAG9B3R,KAAA6nC,MAA4B,IAAIl2B,EAAAA,aAG/B3R,KAAA8a,OAA6B,IAAInJ,EAAAA,aAG3B3R,KAAA+8C,YAAkC,IAAIprC,EAAAA,aAmElE,OA3MEnS,OAAAsE,eAAyBqvD,EAAAjzD,UAAA,WAAQ,KAIjC,WACE,OAAOF,KAAKsR,eALd,SAAkCkgB,GAChCxxB,KAAKsR,UAAY7E,EAAiB+kB,oCA+BpChyB,OAAAsE,eAAyBqvD,EAAAjzD,UAAA,WAAQ,KAIjC,WACE,OAAOF,KAAKm4C,eALd,SAAkC7Q,GAChCtnC,KAAKm4C,UAAY1rC,EAAiB66B,oCAkBpC9nC,OAAAsE,eAAyBqvD,EAAAjzD,UAAA,WAAQ,KAMjC,WACE,OAAOF,KAAKqlC,eAPd,SAAkCf,GAChCtkC,KAAKqlC,UAAY54B,EAAiB63B,GAElCtkC,KAAK2gB,iDAgBPnhB,OAAAsE,eAAsBqvD,EAAAjzD,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAK4jD,YALd,SAA4B5vB,GAC1Bh0B,KAAK4jD,OAASn3C,EAAiBunB,oCAcjCx0B,OAAAsE,eAA0BqvD,EAAAjzD,UAAA,YAAS,KAKnC,WACE,OAAOF,KAAKk9C,gBANd,SAAoCrY,GAClC7kC,KAAKk9C,WAAatwC,EAAai4B,GAC/B7kC,KAAK2gB,iDAcPnhB,OAAAsE,eAA0BqvD,EAAAjzD,UAAA,YAAS,KAKnC,WACE,OAAOF,KAAKi9C,gBANd,SAAoCxY,GAClCzkC,KAAKi9C,WAAarwC,EAAa63B,GAC/BzkC,KAAK2gB,iDAgBPnhB,OAAAsE,eAAqBqvD,EAAAjzD,UAAA,OAAI,KAGzB,WACE,OAAOF,KAAKozD,WAJd,SAA0B7xD,GACxBvB,KAAKozD,MAAQ7pB,MAAMx8B,SAAQ,EAAa,MAAQxL,EAAQ,EAAI,EAAIwL,SAAQ,EAAa,qCAkBvFomD,EAAAjzD,UAAAs1C,aAAA,SAAaj0C,GAEPvB,KAAKg9C,mBACPh9C,KAAKg9C,kBAAkBz7C,GAGzBvB,KAAKm9C,0BAA0B57C,IAGjC4xD,EAAAjzD,UAAAi9C,0BAAA,SAA0B57C,GACpBvB,KAAKq9C,kBAAoB97C,IAC3BvB,KAAK+8C,YAAYhrC,KAAKxQ,GACtBvB,KAAKq9C,gBAAkB97C,IAM3B4xD,EAAAjzD,UAAAkgB,iBAAA,SAAiBE,GACftgB,KAAKg9C,kBAAoB18B,GAG3B6yC,EAAAjzD,UAAAmgB,kBAAA,SAAkBC,GAChBtgB,KAAK2a,UAAY2F,GAGnB6yC,EAAAjzD,UAAAqgB,0BAAA,SAA0BD,GACxBtgB,KAAKwgB,gBAAkBF,GAGzB6yC,EAAAjzD,UAAA2gB,SAAA,SAASmlB,GAEP,OAAI3B,GAAerkC,KAAKskC,SAAUtkC,KAAKwxB,SAAUwU,EAAgBzkC,OACxD,CAAE+iC,SAAU,CACjBC,OAAO,IAIPK,GAAgB5kC,KAAK6kC,UAAWmB,EAAgBzkC,OAC3C,CAAEsjC,UAAW,CAClBN,OAAO,IAIPC,GAAgBxkC,KAAKykC,UAAWuB,EAAgBzkC,OAC3C,CAAEkjC,UAAW,CAClBF,OAAO,SAFX,GASF4uB,EAAAjzD,UAAA6gB,WAAA,SAAWxf,GACTvB,KAAK29C,gBAAgBp8C,IAGb4xD,EAAAjzD,UAAAygB,cAAV,WACM3gB,KAAKwgB,iBACPxgB,KAAKwgB,kDAzNRxc,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,+BAGND,EAAAA,MAAKC,KAAA,CAAC,+BAGND,EAAAA,MAAKC,KAAA,CAAC,0BAWND,EAAAA,MAAKC,KAAA,CAAC,gCAqBND,EAAAA,MAAKC,KAAA,CAAC,gCAWND,EAAAA,MAAKC,KAAA,CAAC,gCAmBND,EAAAA,MAAKC,KAAA,CAAC,6BAmBND,EAAAA,MAAKC,KAAA,CAAC,8BAeND,EAAAA,MAAKC,KAAA,CAAC,kCAgBND,EAAAA,MAAKC,KAAA,CAAC,6BAkBND,EAAAA,MAAKC,KAAA,CAAC,wBAQN2N,EAAAA,OAAM3N,KAAA,CAAC,yBAGP2N,EAAAA,OAAM3N,KAAA,CAAC,2BAGP2N,EAAAA,OAAM3N,KAAA,CAAC,iCAGP2N,EAAAA,OAAM3N,KAAA,CAAC,qBAmEVkvD,EAhPA,GCOAE,GAAA,SAAAlvD,GAuBE,SAAAkvD,IAAA,IAAA3tD,EACEvB,EAAAvD,KAAAZ,OAAOA,YAHT0F,EAAAw4C,YAAsB,IAsDxB,OA3D0C95C,EAAAA,EAAAA,GAWxCivD,EAAAnzD,UAAAy9C,gBAAA,SAAgBp8C,GACVvB,KAAK81C,UAKL91C,KAAK81C,QAAQlvC,cAAcrF,MAJxBA,GAEgC,IAOnCA,GACFvB,KAAK8a,OAAO/I,KAAKxQ,IAIrB8xD,EAAAnzD,UAAA6iD,eAAA,SAAete,EAAmBljC,GAChC,OAAQkjC,GAAaljC,EAAMZ,OAAS8jC,EAAaljC,EAAMsN,WAAWxC,UAAU,EAAGo4B,GAAaljC,GAG9F8xD,EAAAnzD,UAAA4iD,aAAA,SAAa58C,OACL3E,EAAQvB,KAAK+iD,eAAe/iD,KAAKykC,UAAWv+B,EAAMoB,OAAO/F,OAC/DvB,KAAKw1C,aAAaj0C,GAClBvB,KAAK81C,QAAQlvC,cAAcrF,MAAQA,GAGrC8xD,EAAAnzD,UAAA8iD,aAAA,WAEEhjD,KAAK62C,kBAAoB72C,KAAK81C,QAAQlvC,cAAcrF,MAIpDvB,KAAK6nC,MAAM91B,QAGbshD,EAAAnzD,UAAA62C,YAAA,WACE/2C,KAAK+yC,KAAKhhC,OACV/R,KAAK82C,wBAGPuc,EAAAnzD,UAAA42C,qBAAA,eACQI,EAAel3C,KAAK81C,QAAQlvC,cAAcrF,MAE5C21C,IAAiBl3C,KAAK62C,mBACxB72C,KAAK8a,OAAO/I,KAAKmlC,wBAvEtBzyC,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,eACVC,SAAA,ykBACA4G,UAAW,CACT,CACE8W,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAA6wC,IAC9B5wC,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAA6wC,IAC9B5wC,OAAO,+EAMVrZ,EAAAA,UAASnF,KAAA,CAAC,MAAO,CAACoF,KAAMH,EAAAA,WAAYI,UAAQ,OAyD/C+pD,EA3EA,CAgB0CF,QC5CxCG,SAAA,EAEAC,UAAA,EAEA12C,MAAA,EAEAnE,KAAA,mGCNF,kBAcE,SAAA86C,EAAYC,GACNA,IACFzzD,KAAK81B,KAAO29B,EAAK39B,KACjB91B,KAAK0zD,UAAY1zD,KAAK2zD,aAAaF,EAAK39B,MACxC91B,KAAK4zD,KAAOH,EAAKG,KACjB5zD,KAAK6zD,QAAUJ,EACfzzD,KAAK8zD,IAAM9zD,KAAK+zD,eAChB/zD,KAAKmK,OAAS6pD,GAAgBt7C,MAuBpC,OAnBU86C,EAAAtzD,UAAAyzD,aAAR,SAAqBpyD,GACnB,OAAIA,EACgBA,EAAM6gD,OAAO7gD,EAAM8zB,YAAY,MAChCjpB,cAGZ,IAGDonD,EAAAtzD,UAAA6zD,aAAR,WACE,SAASE,IACP,OAAOpjD,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WACzBlC,SAAS,IACTxC,UAAU,GAGf,OAAO4nD,IAAOA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAC7CA,IAAO,IAAMA,IAAOA,IAAOA,KAEjCT,KCnCaU,GAA2B,CACtCn4C,GAAE,CACAo4C,WAAY,cACZC,WAAY,SACZC,OAAQ,SACRC,SAAU,YACVC,aAAc,iBAEhBv4C,GAAE,CACAm4C,WAAY,sBACZC,WAAY,SACZC,OAAQ,WACRC,SAAU,oBACVC,aAAc,iBAEhBz4C,GAAE,CACAq4C,WAAY,qBACZC,WAAY,UACZC,OAAQ,WACRC,SAAU,mBACVC,aAAc,kBAkBlBC,GAAA,WA+PE,SAAAA,EAAsBC,GAAAz0D,KAAAy0D,cAAAA,EAvHPz0D,KAAA81B,KAAe,OA+CN91B,KAAA00D,YAAuB,EAuD3B10D,KAAA20D,SAA+B,IAAIhjD,EAAAA,aAMpC3R,KAAAwE,QAA8B,IAAImN,EAAAA,aAMhC3R,KAAA40D,UAAgC,IAAIjjD,EAAAA,aAGhC3R,KAAAslC,cAAoC,IAAI3zB,EAAAA,aA2InE,OA1WEnS,OAAAsE,eAAmC0wD,EAAAt0D,UAAA,mBAAgB,KAGnD,WACE,OAAOF,KAAK60D,uBAJd,SAAoDtzD,GAClDvB,KAAK60D,kBAAoBpoD,EAAiBlL,oCAkB5C/B,OAAAsE,eAAiC0wD,EAAAt0D,UAAA,iBAAc,KAG/C,WACE,OAAOF,KAAK80D,qBAJd,SAAgDvzD,GAC9CvB,KAAK80D,gBAAkBroD,EAAiBlL,oCA8C1C/B,OAAAsE,eAAyB0wD,EAAAt0D,UAAA,WAAQ,KAWjC,WACE,OAAOF,KAAKi6B,WAAai6B,GAAyBroD,UAZpD,SAAkCtK,GAC5BA,aAAiB/B,UAAY+B,aAAiB5B,OAChDK,KAAKi6B,UAAS75B,EAAA,GACT8zD,GAAyBtoD,GACzBsoD,GAAyBroD,KACzBtK,GAGLvB,KAAKi6B,UAAYi6B,GAAyBroD,sCAqB9CrM,OAAAsE,eAA6B0wD,EAAAt0D,UAAA,mBAAgB,KAM7C,WACE,OAAOF,KAAK+0D,uBAPd,SAA8CC,GAC5Ch1D,KAAK+0D,kBAAoBC,EAEzBh1D,KAAKi1D,qBAAqBD,oCAmB5Bx1D,OAAAsE,eAA2B0wD,EAAAt0D,UAAA,YAAS,KAMpC,WACE,OAAOF,KAAKk1D,gBAPd,SAAqC3zD,GACnCvB,KAAKk1D,WAAa3zD,GAA0B,iBAAVA,EAAqBA,EAlKzB,QAoK9BvB,KAAKm1D,mBAAmBC,UAAYp1D,KAAKo1D,2CAc3C51D,OAAAsE,eAAyB0wD,EAAAt0D,UAAA,WAAQ,KAMjC,WACE,OAAOF,KAAKsR,eAPd,SAAkC/P,GAChCvB,KAAKsR,UAAY7E,EAAiBlL,GAElCvB,KAAK2gB,cAAc3gB,KAAKq1D,+CAmD1B71D,OAAAsE,eAAyB0wD,EAAAt0D,UAAA,WAAQ,KAMjC,WACE,OAAOF,KAAKqlC,eAPd,SAAkCf,GAChCtkC,KAAKqlC,UAAY54B,EAAiB63B,GAElCtkC,KAAK2gB,cAAc3gB,KAAKq1D,+CAoC1Bb,EAAAt0D,UAAAkgB,iBAAA,SAAiB9S,GACftN,KAAKyrC,cAAgBn+B,GAGvBknD,EAAAt0D,UAAAmgB,kBAAA,SAAkB/S,GAChBtN,KAAK8sC,eAAiBx/B,GAGxBknD,EAAAt0D,UAAAqgB,0BAAA,SAA0BjT,GACxBtN,KAAKwgB,gBAAkBlT,GAGzBknD,EAAAt0D,UAAA2gB,SAAA,SAASmlB,GAEP,GAAI3B,GAAerkC,KAAKskC,SAAUtkC,KAAKwxB,SAAUwU,EAAgBzkC,OAC/D,MAAO,CACL+iC,SAAU,CACRC,OAAO,KAOfiwB,EAAAt0D,UAAA6gB,WAAA,SAAWH,GnIrIb,IAAyBrf,EAAO+zD,EmIsIxB10C,GnItIiBrf,EmIuILvB,KAAKq1D,anIvIOC,EmIuIO10C,EnItI9B4rB,KAAKC,UAAUlrC,KAAWirC,KAAKC,UAAU6oB,KmIwI1Ct1D,KAAKq1D,aAAer1D,KAAKu1D,WAAW30C,KAItC5gB,KAAKq1D,aAAe9wD,WAIdiwD,EAAAt0D,UAAAs1D,oBAAV,SAA8BC,GAC5B,OAAOz1D,KAAK01D,YACV11D,KAAK21D,kBACL31D,KAAK21D,iBAAiBC,SAAW,GACjC51D,KAAK21D,iBAAiBC,UAAYH,GAI5BjB,EAAAt0D,UAAAq1D,WAAV,SAAqBM,GAInB,QAHIC,EAAuC91D,KAAKq1D,cAAgB,GAC1DU,EAAcF,EAAMl1D,OAEjBH,EAAI,EAAGA,EAAIu1D,IAEd/1D,KAAKw1D,oBAAoBM,EAAen1D,QAFbH,IAAK,KAM9BizD,EAAO,IAAID,GAAcqC,EAAMr1D,IAEjCR,KAAKg2D,kBAAkBvC,KACzBqC,EAAiB91D,KAAKi2D,kBAAkBxC,EAAMqC,IAKlD,OAAOA,GAGCtB,EAAAt0D,UAAAygB,cAAV,SAAwBC,GAClB5gB,KAAKwgB,iBACPxgB,KAAKwgB,gBAAgBI,IAKjB4zC,EAAAt0D,UAAA81D,kBAAR,SAA0BvC,OAClBuB,EAAeh1D,KAAK21D,iBAE1B,GAAIX,EAAc,KACVkB,EAAoBlB,EAAakB,kBACjCC,EAAcnB,EAAamB,aAAe,EAC1CC,EAAcpB,EAAaoB,aAAe,SAE1CC,GAAWH,GAAoBl2D,KAAKs2D,mBAAmB7C,EAAKC,UAAWwC,GACvEK,EAAe9C,EAAKG,MAAQuC,GAAe1C,EAAKG,MAAQwC,EAE9D,OAAOC,GAAYE,EAGrB,OAAO,GAGD/B,EAAAt0D,UAAAs2D,mBAAR,SAA2B/C,EAAqBoC,GAC9C,OAAOA,EAAM5nC,KAAI,SAACwoC,GAAe,OAAAhD,EAAK39B,OAAS2gC,EAAY3gC,QAGrD0+B,EAAAt0D,UAAAi1D,iBAAR,WACE,OAAOn1D,KAAKy0D,eAGND,EAAAt0D,UAAA+1D,kBAAR,SAA0BS,EAAwBb,GAEhD,OAAI71D,KAAKw2D,mBAAmBE,EAASb,GAE5B71D,KAAK22D,wBAAwBD,EAASb,IAG3C71D,KAAK01D,WAEPG,EAAM3yD,KAAKwzD,GAGXb,EAAMpmD,OAAO,EAAGomD,EAAMl1D,OAAQ+1D,GAGzBb,IAGDrB,EAAAt0D,UAAAo2D,mBAAR,SAA2B5C,EAAmBwC,GAC5C,YAD4C,IAAAA,IAAAA,EAAA,IACrCA,EAAkBjoC,KAAI,SAAC2oC,GAAO,OAAAA,EAAIxqD,gBAAkBsnD,KAGrDc,EAAAt0D,UAAA+0D,qBAAR,SAA6BD,QAAA,IAAAA,IAAAA,EAAA,QACrB6B,EAAqB7B,EAAakB,mBAAqB,GAE7Dl2D,KAAKk2D,kBAAoBW,EAAmB/uC,KAAK,MAG3C0sC,EAAAt0D,UAAAy2D,wBAAR,SAAgCD,EAAwBb,OAChDiB,EAAYjB,EAAMrmD,UAAS,SAACinD,GAAe,OAAAC,EAAQ5gC,OAAS2gC,EAAY3gC,MAAQ2gC,EAAYtsD,SAAW6pD,GAAgBV,WAM7H,OAJmB,IAAfwD,GACFjB,EAAMpmD,OAAOqnD,EAAW,EAAGJ,GAGtBb,6CAvWR7xD,EAAAA,MAAKC,KAAA,CAAC,gDAmBND,EAAAA,MAAKC,KAAA,CAAC,qCAQND,EAAAA,MAAKC,KAAA,CAAC,6BAuCND,EAAAA,MAAKC,KAAA,CAAC,4BAgBND,EAAAA,MAAKC,KAAA,CAAC,uBAGND,EAAAA,MAAKC,KAAA,CAAC,mCAUND,EAAAA,MAAKC,KAAA,CAAC,gCAWND,EAAAA,MAAKC,KAAA,CAAC,2BAWND,EAAAA,MAAKC,KAAA,CAAC,kCAiBND,EAAAA,MAAKC,KAAA,CAAC,kCAmBND,EAAAA,MAAKC,KAAA,CAAC,qCASND,EAAAA,MAAKC,KAAA,CAAC,gCAeND,EAAAA,MAAKC,KAAA,CAAC,gCAWND,EAAAA,MAAKC,KAAA,CAAC,gCAoBN2N,EAAAA,OAAM3N,KAAA,CAAC,6BAMP2N,EAAAA,OAAM3N,KAAA,CAAC,8BAMP2N,EAAAA,OAAM3N,KAAA,CAAC,oCAGP2N,EAAAA,OAAM3N,KAAA,CAAC,oBA2IVuwD,EAxYA,GClDAuC,GAAA,WAaE,SAAAA,EAAoBttD,GAAAzJ,KAAAyJ,KAAAA,EAHpBzJ,KAAAo1D,UAAoB,QACpBp1D,KAAAg3D,SAAuB,GA6GzB,OA/FSD,EAAA72D,UAAA+2D,OAAP,SACEptD,EACAgsD,EACAqB,EACAC,EACAC,EACAC,GAQA,QANMtB,EAAcF,EAAMl1D,OACpB22D,EAAmB,CACvBtQ,KAAM,GACNyM,KAAM,MAGCjzD,EAAI,EAAGA,EAAIu1D,EAAav1D,IAAK,KAC9B+2D,EAAqB,IAAIC,SACzB/D,EAAOoC,EAAMr1D,GACbi3D,EAAWhE,EAAKI,QAAQ/9B,KAE9ByhC,EAASG,OAAO13D,KAAKo1D,UAAW3B,EAAKI,QAAS4D,GAG1CP,IACFI,EAAkB,KAAI7D,EACtByD,EAAUnlD,KAAKulD,GAEfC,EAASG,OAAO,OAAQlrB,KAAKC,UAAU6qB,EAAYtQ,QAGrDhnD,KAAK23D,SAAS9tD,EAAK4pD,EAAM8D,EAAUJ,EAAgBC,EAAiBC,KAIjEN,EAAA72D,UAAAy3D,SAAP,SACE9tD,EACA4pD,EACA8D,EACAJ,EACAC,EACAC,GANF,IAAA3xD,EAAA1F,KAQQ43D,EAAU53D,KAAK63D,WAAWhuD,EAAK0tD,GAAUjsD,UAAS,SAACpF,GAEvD,GAAIA,EAAMkH,OAAS0qD,EAAAA,cAAcC,eAAgB,CAC/CryD,EAAKsyD,WAAWvE,EAAMmE,OAEhBK,EAAcpnD,KAAKqnD,MAAM,IAAMhyD,EAAMiyD,OAASjyD,EAAMkyD,OAC1DjB,EAAe1D,EAAMwE,QAEZ/xD,aAAiBmyD,EAAAA,cAE1BjB,EAAgB3D,EAAMvtD,IAEzB,SACAoyD,GACCjB,EAAc5D,EAAM6E,MAIjBvB,EAAA72D,UAAA23D,WAAP,SAAkBhuD,EAAa0tD,OACvBgB,EAAM,IAAIC,EAAAA,YAAY,OAAQ3uD,EAAK0tD,EAAU,CACjDkB,gBAAgB,IAGlB,OAAOz4D,KAAKyJ,KAAKmuD,QAAQW,IAGpBxB,EAAA72D,UAAAw4D,kBAAP,SAAyBjF,EAAWkF,OAC5BC,EAAa54D,KAAKg3D,SAASzwD,KAAI,SAACgyD,GACpC,OAAOA,EAAI9E,KAAKK,MAAQL,EAAKK,MAG3B8E,IACcA,EAAWhB,QACnB1sD,cACRlL,KAAK64D,cAAcD,GACnBD,MAIG5B,EAAA72D,UAAA24D,cAAP,SAAqBD,OACb5jD,EAAQhV,KAAKg3D,SAAShjD,QAAQ4kD,GACpC54D,KAAKg3D,SAASvnD,OAAOuF,EAAO,IAGvB+hD,EAAA72D,UAAA83D,WAAP,SAAkBvE,EAAqBmE,GAClB53D,KAAKg3D,SAAS/oC,KAAI,SAACsqC,GACpC,OAAOA,EAAI9E,KAAKK,MAAQL,EAAKK,OAI7B9zD,KAAKg3D,SAAS9zD,KAAK,CAACuwD,KAAIA,EAAEmE,QAAOA,yBA7GtCntD,EAAAA,sDANQC,EAAAA,cAuHTqsD,EAxHA,kBCIA,SAAA+B,mDAC6D,OAAvB10D,EAAAA,EAAAA,uBADrCqG,EAAAA,aAC4DquD,GAAvB/B,IC4BtCgC,GAAA,SAAA50D,GAuBE,SAAA40D,EAAoBviD,EAAwBi+C,GAA5C,IAAA/uD,EACEvB,EAAAvD,KAAAZ,KAAMy0D,IAAcz0D,YADF0F,EAAA8Q,WAAAA,EAJZ9Q,EAAAszD,yBAAmC,IAyO7C,OA3OwC50D,EAAAA,EAAAA,GAUtC5E,OAAAsE,eAAIi1D,EAAA74D,UAAA,oBAAiB,KAArB,eACQm1D,EAAer1D,KAAKq1D,cAAgB,GAC1C,OAAQr1D,KAAKi5D,iBAAmBj5D,KAAK00D,YAAeW,EAAa10D,OAAS,GAAKX,KAAKk5D,oDAGtF15D,OAAAsE,eAAIi1D,EAAA74D,UAAA,qBAAkB,KAAtB,WACE,QAAIP,MAAMouB,QAAQ/tB,KAAKq1D,eACdr1D,KAAKq1D,aAAapnC,KAAI,SAACwlC,GAAQ,OAAAA,EAAKtpD,SAAW6pD,GAAgBV,4CAM1E9zD,OAAAsE,eAAIi1D,EAAA74D,UAAA,aAAU,KAAd,eACQm1D,EAAer1D,KAAKq1D,cAAgB,GAE1C,OAAOr1D,KAAKm5D,oBAAoBn5D,KAAKq1D,gBACpCr1D,KAAK6J,KACN7J,KAAKwxB,UACLxxB,KAAKw1D,oBAAoBH,EAAa10D,yCAIxCo4D,EAAA74D,UAAA2mC,MAAA,WACE7mC,KAAKq1D,aAAe9wD,UACpBvE,KAAKurC,YAAY,IACjBvrC,KAAKo5D,mBAIPL,EAAA74D,UAAAm5D,aAAA,SAAanzD,GAEX,GAAIlG,KAAKg5D,wBAEP,OADAh5D,KAAKg5D,yBAA0B,EACxB9yD,EAAMguB,qBAGT2hC,EAAQ3vD,EAAMoB,OAAOuuD,MAC3B71D,KAAKq1D,aAAer1D,KAAKq1D,cAAgB,GAEzCr1D,KAAKq1D,aAAer1D,KAAKu1D,WAAWM,GAEpC71D,KAAKurC,YAAW9nC,EAAKzD,KAAKq1D,eAEtBr1D,KAAK00D,YACP10D,KAAKs5D,YAAYt5D,KAAKq1D,cAGxBr1D,KAAKo5D,mBAIPL,EAAA74D,UAAAq5D,WAAA,SAAW9F,OACHz+C,EAAQhV,KAAKq1D,aAAarhD,QAAQy/C,GACxCzzD,KAAKq1D,aAAa5lD,OAAOuF,EAAO,GAEhChV,KAAKurC,YAAW9nC,EAAKzD,KAAKq1D,gBAI5B0D,EAAA74D,UAAAs5D,YAAA,WACEx5D,KAAKg5D,yBAA0B,EAC/Bh5D,KAAKy5D,UAAU7yD,cAAc8K,SAI/BqnD,EAAA74D,UAAAw5D,UAAA,WACM15D,KAAKq1D,cAAgBr1D,KAAKq1D,aAAa10D,QAEzCX,KAAKs5D,YAAYt5D,KAAKq1D,eAKhB0D,EAAA74D,UAAAy5D,YAAV,SAAsB/F,OAChBgG,EAAS,EAMb,OAJIhG,IACAgG,EAAS/oD,KAAKgpD,KAAKjG,EAAO,OAGpBgG,EAAM,OAIRb,EAAA74D,UAAA45D,WAAV,SAAqBrG,GACnB,OAAQA,EAAKtpD,QACX,KAAK6pD,GAAgBV,SACnB,MAAO,cAET,KAAKU,GAAgBn3C,MACnB,MAAO,iBAET,KAAKm3C,GAAgBt7C,KACnB,MAAO,gBAET,KAAKs7C,GAAgBT,UACrB,QACE,MAAO,KAKHwF,EAAA74D,UAAAi5D,oBAAV,SAA8BtD,GAC5B,SAAIA,IAASA,EAAMl1D,SACVk1D,EAAM5nC,KAAI,SAACwlC,GAAQ,OAAAA,EAAKtpD,SAAW6pD,GAAgBT,aAOpDwF,EAAA74D,UAAA65D,aAAV,SAAuB5vD,EAAgBspD,GACrC,OAAOA,EAAKtpD,SAAW6pD,GAAgB7pD,IAI/B4uD,EAAA74D,UAAA85D,WAAV,SAAqBvG,GAArB,IAAA/tD,EAAA1F,KACEA,KAAKy0D,cAAciE,kBAAkBjF,EAAI,WACnC/tD,EAAKgvD,WACPhvD,EAAK6zD,WAAW9F,GAEhB/tD,EAAKu0D,kBAAkBxG,MAMnBsF,EAAA74D,UAAAo5D,YAAV,SAAsBzD,GAAtB,IAAAnwD,EAAA1F,KACQk6D,EAAgBrE,EAAMj8C,OAAM,SAAC65C,GACjC,OAAOA,EAAKtpD,SAAW6pD,GAAgBV,WAGzCtzD,KAAKy0D,cAAcwC,OAAOj3D,KAAK6J,IAAKqwD,EAAel6D,KAAK20D,SAAQ,SAC7DlB,EAAM0G,GAELz0D,EAAK00D,iBAAiB3G,EAAM0G,IAE7B,SAAG1G,EAAM4G,GAER30D,EAAK40D,eAAe7G,GACpB/tD,EAAKkvD,UAAU7iD,KAAKsoD,IAErB,SAAG5G,EAAM8G,GAER70D,EAAK80D,aAAa/G,GAClB/tD,EAAKlB,QAAQuN,KAAKwoD,MAKhBxB,EAAA74D,UAAAu6D,iBAAR,SAAyB3G,GACL9zD,KAAKwW,WAAW5P,cAAcoB,cAAc,WAAW8rD,EAAG,0BAC9C9rD,cAAc,wBAChCke,UAAU+a,IAAI,gCAGpB83B,EAAA74D,UAAAk5D,gBAAR,WACEp5D,KAAKg5D,yBAA0B,EAC/Bh5D,KAAKy5D,UAAU7yD,cAAcrF,MAAQ,IAI/Bw3D,EAAA74D,UAAAs6D,aAAR,SAAqB/G,GACnBA,EAAKtpD,OAAS6pD,GAAgBn3C,MAC9B7c,KAAK06D,kBAAkBjH,EAAKK,IAAK,GAAG,GACpC9zD,KAAK26D,gBAAgBlH,EAAM,4BAA6B,MAIlDsF,EAAA74D,UAAA06D,oBAAR,SAA4B9G,GACR9zD,KAAKwW,WAAW5P,cAAcoB,cAAc,WAAW8rD,EAAG,0BAC9C9rD,cAAc,wBAChCke,UAAUgb,OAAO,gCAIvB63B,EAAA74D,UAAAw6D,kBAAR,SAA0B5G,EAAaqG,EAAiBU,OAEhDC,EADY96D,KAAKwW,WAAW5P,cAAcoB,cAAc,WAAW8rD,EAAG,0BAC9C9rD,cAAc,+BACtC+yD,EAAYF,EAAS,QAAU,OAErCC,EAAYj0C,aAAa,QAAS,YAAYk0C,EAAS,KACvDD,EAAYj0C,aAAa,QAAS,UAAUszC,EAAO,OAI7CpB,EAAA74D,UAAAy6D,gBAAR,SAAwBlH,EAAMjjC,EAAmB2pC,OACzCrG,EAAML,EAAKK,IACXkH,EAAYh7D,KAAKwW,WAAW5P,cAAcoB,cAAc,WAAW8rD,EAAG,0BAC5EkH,EAAU90C,UAAUgb,OAAO,4BAA6B,+BACxD85B,EAAU90C,UAAU+a,IAAIzQ,GAEpB2pC,EAAU,GAAK1G,EAAKtpD,SAAW6pD,GAAgBt7C,MACjD1Y,KAAKy6D,iBAAiB3G,IAKlBiF,EAAA74D,UAAA+5D,kBAAR,SAA0BxG,GACxBA,EAAKtpD,OAAS6pD,GAAgBt7C,KAC9B1Y,KAAK46D,oBAAoBnH,EAAKK,KAC9B9zD,KAAK06D,kBAAkBjH,EAAKK,IAAK,GAAG,GACpC9zD,KAAK26D,gBAAgBlH,EAAM,sBAAuB,MAI5CsF,EAAA74D,UAAAo6D,eAAR,SAAuB7G,GACrBA,EAAKtpD,OAAS6pD,GAAgBV,SAC9BtzD,KAAK06D,kBAAkBjH,EAAKK,IAAK,GAAG,GACpC9zD,KAAK26D,gBAAgBlH,EAAM,8BAA+B,MAIpDsF,EAAA74D,UAAAqrC,YAAR,SAAoBsqB,GAClB71D,KAAKyrC,cAAgBzrC,KAAKyrC,cAAcoqB,GAAS71D,KAAKslC,cAAcvzB,KAAK8jD,IAInEkD,EAAA74D,UAAAk6D,iBAAR,SAAyB3G,EAAqB0G,GAC5C1G,EAAKtpD,OAAS6pD,GAAgBT,UAC9BvzD,KAAK06D,kBAAkBjH,EAAKK,IAAKqG,GAAS,GAC1Cn6D,KAAK26D,gBAAgBlH,EAAM,sBAAuB0G,wBAzPrD11D,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,aACVC,SAAA,m/DACA4G,UAAW,CACTutD,GACA,CACEz2C,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAu2C,IAC9Bt2C,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAAu2C,IAC9Bt2C,OAAO,iDA9COvZ,EAAAA,kBAKX4vD,yCAiDN1vD,EAAAA,UAASnF,KAAA,CAAC,YAAa,CAACoF,KAAMH,EAAAA,WAAYI,UAAQ,OAuOrDyvD,EA5PA,CAiBwCvE,ICpBxCyG,GAAA,SAAA92D,GAkCE,SAAA82D,EAAYl2C,GAAZ,IAAArf,EACEvB,EAAAvD,KAAAZ,KAAM+kB,IAAG/kB,YAlBX0F,EAAAyrB,KAAO,iBAEPzrB,EAAA++B,UAAoB,IAEpB/+B,EAAA0H,KAAO,MAEP1H,EAAA4rC,QAAU,8KAOV5rC,EAAAwrC,KAAO,GAECxrC,EAAA29C,SAAW39C,EAAKu9C,0BAA0B9kC,KAAKzY,KAyBzD,OA1CqCtB,EAAAA,EAAAA,GAuBnC62D,EAAA/6D,UAAAsG,gBAAA,WAAA,IAAAd,EAAA1F,KAEE6I,WAAU,WACHnD,EAAKs3C,mBACRt3C,EAAKowC,QAAQlvC,cAAc6Q,iBAAiB,QAAS/R,EAAK29C,aAKhE4X,EAAA/6D,UAAA+G,YAAA,WACOjH,KAAKg9C,mBACRh9C,KAAK81C,QAAQlvC,cAAcuR,oBAAoB,QAASnY,KAAKqjD,WAIjE4X,EAAA/6D,UAAAw9C,gBAAA,SAAgB58B,GACd,OAAO,0BAtDVrc,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,UACVC,SAAA,4jCACA4G,UAAW,CACX,CACE8W,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAy4C,IAC9Bx4C,OAAO,GAET,CACEJ,QAASK,EAAAA,cACTH,YAAaC,EAAAA,WAAU,WAAO,OAAAy4C,IAC9Bx4C,OAAO,iDA1CwBvZ,EAAAA,cAuFnC+xD,EAzDA,CAeqCrY,ICIrCsY,GAAA,WAAA,SAAAA,KA0E8B,2BA1E7Br2D,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACAo2D,EAAAA,YACAC,EAAAA,iBACAppD,GACAya,GACAwG,GACA+B,GACA6N,GACA5oB,IAEFhV,QAAS,CACPwhC,GACAc,GACAmG,GACAoQ,GACAlI,GACA0D,GACA8J,GACAqM,GACA/L,GACAsE,GACAb,GACAuE,GACAoE,GACAK,GACAQ,GACAxC,GACAgD,GACAF,GACA+B,GACAK,GACA0F,GACAkC,IAEFj2D,aAAc,CACZ8Z,GACA2nB,GACAc,GACAmG,GACAoQ,GACAlI,GACA0D,GACA8J,GACAE,GACAG,GACAgM,GACA/L,GACAsE,GACAb,GACAuE,GACAzC,GACAgE,GACAlE,GACA+G,GACAK,GACAQ,GACAvD,GACAe,GACAU,GACAsC,GACAF,GACA+B,GACAK,GACA0F,GACAkC,IAEF1vD,UAAW,GACXigB,gBAAiB,CACf1M,GACAqoC,QAG0B+T,EA1E9B,OCvCEG,WAAa,aAGbC,SAAW,YCTPC,GAA4BC,GAAmBF,SAErDG,GAAA,WAAA,SAAAA,IAGUz7D,KAAA07D,aAAmCH,GAE3Bv7D,KAAA27D,mBAAqBH,GAqDvC,OAnCEh8D,OAAAsE,eAA2B23D,EAAAv7D,UAAA,YAAS,KAUpC,WACE,OAAOF,KAAK47D,gBAXd,SAAqCr6D,GAC/BgoC,MAAMx8B,SAAQ,EAAa,KAC7B/M,KAAK47D,WAAar3D,WAElBhD,EAAQwL,SAAQ,EAAa,IAE7B/M,KAAK47D,WAAcr6D,EAAQ,GAAKA,EAAQ,GAAMgD,UAAYhD,oCAmB9D/B,OAAAsE,eAA4B23D,EAAAv7D,UAAA,cAAW,KAGvC,WACE,OAAOF,KAAK07D,kBAJd,SAAwCn6D,GACtCvB,KAAK07D,aAAe,OAAc1iD,OAAOwiD,IAAoBz3D,SAASxC,GAASA,EAAQg6D,mEAzCxFv3D,EAAAA,MAAKC,KAAA,CAAC,8BAeND,EAAAA,MAAKC,KAAA,CAAC,qCAyBND,EAAAA,MAAKC,KAAA,CAAC,gCAQND,EAAAA,MAAKC,KAAA,CAAC,cAETw3D,EA1DA,GCkBAI,GAAA,SAAA13D,GAAA,SAAA03D,mDAI6D,OAAvBz3D,EAAAA,EAAAA,uBAJrCK,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,WACVC,SAAA,k7BAE2Dk3D,EAJ7D,CAIsCJ,ICnBtCK,GAAA,WAAA,SAAAA,KAW6B,2BAX5Bj3D,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZ62D,IAEF52D,QAAS,CAAC42D,IACVtwD,UAAW,GACX0lB,QAAS,OAEkB6qC,EAX7B,MCCW,WAGF,UAGG,QAGA,cCTVT,WAAa,aAGbC,SAAW,gBCHXS,OAAS,SAGTC,KAAO,OAGPC,QAAU,UAGVC,QAAU,WCVNC,GAA2BC,GAAkBd,SAC7Ce,GAAoBC,GAAWN,KASrCO,GAAA,WAAA,SAAAA,IAGUv8D,KAAA07D,aAAmCS,GACnCn8D,KAAAyR,MAAqB4qD,GAEbr8D,KAAAw8D,kBAAoBJ,GAgFjBp8D,KAAA0R,MAA4B,IAAIC,EAAAA,aAcrD,OAtEEnS,OAAAsE,eAAqBy4D,EAAAr8D,UAAA,OAAI,KAGzB,WACE,OAAOF,KAAKy8D,WAJd,SAA0Bl7D,GACxBvB,KAAKy8D,MAAuB,KAAf,GAA2BhwD,EAAiBlL,oCAe3D/B,OAAAsE,eAA4By4D,EAAAr8D,UAAA,cAAW,KAGvC,WACE,OAAOF,KAAK07D,kBAJd,SAAwCn6D,GACtCvB,KAAK07D,aAAe,OAAc1iD,OAAOojD,IAAmBr4D,SAASxC,GAASA,EAAQ46D,oCAqBxF38D,OAAAsE,eAAqBy4D,EAAAr8D,UAAA,OAAI,KAGzB,WACE,OAAOF,KAAKyR,WAJd,SAA0BlQ,GACxBvB,KAAKyR,MAAQ,OAAcuH,OAAOsjD,IAAYv4D,SAASxC,GAASA,EAAQ86D,oCAmB1E78D,OAAAsE,eAAIy4D,EAAAr8D,UAAA,eAAY,KAAhB,WACE,OAAQF,KAAKoN,MACX,KAAKkvD,GAAWP,OAAQ,OAAOW,GAE/B,KAAKJ,GAAWN,KAAM,OAAOU,GAE7B,KAAKJ,GAAWL,QAAS,OAAOS,GAEhC,KAAKJ,GAAWJ,QAAS,OAAOQ,oEAjFnC14D,EAAAA,MAAKC,KAAA,CAAC,yBAeND,EAAAA,MAAKC,KAAA,CAAC,+BAgBND,EAAAA,MAAKC,KAAA,CAAC,+BAsBND,EAAAA,MAAKC,KAAA,CAAC,yBAQND,EAAAA,MAAKC,KAAA,CAAC,0BAUN2N,EAAAA,OAAM3N,KAAA,CAAC,cAcVs4D,EApGA,GCMAI,GAAA,SAAAx4D,GAAA,SAAAw4D,mDAiBA,OAbqCv4D,EAAAA,EAAAA,GAInCu4D,EAAAz8D,UAAAmE,SAAA,WACErE,KAAK48D,YAAc58D,KAAK0R,MAAMmrD,UAAUl8D,OAAS,GAGnDg8D,EAAAz8D,UAAA4R,QAAA,eACQgrD,EAA+B,CAAEv7D,MAAOvB,KAAKuB,MAAO6L,KAAMpN,KAAKoN,MAErEpN,KAAK0R,MAAMK,KAAK+qD,wBAfnBr4D,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,UACVC,SAAA,qkBAeFg4D,EAjBA,CAIqCJ,ICnBrCQ,GAAA,WAAA,SAAAA,KAa4B,2BAb3Bl4D,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZ23D,IAEF13D,QAAS,CACP03D,IAEFpxD,UAAW,GACX0lB,QAAS,OAEiB8rC,EAb5B,GCQAC,GAAA,WAAA,SAAAA,IAEUh9D,KAAAi9D,YAAuB,EAgGbj9D,KAAAk9D,WAAmC,IAAIvrD,EAAAA,aA0B3D,OAREnS,OAAAsE,eAA2Bk5D,EAAA98D,UAAA,YAAS,KAIpC,WACE,OAAOF,KAAKi9D,gBALd,SAAqC17D,GACnCvB,KAAKi9D,WAA6B,KAAhB,GAA4BxwD,EAAiBlL,oEAnFhEyC,EAAAA,MAAKC,KAAA,CAAC,2BAUND,EAAAA,MAAKC,KAAA,CAAC,+BAsDN2N,EAAAA,OAAM3N,KAAA,CAAC,6BAkBPD,EAAAA,MAAKC,KAAA,CAAC,mBAQT+4D,EA5HA,GCGAG,GAAA,SAAAh5D,GAAA,SAAAg5D,mDA2BA,OAvB6C/4D,EAAAA,EAAAA,GAI3C5E,OAAAsE,eAAiDq5D,EAAAj9D,UAAA,OAAI,KASrD,WACE,OAAOF,KAAKo9D,OAAK,QAVnB,SAAsD77D,GAAtD,IAAAmE,EAAA1F,KAEE6I,WAAU,WACRnD,EAAK03D,MAAQ77D,EAEbmE,EAAK23D,8CAQDF,EAAAj9D,UAAAm9D,SAAR,YACOr9D,KAAKs9D,WAAat9D,KAAKk9D,WAAWL,UAAUl8D,QAC/CX,KAAKk9D,WAAWnrD,KAAK/R,KAAKu9D,2BAvB/B94D,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,mBACVC,SAAA,qeAMCyE,EAAAA,UAASnF,KAAA,CAAC,cAAe,CAAEqF,UAAQ,OAmBtC6zD,EA3BA,CAI6CH,ICvB7C,SAAgBQ,GAAsBC,EAAWt4B,EAAWu4B,EAAWC,EAAWC,GAQhF,MAAO,WANDH,GAAaG,GAAe,IAMJ,YALxBz4B,GAAay4B,GAAe,GAKoB,YAJhDF,GAAaE,GAAe,GAI4C,YAHxED,GAAaC,GAAe,GAMpC,SAAgBC,GAAeC,GAG7B,QAFwB,YAAaA,IAEZA,EAAMvgC,gBCN/BwgC,QAAU,UAGVC,SAAW,WAGX/vD,KAAO,OAGPgwD,SAAW,WAGXC,KAAO,OAGPv5B,OAAS,SAGTuW,OAAS,wBCOT,SAAAijB,EAAoBC,GAAAp+D,KAAAo+D,cAAAA,EAtBZp+D,KAAAk4B,OAAe,GAEvBl4B,KAAAq+D,cAAoD,GA2LtD,OAxLE7+D,OAAAsE,eAAuBq6D,EAAAj+D,UAAA,SAAM,KAI7B,WACE,OAAOF,KAAKs+D,aALd,SAA8B/8D,GAC5BvB,KAAKs+D,QAAU3+D,MAAMouB,QAAQxsB,GAAMkC,EAAOlC,GAAS,oCAQrD/B,OAAAsE,eAAsBq6D,EAAAj+D,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAKk4B,YALd,SAA4B32B,GAC1BvB,KAAKk4B,OAAS32B,GAAS2L,EAAS3L,EAAO,UAAYA,EAAQ,oCAS7D48D,EAAAj+D,UAAAq+D,UAAA,SAAUh9D,EAAOg9D,GACf,OAAOh9D,IAAUg9D,GAITJ,EAAAj+D,UAAAs+D,iBAAV,WAAA,IAAA94D,EAAA1F,KACQq+D,EAAgB,GAkBtB,OAhBAr+D,KAAKy+D,OAAOllD,QAAO,SAACukD,GACdp4D,EAAKg5D,eAAeL,EAAeP,EAAMzxC,UAC3C3mB,EAAKi5D,WAAW,gCAAgCb,EAAMzxC,SAAQ,qDAI3DyxC,EAAgB,SAKjBD,GAAeC,IACjBO,EAAcn7D,KAAKwC,EAAKk5D,YAAYd,IALpCp4D,EAAKi5D,WAAW,oEASbN,GAIDF,EAAAj+D,UAAA2+D,eAAR,SAAuBx4B,GAGrB,OAF0BA,EAAQ3J,MAAK,SAAC4J,GAAU,MAAkB,iBAAXA,IAGhDD,EAAQj+B,IAAG,SAAC7G,GAAS,MAAA,CAAEc,MAAOd,EAAOA,MAAKA,KAG5C8kC,GAID83B,EAAAj+D,UAAA0+D,YAAR,SAAoBd,OACZjlB,EAAU74C,KAAK8+D,oBAAoBhB,GACnCz3B,EAAYy3B,EAAMz3B,QAAUrmC,KAAK6+D,eAAef,EAAMz3B,SAAW9hC,UAEjEw6D,EAAiBvB,GAAsBM,EAAMkB,cACjDlB,EAAMmB,cACNnB,EAAMoB,cACNpB,EAAMqB,cACNrB,EAAMF,aAER,OAAAx9D,EAAA,CACEiC,MAAOrC,KAAKo+D,cAAclpC,UAAU4oC,EAAMzxC,WACvCyxC,EAAK,CACRiB,eAAcA,EACdlmB,QAAOA,EACPxS,QAAOA,KAIH83B,EAAAj+D,UAAAw+D,eAAR,SAAuBD,EAAoCpyC,GACzD,OAAOoyC,EAAOxwC,KAAI,SAAC6vC,GACjB,OAAOA,EAAMzxC,WAAaA,KAKtB8xC,EAAAj+D,UAAA4+D,oBAAR,SAA4BhB,QAAA,IAAAA,IAAAA,EAAA,QACpB1wD,EAAO0wD,GAASA,EAAM1wD,KAAO0wD,EAAM1wD,KAAKgyD,oBAAsB,SAEpE,OAAIp/D,KAAKq/D,aAAavB,EAAO1wD,GACpB,SACEpN,KAAKs/D,eAAexB,EAAO1wD,GAC7B,UACEpN,KAAKu/D,SAASzB,GAChB,SACE99D,KAAKw/D,aAAa1B,GACpB,aACE99D,KAAKy/D,gBAAgB3B,GACvB,gBACE99D,KAAK0/D,cAAc5B,GACrB,cACE99D,KAAKu+D,UAAUnxD,EAAMuyD,GAAoB5B,SAC3C,SACE/9D,KAAKu+D,UAAUnxD,EAAMuyD,GAAoB1xD,OAASjO,KAAKu+D,UAAUnxD,EAAMuyD,GAAoB1B,UAC7F,aACEj+D,KAAKu+D,UAAUnxD,EAAMuyD,GAAoBzB,OAClDJ,EAAM5sB,KAAO4sB,EAAM5sB,MAAQ,QAEpB,SACElxC,KAAK4/D,QAAQ9B,GACf,QACE99D,KAAK6/D,SAAS/B,GAChB,SACE99D,KAAK8/D,WAAWhC,GAClB,WACE99D,KAAK+/D,WAAWjC,GAClB,WAGF,SAGDK,EAAAj+D,UAAAu/D,gBAAR,SAAwB3B,GACd,IAAAkC,EAAAlC,EAAAkC,eAAgBC,EAAAnC,EAAAmC,aAAc55B,EAAAy3B,EAAAz3B,QAEtC,OAAQ25B,GAAkBC,KAAkB55B,GAAWA,EAAQ1lC,QAAU,GAGnEw9D,EAAAj+D,UAAA0/D,QAAR,SAAgB9B,GACN,IAAAkC,EAAAlC,EAAAkC,eAER,QAASA,GAAkB9yD,EAAS8yD,EAAgB,WAG9C7B,EAAAj+D,UAAAo/D,eAAR,SAAuBxB,EAA4B1wD,GACzC,IAAA8jC,EAAA4sB,EAAA5sB,KAAMI,EAAAwsB,EAAAxsB,QAEd,OAAOtxC,KAAKu+D,UAAUnxD,EAAMuyD,GAAoB3B,YAAe9sB,IAASI,GAGlE6sB,EAAAj+D,UAAA2/D,SAAR,SAAiB/B,GACP,IAAAoC,EAAApC,EAAAoC,cAER,QAASA,GAAiBhzD,EAASgzD,EAAe,WAG5C/B,EAAAj+D,UAAAw/D,cAAR,SAAsB5B,GACZ,IAAAkC,EAAAlC,EAAAkC,eAAgBC,EAAAnC,EAAAmC,aAAc55B,EAAAy3B,EAAAz3B,QAEtC,OAAQ25B,GAAkBC,KAAkB55B,GAAWA,EAAQ1lC,OAAS,GAGlEw9D,EAAAj+D,UAAAm/D,aAAR,SAAqBvB,EAA4B1wD,GACvC,IAAA8jC,EAAA4sB,EAAA5sB,KAAMI,EAAAwsB,EAAAxsB,QAEd,OAAOtxC,KAAKu+D,UAAUnxD,EAAMuyD,GAAoBh7B,UAAauM,IAASI,GAGhE6sB,EAAAj+D,UAAA6/D,WAAR,SAAmBjC,GAGjB,OAFQA,EAAAqC,QAKFhC,EAAAj+D,UAAAs/D,aAAR,SAAqB1B,GACX,IAAAmC,EAAAnC,EAAAmC,aAAc55B,EAAAy3B,EAAAz3B,QAEtB,OAAQ45B,KAAkB55B,GAAWA,EAAQ1lC,QAAU,GAGjDw9D,EAAAj+D,UAAAq/D,SAAR,SAAiBzB,GACP,IAAAmC,EAAAnC,EAAAmC,aAAc55B,EAAAy3B,EAAAz3B,QAEtB,OAAQ45B,KAAkB55B,GAAWA,EAAQ1lC,OAAS,GAGhDw9D,EAAAj+D,UAAA4/D,WAAR,SAAmBhC,GACT,IAAAvhC,EAAAuhC,EAAAvhC,KAER,OAAOA,GAAQA,GAAQ,GAGjB4hC,EAAAj+D,UAAAy+D,WAAR,SAAmBn7D,GACjBklD,QAAQllD,MAAMA,oCArLfQ,EAAAA,MAAKC,KAAA,CAAC,2BASND,EAAAA,MAAKC,KAAA,CAAC,cA+KTk6D,KC7LAiC,GAAA,SAAAj8D,GAOE,SAAAi8D,EAAYhC,UACVj6D,EAAAvD,KAAAZ,KAAMo+D,IAAcp+D,KAaxB,OAhBmDoE,EAAAA,EAAAA,GAMjDg8D,EAAAlgE,UAAAw6B,YAAA,SAAY2lC,GACNA,EAAQ5B,SACVz+D,KAAKq+D,cAAgBr+D,KAAKw+D,qBAI9B4B,EAAAlgE,UAAAogE,QAAA,SAAQtrD,GACN,OAAOA,uBAlBVvQ,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,0BACVC,SAAA,mlLACA47D,cAAe,CAAE,CAAEl+C,QAASm+C,EAAAA,iBAAkBj+C,YAAak+C,EAAAA,sDAbpDC,EAAAA,iBA+BTN,EArBA,CAKmDjC,ICAnDwC,GAAA,WAuEE,SAAAA,EACUC,EACAC,EACA9jC,EACA+jC,EACA1C,GAJAp+D,KAAA4gE,aAAAA,EACA5gE,KAAA6gE,SAAAA,EACA7gE,KAAA+8B,YAAAA,EACA/8B,KAAA8gE,SAAAA,EACA9gE,KAAAo+D,cAAAA,EA1EFp+D,KAAAs+D,QAAsC,GACtCt+D,KAAA+gE,eAAyB,EACzB/gE,KAAAk4B,OAAS,GAEjBl4B,KAAAq+D,cAAgB,GAuJlB,OA/HE7+D,OAAAsE,eAAuB68D,EAAAzgE,UAAA,SAAM,KAI7B,WACE,OAAOF,KAAKs+D,aALd,SAA8BG,GAC5Bz+D,KAAKs+D,QAAU3+D,MAAMouB,QAAQ0wC,GAAOh7D,EAAOg7D,GAAU,oCAgBvDj/D,OAAAsE,eAA+B68D,EAAAzgE,UAAA,eAAY,KAI3C,WACE,OAAOF,KAAK+gE,mBALd,SAA4Cx/D,GAC1CvB,KAAK+gE,cAAgBt0D,EAAiBlL,oCAexC/B,OAAAsE,eAAsB68D,EAAAzgE,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAKk4B,YALd,SAA4B32B,GAC1BvB,KAAKk4B,OAAS32B,GAAS2L,EAAS3L,EAAO,UAAYA,EAAQ,oCAenDo/D,EAAAzgE,UAAA8gE,oBAAV,WAAA,IAAAt7D,EAAA1F,KACQihE,EAAY,GAQlB,OANAjhE,KAAKy+D,OAAOllD,QAAO,SAACukD,GACdD,GAAeC,IACjBmD,EAAU/9D,KAAKwC,EAAKk5D,YAAYd,MAI7BmD,GAICN,EAAAzgE,UAAAghE,gBAAV,WAAA,IAAAx7D,EAAA1F,KACQmhE,EAAY19D,EAAOzD,KAAKghE,uBAW9B,OATAhhE,KAAKohE,iBAAiB7nD,QAAO,SAAC8nD,OACtBC,EAAaH,EAAa3xD,UAAS,SAACsuD,GAAS,OAAAA,EAAMzxC,WAAag1C,EAAWh1C,WAC3EA,EAAWg1C,EAAWh1C,UAER,IAAhBi1C,GACFH,EAAaj+D,KAAKwC,EAAKk5D,YAAY,CAAEvyC,SAAQA,OAI1C80C,GAICR,EAAAzgE,UAAAkhE,eAAV,WAAA,IAAA17D,EAAA1F,KACE,OAAOR,OAAO68B,KAAKr8B,KAAKuB,OAAO6G,IAAG,SAACikB,GACjC,OAAO3mB,EAAKk5D,YAAY,CAAEvyC,SAAQA,OAI9Bs0C,EAAAzgE,UAAA0+D,YAAR,SAAoBd,OACZzxC,EAAWyxC,EAAMzxC,SACjB9qB,EAAQvB,KAAKuhE,eAAezD,EAAM1wD,KAAMpN,KAAKuB,MAAM8qB,GAAWyxC,EAAM3oC,QAEpEqsC,EAAqBhE,GAAsBM,EAAMkB,cACrDlB,EAAMmB,cACNnB,EAAMoB,cACNpB,EAAMqB,cACNrB,EAAMF,aAER,OAAAx9D,EAAA,CACEisB,SAAQA,EACR9qB,MAAKA,EACLc,MAAOrC,KAAKo+D,cAAclpC,UAAU7I,GACpCo1C,SAAUD,GACP1D,IAIC6C,EAAAzgE,UAAAqhE,eAAR,SAAuBn0D,EAAc7L,EAAO4zB,OACtCusC,EAAmBngE,EAEvB,OAAQ6L,GACN,IAAK,WACHs0D,EAAmB1hE,KAAK4gE,aAAa1rC,UAAU3zB,EAAO4zB,GAAU,MAAO,SAAU,SACjF,MACF,IAAK,OACHusC,EAAmB1hE,KAAK6gE,SAAS3rC,UAAU3zB,EAAO4zB,GAAU,cAC5D,MACF,IAAK,WACHusC,EAAmB1hE,KAAK6gE,SAAS3rC,UAAU3zB,EAAO4zB,GAAU,uBAC5D,MACF,IAAK,SACHusC,EAAmB1hE,KAAK+8B,YAAY7H,UAAU3zB,EAAO4zB,GACrD,MACF,IAAK,OACHusC,EAAmB1hE,KAAK8gE,SAAS5rC,UAAU3zB,EAAO4zB,GAAU,mBAIhE,OAAOusC,mCA5HR19D,EAAAA,MAAKC,KAAA,CAAC,kCAiBND,EAAAA,MAAKC,KAAA,CAAC,mCAgBND,EAAAA,MAAKC,KAAA,CAAC,cA8FT08D,EA7JA,GCIAgB,GAAA,SAAAx9D,GAME,SAAAw9D,EACEf,EACAC,EACA9jC,EACA+jC,EACA1C,UAEAj6D,EAAAvD,KAAAZ,KAAM4gE,EAAcC,EAAU9jC,EAAa+jC,EAAU1C,IAAcp+D,KAiBvE,OA1B6CoE,EAAAA,EAAAA,GAY3Cu9D,EAAAzhE,UAAAw6B,YAAA,SAAY2lC,IACNA,EAAQ5B,QAAU4B,EAAQ9+D,OAAS8+D,EAAQuB,gBAC7C5hE,KAAKq+D,cAAgBr+D,KAAKw+D,qBAItBmD,EAAAzhE,UAAAs+D,iBAAR,WACE,OAAIx+D,KAAK4hE,aACA5hE,KAAKkhE,kBAGPlhE,KAAKuB,OAASvB,KAAKy+D,OAAO99D,OAASX,KAAKghE,sBAAwBhhE,KAAKohE,sCA3B/E38D,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,mBACVC,SAAA,wvBAvBOk9D,EAAAA,oBAAcC,EAAAA,gBAAUtgC,EAAAA,mBAExBvM,UAFqCyrC,EAAAA,iBAmD9CiB,EA9BA,CAI6ChB,IC1B7CoB,GAAA,WAeA,SAAAA,KAqBgC,2BArB/Bl9D,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACAo2D,EAAAA,YACA1sC,GACAqtC,GACAZ,GACA6B,GACAhnC,IAEF/wB,aAAc,CACZm4D,GACAiD,GACAuB,IAEF18D,QAAS,CACPk4D,GACAwE,IAEFp2D,UAAW,CAAEs2D,EAAAA,aAAcC,EAAAA,SAAUtgC,EAAAA,YAAavM,GAAayrC,EAAAA,mBAEjCqB,EApChC,GCAAC,GAAA,WAaE,SAAAA,IAJqBhiE,KAAAuS,SAAoB,GAmB3C,OAbEyvD,EAAA9hE,UAAA+hE,iBAAA,SAAiB/7D,GAIO,KAAlBA,EAAMiJ,SACRjJ,EAAMguB,sCAlBXzvB,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,uBACVC,SAAA,krBAKCX,EAAAA,MAAKC,KAAA,CAAC,6BAEND,EAAAA,MAAKC,KAAA,CAAC,cAiBT+9D,EA5BA,GCAAE,GAAA,WAmDE,SAAAA,EAAoBna,GAAA/nD,KAAA+nD,kBAAAA,EAxCpB/nD,KAAAk4B,OAAc,GACdl4B,KAAAmiE,MAAgB,EAChBniE,KAAAoiE,UAAoB,GAEFpiE,KAAAiW,MAAiB,OAEhBjW,KAAAqiE,QAAmB,EAEhBriE,KAAAsiE,UAAqB,EAEtBtiE,KAAAuS,SAAoB,GAapBvS,KAAAsnC,UAAqB,EAErBtnC,KAAAskC,UAAqB,EAEjBtkC,KAAAuiE,YAAc,IAAI5wD,EAAAA,aA8F7C,OA7GEnS,OAAAsE,eAAsBo+D,EAAAhiE,UAAA,QAAK,KAO3B,WACE,OAAOF,KAAKwiE,OAAYxiE,KAAKwiE,OAAM,KAAO,YAR5C,SAA4BjhE,GAC1BvB,KAAKwiE,OAASjhE,EAEVvB,KAAKqiE,SAAWriE,KAAKwiE,SACvBxiE,KAAKwiE,OAAS,sCAalBhjE,OAAAsE,eAAsBo+D,EAAAhiE,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAKk4B,YALd,SAA4B32B,GAC1BvB,KAAKk4B,OAAS32B,EACdvB,KAAKuiE,YAAYxwD,KAAK/R,KAAKk4B,yCAW7BgqC,EAAAhiE,UAAA+hE,iBAAA,SAAiB/7D,GAIf,IAAMA,EAAMisC,UAAgC,IAAlBjsC,EAAMiJ,SAAqC,KAAlBjJ,EAAMiJ,SAAkB,CAEzE,GAAInP,KAAKsnC,SACP,OAKF,OAFAphC,EAAMguB,sBACNl0B,KAAKuB,MAAQ,IAKf,OAAsB,KAAlB2E,EAAMiJ,SACRjJ,EAAMguB,sBACNl0B,KAAKyiE,WAAWziE,KAAKuB,QAKlB2E,EAAMiJ,SAAW,IAAQjJ,EAAMiJ,SAAW,IAAQjJ,EAAMiJ,SAAW,IAAQjJ,EAAMiJ,SAAW,IAC/FjJ,EAAMguB,sBACNl0B,KAAKyiE,WAAWv8D,EAAMo2B,WAFxB,GAOF4lC,EAAAhiE,UAAAwiE,SAAA,SAASx8D,GAGPA,EAAMguB,iBAENl0B,KAAKyiE,WAAWziE,KAAKuB,QAGvB2gE,EAAAhiE,UAAAyiE,YAAA,SAAYz8D,GAGVlG,KAAKuB,MAAQvB,KAAKoiE,UAClBpiE,KAAKoiE,UAAY79D,UACjBvE,KAAKmiE,MAAO,GAGdD,EAAAhiE,UAAA0iE,eAAA,SAAe18D,GAIS,KAAlBA,EAAMiJ,UACRnP,KAAKuB,MAAQvB,KAAKoiE,UAClBpiE,KAAKoiE,UAAY79D,UACjBvE,KAAKmiE,MAAO,EACZniE,KAAK+nD,kBAAkBj9B,gBACvB9qB,KAAKswC,eAAe1pC,cAAcotB,SAId,KAAlB9tB,EAAMiJ,UACRnP,KAAKoiE,UAAY79D,UACjBvE,KAAKmiE,MAAO,EACZniE,KAAK+nD,kBAAkBj9B,gBACvB9qB,KAAKswC,eAAe1pC,cAAcotB,QAClC9tB,EAAMiuB,oBAIF+tC,EAAAhiE,UAAAuiE,WAAR,SAAmBlhE,GACbvB,KAAKsnC,WAITtnC,KAAKoiE,UAAY7gE,EACjBvB,KAAKmiE,MAAO,EACZniE,KAAK+nD,kBAAkBj9B,gBACvB9qB,KAAK8uC,aAAaloC,cAAcotB,8BA/HnCvvB,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,gBACVC,SAAA,y0DAJgD0mB,EAAAA,oDAe/CrnB,EAAAA,MAAKC,KAAA,CAAC,2BAEND,EAAAA,MAAKC,KAAA,CAAC,8BAEND,EAAAA,MAAKC,KAAA,CAAC,iCAEND,EAAAA,MAAKC,KAAA,CAAC,6BAEND,EAAAA,MAAKC,KAAA,CAAC,6BAWND,EAAAA,MAAKC,KAAA,CAAC,gCAEND,EAAAA,MAAKC,KAAA,CAAC,mCAEN2N,EAAAA,OAAM3N,KAAA,CAAC,gCAEPD,EAAAA,MAAKC,KAAA,CAAC,iCAQNmF,EAAAA,UAASnF,KAAA,CAAC,eAAgB,CAAEqF,UAAQ,4BACpCF,EAAAA,UAASnF,KAAA,CAAC,iBAAkB,CAAEqF,UAAQ,OAmFzC44D,EApIA,GC+BAW,GAAA,WA6DE,SAAAA,EACU9a,EACA+a,EACRr9D,GAHF,IAAAC,EAAA1F,KACUA,KAAA+nD,kBAAAA,EACA/nD,KAAA8iE,MAAAA,EAxDV9iE,KAAA+iE,SAAmB,MACnB/iE,KAAAgjE,QAAkB,EAClBhjE,KAAAijE,WAAqB,EACrBjjE,KAAAkjE,aAAuB,MACvBljE,KAAAmjE,YAAsB,EACtBnjE,KAAAojE,eAAyB,EAGzBpjE,KAAAqjE,QAAS,EAETrjE,KAAAwV,MAAQ,OACRxV,KAAAsjE,YAAc,EACdtjE,KAAAujE,aAAe,EAQPvjE,KAAA64B,SAAW,GAOK74B,KAAAwjE,WAAgC,GAyBvCxjE,KAAAgnD,KAAmB,GAOlChnD,KAAK+G,iBAEL/G,KAAKgJ,eAAiBvD,EAASsD,OAAO,SAAU,SAAQ,SAAG7C,GACzDR,EAAKqB,mBA2QX,OAzSEvH,OAAAsE,eAAwB++D,EAAA3iE,UAAA,UAAO,KAa/B,WACE,OAAOF,KAAK64B,SAASjf,OAAM,SAAC+c,GAAU,OAAkB,IAAlBA,EAAO0rC,SAAqC,IAAlB1rC,EAAO/G,cAdzE,SAAgCruB,GAC9BvB,KAAK64B,SAAQp1B,EAAOlC,GAEpBvB,KAAK64B,SAAStf,QAAO,SAACod,GACpBA,EAAOt0B,MAAQs0B,EAAOt0B,OAASs0B,EAAOtK,UAEhB,IAAlBsK,EAAO0rC,OACT1rC,EAAO8sC,UAAc9sC,EAAOnhB,OAAS,KAAG,KAExCmhB,EAAO8sC,SAAW9sC,EAAOnhB,MAAWmhB,EAAOnhB,MAAK,KAAO,0CAyB7DqtD,EAAA3iE,UAAA+G,YAAA,WACMjH,KAAKgJ,gBACPhJ,KAAKgJ,kBAID65D,EAAA3iE,UAAA6G,eAAR,WAAA,IAAArB,EAAA1F,KACE2I,aAAa3I,KAAK4I,eAElB5I,KAAK4I,cAAgBC,WAAU,eACvB66D,EAAoBh+D,EAAKi+D,aAAa/8D,cAAcC,YAC1DnB,EAAK8P,MAAWkuD,GAAqBh+D,EAAK49D,YAAc,GAAK59D,EAAK69D,aAAY,MAC7E,MAGL/jE,OAAAsE,eAAI++D,EAAA3iE,UAAA,gBAAa,KAAjB,eACQ0jE,EAAgB5jE,KAAK64B,SAASjf,OAAM,SAAC+c,GAAU,OAAkB,IAAlBA,EAAO0rC,SAI5D,OAFAriE,KAAKsjE,YAAcM,EAAct7D,OAAM,SAAEu7D,EAAMC,GAAY,OAAAD,GAAQC,EAAQtuD,OAAS,MAAM,GAEnFouD,mCAGTpkE,OAAAsE,eAAI++D,EAAA3iE,UAAA,gBAAa,KAAjB,eACQ6jE,EAAiB/jE,KAAK64B,SAASjf,OAAM,SAAC+c,GAAU,OAAkB,IAAlBA,EAAO/G,SAI7D,OAFA5vB,KAAKujE,aAAeQ,EAAepjE,OAAS,EAAI,GAAK,EAE9CojE,mCAGTlB,EAAA3iE,UAAA8jE,UAAA,SAAU99D,EAAYowB,GAAtB,IAAA5wB,EAAA1F,KACQ+kB,EAAK7e,EAAMmhB,KAAK9gB,KAAI,SAACf,GAAW,OAAAA,EAAQouB,KAE9C,GAAK7O,EAAL,CAIM,IAACk/C,EAAD9gE,EAAA4hB,EAAA,GAAAtG,MAAA,KAAA,GAAC,GAEP,GAAIze,KAAKkkE,WAAWD,GAAI,CACtB,IAAKjkE,KAAKmkE,UAAUj+D,EAAOowB,GACzB,OAGFt2B,KAAKokE,YAAc5kE,OAAOa,OAAO,GAAIL,KAAKgnD,KAAKhnD,KAAKmjE,YAAc,SAElEnjE,KAAKgnD,MAAMid,EAAI,GAAKzkE,OAAOa,OAAO,GAAIL,KAAKokE,aAC3Cv7D,WAAU,WAAO,OAAAnD,EAAK2+D,WAAW3+D,EAAKy9D,YAAaz9D,EAAK09D,oBAI5DP,EAAA3iE,UAAAikE,UAAA,SAAUj+D,EAAYowB,GAEpB,GAAIt2B,KAAKwjE,WAAWc,eAAiBtkE,KAAKwjE,WAAWc,aAAa9kE,OAAOa,OAAO,GAAIi2B,IAClF,OAAO,MAGHthB,EAAQhV,KAAKgnD,KAAKhzC,QAAQsiB,GAYhC,OAVAt2B,KAAKgnD,KAAKv3C,OAAOuF,EAAO,GAExBhV,KAAK+nD,kBAAkBj9B,gBAEG,IAArB9qB,KAAKgnD,KAAKrmD,QAAkBqU,IAAUhV,KAAKgnD,KAAKrmD,OACnDX,KAAKqkE,WAAWrkE,KAAKmjE,YAAc,EAAGnjE,KAAKojE,gBAE3CpjE,KAAKqkE,WAAWrkE,KAAKmjE,YAAanjE,KAAKojE,iBAGlC,GAGTP,EAAA3iE,UAAAqkE,aAAA,SAAar+D,EAAYs+D,GACnB,IAAA/mD,EAAAta,EAAA+C,EAAAoB,OAAAssB,GAAAnV,MAAA,KAAA,GAAC6X,EAAA7Y,EAAA,GAAK2d,EAAA3d,EAAA,GAGNgnD,IAFJnuC,GAAOA,GAGHouC,IAFJtpC,GAAOA,GAQP,GAAkB,SAAdopC,GAKF,GAJIluC,GAAOt2B,KAAKgnD,KAAKrmD,QACnB8jE,IAGEnuC,IAAQt2B,KAAKgnD,KAAKrmD,OACpB,GAAY,IAAR21B,GAAct2B,KAAKkkE,WAAW5tC,GAShCmuC,QATsC,CACtC,IAAIzkE,KAAK2kE,QAAQruC,GAKf,OAJA,IAAKt2B,KAAK4kE,YACR,YASgB,OAAdJ,GAAwBluC,EAAM,EACxCmuC,IACwB,SAAdD,GAA0BppC,EAAM,EAC1CspC,IACwB,UAAdF,GAA2BppC,EAAMp7B,KAAK64B,SAASl4B,OAAS,EAClE+jE,IACuB,SAAdF,EACLppC,EAAMp7B,KAAK64B,SAASl4B,OAAS,GAC/B+jE,IACAx+D,EAAMguB,kBACGoC,EAAMt2B,KAAKgnD,KAAKrmD,SACzB+jE,EAAO,EACPD,IACAv+D,EAAMguB,kBAEe,UAAdswC,IACLppC,EAAM,GACRspC,IACAx+D,EAAMguB,kBACGoC,EAAM,IACfouC,EAAO1kE,KAAK64B,SAASl4B,OAAS,EAC9B8jE,IACAv+D,EAAMguB,mBAIV,GAAIl0B,KAAKkjE,eAAoBuB,EAAI,IAAIC,EAArC,CAMA,GAAID,IAASzkE,KAAKmjE,aAAe7sC,EAAM,GAAKt2B,KAAKgnD,KAAKrmD,QAAU21B,EAC9D,GAAKt2B,KAAKkkE,WAAW5tC,IAKnB,IAAKt2B,KAAKmkE,UAAUj+D,EAAOowB,GACzB,YALF,IAAKt2B,KAAK2kE,QAAQruC,GAChB,OASFt2B,KAAKmjE,cAAgBsB,IACvBzkE,KAAKokE,YAAc5kE,OAAOa,OAAO,GAAIL,KAAKgnD,KAAKyd,EAAO,KAIxDzkE,KAAK+iE,SAAW78D,EAAMoB,OAAOssB,GAC7B5zB,KAAKgjE,QAAU1sC,EACft2B,KAAKijE,WAAa7nC,EAElBp7B,KAAKqkE,WAAWI,EAAMC,KAGxB7B,EAAA3iE,UAAA2kE,WAAA,SAAW3+D,OACH6e,EAAK7e,EAAMmhB,KAAK9gB,KAAI,SAACf,GAAW,OAAAA,EAAQouB,KAE9C,GAAK7O,GAKL,GAAI/kB,KAAKkjE,eAAiBn+C,EAAG6O,GAA7B,CAIM,IAAAnW,EAAAta,EAAA4hB,EAAA,GAAAtG,MAAA,KAAA,GAAC6X,EAAA7Y,EAAA,GACDgnD,GAAQnuC,EACRouC,GAFMjnD,EAAA,GAIZ,GAAIgnD,IAASzkE,KAAKmjE,YAAa,CAC7B,GAAInjE,KAAKmjE,YAAc,EACrB,GAAKnjE,KAAKkkE,WAAWlkE,KAAKmjE,cAMxB,IAAKnjE,KAAKmkE,UAAUj+D,EAAOowB,GACzB,YANF,IAAKt2B,KAAK2kE,QAAQ3kE,KAAKmjE,aAErB,YADAnjE,KAAKqkE,WAAWrkE,KAAKmjE,YAAanjE,KAAKojE,gBAU7CpjE,KAAKokE,YAAc5kE,OAAOa,OAAO,GAAIL,KAAKgnD,KAAKyd,EAAO,IAIxDzkE,KAAK+iE,SAAW/iE,KAAKkjE,aACrBljE,KAAKgjE,QAAUhjE,KAAKmjE,YACpBnjE,KAAKijE,WAAajjE,KAAKojE,eAEvBpjE,KAAKkjE,aAAen+C,EAAG6O,GACvB5zB,KAAKmjE,YAAcsB,EACnBzkE,KAAKojE,eAAiBsB,QApCpB1kE,KAAKqkE,WAAWrkE,KAAKmjE,YAAanjE,KAAKojE,iBAuC3CP,EAAA3iE,UAAAykE,QAAA,SAAQruC,GAAR,IAAA5wB,EAAA1F,KAGQ8kE,EAAM9kE,KAAKgnD,KAAK1wB,EAAM,GAE5B,IAAK92B,OAAO68B,KAAKyoC,GAAK72C,KAAI,SAAC82C,GAAQ,OAAAD,EAAIC,KAAUr/D,EAAK0+D,YAAYW,KAEhE,OAAO,EAGT,GAAI/kE,KAAKwjE,WAAWwB,aAAehlE,KAAKwjE,WAAWwB,WAAWF,EAAK9kE,KAAKokE,aACtE,OAAO,MAGHa,EAAY,GAQlB,OANAjlE,KAAKw5B,QAAQjgB,QAAO,SAACod,IACK,IAApBA,EAAO2N,UAAsBwgC,EAAInuC,EAAOtK,WAC1C44C,EAAU/hE,KAAKyzB,EAAOtK,YAIE,IAArB44C,EAAUtkE,QAGnBkiE,EAAA3iE,UAAA0kE,UAAA,eACQE,EAAM,GAEZ,QAAI9kE,KAAKwjE,WAAW0B,eAAiBllE,KAAKwjE,WAAW0B,aAAaJ,MAMlE9kE,KAAKgnD,KAAK9jD,KAAK4hE,GACf9kE,KAAK+nD,kBAAkBj9B,iBAEhB,IAGT+3C,EAAA3iE,UAAAgkE,WAAA,SAAW5tC,OACHwuC,EAAM9kE,KAAKgnD,KAAK1wB,EAAM,GAE5B,QAAKwuC,IAIUtlE,OAAO68B,KAAKyoC,GAAK72C,KAAI,SAAC5B,GAAY,OAAAy4C,EAAIz4C,MAKvDw2C,EAAA3iE,UAAAmkE,WAAA,SAAW/tC,EAAa8E,OAChB+pC,EAAWnlE,KAAK8iE,MAAMl8D,cAAcoB,cAAc,QAAQsuB,EAAG,IAAI8E,EAAG,MAEtE+pC,IACFnlE,KAAKkjE,aAAkB5sC,EAAG,IAAI8E,EAC9Bp7B,KAAKmjE,YAAc7sC,EACnBt2B,KAAKojE,eAAiBhoC,EACtB+pC,EAASnxC,8BA7UdvvB,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,WACVC,SAAA,4qNAjCO0mB,EAAAA,yBAA8BniB,EAAAA,kBAA8BC,EAAAA,mDAuDlEC,EAAAA,UAASnF,KAAA,CAAC,QAAS,CAAEqF,UAAQ,0BAC7BF,EAAAA,UAASnF,KAAA,CAAC,UAAW,CAAEqF,UAAQ,wBAS/BtF,EAAAA,MAAKC,KAAA,CAAC,kCAKND,EAAAA,MAAKC,KAAA,CAAC,2BAoBND,EAAAA,MAAKC,KAAA,CAAC,aAqRT4+D,EAhVA,GC/BAuC,GAAA,WA4BE,SAAAA,EAAoBrd,GAAA/nD,KAAA+nD,kBAAAA,EAjBF/nD,KAAAiW,MAAiB,OAEhBjW,KAAA0+B,SAAoB,EAElB1+B,KAAAuS,SAAoB,GAEnBvS,KAAAsiE,UAAqB,EAa7C,OAXE9iE,OAAAsE,eAAsBshE,EAAAllE,UAAA,QAAK,KAG3B,WACE,OAAOF,KAAKwiE,OAAYxiE,KAAKwiE,OAAM,KAAO,YAJ5C,SAA4BjhE,GAC1BvB,KAAKwiE,OAASjhE,uDAlBjBkD,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,gBACVC,SAAA,8tBAJgD0mB,EAAAA,oDAW/CrnB,EAAAA,MAAKC,KAAA,CAAC,4BAEND,EAAAA,MAAKC,KAAA,CAAC,8BAEND,EAAAA,MAAKC,KAAA,CAAC,gCAEND,EAAAA,MAAKC,KAAA,CAAC,8BAEND,EAAAA,MAAKC,KAAA,CAAC,0BAOND,EAAAA,MAAKC,KAAA,CAAC,cAITmhE,EA9BA,GCgBAC,GAAA,WAAA,SAAAA,KAiB6B,2BAjB5BxgE,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACAo2D,EAAAA,YAEAD,IAEFl2D,aAAc,CACZg9D,GACAE,GACAW,GACAuC,IAEFngE,QAAS,CACP49D,QAGyBwC,EAjB7B,GCTaC,GAA6B,CACxCvpD,GAAE,CACAwpD,YAAa,eACb9sC,aAAc,iBACdF,OAAQ,gBACRa,UAAW,aACXosC,YAAa,gBAEfxpD,GAAE,CACAupD,YAAa,mBACb9sC,aAAc,wBACdF,OAAQ,uBACRa,UAAW,oBACXosC,YAAa,oBAEf1pD,GAAE,CACAypD,YAAa,mBACb9sC,aAAc,2BACdF,OAAQ,yBACRa,UAAW,mBACXosC,YAAa,oBAejBC,GAAA,WAAA,SAAAA,IAWEzlE,KAAAo5B,WAAqB,EACrBp5B,KAAA0lE,YAAsB,EAkKC1lE,KAAAk5B,SAA+B,IAAIvnB,EAAAA,aAOhC3R,KAAA2lE,YAAkC,IAAIh0D,EAAAA,aAiElE,OAjOEnS,OAAAsE,eAAwB2hE,EAAAvlE,UAAA,UAAO,KAI/B,WACE,OAAOF,KAAKgvB,cALd,SAAgCztB,GAC9BvB,KAAKgvB,SAAWrvB,MAAMouB,QAAQxsB,GAASA,EAAQ,oCAcjD/B,OAAAsE,eAAuB2hE,EAAAvlE,UAAA,SAAM,KAI7B,WACE,OAAOF,KAAKijB,aALd,SAA8BvN,GAC5B1V,KAAKijB,QAAUvN,mCAcjBlW,OAAAsE,eAAgC2hE,EAAAvlE,UAAA,gBAAa,KAK7C,WACE,OAAOF,KAAK4lE,oBANd,SAA8CprC,GAC5Cx6B,KAAK4lE,eAAiBn5D,EAAiB+tB,GACvCx6B,KAAK6lE,kDAQPrmE,OAAAsE,eAAsB2hE,EAAAvlE,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAKoF,YALd,SAA4B7D,GAC1BvB,KAAKoF,OAASzF,MAAMouB,QAAQxsB,GAASA,EAAQ,oCA2C/C/B,OAAAsE,eAAyB2hE,EAAAvlE,UAAA,WAAQ,KAYjC,WACE,OAAOF,KAAKi6B,WAAaqrC,GAA2Bz5D,UAbtD,SAAkCtK,GAC5BA,aAAiB/B,UAAY+B,aAAiB5B,OAChDK,KAAKi6B,UAAS75B,EAAA,GACTklE,GAA2B15D,GAC3B05D,GAA2Bz5D,KAC3BtK,GAGLvB,KAAKi6B,UAAYqrC,GAA2Bz5D,sCAgChDrM,OAAAsE,eAAuB2hE,EAAAvlE,UAAA,SAAM,KAK7B,WACE,OAAOF,KAAK8lE,aANd,SAA8BC,GAC5B/lE,KAAK8lE,QAAUr5D,EAAiBs5D,GAChC/lE,KAAK6lE,kDAcPrmE,OAAAsE,eAAmC2hE,EAAAvlE,UAAA,mBAAgB,KAInD,WACE,OAAOF,KAAKgmE,uBALd,SAAoDzkE,GAClDvB,KAAKgmE,kBAAoBv5D,EAAiBlL,oCAqB5CkkE,EAAAvlE,UAAA+lE,cAAA,SAAcC,EAAmCn8D,OACzCo8D,EAAYnmE,KAAKomE,oBAAoBr8D,GACvCm8D,EAAet2C,QACjBs2C,EAAet2C,OAAOu2C,IAI1BV,EAAAvlE,UAAAk8B,WAAA,WACEp8B,KAAKk5B,SAASnnB,QAGhB0zD,EAAAvlE,UAAAmmE,eAAA,SAAeC,OACPC,EAA2BvmE,KAAKomE,oBAAoBE,GAC1DtmE,KAAK2lE,YAAY5zD,KAAKw0D,IAGxBd,EAAAvlE,UAAAsmE,mBAAA,WAAA,IAAA9gE,EAAA1F,KACOA,KAAKw6B,gBACRx6B,KAAKo5B,WAAap5B,KAAKo5B,UAEvBp5B,KAAKqF,MAAMkU,QAAO,SAACxP,GACjBA,EAAK6wB,UAAYl1B,EAAK0zB,cAK5BqsC,EAAAvlE,UAAAumE,eAAA,SAAenwC,GACbA,EAAIsE,WAAatE,EAAIsE,UAErB56B,KAAKo5B,UAAYp5B,KAAK0mE,wBAAwB1mE,KAAKqF,QAG7CogE,EAAAvlE,UAAAkmE,oBAAR,SAA4Br8D,OACpB48D,EAAW58D,EAAI3J,EAAA,GAAQ2J,GAASxF,UAEtC,IAAK,IAAM+3B,KAAOqqC,EACZA,EAAS9mE,eAAey8B,IAAQA,EAAIxsB,WAAW,aAC1C62D,EAASrqC,GAIpB,OAAOqqC,GAGDlB,EAAAvlE,UAAAwmE,wBAAR,SAAgCrhE,GAI9B,QAAIA,EAAMq3B,MAFQ,SAAG3yB,GAAQ,OAAAA,EAAK6wB,eAM9Bv1B,EAAM4oB,KAPsB,SAAGlkB,GAAQ,OAAAA,EAAK6wB,WAAgC,OAAnB7wB,EAAK6wB,aAQzD,MAMH6qC,EAAAvlE,UAAA2lE,eAAR,WACE7lE,KAAK0lE,cAAgB1lE,KAAK+lE,QAAW/lE,KAAKw6B,gBAAiBx6B,KAAKqF,QAASrF,KAAKqF,MAAM1E,0CA9NrFqD,EAAAA,MAAKC,KAAA,CAAC,6BAeND,EAAAA,MAAKC,KAAA,CAAC,mCAeND,EAAAA,MAAKC,KAAA,CAAC,oCAUND,EAAAA,MAAKC,KAAA,CAAC,6BA4CND,EAAAA,MAAKC,KAAA,CAAC,oCAiBND,EAAAA,MAAKC,KAAA,CAAC,0CAGND,EAAAA,MAAKC,KAAA,CAAC,oCAoBND,EAAAA,MAAKC,KAAA,CAAC,sCAgBND,EAAAA,MAAKC,KAAA,CAAC,0CAaN2N,EAAAA,OAAM3N,KAAA,CAAC,oCAOP2N,EAAAA,OAAM3N,KAAA,CAAC,qBAiEVwhE,EAtPA,GC0CAmB,GAAA,WAiBE,SAAAA,EAAmBhqC,GAAA58B,KAAA48B,YAAAA,EAErB,2BAnBCtkB,EAAAA,UAASrU,KAAA,CAAC,CACTS,SAAU,8EArFem4B,EAAAA,8CAkGxB74B,EAAAA,MAAKC,KAAA,CAAC,cAKT2iE,EAnBA,GCrCAC,GAAA,WAiBE,SAAAA,EAAmBjqC,GAAA58B,KAAA48B,YAAAA,EAErB,2BAnBCtkB,EAAAA,UAASrU,KAAA,CAAC,CACTS,SAAU,6EAhDQm4B,EAAAA,mDA6DjB74B,EAAAA,MAAKC,KAAA,CAAC,oBAKT4iE,EAnBA,GCfAC,GAAA,SAAA3iE,GA2BE,SAAA2iE,EAAoBl9C,EAAmCrkB,GAAvD,IAAAG,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAkkB,eAAAA,EAElBlkB,EAAKY,OAASf,EAAQgB,KAAK,IAAIpG,OAAO,QAyF1C,OApG0CiE,EAAAA,EAAAA,GAcxC5E,OAAAsE,eAAIgjE,EAAA5mE,UAAA,qBAAkB,KAAtB,WACE,QAASF,KAAK+mE,yDAGhBvnE,OAAAsE,eAAIgjE,EAAA5mE,UAAA,oBAAiB,KAArB,WACE,QAASF,KAAKgnE,wDAGhBxnE,OAAAsE,eAAIgjE,EAAA5mE,UAAA,wBAAqB,KAAzB,WACE,OAAOF,KAAKqF,OAASrF,KAAKqF,MAAM1E,OAAS,GAAKX,KAAKk5B,SAAS2jC,UAAUl8D,OAAS,mCAGjFnB,OAAAsE,eAAIgjE,EAAA5mE,UAAA,qBAAkB,KAAtB,WACE,OAAOF,KAAKq9B,gBAAkBr9B,KAAKq9B,eAAe18B,OAAS,GAAKX,KAAKq9B,eAAe18B,QAAU,mCAGhGnB,OAAAsE,eAAIgjE,EAAA5mE,UAAA,mBAAgB,KAApB,WACE,OAAOF,KAAKq9B,gBAAkBr9B,KAAKq9B,eAAe18B,OAAS,mCAG7DnB,OAAAsE,eAAIgjE,EAAA5mE,UAAA,iBAAc,KAAlB,WACE,OAAOF,KAAK2lE,YAAY9I,UAAUl8D,OAAS,mCAG7CnB,OAAAsE,eAAIgjE,EAAA5mE,UAAA,iBAAc,KAAlB,WACE,OAAOF,KAAKo6B,SAAWp6B,KAAKo6B,QAAQxgB,OAAM,SAACgW,GAAU,OAAmB,IAAnBA,EAAO2N,2CAG9DupC,EAAA5mE,UAAA+mE,mBAAA,WACEjnE,KAAKknE,kBAGPJ,EAAA5mE,UAAAwG,UAAA,WACE1G,KAAKmnE,oBAGPL,EAAA5mE,UAAAknE,eAAA,SAAer9D,GACb,OAAI/J,KAAKqnE,cAAgBt9D,EAAK/J,KAAKqnE,cAC1Bt9D,EAAK/J,KAAKqnE,cAAcv3D,WAAW,QAAU,eAAiB,eAGhE,UAGTg3D,EAAA5mE,UAAAonE,aAAA,SAAav9D,GACX,OAAO/J,KAAKunE,oBAAsBvnE,KAAK+mE,wBAAwBrgB,MAC/D1mD,KAAK+mE,wBAAwBrgB,MAAM38C,GAAQA,EAAK/J,KAAKwnE,gBAGvDV,EAAA5mE,UAAAo5B,SAAA,WACE,OAAOt5B,KAAKqF,OAASrF,KAAKqF,MAAM1E,OAAS,GAG3CmmE,EAAA5mE,UAAAyvB,mBAAA,SAAmBu2C,EAAmCn8D,GACpD,OAAOmD,EAASg5D,EAAe10C,SAAU,YAAc,EAAsBA,SAASznB,GAAQm8D,EAAe10C,UAG/Gs1C,EAAA5mE,UAAAogE,QAAA,SAAQtrD,GACN,OAAOA,GAGT8xD,EAAA5mE,UAAAwgC,YAAA,SAAY32B,EAAM42B,GAChB3gC,KAAK4gC,YAAcD,EACnB3gC,KAAK4pB,eAAekB,gBAEpB9qB,KAAK6gC,kBAAkBvnB,OAAOvP,IAGxB+8D,EAAA5mE,UAAAinE,iBAAR,eACQhmC,EAAenhC,KAAKsG,OAAOiB,KAAKvH,KAAKqF,OAEvC87B,GAAgBnhC,KAAKo5B,YACvBp5B,KAAKo5B,UAAY,MAGf+H,GAAgBnhC,KAAKqF,OAASrF,KAAKqF,MAAM1E,QAAUX,KAAK+lE,SAAW/lE,KAAKw6B,gBAC1Ex6B,KAAK0lE,YAAa,IAIdoB,EAAA5mE,UAAAgnE,eAAR,WAAA,IAAAxhE,EAAA1F,KACMA,KAAKqF,OAASrF,KAAKqF,MAAM1E,OAAS,GAAKX,KAAKynE,mBAAqBznE,KAAKgnE,uBAAuBU,YAC/F1nE,KAAKqF,MAAMkU,QAAO,SAACxP,GAAQ,OAAAA,EAAKg2B,YAAcr6B,EAAKshE,uBAAuBU,WAAW39D,0BAlH1FtF,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,gBACVC,SAAA,k+IACAgjE,WAAY,CACVC,EAAAA,QAAQ,iBAAkB,CACxBpY,EAAAA,MAAM,IAAKl6C,EAAAA,MAAM,CAAEuyD,aAAc,aACjCrY,EAAAA,MAAM,OAAQl6C,EAAAA,MAAM,CAAEuyD,aAAc,YACpCC,EAAAA,WAAW,YAAa,CACtBxyD,EAAAA,MAAM,CAAEI,OAAQ,IAAKmyD,aAAc,WACnCE,EAAAA,QAAQ,IAAKzyD,EAAAA,MAAM,CAAEI,OAAQ,OAE/BoyD,EAAAA,WAAW,YAAa,CACtBxyD,EAAAA,MAAM,CAAEI,OAAQ,MAChBqyD,EAAAA,QAAQ,IAAKzyD,EAAAA,MAAM,CAAEI,OAAQ,yDA5CV2V,EAAAA,yBAAqDpiB,EAAAA,oEAmD7Ew4B,EAAAA,aAAYx9B,KAAA,CAAC2iE,GAAqC,CAAEt9D,UAAQ,oCAC5Dm4B,EAAAA,aAAYx9B,KAAA,CAAC4iE,GAAoC,CAAEv9D,UAAQ,+BAE3DF,EAAAA,UAASnF,KAAA,CAAC,QAAS,CAAEqF,UAAQ,OA+FhCw9D,EAtHA,CAkB0CrB,ICR1CuC,GAAA,WAAA,SAAAA,KAoBiC,2BApBhCnjE,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACA2G,EAAAA,aACAsG,GACAgf,IAEFhsB,aAAc,CACZ8hE,GACAF,GACAC,IAEF5hE,QAAS,CACP6hE,GACAF,GACAC,IAEFt7D,UAAW,GACX0lB,QAAS,OAEsB+2C,EApBjC,GCtCMC,GAAmB,CACvB,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,YAWFC,GAAA,WAAA,SAAAA,KAmEA,OA3BE1oE,OAAAsE,eAAsBokE,EAAAhoE,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAKmoE,YALd,SAA4B5mE,GAC1BvB,KAAKmoE,OAASF,GAAiBlkE,SAASxC,GAASA,EAlDrB,4CA8D9B/B,OAAAsE,eAAsBokE,EAAAhoE,UAAA,QAAK,KAK3B,WACE,OAAOF,KAAKk4B,YANd,SAA4B32B,GAC1BvB,KAAKk4B,OAAStrB,EAAarL,GAC3BvB,KAAKooE,cAAcpoE,KAAKk4B,yCAOlBgwC,EAAAhoE,UAAAkoE,cAAR,SAAsB7mE,OACd8mE,GAAmB9mE,GAAmB,IAAVA,IAAiBA,GAAS,GAAKA,EAAQ,IACzEvB,KAAKsoE,WAAaD,EAAkB9mE,EAAMsN,WAAatN,EAAQ,GAAK,MAAQgD,0CAxB7EP,EAAAA,MAAKC,KAAA,CAAC,0BAaND,EAAAA,MAAKC,KAAA,CAAC,cAcTikE,EAnEA,GClBAK,GAAA,SAAApkE,GAAA,SAAAokE,mDAI+D,OAAxBnkE,EAAAA,EAAAA,uBAJtCK,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,YACVC,SAAA,iHAE6D4jE,EAJ/D,CAIuCL,ICHvCM,GAAA,WAAA,SAAAA,KAW8B,2BAX7B3jE,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZujE,IAEFtjE,QAAS,CACPsjE,QAG0BC,EAX9B,GCDaC,GAAyB,CACpC1sD,GAAI,CAAE2sD,aAAc,mBACpB1sD,GAAI,CAAE0sD,aAAc,2BACpB5sD,GAAI,CAAE4sD,aAAc,yBAWtBC,GAAA,WAgME,SAAAA,EAAmBC,GAAA5oE,KAAA4oE,YAAAA,EA9LX5oE,KAAA6oE,YAAa,EACb7oE,KAAA8oE,SAAU,EAGV9oE,KAAA+oE,UAAY,EACZ/oE,KAAAgpE,OAAS,GAWRhpE,KAAAgtB,SAAQ5sB,EAAA,GACZqoE,GAAuB78D,GACvB68D,GAAuB58D,MAiS9B,OA5QErM,OAAAsE,eAA0B6kE,EAAAzoE,UAAA,YAAS,KAMnC,WACE,OAAOF,KAAK6oE,gBAPd,SAAoCI,GAClCjpE,KAAK6oE,WAAap8D,EAAiBw8D,GAEnCjpE,KAAKkpE,yDAQP1pE,OAAAsE,eAAsB6kE,EAAAzoE,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAKgpE,YALd,SAA4BG,GAC1BnpE,KAAKgpE,OAASrpE,MAAMouB,QAAQo7C,GAASA,EAAQ,oCAO/C3pE,OAAAsE,eAAI6kE,EAAAzoE,UAAA,WAAQ,KAAZ,WACE,OAAOF,KAAK+oE,2CAgBdvpE,OAAAsE,eAAuB6kE,EAAAzoE,UAAA,SAAM,KAK7B,WACE,OAAOF,KAAK8oE,aANd,SAA8BlvD,GAC5B5Z,KAAK8oE,QAA0B,KAAhB,GAA4Br8D,EAAiBmN,GAC5D5Z,KAAKopE,cAAa3lE,EAAOzD,KAAKgpE,yCAiChCxpE,OAAAsE,eAAwB6kE,EAAAzoE,UAAA,UAAO,KAM/B,WACE,OAAOF,KAAKqpE,cAPd,SAAgC9nE,GAC9BvB,KAAKqpE,SAAW9nE,GAASgD,UAEzBvE,KAAK4J,cAAc5J,KAAK4K,0CA2B1BpL,OAAAsE,eAAuB6kE,EAAAzoE,UAAA,SAAM,KAI7B,WACE,OAAOF,KAAKspE,aALd,SAA8B/nE,GAC5BvB,KAAKspE,QAAU/nE,GAAS2L,EAAS3L,EAAO,UAAYA,EAAQgD,2CAmB9D/E,OAAAsE,eAAqB6kE,EAAAzoE,UAAA,OAAI,KAIzB,WACE,OAAOF,KAAKupE,WALd,SAA0BhoE,GACxBvB,KAAKupE,MAAQr8D,EAAS3L,EAAO,WAAaA,EAAMoL,OAASpL,EAAQgD,2CAqBnE/E,OAAAsE,eAA2B6kE,EAAAzoE,UAAA,YAAS,KAIpC,WACE,OAAOF,KAAKwpE,gBALd,SAAqCjoE,GACnCvB,KAAKwpE,WAAat8D,EAAS3L,EAAO,WAAaA,EAAMoL,OAASpL,EAAQgD,2CAShEokE,EAAAzoE,UAAA0J,cAAR,SAAsBgB,GACG,iBAAZA,GAAwBA,EAAQ+B,QAEzC3M,KAAK4oE,YAAYn+B,iBAAiB7/B,GAClC5K,KAAK0pC,cAAgB1pC,KAAK4oE,aAEE,iBAAZh+D,GAAwBA,EAAQuiC,gBAEhDntC,KAAK0pC,cAAgB9+B,EAErB5K,KAAK0pC,cAAgBnlC,WAIfokE,EAAAzoE,UAAAupE,uBAAV,WAAA,IAAA/jE,EAAA1F,KACEA,KAAK0pE,aAAe1pE,KAAKmpE,MAAMxoE,OAC/BX,KAAK2pE,oBAAsB3pE,KAAKmpE,MAAMxoE,OAEtCX,KAAKmpE,MAAM5vD,QAAO,SAACqwD,GACjBlkE,EAAKmkE,OAAS,EACdnkE,EAAKgkE,aAAahkE,EAAKgkE,YAAa95D,EAAWg6D,EAASz4C,MACxDzrB,EAAKikE,qBAAoBjkE,EAAKikE,oBAAqBjkE,EAAKgkE,aAAa95D,EAAWg6D,EAASE,YACzFpkE,EAAKqkE,iBAAiBH,GACtBlkE,EAAKskE,sBAAsBJ,GAEvBA,EAASK,WACXvkE,EAAKmkE,SACLnkE,EAAKwkE,gBAAgBN,OAKjBjB,EAAAzoE,UAAA8pE,sBAAV,SAAgCJ,GAC9BA,EAAa,GAAIA,EAAa,IAAKj5D,EAAAA,KACnCi5D,EAAgB,MAAI5pE,KAAK6pE,OACzBD,EAAe,KAAI5pE,KAAKmqE,YAAYP,IAG5BjB,EAAAzoE,UAAAkqE,cAAV,SAAwBjB,GAAxB,IAAAzjE,EAAA1F,KACEmpE,EAAM5vD,QAAO,SAAC8wD,GAAQ,OAAA3kE,EAAK4kE,aAAaD,MAGlC1B,EAAAzoE,UAAAgqE,gBAAR,SAAwBG,GAAxB,IAAA3kE,EAAA1F,KACEqqE,EAAKJ,SAAS1wD,QAAO,SAAEqwD,EAAU50D,EAAOu1D,OAEhCC,EAAeD,EAAUv1D,EAAQ,GACnCw1D,GAAgBA,EAAaP,WAC/BvkE,EAAKmkE,OAASW,EAAoB,OAGhC9kE,EAAKmkE,QAAUnkE,EAAK+kE,WACtB/kE,EAAKskE,sBAAsBJ,GAEvBA,EAASK,WACXvkE,EAAKmkE,SACLnkE,EAAKwkE,gBAAgBN,KAIpBS,EAAiB,aACpBA,EAAO3kE,EAAKglE,kBAAkBL,EAAMT,MAKxCS,EAAKJ,SAAWzqE,OAAOa,OAAO,GAAIgqE,EAAKJ,WAGjCtB,EAAAzoE,UAAA6pE,iBAAR,SAAyBH,GAAzB,IAAAlkE,EAAA1F,KAEM4pE,EAAqB,mBAChBA,EAAqB,WAG1BA,EAASK,UACXL,EAASK,SAAS1wD,QAAO,SAACoxD,GAAW,OAAAjlE,EAAKqkE,iBAAiBY,MAKvDhC,EAAAzoE,UAAAwqE,kBAAR,SAA0BE,EAAqBC,OACvCC,EAAmBD,EAAMZ,UAAYY,EAAMZ,SAAStpE,OACpDoqE,EAAqBF,EAAkB,WACvCG,EAAgBH,EAAMI,OAASr+D,EAAai+D,EAAMI,MAAM1pE,QAAU,EAIxE,OAFAqpE,EAAmB,WAAIG,GAAuBC,IAAkBF,EAEzDF,GAGDjC,EAAAzoE,UAAAiqE,YAAR,SAAoBP,GAClB,OAAIA,EAASK,UAAYL,EAASK,SAAStpE,OAAS,GAAKX,KAAK6pE,OAAS7pE,KAAKyqE,SACnE,WAEJb,EAAS3/D,KAGV4F,EAAe+5D,EAAS3/D,MACnB,eAEF,eALE,UAQH0+D,EAAAzoE,UAAAoqE,aAAR,SAAqBV,GAArB,IAAAlkE,EAAA1F,KACE,IAAK4pE,EAASvnE,OAAmC,KAA1BunE,EAASvnE,MAAMsK,OACpC,MAAM,IAAIkQ,MAAM,oDACP+sD,EAASK,UAClBL,EAASK,SAAS1wD,QAAO,SAACoxD,GACxBjlE,EAAK4kE,aAAaK,yCArQvB3mE,EAAAA,MAAKC,KAAA,CAAC,8BAWND,EAAAA,MAAKC,KAAA,CAAC,2BAyBND,EAAAA,MAAKC,KAAA,CAAC,6BAmCND,EAAAA,MAAKC,KAAA,CAAC,6BA8BND,EAAAA,MAAKC,KAAA,CAAC,0BAoBND,EAAAA,MAAKC,KAAA,CAAC,6BAsBND,EAAAA,MAAKC,KAAA,CAAC,mBA6HT0kE,EArTA,GCcAuC,GAAA,WAME,SAAAA,EAAmBtuC,GAAA58B,KAAA48B,YAAAA,EACrB,2BAPCtkB,EAAAA,UAASrU,KAAA,CAAC,CACTS,SAAU,wEAtCQm4B,EAAAA,eA4CpBquC,EAPA,GC1BAC,GAAA,WAAA,SAAAA,IAEUnrE,KAAAorE,cAAgB,IAAIpnD,EAAAA,QACpBhkB,KAAAqrE,aAAe,IAAIrnD,EAAAA,QAqB7B,OAlBEmnD,EAAAjrE,UAAAorE,wBAAA,SAAwBjB,GACtBrqE,KAAKqrE,aAAa5pE,KAAK4oE,IAIzBc,EAAAjrE,UAAAqrE,4BAAA,WACE,OAAOvrE,KAAKqrE,aAAaG,gBAI3BL,EAAAjrE,UAAAurE,uBAAA,SAAuBpB,GACrBrqE,KAAKorE,cAAc3pE,KAAK4oE,IAI1Bc,EAAAjrE,UAAAwrE,6BAAA,WACE,OAAO1rE,KAAKorE,cAAcI,oCAtB7B/gE,EAAAA,aAwBD0gE,EAxBA,GCMAQ,GAAA,WAOE,SAAAA,EAAoBliE,GAAAzJ,KAAAyJ,KAAAA,EAgBtB,OAlBEjK,OAAAsE,eAAI6nE,EAAAzrE,UAAA,MAAG,KAAP,WAAoB,OAAOF,KAAK0J,sCAIhCiiE,EAAAzrE,UAAAuqC,iBAAA,SAAiB5gC,GACf7J,KAAK0J,KAAOG,GAGd8hE,EAAAzrE,UAAAitC,gBAAA,SAAgBtC,EAAgB/gC,OACxBugC,EAAYjqC,EAAA,CAChByqC,OAAMA,GACH/gC,GAGL,OAAO9J,KAAKyJ,KAAKc,IAAIvK,KAAK6J,IAAK,CAAEC,OAAQugC,IACtCiD,KAAKllC,EAAAA,IAAG,SAAEmlC,GAAoD,OAAAA,GAAYA,EAASloC,8BApBzFoF,EAAAA,sDAjBQC,EAAAA,cAwCTihE,EAvBA,GC+FAC,GAAA,SAAAznE,GA2BE,SAAAynE,EAAY9xD,EACQtU,EACAC,EACA4pB,EACAw8C,EACAjiD,EACRg/C,GANZ,IAAAljE,EAQEvB,EAAAvD,KAAAZ,KAAM4oE,IAAY5oE,YAPA0F,EAAAF,QAAAA,EACAE,EAAAD,SAAAA,EACAC,EAAA2pB,OAAAA,EACA3pB,EAAAmmE,iBAAAA,EACAnmE,EAAAkkB,eAAAA,EArBpBlkB,EAAAomE,eAAgB,EAGhBpmE,EAAAqmE,cAAwB,EACxBrmE,EAAA6yB,QAAkB,EAIV7yB,EAAAsmE,gBAA0B,EAC1BtmE,EAAAumE,iBAA2B,EAC3BvmE,EAAAwmE,aAAuB,KAe7BxmE,EAAKqU,UAAYD,EAAe,MAAa,YA4ZjD,OA3bsC1V,EAAAA,EAAAA,GAkCpC5E,OAAAsE,eAAY8nE,EAAA1rE,UAAA,0BAAuB,KAAnC,WACE,OAAOF,KAAKmsE,eAAsB,MAAInsE,KAAKosE,gBAAuB,uCAGpE5sE,OAAAsE,eAAI8nE,EAAA1rE,UAAA,iBAAc,KAAlB,WACE,OAAOF,KAAKqsE,cAAgBrsE,KAAKssE,iDAGnC9sE,OAAAsE,eAAI8nE,EAAA1rE,UAAA,uBAAoB,KAAxB,WACE,OAAOF,KAAK2pE,oBAAsB3pE,KAAKipE,YAAcjpE,KAAK+rE,8CAG5DvsE,OAAAsE,eAAI8nE,EAAA1rE,UAAA,YAAS,KAAb,WACE,OAAOF,KAAK2pE,oBAAsB3pE,KAAK+rE,cAAgB/rE,KAAKusE,sBAAyBvsE,KAAKipE,YAAcjpE,KAAKssE,iDAG/G9sE,OAAAsE,eAAI8nE,EAAA1rE,UAAA,cAAW,KAAf,WACE,OAAOF,KAAK2pE,mBAAqB3pE,KAAKipE,2CAGxC2C,EAAA1rE,UAAAwG,UAAA,WACE,IAAI1G,KAAKgsE,iBAAkBhsE,KAAK4Z,OAAhC,KAIM4yD,EAAchgC,KAAKC,UAAUzsC,KAAKmpE,OAEpCnpE,KAAKksE,eAAiBM,GAAgBxsE,KAAKisE,kBAC7CjsE,KAAKysE,aACLzsE,KAAKkpE,2BAIT0C,EAAA1rE,UAAA+G,YAAA,WACEjH,KAAK0sE,iBAAiBxhE,cACtBlL,KAAK2sE,kBAAkBzhE,cAEnBlL,KAAKgJ,gBACPhJ,KAAKgJ,kBAIT4iE,EAAA1rE,UAAAmE,SAAA,WAAA,IAAAqB,EAAA1F,KACEA,KAAK4sE,sBACL5sE,KAAK6sE,mBAELhkE,WAAU,eACFikE,EAAYpnE,EAAKqnE,kCACvBrnE,EAAKsnE,qBAAqBF,MAI9BlB,EAAA1rE,UAAA+sE,kBAAA,SAAkBC,EAAiB/D,GAAnC,IAAAzjE,EAAA1F,KACE,GAAImpE,EACF,OAAOA,EAAMl7C,KAAI,SAACo8C,OACVn6D,EAAgBD,EAAiBo6D,EAAKpgE,MAC5C,OAAIiG,IAAkBg9D,GACpBxnE,EAAKynE,WAAaj9D,EAClBxK,EAAK0nE,iBAAiB/C,IACf,GAEA3kE,EAAKunE,kBAAkBC,EAAS7C,EAAKJ,aAMpD2B,EAAA1rE,UAAA8sE,qBAAA,SAAqBE,GACdltE,KAAKmtE,YAAcntE,KAAKmtE,aAAeD,GAC1CltE,KAAKitE,kBAAkBC,EAASltE,KAAKmpE,QASzCyC,EAAA1rE,UAAAmtE,SAAA,WACErtE,KAAKstE,oBAAmB,IAG1B1B,EAAA1rE,UAAAqtE,eAAA,SAAe3zD,GAAf,IAAAlU,EAAA1F,KACE2I,aAAa3I,KAAKwtE,eAElBxtE,KAAKwtE,cAAgB3kE,WAAU,WAC7BnD,EAAK+nE,cAAc7zD,IAnNG,MA4N1BgyD,EAAA1rE,UAAAwtE,OAAA,WACE1tE,KAAKstE,oBAAmB,IAG1B1B,EAAA1rE,UAAA0sE,oBAAA,WAAA,IAAAlnE,EAAA1F,KACEA,KAAK0sE,iBAAmB1sE,KAAK6rE,iBAAiBN,8BAA8BjgE,UAAS,SAAE++D,GACrF3kE,EAAKioE,cAActD,MAIvBuB,EAAA1rE,UAAA2sE,iBAAA,WAAA,IAAAnnE,EAAA1F,KACEA,KAAK2sE,kBAAoB3sE,KAAKqvB,OAAOu+C,OAAOtiE,UAAS,SAACoB,GACpD,GAAIA,aAAemhE,EAAAA,eAAiBnhE,aAAeohE,EAAAA,iBAAkB,KAC7DhB,EAAYpnE,EAAKqnE,kCACvBrnE,EAAKsnE,qBAAqBF,OAYhClB,EAAA1rE,UAAAoZ,OAAA,WACEtZ,KAAKstE,oBAAoBttE,KAAKipE,YAGhC2C,EAAA1rE,UAAA6tE,iBAAA,WACE/tE,KAAK+rE,cAAgB/rE,KAAK+rE,aAC1B/rE,KAAKssE,gBAAkBtsE,KAAKipE,WAAajpE,KAAK+rE,aAE9C/rE,KAAKkpE,sBAAsBlpE,KAAKssE,iBAE5Bx9D,KAIA9O,KAAK+rE,cACP/rE,KAAKguE,wBAIDpC,EAAA1rE,UAAA+tE,4BAAR,WAEEjuE,KAAKkuE,2BAA2BluE,KAAKmsE,iBAEhCnsE,KAAKipE,WAAajpE,KAAKmsE,eAAsB,MA3Q7B,GA2QqDnsE,KAAKmuE,yBAC7EnuE,KAAKouE,eAAepuE,KAAKmsE,iBAIrBP,EAAA1rE,UAAAktE,iBAAR,SAAyB/C,GACvBrqE,KAAKmsE,eAAiB9B,EACtBrqE,KAAKmtE,WAAa9C,EAAKpgE,KACnBjK,KAAKmsE,eAAsB,MAnRV,EAoRnBnsE,KAAKouE,eAAepuE,KAAKmsE,gBAEzBnsE,KAAKosE,gBAAkB,KAEzBpsE,KAAK6rE,iBAAiBJ,uBAAuB,CAAE4C,OAAQruE,KAAKmsE,eAAgBmC,QAAStuE,KAAKosE,gBAAiBmC,kBAAkB,KAGvH3C,EAAA1rE,UAAAsuE,YAAR,SAAoBrF,GAClB,OAAOA,EAAMzsC,MAAK,SAAC2tC,GAAQ,OAAAA,EAAY,MA5RlB,KA+RfuB,EAAA1rE,UAAA6sE,gCAAR,eACQ0B,EAAkBzuE,KAAKqvB,OAAOq/C,SAAS1uE,KAAKqvB,OAAOxlB,KAAK8kE,KAAKC,SAAkB,QAErF,OAAOH,EAAkB,IAAIA,EAAgBI,SAASzmE,IAAG,SAAC0mE,GAAM,OAAAA,EAAGznD,OAAMS,KAAK,KAAS,IAGjF8jD,EAAA1rE,UAAAguE,2BAAR,SAAmC/B,GArSZ,IAsSjBA,EAAsB,QACxBnsE,KAAKosE,gBAAkB7nE,YAInBqnE,EAAA1rE,UAAAytE,cAAR,SAAsBtD,GAChBA,EAAKz6C,QACP5vB,KAAK+uE,kBAAkB1E,GAGJ,iBAAjBA,EAAW,KACbt6D,EAAiBs6D,EAAKpgE,MAEI,iBAAjBogE,EAAW,KACpBrqE,KAAKotE,iBAAiB/C,GAEI,aAAjBA,EAAW,OAChBrqE,KAAKgsE,iBACPhsE,KAAKgsE,gBAAiB,GAGxBhsE,KAAKgvE,cAAc3E,IAGA,aAAjBA,EAAW,OACbrqE,KAAK+rE,cAAe,IAIhBH,EAAA1rE,UAAA+uE,0BAAR,SAAkCrF,QAAA,IAAAA,IAAAA,EAAA,CAAkBvnE,MAAO,GAAI4H,KAAM,KAC3D,IAEFilE,EAAwC,CAAE7sE,MAFxCunE,EAAAvnE,MAE+C4H,KAFxC2/D,EAAA3/D,MAMf,OAFAjK,KAAKgqE,sBAAsBkF,GAEpBA,GAGDtD,EAAA1rE,UAAA8tE,qBAAR,WAAA,IAAAtoE,EAAA1F,KACEA,KAAKgJ,eAAiBhJ,KAAKyF,SAASsD,OAAO,SAAU,SAAQ,WAC3DrD,EAAKypE,eACLzpE,EAAKsD,oBAID4iE,EAAA1rE,UAAA6uE,kBAAR,SAA0B1E,GACG,iBAAhBA,EAAKz6C,OACd5vB,KAAK+Z,UAAUswD,EAAKz6C,QAAQy6C,GAE5BA,EAAKz6C,OAAOhvB,KAAKZ,KAAK+Z,UAAWswD,IAIvBuB,EAAA1rE,UAAAkvE,YAAd,SAA0Bx1D,4GAClBy1D,EAAaz1D,GAAUA,EAAOjN,SAGlC3M,KAAKopE,cAAgB,GACrB3rD,EAAAzd,KAAqBA,KAAK0pC,cAAgB,CAAA,EAAM1pC,KAAKsvE,gBAAgBD,IAAhD,CAAA,EAAA,IAFnB,CAAA,EAAA,iBAEwCE,EAAAC,EAAAltE,oBAAyCitE,EAAAvvE,KAAKyvE,iBAAiBJ,2BAAzG5xD,EAAK2rD,cAAamG,EAClBvvE,KAAKgsE,gBAAiB,eAEtBhsE,KAAKopE,cAAa3lE,EAAOzD,KAAKmpE,OAC9BnpE,KAAKgsE,gBAAiB,mCAKlBJ,EAAA1rE,UAAAuvE,iBAAR,SAAyB71D,OACjBwvD,EAAgB,GAItB,OAFAppE,KAAK0vE,UAAU1vE,KAAKmpE,MAAOvvD,EAAOxN,cAAeg9D,GAE1CA,GAGDwC,EAAA1rE,UAAAutE,cAAR,SAAsB7zD,GAAtB,IAAAlU,EAAA1F,KACEA,KAAK8rE,eAAgB,EAErB9rE,KAAKovE,YAAYx1D,GAAQ9X,KAAI,WAE3B4D,EAAKomE,eAAgB,EAErBpmE,EAAKiqE,aACLjqE,EAAKkkB,eAAekB,gBACpBplB,EAAKmmE,iBAAiBJ,uBAAuB,CAAE4C,OAAQ3oE,EAAKymE,eAAgBmC,QAAS5oE,EAAK0mE,oBAEzFwD,SAAK,SAACpsE,GACPkC,EAAKomE,eAAgB,EACrB3qE,QAAQE,OAAOmC,MAILooE,EAAA1rE,UAAAovE,gBAAd,SAA8BzkC,eAAA,IAAAA,IAAAA,EAAA,uGACxBA,EAAOlqC,QArYU,EAuYZ,CAAA,EAAMX,KAAK0pC,cAAcyD,gBAAgBtC,EAAQ7qC,KAAK8J,QAC1DwjC,KACCllC,EAAAA,IAAG,SAACynE,GAAqB,OAAAA,EAAkBznE,IAAG,SAACwhE,GAAY,OAAAlkE,EAAKupE,0BAA0BrF,QAE3FkG,aAND,CAAA,EAAA,UAEF,MAAA,CAAA,EAAOryD,EAAAnb,eAMP,MAAA,CAAA,EAAOtC,KAAKopE,qBAIRwC,EAAA1rE,UAAAwvE,UAAR,SAAkBvG,EAA2BvvD,EAAgBwvD,GAA7D,IAAA1jE,EAAA1F,KACEmpE,EAAM5vD,QAAO,SAAC8wD,IACPA,EAAKhoE,MAAM+J,cAAcrI,SAAS6V,KAAYywD,EAAKJ,UACnDI,EAAKJ,UAAYvkE,EAAKgqE,UAAUrF,EAAKJ,SAAUrwD,EAAQwvD,KACtDA,EAAclmE,KAAKmnE,MAKrBuB,EAAA1rE,UAAA6vE,WAAR,SAAmB5G,EAA2BS,OACtCoG,EAAS,SAAYzF,EAA+B32C,GACxD,GAAI22C,EACF,IAAK,IAAIv1D,EAAQ,EAAGA,EAAQu1D,EAAU5pE,OAAQqU,IAAS,KAC/Cq1D,EAAOE,EAAUv1D,GACvB,GAAIq1D,EAAKJ,UAAYI,EAAKJ,SAAS1jE,KAAI,SAACokE,GAAW,OAAAA,EAAY,KAAM/2C,IACnE,OAAOy2C,MAEHl+B,EAAQ6jC,EAAU3F,EAAKJ,SAAUr2C,GACvC,GAAIuY,EACF,OAAOA,IAKf,OAAO6jC,EAAU7G,EAAOS,EAAa,KAG/BgC,EAAA1rE,UAAA+vE,eAAR,SAAuB9G,EAA2BkB,OAE1C0F,EAAa/vE,KAAK+vE,WAElBG,EAAa,SAAY3F,EAA+BX,OAExDgB,EAASmF,EAAWxF,EAAWX,GAKnC,OAtbmB,IAmbfgB,EAAc,QAChBA,EAASsF,EAAc3F,EAAWK,IAE7BA,GAET,OAAOsF,EAAc/G,EAAOkB,IAGtBuB,EAAA1rE,UAAAiwE,oBAAR,SAA4BhH,EAA2BgD,EAA6BC,GAClF,GAAIpsE,KAAKwuE,YAAY,CAACpC,EAAiBD,IACrC,OAAOnsE,KAAKiwE,eAAe9G,EAAOgD,IAI9BP,EAAA1rE,UAAA8uE,cAAR,SAAsB3E,GAChBrqE,KAAKipE,WACPjpE,KAAKowE,qBAGP/F,EAAe,UAAKA,EAAe,SACnCrqE,KAAKosE,gBAAkB/B,EAEnBrqE,KAAKmsE,gBAAkB9B,EAAe,UACrCrqE,KAAKmuE,yBACLnuE,KAAKqwE,2BAA2BrwE,KAAKmpE,MAAOnpE,KAAKmsE,eAAgB9B,IACpErqE,KAAKotE,iBAAiBptE,KAAKmsE,gBAG7BnsE,KAAK6rE,iBAAiBJ,uBAAuB,CAAE4C,OAAQruE,KAAKmsE,eAAgBmC,QAAStuE,KAAKosE,mBAGpFR,EAAA1rE,UAAAmwE,2BAAR,SAAmClH,EAA2BgD,EAA6BC,GAEzF,OAD6BpsE,KAAKiwE,eAAe9G,EAAOgD,GACxB,KAAMC,EAAoB,IAGpDR,EAAA1rE,UAAAkuE,eAAR,SAAuBkC,OACf1F,EAAS5qE,KAAK+vE,WAAW/vE,KAAKmpE,MAAOmH,GAC3C1F,EAAiB,UAAI,EACrB5qE,KAAKosE,gBAAkBxB,GAGjBgB,EAAA1rE,UAAAyvE,WAAR,WACE3vE,KAAKu4B,OAAuC,IAA9Bv4B,KAAKopE,cAAczoE,QAG3BirE,EAAA1rE,UAAAqwE,sBAAR,WACEvwE,KAAKosE,gBAA0B,UAAKpsE,KAAKipE,WAAajpE,KAAK2pE,mBAGrDiC,EAAA1rE,UAAAkwE,mBAAR,SAA2BnH,QAAA,IAAAA,IAAAA,GAAA,GAEzBjpE,KAAKipE,UAAYA,EAEbjpE,KAAKosE,iBAAmBpsE,KAAKmsE,iBAC/BnsE,KAAKosE,gBAAkBpsE,KAAKmwE,oBAAoBnwE,KAAKmpE,MAAOnpE,KAAKmsE,eAAgBnsE,KAAKosE,kBAAoBpsE,KAAKosE,gBAC/GpsE,KAAKuwE,yBAGHvwE,KAAKmsE,iBACPnsE,KAAKiuE,8BACLjuE,KAAK6rE,iBAAiBJ,uBAAuB,CAAE4C,OAAQruE,KAAKmsE,eAAgBmC,QAAStuE,KAAKosE,gBAAiBmC,kBAAkB,KAG/HvuE,KAAKysE,cAGCb,EAAA1rE,UAAAivE,aAAR,WACMnvE,KAAK+rE,eACP/rE,KAAK+rE,cAAe,EACpB/rE,KAAKssE,iBAAkB,EACvBtsE,KAAKkpE,sBAAsBlpE,KAAKssE,mBAI5BV,EAAA1rE,UAAAotE,mBAAR,SAA2BrE,GAEpBjpE,KAAK2pE,mBAIV3pE,KAAKowE,mBAAmBnH,IAGlB2C,EAAA1rE,UAAAusE,WAAR,WACEzsE,KAAKisE,iBAAkB,EACvBjsE,KAAKypE,yBACLzpE,KAAKopE,cAAa3lE,EAAOzD,KAAKmpE,OAC9BnpE,KAAKksE,aAAe1/B,KAAKC,UAAUzsC,KAAKmpE,OACxCnpE,KAAKoqE,cAAcpqE,KAAKmpE,QAGhByC,EAAA1rE,UAAAgpE,sBAAV,SAAgCoD,OACxBkE,EAAUxwE,KAAKwF,QAAQoB,cAAc6pE,WAC3CzwE,KAAKyF,SAASzF,KAAKqsE,cAAgBC,EAAkB,WAAa,eAAekE,EAAS,2CA7b7F/rE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,WACVC,SAAA,wtFACA4G,UAAW,CAAE4/D,GAAqBQ,iDA1GlC3xD,EAAAA,wBAJA9Q,EAAAA,kBAGAC,EAAAA,iBAIwC4nB,EAAAA,cAWjCo6C,UAtBP9/C,EAAAA,yBAuBOsgD,kDA+FNlqC,EAAAA,aAAYx9B,KAAA,CAACinE,GAAgC,CAAE5hE,UAAQ,OAyb1DsiE,EAhcA,CAKsCjD,IC5GtC+H,GAAA,WAAA,SAAAA,IAOW1wE,KAAAqnC,OAAQ,EAOGrnC,KAAA4Z,OAAS,IAAIjI,EAAAA,aAMnC,OAJE++D,EAAAxwE,UAAAkvE,YAAA,SAAYvkC,GACV7qC,KAAK4Z,OAAO7H,KAAK84B,wBAjBpBpmC,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,kBACVC,SAAA,ypBAOCX,EAAAA,MAAKC,KAAA,CAAC,yCAGNmF,EAAAA,UAASnF,KAAA,CAAC,cAAe,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,oBAErDsI,EAAAA,OAAM3N,KAAA,CAAC,eAMVysE,EApBA,GCUAC,GAAA,WAkGE,SAAAA,EAAoB9E,GAAA7rE,KAAA6rE,iBAAAA,EA3FZ7rE,KAAA4wE,aAAuB,EACvB5wE,KAAA6wE,YAAsB,EAI9B7wE,KAAA8wE,UAAoB,EA6MtB,OA/LEtxE,OAAAsE,eAA4B6sE,EAAAzwE,UAAA,aAAU,KAItC,WACE,OAAOF,KAAK+wE,iBALd,SAAuCzI,GACrCtoE,KAAK+wE,YAAcnkE,EAAa07D,oCAoBlC9oE,OAAAsE,eAA4B6sE,EAAAzwE,UAAA,aAAU,KAKtC,WACE,OAAOF,KAAK4wE,iBANd,SAAuCrvE,GACrCvB,KAAK4wE,YAAcnkE,EAAiBlL,GAEpCvB,KAAKgxE,kBAAoBhxE,KAAKixE,YAAcjxE,KAAKkxE,2CAOnD1xE,OAAAsE,eAA4B6sE,EAAAzwE,UAAA,YAAS,KAIrC,WACE,OAAOF,KAAK6wE,gBALd,SAAsCtvE,GACpCvB,KAAK6wE,WAAapkE,EAAiBlL,oCAoBrC/B,OAAAsE,eAA0B6sE,EAAAzwE,UAAA,WAAQ,KAOlC,WACE,OAAOF,KAAKmxE,eARd,SAAmCC,GACjCpxE,KAAKmxE,UAAYC,EACbpxE,KAAKqxE,UACPrxE,KAAKsxE,6DAaT9xE,OAAAsE,eAAI6sE,EAAAzwE,UAAA,eAAY,KAAhB,WACE,MAAqB,aAAdF,KAAKoN,OAAwBpN,KAAKsoE,YAAkC,IAApBtoE,KAAKsoE,aAAqBtoE,KAAKsoE,YAAc,mCAKtGqI,EAAAzwE,UAAA+G,YAAA,WACEjH,KAAK0sE,iBAAiBxhE,eAGxBylE,EAAAzwE,UAAAmE,SAAA,WAAA,IAAAqB,EAAA1F,KAGEA,KAAK0sE,iBAAmB1sE,KAAK6rE,iBAAiBH,+BAA+BpgE,UAAS,SAAC++D,GACrF3kE,EAAK6rE,gBAAgBlH,MAIzBsG,EAAAzwE,UAAAytE,cAAA,SAAcznE,GACNA,EAAMisC,SAAWjsC,EAAMksC,UAC3BlsC,EAAMguB,iBAGNl0B,KAAK6rE,iBAAiBP,wBAAwB,CAC5CrhE,KAAMjK,KAAKiK,KACX2lB,OAAQ5vB,KAAK4vB,OACbgE,GAAI5zB,KAAK4zB,GACTzC,KAAMnxB,KAAKmxB,KACX9uB,MAAOrC,KAAKqC,MACZmvE,MAAOxxE,KAAKwxE,MACZvH,SAAUjqE,KAAKiqE,SACfgH,WAAYjxE,KAAKixE,WACjBI,SAAUrxE,KAAKqxE,SACfvH,WAAY9pE,KAAK8pE,WACjB18D,KAAMpN,KAAKoN,SAKTujE,EAAAzwE,UAAAuxE,mBAAR,SAA2BC,EAAyBC,EAAyBC,EAA2BrD,GAElGvuE,KAAK4zB,KAAO+9C,EAAe,KAC7B3xE,KAAK8wE,UAjJoB,GAiJR9wE,KAAKiqE,SAAStpE,QAG7BixE,IACF5xE,KAAK8wE,UAAYa,EAAqB,SACnC3xE,KAAK8wE,UAtJiB,GAsJLa,EAAW1H,SAAStpE,OACrCX,KAAK8wE,UAvJiB,GAuJLa,EAAW1H,SAAStpE,OAEpC4tE,IACFvuE,KAAK8wE,UAAY9wE,KAAK6xE,iBAAiB,EAAG7xE,KAAM0xE,MAK9Cf,EAAAzwE,UAAA4xE,aAAR,SAAqBzH,GACnBrqE,KAAKixE,WAAa5G,GAAQrqE,KAAK4zB,KAAOy2C,EAAKz2C,IAGrC+8C,EAAAzwE,UAAAoxE,0BAAR,WAAA,IAAA5rE,EAAA1F,KACE6I,WAAU,WACSlJ,MAAMwI,KAAKzC,EAAKqsE,aAAanrE,cAAcsB,iBAAiB,mBACpEqR,QAAO,SAAEqwD,GAAkB,OAAAlkE,EAAKorE,WAAalH,EAASngD,kBAI3DknD,EAAAzwE,UAAA2xE,iBAAR,SAAyBG,EAAuBpI,EAAuB8H,GAGrE,GAFAM,GA3K2B,GA6KvBpI,EAASK,UAAYjqE,KAAKiyE,WAAWrI,EAASK,SAAUyH,EAAe,IACzE,IAAK,IAAI18D,EAAQ,EAAGA,EAAQ40D,EAASK,SAAStpE,OAAQqU,IACpDg9D,EAAgBhyE,KAAK6xE,iBAAiBG,EAAepI,EAASK,SAASj1D,GAAQ08D,GAInF,OAAOM,GAGDrB,EAAAzwE,UAAAgyE,YAAR,SAAoBR,EAAyBC,EAAyBpD,QAAA,IAAAA,IAAAA,GAAA,OAE9DqD,KAAoBD,GAAc3xE,KAAK4zB,KAAO+9C,EAAe,KAAK3xE,KAAKiyE,WAAWjyE,KAAKiqE,SAAU0H,EAAe,IAEtH3xE,KAAKqxE,SAAWrxE,KAAKmyE,aAAaR,EAAYC,GAE9C5xE,KAAKixE,cAAcS,GAAe1xE,KAAKqxE,WAAYrxE,KAAKiyE,WAAWjyE,KAAKiqE,SAAUyH,EAAe,IAE5F1xE,KAAKqxE,SAIVrxE,KAAKyxE,mBAAmBC,EAAYC,EAAYC,EAAkBrD,GAHhEvuE,KAAK8wE,UAAY,GAMbH,EAAAzwE,UAAA+xE,WAAR,SAAmBhI,EAA8Br2C,GAAjD,IAAAluB,EAAA1F,KACE,GAAIiqE,EACF,OAAOA,EAASh8C,KAAI,SAAClkB,GACnB,OAAOA,EAAS,KAAM6pB,GAAYluB,EAAKusE,WAAWloE,EAAKkgE,SAAUr2C,MAK/D+8C,EAAAzwE,UAAAiyE,aAAR,SAAqBR,EAAyBC,GAC5C,QAAID,IACM3xE,KAAK4zB,KAAO+9C,EAAe,GAAKA,EAAqB,SAAIC,IAM7DjB,EAAAzwE,UAAAqxE,gBAAR,SAAwBlH,GAEJ,iBAAdrqE,KAAKoN,KAKS,aAAdpN,KAAKoN,MACPpN,KAAKkyE,YAAY7H,EAAKgE,OAAQhE,EAAKiE,QAASjE,EAAKkE,kBALjDvuE,KAAK8xE,aAAazH,EAAKgE,6BA/M5B5pE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,gBACVC,SAAA,s6FAdOwmE,sCA6BNnnE,EAAAA,MAAKC,KAAA,CAAC,gCAGND,EAAAA,MAAKC,KAAA,CAAC,qCAGND,EAAAA,MAAKC,KAAA,CAAC,qCAGND,EAAAA,MAAKC,KAAA,CAAC,wCASND,EAAAA,MAAKC,KAAA,CAAC,kCAGND,EAAAA,MAAKC,KAAA,CAAC,sBAGND,EAAAA,MAAKC,KAAA,CAAC,0BAGND,EAAAA,MAAKC,KAAA,CAAC,mCAGND,EAAAA,MAAKC,KAAA,CAAC,oCAUND,EAAAA,MAAKC,KAAA,CAAC,gCASND,EAAAA,MAAKC,KAAA,CAAC,0BAGND,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,8BAGND,EAAAA,MAAKC,KAAA,CAAC,mCAGND,EAAAA,MAAKC,KAAA,CAAC,6BAYND,EAAAA,MAAKC,KAAA,CAAC,gCAENmF,EAAAA,UAASnF,KAAA,CAAC,eAAgB,CAAEqF,UAAQ,OA6HvCqnE,EAzNA,GCHAyB,GAAA,WAAA,SAAAA,KAkB6B,2BAlB5BvtE,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACA2G,EAAAA,aACA88D,GACAtN,IAEFl2D,aAAc,CACZ4mE,GACA8E,GACAxF,GACAyF,IAEF1rE,QAAS,CACP2mE,GACAV,QAGyBkH,EAlB7B,GCCAC,GAAA,WAAA,SAAAA,KAmDA,OA9CE7yE,OAAAsE,eAAsBuuE,EAAAnyE,UAAA,QAAK,KAO3B,WACE,OAAOF,KAAKgpE,YARd,SAA4BG,GAC1BnpE,KAAKgpE,OAASrpE,MAAMouB,QAAQo7C,GAASA,EAAQ,GAE7CnpE,KAAKypE,uBAAuBzpE,KAAKgpE,QACjChpE,KAAKoqE,cAAcpqE,KAAKgpE,yCAOlBqJ,EAAAnyE,UAAAupE,uBAAR,SAA+BN,GAA/B,IAAAzjE,EAAA1F,KACEmpE,EAAM5vD,QAAO,SAACqwD,GAAY,OAAAlkE,EAAKskE,sBAAqB,MAG9CqI,EAAAnyE,UAAA8pE,sBAAR,SAA8BJ,GAC5BA,EAASh2C,GAAKg2C,EAASh2C,IAAMjjB,EAAAA,KAC7Bi5D,EAASx8D,KAAOpN,KAAKmqE,YAAYP,IAG3ByI,EAAAnyE,UAAAiqE,YAAR,SAAoBP,GAClB,OAAKA,EAAS3/D,KAIV4F,EAAe+5D,EAAS3/D,MACnB,eAGF,eAPE,UAUHooE,EAAAnyE,UAAAoqE,aAAR,SAAqBV,GACnB,IAAKA,EAASvnE,MACZ,MAAM,IAAIwa,MAAM,yDAGlB,IAAK+sD,EAASz4C,KACZ,MAAM,IAAItU,MAAM,yDAIZw1D,EAAAnyE,UAAAkqE,cAAR,SAAsBjB,GAAtB,IAAAzjE,EAAA1F,KACEmpE,EAAM5vD,QAAO,SAAC8wD,GAAQ,OAAA3kE,EAAK4kE,aAAaD,qCA3CzCrmE,EAAAA,MAAKC,KAAA,CAAC,cA8CTouE,EAnDA,GCNAC,GAAA,WAAA,SAAAA,IAGUtyE,KAAAqrE,aAAe,IAAIrnD,EAAAA,QACnBhkB,KAAAorE,cAAgB,IAAIpnD,EAAAA,QAsB9B,OAnBEsuD,EAAApyE,UAAAqrE,4BAAA,WACE,OAAOvrE,KAAKqrE,aAAaG,gBAI3B8G,EAAApyE,UAAAwrE,6BAAA,WACE,OAAO1rE,KAAKorE,cAAcI,gBAI5B8G,EAAApyE,UAAAorE,wBAAA,SAAwBjB,GACtBrqE,KAAKqrE,aAAa5pE,KAAK4oE,IAIzBiI,EAAApyE,UAAAurE,uBAAA,SAAuBpB,GACrBrqE,KAAKorE,cAAc3pE,KAAK4oE,wBAvB3B5/D,EAAAA,aA0BD6nE,EA1BA,GCsEAC,GAAA,SAAApuE,GAaE,SAAAouE,EACEz4D,EACQ04D,EACA3G,EACAx8C,GAJV,IAAA3pB,EAMEvB,EAAAvD,KAAAZ,OAAOA,YAJC0F,EAAA8sE,SAAAA,EACA9sE,EAAAmmE,iBAAAA,EACAnmE,EAAA2pB,OAAAA,EAGR3pB,EAAKqU,UAAYD,EAAe,MAAa,YAgEjD,OAhF2C1V,EAAAA,EAAAA,GAmBzCmuE,EAAAryE,UAAA+G,YAAA,WACEjH,KAAK0sE,iBAAiBxhE,cACtBlL,KAAK2sE,kBAAkBzhE,eAGzBqnE,EAAAryE,UAAAmE,SAAA,WACCrE,KAAK4sE,sBACL5sE,KAAK6sE,oBAGE0F,EAAAryE,UAAA+sE,kBAAR,SAA0BC,EAAiB/D,GAA3C,IAAAzjE,EAAA1F,KACE,GAAImpE,EACF,OAAOA,EAAMl7C,KAAI,SAACo8C,GAChB,GAAIp6D,EAAiBo6D,EAAKpgE,QAAUijE,EAElC,OADAxnE,EAAK0nE,iBAAiB/C,IACf,KAMPkI,EAAAryE,UAAAktE,iBAAR,SAAyB/C,GACvBrqE,KAAKmsE,eAAiB9B,EACtBrqE,KAAKmtE,WAAal9D,EAAiBo6D,EAAKpgE,MACxCjK,KAAK6rE,iBAAiBJ,uBAAuB,CAAE4C,OAAQruE,KAAKmsE,eAAgBoC,kBAAkB,KAGxFgE,EAAAryE,UAAA8sE,qBAAR,SAA6BE,GACtBltE,KAAKmtE,YAAcntE,KAAKmtE,aAAeD,GAC1CltE,KAAKitE,kBAAkBC,EAASltE,KAAKmpE,QAIjCoJ,EAAAryE,UAAAytE,cAAR,SAAsBtD,GAChBA,EAAKz6C,QACPviB,EAAag9D,EAAKz6C,OAAQ5vB,KAAK+Z,UAAWswD,GAG1B,iBAAdA,EAAKj9D,KAEP2C,EAAiBs6D,EAAKpgE,MAEC,iBAAdogE,EAAKj9D,MAEdpN,KAAKotE,iBAAiB/C,IAIlBkI,EAAAryE,UAAA2sE,iBAAR,WAAA,IAAAnnE,EAAA1F,KACGA,KAAK2sE,kBAAoB3sE,KAAKqvB,OAAOu+C,OAAOtiE,UAAS,SAACmnE,GACjDA,aAAwB5E,EAAAA,eAC1BnoE,EAAKsnE,qBAAqBtnE,EAAK8sE,SAASnrD,WAKtCkrD,EAAAryE,UAAA0sE,oBAAR,WAAA,IAAAlnE,EAAA1F,KACEA,KAAK0sE,iBACH1sE,KAAK6rE,iBAAiBN,8BAA8BjgE,UAAS,SAAE++D,GAAmC,OAAA3kE,EAAKioE,cAActD,0BAjF1H5lE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,iBACVC,SAAA,8lBAnFqCqV,EAAAA,wBAC9B04D,EAAAA,gBAUAJ,UATevhD,EAAAA,UAmKxBwhD,EApFA,CAI2CF,ICvE3CM,GAAA,WAUE,SAAAA,EAAoB9G,GAAA7rE,KAAA6rE,iBAAAA,EAoCtB,OAlCE8G,EAAAzyE,UAAA+G,YAAA,WACEjH,KAAK4yE,kBAAkB1nE,eAGzBynE,EAAAzyE,UAAAmE,SAAA,WAEErE,KAAK6yE,kCAGPF,EAAAzyE,UAAAytE,cAAA,SAAcznE,GACNA,EAAMisC,SAAWjsC,EAAMksC,UAC3BlsC,EAAMguB,iBAGNl0B,KAAK6rE,iBAAiBP,wBAAwBtrE,KAAK8yE,oBAI/CH,EAAAzyE,UAAA4xE,aAAR,SAAqBzH,GACnBrqE,KAAK8yE,iBAAiB7B,WAAajxE,KAAK8yE,iBAAiBl/C,KAAOy2C,EAAKz2C,IAG/D++C,EAAAzyE,UAAAqxE,gBAAR,SAAwBlH,GACa,iBAA/BrqE,KAAK8yE,iBAAiB1lE,MACxBpN,KAAK8xE,aAAazH,EAAKgE,SAInBsE,EAAAzyE,UAAA2yE,+BAAR,WAAA,IAAAntE,EAAA1F,KACCA,KAAK4yE,kBAAoB5yE,KAAK6rE,iBAAiBH,+BAA+BpgE,UAAS,SAAC++D,GACrF3kE,EAAK6rE,gBAAgBlH,0BA1C1B5lE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,sBACVC,SAAA,o9BAXO2tE,gDAiBNtuE,EAAAA,MAAKC,KAAA,CAAC,2BAsCT0uE,EA9CA,GCCAI,GAAA,WAAA,SAAAA,KAkBkC,2BAlBjCluE,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACA2G,EAAAA,aACAwvD,GACA1iD,IAEFxT,aAAc,CACZutE,GACAI,IAEF1tE,QAAS,CACPstE,IAEFhnE,UAAW,CACT+mE,QAG8BS,EAlBlC,GCfAC,GAAA,WAwBE,SAAAA,EAAY5jD,EAA4CC,GAAArvB,KAAAqvB,OAAAA,EACtDrvB,KAAK+Z,UAAYqV,EAAwB,MAAa,UAuB1D,OApBE4jD,EAAA9yE,UAAAsvB,cAAA,WACE,OAAIxvB,KAAK4vB,OACAviB,EAAarN,KAAK4vB,OAAQ5vB,KAAK+Z,UAAW/Z,KAAKwN,OAASxN,MAG7DA,KAAKiK,KACAjK,KAAK6vB,QAAQ7vB,KAAKiK,WAD3B,GAKM+oE,EAAA9yE,UAAA2vB,QAAR,SAAgBhmB,GACd,OAAIgG,EAAehG,GACVkG,EAAiBlG,GAGtBA,EACK7J,KAAKqvB,OAAOuB,SAAS,CAAC/mB,SAD/B,uBAtCHpF,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,oBACVC,SAAA,6OAPyBqV,EAAAA,wBAClB+W,EAAAA,0CAaN/sB,EAAAA,MAAKC,KAAA,CAAC,0BAEND,EAAAA,MAAKC,KAAA,CAAC,yBAEND,EAAAA,MAAKC,KAAA,CAAC,yBAEND,EAAAA,MAAKC,KAAA,CAAC,2BAEND,EAAAA,MAAKC,KAAA,CAAC,qBA0BT+uE,EAhDA,GCAAC,GAAA,WAIA,SAAAA,KAcA,OANEA,EAAA/yE,UAAAgzE,kBAAA,WACE,GAAIlzE,KAAKmzE,aAAenzE,KAAKmzE,YAAYxyE,OAAS,EAChD,OAAOX,KAAKmzE,YAAYnzE,KAAKmzE,YAAYxyE,OAAS,GAAGwwB,0BAV1D1sB,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,0BACVC,SAAA,yTAICX,EAAAA,MAAKC,KAAA,CAAC,qBAQTgvE,EAlBA,iBCIA,SAAAG,KAgBA,OARE5zE,OAAAsE,eAA6BsvE,EAAAlzE,UAAA,cAAW,KAIxC,WACE,OAAOF,KAAKqzE,kBALd,SAAyCj5C,GACvCp6B,KAAKqzE,aAAej5C,EAAQhyB,IAAG,SAACwnB,GAAU,OAAAxvB,EAAA,GAAMwvB,EAAM,CAAEixB,WAAW,EAAMh3C,IAAK+lB,EAAO3lB,8DATxFxF,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,qBACVC,SAAA,ocAMCX,EAAAA,MAAKC,KAAA,CAAC,qBAQTmvE,KCpBAE,GAAA,WASA,SAAAA,KAesC,2BAfrCzuE,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACAisB,GACAxY,IAEFxT,aAAc,CACZguE,GACAC,GACAG,IAEFnuE,QAAS,CACPmuE,QAGkCE,EAxBtC,GCQaC,GAA2B,CACtCx3D,GAAE,CACAy3D,YAAa,gBAEfx3D,GAAE,CACAw3D,YAAa,gBAEf13D,GAAE,CACA03D,YAAa,iBAUjBC,GAAA,WAAA,SAAAA,IAEUzzE,KAAAqzE,aAA2C,GAC3CrzE,KAAAoF,OAA+B,GAE/BpF,KAAA0zE,SAAmB,EA2H7B,OAlHEl0E,OAAAsE,eAA6B2vE,EAAAvzE,UAAA,cAAW,KAIxC,WACE,OAAOF,KAAKqzE,kBALd,SAAyC9xE,GACvCvB,KAAKqzE,aAAe9xE,GAAS,oCAc/B/B,OAAAsE,eAAsB2vE,EAAAvzE,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAKoF,YALd,SAA4B7D,GAC1BvB,KAAKoF,OAAS7D,GAAS,oCAgCzB/B,OAAAsE,eAAyB2vE,EAAAvzE,UAAA,WAAQ,KAWjC,WACE,OAAOF,KAAKi6B,WAAas5C,GAAyB1nE,UAZpD,SAAkCtK,GAC5BA,aAAiB/B,UAAY+B,aAAiB5B,OAChDK,KAAKi6B,UAAS75B,EAAA,GACTmzE,GAAyB3nE,GACzB2nE,GAAyB1nE,KACzBtK,GAGLvB,KAAKi6B,UAAYs5C,GAAyB1nE,sCAkD9CrM,OAAAsE,eAAuB2vE,EAAAvzE,UAAA,SAAM,KAI7B,WACE,OAAOF,KAAK0zE,aALd,SAA8BnyE,GAC5BvB,KAAK0zE,QAAUjnE,EAAiBlL,yEA3GjCyC,EAAAA,MAAKC,KAAA,CAAC,iCAeND,EAAAA,MAAKC,KAAA,CAAC,6BAiCND,EAAAA,MAAKC,KAAA,CAAC,4BAsBND,EAAAA,MAAKC,KAAA,CAAC,wBAyBND,EAAAA,MAAKC,KAAA,CAAC,0BAWND,EAAAA,MAAKC,KAAA,CAAC,eAQTwvE,EAhIA,GC1BAE,GAAA,WAMA,SAAAA,IAcqB3zE,KAAA0R,MAAqC,IAAIC,EAAAA,aAkB9D,OAhBEnS,OAAAsE,eAAI6vE,EAAAzzE,UAAA,OAAI,KAAR,WACE,OAAI2P,EAAe7P,KAAKiK,MACf,eAGF,gDAGT0pE,EAAAzzE,UAAA0zE,UAAA,WAEM5zE,KAAK4vB,QACP5vB,KAAK4vB,OAAO,CAAEvtB,MAAOrC,KAAKqC,MAAO4H,KAAMjK,KAAKiK,OAG9CjK,KAAK0R,MAAMK,4BA9BdtN,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,kBACVC,SAAA,wdAICX,EAAAA,MAAKC,KAAA,CAAC,+BAEND,EAAAA,MAAKC,KAAA,CAAC,8BAEND,EAAAA,MAAKC,KAAA,CAAC,yBAEND,EAAAA,MAAKC,KAAA,CAAC,yBAEN2N,EAAAA,OAAM3N,KAAA,CAAC,cAkBV0vE,EAtCA,GCAAE,GAAA,WAwBE,SAAAA,EAAoBxkD,GAAArvB,KAAAqvB,OAAAA,EAiCtB,OA/BEwkD,EAAA3zE,UAAA+G,YAAA,WACEjH,KAAK2sE,kBAAkBzhE,eAGzB2oE,EAAA3zE,UAAAmE,SAAA,WACErE,KAAK6sE,oBAGPgH,EAAA3zE,UAAAiyD,WAAA,SAAWpoD,GACT/J,KAAKypD,aAAe1/C,GAGd8pE,EAAA3zE,UAAA4zE,qBAAR,SAA6BhH,GAC3B9sE,KAAKypD,aAAezpD,KAAKqF,MAAMkB,KAAI,SAACwD,GAAQ,OAAAA,EAAKE,OAAS6iE,KAGpD+G,EAAA3zE,UAAA6zE,6BAAR,eACQtF,EAAkBzuE,KAAKqvB,OAAOq/C,SAAS1uE,KAAKqvB,OAAOxlB,KAAK8kE,KAAKC,SAAkB,QAErF,OAAOH,EAAkB,IAAIA,EAAgBI,SAASzmE,IAAG,SAAC0mE,GAAM,OAAAA,EAAGznD,OAAMS,KAAK,KAAS,IAGjF+rD,EAAA3zE,UAAA2sE,iBAAR,WAAA,IAAAnnE,EAAA1F,KACEA,KAAK2sE,kBAAoB3sE,KAAKqvB,OAAOu+C,OAAOtiE,UAAS,SAACoB,GACpD,GAAIA,aAAemhE,EAAAA,eAAiBnhE,aAAeohE,EAAAA,iBAAkB,KAC7DhB,EAAYpnE,EAAKquE,+BACvBruE,EAAKouE,qBAAqBhH,2BA5CjCroE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,mBACVC,SAAA,ggBATwCosB,EAAAA,wDAiBvC3nB,EAAAA,UAASnF,KAAA,CAAC,uBAAwB,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,4BAE9Do4B,EAAAA,aAAYz9B,KAAA,CAAC0vE,GAAwB,CAAEtqE,KAAMH,EAAAA,4BAE7ClF,EAAAA,MAAKC,KAAA,CAAC,cAmCT4vE,EAzDA,GCSAG,GAAA,SAAA7vE,GAqBE,SAAA6vE,EAAoBvuE,EAA6BwuE,EAAmCrqD,GAApF,IAAAlkB,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAD,SAAAA,EAA6BC,EAAAuuE,QAAAA,EAAmCvuE,EAAAkkB,eAAAA,EAdpFlkB,EAAAwuE,qBAA+B,EAKvBxuE,EAAAyuE,OAAiB,EAWvBzuE,EAAKsjB,qBAAuBtjB,EAAKD,SAASsD,OAAOgG,OAAQ,SAAUrJ,EAAK0uE,uBAAuBj2D,KAAKzY,MAmJxG,OAtKwCtB,EAAAA,EAAAA,GAsBtC4vE,EAAA9zE,UAAAsG,gBAAA,WACExG,KAAKo0E,yBACLp0E,KAAKq0E,qBAGPL,EAAA9zE,UAAA+G,YAAA,WACMjH,KAAKs0E,YACPt0E,KAAKs0E,WAAWC,kBAIpBP,EAAA9zE,UAAAs0E,cAAA,SAAcC,GAEI,SAAhBA,EAAyBz0E,KAAK00E,eAAiB10E,KAAK20E,gBAEpD30E,KAAK+nE,QAAQ/nE,KAAKm0E,SAGZH,EAAA9zE,UAAA00E,iBAAR,eACQC,EAAaxrD,SAASrhB,cAAc,uBACpC08C,EAAOr7B,SAASrhB,cAAc,aAC9B8sE,EAAazrD,SAASrhB,cAAc,oBAC1C6sE,EAAWhuD,aAAa,QAAS,iBAC7B69B,GACFA,EAAK79B,aAAa,QAAS,+BAEzBiuD,GACFA,EAAWjuD,aAAa,QAAS,iCAEnC7mB,KAAKs0E,WAAWS,YAAW,SAACC,GACtBA,EAAQC,SACVJ,EAAWhuD,aAAa,QAAS,kBAC7B69B,GACFA,EAAK79B,aAAa,QAAS,iDAG7BguD,EAAWhuD,aAAa,QAAS,iBAC7B69B,GACFA,EAAK79B,aAAa,QAAS,mCAM3BmtD,EAAA9zE,UAAAg1E,eAAR,WAAA,IAAAxvE,EAAA1F,KACQm1E,EAAgBn1E,KAAKqqE,KAAKlB,MAChCnpE,KAAKs0E,WAAWS,YAAW,SAACC,GAC1B,GAAIA,EAAQC,QAAS,KACbhL,EAAW,CAAC,CAAC5nE,MAAOqD,EAAKsnB,SAASwmD,YAAavJ,SAAUvkE,EAAKL,QACpEK,EAAK2kE,KAAKlB,MAAK1lE,EAAOwmE,EAAavkE,EAAK2kE,KAAKlB,YAE7CzjE,EAAK2kE,KAAKlB,MAAQgM,KAKhBnB,EAAA9zE,UAAA6nE,QAAR,SAAgBoM,OACRiB,EAA8Bp1E,KAAKq1E,yBAAyBlB,GAElEn0E,KAAKs1E,OAASF,EAAUj1E,OAAOH,KAAKu1E,YAAYC,qBAAqB5uE,eACrE5G,KAAKs1E,OAAOG,QAGNzB,EAAA9zE,UAAAm1E,yBAAR,SAAiClB,GAC/B,OAAOn0E,KAAKi0E,QAAQyB,MAAM,CACxB3N,EAAAA,QACE,aACA4N,EAAAA,UAAU,CAACrgE,EAAAA,MAAM,CAAE4f,UAAW,cAAci/C,EAAM,cAKhDH,EAAA9zE,UAAAk0E,uBAAR,WACEp0E,KAAK41E,iBAAmB51E,KAAK61E,mBAAmBjvE,cAAcC,YAE9D7G,KAAK81E,oBACH91E,KAAKu1E,YAAYQ,eAAeztE,OAAM,SAAE0tE,EAAelS,GAAiB,OAAAkS,EAAWlS,EAAQl9D,cAAcC,aAAa,GAExH7G,KAAKk0E,oBAAsBl0E,KAAK41E,iBAAmB51E,KAAK81E,oBAAsB,GAE9E91E,KAAK4pB,eAAekB,gBAEA,IAAhB9qB,KAAKm0E,SACPn0E,KAAKm0E,OAAS,EACdn0E,KAAK+nE,QAAQ/nE,KAAKm0E,UAIdH,EAAA9zE,UAAAm0E,kBAAR,WACehrD,SAASrhB,cAAc,QAC/B6e,aAAa,QAAS,6BAC3B7mB,KAAKs0E,WAAavlE,OAAOknE,WAAW,sBAEnCj2E,KAAKqqE,KAAiCrqE,KAAKk1E,iBAA/Bl1E,KAAK40E,oBAGZZ,EAAA9zE,UAAAy0E,cAAR,eAEQuB,EAAmBl2E,KAAK81E,oBAAsB91E,KAAK61E,mBAAmBjvE,cAAcC,YACpFsvE,GAAiC,EAAfn2E,KAAKm0E,OAAen0E,KAAK61E,mBAAmBjvE,cAAcC,YAE9EuvE,EAAmB,EAEvBp2E,KAAKu1E,YAAYQ,eAAe9nD,KAAI,SAACooD,OAC7BhlC,EAAgBglC,EAAWzvE,cAAcC,YAAcwvE,EAAWzvE,cAAc0vE,WAEtF,GAAIH,EAAiB9kC,EAEnB,OADA+kC,EAAmBC,EAAWzvE,cAAc0vE,YACrC,IAKXt2E,KAAKm0E,QAA8B,EAApBiC,GAEK,EAAfp2E,KAAKm0E,QAAgB+B,IACxBl2E,KAAKm0E,QAA6B,EAApB+B,EACdl2E,KAAKu2E,cAAe,IAIhBvC,EAAA9zE,UAAAw0E,aAAR,WAAA,IAGM0B,EAHN1wE,EAAA1F,KACEA,KAAKu2E,cAAe,EAIpBv2E,KAAKu1E,YAAYQ,eAAe9nD,KAAI,SAACooD,OAE7BG,EAAmBH,EAAWzvE,cAAc0vE,WAElD,GAAIE,IAAoC,EAAf9wE,EAAKyuE,OAE5B,OADAiC,EAAmBI,GAAoB9wE,EAAKmwE,mBAAmBjvE,cAAcC,YAAcwvE,EAAWzvE,cAAcC,cAC7G,IAKX7G,KAAKm0E,QAA8B,EAApBiC,EAEXp2E,KAAKm0E,OAAS,IAChBn0E,KAAKm0E,OAAS,wBAtKnB1vE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,aACVC,SAAA,2wBAX2EwE,EAAAA,iBAC3DstE,EAAAA,wBADMprD,EAAAA,iEA0BrBjiB,EAAAA,UAASnF,KAAA,CAAC4vE,GAAyB,CAAExqE,KAAMH,EAAAA,WAAYI,UAAQ,yBAE/DF,EAAAA,UAASnF,KAAA,CAAC4vE,GAAyB,CAAEvqE,UAAQ,OAuJhD0qE,EA1KA,CAIwCP,ICbxCiD,GAAA,WAOA,SAAAA,KAaoC,2BAbnC7xE,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACA2G,EAAAA,cAEF1G,aAAc,CACZ2uE,GACAE,IAEF5uE,QAAS,CACP4uE,QAGgC6C,EApBpC,GCAAC,GAAA,WAEA,SAAAA,IAUqB32E,KAAA0R,MAA2B,IAAIC,EAAAA,aAEpD,2BAZClN,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,6BACVC,SAAA,koBAICX,EAAAA,MAAKC,KAAA,CAAC,wCAEND,EAAAA,MAAKC,KAAA,CAAC,kCAEN2N,EAAAA,OAAM3N,KAAA,CAAC,cAEV0yE,EAdA,GCAAC,GAAA,WAEA,SAAAA,KAQA,2BARCnyE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,kBACVC,SAAA,sIAICX,EAAAA,MAAKC,KAAA,CAAC,aAET2yE,EAVA,GCAAC,GAAA,WAUA,SAAAA,KAgB+B,2BAhB9BhyE,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACAuuE,GACAoD,GACAtE,IAEFptE,aAAc,CACZgvE,GACA2C,GACAC,IAEF3xE,QAAS,CACP+uE,QAG2B6C,EA1B/B,iBCoBoC,OAApC,gBCXAC,GAAA,SAAA3yE,GAAA,SAAA2yE,mDAI6D,OAAvB1yE,EAAAA,EAAAA,uBAJrCK,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,WACVC,SAAA,wEAE2DmyE,EAJ7D,CAIsCC,kBCFtC,OAJA,gBCEAC,GAAA,SAAA7yE,GAUE,SAAA6yE,EAAmBvxE,GAAnB,IAAAC,EACEvB,EAAAvD,KAAAZ,OAAOA,YADU0F,EAAAD,SAAAA,EAJnBC,EAAAuxE,eAAyB,EACzBvxE,EAAAgQ,OAAiB,MACjBhQ,EAAAwxE,UAAoB,OAIlBxxE,EAAKirB,wBAsCT,OA9C6CvsB,EAAAA,EAAAA,GAW3C4yE,EAAA92E,UAAAsG,gBAAA,WACExG,KAAKm3E,yBAGPH,EAAA92E,UAAA+G,YAAA,WACEjH,KAAKuvB,mBAGPynD,EAAA92E,UAAAi3E,sBAAA,WAAA,IAAAzxE,EAAA1F,KACE6I,WAAU,eACFuuE,EAAiC/tD,SAASrhB,cAAc,uBAE9DtC,EAAK2xE,iBAAiBD,GACtB1xE,EAAKuxE,eAAiB,KAI1BD,EAAA92E,UAAAm3E,iBAAA,SAAiBC,OAGTC,EAFaluD,SAASrnB,KAAK0uB,cACR4mD,EAAgBA,EAAcE,UAAYF,EAAc7tD,aAAe,GAGhGzpB,KAAK0V,OAAY6hE,EAAS,MAGpBP,EAAA92E,UAAAywB,oBAAR,WAAA,IAAAjrB,EAAA1F,KACEA,KAAKgJ,eAAiBhJ,KAAKyF,SAASsD,OAAO,SAAU,SAAQ,WAC3DrD,EAAKyxE,2BAIDH,EAAA92E,UAAAqvB,gBAAR,WACEvvB,KAAKgJ,sCA/CRvE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,mBACVC,SAAA,sNAX4CwE,EAAAA,aA2D9C6tE,EAlDA,CAI6CS,ICF7CC,GAAA,WAAA,SAAAA,IAEU13E,KAAAgvB,SAAkC,GAqC5C,OAzBExvB,OAAAsE,eAAwB4zE,EAAAx3E,UAAA,UAAO,KAK/B,WACE,OAAOF,KAAKgvB,cANd,SAAgCoL,GAC9Bp6B,KAAKgvB,SAAWrvB,MAAMouB,QAAQqM,GAAWA,EAAU,GACnDp6B,KAAK23E,sDAWPn4E,OAAAsE,eAAsB4zE,EAAAx3E,UAAA,QAAK,KAK3B,WACE,OAAOF,KAAK4mD,YANd,SAA4BF,GAC1B1mD,KAAK4mD,OAASF,EACd1mD,KAAKopB,eAAe+tD,iGAxBrB/tE,EAAAA,UAASnF,KAAA,CAAC+yE,GAAyB,CAAE1tE,UAAQ,qBAS7CtF,EAAAA,MAAKC,KAAA,CAAC,iCAUND,EAAAA,MAAKC,KAAA,CAAC,+BAGND,EAAAA,MAAKC,KAAA,CAAC,cAYTyzE,EAvCA,GCkBAE,GAAA,SAAAzzE,GAaE,SAAAyzE,EACE99D,EACQrU,EACA4pB,GAHV,IAAA3pB,EAKEvB,EAAAvD,KAAAZ,OAAOA,YAHC0F,EAAAD,SAAAA,EACAC,EAAA2pB,OAAAA,EAVV3pB,EAAAmyE,oBAA8B,EAItBnyE,EAAAoyE,eAAyB,IAS/BpyE,EAAKqU,UAAYD,EAAe,MAAa,YA4DjD,OA3E6C1V,EAAAA,EAAAA,GAkBpCwzE,EAAA13E,UAAA+mE,mBAAP,WAAA,IAAAvhE,EAAA1F,KACEA,KAAK+3E,cACL/3E,KAAK23E,qBAEL33E,KAAKyF,SAASsD,OAAO,SAAU,SAAQ,SAAG7C,GACxCR,EAAKqkB,SAAS7jB,MAIlB0xE,EAAA13E,UAAAw6B,YAAA,SAAY2lC,GACVrgE,KAAK23E,sBAGPC,EAAA13E,UAAA83E,iBAAA,SAAiBpoD,GACf,OAAO1iB,EAAS0iB,EAAO4B,SAAU,YAAc5B,EAAO4B,SAAS5B,GAAUA,EAAO4B,UAGlFomD,EAAA13E,UAAA+3E,WAAA,SAAWluE,GACLA,EAAKF,IAEP7J,KAAKqvB,OAAOuB,SAAS,CAAC7mB,EAAKF,MAClBE,EAAK6lB,QACdviB,EAAatD,EAAK6lB,OAAQ5vB,KAAK+Z,YAInC69D,EAAA13E,UAAAg4E,cAAA,WACE,SAAUl4E,KAAK0mD,OAAU1mD,KAAKo6B,SAAWp6B,KAAKo6B,QAAQz5B,QAAYX,KAAKqI,YAAcrI,KAAKqI,WAAWhD,MAAM1E,SAGrGi3E,EAAA13E,UAAA6pB,SAAR,SAAiB7jB,GACAA,EAAY,OAAYqO,WAE3BvU,KAAK83E,gBACf93E,KAAK8O,UAAW,EAChB9O,KAAK63E,oBAAsB,EAC3B73E,KAAK23E,uBAEL33E,KAAK8O,UAAW,EAChB9O,KAAK63E,oBAAsB,EAC3B73E,KAAK23E,uBAIDC,EAAA13E,UAAA63E,YAAR,WACMhpE,OAAOwF,WAAavU,KAAK83E,iBAC3B93E,KAAK8O,UAAW,EAChB9O,KAAK63E,oBAAsB,IAI/BD,EAAA13E,UAAAy3E,mBAAA,WACM33E,KAAKo6B,QAAQz5B,OAASX,KAAK63E,sBAC7B73E,KAAKm4E,gBAAkBn4E,KAAKo6B,QAAQ5xB,MAAMxI,KAAK63E,oBAAsB,yBA3E1EpzE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,mBACVC,SAAA,kyCA/BwEqV,EAAAA,wBAAzB7Q,EAAAA,iBACxC4nB,EAAAA,UA2GT6mD,EA/EA,CAI6CF,ICzBhCU,GAA+B,CAC1Cr8D,GAAE,CACAs8D,KAAM,OACNlW,KAAM,OACNjhC,OAAQ,UAEVllB,GAAE,CACAq8D,KAAM,SACNlW,KAAM,SACNjhC,OAAQ,YAEVplB,GAAE,CACAu8D,KAAM,SACNlW,KAAM,SACNjhC,OAAQ,YAgBZo3C,GAAA,WAAA,SAAAA,KAsEA,OAzBE94E,OAAAsE,eAAyBw0E,EAAAp4E,UAAA,WAAQ,KAWjC,WACE,OAAOF,KAAKi6B,WAAam+C,GAA6BvsE,UAZxD,SAAkCtK,GAC5BA,aAAiB/B,UAAY+B,aAAiB5B,OAChDK,KAAKi6B,UAAS75B,EAAA,GACTg4E,GAA6BxsE,GAC7BwsE,GAA6BvsE,KAC7BtK,GAGLvB,KAAKi6B,UAAYm+C,GAA6BvsE,sCAQlDrM,OAAAsE,eAAsBw0E,EAAAp4E,UAAA,QAAK,KAK3B,WACE,OAAOF,KAAK4mD,YANd,SAA4BF,GAC1B1mD,KAAK4mD,OAASF,EACd1mD,KAAKopB,eAAe+tD,iGA1DrB/tE,EAAAA,UAASnF,KAAA,CAAC+yE,GAAyB,CAAE1tE,UAAQ,wBAG7CtF,EAAAA,MAAKC,KAAA,CAAC,kCAqCND,EAAAA,MAAKC,KAAA,CAAC,6BAgBND,EAAAA,MAAKC,KAAA,CAAC,cASTq0E,EAtEA,GC/BA,SAAgBC,GAAU3oD,EAAgB4oD,GACxC,OAAOA,GAAiBA,EAAc5oD,GAUxC,SAAgBqoD,GAAWroD,EAAgB4oD,GACrCD,GAAU3oD,EAAQ4oD,IACpBA,EAAc5oD,KCKlB,IAAA6oD,GAAA,SAAAt0E,GAUE,SAAAs0E,EAAY3+D,GAAZ,IAAApU,EACEvB,EAAAvD,KAAAZ,OAAOA,YALT0F,EAAAgzE,aAAeT,GACfvyE,EAAAizE,YAAcJ,GAKZ7yE,EAAK8yE,cAAgB1+D,EAAe,MAAa,YAiCrD,OAzC4C1V,EAAAA,EAAAA,GAW1Cq0E,EAAAv4E,UAAA04E,aAAA,WACE,OAAO54E,KAAK24E,YAAY,OAAQ34E,KAAKw4E,gBACnCx4E,KAAK24E,YAAY,OAAQ34E,KAAKw4E,gBAC9Bx4E,KAAK24E,YAAY,SAAU34E,KAAKw4E,gBAGpCC,EAAAv4E,UAAA24E,UAAA,SAAUxsD,GACR,MAAiB,SAAbA,EACKrsB,KAAK24E,YAAY,OAAQ34E,KAAKw4E,eAAiB,GAAK,kBACrC,SAAbnsD,EACFrsB,KAAK24E,YAAY,OAAQ34E,KAAKw4E,eAAiB,UAAY,UAE3D,IAIXC,EAAAv4E,UAAA44E,kBAAA,SAAkBzsD,GAChB,MAAiB,SAAbA,EACKrsB,KAAK24E,YAAY,OAAQ34E,KAAKw4E,gBAAkBx4E,KAAK24E,YAAY,SAAU34E,KAAKw4E,eAAiB,GAAK,sBACvF,SAAbnsD,EACFrsB,KAAK24E,YAAY,OAAQ34E,KAAKw4E,gBAAkBx4E,KAAK24E,YAAY,SAAU34E,KAAKw4E,eAAiB,UAAY,UAE7G,IAIXC,EAAAv4E,UAAAg4E,cAAA,WACE,SAAUl4E,KAAK0mD,OAAS1mD,KAAK44E,gBAAmB54E,KAAKqI,YAAcrI,KAAKqI,WAAWhD,MAAM1E,6BA1C5F8D,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,kBACVC,SAAA,mtCA3BkBqV,EAAAA,oBAsEpBy+D,EA7CA,CAI4CH,ICrB/BS,GAA6B,CACxCh9D,GAAE,CACAs4C,OAAQ,SACR2kB,KAAM,OACNC,QAAS,gBAEXj9D,GAAE,CACAq4C,OAAQ,WACR2kB,KAAM,UACNC,QAAS,mBAEXn9D,GAAE,CACAu4C,OAAQ,WACR2kB,KAAM,SACNC,QAAS,kBAqBbC,GAAA,WAAA,SAAAA,KAyEA,OAzBE15E,OAAAsE,eAAyBo1E,EAAAh5E,UAAA,WAAQ,KAWjC,WACE,OAAOF,KAAKi6B,WAAa8+C,GAA2BltE,UAZtD,SAAkCtK,GAC5BA,aAAiB/B,UAAY+B,aAAiB5B,OAChDK,KAAKi6B,UAAS75B,EAAA,GACT24E,GAA2BntE,GAC3BmtE,GAA2BltE,KAC3BtK,GAGLvB,KAAKi6B,UAAY8+C,GAA2BltE,sCAQhDrM,OAAAsE,eAAsBo1E,EAAAh5E,UAAA,QAAK,KAK3B,WACE,OAAOF,KAAK4mD,YANd,SAA4BF,GAC1B1mD,KAAK4mD,OAASF,EACd1mD,KAAKopB,eAAe+tD,iGA7DrB/tE,EAAAA,UAASnF,KAAA,CAAC+yE,GAAyB,CAAE1tE,UAAQ,wBAG7CtF,EAAAA,MAAKC,KAAA,CAAC,uCAGND,EAAAA,MAAKC,KAAA,CAAC,sCAqCND,EAAAA,MAAKC,KAAA,CAAC,6BAgBND,EAAAA,MAAKC,KAAA,CAAC,cASTi1E,EAzEA,GClBAC,GAAA,SAAAh1E,GAUE,SAAAg1E,EAAYr/D,GAAZ,IAAApU,EACEvB,EAAAvD,KAAAZ,OAAOA,YANT0F,EAAA6yE,UAAsBA,GACtB7yE,EAAAuyE,WAAuBA,GAMrBvyE,EAAK8yE,cAAgB1+D,EAAe,MAAa,YA4CrD,OApD0C1V,EAAAA,EAAAA,GAWxC+0E,EAAAj5E,UAAAk5E,QAAA,SAAQjoD,GACN,MAAa,WAATA,EACKnxB,KAAKq5E,gBAAgB,UAAY,iBAAmB,GAGhD,YAATloD,GACKnxB,KAAKq5E,gBAAgB,WAAa,cAGpC,IAGTF,EAAAj5E,UAAAo5E,QAAA,SAAQlsE,OACAmsE,EAAiC,WAATnsE,GAAqBpN,KAAKq5E,gBAAgB,UAClEG,EAAkC,YAATpsE,GAAsBpN,KAAKq5E,gBAAgB,WAE1E,OAAOE,GAAyBC,EAAyB,UAAY,WAGvEL,EAAAj5E,UAAA04E,aAAA,WACE,OAAOL,GAAU,SAAUv4E,KAAKw4E,gBAAkBD,GAAU,UAAWv4E,KAAKw4E,gBAAkBD,GAAU,OAAQv4E,KAAKw4E,gBAGvHW,EAAAj5E,UAAAg4E,cAAA,WACE,SAAUl4E,KAAK0mD,OAAS1mD,KAAK44E,gBAAmB54E,KAAKqI,YAAcrI,KAAKqI,WAAWhD,MAAM1E,SAGnFw4E,EAAAj5E,UAAAm5E,gBAAR,SAAwBzpD,OAChB6pD,GAAiBlB,GAAU,OAAQv4E,KAAKw4E,eAE9C,MAAe,YAAX5oD,EACK6pD,EAGM,WAAX7pD,KACM2oD,GAAU,UAAWv4E,KAAKw4E,gBAAkBiB,wBAlDzDh1E,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,gBACVC,SAAA,uyCA3BkBqV,EAAAA,oBAiFpBm/D,EAxDA,CAI0CD,ICjB1CQ,GAAA,WAAA,SAAAA,KAgBA,OAVEl6E,OAAAsE,eAA2B41E,EAAAx5E,UAAA,aAAU,KAGrC,WACE,OAAOF,KAAK25E,iBAJd,SAAsCp4E,GACpCvB,KAAK25E,YAAcp4E,uEADpByC,EAAAA,MAAKC,KAAA,CAAC,+BAQND,EAAAA,MAAKC,KAAA,CAAC,cAETy1E,EAhBA,GCJAE,GAAA,SAAAz1E,GAAA,SAAAy1E,mDAIyE,OAA7Bx1E,EAAAA,EAAAA,uBAJ3CK,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,kBACVC,SAAA,qgBAEuEi1E,EAJzE,CAI4CF,ICF/BG,GAA6B,CACxC99D,GAAE,CACA+9D,aAAc,iBAEhB99D,GAAE,CACA89D,aAAc,kBAEhBh+D,GAAE,CACAg+D,aAAc,iBAiBlBC,GAAA,SAAA51E,GAAA,SAAA41E,mDA0FA,OA1FuD31E,EAAAA,EAAAA,GAqBrD5E,OAAAsE,eAAiCi2E,EAAA75E,UAAA,kBAAe,KAQhD,WACE,OAAOF,KAAKg6E,sBATd,SAAiDz4E,GAC1CA,IACHA,EAAK,IAGPvB,KAAKg6E,iBAAmBz4E,mCA+C1B/B,OAAAsE,eAAyBi2E,EAAA75E,UAAA,WAAQ,KAWjC,WACE,OAAOF,KAAKi6B,WAAa4/C,GAA2BhuE,UAZtD,SAAkCtK,GAC5BA,aAAiB/B,UAAY+B,aAAiB5B,OAChDK,KAAKi6B,UAAS75B,EAAA,GACTy5E,GAA2BjuE,GAC3BiuE,GAA2BhuE,KAC3BtK,GAGLvB,KAAKi6B,UAAY4/C,GAA2BhuE,0EArE/C7H,EAAAA,MAAKC,KAAA,CAAC,yCASND,EAAAA,MAAKC,KAAA,CAAC,sCAiBND,EAAAA,MAAKC,KAAA,CAAC,8BAmCND,EAAAA,MAAKC,KAAA,CAAC,iBAiBT81E,EA1FA,CAAuDrC,ICHvDuC,GAAA,SAAA91E,GAmBE,SAAA81E,EACEngE,EACOrU,EACC4pB,GAHV,IAAA3pB,EAKEvB,EAAAvD,KAAAZ,OAAOA,YAHA0F,EAAAD,SAAAA,EACCC,EAAA2pB,OAAAA,EAbV3pB,EAAAmyE,oBAA8B,EAEtBnyE,EAAAw0E,eAAgB,EAChBx0E,EAAAoyE,eAAyB,IAGjCpyE,EAAA2H,aAAeA,EAUb3H,EAAKqU,UAAYD,EAAe,MAAa,UAC7CpU,EAAKirB,wBAqHT,OA3I0CvsB,EAAAA,EAAAA,GAyBxC61E,EAAA/5E,UAAAmE,SAAA,WACErE,KAAKm6E,eAAiBn6E,KAAKo6E,qBAG7BH,EAAA/5E,UAAA+mE,mBAAA,WACEjnE,KAAK+3E,cACL/3E,KAAK23E,sBAGPsC,EAAA/5E,UAAAw6B,YAAA,SAAY2lC,GACVrgE,KAAK23E,sBAGPsC,EAAA/5E,UAAA+G,YAAA,WACEjH,KAAKuvB,mBAGP0qD,EAAA/5E,UAAA83E,iBAAA,SAAiBpoD,GACf,OAAO1iB,EAAS0iB,EAAO4B,SAAU,YAAc5B,EAAO4B,SAAS5B,GAAUA,EAAO4B,UAGlFyoD,EAAA/5E,UAAA+3E,WAAA,SAAWluE,GACLA,EAAKF,IACP7J,KAAKqvB,OAAOuB,SAAS,CAAC7mB,EAAKF,MAClBE,EAAK6lB,QACdviB,EAAatD,EAAK6lB,OAAQ5vB,KAAK+Z,YAInCkgE,EAAA/5E,UAAAg4E,cAAA,WACE,SAAWl4E,KAAK0mD,OAAU1mD,KAAKo6B,SAAWp6B,KAAKo6B,QAAQz5B,QAAYX,KAAKqI,YAAcrI,KAAKqI,WAAWhD,MAAM1E,SAGtGs5E,EAAA/5E,UAAA6pB,SAAR,SAAiB7jB,GACAA,EAAY,OAAYqO,WAE3BvU,KAAK83E,gBACf93E,KAAK8O,UAAW,EAChB9O,KAAK63E,oBAAsB,EAC3B73E,KAAK23E,uBAEL33E,KAAK8O,UAAW,EAChB9O,KAAK63E,oBAAsB,EAC3B73E,KAAK23E,uBAIDsC,EAAA/5E,UAAA63E,YAAR,WACMhpE,OAAOwF,WAAavU,KAAK83E,iBAC3B93E,KAAK8O,UAAW,EAChB9O,KAAK63E,oBAAsB,IAI/BoC,EAAA/5E,UAAAy3E,mBAAA,WACM33E,KAAKo6B,QAAQz5B,OAASX,KAAK63E,sBAC7B73E,KAAKm4E,gBAAkBn4E,KAAKo6B,QAAQ5xB,MAAMxI,KAAK63E,oBAAsB,KAIzEoC,EAAA/5E,UAAAm6E,iBAAA,SAAiBvc,GACf99D,KAAKqN,aAAarN,KAAK4Z,OAAOkkD,GAAQ99D,KAAK+Z,YAG7CkgE,EAAA/5E,UAAAk6E,kBAAA,WAeE,MAZgB,CACdt+D,GAAI,CACFq+D,eAAgB,kBAElBp+D,GAAI,CACFo+D,eAAgB,mBAElBn+D,GAAI,CACFm+D,eAAgB,sBAVLtuE,KAcQsuE,gBAGzBF,EAAA/5E,UAAAo6E,WAAA,SAAWh+C,GACG,KAARA,GACFt8B,KAAKq6E,iBAAiB,WAI1BJ,EAAA/5E,UAAA68C,YAAA,SAAYw9B,GACVv6E,KAAK+Z,UAAU/Z,KAAK4Z,OAAO4gE,SAAWD,GAIxCN,EAAA/5E,UAAAu6E,wBAAA,SAAwBxtD,IACjBA,GAAeA,EAAYtsB,QAAUX,KAAKk6E,eAA0C,IAAvBjtD,EAAYtsB,SAAiBX,KAAKk6E,iBAClGl6E,KAAKopB,eAAe+tD,wBACpBn3E,KAAKk6E,eAAiBl6E,KAAKk6E,eAGzBl6E,KAAK06E,iBAAmB16E,KAAK06E,gBAAgB5/D,QAC/C9a,KAAK06E,gBAAgB5/D,OAAOmS,IAIxBgtD,EAAA/5E,UAAAywB,oBAAR,WAAA,IAAAjrB,EAAA1F,KACEA,KAAKgJ,eAAiBhJ,KAAKyF,SAASsD,OAAO,SAAU,SAAQ,SAAG7C,GAC9DR,EAAKqkB,SAAS7jB,MAIV+zE,EAAA/5E,UAAAqvB,gBAAR,WACEvvB,KAAKgJ,sCA5IRvE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,gBACVC,SAAA,8/FAjC+FqV,EAAAA,wBAApC7Q,EAAAA,iBAEpD4nB,EAAAA,kDA8CN3nB,EAAAA,UAASnF,KAAA,CAAC+yE,GAAyB,CAAE1tE,UAAQ,OA8HhD2wE,EA/IA,CAI0CF,ICb1CY,GAAA,WAAA,SAAAA,KA4B6B,2BA5B5B91E,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACAo2D,EAAAA,YACAzvD,EAAAA,aACAD,EACAuG,GACAsc,GACAqD,GACAupC,GACAlmC,IAEFhwB,aAAc,CACZ8xE,GACAE,GACAY,GACAa,GACAU,GACAS,GACAK,IAEFh1E,QAAS,CACPwzE,GACAb,GACAuB,GACAc,QAGyBU,EA5B7B,GClBMC,GAA+B,QAC/BC,GAA8B,QAC9BC,GAAuB,CAAC,QAAS,SAqBvCC,GAAA,WAAA,SAAAA,IAGE/6E,KAAAgY,UAAoB,EAEZhY,KAAA4uB,YAAsB,EACtB5uB,KAAA8uB,UAAqB8rD,GACrB56E,KAAAg7E,SAAoBH,GA4G9B,OAjGEr7E,OAAAsE,eAA2Bi3E,EAAA76E,UAAA,YAAS,KAIpC,WACE,OAAOF,KAAK4uB,gBALd,SAAqCrtB,GACnCvB,KAAK4uB,WAAaniB,EAAiBlL,oCAiCrC/B,OAAAsE,eAAyBi3E,EAAA76E,UAAA,WAAQ,KAIjC,WACE,OAAOF,KAAK8uB,eALd,SAAkCvtB,GAChCvB,KAAK8uB,UAAY5Y,GAAsBnS,SAASxC,GAASA,EAAQq5E,oCAiDnEp7E,OAAAsE,eAAwBi3E,EAAA76E,UAAA,UAAO,KAI/B,WACE,OAAOF,KAAKg7E,cALd,SAAgCz5E,GAC9BvB,KAAKg7E,SAAWF,GAAqB/2E,SAASxC,GAASA,EAAQs5E,uEArFhE72E,EAAAA,MAAKC,KAAA,CAAC,kCAkCND,EAAAA,MAAKC,KAAA,CAAC,8BAiCND,EAAAA,MAAKC,KAAA,CAAC,2BAGND,EAAAA,MAAKC,KAAA,CAAC,4BAcND,EAAAA,MAAKC,KAAA,CAAC,gBAaT82E,EAnHA,GCFAE,GAAA,SAAA92E,GAcE,SAAA82E,EAAoBx1E,EAA6BgR,GAAjD,IAAA/Q,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAD,SAAAA,EAA6BC,EAAA+Q,mBAAAA,EAPjD/Q,EAAAmN,eAAiB,SAsHnB,OAxHyCzO,EAAAA,EAAAA,GAavC62E,EAAA/6E,UAAAsG,gBAAA,WACExG,KAAKk7E,4BAGLl7E,KAAKyW,mBAAmB3D,YAAY9S,KAAKm7E,eAAev0E,cADlC,EACgE5G,KAAKsH,QAE3FtH,KAAKo7E,yBAGPH,EAAA/6E,UAAA+G,YAAA,WACEjH,KAAKuvB,mBAGP0rD,EAAA/6E,UAAAksB,MAAA,WACEpsB,KAAKgY,UAAW,GAGlBijE,EAAA/6E,UAAA6G,eAAA,WAAA,IAAArB,EAAA1F,KACE2I,aAAa3I,KAAK4I,eAClB5I,KAAK4I,cAAgBC,WAAU,WAC7BnD,EAAK21E,sBACJ,MAGLJ,EAAA/6E,UAAA8P,KAAA,WAAA,IAAAtK,EAAA1F,KACEA,KAAKwX,yBAELxX,KAAKgY,UAAW,EAChBhY,KAAKs7E,WAAW,GAEhBzyE,WAAU,WACRnD,EAAK+Q,mBAAmBnE,eAAe5M,EAAK6M,UAC5C7M,EAAKmN,eAAiBnN,EAAK+Q,mBAAmB7D,oBAC9ClN,EAAK41E,WAAW,MAIpBL,EAAA/6E,UAAAo7E,WAAA,SAAW/5E,GACTvB,KAAKm7E,eAAev0E,cAAc0O,MAAMimE,QAAUh6E,GAGpD05E,EAAA/6E,UAAAm7E,mBAAA,WACEr7E,KAAKyW,mBAAmBnE,eAAetS,KAAKuS,UAC5CvS,KAAK6S,eAAiB7S,KAAKyW,mBAAmB7D,qBAGhDqoE,EAAA/6E,UAAAk7E,sBAAA,WAAA,IAAA11E,EAAA1F,KAEEA,KAAKgJ,eAAiBhJ,KAAKyF,SAASsD,OAAO,SAAU,SAAQ,SAAG7C,GACzDR,EAAKsS,UACRtS,EAAKqB,mBAIY,UAAjB/G,KAAK4nE,SACP5nE,KAAKw7E,mBAAqBx7E,KAAKyF,SAASsD,OAAO/I,KAAKsH,OAAOV,cAAe,aAAY,SAAGV,GACvFR,EAAKsK,SAGPhQ,KAAKy7E,mBAAqBz7E,KAAKyF,SAASsD,OAAO/I,KAAKsH,OAAOV,cAAe,aAAY,SAAGV,GACvFR,EAAK0mB,WAGPpsB,KAAK8I,iBAAmB9I,KAAKyF,SAASsD,OAAO,WAAY,QAAO,SAAG7C,GACjER,EAAKg7B,YAAYx6B,MAKvB+0E,EAAA/6E,UAAAwgC,YAAA,SAAYx6B,GACLlG,KAAKgY,UAAahY,KAAKm7E,eAAev0E,cAAcS,SAASnB,EAAMoB,SACvEtH,KAAKsH,OAAOV,cAAcS,SAASnB,EAAMoB,QAG/BtH,KAAKsH,OAAOV,cAAcS,SAASnB,EAAMoB,UAElDtH,KAAKm7E,eAAev0E,cAAc80E,OAAS17E,KAAKgQ,OAAShQ,KAAKosB,SAH9DpsB,KAAKosB,SAOD6uD,EAAA/6E,UAAAsX,uBAAR,WACEzI,OAAO0I,iBAAiB,SAAUzX,KAAK0X,uBAAuB,IAGxDujE,EAAA/6E,UAAAg7E,0BAAR,WAAA,IAAAx1E,EAAA1F,KACEA,KAAK0X,sBAAqB,WACtBhS,EAAK21E,uBAIHJ,EAAA/6E,UAAAqvB,gBAAR,WAEMvvB,KAAK8I,kBACP9I,KAAK8I,mBAEH9I,KAAKw7E,oBACPx7E,KAAKw7E,qBAEHx7E,KAAKy7E,oBACPz7E,KAAKy7E,qBAGPz7E,KAAKgJ,iBAEL+F,OAAOoJ,oBAAoB,SAAUnY,KAAK0X,uBAAuB,wBA1HpEjT,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,cACVC,SAAA,6TACA4G,UAAW,CAAE2G,iDA7B2C/I,EAAAA,iBAEjD+I,8CAoCN9I,EAAAA,UAASnF,KAAA,CAAC,iBAAkB,CAACoF,KAAMH,EAAAA,WAAYI,UAAQ,OAiH1D2xE,EA7HA,CAKyCF,ICtBzCY,GAAA,WAAA,SAAAA,KAOgC,2BAP/B92E,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,cAEFC,aAAc,CAACi2E,IACfh2E,QAAS,CAACg2E,QAEoBU,EAPhC,GCAAC,GAAA,WAAA,SAAAA,IAaqB57E,KAAA0R,MAAQ,IAAIC,EAAAA,aACjC,2BAdClN,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,oBACVC,SAAA,8UAKCX,EAAAA,MAAKC,KAAA,CAAC,wCAGND,EAAAA,MAAKC,KAAA,CAAC,0BAGN2N,EAAAA,OAAM3N,KAAA,CAAC,cACV23E,EAdA,GCHMC,GAA0B,IAahCC,GAAA,WAAA,SAAAA,IAEU97E,KAAA+7E,UAAoBF,GA+E9B,OAnEEr8E,OAAAsE,eAAuBg4E,EAAA57E,UAAA,SAAM,KAK7B,WACE,OAAOF,KAAKijB,aANd,SAA8B1hB,GAC5BvB,KAAKijB,QAAUrW,EAAarL,GAC5BvB,KAAKg8E,eAAeh8E,KAAK0V,yCAgB3BlW,OAAAsE,eAAyBg4E,EAAA57E,UAAA,WAAQ,KAKjC,WACE,OAAOF,KAAK+7E,eANd,SAAkCx6E,GAChCvB,KAAK+7E,UAAYnvE,EAAarL,EAAOs6E,IACrC77E,KAAK+7E,WAAa,IAAO/7E,KAAKi8E,gBAAkBj8E,KAAKk8E,kDA2BvD18E,OAAAsE,eAAuBg4E,EAAA57E,UAAA,SAAM,KAS7B,WACE,OAAOF,KAAKm8E,aAVd,SAA8B56E,GAC5BvB,KAAKm8E,QAAU56E,EACfvB,KAAKo8E,cAAc76E,GAEfA,GAASA,EAAMZ,QACjBX,KAAKq8E,8EApDRr4E,EAAAA,MAAKC,KAAA,CAAC,8BAkBND,EAAAA,MAAKC,KAAA,CAAC,8BA6BND,EAAAA,MAAKC,KAAA,CAAC,eAoBT63E,EAjFA,GC0BAQ,GAAA,WAME,SAAAA,EAAmB1/C,GAAA58B,KAAA48B,YAAAA,EACrB,2BAPCtkB,EAAAA,UAASrU,KAAA,CAAC,CACTS,SAAU,0EA9CQm4B,EAAAA,eAoDpBy/C,EAPA,GChCAC,GAAA,WAAA,SAAAA,IxN4KA,IACQvtE,EwNrKNhP,KAAAw8E,YxNqKMxtE,EAAYD,OAAO9C,UAAU+C,UAE5B,2BAA2BxC,KAAKwC,IwNxIzC,OAREutE,EAAAr8E,UAAAu8E,YAAA,WACE,OAAKz8E,KAAK2E,UAAY3E,KAAKiK,KAClBjK,KAAKiK,KAAK6F,WAAW,QAAU,eAAiB,eAGlD,8BApCVrL,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,iBACVC,SAAA,uzDAICyE,EAAAA,UAASnF,KAAA,CAAC,YAAa,CAAEqF,UAAQ,oBAKjCtF,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,uBAGND,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,gCAGND,EAAAA,MAAKC,KAAA,CAAC,oCAGND,EAAAA,MAAKC,KAAA,CAAC,4BAGND,EAAAA,MAAKC,KAAA,CAAC,aAUTs4E,EAvCA,GCyBAG,GAAA,SAAAv4E,GA4CE,SAAAu4E,EAAoBzI,GAApB,IAAAvuE,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAuuE,QAAAA,EAtCZvuE,EAAAi3E,UAAoB,EAoB5Bj3E,EAAAk3E,kBAAoB,EAEpBl3E,EAAAm3E,WAAwC,KA+K1C,OAvMuCz4E,EAAAA,EAAAA,GAMrC5E,OAAAsE,eAAY44E,EAAAx8E,UAAA,cAAW,KAAvB,WACE,QAASF,KAAK88E,MAAMl2E,cAAcC,eAAiB7G,KAAK+8E,iBAAmB/8E,KAAK+8E,cAAcp8E,wCAGhGnB,OAAAsE,eAAY44E,EAAAx8E,UAAA,eAAY,KAAxB,WACE,OAAQF,KAAKg9E,sDAGfx9E,OAAAsE,eAAY44E,EAAAx8E,UAAA,SAAM,KAAlB,WACE,OAAOF,KAAK48E,kBAAoB58E,KAAKi9E,gDAGvCz9E,OAAAsE,eAAI44E,EAAAx8E,UAAA,YAAS,KAAb,WACE,QAASF,KAAKk9E,UAAYl9E,KAAKk9E,OAAOv8E,wCAcT+7E,EAAAx8E,UAAA6pB,SAA/B,WACM/pB,KAAK88E,QACP98E,KAAKm9E,oBACLn9E,KAAKo9E,SAASp9E,KAAK48E,qBAQvBF,EAAAx8E,UAAAwG,UAAA,YAEO1G,KAAK28E,UAAY38E,KAAKq9E,cAEzBr9E,KAAKm9E,oBACLn9E,KAAK28E,UAAW,EAEZ38E,KAAKs9E,WACPt9E,KAAKq8E,eAKXK,EAAAx8E,UAAAk9E,SAAA,SAASpoE,GAEHhV,KAAKu9E,SA3Fe,KA4FtBv9E,KAAKi8E,gBAGPj8E,KAAK48E,kBAAoB5nE,EACzBhV,KAAK+nE,QAAQ/nE,KAAKm0E,SAGpBuI,EAAAx8E,UAAAs9E,YAAA,WAEMx9E,KAAKu9E,SArGe,KAsGtBv9E,KAAKi8E,gBAGPj8E,KAAKyB,QAGPi7E,EAAAx8E,UAAAuB,KAAA,WACE,GAAIzB,KAAK48E,kBAAoB,IAAM58E,KAAK68E,WAAWl8E,OAGjD,OAFAX,KAAK48E,kBAAoB,OACzB58E,KAAK+nE,QAAQ,GAGf/nE,KAAK48E,mBAAqB58E,KAAK48E,kBAAoB,GAAK58E,KAAK68E,WAAWl8E,OACxEX,KAAK+nE,QAAQ/nE,KAAKm0E,SAGpBuI,EAAAx8E,UAAA81E,SAAA,WACE,GAA+B,IAA3Bh2E,KAAK48E,kBAGP,OAFA58E,KAAK48E,kBAAoB58E,KAAK68E,WAAWl8E,OAAS,OAClDX,KAAK+nE,QAAQ/nE,KAAKm0E,QAGpBn0E,KAAK48E,mBAAsB58E,KAAK48E,kBAAoB,EAAK58E,KAAK68E,WAAWl8E,QAAUX,KAAK68E,WAAWl8E,OACnGX,KAAK+nE,QAAQ/nE,KAAKm0E,SAGpBuI,EAAAx8E,UAAAu9E,gBAAA,WAEMz9E,KAAKu9E,SAlIe,KAmItBv9E,KAAKi8E,gBAGPj8E,KAAKg2E,YAGP0G,EAAAx8E,UAAA87E,eAAA,SAAetmE,GACb1V,KAAK09E,UAAUhoE,IAGTgnE,EAAAx8E,UAAA6nE,QAAR,SAAgBoM,GACd,GAAIn0E,KAAKq9E,YAAa,KACdjI,EAA8Bp1E,KAAKq1E,yBAAyBlB,GAElEn0E,KAAKs1E,OAASF,EAAUj1E,OAAOH,KAAK88E,MAAMl2E,eAC1C5G,KAAKs1E,OAAOG,SAIRiH,EAAAx8E,UAAAm1E,yBAAR,SAAiClB,GAC/B,OAAOn0E,KAAKi0E,QAAQyB,MAAM,CACxB3N,EAAAA,QAtJiB,aAwJf4N,EAAAA,UAAU,CAACrgE,EAAAA,MAAM,CAAE4f,UAAW,eAAei/C,EAAM,cAKjDuI,EAAAx8E,UAAAy9E,uBAAR,SAA+BT,GAC7Bl9E,KAAK68E,WAAUp5E,EAAOy5E,IAGhBR,EAAAx8E,UAAA09E,sBAAR,SAA8BV,GAA9B,IAAAx3E,EAAA1F,KACwBk9E,EAAOxgD,MAAK,SAAC3yB,GAAQ,MAAgB,iBAATA,IAGhDmzE,EAAO3jE,QAAO,SAAC/T,GAAW,OAAAE,EAAKm3E,WAAW35E,KAAK,CAAE26E,MAAO,GAAGr4E,MAE3DxF,KAAK68E,WAAUp5E,EAAA,IAIXi5E,EAAAx8E,UAAA49E,iBAAR,SAAyBpoE,GACnBA,GAAUA,GA7KQ,MA6KwBA,GAAU1V,KAAK+9E,cAC3D/9E,KAAK88E,MAAMl2E,cAAc0O,MAAMI,OAAYsoE,QAC3Ch+E,KAAKi+E,YAjLmB,KAmLxBj+E,KAAKi+E,YAAc15E,WAIfm4E,EAAAx8E,UAAAw9E,UAAR,SAAkBhoE,GACZA,GAAUA,EAtLQ,KAuLpB1V,KAAK88E,MAAMl2E,cAAc0O,MAAMI,OAAYA,EAAM,KACjD1V,KAAKi+E,YAAcvoE,GAEnB1V,KAAK89E,iBAAiBpoE,IAIlBgnE,EAAAx8E,UAAAi9E,kBAAR,WACMn9E,KAAKq9E,cACPr9E,KAAKi9E,eAAiBj9E,KAAK+8E,cAAcmB,MAAMC,YAAYv3E,cAAckO,wBAAwBU,QAI3FknE,EAAAx8E,UAAAg8E,eAAV,WACEkC,cAAcp+E,KAAKq+E,cAGX3B,EAAAx8E,UAAAk8E,cAAV,SAAwBc,GAElBl9E,KAAKs9E,UACPt9E,KAAKg9E,qBAAuBh9E,KAAK29E,uBAAuBT,GAAUl9E,KAAK49E,sBAAsBV,IAE7Fl9E,KAAK68E,WAAa,GAClB78E,KAAKk8E,mBAICQ,EAAAx8E,UAAAm8E,WAAV,WAEEr8E,KAAKg8E,eAAeh8E,KAAK0V,QAErB1V,KAAKu9E,SAvNe,KAwNtBv9E,KAAKi8E,gBAGPj8E,KAAK48E,kBAAoB,GAGjBF,EAAAx8E,UAAA+7E,cAAV,WAAA,IAAAv2E,EAAA1F,KAEMA,KAAKq+E,aACPr+E,KAAKk8E,iBAGPl8E,KAAKq+E,YAAcr+E,KAAKs9E,WAAat9E,KAAKq9E,YAAcgB,YAAW,WAAS34E,EAAKjE,QAAWzB,KAAKu9E,UAAYh5E,+BAxMhHE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,YACVC,SAAA,ykCAtCgB8xE,EAAAA,kEAmEfh1C,EAAAA,aAAYx9B,KAAA,CAACq4E,GAAkC,CAAEhzE,UAAQ,mBAEzDF,EAAAA,UAASnF,KAAA,CAAC,QAAS,CAAEqF,UAAQ,2BAE7Bo4B,EAAAA,aAAYz9B,KAAA,CAACs4E,sBAEbhkE,EAAAA,aAAYtU,KAAA,CAAC,oBAsKhBy4E,EA3MA,CAIuCZ,ICjCvCwC,GAAA,WAAA,SAAAA,IAUqBt+E,KAAA0R,MAAQ,IAAIC,EAAAA,aAEjC,2BAZClN,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,oBACVC,SAAA,4OAKCX,EAAAA,MAAKC,KAAA,CAAC,4BAGN2N,EAAAA,OAAM3N,KAAA,CAAC,cAEVq6E,EAZA,GCkCAC,GAAA,WAAA,SAAAA,KAoB8B,2BApB7B15E,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACA2G,EAAAA,aACAogB,IAEF9mB,aAAc,CACZ42E,GACAc,GACA4B,GACAhC,GACAC,IAEFt3E,QAAS,CACPy3E,GACAJ,IAEF/wE,UAAW,GACX0lB,QAAS,OAEmBstD,EApB9B,OC/BEC,OAAS,SAGTC,QAAU,UAGVC,SAAW,WAGXC,KAAO,OAGP9hE,MAAQ,SCmBV+hE,GAAA,WA+CE,SAAAA,EAAoBpoE,GAAAxW,KAAAwW,WAAAA,EAzCZxW,KAAA6+E,QAA6BC,GAAiBJ,SAGtD1+E,KAAA4zB,GAAcjjB,KAiDhB,OArBEnR,OAAAsE,eAAuB86E,EAAA1+E,UAAA,SAAM,KAM7B,WACE,OAAOF,KAAK6+E,aAPd,SAA8B10E,GAC5BnK,KAAK6+E,QAAU10E,EAEfnK,KAAK++E,6DASPH,EAAA1+E,UAAA+mE,mBAAA,WACEjnE,KAAK++E,6BAGGH,EAAA1+E,UAAA6+E,0BAAV,WACE/+E,KAAKwW,WAAW5P,cAAc0O,MAAMqiC,QACjC33C,KAAKmK,SAAW20E,GAAiBN,QAAUx+E,KAAKmK,SAAW20E,GAAiBjiE,MAAS,GAAK,4BAvDhGpY,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,WACVC,SAAA,2EA7CoCuE,EAAAA,yDA0EnClF,EAAAA,MAAKC,KAAA,CAAC,yCAGND,EAAAA,MAAKC,KAAA,CAAC,2BAGND,EAAAA,MAAKC,KAAA,CAAC,eAqBT26E,EA1DA,GC7BAI,GAAA,WAAA,SAAAA,KA8CA,OA5BEx/E,OAAAsE,eAAIk7E,EAAA9+E,UAAA,WAAQ,KAAZ,WACE,OAAOF,KAAKmK,SAAW20E,GAAiBN,wCAG1Ch/E,OAAAsE,eAAIk7E,EAAA9+E,UAAA,YAAS,KAAb,WACE,OAAOF,KAAKmK,SAAW20E,GAAiBL,yCAG1Cj/E,OAAAsE,eAAIk7E,EAAA9+E,UAAA,aAAU,KAAd,WACE,OAAOF,KAAKmK,SAAW20E,GAAiBJ,0CAG1Cl/E,OAAAsE,eAAIk7E,EAAA9+E,UAAA,SAAM,KAAV,WACE,OAAOF,KAAKmK,SAAW20E,GAAiBH,sCAG1Cn/E,OAAAsE,eAAIk7E,EAAA9+E,UAAA,UAAO,KAAX,WACE,OAAOF,KAAKmK,SAAW20E,GAAiBjiE,uCAG1Crd,OAAAsE,eAAIk7E,EAAA9+E,UAAA,cAAW,KAAf,WACE,OAAOF,KAAK4zD,MAhDS,oCAmDvBp0D,OAAAsE,eAAIk7E,EAAA9+E,UAAA,eAAY,KAAhB,WACE,OAAOF,KAAK4zD,MArDU,KAqDoB5zD,KAAKi/E,iEA3ClDx6E,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,qBACVC,SAAA,wnBAKCX,EAAAA,MAAKC,KAAA,CAAC,4BAGND,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,0BAGND,EAAAA,MAAKC,KAAA,CAAC,eA8BT+6E,EA9CA,OCDE3jB,WAAa,aAGbC,SAAW,YCPP4jB,GAA+BC,GAAsB9jB,WA2C3D+jB,GAAA,WAAA,SAAAA,IAEUp/E,KAAA07D,aAAuCwjB,GACvCl/E,KAAAq/E,aAAwB,EACxBr/E,KAAAs/E,MAAgB,EAChBt/E,KAAAu/E,OAAgC,GAiHfv/E,KAAAw/E,aAAe,IAAI7tE,EAAAA,aAE9C,OAtGEnS,OAAAsE,eAA4Bs7E,EAAAl/E,UAAA,cAAW,KAIvC,WACE,OAAOF,KAAK07D,kBALd,SAAwCn6D,GACtCvB,KAAK07D,aAAe,OAAc1iD,OAAOmmE,IAAuBp7E,SAASxC,GAASA,EAAQ29E,oCAmB5F1/E,OAAAsE,eAAqBs7E,EAAAl/E,UAAA,OAAI,KAOzB,WACE,OAAOF,KAAKs/E,WARd,SAA0B99E,GACpBA,GAAQ,GAAKA,GAAQxB,KAAKy/E,MAAM9+E,SAClCX,KAAKs/E,MAAQ99E,EACbxB,KAAKu/E,OAAOv/E,KAAKs/E,MAAQ,GAAGn1E,OAAS20E,GAAiBN,yCAkB1Dh/E,OAAAsE,eAAsBs7E,EAAAl/E,UAAA,QAAK,KAM3B,WACE,OAAOF,KAAKu/E,YAPd,SAA4BE,GAC1Bz/E,KAAKu/E,OAAS5/E,MAAMouB,QAAQ0xD,GAASA,EAAQ,GAC7Cz/E,KAAKu/E,OAAOhmE,QAAO,SAAC/X,GAAQ,OAAAA,EAAK2I,OAAS20E,GAAiBL,UAC3Dz+E,KAAKwB,KAAO,mCA+CdhC,OAAAsE,eAA2Bs7E,EAAAl/E,UAAA,aAAU,KAIrC,WACE,OAAOF,KAAKq/E,iBALd,SAAsCK,GACpC1/E,KAAKq/E,YAAc5yE,EAAiBizE,yEA5FrC17E,EAAAA,MAAKC,KAAA,CAAC,+BAoBND,EAAAA,MAAKC,KAAA,CAAC,yBAqBND,EAAAA,MAAKC,KAAA,CAAC,8BAsBND,EAAAA,MAAKC,KAAA,CAAC,kCAeND,EAAAA,MAAKC,KAAA,CAAC,mCAaND,EAAAA,MAAKC,KAAA,CAAC,sCASN2N,EAAAA,OAAM3N,KAAA,CAAC,oBAEVm7E,EAxHA,GCzBAO,GAAA,SAAAx7E,GAuBE,SAAAw7E,EAAoB/1D,GAApB,IAAAlkB,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAkkB,eAAAA,IA0MtB,OA7NyCxlB,EAAAA,EAAAA,GAOvC5E,OAAAsE,eAAI67E,EAAAz/E,UAAA,mBAAgB,KAApB,WACE,OAAOF,KAAKwB,KAAO,mCAGrBhC,OAAAsE,eAAI67E,EAAAz/E,UAAA,WAAQ,KAAZ,WACE,OAAOF,KAAK4/E,aAAe5/E,KAAK6/E,UAAY7/E,KAAKy/E,uCAGnDjgF,OAAAsE,eAAI67E,EAAAz/E,UAAA,cAAW,KAAf,WACE,QAASF,KAAK6/E,SAASl/E,wCAOzBg/E,EAAAz/E,UAAA+mE,mBAAA,WAAA,IAAAvhE,EAAA1F,KACEA,KAAK8/E,kBAEL9/E,KAAK6/E,SAASxf,QAAQ/0D,UAAS,WAC7B5F,EAAKq6E,mBAAmB,EAAGr6E,EAAKm6E,SAAS3B,UAW7CyB,EAAAz/E,UAAAmuE,OAAA,SAAOr5D,GACL,GAAKhV,KAAK4/E,YAAV,KAKMp+E,EADaxB,KAAKggF,cACAhrE,GAClBirE,EAAiBz+E,EAAK2I,SAAW20E,GAAiBJ,SAClDwB,EAAc1+E,EAAK2I,SAAW20E,GAAiBjiE,MAEhDojE,IAAkBC,GACrBlgF,KAAKmgF,WAAWnrE,EAAOxT,KAU3Bm+E,EAAAz/E,UAAAg+E,MAAA,WACE,GAAKl+E,KAAK4/E,YAAV,KAIMQ,EAAYpgF,KAAK6/E,SAAS3B,MAGhCl+E,KAAKmgF,WAFkB,EAESC,KAQlCT,EAAAz/E,UAAAuB,KAAA,WACE,GAAKzB,KAAK4/E,YAAV,CAIM,IAAAniE,EAAAzd,KAAAqgF,iBAAArgF,KAAAsgF,mBAAEb,EAAAhiE,EAAAgiE,MACFxqE,EADSwI,EAAA8iE,UACe,EACxBC,EAAWf,EAAMxqE,GAEvBjV,KAAKmgF,WAAWlrE,EAAWurE,KAQ7Bb,EAAAz/E,UAAA81E,SAAA,WACE,GAAKh2E,KAAK4/E,YAAV,CAIM,IAAAniE,EAAAzd,KAAAqgF,iBAAArgF,KAAAsgF,mBAAEb,EAAAhiE,EAAAgiE,MACFgB,EADShjE,EAAA8iE,UACmB,EAC5BG,EAAejB,EAAMgB,GAE3BzgF,KAAKmgF,WAAWM,EAAeC,KAGjCf,EAAAz/E,UAAAigF,WAAA,SAAWI,EAAmB/+E,OACtBm/E,GAAoB3gF,KAAKsgF,mBAAqB9+E,EAAKoyB,KAAO5zB,KAAKsgF,kBAAkB1sD,GAEnF5zB,KAAK4/E,aAAee,GAAmB3gF,KAAK4gF,cAAcL,IAC5DvgF,KAAK+/E,mBAAmBQ,EAAW/+E,GAEnCxB,KAAKw/E,aAAaztE,KAAKvQ,KACbxB,KAAK4/E,aAAeW,IAAcvgF,KAAK6gF,kBAAoB7gF,KAAK4gF,cAAcL,IAExFvgF,KAAKw/E,aAAaztE,KAAKwuE,EAAY,IAIvCZ,EAAAz/E,UAAA4gF,aAAA,SAAat/E,GACXxB,KAAKsgF,kBAAoB9+E,EAEzBxB,KAAK+gF,mBAAqB/gF,KAAK6/E,SAASt5E,KAAI,SAACy6E,GAAa,OAAAA,EAAU72E,SAAW20E,GAAiBN,QAAUwC,EAAUptD,KAAOpyB,EAAKoyB,KAEhI5zB,KAAKihF,yBAGPtB,EAAAz/E,UAAAghF,UAAA,SAAU1/E,GACR,OAAOA,EAAKoyB,IAGN+rD,EAAAz/E,UAAA4/E,gBAAR,eACQqB,EAAgBnhF,KAAK6/E,SAAS5xD,KAAI,SAACmzD,GAAW,OAAAA,EAAQj3E,SAAW20E,GAAiBN,SAEpFx+E,KAAK4/E,cAAgBuB,GACvBnhF,KAAKmgF,WAAW,EAAGngF,KAAK6/E,SAAS3B,QAI7ByB,EAAAz/E,UAAA0gF,cAAR,SAAsBS,GACpB,OAAKrhF,KAAK0/E,aAIN1/E,KAAK4/E,YACA5/E,KAAKshF,aAAaD,IAAkBrhF,KAAKuhF,kBAAkBvhF,KAAKsgF,mBAGlEtgF,KAAKy/E,MAAMj3E,MAAMxI,KAAKwB,KAAM6/E,GAAe3kD,MAAK,SAACl7B,GAAQ,OAAAA,EAAK2I,SAAW20E,GAAiBH,SAG3FgB,EAAAz/E,UAAAqhF,kBAAR,SAA0BjB,GACxB,QADwB,IAAAA,IAAAA,EAAA,KACnBA,EAAkBiB,kBACrB,OAAO,MAGHA,EAAoBjB,EAAkBiB,kBAAkBjB,GAI9D,OAFAA,EAAkBn2E,OAASnK,KAAKwhF,4BAA4BD,GAErDA,GAGD5B,EAAAz/E,UAAA6/E,mBAAR,SAA2BQ,EAAmB/+E,GACxCxB,KAAK4/E,cAEP5/E,KAAKyhF,gBAAgBjgF,GACrBxB,KAAK0hF,qBAAqBlgF,GAEtBxB,KAAKshF,aAAaf,IACpBvgF,KAAK2hF,2BAA2BpB,GAGlCvgF,KAAK4pB,eAAekB,kBAIhB60D,EAAAz/E,UAAAshF,4BAAR,SAAoCD,GAClC,OAAOA,EAAoBzC,GAAiBH,KAAOG,GAAiBjiE,OAG9D8iE,EAAAz/E,UAAAmgF,iBAAR,SAAyB7+E,QAAA,IAAAA,IAAAA,EAAA,QACjBi+E,EAAQz/E,KAAKggF,cACbO,EAAYd,EAAMjwE,UAAS,SAAC4xE,GAAW,OAAAA,EAAQxtD,KAAOpyB,EAAKoyB,KAEjE,MAAO,CAAE6rD,MAAKA,EAAEc,UAASA,IAGnBZ,EAAAz/E,UAAA8/E,YAAR,WACE,OAAOhgF,KAAK6/E,SAAS+B,WAGfjC,EAAAz/E,UAAAohF,aAAR,SAAqBf,GAArB,IAAA76E,EAAA1F,KAGE,QAASA,KAAKsgF,mBAFuB56E,EAAKs6E,cAAcxwE,UAAS,SAAChO,GAAQ,OAAAA,EAAKoyB,KAAOluB,EAAK46E,kBAAkB1sD,MAE9C2sD,GAGzDZ,EAAAz/E,UAAAyhF,2BAAR,SAAmCpB,GACjCvgF,KAAKggF,cACFpmE,OAAM,SAAEpY,EAAMwT,GAAU,OAAAxT,GAAQwT,GAASurE,EAAY,IACrDhnE,QAAO,SAAC/X,GAAQ,OAAAA,EAAK2I,OAAS20E,GAAiBJ,YAG5CiB,EAAAz/E,UAAAuhF,gBAAR,SAAwBjgF,GACtBA,EAAK2I,OAAS20E,GAAiBN,QAGzBmB,EAAAz/E,UAAAwhF,qBAAR,SAA6BG,GACrB,IAAApkE,EAAAzd,KAAAqgF,iBAAAwB,GAAEpC,EAAAhiE,EAAAgiE,MACFxqE,EADSwI,EAAA8iE,UACe,EAE1BtrE,EAAYjV,KAAK6/E,SAASl/E,SAC5B8+E,EAAMxqE,GAAW9K,OAAS20E,GAAiBL,UAIvCkB,EAAAz/E,UAAA+gF,sBAAR,WACMjhF,KAAK+gF,qBACP/gF,KAAK+gF,mBAAmB52E,OAAS20E,GAAiBH,2BA7NvDl6E,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,cACVC,SAAA,kvBA7ByB0mB,EAAAA,uDAiCxBy2D,EAAAA,gBAAe79E,KAAA,CAAC26E,OA2NnBe,EAjOA,CAIyCP,ICtBzC2C,GAAA,WAAA,SAAAA,KAUA,2BAVCt9E,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,oBACVC,SAAA,kGAMCX,EAAAA,MAAKC,KAAA,CAAC,gBAET89E,EAVA,GCFMC,GAA4B,GAE5BC,GAAyB,CAC7BlmE,GAAI,CAAE1Z,MAAO,QACb2Z,GAAI,CAAE3Z,MAAO,QACbyZ,GAAI,CAAEzZ,MAAO,UAUf6/E,GAAA,WAAA,SAAAA,IAQUliF,KAAAmiF,YAAuB,EACvBniF,KAAAoiF,UAAoBJ,GAEnBhiF,KAAAgtB,SAAQ5sB,EAAA,GACZ6hF,GAAuBr2E,GACvBq2E,GAAuBp2E,MAkDL7L,KAAAqiF,UAAY,IAAI1wE,EAAAA,aAGpB3R,KAAA0R,MAAQ,IAAIC,EAAAA,aAGZ3R,KAAA6nC,MAAQ,IAAIl2B,EAAAA,aAyCjC,OA1FEnS,OAAAsE,eAAsBo+E,EAAAhiF,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAKsiF,YALd,SAA4B/gF,GAC1BvB,KAAKsiF,OAASp1E,EAAS3L,EAAO,UAAYA,EAAWvB,KAAKgtB,SAAS3qB,MAAK,IAAIrC,KAAKuiF,+CAWnF/iF,OAAAsE,eAAuBo+E,EAAAhiF,UAAA,SAAM,KAQ7B,WACE,OAAOF,KAAK6+E,aATd,SAA8Bt9E,GAC5BvB,KAAK6+E,QAAU,GAA4Bt6E,UAEvCvE,KAAKmK,SAAW20E,GAAiBN,QACnCx+E,KAAKqiF,UAAUtwE,wCAQnBvS,OAAAsE,eAA2Bo+E,EAAAhiF,UAAA,YAAS,KAIpC,WACE,OAAOF,KAAKmiF,gBALd,SAAqCK,GACnCxiF,KAAKmiF,WAAa11E,EAAiB+1E,oCASrChjF,OAAAsE,eAA0Bo+E,EAAAhiF,UAAA,WAAQ,KAIlC,WACE,OAAOF,KAAKoiF,eALd,SAAmC7gF,GACjCvB,KAAKoiF,UAAa7gF,GAASygF,IAA6BzgF,GArE9B,GAqEgEA,EAAQygF,oCAgBpGxiF,OAAAsE,eAAIo+E,EAAAhiF,UAAA,eAAY,KAAhB,WACE,OAAOF,KAAKyiF,SAAW,mCAGzBjjF,OAAAsE,eAAIo+E,EAAAhiF,UAAA,wBAAqB,KAAzB,WACE,OAAOF,KAAKy0E,cAAgB0K,GAAsB7jB,0CAGpD97D,OAAAsE,eAAIo+E,EAAAhiF,UAAA,sBAAmB,KAAvB,WACE,OAAOF,KAAK0iF,sBAAwBn+E,UAAYvE,KAAK2iF,8CAGvDT,EAAAhiF,UAAA0iF,eAAA,SAAez4E,GACb,OAAQA,GACN,KAAK20E,GAAiBN,OACpB,MAAO,0BACT,KAAKM,GAAiBJ,SACpB,MAAO,4BACT,KAAKI,GAAiBH,KACpB,MAAO,wBACT,KAAKG,GAAiBjiE,MACpB,MAAO,yBACT,QACE,MAAO,6BAIbqlE,EAAAhiF,UAAA4R,QAAA,WACM9R,KAAKmK,SAAW20E,GAAiBJ,UACnC1+E,KAAK0R,MAAMK,QAIfmwE,EAAAhiF,UAAA2iF,QAAA,WACM7iF,KAAKmK,SAAW20E,GAAiBJ,UACnC1+E,KAAK6nC,MAAM91B,4BA1GhBtN,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,mBACVC,SAAA,m/BAeCX,EAAAA,MAAKC,KAAA,CAAC,mCAGND,EAAAA,MAAKC,KAAA,CAAC,gCASND,EAAAA,MAAKC,KAAA,CAAC,iCAGND,EAAAA,MAAKC,KAAA,CAAC,+BAYND,EAAAA,MAAKC,KAAA,CAAC,kCAUND,EAAAA,MAAKC,KAAA,CAAC,kCASN2N,EAAAA,OAAM3N,KAAA,CAAC,8BAGP2N,EAAAA,OAAM3N,KAAA,CAAC,0BAGP2N,EAAAA,OAAM3N,KAAA,CAAC,cAyCVi+E,EA9GA,GCTAY,GAAA,WAAA,SAAAA,KAgBgC,2BAhB/Bj+E,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZ45E,GACAI,GACAW,GACAoC,GACAG,IAEFj9E,QAAS,CACP25E,GACAe,QAG4BmD,EAhBhC,GCFAC,GAAA,WAoDE,SAAAA,EAAoBvsE,GAAAxW,KAAAwW,WAAAA,EARGxW,KAAAqiF,UAAY,IAAI1wE,EAAAA,aAGb3R,KAAAgjF,YAAc,IAAIrxE,EAAAA,aAGzB3R,KAAA0R,MAAQ,IAAIC,EAAAA,aA0BjC,OAlEEnS,OAAAsE,eAAuBi/E,EAAA7iF,UAAA,SAAM,KAM7B,WACE,OAAOF,KAAKijF,aAPd,SAA8B1hF,GAC5BvB,KAAKijF,QAAU1hF,EAEfvB,KAAKkjF,iDAWP1jF,OAAAsE,eAAqBi/E,EAAA7iF,UAAA,OAAI,KAMzB,WACE,OAAOF,KAAKmjF,WAPd,SAA0B5hF,GACxBvB,KAAKmjF,MAAQ12E,EAAiBlL,GAE9BvB,KAAKojF,oDA2BPL,EAAA7iF,UAAAw6B,YAAA,SAAY2lC,IACLA,EAAQgjB,MAAQhjB,EAAQgjB,KAAKC,cAAkBjjB,EAAQ7uC,UAAY6uC,EAAQ7uC,SAAS8xD,eACvFtjF,KAAKgjF,YAAYjxE,KAAK/R,OAI1B+iF,EAAA7iF,UAAA4R,QAAA,WACO9R,KAAKwxB,UACRxxB,KAAK0R,MAAMK,KAAK/R,KAAK4zB,KAIjBmvD,EAAA7iF,UAAAgjF,cAAR,WACMljF,KAAKquE,QACPruE,KAAKqiF,UAAUtwE,KAAK/R,OAIhB+iF,EAAA7iF,UAAAkjF,iBAAR,WACEpjF,KAAKwW,WAAW5P,cAAc0O,MAAMqiC,QAAU33C,KAAKqjF,KAAO,OAAS,wBAzEtE5+E,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,iBACVC,SAAA,yXAbkBuE,EAAAA,8CAqBjBlF,EAAAA,MAAKC,KAAA,CAAC,8BAWND,EAAAA,MAAKC,KAAA,CAAC,4BAGND,EAAAA,MAAKC,KAAA,CAAC,sBAWND,EAAAA,MAAKC,KAAA,CAAC,uBAGND,EAAAA,MAAKC,KAAA,CAAC,0BAGND,EAAAA,MAAKC,KAAA,CAAC,8BAGN2N,EAAAA,OAAM3N,KAAA,CAAC,oCAGP2N,EAAAA,OAAM3N,KAAA,CAAC,iCAGP2N,EAAAA,OAAM3N,KAAA,CAAC,cA0BV8+E,EA5EA,GCGAQ,GAAA,WAAA,SAAAA,IAEUvjF,KAAAijF,SAAoB,EACpBjjF,KAAAsR,WAAsB,EACtBtR,KAAAmjF,OAAkB,EAG1BnjF,KAAA4zB,GAAcjjB,KA4DK3Q,KAAA0R,MAAQ,IAAIC,EAAAA,aAIjC,OAnDEnS,OAAAsE,eAAuBy/E,EAAArjF,UAAA,SAAM,KAK7B,WACE,OAAOF,KAAKijF,aANd,SAA8B5U,GAC5BruE,KAAKijF,QAAUx2E,EAAiB4hE,GAChCruE,KAAKwjF,sDAgBPhkF,OAAAsE,eAAyBy/E,EAAArjF,UAAA,WAAQ,KAIjC,WACE,OAAOF,KAAKsR,eALd,SAAkCkgB,GAChCxxB,KAAKsR,UAAY7E,EAAiB+kB,oCAgBpChyB,OAAAsE,eAAqBy/E,EAAArjF,UAAA,OAAI,KAIzB,WACE,OAAOF,KAAKmjF,WALd,SAA0BE,GACxBrjF,KAAKmjF,MAAQ12E,EAAiB42E,oEApC/Br/E,EAAAA,MAAKC,KAAA,CAAC,8BAkBND,EAAAA,MAAKC,KAAA,CAAC,4BAiBND,EAAAA,MAAKC,KAAA,CAAC,yBASND,EAAAA,MAAKC,KAAA,CAAC,0BAGN2N,EAAAA,OAAM3N,KAAA,CAAC,cAIVs/E,EAvEA,GCPAE,GAAA,SAAAt/E,GAME,SAAAs/E,EAAoBjtE,GAApB,IAAA9Q,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAA8Q,WAAAA,IAYtB,OAdqCpS,EAAAA,EAAAA,GAMnCq/E,EAAAvjF,UAAA+mE,mBAAA,WACEjnE,KAAKwjF,sBAGGC,EAAAvjF,UAAAsjF,mBAAV,WACExjF,KAAKwW,WAAW5P,cAAc0O,MAAMqiC,QAAU33C,KAAKquE,OAAS,GAAK,4BAfpE5pE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,UACVC,SAAA,2EAToCuE,EAAAA,cAyBtCu6E,EAlBA,CAIqCF,ICErCG,GAAA,WAAA,SAAAA,IAgBmB1jF,KAAA2jF,KAA+B,GAGzB3jF,KAAAqiF,UAAY,IAAI1wE,EAAAA,aAGb3R,KAAAgjF,YAAc,IAAIrxE,EAAAA,aAGzB3R,KAAA0R,MAAQ,IAAIC,EAAAA,aAUjC,OARE+xE,EAAAxjF,UAAA0jF,kBAAA,WACE,OAAO5jF,KAAK6jF,MAAQ,gCAAkC,8BAGxDH,EAAAxjF,UAAA4jF,cAAA,WACE9jF,KAAK+jF,QAAQ/rE,SAAWhY,KAAK+jF,QAAQ/zE,OAAShQ,KAAK+jF,QAAQ33D,6BAhC9D3nB,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,mBACVC,SAAA,shCAICyE,EAAAA,UAASnF,KAAA,CAAC,UAAW,CAAEqF,UAAQ,yBAC/BF,EAAAA,UAASnF,KAAA,CAAC,UAAW,CAAEoF,KAAMH,EAAAA,WAAYI,UAAQ,mBAGjDtF,EAAAA,MAAKC,KAAA,CAAC,0BAGND,EAAAA,MAAKC,KAAA,CAAC,yBAGND,EAAAA,MAAKC,KAAA,CAAC,6BAGN2N,EAAAA,OAAM3N,KAAA,CAAC,oCAGP2N,EAAAA,OAAM3N,KAAA,CAAC,iCAGP2N,EAAAA,OAAM3N,KAAA,CAAC,cAUVy/E,EAnCA,GCUAM,GAAA,WAAA,SAAAA,IAEUhkF,KAAAwR,QAAmB,EAmB7B,OAREhS,OAAAsE,eAAsBkgF,EAAA9jF,UAAA,QAAK,KAI3B,WACE,OAAOF,KAAKwR,YALd,SAA4BjQ,GAC1BvB,KAAKwR,OAAS/E,EAAiBlL,mEADhCyC,EAAAA,MAAKC,KAAA,CAAC,cAQT+/E,EArBA,GCjBMC,GAAyB,EA2B/BC,GAAA,SAAA//E,GAeE,SAAA+/E,EAAoBt6D,GAApB,IAAAlkB,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAkkB,eAAAA,EATpBlkB,EAAAy+E,gBAAkBF,KAqGpB,OAvGsC7/E,EAAAA,EAAAA,GAepC5E,OAAAsE,eAAIogF,EAAAhkF,UAAA,oBAAiB,KAArB,WACE,OAAOF,KAAKokF,YAAYzjF,OAASX,KAAKmkF,iDAIxC3kF,OAAAsE,eAAIogF,EAAAhkF,UAAA,iBAAc,KAAlB,WAAA,IAAAwF,EAAA1F,KACE,OAAOA,KAAKokF,YAAYxqE,OAAM,SAAEyqE,EAAMrvE,GAAU,OAAAA,EAAStP,EAAKy+E,gBAAkB,qCAGlF3kF,OAAAsE,eAAIogF,EAAAhkF,UAAA,cAAW,KAAf,WACE,OAAOF,KAAK2jF,KAAK/pE,OAAM,SAACouB,GAAO,OAACA,EAAIq7C,wCAGtCa,EAAAhkF,UAAAokF,aAAA,WACiCtkF,KAAKukF,aAAevkF,KAAKukF,YAAYR,UAAY/jF,KAAKukF,YAAYR,QAAQ/rE,UAGvGhY,KAAKukF,YAAYR,QAAQ33D,SAI7B83D,EAAAhkF,UAAAskF,aAAA,SAAax8C,OACLy8C,EAAkBzkF,KAAKokF,YAAY50E,UAAS,SAACk1E,GAAc,OAAAA,EAAW9wD,KAAOoU,EAAIpU,KAEvF,OAAQ5zB,KAAKokF,YAAYzjF,QAAUX,KAAKmkF,iBAAqBM,EAAmBzkF,KAAKmkF,gBAAkB,GAIzGD,EAAAhkF,UAAAykF,YAAA,SAAY38C,GACVhoC,KAAK4kF,kBAAoB5kF,KAAK2jF,KAAKp9E,KAAI,SAACs+E,GAAY,OAAAA,EAASxW,QAAUwW,EAASjxD,KAAOoU,EAAIpU,KAE3F5zB,KAAK8kF,iBAIPZ,EAAAhkF,UAAA6kF,iBAAA,SAAiB/8C,GACXA,EAAIqmC,SACNrmC,EAAIqmC,QAAS,EAEbruE,KAAKglF,oBAELhlF,KAAK4pB,eAAekB,kBAKxBo5D,EAAAhkF,UAAA+kF,YAAA,SAAYj9C,GACVA,EAAIqmC,QAAS,EAETrmC,EAAIt2B,OACNs2B,EAAIt2B,MAAMK,KAAKi2B,GAGjBhoC,KAAK4pB,eAAekB,iBAGtBo5D,EAAAhkF,UAAAghF,UAAA,SAAUgE,EAAIl9C,GACZ,OAAOA,EAAIpU,IAILswD,EAAAhkF,UAAA8kF,kBAAR,WACMhlF,KAAK4kF,kBACP5kF,KAAK4kF,kBAAkBvW,QAAS,EAEhCruE,KAAKmlF,kBAKDjB,EAAAhkF,UAAAilF,eAAR,WACEnlF,KAAK2jF,KAAK11D,KAAI,SAAC42D,GACb,IAAKA,EAASrzD,WAAaqzD,EAASxB,KAElC,OADAwB,EAASxW,QAAS,GACX,KAML6V,EAAAhkF,UAAA4kF,cAAR,WACM9kF,KAAK4kF,oBACP5kF,KAAK4kF,kBAAkBvW,QAAS,EAEhCruE,KAAK4pB,eAAekB,sCAvGzBrmB,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,WACVC,SAAA,w/BAnCO0mB,EAAAA,mDA4CNy2D,EAAAA,gBAAe79E,KAAA,CAACw/E,yBAEhBr6E,EAAAA,UAASnF,KAAA,CAAC,cAAe,CAAEqF,UAAQ,OA8FtC46E,EA3GA,CAIsCF,ICvBtCoB,GAAA,WAAA,SAAAA,KAoB6B,2BApB5BvgF,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACA42E,IAEF32E,aAAc,CACZ+9E,GACAU,GACAC,GACAQ,IAEF14D,gBAAiB,CACfu3D,GACAW,IAEFz+E,QAAS,CACPw+E,GACAS,QAGyBkB,EApB7B,GCPMC,GAA+B,gBAWrCC,GAAA,WAAA,SAAAA,IAOUtlF,KAAAulF,aAAwBF,GAclC,OARE7lF,OAAAsE,eAA6BwhF,EAAAplF,UAAA,cAAW,KAIxC,WACE,OAAOF,KAAKulF,kBALd,SAAyCp0D,GACvCnxB,KAAKulF,aAAer4E,EAASikB,EAAM,UAAYA,EAAOk0D,wDAdzD5gF,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,sBACVC,SAAA,sQACA4G,UAAW,CAAE2G,yCAOZlO,EAAAA,MAAKC,KAAA,CAAC,kCAGND,EAAAA,MAAKC,KAAA,CAAC,qBAQTqhF,EArBA,GCNAE,GAAA,WAAA,SAAAA,IAiCgCxlF,KAAAylF,kBAA6B,EAgC7D,OAXEjmF,OAAAsE,eAAoC0hF,EAAAtlF,UAAA,qBAAkB,KAItD,WACE,OAAOF,KAAK0lF,yBALd,SAAuDnkF,GACrDvB,KAAK0lF,oBAAsB94E,EAAarL,EAAO,oCAOjD/B,OAAAsE,eAAI0hF,EAAAtlF,UAAA,gBAAa,KAAjB,WACE,OAAOF,KAAK2lF,SAAW3lF,KAAK4lF,iFApD7B5hF,EAAAA,MAAKC,KAAA,CAAC,kCAaND,EAAAA,MAAKC,KAAA,CAAC,mCAGND,EAAAA,MAAKC,KAAA,CAAC,qCAGND,EAAAA,MAAKC,KAAA,CAAC,+CAGND,EAAAA,MAAKC,KAAA,CAAC,sCAGND,EAAAA,MAAKC,KAAA,CAAC,wCASND,EAAAA,MAAKC,KAAA,CAAC,sDASND,EAAAA,MAAKC,KAAA,CAAC,4BAWTuhF,EAjEA,GCaAK,GAAA,SAAA1hF,GAQE,SAAA0hF,EAAoBC,EAAqBhsE,GAAzC,IAAApU,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAogF,aAAAA,EAElBpgF,EAAKqU,UAAYD,EAAe,MAAa,YAWjD,OAjByC1V,EAAAA,EAAAA,GASvCyhF,EAAA3lF,UAAAmE,SAAA,WACErE,KAAK+lF,SAAS/lF,KAAK0mD,QAGbm/B,EAAA3lF,UAAA6lF,SAAR,SAAiBC,GACfhmF,KAAK8lF,aAAaC,SAASC,wBAlB9BvhF,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,cACVC,SAAA,mwBA1BOshF,EAAAA,aADmBjsE,EAAAA,oBA8C5B6rE,EArBA,CAIyCL,ICVzCU,GAAA,WAAA,SAAAA,IAOUlmF,KAAA0lF,oBAA+B,EAczC,OARElmF,OAAAsE,eAAoCoiF,EAAAhmF,UAAA,qBAAkB,KAItD,WACE,OAAOF,KAAK0lF,yBALd,SAAuDnkF,GACrDvB,KAAK0lF,oBAAsB/gD,OAAOmF,UAAUvoC,GAASA,EAAQ,uDAdhEkD,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,2BACVC,SAAA,0YACA4G,UAAW,CAAE2G,qDAOZlO,EAAAA,MAAKC,KAAA,CAAC,sDAGND,EAAAA,MAAKC,KAAA,CAAC,4BAQTiiF,EArBA,GCZMC,GAAiC,sCAWvCC,GAAA,WAAA,SAAAA,IAaWpmF,KAAAqmF,cAAgBF,GAE3B,2BAfC1hF,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,sBACVC,SAAA,2gCACA4G,UAAW,CAAE2G,yCAKZlO,EAAAA,MAAKC,KAAA,CAAC,qCAGND,EAAAA,MAAKC,KAAA,CAAC,wBAITmiF,EAfA,GCFAE,GAAA,WAAA,SAAAA,KAkBgC,2BAlB/BzhF,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACAH,EACAosB,IAEFhsB,aAAc,CACZsgF,GACAO,GACAK,GACAE,IAEFnhF,QAAS,CACP4gF,IAEFt6E,UAAW,GACX0lB,QAAS,OAEqBq1D,EAlBhC,GCCAC,GAAA,WAAA,SAAAA,IAGUvmF,KAAAsR,WAAsB,EAGtBtR,KAAA4rB,WAAsB,EACtB5rB,KAAAwmF,UAAqB,EAI7BxmF,KAAAqnD,gBAA2B,OAqJRrnD,KAAA0R,MAAmC,IAAIC,EAAAA,aAGjC3R,KAAAymF,WAAiC,IAAI90E,EAAAA,aAGlC3R,KAAAuzB,cAAoC,IAAI5hB,EAAAA,aAGtC3R,KAAAu0B,gBAAsC,IAAI5iB,EAAAA,aAGnD3R,KAAA0mF,QAA8B,IAAI/0E,EAAAA,aAG7B3R,KAAA2lE,YAAkC,IAAIh0D,EAAAA,aAIlE,OA5JEnS,OAAAsE,eAA2ByiF,EAAArmF,UAAA,aAAU,KAIrC,WACE,OAAOF,KAAK2mF,iBALd,SAAsCplF,GACpCvB,KAAK2mF,YAAeplF,GAA0B,iBAAVA,EAAsBA,EAAQgD,2CAgBpE/E,OAAAsE,eAAyByiF,EAAArmF,UAAA,WAAQ,KAMjC,WACE,OAAOF,KAAKsR,eAPd,SAAkC/P,GAChCvB,KAAKsR,UAAY7E,EAAiBlL,GAElCvB,KAAKymF,WAAW10E,KAAK/R,KAAKwxB,2CAiB5BhyB,OAAAsE,eAAuByiF,EAAArmF,UAAA,SAAM,KAK7B,WACE,OAAOF,KAAKijB,aANd,SAA8B1hB,GAC5BvB,KAAKijB,QAAUlW,SAAQ,EAAc,IACrC/M,KAAK09E,UAAU19E,KAAK0V,yCActBlW,OAAAsE,eAAqByiF,EAAArmF,UAAA,OAAI,KAKzB,WACE,OAAOF,KAAK4mF,WANd,SAA0BrlF,GACxBvB,KAAK4mF,MAAQ15E,EAAS3L,EAAO,UAAYA,EAAQ,GACjDvB,KAAK09E,UAAU19E,KAAK0V,yCAgBtBlW,OAAAsE,eAA0ByiF,EAAArmF,UAAA,WAAQ,KAKlC,WACE,OAAOF,KAAK4rB,eANd,SAAmCrqB,GACjCvB,KAAK4rB,UAA2B,KAAf,GAA2Bnf,EAAiBlL,GAC7DvB,KAAK09E,UAAU19E,KAAK0V,yCAgBtBlW,OAAAsE,eAAwByiF,EAAArmF,UAAA,UAAO,KAI/B,WACE,OAAOF,KAAKwmF,cALd,SAAgCjlF,GAC9BvB,KAAKwmF,SAA0B,KAAf,GAA2B/5E,EAAiBlL,oCAgB9D/B,OAAAsE,eAA8ByiF,EAAArmF,UAAA,eAAY,KAK1C,WACE,OAAOF,KAAK6mF,mBANd,SAA2CtlF,GACzCvB,KAAK6mF,cAAgB35E,EAAS3L,EAAO,UAAYA,EAAQ,GACzDvB,KAAK09E,UAAU19E,KAAK0V,yCAmBtBlW,OAAAsE,eAAsByiF,EAAArmF,UAAA,QAAK,KAK3B,WACE,OAAOF,KAAK4mD,YANd,SAA4BrlD,GAC1BvB,KAAK4mD,OAAS15C,EAAS3L,EAAO,UAAYA,EAAQ,GAClDvB,KAAK09E,UAAU19E,KAAK0V,6EAjIrB1R,EAAAA,MAAKC,KAAA,CAAC,kCAiBND,EAAAA,MAAKC,KAAA,CAAC,8BAoBND,EAAAA,MAAKC,KAAA,CAAC,0BAgBND,EAAAA,MAAKC,KAAA,CAAC,4BAkBND,EAAAA,MAAKC,KAAA,CAAC,gCAkBND,EAAAA,MAAKC,KAAA,CAAC,mCAiBND,EAAAA,MAAKC,KAAA,CAAC,2CAUND,EAAAA,MAAKC,KAAA,CAAC,oCAWND,EAAAA,MAAKC,KAAA,CAAC,0BAUN2N,EAAAA,OAAM3N,KAAA,CAAC,+BAGP2N,EAAAA,OAAM3N,KAAA,CAAC,wCAGP2N,EAAAA,OAAM3N,KAAA,CAAC,6CAGP2N,EAAAA,OAAM3N,KAAA,CAAC,uCAGP2N,EAAAA,OAAM3N,KAAA,CAAC,kCAGP2N,EAAAA,OAAM3N,KAAA,CAAC,qBAIVsiF,EAnLA,GCaAO,GAAA,SAAA3iF,GAUE,SAAA2iF,EAAYhtE,UACV3V,EAAAvD,KAAAZ,OAAOA,KAoFX,OA3FwCoE,EAAAA,EAAAA,GAEtC5E,OAAAsE,eAAIgjF,EAAA5mF,UAAA,kBAAe,KAAnB,WACE,QAASF,KAAK2lE,YAAY9I,UAAU,oCAOtCiqB,EAAA5mF,UAAAmE,SAAA,WACErE,KAAK09E,UAAU19E,KAAK0V,SAGtBoxE,EAAA5mF,UAAA6mF,sBAAA,WACE,QAAS/mF,KAAK0mD,SAAW1mD,KAAKgnF,QAAUhnF,KAAK0mF,QAAQ7pB,UAAU,IAGjEiqB,EAAA5mF,UAAA4R,QAAA,SAAQ5L,GACDlG,KAAKwxB,UACRxxB,KAAK0R,MAAMK,KAAK7L,IAIpB4gF,EAAA5mF,UAAA+mF,SAAA,SAAS/gF,GACFlG,KAAKwxB,WACRtrB,EAAMiuB,kBACNplB,OAAOiB,KAAKhQ,KAAKgnF,KAAM,YAI3BF,EAAA5mF,UAAAgnF,iBAAA,SAAiBhhF,GACVlG,KAAKwxB,WACRtrB,EAAMiuB,kBACNn0B,KAAKuzB,cAAcxhB,SAIvB+0E,EAAA5mF,UAAAinF,mBAAA,SAAmBjhF,GACZlG,KAAKwxB,WACRtrB,EAAMiuB,kBACNn0B,KAAKu0B,gBAAgBxiB,SAIzB+0E,EAAA5mF,UAAAmmE,eAAA,SAAengE,GACRlG,KAAKwxB,WACRtrB,EAAMiuB,kBACNn0B,KAAK2lE,YAAY5zD,SAIrB+0E,EAAA5mF,UAAAw9E,UAAA,SAAUhoE,GACR,GAAIA,EAAQ,KACN0xE,EAAa1xE,EACX2xE,EAAmBrnF,KAAK0mF,QAAQ7pB,UAAUl8D,OAAS,GAAKX,KAAKgnF,KAO/DhnF,KAAKsnF,WACPF,GAJmB,GAOjBC,IAAqBrnF,KAAK0mD,QAC5B0gC,GAToB,IAYlBpnF,KAAK0mD,QACP0gC,GAXkB,IAchBpnF,KAAKunF,eACPH,GAAc/mD,IAGhBrgC,KAAKqnD,gBAAqB+/B,EAAU,UAEpCpnF,KAAKqnD,gBAAkB,QAI3By/B,EAAA5mF,UAAAsnF,cAAA,SAActhF,GACPlG,KAAKwxB,WACRtrB,EAAMiuB,kBACNn0B,KAAK0mF,QAAQ30E,6BA3FlBtN,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,aACVC,SAAA,63DAhC0BqV,EAAAA,oBA6H5B8sE,EA/FA,CAIwCP,ICvBxCkB,GAAA,WAAA,SAAAA,KAU+B,2BAV9B5iF,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,aACA+mB,IAEF7mB,QAAS,CACP6hF,IAEF9hF,aAAc,CAAC8hF,QAEcW,EAV/B,GCXAC,GAAA,WAkCA,SAAAA,KAuEmC,2BAvElC7iF,EAAAA,SAAQZ,KAAA,CAAC,CACRe,aAAc,GACdF,QAAS,CACPF,EACA6G,EACAuG,GACAiI,GACA0I,GACA4I,GACAO,GACAwC,GACA7B,GACAgC,GACAkD,GACAowC,GACA7G,GACAmK,GACAvJ,GACAkM,GACA/0C,GACAm/C,GACAW,GACA/9C,GACA6hD,GACA8D,GACAgB,GACA3qD,GACAutD,GACAuE,GACAjgD,GACAuiD,GACAroB,GACAupB,GACAmB,IAEFxiF,QAAS,CACPL,EACA6G,EACAuG,GACAiI,GACA0I,GACA4I,GACAO,GACAwC,GACA7B,GACAgC,GACAkD,GACAowC,GACA7G,GACAmK,GACAvJ,GACAkM,GACA/0C,GACAm/C,GACAW,GACA/9C,GACA6hD,GACA8D,GACAgB,GACA3qD,GACAutD,GACAuE,GACAjgD,GACAuiD,GACAroB,GACAupB,GACAmB,IAEFl8E,UAAW,GACXyqB,UAAW,OAEsB0xD,EAzGnC,GCAAC,GAAA,WAIA,SAAAA,KAamC,2BAblC9iF,EAAAA,SAAQZ,KAAA,CAAC,CACRe,aAAc,GAEdF,QAAS,CACP0T,IAEFvT,QAAS,CACPuT,IAEFjN,UAAW,GACXyqB,UAAW,OAGsB2xD,EAjBnC,GCAAC,GAAA,WAEA,SAAAA,KAO+B,2BAP9B/iF,EAAAA,SAAQZ,KAAA,CAAC,CACRe,aAAc,GACdF,QAAS,GACTG,QAAS,GACTsG,UAAW,GACXyqB,UAAW,OAEkB4xD,EAT/B,OCUEC,MAAA,EAEAC,QAAA,iDCFF,kBAAA,SAAAC,KAcA,OAXEA,EAAA7nF,UAAA8nF,QAAA,SAAQC,GACNjoF,KAAKkoF,WAAWC,GAAcL,QAASG,IAIzCF,EAAA7nF,UAAAkoF,MAAA,SAAMC,GACJroF,KAAKkoF,WAAWC,GAAcN,MAAOQ,IAKzCN,KCXaO,GAAgC,CAC3CvsE,GAAE,CAA6BwsE,GAAI,MACnCvsE,GAAE,CAA6BusE,GAAI,MACnCzsE,GAAE,CAA6BysE,GAAI,OAGxBC,GAAkC,CAC7CzsE,GAAE,CAA+Bs4C,OAAQ,SAAU2zB,QAAS,WAC5DhsE,GAAE,CAA+Bq4C,OAAQ,WAAY2zB,QAAS,aAC9DlsE,GAAE,CAA+Bu4C,OAAQ,WAAY2zB,QAAS,cAWhES,GAAA,WAAA,SAAAA,IAcEzoF,KAAAuzB,cAAgC,CAAElxB,MAAO,KAAMutB,OAAM,cAoGvD,OArFE64D,EAAAvoF,UAAA+G,YAAA,WACEjH,KAAK0oF,kBAAkBx9E,eAGzBu9E,EAAAvoF,UAAAmE,SAAA,WAAA,IAAAqB,EAAA1F,KACEA,KAAK0oF,kBAAoB1oF,KAAKwmD,SAASpzB,UAAU9nB,UAAS,SAAC8gB,GAAS,OAAA1mB,EAAK0kB,aAI3Eq+D,EAAAvoF,UAAAksB,MAAA,WACEpsB,KAAKwmD,SAASp6B,QACdpsB,KAAKoqB,WAGPq+D,EAAAvoF,UAAAkqB,QAAA,WACMpqB,KAAKmqB,cACPnqB,KAAKmqB,aAAaC,WAKtBq+D,EAAAvoF,UAAAyoF,aAAA,SAAapB,EAAeh0D,EAAgBq1D,EAAiBr0D,GAA7D,IAAA7uB,EAAA1F,KAEEA,KAAKuzB,cAAgB,CACnBlxB,MAAOklF,EACP33D,OAAM,WACE2D,GACFA,IAEF7tB,EAAK0mB,UAIPw8D,IACF5oF,KAAKu0B,gBAAkB,CACrBlyB,MAAOumF,EACPh5D,OAAM,WACA2E,GACFA,IAEF7uB,EAAK0mB,YAObq8D,EAAAvoF,UAAA8P,KAAA,SAAK64E,EACAC,EACA3+D,GASH,OAPAnqB,KAAK0mD,MAAQmiC,EAAcniC,MAC3B1mD,KAAK+oF,QAAUF,EAAcE,QAE7B/oF,KAAKmqB,aAAeA,EAEpBnqB,KAAKgpF,kBAAkBH,EAAeC,GAE9BA,GACN,KAAKX,GAAcL,QACjB9nF,KAAK2oF,aACH3oF,KAAKipF,gBAAgBjB,QAAS,EAAyCA,QACvEhoF,KAAKipF,gBAAgB50B,OAAQ,EAAyCA,QACxE,MAEF,KAAK8zB,GAAcN,MACjB7nF,KAAK2oF,aAAa3oF,KAAKkpF,cAAcX,GAAI,EAAuCA,IAKpFvoF,KAAKwmD,SAASx2C,QAGRy4E,EAAAvoF,UAAA8oF,kBAAR,SAA0BH,EAAgEC,OAClFK,EAAgBb,GAChBc,EAAkBZ,GAClBx7D,EAAW67D,EAAc77D,SAE3B87D,IAAeX,GAAcN,MAC/B7nF,KAAKkpF,cAAa9oF,EAAA,GAAO+oF,EAAcv9E,GAAsBu9E,EAAct9E,KAAuBmhB,GAElGhtB,KAAKipF,gBAAe7oF,EAAA,GAAOgpF,EAAgBx9E,GAAsBw9E,EAAgBv9E,KAAuBmhB,wBA/G7GvoB,EAAAA,UAASR,KAAA,CAAC,CACTU,SAAA,0LAICyE,EAAAA,UAASnF,KAAA,CAACwvB,GAAmB,CAAEnqB,UAAQ,OA6G1Cm/E,EAlHA,GCLAY,GAAA,SAAAllF,GAGE,SAAAklF,EAAoBxhC,GAApB,IAAAniD,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAmiD,qBAAAA,IAStB,OAXsCzjD,EAAAA,EAAAA,GAMpCilF,EAAAnpF,UAAAgoF,WAAA,SAAWY,EAA2BD,OAC9B1+D,EAAkCnqB,KAAK6nD,qBAAqB3C,6BAA6BujC,IAC/Ft+D,EAAa49B,kBAAkBj9B,gBAC/BX,EAAaQ,SAAS3a,KAAK64E,EAAeC,EAAY3+D,wBAVzD1f,EAAAA,sDA1BQq6C,MAsCTukC,EAZA,CACsCtB,QCtBpCuB,OAAA,EAEAC,IAAA,mDCFA1sE,MAAA,EAEA2sE,YAAA,EAEAvtB,QAAA,EAEAC,QAAA,2GCSF,kBAAA,SAAAutB,IAGEzpF,KAAA0pF,SAAqC,GAGrC1pF,KAAA2pF,YAAwC,GAG9B3pF,KAAA4pF,gBAAkB,IAiG9B,OA1FSH,EAAAvpF,UAAA2pF,QAAP,SAAeC,GACb9pF,KAAK+pF,cAAc/pF,KAAKgqF,aAAaF,EAAcG,GAAehuB,WAQ7DwtB,EAAAvpF,UAAAgqF,QAAP,SAAeJ,GACb9pF,KAAK+pF,cAAc/pF,KAAKgqF,aAAaF,EAAcG,GAAe/tB,WAQ7DutB,EAAAvpF,UAAAsD,MAAP,SAAasmF,GACX9pF,KAAK+pF,cAAc/pF,KAAKgqF,aAAaF,EAAcG,GAAeptE,SAQ7D4sE,EAAAvpF,UAAAiqF,YAAP,SAAmBL,GACjB9pF,KAAK+pF,cAAc/pF,KAAKgqF,aAAaF,EAAcG,GAAeT,eAU5DC,EAAAvpF,UAAA8pF,aAAR,SAAqBF,EAAwC18E,GAA7D,IAEMqnE,EAFN/uE,EAAA1F,KACMgV,EAAQ,EAGR,EAAgCy/D,cAAgBlwE,WAChD,EAAgCkwE,cAAgB2V,GAAsBd,QACxEt0E,EAAQhV,KAAK2pF,YAAYhpF,OACzB8zE,EAAc2V,GAAsBd,SAEpCt0E,EAAQhV,KAAK0pF,SAAS/oF,OACtB8zE,EAAc2V,GAAsBb,SAGhCc,EAAsB,CAC1BlgE,aAAc5lB,UACdwkF,QAAS,EAAgCA,SAAO,EAChD37E,KAAMA,EACNqnE,YAAaA,EACb7kD,OAAQ,EAAgCA,OACxC06D,YAAa,EAAgCA,YAC7C/3E,SAAUyC,GAUZ,OAPI,EAAgC4a,SAClCy6D,EAAQz6D,OAAM,SAAIpiB,GAChB,EAAgCoiB,SAChClqB,EAAK6kF,eAAe/8E,EAAM2c,gBAIvBkgE,GAsBXZ,mBC9EA,OAvCA,WAYEzpF,KAAAy0E,YAAqC2V,GAAsBd,WCT7DkB,GAAA,SAAArmF,GAsBE,SAAAqmF,EAAmB5gE,EAA2C6gE,GAA9D,IAAA/kF,EACEvB,EAAAvD,KAAAZ,OAAOA,YADU0F,EAAAkkB,eAAAA,EAA2ClkB,EAAA+kF,YAAAA,EAbtD/kF,EAAAglF,OAAiB,GAEjBhlF,EAAAilF,kBAAoB,IAAI3mE,EAAAA,QAExBte,EAAAklF,aAAuB,EAEvBllF,EAAAmlF,gBAA0B,uBAiGpC,OA5GyCzmF,EAAAA,EAAAA,GAuBvComF,EAAAtqF,UAAAuyC,eAAA,SAAelgC,GACbvS,KAAKyqF,YAAY7jF,cAAc0O,MAAMqiC,QAAU,QAE/C33C,KAAK0qF,OAAS,EAAK,GAAE,EAA4B,EAAXn4E,EAElCvS,KAAKy0E,cAAgB2V,GAAsBb,IAC7CvpF,KAAKqqF,QAAQzjF,cAAc0O,MAAMd,IAAMxU,KAAK0qF,OAAS,KAErD1qF,KAAKqqF,QAAQzjF,cAAc0O,MAAMZ,OAAS1U,KAAK0qF,OAAS,MAM5DF,EAAAtqF,UAAAksB,MAAA,WACEpsB,KAAK4qF,aAAc,EACnB5qF,KAAK2qF,kBAAkBlpF,MAAK,IAI9B+oF,EAAAtqF,UAAA4qF,cAAA,SAAcC,GAkBZ,OAjBA/qF,KAAKoN,KAAO29E,EAAW39E,KACvBpN,KAAK+oF,QAAUgC,EAAWhC,QAC1B/oF,KAAKy0E,YAAcsW,EAAWtW,YAC9Bz0E,KAAKuS,SAAWw4E,EAAWx4E,SAC3BvS,KAAK4vB,OAASm7D,EAAWn7D,OACzB5vB,KAAKsqF,YAAeS,EAAsB,YAAIA,EAAWT,YAAc,SACvEtqF,KAAKmqB,aAAe4gE,EAAW5gE,aAG3BnqB,KAAKy0E,cAAgB2V,GAAsBb,MAC7CvpF,KAAK6qF,gBAAkB,mBAIzB7qF,KAAKyyC,eAAezyC,KAAKuS,UAGjBvS,KAAKoN,MACX,KAAK68E,GAAeptE,MAClB7c,KAAKgrF,YAAc,oBACnBhrF,KAAKmxB,KAAO,iBACZ,MAEF,KAAK84D,GAAeT,YAClBxpF,KAAKgrF,YAAc,mBACnBhrF,KAAKmxB,KAAO,gBACZ,MAEF,KAAK84D,GAAehuB,QAClBj8D,KAAKgrF,YAAc,sBACnBhrF,KAAKmxB,KAAO,cACZ,MAEF,KAAK84D,GAAe/tB,QAClBl8D,KAAKgrF,YAAc,sBACnBhrF,KAAKmxB,KAAO,mBAKhBnxB,KAAK4pB,eAAekB,iBAGtB0/D,EAAAtqF,UAAA+qF,eAAA,WACE,OAAOjrF,KAAK4qF,aAGdJ,EAAAtqF,UAAAk5E,QAAA,WACE,OAAOp5E,KAAKmxB,MAGdq5D,EAAAtqF,UAAAgrF,mBAAA,WACE,OAAOlrF,KAAK6qF,iBAGdL,EAAAtqF,UAAAirF,eAAA,WACE,OAAOnrF,KAAKgrF,aAIdR,EAAAtqF,UAAAkrF,iBAAA,WACEprF,KAAK4vB,OAAO5vB,2BA7GfyE,EAAAA,UAASR,KAAA,CAAC,CACTS,SAAU,cACVC,SAAA,mcAhBO0mB,EAAAA,yBAA8BniB,EAAAA,+CAkCpCE,EAAAA,UAASnF,KAAA,CAAC,UAAW,CAAEqF,UAAQ,OA4FlCkhF,EAhHA,CAIyCa,ICWzCC,GAAA,SAAAnnF,GAKE,SAAAmnF,EAAoBzjC,GAApB,IAAAniD,EACEvB,EAAAvD,KAAAZ,OAAOA,YADW0F,EAAAmiD,qBAAAA,WAFsBzjD,EAAAA,EAAAA,GAM1CknF,EAAAprF,UAAA6pF,cAAA,SAAcM,GAAd,IAAA3kF,EAAA1F,KACQmqB,EAAkCnqB,KAAK6nD,qBAAqB3C,6BAA6BslC,IAE/FH,EAAQlgE,aAAeA,EAEvBA,EAAa49B,kBAAkBj9B,gBAC/BX,EAAaQ,SAASmgE,cAAcT,GAEhCA,EAAQ5V,cAAgB2V,GAAsBb,IAChDvpF,KAAK0pF,SAASxmF,KAAKinB,GAEnBnqB,KAAK2pF,YAAYzmF,KAAKinB,GAGxBnqB,KAAK2qF,kBAAkBxgE,GAEnBkgE,EAAQz6D,SAAWrrB,WACrBsE,WAAU,WACRnD,EAAK6kF,eAAepgE,IACnBnqB,KAAK4pF,kBAIZ0B,EAAAprF,UAAAqqF,eAAA,SAAeF,OACTkB,EAQEv2E,GALJu2E,EADElB,EAAQ1/D,SAAS8pD,cAAgB2V,GAAsBb,IACjDvpF,KAAK0pF,SAEL1pF,KAAK2pF,aAGK31E,QAAQq2E,GAC5BkB,EAAM97E,OAAOuF,EAAO,GAEpBhV,KAAK6nD,qBAAqBrC,8BAA8B6kC,GAExD,IAAK,IAAImB,EAAQ,EAAGA,EAAQD,EAAM5qF,OAAQ6qF,IACxCD,EAAMC,GAAO7gE,SAAS8nB,eAAe+4C,IAIjCF,EAAAprF,UAAAyqF,kBAAR,SAA0BxgE,GAA1B,IAAAzkB,EAAA1F,KACEmqB,EAAaQ,SAASggE,kBAAkBr/E,UAAS,WAC/C5F,EAAK6kF,eAAepgE,0BArDzB1f,EAAAA,WAAUxG,KAAA,CAAC,CACVmuB,WAAY,oDA5BL0yB,6HA2BT,CAG4C2kC,kBCuC1C,SAAAgC,EAAoB3B,EAA2B4B,GAA3B1rF,KAAA8pF,aAAAA,EAA2B9pF,KAAA0rF,OAAAA,EAF/C1rF,KAAA2rF,kBAAoB,CAAC,UAAW,UAAW,QAAS,eA8GtD,OA1GEF,EAAAvrF,UAAA0rF,UAAA,SAAUh0B,EAA2Bn2D,GAArC,IAAAiE,EAAA1F,KACQ6rF,EAAej0B,EAAQk0B,QAI7B,OAFAl0B,EAAUA,EAAQm0B,QAAQC,IAvEA,oBAuE6BhsF,KAAKisF,sCAAsCr0B,GAAWA,EAEtGn2D,EAAKyqF,OAAOt0B,GAAStqB,KAAK4B,EAAAA,IAAG,SAAE3B,GAEhCA,aAAoB8qB,EAAAA,cAEtB3yD,EAAKymF,gBAAgB5+C,IAGxB,SAAG/pC,GAEFkC,EAAK0mF,qBAAqB5oF,EAAOqoF,OAKrCJ,EAAAvrF,UAAAisF,gBAAA,SAAgB5+C,GAAhB,IAAA7nC,EAAA1F,KACE,GAAIutC,EAASvrC,MAAQurC,EAASvrC,KAAKqqF,UAAW,KAEtCC,EAAW/+C,EAASvrC,KAAKqqF,UAE3BC,aAAoB3sF,MACtB2sF,EAAS/yE,QAAO,SAAEwvE,GAChBrjF,EAAK+/E,iBAAiBsD,KAGxB/oF,KAAKylF,iBAAiB6G,KAK5Bb,EAAAvrF,UAAAksF,qBAAA,SAAqB7+C,EAA6BqqB,OAC1C20B,EAAoC,IAApBh/C,EAASpjC,OAC3BojC,EAAS/pC,MACT,CAAEgpF,KAAM,EAAGzD,QAAS,iCAAkC0D,gBAAiBl/C,EAASw7C,SAE9E2D,EAAkB1sF,KAAK0sF,gBAAgB90B,GAGzC20B,GAAiBA,EAAcxD,UAAY2D,GAC7C1sF,KAAKylF,iBAAgBrlF,EAAA,GAAMmsF,EAAa,CAAEn/E,KAAM,YAI5Cq+E,EAAAvrF,UAAA+rF,sCAAR,SAA8Cr0B,GAC5C,OAAOA,GAAWA,EAAQk0B,MAAM,CAACC,QAASn0B,EAAQm0B,QAAQnkD,UApHhC,uBAuHpB6jD,EAAAvrF,UAAAwsF,gBAAR,SAAwB90B,OAChB+0B,EAAe/0B,GAAWA,EAAQm0B,QAAQxhF,IAxHtB,oBA0H1B,OAAOoiF,GAAgE,SAAhDA,EAAa99E,WAAWuwD,qBAGzCqsB,EAAAvrF,UAAAulF,iBAAR,SAAyBl4C,OACjBq/C,EAAmB5sF,KAAK2rF,kBAAkB5nF,SAASwpC,EAASngC,MAAQmgC,EAASngC,KAAO,cAEpFy/E,EAAqB7sF,KAAK8sF,2BAA2Bv/C,GAE3DvtC,KAAK8pF,aAAa8C,GAAkB,CAClC7D,QAASx7C,EAASw7C,QAClBuB,YAAauC,EAAmBxqF,MAChCutB,OAAQi9D,EAAmBj9D,UAIvB67D,EAAAvrF,UAAA4sF,2BAAR,SAAmCP,OAE7BM,EACAE,EAEAC,EAAsBT,EAAcxD,QAAQrlF,OAAO,IAAI6oF,EAAcE,iBAgBzE,OAdIF,EAAcU,SAAWV,EAAcU,mBAAmBttF,OAC5D4sF,EAAcU,QAAQ1zE,QAAO,SAAE2zE,GAC7BF,GAAuB,KAAKE,EAAYnE,WAIxCwD,EAAcY,SAAaZ,EAAcE,iBAAmBF,EAAcU,SAInEV,EAAcE,iBAAmBF,EAAcU,WACxDF,EAAoB,WACpBF,EAAqB7sF,KAAKotF,6BAA6Bb,EAAeS,KALtED,EAAoB,QACpBF,EAAqB7sF,KAAKqtF,wBAAwBd,EAAcY,UAM3D,CAAE9qF,MAAO0qF,EAAmBn9D,OAAQi9D,IAGrCpB,EAAAvrF,UAAAmtF,wBAAR,SAAgCF,GAC9B,OAAA,WAAep+E,OAAOiB,KAAKm9E,EAAS,YAG9B1B,EAAAvrF,UAAAktF,6BAAR,SAAqCb,EAAoBS,GAAzD,IAAAtnF,EAAA1F,KACE,OAAA,WACE0F,EAAKgmF,OAAOtD,MAAM,CAChB1hC,MAAO6lC,EAAcC,KACrBzD,QAASiE,EACTzE,GAAIgE,EAAcY,QAAUznF,EAAK2nF,wBAAwBd,EAAcY,SAAW5oF,cAI1FknF,KCpKA6B,GAAA,SAAAnpF,GAEE,SAAAmpF,EAAYxD,EAAsC4B,UAChDvnF,EAAAvD,KAAAZ,KAAM8pF,EAAc4B,IAAO1rF,KAE/B,OAJ+CoE,EAAAA,EAAAA,uBAD9CqG,EAAAA,sDAZQ6gF,UACAjC,MAgBTiE,EALA,CAC+C7B,IChB/C8B,GAAA,WAOA,SAAAA,KAYwC,2BAZvC1oF,EAAAA,SAAQZ,KAAA,CAAC,CACRsH,UAAW,CACT+hF,GACAjE,GACAiC,GACA,CACEjpE,QAASmrE,EAAAA,kBACTC,SAAUH,GACV7qE,OAAO,QAI2B8qE,EAnBxC,GCUAG,GAAA,WAAA,SAAAA,IAGE1tF,KAAA2tF,mBAAsC,IAAI3pE,EAAAA,QAU5C,OARE0pE,EAAAxtF,UAAA0tF,sBAAA,WACE,OAAO5tF,KAAK2tF,mBAAmBniB,gBAGjCkiB,EAAAxtF,UAAA2tF,KAAA,SAAKtsF,QAAA,IAAAA,IAAAA,EAAA,GACHvB,KAAK2tF,mBAAmBlsF,KAAKF,wBAVhCkJ,EAAAA,aAaDijF,EAbA,GCuFAI,GAAA,WAUE,SAAAA,EACUH,EACA9lC,GADA7nD,KAAA2tF,mBAAAA,EACA3tF,KAAA6nD,qBAAAA,EAPF7nD,KAAA+tF,wBAAoExpF,UAEpEvE,KAAAguF,gBAA0B,EAC1BhuF,KAAAiuF,gBAA0B,SAMlCH,EAAA5tF,UAAA0rF,UAAA,SAAUh0B,EAA2Bn2D,GAArC,IAAAiE,EAAA1F,KAEQkuF,EAAet2B,EAAQk0B,QAO7B,OALAl0B,EAAU53D,KAAKmuF,+BAA+B,CAxGnB,oCACZ,uBAuGqEv2B,GAEpF53D,KAAKouF,yBAAwB,EAAMF,GACnCluF,KAAKquF,yBAAwB,EAAMH,GAE5BzsF,EAAKyqF,OAAOt0B,GAAStqB,KAC1B4B,EAAAA,IAAG,SAAE3B,GACCA,aAAoB8qB,EAAAA,eACtB3yD,EAAK0oF,yBAAwB,EAAOF,GACpCxoF,EAAK2oF,yBAAwB,EAAOH,MAGxCI,EAAAA,WAAU,SAAC9qF,GAIT,OAHAkC,EAAK0oF,yBAAwB,EAAOF,GACpCxoF,EAAK2oF,yBAAwB,EAAOH,GAE7BK,EAAAA,WAAW/qF,OAKxBsqF,EAAA5tF,UAAAsuF,wBAAA,WACE,OAAOxuF,KAAK2tF,mBAAmBC,yBAGzBE,EAAA5tF,UAAAuuF,aAAR,WACOzuF,KAAK+tF,0BACR/tF,KAAK+tF,wBAA0B/tF,KAAK6nD,qBAAqB3C,6BAA6BryB,IACtF7yB,KAAK+tF,wBAAwBpjE,SAASgI,YAAa,EACnD3yB,KAAK+tF,wBAAwBpjE,SAASf,eAAekB,kBAIjDgjE,EAAA5tF,UAAAwuF,eAAR,WACM1uF,KAAK+tF,0BACP/tF,KAAK6nD,qBAAqBrC,8BAA8BxlD,KAAK+tF,yBAC7D/tF,KAAK+tF,wBAA0BxpF,YAI3BupF,EAAA5tF,UAAAiuF,+BAAR,SAAuCQ,EAA8B/2B,OAC/Dg3B,GAAiB,EAUrB,OARAD,EAAcp1E,QAAO,SAACs1E,GAChBj3B,EAAQm0B,QAAQC,IAAI6C,KACtBj3B,EAAQm0B,QAAQnkD,UAAOinD,GACvBD,GAAiB,KAKdA,EAAiBh3B,EAAQk0B,MAAM,CAACC,QAASn0B,EAAQm0B,UAAYn0B,GAG9Dk2B,EAAA5tF,UAAAkuF,wBAAR,SAAgCU,EAAsBl3B,OAE9Cm3B,EAAoCn3B,EAAQm0B,QAAQC,IAhK/B,qCAiKrB6C,EAAcj3B,EAAQm0B,QAAQxhF,IAjKT,qCAmKvBwkF,GAA+E,SAAzCF,EAAYhgF,WAAWzC,gBAIjEpM,KAAKguF,iBAAmBc,EAAc,GAAK,EAC3C9uF,KAAK2tF,mBAAmBE,KAAK7tF,KAAKguF,mBAI5BF,EAAA5tF,UAAAmuF,wBAAR,SAAgCS,EAAsBl3B,GAGpD,GAFqCA,EAAQm0B,QAAQC,IA5KtC,uBA8KmB,CAGhC,GAA6C,UAFzBp0B,EAAQm0B,QAAQxhF,IA/KvB,uBAiLGsE,WAAWzC,cACzB,OAGFpM,KAAKiuF,iBAAmBa,EAAc,GAAK,EAC3C9uF,KAAKiuF,gBAAkB,EAAIjuF,KAAKyuF,eAAiBzuF,KAAK0uF,uCAjG3DjkF,EAAAA,WAAUxG,KAAA,CAAC,CACVmuB,WAAY,oDAzFLs7D,UAHA5oC,4IA2FT,GCjGAkqC,GAAA,WAUA,SAAAA,KAaoC,2BAbnCnqF,EAAAA,SAAQZ,KAAA,CAAC,CACRsH,UAAW,CACTmiF,GACAI,GACAhpC,GACA,CACEziC,QAASmrE,EAAAA,kBACTC,SAAUK,GACVrrE,OAAO,IAGX+I,gBAAiB,CAACqH,GAA4BG,QAEZg8D,EAvBpC,GCAAC,GAAA,WAKA,SAAAA,KAaqC,2BAbpCpqF,EAAAA,SAAQZ,KAAA,CAAC,CACRe,aAAc,GACdF,QAAS,CACPyoF,GACAyB,IAEF/pF,QAAS,CACPsoF,GACAyB,IAEFzjF,UAAW,GACXyqB,UAAW,OAEwBi5D,EAlBrC,GCAAC,GAAA,WAIA,SAAAA,KAW8B,2BAX7BrqF,EAAAA,SAAQZ,KAAA,CAAC,CACRe,aAAc,GACdF,QAAS,CACPixB,IAEF9wB,QAAS,CACP8wB,IAEFxqB,UAAW,GACXyqB,UAAW,OAEiBk5D,EAf9B,GCSAC,GAAA,WAAA,SAAAA,KAMqC,2BANpCtqF,EAAAA,SAAQZ,KAAA,CAAC,CACRsH,UAAW,CACTqsB,IAEF5B,UAAW,OAEwBm5D,EANrC,GCTAC,GAAA,WAIA,SAAAA,KAS0C,2BATzCvqF,EAAAA,SAAQZ,KAAA,CAAC,CACRe,aAAc,GACdF,QAAS,GACTG,QAAS,GACTsG,UAAW,CACTu5C,IAEF9uB,UAAW,OAE6Bo5D,EAb1C,GCSAC,GAAA,WAAA,SAAAA,KAKwC,2BALvCxqF,EAAAA,SAAQZ,KAAA,CAAC,CACRsH,UAAW,CACT2G,QAGoCm9E,EALxC,GCAAC,GAAA,WAAA,SAAAA,KAMiC,2BANhCzqF,EAAAA,SAAQZ,KAAA,CAAC,CACRsH,UAAW,CACT+R,IAEF0Y,UAAW,OAEoBs5D,EANjC,GCTAC,GAAA,WAMA,SAAAA,KAiB+B,2BAjB9B1qF,EAAAA,SAAQZ,KAAA,CAAC,CACRe,aAAc,CACZyjF,IAEF3jF,QAAS,CACPkwB,IAEF/vB,QAAS,CACPwjF,IAEFj9D,gBAAiB,CACfi9D,IAEFl9E,UAAW,CACT89E,QAG2BkG,EAvB/B,iBC2BA,SAAAC,KAkBA,OAhBEA,EAAAtvF,UAAAg1B,UAAA,SAAU3zB,EAAe0C,WACvB,IAAK1C,EACH,MAAO,GAGH0C,aAAgBtE,QACpBsE,EAAO,CAACA,QAGV,IAAkB,IAAAwrF,E1RsEf,SAAkBrsF,GACrB,IAAIC,EAAsB,mBAAXT,QAAyBQ,EAAER,OAAOC,UAAWrC,EAAI,EAChE,OAAI6C,EAAUA,EAAEzC,KAAKwC,GACd,CACH3B,KAAM,WAEF,OADI2B,GAAK5C,GAAK4C,EAAEzC,SAAQyC,OAAI,GACrB,CAAE7B,MAAO6B,GAAKA,EAAE5C,KAAMqB,MAAOuB,K0R5E1BssF,CAAAzrF,GAAI0rF,EAAAF,EAAAhuF,QAAAkuF,EAAA9tF,KAAA8tF,EAAAF,EAAAhuF,OAAE,CAAnB,IAAMmuF,EAAGD,EAAApuF,MACZA,EAAQA,EAAM4O,QAAQ,aAAey/E,wGAGvC,OAAOruF,GAGXiuF,KC9BAK,GAAA,SAAA1rF,GAAA,SAAA0rF,mDAG4E,OAA3CzrF,EAAAA,EAAAA,uBAHhCyxB,EAAAA,KAAI5xB,KAAA,CAAC,CACJ6xB,KAAM,cAEoE+5D,EAH5E,CAGiCL,IClBjCM,GAAA,WAKA,SAAAA,KAeqC,2BAfpCjrF,EAAAA,SAAQZ,KAAA,CAAC,CACRe,aAAc,CACZwlF,IAEF1lF,QAAS,CACPC,EAAAA,cAEFE,QAAS,GAETumB,gBAAiB,CACfg/D,IAEFj/E,UAAW,GACXyqB,UAAW,OAEwB85D,EApBrC,GCAAC,GAAA,WAWA,SAAAA,KAyBiC,2BAzBhClrF,EAAAA,SAAQZ,KAAA,CAAC,CACRe,aAAc,CACZ6qF,IAEF/qF,QAAS,CACPqqF,GACAC,GACAC,GACAC,GACAC,GACAz8D,GACAg9D,IAEF7qF,QAAS,CACPkqF,GACAC,GACAC,GACAC,GACAC,GACAM,GACAC,IAEFvkF,UAAW,GACXyqB,UAAW,OAEoB+5D,EApCjC,GCAAC,GAAA,WAUA,SAAAA,KAqByB,2BArBxBnrF,EAAAA,SAAQZ,KAAA,CAAC,CACRe,aAAc,GACdF,QAAS,CACP4iF,GACAC,GACAC,GACAqH,GACAC,GACAa,IAEF9qF,QAAS,CACPyiF,GACAC,GACAsH,GACArH,GACAsH,GACAa,IAEFxkF,UAAW,CAAE+/E,IACbt1D,UAAW,OAEYg6D,EA/BzB,GCIaC,GAAc,IAAIC,EAAAA,eAA8B,eC8I7DC,GAAA,WAUE,SAAAA,EAC+BC,EACD3mF,EACpB+oB,GAFqBxyB,KAAAowF,OAAAA,EACDpwF,KAAAyJ,KAAAA,EACpBzJ,KAAAwyB,gBAAAA,EAXFxyB,KAAAqwF,QAAe,GAIfrwF,KAAAswF,UAAoB,EAEpBtwF,KAAAuwF,gBAAuB,GAO7BvwF,KAAKwwF,UAAUJ,GA8VnB,OAxUED,EAAAjwF,UAAA8xB,YAAA,WACE,OAAOhyB,KAAKwyB,gBAAgBR,eAa9Bm+D,EAAAjwF,UAAAiM,iBAAA,WACE,OAAOnM,KAAKwyB,gBAAgBrmB,oBAsB9BgkF,EAAAjwF,UAAAqb,YAAA,SAAYvP,EAAkBykF,GAEvBnkF,EAAWN,KAIhBhM,KAAKwyB,gBAAgBjX,YAAYvP,GAE7BykF,GrRzKN1hF,OAAOyjE,SAASnyE,OAAOmyE,SAASke,QqR+KxBP,EAAAjwF,UAAAswF,UAAR,SAAkBJ,GAWhB,GATIA,EAAgB,aAElBpwF,KAAKwyB,gBAAgBL,mBAAmBi+D,EAAgB,WAAY,UAEpEpwF,KAAK2wF,eAAkBP,EAAgB,WAAY,QAAIA,EAAgB,WAAW,QAAI,GACtFpwF,KAAKswF,WAAYF,EAAgB,WAAU,OAAIA,EAAgB,WAAS,OAItEA,EAAiB,WACnBpwF,KAAK4wF,WAAWR,EAAiB,WAI5BpwF,KAAK2wF,gBACR,IAAK,IAAMpjF,KAAW6iF,EAAiB,SACrC,GAAIpwF,KAAKowF,OAAiB,SAAEvwF,eAAe0N,GAAU,CACnDvN,KAAK2wF,eAAiBpjF,EACtB,QAOV4iF,EAAAjwF,UAAA2wF,YAAA,SAAYxqD,GAAZ,IAAA3gC,EAAA1F,UAAY,IAAAqmC,IAAAA,EAAA,QACJr6B,EAAWq6B,EAAkB,SAAIA,EAAkB,SAAEj6B,cAAgBpM,KAAKgyB,cAC1EzkB,EAAW84B,EAAkB,QAAIA,EAAiB,QAAIrmC,KAAK2wF,eAC3D3jE,EAA2BqZ,EAAmB,SAAIA,EAAkB,SAAI,GAE9E,OAAO,IAAIyqD,EAAAA,WAAU,SAACC,GAChBrrF,EAAK6qF,gBAAgBhjF,GAEvB7H,EAAKsrF,8BAA8BhlF,EAAUuB,EAASyf,EAAU+jE,GAGhErrF,EAAKurF,+BAA+BjlF,EAAUuB,EAASyf,EAAU+jE,MAU/DZ,EAAAjwF,UAAA8wF,8BAAR,SAAsChlF,EACAuB,EACAyf,EACA+jE,EACAG,EACAC,QADA,IAAAD,IAAAA,EAAA,SACA,IAAAC,IAAAA,EAAA,UAG9BC,EAAiB,GAA8CplF,EAErEklF,EAAelxF,KAAKqxF,YAAYH,EAAclxF,KAAKsxF,gBAAgBF,EAAgB7jF,EAASyf,IAExFhtB,KAAKuxF,YAAYL,GAAgB,GACnCH,EAAStvF,KAAKyvF,GAIhBlxF,KAAKwxF,gCAAgCJ,EAAgB7jF,EAASyf,EAAU+jE,EAAUG,EAAcC,IAK1FhB,EAAAjwF,UAAAsxF,gCAAR,SAAwCxlF,EACAuB,EACAyf,EACA+jE,EACAG,EACAC,GALxC,IAAAzrF,EAAA1F,UAKwC,IAAAmxF,IAAAA,EAAA,UAGlCM,EADEL,EAAiB,GAA8CplF,EAGjEhM,KAAKswF,WACPmB,EAAkBzxF,KAAK0xF,qBAAqBN,EAAgB7jF,EAASyf,GACjEhtB,KAAKuxF,YAAYE,GAAmB,IACtCzxF,KAAK2xF,cAAc3lF,EAAUuB,EAASkkF,GACtCP,EAAelxF,KAAKqxF,YAAYI,EAAiBP,GACjDH,EAAStvF,KAAKyvF,KAKlBlxF,KAAK4xF,eAAe5xF,KAAKuwF,gBAAgBhjF,GAAU6jF,EAAgBpkE,GAChE1hB,UAAS,SACRiiC,GACMA,IACF7nC,EAAKmsF,mBAAmB7lF,EAAUuB,EAASggC,GAC3C7nC,EAAKisF,cAAc3lF,EAAUuB,EAASggC,GACtCkkD,EAAkB/rF,EAAK4rF,gBAAgBtlF,EAAUuB,EAASyf,GAC1DkkE,EAAexrF,EAAK2rF,YAAYI,EAAiBP,GACjDH,EAAStvF,KAAKyvF,IAKZlkE,EAASrsB,OAAS+E,EAAK6rF,YAAYL,KACT,UAAxBC,GAEFD,EAAexrF,EAAKosF,sBAAsB9lF,EAAUuB,EAASyf,EAAUkkE,GACvExrF,EAAKmsF,mBAAmB7lF,EAAUuB,EAAS2jF,GAC3CxrF,EAAKisF,cAAc3lF,EAAUuB,EAAS2jF,GACtCH,EAAStvF,KAAKyvF,IAEdxrF,EAAKsrF,8BAA8BhlF,EAAUuB,EAASyf,EAAU+jE,EAAUG,EAAc,aAQ5Ff,EAAAjwF,UAAA+wF,+BAAR,SAAuCjlF,EACAuB,EACAyf,EACA+jE,EACAG,QAAA,IAAAA,IAAAA,EAAA,IAErCA,EAAelxF,KAAKqxF,YAAYH,EAAclxF,KAAKsxF,gBAAgBtlF,EAAUuB,EAASyf,IAClFhtB,KAAKuxF,YAAYL,GAAgB,GACnCH,EAAStvF,KAAKyvF,GAIZlkE,EAASrsB,OAAS,EAEhBqsB,EAASrsB,OAASX,KAAKuxF,YAAYL,KACpB,UAAbllF,GAEFklF,EAAelxF,KAAK8xF,sBAAsB9lF,EAAUuB,EAASyf,EAAUkkE,GACvEH,EAAStvF,KAAKyvF,IAEdlxF,KAAKixF,+BAA+B,QAAS1jF,EAASyf,EAAU+jE,EAAUG,KAKvC,IAAnClxF,KAAKuxF,YAAYL,IAAoC,UAAbllF,GAC1ChM,KAAKixF,+BAA+B,QAAS1jF,EAASyf,EAAU+jE,EAAUG,GAI5EH,EAAStvF,KAAKyvF,GACdH,EAASgB,aAKL5B,EAAAjwF,UAAAwxF,qBAAR,SAA6B1lF,EAAkBuB,EAAiByf,OACxDkkE,EAAoB,GAE1B,GAAIlkE,EAASrsB,OAAS,EACpB,IAAK,IAAIH,EAAI,EAAGA,EAAIwsB,EAASrsB,OAAQH,IAAK,KAClCwxF,EAAUhlE,EAASxsB,GACnByxF,EAAcpgE,aAAaC,QAAQ9lB,EAAW,IAAMuB,EAAU,IAAMykF,GACtEC,IACFf,EAAac,GAAWC,GAI9B,OAAOf,GAIDf,EAAAjwF,UAAAoxF,gBAAR,SAAwBtlF,EAAkBuB,EAAiByf,OACrDkkE,EAAoB,GAExB,GAAIlxF,KAAKqwF,QAAQrkF,IAAahM,KAAKqwF,QAAQrkF,GAAUuB,GAAU,KACvD2kF,EAAUlyF,KAAKqwF,QAAQrkF,GAAUuB,GAEvC,GAAIyf,EAASrsB,OAAS,EAEpB,IAAK,IAAIH,EAAI,EAAGA,EAAIwsB,EAASrsB,OAAQH,IAAK,KAClCwxF,EAAUhlE,EAASxsB,GACrB0xF,EAAQryF,eAAemyF,KACzBd,EAAac,GAAWE,EAAQF,SAKpCd,EAAY9wF,EAAA,GAAQ8xF,GAGxB,OAAOhB,GAIDf,EAAAjwF,UAAA2xF,mBAAR,SAA2B7lF,EAAkBuB,EAAiBy5C,GAC5D,GAAIhnD,KAAKswF,SACP,IAAK,IAAM0B,KAAWhrC,EAChBA,EAAKnnD,eAAemyF,IACtBngE,aAAaE,QAAQ/lB,EAAW,IAAMuB,EAAU,IAAMykF,EAAShrC,EAAKgrC,KAOpE7B,EAAAjwF,UAAA0wF,WAAR,SAAmBuB,GAEjB,IAAK,IAAM5kF,KAAW4kF,EACpB,GAAIA,EAAStyF,eAAe0N,GAAU,KAC9B6kF,EAAiBD,EAAS5kF,GAGhC,IAAK,IAAMvB,KAAYomF,EACrB,GAAIA,EAAevyF,eAAemM,GAAW,KACrCqmF,EAAkBD,EAAepmF,GAEtB,QAAbA,EACFhM,KAAKuwF,gBAAgBhjF,GAAW8kF,EAEhCryF,KAAK2xF,cAAc3lF,EAAUuB,EAAS8kF,MAS1ClC,EAAAjwF,UAAAyxF,cAAR,SAAsB3lF,EAAkBuB,EAAiBy5C,SACvDh7C,EAAWA,EAASI,cAEfpM,KAAKqwF,QAAQrkF,KAChBhM,KAAKqwF,QAAQrkF,KAASyR,EAAA,IAAKlQ,GAAU,GAAEkQ,IAEpCzd,KAAKqwF,QAAQrkF,GAAUuB,KAC1BvN,KAAKqwF,QAAQrkF,GAAUuB,GAAW,IAIpCvN,KAAKqwF,QAAQrkF,GAAUuB,GAAWvN,KAAKqxF,YAAYrqC,EAAMhnD,KAAKqwF,QAAQrkF,GAAUuB,KAG1E4iF,EAAAjwF,UAAA0xF,eAAR,SAAuB/nF,EAAamC,EAAkBghB,OAChDxf,EAAQ,aAAexB,EAQ3B,OAPIghB,EAASrsB,OAAS,IACpB6M,GAAS,aAAewf,EAASlF,QAInCje,EAAOA,EAAIwrB,YAAY,OAASxrB,EAAIlJ,OAAS,EAAKkJ,EAAIu4C,OAAO,EAAGv4C,EAAIlJ,OAAS,GAAKkJ,EAE3E7J,KAAKyJ,KAAKc,IAAIV,EAAM2D,IAIrB2iF,EAAAjwF,UAAA4xF,sBAAR,SAA8B9lF,EACAuB,EACAyf,EACAkkE,GAC5B,IAAK,IAAI1wF,EAAI,EAAGA,EAAIwsB,EAASrsB,OAAQH,IAAK,KAClCwxF,EAAUhlE,EAASxsB,GACpB0wF,EAAac,KAChBd,EAAac,GAAWA,GAG5B,OAAOd,GAIDf,EAAAjwF,UAAAqxF,YAAR,SAAoBzsB,GAClB,OAAOtlE,OAAO68B,KAAKyoC,GAAKnkE,QAIlBwvF,EAAAjwF,UAAAmxF,YAAR,SAAoBiB,EAAmBxtB,GACrC,OAAA1kE,EAAA,GAAY0kE,EAAQwtB,yEAhWnBC,EAAAA,OAAMtuF,KAAA,CAACgsF,aA7JHvlF,EAAAA,WAAU8nF,WAAA,CAAA,CAAAplF,KA8JdmlF,EAAAA,OAAMtuF,KAAA,CAACyG,EAAAA,qBAxJHknB,MAyfTu+D,EA7WA,GCtIAsC,GAAA,SAAAtuF,GAAA,SAAAsuF,mDACyD,OAArBruF,EAAAA,EAAAA,uBADnCqG,EAAAA,aACwDgoF,EADzD,CACoCtC,IAGpC,SAAgBuC,GAAqBtC,EAAuB3mF,EAAkB+oB,GAC5E,OAAO,IAAIigE,GAAerC,EAAQ3mF,EAAM+oB,GCyI1C,IAAAmgE,GAAA,WAAA,SAAAA,KA+BA,OAvBSA,EAAAvC,OAAP,SAAcA,GACZ,MAAO,CACLwC,SAAUD,EACVpnF,UAAW,CACT,CACE8W,QAAS4tE,GACT4C,SAAUzC,GAEZ,CACE/tE,QAASywE,EAAAA,gBACTC,WAAYC,GACZvwE,OAAO,EACPwwE,KAAM,CAAChD,GAAar+D,KAEtB,CACEvP,QAASowE,GACTM,WAAYL,GACZO,KAAM,CAAChD,GAAavlF,EAAAA,WAAYknB,4BAzBzC/sB,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPs2D,EAAAA,iBACAtoC,QA4BJ6/D,EA/BA,GAiCA,SAAgBK,GAA0B5C,EAAuB59D,GAO/D,OALwB,WAClB49D,EAAO8C,WAAQlnF,UACjBwmB,EAAgBL,mBAAmBi+D,EAAO8C,WAAQlnF","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Input } from '@angular/core';\n\nconst THF_AVATAR_SIZES = ['xs', 'sm', 'md', 'lg', 'xl'];\nconst THF_AVATAR_SIZE_DEFAULT = 'md';\n\n/**\n * @description\n *\n * O componente `thf-avatar` Ã© um container para imagens em miniatura, possui um formato redondo e cinco opÃ§Ãµes de\n * tamanho, pode ser utilizado para mostrar a foto do perfil de um usuÃ¡rio, entre outras possibilidades.\n *\n * AlÃ©m de poder ser utilizado separadamente, Ã© possÃ­vel usar o `thf-avatar` juntamente com outros componentes e criar\n * layouts ricos e bem interessantes para os usuÃ¡rios, como por exemplo, uma lista de itens ou produtos.\n */\nexport class ThfAvatarBaseComponent {\n  private _size: string = 'md';\n\n  /**\n   * Fonte da imagem que pode ser um caminho local (`./assets/images/logo-black-small.png`)\n   * ou um servidor externo (`https://thf.totvs.com.br/assets/images/logo-black-small.png`).\n   */\n  @Input('t-src') src: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Tamanho de exibiÃ§Ã£o do componente.\n   *\n   * Valores vÃ¡lidos:\n   *  - `xs` (24x24)\n   *  - `sm` (32x32)\n   *  - `md` (64x64)\n   *  - `lg` (96x96)\n   *  - `xl` (144x144)\n   *\n   * @default `md`\n   */\n  @Input('t-size') set size(value: string) {\n    this._size = THF_AVATAR_SIZES.includes(value) ? value : THF_AVATAR_SIZE_DEFAULT;\n  }\n  get size(): string {\n    return this._size;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { ThfAvatarBaseComponent } from './thf-avatar-base.component';\n\n/**\n * @docsExtends ThfAvatarBaseComponent\n *\n * @example\n *\n * <example name=\"thf-avatar-basic\" title=\"Totvs Avatar Basic\" >\n *  <file name=\"sample-thf-avatar-basic/sample-thf-avatar-basic.component.html\"> </file>\n *  <file name=\"sample-thf-avatar-basic/sample-thf-avatar-basic.component.ts\"> </file>\n *  <file name=\"sample-thf-avatar-basic/sample-thf-avatar-basic.component.e2e-spec.ts\"> </file>\n *  <file name=\"sample-thf-avatar-basic/sample-thf-avatar-basic.component.po.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-avatar-labs\" title=\"Totvs Avatar Labs\" >\n *  <file name=\"sample-thf-avatar-labs/sample-thf-avatar-labs.component.html\"> </file>\n *  <file name=\"sample-thf-avatar-labs/sample-thf-avatar-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-avatar-business-card\" title=\"Totvs Avatar - Business Card\" >\n *  <file name=\"sample-thf-avatar-business-card/sample-thf-avatar-business-card.component.html\"> </file>\n *  <file name=\"sample-thf-avatar-business-card/sample-thf-avatar-business-card.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-avatar',\n  templateUrl: './thf-avatar.component.html'\n})\nexport class ThfAvatarComponent extends ThfAvatarBaseComponent implements OnInit {\n\n  ngOnInit(): void {\n    if (!this.src) {\n      this.src = undefined;\n    }\n  }\n\n  onError(): void {\n    this.src = undefined;\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThfAvatarComponent } from './thf-avatar.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente thf-avatar.\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ThfAvatarComponent\n  ],\n  exports: [\n    ThfAvatarComponent\n  ]\n})\nexport class ThfAvatarModule { }\n","import { Input } from '@angular/core';\n\nimport { ThfBreadcrumbItem } from './thf-breadcrumb-item.interface';\n\n/**\n * @description\n *\n * Este componente gera uma estrutura de navegaÃ§Ã£o que apresenta ao usuÃ¡rio a localizaÃ§Ã£o\n * da URL atual, exibindo as antecessoras conforme Ã© realizado a navegaÃ§Ã£o na aplicaÃ§Ã£o.\n *\n * Quando nÃ£o houver espaÃ§amento suficiente para exibi-lÃ¡s, o componente se encarrega tambÃ©m\n * de agrupar as URLs antecessoras, gerando assim um Ã­cone que permite a visualizaÃ§Ã£o em cascata.\n *\n * Caso um endereÃ§o seja especificado na propriedade `t-favorite-service`, o componente permite ao usuÃ¡rio\n * favoritar a URL.\n *\n * Havendo necessidade de incluir parÃ¢metros na requisiÃ§Ã£o do serviÃ§o,\n * o componente dispÃµe da propriedade `t-params-service` que recebe um objeto contendo as informaÃ§Ãµes.\n */\nexport class ThfBreadcrumbBaseComponent {\n\n  itemsView: Array<ThfBreadcrumbItem> = [];\n  private _items: Array<ThfBreadcrumbItem> = [];\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Permite definir uma URL no componente `thf-breadcrumb` para favoritar ou desfavoritar.\n   * > Para utilizar esta propriedade, o Ãºltimo `ThfBreadcrumbItem` da lista de items da propriedade `t-items` deve ter um link informado.\n   *\n   * > A API deve estar preparada para retornar um objeto no formato `{ isFavorite: boolean }`.\n   *\n   * Ao iniciar, o `thf-breadcrumb` faz um GET na URL definida na propriedade `t-favorite-service` e deve retornar a propriedade\n   * `{ isFavorite: boolean }` do Ãºltimo `ThfBreadcrumbItem` definido na lista de itens da propriedade `t-items`.\n   *\n   * Ao clicar em favoritar ou desfavoritar o `thf-breadcrumb` faz um POST com o link e a propriedade `{ isFavorite: boolean }`\n   * definidos no Ãºltimo item da propriedade `t-items`.\n   *\n   * > Caso algum parÃ¢metro seja definido na propriedade `t-params-service`, o mesmo serÃ¡ enviado para a API e retornarÃ¡\n   * apÃ³s fazer um GET ou POST.\n   *\n   * Exemplo de URL contendo o serviÃ§o de favoritar ou desfavoritar:\n   *\n   * ```\n   * https://thf.totvs.com.br/sample/api/favorite\n   * ```\n   *\n   * Ao fazer o GET o `thf-breadcrumb` concatena o link com a URL de serviÃ§o. Exemplo:\n   *\n   * ```\n   * GET http://<domain>/api/favorite?url=/example\n   * ```\n   *\n   * ```\n   * GET http://thf.totvs.com.br/sample/api/favorite?url=/example\n   * ```\n   *\n   * ```\n   * POST\n   * payload: { isFavorite: true, url: '/example' }\n   * ```\n   *\n   * Caso possua parÃ¢metros definidos na propriedade `t-params-service`:\n   *\n   * ```\n   * POST\n   * payload: { isFavorite: true, url: \"/example\", params: \"{ id: 14, user: 'dev.totvs' }\" }\n   * ```\n   *\n   * Exemplos de retorno:\n   *\n   * ```\n   * { isFavorite: true, url: \"/example\" }\n   * ```\n   *\n   * ```\n   * { isFavorite: false, url: \"/example\" }\n   * ```\n   *\n   * ```\n   * { isFavorite: false, url: \"/example\", params: \"{ id: 14, user: 'dev.totvs' }\" }\n   * ```\n   */\n  @Input('t-favorite-service') favoriteService?: string;\n\n  /**\n   * @description\n   *\n   * Lista de itens do _breadcrumb_.\n   *\n   * **Exemplo:**\n   * ```\n   * { label: 'Thf Portal', link: 'portal' }\n   * ```\n   */\n  @Input('t-items') set items(items: Array<ThfBreadcrumbItem>) {\n    this._items = items;\n    this.itemsView = [].concat(items);\n  }\n\n  get items() {\n    return this._items;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto que possibilita o envio de parÃ¢metros adicionais Ã  requisiÃ§Ã£o.\n   */\n  @Input('t-params-service') paramsService?: object;\n\n  protected clickoutListener: () => void;\n\n  protected resizeListener: () => void;\n\n}\n","import { AfterViewInit, Component, DoCheck, ElementRef, IterableDiffers, OnDestroy, Renderer2, ViewChild } from '@angular/core';\n\nimport { ThfBreadcrumbBaseComponent } from './thf-breadcrumb-base.component';\nimport { ThfBreadcrumbItem } from './thf-breadcrumb-item.interface';\n\n/**\n * @docsExtends ThfBreadcrumbBaseComponent\n *\n * @example\n *\n * <example name=\"thf-breadcrumb-basic\" title=\"Totvs Breadcrumb Basic\">\n *  <file name=\"sample-thf-breadcrumb-basic/sample-thf-breadcrumb-basic.component.html\"> </file>\n *  <file name=\"sample-thf-breadcrumb-basic/sample-thf-breadcrumb-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-breadcrumb-labs\" title=\"Totvs Breadcrumb Labs\">\n *  <file name=\"sample-thf-breadcrumb-labs/sample-thf-breadcrumb-labs.component.html\"> </file>\n *  <file name=\"sample-thf-breadcrumb-labs/sample-thf-breadcrumb-labs.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-breadcrumb',\n  templateUrl: './thf-breadcrumb.component.html'\n})\nexport class ThfBreadcrumbComponent extends ThfBreadcrumbBaseComponent implements AfterViewInit, DoCheck, OnDestroy {\n\n  showDropdown: boolean = false;\n  showDropdownToggle: boolean = false;\n  dropdownItems: Array<ThfBreadcrumbItem>;\n\n  private _breadcrumbItemsLenght: number = 0;\n  private calculatedElement = false;\n  private differ;\n  private hiddenWithoutResize = false;\n  private initialized = false;\n  private timeoutResize;\n\n  @ViewChild('breadcrumb', { read: ElementRef, static: true }) breadcrumbElement: ElementRef;\n  @ViewChild('dropdownIcon', { read: ElementRef, static: false }) dropdownIcon: ElementRef;\n\n  constructor(differs: IterableDiffers, private element: ElementRef, public renderer: Renderer2) {\n    super();\n    this.differ = differs.find([]).create(null);\n  }\n\n  ngAfterViewInit() {\n    this.initialized = true;\n\n    this.initializeResizeListener();\n  }\n\n  ngDoCheck() {\n    const breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;\n\n    // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visÃ­vel,\n    // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.\n    if (breadcrumbWidth && !this.calculatedElement && this.initialized) {\n      this.initBreadcrumbSize();\n    }\n\n    if (this.hiddenWithoutResize) {\n      this.debounceResize();\n      this.hiddenWithoutResize = false;\n    }\n\n    this.checkChangeOnItems();\n  }\n\n  ngOnDestroy() {\n    this.removeClickoutListener();\n    this.removeResizeListener();\n  }\n\n  toggleDropdown() {\n    this.showDropdown = !this.showDropdown;\n    this.initializeClickoutListener();\n  }\n\n  private wasClickedonDropdown = (event: MouseEvent) => {\n    const clickedOutIconDropdown = this.checkClickOutElement(event, this.dropdownIcon);\n\n    if (clickedOutIconDropdown) {\n      this.showDropdown = false;\n      this.removeClickoutListener();\n    }\n  }\n\n  private checkClickOutElement(event, element) {\n    return element && !element.nativeElement.contains(event.target);\n  }\n\n  private checkChangeOnItems() {\n    if (this.differ) {\n      const changes = this.differ.diff(this.items);\n      if (changes) {\n        this.calcBreadcrumbItemsWidth();\n        this.calculatedElement = false;\n      }\n    }\n  }\n\n  private calcBreadcrumb() {\n    const breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();\n    const breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite);\n\n    if (breadcrumb <= this._breadcrumbItemsLenght) {\n      this.enableBreadcrumbResponsive();\n    } else {\n      this.disableBreadcrumbResponsive();\n    }\n  }\n\n  private getBreadcrumbFavoriteWidth() {\n    return this.favoriteService ? this.element.nativeElement\n      .querySelector('.thf-breadcrumb-favorite').offsetWidth + 20 : 0;\n  }\n\n  private getBreadcrumbWidth(breadcrumbFavorite) {\n    return this.element.nativeElement.querySelector('.thf-breadcrumb').offsetWidth - breadcrumbFavorite;\n  }\n\n  private calcBreadcrumbItemsWidth() {\n    const breadcrumbItem = this.element.nativeElement\n      .querySelectorAll('.thf-breadcrumb-item, .thf-breadcrumb-item-unclickable');\n\n    this._breadcrumbItemsLenght = Array.from(breadcrumbItem)\n      .map(breadcrumb => breadcrumb['offsetWidth'])\n      .reduce((a, b) => a + b, 16);\n  }\n\n  private enableBreadcrumbResponsive() {\n    this.showDropdownToggle = true;\n    this.itemsView = this.items.slice(-2);\n    this.dropdownItems = this.items.slice(0, -2).reverse();\n  }\n\n  private disableBreadcrumbResponsive() {\n    this.showDropdownToggle = false;\n    this.itemsView = [].concat(this.items);\n    this.showDropdown = false;\n  }\n\n  private debounceResize() {\n    clearTimeout(this.timeoutResize);\n    this.timeoutResize = setTimeout(() => {\n\n      if (this.calculatedElement && !this.hiddenWithoutResize && this.breadcrumbElement.nativeElement.offsetWidth === 0) {\n        this.hiddenWithoutResize = true;\n      } else {\n        this.calcBreadcrumb();\n      }\n\n    }, 50);\n  }\n\n  private initBreadcrumbSize() {\n    this.calcBreadcrumbItemsWidth();\n    this.calcBreadcrumb();\n    this.calculatedElement = true;\n  }\n\n  private initializeClickoutListener() {\n    this.clickoutListener = this.renderer.listen('document', 'click', this.wasClickedonDropdown);\n  }\n\n  private initializeResizeListener() {\n    this.resizeListener = this.renderer.listen('window', 'resize', (event: MouseEvent) => {\n      this.debounceResize();\n    });\n  }\n\n  private removeClickoutListener() {\n    if (this.clickoutListener) {\n      this.clickoutListener();\n    }\n  }\n\n  private removeResizeListener() {\n    this.resizeListener();\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\nimport { ThfBreadcrumbItem } from './../thf-breadcrumb-item.interface';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente que renderiza o dropdown do thf-breadcrumb.\n */\n@Component({\n  selector: 'thf-breadcrumb-dropdown',\n  templateUrl: './thf-breadcrumb-dropdown.component.html'\n})\nexport class ThfBreadcrumbDropdownComponent {\n\n  // Itens a serem apresentados na lista do dropdown.\n  @Input('t-items') items: Array<ThfBreadcrumbItem>;\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * ServiÃ§o utilizado para favoritar/desfavoritar uma url no componente thf-breadcrumb.\n * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os mÃ©todos, GET e POST este\n * objeto deve ser retornado.\n * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.\n * No mÃ©todo POST, existe a possibilidade de ser enviado parÃ¢metros junto com a requisiÃ§Ã£o. Neste caso, o objeto enviado\n * para a API terÃ¡ o formato: { isFavorite: booleano, url: string, params: {} }, onde params Ã© o objeto que pode ser enviado\n * junto com a requisiÃ§Ã£o.\n *\n */\n@Injectable()\nexport class ThfBreadcrumbFavoriteService {\n\n  private _url: string;\n  private _bodyParams: object;\n\n  get url(): string { return this._url; }\n\n  get bodyParams(): object { return this._bodyParams; }\n\n  constructor(private http: HttpClient) { }\n\n  configService(url, params, item) {\n    this._url = url;\n    this._bodyParams = {\n      isFavorite: false,\n      url: item.link,\n      params: params\n    };\n  }\n\n  sendStatusFavorite(status): Observable<any> {\n    this.bodyParams['isFavorite'] = status;\n    return this.http.post(this.url, this.bodyParams);\n  }\n\n  getFavorite(): Observable<any> {\n    return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] }});\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { ThfBreadcrumbItem } from './../thf-breadcrumb-item.interface';\nimport { ThfBreadcrumbFavoriteService } from './thf-breadcrumb-favorite.service';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente que renderiza o serviÃ§o de favoritar do thf-breadcrumb.\n */\n@Component({\n  selector: 'thf-breadcrumb-favorite',\n  templateUrl: './thf-breadcrumb-favorite.component.html',\n  providers: [ThfBreadcrumbFavoriteService]\n})\nexport class ThfBreadcrumbFavoriteComponent implements OnInit, OnDestroy {\n\n  favorite: boolean = false;\n  private getSubscription: Subscription;\n  private setSubscription: Subscription;\n\n  // URL do serviÃ§o.\n  @Input('t-favorite-service') favoriteService: string;\n\n  // Item do breadcrumb ativo.\n  @Input('t-item-active') itemActive: ThfBreadcrumbItem;\n\n  // ParÃ¢metro que serÃ¡ enviado junto com o serviÃ§o de favoritar.\n  @Input('t-params-service') paramsService: object;\n\n  constructor(private service: ThfBreadcrumbFavoriteService) { }\n\n  ngOnInit() {\n    this.service.configService(this.favoriteService, this.paramsService, this.itemActive);\n    this.getStatusFavorite();\n  }\n\n  ngOnDestroy(): void {\n\n    if (this.getSubscription) {\n      this.getSubscription.unsubscribe();\n    }\n\n    if (this.setSubscription) {\n      this.setSubscription.unsubscribe();\n    }\n  }\n\n  toggleFavoriteAction() {\n    this.favorite ? this.setStatusFavorite(false) : this.setStatusFavorite(true);\n  }\n\n  private getStatusFavorite() {\n    this.getSubscription = this.service.getFavorite().subscribe(result => this.favorite = result.isFavorite);\n  }\n\n  private setStatusFavorite(status) {\n    this.setSubscription = this.service.sendStatusFavorite(status).subscribe(result => this.favorite = result.isFavorite);\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente que renderiza cada item do thf-breadcrumb.\n */\n@Component({\n  selector: 'thf-breadcrumb-item',\n  templateUrl: './thf-breadcrumb-item.component.html'\n})\nexport class ThfBreadcrumbItemComponent {\n\n  // AÃ§Ã£o que serÃ¡ executada ao clicar sobre o item.\n  @Input('t-action') action: Function;\n\n  // Label do item.\n  @Input('t-label') label: string;\n\n  // Link do item.\n  @Input('t-link') link: string;\n\n  // Especifica se item Ã© o link ativo.\n  @Input('t-item-active') itemActive: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfBreadcrumbComponent } from './thf-breadcrumb.component';\nimport { ThfBreadcrumbDropdownComponent } from './thf-breadcrumb-dropdown/thf-breadcrumb-dropdown.component';\nimport { ThfBreadcrumbFavoriteComponent } from './thf-breadcrumb-favorite/thf-breadcrumb-favorite.component';\nimport { ThfBreadcrumbItemComponent } from './thf-breadcrumb-item/thf-breadcrumb-item.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente thf-breadcrumb.\n *\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule\n  ],\n  declarations: [\n    ThfBreadcrumbComponent,\n    ThfBreadcrumbDropdownComponent,\n    ThfBreadcrumbFavoriteComponent,\n    ThfBreadcrumbItemComponent\n  ],\n  exports: [ThfBreadcrumbComponent]\n})\nexport class ThfBreadcrumbModule { }\n","// Idiomas suportados pelas pÃ¡ginas\nexport const thfLocales = ['pt', 'en', 'es'];\n// Idioma padrÃ£o\nexport const thfLocaleDefault = 'pt';\n\n/**\n * @deprecated\n * Utilize o mÃ©todo `getShortBrowserLanguage`.\n *\n * @description\n * Retorna idioma do browser ou o idioma padrÃ£o.\n */\nexport function browserLanguage() {\n  return getShortBrowserLanguage();\n}\n\n/**\n * Retorna o idioma atual do navegador\n */\nexport function getBrowserLanguage(): string {\n  // navigator.userLanguage is the value for IE10\n  const language = navigator.language || navigator['userLanguage'];\n  const shortLanguage = getShortLanguage(language);\n\n  return thfLocales.includes(shortLanguage) ? language : thfLocaleDefault;\n}\n\n/**\n * Retorna o idioma do navegador, com somente as duas primeiras letras. Por exemplo: \"pt\" ou \"es\".\n *\n * Caso o valor retornado pelo navegador nÃ£o estiver dentro dos idiomas suportados pelo THF,\n * serÃ¡ retornado a linguagem padrÃ£o (thfLocaleDefault).\n */\nexport function getShortBrowserLanguage(): string {\n  return getShortLanguage(getBrowserLanguage());\n}\n\n/**\n * Retorna o idioma com somente a abreviaÃ§Ã£o do idioma (duas primeiras letras).\n * Por exemplo: \"pt\" ou \"es\".\n *\n * @param language {string} linguagem.\n *\n * @returns sigla do idioma padrÃ£o {string}.\n *\n * @default pt\n */\nexport function getShortLanguage(language: string): string {\n  return (language || thfLocaleDefault).toLowerCase().substring(0, 2);\n}\n\nexport function isLanguage(value) {\n  const languageRegex = new RegExp('^[a-z]{2}(\\-[a-z]{2})?$', 'i');\n\n  return languageRegex.test(value);\n}\n\n/* istanbul ignore next */\nexport function reloadCurrentPage() {\n  window.location.assign(location.href);\n}\n\nexport function convertToBoolean(val: any): boolean {\n  if (typeof val === 'string') {\n    val = val.toLowerCase().trim();\n    return (val === 'true' || val === 'on' || val === '');\n  }\n\n  if (typeof val === 'number') {\n    return val === 1;\n  }\n\n  return !!val;\n}\n\nexport function convertToInt(value: any, valueDefault?: any): number {\n  const validNumber = parseInt(value, 10);\n  const validDefaultValue = parseInt(valueDefault, 10);\n  const defaultValue = validDefaultValue || validDefaultValue === 0 ? validDefaultValue : undefined;\n\n  return validNumber || validNumber === 0 ? validNumber : defaultValue;\n}\n\nexport function isTypeof(object: any, type: any) {\n  return typeof object === type;\n}\n\n/**\n *\n * @param fn FunÃ§Ã£o que serÃ¡ executada dentro do contexto. Podendo ser o nome da funÃ§Ã£o\n * ou a referÃªncia da mesma.\n *\n * @param context Contexto do qual a funÃ§Ã£o serÃ¡ executada.\n */\nexport function callFunction(fn: any, context: any, param?): void {\n  if (isTypeof(fn, 'function')) {\n    fn.call(context, param);\n  } else {\n    context[fn](param);\n  }\n}\n\nexport function convertIsoToDate(value: string , start: boolean, end: boolean) {\n  if (value) {\n    const day = parseInt(value.substring(8, 10), 10);\n    const month = parseInt(value.substring(5, 7), 10);\n    const year = parseInt(value.substring(0, 4), 10);\n    if (start) {\n      const date = new Date(year, month - 1, day, 0, 0, 0);\n\n      setYearFrom0To100(date, year);\n\n      return date;\n    } else if (end) {\n      const date = new Date(year, month - 1, day, 23, 59, 59);\n\n      setYearFrom0To100(date, year);\n\n      return date;\n    } else {\n      const milliseconds = Date.parse(value);\n      const timezone = new Date().getTimezoneOffset() * 60000;\n      return new Date(milliseconds + timezone);\n    }\n  }\n}\n\nexport function convertDateToISODate(date: Date) {\n  if (date) {\n    const getMonth = date.getMonth() + 1;\n    const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();\n    const month = getMonth < 10 ? '0' + getMonth : getMonth;\n    const year = formatYear(date.getFullYear());\n\n    return year + '-' + month + '-' + day;\n  } else {\n    return null;\n  }\n}\n\nexport function convertDateToISOExtended(date: Date, time?: string) {\n  if (date) {\n\n  const getMonth = date.getMonth() + 1;\n  const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();\n  const month = getMonth < 10 ? '0' + getMonth : getMonth;\n  const year = formatYear(date.getFullYear());\n\n  const dateString = date.toString();\n\n  if (time !== null) {\n    return year + '-' + month + '-' + day + time;\n  } else {\n    return year + '-' + month + '-' + day + 'T' + dateString.substring(16, 24) +\n        dateString.substring(28, 31) + ':' + dateString.substring(31, 33);\n  }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.\n * @param year Ano\n */\nexport function formatYear(year: number) {\n\n  if (year >= 1000) {\n    return year.toString();\n  }\n\n  if (year > 99 && year < 1000) {\n    return `0${year}`;\n  }\n\n  if (year > 9 && year < 100) {\n    return `00${year}`;\n  }\n\n  if (year >= 0 && year < 10) {\n    return `000${year}`;\n  }\n\n}\n// Verifica se o navegador em que estÃ¡ sendo usado Ã© Internet Explorer ou Edge\nexport function isIEOrEdge() {\n  const userAgent = window.navigator.userAgent;\n\n  return /msie\\s|trident\\/|edge\\//i.test(userAgent);\n}\n\n// Verifica qual o dispositivo que estÃ¡ sendo usado\nexport function isMobile() {\n  const userAgent = window.navigator.userAgent;\n\n  return userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone/i);\n}\n\nexport function isEquals(value, comparedValue) {\n  return JSON.stringify(value) === JSON.stringify(comparedValue);\n}\n\nexport function isKeyCodeEnter(event: any): boolean {\n  return event.keyCode === 13 || event.which === 13;\n}\n\n/**\n * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.\n * @param date Data\n * @param year Ano original\n */\nexport function setYearFrom0To100(date: Date, year: number) {\n  if (year >= 0 && year < 100 ) {\n    date.setFullYear(year);\n  }\n}\n\nexport function sortOptionsByProperty(options: Array<any>, property: string) {\n  options.sort((optionA, optionB) => {\n    optionA = optionA[property].toString().toLowerCase();\n    optionB = optionB[property].toString().toLowerCase();\n\n    if (optionA < optionB) {\n      return -1;\n    }\n    if (optionA > optionB) {\n      return 1;\n    }\n    return 0;\n  });\n}\n\nexport function removeDuplicatedOptions(list: Array<any>) {\n  for (let i = 0; i < list.length; i++) {\n    if (i === 0) { continue; }\n\n    if (list.findIndex(op => op.value === list[i].value) !== i) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n}\n\nexport function removeUndefinedAndNullOptions(list: Array<any>) {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i].value === undefined || list[i].value === null ) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n}\n\nexport function validValue(value: any) {\n  return (value !== null && value !== undefined && value !== '') || value === false;\n}\n\nexport function isExternalLink(url): boolean {\n  return url ? url.startsWith('http') : false;\n}\n\nexport function openExternalLink(url): void {\n  window.open(url, '_blank');\n}\n\nexport function  getFormattedLink(link: string): string {\n  let formattedLink = '';\n  // Retira todos os pontos no comeÃ§o da URL.\n  if (link) {\n    formattedLink = link.replace(/^(\\.)+/g, '');\n  }\n  // Verifica se foi utilizado uma rota que nÃ£o comece com barra.\n  if (!formattedLink.startsWith('/')) {\n    formattedLink = '/'.concat(formattedLink);\n  }\n  return formattedLink;\n}\n\n/**\n * MÃ©todo responsÃ¡vel por ordenar dois valores.\n *\n * @param leftSide Primeiro valor a ser comparado.\n * @param rightSide Segundo valor a ser comparado.\n * @param ascending Determina se serÃ¡ em ordem ascendente ou descendente.\n */\nexport function sortValues(leftSide: string, rightSide: string, ascending: boolean = true): number {\n  if (ascending) {\n    if (leftSide < rightSide) {\n      return -1;\n    } else if (leftSide > rightSide) {\n      return 1;\n    }\n  } else if (ascending === false) {\n    if (leftSide < rightSide) {\n      return 1;\n    } else if (leftSide > rightSide) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nexport function validateDateRange(date: Date, dateStart: Date, dateEnd: Date) {\n  if (dateStart && dateEnd) {\n    return (date >= dateStart && date <= dateEnd);\n  } else if (dateStart && !dateEnd) {\n    return (date >= dateStart);\n  } else if (!dateStart && dateEnd) {\n    return (date <= dateEnd);\n  } else {\n    return true;\n  }\n}\n\nexport function uuid() {\n  function hex4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n\n  return hex4() + hex4() + '-' + hex4() + '-' + hex4() + '-' +\n  hex4() + '-' + hex4() + hex4() + hex4();\n}\n\nexport function capitalizeFirstLetter(text: string): string {\n  return `${text.charAt(0).toUpperCase()}${text.slice(1)}`;\n}\n\n/**\n * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de\n * origem.\n *\n * Exemplo:\n *\n * ```\n * const people = [\n *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'SÃ£o Paulo', dependents: 2 },\n *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },\n *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }\n * ];\n *\n * const properties = ['id', 'name'];\n *\n * const idAndName = mapArrayByProperties(people, properties);\n *\n * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]\n * ```\n *\n * Um outro uso para o mÃ©todo Ã© \"parear\" todos os objetos do array com as mesmas propriedades.\n *\n * ```\n * const customers = [\n *  { id: 1, name: 'Fulano', city: 'SÃ£o Paulo', dependents: 2 }, // sem genre\n *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents\n *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }\n * ];\n * const properties = ['id', 'name', 'city', 'genre', 'dependents'];\n *\n * const pattern = mapArrayByProperties(customers, properties);\n * console.log(pattern);\n *\n * // [\n * //   { id: 1, name: 'Fulano', city: 'SÃ£o Paulo', genre: undefined, dependents: 2 },\n * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },\n * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }\n * // ]\n * ```\n *\n * @param items {Array<any>} Array de items original.\n * @param properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.\n *\n * @returns Array<any>\n */\nexport function mapArrayByProperties(items: Array<any> = [], properties: Array<string> = []): Array<any> {\n  return items.map(item => mapObjectByProperties(item, properties));\n}\n\n/**\n * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.\n *\n * Exemplo:\n *\n * ```\n * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'SÃ£o Paulo', dependents: 2 };\n *\n * const properties = ['id', 'name'];\n *\n * const idAndName = mapObjectByProperties(person, properties);\n *\n * console.log(idAndName); // { id: 1, name: 'Fulano' }\n * ```\n *\n * @param object {Array<any>} Array de items original.\n * @param properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.\n *\n * @returns Array<any>\n */\nexport function mapObjectByProperties(object: any = {}, properties: Array<string> = []) {\n  const getSelectedProperties = (selectedProperties, property) => ({ ...selectedProperties, [property]: object[property] });\n\n  return properties.reduce(getSelectedProperties, {});\n}\n\n/**\n * Retorna os valores de um objeto dentro de um array.\n *\n * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versÃ£o typescrit for atualizada.\n *\n * @param object Objeto de onde serÃ¡ pego os valores.\n */\nexport function valuesFromObject(object: any = {}): Array<any> {\n  return Object.keys(object).map(property => object[property]);\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { convertToBoolean } from '../../utils/util';\n\nconst THF_BUTTON_TYPES = ['default', 'primary', 'danger', 'link'];\nconst THF_BUTTON_TYPE_DEFAULT = 'default';\n\n/**\n * @description\n *\n * O `thf-button` permite que o usuÃ¡rio execute aÃ§Ãµes predefinidas pelo desenvolvedor.\n *\n * AtravÃ©s dos tipos, Ã© possÃ­vel identificar a importÃ¢ncia de cada aÃ§Ã£o, sendo ela primÃ¡ria (`primary`) ou atÃ© mesmo uma\n * aÃ§Ã£o irreversÃ­vel (`danger`), como a exclusÃ£o de um registro.\n *\n * #### Boas prÃ¡ticas\n *\n * - Evite `labels` extensos que quebram o layout do `thf-button`, use `labels` diretos, curtos e intuitivos.\n * - Utilize apenas um `thf-button` configurado como `primary` por pÃ¡gina.\n * - Para aÃ§Ãµes irreversÃ­veis use sempre o tipo `danger`.\n */\nexport class ThfButtonBaseComponent {\n\n  private _disabled?: boolean = false;\n  private _loading?: boolean = false;\n  private _small?: boolean = false;\n  private _type?: string = 'default';\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Label do botÃ£o.\n   */\n  @Input('t-label') label?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Exibe um Ã­cone de carregamento Ã  esquerda do _label_ do botÃ£o.\n   *\n   * > Quando esta propriedade estiver habilitada, desabilitarÃ¡ o botÃ£o.\n   *\n   * @default `false`\n   */\n  @Input('t-loading') set loading(value: boolean) {\n    this._loading = convertToBoolean(value);\n  }\n\n  get loading(): boolean {\n    return this._loading;\n  }\n\n  /**\n   * Ãcone exibido ao lado esquerdo do label do botÃ£o.\n   *\n   * Ã possÃ­vel usar qualquer uma dos Ã­cones da [Biblioteca de Ã­cones](/guides/icons).\n   */\n  @Input('t-icon') icon?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Deixa o botÃ£o menor.\n   *\n   * @default `false`\n   */\n  @Input('t-small') set small(value: boolean) {\n    this._small = <any>value === '' ? true : convertToBoolean(value);\n  }\n  get small(): boolean {\n    return this._small;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define o estilo do `thf-button`.\n   *\n   * Valore vÃ¡lidos:\n   *  - `default`: estilo padrÃ£o do `thf-button`.\n   *  - `primary`: deixa o `thf-button` com destaque, deve ser usado para aÃ§Ãµes primÃ¡rias.\n   *  - `danger`: deve ser usado para aÃ§Ãµes que o usuÃ¡rio precisa ter cuidado ao executa-lÃ¡.\n   *  - `link`: o `thf-button` recebe o estilo de um link.\n   *\n   * @default `default`\n   */\n  @Input('t-type') set type(value: string) {\n    this._type = THF_BUTTON_TYPES.includes(value) ? value : THF_BUTTON_TYPE_DEFAULT;\n  }\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Desabilita o `thf-button` e nÃ£o permite que o usuÃ¡rio interaja com o mesmo.\n   *\n   * @default `false`\n   */\n  @Input('t-disabled') set disabled(value: boolean) {\n    this._disabled = <any>value === '' ? true : convertToBoolean(value);\n  }\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  /** AÃ§Ã£o que serÃ¡ executada quando o usuÃ¡rio clicar sobre o `thf-button`. */\n  @Output('t-click') click = new EventEmitter<null>();\n\n}\n","import { Component } from '@angular/core';\n\nimport { ThfButtonBaseComponent } from './thf-button-base.component';\n\n/**\n * @docsExtends ThfButtonBaseComponent\n *\n * @example\n *\n * <example name=\"thf-button-basic\" title=\"Totvs Button Basic\">\n *  <file name=\"sample-thf-button-basic/sample-thf-button-basic.component.html\"> </file>\n *  <file name=\"sample-thf-button-basic/sample-thf-button-basic.component.ts\"> </file>\n *  <file name=\"sample-thf-button-basic/sample-thf-button-basic.component.e2e-spec.ts\"> </file>\n *  <file name=\"sample-thf-button-basic/sample-thf-button-basic.component.po.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-button-labs\" title=\"Totvs Button Labs\">\n *  <file name=\"sample-thf-button-labs/sample-thf-button-labs.component.html\"> </file>\n *  <file name=\"sample-thf-button-labs/sample-thf-button-labs.component.ts\"> </file>\n *  <file name=\"sample-thf-button-labs/sample-thf-button-labs.component.e2e-spec.ts\"> </file>\n *  <file name=\"sample-thf-button-labs/sample-thf-button-labs.component.po.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-button',\n  templateUrl: './thf-button.component.html'\n})\nexport class ThfButtonComponent extends ThfButtonBaseComponent {\n\n  onClick() {\n    this.click.emit(null);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ThfButtonComponent } from './thf-button.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente thf-button.\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ThfButtonComponent\n  ],\n  exports: [\n    ThfButtonComponent\n  ]\n})\nexport class ThfButtonModule { }\n","import { ElementRef, Injectable } from '@angular/core';\n\n /**\n  * @docsPrivate\n  * @description\n  *\n  * ServiÃ§o responsÃ¡vel por gerenciar as posiÃ§Ãµes de um elemento em relaÃ§Ã£o a um elemento alvo. Ele pode receber as\n  * seguintes posiÃ§Ãµes:\n  *\n  * - `right`: Posiciona o elemento no lado direito do componente alvo.\n  * - `right-bottom`: Posiciona o elemento no lado direito inferior do componente alvo.\n  * - `right-top`: Posiciona o elemento no lado direito superior do componente alvo.\n  * - `bottom`: Posiciona o elemento abaixo do componente alvo.\n  * - `bottom-left`: Posiciona o elemento abaixo e Ã  esquerda do componente alvo.\n  * - `bottom-right`: Posiciona o elemento abaixo e Ã  direita do componente alvo.\n  * - `left`: Posiciona o elemento no lado esquerdo do componente alvo.\n  * - `left-top`: Posiciona o elemento no lado esquerdo superior do componente alvo.\n  * - `left-bottom`: Posiciona o elemento no lado esquerdo inferior do componente alvo.\n  * - `top`: Posiciona o elemento acima do componente alvo.\n  * - `top-right`: Posiciona o elemento acima e Ã  direita do componente alvo.\n  * - `top-left`: Posiciona o elemento acima e Ã  esquerda do componente alvo.\n  *\n  * Caso o elemento nÃ£o caiba na tela na posiÃ§Ã£o indicada ele serÃ¡ rotacionado automaticamente para se adequar,\n  * inicialmente no lado definido como padrÃ£o e em seguida seguindo o sentido horÃ¡rio.\n  */\n\nconst thfControlPositionSidesDefault: Array<string> = [\n  'bottom', 'bottom-left', 'bottom-right',\n  'left', 'left-top', 'left-bottom',\n  'top', 'top-right', 'top-left',\n  'right', 'right-bottom', 'right-top'\n];\n\n@Injectable()\nexport class ThfControlPositionService {\n\n  private arrowDirection: string;\n  private customPositions: Array<string>;\n  private differenceDiagonalToWidthArrow: number = 3;\n  private element: HTMLElement;\n  private elementOffset: number;\n  private isCornerAligned: boolean;\n  private isSetElementWidth: boolean = false;\n  // offset da seta em relaÃ§Ã£o ao canto do componente\n  private offsetArrow: number = 12;\n  private targetElement: HTMLElement;\n\n  /**\n   * @description Ajusta a posiÃ§Ã£o do elemento, caso nÃ£o couber em tela irÃ¡ para prÃ³xima posiÃ§Ã£o.\n   *\n   * @param value posiÃ§Ã£o para exibiÃ§Ã£o do elemento\n   */\n  adjustPosition(value: string) {\n    const position = value || 'bottom';\n    this.elementPosition(position);\n    this.customPositions && this.customPositions.length ? this.adjustCustomPosition(position) : this.adjustDefaultPosition(position);\n  }\n\n  /**\n   * @description Retorna a direÃ§Ã£o da seta, conforme a posiÃ§Ã£o do elemento.\n   */\n  getArrowDirection() {\n    return this.arrowDirection;\n  }\n\n  /**\n   * @description MÃ©todo responsÃ¡vel por definir as propriedades utilizadas para exibir o elemento na posiÃ§Ã£o correta.\n   *\n   * @param element elemento que serÃ¡ exibido\n   * @param elementOffset offSet do elemento\n   * @param targetElement elemento de onde deve partir a exibiÃ§Ã£o\n   * @param customPositions posiÃ§Ãµes que sobrescreve as posiÃ§Ãµes padrÃµes\n   * @param isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro serÃ¡ igual do targetElement\n   * @param isCornerAligned indica se o elemento filho serÃ¡ alinhado nos cantos do elemneto pai.\n   */\n  setElements(element: ElementRef | HTMLElement, elementOffset: number, targetElement: ElementRef | HTMLElement,\n              customPositions?: Array<string>, isSetElementWidth: boolean = false, isCornerAligned: boolean = false) {\n\n    this.element = (element instanceof ElementRef) ? element.nativeElement : element;\n    this.targetElement = (targetElement instanceof ElementRef) ? targetElement.nativeElement : targetElement;\n\n    this.elementOffset = elementOffset;\n\n    this.customPositions = customPositions;\n    this.isSetElementWidth = isSetElementWidth;\n    this.isCornerAligned = isCornerAligned;\n  }\n\n  private adjustCustomPosition(position: string) {\n    const positionLength = this.customPositions.length;\n\n    let sidesCount = 0;\n\n    while (sidesCount++ < positionLength) {\n      if (this.overflowAllSides(position)) {\n        position = this.nextPosition(position, this.customPositions);\n        this.elementPosition(position);\n      }\n    }\n  }\n\n  private adjustDefaultPosition(position: string) {\n    const mainPositions = this.getMainPositions();\n    const mainPositionLength = mainPositions.length;\n\n    let mainSidesCount = 0;\n\n    while (mainSidesCount++ < mainPositionLength) {\n      const mainPosition = this.getMainPosition(position);\n      this.elementPosition(position);\n\n      if (this.overflowMain(mainPosition)) {\n        position = this.nextPosition(mainPosition, mainPositions);\n        continue;\n      } else if (this.overflowAllSides(position)) {\n        this.verifySubPositions(position);\n        return;\n      }\n\n      return;\n    }\n  }\n\n  private elementPosition(position: string) {\n    this.isCornerAligned ? this.setAlignedElementPosition(position) : this.setElementPosition(position);\n  }\n\n  private getMainPosition(position: string) {\n    return (position.indexOf('-') > -1) ? position.substring(0, position.indexOf('-')) : position;\n  }\n\n  private getMainPositions() {\n    const defaultMainPositions = ['top', 'right', 'bottom', 'left'];\n\n    return this.customPositions && this.customPositions.length ?\n      this.getMainPositionsByCustomPositions(this.customPositions) : defaultMainPositions;\n  }\n\n  private getMainPositionsByCustomPositions(customPositions: Array<string>) {\n    const mainPositions = [];\n    const customPositionsLength = customPositions.length;\n\n    for (let i = 0; i < customPositionsLength; i++) {\n      const position = customPositions[i];\n\n      const mainPosition = this.getMainPosition(position);\n\n      if (!mainPositions.includes(mainPosition)) {\n        mainPositions.push(mainPosition);\n      }\n    }\n\n    return mainPositions;\n  }\n\n  private getOverflows() {\n    const sizesAndPositions = this.getSizesAndPositions();\n\n    return {\n      right: (sizesAndPositions.element.right > sizesAndPositions.window.innerWidth),\n      top: (sizesAndPositions.element.top <= 0),\n      left: (sizesAndPositions.element.left <= 0),\n      bottom: (sizesAndPositions.element.bottom > sizesAndPositions.window.innerHeight)\n    };\n  }\n\n  private getSizesAndPositions() {\n    return {\n      window: {\n        scrollY: window.scrollY,\n        scrollX: window.scrollX,\n        innerWidth: window.innerWidth,\n        innerHeight: window.innerHeight\n      },\n      element: this.element.getBoundingClientRect(),\n      target: this.targetElement ? this.targetElement.getBoundingClientRect() : { top: 0, bottom: 0, right: 0, left: 0 }\n    };\n  }\n\n  private nextPosition(position: string, positions: Array<string> = []): string {\n    const index = positions.indexOf(position);\n    const nextIndex = index + 1;\n\n    if (index > -1 && nextIndex < positions.length) {\n\n      return positions[nextIndex];\n    } else {\n      return positions[0];\n    }\n\n  }\n\n  private overflowAllSides(position: string) {\n    const overflows = this.getOverflows();\n\n    switch (position) {\n      case 'top': return overflows.top || overflows.right || overflows.left;\n      case 'top-right': return overflows.top || overflows.right;\n      case 'top-left': return overflows.top || overflows.left;\n      case 'right': return overflows.right || overflows.top || overflows.bottom;\n      case 'right-top': return overflows.right || overflows.top;\n      case 'right-bottom': return overflows.right || overflows.bottom;\n      case 'bottom': return overflows.bottom || overflows.right || overflows.left;\n      case 'bottom-right': return overflows.bottom || overflows.right;\n      case 'bottom-left': return overflows.bottom || overflows.left;\n      case 'left': return overflows.left || overflows.top || overflows.bottom;\n      case 'left-top': return overflows.left || overflows.top;\n      case 'left-bottom': return overflows.left || overflows.bottom;\n    }\n  }\n\n  private overflowMain(position: string) {\n    const overflows = this.getOverflows();\n\n    switch (position) {\n      case 'top': return overflows.top;\n      case 'right': return overflows.right;\n      case 'bottom': return overflows.bottom;\n      case 'left': return overflows.left;\n    }\n  }\n\n  private setAlignedArrowDirection(elementPosition: string) {\n    switch (elementPosition) {\n      case 'top-left': return 'bottom-left';\n      case 'top-right': return 'bottom-right';\n      case 'bottom-right': return 'top-right';\n      case 'bottom-left': return 'top-left';\n    }\n  }\n\n  private setAlignedBottomPositions(displacement: number, sizesAndPositions) {\n    this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';\n    this.element.style.left = sizesAndPositions.target.left - displacement + 'px';\n  }\n\n  private setAlignedElementPosition(position: string) {\n    this.setElementWidth();\n\n    const sizesAndPositions: any = this.getSizesAndPositions();\n\n    switch (position) {\n      case 'bottom-left':\n        this.setAlignedBottomPositions(0, sizesAndPositions);\n        break;\n      case 'bottom-right':\n        this.setAlignedBottomPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);\n        break;\n      case 'top-left':\n        this.setAlignedTopPositions(0, sizesAndPositions);\n        break;\n      case 'top-right':\n        this.setAlignedTopPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);\n        break;\n    }\n\n    this.arrowDirection = this.setAlignedArrowDirection(position);\n\n  }\n\n  private setAlignedTopPositions(displacement: number, sizesAndPositions) {\n    this.element.style.top = sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';\n    this.element.style.left = sizesAndPositions.target.left - displacement + 'px';\n  }\n\n  private setArrowDirection(elementPosition: string) {\n    switch (elementPosition) {\n      case 'top': return 'bottom';\n      case 'top-left': return 'bottom-right';\n      case 'top-right': return 'bottom-left';\n      case 'right': return 'left';\n      case 'right-top': return 'left-bottom';\n      case 'right-bottom': return 'left-top';\n      case 'bottom': return 'top';\n      case 'bottom-right': return 'top-left';\n      case 'bottom-left': return 'top-right';\n      case 'left': return 'right';\n      case 'left-bottom': return 'right-top';\n      case 'left-top': return 'right-bottom';\n    }\n  }\n\n  private setBottomPositions(displacement: number, sizesAndPositions) {\n    this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';\n    this.element.style.left = sizesAndPositions.target.left + (sizesAndPositions.target.width / 2) - displacement + 'px';\n  }\n\n  private setElementPosition(position: string) {\n    this.setElementWidth();\n\n    const sizesAndPositions = this.getSizesAndPositions();\n\n    switch (position) {\n      case 'top':\n        this.setTopPositions((sizesAndPositions.element.width / 2), sizesAndPositions);\n        break;\n      case 'top-left':\n        this.setTopPositions((sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);\n        break;\n      case 'top-right':\n        this.setTopPositions((this.offsetArrow + this.differenceDiagonalToWidthArrow), sizesAndPositions);\n        break;\n      case 'right':\n        this.setRightPositions((sizesAndPositions.element.height / 2), sizesAndPositions);\n        break;\n      case 'right-top':\n        this.setRightPositions((sizesAndPositions.element.height - this.offsetArrow - this.differenceDiagonalToWidthArrow),\n          sizesAndPositions);\n        break;\n      case 'right-bottom':\n        this.setRightPositions(this.offsetArrow, sizesAndPositions);\n        break;\n      case 'bottom':\n        this.setBottomPositions((sizesAndPositions.element.width / 2), sizesAndPositions);\n        break;\n      case 'bottom-right':\n        this.setBottomPositions((this.offsetArrow + this.differenceDiagonalToWidthArrow), sizesAndPositions);\n        break;\n      case 'bottom-left':\n        this.setBottomPositions((sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow),\n          sizesAndPositions);\n        break;\n      case 'left':\n        this.setLeftPositions((sizesAndPositions.element.height / 2), sizesAndPositions);\n        break;\n      case 'left-bottom':\n        this.setLeftPositions(this.offsetArrow, sizesAndPositions);\n        break;\n      case 'left-top':\n        this.setLeftPositions((sizesAndPositions.element.height - this.offsetArrow), sizesAndPositions);\n        break;\n    }\n\n    this.arrowDirection = this.setArrowDirection(position);\n  }\n\n  private setElementWidth() {\n    if (this.isSetElementWidth && this.targetElement) {\n      this.element.style.width = `${this.targetElement.clientWidth}px`;\n    }\n  }\n\n  private setLeftPositions(displacement: number, sizesAndPositions) {\n    this.element.style.top = sizesAndPositions.target.top - displacement + (sizesAndPositions.target.height / 2) + 'px';\n    this.element.style.left = sizesAndPositions.target.left - sizesAndPositions.element.width - this.elementOffset + 'px';\n  }\n\n  private setRightPositions(displacement: number, sizesAndPositions) {\n    this.element.style.top = sizesAndPositions.target.top - displacement + (sizesAndPositions.target.height / 2) + 'px';\n    this.element.style.left = sizesAndPositions.target.right + this.elementOffset + 'px';\n  }\n\n  private setTopPositions(displacement: number, sizesAndPositions) {\n    this.element.style.top = sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';\n    this.element.style.left = sizesAndPositions.target.left + (sizesAndPositions.target.width / 2) - displacement + 'px';\n  }\n\n  private verifySubPositions(position: string) {\n    if (position.indexOf('-') > -1) {\n      position = position.substring(0, position.indexOf('-'));\n      this.elementPosition(position);\n    }\n\n    let align = 0;\n    while (align++ < 3) {\n      if (this.overflowAllSides(position)) {\n        position = this.nextPosition(position, thfControlPositionSidesDefault);\n        this.elementPosition(position);\n      } else {\n        return null;\n      }\n    }\n  }\n\n}\n","// Array de posiÃ§Ãµes.\nexport const THF_CONTROL_POSITIONS = [\n  'right',\n  'right-top',\n  'right-bottom',\n  'top',\n  'top-left',\n  'top-right',\n  'left',\n  'left-top',\n  'left-bottom',\n  'bottom',\n  'bottom-left',\n  'bottom-right'\n];\n","import { Input } from '@angular/core';\n\nimport { THF_CONTROL_POSITIONS } from './../../services/thf-control-position/thf-control-position.constants';\n\nconst CONTENT_MAX_LENGTH = 140;\nconst THF_TOOLTIP_POSITION_DEFAULT = 'bottom';\n\n/**\n * @description\n *\n * A diretiva thf-tooltip deve ser utilizada para oferecer informaÃ§Ãµes adicionais quando os usuÃ¡rios\n * passam o mouse sobre o elemento alvo ao qual ela estÃ¡ atribuÃ­da.\n *\n * O conteÃºdo Ã© formado por um pequeno texto que deve contribuir para uma tomada de decisÃ£o ou\n * orientaÃ§Ã£o do usuÃ¡rio. A ativaÃ§Ã£o dele pode estar em qualquer componente ou tag HTML.\n *\n * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como\n * conteÃºdo deve-se utilizar o [**thf-popover**](https://thf.totvs.com.br/documentation/thf-popover?view=doc).\n */\n\nexport class ThfTooltipBaseDirective {\n\n  private _tooltip: string = '';\n  protected _tooltipPosition?: string = 'bottom';\n\n  /**\n   * @description\n   *\n   * Habilita e atribui um texto ao thf-tooltip, com limitaÃ§Ã£o de 140 caracteres.\n   */\n  @Input('t-tooltip') set tooltip(tooltip: string) {\n    if (tooltip && tooltip.length > CONTENT_MAX_LENGTH) {\n       this._tooltip = tooltip.substring(0, CONTENT_MAX_LENGTH);\n    } else {\n      this._tooltip = tooltip;\n    }\n  }\n  get tooltip() {\n    return this._tooltip;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define a posiÃ§Ã£o que o thf-tooltip abrirÃ¡ em relaÃ§Ã£o ao componente alvo. Sugere-se que seja\n   * usada a orientaÃ§Ã£o \"bottom\" (abaixo), porÃ©m o mesmo Ã© flexÃ­vel e serÃ¡ rotacionado\n   * automaticamente para se adequar a tela, caso necessÃ¡rio.\n   *\n   * PosiÃ§Ãµes vÃ¡lidas:\n   * - `right`: Posiciona o thf-tooltip no lado direito do componente alvo.\n   * - `right-bottom`: Posiciona o thf-tooltip no lado direito inferior do componente alvo.\n   * - `right-top`: Posiciona o thf-tooltip no lado direito superior do componente alvo.\n   * - `bottom`: Posiciona o thf-tooltip abaixo do componente alvo.\n   * - `bottom-left`: Posiciona o thf-tooltip abaixo e Ã  esquerda do componente alvo.\n   * - `bottom-right`: Posiciona o thf-tooltip abaixo e Ã  direita do componente alvo.\n   * - `left`: Posiciona o thf-tooltip no lado esquerdo do componente alvo.\n   * - `left-top`: Posiciona o thf-tooltip no lado esquerdo superior do componente alvo.\n   * - `left-bottom`: Posiciona o thf-tooltip no lado esquerdo inferior do componente alvo.\n   * - `top`: Posiciona o thf-tooltip acima do componente alvo.\n   * - `top-right`: Posiciona o thf-tooltip acima e Ã  direita do componente alvo.\n   * - `top-left`: Posiciona o thf-tooltip acima e Ã  esquerda do componente alvo.\n   *\n   * @default bottom\n   */\n  @Input('t-tooltip-position') set tooltipPosition(position: string) {\n    this._tooltipPosition = THF_CONTROL_POSITIONS.includes(position) ? position : THF_TOOLTIP_POSITION_DEFAULT;\n  }\n  get tooltipPosition(): string {\n    return this._tooltipPosition;\n  }\n\n}\n","import { Directive, ElementRef, HostListener, OnInit, Renderer2 } from '@angular/core';\n\nimport { ThfControlPositionService } from './../../services/thf-control-position/thf-control-position.service';\nimport { ThfTooltipBaseDirective } from './thf-tooltip-base.directive';\n\n/**\n * @docsExtends ThfTooltipBaseDirective\n *\n * @example\n *\n * <example name=\"thf-tooltip-basic\" title=\"Totvs Tooltip Basic\" >\n *  <file name=\"sample-thf-tooltip-basic/sample-thf-tooltip-basic.component.html\"> </file>\n *  <file name=\"sample-thf-tooltip-basic/sample-thf-tooltip-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-tooltip-labs\" title=\"Totvs Tooltip Labs\" >\n *  <file name=\"sample-thf-tooltip-labs/sample-thf-tooltip-labs.component.html\"> </file>\n *  <file name=\"sample-thf-tooltip-labs/sample-thf-tooltip-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-tooltip-new-user\" title=\"Totvs Tooltip - New User\" >\n *  <file name=\"sample-thf-tooltip-new-user/sample-thf-tooltip-new-user.component.html\"> </file>\n *  <file name=\"sample-thf-tooltip-new-user/sample-thf-tooltip-new-user.component.ts\"> </file>\n * </example>\n *\n */\n@Directive({\n  selector: '[t-tooltip]',\n  providers: [ ThfControlPositionService ]\n})\nexport class ThfTooltipDirective extends ThfTooltipBaseDirective implements OnInit {\n\n  private arrowDirection: string;\n  private divArrow;\n  private divContent;\n  private isHidden: boolean;\n  private lastTooltipText: string;\n  private textContent;\n  private tooltipContent;\n  private tooltipOffset: number = 8;\n\n  private eventListenerFunction: () => void;\n\n  constructor(private elementRef: ElementRef,\n              private renderer: Renderer2,\n              private thfControlPosition: ThfControlPositionService) {\n\n    super();\n  }\n\n  ngOnInit() {\n    this.initScrollEventListenerFunction();\n  }\n\n  @HostListener('mouseenter') onMouseEnter() {\n    setTimeout(() => {\n      if (this.tooltip) {\n        this.tooltipContent ? this.showTooltip() : this.createTooltip();\n\n        this.removeArrow(this.arrowDirection);\n\n        this.thfControlPosition.adjustPosition(this.tooltipPosition);\n        this.arrowDirection = this.thfControlPosition.getArrowDirection();\n\n        this.addArrow(this.arrowDirection);\n\n        this.lastTooltipText = this.tooltip;\n      }\n    });\n\n  }\n\n  @HostListener('mouseleave') onMouseLeave() {\n    this.hideTooltip();\n  }\n\n  private addArrow(arrowDirection) {\n    this.renderer.addClass(this.divArrow, `thf-arrow-${arrowDirection}`);\n  }\n\n  private addScrollEventListener() {\n    window.addEventListener('scroll', this.eventListenerFunction, true);\n  }\n\n  // Monta a estrutura do tooltip\n  private createTooltip() {\n    this.tooltipContent = this.renderer.createElement('div');\n    this.renderer.addClass(this.tooltipContent, 'thf-tooltip');\n\n    this.divArrow = this.renderer.createElement('div');\n    this.renderer.addClass(this.divArrow, 'thf-tooltip-arrow');\n\n    this.divContent = this.renderer.createElement('div');\n    this.renderer.addClass(this.divContent, 'thf-tooltip-content');\n\n    this.textContent = this.renderer.createText(this.tooltip);\n\n    this.renderer.appendChild(this.divContent, this.textContent);\n    this.renderer.appendChild(this.tooltipContent, this.divArrow);\n    this.renderer.appendChild(this.tooltipContent, this.divContent);\n    this.renderer.appendChild(this.elementRef.nativeElement, this.tooltipContent);\n\n    this.thfControlPosition.setElements(this.tooltipContent, this.tooltipOffset, this.elementRef);\n\n    this.addScrollEventListener();\n  }\n\n  private initScrollEventListenerFunction() {\n    this.eventListenerFunction = () => {\n      if (!this.isHidden) {\n        setTimeout(() => {\n          this.thfControlPosition.adjustPosition(this.tooltipPosition);\n        });\n      }\n    };\n  }\n\n  private hideTooltip() {\n    if (this.tooltipContent) {\n      this.renderer.addClass(this.tooltipContent, 'thf-invisible');\n      this.isHidden = true;\n\n      this.removeScrollEventListener();\n    }\n  }\n\n  private removeArrow(arrowDirection) {\n    if (this.elementRef.nativeElement.querySelector(`.thf-arrow-${arrowDirection}`)) {\n      this.renderer.removeClass(this.divArrow, `thf-arrow-${arrowDirection}`);\n    }\n  }\n\n  private removeScrollEventListener() {\n    window.removeEventListener('scroll', this.eventListenerFunction, true);\n  }\n\n  private showTooltip() {\n    this.renderer.removeClass(this.tooltipContent, 'thf-invisible');\n    this.updateTextContent();\n    this.isHidden = false;\n\n    this.addScrollEventListener();\n  }\n\n  private updateTextContent() {\n    if (this.lastTooltipText !== this.tooltip) {\n      this.renderer.removeChild(this.divContent, this.textContent);\n      this.textContent = this.renderer.createText(this.tooltip);\n      this.renderer.appendChild(this.divContent, this.textContent);\n    }\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThfTooltipDirective } from './thf-tooltip.directive';\n\n/**\n * @description\n *\n * MÃ³dulo da diretiva Thf-Tooltip.\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [ThfTooltipDirective],\n  exports: [ThfTooltipDirective]\n})\n\nexport class ThfTooltipModule { }\n","/**\n * @usedBy ThfButtonGroupComponent\n *\n * @description\n *\n * Define o tipo de seleÃ§Ã£o dos botÃµes do `thf-button-group`.\n */\nexport enum ThfButtonGroupToggle {\n\n  /** SeleÃ§Ã£o mÃºltipla. */\n  Multiple = 'multiple',\n\n  /** SeleÃ§Ã£o desabilitada. */\n  None = 'none',\n\n  /** SeleÃ§Ã£o Ãºnica. */\n  Single = 'single'\n\n}\n","import { Input } from '@angular/core';\n\nimport { convertToBoolean } from '../../utils/util';\nimport { ThfButtonGroupItem } from './thf-button-group-item.interface';\nimport { ThfButtonGroupToggle } from './thf-button-group-toggle.enum';\n\nconst THF_TOGGLE_TYPE_DEFAULT = 'none';\n\n/**\n * @description\n *\n * O componente `thf-button-group` Ã© formado por um conjunto de botÃµes distribuÃ­dos horizontalmente.\n * Cada botÃ£o do grupo Ã© tratado de forma individual, recebendo assim um rÃ³tulo, uma aÃ§Ã£o bem como se deverÃ¡ estar habilitado ou nÃ£o.\n *\n * Este componente alÃ©m de servir como um agrupador de botÃµes para aÃ§Ã£o, tambÃ©m permite que sejam utilizados\n * para seleÃ§Ãµes multiplas e Ãºnicas.\n *\n * O grupo de botÃµes deve ser utilizado para organizar as aÃ§Ãµes de maneira uniforme e transmitir a ideia de que os botÃµes fazem\n * parte de um mesmo contexto.\n *\n * #### Boas prÃ¡ticas\n *\n * - Evite usar o `thf-button-group` com apenas 1 aÃ§Ã£o, para isso utilize o `thf-button`.\n * - Procure utilizar no mÃ¡ximo 3 aÃ§Ãµes para cada `thf-button-group`.\n *\n * > As recomendaÃ§Ãµes do `thf-button` tambÃ©m valem para o `thf-button-group`.\n */\nexport class ThfButtonGroupBaseComponent {\n\n  private _small?: boolean = false;\n  private _toggle?: string = THF_TOGGLE_TYPE_DEFAULT;\n\n  /** Lista de botÃµes. */\n  @Input('t-buttons') buttons: Array<ThfButtonGroupItem> = [];\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Torna o grupo de botÃµes com tamanho minificado.\n   *\n   * @default `false`\n   */\n  @Input('t-small') set small(value: boolean) {\n    this._small = <any>value === '' ? true : convertToBoolean(value);\n  }\n\n  get small(): boolean {\n    return this._small;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define o modo de seleÃ§Ã£o de botÃµes.\n   *\n   * > Veja os valores vÃ¡lidos no *enum* `ThfMultiselectFilterMode`.\n   *\n   * @default `none`\n   */\n  @Input('t-toggle') set toggle(value: string) {\n    this._toggle = (<any>Object).values(ThfButtonGroupToggle).includes(value) ? value : THF_TOGGLE_TYPE_DEFAULT;\n\n    this.checkSelecteds(this._toggle);\n  }\n\n  get toggle(): string {\n    return this._toggle;\n  }\n\n  onButtonClick(buttonClicked: ThfButtonGroupItem, buttonIndex: number) {\n    if (this.toggle === ThfButtonGroupToggle.Single) {\n      this.buttons.forEach((button, index) =>\n        button.selected = index === buttonIndex ? !buttonClicked.selected : false);\n    } else if (this.toggle === ThfButtonGroupToggle.Multiple) {\n      buttonClicked.selected = !buttonClicked.selected;\n    }\n  }\n\n  private checkSelecteds(toggleMode: string) {\n    if (toggleMode === ThfButtonGroupToggle.None) {\n      this.deselectAllButtons();\n    } else if (toggleMode === ThfButtonGroupToggle.Single) {\n      const hasMoreOneSelected = this.buttons.filter(button => button.selected).length > 1;\n      if (hasMoreOneSelected) {\n        this.deselectAllButtons();\n      }\n    }\n  }\n\n  private deselectAllButtons() {\n    this.buttons.forEach(button => button.selected = false);\n  }\n\n}\n","import { Component, ViewContainerRef } from '@angular/core';\n\nimport { ThfButtonGroupBaseComponent } from './thf-button-group-base.component';\n\n/**\n * @docsExtends ThfButtonGroupBaseComponent\n *\n * @example\n *\n * <example name=\"thf-button-group-basic\" title=\"Totvs Button Group Basic\">\n *  <file name=\"sample-thf-button-group-basic/sample-thf-button-group-basic.component.html\"> </file>\n *  <file name=\"sample-thf-button-group-basic/sample-thf-button-group-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-button-group-labs\" title=\"Totvs Button Group Labs\">\n *  <file name=\"sample-thf-button-group-labs/sample-thf-button-group-labs.component.html\"> </file>\n *  <file name=\"sample-thf-button-group-labs/sample-thf-button-group-labs.component.ts\"> </file>\n * </example>\n *\n *\n * <example name=\"thf-button-group-attendance\" title=\"Totvs Button Group - Attendance\">\n *  <file name=\"sample-thf-button-group-attendance/sample-thf-button-group-attendance.component.html\"> </file>\n *  <file name=\"sample-thf-button-group-attendance/sample-thf-button-group-attendance.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-button-group-post\" title=\"Totvs Button Group - Post\">\n *  <file name=\"sample-thf-button-group-post/sample-thf-button-group-post.component.html\"> </file>\n *  <file name=\"sample-thf-button-group-post/sample-thf-button-group-post.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-button-group',\n  templateUrl: './thf-button-group.component.html'\n})\nexport class ThfButtonGroupComponent extends ThfButtonGroupBaseComponent {\n  parentRef: any;\n\n  constructor(viewRef: ViewContainerRef) {\n    super();\n\n    // Get instance of parent to execute the actions\n    this.parentRef = viewRef['_view']['component'];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThfButtonModule } from './../thf-button/index';\nimport { ThfTooltipModule } from '../../directives/thf-tooltip/index';\n\nimport { ThfButtonGroupComponent } from './thf-button-group.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente thf-button-group.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    ThfButtonModule,\n    ThfTooltipModule\n  ],\n  declarations: [\n    ThfButtonGroupComponent\n  ],\n  exports: [\n    ThfButtonGroupComponent\n  ]\n})\nexport class ThfButtonGroupModule { }\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { ThfCalendarLangService } from './services/thf-calendar.lang.service';\nimport { ThfDateService } from '../../services/thf-date';\n\nconst thfCalendarLocales = ['pt', 'en', 'es'];\nconst thfCalendarLocaleDefault = 'pt';\n\n/**\n * @description\n *\n * O `thf-calendar` Ã© um componente para seleÃ§Ã£o de datas. Ele permite uma fÃ¡cil navegaÃ§Ã£o clicando nas setas\n * de direcionamento e nos *labels* do ano ou mÃªs.\n *\n * Este componente pode receber os seguintes formatos de data:\n *\n * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**\n * ```\n * this.date = '2017-11-28T00:00:00-02:00';\n * ```\n *\n * - **Data (E8601DAw.): yyyy-mm-dd**\n * ```\n * this.date = '2017-11-28';\n * ```\n *\n * - **JavaScript Date Object:**\n * ```\n * this.date = new Date(2017, 10, 28);\n * ```\n *\n * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o\n * formato **Data (E8601DAw.): yyyy-mm-dd**.\n *\n * Importante:\n *\n * - Caso seja definida uma data fora do range da data mÃ­nima e data mÃ¡xima via *ngModel* o componente mostrarÃ¡\n * a data desabilitada porÃ©m o *model* nÃ£o serÃ¡ alterado.\n * - Caso seja definida uma data invÃ¡lida a mesma nÃ£o serÃ¡ atribuÃ­da ao calendÃ¡rio porÃ©m o *model* manterÃ¡ a data invÃ¡lida.\n */\nexport class ThfCalendarBaseComponent {\n\n  private _locale: string;\n  private _maxDate: Date;\n  private _minDate: Date;\n\n  dayVisible: boolean = false;\n  displayDays: Array<number>;\n  displayDecade: Array<number>;\n  displayFinalDecade: number;\n  displayMonth: any;\n  displayMonths: Array<any> = Array();\n  displayStartDecade: number;\n  displayWeekDays: Array<any> = Array();\n  displayYear: number;\n  monthVisible: boolean = false;\n  yearVisible: boolean = false;\n\n  protected currentMonthNumber: number;\n  protected currentYear: number;\n  protected date: Date;\n  protected dateIso: string;\n  protected displayMonthNumber: number;\n  protected lastDisplay: string;\n  protected onTouched: any = null;\n  protected propagateChange: any = null;\n  protected today: Date = new Date();\n  protected validatorChange: any;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Idioma do calendÃ¡rio.\n   *\n   * Valores vÃ¡lidos:\n   *  - `pt`\n   *  - `en`\n   *  - `es`\n   *\n   * @default `pt`\n   */\n  @Input('t-locale') set locale(locale: string) {\n    this._locale = thfCalendarLocales.includes(locale) ? locale : thfCalendarLocaleDefault;\n    this.initializeLanguage();\n  }\n  get locale() {\n    return this._locale;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define a data mÃ¡xima possÃ­vel de ser selecionada.\n   *\n   * Pode receber os seguintes formatos de data:\n   *\n   * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**\n   * ```\n   * this.date = '2017-11-28T00:00:00-02:00';\n   * ```\n   *\n   * - **Data (E8601DAw.): yyyy-mm-dd**\n   * ```\n   * this.date = '2017-11-28';\n   * ```\n   *\n   * - **JavaScript Date Object:**\n   * ```\n   * this.date = new Date(2017, 10, 28);\n   * ```\n   */\n  @Input('t-max-date') set maxDate(maxDate: any) {\n    this._maxDate = this.thfDate.getDateForDateRange(maxDate, false);\n  }\n  get maxDate() {\n    return this._maxDate;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define a data mÃ­nima possÃ­vel de ser selecionada.\n   *\n   * Pode receber os seguintes formatos de data:\n   *\n   * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**\n   * ```\n   * this.date = '2017-11-28T00:00:00-02:00';\n   * ```\n   *\n   * - **Data (E8601DAw.): yyyy-mm-dd**\n   * ```\n   * this.date = '2017-11-28';\n   * ```\n   *\n   * - **JavaScript Date Object:**\n   * ```\n   * this.date = new Date(2017, 10, 28);\n   * ```\n   */\n  @Input('t-min-date') set minDate(minDate: any) {\n    this._minDate = this.thfDate.getDateForDateRange(minDate, true);\n  }\n  get minDate() {\n    return this._minDate;\n  }\n\n  /** Evento disparado ao selecionar um dia do calendÃ¡rio. */\n  @Output('t-change') change = new EventEmitter<string>();\n\n  constructor(\n    public thfDate: ThfDateService,\n    public thfCalendarLangService: ThfCalendarLangService\n  ) { }\n\n  initializeLanguage() {\n    this.thfCalendarLangService.setLanguage(this.locale);\n    this.displayWeekDays = this.thfCalendarLangService.getWeekDaysArray();\n    this.displayMonths = this.thfCalendarLangService.getMonthsArray();\n    this.displayMonth = this.displayMonths[this.displayMonthNumber];\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ThfCalendarLangService {\n\n  private language = 'pt';\n\n  private months = [\n    {\n      pt: 'Janeiro',\n      en: 'January',\n      es: 'Enero'\n    },\n    {\n      pt: 'Fevereiro',\n      en: 'February',\n      es: 'Febrero'\n    },\n    {\n      pt: 'MarÃ§o',\n      en: 'March',\n      es: 'Marzo'\n    },\n    {\n      pt: 'Abril',\n      en: 'April',\n      es: 'Abril'\n    },\n    {\n      pt: 'Maio',\n      en: 'May',\n      es: 'Mayo'\n    },\n    {\n      pt: 'Junho',\n      en: 'June',\n      es: 'Junio'\n    },\n    {\n      pt: 'Julho',\n      en: 'July',\n      es: 'Julio'\n    },\n    {\n      pt: 'Agosto',\n      en: 'August',\n      es: 'Agosto'\n    },\n    {\n      pt: 'Setembro',\n      en: 'September',\n      es: 'Setiembre'\n    },\n    {\n      pt: 'Outubro',\n      en: 'October',\n      es: 'Octubre'\n    },\n    {\n      pt: 'Novembro',\n      en: 'November',\n      es: 'Noviembre'\n    },\n    {\n      pt: 'Dezembro',\n      en: 'December',\n      es: 'Diciembre'\n    }\n  ];\n\n  private shortWeekDays = [\n    {\n      pt: 'Dom',\n      en: 'Sun',\n      es: 'Dom'\n    },\n    {\n      pt: 'Seg',\n      en: 'Mon',\n      es: 'Lun'\n    },\n    {\n      pt: 'Ter',\n      en: 'Tue',\n      es: 'Mar'\n    },\n    {\n      pt: 'Qua',\n      en: 'Wed',\n      es: 'MiÃ©'\n    },\n    {\n      pt: 'Qui',\n      en: 'Thu',\n      es: 'Jue'\n    },\n    {\n      pt: 'Sex',\n      en: 'Fri',\n      es: 'Vie'\n    },\n    {\n      pt: 'SÃ¡b',\n      en: 'Sat',\n      es: 'SÃ¡b'\n    }\n  ];\n\n  private monthLabel = {\n    pt: 'MÃªs',\n    en: 'Month',\n    es: 'Mes'\n  };\n\n  private yearLabel = {\n    pt: 'Ano',\n    en: 'Year',\n    es: 'AÃ±o'\n  };\n\n  getMonth(month: number) {\n    return this.months[month][this.language];\n  }\n\n  getMonthLabel() {\n    return this.monthLabel[this.language];\n  }\n\n  getMonthsArray() {\n    const arrMonths = Array();\n    for (let i = 0; i < this.months.length; i++) {\n      arrMonths.push(this.months[i][this.language]);\n    }\n    return arrMonths;\n  }\n\n  getWeekDays(day: number) {\n    return this.shortWeekDays[day][this.language];\n  }\n\n  getWeekDaysArray() {\n    const arrWeekDays = Array();\n    for (let i = 0; i < this.shortWeekDays.length; i++) {\n      arrWeekDays.push(this.shortWeekDays[i][this.language]);\n    }\n    return arrWeekDays;\n  }\n\n  getYearLabel() {\n    return this.yearLabel[this.language];\n  }\n\n  setLanguage(language: string) {\n    if (language && language.length >= 2) {\n      language = language.toLowerCase().slice(0, 2);\n      this.language = (language === 'pt' || language === 'en' || language === 'es') ? language : 'pt';\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nconst thfCalendarServiceFirstWeekDayDefault: number = 0;\n\n@Injectable()\nexport class ThfCalendarService {\n\n  monthDates(year: any, month: any, dayFormatter: any = null, weekFormatter: any = null) {\n    if ((typeof month !== 'number') || (month < 0) || (month > 11)) {\n      throw Error(('month must be a number (Jan is 0)'));\n    }\n\n    const weeks: Array<any> = [];\n    let week: Array<any> = [];\n    let i = 0;\n    let date = new Date(year, month, 1);\n\n    if (year >= 0 && year < 100) {\n      date.setFullYear(year);\n    }\n\n    date = this.weekStartDate(date);\n\n    do {\n      for (i = 0; i < 7; i++) {\n        week.push(dayFormatter ? dayFormatter(date) : date);\n        date = new Date(date.getTime());\n        date.setDate(date.getDate() + 1);\n      }\n      weeks.push(weekFormatter ? weekFormatter(week) : week);\n      week = [];\n    } while ((date.getMonth() <= month) && (date.getFullYear() === year));\n    return weeks;\n  }\n\n  monthDays(year: any, month: any) {\n    const getDayOrZero = function(date: any) {\n      return date.getMonth() === month ? date : 0;\n    };\n    return this.monthDates(year, month, getDayOrZero);\n  }\n\n  weekStartDate(date: any) {\n    const startDate = new Date(date.getTime());\n    while (startDate.getDay() !== thfCalendarServiceFirstWeekDayDefault) {\n      startDate.setDate(startDate.getDate() - 1);\n    }\n    return startDate;\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { sortValues } from '../../utils/util';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * ServiÃ§o responsÃ¡vel por gerenciar o tratamento dos formatos de data e hora.\n */\n@Injectable()\nexport class ThfDateService {\n\n  private readonly dateRegex = new RegExp('^(?:[0-9])\\\\d{1}(?:[0-9])\\\\d{1}-' +\n  '(?:0[1-9]|1[0-2])-' +\n  '(?:0[1-9]|[12]\\\\d|3[01])$');\n\n  private readonly isoRegex = new RegExp('^(?:[0-9])\\\\d{1}(?:[0-9])\\\\d{1}-' +\n  '(?:0[1-9]|1[0-2])-' +\n  '(?:0[1-9]|[12]\\\\d|3[01])' +\n  'T(?:[01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d(?:Z|-0[1-9]|-1\\\\d|-2[0-3]|' +\n  '-00:?(?:0[1-9]|[0-5]\\\\d)|\\\\+[01]\\\\d|\\\\+2[0-3])' +\n  '(?:|:?[0-5]\\\\d)$');\n\n  /**\n   * MÃ©todo responsÃ¡vel por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.\n   *\n   * @param dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.\n   * @param minDate Definir `true` caso seja `minDate`.\n   * @param maxDate Definir `true` caso seja `maxDate`.\n   */\n  convertIsoToDate(dateString: string , minDate: boolean, maxDate: boolean): Date {\n    if (dateString) {\n      const { year, month, day } = this.getDateFromIso(dateString);\n\n      if (minDate) {\n        const date = new Date(year, month - 1, day, 0, 0, 0);\n        this.setYearFrom0To100(date, year);\n        return date;\n      } else if (maxDate) {\n        const date = new Date(year, month - 1, day, 23, 59, 59);\n        this.setYearFrom0To100(date, year);\n        return date;\n      } else {\n        const miliseconds = Date.parse(dateString);\n        const timezone = new Date().getTimezoneOffset() * 60000;\n        return new Date(miliseconds + timezone);\n      }\n    }\n  }\n\n  /**\n   * MÃ©todo responsÃ¡vel por converter data do formato `Date` para o formato `yyyy-mm-dd`.\n   *\n   * @param date Data no formato `Date`.\n   */\n  convertDateToISO(date: Date) {\n    if (date) {\n      const fullYear = date.getFullYear();\n      const getMonth = date.getMonth() + 1;\n      const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();\n      const month = getMonth < 10 ? '0' + getMonth : getMonth;\n      const year = this.formatYear(fullYear);\n      return year + '-' + month + '-' + day;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * MÃ©todo responsÃ¡vel por adicionar zeros a esquerda do anos em formato string.\n   *\n   * @param year Ano a ser validado.\n   */\n  formatYear(year: number) {\n\n    if (year > 999) {\n      return year.toString();\n    }\n\n    if (year > 99 && year < 1000) {\n      return `0${year}`;\n    }\n\n    if (year > 9 && year < 100) {\n      return `00${year}`;\n    }\n\n    if (year >= 0 && year < 10) {\n      return `000${year}`;\n    }\n  }\n\n  /**\n   * MÃ©todo responsÃ¡vel por retornar o dia, mÃªs e ano separados em formato de objeto.\n   *\n   * @param isoDate Ano em formato string.\n   */\n  getDateFromIso(isoDate: string): { year: number, month: number, day: number } {\n    const day = parseInt(isoDate.substring(8, 10), 10);\n    const month = parseInt(isoDate.substring(5, 7), 10);\n    const year = parseInt(isoDate.substring(0, 4), 10);\n\n    return { year, month, day };\n  }\n\n  /**\n   * MÃ©todo responsÃ¡vel por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`\n   * caso `isMindate` seja igual a `false` .\n   *\n   * @param date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.\n   * @param isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.\n   */\n  getDateForDateRange(date: any, isMinDate: boolean) {\n    const lastHour = isMinDate ? [0, 0, 0] : [23, 59, 59];\n    if (date instanceof Date) {\n      const { year, month, day } = this.splitDate(date);\n      const validDate = new Date(year, month, day, ...lastHour);\n      this.setYearFrom0To100(validDate, year);\n      return validDate;\n    } else if (this.isValidIso(date)) {\n      return this.convertIsoToDate(date, isMinDate, !isMinDate);\n    }\n  }\n\n  /**\n   * Retorna `true` caso o perÃ­odo seja vÃ¡lido, para isso a primeira data deve ser maior que a segunda data.\n   * @param dateA primeira data\n   * @param dateB segunda data\n   */\n  isDateRangeValid(dateA: string = '', dateB: string = ''): boolean {\n    const dateASplitted = dateA.split('-').map(item => parseInt(item, 10));\n    const dateBSplitted = dateB.split('-').map(item => parseInt(item, 10));\n\n    for (let index = 0; index <= dateASplitted.length; index++) {\n\n      if (dateASplitted[index] > dateBSplitted[index]) {\n        return true;\n      } else if (dateASplitted[index] < dateBSplitted[index]) {\n        return false;\n      }\n\n    }\n\n    return true;\n  }\n\n  /**\n   * MÃ©todo responsÃ¡vel por validar se uma data estÃ¡ no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.\n   *\n   * @param stringDate Data.\n   */\n  isValidIso(stringDate: string) {\n    return this.dateRegex.test(stringDate) || this.isoRegex.test(stringDate);\n  }\n\n  /**\n   * MÃ©todo responsÃ¡vel por corrigir a data caso a mesma esteja entre os anos 0 e 99.\n   *\n   * @param date Data.\n   * @param year .\n   */\n  setYearFrom0To100(date: Date, year: number) {\n    if (year >= 0 && year < 100 ) {\n      date.setFullYear(year);\n    }\n  }\n\n  /**\n   * MÃ©todo responsÃ¡vel por ordenar duas datas.\n   *\n   * @param leftSide Primeira data a ser comparada.\n   * @param rightSide Segunda data a ser comparada.\n   * @param ascending Determina se serÃ¡ em ordem crescente ou decrescente.\n   */\n  sortDate(leftSide: string | Date, rightSide: string | Date, ascending: boolean): number {\n    return sortValues(this.validateDate(leftSide), this.validateDate(rightSide), ascending);\n  }\n\n  /**\n   * MÃ©todo responsÃ¡vel por retornar o dia , mÃªs e ano de uma data informada.\n   *\n   * @param date Valor da data.\n   */\n  splitDate(date: Date) {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const day = date.getDate();\n    return { year, month, day };\n  }\n\n  /**\n   * MÃ©todo responsÃ¡vel por validar se uma data estÃ¡ entre a `minDate` e `maxDate`.\n   *\n   * @param date Data a ser validada.\n   * @param minDate Data inicial.\n   * @param maxDate Data final.\n   */\n  validateDateRange(date: Date, minDate: Date, maxDate: Date) {\n    if (minDate && maxDate) {\n      return (date >= minDate && date <= maxDate);\n    } else if (minDate && !maxDate) {\n      return (date >= minDate);\n    } else if (!minDate && maxDate) {\n      return (date <= maxDate);\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * MÃ©todo responsÃ¡vel por validar se a data foi informada nos padrÃµes 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou\n   * 'Date' padrÃ£o do javascript.\n   *\n   * @param date Data que serÃ¡ validada.\n   */\n  private validateDate(date: string | Date) {\n    const validDate = date instanceof Date ? this.convertDateToISO(date) : date;\n\n    return this.isValidIso(validDate) ? validDate : undefined;\n  }\n\n}\n","import { Component, forwardRef, OnInit } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ThfCalendarBaseComponent } from './thf-calendar-base.component';\nimport { ThfCalendarLangService } from './services/thf-calendar.lang.service';\nimport { ThfCalendarService } from './services/thf-calendar.service';\nimport { ThfDateService } from '../../services/thf-date/thf-date.service';\n\n/**\n * @docsExtends ThfCalendarBaseComponent\n *\n * @example\n *\n * <example name=\"thf-calendar-basic\" title=\"Totvs Calendar Basic\" >\n *  <file name=\"sample-thf-calendar-basic/sample-thf-calendar-basic.component.html\"> </file>\n *  <file name=\"sample-thf-calendar-basic/sample-thf-calendar-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-calendar-labs\" title=\"Totvs Calendar Labs\" >\n *  <file name=\"sample-thf-calendar-labs/sample-thf-calendar-labs.component.html\"> </file>\n *  <file name=\"sample-thf-calendar-labs/sample-thf-calendar-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-calendar-ticket-sales\" title=\"Totvs Calendar - Ticket Sales\" >\n *  <file name=\"sample-thf-calendar-ticket-sales/sample-thf-calendar-ticket-sales.component.html\"> </file>\n *  <file name=\"sample-thf-calendar-ticket-sales/sample-thf-calendar-ticket-sales.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-calendar',\n  templateUrl: './thf-calendar.component.html',\n  providers: [\n    ThfCalendarService,\n    ThfCalendarLangService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ThfCalendarComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => ThfCalendarComponent),\n      multi: true,\n    }\n  ]\n})\nexport class ThfCalendarComponent extends ThfCalendarBaseComponent implements OnInit {\n\n  constructor(\n    private thfCalendarService: ThfCalendarService,\n    thfCalendarLangService: ThfCalendarLangService,\n    thfDate: ThfDateService) {\n    super(thfDate, thfCalendarLangService);\n  }\n\n  ngOnInit() {\n    this.init();\n  }\n\n  getBackgroundColor(displayValue: number, propertyValue: number) {\n    return (displayValue === propertyValue) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';\n  }\n\n  getDayBackgroundColor(date: Date) {\n    return this.getDayColor(date, 'background');\n  }\n\n  getDayForegroundColor(date: Date) {\n    return this.getDayColor(date, 'foreground');\n  }\n\n  getForegroundColor(displayValue: number, propertyValue: number) {\n    return (displayValue === propertyValue) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';\n  }\n\n  getMonthLabel() {\n    return this.thfCalendarLangService.getMonthLabel();\n  }\n\n  getYearLabel() {\n    return this.thfCalendarLangService.getYearLabel();\n  }\n\n  onNextMonth() {\n    this.displayMonthNumber < 11 ? this.updateDisplay(this.displayYear, this.displayMonthNumber + 1) :\n      this.updateDisplay(this.displayYear + 1, 0);\n  }\n\n  onPreviousMonth() {\n    this.displayMonthNumber > 0 ? this.updateDisplay(this.displayYear, this.displayMonthNumber - 1) :\n      this.updateDisplay(this.displayYear - 1, 11);\n  }\n\n  // Ao selecionar uma data\n  onSelectDate(date: Date) {\n    this.date = date;\n    this.dateIso = this.thfDate.convertDateToISO(date);\n    if (this.propagateChange) {\n      this.propagateChange(this.dateIso);\n    }\n    this.change.emit(this.dateIso);\n  }\n\n  // Ao selecionar um mÃªs\n  onSelectMonth(year: number, month: number) {\n    this.selectDay();\n    this.updateDisplay(year, month);\n  }\n\n  // Ao selecionar um ano\n  onSelectYear(year: number, month: number) {\n    // Se veio da tela de seleÃ§Ã£o de mÃªs\n    this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();\n\n    this.currentYear = year;\n    this.updateDisplay(year, month);\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(func: any): void {\n    this.onTouched = func;\n  }\n\n  registerOnValidatorChange(fn: () => void) {\n    this.validatorChange = fn;\n  }\n\n  selectDay() {\n    this.dayVisible = true;\n    this.monthVisible = false;\n    this.yearVisible = false;\n    this.lastDisplay = 'day';\n  }\n\n  selectMonth() {\n    this.dayVisible = false;\n    this.monthVisible = true;\n    this.yearVisible = false;\n    this.lastDisplay = 'month';\n  }\n\n  selectYear() {\n    this.dayVisible = false;\n    this.monthVisible = false;\n    this.yearVisible = true;\n  }\n\n  updateYear(value: number) {\n    this.updateDisplay(this.displayYear + value, this.displayMonthNumber);\n  }\n\n  validateModel(model: any) {\n    if (this.validatorChange) {\n      this.validatorChange(model);\n    }\n  }\n\n  validate(c: AbstractControl): { [key: string]: any; } {\n    return null;\n  }\n\n  writeValue(value: any) {\n    if (value) {\n      this.writeDate(value);\n    } else {\n      this.date = undefined;\n      this.updateDate(this.today);\n    }\n  }\n\n  private addAllYearsInDecade(year: number) {\n    let i;\n    for (i = year; i < year + 10; i++) {\n      this.displayDecade.push(i);\n    }\n  }\n\n  private equalsDate(date1: Date, date2: Date): boolean {\n    try {\n      return date1.getFullYear() === date2.getFullYear() &&\n        date1.getMonth() === date2.getMonth() &&\n        date1.getDate() === date2.getDate();\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // ObtÃ©m um array de todos os anos desta dÃ©cada\n  private getDecadeArray(year) {\n    this.displayDecade = Array();\n\n    if (year % 10 !== 0) {\n      while (year % 10 !== 0) {\n        year--;\n      }\n    }\n    this.updateDecade(year);\n  }\n\n  private getColorForDate(date: Date, local: string) {\n    return this.thfDate.validateDateRange(date, this.minDate, this.maxDate) ? `thf-calendar-box-${local}-selected` :\n      `thf-calendar-box-${local}-selected-disabled`;\n  }\n\n  private getColorForDateRange(date: Date, local: string) {\n    return this.thfDate.validateDateRange(date, this.minDate, this.maxDate) ? `thf-calendar-box-${local}` :\n      `thf-calendar-box-${local}-disabled`;\n  }\n\n  private getColorForToday(date: Date, local: string) {\n    return this.thfDate.validateDateRange(date, this.minDate, this.maxDate) ? `thf-calendar-box-${local}-today` :\n      `thf-calendar-box-${local}-today-disabled`;\n  }\n\n  private getDayColor(date: Date, local: string) {\n    if (this.equalsDate(date, this.date)) {\n      return this.getColorForDate(date, local);\n    } else if (this.equalsDate(date, this.today)) {\n      return this.getColorForToday(date, local);\n    } else {\n      return this.getColorForDateRange(date, local);\n    }\n  }\n\n  private init() {\n    this.date && this.thfDate.isValidIso(this.thfDate.convertDateToISO(this.date)) ?\n      this.updateDate(this.date) : this.updateDate(this.today);\n    this.initializeLanguage();\n    this.selectDay();\n  }\n\n  private selectDateFromDate(date: Date) {\n    this.date = date;\n    this.onSelectDate(this.date);\n  }\n\n  private selectDateFromIso(stringDate: string) {\n    const { year, month, day } = this.thfDate.getDateFromIso(stringDate);\n    const date = new Date(year, month - 1, day);\n    this.thfDate.setYearFrom0To100(date, year);\n    this.date = date;\n    this.onSelectDate(this.date);\n  }\n\n  private updateDate(date: Date) {\n    if (date) {\n      this.currentMonthNumber = date.getMonth();\n      this.currentYear = date.getFullYear();\n      this.updateDisplay(this.currentYear, this.currentMonthNumber);\n    }\n  }\n\n  private updateDecade(year: number) {\n    this.addAllYearsInDecade(year);\n    this.displayStartDecade = year;\n    this.displayFinalDecade = year + 9;\n  }\n\n  private updateDisplay(year: number, month: number) {\n    const calendarArray = this.thfCalendarService.monthDays(year, month);\n    this.displayDays = [].concat.apply([], calendarArray);\n    this.displayMonthNumber = month;\n    this.displayMonth = this.displayMonths[month];\n    this.displayYear = year;\n    this.getDecadeArray(year);\n  }\n\n  private writeDate(value: any) {\n    value instanceof Date ? this.selectDateFromDate(value) : this.writeDateIso(value);\n    this.updateDate(this.date);\n  }\n\n  private writeDateIso(value: any) {\n    this.thfDate.isValidIso(value) ? this.selectDateFromIso(value) : this.date = undefined;\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThfCalendarComponent } from './thf-calendar.component';\nimport { ThfCalendarLangService } from './services/thf-calendar.lang.service';\nimport { ThfCalendarService } from './services/thf-calendar.service';\n\n/**\n * @description\n * MÃ³dulo do componente `thf-calendar`.\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [ThfCalendarComponent],\n  exports: [ThfCalendarComponent],\n  providers: [\n    ThfCalendarLangService,\n    ThfCalendarService\n  ]\n})\nexport class ThfCalendarModule { }\n","/**\n * @usedBy ThfChartComponent\n *\n * @description\n *\n * *Enum* `ThfChartType` para os tipos de grÃ¡ficos.\n */\nexport enum ThfChartType {\n\n  /**\n   * **GrÃ¡fico pizza:** utilizado para exibir proporÃ§Ãµes de valores a partir de um todo.\n   */\n  Pie = 'pie'\n\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { convertToInt, isTypeof } from '../../utils/util';\n\nimport { ThfChartType } from './enums/thf-chart-type.enum';\nimport { ThfPieChartSeries } from './interfaces/thf-chart-series.interface';\n\nconst thfChartDefaultHeight = 400;\nconst thfChartTypeDefault = ThfChartType.Pie;\nconst thfChartMinHeight = 200;\n\n/**\n * @description\n *\n * O `thf-chart` Ã© um componente para renderizaÃ§Ã£o de dados atravÃ©s de grÃ¡ficos, com isso facilitando a compreensÃ£o e tornando a\n * visualizaÃ§Ã£o destes dados mais agradÃ¡vel.\n *\n * Este componente tambÃ©m possibilita a definiÃ§Ã£o das seguintes propriedades: altura do grÃ¡fico; sÃ©rie(s) que irÃ£o compor o grÃ¡fico;\n * tÃ­tulo do grÃ¡fico; e tipo de grÃ¡fico.\n *\n * AlÃ©m das definiÃ§Ãµes de propriedades, tambÃ©m Ã© possÃ­vel definir uma aÃ§Ã£o que serÃ¡ executada ao clicar em determinado elemento do grÃ¡fico\n * e outra que serÃ¡ executada ao passar o *mouse* sobre o elemento.\n *\n * #### Boas prÃ¡ticas\n *\n * - Para que o grÃ¡fico nÃ£o fique ilegÃ­vel e incompreensÃ­vel, evite uma quantia excessiva de sÃ©ries.\n *\n */\nexport abstract class ThfChartBaseComponent {\n\n  private _height?: number = thfChartDefaultHeight;\n  private _type: ThfChartType = thfChartTypeDefault;\n\n  public readonly thfChartType = ThfChartType;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define a altura do grÃ¡fico.\n   *\n   * > O valor mÃ­nimo que pode ser informado Ã© 200.\n   *\n   * @default `400px`\n   */\n  @Input('t-height') set height(value: number) {\n    const intValue = convertToInt(value);\n    let height: number;\n\n    if (isTypeof(value, 'number')) {\n      height = intValue <= thfChartMinHeight ? thfChartMinHeight : intValue;\n    } else {\n      height = thfChartDefaultHeight;\n    }\n\n    this._height = height;\n\n    this.rebuildComponent();\n  }\n\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * ColeÃ§Ã£o de objetos que implementam a interface `ThfPieChartSeries`, para definiÃ§Ã£o dos elementos do grÃ¡fico que serÃ£o criados\n   * dinÃ¢micamente.\n   */\n  @Input('t-series') series: Array<ThfPieChartSeries>;\n\n  /** Define o tÃ­tulo do grÃ¡fico. */\n  @Input('t-title') title?: string;\n\n  // TODO quando houver a necessidade de informar um type.\n  // /**\n  //  * @optional\n  //  *\n  //  * @description\n  //  *\n  //  * Define o tipo de grÃ¡fico.\n  //  *\n  //  * > Veja os valores vÃ¡lidos no *enum* `ThfChartType`.\n  //  *\n  //  * @default `ThfChartType.Pie`\n  //  */\n  // @Input('t-type') set type(value: ThfChartType) {\n  //   this._type = (<any>Object).values(ThfChartType).includes(value) ? value : thfChartTypeDefault;\n  // }\n\n  get type(): ThfChartType {\n    return this._type;\n  }\n\n  /**\n   * Evento executado quando o usuÃ¡rio clicar sobre um elemento do grÃ¡fico.\n   *\n   * > SerÃ¡ passado por parÃ¢metro um objeto contendo a categoria e valor da sÃ©rie.\n   */\n  @Output('t-series-click')\n  seriesClick?: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Evento executado quando o usuÃ¡rio passar o *mouse* sobre um elemento do grÃ¡fico.\n   *\n   * > SerÃ¡ passado por parÃ¢metro um objeto contendo a categoria e valor da sÃ©rie.\n   */\n  @Output('t-series-hover')\n  seriesHover?: EventEmitter<any> = new EventEmitter<any>();\n\n  onSeriesClick(event: any): void {\n    this.seriesClick.emit(event);\n  }\n\n  onSeriesHover(event: any): void {\n    this.seriesHover.emit(event);\n  }\n\n  abstract rebuildComponent(): void;\n\n}\n","// Array de cores para grÃ¡ficos definido pela equipe de UX Totvs.\nexport const ThfChartColors = [\n  ['#29B6C5'],\n  ['#0C6C94', '#29B6C5'],\n  ['#0C6C94', '#29B6C5', '#C9ECF0'],\n  ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2'],\n  ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2', '#C9ECF0'],\n  ['#0C6C94', '#00A5C5', '#0082A8', '#31628D', '#364473', '#32285C'],\n  ['#0C6C94', '#00AACB', '#018DAE', '#277099', '#325783', '#35426E', '#32285D'],\n  ['#0C6C94', '#00AFCE', '#0194B6', '#117FA2', '#0088AC', '#23789F', '#2B6992', '#32285C'],\n  ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#32285C'],\n  ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#32285C'],\n  ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#36436F', '#32285C'],\n  ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#36436F', '#333565', '#32285C'],\n];\n","const thfChartAnimationDurationTime = 1500;\n\nexport const thfChartAngleStepInterval = Math.PI * 2 / Math.floor( thfChartAnimationDurationTime / 60 );\nexport const thfChartCompleteCircle = 0.0001;\nexport const thfChartPadding: number = 24;\nexport const thfChartStartAngle = -Math.PI / 2;\n","import { ElementRef, ViewChild } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nimport { ThfPieChartSeries } from '../interfaces/thf-chart-series.interface';\n\nconst Padding: number = 24;\n\nexport abstract class ThfChartDynamicTypeComponent {\n\n  protected windowResizeListener: () => void;\n  protected windowScrollListener: () => void;\n\n  centerX: number;\n  chartElementCategory: any;\n  chartElementValue: any;\n  chartHeader: number;\n  chartLegend: number;\n  chartWrapper: number;\n  colors: Array<string>;\n  height: number;\n  onSerieClick: Subject<ThfPieChartSeries> = new Subject();\n  onSerieHover: Subject<ThfPieChartSeries> = new Subject();\n  series: Array<any> = [];\n  svgElement: HTMLObjectElement;\n  svgHeight: number;\n  target: HTMLInputElement & EventTarget;\n  tooltipElement: HTMLObjectElement;\n  tooltipText: string;\n  totalValue: number;\n\n  @ViewChild('chartBody', { static: true }) chartBody: ElementRef;\n\n  @ViewChild('svgContainer', { static: true }) svgContainer: ElementRef;\n\n  calculateSVGContainerDimensions(chartWrapperElement: number, chartHeaderElement: number, chartLegendElement: number) {\n    const svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - (Padding * 2);\n\n    this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;\n    this.centerX = chartWrapperElement / 2;\n  }\n\n  calculateTotalValue() {\n    this.totalValue = this.series.reduce(\n      (previousValue, serie) => previousValue + serie.value, 0);\n  }\n\n}\n","import { Component, ElementRef, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';\n\nimport { thfChartAngleStepInterval, thfChartCompleteCircle, thfChartPadding, thfChartStartAngle } from './thf-chart-pie.constant';\nimport { ThfChartDynamicTypeComponent } from '../thf-chart-dynamic-type.component';\nimport { ThfPieChartSeries } from '../../interfaces/thf-chart-series.interface';\n\n@Component({\n  selector: 'thf-chart-pie',\n  templateUrl: './thf-chart-pie.component.html'\n})\nexport class ThfChartPieComponent extends ThfChartDynamicTypeComponent implements OnDestroy, OnInit {\n\n  private animationRunning: boolean;\n  private chartItemEndAngle: number;\n  private chartItemStartAngle: number;\n  private chartItemsEndAngleList: Array<number> = [];\n  private svgPathElementsList: Array<string> = [];\n\n  private static calculateEndAngle(value: number, totalValue: number): number {\n    return value / totalValue * (Math.PI * 2);\n  }\n\n  constructor(private el: ElementRef, private ngZone: NgZone, private renderer: Renderer2) {\n    super();\n  }\n\n  ngOnDestroy() {\n    this.removeWindowResizeListener();\n    this.removeWindowScrollListener();\n    this.animationRunning = false;\n  }\n\n  ngOnInit() {\n    this.chartInitSetup();\n    this.setEventListeners();\n  }\n\n  private animationSetup() {\n    this.chartItemStartAngle = thfChartStartAngle;\n    this.chartItemEndAngle = this.chartItemsEndAngleList[0];\n    this.animationRunning = true;\n    this.drawPathInit();\n  }\n\n  private calculateAngleRadians() {\n    this.series.forEach((serie, index) =>\n      this.chartItemsEndAngleList[index] = ThfChartPieComponent.calculateEndAngle(serie.value, this.totalValue)\n    );\n  }\n\n  private calculateCurrentEndAngle(angleCurrentPosition: number) {\n    const isSerieDrawCompleted = this.chartItemStartAngle + angleCurrentPosition > this.chartItemStartAngle + this.chartItemEndAngle;\n\n    if (isSerieDrawCompleted) {\n      return (this.chartItemStartAngle + this.chartItemEndAngle) - thfChartCompleteCircle;\n    } else {\n      return this.chartItemStartAngle + angleCurrentPosition;\n    }\n  }\n\n  private changeTooltipPosition(event: MouseEvent) {\n    if (this.tooltipElement && this.tooltipElement.classList.contains('thf-invisible')) {\n      this.showTooltip();\n    }\n\n    const tooltipPositions = this.setTooltipPositions(event);\n    this.renderer.setStyle(this.tooltipElement, 'left', `${tooltipPositions.left}px`);\n    this.renderer.setStyle(this.tooltipElement, 'top', `${tooltipPositions.top}px`);\n  }\n\n  private chartInitSetup() {\n    this.calculateSVGContainerDimensions(this.chartWrapper, this.chartHeader, this.chartLegend);\n    this.calculateTotalValue();\n    this.calculateAngleRadians();\n    this.createSVGElements();\n    this.animationSetup();\n  }\n\n  private createPath(index: number, serie: ThfPieChartSeries, svgPathsWrapper: any) {\n    const svgPath = this.renderer.createElement('svg:path', 'svg');\n\n    this.renderer.setAttribute(svgPath, 'class', 'thf-path-item');\n    this.renderer.setAttribute(svgPath, 'fill', this.colors[index]);\n    this.renderer.setAttribute(svgPath, 'data-tooltip-category', serie.category);\n    this.renderer.setAttribute(svgPath, 'data-tooltip-value', serie.value.toString());\n    this.renderer.setAttribute(svgPath, 'data-tooltip-text', serie.tooltip || `${serie.category}: ${serie.value}`);\n\n    svgPathsWrapper.appendChild(svgPath);\n\n    this.renderer.appendChild(this.svgElement, svgPathsWrapper);\n    this.svgPathElementsList.push(svgPath);\n  }\n\n  private createPaths() {\n    const svgPathsWrapper = this.renderer.createElement('svg:g', 'svg');\n\n    this.series.forEach((serie, index) => this.createPath(index, serie, svgPathsWrapper));\n  }\n\n  private createSVGElements() {\n    this.svgElement = this.renderer.createElement('svg:svg', 'svg');\n\n    this.renderer.setAttribute(this.svgElement, 'viewBox', `0 0 ${this.chartWrapper} ${this.centerX * 2}`);\n    this.renderer.setAttribute(this.svgElement, 'preserveAspectRatio', 'xMidYMin meet');\n    this.renderer.setAttribute(this.svgElement, 'class', 'thf-chart-svg-element');\n    this.renderer.setAttribute(this.svgElement, 'width', `${this.chartWrapper - thfChartPadding * 2}`);\n    this.renderer.setAttribute(this.svgElement, 'height', `${this.svgHeight}`);\n\n    this.svgContainer.nativeElement.appendChild(this.svgElement);\n\n    this.createPaths();\n  }\n\n  private drawPath(path, chartItemStartAngle, chartItemEndAngle) {\n\n    const largeArc = (chartItemEndAngle - chartItemStartAngle) % (Math.PI * 2) > Math.PI ? 1 : 0;\n    const startX = this.centerX + Math.cos(chartItemStartAngle) * this.centerX;\n    const startY = this.centerX + Math.sin(chartItemStartAngle) * this.centerX;\n    const endX = this.centerX + Math.cos(chartItemEndAngle) * this.centerX;\n    const endY = this.centerX + Math.sin(chartItemEndAngle) * this.centerX;\n\n    const pathCoordinates = [\n      'M', startX, startY,\n      'A', this.centerX, this.centerX, 0, largeArc, 1, endX, endY,\n      'L', this.centerX, this.centerX,\n      'Z'\n    ].join(' ');\n\n    return path.setAttribute('d', pathCoordinates);\n  }\n\n  private drawPathInit() {\n\n    if (!this.animationRunning) {\n      return;\n    } else {\n      this.ngZone.runOutsideAngular(() => this.drawSeries());\n    }\n  }\n\n  private drawSeries(currentSerieIndex: number = 0, angleCurrentPosition: number = 0) {\n    const isFinishedDrawingCurrentSeries = angleCurrentPosition > this.chartItemEndAngle;\n    const isFinishedDrawingAllSeries = currentSerieIndex === this.svgPathElementsList.length;\n\n    if ( isFinishedDrawingAllSeries ) {\n      return;\n    }\n\n    if ( isFinishedDrawingCurrentSeries ) {\n\n      this.chartItemStartAngle = this.chartItemStartAngle + this.chartItemEndAngle;\n      currentSerieIndex++;\n      this.chartItemEndAngle = this.chartItemsEndAngleList[currentSerieIndex];\n      angleCurrentPosition = 0;\n\n    } else {\n      angleCurrentPosition += thfChartAngleStepInterval;\n\n      this.drawPath(\n        this.svgPathElementsList[currentSerieIndex],\n        this.chartItemStartAngle,\n        this.calculateCurrentEndAngle(angleCurrentPosition)\n      );\n    }\n\n    window.requestAnimationFrame(this.drawSeries.bind(this, currentSerieIndex, angleCurrentPosition));\n\n  }\n\n  private emitEventOnEnter(event: ThfPieChartSeries) {\n    this.onSerieHover.next(event);\n  }\n\n  private onMouseClick() {\n    const serieOnClick: ThfPieChartSeries = { category: this.chartElementCategory, value: this.chartElementValue };\n\n    this.onSerieClick.next(serieOnClick);\n  }\n\n  private onMouseEnter(event) {\n    this.tooltipElement = this.chartBody.nativeElement.lastChild;\n    this.chartElementCategory = event.target.getAttributeNS(null, 'data-tooltip-category');\n    this.chartElementValue = event.target.getAttributeNS(null, 'data-tooltip-value');\n    this.tooltipText = event.target.getAttributeNS(null, 'data-tooltip-text');\n    this.showTooltip();\n    this.changeTooltipPosition(event);\n\n    const serieOnEnter = { category: this.chartElementCategory, value: this.chartElementValue };\n    this.emitEventOnEnter(serieOnEnter);\n  }\n\n  private onWindowResize() {\n    this.calculateSVGContainerDimensions(this.chartWrapper, this.chartHeader, this.chartLegend);\n    this.renderer.setAttribute(this.svgElement, 'width', `${this.chartWrapper - thfChartPadding * 2}`);\n    this.renderer.setAttribute(this.svgElement, 'height', `${this.svgHeight}`);\n  }\n\n  private removeTooltip() {\n    if (this.tooltipElement) {\n      this.renderer.addClass(this.tooltipElement, 'thf-invisible');\n    }\n  }\n\n  private removeWindowResizeListener() {\n    if (this.windowResizeListener) {\n      this.windowResizeListener();\n    }\n  }\n\n  private removeWindowScrollListener() {\n    if (this.windowScrollListener) {\n      this.windowScrollListener();\n    }\n  }\n\n  private setEventListeners() {\n    let chartSeries: Array<string> = this.el.nativeElement.querySelectorAll('.thf-path-item');\n    chartSeries = Array.from(chartSeries);\n\n    chartSeries.forEach(serie => {\n      this.renderer.listen(serie, 'click', this.onMouseClick.bind(this));\n      this.renderer.listen(serie, 'mouseenter', this.onMouseEnter.bind(this));\n      this.renderer.listen(serie, 'mousemove', this.changeTooltipPosition.bind(this));\n      this.renderer.listen(serie, 'mouseleave', this.removeTooltip.bind(this));\n    });\n\n    this.windowResizeListener = this.renderer.listen(window, 'resize', this.onWindowResize.bind(this));\n    this.windowScrollListener = this.renderer.listen(this.checkingIfScrollsWithThfPage(), 'scroll', this.removeTooltip.bind(this));\n  }\n\n  private checkingIfScrollsWithThfPage() {\n    const thfPageContent = document.getElementsByClassName('thf-page-content');\n\n    return thfPageContent.length ? thfPageContent[0] : window;\n  }\n\n  private setTooltipPositions(event: MouseEvent) {\n    const displacement: number = 8;\n\n    return {\n      left: event.clientX - this.tooltipElement.offsetWidth / 2,\n      top: event.clientY - this.tooltipElement.offsetHeight - displacement\n    };\n  }\n\n  private showTooltip() {\n    this.renderer.removeClass(this.tooltipElement, 'thf-invisible');\n  }\n\n}\n","import { AfterViewInit, ChangeDetectorRef, Component, ComponentFactoryResolver, ComponentRef, DoCheck, ElementRef, HostListener,\n  IterableDiffers, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewChild, ViewContainerRef } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nimport { ThfChartBaseComponent } from './thf-chart-base.component';\nimport { ThfChartColors } from './thf-chart-colors.constant';\nimport { ThfChartDynamicTypeComponent } from './thf-chart-types/thf-chart-dynamic-type.component';\nimport { ThfChartPieComponent } from './thf-chart-types/thf-chart-pie/thf-chart-pie.component';\nimport { ThfChartType } from './enums/thf-chart-type.enum';\n\n/**\n * @docsExtends ThfChartBaseComponent\n *\n * @example\n *\n * <example name=\"thf-chart-basic\" title=\"Totvs Chart Basic\">\n *  <file name=\"sample-thf-chart-basic/sample-thf-chart-basic.component.html\"> </file>\n *  <file name=\"sample-thf-chart-basic/sample-thf-chart-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-chart-labs\" title=\"Totvs Chart Labs\">\n *  <file name=\"sample-thf-chart-labs/sample-thf-chart-labs.component.html\"> </file>\n *  <file name=\"sample-thf-chart-labs/sample-thf-chart-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-chart-coffee-ranking\" title=\"Totvs Chart - Coffee Ranking\">\n *  <file name=\"sample-thf-chart-coffee-ranking/sample-thf-chart-coffee-ranking.component.html\"> </file>\n *  <file name=\"sample-thf-chart-coffee-ranking/sample-thf-chart-coffee-ranking.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-chart',\n  templateUrl: './thf-chart.component.html'\n})\nexport class ThfChartComponent extends ThfChartBaseComponent implements AfterViewInit, DoCheck, OnDestroy, OnInit {\n\n  private calculatedElement: boolean = false;\n  private componentRef: ComponentRef<{}>;\n  private differ: any;\n  private initialized: boolean = false;\n  private windowResizeListener: Subject<any> = new Subject();\n\n  private mappings = {\n    [ThfChartType.Pie]: ThfChartPieComponent,\n  };\n\n  colors: Array<string>;\n\n  @ViewChild('chartContainer', { read: ViewContainerRef, static: true })\n  chartContainer: ViewContainerRef;\n\n  @ViewChild('chartHeader', { static: true }) chartHeader: ElementRef;\n  @ViewChild('chartLegend', { static: true }) chartLegend: ElementRef;\n  @ViewChild('chartWrapper', { static: true }) chartWrapper: ElementRef;\n\n  @HostListener('window:resize', ['$event'])\n  onResize = () => this.windowResizeListener.next()\n\n  constructor(\n    public changeDetector: ChangeDetectorRef,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private differs: IterableDiffers) {\n      super();\n\n      this.differ = this.differs.find([]).create(null);\n  }\n\n  ngAfterViewInit() {\n    this.initialized = true;\n  }\n\n  ngDoCheck() {\n    const charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;\n\n    // Permite que o chart seja calculado na primeira vez que o componente torna-se visÃ­vel,\n    // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.\n    if (charWrapperWidth && !this.calculatedElement && this.initialized) {\n      this.calculatedElement = true;\n      this.getSeriesColor();\n      this.dynamicComponentSetting();\n    }\n\n    this.checkingForSerieChanges();\n  }\n\n  ngOnDestroy() {\n    this.removeWindowResizeListener();\n  }\n\n  ngOnInit() {\n    this.getSeriesColor();\n  }\n\n  rebuildComponent() {\n    if (this.componentRef) {\n      this.componentRef.destroy();\n      this.dynamicComponentSetting();\n    }\n  }\n\n  private checkingForSerieChanges() {\n    if (this.componentRef && this.differ) {\n      const changeSeries = this.differ.diff(this.series);\n      if (changeSeries) {\n        this.getSeriesColor();\n        this.rebuildComponent();\n      }\n    }\n  }\n\n  private createComponent() {\n    const componentType = this.getComponentType(this.type);\n    const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n\n    this.componentRef = this.chartContainer.createComponent(factory);\n\n    const instance = <ThfChartDynamicTypeComponent>this.componentRef.instance;\n\n    this.setChartProperties(instance);\n\n    return instance;\n  }\n\n  private dynamicComponentSetting() {\n    const instance = this.createComponent();\n\n    this.setResizeListenerSubscribe(instance);\n    this.changeDetector.detectChanges();\n    this.setClickSubscribe(instance);\n    this.setHoverSubscribe(instance);\n  }\n\n  private getComponentType(typeName) {\n    return this.mappings[typeName];\n  }\n\n  private getSeriesColor() {\n    const colorsLength = ThfChartColors.length - 1;\n\n    if (!this.series) {\n      return this.colors = ThfChartColors[colorsLength];\n    }\n\n    const seriesLength = this.series.length - 1;\n\n    if (seriesLength > colorsLength) {\n      let colors = ThfChartColors[colorsLength];\n\n      // recupera o resultado da divisao entre tamanho das series e o numero de cores disponiveis\n      const quantityDuplicates = seriesLength / colorsLength;\n\n      for (let i = 1; i <= quantityDuplicates; i++) {\n        colors = colors.concat(ThfChartColors[colorsLength]);\n      }\n\n      return this.colors = colors;\n    }\n\n    return this.colors = ThfChartColors[seriesLength];\n  }\n\n  private removeWindowResizeListener() {\n    if (this.onResize) {\n      this.onResize = () => {};\n    }\n  }\n\n  private setChartProperties(instance: ThfChartDynamicTypeComponent) {\n    instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;\n    instance.chartLegend = this.chartLegend.nativeElement.offsetHeight;\n    instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;\n    instance.colors = this.colors;\n    instance.height = this.height;\n    instance.series = this.series || [];\n  }\n\n  private setClickSubscribe(instance: ThfChartDynamicTypeComponent) {\n    instance.onSerieClick.subscribe(event => {\n      this.onSeriesClick(event);\n    });\n  }\n\n  private setHoverSubscribe(instance: ThfChartDynamicTypeComponent) {\n    instance.onSerieHover.subscribe(event => {\n      this.onSeriesHover(event);\n    });\n  }\n\n  private setResizeListenerSubscribe(instance: ThfChartDynamicTypeComponent) {\n    this.windowResizeListener.subscribe(() => {\n      instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;\n      instance.chartLegend = this.chartLegend.nativeElement.offsetHeight;\n      instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;\n    });\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThfChartComponent } from './thf-chart.component';\nimport { ThfChartPieComponent } from './thf-chart-types/thf-chart-pie/thf-chart-pie.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente `thf-chart`.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    ThfChartComponent,\n    ThfChartPieComponent,\n  ],\n  entryComponents: [\n    ThfChartPieComponent\n  ],\n  exports: [\n    ThfChartComponent,\n  ]\n})\nexport class ThfChartModule { }\n","import { Input } from '@angular/core';\n\nimport { convertToBoolean, convertToInt } from '../../utils/util';\n\n/**\n * @description\n *\n * O `thf-container` Ã© um componente que visa facilitar o agrupamento de conteÃºdos.\n * Por padrÃ£o o mesmo exibe uma borda, um efeito de sombra ao seu redor e um espaÃ§amento em sua parte interna, os quais\n * podem ser desabilitados. Ao remover sua borda a sombra tambÃ©m serÃ¡ removida. AlÃ©m disso, sua altura acompanha a\n * quantidade do conteÃºdo, porÃ©m pode ser fixada. Para controlar sua largura, utilize o [Grid System](/guides/grid-system),\n * assim possibilitando o tratamento para diferentes resoluÃ§Ãµes.\n */\nexport class ThfContainerBaseComponent {\n\n  private _height?: number;\n  private _noBorder?: boolean = false;\n  private _noPadding?: boolean = false;\n  private _noShadow?: boolean = false;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define a altura do `thf-container`.\n   *\n   * > Caso nÃ£o seja definido um valor, a altura se ajustarÃ¡ de acordo com o conteÃºdo.\n   */\n  @Input('t-height') set height(value: number) {\n    this._height = convertToInt(value);\n  }\n\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Desabilita a borda e a sombra em torno do `thf-container`.\n   *\n   * @default `false`\n   */\n  @Input('t-no-border') set noBorder(value: boolean) {\n    this._noBorder = convertToBoolean(value);\n  }\n\n  get noBorder(): boolean {\n    return this._noBorder;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Desabilita o espaÃ§amento interno do `thf-container`.\n   *\n   * @default `false`\n   */\n  @Input('t-no-padding') set noPadding(value: boolean) {\n    this._noPadding = convertToBoolean(value);\n  }\n\n  get noPadding(): boolean {\n    return this._noPadding;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Desabilita o sombreamento em torno do `thf-container`.\n   *\n   * @default `false`\n   */\n  @Input('t-no-shadow') set noShadow(value: boolean) {\n    this._noShadow = convertToBoolean(value);\n  }\n\n  get noShadow(): boolean {\n    return this._noShadow;\n  }\n\n}\n","import { Component } from '@angular/core';\n\nimport { ThfContainerBaseComponent } from './thf-container-base.component';\n\n/**\n * @docsExtends ThfContainerBaseComponent\n *\n * @example\n *\n * <example name=\"thf-container-basic\" title=\"Totvs Container Basic\">\n *  <file name=\"sample-thf-container-basic/sample-thf-container-basic.component.html\"> </file>\n *  <file name=\"sample-thf-container-basic/sample-thf-container-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-container-labs\" title=\"Totvs Container Labs\">\n *  <file name=\"sample-thf-container-labs/sample-thf-container-labs.component.html\"> </file>\n *  <file name=\"sample-thf-container-labs/sample-thf-container-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-container-dashboard\" title=\"Totvs Container - Dashboard\">\n *  <file name=\"sample-thf-container-dashboard/sample-thf-container-dashboard.component.html\"> </file>\n *  <file name=\"sample-thf-container-dashboard/sample-thf-container-dashboard.component.ts\"> </file>\n *  <file name=\"sample-thf-container-dashboard/sample-thf-container-dashboard.service.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-container',\n  templateUrl: './thf-container.component.html'\n})\nexport class ThfContainerComponent extends ThfContainerBaseComponent { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThfContainerComponent } from './thf-container.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente `thf-container`.\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    ThfContainerComponent\n  ],\n  declarations: [\n    ThfContainerComponent\n  ]\n})\nexport class ThfContainerModule { }\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { convertToBoolean } from '../../utils/util';\n\nconst THF_DISCLAIMER_TYPES = ['default', 'danger'];\nconst THF_DISCLAIMER_DEFAULT_TYPE = 'default';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * O componente thf-disclaimer Ã© responsÃ¡vel por representar tags.\n * Seu uso Ã© recomendado em buscas e em campos onde Ã© necessÃ¡rio representar objetos selecionados,\n * como por exemplo, no thf-multi-select.\n *\n */\nexport class ThfDisclaimerBaseComponent {\n  private _type: string = 'default';\n  private _hideClose?: boolean = false;\n\n  showDisclaimer = true;\n\n  /**\n   * Label que aparecerÃ¡ dentro do thf-disclaimer.\n   * Quando nÃ£o for definido um label serÃ¡ apresentada a propriedade t-value.\n   */\n  @Input('t-label') label?: string;\n\n  /** Valor do thf-disclaimer. */\n  @Input('t-value') value: string;\n\n  /** Nome da propriedade vinculada Ã  este thf-disclaimer. */\n  @Input('t-property') property?: string;\n\n  /**\n   * @description\n   *\n   * Esta propriedade esconde o botÃ£o para fechamento do thf-disclaimer, ao utilizar esta propriedade\n   * sem passar valor a mesma Ã© setada como false, onde o botÃ£o de fechamento estÃ¡ visÃ­vel.\n   *\n   * @default false\n   */\n  @Input('t-hide-close') set hideClose(value: boolean) {\n    this._hideClose = <any>value === '' ? true : convertToBoolean(value);\n  }\n\n  get hideClose(): boolean {\n    return this._hideClose;\n  }\n\n  /**\n   * Evento disparado ao fechar o disclaimer.\n   * Para este evento serÃ¡ passado como parÃ¢metro um objeto com value, label e property.\n   */\n  @Output('t-close-action') closeAction?: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * @description\n   *\n   * Tipo do thf-disclaimer. Pode ser 'default' ou 'danger'.\n   *\n   * @default default\n   * @optional\n   */\n  @Input('t-type') set type(type: string) {\n    this._type = THF_DISCLAIMER_TYPES.includes(type) ? type : THF_DISCLAIMER_DEFAULT_TYPE;\n  }\n\n  get type(): string {\n    return this._type;\n  }\n\n  close(): void {\n    this.showDisclaimer = false;\n    this.closeAction.emit({value: this.value, label: this.label, property: this.property});\n  }\n\n  getLabel() {\n    return this.label ? this.label : this.value;\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { isKeyCodeEnter } from '../../utils/util';\n\nimport { ThfDisclaimerBaseComponent } from './thf-disclaimer-base.component';\n\n/**\n * @docsPrivate\n *\n * @docsExtends ThfDisclaimerBaseComponent\n *\n * @examplePrivate\n *\n * <example-private name=\"thf-disclaimer\" title=\"Totvs Disclaimer\">\n *   <file name=\"sample-thf-disclaimer.component.html\"> </file>\n *   <file name=\"sample-thf-disclaimer.component.ts\"> </file>\n * </example-private>\n */\n@Component({\n  selector: 'thf-disclaimer',\n  templateUrl: './thf-disclaimer.component.html'\n})\nexport class ThfDisclaimerComponent extends ThfDisclaimerBaseComponent {\n\n  onKeyPress(event: any) {\n\n    if (isKeyCodeEnter(event)) {\n      this.close();\n    }\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ThfDisclaimerComponent } from './thf-disclaimer.component';\n\n/**\n * @description\n * MÃ³dulo do componente thf-disclaimer.\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [ThfDisclaimerComponent],\n  exports: [ThfDisclaimerComponent]\n})\nexport class ThfDisclaimerModule { }\n","import { DoCheck, EventEmitter, Input, IterableDiffers, Output } from '@angular/core';\n\nimport { v4 as uuid } from 'uuid';\n\nimport { browserLanguage, convertToBoolean, isKeyCodeEnter, thfLocaleDefault } from '../../utils/util';\n\nimport { ThfDisclaimer } from '../thf-disclaimer/thf-disclaimer.interface';\n\nexport const thfDisclaimerGroupLiteralsDefault = {\n  en: { removeAll: 'Remove all' },\n  es: { removeAll: 'Eliminar todos' },\n  pt: { removeAll: 'Remover todos' }\n};\n\n/**\n * @description\n *\n * O componente `thf-disclaimer-group` Ã© recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.\n *\n * Ã partir de dois *disclaimers* com o botÃ£o **fechar** habilitado, o componente renderiza de forma automÃ¡tica um novo e destacado\n * *disclaimer* que possibilita **remover todos**, mas que tambÃ©m pode ser desabilitado.\n *\n * TambÃ©m Ã© possÃ­vel navegar entre os *disclaimers* atravÃ©s do teclado utilizando a tecla *tab* e, para remoÃ§Ã£o do *disclaimer* selecionado,\n * basta pressionar a tecla *enter*. Esta funcionalidade nÃ£o se aplica caso a propriedade `hideClose` estiver habilitada.\n *\n * > Veja a integraÃ§Ã£o destas funcionalidade no componente [thf-page-list](/documentation/thf-page-list).\n */\nexport class ThfDisclaimerGroupBaseComponent implements DoCheck {\n\n  private _disclaimers: Array<ThfDisclaimer> = [];\n  private _hideRemoveAll: boolean = false;\n\n  private differ;\n  private previousDisclaimers: Array<ThfDisclaimer> = [];\n\n  readonly literals = {\n      ...thfDisclaimerGroupLiteralsDefault[thfLocaleDefault],\n      ...thfDisclaimerGroupLiteralsDefault[browserLanguage()]\n  };\n\n  /** Lista de *disclaimers*. */\n\n  /**\n   * @description\n   *\n   * Lista de *disclaimers*.\n   *\n   * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referÃªncia do array de `ThfDisclaimer`.\n   *\n   * Exemplo adicionando um *disclaimer* no array:\n   *\n   * ```\n   * this.disclaimers = [...this.disclaimers, disclaimer];\n   * ```\n   *\n   * ou\n   *\n   * ```\n   * this.disclaimers = this.disclaimers.concat(disclaimer);\n   * ```\n   */\n  @Input('t-disclaimers') set disclaimers(value: Array<ThfDisclaimer>) {\n\n    this.previousDisclaimers = [...this.disclaimers];\n    this._disclaimers = this.checkDisclaimers(value);\n\n  }\n\n  get disclaimers() {\n    return this._disclaimers;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Oculta o botÃ£o para remover todos os *disclaimers* do grupo.\n   *\n   * > Por padrÃ£o, o mesmo Ã© exibido Ã  partir de dois ou mais *disclaimers* com a opÃ§Ã£o `hideClose` habilitada.\n   *\n   * @default `false`\n   */\n  @Input('t-hide-remove-all')\n  set hideRemoveAll(value: boolean) {\n    this._hideRemoveAll = <any>value === '' ? true : convertToBoolean(value);\n  }\n\n  get hideRemoveAll() {\n    return this._hideRemoveAll;\n  }\n\n  /** TÃ­tulo do grupo de *disclaimers*. */\n  @Input('t-title') title?: string;\n\n  /** FunÃ§Ã£o que serÃ¡ disparada quando a lista de *disclaimers* for modificada. */\n  @Output('t-change') change?: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(differs: IterableDiffers) {\n    this.differ = differs.find([]).create(null);\n  }\n\n  ngDoCheck() {\n    this.checkChanges();\n  }\n\n  closeItem(disclaimer: any, emitChange: boolean = true) {\n    const itemIndex = this.disclaimers.findIndex(d => d['$id'] === disclaimer['$id']);\n    this.disclaimers.splice(itemIndex, 1);\n\n    if (emitChange) {\n      this.emitChangeDisclaimers();\n    }\n  }\n\n  isRemoveAll() {\n    return !this.hideRemoveAll && this.disclaimers.filter(c => !c.hideClose).length > 1;\n  }\n\n  onKeyPress(event: any) {\n\n    if (isKeyCodeEnter(event)) {\n      this.removeAllItems();\n    }\n\n  }\n\n  removeAllItems() {\n    const removeItems = [];\n\n    this.disclaimers.forEach(disclaimer => {\n      if (!disclaimer.hideClose) {\n        removeItems.push(disclaimer);\n      }\n    });\n\n    removeItems.forEach(disclaimer => this.closeItem(disclaimer, false));\n\n    this.emitChangeDisclaimers();\n  }\n\n  private checkChanges() {\n\n    if (this.differ) {\n      const changes = this.differ.diff(this.disclaimers);\n\n      if (changes && this.disclaimersAreChanged(this.disclaimers)) {\n        this.emitChangeDisclaimers();\n      }\n\n    }\n\n  }\n\n  private checkDisclaimers(disclaimers: Array<ThfDisclaimer>) {\n    if (Array.isArray(disclaimers)) {\n\n      for (let i = 0; i < disclaimers.length; i++) {\n        const disclaimer = disclaimers[i];\n\n        if (disclaimer.value || disclaimer.value === 0 || disclaimer.value === false) {\n\n          disclaimer['$id'] = uuid();\n\n        } else {\n\n          disclaimers.splice(i, 1);\n          i--;\n        }\n      }\n\n      return disclaimers;\n    }\n\n    return [];\n  }\n\n  private disclaimersAreChanged(disclaimers: Array<ThfDisclaimer>): boolean {\n    const currentValues: Array<ThfDisclaimer> = disclaimers;\n\n    if (currentValues.length !== this.previousDisclaimers.length) {\n      return true;\n    }\n\n    return currentValues.some((disclaimer, index) => disclaimer.value !== this.previousDisclaimers[index].value\n      || disclaimer.property !== this.previousDisclaimers[index].property);\n  }\n\n  private emitChangeDisclaimers() {\n    setTimeout(() => {\n      this.change.emit(this.disclaimers);\n    });\n    this.previousDisclaimers = [...this._disclaimers];\n  }\n\n}\n","import { Component, IterableDiffers } from '@angular/core';\n\nimport { ThfDisclaimerGroupBaseComponent } from './thf-disclaimer-group-base.component';\n\n/**\n * @docsExtends ThfDisclaimerGroupBaseComponent\n *\n * @example\n *\n * <example name=\"thf-disclaimer-group-basic\" title=\"Totvs Disclaimer Group Basic\">\n *   <file name=\"sample-thf-disclaimer-group-basic/sample-thf-disclaimer-group-basic.component.html\"> </file>\n *   <file name=\"sample-thf-disclaimer-group-basic/sample-thf-disclaimer-group-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-disclaimer-group-labs\" title=\"Totvs Disclaimer Group Labs\">\n *   <file name=\"sample-thf-disclaimer-group-labs/sample-thf-disclaimer-group-labs.component.html\"> </file>\n *   <file name=\"sample-thf-disclaimer-group-labs/sample-thf-disclaimer-group-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-disclaimer-group-sw-planets\" title=\"Totvs Disclaimer Group - Star Wars Planets\">\n *   <file name=\"sample-thf-disclaimer-group-sw-planets/sample-thf-disclaimer-group-sw-planets.component.html\"> </file>\n *   <file name=\"sample-thf-disclaimer-group-sw-planets/sample-thf-disclaimer-group-sw-planets.component.ts\"> </file>\n *   <file name=\"sample-thf-disclaimer-group-sw-planets/sample-thf-disclaimer-group-sw-planets.service.ts\"> </file>\n * </example>\n *\n */\n@Component({\n  selector: 'thf-disclaimer-group',\n  templateUrl: './thf-disclaimer-group.component.html'\n})\nexport class ThfDisclaimerGroupComponent extends ThfDisclaimerGroupBaseComponent {\n\n  constructor(differs: IterableDiffers) {\n    super(differs);\n  }\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n/**\n * @docsPrivate\n *\n * @description\n *\n * Este Ã© um componente interno utilizado pelo thf-disclaimer-group, se comporta como um botÃ£o e recebe uma aÃ§Ã£o para remover todos os\n * thf-disclaimers do grupo.\n */\n@Component({\n  selector: 'thf-disclaimer-remove',\n  templateUrl: './thf-disclaimer-remove.component.html'\n})\nexport class ThfDisclaimerRemoveComponent {\n\n  /** Texto exibido.  */\n  @Input('t-label') label?: string;\n\n  /** AÃ§Ã£o para remover todos.  */\n  @Output('t-remove-all-action') removeAllAction = new EventEmitter();\n\n  // Emite a aÃ§Ã£o de remover todos.\n  removeAction() {\n    this.removeAllAction.emit();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ThfDisclaimerModule } from '../thf-disclaimer/thf-disclaimer.module';\n\nimport { ThfDisclaimerGroupComponent } from './thf-disclaimer-group.component';\nimport { ThfDisclaimerRemoveComponent } from './thf-disclaimer-remove/thf-disclaimer-remove.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente thf-disclaimer-group.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    ThfDisclaimerModule\n  ],\n  declarations: [ThfDisclaimerGroupComponent, ThfDisclaimerRemoveComponent],\n  exports: [ThfDisclaimerGroupComponent]\n})\nexport class ThfDisclaimerGroupModule { }\n","import { Input } from '@angular/core';\n\n/**\n * @description\n *\n * Este componente apresenta uma linha demarcadora de blocos e pode conter um *label*. Seu uso Ã© indicado para definiÃ§Ã£o\n * e organizaÃ§Ã£o de informaÃ§Ãµes em uma tela e sua caracterÃ­stica Ã© semelhante Ã  tag `<hr>`.\n */\nexport class ThfDividerBaseComponent {\n\n  /** Valor do rÃ³tulo a ser exibido. */\n  @Input('t-label') label?: string;\n\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { ThfDividerBaseComponent } from './thf-divider-base.component';\n\n/**\n * @docsExtends ThfDividerBaseComponent\n *\n * @example\n *\n * <example name=\"thf-divider-basic\" title=\"Totvs Divider Basic\" >\n *  <file name=\"sample-thf-divider-basic/sample-thf-divider-basic.component.html\"> </file>\n *  <file name=\"sample-thf-divider-basic/sample-thf-divider-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-divider-labs\" title=\"Totvs Divider Labs\" >\n *  <file name=\"sample-thf-divider-labs/sample-thf-divider-labs.component.html\"> </file>\n *  <file name=\"sample-thf-divider-labs/sample-thf-divider-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-divider-user-detail\" title=\"Totvs Divider - User Detail\" >\n *  <file name=\"sample-thf-divider-user-detail/sample-thf-divider-user-detail.component.html\"> </file>\n *  <file name=\"sample-thf-divider-user-detail/sample-thf-divider-user-detail.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-divider',\n  templateUrl: './thf-divider.component.html',\n})\nexport class ThfDividerComponent extends ThfDividerBaseComponent { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThfDividerComponent } from './thf-divider.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente thf-divider.\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ThfDividerComponent\n  ],\n  exports: [\n    ThfDividerComponent\n  ]\n})\nexport class ThfDividerModule { }\n","import { ElementRef, Input } from '@angular/core';\n\nimport { convertToBoolean } from '../../utils/util';\nimport { THF_CONTROL_POSITIONS } from './../../services/thf-control-position/thf-control-position.constants';\n\nimport { ThfPopupAction } from './thf-popup-action.interface';\n\nconst thfPopupDefaultPosition = 'bottom-left';\n\n/**\n * @description\n *\n * O componente `thf-popup` Ã© um container pequeno recomendado para aÃ§Ãµes de navegaÃ§Ã£o:\n * Ele abre sobreposto aos outros componentes.\n *\n * Ã possÃ­vel escolher as posiÃ§Ãµes do `thf-popup` em relaÃ§Ã£o ao componente alvo, para isto veja a propriedade `t-position`.\n *\n * TambÃ©m Ã© possÃ­vel informar um _template_ _header_ para o `thf-popup`, que serÃ¡ exibido acima das aÃ§Ãµes.\n * Para funcionar corretamente Ã© preciso adicionar a propriedade `t-popup-header-template` no elemento que servirÃ¡ de template, por exemplo:\n *\n * ```\n * <thf-popup [t-target]=\"target\">\n *   <div t-popup-header-template>\n *     <div>\n *       Dev Totvs\n *     </div>\n *     <div>\n *       dev.totvs@totvs.com.br\n *     </div>\n *   </div>\n * </thf-popup >\n * ```\n */\nexport class ThfPopupBaseComponent {\n\n  private _actions: Array<ThfPopupAction>;\n  private _customPositions?: Array<string>;\n  private _hideArrow: boolean = false;\n  private _isCornerAlign: boolean = false;\n  private _position?: string = thfPopupDefaultPosition;\n  private _target: any;\n\n  arrowDirection: string = 'top-right';\n  showPopup: boolean = false;\n\n  protected oldTarget;\n  protected param;\n  protected parentRef;\n\n  /** Lista de aÃ§Ãµes que serÃ£o exibidas no componente. */\n  @Input('t-actions') set actions(value: Array<ThfPopupAction>) {\n    this._actions = Array.isArray(value) ? value : [];\n  }\n\n  get actions() {\n    return this._actions;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Oculta a seta do componente *popup*.\n   *\n   * @default `false`\n   */\n  @Input('t-hide-arrow') set hideArrow(value: boolean) {\n    this._hideArrow = convertToBoolean(value);\n  }\n\n  get hideArrow(): boolean {\n    return this._hideArrow;\n  }\n\n  // Define se o `thf-popup` serÃ¡ alinhado pelos cantos do elemento target.\n  @Input('t-is-corner-align') set isCornerAlign(value: boolean) {\n    this._isCornerAlign = convertToBoolean(value);\n  }\n\n  get isCornerAlign(): boolean {\n    return this._isCornerAlign;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define a posiÃ§Ã£o inicial que o `thf-popup` abrirÃ¡ em relaÃ§Ã£o ao componente alvo. Sugere-se que seja\n   * usada a orientaÃ§Ã£o `bottom-left` (abaixo e a esquerda), porÃ©m o mesmo Ã© flexÃ­vel e serÃ¡ rotacionado\n   * automaticamente para se adequar a tela, caso necessÃ¡rio.\n   *\n   * > Caso seja definido um `t-custom-positions` o componente irÃ¡ abrir na posiÃ§Ã£o definida na propriedade `t-position`\n   * e caso nÃ£o caiba na posiÃ§Ã£o inicial ele irÃ¡ rotacionar seguindo a ordem de posiÃ§Ãµes definidas no `t-custom-positions`.\n   *\n   * PosiÃ§Ãµes vÃ¡lidas:\n   * - `right`: Posiciona o thf-popup no lado direito do componente alvo.\n   * - `right-bottom`: Posiciona o thf-popup no lado direito inferior do componente alvo.\n   * - `right-top`: Posiciona o thf-popup no lado direito superior do componente alvo.\n   * - `bottom`: Posiciona o thf-popup abaixo do componente alvo.\n   * - `bottom-left`: Posiciona o thf-popup abaixo e Ã  esquerda do componente alvo.\n   * - `bottom-right`: Posiciona o thf-popup abaixo e Ã  direita do componente alvo.\n   * - `left`: Posiciona o thf-popup no lado esquerdo do componente alvo.\n   * - `left-top`: Posiciona o thf-popup no lado esquerdo superior do componente alvo.\n   * - `left-bottom`: Posiciona o thf-popup no lado esquerdo inferior do componente alvo.\n   * - `top`: Posiciona o thf-popup acima do componente alvo.\n   * - `top-right`: Posiciona o thf-popup acima e Ã  direita do componente alvo.\n   * - `top-left`: Posiciona o thf-popup acima e Ã  esquerda do componente alvo.\n   *\n   * @default `bottom-left`\n   */\n  @Input('t-position') set position(value: string) {\n    this._position = THF_CONTROL_POSITIONS.includes(value) ? value : thfPopupDefaultPosition;\n  }\n\n  get position(): string {\n    return this._position;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define as posiÃ§Ãµes e a sequÃªncia que o `thf-popup` poderÃ¡ rotacionar. A sequÃªncia serÃ¡ definida pela ordem passada\n   * no *array*. Caso nÃ£o seja definido, o `thf-popup` irÃ¡ rotacionar em todas as posiÃ§Ãµes vÃ¡lidas.\n   *\n   * > O componente sempre irÃ¡ abrir na posiÃ§Ã£o definida no `t-position` e caso nÃ£o caiba na posiÃ§Ã£o definida o mesmo\n   * irÃ¡ rotacionar seguindo a ordem definida pelo `t-custom-position`.\n   *\n   * PosiÃ§Ãµes vÃ¡lidas:\n   * - `right`: Posiciona o thf-popup no lado direito do componente alvo.\n   * - `right-bottom`: Posiciona o thf-popup no lado direito inferior do componente alvo.\n   * - `right-top`: Posiciona o thf-popup no lado direito superior do componente alvo.\n   * - `bottom`: Posiciona o thf-popup abaixo do componente alvo.\n   * - `bottom-left`: Posiciona o thf-popup abaixo e Ã  esquerda do componente alvo.\n   * - `bottom-right`: Posiciona o thf-popup abaixo e Ã  direita do componente alvo.\n   * - `left`: Posiciona o thf-popup no lado esquerdo do componente alvo.\n   * - `left-top`: Posiciona o thf-popup no lado esquerdo superior do componente alvo.\n   * - `left-bottom`: Posiciona o thf-popup no lado esquerdo inferior do componente alvo.\n   * - `top`: Posiciona o thf-popup acima do componente alvo.\n   * - `top-right`: Posiciona o thf-popup acima e Ã  direita do componente alvo.\n   * - `top-left`: Posiciona o thf-popup acima e Ã  esquerda do componente alvo.\n   */\n  @Input('t-custom-positions') set customPositions(value: Array<string>) {\n    this._customPositions = Array.isArray(value) ? value : [];\n  }\n\n  get customPositions() {\n    return this._customPositions;\n  }\n\n  /**\n   * @description\n   *\n   * Para utilizar o `thf-popup` deve-se colocar uma variÃ¡vel local no componente que dispararÃ¡ o evento\n   * de abertura no mesmo e com isso, invocarÃ¡ a funÃ§Ã£o `toggle`, por exemplo:\n   *\n   * ```\n   * <span #icon class=\"thf-icon thf-icon-credit-payment\" (click)=\"popup.toggle()\">\n   *   Credit Actions\n   * </span>\n   *\n   * <thf-popup #popup\n   *   [t-actions]=\"actions\"\n   *   [t-target]=\"icon\">\n   * </thf-popup>\n   * ```\n   *\n   * Caso o elemento alvo for um componente, serÃ¡ preciso obter o `ElementRef` do mesmo e passÃ¡-lo Ã  propriedade, por exemplo:\n   *\n   * ```\n   * // component.html\n   *\n   * <thf-button #thfButton\n   *   t-label=\"Open Popover\"\n   *   (t-click)=\"popup.toggle()\">\n   * </thf-button>\n   *\n   * <thf-popup #popup\n   *   [t-actions]=\"actions\"\n   *   [t-target]=\"thfButtonRef\">\n   * </thf-popup>\n   *\n   * // component.ts\n   *\n   * @ViewChild('thfButton', { read: ElementRef }) thfButtonRef: ElementRef;\n   * ```\n   */\n  @Input('t-target') set target(value: any) {\n    this._target = (value instanceof ElementRef) ? value.nativeElement : value;\n  }\n\n  get target() {\n    return this._target;\n  }\n\n  protected clickoutListener: () => void;\n  protected resizeListener: () => void;\n\n}\n","import { ChangeDetectorRef, Component, ElementRef, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { callFunction, isExternalLink, isTypeof, openExternalLink } from '../../utils/util';\nimport { ThfControlPositionService } from '../../services/thf-control-position/thf-control-position.service';\n\nimport { ThfPopupAction } from './thf-popup-action.interface';\nimport { ThfPopupBaseComponent } from './thf-popup-base.component';\n\n/**\n *\n * @docsExtends ThfPopupBaseComponent\n *\n * @example\n *\n * <example name=\"thf-popup-basic\" title=\"Totvs Popup - Basic\">\n *   <file name=\"sample-thf-popup-basic/sample-thf-popup-basic.component.html\"> </file>\n *   <file name=\"sample-thf-popup-basic/sample-thf-popup-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-popup-labs\" title=\"Totvs Popup - Labs\">\n *   <file name=\"sample-thf-popup-labs/sample-thf-popup-labs.component.html\"> </file>\n *   <file name=\"sample-thf-popup-labs/sample-thf-popup-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-popup-email\" title=\"Totvs Popup Email\">\n *   <file name=\"sample-thf-popup-email/sample-thf-popup-email.component.html\"> </file>\n *   <file name=\"sample-thf-popup-email/sample-thf-popup-email.component.ts\"> </file>\n * </example>\n *\n */\n@Component({\n  selector: 'thf-popup',\n  templateUrl: './thf-popup.component.html',\n  providers: [ ThfControlPositionService ]\n})\nexport class ThfPopupComponent extends ThfPopupBaseComponent {\n\n  @ViewChild('popupRef', { read: ElementRef, static: false }) popupRef: ElementRef;\n\n  constructor(\n    viewContainerRef: ViewContainerRef,\n    private renderer: Renderer2,\n    private router: Router,\n    private thfControlPosition: ThfControlPositionService,\n    public changeDetector: ChangeDetectorRef) {\n    super();\n    this.parentRef = viewContainerRef['_view']['component'];\n  }\n\n  /**\n   * Fecha o componente *popup*.\n   *\n   * > Por padrÃ£o, este comportamento Ã© acionado somente ao clicar fora do componente ou em determinada aÃ§Ã£o / url.\n   */\n  close() {\n    this.removeListeners();\n\n    this.showPopup = false;\n  }\n\n  onActionClick(popupAction: ThfPopupAction) {\n    const actionNoDisabled = popupAction && !this.returnBooleanValue(popupAction, 'disabled');\n\n    if (popupAction && popupAction.action && actionNoDisabled) {\n      this.close();\n      return callFunction(popupAction.action, this.parentRef, this.param || popupAction);\n    }\n\n    if (popupAction && popupAction.url && actionNoDisabled) {\n      this.close();\n      return this.openUrl(popupAction.url);\n    }\n  }\n\n  /**\n   * Abre o componente *popup*.\n   *\n   * > Ã possÃ­vel informar um parÃ¢metro que serÃ¡ utilizado na execuÃ§Ã£o da aÃ§Ã£o do item e na funÃ§Ã£o de desabilitar.\n   */\n  open(param?) {\n    this.oldTarget = this.target;\n    this.param = param;\n    this.showPopup = true;\n    this.changeDetector.detectChanges();\n    this.validateInitialContent();\n  }\n\n  returnBooleanValue(popupAction: any, property: string) {\n    return isTypeof(popupAction[property], 'function') ? popupAction[property](this.param || popupAction) : popupAction[property];\n  }\n\n  /**\n   * ResponsÃ¡vel por abrir e fechar o *popup*.\n   *\n   * Quando disparado abrirÃ¡ o *popup* e caso o mesmo jÃ¡ estiver aberto e possuir o mesmo `target` irÃ¡ fecha-lo.\n   *\n   * Ã possÃ­vel informar um parÃ¢metro que serÃ¡ utilizado na execuÃ§Ã£o da aÃ§Ã£o do item e na funÃ§Ã£o de desabilitar.\n   */\n  toggle(param?) {\n    this.showPopup && this.oldTarget === this.target ? this.close() : this.open(param);\n  }\n\n  private clickedOutDisabledItem(event) {\n    const containsItemDisabled = this.elementContains(event.target, 'thf-popup-item-disabled') ||\n      this.elementContains(event.target.parentElement, 'thf-popup-item-disabled');\n\n    return !containsItemDisabled;\n  }\n\n  private clickedOutHeaderTemplate(event) {\n    const popupHeaderTemplate = this.popupRef && this.popupRef.nativeElement.querySelector('[t-popup-header-template]');\n    return !(popupHeaderTemplate && popupHeaderTemplate.contains(event.target));\n  }\n\n  private clickedOutTarget(event) {\n    return this.target && !this.target.contains(event.target);\n  }\n\n  private closePopupOnClickout(event: MouseEvent) {\n\n    if (this.clickedOutTarget(event) && this.clickedOutDisabledItem(event) && this.clickedOutHeaderTemplate(event)) {\n\n      this.close();\n    }\n\n  }\n\n  private elementContains(element: HTMLElement, className: string) {\n    return element && element.classList.contains(className);\n  }\n\n  private hasContentToShow() {\n    return !!(this.popupRef.nativeElement && this.popupRef.nativeElement.clientHeight);\n  }\n\n  private initializeListeners() {\n    this.resizeListener = this.renderer.listen('window', 'resize', () => {\n      this.close();\n    });\n\n    this.clickoutListener = this.renderer.listen('document', 'click', (event: MouseEvent) => {\n      this.closePopupOnClickout(event);\n    });\n\n    window.addEventListener('scroll', this.onScroll, true);\n  }\n\n  private onScroll = (): void => {\n    if (this.showPopup) {\n      this.close();\n    }\n  }\n\n  private openUrl(url: string) {\n    if (isExternalLink(url)) {\n      return openExternalLink(url);\n    }\n\n    if (url) {\n      return this.router.navigate([url]);\n    }\n  }\n\n  private removeListeners() {\n    if (this.clickoutListener) {\n      this.clickoutListener();\n    }\n\n    if (this.resizeListener) {\n      this.resizeListener();\n    }\n\n    window.removeEventListener('scroll', this.onScroll, true);\n  }\n\n  private setPosition() {\n    this.thfControlPosition.setElements(this.popupRef.nativeElement, 8, this.target, this.customPositions, false, this.isCornerAlign);\n    this.thfControlPosition.adjustPosition(this.position);\n    this.arrowDirection = this.thfControlPosition.getArrowDirection();\n  }\n\n  private validateInitialContent() {\n    if (this.hasContentToShow()) {\n      this.setPosition();\n      this.initializeListeners();\n    } else {\n      this.close();\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ThfPopupComponent } from './thf-popup.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente thf-popup.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    ThfPopupComponent,\n  ],\n  exports: [\n    ThfPopupComponent\n  ],\n  providers: [],\n  schemas: []\n})\nexport class ThfPopupModule { }\n","import { Input } from '@angular/core';\n\nimport { convertToBoolean } from './../../utils/util';\n\nimport { ThfDropdownAction } from './thf-dropdown-action.interface';\n\n/**\n * @description\n *\n * O componente `thf-dropdown` pode ser utilizado como um agrupador de aÃ§Ãµes e / ou opÃ§Ãµes.\n *\n * > Caso nÃ£o haja configuraÃ§Ã£o de rotas em sua aplicaÃ§Ã£o, se faz necessÃ¡rio importar o `RouterModule`\n * no mÃ³dulo principal para o correto funcionamento deste componente:\n *\n * ```\n * import { RouterModule } from '@angular/router';\n *\n * @NgModule({\n *   imports: [\n *     ...\n *     RouterModule.forRoot([]),\n *     ThfModule\n *   ],\n *   declarations: [\n *     AppComponent\n *   ],\n *   exports: [],\n *   providers: [],\n *   bootstrap: [\n *     AppComponent\n *   ]\n * })\n * export class AppModule { }\n * ```\n * > Para maiores dÃºvidas referente Ã  configuraÃ§Ã£o de rotas, acesse em nosso portal /Guias /ComeÃ§ando\n * [/Configurando as rotas do thf-menu](/guides/getting-started).\n */\n\nexport class ThfDropdownBaseComponent {\n\n  private _actions: Array<ThfDropdownAction>;\n  private _disabled: boolean = false;\n\n  icon: string = 'thf-icon-arrow-down';\n  open: boolean = false;\n\n  /** Lista de aÃ§Ãµes que serÃ£o exibidas no componente. */\n  @Input('t-actions') set actions(value: Array<ThfDropdownAction>) {\n    this._actions = Array.isArray(value) ? value : [];\n  }\n\n  get actions() {\n    return this._actions;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Desabilita o campo.\n   *\n   * @default `false`\n   */\n  @Input('t-disabled') set disabled(value: boolean) {\n    this._disabled = convertToBoolean(value);\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  /** Adiciona um rÃ³tulo ao `dropdown`. */\n  @Input('t-label') label: string;\n\n}\n","import { Component, ElementRef, Renderer2, ViewChild } from '@angular/core';\n\nimport { isKeyCodeEnter } from './../../utils/util';\n\nimport { ThfDropdownBaseComponent } from './thf-dropdown-base.component';\n\n/**\n * @docsExtends ThfDropdownBaseComponent\n *\n * @example\n *\n * <example name=\"thf-dropdown-basic\" title=\"Totvs Dropdown Basic\" >\n *  <file name=\"sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.html\"> </file>\n *  <file name=\"sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.ts\"> </file>\n *  <file name=\"sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.e2e-spec.ts\"> </file>\n *  <file name=\"sample-thf-dropdown-basic/sample-thf-dropdown-basic.component.po.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-dropdown-labs\" title=\"Totvs Dropdown Labs\" >\n *  <file name=\"sample-thf-dropdown-labs/sample-thf-dropdown-labs.component.html\"> </file>\n *  <file name=\"sample-thf-dropdown-labs/sample-thf-dropdown-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-dropdown-social-network\" title=\"Totvs Dropdown - Social Network\" >\n *  <file name=\"sample-thf-dropdown-social-network/sample-thf-dropdown-social-network.component.html\"> </file>\n *  <file name=\"sample-thf-dropdown-social-network/sample-thf-dropdown-social-network.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-dropdown',\n  templateUrl: './thf-dropdown.component.html'\n})\nexport class ThfDropdownComponent extends ThfDropdownBaseComponent {\n\n  private clickoutListener: () => void;\n  private resizeListener: () => void;\n\n  @ViewChild('dropdownRef', { read: ElementRef, static: true }) dropdownRef: ElementRef;\n  @ViewChild('popupRef', { static: false }) popupRef: any;\n\n  constructor(private renderer: Renderer2) {\n    super();\n  }\n\n  onKeyDown(event: any) {\n    if (isKeyCodeEnter(event)) {\n      this.toggleDropdown();\n    }\n  }\n\n  toggleDropdown(): void {\n    this.dropdownRef && !this.open && !this.disabled ? this.showDropdown() : this.hideDropdown();\n  }\n\n  private checkClickArea(event: MouseEvent) {\n    return this.dropdownRef && this.dropdownRef.nativeElement.contains(event.target);\n  }\n\n  private hideDropdown() {\n    this.icon = 'thf-icon-arrow-down';\n    this.removeListeners();\n    this.popupRef.close();\n    this.open = false;\n  }\n\n  private initializeListeners() {\n    this.clickoutListener = this.renderer.listen('document', 'click', (event: MouseEvent) => {\n      this.wasClickedOnDropdown(event);\n    });\n\n    this.resizeListener = this.renderer.listen('window', 'resize', () => {\n      this.hideDropdown();\n    });\n\n    window.addEventListener('scroll', this.onScroll, true);\n  }\n\n  private onScroll = (): void => {\n    if (this.open) {\n      this.hideDropdown();\n    }\n  }\n\n  private removeListeners() {\n    if (this.clickoutListener) {\n      this.clickoutListener();\n    }\n\n    if (this.resizeListener) {\n      this.resizeListener();\n    }\n\n    window.removeEventListener('scroll', this.onScroll, true);\n  }\n\n  private showDropdown() {\n    this.icon = 'thf-icon-arrow-up';\n    this.initializeListeners();\n    this.popupRef.open();\n    this.open = true;\n  }\n\n  private wasClickedOnDropdown(event: MouseEvent) {\n    const clickedOnDropdown = this.checkClickArea(event);\n\n    if (!clickedOnDropdown) {\n      this.hideDropdown();\n    }\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThfPopupModule } from '../thf-popup/thf-popup.module';\n\nimport { ThfDropdownComponent } from './thf-dropdown.component';\n/**\n * @description\n * MÃ³dulo do componente thf-dropdown.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    ThfPopupModule\n  ],\n  declarations: [ThfDropdownComponent],\n  exports: [ThfDropdownComponent]\n})\nexport class ThfDropdownModule { }\n","import { Injectable } from '@angular/core';\n\nimport { getBrowserLanguage, getShortLanguage, isLanguage, thfLocaleDefault, thfLocales } from '../../utils/util';\n\nconst thfDefaultLanguage = 'THF_DEFAULT_LANGUAGE';\nconst thfLocaleKey = 'THF_USER_LOCALE';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * ServiÃ§o responsÃ¡vel por gerenciar as linguagens da aplicaÃ§Ã£o.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThfLanguageService {\n\n  set languageDefault(language: string) {\n    if (language && isLanguage(language)) {\n      localStorage.setItem(thfDefaultLanguage, language);\n    }\n  }\n\n  get languageDefault(): string {\n    return localStorage.getItem(thfDefaultLanguage);\n  }\n\n  /**\n   * @description\n   *\n   * MÃ©todo responsÃ¡vel por retornar o idioma ativo.\n   *\n   * A busca do idioma serÃ¡ feita na seguinte ordem:\n   *\n   *   1 - o idioma que foi armazenado no *localStorage*, atravÃ©s do mÃ©todo `setLanguage()` utilizado pelo i18n.\n   *\n   *   2 - o valor inserido nas configuraÃ§Ãµes do mÃ³dulo do i18n atravÃ©s do parÃ¢metro `config`, sendo o idioma inserido\n   * na propriedade `language` da interface `ThfI18nConfigDefault`.\n   *\n   *   3 - o idioma do navegador utilizado.\n   *\n   * > Caso o idioma do navegador nÃ£o seja suportado pelo THF (`pt`, `en` ou `es`), serÃ¡ retornado valor `pt`.\n   *\n   * **Retorno:** `string` com a sigla do idioma ativo.\n   */\n  getLanguage(): string {\n    const language = localStorage.getItem(thfLocaleKey) || this.languageDefault || getBrowserLanguage();\n\n    return language && language.toLowerCase();\n  }\n\n  /**\n   * @description\n   *\n   * MÃ©todo responsÃ¡vel por retornar o idioma *default* da aplicaÃ§Ã£o definido nas configuraÃ§Ãµes do mÃ³dulo do i18n atravÃ©s\n   * do parÃ¢metro `config`.\n   *\n   * **Retorno:** `string` com a sigla do idioma *default*.\n   */\n  getLanguageDefault(): string {\n    return this.languageDefault;\n  }\n\n  /**\n   * @description\n   *\n   * MÃ©todo responsÃ¡vel por retornar a abreviaÃ§Ã£o do idioma ativo na aplicaÃ§Ã£o.\n   *\n   * @default `pt`\n   *\n   * **Retorno:** `string` com a sigla abreviada do idioma ativo.\n   */\n  getShortLanguage(): string {\n    const language = this.getLanguage();\n    const shortLanguage = getShortLanguage(language);\n\n    return thfLocales.includes(shortLanguage) ? shortLanguage : thfLocaleDefault;\n  }\n\n  /**\n   * @description\n   *\n   * MÃ©todo para salvar o idioma da aplicaÃ§Ã£o no *storage*, utilizado pelo serviÃ§o do i18n.\n   *\n   * > Ao definir um idioma por este mÃ©todo, todos os mÃ³dulos da aplicaÃ§Ã£o utilizarÃ£o o idioma definido.\n   *\n   * @param language sigla do idioma.\n   *\n   * Esta sigla deve ser composta por duas letras representando o idioma,\n   * podendo ser adicionado outras duas letras representando o paÃ­s, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.\n   *\n   * > Caso seja informado um valor diferente deste padrÃ£o, o mesmo serÃ¡ ignorado.\n   */\n  setLanguage(language: string): void {\n    if (!isLanguage(language)) {\n      return;\n    }\n\n    localStorage.setItem(thfLocaleKey, language.toLowerCase());\n  }\n\n  /**\n   * @description\n   *\n   * MÃ©todo que define o idioma configurado a partir do parÃ¢metro `config` utilizado pelo mÃ³dulo do i18n.\n   *\n   * > Ao definir um idioma por este serviÃ§o, apenas o mÃ³dulo do i18n referente a esta configuraÃ§Ã£o utilizarÃ¡ o idioma definido.\n   *\n   * @param language sigla do idioma.\n   *\n   * Esta sigla deve ser composta por duas letras representando o idioma,\n   * podendo ser adicionado outras duas letras representando o paÃ­s, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.\n   *\n   * > Caso seja informado um valor diferente deste padrÃ£o, o mesmo serÃ¡ ignorado.\n   */\n  setLanguageDefault(language: string): void {\n    this.languageDefault = language;\n  }\n\n}\n","import { Input } from '@angular/core';\n\nimport { convertToBoolean } from './../../../utils/util';\n\nimport { ThfLanguageService } from '../../../services/thf-language/thf-language.service';\n\nimport { ThfLoadingOverlayLiterals } from './interfaces/thf-loading-overlay-literals.interface';\n\nexport const thfLoadingOverlayLiteralsDefault = {\n  en: <ThfLoadingOverlayLiterals> {\n    loading: 'Loading',\n  },\n  es: <ThfLoadingOverlayLiterals> {\n    loading: 'Cargando',\n  },\n  pt: <ThfLoadingOverlayLiterals> {\n    loading: 'Carregando',\n  }\n};\n\n/**\n *\n * @description\n *\n * Este componente mostra ao usuÃ¡rio uma imagem de _loading_ e bloqueia a pÃ¡gina inteira ou o container escolhido,\n * enquanto aguarda a resposta de alguma requisiÃ§Ã£o.\n */\nexport class ThfLoadingOverlayBaseComponent {\n\n  private _screenLock?: boolean = false;\n  private _text?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se o _overlay_ serÃ¡ aplicado a um container ou a pÃ¡gina inteira.\n   *\n   * @default `false`\n   */\n  @Input('t-screen-lock') set screenLock(screenLock: boolean) {\n    this._screenLock = convertToBoolean(screenLock);\n  }\n\n  get screenLock() {\n    return this._screenLock;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Texto a ser exibido no componente.\n   *\n   * > O valor padrÃ£o serÃ¡ traduzido acordo com o idioma configurado no [**ThfI18n**](/documentation/thf-i18n) ou navegador.\n   *\n   * @default `Carregando`\n   */\n  @Input('t-text') set text(value: string) {\n    this._text = value || this.getTextDefault();\n  }\n\n  get text(): string {\n    return this._text;\n  }\n\n  constructor(private languageService: ThfLanguageService) {\n    if (!this.text) {\n      this.text = this.getTextDefault();\n    }\n  }\n\n  private getTextDefault(): string {\n    const language = this.languageService.getShortLanguage();\n\n    return thfLoadingOverlayLiteralsDefault[language].loading;\n  }\n\n}\n","import { Component, ChangeDetectorRef } from '@angular/core';\n\nimport { ThfLanguageService } from './../../../services/thf-language/thf-language.service';\n\nimport { ThfLoadingOverlayBaseComponent } from './thf-loading-overlay-base.component';\n\n/**\n *\n * @docsExtends ThfLoadingOverlayBaseComponent\n *\n * @example\n *\n * <example name=\"thf-loading-overlay-basic\" title=\"Totvs Loading Overlay Basic\">\n *  <file name=\"sample-thf-loading-overlay-basic/sample-thf-loading-overlay-basic.component.html\"> </file>\n *  <file name=\"sample-thf-loading-overlay-basic/sample-thf-loading-overlay-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-loading-overlay-labs\" title=\"Totvs Loading Overlay Labs\">\n *  <file name=\"sample-thf-loading-overlay-labs/sample-thf-loading-overlay-labs.component.html\"> </file>\n *  <file name=\"sample-thf-loading-overlay-labs/sample-thf-loading-overlay-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-loading-overlay-connection-test\" title=\"Totvs Loading Overlay - Connection Test\">\n *  <file name=\"sample-thf-loading-overlay-connection-test/sample-thf-loading-overlay-connection-test.component.html\"> </file>\n *  <file name=\"sample-thf-loading-overlay-connection-test/sample-thf-loading-overlay-connection-test.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-loading-overlay',\n  templateUrl: 'thf-loading-overlay.component.html'\n})\nexport class ThfLoadingOverlayComponent extends ThfLoadingOverlayBaseComponent {\n\n  constructor(public changeDetector: ChangeDetectorRef, languageService: ThfLanguageService) {\n    super(languageService);\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { ThfLanguageService } from './thf-language.service';\n\n/**\n * @description\n *\n * MÃ³dulo do serviÃ§o `thf-language`.\n */\n@NgModule({\n  providers: [\n    ThfLanguageService\n  ]\n})\nexport class ThfLanguageModule { }\n","import { Input } from '@angular/core';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Este componente tem o objetivo de mostrar visualmente aos usuÃ¡rios que a aplicaÃ§Ã£o estÃ¡ processando\n * ou aguardando a resposta de alguma requisiÃ§Ã£o.\n */\nexport class ThfLoadingBaseComponent {\n\n  /**\n   * Texto a ser exibido no componente.\n   */\n  @Input('t-text') text?: string = 'Carregando';\n\n}\n","import { Component } from '@angular/core';\n\nimport { ThfLoadingBaseComponent } from './thf-loading-base.component';\n\n/**\n * @docsPrivate\n *\n * @docsExtends ThfLoadingBaseComponent\n */\n@Component({\n  selector: 'thf-loading',\n  templateUrl: 'thf-loading.component.html'\n})\nexport class ThfLoadingComponent extends ThfLoadingBaseComponent { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ThfLanguageModule } from './../../services/thf-language/thf-language.module';\n\nimport { ThfLoadingComponent } from './thf-loading.component';\nimport { ThfLoadingOverlayComponent } from './thf-loading-overlay/thf-loading-overlay.component';\n\n/**\n *\n * @description\n *\n * MÃ³dulo do componente thf-loading-overlay.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    ThfLanguageModule\n  ],\n  declarations: [\n    ThfLoadingComponent,\n    ThfLoadingOverlayComponent\n  ],\n  exports: [\n    ThfLoadingComponent,\n    ThfLoadingOverlayComponent\n  ]\n})\nexport class ThfLoadingModule { }\n","import { Input, EventEmitter } from '@angular/core';\n\nimport { convertToBoolean } from './../../utils/util';\nimport { ThfModalAction } from './thf-modal-action.interface';\n\n/**\n * @description\n *\n * O componente `thf-modal` Ã© utilizado para incluir conteÃºdos rÃ¡pidos e informativos.\n *\n * No cabeÃ§alho do componente Ã© possÃ­vel definir um tÃ­tulo e como tambÃ©m permite ocultar o Ã­cone de fechamento da modal.\n *\n * Em seu corpo Ã© possÃ­vel definir um conteÃºdo informativo, podendo utilizar componentes como por exemplo `thf-chart`,\n * `thf-table` e os demais componentes do THF.\n *\n * No rodapÃ© encontram-se os botÃµes de aÃ§Ã£o primÃ¡ria e secundÃ¡ria, no qual permitem definir uma aÃ§Ã£o e um rÃ³tulo, bem como\n * definir um estado de carregando e / ou desabilitado. TambÃ©m Ã© possÃ­vel definir o botÃ£o com o tipo *danger*.\n *\n * > Ã possÃ­vel fechar a modal atravÃ©s da tecla *ESC*, quando a propriedade `t-hide-close` nÃ£o estiver habilitada.\n */\nexport class ThfModalBaseComponent {\n\n  private _hideClose?: boolean = false;\n  private _size?: string = 'md';\n\n  /** TÃ­tulo da modal. */\n  @Input('t-title') title: string;\n\n  /**\n   * Deve ser definido um objeto que implementa a interface `ThfModalAction` contendo a label e a funÃ§Ã£o da primeira aÃ§Ã£o.\n   * Caso esta propriedade nÃ£o seja definida ou esteja incompleta, automaticamente serÃ¡ adicionado um botÃ£o de aÃ§Ã£o com\n   * a funÃ§Ã£o de fechar a modal.\n   */\n  @Input('t-primary-action') primaryAction?: ThfModalAction;\n\n  /** Deve ser definido um objeto que implementa a interface `ThfModalAction` contendo a label e a funÃ§Ã£o da segunda aÃ§Ã£o. */\n  @Input('t-secondary-action') secondaryAction?: ThfModalAction;\n\n  /**\n   * Define o tamanho da modal.\n   *\n   * Valores vÃ¡lidos:\n   *  - `sm` (pequeno)\n   *  - `md` (mÃ©dio)\n   *  - `lg` (grande)\n   *  - `xl` (extra grande)\n   *  - `auto` (automÃ¡tico)\n   *\n   * > Quando informado `auto` a modal calcularÃ¡ automaticamente seu tamanho baseado em seu conteÃºdo.\n   * Caso nÃ£o seja informado um valor, a modal terÃ¡ o tamanho definido como `md`.\n   *\n   * > Todas as opÃ§Ãµes de tamanho possuem uma largura mÃ¡xima de **768px**.\n   */\n  @Input('t-size') set size(value: string) {\n    const sizes = ['sm', 'md', 'lg', 'xl', 'auto'];\n    this._size = sizes.indexOf(value) > -1 ? value : 'md';\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  /**\n   * Define o fechamento da modal ao clicar fora da mesma.\n   * Informe o valor `true` para ativar o fechamento ao clicar fora da modal.\n   */\n  clickOut?: boolean = false;\n  @Input('t-click-out') set setClickOut(value: boolean | string) {\n    this.clickOut = (value === '') ? false : convertToBoolean(value);\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Oculta o Ã­cone de fechar do cabeÃ§alho da modal.\n   *\n   * > Caso a propriedade estiver habilitada, nÃ£o serÃ¡ possÃ­vel fechar a modal atravÃ©s da tecla *ESC*.\n   *\n   * @default `false`\n   */\n  @Input('t-hide-close') set hideClose(value: boolean) {\n    this._hideClose = convertToBoolean(value);\n  }\n\n  get hideClose() {\n    return this._hideClose;\n  }\n\n  // Controla se a modal fica oculto ou visÃ­vel, por padrÃ£o Ã© oculto\n  isHidden = true;\n\n  // Event emmiter para quando a modal Ã© fechada pelo 'X'.\n  public onXClosed = new EventEmitter<boolean>();\n\n  /** FunÃ§Ã£o para fechar a modal. */\n  close(xClosed = false): void {\n    this.isHidden = true;\n    if (xClosed) {\n      this.onXClosed.emit(xClosed);\n    }\n  }\n\n  /** FunÃ§Ã£o para abrir a modal. */\n  open(): void {\n    this.validPrimaryAction();\n\n    this.isHidden = false;\n  }\n\n  validPrimaryAction() {\n    if (!this.primaryAction) {\n      this.primaryAction = {\n        action: () => this.close(),\n        label: 'Ok',\n      };\n    }\n\n    if (!this.primaryAction['action']) {\n      this.primaryAction['action'] = () => this.close();\n    }\n    if (!this.primaryAction['label']) {\n      this.primaryAction['label'] = 'Ok';\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ThfModalService {\n\n  modalActive: string;\n\n}\n","import { ChangeDetectorRef, Component, ElementRef, Renderer2, ViewChild } from '@angular/core';\n\nimport { v4 as uuid } from 'uuid';\n\nimport { ThfModalBaseComponent } from './thf-modal-base.component';\nimport { ThfModalService } from './thf-modal-service';\n\n/**\n * @docsExtends ThfModalBaseComponent\n *\n * @example\n *\n * <example name=\"thf-modal-basic\" title=\"Totvs Modal Basic\">\n *  <file name=\"sample-thf-modal-basic/sample-thf-modal-basic.component.html\"> </file>\n *  <file name=\"sample-thf-modal-basic/sample-thf-modal-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-modal-labs\" title=\"Totvs Modal Labs\">\n *  <file name=\"sample-thf-modal-labs/sample-thf-modal-labs.component.html\"> </file>\n *  <file name=\"sample-thf-modal-labs/sample-thf-modal-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-modal-fruits-salad\" title=\"Totvs Modal - Fruits Salad\">\n *  <file name=\"sample-thf-modal-fruits-salad/sample-thf-modal-fruits-salad.component.html\"> </file>\n *  <file name=\"sample-thf-modal-fruits-salad/sample-thf-modal-fruits-salad.component.ts\"> </file>\n * </example>\n */\n\n@Component({\n  selector: 'thf-modal',\n  templateUrl: './thf-modal.component.html'\n})\nexport class ThfModalComponent extends ThfModalBaseComponent {\n\n  @ViewChild('modalContent', { read: ElementRef, static: false }) modalContent: ElementRef;\n\n  private firstElement;\n  private focusFunction;\n  private focusableElements = 'input, select, textarea, button:not([disabled]), a';\n  private id: string = uuid();\n  private sourceElement;\n\n  onResizeListener: () => void;\n\n  constructor(private thfModalService: ThfModalService, private renderer: Renderer2, private changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  close(xClosed = false) {\n    this.thfModalService.modalActive = undefined;\n\n    super.close(xClosed);\n\n    this.removeEventListeners();\n\n    if (this.sourceElement) {\n      this.sourceElement.focus();\n    }\n  }\n\n  closeModalOnEscapeKey(event) {\n    if (!this.hideClose) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.close();\n    }\n  }\n\n  getPrimaryActionButtonType() {\n    return this.primaryAction.danger ? 'danger' : 'primary';\n  }\n\n  getSecondaryActionButtonType() {\n    return this.secondaryAction && this.secondaryAction.danger && !this.primaryAction.danger ? 'danger' : 'default';\n  }\n\n  onClickOut(event) {\n    if (this.clickOut && !this.modalContent.nativeElement.contains(event.target)) {\n      this.close();\n    }\n  }\n\n  open() {\n    this.sourceElement = document.activeElement;\n\n    super.open();\n\n    this.handleFocus();\n  }\n\n  private handleFocus(): any {\n    this.thfModalService.modalActive = this.id;\n\n    setTimeout(() => {\n      if (this.modalContent) {\n        this.initFocus();\n        document.addEventListener('focus', this.focusFunction, true);\n      }\n    });\n  }\n\n  private initFocus() {\n    this.focusFunction = (event: any) => {\n      this.thfModalService.modalActive = this.thfModalService.modalActive || this.id;\n      const modalElement = this.modalContent.nativeElement;\n\n      if (!modalElement.contains(event.target) && this.thfModalService.modalActive === this.id) {\n        event.stopPropagation();\n        this.firstElement.focus();\n      }\n    };\n\n    this.setFirstElement();\n\n    if (this.hideClose) {\n      this.firstElement.focus();\n    } else {\n      const firstFieldElement =\n        this.modalContent.nativeElement.querySelectorAll(this.focusableElements)[1] ||\n        this.modalContent.nativeElement;\n      firstFieldElement.focus();\n    }\n  }\n\n  private removeEventListeners() {\n    document.removeEventListener('focus', this.focusFunction, true);\n  }\n\n  private setFirstElement() {\n    this.firstElement = this.modalContent.nativeElement.querySelector(this.focusableElements) || this.modalContent.nativeElement;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ThfButtonModule } from './../thf-button/thf-button.module';\nimport { ThfModalComponent } from './thf-modal.component';\nimport { ThfModalService } from './thf-modal-service';\n\n/**\n * @description\n * MÃ³dulo do componente thf-modal\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    ThfButtonModule\n  ],\n  declarations: [\n    ThfModalComponent\n  ],\n  exports: [ ThfModalComponent ],\n  providers: [ThfModalService]\n})\nexport class ThfModalModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { isTypeof } from '../../utils/util';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Pipe responsÃ¡vel por apresentar um horÃ¡rio baseado no formato de entrada definido na API da Totvs.\n */\n@Pipe({\n  name: 'thf_time'\n})\nexport class ThfTimePipe implements PipeTransform {\n\n  transform(time: string, format?: string): string {\n\n    const hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\\.]?([0-9]{1,6})?$/g;\n\n    if (isTypeof(time, 'string') && hourRegex.test(time)) {\n\n      const amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;\n\n      const miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);\n      const formatMiliseconds: string = this.getFormatMiliseconds(amountOfF);\n\n      return this.formatValue(time, format, formatMiliseconds, miliseconds);\n    }\n    return null;\n  }\n\n  private addDotMiliseconds(miliseconds: string, amountOfF: number): string {\n    if (miliseconds && amountOfF) {\n      miliseconds = '.' + miliseconds;\n    }\n    return miliseconds;\n  }\n\n  private formatValue(time: string, format: string, formatMiliseconds: string, miliseconds: string): string {\n    if (time && format) {\n      const hour = time.substring(0, 2);\n      const minutes = time.substring(3, 5);\n      const seconds = time.substring(6, 8);\n\n      format = format.replace('HH', hour);\n      format = format.replace('mm', minutes);\n      format = format.replace('ss', seconds);\n      format = format.replace(`.${formatMiliseconds}`, miliseconds);\n\n      return format;\n    } else {\n      return time;\n    }\n  }\n\n  private getFormatMiliseconds(amountOfF: number): string {\n    let formatMiliseconds: string = '';\n\n    for (let i = 0; i < amountOfF; i++) {\n      formatMiliseconds += 'f';\n    }\n\n    return formatMiliseconds;\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { ThfTimePipe } from './thf-time.pipe';\n\n/**\n * @description\n *\n * MÃ³dulo do pipe `thf-time`.\n */\n@NgModule({\n  declarations: [\n    ThfTimePipe\n  ],\n  imports: [],\n  exports: [\n    ThfTimePipe\n  ],\n  providers: [],\n  bootstrap: []\n})\nexport class ThfTimeModule { }\n","import { Component, Input } from '@angular/core';\n\nimport { ThfTableColumn } from '../interfaces/thf-table-column.interface';\nimport { ThfTableColumnIcon } from './thf-table-column-icon.interface';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente responsÃ¡vel por exibir Ã­cones nas colunas.\n */\n@Component({\n  selector: 'thf-table-column-icon',\n  templateUrl: './thf-table-column-icon.component.html'\n})\n\nexport class ThfTableColumnIconComponent {\n\n  tooltipText: string;\n\n  private _icons: Array<ThfTableColumnIcon>;\n\n  @Input('t-column') column: ThfTableColumn;\n\n  /** Lista de um ou mais Ã­cones que serÃ£o exibidos em sua respectiva coluna. */\n  @Input('t-icons') set icons(value: Array<ThfTableColumnIcon> | Array<string> | string) {\n    this._icons = this.convertToColumnIcon(value);\n  }\n\n  get icons() {\n    return this._icons;\n  }\n\n  @Input('t-row') row;\n\n  checkDisabled(iconColumn: ThfTableColumnIcon) {\n    return iconColumn.disabled ? iconColumn.disabled(this.row) : false;\n  }\n\n  getIconColorClass(columnIcon: ThfTableColumnIcon) {\n    const color = this.getIconColor(columnIcon) || this.getIconColor(this.column);\n\n    return color ? `thf-text-${color}` : '';\n  }\n\n  onIconClick(iconColumn: ThfTableColumnIcon) {\n    const isAbleAction = !this.checkDisabled(iconColumn);\n\n    if (iconColumn.action && isAbleAction) {\n      iconColumn.action(this.row, iconColumn);\n    } else if (this.column.action && isAbleAction) {\n      this.column.action(this.row, iconColumn || this.column);\n    }\n  }\n\n  tooltipMouseEnter(text: string, iconColumn: ThfTableColumnIcon) {\n    if (this.checkDisabled(iconColumn)) {\n      this.tooltipText = undefined;\n    } else {\n      this.tooltipText = text;\n    }\n  }\n\n  tooltipMouseLeave() {\n    this.tooltipText = undefined;\n  }\n\n  private convertToColumnIcon(value: any): Array<ThfTableColumnIcon> {\n\n    if (value instanceof Array) {\n      return value.map(val => {\n        return typeof val === 'string' ? { value: val } : val;\n      });\n    }\n\n    if (typeof value === 'string') {\n      return [{ value }];\n    }\n\n    return [];\n  }\n\n  private getIconColor(column: ThfTableColumnIcon | ThfTableColumn) {\n    return typeof column.color === 'function' ? column.color(this.row, column) : column.color;\n  }\n\n}\n","/**\n * @docsPrivate\n *\n * @description\n *\n * Enum que contÃ©m paleta de 12 cores.\n */\nexport enum ThfColorPaletteEnum {\n\n  /** #0c9abe */\n  Color01 = 'color-01' ,\n\n  /** #2c85c8 */\n  Color02 = 'color-02',\n\n  /** #2c43c8 */\n  Color03 = 'color-03',\n\n  /** #5843c8 */\n  Color04 = 'color-04',\n\n  /** #ab43c8 */\n  Color05 = 'color-05',\n\n  /** #ab4391 */\n  Color06 = 'color-06',\n\n  /** #c64840 */\n  Color07 = 'color-07',\n\n  /** #ea9b3e */\n  Color08 = 'color-08',\n\n  /** #abc249 */\n  Color09 = 'color-09',\n\n  /** #56b96b */\n  Color10 = 'color-10',\n\n  /** #00b28e */\n  Color11 = 'color-11',\n\n  /** #06a6a5 */\n  Color12 = 'color-12'\n}\n","import { Injectable } from '@angular/core';\n\nimport { ThfColorPaletteEnum } from '../../enums/thf-color-palette.enum';\n\n@Injectable()\nexport class ThfColorPaletteService {\n\n  getColor(value: { color?: string, type?: string }): string {\n    return (<any>Object).values(ThfColorPaletteEnum).includes(value.color) ?\n      value.color : this.getColorFromType(value.type || value.color);\n  }\n\n  private getColorFromType(type: string): ThfColorPaletteEnum {\n    switch (type) {\n      case 'danger':\n        return ThfColorPaletteEnum.Color07;\n      case 'success':\n        return ThfColorPaletteEnum.Color11;\n      case 'warning':\n        return ThfColorPaletteEnum.Color08;\n      default:\n        return ThfColorPaletteEnum.Color01;\n    }\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\nimport { ThfColorPaletteService } from './../../../services/thf-color-palette/thf-color-palette.service';\nimport { ThfTableColumnLabel } from './thf-table-column-label.interface';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente para a criaÃ§Ã£o da representaÃ§Ã£o da legenda, em formato de texto .\n */\n\n@Component({\n  selector: 'thf-table-column-label',\n  templateUrl: './thf-table-column-label.component.html'\n})\nexport class ThfTableColumnLabelComponent {\n\n  private _value: ThfTableColumnLabel;\n\n  /** Objeto com os dados do label */\n  @Input('t-value') set value(value: ThfTableColumnLabel) {\n    if (value) {\n      value.color = this.thfColorPaletteService.getColor(value);\n    }\n\n    this._value = value;\n  }\n  get value(): ThfTableColumnLabel {\n    return this._value;\n  }\n\n  constructor(private thfColorPaletteService: ThfColorPaletteService) { }\n\n}\n","import { Component, Input } from '@angular/core';\n\nimport { isExternalLink } from '../../../utils/util';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente responsÃ¡vel por exibir link nas colunas.\n */\n@Component({\n  selector: 'thf-table-column-link',\n  templateUrl: './thf-table-column-link.component.html'\n})\n\nexport class ThfTableColumnLinkComponent {\n\n  @Input('t-action') action: Function;\n\n  @Input('t-disabled') disabled: boolean;\n\n  @Input('t-link') link: string;\n\n  @Input('t-row') row;\n\n  @Input('t-value') value: string;\n\n  get type() {\n\n    if (this.disabled) {\n      return 'disabled';\n    }\n\n    if (this.action) {\n       return 'action';\n    }\n\n    if (isExternalLink(this.link)) {\n      return 'externalLink';\n    }\n\n    return 'internalLink';\n\n  }\n\n}\n","import { EventEmitter, Input, OnChanges, Output } from '@angular/core';\n\nimport { browserLanguage, capitalizeFirstLetter, convertToBoolean, isTypeof, sortValues, thfLocaleDefault } from '../../utils/util';\nimport { ThfDateService } from '../../services/thf-date/thf-date.service';\n\nimport { ThfTableAction } from './interfaces/thf-table-action.interface';\nimport { ThfTableColumn } from './interfaces/thf-table-column.interface';\nimport { ThfTableLiterals } from './interfaces/thf-table-literals.interface';\n\nexport const thfTableContainer = ['border', 'shadow'];\nexport const thfTableContainerDefault = 'border';\n\nexport const thfTableLiteralsDefault = {\n  en: <ThfTableLiterals> {\n    noColumns: 'Columns are not defined',\n    noData: 'No data found',\n    loadingData: 'Loading',\n    loadMoreData: 'Load more data',\n    seeCompleteSubtitle: 'See complete subtitle',\n    completeSubtitle: 'Complete subtitle'\n  },\n  es: <ThfTableLiterals> {\n    noColumns: 'Columnas no definidas',\n    noData: 'Datos no encontrados',\n    loadingData: 'Cargando datos',\n    loadMoreData: 'Cargar mÃ¡s resultados',\n    seeCompleteSubtitle: 'Ver subtitulo completo',\n    completeSubtitle: 'Subtitulo completo'\n  },\n  pt: <ThfTableLiterals> {\n    noColumns: 'Nenhuma definiÃ§Ã£o de colunas',\n    noData: 'Nenhum dado encontrado',\n    loadingData: 'Carregando',\n    loadMoreData: 'Carregar mais resultados',\n    seeCompleteSubtitle: 'Ver legenda completa',\n    completeSubtitle: 'Legenda completa'\n  }\n};\n\n/**\n * @description\n *\n * Este componente de tabela Ã© utilizado para exibiÃ§Ã£o de listas, com diferentes tipos de dados que podem ser texto,\n * data, horÃ¡rio e nÃºmero com formato personalizado.\n *\n * Ã possivel criar uma tabela com ordenaÃ§Ã£o de dados, linhas com detalhes, coluna de seleÃ§Ã£o de linhas,\n * coluna com aÃ§Ãµes e tambÃ©m carregamento por demanda com o botÃ£o \"Carregar mais resultados\".\n *\n * TambÃ©m existe a possibilidade de utilizar _template_ para os detalhes das linhas,\n * veja mais em **[t-table-row-template](/documentation/thf-table-row-template)**.\n *\n * Quando a largura de todas as colunas for definida, caso o tamanho total delas seja maior que a tabela, serÃ¡ exibido um scroll horizontal.\n *\n */\nexport abstract class ThfTableBaseComponent implements OnChanges {\n\n  private _actions?: Array<ThfTableAction> = [];\n  private _checkbox?: boolean;\n  private _columns: Array<ThfTableColumn> = [];\n  private _container?: string;\n  private _height?: number;\n  private _hideDetail?: boolean = false;\n  private _hideTextOverflow?: boolean = false;\n  private _items: Array<ThfTableColumn>;\n  private _literals: ThfTableLiterals;\n  private _loading?: boolean = false;\n\n  /**\n   * @description\n   *\n   * Lista de itens da tabela.\n   * > Se falso, serÃ¡ inicializado como um *array* vazio.\n   */\n  @Input('t-items') set items(items: Array<any>) {\n    this._items = Array.isArray(items) ? items : [];\n\n    // when haven't items, selectAll should be unchecked.\n    if (!this.hasItems()) {\n      this.selectAll = false;\n    } else if (!this.hasColumns()) {\n      this.columns = this.getDefaultColumns(items[0]);\n    }\n  }\n\n  get items() {\n    return this._items;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `ThfTableColumn`.\n   * Por padrÃ£o receberÃ¡ como valor a primeira coluna da lista de itens da tabela.\n   * > Caso nÃ£o encontre valor, a mensagem 'Nenhuma definiÃ§Ã£o de colunas' serÃ¡ exibida.\n   *\n   */\n  @Input('t-columns') set columns(columns: Array<ThfTableColumn>) {\n\n    this._columns = columns || [];\n\n    if (this._columns.length) {\n      this.setColumnLink();\n      this.calculateWidthHeaders();\n    } else if (this.hasItems()) {\n      this._columns =  this.getDefaultColumns(this.items[0]);\n    }\n  }\n\n  get columns() {\n    return this._columns;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Adiciona um contorno arredondado ao `thf-table`, as opÃ§Ãµes sÃ£o:\n   * - `border`: com bordas/linhas.\n   * - `shadow`: com sombras.\n   *\n   * @default `border`\n   */\n  @Input('t-container') set container(value: string) {\n    this._container = thfTableContainer.includes(value) ? value : thfTableContainerDefault;\n    this.showContainer(this._container);\n  }\n\n  get container(): string {\n    return this._container;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.\n   * > Quando ocorrer a quebra de texto, ao passar o mouse no conteÃºdo da cÃ©lula,\n   * o mesmo serÃ¡ exibido atravÃ©s do [`thf-tooltip`](/documentation/thf-tooltip).\n   */\n  @Input('t-hide-text-overflow') set hideTextOverflow(hideTextOverflow: boolean) {\n    this._hideTextOverflow = convertToBoolean(hideTextOverflow);\n  }\n\n  get hideTextOverflow() {\n    return this._hideTextOverflow;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define a altura da tabela em *pixels* e fixa o cabeÃ§alho.\n   */\n  @Input('t-height') set height(height: number) {\n    this._height = height;\n    this.calculateHeightTableContainer(height);\n    this.calculateWidthHeaders();\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Habilita a visualizaÃ§Ã£o da lista de detalhes de cada linha da coluna.\n   *\n   * @default `false`\n   */\n  @Input('t-hide-detail') set hideDetail(hideDetail: boolean) {\n    this._hideDetail = hideDetail != null && hideDetail.toString() === '' ? true : convertToBoolean(hideDetail);\n    this.calculateWidthHeaders();\n  }\n\n  get hideDetail() {\n    return this._hideDetail;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto com as literais usadas no `thf-table`.\n   *\n   * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponÃ­veis:\n   *\n   * ```\n   *  const customLiterals: ThfTableLiterals = {\n   *    loadMoreData: 'Buscar mais dados',\n   *    loadingData: 'Processando',\n   *    noColumns: 'Sem colunas',\n   *    noData: 'Sem dados',\n   *    seeCompleteSubtitle: 'Mostrar legenda completa',\n   *    completeSubtitle: 'Todas legendas'\n   *  };\n   * ```\n   *\n   * Ou passando apenas as literais que deseja customizar:\n   *\n   * ```\n   *  const customLiterals: ThfTableLiterals = {\n   *    noData: 'Sem dados'\n   *  };\n   * ```\n   *\n   * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\n   *\n   * ```\n   * <thf-table\n   *   [t-literals]=\"customLiterals\">\n   * </thf-table>\n   * ```\n   *\n   *  > O objeto padrÃ£o de literais serÃ¡ traduzido de acordo com o idioma do *browser* (pt, en, es).\n   */\n  @Input('t-literals') set literals(value: ThfTableLiterals) {\n    if (value instanceof Object && !(value instanceof Array)) {\n      this._literals = {\n        ...thfTableLiteralsDefault[thfLocaleDefault],\n        ...thfTableLiteralsDefault[browserLanguage()],\n        ...value\n      };\n    } else {\n      this._literals = thfTableLiteralsDefault[browserLanguage()];\n    }\n  }\n  get literals() {\n    return this._literals || thfTableLiteralsDefault[browserLanguage()];\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Bloqueia interaÃ§Ã£o do usuÃ¡rio com os dados da _table_, apresentando um _loading_ ao centro da mesma.\n   *\n   * @default `false`\n   */\n  @Input('t-loading') set loading(loading: boolean) {\n    this._loading = convertToBoolean(loading);\n    this.calculateWidthHeaders();\n  }\n\n  get loading() {\n    return this._loading;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Habilita na primeira coluna a opÃ§Ã£o de selecionar linhas,\n   * todos os itens da lista possuem a propriedade dinÃ¢mica `$selected` para identificar se a linha estÃ¡ selecionada.\n   * > Exemplo: `item.$selected` ou `item['$selected']`.\n   * > Os itens filhos possuem comportamento independente do item pai.\n   *\n   * @default `false`\n   */\n  @Input('t-checkbox') set checkbox(checkbox: boolean) {\n    this._checkbox = <any>checkbox === '' ? true : convertToBoolean(checkbox);\n    this.calculateWidthHeaders();\n  }\n\n  get checkbox() {\n    return this._checkbox;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define uma lista de aÃ§Ãµes.\n   *\n   * Quando houver apenas uma aÃ§Ã£o definida ela serÃ¡ exibida diretamente na coluna, caso contrÃ¡rio, o componente\n   * se encarrega de agrupÃ¡-las exibindo o Ã­cone [**thf-icon-more**](/guides/icons) que listarÃ¡ as aÃ§Ãµes ao ser clicado.\n   *\n   * **A coluna de aÃ§Ãµes nÃ£o serÃ¡ exibida quando:**\n   *  - a lista conter valores invÃ¡lidos ou indefinidos.\n   *  - tenha uma Ãºnica aÃ§Ã£o e a mesma nÃ£o for visÃ­vel.\n   */\n  @Input('t-actions') set actions(actions: Array<ThfTableAction>) {\n    this._actions = actions;\n    this.calculateWidthHeaders();\n  }\n\n  get actions() {\n    return this._actions;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Habilita em todas as colunas a opÃ§Ã£o de ordenaÃ§Ã£o de dados. Caso a coluna seja do tipo 'data' ou 'dateTime' a\n   * mesma deve respeitar os tipos de entrada definidos para que sejam ordenadas.\n   *\n   * @default `false`\n   */\n  sort?: boolean;\n  @Input('t-sort') set setSort(sort: string) {\n    this.sort = sort === '' ? false : convertToBoolean(sort);\n  }\n\n  /**\n   * @description\n   *\n   * Se verdadeiro, torna habilitado o botÃ£o \"Carregar mais resultados\".\n   *\n   * @default `false`\n   */\n  showMoreDisabled?: boolean;\n  @Input('t-show-more-disabled') set setShowMoreDisabled(showMoreDisabled: string) {\n    this.showMoreDisabled = showMoreDisabled === '' ? false : convertToBoolean(showMoreDisabled);\n  }\n\n  /**\n   * @description\n   *\n   * Habilita ou desabilita o estilo listrado da tabela (`striped`).\n   * > Recomendado para tabelas com maior nÃºmero de dados, facilitando a sua visualizaÃ§Ã£o na tabela.\n   *\n   * @default `false`\n   */\n  striped?: boolean;\n  @Input('t-striped') set setStriped(striped: string) {\n    this.striped = striped === '' ? false : convertToBoolean(striped);\n  }\n\n  /**\n   * @description\n   *\n   * Esconde o *checkbox* para seleÃ§Ã£o de todas as linhas.\n   *\n   * > Sempre receberÃ¡ *true* caso a seleÃ§Ã£o de apenas uma linha esteja ativa.\n   *\n   * @default `false`\n   */\n  hideSelectAll?: boolean;\n  @Input('t-hide-select-all') set setHideSelectAll(hideSelectAll: string) {\n    this.hideSelectAll = hideSelectAll === '' ? false : convertToBoolean(hideSelectAll);\n  }\n\n  /**\n   * @description\n   *\n   * Define que somente uma linha da tabela pode ser selecionada.\n   *\n   * > Esta definiÃ§Ã£o nÃ£o se aplica aos itens filhos, os mesmos possuem comportamento independente do item pai.\n   */\n  singleSelect?: boolean;\n  @Input('t-single-select') set setSingleSelect(value: string) {\n    this.singleSelect = value === '' ? true : convertToBoolean(value);\n  }\n\n  /**\n   * AÃ§Ã£o executada quando todas as linhas sÃ£o selecionadas por meio do *checkbox* que seleciona todas as linhas.\n   */\n  @Output('t-all-selected') allSelected?: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * AÃ§Ã£o executada quando a seleÃ§Ã£o das linhas Ã© desmarcada por meio do *checkbox* que seleciona todas as linhas.\n   */\n  @Output('t-all-unselected') allUnselected?: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * AÃ§Ã£o executada ao selecionar uma linha do `thf-table`.\n   */\n  @Output('t-selected') selected?: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Recebe uma aÃ§Ã£o de clique para o botÃ£o \"Carregar mais resultados\", caso nenhuma aÃ§Ã£o for definida o mesmo\n   * nÃ£o Ã© visÃ­vel.\n   */\n  @Output('t-show-more') showMore?: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * AÃ§Ã£o executada ao desmarcar a seleÃ§Ã£o de uma linha do `thf-table`.\n   */\n  @Output('t-unselected') unselected?: EventEmitter<any> = new EventEmitter<any>();\n\n  selectAll = false;\n  sortedColumn = { property: <ThfTableColumn>null, ascending: true };\n\n  constructor(private thfDate: ThfDateService) { }\n\n  ngOnChanges(): void {\n    if (this.singleSelect || this.hideSelectAll) {\n      this.selectAll = false;\n      this.hideSelectAll = true;\n    }\n  }\n\n  abstract calculateHeightTableContainer(height);\n\n  abstract calculateWidthHeaders();\n\n  protected abstract showContainer(container);\n\n  selectAllRows() {\n    if (!this.hideSelectAll) {\n      this.selectAll = !this.selectAll;\n\n      this.items.forEach(item => {\n        item.$selected = this.selectAll;\n      });\n\n      this.emitSelectAllEvents(this.selectAll, this.items);\n    }\n  }\n\n  selectRow(row: any) {\n    row.$selected = !row.$selected;\n\n    this.emitSelectEvents(row);\n\n    this.configAfterSelectRow(this.items, row);\n  }\n\n  selectDetailRow(row: any) {\n    this.emitSelectEvents(row);\n  }\n\n  // Colunas que sÃ£o inseridas no <head> da tabela\n  getMainColumns() {\n    const typesValid = ['string', 'number', 'boolean', 'date', 'time', 'dateTime', 'currency', 'subtitle', 'link', 'label', 'icon'];\n\n    return this.columns.filter(col => !col.type || typesValid.includes(col.type));\n  }\n\n  // Retorna a coluna da lista de colunas que Ã© do tipo detail\n  getColumnMasterDetail() {\n    return this.columns.find(col => col.type === 'detail');\n  }\n\n  getClassColor(row, column) {\n    return column.color ? `thf-text-${this.getColumnColor(row, column)}` : '' ;\n  }\n\n  getColumnColor(row, column) {\n    const columnColor = column.color;\n\n    return isTypeof(columnColor, 'function') ? columnColor(row, column.property) : columnColor;\n  }\n\n  // Retorna as colunas com status\n  getSubtitleColumns() {\n    return this.columns.filter(col => col.type === 'subtitle');\n  }\n\n  // Retorna as colunas com Ã­cones\n  getIconColumns() {\n    return this.columns.filter(col => col.type === 'icon');\n  }\n\n  // Retorna o nome da coluna do tipo detail\n  getNameColumnDetail() {\n    const detail = this.getColumnMasterDetail();\n    return detail ? detail.property : null;\n  }\n\n  /**\n   * Retorna as linhas do `thf-table` que estÃ£o selecionadas.\n   */\n  getSelectedRows() {\n    return this.items.filter(item => item.$selected);\n  }\n\n  /**\n   * Retorna as linhas do `thf-table` que nÃ£o estÃ£o selecionadas.\n   */\n  getUnselectedRows() {\n    return this.items.filter(item => !item.$selected);\n  }\n\n  hasColumns(): boolean {\n    return this.columns && this.columns.length > 0;\n  }\n\n  hasItems(): boolean {\n    return this.items && this.items.length > 0;\n  }\n\n  toggleRowAction(row: any) {\n    const toggleShowAction = row.$showAction;\n\n    this.items.forEach(item => {\n      if (item.$showAction) {\n        item.$showAction = false;\n      }\n    });\n    row.$showAction = !toggleShowAction;\n  }\n\n  sortColumn(column: ThfTableColumn) {\n    if (!this.sort || column.type === 'detail') {\n      return;\n    }\n\n    this.sortedColumn.ascending = this.sortedColumn.property === column ? !this.sortedColumn.ascending : true;\n\n    this.sortArray(column, this.sortedColumn.ascending);\n    this.sortedColumn.property = column;\n  }\n\n  sortArray(column: ThfTableColumn, ascending: boolean) {\n\n    this.items.sort((leftSide, rightSide): number => {\n\n      if (column.type === 'date' || column.type === 'dateTime' ) {\n        return this.thfDate.sortDate(leftSide[column.property], rightSide[column.property], ascending);\n      } else {\n        return sortValues(leftSide[column.property], rightSide[column.property], ascending);\n      }\n\n    });\n\n  }\n\n  onShowMore(): void {\n    this.showMore.emit(null);\n  }\n\n  protected getDefaultColumns(item: any) {\n    const keys = Object.keys(item);\n\n    return keys.filter(key => (typeof item[key] !== 'object')).map(key => {\n      return { label: capitalizeFirstLetter(key) , property: key };\n    });\n  }\n\n  private configAfterSelectRow(rows: Array<any>, row) {\n    if (this.singleSelect) {\n\n      this.unselectOtherRows(rows, row);\n\n    } else if (!this.hideSelectAll) {\n\n      this.selectAll = this.isEverySelected(rows);\n    }\n  }\n\n  private emitSelectAllEvents(selectAll: boolean, rows: any) {\n    selectAll ? this.allSelected.emit(rows) : this.allUnselected.emit(rows);\n  }\n\n  private emitSelectEvents(row: any) {\n    row.$selected ? this.selected.emit(row) : this.unselected.emit(row);\n  }\n\n  private isEverySelected(items: Array<any>): boolean {\n    const someCheckedOrIndeterminate = item => item.$selected || item.$selected === null;\n    const everyChecked = item => item.$selected;\n\n    if (items.every(everyChecked)) {\n      return true;\n    }\n\n    if (items.some(someCheckedOrIndeterminate)) {\n      return null;\n    }\n\n    return false;\n  }\n\n  private setColumnLink() {\n    this.columns.forEach(column => {\n      if (column['type'] === 'link' && !column['link']) {\n        column['link'] = 'link';\n      }\n    });\n  }\n\n  private unselectOtherRows(rows: Array<any>, row) {\n    rows.forEach(item => {\n      if (item !== row) {\n        item.$selected = false;\n      }\n    });\n  }\n\n}\n","import { Directive, Input, TemplateRef } from '@angular/core';\n\n/**\n * @usedBy ThfTableComponent\n *\n * @description\n *\n * Esta diretiva permite que seja apresentada informaÃ§Ãµes adicionais a respeito de uma determinada linha de\n * dados, de forma que possam ser exibidas e ocultadas atravÃ©s do botÃ£o de acionamento.\n *\n * > Quando utilizada, sobrepÃµe as funcionalidade bÃ¡sicas do *master-detail*.\n *\n * Em seu uso, deve-se utilizar como parÃ¢metro a referÃªncia da _linha_ e/ou _Ã­ndice_, sendo por padrÃ£o linha. Caso nÃ£o seja declarado,\n * o componente nÃ£o exibirÃ¡ conteÃºdo.\n *  - Linha: `row` determina o item da linha corrente.\n *  - Ãndice: `rowIndex` determina o Ã­ndice da linha corrente.\n *\n * Esta diretiva compÃµe-se de dois meios para uso, de forma explÃ­cita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:\n *\n * ```\n * ...\n * <thf-table\n *   [t-columns]=\"columns\"\n *   [t-items]=\"items\">\n *     <ng-template t-table-row-template let-rowItem let-i=\"rowIndex\" [t-table-row-template-show]=\"isShow\">\n *       <detail-row [row]=\"rowItem\"></detail-row>\n *     </ng-template>\n * ...\n * ```\n *\n * ```\n * ...\n * <thf-table\n *   [t-columns]=\"columns\"\n *   [t-items]=\"items\">\n *     <div *t-table-row-template=\"let rowItem, let i=rowIndex\">\n *       <detail-row [row]=\"rowItem\"></detail-row>\n *     </div>\n * ...\n *\n * ```\n *\n * A diretiva **t-table-row-template**, possibilita tambÃ©m que determinada linha apresente ou nÃ£o seu _template_. Para isto,\n * Ã© necessÃ¡rio atribuir a referÃªncia da funÃ§Ã£o que faz esta verificaÃ§Ã£o, Ã  propriedade `t-table-row-template-show`,\n * a mesma deve retornar um valor do tipo *boolean*. Veja o exemplo a seguir:\n *\n * ```\n * ...\n * @Component({\n *    selector: 'app-root',\n *    templateUrl: `\n *      ...\n *      <thf-table\n *        [t-columns]=\"columns\"\n *        [t-items]=\"items\">\n *          <ng-template t-table-row-template let-rowItem let-i=\"rowIndex\" [t-table-row-template-show]=\"isUndelivered\">\n *            <detail-row [row]=\"rowItem\"> </detail-row>\n *          </div>\n *      ...\n *    `\n * })\n * export class AppComponent {\n *    public dataTable = [{\n *      code: 1200,\n *      product: 'Rice',\n *      costumer: 'Supermarket 1',\n *      quantity: 3,\n *      status: 'delivered',\n *      license_plate: 'MDJD9191',\n *      batch_product: 18041822,\n *      driver: 'JosÃ© Oliveira'\n *    }, {\n *      code: 1355,\n *      product: 'Bean',\n *      costumer: 'Supermarket 2',\n *      quantity: 1,\n *      status: 'transport',\n *      license_plate: 'XXA5454',\n *      batch_product: 18041821,\n *      driver: 'Francisco Pereira'\n *    }];\n *\n *    isUndelivered(row, index: number) {\n *      return row.status !== 'delivered';\n *    }\n * }\n * ```\n * > No exemplo acima, somente serÃ¡ disponibilizado os detalhes de informaÃ§Ãµes nas linhas cujo o valor de `status`\n * nÃ£o correspondam Ã  *delivered*.\n */\n@Directive({\n  selector: '[t-table-row-template]'\n})\nexport class ThfTableRowTemplateDirective {\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * FunÃ§Ã£o que deve retornar um valor booleano, informando se apresentarÃ¡ o template da linha.\n   * SerÃ£o passados o objeto da linha e o indice da mesma por parÃ¢metro, para que seja possÃ­vel\n   * tomar uma decisÃ£o a partir do objeto da linha corrente.\n   *\n   * Caso nÃ£o ser utilizado esta propriedade, serÃ£o apresentados todos os detalhes das linhas.\n   *\n   * @default `true`\n   */\n  @Input('t-table-row-template-show') thfTableRowTemplateShow: (row: any, index: number) => boolean;\n\n  // NecessÃ¡rio manter templateRef para o funcionamento do row template.\n  constructor(public templateRef: TemplateRef<any>) { }\n\n}\n","import {\n  AfterViewInit, ChangeDetectorRef, Component, ContentChild, DoCheck, ElementRef, IterableDiffers,\n  OnDestroy, QueryList, Renderer2, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';\nimport { DecimalPipe } from '@angular/common';\nimport { Router } from '@angular/router';\n\nimport { capitalizeFirstLetter, convertToBoolean } from '../../utils/util';\nimport { ThfDateService } from '../../services/thf-date/thf-date.service';\nimport { ThfPopupComponent } from '../thf-popup/thf-popup.component';\n\nimport { ThfTableAction } from './interfaces/thf-table-action.interface';\nimport { ThfTableBaseComponent } from './thf-table-base.component';\nimport { ThfTableColumn } from './interfaces/thf-table-column.interface';\nimport { ThfTableColumnIcon } from './thf-table-column-icon/thf-table-column-icon.interface';\nimport { ThfTableColumnLabel } from './thf-table-column-label/thf-table-column-label.interface';\nimport { ThfTableRowTemplateDirective } from './thf-table-row-template/thf-table-row-template.directive';\nimport { ThfTableSubtitleColumn } from './thf-table-subtitle-footer/thf-table-subtitle-column.interface';\n\n/**\n * @docsExtends ThfTableBaseComponent\n *\n * @example\n *\n * <example name=\"thf-table-basic\" title=\"Totvs Table Basic\">\n *  <file name=\"sample-thf-table-basic/sample-thf-table-basic.component.ts\"> </file>\n *  <file name=\"sample-thf-table-basic/sample-thf-table-basic.component.html\"> </file>\n * </example>\n *\n * <example name=\"thf-table-labs\" title=\"Totvs Table Labs\">\n *  <file name=\"sample-thf-table-labs/sample-thf-table-labs.component.ts\"> </file>\n *  <file name=\"sample-thf-table-labs/sample-thf-table-labs.component.html\"> </file>\n *  <file name=\"sample-thf-table-labs/sample-thf-table-labs.component.e2e-spec.ts\"> </file>\n *  <file name=\"sample-thf-table-labs/sample-thf-table-labs.component.po.ts\"> </file>\n *  <file name=\"sample-thf-table-labs/sample-thf-table-labs.service.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-table-transport\" title=\"Totvs Table - Transport\">\n *  <file name=\"sample-thf-table-transport/sample-thf-table-transport.component.ts\"> </file>\n *  <file name=\"sample-thf-table-transport/sample-thf-table-transport.component.html\"> </file>\n *  <file name=\"sample-thf-table-transport/sample-thf-table-transport.service.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-table-airfare\" title=\"Totvs Table - Airfare\">\n *  <file name=\"sample-thf-table-airfare/sample-thf-table-airfare.component.ts\"> </file>\n *  <file name=\"sample-thf-table-airfare/sample-thf-table-airfare.component.html\"> </file>\n *  <file name=\"sample-thf-table-airfare/sample-thf-table-airfare.service.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-table-components\" title=\"Totvs Table - Thf Field Components\">\n *  <file name=\"sample-thf-table-components/sample-thf-table-components.component.ts\"> </file>\n *  <file name=\"sample-thf-table-components/sample-thf-table-components.component.html\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-table',\n  templateUrl: './thf-table.component.html',\n  providers: [ThfDateService]\n})\nexport class ThfTableComponent extends ThfTableBaseComponent implements AfterViewInit, DoCheck, OnDestroy {\n\n  @ContentChild(ThfTableRowTemplateDirective, { static: true }) tableRowTemplate: ThfTableRowTemplateDirective;\n\n  @ViewChild('popup', { static: false }) thfPopupComponent: ThfPopupComponent;\n\n  @ViewChild('tableContainer', { read: ElementRef, static: true }) tableContainerElement;\n  @ViewChild('tableFooter', { read: ElementRef, static: true }) tableFooterElement;\n  @ViewChild('tableWrapper', { read: ElementRef, static: true }) tableWrapperElement;\n\n  @ViewChildren('actionsIconElement', { read: ElementRef }) actionsIconElement: QueryList<any>;\n  @ViewChildren('actionsElement', { read: ElementRef }) actionsElement: QueryList<any>;\n  @ViewChildren('headersTable') headersTable: QueryList<any>;\n\n  heightTableContainer;\n  parentRef: any;\n  popupTarget;\n  tableOpacity: number = 0;\n  tooltipText: string;\n\n  private differ;\n  private footerHeight;\n  private initialized = false;\n  private timeoutResize;\n  private visibleElement = false;\n\n  private clickListener: () => void;\n  private resizeListener: () => void;\n\n  constructor(\n    thfDate: ThfDateService,\n    differs: IterableDiffers,\n    viewRef: ViewContainerRef,\n    renderer: Renderer2,\n    private changeDetector: ChangeDetectorRef,\n    private decimalPipe: DecimalPipe,\n    // tslint:disable-next-line\n    private router: Router){\n\n    super(thfDate);\n\n    this.parentRef = viewRef['_view']['component'];\n    this.differ = differs.find([]).create(null);\n\n    // TODO: #5550 ao remover este listener, no portal, quando as colunas forem fixas nÃ£o sofrem\n    // alteraÃ§Ã£o de largura, pois o ngDoCheck nÃ£o Ã© executado.\n    this.clickListener = renderer.listen('document', 'click', () => { });\n\n    this.resizeListener = renderer.listen('window', 'resize', (event: any) => {\n      this.debounceResize();\n    });\n\n  }\n\n  get detailHideSelect() {\n    const masterDetail = this.getColumnMasterDetail();\n    return masterDetail && masterDetail.detail ? masterDetail.detail.hideSelect : false;\n  }\n\n  get firstAction(): ThfTableAction {\n    return this.visibleActions && this.visibleActions[0];\n  }\n\n  get hasRowTemplate(): boolean {\n    return !!this.tableRowTemplate;\n  }\n\n  get visibleActions() {\n    return this.actions && this.actions.filter(action => action.visible !== false);\n  }\n\n  ngAfterViewInit() {\n    this.initialized = true;\n\n    if (!this.container) {\n      this.hideContainer();\n    }\n  }\n\n  ngDoCheck() {\n    this.checkChangesItems();\n    this.verifyCalculateHeightTableContainer();\n    // Permite que os cabeÃ§alhos sejam calculados na primeira vez que o componente torna-se visÃ­vel,\n    // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.\n    if (this.tableWrapperElement.nativeElement.offsetWidth && !this.visibleElement && this.initialized) {\n      this.debounceResize();\n      this.visibleElement = true;\n    }\n  }\n\n  ngOnDestroy() {\n    this.removeListeners();\n  }\n\n  checkDisabled(row, column: ThfTableColumn) {\n    return column.disabled ? column.disabled(row) : false;\n  }\n\n  executeTableAction(row: any, tableAction: any) {\n    if (!row.disabled && !this.validateTableAction(row, tableAction)) {\n      tableAction.action.call(this.parentRef, row);\n      this.toggleRowAction(row);\n    }\n  }\n\n  columnCountForMasterDetail() {\n    return (this.getMainColumns().length + 1) + (this.actions.length > 0 ? 1 : 0) + (this.checkbox ? 1 : 0);\n  }\n\n  columnCount() {\n    return (\n      this.getMainColumns().length +\n      (this.actions.length > 0 ? 1 : 0) +\n      (this.checkbox ? 1 : 0) +\n      (!this.hideDetail && this.getColumnMasterDetail() !== undefined ? 1 : 0)\n    );\n  }\n\n  formatNumber(value: any, format: string) {\n    if (!format) {\n      return value;\n    }\n\n    return this.decimalPipe.transform(value, format);\n  }\n\n  getSubtitleColumn(row: any, subtitleColumn: ThfTableColumn): ThfTableSubtitleColumn {\n    return subtitleColumn.subtitles.find(subtitleItem => row[subtitleColumn.property] === subtitleItem.value);\n  }\n\n  getBooleanLabel(rowValue: any, columnBoolean: ThfTableColumn): string {\n\n    if (rowValue || rowValue === false || rowValue === 0) {\n      rowValue = convertToBoolean(rowValue);\n\n      if (columnBoolean.boolean) {\n        return rowValue ? columnBoolean.boolean.trueLabel || 'Sim' : columnBoolean.boolean.falseLabel || 'NÃ£o';\n      } else {\n        return rowValue ? 'Sim' : 'NÃ£o';\n      }\n    }\n\n    return rowValue;\n  }\n\n  getColumnIcons(row: any, columnIcon: ThfTableColumn): any {\n    const columnValues = row[columnIcon.property];\n\n    if (columnIcon.icons) {\n\n      if (columnValues instanceof Array) {\n        return this.mergeCustomIcons(columnValues, columnIcon.icons);\n      }\n\n      if (typeof columnValues === 'string') {\n        const customIcon = columnIcon.icons.find(icon => columnValues === icon.value);\n        if (customIcon) {\n          return [ customIcon ];\n        }\n      }\n\n    }\n\n    return columnValues;\n  }\n\n  getColumnLabel(row: any, columnLabel: ThfTableColumn): ThfTableColumnLabel {\n    return columnLabel.labels.find(labelItem => row[columnLabel.property] === labelItem.value);\n  }\n\n  getColumnTitleLabel(column: ThfTableColumn) {\n    return column.label || capitalizeFirstLetter(column.property);\n  }\n\n  verifyWidthColumnsPixels() {\n    const columns = this.getMainColumns();\n    return columns.length ? columns.every(column => column.width && column.width.includes('px')) : false;\n  }\n\n  calculateWidthHeaders() {\n    setTimeout(() => {\n      if (this.height) {\n        this.headersTable.forEach(header => {\n          const divHeader = header.nativeElement.querySelector('.thf-table-header-fixed-inner');\n          if (divHeader) {\n            divHeader.style.width = `${header.nativeElement.offsetWidth}px`;\n          }\n        });\n      }\n    });\n  }\n\n  containsMasterDetail(row) {\n    return row[this.getNameColumnDetail()] && row[this.getNameColumnDetail()].length;\n  }\n\n  isShowRowTemplate(row, index: number): boolean {\n\n    if (this.tableRowTemplate && this.tableRowTemplate.thfTableRowTemplateShow) {\n      return this.tableRowTemplate.thfTableRowTemplateShow(row, index);\n    }\n\n    return true;\n  }\n\n  isShowMasterDetail(row) {\n    return !this.hideDetail &&\n      this.getNameColumnDetail() &&\n      row.$showDetail &&\n      this.containsMasterDetail(row) &&\n      !this.hasRowTemplate;\n  }\n\n  tooltipMouseEnter(event: any, column?: ThfTableColumn, row?: any) {\n    this.tooltipText = undefined;\n\n    if (this.hideTextOverflow &&\n        event.target.offsetWidth < event.target.scrollWidth &&\n        event.target.innerText.trim()) {\n      return this.tooltipText = event.target.innerText;\n    }\n\n    if (column) {\n      this.checkingIfColumnHasTooltip(column, row);\n    }\n  }\n\n  tooltipMouseLeave() {\n    this.tooltipText = undefined;\n  }\n\n  verifyChangeHeightInFooter() {\n    return this.footerHeight !== this.getHeightTableFooter();\n  }\n\n  verifyCalculateHeightTableContainer() {\n    if (this.height && this.verifyChangeHeightInFooter()) {\n      this.footerHeight = this.getHeightTableFooter();\n      this.calculateHeightTableContainer(this.height);\n    }\n  }\n\n  calculateHeightTableContainer(height) {\n    const value = parseFloat(height);\n    this.heightTableContainer = value ? (value - this.getHeightTableFooter()) : undefined;\n    this.setTableOpacity(1);\n    this.changeDetector.detectChanges();\n  }\n\n  togglePopup(row, targetRef) {\n    this.popupTarget = targetRef;\n    this.changeDetector.detectChanges();\n\n    this.thfPopupComponent.toggle(row);\n  }\n\n  protected showContainer(container: string) {\n\n    const containerClassList = this.tableContainerElement.nativeElement.firstChild.classList;\n\n    containerClassList.add('thf-container');\n\n    container === 'border' ? containerClassList.add('thf-container-no-shadow') : containerClassList.remove('thf-container-no-shadow');\n  }\n\n  private checkChangesItems() {\n    const changesItems = this.differ.diff(this.items);\n\n    if (changesItems && this.selectAll) {\n      this.selectAll = null;\n    }\n\n    if (changesItems && !this.hasColumns() && this.hasItems()) {\n      this.columns = this.getDefaultColumns(this.items[0]);\n    }\n  }\n\n  private checkingIfColumnHasTooltip(column, row) {\n    if (column.type === 'link' && column.tooltip && !this.checkDisabled(row, column)) {\n      return this.tooltipText = column.tooltip;\n    }\n\n    if (column.type === 'label') {\n      const columnLabel = this.getColumnLabel(row, column);\n      return this.tooltipText = columnLabel.tooltip;\n    }\n  }\n\n  private getHeightTableFooter() {\n    return this.tableFooterElement ? this.tableFooterElement.nativeElement.offsetHeight : 0;\n  }\n\n  private hideContainer() {\n    const containerClassList = this.tableContainerElement.nativeElement.firstChild.classList;\n    containerClassList.remove('thf-container');\n  }\n\n  private mergeCustomIcons(columnValues: Array<string>, customIcons: Array<ThfTableColumnIcon>) {\n    const icons = [];\n\n    columnValues.forEach(columnValue => {\n\n      const foundCustomIcon = customIcons.find(customIcon => columnValue === customIcon.icon || columnValue === customIcon.value);\n      foundCustomIcon ? icons.push(foundCustomIcon) : icons.push(columnValue);\n\n    });\n\n    return icons;\n  }\n\n  private validateTableAction(row: any, tableAction: any) {\n    if (typeof tableAction.disabled === 'function') {\n      return tableAction.disabled.call(this.parentRef, row);\n    } else {\n      return tableAction.disabled;\n    }\n  }\n\n  private debounceResize() {\n    clearTimeout(this.timeoutResize);\n    this.timeoutResize = setTimeout(() => {\n      this.calculateWidthHeaders();\n\n      // show the table\n      this.setTableOpacity(1);\n    });\n  }\n\n  private removeListeners() {\n    if (this.resizeListener) {\n      this.resizeListener();\n    }\n\n    if (this.clickListener) {\n      this.clickListener();\n    }\n  }\n\n  private setTableOpacity(value: number) {\n    this.tableOpacity = value;\n  }\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DecimalPipe } from '@angular/common';\n\nimport { capitalizeFirstLetter, isTypeof } from '../../../utils/util';\n\nimport { ThfTableDetail } from './thf-table-detail.interface';\nimport { ThfTableDetailColumn } from './thf-table-detail-column.interface';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente responsÃ¡vel por apresentar o detalhe de cada linha da tabela.\n */\n@Component({\n  selector: 'thf-table-detail',\n  templateUrl: './thf-table-detail.component.html'\n})\nexport class ThfTableDetailComponent {\n\n  private _detail: ThfTableDetail;\n\n  /**\n   * Define se a tabela possui a opÃ§Ã£o de `checkbox` habilitada.\n   */\n  @Input('t-checkbox') hasCheckbox?: boolean = false;\n\n  /**\n   * ConfiguraÃ§Ã£o da linha de detalhes.\n   */\n  @Input('t-detail') set detail(value: ThfTableDetail) {\n    this._detail = this.returnThfTableDetailObject(value);\n  }\n\n  get detail() {\n    return this._detail;\n  }\n\n  /**\n   * Lista de itens do _detail_ da tabela.\n   */\n  @Input('t-items') items: Array<any>;\n\n  /**\n   * AÃ§Ã£o executada ao selecionar ou desmarcar a seleÃ§Ã£o de uma linha de detalhe do `thf-table`.\n   */\n  @Output('t-select-row') selectRow?: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(private decimalPipe: DecimalPipe) {}\n\n  get detailColumns(): Array<ThfTableDetailColumn> {\n    return this.detail && this.detail.columns || [];\n  }\n\n  get typeHeaderInline(): boolean {\n    return this.detail && !this.detail['typeHeader'] || this.detail['typeHeader'] === 'inline';\n  }\n\n  get typeHeaderTop(): boolean {\n    return this.detail && this.detail['typeHeader'] === 'top';\n  }\n\n  formatNumberDetail(value: any, format: string) {\n    if (!format) {\n      return value;\n    }\n\n    return this.decimalPipe.transform(value, format);\n  }\n\n  getColumnTitleLabel(detail: ThfTableDetailColumn) {\n    return detail.label || capitalizeFirstLetter(detail.property);\n  }\n\n  onSelectRow(item) {\n    item.$selected = !item.$selected;\n    this.selectRow.emit(item);\n  }\n\n  private returnThfTableDetailObject(value: any) {\n    if (value && isTypeof(value, 'object')) {\n\n      if (value.columns) {\n        value.columns.forEach(column => column.property = column.property || column.column);\n      }\n\n      if (Array.isArray(value)) {\n        return { columns: value };\n      }\n\n      if (value.columns) {\n        return value;\n      }\n    }\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\nimport { ThfTableSubtitleColumn } from '../thf-table-subtitle-footer/thf-table-subtitle-column.interface';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente para a criaÃ§Ã£o de um botÃ£o e modal para visualizaÃ§Ã£o de todas as legendas.\n */\n@Component({\n  selector: 'thf-table-show-subtitle',\n  templateUrl: './thf-table-show-subtitle.component.html'\n})\nexport class ThfTableShowSubtitleComponent {\n\n  /** Objeto com os dados da legenda. */\n  @Input('t-subtitles') subtitles: Array<ThfTableSubtitleColumn>;\n\n  /** Propriedade que recebe as literais definidas no `thf-table`. */\n  @Input('t-literals') literals;\n\n}\n","import { Component, Input } from '@angular/core';\n\nimport { ThfColorPaletteService } from './../../../services/thf-color-palette/thf-color-palette.service';\nimport { ThfTableSubtitleColumn } from './../thf-table-subtitle-footer/thf-table-subtitle-column.interface';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente para a criaÃ§Ã£o da representaÃ§Ã£o da legenda, em formato de cÃ­rculo.\n */\n@Component({\n  selector: 'thf-table-subtitle-circle',\n  templateUrl: './thf-table-subtitle-circle.component.html'\n})\nexport class ThfTableSubtitleCircleComponent {\n\n  private _subtitle: ThfTableSubtitleColumn;\n\n  /** Objeto com os dados da legenda. */\n  @Input('t-subtitle') set subtitle(subtitle: ThfTableSubtitleColumn) {\n    if (subtitle) {\n      subtitle.color = this.thfColorPaletteService.getColor(subtitle);\n    }\n    this._subtitle = subtitle;\n  }\n  get subtitle(): ThfTableSubtitleColumn {\n    return this._subtitle;\n  }\n\n  /** Esconde a tooltip. */\n  @Input('t-hide-title')\n  hideTitle: boolean = false;\n\n  constructor(private thfColorPaletteService: ThfColorPaletteService) { }\n\n}\n","import { AfterViewInit, Component, ElementRef, Input, OnDestroy, Renderer2 } from '@angular/core';\n\nimport { ThfTableSubtitleColumn } from './thf-table-subtitle-column.interface';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente para a criaÃ§Ã£o de um conjunto de legendas.\n */\n@Component({\n  selector: 'thf-table-subtitle-footer',\n  templateUrl: './thf-table-subtitle-footer.component.html'\n})\nexport class ThfTableSubtitleFooterComponent implements AfterViewInit, OnDestroy {\n\n  showSubtitle: boolean;\n\n  private timeoutResize;\n  protected resizeListener: () => void;\n\n  /** Propriedade que recebe as literais definidas no `thf-table`. */\n  @Input('t-literals') literals;\n\n  /** Propriedade que recebe as legendas definidas no `ThfTableSubtitleCircleComponent`. */\n  @Input('t-subtitles') subtitles: Array<ThfTableSubtitleColumn>;\n\n  constructor(private element: ElementRef, public renderer: Renderer2) { }\n\n  ngAfterViewInit() {\n    this.initializeResizeListener();\n    this.debounceResize();\n  }\n\n  ngOnDestroy() {\n    this.removeResizeListener();\n  }\n\n  private debounceResize() {\n    clearTimeout(this.timeoutResize);\n    this.timeoutResize = setTimeout(() => {\n      this.toggleShowCompleteSubtitle();\n    });\n  }\n\n  private getContainerSize() {\n    return this.element.nativeElement.querySelector('.thf-table-subtitle-footer-container').offsetWidth;\n  }\n\n  private getItemsSize() {\n    const items = this.element.nativeElement.querySelectorAll('.thf-table-subtitle-footer');\n\n    return Array.from(items).map(item => item['offsetWidth']).reduce((a, b) => a + b, 16);\n  }\n\n  private initializeResizeListener() {\n    this.resizeListener = this.renderer.listen('window', 'resize', (event: MouseEvent) => {\n      this.debounceResize();\n    });\n  }\n\n  private removeResizeListener() {\n    this.resizeListener();\n  }\n\n  private toggleShowCompleteSubtitle() {\n    const containerSize = this.getContainerSize();\n    const itemsSize = this.getItemsSize();\n\n    this.showSubtitle = itemsSize > containerSize;\n  }\n\n}\n","import { CommonModule, DecimalPipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfButtonModule } from './../thf-button/thf-button.module';\nimport { ThfContainerModule } from '../thf-container/thf-container.module';\nimport { ThfLoadingModule } from '../thf-loading/thf-loading.module';\nimport { ThfModalModule } from '../thf-modal/thf-modal.module';\nimport { ThfPopupModule } from './../thf-popup/thf-popup.module';\nimport { ThfTimeModule } from '../../pipes/thf-time/index';\nimport { ThfTooltipModule } from '../../directives/thf-tooltip/index';\n\nimport { ThfTableColumnIconComponent } from './thf-table-column-icon/thf-table-column-icon.component';\nimport { ThfTableColumnLabelComponent } from './thf-table-column-label/thf-table-column-label.component';\nimport { ThfTableColumnLinkComponent } from './thf-table-column-link/thf-table-column-link.component';\nimport { ThfTableComponent } from './thf-table.component';\nimport { ThfTableDetailComponent } from './thf-table-detail/thf-table-detail.component';\nimport { ThfTableRowTemplateDirective } from './thf-table-row-template/thf-table-row-template.directive';\nimport { ThfTableShowSubtitleComponent } from './thf-table-show-subtitle/thf-table-show-subtitle.component';\nimport { ThfTableSubtitleCircleComponent } from './thf-table-subtitle-circle/thf-table-subtitle-circle.component';\nimport { ThfTableSubtitleFooterComponent } from './thf-table-subtitle-footer/thf-table-subtitle-footer.component';\n\n/**\n * @description\n * MÃ³dulo do componente thf-table\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ThfButtonModule,\n    ThfContainerModule,\n    ThfLoadingModule,\n    ThfModalModule,\n    ThfPopupModule,\n    ThfTimeModule,\n    ThfTooltipModule\n  ],\n  declarations: [\n    ThfTableComponent,\n    ThfTableColumnIconComponent,\n    ThfTableColumnLabelComponent,\n    ThfTableColumnLinkComponent,\n    ThfTableDetailComponent,\n    ThfTableRowTemplateDirective,\n    ThfTableShowSubtitleComponent,\n    ThfTableSubtitleCircleComponent,\n    ThfTableSubtitleFooterComponent\n  ],\n  exports: [\n    ThfTableComponent,\n    ThfTableRowTemplateDirective\n  ],\n  providers: [DecimalPipe]\n})\nexport class ThfTableModule { }\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ThfCalendarLangService {\n\n  months = [\n    {\n      pt: 'Janeiro',\n      en: 'January',\n      es: 'Enero'\n    },\n    {\n      pt: 'Fevereiro',\n      en: 'February',\n      es: 'Febrero'\n    },\n    {\n      pt: 'MarÃ§o',\n      en: 'March',\n      es: 'Marzo'\n    },\n    {\n      pt: 'Abril',\n      en: 'April',\n      es: 'Abril'\n    },\n    {\n      pt: 'Maio',\n      en: 'May',\n      es: 'Mayo'\n    },\n    {\n      pt: 'Junho',\n      en: 'June',\n      es: 'Junio'\n    },\n    {\n      pt: 'Julho',\n      en: 'July',\n      es: 'Julio'\n    },\n    {\n      pt: 'Agosto',\n      en: 'August',\n      es: 'Agosto'\n    },\n    {\n      pt: 'Setembro',\n      en: 'September',\n      es: 'Setiembre'\n    },\n    {\n      pt: 'Outubro',\n      en: 'October',\n      es: 'Octubre'\n    },\n    {\n      pt: 'Novembro',\n      en: 'November',\n      es: 'Noviembre'\n    },\n    {\n      pt: 'Dezembro',\n      en: 'December',\n      es: 'Diciembre'\n    }\n  ];\n\n  shortWeekDays = [\n    {\n      pt: 'Dom',\n      en: 'Sun',\n      es: 'Dom'\n    },\n    {\n      pt: 'Seg',\n      en: 'Mon',\n      es: 'Lun'\n    },\n    {\n      pt: 'Ter',\n      en: 'Tue',\n      es: 'Mar'\n    },\n    {\n      pt: 'Qua',\n      en: 'Wed',\n      es: 'MiÃ©'\n    },\n    {\n      pt: 'Qui',\n      en: 'Thu',\n      es: 'Jue'\n    },\n    {\n      pt: 'Sex',\n      en: 'Fri',\n      es: 'Vie'\n    },\n    {\n      pt: 'SÃ¡b',\n      en: 'Sat',\n      es: 'SÃ¡b'\n    }\n  ];\n\n  wordMonth = {\n    pt: 'MÃªs',\n    en: 'Month',\n    es: 'Mes'\n  };\n\n  wordYear = {\n    pt: 'Ano',\n    en: 'Year',\n    es: 'AÃ±o'\n  };\n\n  lang = 'pt';\n\n  constructor() { }\n\n  setLanguage(lang: string) {\n    if (lang && lang.length >= 2) {\n      lang = lang.toLowerCase().slice(0, 2);\n      this.lang = (lang === 'pt' || lang === 'en' || lang === 'es') ? lang : 'pt';\n    }\n  }\n\n  getWordMonth() {\n    return this.wordMonth[this.lang];\n  }\n\n  getWordYear() {\n    return this.wordYear[this.lang];\n  }\n\n  getMonth(month: number) {\n    return this.months[month][this.lang];\n  }\n\n  getArrayMonths() {\n    const arrMonths = Array();\n    for (let i = 0; i < this.months.length; i++) {\n      arrMonths.push(this.months[i][this.lang]);\n    }\n    return arrMonths;\n  }\n\n  getWeedDays(day: number) {\n    return this.shortWeekDays[day][this.lang];\n  }\n\n  getArrayWeekDays() {\n    const arrWeekDays = Array();\n    for (let i = 0; i < this.shortWeekDays.length; i++) {\n      arrWeekDays.push(this.shortWeekDays[i][this.lang]);\n    }\n    return arrWeekDays;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { setYearFrom0To100 } from '../../../../utils/util';\n\n@Injectable()\nexport class ThfCalendarService {\n  firstWeekDay: number;\n\n  constructor() {\n    this.firstWeekDay = 0; // 0 = sunday\n  }\n\n  weekStartDate(date: any) {\n    const startDate = new Date(date.getTime());\n    while (startDate.getDay() !== this.firstWeekDay) {\n      startDate.setDate(startDate.getDate() - 1);\n    }\n    return startDate;\n  }\n\n  monthDates(year: any, month: any, dayFormatter: any = null, weekFormatter: any = null) {\n    if ((typeof month !== 'number') || (month < 0) || (month > 11)) {\n      throw Error(('month must be a number (Jan is 0)'));\n    }\n\n    const weeks: Array<any> = [];\n    let week: Array<any> = [];\n    let i = 0;\n    let date = new Date(year, month, 1);\n    setYearFrom0To100(date, year);\n    date = this.weekStartDate(date);\n\n    do {\n      for (i = 0; i < 7; i++) {\n        week.push(dayFormatter ? dayFormatter(date) : date);\n        date = new Date(date.getTime());\n        date.setDate(date.getDate() + 1);\n      }\n      weeks.push(weekFormatter ? weekFormatter(week) : week);\n      week = [];\n    } while ((date.getMonth() <= month) && (date.getFullYear() === year));\n    return weeks;\n  }\n\n  monthDays(year: any, month: any) {\n    const getDayOrZero = function(date: any) {\n      return date.getMonth() === month ? date : 0;\n    };\n    return this.monthDates(year, month, getDayOrZero);\n  }\n}\n","import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\n\nimport { isMobile, setYearFrom0To100, validateDateRange } from '../../../../utils/util';\nimport { ThfCalendarLangService } from './thf-calendar.lang.service';\nimport { ThfCalendarService } from './thf-calendar.service';\n\nconst thfCalendarLocaleDefault = 'pt';\nconst thfCalendarLocales = ['pt', 'en', 'es'];\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente de calendÃ¡rio de uso interno\n */\n@Component({\n  selector: 'thf-calendar',\n  templateUrl: './thf-calendar.component.html',\n  providers: [ThfCalendarService, ThfCalendarLangService ]\n})\nexport class ThfCalendarComponent {\n\n  private _dateEnd: Date;\n  private _dateStart: Date;\n  private _locale: string;\n  private _selectedDate?: Date;\n\n  dayVisible: boolean = false;\n  displayDays: Array<number>;\n  displayDecade: Array<number>;\n  displayFinalDecade: number;\n  displayMonth: any;\n  displayMonths: Array<any> = Array();\n  displayStartDecade: number;\n  displayWeedDays: Array<any> = Array();\n  displayYear: number;\n  monthVisible: boolean = false;\n  overlayInvisible: boolean = true;\n  visible: boolean = false;\n  yearVisible: boolean = false;\n\n  private currentMonthNumber: number;\n  private currentYear: number;\n  private displayMonthNumber: number;\n  private isMobile: any = isMobile;\n  private lastDisplay: string;\n  private today: Date = new Date();\n\n  @ViewChild('days', { read: ElementRef, static: true }) elDays: ElementRef;\n  @ViewChild('months', { read: ElementRef, static: true }) elMonths: ElementRef;\n  @ViewChild('years', { read: ElementRef, static: true }) elYears: ElementRef;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Data mÃ¡xima possÃ­vel de ser selecionada no calendÃ¡rio.\n   */\n  @Input('t-date-end') set dateEnd(val: Date) {\n    if (val && val instanceof Date) {\n      const year = val.getFullYear();\n      const month = val.getMonth();\n      const day = val.getDate();\n\n      const date = new Date(year, month, day, 23, 59, 59);\n      setYearFrom0To100(date, year);\n\n      this._dateEnd = date;\n    } else {\n      this._dateEnd = undefined;\n    }\n  }\n  get dateEnd() {\n    return this._dateEnd;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Idioma do calendÃ¡rio.\n   *\n   * Valores vÃ¡lidos:\n   *  - `pt`\n   *  - `en`\n   *  - `es`\n   */\n  @Input('t-locale') set locale(locale: string) {\n    this._locale = thfCalendarLocales.includes(locale) ? locale : thfCalendarLocaleDefault;\n    this.initializeLanguage();\n  }\n  get locale() {\n    return this._locale;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Data selecionada no calendÃ¡rio.\n   */\n  @Input('t-selected-date') set selectedDate(selectedDate: Date) {\n    this._selectedDate  = selectedDate && selectedDate instanceof Date ? selectedDate : undefined;\n  }\n  get selectedDate(): Date {\n    return this._selectedDate;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Data mÃ­nima possÃ­vel de ser selecionada no calendÃ¡rio.\n   */\n  @Input('t-date-start') set dateStart(val: Date) {\n    if (val && val instanceof Date) {\n      const year = val.getFullYear();\n      const month = val.getMonth();\n      const day = val.getDate();\n\n      const date = new Date(year, month, day, 0, 0, 0);\n      setYearFrom0To100(date, year);\n\n      this._dateStart = date;\n    } else {\n      this._dateStart = undefined;\n    }\n  }\n  get dateStart() {\n    return this._dateStart;\n  }\n\n  @Output('t-selected-dateChange') selectedDateChange = new EventEmitter<Date>();\n  @Output('t-submit') submit = new EventEmitter<Date>();\n\n  constructor(\n    private thfCalendarService: ThfCalendarService,\n    private thfCalendarLangService: ThfCalendarLangService) {\n  }\n\n  close() {\n    this.overlayInvisible = true;\n    this.visible = false;\n  }\n\n  // ObtÃ©m um array de todos os anos desta dÃ©cada\n  getArrayDecade(year) {\n    this.displayDecade = Array();\n\n    if (year % 10 !== 0) {\n      while (year % 10 !== 0) {\n        year--;\n      }\n    }\n    this.updateDecade(year);\n  }\n\n  getBackgroundColor(displayValue: number, propertyValue: number) {\n    return (displayValue === propertyValue) ? 'thf-calendar-box-background-selected' : 'thf-calendar-box-background';\n  }\n\n  getDayBackgroundColor(date: Date) {\n    if (this.equalsDate(date, this.selectedDate)) {\n      return 'thf-calendar-box-background-selected';\n    } else if (this.equalsDate(date, this.today)) {\n      return 'thf-calendar-box-background-today';\n    } else if (date) {\n      if (validateDateRange(date, this.dateStart, this.dateEnd)) {\n        return 'thf-calendar-box-background';\n      } else {\n        return 'thf-calendar-box-background-disabled';\n      }\n    } else {\n      return '';\n    }\n  }\n\n  getDayForegroundColor(date: Date) {\n    if (this.equalsDate(date, this.selectedDate)) {\n      return 'thf-calendar-box-foreground-selected';\n    } else if (this.equalsDate(date, this.today)) {\n      return 'thf-calendar-box-foreground-today';\n    } else {\n      if (validateDateRange(date, this.dateStart, this.dateEnd)) {\n        return 'thf-calendar-box-foreground';\n      } else {\n        return 'thf-calendar-box-foreground-disabled';\n      }\n    }\n  }\n\n  getForegroundColor(displayValue: number, propertyValue: number) {\n    return (displayValue === propertyValue) ? 'thf-calendar-box-foreground-selected' : 'thf-calendar-box-foreground';\n  }\n\n  getWordMonth() {\n    return this.thfCalendarLangService.getWordMonth();\n  }\n\n  getWordYear() {\n    return this.thfCalendarLangService.getWordYear();\n  }\n\n  init() {\n    this.selectedDate ? this.updateDate(this.selectedDate) : this.updateDate(this.today);\n\n    this.initializeLanguage();\n\n    this.selectDay();\n\n    if (this.isMobile()) {\n      this.overlayInvisible = false;\n    }\n\n    this.visible = true;\n  }\n\n  initializeLanguage() {\n    this.thfCalendarLangService.setLanguage(this.locale);\n    this.displayWeedDays = this.thfCalendarLangService.getArrayWeekDays();\n    this.displayMonths = this.thfCalendarLangService.getArrayMonths();\n  }\n\n  onNextMonth() {\n    if (this.displayMonthNumber < 11) {\n      this.updateDisplay(this.displayYear, this.displayMonthNumber + 1);\n    } else {\n      this.updateDisplay(this.displayYear + 1, 0);\n    }\n  }\n\n  onPrevMonth() {\n    if (this.displayMonthNumber > 0) {\n      this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);\n    } else {\n      this.updateDisplay(this.displayYear - 1, 11);\n    }\n  }\n\n  // Ao selecionar uma data\n  onSelectDate(date: Date) {\n    if (validateDateRange(date, this.dateStart, this.dateEnd)) {\n      this.selectedDate = date;\n      this.selectedDateChange.emit(date);\n      this.submit.emit(date);\n    }\n  }\n\n  // Ao selecionar um mÃªs\n  onSelectMonth(year: number, month: number) {\n    this.selectDay();\n    this.updateDisplay(year, month);\n  }\n\n  // Ao selecionar um ano\n  onSelectYear(year: number, month: number) {\n    // Se veio da tela de seleÃ§Ã£o de mÃªs\n    this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();\n\n    this.currentYear = year;\n    this.updateDisplay(year, month);\n  }\n\n  selectDay() {\n    this.dayVisible = true;\n    this.monthVisible = false;\n    this.yearVisible = false;\n    this.lastDisplay = 'day';\n  }\n\n  selectMonth() {\n    this.dayVisible = false;\n    this.monthVisible = true;\n    this.yearVisible = false;\n    this.lastDisplay = 'month';\n  }\n\n  selectYear() {\n    this.dayVisible = false;\n    this.monthVisible = false;\n    this.yearVisible = true;\n  }\n\n  setMobileVisualization() {\n    return this.isMobile() ? 'thf-calendar thf-calendar-mobile' : 'thf-calendar';\n  }\n\n  updateYear(value: number) {\n    this.updateDisplay(this.displayYear + value, this.displayMonthNumber);\n  }\n\n  private addAllYearsInDecade(year: number) {\n    let i;\n    for (i = year; i < year + 10; i++) {\n      this.displayDecade.push(i);\n    }\n  }\n\n  private equalsDate(date1: Date, date2: Date): boolean {\n    try {\n      return date1.getFullYear() === date2.getFullYear() &&\n        date1.getMonth() === date2.getMonth() &&\n        date1.getDate() === date2.getDate();\n    } catch (error) {\n      return false;\n    }\n  }\n\n  private updateDate(date: Date) {\n    this.currentMonthNumber = date.getMonth();\n    this.currentYear = date.getFullYear();\n    this.updateDisplay(this.currentYear, this.currentMonthNumber);\n  }\n\n  private updateDecade(year: number) {\n    this.addAllYearsInDecade(year);\n    this.displayStartDecade = year;\n    this.displayFinalDecade = year + 9;\n  }\n\n  private updateDisplay(year: number, month: number) {\n    const calendarArray = this.thfCalendarService.monthDays(year, month);\n    this.displayDays = [].concat.apply([], calendarArray);\n    this.displayMonthNumber = month;\n    this.displayMonth = this.displayMonths[month];\n    this.displayYear = year;\n    this.getArrayDecade(year);\n  }\n\n}\n","\nexport function requiredFailed(required: boolean, disabled: boolean, value: string | Array<any> | number | boolean) {\n  const valid = ((typeof value === 'string' && value) || (typeof value === 'object' && value && value.length)\n                || (typeof value === 'number' && (value || value === 0)) || (typeof value === 'boolean' && value));\n  return (required && !disabled && !valid);\n}\n\nexport function maxlengthFailed(maxlength: number, value: string | number) {\n  const validMaxlength = maxlength || maxlength === 0;\n  const validValue = (value || value === 0) && value.toString();\n  return validMaxlength && validValue && validValue.length > Number(maxlength);\n}\n\nexport function minlengthFailed(minlength: number, value: string | number) {\n  const validMinlength = minlength || minlength === 0;\n  const validValue = (value || value === 0) && value.toString();\n  return validMinlength && validValue && validValue.length < Number(minlength);\n}\n\nexport function patternFailed(pattern: string, value: string) {\n  let reg;\n  try {\n    reg = new RegExp(pattern);\n  } catch (e) {\n    return true;\n  }\n  return (pattern && value && !reg.test(value));\n}\n\nexport function minFailed(min: number, value: number) {\n  const validValue = value || value === 0;\n  const validMin = min || min === 0;\n  return validValue && validMin && value < min;\n}\n\nexport function maxFailed(max: number, value: number) {\n  const validValue = value || value === 0;\n  const validMax = max || max === 0;\n  return validValue && validMax && value > max;\n}\n\nexport function dateFailed(value: string) {\n  return (value && isNaN(Date.parse(value)));\n}\n","import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { EventEmitter, Input, Output } from '@angular/core';\n\nimport { convertToBoolean, convertToInt } from './../../../utils/util';\nimport { requiredFailed } from '../validators';\n\nimport { ThfCheckboxGroupOption } from './thf-checkbox-group-option.interface';\n\nconst thfCheckboxGroupColumnsDefaultLength: number = 6;\nconst thfCheckboxGroupColumnsTotalLength: number = 12;\n\n/**\n * @description\n *\n * O componente `thf-checkbox-group` exibe uma lista de mÃºltipla escolha onde o usuÃ¡rio pode marcar e desmarcar,\n * utilizando a tecla de espaÃ§o ou o clique do mouse, vÃ¡rias opÃ§Ãµes.\n *\n * > Para seleÃ§Ã£o Ãºnica, utilize o [**Totvs Radio Group**](/documentation/thf-radio-group).\n *\n * Por padrÃ£o, o thf-checkbox-group retorna um array com os valores dos itens selecionados para o model.\n *\n * ```\n * favorites = ['THF', 'Angular'];\n * ```\n *\n * Na maioria das situaÃ§Ãµes, o array com os objetos setados jÃ¡ atende as necessidades mas, caso o desenvolvedor\n * tenha necessidade de usar um valor indeterminado (`null`), ou seja, nem marcado (`true`) e nem desmarcado (`false`),\n * deve setar a propriedade `t-indeterminate` como `true`.\n *\n * Nesse caso, o thf-checkbox-group vai retornar um objeto com todas as opÃ§Ãµes disponÃ­veis e seus valores.\n *\n * ```\n * favorites = {\n *  THF: true,\n *  Angular: true,\n *  VueJS: false,\n *  React: null // indeterminado\n * };\n * ```\n */\nexport class ThfCheckboxGroupBaseComponent implements ControlValueAccessor, Validator {\n\n  checkedOptions: any = {};\n  checkedOptionsList: any = [];\n  mdColumns: number = thfCheckboxGroupColumnsDefaultLength;\n  propagateChange: any;\n  validatorChange: any;\n\n  private _columns: number = thfCheckboxGroupColumnsDefaultLength;\n  private _disabled?: boolean = false;\n  private _indeterminate?: boolean = false;\n  private _options?: Array<ThfCheckboxGroupOption>;\n  private _required?: boolean = false;\n\n  /** Nome dos checkboxes */\n  @Input('name') name: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Possibilita definir a quantidade de colunas para exibiÃ§Ã£o dos itens do *checkbox*.\n   * - Ã possÃ­vel exibir as opÃ§Ãµes entre `1` e `4` colunas.\n   * - Para resoluÃ§Ã£o `sm` a colunagem invariavelmente passa para `1` coluna.\n   * - Quando se trata de resoluÃ§Ã£o `md` e o valor estabelecido para colunas for superior a `2`,\n   * o *grid system* serÃ¡ composto por `2` colunas.\n   *\n   * @default `2`\n   *\n   */\n  @Input('t-columns') set columns(value: number) {\n    const columns = convertToInt(value, thfCheckboxGroupColumnsDefaultLength);\n\n    this._columns = this.getGridSystemColumns(columns, 4);\n    this.mdColumns = this.getGridSystemColumns(columns, 2);\n  }\n\n  get columns() {\n    return this._columns;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Desabilita todos os itens do checkbox.\n   *\n   * @default `false`\n   */\n  @Input('t-disabled') set disabled(value: boolean) {\n    this._disabled = convertToBoolean(value);\n\n    this.validateModel(this.checkIndeterminate());\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  /** Texto de apoio do campo */\n  @Input('t-help') help?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opÃ§Ãµes, Ã© necessÃ¡rio setar\n   * a propriedade `t-indeterminate` como `true`, por padrÃ£o essa propriedade vem desabilitada (`false`).\n   *\n   * Quando essa propriedade Ã© setada como `true`, o *thf-checkbox-group* passa a devolver um objeto completo para o\n   * `ngModel`, diferente do array que contÃ©m apenas os valores selecionados.\n   *\n   * @default `false`\n   */\n  @Input('t-indeterminate') set indeterminate(indeterminate: boolean) {\n    this._indeterminate = convertToBoolean(indeterminate);\n  }\n\n  get indeterminate() {\n    return this._indeterminate;\n  }\n\n  /** Label do campo */\n  @Input('t-label') label?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se a indicaÃ§Ã£o de campo opcional serÃ¡ exibida.\n   *\n   * > NÃ£o serÃ¡ exibida a indicaÃ§Ã£o se:\n   * - O campo conter `t-required`;\n   * - NÃ£o possuir `t-help` e/ou `t-label`.\n   *\n   * @default `false`\n   */\n  @Input('t-optional') optional: boolean;\n\n  /**\n   * @optional\n   *\n   * @description\n   * Lista de opÃ§Ãµes que serÃ£o exibidas\n   * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfCheckboxGroupOption\n   */\n  @Input('t-options') set options(value: Array<ThfCheckboxGroupOption>) {\n    this._options = Array.isArray(value) ? value : [];\n    this.removeDuplicatedOptions();\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define que o campo serÃ¡ obrigatÃ³rio.\n   *\n   * @default `false`\n   */\n  @Input('t-required') set required(required: boolean) {\n    this._required = convertToBoolean(required);\n\n    this.validateModel(this.checkIndeterminate());\n  }\n\n  get required() {\n    return this._required;\n  }\n\n  // FunÃ§Ã£o para atualizar o `ngModel` do componente, necessÃ¡rio quando nÃ£o for utilizado dentro da tag form.\n  @Output('ngModelChange') ngModelChange?: EventEmitter<any> = new EventEmitter<any>();\n\n  /** Evento disparado ao alterar valor do campo */\n  @Output('t-change') change?: EventEmitter<any> = new EventEmitter<any>();\n\n  changeValue() {\n\n    const value = this.checkIndeterminate();\n\n    if (this.propagateChange) {\n      this.propagateChange(value);\n    } else {\n      this.ngModelChange.emit(value);\n    }\n\n    this.change.emit(value);\n  }\n\n  checkIndeterminate() {\n    return this.indeterminate ? this.checkedOptions : this.checkedOptionsList;\n  }\n\n  checkOption(value: ThfCheckboxGroupOption) {\n    if (!this._disabled && !value.disabled) {\n      this.checkOptionModel(value);\n      this.changeValue();\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void { }\n\n  writeValue(optionsModel: any) {\n    if (optionsModel && this.checkedOptions !== optionsModel) {\n      this.generateCheckOptions(optionsModel);\n    } else {\n      this.checkedOptionsList = [];\n      this.checkedOptions = {};\n    }\n  }\n\n  registerOnValidatorChange(fn: () => void) {\n    this.validatorChange = fn;\n  }\n\n  validate(abstractControl: AbstractControl): { [key: string]: any; } {\n\n    if ((!this.indeterminate && requiredFailed(this.required, this.disabled, abstractControl.value)) || this.isInvalidIndeterminate()) {\n      return {\n        required: {\n          valid: false,\n        }\n      };\n    }\n\n  }\n\n  protected validateModel(model: any) {\n    if (this.validatorChange) {\n      this.validatorChange(model);\n    }\n  }\n\n  private checkColumnsRange(columns, maxColumns): boolean {\n    const minColumns = 1;\n\n    return columns >= minColumns && columns <= maxColumns;\n  }\n\n  private checkOptionModel(optionChecked: ThfCheckboxGroupOption) {\n    this.checkedOptions[optionChecked.value] = !this.checkedOptions[optionChecked.value];\n\n    if (!this.indeterminate && this.checkedOptionsList.includes(optionChecked.value)) {\n      this.checkedOptionsList.splice(this.checkedOptionsList.indexOf(optionChecked.value), 1);\n\n    } else if (!this.indeterminate) {\n      this.checkedOptionsList.push(optionChecked.value);\n    }\n  }\n\n  private generateCheckOptions(optionsModel: any) {\n\n    this.checkedOptions = {};\n\n    if (optionsModel instanceof Array) {\n      this.checkedOptionsList = optionsModel;\n\n      this.options.forEach((option: ThfCheckboxGroupOption) => {\n        this.checkedOptions[option.value] = optionsModel.includes(option.value);\n      });\n    } else {\n      this.options.forEach((option: ThfCheckboxGroupOption) => {\n        optionsModel[option.value] = optionsModel[option.value] === undefined ? false : optionsModel[option.value];\n        this.checkedOptions = optionsModel;\n      });\n    }\n  }\n\n  private getGridSystemColumns(columns: number, maxColumns: number): number {\n    const gridSystemColumns = thfCheckboxGroupColumnsTotalLength / columns;\n\n    return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : thfCheckboxGroupColumnsDefaultLength;\n  }\n\n  private isInvalidIndeterminate() {\n    if (this.indeterminate && this.required && this.checkedOptions) {\n      return (<any>Object).values(this.checkedOptions).every(value => value === false);\n    }\n    return false;\n  }\n\n  private removeDuplicatedOptions() {\n    this.options.forEach((option, index) => {\n      const duplicatedIndex = this.options.findIndex((optionFind: any) => optionFind.value === option.value) === index;\n      if (!duplicatedIndex) {\n        this.options.splice(this.options.indexOf(option), 1);\n      }\n    });\n  }\n\n}\n","import { AfterViewChecked, ChangeDetectorRef, Component, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ThfCheckboxGroupBaseComponent } from './thf-checkbox-group-base.component';\nimport { ThfCheckboxGroupOption } from './thf-checkbox-group-option.interface';\n\n/**\n * @docsExtends ThfCheckboxGroupBaseComponent\n *\n * @example\n *\n * <example name=\"thf-checkbox-group-basic\" title=\"Totvs Checkbox Group Basic\">\n *  <file name=\"sample-thf-checkbox-group-basic/sample-thf-checkbox-group-basic.component.html\"> </file>\n *  <file name=\"sample-thf-checkbox-group-basic/sample-thf-checkbox-group-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-checkbox-group-labs\" title=\"Totvs Checkbox Group Labs\">\n *  <file name=\"sample-thf-checkbox-group-labs/sample-thf-checkbox-group-labs.component.html\"> </file>\n *  <file name=\"sample-thf-checkbox-group-labs/sample-thf-checkbox-group-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-checkbox-group-password-policy\" title=\"Totvs Checkbox Group â Security policy\">\n *  <file name=\"sample-thf-checkbox-group-password-policy/sample-thf-checkbox-group-password-policy.component.html\"> </file>\n *  <file name=\"sample-thf-checkbox-group-password-policy/sample-thf-checkbox-group-password-policy.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-checkbox-group',\n  templateUrl: './thf-checkbox-group.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ThfCheckboxGroupComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => ThfCheckboxGroupComponent),\n      multi: true,\n    }\n  ]\n})\nexport class ThfCheckboxGroupComponent extends ThfCheckboxGroupBaseComponent implements AfterViewChecked {\n\n  constructor(private changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngAfterViewChecked(): void {\n    this.changeDetector.detectChanges();\n  }\n\n  onKeyDown(event: KeyboardEvent, option: ThfCheckboxGroupOption) {\n    const spaceBar = 32;\n\n    if (event.which === spaceBar || event.keyCode === spaceBar) {\n      this.checkOption(option);\n\n      event.preventDefault();\n    }\n  }\n\n}\n","import { ElementRef, EventEmitter, Input, Output } from '@angular/core';\n\n/**\n * @docsPrivate\n *\n * Este componente Ã© de uso interno utilizado por componentes de entrada de dados com o objetivo de resetar as informaÃ§Ãµes do model.\n *\n * Por padrÃ£o limpa o valor do campo e executa o mÃ©todo onChangePropagate, caso tenha a necessidade de tratar a funÃ§Ã£o de limpar o campo,\n * deve implementar a interface ThfClean.\n */\nexport abstract class ThfCleanBaseComponent {\n\n  /** Nesta propriedade deve-se informar o elementRef do campo de entrada que utilizarÃ¡ o thf-clean. */\n  @Input('t-element-ref') inputRef: ElementRef;\n\n  /** Valor que serÃ¡ atribuÃ­do ao campo quando for clicado no thf-clean. */\n  @Input('t-default-value') defaultValue?: string = '';\n\n  /**\n   * Evento disparado quando executada aÃ§Ã£o do thf-clean.\n   * Este evento deve ser usado para avisar para o componente que estÃ¡ usando o thf-clean, que o botÃ£o foi disparado,\n   * e provavelmente serÃ¡ preciso emitir o evento para atualizar o model.\n   */\n  @Output('t-change-event') changeEvent?: EventEmitter<any> = new EventEmitter<any>();\n\n  protected parentComponent: any;\n\n  clear() {\n    this.setInputValue(this.defaultValue);\n    this.changeEvent.emit(this.defaultValue);\n  }\n\n  showIcon() {\n    return this.defaultValue !== this.getInputValue() && this.hasCleanAttr() && !this.isDisabled() && !this.isReadonly();\n  }\n\n  // Este mÃ©todo verifica se o componente pai possui a propriedade clean diferente de vazio,\n  // ou seja, se o thf-clean deve ser usado.\n  private hasCleanAttr(): boolean {\n    return this.parentComponent.clean;\n  }\n\n  // Este mÃ©todo verifica se o componente pai estÃ¡ desabilitado.\n  private isDisabled(): boolean {\n    return this.parentComponent.disabled;\n  }\n\n  // Este mÃ©todo verifica se o componente pai estÃ¡ somente leitura.\n  private isReadonly(): boolean {\n    return this.parentComponent.readonly;\n  }\n\n  abstract setInputValue(value: string): void;\n\n  abstract getInputValue(): string;\n\n}\n","import { Component, ViewContainerRef } from '@angular/core';\n\nimport { ThfCleanBaseComponent } from './thf-clean-base.component';\n\n/**\n * @docsPrivate\n *\n * @docsExtends ThfCleanBaseComponent\n *\n * @examplePrivate\n *\n * <example-private name=\"thf-clean-labs\" title=\"Totvs Clean Labs\">\n *   <file name=\"sample-thf-clean-labs.component.html\"> </file>\n *   <file name=\"sample-thf-clean-labs.component.ts\"> </file>\n * </example-private>\n */\n@Component({\n  selector: 'thf-clean',\n  templateUrl: './thf-clean.component.html'\n})\nexport class ThfCleanComponent extends ThfCleanBaseComponent {\n\n  constructor(private viewRef: ViewContainerRef) {\n    super();\n    this.parentComponent = this.viewRef['_view']['component'];\n  }\n\n  setInputValue(value?: string) {\n    if (this.inputRef && this.inputRef.nativeElement) {\n      this.inputRef.nativeElement.value = value;\n    }\n  }\n\n  getInputValue() {\n    if (this.inputRef && this.inputRef.nativeElement) {\n      return this.inputRef.nativeElement.value;\n    }\n  }\n\n}\n","/**\n * @docsPrivate\n *\n * @description\n *\n * Enum que contÃ©m os valores numÃ©ricos dos *keyCodes*.\n */\nexport enum ThfKeyCodeEnum {\n\n    /** Seta para baixo */\n    arrowDown = 40,\n\n    /** Seta para cima */\n    arrowUp = 38,\n\n    /** Backspace */\n    backspace = 8,\n\n    /** Delete */\n    delete = 46,\n\n    /** Enter */\n    enter = 13,\n\n    /** Esc */\n    esc = 27,\n\n    /** EspaÃ§o */\n    space = 32,\n\n    /** Tab */\n    tab = 9\n\n}\n","/**\n * @usedBy ThfComboComponent\n *\n * @description\n *\n * Define o tipo de busca usado no thf-combo.\n */\nexport enum ThfComboFilterMode {\n  /** Verifica se o texto *inicia* com o valor pesquisado. Caso nÃ£o seja especificado um tipo, serÃ¡ esse o utilizado. */\n  startsWith,\n  /** Verifica se o texto *contÃ©m* o valor pesquisado. */\n  contains,\n  /** Verifica se o texto *finaliza* com o valor pesquisado. */\n  endsWith\n}\n","import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { browserLanguage, convertToBoolean, isTypeof, removeDuplicatedOptions, thfLocaleDefault, validValue } from '../../../utils/util';\nimport { requiredFailed } from '../validators';\n\nimport { ThfComboFilter } from './interfaces/thf-combo-filter.interface';\nimport { ThfComboFilterMode } from './thf-combo-filter-mode.enum';\nimport { ThfComboFilterService } from './thf-combo-filter.service';\nimport { ThfComboLiterals } from './interfaces/thf-combo-literals.interface';\nimport { ThfComboOption } from './interfaces/thf-combo-option.interface';\n\nconst THF_COMBO_DEBOUNCE_TIME_DEFAULT = 400;\nconst THF_COMBO_FIELD_LABEL_DEFAULT = 'label';\nconst THF_COMBO_FIELD_VALUE_DEFAULT = 'value';\n\nexport const thfComboLiteralsDefault = {\n  en: <ThfComboLiterals> {\n    noData: 'No data found'\n  },\n  es: <ThfComboLiterals> {\n    noData: 'Datos no encontrados'\n  },\n  pt: <ThfComboLiterals> {\n    noData: 'Nenhum dado encontrado'\n  }\n};\n\n/**\n * @description\n *\n * O thf-combo, semelhante ao thf-select, exibe uma lista de valores e permite ao usuÃ¡rio fazer a seleÃ§Ã£o de um desses valores,\n * mas no caso do thf-combo, o usuÃ¡rio ainda consegue filtrar os valores disponibilizados para seleÃ§Ã£o.\n *\n * TambÃ©m hÃ¡ a possibilidade de usar serviÃ§o no thf-combo, atravÃ©s da propriedade t-filter-service.\n *\n * O comportamento do thf-combo permite ao usuÃ¡rio:\n *  - selecionar um item atravÃ©s do mouse;\n *  - navegar pelos itens utilizando as setas do teclado confirmando a seleÃ§Ã£o com \"Enter\";\n *  - pesquisar os itens da lista de seleÃ§Ã£o e em seguida navegar com as setas ou com o mouse;\n *  - digitar a descriÃ§Ã£o completa.\n *\n * O thf-combo guarda o Ãºltimo valor caso o usuÃ¡rio desista de uma busca, deixando o campo ou teclando \"ESC\".\n * Caso seja digitado no campo de busca a descriÃ§Ã£o completa de um item, entÃ£o a seleÃ§Ã£o serÃ¡ automaticamente efetuada\n * ao deixar o campo ou pressionando \"Enter\".\n *\n * Ã necessÃ¡rio que os itens da lista de selecÃ£o contenham sempre valor (value) e descriÃ§Ã£o (label) para que os itens apareÃ§am corretamente\n * no thf-combo, itens que nÃ£o estejam implementando corretamenta a interface ThfComboOption, serÃ£o descartados.\n *\n * O thf-combo ainda permite definir o modo que serÃ¡ feito o filtro, atravÃ©s da propriedade t-filter-mode.\n */\nexport abstract class ThfComboBaseComponent implements ControlValueAccessor, OnInit, Validator {\n\n  private _changeOnEnter?: boolean = false;\n  private _debounceTime?: number = 400;\n  private _disabled?: boolean = false;\n  private _disabledInitFilter?: boolean = false;\n  private _fieldLabel?: string = 'label';\n  private _fieldValue?: string = 'value';\n  private _filterMinlength?: number = 0;\n  private _filterMode?: ThfComboFilterMode = ThfComboFilterMode.startsWith;\n  private _filterParams?: any;\n  private _filterService?: ThfComboFilter | string;\n  private _literals?: ThfComboLiterals;\n  private _options: Array<ThfComboOption> = [];\n  private _required?: boolean = false;\n\n  cacheOptions: Array<ThfComboOption> = [];\n  cacheStaticOptions: Array<ThfComboOption> = [];\n  defaultService: ThfComboFilterService;\n  firstInWriteValue: boolean = true;\n  isFirstFilter: boolean = true;\n  isFiltering: boolean = false;\n  keyupSubscribe: any;\n  onModelChange: any;\n  onModelTouched: any;\n  previousSearchValue: string = '';\n  selectedOption: ThfComboOption;\n  selectedValue: any;\n  selectedView: any;\n  service: ThfComboFilterService;\n  visibleOptions: Array<ThfComboOption> = [];\n\n  private validatorChange: any;\n\n  /** Label no componente. */\n  @Input('t-label') label?: string;\n\n  /** Texto de apoio para o campo. */\n  @Input('t-help') help?: string;\n\n  /** Mensagem apresentada enquanto o campo estiver vazio. */\n  @Input('t-placeholder') placeholder?: string = '';\n\n  /** Nome do componente. */\n  @Input('name') name: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   * Nesta propriedade deve ser informada a URL do serviÃ§o em que serÃ¡ realizado o filtro para carregamento da lista de\n   * itens no componente.\n   * Caso haja a necessidade de customizaÃ§Ã£o, entÃ£o pode ser informado um serviÃ§o implementando a interface ThfComboFilter.\n   *\n   * Caso utilizado uma URL, o serviÃ§o deve ser retornado no padrÃ£o API TOTVS e utiliza as propriedades\n   * `t-field-label` e `t-field-value` para a construÃ§Ã£o da lista de itens.\n   *\n   * Quando utilizada uma URL de serviÃ§o, entÃ£o serÃ¡ concateanada nesta URL o valor que deseja-se filtrar da seguinte forma:\n   * ```\n   * url + ?filter=Peter\n   * ```\n   */\n  @Input('t-filter-service') set filterService(service: ThfComboFilter | string) {\n    this._filterService = service;\n\n    this.configAfterSetFilterService(service);\n  }\n\n  get filterService(): ThfComboFilter | string {\n    return this._filterService;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro apÃ³s cada pressionamento de tecla.\n   * SerÃ¡ utilizada apenas quando houver serviÃ§o (`t-filter-service`).\n   *\n   * @default `400`\n   */\n  @Input('t-debounce-time') set debounceTime(value: number) {\n    const parsedValue = parseInt(<any> value, 10);\n\n    this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : THF_COMBO_DEBOUNCE_TIME_DEFAULT;\n\n    this.unsubscribeKeyupObservable();\n    this.initInputObservable();\n  }\n\n  get debounceTime(): number {\n    return this._debounceTime;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   * Desabilita o filtro inicial no serviÃ§o, que Ã© executado no primeiro clique no campo.\n   *\n   * @default `false`\n   *\n   */\n  @Input('t-disabled-init-filter') set disabledInitFilter(value: boolean) {\n    this._disabledInitFilter = convertToBoolean(value);\n  }\n\n  get disabledInitFilter(): boolean {\n    return this._disabledInitFilter;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   * Deve ser informado o nome da propriedade do objeto que serÃ¡ utilizado para a conversÃ£o dos itens apresentados na lista do componente\n   * (`t-options`), esta propriedade serÃ¡ responsÃ¡vel pelo valor de cada item da lista.\n   *\n   * NecessÃ¡rio quando informar o serviÃ§o como URL e o mesmo nÃ£o estiver retornando uma lista de objetos no padrÃ£o da interface\n   * ThfComboOption.\n   *\n   * @default `value`\n   */\n  @Input('t-field-value') set fieldValue(value: string) {\n    this._fieldValue = value || THF_COMBO_FIELD_VALUE_DEFAULT;\n\n    if (isTypeof(this.filterService, 'string') && this.service) {\n      this.service.fieldValue = this._fieldValue;\n    }\n  }\n\n  get fieldValue() {\n    return this._fieldValue;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   * Deve ser informado o nome da propriedade do objeto que serÃ¡ utilizado para a conversÃ£o dos itens apresentados na lista do componente\n   * (`t-options`), esta propriedade serÃ¡ responsÃ¡vel pelo texto de apresentaÃ§Ã£o de cada item da lista.\n   *\n   * NecessÃ¡rio quando informar o serviÃ§o como URL e o mesmo nÃ£o estiver retornando uma lista de objetos no padrÃ£o da interface\n   * ThfComboOption.\n   *\n   * @default `label`\n   */\n  @Input('t-field-label') set fieldLabel(value: string) {\n    this._fieldLabel = value || THF_COMBO_FIELD_LABEL_DEFAULT;\n\n    if (isTypeof(this.filterService, 'string') && this.service) {\n      this.service.fieldLabel = this._fieldLabel;\n    }\n  }\n\n  get fieldLabel() {\n    return this._fieldLabel;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   * Valor mÃ­nimo de caracteres para realizar o filtro no serviÃ§o.\n   *\n   * @default `0`\n   */\n  @Input('t-filter-minlength') set filterMinlength(value: number) {\n    const parseValue = (typeof value === 'string') ? parseInt(value, 10) : value;\n\n    this._filterMinlength = Number.isInteger(parseValue) ? parseValue : 0;\n  }\n\n  get filterMinlength() {\n    return this._filterMinlength;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   * Indica que o campo serÃ¡ obrigatÃ³rio.\n   *\n   * @default `false`\n   */\n  @Input('t-required') set required(required: boolean) {\n    this._required = convertToBoolean(required);\n\n    this.validateModel(this.selectedValue);\n  }\n\n  get required() {\n    return this._required;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   * Indica que o evento `t-change` sÃ³ serÃ¡ disparado ao clicar ou pressionar a tecla \"Enter\" sobre uma opÃ§Ã£o selecionada.\n   *\n   * @default `false`\n   */\n  @Input('t-change-on-enter') set changeOnEnter(changeOnEnter: boolean) {\n    this._changeOnEnter = convertToBoolean(changeOnEnter);\n  }\n\n  get changeOnEnter() {\n    return this._changeOnEnter;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   * Indica que o campo serÃ¡ desabilitado.\n   *\n   * @default `false`\n   */\n  @Input('t-disabled') set disabled(disabled: boolean) {\n    this._disabled = convertToBoolean(disabled);\n\n    this.validateModel(this.selectedValue);\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define o Ã­cone que serÃ¡ exibido no inÃ­cio do campo.\n   *\n   * > Veja a disponibilidade de Ã­cones em [biblioteca de Ã­cones](guides/icons).\n   */\n  @Input('t-icon') icon?: string;\n\n  /**\n   * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfComboOption.\n   * Esta lista conterÃ¡ os valores e as descriÃ§Ãµes que serÃ£o apresentados na tela.\n   */\n  @Input('t-options') set options(options: Array<ThfComboOption>) {\n    this._options = Array.isArray(options) ? options : [];\n\n    this.cacheStaticOptions = this.options;\n\n    this.validAndSortOptions();\n    removeDuplicatedOptions(this.options);\n    this.updateComboList();\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se a indicaÃ§Ã£o de campo opcional serÃ¡ exibida.\n   *\n   * > NÃ£o serÃ¡ exibida a indicaÃ§Ã£o se:\n   * - O campo conter `t-required`;\n   * - NÃ£o possuir `t-help` e/ou `t-label`.\n   *\n   * @default `false`\n   */\n  @Input('t-optional') optional: boolean;\n\n  /** Indica que a lista definida na propriedade t-options serÃ¡ ordenada pela descriÃ§Ã£o. */\n  sort?: boolean = false;\n  @Input('t-sort') set setSort(sort: string) {\n    this.sort = sort === '' ? true : convertToBoolean(sort);\n\n    this.validAndSortOptions();\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define o modo de pesquisa utilizado no filtro da lista de seleÃ§Ã£o: `startsWith`, `contains` ou `endsWith`.\n   *\n   * > Quando utilizar a propriedade `t-filter-service` esta propriedade serÃ¡ ignorada.\n   *\n   * @default `startsWith`\n   */\n  @Input('t-filter-mode') set filterMode(filterMode: ThfComboFilterMode) {\n    this._filterMode = (filterMode in ThfComboFilterMode) ? filterMode : ThfComboFilterMode.startsWith;\n    switch (this._filterMode.toString()) {\n      case 'startsWith':\n        this._filterMode = ThfComboFilterMode.startsWith;\n        break;\n      case 'contains':\n        this._filterMode = ThfComboFilterMode.contains;\n        break;\n      case 'endsWith':\n        this._filterMode = ThfComboFilterMode.endsWith;\n        break;\n    }\n  }\n\n  get filterMode(): ThfComboFilterMode {\n    return this._filterMode;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Valor que serÃ¡ repassado como parÃ¢metro aos mÃ©todos do serviÃ§o que implementam a interface *ThfComboFilter*.\n   */\n  @Input('t-filter-params') set filterParams(filterParams: any) {\n    this._filterParams = (filterParams || filterParams === 0 || filterParams === false) ? filterParams : undefined;\n  }\n\n  get filterParams() {\n    return this._filterParams;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto com as literais usadas no `thf-combo`.\n   *\n   * Para utilizar basta passar a literal que deseja customizar:\n   *\n   * ```\n   *  const customLiterals: ThfComboLiterals = {\n   *    noData: 'Nenhum valor'\n   *  };\n   * ```\n   *\n   * E para carregar a literal customizada, basta apenas passar o objeto para o componente.\n   *\n   * ```\n   * <thf-combo\n   *   [t-literals]=\"customLiterals\">\n   * </thf-combo>\n   * ```\n   *\n   * > O objeto padrÃ£o de literais serÃ¡ traduzido de acordo com o idioma do *browser* (pt, en, es).\n   */\n  @Input('t-literals') set literals(value: ThfComboLiterals) {\n    if (value instanceof Object && !(value instanceof Array)) {\n      this._literals = {\n        ...thfComboLiteralsDefault[thfLocaleDefault],\n        ...thfComboLiteralsDefault[browserLanguage()],\n        ...value\n      };\n    } else {\n      this._literals = thfComboLiteralsDefault[browserLanguage()];\n    }\n  }\n\n  get literals() {\n    return this._literals || thfComboLiteralsDefault[browserLanguage()];\n  }\n\n  /** Deve ser informada uma funÃ§Ã£o que serÃ¡ disparada quando houver alteraÃ§Ãµes no ngModel. */\n  @Output('t-change') change?: EventEmitter<any> = new EventEmitter<any>();\n\n  // FunÃ§Ã£o para atualizar o ngModel do componente, necessÃ¡rio quando nÃ£o for utilizado dentro da tag form.\n  @Output('ngModelChange') ngModelChange?: EventEmitter<any> = new EventEmitter<any>();\n\n  abstract setInputValue(value: any): void;\n\n  abstract applyFilter(value: string): void;\n\n  abstract getObjectByValue(value: string): void;\n\n  abstract getInputValue(): string;\n\n  abstract initInputObservable(): void;\n\n  ngOnInit() {\n    this.updateComboList();\n  }\n\n  onInitService() {\n    if (this.filterService) {\n      this.setService(this.filterService);\n      this.initInputObservable();\n    }\n  }\n\n  setService(service: ThfComboFilter | string) {\n    if (service) {\n      if (isTypeof(service, 'object')) {\n        this.service = <ThfComboFilterService> service;\n      } else {\n        this.service = this.defaultService;\n        this.service.configProperties(<string>service, this.fieldLabel, this.fieldValue);\n      }\n    }\n  }\n\n  validAndSortOptions() {\n    if (this.options && this.options.length > 0) {\n      // Remove os objetos que nÃ£o contÃ©m valor e atribui o valor ao label caso este esteja vazio\n      for (let i = 0; i < this.options.length; i++) {\n        if (!validValue(this.options[i]['value'])) {\n          this.options.splice(i, 1);\n        } else if (!this.options[i]['label']) {\n          this.options[i]['label'] = this.options[i]['value'].toString();\n        }\n      }\n    }\n    this.sortOptions();\n  }\n\n  sortOptions() {\n    if (this.options && this.options.length > 0 && this.sort) {\n      this.options.sort(this.compareOptions);\n    }\n  }\n\n  compareOptions(a: any, b: any) {\n    if (a.label.toString().toLowerCase() < b.label.toString().toLowerCase()) {\n      return -1;\n    }\n    if (a.label.toString().toLowerCase() > b.label.toString().toLowerCase()) {\n      return 1;\n    }\n    return 0;\n  }\n\n  compareMethod(search: string, option: ThfComboOption, filterMode: ThfComboFilterMode) {\n    switch (filterMode) {\n      case ThfComboFilterMode.startsWith:\n        return this.startsWith(search, option);\n      case ThfComboFilterMode.contains:\n        return this.contains(search, option);\n      case ThfComboFilterMode.endsWith:\n        return this.endsWith(search, option);\n    }\n  }\n\n  startsWith(search: string, option: ThfComboOption) {\n    return option.label.toLowerCase().startsWith(search.toLowerCase());\n  }\n\n  contains(search: string, option: ThfComboOption) {\n    return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;\n  }\n\n  endsWith(search: string, option: ThfComboOption) {\n    return option.label.toLowerCase().endsWith(search.toLowerCase());\n  }\n\n  getOptionFromValue(value: any, options: any) {\n    return (options) ? options.find((option: any) => this.isEqual(option.value, value)) : null;\n  }\n\n  getOptionFromLabel(label: any, options: any) {\n    if (options) {\n      return options.find((option: any) => {\n        return option.label.toString().toLowerCase() === label.toString().toLowerCase();\n      });\n    } else {\n      return null;\n    }\n  }\n\n  updateSelectedValue(option: ThfComboOption, isUpdateModel: boolean = true, isWriteValue = false) {\n    const optionLabel = option && option.label || '';\n\n    this.updateInternalVariables(option);\n\n    // atualiza o valor do input quando for changeOnEnter apenas se for para atualizar o model.\n    if (this.changeOnEnter && isUpdateModel) {\n      this.setInputValue(optionLabel);\n    } else if (!this.changeOnEnter) {\n      this.setInputValue(optionLabel);\n    }\n\n    if (isUpdateModel) {\n      const optionValue = option && option.value || undefined;\n\n      this.updateModel(optionValue, isWriteValue);\n    }\n  }\n\n  callModelChange(value: any) {\n    // Caso o componente estiver dentro de um form, terÃ¡ acesso ao mÃ©todo onModelChange.\n    return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);\n  }\n\n  isEqual(value: any, inputValue: any): boolean {\n    if ((value || value === 0) && inputValue) {\n      return value.toString() === inputValue.toString();\n    }\n\n    if ((value === null && inputValue !== null) ||\n        (value === undefined && inputValue !== undefined)) {\n      value = `${value}`; // Transformando em string\n    }\n\n    return value === inputValue;\n  }\n\n  searchForLabel(search: string, options: Array<ThfComboOption>, filterMode: ThfComboFilterMode) {\n    if (search && options && options.length) {\n      const newOptions: Array<ThfComboOption> = [];\n\n      options.forEach(option => {\n        if (option.label && (this.compareMethod(search, option, filterMode) || this.service)) {\n          newOptions.push(option);\n        }\n      });\n\n      this.selectedView = newOptions[0];\n      this.updateComboList(newOptions);\n    } else {\n      this.updateComboList();\n    }\n  }\n\n  updateComboList(options?: Array<ThfComboOption>) {\n    const copyOptions = options || [...this.options];\n\n    const newOptions = !options && this.selectedValue ? [{ ...this.selectedOption }] : copyOptions;\n\n    if (newOptions) {\n      this.visibleOptions = newOptions;\n\n      if (!this.selectedView && this.visibleOptions.length) {\n        this.selectedView = this.visibleOptions[0];\n      }\n    }\n  }\n\n  getNextOption(value: any, options: Array<ThfComboOption>, reverse: boolean = false) {\n    const newOptions = [].concat(options);\n    let optionFound = null;\n    let found = false;\n\n    if (reverse) {\n      newOptions.reverse();\n    }\n\n    for (let i = 0; i < newOptions.length; i++) {\n      const option = newOptions [i];\n      if (!optionFound) {\n        optionFound = option;\n      }\n      if (found) {\n        return option;\n      }\n      if (this.isEqual(option.value, value)) {\n        found = true;\n      }\n    }\n    return optionFound;\n  }\n\n  getIndexSelectedView() {\n    for (let i = 0; i < this.visibleOptions.length; i++) {\n      if (this.compareObjects(this.visibleOptions[i], this.selectedView)) {\n        return i;\n      }\n    }\n    return null;\n  }\n\n  compareObjects(obj1: any, obj2: any) {\n    return JSON.stringify(obj1) === JSON.stringify(obj2);\n  }\n\n  verifyValidOption() {\n    const inputValue = this.getInputValue();\n\n    const optionFound = this.getOptionFromLabel(inputValue, this.options);\n\n    if (optionFound && optionFound.value !== this.selectedValue) {\n\n      this.updateSelectedValue(optionFound);\n\n      this.previousSearchValue = optionFound.label;\n      return;\n\n    } else if (this.selectedValue && this.selectedOption && this.selectedOption.label !== inputValue) {\n      this.updateSelectedValueWithOldOption();\n\n      this.previousSearchValue = this.selectedOption.label;\n      return;\n\n    } else if (inputValue && !optionFound) {\n      const isInputValueDiffSelectedLabel = !!(this.selectedOption && this.selectedOption.label !== inputValue);\n\n      this.updateSelectedValue(null, isInputValueDiffSelectedLabel || this.changeOnEnter);\n\n      this.previousSearchValue = '';\n      return;\n    }\n\n  }\n\n  // Recebe as alteraÃ§Ãµes do model\n  writeValue(value: any) {\n\n    if (validValue(value) && !this.service && this.options && this.options.length) {\n      const option = this.getOptionFromValue(value, this.options);\n      this.updateSelectedValue(option);\n      this.updateComboList();\n      return;\n    }\n\n    // Se houver serviÃ§o busca pelo model.\n    if (value && this.service) {\n      return this.getObjectByValue(value);\n    }\n\n    if (!validValue(value)) {\n      this.updateSelectedValue(null, true, true);\n      this.updateComboList();\n    }\n\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  registerOnValidatorChange(fn: () => void) {\n    this.validatorChange = fn;\n  }\n\n  validate(abstractControl: AbstractControl): { [key: string]: any; } {\n\n    if ((requiredFailed(this.required, this.disabled, abstractControl.value))) {\n      return {\n        required: {\n          valid: false,\n        }\n      };\n    }\n\n  }\n\n  protected validateModel(model: any) {\n    if (this.validatorChange) {\n      this.validatorChange(model);\n    }\n  }\n\n  private configAfterSetFilterService(service: ThfComboFilter | string) {\n    if (service) {\n      this.options = [];\n      this.unsubscribeKeyupObservable();\n      this.onInitService();\n    } else {\n      this.service = undefined;\n      this.options = this.cacheStaticOptions;\n    }\n\n    this.visibleOptions = [];\n    this.isFirstFilter = true;\n  }\n\n  private unsubscribeKeyupObservable() {\n    if (this.keyupSubscribe) {\n      this.keyupSubscribe.unsubscribe();\n    }\n  }\n\n  private updateInternalVariables(option: ThfComboOption) {\n    if (option) {\n      this.selectedView = option;\n      this.selectedOption = option;\n    } else {\n      this.selectedView = undefined;\n      this.selectedOption = undefined;\n    }\n  }\n\n  private updateModel(value: any, fromWriteValue = false): void {\n    if (value !== this.selectedValue) {\n\n      if (!fromWriteValue) {\n        this.callModelChange(value);\n      }\n\n      this.change.emit(value);\n    }\n\n    this.selectedValue = value;\n  }\n\n  private updateSelectedValueWithOldOption() {\n    const oldOption = this.getOptionFromValue(this.selectedValue, this.options);\n\n    if (oldOption && oldOption.label) {\n      return this.updateSelectedValue(oldOption);\n    }\n  }\n\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ThfComboFilter } from './interfaces/thf-combo-filter.interface';\nimport { ThfComboOption } from './interfaces/thf-combo-option.interface';\nimport { ThfResponse } from './interfaces/thf-response.interface';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * ServiÃ§o padrÃ£o utilizado para filtrar os dados do componente thf-combo.\n */\n@Injectable()\nexport class ThfComboFilterService implements ThfComboFilter {\n\n  private _url: string;\n\n  fieldLabel: string = 'label';\n  fieldValue: string = 'value';\n\n  get url(): string { return this._url; }\n\n  constructor(private http: HttpClient) { }\n\n  getFilteredData(param: any, filterParams?: any): Observable<Array<ThfComboOption>> {\n    const value = param.value;\n\n    const params = new HttpParams({\n      fromString: `filter=${value}`\n    });\n\n    return this.http.get(`${this.url}`, {responseType: 'json', params: params})\n      .pipe(map((response: ThfResponse) => this.parseToArrayComboOption(response.items)));\n  }\n\n  getObjectByValue(value: string | number, filterParams?: any): Observable<ThfComboOption> {\n    return this.http.get(`${this.url}/${value}`).pipe(map(item => this.parseToComboOption(item)));\n  }\n\n  configProperties(url: string, fieldLabel: string, fieldValue: string) {\n    this._url = url;\n    this.fieldLabel = fieldLabel;\n    this.fieldValue = fieldValue;\n  }\n\n  private parseToArrayComboOption(items: Array<any>): Array<ThfComboOption> {\n    if (items && items.length > 0) {\n\n      return items.map(item => {\n        return this.parseToComboOption(item);\n      });\n\n    }\n\n    return [];\n  }\n\n  private parseToComboOption(item: any): ThfComboOption {\n    if (item && item[this.fieldValue]) {\n\n      const label = item[this.fieldLabel];\n      const value = item[this.fieldValue];\n\n      return { label, value };\n    }\n  }\n\n}\n","import { ChangeDetectorRef, Component, DoCheck, ElementRef, forwardRef,\n  IterableDiffers, OnDestroy, Renderer2, ViewChild } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { fromEvent, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\n\nimport { removeDuplicatedOptions } from '../../../utils/util';\nimport { ThfControlPositionService } from '../../../services/thf-control-position/thf-control-position.service';\nimport { ThfKeyCodeEnum } from './../../../enums/thf-key-code.enum';\n\nimport { ThfComboBaseComponent } from './thf-combo-base.component';\nimport { ThfComboFilterMode } from './thf-combo-filter-mode.enum';\nimport { ThfComboFilterService } from './thf-combo-filter.service';\nimport { ThfComboOption } from './interfaces/thf-combo-option.interface';\n\nconst thfComboContainerOffset = 8;\nconst thfComboContainerPositionDefault = 'bottom';\n\n/**\n * @docsExtends ThfComboBaseComponent\n *\n * @description\n * Utilizando thf-combo com serviÃ§o, Ã© possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente\n * faÃ§a uma requisiÃ§Ã£o Ã  URL informada passando o valor digitado no campo. Se encontrado o valor, entÃ£o o mesmo serÃ¡ selecionado, caso\n * nÃ£o seja encontrado, entÃ£o a lista de itens voltarÃ¡ para o estado inicial.\n *\n * @example\n *\n * <example name=\"thf-combo-basic\" title=\"Totvs Combo Basic\">\n *   <file name=\"sample-thf-combo-basic/sample-thf-combo-basic.component.html\"> </file>\n *   <file name=\"sample-thf-combo-basic/sample-thf-combo-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-combo-labs\" title=\"Totvs Combo Labs\">\n *   <file name=\"sample-thf-combo-labs/sample-thf-combo-labs.component.html\"> </file>\n *   <file name=\"sample-thf-combo-labs/sample-thf-combo-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-combo-scheduling\" title=\"Totvs Combo - Scheduling\">\n *   <file name=\"sample-thf-combo-scheduling/sample-thf-combo-scheduling.component.html\"> </file>\n *   <file name=\"sample-thf-combo-scheduling/sample-thf-combo-scheduling.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-combo-transfer\" title=\"Totvs Combo - Banking Transfer\">\n *   <file name=\"sample-thf-combo-transfer/sample-thf-combo-transfer.component.html\"> </file>\n *   <file name=\"sample-thf-combo-transfer/sample-thf-combo-transfer.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-combo-heroes\" title=\"Totvs Combo - Heroes\">\n *   <file name=\"sample-thf-combo-heroes/sample-thf-combo-heroes.component.html\"> </file>\n *   <file name=\"sample-thf-combo-heroes/sample-thf-combo-heroes.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-combo-heroes-reactive-form\" title=\"Totvs Combo - Heroes Reactive Form\">\n *   <file name=\"sample-thf-combo-heroes-reactive-form/sample-thf-combo-heroes-reactive-form.component.html\"> </file>\n *   <file name=\"sample-thf-combo-heroes-reactive-form/sample-thf-combo-heroes-reactive-form.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-combo-hotels\" title=\"Totvs Combo - Booking Hotel\">\n *   <file name=\"sample-thf-combo-hotels/sample-thf-combo-hotels.component.html\"> </file>\n *   <file name=\"sample-thf-combo-hotels/sample-thf-combo-hotels.component.ts\"> </file>\n *   <file name=\"sample-thf-combo-hotels/sample-thf-combo-hotels.service.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-combo',\n  templateUrl: './thf-combo.component.html',\n  providers: [\n    ThfComboFilterService,\n    ThfControlPositionService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ThfComboComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => ThfComboComponent),\n      multi: true,\n    }\n  ]\n})\nexport class ThfComboComponent extends ThfComboBaseComponent implements DoCheck, OnDestroy {\n\n  private _isServerSearching: boolean = false;\n\n  comboIcon: string = 'thf-icon-arrow-down';\n  comboOpen: boolean = false;\n  differ: any;\n  isProcessingGetObjectByValue: boolean = false;\n  scrollTop = 0;\n  service: ThfComboFilterService;\n  shouldMarkLetters: boolean = true;\n\n  private clickoutListener: () => void;\n  private eventResizeListener: () => void;\n\n  private filterSubscription: Subscription;\n  private getSubscription: Subscription;\n\n  @ViewChild('containerElement', { read: ElementRef, static: false }) containerElement: ElementRef;\n  @ViewChild('contentElement', { read: ElementRef, static: false }) contentElement: ElementRef;\n  @ViewChild('iconArrow', { read: ElementRef, static: true }) iconElement: ElementRef;\n  @ViewChild('inputElement', { read: ElementRef, static: true }) inputElement: ElementRef;\n\n  constructor(\n    public element: ElementRef,\n    public differs: IterableDiffers,\n    public defaultService: ThfComboFilterService,\n    public renderer: Renderer2,\n    private changeDetector: ChangeDetectorRef,\n    private controlPosition: ThfControlPositionService,\n    private sanitized: DomSanitizer) {\n\n    super();\n\n    this.differ = differs.find([]).create(null);\n  }\n\n  set isServerSearching(value: boolean) {\n    if (value) {\n      this._isServerSearching = value;\n\n      this.changeDetector.detectChanges();\n\n      this.setContainerPosition();\n      this.initializeListeners();\n    } else {\n      this._isServerSearching = value;\n\n      this.removeListeners();\n    }\n  }\n\n  get isServerSearching() {\n    return this._isServerSearching;\n  }\n\n  ngDoCheck() {\n    const change = this.differ.diff(this.options);\n    if (change) {\n      this.validAndSortOptions();\n      removeDuplicatedOptions(this.options);\n    }\n  }\n\n  ngOnDestroy() {\n    this.removeListeners();\n\n    if (this.filterSubscription) {\n      this.filterSubscription.unsubscribe();\n    }\n\n    if (this.getSubscription) {\n      this.getSubscription.unsubscribe();\n    }\n  }\n\n  onKeyDown(event?: any) {\n    const key = event.keyCode;\n    const inputValue = event.target.value;\n\n    // busca um registro quando acionar o tab\n    if (this.service && key === ThfKeyCodeEnum.tab && inputValue) {\n      this.controlComboVisibility(false);\n      return this.getObjectByValue(inputValue);\n    }\n\n    // Teclas \"up\" e \"down\"\n    if (key === ThfKeyCodeEnum.arrowUp || key === ThfKeyCodeEnum.arrowDown) {\n      event.preventDefault();\n\n      if (this.comboOpen) {\n        if (key === ThfKeyCodeEnum.arrowUp) {\n          this.selectPreviousOption();\n        } else {\n          this.selectNextOption();\n        }\n      }\n\n      this.controlComboVisibility(true);\n      this.isFiltering = this.changeOnEnter ? this.isFiltering : false;\n      this.shouldMarkLetters = this.changeOnEnter ? this.shouldMarkLetters : false;\n      return;\n    }\n\n    // Teclas \"tab\" ou \"esc\"\n    if (key === ThfKeyCodeEnum.tab || key === ThfKeyCodeEnum.esc) {\n\n      if (key === ThfKeyCodeEnum.esc && this.comboOpen) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      this.controlComboVisibility(false);\n      this.verifyValidOption();\n\n      if (!this.service) {\n        // caso for changeOnEnter e nao ter selectedValue deve limpar o selectedView para reinicia-lo.\n        this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;\n\n        this.updateComboList();\n      }\n\n      return;\n    }\n\n    // Tecla \"enter\"\n    if (key === ThfKeyCodeEnum.enter && this.selectedView && this.comboOpen) {\n      const isUpdateModel = (this.selectedView.value !== this.selectedValue) || (inputValue !== this.selectedView.label);\n\n      this.controlComboVisibility(false);\n\n      this.updateSelectedValue(this.selectedView, isUpdateModel);\n      this.isFiltering = false;\n\n      this.updateComboList();\n      return;\n    }\n\n    if (key === ThfKeyCodeEnum.enter) {\n      this.controlComboVisibility(true);\n    }\n  }\n\n  onKeyUp(event?: any) {\n    const key = event.keyCode || event.which;\n    const inputValue = event.target.value;\n\n    const isValidKey = (key !== ThfKeyCodeEnum.arrowUp && key !== ThfKeyCodeEnum.arrowDown && key !== ThfKeyCodeEnum.enter);\n\n    if (isValidKey) {\n\n      if (inputValue) {\n        if (!this.service && this.previousSearchValue !== inputValue) {\n          this.shouldMarkLetters = true;\n          this.isFiltering = true;\n          this.searchForLabel(inputValue, this.options, this.filterMode);\n        }\n\n      } else {\n        // quando apagar rapido o campo e conter serviÃ§o, valor, nÃ£o disparava o keyup observable\n        // necessario este tratamento para retornar a lista 'default'.\n        const useDefaultOptionsService = this.service && this.selectedValue && this.selectedOption.label === this.previousSearchValue;\n\n        this.updateSelectedValue(null);\n\n        if (!this.service) {\n          this.updateComboList();\n        } else if (useDefaultOptionsService) {\n          this.updateComboList([...this.cacheOptions]);\n        }\n\n        this.isFiltering = false;\n      }\n\n      // caso o valor pesquisado for diferente do anterior deve abrir o combo\n      if (this.previousSearchValue !== inputValue) {\n        this.changeDetector.detectChanges();\n\n        this.controlComboVisibility(true);\n      }\n\n    }\n\n    this.previousSearchValue = inputValue;\n  }\n\n  initInputObservable() {\n    if (this.service) {\n      const keyupObservable = fromEvent(this.inputElement.nativeElement, 'keyup')\n                                .pipe(\n                                  filter((e: any) => this.isValidCharacterToSearch(e.keyCode)),\n                                  map((e: any) => e.currentTarget.value),\n                                  distinctUntilChanged(),\n                                  tap(() => {\n                                    this.shouldMarkLetters = false;\n                                  }),\n                                  debounceTime(this.debounceTime)\n                                );\n\n      this.keyupSubscribe = keyupObservable.subscribe(value => {\n        if (value.length >= this.filterMinlength || !value) {\n          this.controlApplyFilter(value);\n        }\n      });\n    }\n  }\n\n  controlApplyFilter(value) {\n    if (!this.isProcessingGetObjectByValue && (!this.selectedOption || value !== this.selectedOption.label)) {\n      this.applyFilter(value);\n    }\n  }\n\n  applyFilter(value: string) {\n    this.controlComboVisibility(false);\n    this.isServerSearching = true;\n\n    const param = { property: this.fieldLabel, value };\n\n    this.filterSubscription = this.service.getFilteredData(param, this.filterParams)\n      .subscribe(items => this.setOptionsByApplyFilter(value, items));\n  }\n\n  setOptionsByApplyFilter(value, items) {\n    this.shouldMarkLetters = true;\n    this.isServerSearching = false;\n    this.options = items;\n\n    this.searchForLabel(value, items, this.filterMode);\n\n    this.changeDetector.detectChanges();\n\n    this.controlComboVisibility(true);\n\n    if (this.isFirstFilter) {\n      this.isFirstFilter = !this.isFirstFilter;\n\n      this.cacheOptions = this.options;\n    }\n  }\n\n  getObjectByValue(value) {\n    if (!this.selectedValue) {\n      this.isProcessingGetObjectByValue = true;\n\n      this.getSubscription = this.service.getObjectByValue(value, this.filterParams)\n        .subscribe(item => this.updateOptionByFilteredValue(item));\n    }\n  }\n\n  updateOptionByFilteredValue(item) {\n    if (item) {\n      this.options = [item];\n      this.onOptionClick(item);\n    } else {\n      this.updateSelectedValue(null);\n    }\n\n    setTimeout(() => { this.isProcessingGetObjectByValue = false; }, this.debounceTime);\n  }\n\n  selectPreviousOption() {\n    const currentViewValue = this.selectedView && this.selectedView.value;\n\n    if (currentViewValue) {\n      const nextOption = this.getNextOption(currentViewValue, this.visibleOptions, true);\n\n      this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);\n    } else if (this.visibleOptions.length) {\n      const visibleOption = this.visibleOptions[this.visibleOptions.length - 1];\n\n      this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);\n    }\n  }\n\n  selectNextOption() {\n    const currentViewValue = this.selectedView && this.selectedView.value;\n\n    if (currentViewValue) {\n      const nextOption = this.getNextOption(currentViewValue, this.visibleOptions);\n\n      this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);\n    } else if (this.visibleOptions.length) {\n      const index = this.changeOnEnter ? 1 : 0;\n\n      const visibleOption = this.visibleOptions[index];\n\n      this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);\n    }\n  }\n\n  toggleComboVisibility(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    if (this.service && !this.disabledInitFilter) {\n      this.applyFilterInFirstClick();\n    }\n\n    this.controlComboVisibility(!this.comboOpen);\n  }\n\n  applyFilterInFirstClick() {\n    if (this.isFirstFilter && !this.selectedValue) {\n      this.applyFilter('');\n    }\n  }\n\n  controlComboVisibility(toOpen: boolean) {\n    toOpen ? this.open() : this.close();\n  }\n\n  onOptionClick(option: ThfComboOption) {\n    const inputValue = this.getInputValue();\n    const isUpdateModel = (option.value !== this.selectedValue) || !!(this.selectedView && inputValue !== this.selectedView.label);\n\n    this.updateSelectedValue(option, isUpdateModel);\n    this.controlComboVisibility(false);\n    this.updateComboList([{ ...this.selectedView }]);\n\n    this.previousSearchValue = this.selectedView.label;\n  }\n\n  scrollTo(index) {\n    const scrollTop = (index <= 2) ? 0 : (index * 44) - 88;\n\n    this.setScrollTop(scrollTop);\n  }\n\n  getInputValue() {\n    return this.inputElement.nativeElement.value;\n  }\n\n  setInputValue(value: string): void {\n    this.inputElement.nativeElement.value = value;\n  }\n\n  wasClickedOnToggle(event: MouseEvent): void {\n    if (this.comboOpen &&\n        !this.inputElement.nativeElement.contains(event.target) &&\n        !this.iconElement.nativeElement.contains(event.target) &&\n        (!this.contentElement || !this.contentElement.nativeElement.contains(event.target))) {\n      // Esconde Content do Combo quando for clicado fora\n      this.controlComboVisibility(false);\n\n      this.verifyValidOption();\n\n      // caso for changeOnEnter deve limpar o selectedView para reinicia-lo\n      this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;\n\n      this.updateComboList();\n    } else {\n      if (this.service && !this.getInputValue() && !this.isFirstFilter) {\n        this.applyFilter('');\n      }\n    }\n  }\n\n  getLabelFormatted(label): SafeHtml {\n    let format = label;\n\n    if (this.isFiltering ||\n      (this.service && this.getInputValue() && !this.compareObjects(this.cacheOptions, this.visibleOptions) && this.shouldMarkLetters)) {\n\n      const labelInput = this.getInputValue().toString().toLowerCase();\n      const labelLowerCase = label.toLowerCase();\n\n      const openTagBold = '<span class=\"thf-font-text-large-bold\">';\n      const closeTagBold = '</span>';\n\n      let startString;\n      let middleString;\n      let endString;\n\n      switch (this.filterMode) {\n        case ThfComboFilterMode.startsWith:\n        case ThfComboFilterMode.contains:\n          startString = label.substring(0, labelLowerCase.indexOf(labelInput));\n          middleString = label.substring(labelLowerCase.indexOf(labelInput),\n            labelLowerCase.indexOf(labelInput) + labelInput.length);\n          endString = label.substring(labelLowerCase.indexOf(labelInput) + labelInput.length);\n\n          format = startString + openTagBold + middleString + closeTagBold + endString;\n          break;\n        case ThfComboFilterMode.endsWith:\n          startString = label.substring(0, labelLowerCase.lastIndexOf(labelInput));\n          middleString = label.substring(labelLowerCase.lastIndexOf(labelInput));\n\n          format = startString + openTagBold + middleString + closeTagBold;\n          break;\n      }\n    }\n\n    return this.safeHtml(format);\n  }\n\n  safeHtml(value): SafeHtml {\n    return this.sanitized.bypassSecurityTrustHtml(value);\n  }\n\n  isValidCharacterToSearch(keyCode) {\n    return (keyCode !== 9 && // tab\n            keyCode !== 13 && // entet\n            keyCode !== 16 && // shift\n            keyCode !== 17 && // ctrl\n            keyCode !== 18 && // alt\n            keyCode !== 20 && // capslock\n            keyCode !== 27 && // esc\n            keyCode !== 37 && // seta\n            keyCode !== 38 && // seta\n            keyCode !== 39 && // seta\n            keyCode !== 40 && // seta\n            keyCode !== 93); // windows menu\n  }\n\n  searchOnEnter(value: string) {\n    if (this.service && !this.selectedView && value.length >= this.filterMinlength) {\n      this.controlApplyFilter(value);\n    }\n  }\n\n  private adjustContainerPosition() {\n    this.controlPosition.adjustPosition(thfComboContainerPositionDefault);\n  }\n\n  private close() {\n    this.comboOpen = false;\n\n    this.changeDetector.detectChanges();\n\n    this.comboIcon = 'thf-icon-arrow-down';\n\n    this.removeListeners();\n\n    this.isFiltering = false;\n  }\n\n  private initializeListeners() {\n    this.removeListeners();\n\n    this.clickoutListener = this.renderer.listen('document', 'click', (event: MouseEvent) => {\n      this.wasClickedOnToggle(event);\n    });\n\n    this.eventResizeListener = this.renderer.listen('window', 'resize', () => {\n      // timeout necessario pois a animaÃ§Ã£o do thf-menu impacta no ajuste da posiÃ§Ã£o do container.\n      setTimeout(() => this.adjustContainerPosition(), 250);\n    });\n\n    window.addEventListener('scroll', this.onScroll, true);\n  }\n\n  private onScroll = (): void => {\n    this.adjustContainerPosition();\n  }\n\n  private open() {\n    this.comboOpen = true;\n\n    this.changeDetector.detectChanges();\n\n    this.comboIcon = 'thf-icon-arrow-up';\n\n    this.initializeListeners();\n\n    this.inputElement.nativeElement.focus();\n    this.scrollTo(this.getIndexSelectedView());\n\n    this.setContainerPosition();\n  }\n\n  private removeListeners() {\n    if (this.clickoutListener) {\n      this.clickoutListener();\n    }\n\n    if (this.eventResizeListener) {\n      this.eventResizeListener();\n    }\n\n    window.removeEventListener('scroll', this.onScroll, true);\n  }\n\n  private setContainerPosition() {\n    this.controlPosition.setElements(\n      this.containerElement.nativeElement,\n      thfComboContainerOffset,\n      this.inputElement,\n      ['top', 'bottom'],\n      true\n    );\n\n    this.adjustContainerPosition();\n  }\n\n  private setScrollTop(scrollTop: number) {\n    if (this.contentElement) {\n      this.contentElement.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n}\n","/**\n * Para usar o thf-mask Ã© preciso instanciar esta classe passando a mÃ¡scara como\n * primeiro parÃ¢metro, e no segundo parÃ¢metro, deve se informado true, caso queira\n * que o model seja formatado ou false para o que o model seja limpo.\n */\nexport class ThfMask {\n  mask: string = '';\n  formatModel: boolean = false;\n  // controle de posiÃ§Ã£o\n  initialPosition: number = 0;\n  finalPosition: number = 0;\n\n  pattern: string = '';\n  get getPattern(): string {\n    return this.pattern;\n  }\n\n  valueToInput: string;\n  get getValueToInput(): string {\n    return this.valueToInput;\n  }\n  set setValueToInput(value: string) {\n    this.valueToInput = value;\n  }\n\n  valueToModel: string;\n  get getValueToModel(): string {\n    return this.valueToModel;\n  }\n  set setValueToModel(value: string) {\n    this.valueToModel = value;\n  }\n\n  formattingEnds: boolean;\n\n  constructor(mask: string, formatModel: boolean) {\n    this.mask = mask;\n    this.formatModel = formatModel;\n    this.pattern = this.getRegexFromMask(mask);\n  }\n\n  keyup($event: any) {\n    if (this.mask) {\n      const value = $event.target.value;\n      // formata o valor quando for colado com control + v e reposiciona o cursor\n      if ($event.keyCode === 17 || $event.keyCode === 91) {\n        $event.target.value = this.controlFormatting(value);\n        this.resetPositions($event);\n      }\n\n      $event.preventDefault();\n\n      switch ($event.keyCode) {\n        case 37: // seta esquerda\n          if (this.initialPosition > 0) {\n            this.initialPosition--;\n          }\n          this.setPositionNotShiftKey($event);\n          this.setSelectionRange($event);\n          break;\n\n        case 39: // seta direita\n          if (this.initialPosition < value.toString().length) {\n            this.initialPosition++;\n          }\n          this.setPositionNotShiftKey($event);\n          this.setSelectionRange($event);\n          break;\n\n        case 35: // end\n          this.finalPosition = value.toString().length;\n          if ($event.shiftKey) {\n            this.setPositions($event);\n          } else {\n            this.initialPosition = this.finalPosition;\n            this.setPositions($event);\n          }\n          break;\n\n        case 36: // HOME\n          if ($event.shiftKey) {\n            this.finalPosition = this.initialPosition;\n            this.initialPosition = 0;\n            this.setPositions($event);\n          } else {\n            this.initialPosition = 0;\n            this.finalPosition = 0;\n            this.setPositions($event);\n          }\n          break;\n      }\n    }\n  }\n\n  setPositionNotShiftKey($event: any) {\n    if (!$event.shiftKey) {\n      this.finalPosition = this.initialPosition;\n    }\n  }\n\n  setSelectionRange($event: any) {\n    if (this.initialPosition > this.finalPosition) {\n      $event.target.setSelectionRange(this.finalPosition, this.initialPosition);\n    } else {\n      $event.target.setSelectionRange(this.initialPosition, this.finalPosition);\n    }\n  }\n\n  keydown($event: any) {\n    if (this.mask) {\n      let value: string = $event.target.value;\n      if ($event.keyCode === 9) {\n        return;\n      }\n\n      if (!$event.ctrlKey && !$event.metaKey) {\n        $event.preventDefault();\n      }\n\n      // NÃ£o faz nada quando for digitado CTRL ou COMMAND e V\n      // JÃ¡ estÃ¡ sendo tratado no evento keyup\n      if ($event.ctrlKey || $event.metaKey && ($event.keyCode !== 86) ||\n        ($event.keyCode >= 37 && $event.keyCode <= 40) || $event.keyCode === 16 || $event.keyCode === 9 ) {\n        return;\n      }\n\n      // Valida a tecla digitada\n      if (this.isKeyValid($event.keyCode)) {\n        if (this.finalPosition === null) {\n          this.finalPosition = this.initialPosition;\n        }\n        this.revertPositions(this.initialPosition, this.finalPosition);\n\n        switch ($event.keyCode) {\n          case 8: // backspace\n            this.getPosition($event);\n            if (this.initialPosition < 0) {\n              this.initialPosition = 0;\n              this.setPositions($event);\n            }\n            if (this.initialPosition === this.finalPosition) {\n              this.checkMaskBefore($event, -1);\n              if (this.initialPosition !== 0) {\n                value = value.slice(0, this.initialPosition - 1) + value.slice(this.finalPosition);\n                value = this.controlFormatting(value);\n                $event.target.value = value;\n                this.changePosition($event , -1);\n                this.checkMaskBefore($event, -1);\n                this.setPositions($event);\n                this.resetPositions($event);\n              }\n            } else {\n              this.clearRangeSelection(value, $event, true);\n            }\n            this.setPositions($event);\n            break;\n\n          case 46: // delete\n            this.getPosition($event);\n            if (this.initialPosition === this.finalPosition) {\n              this.checkMaskAfter($event, 1);\n              value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition + 1);\n              value = this.controlFormatting(value);\n              $event.target.value = value;\n              this.setPositions($event);\n              this.resetPositions($event);\n            } else {\n              this.clearRangeSelection(value, $event, false);\n            }\n            this.setPositions($event);\n            break;\n\n          default: // qualquer outra tecla vÃ¡lida\n            value = value.slice(0, this.initialPosition) + $event.key + value.slice(this.finalPosition);\n            value = this.controlFormatting(value);\n            $event.target.value = value;\n            this.changePosition($event, 1);\n            this.checkMaskBefore($event, 1);\n            this.setPositions($event);\n            this.resetPositions($event);\n            this.setPositions($event);\n        }\n      }\n    }\n  }\n\n  clearRangeSelection(value: string, $event: any, isBackspace: boolean) {\n    value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition);\n    value = this.controlFormatting(value);\n    $event.target.value = value;\n\n    if (isBackspace) {\n      this.checkMaskBefore($event, -1);\n    }\n\n    this.setPositions($event);\n    this.resetPositions($event);\n  }\n\n  // passa a posiÃ§Ã£o do click para o controle de posiÃ§Ã£o\n  click($event: any) {\n    this.initialPosition = $event.target.selectionStart;\n    this.finalPosition = $event.target.selectionEnd;\n  }\n\n  blur($event: any) {\n    // Se houver algum valor definido na mÃ¡scara\n    if (this.mask) {\n      // pega o valor do campo, formata e passa para o model\n      let value = $event.target.value;\n      value = this.controlFormatting(value);\n      $event.target.value = value;\n    }\n  }\n\n  revertPositions(initialPosition: number, finalPosition: number) {\n    if (initialPosition > finalPosition) {\n      // inverte o controle de posiÃ§Ã£o caso o inicial esteja maior que o final\n      let tempPosition;\n      tempPosition = initialPosition;\n      this.initialPosition = finalPosition;\n      this.finalPosition = tempPosition;\n    }\n  }\n\n  // reseta o controle de posiÃ§Ã£o\n  resetPositions($event: any) {\n    this.initialPosition = $event.target.selectionStart;\n    this.finalPosition = this.initialPosition;\n  }\n\n  // posiciona o cursor de acordo com o controle de posiÃ§Ã£o\n  setPositions($event: any) {\n    $event.target.setSelectionRange(this.initialPosition, this.finalPosition);\n  }\n\n  // muda a posiÃ§Ã£o do cursor e atualiza o controle de posiÃ§Ã£o\n  changePosition($event: any, value: number) {\n    this.initialPosition = this.initialPosition + value;\n    this.finalPosition = this.finalPosition + value;\n    this.setPositions($event);\n  }\n\n  getPosition($event: any) {\n    this.initialPosition = $event.target.selectionStart;\n    this.finalPosition = $event.target.selectionEnd;\n    this.setPositions($event);\n  }\n\n  // MÃ©todo responsÃ¡vel por controlar a formataÃ§Ã£o e aplicar todas as mÃ¡scara possÃ­veis\n  // quando houver valores opcionais (?)\n  controlFormatting(value: string) {\n    // Se o valor for vazio, retorna vazio\n    if (!value) {\n      this.valueToInput = '';\n      this.valueToModel = '';\n      return '';\n    }\n    let valueProcessed;\n    let maskTmp = this.mask;\n\n    // Array que serÃ¡ usado para armazenar todas as mÃ¡scaras possÃ­veis para\n    // quando houver um valor opcional (?)\n    const arrMasks: Array<any> = [];\n    let contMasks = 0;\n\n    // Enquanto houver algum 9? na mÃ¡scara\n    while (this.hasOptionalNumber(maskTmp)) {\n      arrMasks.push(maskTmp);\n      maskTmp = this.replaceOptionalNumber(maskTmp);\n    }\n    arrMasks.push(maskTmp);\n\n    // Inverte o array\n    arrMasks.reverse();\n\n    // Informa que a formataÃ§Ã£o ainda nÃ£o chegou ao fim\n    this.formattingEnds = false;\n\n    while (!this.formattingEnds) {\n      // Seta a formataÃ§Ã£o como terminada\n      // EntÃ£o o mÃ©todo formatValue irÃ¡ setar como nÃ£o terminado caso haja\n      this.formattingEnds = true;\n\n      // Se nÃ£o existe mais nenhuma mÃ¡scara possÃ­vel, entÃ£o encerra a formataÃ§Ã£o\n      if (!arrMasks[contMasks]) {\n        break;\n      }\n\n      // Chama a formataÃ§Ã£o passando a mÃ¡scara e o valor\n      valueProcessed = this.formatValue(value, arrMasks[contMasks]);\n      contMasks++;\n    }\n\n    return valueProcessed;\n  }\n\n  // FunÃ§Ã£o que formata a mÃ¡scara com o valor passado\n  formatValue(value: string, mask: string) {\n\n    // Remove as marcas de valor opciona (?)\n    mask = mask.replace(/\\?/g, '');\n\n    // Substitui todos os caracteres que nÃ£o sÃ£o fixos da mÃ¡scara por _\n    const guide = mask.replace(this.listValidKeys(), '_');\n\n    // Contador usado para percorrer o guide\n    let contGuide: number = 0;\n\n    // String final formatada\n    let valueProcessed: string = '';\n\n    // Remove do valor todos os caracteres fixos como ()/-+\n    value = this.removeFormattingValue(value);\n\n    // Percorre todo o valor e coloca a formataÃ§Ã£o de acordo com a mÃ¡scara\n    for (let i = 0; i < value.length; i++) {\n      const charValue = value[i];\n\n      // Se o guide acabou, seta a formataÃ§Ã£o como nÃ£o terminada para que o mÃ©todo controlFormatting\n      // tente formatar com outra possÃ­vel mÃ¡scara\n      if (!guide[contGuide]) {\n        this.formattingEnds = false;\n        break;\n      }\n\n      // Percorre o Guide enquanto tem caracteres fixos\n      while (this.isFixedCharacterGuide(guide[contGuide]) && guide[contGuide]) {\n        valueProcessed += guide[contGuide];\n        contGuide++;\n      }\n\n      // Ã um caracter vÃ¡lido de acordo com a mÃ¡scara\n      if (this.isKeyValidMask(charValue, mask[contGuide])) {\n        valueProcessed += charValue;\n        contGuide++;\n      } else {\n        // Se nÃ£o Ã© um caracter vÃ¡lido, deve interromper.\n        break;\n      }\n    }\n\n    if (this.formatModel) {\n      this.valueToInput = valueProcessed;\n      this.valueToModel = valueProcessed;\n    } else {\n      this.valueToInput = valueProcessed;\n      this.valueToModel = this.removeFormattingValue(valueProcessed);\n    }\n    return valueProcessed;\n  }\n  // verifica se tem algum caracter de mascara antes do cursor\n  checkMaskBefore($event: any, position: number) {\n    if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition - 1))) {\n      this.changePosition($event, position);\n      this.checkMaskBefore($event, position);\n    }\n  }\n\n  // verifica se tem algum caracter de mascara depois do cursor\n  checkMaskAfter($event: any, position: number) {\n    if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition))) {\n      this.changePosition($event, position);\n      this.checkMaskAfter($event, position);\n    }\n  }\n\n  // Retorna a mÃ¡scara sem um valor opcional\n  replaceOptionalNumber(mask: string) {\n    let i = 9;\n    while (i >= 0) {\n      if (mask.indexOf(i + '?') > -1) {\n        return mask.replace(i + '?', '');\n      }\n      i--;\n    }\n    return mask;\n  }\n\n  // Verifica se contÃ©m caracteres permitidos somente na mÃ¡scara \\/() +-\n  isFixedCharacterGuide(key: any) {\n    return this.testRegex(key, this.getFixedCharacterGuide());\n  }\n\n  // Retorna caracteres permitidos somente na mÃ¡scara \\/() +-\n  getFixedCharacterGuide() {\n    return /[\\\\\\/() +-.\\:]/g;\n  }\n\n  // Caracteres permitidos de serem digitados\n  listValidKeys() {\n    return /[a-zA-Z0-9]/g;\n  }\n\n  // Se Ã© um dÃ­gito vÃ¡lido\n  isKeyValid(keyCode: any) {\n    return this.isKeyCodeValid(keyCode);\n  }\n\n  // Verifica se a tecla digitada Ã© permitida\n  // Permite apenas nÃºmeros, letras, backspace e del\n  isKeyCodeValid(keyCode: number) {\n    return (\n      (keyCode >= 48 && keyCode <= 57) ||\n      (keyCode >= 65 && keyCode <= 90) ||\n      (keyCode >= 96 && keyCode <= 105) ||\n      (keyCode === 8) || keyCode === 9 ||\n      (keyCode === 46)\n    );\n  }\n\n  // Se estÃ¡ de acordo com a mÃ¡scara\n  isKeyValidMask(key: any, keyMask: any) {\n    return this.testRegex(key, this.replaceMask(keyMask));\n  }\n\n  // Retorna se a chave foi aprovada pela expressÃ£o regular\n  testRegex(key: any, regex: any) {\n    return regex.test(key);\n  }\n\n  // Remove a formatacÃ£o do valor\n  // Ã possÃ­vel ser melhorado para remover pontualmente os caracteres fixos de acordo com a mÃ¡scara\n  removeFormattingValue(value: string) {\n    return value.replace(this.getFixedCharacterGuide(), '');\n  }\n\n  // Verifica se contÃ©m valor opcional na mÃ¡scara 0-9?\n  hasOptionalNumber(mask: string) {\n    return mask.match(/\\d\\?/g);\n  }\n\n  // Retorna a expressÃ£o regular correspondente ao comando passado\n  replaceMask(char: string) {\n    let regex = /./;\n    switch (char) {\n      case '0': regex = /[0]/;\n                break;\n      case '1': regex = /[0-1]/;\n                break;\n      case '2': regex = /[0-2]/;\n                break;\n      case '3': regex = /[0-3]/;\n                break;\n      case '4': regex = /[0-4]/;\n                break;\n      case '5': regex = /[0-5]/;\n                break;\n      case '6': regex = /[0-6]/;\n                break;\n      case '7': regex = /[0-7]/;\n                break;\n      case '8': regex = /[0-8]/;\n                break;\n      case '9': regex = /[0-9]/;\n                break;\n      case ' ': regex = /\\s/;\n                break;\n      case '@': regex = /[a-zA-Z]/;\n                break;\n      case 'w': regex = /[a-zA-Z0-9]/;\n                break;\n    }\n    return regex;\n  }\n\n  getRegexFromMask(mask: string) {\n    if (mask) {\n      let pattern;\n      if (this.formatModel) {\n        pattern = mask.replace(/\\\\/g, '\\\\\\\\');\n        pattern = pattern.replace(/\\+/g, '\\\\+');\n        pattern = pattern.replace(/\\./g, '\\\\.');\n        pattern = pattern.replace(/-/g, '-');\n        pattern = pattern.replace(/\\(/g, '\\\\(');\n        pattern = pattern.replace(/\\)/g, '\\\\)');\n        pattern = pattern.replace(/\\//g, '\\\\/');\n        pattern = pattern.replace(/\\s/g, '\\\\s');\n        pattern = pattern.replace(/:/g, '\\\\:');\n        pattern = pattern.replace(/\\@(?!\\s)/g, '\\\\w');\n        pattern = pattern.replace(/\\d/g, '\\\\w');\n      } else {\n        pattern = mask.replace(/\\\\/g, '');\n        pattern = pattern.replace(/\\+/g, '');\n        pattern = pattern.replace(/\\./g, '');\n        pattern = pattern.replace(/-/g, '');\n        pattern = pattern.replace(/\\(/g, '');\n        pattern = pattern.replace(/\\)/g, '');\n        pattern = pattern.replace(/\\//g, '');\n        pattern = pattern.replace(/\\s/g, '');\n        pattern = pattern.replace(/:/g, '');\n        pattern = pattern.replace(/\\@/g, '\\\\w');\n        pattern = pattern.replace(/\\d/g, '\\\\w');\n      }\n      return pattern;\n    } else {\n      return null;\n    }\n  }\n\n}\n","import { EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\n\nimport { convertDateToISODate, convertDateToISOExtended, convertIsoToDate, convertToBoolean, formatYear,\n  getShortBrowserLanguage, isTypeof, setYearFrom0To100, validateDateRange } from '../../../utils/util';\nimport { dateFailed, requiredFailed } from './../validators';\nimport { ThfMask } from '../thf-input/thf-mask';\n\nconst thfDatepickerFormatDefault: string = 'dd/mm/yyyy';\n\n/**\n * @description\n *\n * O `thf-datepicker` Ã© um componente especÃ­fico para manipulaÃ§Ã£o de datas permitindo a digitaÃ§Ã£o e / ou seleÃ§Ã£o.\n *\n * O formato de exibiÃ§Ã£o da data, ou seja, o formato que Ã© apresentado ao usuÃ¡rio Ã© o dd/mm/yyyy,\n * mas podem ser definidos outros padrÃµes (veja mais na propriedade `t-format`).\n *\n * O idioma padrÃ£o do calendÃ¡rio serÃ¡ exibido de acordo com o navegador, caso tenha necessidade de alterar\n * use a propriedade `t-locale`.\n *\n * O datepicker aceita trÃªs formatos de data: o E8601DZw (yyyy-mm-ddThh:mm:ss+|-hh:mm), o E8601DAw (yyyy-mm-dd) e o\n * Date padrÃ£o do Javascript.\n *\n * > O formato de saÃ­da do *model* se ajusta conforme o formato de entrada, veja abaixo:\n *\n * - Formato de entrada e saÃ­da (E8601DZw) - `'2017-11-28T00:00:00-02:00'`;\n *\n * - Formato de entrada e saÃ­da (E8601DAw) - `'2017-11-28'`;\n *\n * - Formato de entrada (Date) - `new Date(2017, 10, 28)` e saÃ­da (E8601DAw) - `'2017-11-28'`;\n *\n * **Importante:**\n *\n * - Para utilizar datas com ano inferior a 100, verificar o comportamento do [`new Date`](https://www.w3schools.com/js/js_dates.asp)\n * e utilizar o mÃ©todo [`setFullYear`](https://www.w3schools.com/jsref/jsref_setfullyear.asp).\n * - Caso a data esteja invÃ¡lida, o `model` receberÃ¡ **'Data invÃ¡lida'**.\n * - Caso o `input` esteja passando um `[(ngModel)]`, mas nÃ£o tenha um `name`, entÃ£o irÃ¡ ocorrer um erro\n * do prÃ³prio Angular (`[ngModelOptions]=\"{standalone: true}\"`).\n *\n * Exemplo:\n *\n * ```\n * <thf-datepicker\n *   [(ngModel)]=\"pessoa.nome\"\n *   [ngModelOptions]=\"{standalone: true}\"\n * </thf-datepicker>\n * ```\n *\n * > NÃ£o esqueÃ§a de importar o `FormsModule` em seu mÃ³dulo, tal como para utilizar o `input default`.\n */\nexport abstract class ThfDatepickerBaseComponent implements ControlValueAccessor, OnInit, Validator {\n\n  private _format?: string = thfDatepickerFormatDefault;\n  private _maxDate: Date;\n  private _minDate: Date;\n  private _placeholder?: string = '';\n\n  protected date: Date;\n  protected firstStart = true;\n  protected hour: string = 'T00:00:01-00:00';\n  protected isExtendedISO: boolean = false;\n  protected objMask: any;\n  protected onChangeModel: any = null;\n  protected onTouchedModel: any = null;\n  protected validatorChange: any;\n\n  /* Nome do componente datepicker. */\n  @Input('name') name: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Mensagem que aparecerÃ¡ enquanto o campo nÃ£o estiver preenchido.\n   */\n  @Input('t-placeholder') set placeholder(placeholder: string) {\n    this._placeholder = isTypeof(placeholder, 'string') ? placeholder : '';\n  }\n\n  get placeholder() {\n    return this._placeholder;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se a indicaÃ§Ã£o de campo opcional serÃ¡ exibida.\n   *\n   * > NÃ£o serÃ¡ exibida a indicaÃ§Ã£o se:\n   * - O campo conter `t-required`;\n   * - NÃ£o possuir `t-help` e/ou `t-label`.\n   *\n   * @default `false`\n   */\n  @Input('t-optional') optional: boolean;\n\n  /** Desabilita o campo. */\n  disabled?: boolean = false;\n  @Input('t-disabled') set setDisabled(disabled: string) {\n    this.disabled = disabled === '' ? true : convertToBoolean(disabled);\n\n    this.validateModel(convertDateToISOExtended(this.date, this.hour));\n  }\n\n  /** Torna o elemento somente leitura. */\n  readonly?: boolean = false;\n  @Input('t-readonly') set setReadonly(readonly: string) {\n    this.readonly = readonly === '' ? true : convertToBoolean(readonly);\n  }\n\n  /** Faz com que o campo seja obrigatÃ³rio. */\n  required?: boolean = false;\n  @Input('t-required') set setRequired(required: string) {\n    this.required = required === '' ? true : convertToBoolean(required);\n\n    this.validateModel(convertDateToISOExtended(this.date, this.hour));\n  }\n\n  /** Aplica foco ao elemento ao ser iniciado. */\n  focus?: boolean = false;\n  @Input('t-focus') set setFocus(focus: string) {\n    this.focus = focus === '' ? true : convertToBoolean(focus);\n  }\n\n  /** Habilita aÃ§Ã£o para limpar o campo. */\n  clean?: boolean = false;\n  @Input('t-clean') set setClean(clean: string) {\n    this.clean = clean === '' ? true : convertToBoolean(clean);\n  }\n\n  /**\n   * Mensagem apresentada quando a data for invÃ¡lida ou fora do perÃ­odo.\n   *\n   * > Esta mensagem nÃ£o Ã© apresentada quando o campo estiver vazio, mesmo que ele seja obrigatÃ³rio.\n   */\n  @Input('t-error-pattern') errorPattern?: string = '';\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define uma data mÃ­nima para o `thf-datepicker`.\n   */\n  @Input('t-min-date') set minDate(value: string | Date) {\n    if (value instanceof Date) {\n      const year = value.getFullYear();\n\n      const date = new Date(year, value.getMonth(), value.getDate(), 0, 0, 0);\n      setYearFrom0To100(date, year);\n\n      this._minDate = date;\n    } else {\n      this._minDate = convertIsoToDate(value, true , false);\n    }\n\n    this.validateModel(convertDateToISOExtended(this.date, this.hour));\n  }\n\n  get minDate() {\n    return this._minDate;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define uma data mÃ¡xima para o `thf-datepicker`.\n   */\n  @Input('t-max-date') set maxDate(value: string | Date) {\n    if (value instanceof Date) {\n      const year = value.getFullYear();\n\n      const date = new Date(year, value.getMonth(), value.getDate(), 23, 59, 59);\n      setYearFrom0To100(date, year);\n\n      this._maxDate = date;\n    } else {\n      this._maxDate = convertIsoToDate(value, false , true);\n    }\n\n    this.validateModel(convertDateToISOExtended(this.date, this.hour));\n  }\n\n  get maxDate() {\n    return this._maxDate;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Formato de exibiÃ§Ã£o da data.\n   *\n   * Valores vÃ¡lidos:\n   *  - `dd/mm/yyyy`\n   *  - `mm/dd/yyyy`\n   *  - `yyyy/mm/dd`\n   *\n   * @default `dd/mm/yyyy`\n   */\n  @Input('t-format') set format(value: string) {\n    if (value) {\n      value = value.toLowerCase();\n      if (value.match(/dd/) && value.match(/mm/) && value.match(/yyyy/)) {\n        this._format = value;\n        this.objMask = this.buildMask();\n        this.refreshValue(this.date);\n        return;\n      }\n    }\n    this._format = thfDatepickerFormatDefault;\n    this.objMask = this.buildMask();\n  }\n\n  get format() {\n    return this._format;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Idioma do Datepicker.\n   *\n   * Valores vÃ¡lidos:\n   *  - `pt`\n   *  - `en`\n   *  - `es`\n   */\n  _locale?: string;\n  @Input('t-locale') set locale(value: string) {\n    if (value) {\n      this._locale = value.length >= 2 ? value : 'pt';\n    } else {\n      this._locale = getShortBrowserLanguage();\n    }\n  }\n  get locale() {\n    return this._locale || getShortBrowserLanguage();\n  }\n\n  /** Evento disparado ao sair do campo. */\n  @Output('t-blur') onblur?: EventEmitter<any> = new EventEmitter<any>();\n\n  /** Evento disparado ao alterar valor do campo. */\n  @Output('t-change') onchange?: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor() { }\n\n  abstract writeValue(value: any): void;\n\n  abstract refreshValue(value: Date): void;\n\n  ngOnInit() {\n    // Classe de mÃ¡scara\n    this.objMask = this.buildMask();\n  }\n\n  // Converte um objeto string em Date\n  getDateFromString(dateString: string) {\n    const day = parseInt(dateString.substring(this.format.indexOf('d'), this.format.indexOf('d') + 2), 10);\n    const month = parseInt(dateString.substring(this.format.indexOf('m'), this.format.indexOf('m') + 2), 10) - 1;\n    const year = parseInt(dateString.substring(this.format.indexOf('y'), this.format.indexOf('y') + 4), 10);\n\n    const date = new Date(year, month, day);\n\n    setYearFrom0To100(date, year);\n\n    return (date.getFullYear() === year && date.getMonth() === month && date.getDate() === day) ? date : null;\n  }\n\n  // Formata a data.\n  formatToDate(value: Date) {\n    let dateFormatted = this.format;\n\n    dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));\n    dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));\n    dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));\n\n    return dateFormatted;\n  }\n\n  // MÃ©todo responsÃ¡vel por controlar o modelo.\n  controlModel(date: Date) {\n    this.date = date;\n    if (date && this.isExtendedISO) {\n      this.callOnChange(convertDateToISOExtended(this.date, this.hour));\n    } else if (date && !this.isExtendedISO) {\n      this.callOnChange(convertDateToISODate(this.date));\n    } else {\n      date === undefined ? this.callOnChange('') : this.callOnChange('Data invÃ¡lida');\n    }\n  }\n\n  // Executa a funÃ§Ã£o onChange\n  callOnChange(value: any, retry: boolean = true) {\n    if (this.onChangeModel) {\n      this.onChangeModel(value);\n    } else if (retry) {\n      setTimeout(() => this.callOnChange(value, false));\n    }\n  }\n\n  // FunÃ§Ã£o implementada do ControlValueAccessor\n  // Usada para interceptar as mudanÃ§as e nÃ£o atualizar automaticamente o Model\n  registerOnChange(func: any): void {\n    this.onChangeModel = func;\n  }\n\n  // FunÃ§Ã£o implementada do ControlValueAccessor\n  // Usada para interceptar as mudanÃ§as e nÃ£o atualizar automaticamente o Model\n  registerOnTouched(func: any): void {\n    this.onTouchedModel = func;\n  }\n\n  registerOnValidatorChange(fn: () => void) {\n    this.validatorChange = fn;\n  }\n\n  protected validateModel(model: any) {\n    if (this.validatorChange) {\n      this.validatorChange(model);\n    }\n  }\n\n  // Retorna um objeto do tipo ThfMask com a mascara configurada.\n  protected buildMask() {\n    let mask = this.format.toUpperCase();\n\n    mask = mask.replace(/DD/g, '99');\n    mask = mask.replace(/MM/g, '99');\n    mask = mask.replace(/YYYY/g, '9999');\n\n    return new ThfMask(mask, true);\n  }\n\n  validate(c: AbstractControl): { [key: string]: any; } {\n    // Verifica se jÃ¡ possui algum error pattern padrÃ£o.\n    this.errorPattern = this.errorPattern !== 'Data invÃ¡lida' && this.errorPattern !== 'Data fora do perÃ­odo' ? this.errorPattern : '';\n\n    if (dateFailed(c.value)) {\n      this.errorPattern = this.errorPattern || 'Data invÃ¡lida';\n\n      return { date: {\n        valid: false,\n      }};\n    }\n\n    if (requiredFailed(this.required, this.disabled, c.value)) {\n      return { required: {\n        valid: false,\n      }};\n    }\n\n    if ((this.date && !validateDateRange(this.date, this._minDate, this._maxDate))) {\n      this.errorPattern = this.errorPattern || 'Data fora do perÃ­odo';\n\n      return { date: {\n        valid: false,\n      }};\n    }\n\n    return null;\n  }\n\n}\n","import { AfterViewInit, Component, ElementRef, forwardRef, HostListener, Input, OnDestroy, Renderer2, ViewChild } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { formatYear, isMobile, setYearFrom0To100 } from '../../../utils/util';\nimport { ThfControlPositionService } from './../../../services/thf-control-position/thf-control-position.service';\n\nimport { ThfCalendarComponent } from './thf-calendar/thf-calendar.component';\nimport { ThfDatepickerBaseComponent } from './thf-datepicker-base.component';\n\nconst thfCalendarContentOffset = 8;\nconst thfCalendarPositionDefault = 'bottom-left';\n\n/**\n * @docsExtends ThfDatepickerBaseComponent\n *\n * @example\n *\n * <example name=\"thf-datepicker-basic\" title=\"Totvs Datepicker Basic\">\n *  <file name=\"sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.html\"> </file>\n *  <file name=\"sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.ts\"> </file>\n *  <file name=\"sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.po.ts\"> </file>\n *  <file name=\"sample-thf-datepicker-basic/sample-thf-datepicker-basic.component.e2e-spec.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-datepicker-labs\" title=\"Totvs Datepicker Labs\">\n *  <file name=\"sample-thf-datepicker-labs/sample-thf-datepicker-labs.component.html\"> </file>\n *  <file name=\"sample-thf-datepicker-labs/sample-thf-datepicker-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-datepicker-airfare\" title=\"Totvs Datepicker - Airfare\">\n *  <file name=\"sample-thf-datepicker-airfare/sample-thf-datepicker-airfare.component.html\"> </file>\n *  <file name=\"sample-thf-datepicker-airfare/sample-thf-datepicker-airfare.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-datepicker-airfare-reactive-form\" title=\"Totvs Datepicker - Airfare Reactive Form\">\n *  <file name=\"sample-thf-datepicker-airfare-reactive-form/sample-thf-datepicker-airfare-reactive-form.component.html\"> </file>\n *  <file name=\"sample-thf-datepicker-airfare-reactive-form/sample-thf-datepicker-airfare-reactive-form.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-datepicker',\n  templateUrl: './thf-datepicker.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ThfDatepickerComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => ThfDatepickerComponent),\n      multi: true,\n    },\n    ThfControlPositionService\n  ]\n})\nexport class ThfDatepickerComponent extends ThfDatepickerBaseComponent implements AfterViewInit, OnDestroy {\n\n  date;\n  el: ElementRef;\n  hour: string;\n\n  private clickListener;\n  private readonly dateRegex = new RegExp('^(?:[0-9])\\\\d{1}(?:[0-9])\\\\d{1}-' +\n  '(?:0[1-9]|1[0-2])-' +\n  '(?:0[1-9]|[12]\\\\d|3[01])$');\n  private readonly isoRegex = new RegExp('^(?:[0-9])\\\\d{1}(?:[0-9])\\\\d{1}-' +\n  '(?:0[1-9]|1[0-2])-' +\n  '(?:0[1-9]|[12]\\\\d|3[01])' +\n  'T(?:[01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d(?:Z|-0[1-9]|-1\\\\d|-2[0-3]|' +\n  '-00:?(?:0[1-9]|[0-5]\\\\d)|\\\\+[01]\\\\d|\\\\+2[0-3])' +\n  '(?:|:?[0-5]\\\\d)$');\n  private timeoutChange: any;\n  private valueBeforeChange: string;\n\n  eventListenerFunction: () => void;\n  eventResizeListener: () => void;\n\n  @ViewChild('calendar', { static: true }) calendar: ThfCalendarComponent;\n  @ViewChild('dialogPicker', { read: ElementRef, static: true }) dialogPicker: ElementRef;\n  @ViewChild('iconDatepicker', { read: ElementRef, static: true }) iconDatepicker: ElementRef;\n  @ViewChild('inp', { read: ElementRef, static: true }) inputEl: ElementRef;\n\n  /** RÃ³tulo do campo. */\n  @Input('t-label') label?: string;\n\n  /** Texto de apoio do campo. */\n  @Input('t-help') help?: string;\n\n  constructor(private controlPosition: ThfControlPositionService, private renderer: Renderer2, el: ElementRef) {\n    super();\n    this.el = el;\n  }\n\n  ngAfterViewInit() {\n    this.setDialogPickerStyleDisplay('none');\n    // PÃµe o foco no Input, setado pelo t-focus\n    if (this.focus) {\n      this.inputEl.nativeElement.focus();\n    }\n  }\n\n  ngOnDestroy() {\n    this.removeListeners();\n  }\n\n  togglePicker() {\n    if (this.disabled || this.readonly) {\n      return;\n    }\n\n    if (!this.calendar.visible) {\n      this.calendar.init();\n      this.setCalendarPosition();\n      this.initializeListeners();\n\n    } else {\n      this.inputEl.nativeElement.disabled = false;\n      this.closeCalendar();\n    }\n  }\n\n  dateSelected() {\n    this.inputEl.nativeElement.focus();\n    this.inputEl.nativeElement.value = this.formatToDate(this.date);\n    this.controlModel(this.date);\n    this.closeCalendar();\n  }\n\n  // Esconde Picker quando for clicado fora\n  wasClickedOnPicker(event: any): void {\n    if (!this.dialogPicker || !this.iconDatepicker) {\n      return;\n    }\n\n    if ((!this.dialogPicker.nativeElement.contains(event.target) || this.hasOverlayClass(event.target)) &&\n      !this.iconDatepicker.nativeElement.contains(event.target) && !this.hasAttrCalendar(event.target)) {\n        this.closeCalendar();\n    }\n  }\n\n  @HostListener('keyup', ['$event'])\n  onKeyup($event: any) {\n    if (this.readonly) {\n      return;\n    }\n\n    this.objMask.keyup($event);\n    // Controla a atualizaÃ§Ã£o do model, verificando se a data Ã© valida\n    if (this.objMask.valueToModel || this.objMask.valueToModel === '') {\n      if (this.objMask.valueToModel.length >= 10) {\n        this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));\n        this.date = this.getDateFromString(this.inputEl.nativeElement.value);\n      } else {\n        this.date = undefined;\n        this.controlModel(this.date);\n      }\n    } else {\n      this.date = undefined;\n    }\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeydown($event?: any) {\n    if (this.readonly) {\n      return;\n    }\n\n    this.objMask.keydown($event);\n  }\n\n  hasInvalidClass() {\n    return (this.el.nativeElement.classList.contains('ng-invalid') &&\n      this.el.nativeElement.classList.contains('ng-dirty') &&\n      this.inputEl.nativeElement.value !== '');\n  }\n\n  getErrorPattern() {\n    return (this.errorPattern !== '' && this.hasInvalidClass()) ? this.errorPattern : '';\n  }\n\n  clear() {\n    this.valueBeforeChange = this.formatToDate(this.date);\n    this.date = undefined;\n    this.controlModel(this.date);\n\n    this.controlChangeEmitter();\n  }\n\n  eventOnBlur($event: any) {\n\n    const date = this.inputEl.nativeElement.value;\n    const newDate = date ? this.getDateFromString(date) : undefined;\n    this.objMask.blur($event);\n    this.onblur.emit();\n\n    if (this.objMask.valueToModel) {\n      if (this.objMask.valueToModel.length >= 10) {\n        this.controlModel(newDate);\n        this.date = newDate;\n      } else {\n        this.date = undefined;\n        this.controlModel(this.date);\n      }\n\n    } else {\n      this.date = undefined;\n      this.callOnChange(this.date);\n    }\n\n    this.controlChangeEmitter();\n\n  }\n\n  eventOnChange($event) {\n    const elementValue = this.inputEl.nativeElement.value;\n    if (this.verifyMobile()) {\n      this.controlModel(elementValue);\n      this.callOnChange(elementValue);\n    }\n    this.onchange.emit(elementValue);\n  }\n\n  eventOnClick($event) {\n    if (this.verifyMobile()) {\n      $event.target.blur();\n\n      // abre o calendar quando clicar no input somente no mobile\n      setTimeout(() => this.togglePicker(), 0);\n    } else {\n      // Atualiza a posiÃ§Ã£o do cursor ao clicar\n      this.objMask.click($event);\n    }\n  }\n\n  formatToDate(value: Date) {\n    if (!value) {\n      return undefined;\n    }\n\n    let dateFormatted = this.format;\n\n    dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));\n    dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));\n    dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));\n\n    return dateFormatted;\n  }\n\n  refreshValue(value: Date) {\n    if (value) {\n      this.inputEl.nativeElement.value = this.formatToDate(value);\n    }\n  }\n\n  // FunÃ§Ã£o implementada do ControlValueAccessor\n  writeValue(value: any) {\n    if (this.inputEl && value) {\n      if (value instanceof Date) {\n        const dateString = value.toString();\n        this.hour = 'T' + dateString.substring(16, 24) + dateString.substring(28, 31) + ':' + dateString.substring(31, 33);\n        this.date = value;\n        this.inputEl.nativeElement.value = this.formatToDate(value);\n\n      } else if (this.isValidDateIso(value) || this.isValidExtendedIso(value)) {\n\n        if (this.isValidDateIso(value)) {\n          this.isExtendedISO = false;\n        } else {\n          this.hour = value.substring(10, 25);\n          this.isExtendedISO = true;\n        }\n        const day = parseInt(value.substring(8, 10), 10);\n        const month = parseInt(value.substring(5, 7), 10) - 1;\n        const year = parseInt(value.substring(0, 4), 10);\n\n        const dateTemp = new Date(year, month, day);\n\n        setYearFrom0To100(dateTemp, year);\n\n        this.date = dateTemp;\n        this.inputEl.nativeElement.value = this.formatToDate(dateTemp);\n      } else {\n        this.inputEl.nativeElement.value = '';\n        this.date = undefined;\n      }\n      this.controlModel(this.date);\n    } else if (this.inputEl) {\n      this.inputEl.nativeElement.value = '';\n      this.date = undefined;\n    }\n\n    this.valueBeforeChange = this.formatToDate(this.date);\n  }\n\n  isValidDateIso(value: string) {\n    return this.dateRegex.test(value);\n  }\n\n  isValidExtendedIso(value) {\n    return this.isoRegex.test(value);\n  }\n\n  hasOverlayClass(element: any) {\n    return element.classList.contains('thf-calendar-overlay');\n  }\n\n  /* istanbul ignore next */\n  verifyMobile() {\n    return isMobile();\n  }\n\n  private closeCalendar() {\n    this.calendar.close();\n    this.removeListeners();\n    this.setDialogPickerStyleDisplay('none');\n  }\n\n  private controlChangeEmitter() {\n    const dateModelFormatted = this.formatToDate(this.date);\n\n    if (dateModelFormatted !== this.valueBeforeChange) {\n      this.valueBeforeChange = dateModelFormatted;\n\n      clearTimeout(this.timeoutChange);\n      this.timeoutChange = setTimeout(() => {\n        this.onchange.emit(dateModelFormatted);\n      }, 200);\n    }\n  }\n\n  private hasAttrCalendar(element: any) {\n    const attrCalendar = 'attr-calendar';\n\n    return (element && element.hasAttribute(attrCalendar)) || (element.parentElement && element.parentElement.hasAttribute(attrCalendar));\n  }\n\n  private initializeListeners() {\n    this.clickListener = this.renderer.listen('document', 'click', (event: MouseEvent) => {\n      this.wasClickedOnPicker(event);\n    });\n\n    this.eventResizeListener = this.renderer.listen('window', 'resize', () => {\n      this.closeCalendar();\n    });\n\n    window.addEventListener('scroll', this.onScroll, true);\n  }\n\n  private onScroll = (): void => {\n    this.controlPosition.adjustPosition(thfCalendarPositionDefault);\n  }\n\n  private removeListeners() {\n    if (this.clickListener) {\n      this.clickListener();\n    }\n\n    if (this.eventResizeListener) {\n      this.eventResizeListener();\n    }\n\n    window.removeEventListener('scroll', this.onScroll, true);\n  }\n\n  private setDialogPickerStyleDisplay(value) {\n    this.dialogPicker.nativeElement.style.display = value;\n  }\n\n  private setCalendarPosition() {\n    this.setDialogPickerStyleDisplay('block');\n\n    this.controlPosition.setElements(\n      this.dialogPicker.nativeElement,\n      thfCalendarContentOffset,\n      this.inputEl,\n      ['top-left', 'bottom-left'],\n      false,\n      true\n    );\n\n    this.controlPosition.adjustPosition(thfCalendarPositionDefault);\n  }\n\n}\n","import { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\nimport { EventEmitter, Input, Output } from '@angular/core';\n\nimport { browserLanguage, convertToBoolean, thfLocaleDefault } from './../../../utils/util';\nimport { requiredFailed } from '../validators';\n\nimport { ThfDatepickerRange } from './interfaces/thf-datepicker-range.interface';\nimport { ThfDatepickerRangeLiterals } from './interfaces/thf-datepicker-range-literals.interface';\nimport { ThfDateService } from './../../../services/thf-date/thf-date.service';\n\nexport const thfDatepickerRangeLiteralsDefault = {\n  en: <ThfDatepickerRangeLiterals> {\n    invalidFormat: 'Date in invalid format',\n    startDateGreaterThanEndDate: 'Start date greater than end date',\n  },\n  es: <ThfDatepickerRangeLiterals> {\n    invalidFormat: 'Fecha en formato no vÃ¡lido',\n    startDateGreaterThanEndDate: 'Fecha de inicio mayor que fecha final',\n  },\n  pt: <ThfDatepickerRangeLiterals> {\n    invalidFormat: 'Data no formato invÃ¡lido',\n    startDateGreaterThanEndDate: 'Data inicial maior que data final',\n  }\n};\n\n/**\n * @description\n *\n * O `thf-datepicker-range` Ã© um componente para seleÃ§Ã£o de um perÃ­odo entre duas datas, onde Ã© possÃ­vel informar apenas\n * a data inicial ou a data final.\n *\n * O componente `[(ngModel)]` do `thf-datepicker-range` trabalha com um objeto que implementa a interface\n * `ThfDatepickerRange`, contendo as seguintes propriedades:\n * ```\n * { \"start\": '2017-11-28', \"end\": '2017-11-30' }\n * ```\n *\n * <a id=\"accepted-formats\"></a>\n * Este componente pode receber os seguintes formatos de data:\n *\n * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**\n * ```\n * '2017-11-28T00:00:00-02:00';\n * ```\n *\n * - **Data (E8601DAw.): yyyy-mm-dd**\n * ```\n * '2017-11-28';\n * ```\n *\n * - **JavaScript Date Object:**\n * ```\n * new Date(2017, 10, 28);\n * ```\n *\n * > O componente respeitarÃ¡ o formato passado para o *model* via codificaÃ§Ã£o. PorÃ©m, caso seja feita alteraÃ§Ã£o em algum\n * dos valores de data em tela, o componente atribuirÃ¡ o formato **Data (E8601DAw.): yyyy-mm-dd** ao model.\n *\n * Importante:\n *\n * - Quando preenchidas a data inicial e final, a data inicial deve ser sempre menor ou igual a data final;\n * - Ao passar uma data invÃ¡lida via codificaÃ§Ã£o, o valor serÃ¡ mantido no *model* e o `input` da tela aparecerÃ¡ vazio;\n * - Permite trabalhar com as duas datas separadamente atravÃ©s das propriedades `t-start-date` e `t-end-date` no lugar do\n * `[(ngModel)]`, no entanto sem a validaÃ§Ã£o do formulÃ¡rio;\n * - Para a validaÃ§Ã£o do formulÃ¡rio, utilize o `[(ngModel)]`.\n */\nexport abstract class ThfDatepickerRangeBaseComponent implements ControlValueAccessor, Validator {\n\n  errorMessage: string = '';\n\n  private _clean?: boolean = false;\n  private _disabled?;\n  private _endDate?;\n  private _literals?: any;\n  private _readonly: boolean = false;\n  private _required?: boolean = false;\n  private _startDate?;\n  private onChangeModel: any;\n  private validatorChange: any;\n\n  protected dateRange: ThfDatepickerRange = { start: '', end: '' };\n  protected format: any = 'dd/mm/yyyy';\n  protected isDateRangeInputFormatValid: boolean = true;\n  protected isStartDateRangeInputValid: boolean = true;\n  protected onTouchedModel: any;\n\n  get isDateRangeInputValid() {\n    return this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Habilita aÃ§Ã£o para limpar o campo.\n   *\n   * @default `false`\n   */\n  @Input('t-clean') set clean(clean: boolean) {\n    this._clean = convertToBoolean(clean);\n  }\n\n  get clean() {\n    return this._clean;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Desabilita o campo.\n   *\n   * @default `false`\n   */\n  @Input('t-disabled') set disabled(value: boolean) {\n    this._disabled = convertToBoolean(value);\n\n    this.validateModel(this.dateRange);\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Data final.\n   */\n  @Input('t-end-date') set endDate(date: string | Date) {\n    this._endDate = this.convertPatternDateFormat(date);\n    this.dateRange.end = this.endDate;\n\n    this.updateScreenByModel(this.dateRange);\n    this.updateModel(this.dateRange);\n  }\n\n  get endDate() {\n    return this._endDate;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Texto de apoio do campo.\n   */\n  @Input('t-help') help?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * RÃ³tulo do campo.\n   */\n  @Input('t-label') label?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto com as literais usadas no `thf-datepicker-range`.\n   *\n   * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponÃ­veis:\n   *\n   * ```\n   *  const customLiterals: ThfDatepickerRangeLiterals = {\n   *    invalidFormat: 'Date in inconsistent format',\n   *    startDateGreaterThanEndDate: 'End date less than start date'\n   *  };\n   * ```\n   *\n   * Ou passando apenas as literais que deseja customizar:\n   *\n   * ```\n   *  const customLiterals: ThfDatepickerRangeLiterals = {\n   *    invalidFormat: 'Date in inconsistent format'\n   *  };\n   * ```\n   *\n   * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\n   *\n   * ```\n   * <thf-datepicker-range\n   *   [t-literals]=\"customLiterals\">\n   * </thf-datepicker-range>\n   * ```\n   *\n   * > O objeto padrÃ£o de literais serÃ¡ traduzido de acordo com o idioma do browser (pt, en, es).\n   */\n  @Input('t-literals') set literals(value: ThfDatepickerRangeLiterals) {\n    if (value instanceof Object && !(value instanceof Array)) {\n      this._literals = {\n        ...thfDatepickerRangeLiteralsDefault[thfLocaleDefault],\n        ...thfDatepickerRangeLiteralsDefault[browserLanguage()],\n        ...value\n      };\n    } else {\n      this._literals = thfDatepickerRangeLiteralsDefault[browserLanguage()];\n    }\n  }\n\n  get literals() {\n    return this._literals || thfDatepickerRangeLiteralsDefault[browserLanguage()];\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se a indicaÃ§Ã£o de campo opcional serÃ¡ exibida.\n   *\n   * > NÃ£o serÃ¡ exibida a indicaÃ§Ã£o se:\n   * - O campo conter `t-required`;\n   * - NÃ£o possuir `t-help` e/ou `t-label`.\n   *\n   * @default `false`\n   */\n  @Input('t-optional') optional: boolean;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo serÃ¡ somente leitura.\n   *\n   * @default `false`\n   */\n  @Input('t-readonly') set readonly(value: boolean) {\n    this._readonly = convertToBoolean(value);\n\n    this.validateModel(this.dateRange);\n  }\n\n  get readonly() {\n    return this._readonly;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo serÃ¡ obrigatÃ³rio.\n   *\n   * @default `false`\n   */\n  @Input('t-required') set required(required: boolean) {\n    this._required = convertToBoolean(required);\n\n    this.validateModel(this.dateRange);\n  }\n\n  get required() {\n    return this._required;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Data inicial.\n   */\n  @Input('t-start-date') set startDate(date: string | Date) {\n    this._startDate = this.convertPatternDateFormat(date);\n    this.dateRange.start = this.startDate;\n\n    this.updateScreenByModel(this.dateRange);\n    this.updateModel(this.dateRange);\n  }\n\n  get startDate() {\n    return this._startDate;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Evento disparado ao alterar valor do campo.\n   */\n  @Output('t-change') onChange?: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(protected thfDateService: ThfDateService) { }\n\n  protected abstract resetDateRangeInputValidation(): void;\n\n  protected abstract updateScreenByModel(dateRange: ThfDatepickerRange);\n\n  // FunÃ§Ã£o implementada do ControlValueAccessor\n  // Usada para interceptar as mudanÃ§as e nÃ£o atualizar automaticamente o Model\n  registerOnChange(func: any): void {\n    this.onChangeModel = func;\n  }\n\n  // FunÃ§Ã£o implementada do ControlValueAccessor\n  // Usada para interceptar as mudanÃ§as e nÃ£o atualizar automaticamente o Model\n  registerOnTouched(func: any): void {\n    this.onTouchedModel = func;\n  }\n\n  registerOnValidatorChange?(fn: () => void): void {\n    this.validatorChange = fn;\n  }\n\n  validate(control: AbstractControl): ValidationErrors {\n\n    const value: ThfDatepickerRange = control.value || {};\n    const startDate = value.start ? this.convertPatternDateFormat(value.start) : '';\n    const endDate = value.end ? this.convertPatternDateFormat(value.end) : '';\n\n    if (this.requiredDateRangeFailed(startDate, endDate)) {\n      this.errorMessage = '';\n\n      return { required: {\n        valid: false,\n      }};\n    }\n\n    if (this.dateRangeObjectFailed(control.value) || this.dateRangeFormatFailed(startDate, endDate)) {\n      this.errorMessage = this.literals.invalidFormat;\n\n      return { date: {\n        valid: false,\n      }};\n    }\n\n    if (this.dateRangeFailed(startDate, endDate)) {\n      this.errorMessage = this.literals.startDateGreaterThanEndDate;\n\n      return { date: {\n        valid: false,\n      }};\n    }\n\n    return null;\n  }\n\n  writeValue(dateRange: ThfDatepickerRange): void {\n    this.resetDateRangeInputValidation();\n\n    if (!dateRange || this.dateRangeObjectFailed(dateRange)) {\n      this.dateRange = { start: '', end: '' };\n    }\n\n    if (!dateRange) {\n      this.validateModel(this.dateRange);\n    }\n\n    if (this.dateRangeObjectFailed(dateRange)) {\n      this.updateModel(dateRange);\n    }\n\n    if (this.isDateRangeObject(dateRange)) {\n      this.dateRange = {\n        start: this.convertPatternDateFormat(dateRange.start),\n        end: this.convertPatternDateFormat(dateRange.end)\n      };\n\n      this.updateModel(this.dateRange);\n    }\n\n    this.updateScreenByModel(this.dateRange);\n  }\n\n  protected dateFormatFailed(value: string): boolean {\n    return value && !this.thfDateService.isValidIso(value);\n  }\n\n  // Executa a funÃ§Ã£o onChange\n  protected updateModel(value: any) {\n    const model = typeof(value) === 'object' ? { ...value } : value;\n    // Quando o input nÃ£o possui um formulÃ¡rio, entÃ£o esta funÃ§Ã£o nÃ£o Ã© registrada\n    if (this.onChangeModel) {\n      this.onChangeModel(model);\n    }\n\n  }\n\n  protected validateModel(value: any) {\n    const model = { ...value };\n    if (this.validatorChange) {\n      this.validatorChange(model);\n    }\n  }\n\n  private convertPatternDateFormat(value: any) {\n\n    if (value instanceof Date) {\n      return this.thfDateService.convertDateToISO(value);\n    }\n\n    return value;\n  }\n\n  private dateRangeFailed(startDate: string, endDate: string): boolean {\n    return !this.thfDateService.isDateRangeValid(endDate, startDate) || !this.isStartDateRangeInputValid;\n  }\n\n  private dateRangeFormatFailed(startDate: string, endDate: string): boolean {\n    return this.dateFormatFailed(endDate) || this.dateFormatFailed(startDate) || !this.isDateRangeInputFormatValid;\n  }\n\n  private dateRangeObjectFailed(value): boolean {\n    return value && !this.isDateRangeObject(value);\n  }\n\n  private isDateRangeObject(value): boolean {\n    return value && value.hasOwnProperty('start') && value.hasOwnProperty('end');\n  }\n\n  private requiredDateRangeFailed(startDate: string, endDate: string): boolean {\n    return this.isDateRangeInputValid &&\n      requiredFailed(this.required, this.disabled, startDate) &&\n      requiredFailed(this.required, this.disabled, endDate);\n  }\n\n}\n","import { Component, ElementRef, forwardRef, OnInit, ViewChild } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ThfDatepickerRange } from './interfaces/thf-datepicker-range.interface';\nimport { ThfDatepickerRangeBaseComponent } from './thf-datepicker-range-base.component';\nimport { ThfDateService } from './../../../services/thf-date/thf-date.service';\nimport { ThfMask } from '../thf-input/thf-mask';\n\nconst arrowLeftKey = 37;\nconst arrowRightKey = 39;\nconst backspaceKey = 8;\nconst thfDatepickerRangeDateLengthDefault = 10;\n\n/**\n * @docsExtends ThfDatepickerRangeBaseComponent\n *\n * @example\n *\n * <example name=\"thf-datepicker-range-basic\" title=\"Totvs Datepicker Range Basic\">\n *  <file name=\"sample-thf-datepicker-range-basic/sample-thf-datepicker-range-basic.component.html\"> </file>\n *  <file name=\"sample-thf-datepicker-range-basic/sample-thf-datepicker-range-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-datepicker-range-labs\" title=\"Totvs Datepicker Range Labs\">\n *  <file name=\"sample-thf-datepicker-range-labs/sample-thf-datepicker-range-labs.component.html\"> </file>\n *  <file name=\"sample-thf-datepicker-range-labs/sample-thf-datepicker-range-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-datepicker-range-vacations\" title=\"Totvs Datepicker Range - Vacations Suggestion\">\n *  <file name=\"sample-thf-datepicker-range-vacations/sample-thf-datepicker-range-vacations.component.html\"> </file>\n *  <file name=\"sample-thf-datepicker-range-vacations/sample-thf-datepicker-range-vacations.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-datepicker-range-vacations-reactive-form\" title=\"Totvs Datepicker Range - Vacations Reactive Form\">\n *  <file name=\"sample-thf-datepicker-range-vacations-reactive-form/sample-thf-datepicker-range-vacations-reactive-form.component.html\">\n *  </file>\n *  <file name=\"sample-thf-datepicker-range-vacations-reactive-form/sample-thf-datepicker-range-vacations-reactive-form.component.ts\">\n *  </file>\n * </example>\n */\n@Component({\n  selector: 'thf-datepicker-range',\n  templateUrl: './thf-datepicker-range.component.html',\n  providers: [\n  {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ThfDatepickerRangeComponent),\n    multi: true,\n  },\n  {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => ThfDatepickerRangeComponent),\n    multi: true,\n  }]\n})\nexport class ThfDatepickerRangeComponent extends ThfDatepickerRangeBaseComponent implements OnInit {\n\n  private thfDatepickerRangeElement: ElementRef<any>;\n  private thfMaskObject: ThfMask;\n\n  @ViewChild('dateRangeField', { read: ElementRef, static: true }) dateRangeField: ElementRef;\n  @ViewChild('endDateInput', { read: ElementRef, static: true }) endDateInput: ElementRef;\n  @ViewChild('startDateInput', { read: ElementRef, static: true }) startDateInput: ElementRef;\n\n  get enableCleaner(): boolean {\n    return (this.startDateInputValue || this.endDateInputValue) && !this.disabled && !this.readonly;\n  }\n\n  get endDateInputName(): string {\n    return 'end-date';\n  }\n\n  get endDateInputValue(): string {\n    return this.endDateInput.nativeElement.value;\n  }\n\n  get getErrorMessage(): string {\n    return (this.errorMessage !== '' && this.hasInvalidClass()) ? this.errorMessage : '';\n  }\n\n  get isDateRangeInputUncompleted(): boolean {\n    return this.endDateInputValue.length < thfDatepickerRangeDateLengthDefault\n      && this.startDateInputValue.length < thfDatepickerRangeDateLengthDefault;\n  }\n\n  get isDirtyDateRangeInput(): boolean {\n    return this.endDateInputValue.length > 0 || this.startDateInputValue.length > 0;\n  }\n\n  get startDateInputName(): string {\n    return 'start-date';\n  }\n\n  get startDateInputValue(): string {\n    return this.startDateInput.nativeElement.value;\n  }\n\n  static getKeyCode(event: KeyboardEvent) {\n    return event.keyCode || event.which;\n  }\n\n  static getTargetElement(event: any) {\n    return event.target || event.srcElement;\n  }\n\n  static isValidKey(keyCode: number): boolean {\n    const isNumericKey = keyCode >= 48 && keyCode <= 57;\n    const isNumericNumpadKey = keyCode >= 96 && keyCode <= 105;\n\n    return isNumericKey || isNumericNumpadKey;\n  }\n\n  constructor(thfDateService: ThfDateService, thfDatepickerRangeElement: ElementRef) {\n    super(thfDateService);\n    this.thfDatepickerRangeElement = thfDatepickerRangeElement;\n  }\n\n  ngOnInit() {\n    // Classe de mÃ¡scara\n    this.thfMaskObject = this.buildMask();\n  }\n\n  clear() {\n    this.resetDateRangeInputValidation();\n    this.dateRange = { start: '', end: '' };\n\n    this.updateScreenByModel(this.dateRange);\n    this.updateModel(this.dateRange);\n  }\n\n  onBlur() {\n    this.removeFocusFromDatePickerRangeField();\n  }\n\n  onFocus() {\n    this.applyFocusOnDatePickerRangeField();\n  }\n\n  onKeydown(event?: any) {\n\n    if (this.readonly) {\n      return;\n    }\n\n    if (this.isSetFocusOnBackspace(event)) {\n      event.preventDefault();\n      this.setFocusOnBackspace();\n    } else {\n      this.thfMaskObject.keydown(event);\n    }\n\n  }\n\n  onKeyup(event: any) {\n    if (this.readonly) {\n      return;\n    }\n\n    const isStartDateTargetEvent = event.target.name === this.startDateInputName;\n\n    this.setFocus(event);\n    this.thfMaskObject.keyup(event);\n    this.updateModelByScreen(isStartDateTargetEvent);\n  }\n\n  resetDateRangeInputValidation() {\n    this.isStartDateRangeInputValid = true;\n    this.isDateRangeInputFormatValid = true;\n  }\n\n  updateScreenByModel(model: ThfDatepickerRange) {\n    const dateRange = { start: model.start as string, end: model.end as string };\n    const isStartDateValid = this.thfDateService.isDateRangeValid(dateRange.end, dateRange.start);\n    const isDateValid = date => !this.dateFormatFailed(date) && isStartDateValid;\n\n    const endDateFormated = isDateValid(dateRange.end) ? this.formatModelToScreen(dateRange.end) : '';\n    const startDateFormated = isDateValid(dateRange.start) ? this.formatModelToScreen(dateRange.start) : '';\n\n    this.endDateInput.nativeElement.value = endDateFormated;\n    this.startDateInput.nativeElement.value = startDateFormated;\n  }\n\n  private applyFocusOnDatePickerRangeField() {\n    this.dateRangeField.nativeElement.classList.add('thf-datepicker-range-field-focused');\n  }\n\n  // Retorna um objeto do tipo ThfMask com a mascara configurada.\n  private buildMask(): ThfMask {\n    let mask = this.format.toUpperCase();\n\n    mask = mask.replace(/DD/g, '99');\n    mask = mask.replace(/MM/g, '99');\n    mask = mask.replace(/YYYY/g, '9999');\n\n    return new ThfMask(mask, true);\n  }\n\n  private formatDate(format: string, day: string = '', month: string = '', year: string = ''): string {\n    let dateFormatted = format;\n\n    day = day && day.includes('T') ? day.slice(0, 2) : day;\n\n    dateFormatted = dateFormatted.replace('dd', ('0' + day).slice(-2));\n    dateFormatted = dateFormatted.replace('mm', ('0' + (month)).slice(-2));\n    dateFormatted = dateFormatted.replace('yyyy', String(year));\n\n    return dateFormatted;\n  }\n\n  private formatScreenToModel(value: string = ''): string {\n    const [day, month, year] = value.split('/');\n\n    return value ? this.formatDate('yyyy-mm-dd', day, month, year) : '';\n  }\n\n  private formatModelToScreen(value: string = ''): string {\n    const [year, month, day] = value.split('-');\n\n    return value ? this.formatDate(this.format, day, month, year) : '';\n  }\n\n  private getDateRangeFormatValidation(startDate: string, endDate: string, isStartDateTargetEvent: boolean):\n    { isValid: boolean, dateRangeModel: ThfDatepickerRange } {\n\n    this.setDateRangeInputValidation(startDate, endDate);\n\n    return {\n      isValid: this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid,\n      dateRangeModel: this.getValidatedModel(startDate, endDate, isStartDateTargetEvent)\n    };\n\n  }\n\n  private getValidatedModel(startDate: string, endDate: string, isStartDateTargetEvent: boolean): ThfDatepickerRange {\n    const dateRangeModel = { start: '', end: '' };\n\n    dateRangeModel.end = (isStartDateTargetEvent || this.isStartDateRangeInputValid)\n      && !this.dateFormatFailed(endDate) ? endDate : '' ;\n\n    dateRangeModel.start = (!isStartDateTargetEvent || this.isStartDateRangeInputValid)\n      && !this.dateFormatFailed(startDate) ? startDate : '';\n\n    return dateRangeModel;\n  }\n\n  private hasInvalidClass(): boolean {\n    return (this.thfDatepickerRangeElement.nativeElement.classList.contains('ng-invalid') &&\n      this.thfDatepickerRangeElement.nativeElement.classList.contains('ng-dirty'));\n  }\n\n  private isEqualBeforeValue(startDate: string, endDate: string): boolean {\n    return this.isDateRangeInputFormatValid && endDate === this.dateRange.end && startDate === this.dateRange.start;\n  }\n\n  private isSetFocusOnBackspace(event: any) {\n    return event.target.name === this.endDateInputName &&\n      this.endDateInput.nativeElement.selectionStart === 0 && this.endDateInput.nativeElement.selectionEnd === 0 &&\n      event.keyCode === backspaceKey;\n  }\n\n  private removeFocusFromDatePickerRangeField() {\n    this.dateRangeField.nativeElement.classList.remove('thf-datepicker-range-field-focused');\n  }\n\n  private setDateRangeInputValidation(startDate: string, endDate: string) {\n    this.isStartDateRangeInputValid = this.thfDateService.isDateRangeValid(endDate, startDate);\n\n    this.isDateRangeInputFormatValid = !this.dateFormatFailed(startDate) && !this.dateFormatFailed(endDate);\n  }\n\n  private setFocus(event: any) {\n    const inputElement = ThfDatepickerRangeComponent.getTargetElement(event);\n    const keyCode = ThfDatepickerRangeComponent.getKeyCode(event);\n    const inputName = inputElement['name'];\n\n    this.setFocusOnArrowLeft(keyCode, inputName);\n    this.setFocusOnArrowRight(keyCode, inputName, inputElement);\n    this.setFocusOnStartDateCompleted(keyCode, inputName);\n  }\n\n  private setFocusAndPosition(position: number, inputElement: ElementRef, selectionRange: number) {\n    this.focusOnElement(inputElement);\n\n    setTimeout(() => {\n      inputElement.nativeElement.setSelectionRange(selectionRange, selectionRange);\n      this.thfMaskObject.initialPosition = position;\n      this.thfMaskObject.finalPosition = position;\n    });\n  }\n\n  private focusOnElement(inputElement: ElementRef) {\n    inputElement.nativeElement.focus();\n  }\n\n  private setFocusOnArrowLeft(keyCode: number, inputName: string) {\n    const isCursorAtStartOfInput = this.endDateInput.nativeElement.selectionStart === 0;\n\n    if (inputName === this.endDateInputName && isCursorAtStartOfInput && keyCode === arrowLeftKey) {\n      const inputLength = this.startDateInput.nativeElement.value.length;\n      this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);\n    }\n  }\n\n  private setFocusOnArrowRight(keyCode: number, inputName: string, inputElement: any) {\n    const isCursorAtEndOfInput = this.startDateInput.nativeElement.selectionStart === inputElement.value.length;\n\n    if (inputName === this.startDateInputName && isCursorAtEndOfInput && keyCode === arrowRightKey) {\n      this.setFocusAndPosition(0, this.endDateInput, 0);\n    }\n  }\n\n  private setFocusOnBackspace() {\n    const inputLength = this.startDateInput.nativeElement.value.length;\n\n    this.startDateInput.nativeElement.value = this.startDateInputValue.slice(0, -1);\n    this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);\n  }\n\n  private setFocusOnStartDateCompleted(keyCode: number, inputName: string) {\n    const isLastKeyPressed = this.startDateInput.nativeElement.selectionStart === thfDatepickerRangeDateLengthDefault;\n    const isNewDateCompleted = this.startDateInputValue.length === thfDatepickerRangeDateLengthDefault && isLastKeyPressed;\n    const isValidKey = ThfDatepickerRangeComponent.isValidKey(keyCode);\n\n    if (inputName === this.startDateInputName && isNewDateCompleted && isValidKey) {\n      this.setFocusAndPosition(0, this.endDateInput, 0);\n    }\n  }\n\n  private updateModelByScreen(isStartDateTargetEvent: boolean) {\n    const endDateFormatted = this.formatScreenToModel(this.endDateInputValue);\n    const startDateFormatted = this.formatScreenToModel(this.startDateInputValue);\n\n    if (this.isDateRangeInputUncompleted && this.isDirtyDateRangeInput) {\n      this.updateModel(this.dateRange);\n      return;\n    }\n\n    if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {\n      this.resetDateRangeInputValidation();\n      this.validateModel(this.dateRange);\n      return;\n    }\n\n    const dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);\n\n    if (dateFormatValidation.isValid) {\n      this.dateRange = { start: startDateFormatted, end: endDateFormatted };\n      this.updateModel(this.dateRange);\n      this.onChange.emit({ ...this.dateRange });\n    }\n\n    if (!dateFormatValidation.isValid) {\n      this.dateRange = { ...dateFormatValidation.dateRangeModel };\n      this.updateModel(dateFormatValidation.dateRangeModel);\n    }\n\n  }\n\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\n\nimport { convertToBoolean } from '../../../utils/util';\nimport { requiredFailed, maxlengthFailed, minlengthFailed, patternFailed } from './../validators';\nimport { ThfMask } from './thf-mask';\n\n/**\n * @description\n *\n * Este Ã© um componente baseado em input, com vÃ¡rias propriedades do input nativo e outras\n * propriedades extras como: mÃ¡scara, pattern, mensagem de erro e etc.\n * VocÃª deve informar a variÃ¡vel que contÃ©m o valor como [(ngModel)]=\"variavel\", para que o\n * input receba o valor da variÃ¡vel e para que ela receba as alteraÃ§Ãµes do valor (two-way-databinding).\n * A propriedade name Ã© obrigatÃ³ria para que o formulÃ¡rio e o model funcionem corretamente.\n *\n * Importante:\n *\n * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerÃ¡ um erro de angular.\n * EntÃ£o vocÃª precisa informar o atributo name ou o atributo [ngModelOptions]=\"{standalone: true}\".\n * Exemplo: [(ngModel)]=\"pessoa.nome\" [ngModelOptions]=\"{standalone: true}\"\n */\nexport abstract class ThfInputBaseComponent implements ControlValueAccessor, Validator {\n\n  private _maxlength?: number;\n  private _minlength?: number;\n  private _placeholder?: string = '';\n\n  protected passedWriteValue: boolean = false;\n  protected validatorChange: any;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define o Ã­cone que serÃ¡ exibido no inÃ­cio do campo.\n   *\n   * > Veja a disponibilidade de Ã­cones em [biblioteca de Ã­cones](guides/icons).\n   */\n  @Input('t-icon') icon?: string;\n\n  /** RÃ³tulo do campo. */\n  @Input('t-label') label?: string;\n\n  /** Texto de apoio do campo. */\n  @Input('t-help') help?: string;\n\n  /** Nome e identificador do campo. */\n  @Input('name') name: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Mensagem que aparecerÃ¡ enquanto o campo nÃ£o estiver preenchido.\n   *\n   * @default ''\n   */\n  @Input('t-placeholder') set placeholder(value: string) {\n    this._placeholder = value || '';\n  }\n  get placeholder() {\n    return this._placeholder;\n  }\n\n  /**\n   * @description\n   *\n   * Se verdadeiro, desabilita o campo.\n   *\n   * @default `false`\n   */\n  disabled?: boolean = false;\n  @Input('t-disabled') set setDisabled(disabled: string) {\n    this.disabled = disabled === '' ? true : convertToBoolean(disabled);\n\n    this.validateModel();\n  }\n\n  /** Indica que o campo serÃ¡ somente leitura. */\n  readonly?: boolean = false;\n  @Input('t-readonly') set setReadonly(readonly: string) {\n    this.readonly = readonly === '' ? true : convertToBoolean(readonly);\n  }\n\n  /**\n   * @description\n   *\n   * Indica que o campo serÃ¡ obrigatÃ³rio.\n   *\n   * > Esta propriedade Ã© desconsiderada quando o input estÃ¡ desabilitado `(t-disabled)`.\n   *\n   * @default `false`\n   */\n  required?: boolean = false;\n  @Input('t-required') set setRequired(required: string) {\n    this.required = required === '' ? true : convertToBoolean(required);\n\n    this.validateModel();\n  }\n\n  /** Se verdadeiro, o campo iniciarÃ¡ com foco. */\n  focus?: boolean = false;\n  @Input('t-focus') set setFocus(focus: string) {\n    this.focus = focus === '' ? true : convertToBoolean(focus);\n  }\n\n  /** Se verdadeiro, o campo receberÃ¡ um botÃ£o para ser limpo. */\n  clean?: boolean = false;\n  @Input('t-clean') set setClean(clean: string) {\n    this.clean = clean === '' ? true : convertToBoolean(clean);\n  }\n\n  /**\n   * @description\n   *\n   * ExpressÃ£o regular para validar o campo.\n   * Quando o campo possuir uma mÃ¡scara `(t-mask)` serÃ¡ automaticamente validado por ela, porÃ©m\n   * Ã© possÃ­vel definir um t-pattern para substituir a validaÃ§Ã£o da mÃ¡scara.\n   */\n  pattern?: string;\n  @Input('t-pattern') set setPattern(pattern: string) {\n    this.pattern = pattern;\n\n    this.validateModel();\n  }\n\n  /**\n   * @description\n   *\n   * Mensagem que serÃ¡ apresentada quando o `pattern` ou a mÃ¡scara nÃ£o for satisfeita.\n   *\n   * > Esta mensagem nÃ£o Ã© apresentada quando o campo estiver vazio, mesmo que ele seja requerido.\n   */\n  @Input('t-error-pattern') errorPattern?: string = '';\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica a quantidade mÃ¡xima de caracteres que o campo aceita.\n   */\n  @Input('t-maxlength') set maxlength(value: number) {\n    if (!isNaN(parseInt(<any> value, 10))) {\n      this._maxlength = parseInt(<any> value, 10);\n\n      this.validateModel();\n    } else if (!value) {\n      this._maxlength = undefined;\n\n      this.validateModel();\n    }\n  }\n\n  get maxlength() {\n    return this._maxlength;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica a quantidade mÃ­nima de caracteres que o campo aceita.\n   */\n  @Input('t-minlength') set minlength(value: number) {\n    if (!isNaN(parseInt(<any> value, 10))) {\n      this._minlength = parseInt(<any> value, 10);\n\n      this.validateModel();\n    } else if (!value) {\n      this._minlength = undefined;\n\n      this.validateModel();\n    }\n  }\n\n  get minlength() {\n    return this._minlength;\n  }\n\n  /**\n   * @description\n   *\n   * Indica uma mÃ¡scara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.\n   * A mÃ¡scara gera uma validaÃ§Ã£o automÃ¡tica do campo, podendo esta ser substituÃ­da por um REGEX especÃ­fico\n   * atravÃ©s da propriedade t-pattern.\n   * O campo serÃ¡ sinalizado e o formulÃ¡rio ficarÃ¡ invÃ¡lido quando o valor informado estiver fora do padrÃ£o definido,\n   * mesmo quando desabilitado.\n   */\n  mask?: string = '';\n  @Input('t-mask') set setMask(mask: string) {\n    this.mask = mask;\n\n    // Atualiza MÃ¡scara do Campo\n    this.objMask = new ThfMask(this.mask, this.maskFormatModel);\n\n    this.validateModel();\n  }\n\n  /**\n   * @description\n   *\n   * Indica se o `model` receberÃ¡ o valor formatado pela mÃ¡scara ou apenas o valor puro (sem formataÃ§Ã£o).\n   *\n   * @default `false`\n   */\n  maskFormatModel?: boolean = false;\n  @Input('t-mask-format-model') set setMaskFormatModel(maskFormatModel: string) {\n    this.maskFormatModel = maskFormatModel === '' ? true : convertToBoolean(maskFormatModel);\n\n    if (this.objMask instanceof ThfMask) {\n      this.objMask.formatModel = this.maskFormatModel;\n\n      this.validateModel();\n    }\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se a indicaÃ§Ã£o de campo opcional serÃ¡ exibida.\n   *\n   * > NÃ£o serÃ¡ exibida a indicaÃ§Ã£o se:\n   * - O campo conter `t-required`;\n   * - NÃ£o possuir `t-help` e/ou `t-label`.\n   *\n   * @default `false`\n   */\n  @Input('t-optional') optional: boolean;\n\n  /** Evento disparado ao sair do campo. */\n  @Output('t-blur') blur?: EventEmitter<any> = new EventEmitter();\n\n  /** Evento disparado ao entrar do campo. */\n  @Output('t-enter') enter?: EventEmitter<any> = new EventEmitter();\n\n  /** Evento disparado ao alterar valor e deixar o campo. */\n  @Output('t-change') change?: EventEmitter<any> = new EventEmitter();\n\n  /** Evento disparado ao alterar valor do model. */\n  @Output('t-change-model') changeModel?: EventEmitter<any> = new EventEmitter();\n\n  type: string;\n\n  onChangePropagate: any = null;\n  onTouched: any = null;\n  objMask: any;\n  modelLastUpdate: any;\n\n  callOnChange(value: any) {\n    this.updateModel(value);\n\n    this.controlChangeModelEmitter(value);\n  }\n\n  callUpdateModelWithTimeout(value) {\n    setTimeout(() => this.updateModel(value));\n  }\n\n  controlChangeModelEmitter(value: any) {\n    if (this.modelLastUpdate !== value) {\n      this.changeModel.emit(value);\n      this.modelLastUpdate = value;\n    }\n  }\n\n  // FunÃ§Ã£o implementada do ControlValueAccessor\n  // Usada para interceptar as mudanÃ§as e nÃ£o atualizar automaticamente o Model\n  registerOnChange(func: any): void {\n    this.onChangePropagate = func;\n  }\n\n  // FunÃ§Ã£o implementada do ControlValueAccessor\n  // Usada para interceptar as mudanÃ§as e nÃ£o atualizar automaticamente o Model\n  registerOnTouched(func: any): void {\n    this.onTouched = func;\n  }\n\n  registerOnValidatorChange(fn: () => void) {\n    this.validatorChange = fn;\n  }\n\n  updateModel(value: any) {\n    // Quando o input nÃ£o possui um formulÃ¡rio, entÃ£o esta funÃ§Ã£o nÃ£o Ã© registrada\n    if (this.onChangePropagate) {\n      this.onChangePropagate(value);\n    }\n  }\n\n  validate(c: AbstractControl): { [key: string]: any; } {\n\n    if (requiredFailed(this.required, this.disabled, this.getScreenValue())) {\n      return { required: {\n        valid: false,\n      }};\n    }\n\n    if (maxlengthFailed(this.maxlength, this.getScreenValue())) {\n      return { maxlength: {\n        valid: false,\n      }};\n    }\n\n    if (minlengthFailed(this.minlength, this.getScreenValue())) {\n      return { minlength: {\n        valid: false,\n      }};\n    }\n\n    if (patternFailed(this.pattern, c.value)) {\n      this.validatePatternOnWriteValue(c.value);\n      return { pattern: {\n        valid: false,\n      }};\n    }\n\n    return this.extraValidation(c);\n  }\n\n  // FunÃ§Ã£o implementada do ControlValueAccessor\n  writeValue(value: any) {\n    this.writeValueModel(value);\n  }\n\n  protected validateModel() {\n    if (this.validatorChange) {\n      this.validatorChange();\n    }\n  }\n\n  // MÃ©todo que receberÃ¡ o valor do model\n  abstract writeValueModel(value: any): void;\n\n  // ValidaÃ§Ãµes do campo\n  abstract extraValidation(c: AbstractControl): { [key: string]: any; };\n\n  // Deve retornar o valor do campo\n  abstract getScreenValue(): string;\n\n  // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).\n  private validatePatternOnWriteValue(value: string) {\n    if (value && this.passedWriteValue) {\n\n      setTimeout(() => {\n        this.updateModel(value);\n      });\n\n      this.passedWriteValue = false;\n    }\n  }\n\n}\n","import { AfterViewInit, Component, ElementRef, forwardRef, Input, ViewChild } from '@angular/core';\nimport { AbstractControl, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nimport { convertToInt } from '../../../utils/util';\nimport { ThfInputBaseComponent } from '../thf-input/thf-input-base.component';\n\nconst THF_DECIMAL_DEFAULT_DECIMALS_LENGTH = 2;\nconst THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH = 13;\n\n/**\n *\n * @docsExtends ThfInputBaseComponent\n *\n * @description\n *\n * thf-decimal Ã© um input especÃ­fico para receber apenas nÃºmeros decimais.\n * Quando utilizado, o componente terÃ¡ comportamento de um campo de 'text' com algumas caracterÃ­sticas:\n *\n * - Aceita apenas nÃºmeros;\n * - Utiliza ',' como separador de decimal;\n * - Utiliza '.' para separaÃ§Ã£o de milhar;\n * - Ã possÃ­vel configurar a quantidade de casas decimais e a quantidade de digitos do campo.\n *\n * @example\n *\n * <example name=\"thf-decimal-basic\" title=\"Totvs Decimal Basic\">\n *  <file name=\"sample-thf-decimal-basic/sample-thf-decimal-basic.component.html\"> </file>\n *  <file name=\"sample-thf-decimal-basic/sample-thf-decimal-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-decimal-labs\" title=\"Totvs Decimal Labs\">\n *  <file name=\"sample-thf-decimal-labs/sample-thf-decimal-labs.component.html\"> </file>\n *  <file name=\"sample-thf-decimal-labs/sample-thf-decimal-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-decimal-hourly-wage\" title=\"Totvs Decimal - Hourly Wage\">\n *  <file name=\"sample-thf-decimal-hourly-wage/sample-thf-decimal-hourly-wage.component.html\"> </file>\n *  <file name=\"sample-thf-decimal-hourly-wage/sample-thf-decimal-hourly-wage.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-decimal-hourly-wage-reactive-form\" title=\"Totvs Decimal - Hourly Wage Reactive Form\">\n *  <file name=\"sample-thf-decimal-hourly-wage-reactive-form/sample-thf-decimal-hourly-wage-reactive-form.component.html\"> </file>\n *  <file name=\"sample-thf-decimal-hourly-wage-reactive-form/sample-thf-decimal-hourly-wage-reactive-form.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-decimal',\n  templateUrl: './thf-decimal.component.html',\n  providers: [\n  {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ThfDecimalComponent),\n    multi: true,\n  },\n  {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => ThfDecimalComponent),\n    multi: true,\n  }\n  ]\n})\nexport class ThfDecimalComponent extends ThfInputBaseComponent implements AfterViewInit {\n\n  private _decimalsLength?: number = THF_DECIMAL_DEFAULT_DECIMALS_LENGTH;\n  private _thousandMaxlength?: number = THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH;\n\n  private decimalSeparator: string = ',';\n  private fireChange: boolean = false;\n  private isKeyboardAndroid: boolean = false;\n  private minusSign: string = '-';\n  private oldDotsLength = null;\n  private thousandSeparator: string = '.';\n  private valueBeforeChange: any;\n\n  private regex = {\n    thousand: new RegExp('\\\\' + '.' , 'g'),\n    decimal: new RegExp('\\\\' + ',' , 'g')\n  };\n\n  @ViewChild('inp', {read: ElementRef, static: true }) inputEl: ElementRef;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Quantidade mÃ¡xima de casas decimais.\n   *\n   * @default `2`\n   */\n  @Input('t-decimals-length') set decimalsLength(value: number) {\n    this._decimalsLength = convertToInt(value, THF_DECIMAL_DEFAULT_DECIMALS_LENGTH);\n\n  }\n\n  get decimalsLength() {\n    return this._decimalsLength;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * NÃºmero mÃ¡ximo de dÃ­gitos antes do separador de decimal. O valor mÃ¡ximo possÃ­vel deve ser menor ou igual a 13.\n   *\n   * @default `13`\n   */\n  @Input('t-thousand-maxlength') set thousandMaxlength(value: number) {\n    const thousandMaxlength = convertToInt(value, THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH);\n\n    this._thousandMaxlength = thousandMaxlength <= THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH ?\n    thousandMaxlength : THF_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH;\n  }\n\n  get thousandMaxlength() {\n    return this._thousandMaxlength;\n  }\n\n  constructor(private el: ElementRef) {\n    super();\n    this.isKeyboardAndroid = !!navigator.userAgent.match(/Android/i);\n  }\n\n  ngAfterViewInit() {\n    this.putFocus();\n    this.setPaddingInput();\n  }\n\n  clear(value) {\n    this.callOnChange(value);\n    this.controlChangeEmitter();\n  }\n\n  extraValidation(c: AbstractControl): { [key: string]: any; } {\n    return null;\n  }\n\n  getScreenValue() {\n    return (this.inputEl) ? this.inputEl.nativeElement.value : '';\n  }\n\n  hasInvalidClass() {\n    return (\n      this.el.nativeElement.classList.contains('ng-invalid') &&\n      this.el.nativeElement.classList.contains('ng-dirty') &&\n      this.getScreenValue() !== ''\n    );\n  }\n\n  hasLetters(value: string = '') {\n    return value.match(/[a-zA-Z:;+=_Â´^~\"'@#$%Â¨&*()/\\\\|]+/);\n  }\n\n  isValidNumber(event: any): boolean {\n    // - event.key nÃ£o existia em alguns browsers, como Samsung browser e Firefox.\n    const keyValue = <any> String.fromCharCode(event.which);\n    const validKey = event.which !== 8 && event.which !== 0;\n\n    return !this.hasLetters(keyValue) && validKey;\n  }\n\n  // funÃ§Ã£o responsÃ¡vel por adicionar os zeroes com as casa decimais ao sair do campo.\n  onBlur(event: any) {\n    const value = event.target.value;\n\n    if (value) {\n\n      if (this.hasLetters(value) || this.containsMoreThanOneComma(value)) {\n        this.setViewValue('');\n        this.callOnChange(undefined);\n        return;\n      }\n\n      const valueWithoutThousandSeparator = this.formatValueWithoutThousandSeparator(value);\n      this.setViewValue(this.formatToViewValue(valueWithoutThousandSeparator));\n    }\n\n    this.blur.emit();\n    this.controlChangeEmitter();\n  }\n\n  onFocus(event: FocusEvent) {\n    // Atualiza valor da variÃ¡vel que serÃ¡ usada para verificar se o campo teve alteraÃ§Ã£o\n    this.valueBeforeChange = this.getScreenValue();\n\n    // Dispara evento quando o usuÃ¡rio entrar no campo\n    // Este evento tambÃ©m Ã© disparado quando o campo inicia com foco.\n    this.enter.emit();\n  }\n\n  onInput(event: any) {\n    const selectionStart = event.target.selectionStart;\n    const selectionEnd = event.target.selectionEnd;\n\n    let modelValue;\n    let viewValue;\n\n    // - Browsers nativos do Android ex: Samsung Browser.\n    if (this.isKeyboardAndroid) {\n      this.onInputKeyboardAndroid(event);\n    }\n\n    modelValue = this.formatValueWithoutThousandSeparator(event.target.value);\n    modelValue = this.addZeroBefore(modelValue);\n    viewValue = this.formatMask(modelValue);\n\n    // validaÃ§Ã£o para nÃ£o quebrar IE com placeholder definido e Input vazio\n    if (viewValue) {\n      this.setViewValue(viewValue);\n      this.setCursorInput(event, selectionStart, selectionEnd);\n    }\n\n    this.callOnChange(this.formatToModelValue(modelValue));\n  }\n\n  onInputKeyboardAndroid(event: any) {\n    const inputValue = event.target.value;\n    const selectionStart = event.target.selectionStart;\n    const hasLetters = this.hasLetters(inputValue);\n\n    if (hasLetters) {\n      this.setViewValue(inputValue.replace(hasLetters[0], ''));\n\n      return event.preventDefault();\n    } else {\n      const position = selectionStart - 1;\n      const key = inputValue.charAt(position);\n\n      this.setPositionValue(event);\n\n      if (this.isValidKey(event, key)) {\n        this.setViewValue(inputValue);\n      }\n    }\n  }\n\n  onKeyPress(event: KeyboardEvent) {\n    this.isValidKey(event);\n  }\n\n  setPaddingInput() {\n    setTimeout(() => {\n      const selectorIcons = '.thf-field-icon-container:not(.thf-field-icon-container-left) > .thf-icon';\n      let icons = this.el.nativeElement.querySelectorAll(selectorIcons).length;\n      if (this.clean) {\n        icons++;\n      }\n      if (icons) {\n        this.inputEl.nativeElement.style.paddingRight = `${icons * 36}px`;\n      }\n    });\n  }\n\n  writeValueModel(value) {\n    if (this.inputEl) {\n      if (value || value === 0) {\n        const formatedViewValue = this.formatToViewValue(value);\n        this.setViewValue(formatedViewValue);\n      } else {\n        this.setViewValue('');\n      }\n    }\n\n    if (value) {\n      this.change.emit(value);\n    }\n  }\n\n  // reponsÃ¡vel por adicionar 0 antes da virgula (decimalSeparator).\n  private addZeroBefore(value) {\n    const isDecimalSeparator = value === this.decimalSeparator;\n\n    return isDecimalSeparator ? `0${value}` : value;\n  }\n\n  private containsComma(value) {\n    return value.includes(this.decimalSeparator);\n  }\n\n  private containsMoreThanOneComma(value: string = '') {\n    const foundComma = value.match(/,/g);\n\n    return !!(foundComma && foundComma.length > 1);\n  }\n\n  private controlChangeEmitter() {\n    const elementValue = this.getScreenValue();\n\n    // Emite o evento change manualmente quando o campo Ã© alterado\n    // Este evento Ã© controlado manualmente devido ao preventDefault existente na mÃ¡scara\n    // e devido ao controle do t-clean, que tambÃ©m precisa emitir change\n    if (elementValue !== this.valueBeforeChange) {\n      this.fireChange = true;\n      setTimeout(() => {\n        if (this.fireChange) {\n          this.change.emit(elementValue);\n        }\n      }, 200);\n    }\n  }\n\n  private formatMask(value: string) {\n    // necessÃ¡rio para nÃ£o adicionar . nas casa decimais.\n    // por exemplo: 12.345,123.45 (errado)\n    // 12.345,12345 (correto)\n\n    if (value.match(this.regex.decimal)) {\n      const regex = new RegExp('(\\\\d)(?=(\\\\d{3})+(?!\\\\d),)', 'g');\n      return value.toString().replace(regex, '$1.');\n    }\n\n    return value.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1.');\n  }\n\n  private formatToModelValue(value: string) {\n    const formattedValue = this.replaceCommaToDot(value);\n    const parsedValue = formattedValue ? parseFloat(Number(formattedValue).toFixed(this.decimalsLength)) : undefined;\n\n    return parsedValue === 0 || parsedValue ? parsedValue : undefined;\n  }\n\n  private formatToViewValue(value: string) {\n    let formatedNumber;\n    let numberValue;\n    let valueBeforeDot;\n    let valueAfterDot;\n\n    // - NecessÃ¡rio para tratar valores que contenham decimalSeparator\n    value = this.replaceCommaToDot(value);\n\n    numberValue = Number(value).toFixed(this.decimalsLength);\n\n    valueBeforeDot = this.getValueBeforeSeparator(numberValue, this.thousandSeparator);\n    valueAfterDot = this.getValueAfterSeparator(numberValue, this.thousandSeparator);\n\n    formatedNumber = this.formatMask(valueBeforeDot);\n\n    if (this.decimalsLength === 0) {\n      return formatedNumber;\n    } else {\n      return formatedNumber + this.decimalSeparator + valueAfterDot;\n    }\n\n  }\n\n  private formatValueWithoutThousandSeparator(value: string = '') {\n    return value.toString().replace(this.regex.thousand, '');\n  }\n\n  private getValueAfterSeparator(value = '', separator) {\n    return value.split(separator)[1] || '';\n  }\n\n  private getValueBeforeSeparator(value = '', separator) {\n    return value.split(separator)[0] || '';\n  }\n\n  private hasLessDot(value) {\n    if (value) {\n      const dots = value.match(this.regex.thousand);\n      const dotsLength = dots && dots.length;\n\n      if (dotsLength < this.oldDotsLength) {\n        this.oldDotsLength = dotsLength;\n        return true;\n      }\n    }\n\n    if (!value) { this.oldDotsLength = null; }\n\n    return false;\n  }\n\n  private hasMoreDot(value) {\n    if (value) {\n      const dots = value.match(this.regex.thousand);\n      const dotsLength = dots && dots.length;\n\n      if (dotsLength > this.oldDotsLength) {\n          this.oldDotsLength = dotsLength;\n          return true;\n      }\n    }\n\n    if (!value) { this.oldDotsLength = null; }\n\n    return false;\n  }\n\n  private hasMinusSignInvalidPosition(event: any): boolean {\n    const keyIsMinusSign = event.key === this.minusSign;\n    const selectionStart = event.target.selectionStart;\n\n    return keyIsMinusSign && selectionStart !== 0;\n  }\n\n  private isInvalidKey(event: any, charCode: any) {\n    const isInvalidNumber = !this.isValidNumber(event);\n\n    return this.verifyInsertComma(event) || this.verifyThousandLength(event) ||\n      this.verifyValueAfterComma(event) || this.verifyInsertMinusSign(event) ||\n      this.hasMinusSignInvalidPosition(event) || isInvalidNumber ||\n      this.validateCursorPositionBeforeSeparator(event) || this.verifyDecimalLengthIsZeroAndKeyPressedIsComma(charCode);\n  }\n\n  private isKeyDecimalSeparator(event) {\n    return event.key === this.decimalSeparator || event.char === this.decimalSeparator;\n  }\n\n  private isPositionAfterDecimalSeparator(positionCursor, value) {\n    const indexComma = value && value.indexOf(this.decimalSeparator);\n\n    if (indexComma && this.decimalsLength > 0) {\n      return positionCursor > indexComma;\n    }\n  }\n\n  private isSelectionStartDifferentSelectionEnd(target: any) {\n    return target.selectionStart !== target.selectionEnd;\n  }\n\n  private isValidKey(event: any, key?: string) {\n    const charCode = event.which || event.keyCode;\n    const validKey = event.which === 8 || event.which === 0;\n\n    if (validKey && !this.isKeyboardAndroid) {\n      return;\n    }\n\n    if (key) {\n      event.key = key;\n    }\n\n    if (this.isInvalidKey(event, charCode)) {\n      event.preventDefault();\n      return false;\n    }\n    return true;\n  }\n\n  // Quando decimalsLength for 0 nÃ£o deve permitir informar vÃ­rgula (decimalSeparator)\n  private verifyDecimalLengthIsZeroAndKeyPressedIsComma(charCode: number) {\n    return (charCode === 44 && this.decimalsLength === 0);\n  }\n\n  private putFocus() {\n    if (this.focus) {\n      this.inputEl.nativeElement.focus();\n    }\n  }\n\n  private setInitialSelectionRange(target: any, selectionStart, selectionEnd) {\n    if (selectionStart === 1 && selectionEnd === 1) {\n      return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);\n    }\n    return target.setSelectionRange(selectionStart - 1, selectionEnd - 1);\n  }\n\n  private replaceAt(value, index, replace) {\n    return value.substring(0, index) + replace + value.substring(index + 1);\n  }\n\n  private replaceCommaToDot(value: string = '') {\n    return value.toString().replace(this.regex.decimal, '.');\n  }\n\n  private setCursorInput(event, selectionStart, selectionEnd) {\n    const target = event.target;\n    const viewValue = target.value;\n\n    // Caso houver mais . do que anteriormente soma o valor com 1.\n    if (this.hasMoreDot(viewValue) || viewValue === ('0' + this.decimalSeparator)) {\n      return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);\n    }\n\n    // Caso houver menos . do que anteriormente subtrai o valor por 1.\n    if (this.hasLessDot(viewValue)) {\n      this.setInitialSelectionRange(target, selectionStart, selectionEnd);\n    }\n    return target.setSelectionRange(selectionStart, selectionEnd);\n  }\n\n  private setPositionValue(event: any) {\n    const value = event.target.value;\n    const position = event.target.selectionStart - 1;\n\n    if (position > 0 && event.key === this.minusSign) {\n      event.target.value = value.substring(0, position) + value.substr(position + 1);\n    }\n  }\n\n  private setViewValue(value: string) {\n    this.inputEl.nativeElement.value = value;\n  }\n\n  private validateCursorPositionBeforeSeparator(event: any): boolean {\n    const target = event.target;\n    const originalValue = this.formatValueWithoutThousandSeparator(target.value);\n    const valueBeforeSeparator = this.getValueBeforeSeparator(target.value, this.decimalSeparator);\n    const valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);\n\n    if (this.isSelectionStartDifferentSelectionEnd(target)) {\n      return false;\n    }\n    return target.selectionStart <= valueBeforeSeparator.length &&\n    valueBeforeSeparatorOriginal.length === this.thousandMaxlength &&\n    !this.isKeyDecimalSeparator(event);\n  }\n\n  private verifyThousandLength(event: any): boolean {\n    const target = event.target;\n    const originalValue = this.formatValueWithoutThousandSeparator(target.value);\n    const valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);\n\n    if (this.isSelectionStartDifferentSelectionEnd(target)) {\n      return false;\n    }\n    return valueBeforeSeparatorOriginal.length >= this.thousandMaxlength &&\n      !this.isKeyDecimalSeparator(event) &&\n      this.isPositionAfterDecimalSeparator(target.selectionStart - this.decimalsLength, target.value);\n  }\n\n  private verifyInsertComma(e: any): boolean {\n    const hasComma = this.containsComma(e.target.value);\n\n    return hasComma && e.key === this.decimalSeparator;\n  }\n\n  private verifyInsertMinusSign(event: any): boolean {\n    const value = event.target.value;\n    const indexMinusSign = (value.lastIndexOf(this.minusSign) !== -1);\n    const positionMinusSign = value.lastIndexOf('-') ;\n    const occurancesMinusSign = value.match(new RegExp('-', 'g'));\n\n    if (this.isKeyboardAndroid && indexMinusSign && occurancesMinusSign.length > 1) {\n      event.target.value = this.replaceAt(value, positionMinusSign, '');\n    }\n    return indexMinusSign && event.key === this.minusSign;\n  }\n\n  private verifyValueAfterComma(event: any): boolean {\n    const value = event.target.value;\n    const selectionStart = event.target.selectionStart;\n    const valueAfterSeparator = this.getValueAfterSeparator(value, this.decimalSeparator);\n\n    return this.isPositionAfterDecimalSeparator(selectionStart, value) && valueAfterSeparator.length >= this.decimalsLength;\n  }\n\n}\n","import { AfterViewInit, ElementRef, HostListener, ViewChild } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\n\nimport { ThfInputBaseComponent } from '../thf-input/thf-input-base.component';\n\nexport abstract class ThfInputGeneric extends ThfInputBaseComponent implements AfterViewInit {\n\n  @ViewChild('inp', {read: ElementRef, static: true }) inputEl: ElementRef;\n\n  type = 'text';\n\n  el: ElementRef;\n  valueBeforeChange: any;\n  timeoutChange: any;\n\n  constructor(el: ElementRef) {\n    super();\n\n    this.el = el;\n  }\n\n  ngAfterViewInit() {\n    this.afterViewInit();\n  }\n\n  afterViewInit() {\n    this.putFocus();\n    if (this.type !== 'password') {\n      this.setPaddingInput();\n    }\n  }\n\n  setPaddingInput() {\n    setTimeout(() => {\n      const selectorIcons = '.thf-field-icon-container:not(.thf-field-icon-container-left) > .thf-icon';\n      let icons = this.el.nativeElement.querySelectorAll(selectorIcons).length;\n      if (this.clean) {\n        icons++;\n      }\n      if (icons) {\n        this.inputEl.nativeElement.style.paddingRight = `${icons * 36}px`;\n      }\n    });\n  }\n\n  putFocus() {\n    if (this.focus) {\n      this.inputEl.nativeElement.focus();\n    }\n  }\n\n  @HostListener('keydown', ['$event']) onKeydown(e: any) {\n    if (this.mask && !this.readonly && e.target.keyCode !== 229) {\n      this.eventOnBlur(e);\n      this.objMask.keydown(e);\n    }\n  }\n\n  @HostListener('keyup', ['$event']) onKeyup(e: any) {\n    if (this.mask && !this.readonly) {\n      if (e.target.keyCode !== 229) {\n        this.eventOnBlur(e);\n        this.objMask.keyup(e);\n      }\n      this.callOnChange(this.objMask.valueToModel);\n    }\n  }\n\n  eventOnInput(e: any) {\n    if (!this.mask) {\n      const value = this.validMaxLength(this.maxlength, e.target.value);\n      this.inputEl.nativeElement.value = value;\n      this.callOnChange(value);\n    }\n  }\n\n  validMaxLength(maxlength: number, value: string) {\n    return ((maxlength || maxlength === 0) && value.length > maxlength) ? value.toString().substring(0, maxlength) : value;\n  }\n\n  eventOnFocus(e: any) {\n    // Atualiza valor da variÃ¡vel que serÃ¡ usada para verificar se o campo teve alteraÃ§Ã£o\n    this.valueBeforeChange = this.inputEl.nativeElement.value;\n\n    // Dispara evento quando o usuÃ¡rio entrar no campo\n    // Este evento tambÃ©m Ã© disparado quando o campo inicia com foco.\n    this.enter.emit();\n  }\n\n  eventOnBlur(e: any) {\n    if (this.mask) {\n      this.objMask.blur(e);\n    }\n\n    if (e.type === 'blur') {\n      this.blur.emit();\n      this.controlChangeEmitter();\n    }\n\n  }\n\n  controlChangeEmitter() {\n    const elementValue = this.inputEl.nativeElement.value;\n\n    // Emite o evento change manualmente quando o campo Ã© alterado\n    // Este evento Ã© controlado manualmente devido ao preventDefault existente na mÃ¡scara\n    // e devido ao controle do t-clean, que tambÃ©m precisa emitir change\n    if (elementValue !== this.valueBeforeChange) {\n      clearTimeout(this.timeoutChange);\n      this.timeoutChange = setTimeout(() => {\n        this.change.emit(elementValue);\n      }, 200);\n    }\n  }\n\n  eventOnClick(e: any) {\n    // Atualiza a posiÃ§Ã£o do cursor ao clicar\n    if (this.mask) {\n      this.objMask.click(e);\n    }\n  }\n\n  hasInvalidClass() {\n    return (\n      this.el.nativeElement.classList.contains('ng-invalid') &&\n      this.el.nativeElement.classList.contains('ng-dirty') &&\n      this.inputEl.nativeElement.value !== ''\n    );\n  }\n\n  getErrorPattern() {\n    return (this.errorPattern !== '' && this.hasInvalidClass()) ? this.errorPattern : '';\n  }\n\n  validateClassesForPattern() {\n    const value = this.getScreenValue();\n    const element = this.el.nativeElement;\n\n    if (value && !this.verifyPattern(this.pattern, value)) {\n      element.classList.add('ng-invalid');\n      element.classList.add('ng-dirty');\n    } else {\n      element.classList.remove('ng-invalid');\n    }\n  }\n\n  verifyPattern(pattern: string, value: any) {\n    return new RegExp(pattern).test(value);\n  }\n\n  clear(value) {\n    this.callOnChange(value);\n    this.controlChangeEmitter();\n  }\n\n  writeValueModel(value) {\n    this.passedWriteValue = true;\n    if (this.inputEl) {\n      if (value) {\n        if (this.mask) {\n          this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));\n\n          // Se o model for definido como formatado, entÃ£o precisa atualizÃ¡-lo no primeiro acesso\n          if (this.objMask.formatModel) {\n            this.callUpdateModelWithTimeout(this.objMask.valueToModel);\n\n          }\n        } else {\n          this.inputEl.nativeElement.value = value;\n        }\n      } else {\n        // Se o valor for indefinido, deve limpar o campo.\n        this.inputEl.nativeElement.value = '';\n      }\n    }\n\n    // Emite evento quando o model Ã© atualizado, inclusive a primeira vez\n    if (value) {\n      this.changeModel.emit(value);\n    }\n  }\n\n  getScreenValue() {\n    const screenValue = this.inputEl && this.inputEl.nativeElement.value || undefined;\n\n    if (this.type === 'number') {\n      const parsedValue = parseFloat(screenValue);\n      return parsedValue || parsedValue === 0 ? parsedValue : null;\n    } else {\n      return screenValue;\n    }\n  }\n\n  abstract extraValidation(c: AbstractControl): { [key: string]: any; };\n\n}\n","import { AfterViewInit, Component, ElementRef, forwardRef, OnDestroy } from '@angular/core';\nimport { AbstractControl, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nimport { ThfInputGeneric } from '../thf-input-generic/thf-input-generic';\n\n/**\n * @docsExtends ThfInputBaseComponent\n *\n * @description\n *\n * thf-email Ã© um input especÃ­fico para receber E-mail, com o pattern jÃ¡ configurado.\n *\n * @example\n *\n * <example name=\"thf-email-basic\" title=\"Totvs Email Basic\">\n *  <file name=\"sample-thf-email-basic/sample-thf-email-basic.component.html\"> </file>\n *  <file name=\"sample-thf-email-basic/sample-thf-email-basic.component.ts\"> </file>\n *  <file name=\"sample-thf-email-basic/sample-thf-email-basic.component.e2e-spec.ts\"> </file>\n *  <file name=\"sample-thf-email-basic/sample-thf-email-basic.component.po.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-email-labs\" title=\"Totvs Email Labs\">\n *  <file name=\"sample-thf-email-labs/sample-thf-email-labs.component.html\"> </file>\n *  <file name=\"sample-thf-email-labs/sample-thf-email-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-email-newsletter\" title=\"Totvs Email - Newsletter\">\n *  <file name=\"sample-thf-email-newsletter/sample-thf-email-newsletter.component.html\"> </file>\n *  <file name=\"sample-thf-email-newsletter/sample-thf-email-newsletter.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-email',\n  templateUrl: '../thf-input/thf-input.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ThfEmailComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => ThfEmailComponent),\n      multi: true\n    }\n  ]\n})\nexport class ThfEmailComponent extends ThfInputGeneric implements AfterViewInit, OnDestroy {\n\n  icon = 'thf-icon-mail';\n\n  maxlength: number = 254;\n\n  type = 'email';\n\n  pattern = '^([\\\\w-]+(?:\\\\.[\\\\w-]+)*)@((?:[\\\\w-]+\\\\.)*\\\\w[\\\\w-]{0,66})\\\\.([a-z]{2,6}(?:\\\\.[a-z]{2})?)$';\n\n  mask = '';\n\n  private listener = this.validateClassesForPattern.bind(this);\n\n  constructor(el: ElementRef) {\n    super(el);\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n    // Se nÃ£o tem ngModel ou reactive form adiciona validaÃ§Ã£o com classes css\n      if (!this.onChangePropagate) {\n        this.inputEl.nativeElement.addEventListener('keyup', this.listener);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    if (!this.onChangePropagate) {\n      this.inputEl.nativeElement.removeEventListener('keyup', this.listener);\n    }\n  }\n\n    extraValidation(c: AbstractControl): { [key: string]: any } {\n    return null;\n  }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { convertToBoolean, getShortBrowserLanguage } from '../../../utils/util';\n\n/**\n * @docsPrivate\n *\n * Componente de uso interno, responsÃ¡vel por atribuir uma label para o campo\n */\n@Component({\n  selector: 'thf-field-container',\n  templateUrl: './thf-field-container.component.html'\n})\nexport class ThfFieldContainerComponent {\n\n  private _optional: boolean = false;\n\n  /** Label do campo. */\n  @Input('t-label') label?: string;\n\n  /** Texto de apoio do campo. */\n  @Input('t-help') help: string;\n\n  /** Indica se o campo serÃ¡ opcional. */\n  @Input('t-optional') set optional(value: boolean) {\n    this._optional = convertToBoolean(value);\n  }\n\n  get optional() {\n    return this._optional;\n  }\n\n  getOptionalText() {\n    const browserLanguage = getShortBrowserLanguage();\n\n    const optional = {\n      pt: '(Opcional)',\n      en: '(Optional)',\n      es: '(Opcional)'\n    };\n\n    return optional[browserLanguage];\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente de uso interno, responsÃ¡vel por gerar uma margem inferior nos componentes que utilizam o thf-field-container.\n * Essa margem inferior pode conter uma mensagem de erro.\n */\n@Component({\n  selector: 'thf-field-container-bottom',\n  templateUrl: './thf-field-container-bottom.component.html'\n})\nexport class ThfFieldContainerBottomComponent {\n\n  /**\n   * Mensagem que serÃ¡ apresentada quando o pattern ou a mÃ¡scara nÃ£o for satisfeita.\n   * Obs: Esta mensagem nÃ£o Ã© apresentada quando o campo estiver vazio, mesmo que ele seja requerido.\n   */\n  @Input('t-error-pattern') errorPattern?: string = '';\n\n}\n","import { Component, ElementRef, forwardRef } from '@angular/core';\nimport { AbstractControl, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nimport { ThfInputGeneric } from '../thf-input-generic/thf-input-generic';\n\n/**\n * @docsExtends ThfInputBaseComponent\n *\n * @description\n * O thf-login Ã© um input especÃ­fico para login. JÃ¡ possui tipo, estilo e Ã­cone predefinidos.\n *\n * @example\n *\n * <example name=\"thf-login-basic\" title=\"Totvs Login Basic\">\n *  <file name=\"sample-thf-login-basic/sample-thf-login-basic.component.html\"> </file>\n *  <file name=\"sample-thf-login-basic/sample-thf-login-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-login-labs\" title=\"Totvs Login Labs\">\n *  <file name=\"sample-thf-login-labs/sample-thf-login-labs.component.html\"> </file>\n *  <file name=\"sample-thf-login-labs/sample-thf-login-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-login-confirm\" title=\"Totvs Login - Confirm Identity\">\n *  <file name=\"sample-thf-login-confirm/sample-thf-login-confirm.component.html\"> </file>\n *  <file name=\"sample-thf-login-confirm/sample-thf-login-confirm.component.ts\"> </file>\n * </example>\n *\n */\n@Component({\n  selector: 'thf-login',\n  templateUrl: './thf-login.component.html',\n  providers: [\n  {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ThfLoginComponent),\n    multi: true,\n  },\n  {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => ThfLoginComponent),\n    multi: true,\n  }]\n})\nexport class ThfLoginComponent extends ThfInputGeneric {\n\n  type = 'text';\n\n  constructor(el: ElementRef) {\n    super(el);\n  }\n\n  extraValidation(c: AbstractControl): { [key: string]: any; } {\n    return null;\n  }\n\n}\n","import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { convertToBoolean, isTypeof } from '../../../utils/util';\nimport { requiredFailed } from '../validators';\n\nimport { ThfLookupColumn } from './interfaces/thf-lookup-column.interface';\nimport { ThfLookupFilter } from './interfaces/thf-lookup-filter.interface';\nimport { ThfLookupFilterService } from './services/thf-lookup-filter.service';\nimport { ThfLookupLiterals } from './interfaces/thf-lookup-literals.interface';\n\n/**\n * @description\n *\n * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviÃ§o. Nesta janela Ã© possÃ­vel buscar e\n * selecionar o registro que serÃ¡ enviado para o campo. O `thf-lookup` permite que o usuÃ¡rio digite um valor e pressione a tecla *TAB* para\n * buscar um registro.\n *\n * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo serÃ¡ limpado.\n * No segundo caso ocorrerÃ¡ apÃ³s este perder o foco; ambos os casos o campo ficarÃ¡ invÃ¡lido quando requerido.\n *\n * Este componente nÃ£o Ã© recomendado quando a busca dos dados possuir poucas informaÃ§Ãµes, para isso utilize outros componentes como o\n * `thf-select` ou o `thf-combo`.\n */\nexport abstract class ThfLookupBaseComponent implements ControlValueAccessor, OnDestroy, OnInit, Validator {\n\n  private _disabled?: boolean = false;\n  private _filterService: ThfLookupFilter | string;\n  private _focus?: boolean = false;\n  private _required?: boolean = false;\n\n  protected getSubscription: Subscription;\n  protected keysDescription: Array<any>;\n  protected oldValue: string = '';\n  protected valueToModel;\n\n  private onChangePropagate: any = null;\n  // tslint:disable-next-line\n  private onTouched: any = null;\n  private validatorChange: any;\n\n  service: any;\n\n  /**\n   * Label do campo.\n   *\n   * > Quando utilizar esta propriedade o seu valor serÃ¡ utilizado como tÃ­tulo da modal do componente caso nÃ£o tenha\n   * sido definido um `modalTitle` na propriedade `t-literals`.\n   */\n  @Input('t-label') label?: string;\n\n  /**\n   * @description\n   *\n   * Objeto com as literais usadas no `thf-lookup`.\n   *\n   * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponÃ­veis:\n   *\n   * ```\n   *  const customLiterals: ThfLookupLiterals = {\n   *    modalPrimaryActionLabel: 'Select',\n   *    modalSecondaryActionLabel: 'Cancel',\n   *    modalPlaceholder: 'Search Value',\n   *    modalTableNoColumns: 'No columns',\n   *    modalTableNoData: 'No data',\n   *    modalTableLoadingData: 'Loading data',\n   *    modalTableLoadMoreData: 'Load more',\n   *    modalTitle: 'Select a user'\n   *  };\n   * ```\n   *\n   * Ou passando apenas as literais que deseja customizar:\n   *\n   * ```\n   *  const customLiterals: ThfLookupLiterals = {\n   *    modalPrimaryActionLabel: 'Select'\n   *  };\n   * ```\n   *\n   * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\n   *\n   * ```\n   * <thf-lookup\n   *   [t-literals]=\"customLiterals\">\n   * </thf-lookup>\n   * ```\n   *\n   * > O objeto padrÃ£o de literais serÃ¡ traduzido de acordo com o idioma do browser (pt, en, es).\n   */\n  @Input('t-literals') literals?: ThfLookupLiterals;\n\n  /** Texto de apoio do campo. */\n  @Input('t-help') help?: string;\n\n  /** Mensagem que aparecerÃ¡ enquanto o campo nÃ£o estiver preenchido. */\n  @Input('t-placeholder') placeholder?: string = '';\n\n  /** Nome e Id do componente. */\n  @Input('name') name: string;\n\n  /**\n   * @description\n   *\n   * Indica a coluna que serÃ¡ utilizada como valor do campo.\n   *\n   * > AtenÃ§Ã£o: Caso nÃ£o seja passada ou tenha o conteÃºdo incorreto, nÃ£o irÃ¡ atualizar o model do formulÃ¡rio.\n   */\n  @Input('t-field-value') fieldValue: string;\n\n  /** Indica a coluna que serÃ¡ utilizada como descriÃ§Ã£o do campo e como filtro dentro da janela. */\n  @Input('t-field-label') fieldLabel: string;\n\n  /** Valor que serÃ¡ repassado como parÃ¢metro aos mÃ©todos do serviÃ§o que implementam a interface `ThfLookupFilter`. */\n  @Input('t-filter-params') filterParams?: any;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Formato de exibiÃ§Ã£o do campo.\n   *\n   * Recebe uma funÃ§Ã£o que deve retornar uma *string* com o/os valores do objeto formatados para exibiÃ§Ã£o, por exemplo:\n   *\n   * ```\n   * fieldFormat(obj) {\n   *   return `${obj.id} - ${obj.name}`;\n   * }\n   * ```\n   * > Esta propriedade sobrepÃµe o valor da propriedade `t-field-label` na descriÃ§Ã£o do campo.\n   */\n  @Input('t-field-format') fieldFormat?: (value) => string;\n\n  /**\n   * Lista das colunas da tabela.\n   * Essa propriedade deve receber um array de objetos que implementam a interface ThfLookupColumn.\n   */\n  @Input('t-columns') columns?: Array<ThfLookupColumn>;\n\n  /**\n   * ServiÃ§o responsÃ¡vel por buscar os dados da tabela na janela. Pode ser informado um serviÃ§o que implemente a interface\n   * `ThfLookupFilter` ou uma URL.\n   *\n   * Quando utilizada uma URL de um serviÃ§o, serÃ¡ concatenada nesta URL o valor que deseja-se filtrar, por exemplo:\n   *\n   * ```\n   * url + ?page=1&pageSize=20&filter=Peter\n   * ```\n   *\n   * Se for definido a propriedade `t-filter-params`, o mesmo tambÃ©m serÃ¡ concatenado. Por exemplo, para o\n   * parÃ¢metro `{ age: 23 }` a URL ficaria:\n   *\n   * ```\n   * url + ?page=1&pageSize=20&age=23&filter=Peter\n   * ```\n   *\n   * > Esta URL deve retornar e receber os dados no padrÃ£o de\n   * [API da TOTVS](http://tdn.totvs.com/display/public/INT/Guia+de+implementacao+das+APIs+TOTVS) e utiliza os valores\n   * definidos nas propriedades `t-field-label` e `t-field-value` para a construÃ§Ã£o do `thf-lookup`.\n   */\n  @Input('t-filter-service') set filterService(filterService: ThfLookupFilter | string) {\n    this._filterService = filterService;\n    this.setService(this.filterService);\n  }\n\n  get filterService() {\n    return this._filterService;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se a indicaÃ§Ã£o de campo opcional serÃ¡ exibida.\n   *\n   * > NÃ£o serÃ¡ exibida a indicaÃ§Ã£o se:\n   * - O campo conter `t-required`;\n   * - NÃ£o possuir `t-help` e/ou `t-label`.\n   *\n   * @default `false`\n   */\n  @Input('t-optional') optional: boolean;\n\n  /**\n   * @optional\n   * @description\n   *\n   * Indica que o campo serÃ¡ obrigatÃ³rio. Esta propriedade Ã© desconsiderada quando o campo estÃ¡ desabilitado (t-disabled).\n   *\n   * @default `false`\n   */\n  @Input('t-required') set required(required: boolean) {\n    this._required = convertToBoolean(required);\n\n    this.validateModel(this.valueToModel);\n  }\n\n  get required(): boolean {\n    return this._required;\n  }\n\n  /**\n   * @description\n   *\n   * Indica que o campo iniciarÃ¡ com foco.\n   *\n   * @default false\n   * @optional\n   */\n  @Input('t-focus') set focus(focus: boolean) {\n    this._focus = <any>focus === '' ? true : convertToBoolean(focus);\n  }\n\n  get focus(): boolean {\n    return this._focus;\n  }\n\n  /**\n   * @description\n   *\n   * Indica que o campo serÃ¡ desabilitado.\n   *\n   * @default false\n   * @optional\n   */\n  @Input('t-disabled') set disabled(disabled: boolean) {\n    this._disabled = <any>disabled === '' ? true : convertToBoolean(disabled);\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  /**\n   * Evento serÃ¡ disparado quando ocorrer algum erro na requisiÃ§Ã£o de busca do item.\n   * SerÃ¡ passado por parÃ¢metro o objeto de erro retornado.\n   */\n  @Output('t-error') onError?: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Evento serÃ¡ disparado quando ocorrer alguma seleÃ§Ã£o.\n   * SerÃ¡ passado por parÃ¢metro o objeto com o valor selecionado.\n   */\n  @Output('t-selected') selected?: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(private defaultService: ThfLookupFilterService) {}\n\n  ngOnDestroy() {\n\n    if (this.getSubscription) {\n      this.getSubscription.unsubscribe();\n    }\n  }\n\n  ngOnInit(): void {\n    this.initializeColumn();\n  }\n\n  private initializeColumn(): void {\n    if (this.fieldLabel) {\n      this.keysDescription = [this.fieldLabel];\n    } else {\n      this.keysDescription = [];\n\n      this.keysDescription = this.columns.filter(element => element.fieldLabel)\n        .map(element => element.property);\n    }\n  }\n\n  registerOnValidatorChange(fn: () => void) {\n    this.validatorChange = fn;\n  }\n\n  // FunÃ§Ã£o implementada do ControlValueAccessor.\n  // Usada para interceptar as mudanÃ§as e nÃ£o atualizar automaticamente o Model.\n  registerOnChange(func: any): void {\n    this.onChangePropagate = func;\n  }\n\n  // FunÃ§Ã£o implementada do ControlValueAccessor.\n  // Usada para interceptar as mudanÃ§as e nÃ£o atualizar automaticamente o Model.\n  registerOnTouched(func: any): void {\n    this.onTouched = func;\n  }\n\n  // Seleciona o valor do model.\n  selectValue(valueSelected: any) {\n    this.valueToModel = valueSelected[this.fieldValue];\n\n    this.callOnChange(this.valueToModel);\n    this.selected.emit(valueSelected);\n  }\n\n  callOnChange(value: any) {\n    // Quando o input nÃ£o possui um formulÃ¡rio, entÃ£o esta funÃ§Ã£o nÃ£o Ã© registrada.\n    if (this.onChangePropagate) {\n      this.onChangePropagate(value);\n    }\n  }\n\n  searchById(value: string) {\n    if (typeof(value) === 'string') {\n      value = value.trim();\n    }\n\n    if (value !== '') {\n      this.getSubscription = this.service.getObjectByValue(value, this.filterParams).subscribe(element => {\n        if (element) {\n          this.oldValue = element[this.fieldLabel];\n          this.selectValue(element);\n          this.setViewValue(this.getFormattedLabel(element), element);\n        } else {\n          this.cleanModel();\n        }\n      }, error => {\n        this.cleanModel();\n        this.onError.emit(error);\n      });\n\n    } else {\n      this.cleanModel();\n    }\n  }\n\n  validate(abstractControl: AbstractControl): { [key: string]: any; } {\n    if (requiredFailed(this.required, this.disabled, abstractControl.value)) {\n      return {\n        required: {\n          valid: false,\n        }\n      };\n    }\n  }\n\n  writeValue(value: any): void {\n    if (value && value instanceof Object) {\n      // Esta condiÃ§Ã£o Ã© executada quando Ã© retornado o objeto selecionado do componente Thf Lookup Modal.\n      this.oldValue = value[this.fieldLabel];\n      this.valueToModel = value[this.fieldValue];\n      this.setViewValue(this.getFormattedLabel(value), value);\n    } else if (value) {\n      // Esta condiÃ§Ã£o Ã© executada somente quando Ã© passado o ID para realizar a busca pelo ID.\n      this.searchById(value);\n    } else {\n      this.cleanViewValue();\n    }\n  }\n\n  // Atribui um ou mais valores ao campo.\n  abstract setViewValue(value: any, object: any): void;\n\n  // MÃ©todo com a implementaÃ§Ã£o para abrir o lookup.\n  abstract openLookup(): void;\n\n  protected cleanModel() {\n    this.cleanViewValue();\n    this.callOnChange(undefined);\n  }\n\n  protected cleanViewValue() {\n    this.setViewValue('', {});\n    this.oldValue = '';\n    this.valueToModel = null;\n  }\n\n  // Formata a label do campo.\n  protected getFormattedLabel(value: any): string {\n    return value ? this.keysDescription.map(column => value[column]).join(' - ') : '';\n  }\n\n  // Chama o mÃ©todo writeValue e preenche o model.\n  protected selectModel(value: any) {\n    this.writeValue(value);\n    if (value && value instanceof Object) {\n      this.selectValue(value);\n    }\n  }\n\n  protected validateModel(model: any) {\n    if (this.validatorChange) {\n      this.validatorChange(model);\n    }\n  }\n\n  private setService(service: ThfLookupFilter | string) {\n\n    if (isTypeof(service, 'object')) {\n      this.service = <ThfLookupFilterService> service;\n    }\n\n    if (service && isTypeof(service, 'string')) {\n      this.service = this.defaultService;\n      this.service.setUrl(service);\n    }\n\n  }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { isTypeof } from '../../../../utils/util';\n\nimport { ThfLookupFilter } from '../interfaces/thf-lookup-filter.interface';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * ServiÃ§o padrÃ£o utilizado para filtrar os dados do componente thf-lookup.\n */\n@Injectable()\nexport class ThfLookupFilterService implements ThfLookupFilter {\n\n  private url: string;\n\n  constructor(private httpClient: HttpClient) {}\n\n  getFilteredData(filter: any, page: number, pageSize?: number, filterParams?: any): Observable<any> {\n    const validatedFilterParams = this.validateParams(filterParams);\n\n    return this.httpClient.get(\n      this.url,\n      { params: { page: page.toString(), pageSize: pageSize.toString(), ...validatedFilterParams, filter } }\n    );\n  }\n\n  getObjectByValue(value: string, filterParams?: any): Observable<any> {\n    const validatedFilterParams = this.validateParams(filterParams);\n\n    return this.httpClient.get(`${this.url}/${value}`, { params: validatedFilterParams });\n  }\n\n  setUrl(url: string) {\n    this.url = url;\n  }\n\n  private validateParams(params: any) {\n    return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;\n  }\n\n}\n","import { Injectable, ComponentRef, ComponentFactoryResolver, ApplicationRef, Injector } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThfComponentInjectorService {\n\n  constructor(private componentResolver: ComponentFactoryResolver, private applicationRef: ApplicationRef, private injector: Injector) {}\n\n  // Cria um dinamicamente no ApplicationRef\n  createComponentInApplication(component: any): ComponentRef<any> {\n    const componentRef = this.componentResolver.resolveComponentFactory(component).create(this.injector);\n    this.applicationRef.attachView(componentRef.hostView);\n    const domElem = (<any>componentRef.hostView).rootNodes[0];\n    document.body.appendChild(domElem);\n    return componentRef;\n  }\n\n  // DestrÃ³i o componente e remove do ApplicationRef\n  destroyComponentInApplication(componentRef: any) {\n    this.applicationRef.detachView(componentRef.hostView);\n    componentRef.destroy();\n  }\n}\n","import { EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\n\nimport { Observable , Subscription } from 'rxjs';\nimport { browserLanguage, isTypeof, thfLocaleDefault } from '../../../../utils/util';\n\nimport { ThfLookupColumn } from '../interfaces/thf-lookup-column.interface';\nimport { ThfLookupFilter } from '../interfaces/thf-lookup-filter.interface';\nimport { ThfLookupLiterals } from '../interfaces/thf-lookup-literals.interface';\nimport { ThfLookupResponseApi } from '../interfaces/thf-lookup-response-api.interface';\nimport { ThfModalAction } from '../../../../components/thf-modal';\nimport { ThfModalComponent } from '../../../../components/thf-modal/thf-modal.component';\nimport { thfTableLiteralsDefault } from '../../../thf-table/thf-table-base.component';\n\nexport const thfLookupLiteralsDefault = {\n  en: <ThfLookupLiterals> {\n    modalPrimaryActionLabel: 'Select',\n    modalSecondaryActionLabel: 'Cancel',\n    modalPlaceholder: 'Search',\n    modalTitle: 'Select a record',\n    modalTableNoColumns: thfTableLiteralsDefault.en.noColumns,\n    modalTableNoData: thfTableLiteralsDefault.en.noData,\n    modalTableLoadingData: thfTableLiteralsDefault.en.loadingData,\n    modalTableLoadMoreData: thfTableLiteralsDefault.en.loadMoreData\n  },\n  es: <ThfLookupLiterals> {\n    modalPrimaryActionLabel: 'Seleccionar',\n    modalSecondaryActionLabel: 'Cancelar',\n    modalPlaceholder: 'Buscar',\n    modalTitle: 'Seleccione un registro',\n    modalTableNoColumns: thfTableLiteralsDefault.es.noColumns,\n    modalTableNoData: thfTableLiteralsDefault.es.noData,\n    modalTableLoadingData: thfTableLiteralsDefault.es.loadingData,\n    modalTableLoadMoreData: thfTableLiteralsDefault.es.loadMoreData\n  },\n  pt: <ThfLookupLiterals> {\n    modalPrimaryActionLabel: 'Selecionar',\n    modalSecondaryActionLabel: 'Cancelar',\n    modalPlaceholder: 'Pesquisar',\n    modalTitle: 'Selecione um registro',\n    modalTableNoColumns: thfTableLiteralsDefault.pt.noColumns,\n    modalTableNoData: thfTableLiteralsDefault.pt.noData,\n    modalTableLoadingData: thfTableLiteralsDefault.pt.loadingData,\n    modalTableLoadMoreData: thfTableLiteralsDefault.pt.loadMoreData\n  }\n};\n\n/**\n * @docsPrivate\n *\n * Classe base do componente Thf Lookup Modal.\n */\nexport abstract class ThfLookupModalBaseComponent implements OnDestroy, OnInit {\n\n  private _literals: any;\n  private _title: any;\n\n  hasNext = true;\n  isLoading = false;\n  page = 1;\n  pageSize = 10;\n  primaryAction: ThfModalAction = {\n    action: () => {\n      this.items.forEach(element => {\n        if (element['$selected']) {\n          this.model.emit(element);\n          this.thfModal.close();\n        }\n      });\n    },\n    label: this.literals.modalPrimaryActionLabel\n  };\n  searchValue: string = '';\n  secondaryAction: ThfModalAction = {\n    action: () => {\n      this.model.emit(null);\n      this.thfModal.close();\n    },\n    label: this.literals.modalSecondaryActionLabel\n  };\n  tableLiterals: any;\n\n  private filterSubscription: Subscription;\n  private searchSubscription: Subscription;\n  private showMoreSubscription: Subscription;\n\n  @ViewChild(ThfModalComponent, { static: true }) thfModal: ThfModalComponent;\n\n  /**\n   * Lista das colunas da tabela.\n   * Essa propriedade deve receber um array de objetos que implementam a interface ThfLookupColumn.\n   */\n  @Input('t-columns') columns: Array<ThfLookupColumn>;\n\n  /** Lista de itens da tabela. */\n  @Input('t-items') items: Array<any>;\n\n  /** Objeto com as literais usadas no `thf-lookup-modal`. */\n  @Input('t-literals') set literals(value: ThfLookupLiterals) {\n    if (value instanceof Object && !(value instanceof Array)) {\n      this._literals = {\n        ...thfLookupLiteralsDefault[thfLocaleDefault],\n        ...thfLookupLiteralsDefault[browserLanguage()],\n        ...value\n      };\n      if (value.modalTitle) {\n        this.title = this.literals.modalTitle;\n      }\n    } else {\n      this._literals = thfLookupLiteralsDefault[browserLanguage()];\n    }\n    this.primaryAction.label = this.literals.modalPrimaryActionLabel;\n    this.secondaryAction.label = this.literals.modalSecondaryActionLabel;\n    this.setTableLiterals();\n  }\n\n  get literals() {\n    return this._literals || thfLookupLiteralsDefault[browserLanguage()];\n  }\n\n  /** TÃ­tulo da modal. */\n  @Input('t-title') set title(value: string) {\n    this._title = isTypeof(value, 'string') ? value : this.literals.modalTitle;\n  }\n\n  get title() {\n    return this._title;\n  }\n\n  /** Classe de serviÃ§o com a implementaÃ§Ã£o do cliente. */\n  @Input('t-filter-service') filterService: ThfLookupFilter;\n\n  /** Classe de serviÃ§o com a implementaÃ§Ã£o do cliente. */\n  @Input('t-filter-params') filterParams: any;\n\n  /** Evento utilizado ao selecionar um registro da tabela. */\n  @Output('t-change-model') model: EventEmitter<any> = new EventEmitter<any>();\n\n  ngOnDestroy() {\n    if (this.filterSubscription) {\n      this.filterSubscription.unsubscribe();\n    }\n\n    if (this.searchSubscription) {\n      this.searchSubscription.unsubscribe();\n    }\n\n    if (this.showMoreSubscription) {\n      this.showMoreSubscription.unsubscribe();\n    }\n  }\n\n  ngOnInit() {\n    this.initializeData();\n    this.setTableLiterals();\n  }\n\n  search(): void {\n    this.page = 1;\n    if (this.searchValue) {\n      this.isLoading = true;\n      this.searchSubscription = this.getFilteredData(this.searchValue).subscribe(data => {\n        this.items = data.items;\n        this.hasNext = data.hasNext;\n        this.isLoading = false;\n      });\n    } else {\n      this.initializeData();\n    }\n  }\n\n  showMoreEvent() {\n    this.page ++;\n    this.isLoading = true;\n    this.showMoreSubscription = this.getFilteredData(this.searchValue).subscribe(data => {\n      data.items.forEach(item => {\n        this.items.push(item);\n      });\n      this.hasNext = data.hasNext;\n      this.isLoading = false;\n    });\n  }\n\n  // MÃ©todo responsÃ¡vel por abrir a modal de busca das informaÃ§Ãµes.\n  abstract openModal(): void;\n\n  private getFilteredData(searchValue): Observable<ThfLookupResponseApi> {\n    return this.filterService.getFilteredData(searchValue, this.page, this.pageSize, this.filterParams);\n  }\n\n  private initializeData(): void {\n    this.isLoading = true;\n    this.filterSubscription = this.getFilteredData('').subscribe(data => {\n      this.items = data.items;\n      this.hasNext = data.hasNext;\n      this.isLoading = false;\n    });\n  }\n\n  private setTableLiterals() {\n    this.tableLiterals = {\n      'noColumns': this.literals.modalTableNoColumns,\n      'noData': this.literals.modalTableNoData,\n      'loadingData': this.literals.modalTableLoadingData,\n      'loadMoreData': this.literals.modalTableLoadMoreData,\n    };\n  }\n\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\n\nimport { fromEvent, Observable } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\n\nimport { ThfLookupModalBaseComponent } from '../thf-lookup-modal/thf-lookup-modal-base.component';\n\n/**\n * @docsPrivate\n *\n * @docsExtends ThfLookupModalBaseComponent\n */\n@Component({\n  selector: 'thf-lookup-modal',\n  templateUrl: './thf-lookup-modal.component.html'\n})\nexport class ThfLookupModalComponent extends ThfLookupModalBaseComponent implements OnInit {\n\n  @ViewChild('inpsearch', { static: true }) inputSearchEl: ElementRef;\n\n  keyUpObservable: Observable<any> = null;\n\n  containerHeight: number = 375;\n  tableHeight: number = 370;\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.initializeEventInput();\n    this.setTableHeight();\n  }\n\n  initializeEventInput(): void {\n    this.keyUpObservable = fromEvent(this.inputSearchEl.nativeElement, 'keyup')\n      .pipe(\n        filter((e: any) => this.validateEnterPressed(e)),\n        debounceTime(400)\n      );\n\n    this.keyUpObservable.subscribe(() => {\n      this.search();\n    });\n  }\n\n  openModal() {\n    this.thfModal.open();\n  }\n\n  private setTableHeight() {\n    if (window.innerHeight < 615) {\n      this.tableHeight -= 50;\n      this.containerHeight -= 50;\n    }\n  }\n\n  private validateEnterPressed(e: any) {\n    return e.keyCode === 13;\n  }\n\n}\n","import { Injectable, ComponentRef, EventEmitter } from '@angular/core';\n\nimport { ThfComponentInjectorService } from '../../../../services/thf-component-injector/thf-component-injector.service';\nimport { ThfLookupColumn } from '../../../../components/thf-field/thf-lookup/interfaces/thf-lookup-column.interface';\nimport { ThfLookupFilter } from '../../../../components/thf-field/thf-lookup/interfaces/thf-lookup-filter.interface';\nimport { ThfLookupLiterals } from '../interfaces/thf-lookup-literals.interface';\nimport { ThfLookupModalComponent } from '../thf-lookup-modal/thf-lookup-modal.component';\n\n/**\n * @docsPrivate\n *\n * ServiÃ§o responsÃ¡vel por controlar a abertura do componente Thf Lookup Modal.\n */\n@Injectable()\nexport class ThfLookupModalService {\n\n  private componentRef: ComponentRef<any> = null;\n\n  selectValueEvent: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(private thfComponentInjector: ThfComponentInjectorService) {}\n\n  /**\n   * MÃ©todo responsÃ¡vel por abrir a modal de busca das informaÃ§Ãµes.\n   *\n   * @param service {ThfLookupFilter} ServiÃ§o responsÃ¡vel por realizar a busca no serviÃ§o dos dados.\n   * @param columns {Array<ThfLookupColumn>} DefiniÃ§Ã£o das colunas na modal de busca.\n   * @param filterParams {any} Valor que serÃ¡ repassado aos mÃ©todos do serviÃ§o para auxiliar no filtro dos dados.\n   * @param title {string} DefiniÃ§Ã£o do tÃ­tulo da modal.\n   * @param literals {ThfLookupLiterals} Literais utilizadas no componente.\n   */\n  openModal(params: {\n    service: ThfLookupFilter,\n    columns: Array<ThfLookupColumn>,\n    filterParams: any,\n    title: string,\n    literals: ThfLookupLiterals\n  }): void {\n    const { service, columns, filterParams, title, literals } = params;\n\n    this.componentRef = this.thfComponentInjector.createComponentInApplication(ThfLookupModalComponent);\n    this.componentRef.instance.title = title;\n    this.componentRef.instance.columns = columns;\n    this.componentRef.instance.filterService = service;\n    this.componentRef.instance.filterParams = filterParams;\n    this.componentRef.instance.literals = literals;\n    this.componentRef.instance.model.subscribe($event => {\n      this.selectValue($event);\n    });\n    this.componentRef.changeDetectorRef.detectChanges();\n    this.componentRef.instance.openModal();\n\n  }\n\n  // Este metodo Ã© chamado quando Ã© selecionado um item na lookup modal.\n  selectValue(value) {\n    if (value) {\n      this.selectValueEvent.emit(value);\n    }\n    this.componentRef.destroy();\n  }\n}\n","import { Component, ElementRef, forwardRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { NG_VALIDATORS , NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { ThfLookupBaseComponent } from './thf-lookup-base.component';\nimport { ThfLookupFilterService } from './services/thf-lookup-filter.service';\nimport { ThfLookupModalService } from './services/thf-lookup-modal.service';\n\n/**\n * @docsExtends ThfLookupBaseComponent\n *\n * @description\n *\n * Quando existe muitos dados o thf-lookup por padrÃ£o traz apenas 10 itens na tabela e os demais sÃ£o carregados por demanda atravÃ©s do\n * botÃ£o 'Carregar mais resultados'. Para que funcione corretamente, Ã© importante que o serviÃ§o siga o\n * [Guia de implementaÃ§Ã£o das APIs TOTVS](http://tdn.totvs.com/pages/releaseview.action?pageId=271660444).\n *\n * Importante:\n *\n * - Caso o thf-lookup contenha o [(ngModel)] sem o atributo name, ocorrerÃ¡ um erro de angular.\n * EntÃ£o serÃ¡ necessÃ¡rio informar o atributo name ou o atributo [ngModelOptions]=\"{standalone: true}\".\n * ```\n * <thf-lookup\n *   [(ngModel)]=\"pessoa.nome\"\n *   [ngModelOptions]=\"{standalone: true}\">\n * </thf-lookup>\n * ```\n *\n * @example\n *\n * <example name=\"thf-lookup-basic\" title=\"Totvs Lookup Basic\">\n *  <file name=\"sample-thf-lookup-basic/sample-thf-lookup-basic.component.html\"> </file>\n *  <file name=\"sample-thf-lookup-basic/sample-thf-lookup-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-lookup-labs\" title=\"Totvs Lookup Labs\">\n *  <file name=\"sample-thf-lookup-labs/sample-thf-lookup-labs.component.html\"> </file>\n *  <file name=\"sample-thf-lookup-labs/sample-thf-lookup-labs.component.ts\"> </file>\n *  <file name=\"sample-thf-lookup.service.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-lookup-hero\" title=\"Totvs Lookup - Hero\">\n *  <file name=\"sample-thf-lookup-hero/sample-thf-lookup-hero.component.html\"> </file>\n *  <file name=\"sample-thf-lookup-hero/sample-thf-lookup-hero.component.ts\"> </file>\n *  <file name=\"sample-thf-lookup.service.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-lookup-hero-reactive-form\" title=\"Totvs Lookup - Hero Reactive Form\">\n *  <file name=\"sample-thf-lookup-hero-reactive-form/sample-thf-lookup-hero-reactive-form.component.html\"> </file>\n *  <file name=\"sample-thf-lookup-hero-reactive-form/sample-thf-lookup-hero-reactive-form.component.ts\"> </file>\n *  <file name=\"sample-thf-lookup.service.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-lookup-sw-films\" title=\"Totvs Lookup - Star Wars films\">\n *  <file name=\"sample-thf-lookup-sw-films/sample-thf-lookup-sw-films.component.html\"> </file>\n *  <file name=\"sample-thf-lookup-sw-films/sample-thf-lookup-sw-films.component.ts\"> </file>\n *  <file name=\"sample-thf-lookup-sw-films/sample-thf-lookup-sw-films.service.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-lookup',\n  templateUrl: './thf-lookup.component.html',\n  providers: [\n    ThfLookupFilterService,\n    ThfLookupModalService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ThfLookupComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => ThfLookupComponent),\n      multi: true,\n    }]\n})\nexport class ThfLookupComponent extends ThfLookupBaseComponent implements OnDestroy, OnInit {\n\n  private modalSubscription: Subscription;\n\n  @ViewChild('inp', {read: ElementRef, static: true }) inputEl: ElementRef;\n\n  constructor(thfLookupFilterService: ThfLookupFilterService, private thfLookupModalService: ThfLookupModalService) {\n    super(thfLookupFilterService);\n  }\n\n  ngOnDestroy() {\n    if (this.modalSubscription) {\n      this.modalSubscription.unsubscribe();\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  openLookup(): void {\n    if (this.isAllowedOpenModal()) {\n      const { service, columns, filterParams, literals } = this;\n\n      this.thfLookupModalService.openModal({ service, columns, filterParams, title: this.label, literals });\n\n      if (!this.modalSubscription) {\n        this.modalSubscription = this.thfLookupModalService.selectValueEvent.subscribe(element => {\n          this.selectModel(element);\n        });\n      }\n    }\n  }\n\n  setViewValue(value: any, object: any): void {\n    if (this.fieldFormat) {\n      this.setInputValueWithFieldFormat(object);\n    } else {\n      this.inputEl.nativeElement.value = this.valueToModel ? value : '';\n    }\n  }\n\n  getViewValue(): string {\n    return this.inputEl.nativeElement.value;\n  }\n\n  searchEvent() {\n    const value = this.getViewValue();\n\n    if (this.oldValue !== value) {\n      this.searchById(value);\n    }\n  }\n\n  private isAllowedOpenModal(): boolean {\n\n    if (!this.service) {\n      console.warn('No service informed');\n    }\n\n    return !!(this.service && !this.disabled);\n  }\n\n  private setInputValueWithFieldFormat(objectSelected: any) {\n    const isEmpty = Object.keys(objectSelected).length === 0;\n    const fieldFormated = this.fieldFormat(objectSelected);\n\n    this.oldValue = isEmpty ? '' : fieldFormated;\n    this.inputEl.nativeElement.value = isEmpty ? '' : fieldFormated;\n  }\n\n}\n","import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\n\nimport { isTypeof } from '../../../../utils/util';\n\nimport { ThfMultiselectLiterals } from '../../index';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente de pesquisa que serÃ¡ criado dentro do dropdown do `thf-multiselect`.\n */\n@Component({\n  selector: 'thf-multiselect-search',\n  templateUrl: './thf-multiselect-search.component.html',\n})\nexport class ThfMultiselectSearchComponent {\n\n  private _placeholder?: string;\n\n  /** Propriedade que recebe as literais definidas no `thf-multiselect`. */\n  @Input('t-literals') literals?: ThfMultiselectLiterals;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Placeholder do campo de pesquisa.\n   *\n   * > Caso o mesmo nÃ£o seja informado, o valor padrÃ£o serÃ¡ traduzido com base no idioma do navegador (pt, es e en).\n   *\n   * @default `Buscar`\n   */\n  @Input('t-placeholder') set placeholder(placeholder: string) {\n    this._placeholder = placeholder && isTypeof(placeholder, 'string') ? placeholder : this.literals.placeholderSearch;\n  }\n\n  get placeholder() {\n    return this._placeholder || this.literals.placeholderSearch;\n  }\n\n  /** Evento que serÃ¡ disparado a cada tecla digitada no campo de busca. */\n  @Output('t-change') change = new EventEmitter();\n\n  @ViewChild('inputElement', {read: ElementRef, static: true }) inputElement: ElementRef;\n\n  onChange(event) {\n    this.change.emit({event: event, value: this.inputElement.nativeElement.value});\n  }\n\n  setFocus() {\n    this.inputElement.nativeElement.focus();\n  }\n\n  clean() {\n    this.inputElement.nativeElement.value = '';\n  }\n\n}\n","import { Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';\n\nimport { ThfMultiselectLiterals } from '../../index';\nimport { ThfMultiselectOption } from '../thf-multiselect-option.interface';\nimport { ThfMultiselectSearchComponent } from './../thf-multiselect-search/thf-multiselect-search.component';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente que construÃ­ra o dropdown, contendo o campo de pesquisa e os itens para seleÃ§Ã£o.\n */\n@Component({\n  selector: 'thf-multiselect-dropdown',\n  templateUrl: './thf-multiselect-dropdown.component.html'\n})\nexport class ThfMultiselectDropdownComponent {\n\n  scrollTop = 0;\n  show: boolean = false;\n  haveOptions: boolean = false;\n\n  /** Propriedade que indica se o campo de pesquisa deverÃ¡ ser escondido. */\n  @Input('t-hide-search') hideSearch?: boolean = false;\n\n  /** Propriedade que que recebe as literais definidas no componente `thf-multiselect`. */\n  @Input('t-literals') literals?: ThfMultiselectLiterals;\n\n  /** Placeholder do campo de pesquisa. */\n  @Input('t-placeholder-search') placeholderSearch: string;\n\n  /** Propriedade que recebe a lista de opÃ§Ãµes selecionadas. */\n  @Input('t-selected-values') selectedValues: Array<any> = [];\n\n  /** Propriedade que recebe a lista de opÃ§Ãµes que deverÃ£o ser criadas no dropdown. */\n  @Input('t-options') options: Array<ThfMultiselectOption> = [];\n\n  /** Evento disparado a cada tecla digitada na pesquisa. */\n  @Output('t-change-search') changeSearch = new EventEmitter();\n\n  /** Evento disparado a cada alteraÃ§Ã£o na lista das opÃ§Ãµes selecionadas. */\n  @Output('t-change') change = new EventEmitter();\n\n  /**\n   * Evento disparado quando for detectada uma aÃ§Ã£o que necessite fechar o dropdown.\n   * Por exemplo, no caso de ser teclado TAB dentro do dropdown, entÃ£o Ã© disparado este evento\n   * para notificar o componente principal que deve fechar o dropdown.\n   */\n  @Output('t-close-dropdown') closeDropdown = new EventEmitter();\n\n  @ViewChild('container', { read: ElementRef, static: true }) container: ElementRef;\n  @ViewChild('ulElement', {read: ElementRef, static: true }) ulElement: ElementRef;\n  @ViewChild('searchElement', { static: false }) searchElement: ThfMultiselectSearchComponent;\n\n  scrollTo(index) {\n    this.scrollTop = (index <= 2) ? 0 : (index * 44) - 88;\n  }\n\n  isSelectedItem(option: ThfMultiselectOption) {\n    return this.selectedValues.some(selectedItem => selectedItem === option.value);\n  }\n\n  clickItem(check, option) {\n    this.updateSelectedValues(check, option);\n\n    if (!this.hideSearch) {\n      this.searchElement.setFocus();\n    }\n  }\n\n  updateSelectedValues(checked, option) {\n    if (checked) {\n      this.selectedValues.push(option.value);\n    } else {\n      const indexSelectedValues = this.selectedValues.indexOf(option.value);\n      this.selectedValues.splice(indexSelectedValues, 1);\n    }\n\n    this.change.emit(this.selectedValues);\n  }\n\n  callChangeSearch(event) {\n    this.changeSearch.emit(event);\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeydown(event: any) {\n    if (event.keyCode === 9) {\n      this.closeDropdown.emit();\n    }\n  }\n\n  controlVisibility(toOpen) {\n    this.show = toOpen;\n    this.checkInitialOptions();\n\n    setTimeout(() => {\n      if (toOpen && this.searchElement && !this.hideSearch) {\n        this.searchElement.setFocus();\n        this.searchElement.clean();\n      }\n    });\n  }\n\n  private checkInitialOptions() {\n    if (this.options.length) {\n      this.haveOptions = true;\n    }\n  }\n\n}\n","/**\n * @usedBy ThfMultiselectComponent\n *\n * @description\n *\n * Define o tipo de busca usado no thf-multiselect.\n */\nexport enum ThfMultiselectFilterMode {\n  /** Verifica se o texto *inicia* com o valor pesquisado. */\n  startsWith,\n  /** Verifica se o texto *contÃ©m* o valor pesquisado. */\n  contains,\n  /** Verifica se o texto *finaliza* com o valor pesquisado. */\n  endsWith\n}\n","import { AfterContentChecked, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\n\nimport { browserLanguage, convertToBoolean, removeDuplicatedOptions, removeUndefinedAndNullOptions, sortOptionsByProperty,\n          thfLocaleDefault } from '../../../utils/util';\nimport { requiredFailed } from './../validators';\n\nimport { ThfMultiselectFilterMode } from './thf-multiselect-filter-mode.enum';\nimport { ThfMultiselectLiterals } from './thf-multiselect-literals.interface';\nimport { ThfMultiselectOption } from './thf-multiselect-option.interface';\n\nexport const thfMultiselectLiteralsDefault = {\n  en: <ThfMultiselectLiterals> {\n    noData: 'No data found',\n    placeholderSearch: 'Search'\n  },\n  es: <ThfMultiselectLiterals> {\n    noData: 'Datos no encontrados',\n    placeholderSearch: 'Busca'\n  },\n  pt: <ThfMultiselectLiterals> {\n    noData: 'Nenhum dado encontrado',\n    placeholderSearch: 'Buscar'\n  }\n};\n\n/**\n * @description\n *\n * O thf-multiselect Ã© um componente de mÃºltipla seleÃ§Ã£o.\n * Este componente Ã© recomendado para dar ao usuÃ¡rio a opÃ§Ã£o de selecionar vÃ¡rios itens em uma lista.\n *\n * Quando a lista possuir poucos itens, deve-se dar preferÃªncia para o uso do thf-checkbox-group, por ser mais simples\n * e mais rÃ¡pido para a seleÃ§Ã£o do usuÃ¡rio.\n *\n * Este componente tambÃ©m nÃ£o deve ser utilizado em casos onde a seleÃ§Ã£o seja Ãºnica. Nesses casos, deve-se utilizar o\n * thf-select, thf-combo ou thf-radio-group.\n */\nexport abstract class ThfMultiselectBaseComponent implements AfterContentChecked, ControlValueAccessor, OnInit, Validator {\n\n  private _disabled?: boolean = false;\n  private _filterMode?: ThfMultiselectFilterMode = ThfMultiselectFilterMode.startsWith;\n  private _focus?: boolean = false;\n  private _hideSearch?: boolean = false;\n  private _literals: ThfMultiselectLiterals;\n  private _options: Array<ThfMultiselectOption>;\n  private _required?: boolean = false;\n  private _sort?: boolean = false;\n\n  private lastLengthModel;\n  private onModelChange: any;\n  // tslint:disable-next-line\n  private onModelTouched: any;\n  private readyToValidation = false;\n\n  selectedOptions: Array<ThfMultiselectOption> = [];\n  visibleOptionsDropdown: Array<ThfMultiselectOption> = [];\n  visibleDisclaimers = [];\n\n  /** Label no componente. */\n  @Input('t-label') label?: string;\n\n  /** Texto de apoio para o campo. */\n  @Input('t-help') help?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto com as literais usadas no `thf-multiselect`.\n   *\n   * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponÃ­veis:\n   *\n   * ```\n   *  const customLiterals: ThfMultiselectLiterals = {\n   *    noData: 'Nenhum dado encontrado',\n   *    placeholderSearch: 'Buscar'\n   *  };\n   * ```\n   *\n   * Ou passando apenas as literais que deseja customizar:\n   *\n   * ```\n   *  const customLiterals: ThfMultiselectLiterals = {\n   *    noData: 'Sem dados'\n   *  };\n   * ```\n   *\n   * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:\n   *\n   * ```\n   * <thf-multiselect\n   *   [t-literals]=\"customLiterals\">\n   * </thf-thf-multiselect>\n   * ```\n   *\n   *  > O objeto padrÃ£o de literais serÃ¡ traduzido de acordo com o idioma do *browser* (pt, en, es).\n   */\n  @Input('t-literals') set literals(value: ThfMultiselectLiterals) {\n    if (value instanceof Object && !(value instanceof Array)) {\n      this._literals = {\n        ...thfMultiselectLiteralsDefault[thfLocaleDefault],\n        ...thfMultiselectLiteralsDefault[browserLanguage()],\n        ...value\n      };\n    } else {\n      this._literals = thfMultiselectLiteralsDefault[browserLanguage()];\n    }\n  }\n  get literals() {\n    return this._literals || thfMultiselectLiteralsDefault[browserLanguage()];\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se a indicaÃ§Ã£o de campo opcional serÃ¡ exibida.\n   *\n   * > NÃ£o serÃ¡ exibida a indicaÃ§Ã£o se:\n   * - O campo conter `t-required`;\n   * - NÃ£o possuir `t-help` e/ou `t-label`.\n   *\n   * @default `false`\n   */\n  @Input('t-optional') optional: boolean;\n\n  /** Mensagem apresentada enquanto o campo estiver vazio. */\n  @Input('t-placeholder') placeholder?: string = '';\n\n  /**\n   * @description\n   *\n   * Placeholder do campo de pesquisa.\n   *\n   * > Caso o mesmo nÃ£o seja informado, o valor padrÃ£o serÃ¡ traduzido com base no idioma do navegador (pt, es e en).\n   *\n   * @default `Buscar`\n   */\n  @Input('t-placeholder-search') placeholderSearch?: string = '';\n\n  /** Nome do componente. */\n  @Input('name') name: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo serÃ¡ obrigatÃ³rio. Esta propriedade Ã© desconsiderada quando o campo estÃ¡ desabilitado (t-disabled).\n   *\n   * @default `false`\n   */\n  @Input('t-required') set required(required: boolean) {\n    this._required = <any>required === '' ? true : convertToBoolean(required);\n    this.updateModelToValidate();\n  }\n\n  get required() {\n    return this._required;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo serÃ¡ desabilitado.\n   *\n   * @default `false`\n   */\n  @Input('t-disabled') set disabled(disabled: boolean) {\n    this._disabled = <any>disabled === '' ? true : convertToBoolean(disabled);\n    this.updateModelToValidate();\n\n    this.updateVisibleItems();\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Esconde o campo de pesquisa existente dentro do dropdown do thf-multiselect.\n   *\n   * @default `false`\n   */\n  @Input('t-hide-search') set hideSearch(hideSearch: boolean) {\n    this._hideSearch = <any>hideSearch === '' ? true : convertToBoolean(hideSearch);\n  }\n\n  get hideSearch() {\n    return this._hideSearch;\n  }\n\n  /**\n   * @description\n   *\n   * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface ThfMultiselectOption.\n   * Esta lista deve conter os valores e os labels que serÃ£o apresentados na tela.\n   */\n  @Input('t-options') set options(options: Array<ThfMultiselectOption>) {\n    this._options = options;\n\n    this.validAndSortOptions();\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que a lista definida na propriedade t-options serÃ¡ ordenada pelo label antes de ser apresentada no\n   * dropdown.\n   *\n   * @default `false`\n   */\n  @Input('t-sort') set sort(sort: boolean) {\n    this._sort = <any>sort === '' ? true : convertToBoolean(sort);\n\n    this.validAndSortOptions();\n  }\n\n  get sort() {\n    return this._sort;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo iniciarÃ¡ com foco.\n   *\n   * @default `false`\n   */\n  @Input('t-focus') set focus(focus: boolean) {\n    this._focus = <any>focus === '' ? true : convertToBoolean(focus);\n  }\n\n  get focus() {\n    return this._focus;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.\n   * Valores definidos no enum: ThfMultiselectFilterMode\n   *\n   * @default `startsWith`\n   */\n  @Input('t-filter-mode') set filterMode(filterMode: ThfMultiselectFilterMode) {\n    this._filterMode = (filterMode in ThfMultiselectFilterMode) ? filterMode : ThfMultiselectFilterMode.startsWith;\n    switch (this._filterMode.toString()) {\n      case 'startsWith':\n        this._filterMode = ThfMultiselectFilterMode.startsWith;\n        break;\n      case 'contains':\n        this._filterMode = ThfMultiselectFilterMode.contains;\n        break;\n      case 'endsWith':\n        this._filterMode = ThfMultiselectFilterMode.endsWith;\n        break;\n    }\n  }\n\n  get filterMode() {\n    return this._filterMode;\n  }\n\n  /** Pode ser informada uma funÃ§Ã£o que serÃ¡ disparada quando houver alteraÃ§Ãµes no ngModel. */\n  @Output('t-change') change?: EventEmitter<any> = new EventEmitter<any>();\n\n  protected clickOutListener: () => void;\n  protected resizeListener: () => void;\n\n  ngOnInit() {\n    this.updateList(this.options);\n  }\n\n  ngAfterContentChecked() {\n    // Seta esta variÃ¡vel para indicar que a tela jÃ¡ foi carregada e podem ser aplicadas as validaÃ§Ãµes.\n    // A partir desse momento, toda vez que uma propriedade que interfere na validaÃ§Ã£o, for alterada, o model serÃ¡ atualizado\n    // para que o campo seja validado novamente.\n    this.readyToValidation = true;\n  }\n\n  validAndSortOptions() {\n    if (this.options && this.options.length) {\n\n      removeUndefinedAndNullOptions(this.options);\n      removeDuplicatedOptions(this.options);\n      this.setUndefinedLabels(this.options);\n\n      if (this.sort) {\n        sortOptionsByProperty(this.options, 'label');\n      }\n    }\n  }\n\n  setUndefinedLabels(options) {\n    options.forEach(option => {\n      if (!option['label']) {\n        option.label = option.value;\n      }\n    });\n  }\n\n  updateList(options: Array<ThfMultiselectOption>) {\n    if (options) {\n      this.visibleOptionsDropdown = options;\n    }\n  }\n\n  // Emite a atualizaÃ§Ã£o do model caso esta propriedade seja alterada dinamicamente.\n  updateModelToValidate() {\n    if (this.readyToValidation) {\n\n      // Este timeout Ã© necessÃ¡rio para quando for atualizado o model e uma propriedade do Datepicker ao mesmo tempo.\n      // Caso contrÃ¡rio, o writeValue nÃ£o Ã© disparado, nÃ£o atualizando o model do componente.\n      setTimeout(() => {\n        this.callOnChange(this.selectedOptions);\n      });\n    }\n  }\n\n  callOnChange(selectedOptions: Array<ThfMultiselectOption>) {\n    if (this.onModelChange) {\n      this.onModelChange(this.getValuesFromOptions(selectedOptions));\n      this.eventChange(selectedOptions);\n    }\n  }\n\n  eventChange(selectedOptions) {\n    if (selectedOptions && this.lastLengthModel !== selectedOptions.length) {\n      this.change.emit(selectedOptions);\n    }\n    this.lastLengthModel = selectedOptions ? selectedOptions.length : null;\n  }\n\n  getValuesFromOptions(selectedOptions: Array<ThfMultiselectOption>) {\n    return selectedOptions && selectedOptions.length ? selectedOptions.map(option => option.value) : [];\n  }\n\n  getLabelByValue(value) {\n    const index = this.options.findIndex(option => option.value === value);\n    return this.options[index].label;\n  }\n\n  changeItems(selectedValues) {\n    this.updateSelectedOptions(selectedValues);\n    this.callOnChange(this.selectedOptions);\n  }\n\n  searchByLabel(search: string, options: Array<ThfMultiselectOption>, filterMode: ThfMultiselectFilterMode) {\n    if (search && options && options.length) {\n      const newOptions: Array<ThfMultiselectOption> = [];\n      options.forEach(option => {\n        if (option.label && this.compareMethod(search, option, filterMode)) {\n          newOptions.push(option);\n        }\n      });\n      this.visibleOptionsDropdown = newOptions;\n    }\n  }\n\n  compareMethod(search: string, option: ThfMultiselectOption, filterMode: ThfMultiselectFilterMode) {\n    switch (filterMode) {\n      case ThfMultiselectFilterMode.startsWith:\n        return this.startsWith(search, option);\n      case ThfMultiselectFilterMode.contains:\n        return this.contains(search, option);\n      case ThfMultiselectFilterMode.endsWith:\n        return this.endsWith(search, option);\n    }\n  }\n\n  startsWith(search: string, option: ThfMultiselectOption) {\n    return option.label.toLowerCase().startsWith(search.toLowerCase());\n  }\n\n  contains(search: string, option: ThfMultiselectOption) {\n    return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;\n  }\n\n  endsWith(search: string, option: ThfMultiselectOption) {\n    return option.label.toLowerCase().endsWith(search.toLowerCase());\n  }\n\n  validate(c: AbstractControl): { [key: string]: any; } {\n    if (requiredFailed(this.required, this.disabled, c.value)) {\n      return { required: {\n        valid: false,\n      }};\n    }\n\n    return null;\n  }\n\n  updateSelectedOptions(values) {\n    this.selectedOptions = [];\n\n    values.forEach(value => {\n      this.options.forEach(option => {\n        if (option.value === value) {\n          this.selectedOptions.push(option);\n        }\n      });\n    });\n\n    this.updateVisibleItems();\n  }\n\n  writeValue(values: any): void {\n    if (!values) {\n      values = [];\n      this.callOnChange([]);\n    }\n\n    // Validar se todos os items existem entre os options, senÃ£o atualizar o model\n    this.updateSelectedOptions(values);\n\n    if (this.selectedOptions.length < values.length) {\n      this.callOnChange(this.selectedOptions);\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  abstract updateVisibleItems(): void;\n\n}\n","import {\n  AfterViewInit, ChangeDetectorRef, Component, DoCheck, ElementRef, forwardRef, OnDestroy, Renderer2, ViewChild\n} from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { isMobile } from './../../../utils/util';\nimport { ThfControlPositionService } from './../../../services/thf-control-position/thf-control-position.service';\nimport { ThfKeyCodeEnum } from './../../../enums/thf-key-code.enum';\n\nimport { ThfMultiselectBaseComponent } from './thf-multiselect-base.component';\n\nconst thfMultiselectContainerOffset = 8;\nconst thfMultiselectContainerPositionDefault = 'bottom';\n\n/**\n * @docsExtends ThfMultiselectBaseComponent\n *\n * @example\n *\n * <example name=\"thf-multiselect-basic\" title=\"Totvs Multiselect Basic\">\n *   <file name=\"sample-thf-multiselect-basic/sample-thf-multiselect-basic.component.html\"> </file>\n *   <file name=\"sample-thf-multiselect-basic/sample-thf-multiselect-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-multiselect-labs\" title=\"Totvs Multiselect Labs\">\n *   <file name=\"sample-thf-multiselect-labs/sample-thf-multiselect-labs.component.html\"> </file>\n *   <file name=\"sample-thf-multiselect-labs/sample-thf-multiselect-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-multiselect-vacation\" title=\"Totvs Multiselect - Vacation\">\n *   <file name=\"sample-thf-multiselect-vacation/sample-thf-multiselect-vacation.component.html\"> </file>\n *   <file name=\"sample-thf-multiselect-vacation/sample-thf-multiselect-vacation.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-multiselect-vacation-reactive-form\" title=\"Totvs Multiselect - Vacation Reactive Form\">\n *   <file name=\"sample-thf-multiselect-vacation-reactive-form/sample-thf-multiselect-vacation-reactive-form.component.html\"> </file>\n *   <file name=\"sample-thf-multiselect-vacation-reactive-form/sample-thf-multiselect-vacation-reactive-form.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-multiselect',\n  templateUrl: './thf-multiselect.component.html',\n  providers: [\n    ThfControlPositionService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ThfMultiselectComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => ThfMultiselectComponent),\n      multi: true,\n    }\n  ]\n})\nexport class ThfMultiselectComponent extends ThfMultiselectBaseComponent implements AfterViewInit, DoCheck, OnDestroy {\n\n  @ViewChild('dropdownElement', { read: ElementRef, static: true }) dropdownElement: ElementRef;\n  @ViewChild('dropdownElement', { static: true }) dropdown;\n  @ViewChild('disclaimerContainer', { read: ElementRef, static: true }) disclaimerContainerElement: ElementRef;\n  @ViewChild('iconElement', { read: ElementRef, static: true }) iconElement: ElementRef;\n  @ViewChild('inputElement', {read: ElementRef, static: true }) inputElement: ElementRef;\n\n  disclaimerOffset = 0;\n  dropdownIcon: string = 'thf-icon-arrow-down';\n  dropdownOpen: boolean = false;\n  initialized = false;\n  positionDisclaimerExtra;\n  timeoutResize;\n  visibleElement = false;\n\n  private isCalculateVisibleItems: boolean = true;\n\n  constructor(\n    public renderer: Renderer2,\n    private changeDetector: ChangeDetectorRef,\n    private controlPosition: ThfControlPositionService,\n    private el: ElementRef) {\n    super();\n  }\n\n  ngAfterViewInit() {\n    if (this.focus) {\n      this.inputElement.nativeElement.focus();\n    }\n    this.initialized = true;\n  }\n\n  ngDoCheck() {\n    const inputWidth = this.inputElement.nativeElement.offsetWidth;\n    // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visÃ­vel,\n    // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.\n    if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {\n      this.debounceResize();\n      this.visibleElement = true;\n      return;\n    }\n  }\n\n  ngOnDestroy() {\n    this.removeListeners();\n  }\n\n  getInputWidth() {\n    return this.el.nativeElement.querySelector('.thf-input').offsetWidth - 40;\n  }\n\n  getDisclaimersWidth() {\n    const disclaimers = this.el.nativeElement.querySelectorAll('thf-disclaimer');\n    return Array.from(disclaimers).map(disclaimer => disclaimer['offsetWidth']);\n  }\n\n  calculateVisibleItems() {\n    const disclaimersWidth = this.getDisclaimersWidth();\n    const inputWidth = this.getInputWidth();\n    const extraDisclaimerSize = 38;\n    const disclaimersVisible = disclaimersWidth[0];\n\n    this.visibleDisclaimers = [];\n\n    if (inputWidth > 0) {\n      let sum = 0;\n      let i = 0;\n      for (i = 0; i < this.selectedOptions.length; i++) {\n        sum += disclaimersWidth[i];\n        this.visibleDisclaimers.push(this.selectedOptions[i]);\n\n        if (sum > inputWidth) {\n          sum -= disclaimersWidth[i];\n          this.isCalculateVisibleItems = false;\n          break;\n        }\n      }\n\n      if (disclaimersVisible || !this.selectedOptions.length) {\n\n        if (i === this.selectedOptions.length) {\n          this.isCalculateVisibleItems = false;\n          return;\n        }\n\n        if (sum + extraDisclaimerSize > inputWidth) {\n          this.visibleDisclaimers.splice(-2, 2);\n          const label = '+' + (this.selectedOptions.length + 1 - i).toString();\n          this.visibleDisclaimers.push({value: '', label: label});\n        } else {\n          this.visibleDisclaimers.splice(-1, 1);\n          const label = '+' + (this.selectedOptions.length - i).toString();\n          this.visibleDisclaimers.push({value: '', label: label});\n        }\n\n      }\n    }\n  }\n\n  updateVisibleItems() {\n    this.visibleDisclaimers = [].concat(this.selectedOptions);\n\n    this.debounceResize();\n\n    // quando estiver dentro de modal\n    if (!this.inputElement.nativeElement.offsetWidth) {\n      this.isCalculateVisibleItems = true;\n    }\n  }\n\n  debounceResize() {\n    clearTimeout(this.timeoutResize);\n    this.timeoutResize = setTimeout(() => {\n      this.calculateVisibleItems();\n    }, 200);\n  }\n\n  onKeyDown(event?: any) {\n    if (event.keyCode === ThfKeyCodeEnum.arrowUp || event.keyCode === ThfKeyCodeEnum.arrowDown) {\n      event.preventDefault();\n      this.controlDropdownVisibility(true);\n      return;\n    }\n\n    if (event.keyCode === ThfKeyCodeEnum.tab) {\n      this.controlDropdownVisibility(false);\n      return;\n    }\n  }\n\n  toggleDropdownVisibility() {\n    if (this.disabled) {\n      return;\n    }\n\n    this.controlDropdownVisibility(!this.dropdownOpen);\n  }\n\n  openDropdown(toOpen) {\n\n    if (toOpen && !this.disabled) {\n      this.controlDropdownVisibility(true);\n    }\n\n  }\n\n  controlDropdownVisibility(toOpen: boolean) {\n    toOpen ? this.open() : this.close();\n  }\n\n  scrollToSelectedOptions() {\n  if (this.selectedOptions && this.selectedOptions.length) {\n      const index = this.options.findIndex(option => option.value === this.selectedOptions[0].value);\n      this.dropdown.scrollTo(index);\n    }\n  }\n\n  setVisibleOptionsDropdown(options) {\n    this.visibleOptionsDropdown = options;\n  }\n\n  changeSearch(event) {\n    (event && event.value) ? this.searchByLabel(event.value, this.options, this.filterMode) : this.setVisibleOptionsDropdown(this.options);\n\n    // timeout necessÃ¡rio para reposicionar corretamente quando dropdown estiver pra cima do input e realizar busca no input\n    setTimeout(() => this.adjustContainerPosition());\n  }\n\n  getPlaceholder() {\n    return (this.placeholder && !this.visibleDisclaimers.length) ? this.placeholder : '';\n  }\n\n  closeDisclaimer(value) {\n    const index = this.selectedOptions.findIndex(option => option.value === value);\n    this.selectedOptions.splice(index, 1);\n\n    this.updateVisibleItems();\n    this.callOnChange(this.selectedOptions);\n  }\n\n  wasClickedOnToggle(event: MouseEvent): void {\n    if (!this.inputElement.nativeElement.contains(event.target) &&\n      !this.iconElement.nativeElement.contains(event.target) &&\n      !this.dropdownElement.nativeElement.contains(event.target) &&\n      !this.disclaimerContainerElement.nativeElement.contains(event.target) &&\n      this.dropdownOpen) {\n\n      this.controlDropdownVisibility(false);\n    }\n  }\n\n  private adjustContainerPosition(): void {\n    this.controlPosition.adjustPosition(thfMultiselectContainerPositionDefault);\n  }\n\n  private close(): void {\n    this.dropdownIcon = 'thf-icon-arrow-down';\n    this.dropdownOpen = false;\n\n    this.dropdown.controlVisibility(false);\n    this.setVisibleOptionsDropdown(this.options);\n\n    this.removeListeners();\n  }\n\n  private initializeListeners(): void {\n    this.clickOutListener = this.renderer.listen('document', 'click', (event: MouseEvent) => {\n      this.wasClickedOnToggle(event);\n    });\n\n    this.resizeListener = this.renderer.listen('window', 'resize', () => {\n      this.updateVisibleItems();\n\n      isMobile() ? this.adjustContainerPosition() : this.close();\n    });\n\n    window.addEventListener('scroll', this.onScroll, true);\n  }\n\n  private onScroll = (): void => {\n    this.adjustContainerPosition();\n  }\n\n  private open(): void {\n    this.dropdownIcon = 'thf-icon-arrow-up';\n    this.dropdownOpen = true;\n\n    this.dropdown.controlVisibility(true);\n    this.setVisibleOptionsDropdown(this.options);\n    this.initializeListeners();\n    this.scrollToSelectedOptions();\n\n    this.changeDetector.detectChanges();\n    this.setPositionDropdown();\n  }\n\n  private removeListeners(): void {\n    if (this.clickOutListener) {\n      this.clickOutListener();\n    }\n\n    if (this.resizeListener) {\n      this.resizeListener();\n    }\n\n    window.removeEventListener('scroll', this.onScroll, true);\n  }\n\n  private setPositionDropdown(): void {\n    this.controlPosition.setElements(\n      this.dropdown.container.nativeElement,\n      thfMultiselectContainerOffset,\n      this.inputElement,\n      ['top', 'bottom'],\n      true\n    );\n\n    this.adjustContainerPosition();\n  }\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { ThfMultiselectOption } from './../thf-multiselect-option.interface';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente que constrÃ³i cada item no dropdown, contendo o checkbox e o label.\n */\n@Component({\n  selector: 'thf-multiselect-item',\n  templateUrl: './thf-multiselect-item.component.html'\n})\nexport class ThfMultiselectItemComponent {\n\n  /** OpÃ§Ã£o que irÃ¡ gerar o item, implementando a interface ThfMultiselectOption. */\n  @Input('t-option') option: ThfMultiselectOption = null;\n\n  /** Esta propriedade indica se o campo estÃ¡ selecionado ou nÃ£o. */\n  @Input('t-selected') selected?: boolean = false;\n\n  /** Evento que serÃ¡ disparado toda vez que o usuÃ¡rio marcar ou desmarcar um item. */\n  @Output('t-change') change = new EventEmitter();\n\n  itemClicked() {\n    this.selected = !this.selected;\n    this.change.emit(this.selected);\n  }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\n\nconst thfRichTextBodyCommands = [\n  'bold', 'italic', 'underline', 'justifyleft', 'justifycenter', 'justifyright', 'justifyfull', 'insertUnorderedList'\n];\n\n@Component({\n  selector: 'thf-rich-text-body',\n  templateUrl: './thf-rich-text-body.component.html'\n})\nexport class ThfRichTextBodyComponent implements OnInit {\n\n  @ViewChild('bodyElement', { static: true }) bodyElement: ElementRef;\n\n  @Input('t-height') height?: string;\n\n  @Input('t-model-value') modelValue?: string;\n\n  @Input('t-placeholder') placeholder?: string;\n\n  @Input('t-readonly') readonly?: string;\n\n  @Output('t-commands') commands = new EventEmitter<any>();\n\n  @Output('t-value') value = new EventEmitter<any>();\n\n  ngOnInit() {\n    this.bodyElement.nativeElement.designMode = 'on';\n\n    // timeout necessÃ¡rio para setar o valor vindo do writeValue do componente principal.\n    setTimeout(() => { this.updateValueWithModelValue(); });\n  }\n\n  executeCommand(command: string) {\n    this.bodyElement.nativeElement.focus();\n    document.execCommand(command, false, null);\n    this.updateModel();\n    this.value.emit(this.modelValue);\n  }\n\n  onClick() {\n    this.emitSelectionCommands();\n  }\n\n  onKeyUp() {\n    // Tratamento necessÃ¡rio para eliminar a tag <br> criada no firefox quando o body for limpo.\n    if (!this.bodyElement.nativeElement.innerText.trim() && this.bodyElement.nativeElement.firstChild) {\n      this.bodyElement.nativeElement.firstChild.remove();\n    }\n    this.updateModel();\n    this.emitSelectionCommands();\n  }\n\n  update() {\n    setTimeout(() => { this.updateModel(); });\n    setTimeout(() => { this.onKeyUp(); });\n  }\n\n  private emitSelectionCommands() {\n    const commands: Array<string> = thfRichTextBodyCommands.filter(command => {\n      return document.queryCommandState(command);\n    });\n\n    this.commands.emit(commands);\n  }\n\n  private updateModel() {\n    this.modelValue = this.bodyElement.nativeElement.innerHTML;\n    this.value.emit(this.modelValue);\n  }\n\n  private updateValueWithModelValue() {\n    if (this.modelValue) {\n      this.bodyElement.nativeElement.insertAdjacentHTML('afterbegin', this.modelValue);\n    }\n  }\n\n}\n","import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { Input } from '@angular/core';\n\nimport { convertToBoolean } from '../../../utils/util';\nimport { requiredFailed } from '../validators';\n\n/**\n * @description\n *\n * O componente `thf-rich-text` Ã© um editor de textos enriquecidos.\n *\n * Para ediÃ§Ã£o de texto simples sem formataÃ§Ã£o recomenda-se o uso do componente [**thf-textarea**](/documentation/thf-textarea).\n */\nexport abstract class ThfRichTextBaseComponent implements ControlValueAccessor, Validator {\n\n  private _height?: number;\n  private _placeholder: string;\n  private _readonly: boolean;\n\n  onChangeModel: any = null;\n  invalid: boolean = false;\n  value: string;\n\n  // tslint:disable-next-line\n  private onTouched: any = null;\n  private validatorChange: any;\n\n  /**\n   * @description\n   *\n   * Mensagem que serÃ¡ apresentada quando a propriedade required estiver habilitada e o campo for limpo apÃ³s algo ser digitado.\n   */\n  @Input('t-error-message') errorMessage?: string = '';\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define a altura da Ã¡rea de ediÃ§Ã£o de texto.\n   *\n   * > Altura mÃ­nima do componente Ã© `94` e a altura mÃ¡xima Ã© `262`.\n   */\n  @Input('t-height') set height(height: number) {\n    this._height = height;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Texto de apoio do campo.\n   */\n  @Input('t-help') help?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * RÃ³tulo do campo.\n   */\n  @Input('t-label') label?: string;\n\n  /** Nome e identificador do campo. */\n  @Input('name') name: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se a indicaÃ§Ã£o de campo opcional serÃ¡ exibida.\n   *\n   * > NÃ£o serÃ¡ exibida a indicaÃ§Ã£o se:\n   * - O campo conter `t-required`;\n   * - NÃ£o possuir `t-help` e/ou `t-label`.\n   *\n   * @default `false`\n   */\n  @Input('t-optional') optional: boolean;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Mensagem que aparecerÃ¡ enquanto o campo nÃ£o estiver preenchido.\n   *\n   * @default ''\n   */\n  @Input('t-placeholder') set placeholder(value: string) {\n    this._placeholder = value || '';\n  }\n\n  get placeholder() {\n    return this._placeholder;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo serÃ¡ somente leitura.\n   *\n   * @default `false`\n   */\n  @Input('t-readonly') set readonly(value: boolean) {\n    this._readonly = convertToBoolean(value);\n  }\n\n  get readonly() {\n    return this._readonly;\n  }\n\n  /**\n   * @description\n   *\n   * Indica que o campo serÃ¡ obrigatÃ³rio.\n   *\n   * @default `false`\n   */\n  required?: boolean = false;\n  @Input('t-required') set setRequired(required: string) {\n    this.required = convertToBoolean(required);\n\n    this.validateModel(this.value);\n  }\n\n  // FunÃ§Ã£o implementada do ControlValueAccessor\n  // Usada para interceptar as mudanÃ§as e nÃ£o atualizar automaticamente o Model\n  registerOnChange(func: any): void {\n    this.onChangeModel = func;\n  }\n\n  // FunÃ§Ã£o implementada do ControlValueAccessor\n  // Usada para interceptar as mudanÃ§as e nÃ£o atualizar automaticamente o Model\n  registerOnTouched(func: any): void {\n    this.onTouched = func;\n  }\n\n  registerOnValidatorChange(fn: () => void) {\n    this.validatorChange = fn;\n  }\n\n  validate(abstractControl: AbstractControl): { [key: string]: any; } {\n    if (requiredFailed(this.required, false, abstractControl.value)) {\n      return { required: {\n        valid: false,\n      }};\n    }\n  }\n\n  writeValue(value: string): void {\n    this.value = value;\n  }\n\n  // Executa a funÃ§Ã£o onChange\n  protected updateModel(value: any) {\n    // Quando o rich-text nÃ£o possui um formulÃ¡rio, entÃ£o esta funÃ§Ã£o nÃ£o Ã© registrada\n    if (this.onChangeModel) {\n      this.onChangeModel(value);\n    }\n  }\n\n  protected validateModel(value: any) {\n    if (this.validatorChange) {\n      this.validatorChange(value);\n    }\n  }\n\n}\n","import { AfterViewInit, Component, ElementRef, forwardRef, OnDestroy } from '@angular/core';\n\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ThfRichTextBaseComponent } from './thf-rich-text-base.component';\n\n/**\n * @docsExtends ThfRichTextBaseComponent\n *\n * @example\n *\n * <example name=\"thf-rich-text-basic\" title=\"Totvs Rich Text Basic\">\n *   <file name=\"sample-thf-rich-text-basic/sample-thf-rich-text-basic.component.html\"> </file>\n *   <file name=\"sample-thf-rich-text-basic/sample-thf-rich-text-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-rich-text-recipe\" title=\"Totvs Rich Text Recipe\">\n *   <file name=\"sample-thf-rich-text-recipe/sample-thf-rich-text-recipe.component.html\"> </file>\n *   <file name=\"sample-thf-rich-text-recipe/sample-thf-rich-text-recipe.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-rich-text',\n  templateUrl: './thf-rich-text.component.html',\n  providers: [\n  {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ThfRichTextComponent),\n    multi: true,\n  },\n  {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => ThfRichTextComponent),\n    multi: true,\n  }]\n})\nexport class ThfRichTextComponent extends ThfRichTextBaseComponent implements AfterViewInit, OnDestroy {\n\n  private listener = this.validateClassesForRequired.bind(this);\n\n  get errorMsg() {\n    return (this.errorMessage !== '' && !this.value && this.required && this.invalid) ? this.errorMessage : '';\n  }\n\n  constructor(private element: ElementRef) {\n    super();\n  }\n\n  ngAfterViewInit() {\n    // Se nÃ£o tem ngModel ou reactive form adiciona validaÃ§Ã£o com classes css\n    if (!this.onChangeModel) {\n      this.element.nativeElement.addEventListener('keyup', this.listener);\n      this.element.nativeElement.addEventListener('cut', this.listener);\n      this.element.nativeElement.addEventListener('paste', this.listener);\n    }\n  }\n\n  ngOnDestroy() {\n    if (!this.onChangeModel) {\n      this.element.nativeElement.removeEventListener('keyup', this.listener);\n      this.element.nativeElement.removeEventListener('cut', this.listener);\n      this.element.nativeElement.removeEventListener('paste', this.listener);\n    }\n  }\n\n  updateValue(value: string) {\n    this.value = value;\n    this.invalid = !value;\n    this.updateModel(this.value);\n  }\n\n  private validateClassesForRequired() {\n    setTimeout(() => {\n      const value = this.value;\n      const element = this.element.nativeElement;\n\n      if (!value && this.required) {\n        element.classList.add('ng-invalid');\n        element.classList.add('ng-dirty');\n      } else {\n        element.classList.remove('ng-invalid');\n      }\n    });\n  }\n\n}\n","export const thfRichTextLiteralsDefault = {\n  en: {\n    bold: 'Bold',\n    italic: 'Italic',\n    underline: 'Underline',\n    left: 'Left',\n    center: 'Center',\n    right: 'Right',\n    justify: 'Justify',\n    unorderedList: 'Bulleted list'\n  },\n  es: {\n    bold: 'Negrita',\n    italic: 'Cursiva',\n    underline: 'Subrayado',\n    left: 'Izquierda',\n    center: 'Centro',\n    right: 'Derecha',\n    justify: 'Justificado',\n    unorderedList: 'Lista con viÃ±etas'\n  },\n  pt: {\n    bold: 'Negrito',\n    italic: 'ItÃ¡lico',\n    underline: 'Sublinhado',\n    left: 'Esquerda',\n    center: 'Centro',\n    right: 'Direita',\n    justify: 'Justificado',\n    unorderedList: 'Lista com marcadores'\n  }\n};\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Output, ViewChild, Input } from '@angular/core';\n\nimport { ThfLanguageService } from '../../../../services/thf-language/thf-language.service';\nimport { thfRichTextLiteralsDefault } from '../thf-rich-text-literals';\nimport { ThfRichTextToolbarButtonGroupItem } from '../interfaces/thf-rich-text-toolbar-button-group-item.interface';\n\n@Component({\n  selector: 'thf-rich-text-toolbar',\n  templateUrl: './thf-rich-text-toolbar.component.html'\n})\nexport class ThfRichTextToolbarComponent implements AfterViewInit {\n\n  private _readonly: boolean;\n\n  readonly literals = {\n    ...thfRichTextLiteralsDefault[this.languageService.getShortLanguage()]\n  };\n\n  alignButtons: Array<ThfRichTextToolbarButtonGroupItem> = [\n    {\n      command: 'justifyleft',\n      icon: 'thf-icon-align-left',\n      tooltip: this.literals.left,\n      action: this.emitAlignCommand.bind(this, 'justifyleft'),\n      selected: true\n    },\n    {\n      command: 'justifycenter',\n      icon: 'thf-icon-align-center',\n      tooltip: this.literals.center,\n      action: this.emitAlignCommand.bind(this, 'justifycenter')\n    },\n    {\n      command: 'justifyright',\n      icon: 'thf-icon-align-right',\n      tooltip: this.literals.right,\n      action: this.emitAlignCommand.bind(this, 'justifyright')\n    },\n    {\n      command: 'justifyfull',\n      icon: 'thf-icon-align-justify',\n      tooltip: this.literals.justify,\n      action: this.emitAlignCommand.bind(this, 'justifyfull')\n    }\n  ];\n\n  formatButtons: Array<ThfRichTextToolbarButtonGroupItem> = [\n    {\n      command: 'bold',\n      icon: 'thf-icon-text-bold',\n      tooltip: this.literals.bold,\n      action: this.emitCommand.bind(this, 'bold')\n    },\n    {\n      command: 'italic',\n      icon: 'thf-icon-text-italic',\n      tooltip: this.literals.italic,\n      action: this.emitCommand.bind(this, 'italic')\n    },\n    {\n      command: 'underline',\n      icon: 'thf-icon-text-underline',\n      tooltip: this.literals.underline,\n      action: this.emitCommand.bind(this, 'underline')\n    }\n  ];\n\n  listButtons: Array<ThfRichTextToolbarButtonGroupItem> = [\n    {\n      command: 'insertUnorderedList',\n      icon: 'thf-icon-list',\n      tooltip: this.literals.unorderedList,\n      action: this.emitCommand.bind(this, 'insertUnorderedList')\n    }\n  ];\n\n  @ViewChild('toolbarElement', { static: true }) toolbarElement: ElementRef;\n\n  @Input('t-readonly') set readonly(value: boolean) {\n    this._readonly = value;\n    this.toggleDisableButtons(this._readonly);\n  }\n\n  get readonly() {\n    return this._readonly;\n  }\n\n  @Output('t-command') command = new EventEmitter<string>();\n\n  constructor(private languageService: ThfLanguageService) { }\n\n  ngAfterViewInit() {\n    this.removeButtonFocus();\n  }\n\n  setButtonsStates(commands: Array<string>) {\n    if (!this.readonly) {\n      this.alignButtons.forEach(button => { button.selected = commands.includes(button.command); });\n      this.formatButtons.forEach(button => { button.selected = commands.includes(button.command); });\n      this.listButtons[0].selected = commands.includes(this.listButtons[0].command);\n    }\n  }\n\n  private emitAlignCommand(command: string) {\n    const index = this.alignButtons.findIndex( btn => btn.command === command );\n    if (this.alignButtons[index].selected) {\n      this.alignButtons[index].selected = false;\n    }\n    this.command.emit(command);\n  }\n\n  private emitCommand(command: string) {\n    this.command.emit(command);\n  }\n\n  private removeButtonFocus() {\n    const buttons = this.toolbarElement.nativeElement.querySelectorAll('button');\n    buttons.forEach(button => { button.setAttribute('tabindex', '-1'); });\n  }\n\n  private toggleDisableButtons(state: boolean) {\n    this.alignButtons.forEach(button => { button.disabled = state; });\n    this.formatButtons.forEach(button => { button.disabled = state; });\n    this.listButtons[0].disabled = state;\n  }\n\n}\n","import { Component, ElementRef, forwardRef } from '@angular/core';\nimport { AbstractControl, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nimport { ThfInputGeneric } from '../thf-input-generic/thf-input-generic';\n\n/**\n * @docsExtends ThfInputBaseComponent\n *\n * @example\n *\n * <example name=\"thf-input-basic\" title=\"Totvs Input Basic\">\n *  <file name=\"sample-thf-input-basic/sample-thf-input-basic.component.html\"> </file>\n *  <file name=\"sample-thf-input-basic/sample-thf-input-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-input-labs\" title=\"Totvs Input Labs\">\n *  <file name=\"sample-thf-input-labs/sample-thf-input-labs.component.html\"> </file>\n *  <file name=\"sample-thf-input-labs/sample-thf-input-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-input-reactive-form\" title=\"Totvs Input - Reactive Form\">\n *  <file name=\"sample-thf-input-reactive-form/sample-thf-input-reactive-form.component.html\"> </file>\n *  <file name=\"sample-thf-input-reactive-form/sample-thf-input-reactive-form.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-input',\n  templateUrl: './thf-input.component.html',\n  providers: [\n  {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ThfInputComponent),\n    multi: true,\n  },\n  {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => ThfInputComponent),\n    multi: true,\n  }]\n})\nexport class ThfInputComponent extends ThfInputGeneric {\n\n  constructor(el: ElementRef) {\n    super(el);\n  }\n\n  extraValidation(c: AbstractControl): { [key: string]: any; } {\n    return null;\n  }\n\n}\n","import {  ElementRef } from '@angular/core';\n\nimport { ThfInputGeneric } from '../thf-input-generic/thf-input-generic';\n\nexport abstract class ThfNumberBaseComponent extends ThfInputGeneric {\n\n  type = 'number';\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  eventOnInput(e: any) {\n    if (!this.mask) {\n      let value = e.target.value;\n      const valueMaxlength = this.validMaxLength(this.maxlength, value);\n\n      if (value !== valueMaxlength) {\n        value = valueMaxlength;\n\n        this.inputEl.nativeElement.value = value;\n      }\n\n      this.callOnChange(this.formatNumber(value));\n    }\n  }\n\n  validMaxLength(maxlength: number, value: string) {\n\n    if (maxlength && value.length > maxlength) {\n      const substringValue = value.toString().substring(0, maxlength);\n\n      if (substringValue && this.isEndWithDot(substringValue)) {\n        return substringValue.toString().substring(0, maxlength - 1);\n      }\n\n      return substringValue;\n    }\n\n    return value;\n  }\n\n  writeValueModel(value) {\n    if (this.inputEl) {\n      if (value || value === 0) {\n        if (this.mask) {\n          this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));\n\n          // Se o model for definido como formatado, entÃ£o precisa atualizÃ¡-lo no primeiro acesso\n          if (this.objMask.formatModel) {\n            this.onChangePropagate(this.objMask.valueToModel);\n          }\n        } else {\n          this.inputEl.nativeElement.value = value;\n        }\n      } else { // Se for o valor for undefined, deve limpar o campo\n        this.inputEl.nativeElement.value = '';\n      }\n    }\n\n    // Emite evento quando o model Ã© atualizado, inclusive a primeira vez\n\n    this.changeModel.emit(value);\n\n  }\n\n  private isEndWithDot(value: string) {\n    return value && value.lastIndexOf('.') === value.length - 1;\n  }\n\n  private formatNumber(value) {\n    return value ? Number(value) : null;\n  }\n\n}\n","import { Component, ElementRef, forwardRef, Input } from '@angular/core';\nimport { AbstractControl, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nimport { minFailed, maxFailed } from '../validators';\nimport { ThfNumberBaseComponent } from './thf-number-base.component';\n\n/**\n * @docsExtends ThfInputBaseComponent\n *\n * @description\n *\n * thf-number Ã© um input especÃ­fico para receber apenas nÃºmeros.\n * Ã possÃ­vel configurar um valor mÃ­nimo, mÃ¡ximo e um step com t-min, t-max e t-step,\n * respectivamente.\n *\n * @example\n *\n * <example name=\"thf-number-basic\" title=\"Totvs Number Basic\">\n *  <file name=\"sample-thf-number-basic/sample-thf-number-basic.component.html\"> </file>\n *  <file name=\"sample-thf-number-basic/sample-thf-number-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-number-labs\" title=\"Totvs Number Labs\">\n *  <file name=\"sample-thf-number-labs/sample-thf-number-labs.component.html\"> </file>\n *  <file name=\"sample-thf-number-labs/sample-thf-number-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-number-calculate\" title=\"Totvs Number - Calculate\">\n *  <file name=\"sample-thf-number-calculate/sample-thf-number-calculate.component.html\"> </file>\n *  <file name=\"sample-thf-number-calculate/sample-thf-number-calculate.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-number',\n  templateUrl: './thf-number.component.html',\n  providers: [\n  {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ThfNumberComponent),\n    multi: true,\n  },\n  {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => ThfNumberComponent),\n    multi: true,\n  }]\n})\nexport class ThfNumberComponent extends ThfNumberBaseComponent {\n\n  /** Valor mÃ­nimo. */\n  min?: number;\n  @Input('t-min') set setMin(min: string) {\n    const parsedInt = parseInt(min, 10);\n    this.min = !isNaN(parsedInt) ? parsedInt : undefined;\n    this.validateModel();\n  }\n\n  /** Valor mÃ¡ximo. */\n  max?: number;\n  @Input('t-max') set setMax(max: string) {\n    const parsedInt = parseInt(max, 10);\n    this.max = !isNaN(parsedInt) ? parsedInt : undefined;\n    this.validateModel();\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Intervalo.\n   *\n   * @default 1\n   */\n  @Input('t-step') step?: string = '1';\n\n  constructor(el: ElementRef) {\n    super(el);\n  }\n\n  extraValidation(abstractControl: AbstractControl): { [key: string]: any; } {\n\n    if (minFailed(this.min, abstractControl.value)) {\n      return { min: {\n        valid: false,\n      }};\n    }\n\n    if (maxFailed(this.max, abstractControl.value)) {\n      return { max: {\n        valid: false,\n      }};\n    }\n\n    return null;\n  }\n\n}\n","import { AbstractControl, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Component, ElementRef, forwardRef, Input } from '@angular/core';\n\nimport { convertToBoolean } from '../../../utils/util';\nimport { ThfInputGeneric } from '../thf-input-generic/thf-input-generic';\n\n/**\n * @docsExtends ThfInputBaseComponent\n *\n * @description\n * O thf-password Ã© um input especÃ­fico para senhas. JÃ¡ possui tipo, estilo e Ã­cone predefinidos.\n *\n * @example\n *\n * <example name=\"thf-password-basic\" title=\"Totvs Password Basic\">\n *   <file name=\"sample-thf-password-basic/sample-thf-password-basic.component.html\"> </file>\n *   <file name=\"sample-thf-password-basic/sample-thf-password-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-password-labs\" title=\"Totvs Password Labs\">\n *   <file name=\"sample-thf-password-labs/sample-thf-password-labs.component.html\"> </file>\n *   <file name=\"sample-thf-password-labs/sample-thf-password-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-password-reset\" title=\"Totvs Password - Reset\">\n *   <file name=\"sample-thf-password-reset/sample-thf-password-reset.component.html\"> </file>\n *   <file name=\"sample-thf-password-reset/sample-thf-password-reset.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-password',\n  templateUrl: './thf-password.component.html',\n  providers: [\n  {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ThfPasswordComponent),\n    multi: true,\n  },\n  {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => ThfPasswordComponent),\n    multi: true,\n  }]\n})\nexport class ThfPasswordComponent extends ThfInputGeneric {\n\n  private _hidePasswordPeek?: boolean = false;\n\n  type = 'password';\n  visiblePassword = false;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Permite esconder a funÃ§Ã£o de espiar a senha digitada.\n   *\n   * @default `false`\n   */\n  @Input('t-hide-password-peek') set hidePasswordPeek(value: boolean) {\n    this._hidePasswordPeek = convertToBoolean(value);\n    if (value) {\n      this.visiblePassword = false;\n      this.type = 'password';\n    }\n  }\n\n  get hidePasswordPeek(): boolean {\n    return this._hidePasswordPeek;\n  }\n\n  constructor(el: ElementRef) {\n    super(el);\n  }\n\n  extraValidation(c: AbstractControl): { [key: string]: any; } {\n    return null;\n  }\n\n  showPassword() {\n    this.visiblePassword = !this.visiblePassword;\n    this.type = this.type === 'password' ? 'text' : 'password';\n  }\n\n}\n","import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { EventEmitter, Input, Output } from '@angular/core';\n\nimport { convertToBoolean, convertToInt, removeDuplicatedOptions } from '../../../utils/util';\nimport { requiredFailed } from '../validators';\n\nimport { ThfRadioGroupOption } from './thf-radio-group-option.interface';\n\nconst thfRadioGroupColumnsDefaultLength: number = 6;\nconst thfRadioGroupColumnsTotalLength: number = 12;\n\n/**\n * @description\n *\n * O componente `thf-radio-group` deve ser utilizado para disponibilizar mÃºltiplas opÃ§Ãµes ao usuÃ¡rio, permitindo a ele que\n * selecione apenas uma delas. Seu uso Ã© recomendado para um nÃºmero pequeno de opÃ§Ãµes, caso contrÃ¡rio, recomenda-se o uso\n * do [**thf-combo**](/documentation/thf-combo) ou [**thf-select**](/documentation/thf-select).\n *\n * Este nÃ£o Ã© um componente de multiseleÃ§Ã£o, se for este o caso, deve-se utilizar o\n * [**thf-checkbox-group**](/documentation/thf-checkbox-group).\n *\n * > Ao passar um valor para o *model* que nÃ£o esteja na lista de opÃ§Ãµes, o mesmo serÃ¡ definido como `undefined`.\n */\nexport abstract class ThfRadioGroupBaseComponent implements ControlValueAccessor, Validator {\n\n  private _columns: number = thfRadioGroupColumnsDefaultLength;\n  private _disabled?: boolean = false;\n  private _options: Array<ThfRadioGroupOption>;\n  private _required?: boolean = false;\n\n  mdColumns: number = thfRadioGroupColumnsDefaultLength;\n  value: any;\n\n  private onChangePropagate: any = null;\n  private validatorChange;\n\n  /** Nome das opÃ§Ãµes. */\n  @Input('name') name: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define a quantidade de colunas para exibiÃ§Ã£o das opÃ§Ãµes.\n   *\n   * **ConsideraÃ§Ãµes:**\n   *  - Ã possÃ­vel exibir as opÃ§Ãµes entre `1` e `4` colunas.\n   *  - O nÃºmero mÃ¡ximo de colunas Ã© invariÃ¡vel nas seguintes resoluÃ§Ãµes:\n   *    + `sm`: `1`\n   *    + `md`: `2`\n   *\n   * @default `2`\n   */\n  @Input('t-columns') set columns(value: number) {\n    const columns = convertToInt(value, thfRadioGroupColumnsDefaultLength);\n\n    this._columns = this.getGridSystemColumns(columns, 4);\n    this.mdColumns = this.getGridSystemColumns(columns, 2);\n  }\n\n  get columns() {\n    return this._columns;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo serÃ¡ desabilitado.\n   *\n   * @default `false`\n   */\n  @Input('t-disabled') set disabled(disabled: boolean) {\n    this._disabled = convertToBoolean(disabled);\n\n    this.validateModel();\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo serÃ¡ obrigatÃ³rio.\n   *\n   * @default `false`\n   */\n  @Input('t-required') set required(required: boolean) {\n    this._required = convertToBoolean(required);\n\n    this.validateModel();\n  }\n\n  get required() {\n    return this._required;\n  }\n\n  /**\n   * Lista de opÃ§Ãµes que serÃ£o exibidas.\n   * Nesta propriedade deve ser definido um array de objetos que implementam a interface ThfRadioGroupOption.\n   */\n  @Input('t-options') set options(value: Array<ThfRadioGroupOption>) {\n    this._options = value;\n    removeDuplicatedOptions(this.options);\n  }\n  get options() {\n    return this._options;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se a indicaÃ§Ã£o de campo opcional serÃ¡ exibida.\n   *\n   * > NÃ£o serÃ¡ exibida a indicaÃ§Ã£o se:\n   * - O campo conter `t-required`;\n   * - NÃ£o possuir `t-help` e/ou `t-label`.\n   *\n   * @default `false`\n   */\n  @Input('t-optional') optional: boolean;\n\n  /** Evento ao alterar valor do campo. */\n  @Output('t-change') change?: EventEmitter<any> = new EventEmitter<any>();\n\n  // Deve retornar o valor elemento que contÃ©m o valor passado por parÃ¢metro\n  abstract getElementByValue(value: any): any;\n\n  // FunÃ§Ã£o que controla quando deve ser emitido onChange e atualiza o Model\n  changeValue(changedValue: any) {\n    if (this.onChangePropagate) {\n      this.onChangePropagate(changedValue);\n    }\n\n    if (this.value !== changedValue) {\n      this.change.emit(changedValue);\n    }\n\n    this.value = changedValue;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChangePropagate = fn;\n  }\n\n  registerOnTouched(fn: any) { }\n\n  registerOnValidatorChange(fn: any) {\n    this.validatorChange = fn;\n  }\n\n  validate(abstractControl: AbstractControl): { [key: string]: any; } {\n\n    if (requiredFailed(this.required, this.disabled, abstractControl.value)) {\n      return {\n        required: {\n          valid: false,\n        }\n      };\n    }\n\n  }\n\n  writeValue(modelValue: any) {\n    this.value = modelValue;\n\n    // Busca radio com o valor especificado\n    const element = this.getElementByValue(modelValue);\n    if (!element && this.onChangePropagate) {\n      this.value = undefined;\n      this.onChangePropagate(this.value);\n    }\n  }\n\n  private checkColumnsRange(columns, maxColumns): boolean {\n    const minColumns = 1;\n\n    return columns >= minColumns && columns <= maxColumns;\n  }\n\n  private getGridSystemColumns(columns: number, maxColumns: number): number {\n    const gridSystemColumns = thfRadioGroupColumnsTotalLength / columns;\n\n    return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : thfRadioGroupColumnsDefaultLength;\n  }\n\n  private validateModel() {\n    if (this.validatorChange) {\n      this.validatorChange();\n    }\n  }\n\n}\n","import { Component, DoCheck, ElementRef, forwardRef, Input, IterableDiffers, ViewChild } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { removeDuplicatedOptions } from '../../../utils/util';\n\nimport { ThfRadioGroupBaseComponent } from './thf-radio-group-base.component';\n\n/**\n * @docsExtends ThfRadioGroupBaseComponent\n *\n * @example\n *\n * <example name=\"thf-radio-group-basic\" title=\"Totvs Radio Group Basic\">\n *  <file name=\"sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.html\"> </file>\n *  <file name=\"sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.ts\"> </file>\n *  <file name=\"sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.e2e-spec.ts\"> </file>\n *  <file name=\"sample-thf-radio-group-basic/sample-thf-radio-group-basic.component.po.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-radio-group-labs\" title=\"Totvs Radio Group Labs\">\n *  <file name=\"sample-thf-radio-group-labs/sample-thf-radio-group-labs.component.html\"> </file>\n *  <file name=\"sample-thf-radio-group-labs/sample-thf-radio-group-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-radio-group-translator\" title=\"Totvs Radio Group - Translator\">\n *  <file name=\"sample-thf-radio-group-translator/sample-thf-radio-group-translator.component.html\"> </file>\n *  <file name=\"sample-thf-radio-group-translator/sample-thf-radio-group-translator.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-radio-group-translator-reactive-form\" title=\"Totvs Radio Group - Translator Reactive Form\">\n *  <file name=\"sample-thf-radio-group-translator-reactive-form/sample-thf-radio-group-translator-reactive-form.component.html\"> </file>\n *  <file name=\"sample-thf-radio-group-translator-reactive-form/sample-thf-radio-group-translator-reactive-form.component.ts\"> </file>\n * </example>\n *\n */\n@Component({\n  selector: 'thf-radio-group',\n  templateUrl: './thf-radio-group.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ThfRadioGroupComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => ThfRadioGroupComponent),\n      multi: true,\n    }\n  ]\n})\nexport class ThfRadioGroupComponent extends ThfRadioGroupBaseComponent implements DoCheck {\n\n  /** Label do campo. */\n  @Input('t-label') label?: string;\n\n  /** Texto de apoio do campo. */\n  @Input('t-help') help?: string;\n\n  @ViewChild('inp', {read: ElementRef, static: true }) inputEl: ElementRef;\n\n  differ: any;\n\n  constructor(differs: IterableDiffers) {\n    super();\n    this.differ = differs.find([]).create(null);\n  }\n\n  ngDoCheck() {\n    const change = this.differ.diff(this.options);\n    if (change) {\n      removeDuplicatedOptions(this.options);\n    }\n  }\n\n  eventClick(value: any, disabled: any) {\n    if (!disabled) {\n      this.changeValue(value);\n    }\n  }\n\n  getElementByValue(value) {\n    return this.inputEl.nativeElement.querySelector(`input[value='${value}']`);\n  }\n\n  onKeyUp(event: KeyboardEvent, value) {\n    const key = event.keyCode || event.which;\n\n    if (this.isArrowKey(key)) {\n      this.changeValue(value);\n    }\n  }\n\n  private isArrowKey(key: number) {\n    return key >= 37 && key <= 40;\n  }\n\n}\n","import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { ChangeDetectorRef, ElementRef, EventEmitter, Input, Output } from '@angular/core';\n\nimport { convertToBoolean, removeDuplicatedOptions, removeUndefinedAndNullOptions } from '../../../utils/util';\nimport { requiredFailed } from '../validators';\n\nimport { ThfSelectOption } from './thf-select-option.interface';\n\n/**\n * @description\n *\n * O componente thf-select exibe uma lista de valores e permite que o usuÃ¡rio selecione um desses valores.\n * Os valores listados podem ser fixos ou dinÃ¢micos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.\n * O thf-select nÃ£o permite que o usuÃ¡rio informe um valor diferente dos valores listados, isso garante a consistÃªncia da informaÃ§Ã£o.\n * O thf-select nÃ£o permite que sejam passados valores duplicados, undefined e null para as opÃ§Ãµes, excluindo-os da lista.\n *\n * > Ao passar um valor para o _model_ que nÃ£o estÃ¡ na lista de opÃ§Ãµes, o mesmo serÃ¡ definido como `undefined`.\n *\n * TambÃ©m existe a possibilidade de utilizar um _template_ para a exibiÃ§Ã£o dos itens da lista,\n * veja mais em **[t-select-option-template](/documentation/thf-select-option-template)**.\n */\nexport abstract class ThfSelectBaseComponent implements ControlValueAccessor, Validator {\n\n  private _disabled?: boolean = false;\n  private _options: Array<ThfSelectOption>;\n  private _readonly: boolean = false;\n  private _required?: boolean = false;\n\n  private onValidatorChange;\n\n  /** Adiciona uma label no componente. */\n  @Input('t-label') label?: string;\n\n  /** Nome do componente. */\n  @Input('name') name: string;\n\n  /** Texto de apoio para o campo. */\n  @Input('t-help') help?: string;\n\n  /** Mensagem que aparecerÃ¡ enquanto nenhuma opÃ§Ã£o estiver selecionada. */\n  @Input('t-placeholder') placeholder?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se a indicaÃ§Ã£o de campo opcional serÃ¡ exibida.\n   *\n   * > NÃ£o serÃ¡ exibida a indicaÃ§Ã£o se:\n   * - O campo conter `t-required`;\n   * - NÃ£o possuir `t-help` e/ou `t-label`.\n   *\n   * @default `false`\n   */\n  @Input('t-optional') optional: boolean;\n\n  /**\n   * Nesta propriedade deve ser definido uma coleÃ§Ã£o de objetos que implementam a interface ThfSelectOption.\n   * Caso esta lista estiver vazia, o model serÃ¡ undefined.\n   */\n  @Input('t-options') set options(options: Array<ThfSelectOption>) {\n    this._options = options;\n    removeDuplicatedOptions(this._options);\n    removeUndefinedAndNullOptions(this._options);\n    this.onUpdateOptions();\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  /** Deve ser informada uma funÃ§Ã£o que serÃ¡ disparada quando houver alteraÃ§Ãµes no ngModel. */\n  @Output('t-change') change?: EventEmitter<any> = new EventEmitter<any>();\n\n  // FunÃ§Ã£o para atualizar o ngModel do componente, necessÃ¡rio quando nÃ£o for utilizado dentro da tag form.\n  @Output('ngModelChange') ngModelChange?: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo serÃ¡ desabilitado.\n   *\n   * @default `false`\n   */\n  @Input('t-disabled') set disabled(disabled: string | boolean) {\n    this._disabled = convertToBoolean(disabled);\n\n    this.validateModel();\n  }\n  get disabled() {\n    return this._disabled;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo serÃ¡ somente para leitura.\n   *\n   * @default `false`\n   */\n  @Input('t-readonly') set readonly(value: boolean) {\n    this._readonly = convertToBoolean(value);\n  }\n\n  get readonly() {\n    return this._readonly;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo serÃ¡ obrigatÃ³rio.\n   *\n   * @default `false`\n   */\n  @Input('t-required')\n  set required(required: string | boolean) {\n    this._required = convertToBoolean(required);\n\n    this.validateModel();\n  }\n  get required() {\n    return this._required;\n  }\n\n  changeDetector: ChangeDetectorRef;\n  onModelChange: any;\n  onModelTouched: any;\n  readyToValidation: boolean = false;\n\n  protected clickoutListener: () => void;\n\n  constructor(public element: ElementRef, changeDetector: ChangeDetectorRef) {\n    this.element = element;\n    this.changeDetector = changeDetector;\n  }\n\n  callModelChange(value: any) {\n    // Caso o componente estiver dentro de um form, terÃ¡ acesso ao mÃ©todo onModelChange.\n    return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);\n  }\n\n  onChange(value) {\n    this.change.emit(value);\n  }\n\n  validate(abstractControl: AbstractControl): { [key: string]: any; } {\n\n    if (requiredFailed(this._required, this._disabled, abstractControl.value)) {\n      return {\n        required: {\n          valid: false,\n        }\n      };\n    }\n\n    return null;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  registerOnValidatorChange(fn: any) {\n    this.onValidatorChange = fn;\n  }\n\n  private validateModel() {\n    if (this.onValidatorChange) {\n      this.onValidatorChange();\n    }\n  }\n\n  abstract onUpdateOptions(): void;\n\n  abstract updateModel(selectOption: ThfSelectOption): void;\n\n  abstract writeValue(value: any): void;\n\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @usedBy ThfSelectComponent\n *\n * @description\n *\n * Esta diretiva permite personalizar o conteÃºdo dos itens exibidos na lista suspensa do componente.\n *\n * > Quando utilizada em _mobile_ serÃ¡ exibido o componente nativo.\n *\n * Para personalizar o conteÃºdo de cada item da lista deve-se utilizar a diretiva `t-select-option-template` com `ng-template`\n * dentro da tag `thf-select`.\n *\n * Para obter a referÃªncia do item atual, use `let-option`, com isso vocÃª terÃ¡ acesso aos valores e poderÃ¡ personalizar sua exibiÃ§Ã£o.\n *\n * Esta diretiva compÃµe-se de dois meios para uso, de forma explÃ­cita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:\n *\n * ```\n * ...\n * <thf-select\n *   name=\"select\"\n *   [(ngModel)]=\"select\"\n *   [t-options]=\"options\">\n *     <ng-template t-select-option-template let-option>\n *       <option-template [option]=\"option\"></option-template>\n *     </ng-template>\n * </thf-select>\n * ...\n * ```\n *\n * ```\n * ...\n * <thf-select\n *   name=\"select\"\n *   [(ngModel)]=\"select\"\n *   [t-options]=\"options\">\n *     <div *t-select-option-template=\"let option\">\n *       <option-template [option]=\"option\"></option-template>\n *     </div>\n * </thf-select>\n * ...\n *\n * ```\n */\n@Directive({\n  selector: '[t-select-option-template]'\n})\nexport class ThfSelectOptionTemplateDirective {\n\n  // NecessÃ¡rio manter templateRef para o funcionamento do row template.\n  constructor(public templateRef: TemplateRef<any>) { }\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, ContentChild, Component, DoCheck, ElementRef, forwardRef, HostListener,\n  IterableDiffers, Renderer2, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nimport { isMobile, removeDuplicatedOptions, removeUndefinedAndNullOptions, validValue } from '../../../utils/util';\nimport { ThfControlPositionService } from './../../../services/thf-control-position/thf-control-position.service';\nimport { ThfKeyCodeEnum } from './../../../enums/thf-key-code.enum';\n\nimport { ThfSelectBaseComponent } from './thf-select-base.component';\nimport { ThfSelectOption } from './thf-select-option.interface';\nimport { ThfSelectOptionTemplateDirective } from './thf-select-option-template/thf-select-option-template.directive';\n\nconst thfSelectContentOffset = 8;\nconst thfSelectContentPositionDefault = 'bottom';\n\n/**\n * @docsExtends ThfSelectBaseComponent\n *\n * @example\n *\n * <example name=\"thf-select-basic\" title=\"Totvs Select Basic\">\n *   <file name=\"sample-thf-select-basic/sample-thf-select-basic.component.html\"> </file>\n *   <file name=\"sample-thf-select-basic/sample-thf-select-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-select-labs\" title=\"Totvs Select Labs\">\n *   <file name=\"sample-thf-select-labs/sample-thf-select-labs.component.html\"> </file>\n *   <file name=\"sample-thf-select-labs/sample-thf-select-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-select-customer-registration\" title=\"Totvs Select - Customer registration\">\n *   <file name=\"sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.html\"> </file>\n *   <file name=\"sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.ts\"> </file>\n *   <file name=\"sample-thf-select-customer-registration/sample-thf-select-customer-registration.service.ts\"> </file>\n *   <file name='sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.e2e-spec.ts'> </file>\n *   <file name='sample-thf-select-customer-registration/sample-thf-select-customer-registration.component.po.ts'> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-select',\n  templateUrl: './thf-select.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ThfSelectComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => ThfSelectComponent),\n      multi: true,\n    },\n    ThfControlPositionService\n  ]\n})\nexport class ThfSelectComponent extends ThfSelectBaseComponent implements DoCheck {\n\n  displayValue;\n  isMobile: any = isMobile();\n  modelValue: any;\n  open: boolean = false;\n  selectedValue: any;\n  selectIcon: string = 'thf-icon-arrow-down';\n  scrollPosition: number;\n\n  private differ: any;\n\n  eventListenerFunction: () => void;\n  eventResizeListener: () => void;\n\n  @ContentChild(ThfSelectOptionTemplateDirective, { static: true }) selectOptionTemplate: ThfSelectOptionTemplateDirective;\n\n  @ViewChild('contentList', {read: ElementRef, static: true}) contentList: ElementRef;\n  @ViewChild('icon', {read: ElementRef, static: true}) iconElement: ElementRef;\n  @ViewChild('select', {read: ElementRef, static: true}) selectElement: ElementRef;\n  @ViewChild('selectButton', {read: ElementRef, static: true}) selectButtonElement: ElementRef;\n\n  constructor(\n    element: ElementRef,\n    changeDetector: ChangeDetectorRef,\n    differs: IterableDiffers,\n    public renderer: Renderer2,\n    private controlPosition: ThfControlPositionService) {\n\n    super(element, changeDetector);\n\n    this.differ = differs.find([]).create(null);\n  }\n\n  get isInvisibleSelectNative() {\n    return this.readonly && this.isMobile;\n  }\n\n  @HostListener('keydown', ['$event']) onKeydown($event?: any) {\n\n    const charCode = $event.which || $event.keyCode;\n\n    // Tratamentos para quando o readonly for ativado.\n    if (this.readonly) {\n      // deve matar o evento do teclado devido a alterar o valor do model mesmo com os options fechados\n      if (charCode !== ThfKeyCodeEnum.tab) {\n        this.disableDefaultEventAndToggleButton();\n        $event.preventDefault();\n      }\n      return;\n    }\n\n    // Seleciona os itens com as teclas \"up\" e \"down\"\n    if ((!this.open || $event.altKey) && (charCode === ThfKeyCodeEnum.arrowDown || charCode === ThfKeyCodeEnum.arrowUp)) {\n      this.disableDefaultEventAndToggleButton();\n    }\n\n    // Abre o thf-select com as teclas \"enter\" e \"espaÃ§o\"\n    if (charCode === ThfKeyCodeEnum.enter || charCode === ThfKeyCodeEnum.space) {\n      this.disableDefaultEventAndToggleButton();\n    }\n\n    // Fecha o thf-select com a tecla \"tab\"\n    if (this.open && charCode === ThfKeyCodeEnum.tab) {\n      $event.preventDefault();\n      this.toggleButton();\n    }\n  }\n\n  ngDoCheck() {\n    const change = this.differ.diff(this.options);\n    if (change) {\n      removeDuplicatedOptions(this.options);\n      removeUndefinedAndNullOptions(this.options);\n    }\n  }\n\n  hideDropDown() {\n    this.selectIcon = 'thf-icon-arrow-down';\n    this.selector('.thf-select-container').classList.remove('thf-select-show');\n    this.open = false;\n\n    this.changeDetector.markForCheck();\n    this.selectElement.nativeElement.focus();\n\n    this.removeListeners();\n  }\n\n  isEqual(value: any, inputValue: any): boolean {\n    if ((value || value === 0) && inputValue) {\n      return value.toString() === inputValue.toString();\n    }\n\n    if ((value === null && inputValue !== null) ||\n        (value === undefined && inputValue !== undefined)) {\n      value = `${value}`; // Transformando em string\n    }\n\n    return value === inputValue;\n  }\n\n  onOptionClick(option: ThfSelectOption) {\n    this.toggleButton();\n    this.updateModel(option);\n  }\n\n  // Altera o valor ao selecionar um item.\n  onSelectChange(value: any) {\n    const ulDropdpwn = this.element.nativeElement.querySelector('ul.thf-select-content');\n\n    if (value && this.options && this.options.length) {\n\n      const optionFound: ThfSelectOption = this.options.find(option => {\n        return this.isEqual(option.value, value);\n      });\n\n      if (optionFound) {\n        const index = this.options.indexOf(optionFound);\n        ulDropdpwn.scrollTop =  this.scrollValue(index, ulDropdpwn.clientHeight);\n        this.updateModel(optionFound);\n      }\n    }\n  }\n\n  onUpdateOptions() {\n    if (this.modelValue) {\n      this.onSelectChange(this.modelValue);\n    }\n  }\n\n  scrollValue(index, clientHeight) {\n    const heightScrollValue: number = (index + 1) * this.getSelectItemHeight();\n    return this.scrollPosition = heightScrollValue > clientHeight ? heightScrollValue :  0;\n  }\n\n  selector(query: string): Element {\n    return this.element.nativeElement.querySelector(query);\n  }\n\n  toggleButton(): void {\n    this.open ? this.hideDropDown() : this.showDropdown();\n  }\n\n  // Atualiza valores\n  updateModel(option: ThfSelectOption): void {\n    if (this.selectedValue !== option.value) {\n      this.selectedValue = option.value;\n      this.selectElement.nativeElement.value = option.value;\n      this.callModelChange(option.value);\n      this.displayValue = option.label;\n      this.onChange(option.value);\n    }\n  }\n\n  // Esconde Content do Select quando for clicado fora\n  wasClickedOnToggle(event: MouseEvent): void {\n    if (!this.selectButtonElement.nativeElement.contains(event.target) &&\n        !this.iconElement.nativeElement.contains(event.target)) {\n      this.hideDropDown();\n    }\n  }\n\n  // Recebe as alteraÃ§Ãµes do model\n  writeValue(value: any) {\n\n    const optionFound = this.options.find(option => {\n      return this.isEqual(option.value, value);\n    });\n\n    if (optionFound) {\n      this.selectElement.nativeElement.value = optionFound.value;\n      this.selectedValue = optionFound.value;\n      this.displayValue = (optionFound.label);\n\n    } else if (validValue(this.selectedValue)) {\n      this.selectElement.nativeElement.value = undefined;\n      this.callModelChange(undefined);\n      this.selectedValue = undefined;\n      this.displayValue = undefined;\n    }\n\n    this.modelValue = value;\n    this.changeDetector.detectChanges();\n  }\n\n  // MÃ©todo necessÃ¡rio para bloquear o evento default do select nativo.\n  // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo nÃ£o cancela o evento.\n  private disableDefaultEventAndToggleButton() {\n    this.selectElement.nativeElement.style.display = 'none';\n\n    setTimeout(() => {\n      this.selectElement.nativeElement.style.display = 'block';\n      this.toggleButton();\n    });\n  }\n\n  private getSelectItemHeight() {\n    const selectItem = this.selector('div.thf-select-item');\n\n    return selectItem && selectItem.clientHeight;\n  }\n\n  private initializeListeners() {\n\n    this.clickoutListener = this.renderer.listen('document', 'click', (event: MouseEvent) => {\n      this.wasClickedOnToggle(event);\n    });\n\n    this.eventResizeListener = this.renderer.listen('window', 'resize', () => {\n      this.hideDropDown();\n    });\n\n    window.addEventListener('scroll', this.onScroll, true);\n  }\n\n  private onScroll = (): void => {\n    this.controlPosition.adjustPosition(thfSelectContentPositionDefault);\n  }\n\n  private removeListeners() {\n    if (this.clickoutListener) {\n      this.clickoutListener();\n    }\n\n    this.eventResizeListener();\n    window.removeEventListener('scroll', this.onScroll, true);\n  }\n\n  private setPositionDropdown() {\n\n    this.controlPosition.setElements(\n      this.contentList.nativeElement,\n      thfSelectContentOffset,\n      this.selectButtonElement,\n      ['top', 'bottom'],\n      true\n    );\n\n    this.controlPosition.adjustPosition(thfSelectContentPositionDefault);\n  }\n\n  private showDropdown() {\n    if (!this.readonly) {\n      this.selectElement.nativeElement.focus();\n      if (this.options && this.options.length) {\n        const ulDropdpwn = this.element.nativeElement.querySelector('ul.thf-select-content');\n        ulDropdpwn.scrollTop = this.scrollPosition;\n      }\n      this.selectIcon = 'thf-icon-arrow-up';\n      this.selector('.thf-select-container').classList.add('thf-select-show');\n      this.open = true;\n      this.changeDetector.markForCheck();\n      this.setPositionDropdown();\n      this.initializeListeners();\n    }\n  }\n\n}\n","/**\n * @usedBy ThfSwitchComponent\n *\n * @description\n *\n * Enum para posicionar o label do valor do thf-switch.\n */\nexport enum ThfSwitchLabelPosition {\n  /** Posiciona o label do lado esquerdo do switch. */\n  Right,\n  /** Posiciona o label do lado direito do switch. */\n  Left\n}\n","import { ControlValueAccessor } from '@angular/forms';\nimport { EventEmitter, Input, Output } from '@angular/core';\n\nimport { convertToBoolean } from '../../../utils/util';\n\nimport { ThfSwitchLabelPosition } from './thf-switch-label-position.enum';\n\n/**\n * @description\n *\n * O componente `thf-switch` Ã© um [checkbox](/documentation/thf-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.\n * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade especÃ­fica.\n *\n * Pode-se ligar ou deligar o botÃ£o utilizando a tecla de espaÃ§o ou o clique do mouse.\n *\n * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,\n * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensÃ£o do usuÃ¡rio.\n *\n * > O componente nÃ£o altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.\n */\nexport class ThfSwitchBaseComponent implements ControlValueAccessor {\n\n  private _disabled?: boolean = false;\n\n  propagateChange: any;\n  switchValue: boolean = false;\n\n  /** Nome do componente. */\n  @Input('name') name: string;\n\n  /** RÃ³tulo exibido pelo componente. */\n  @Input('t-label') label?: string;\n\n  /** Texto de apoio para o campo. */\n  @Input('t-help') help?: string;\n\n  /**\n   * Texto exibido quando o valor do componente for `true`.\n   *\n   * @default `true`\n   */\n  labelOn?: string = 'true';\n  @Input('t-label-on') set setLabelOn(label: string) {\n    this.labelOn = label || 'true';\n  }\n\n  /**\n   * Texto exibido quando o valor do componente for `false`.\n   *\n   * @default `false`\n   */\n  labelOff?: string = 'false';\n  @Input('t-label-off') set setLabelOff(label: string) {\n    this.labelOff = label || 'false';\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * PosiÃ§Ã£o de exibiÃ§Ã£o do rÃ³tulo.\n   *\n   * > Por padrÃ£o exibe Ã  direita.\n   */\n  labelPosition?: ThfSwitchLabelPosition = ThfSwitchLabelPosition.Right;\n  @Input('t-label-position') set setLabelPosition(position: ThfSwitchLabelPosition) {\n    this.labelPosition = (position in ThfSwitchLabelPosition) ? parseInt(<any>position, 10) : ThfSwitchLabelPosition.Right;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica se o campo serÃ¡ desabilitado.\n   *\n   * @default `false`\n   */\n  @Input('t-disabled') set disabled(disabled: boolean) {\n    this._disabled = convertToBoolean(disabled);\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  /** Evento disparado ao alterar valor do campo. */\n  @Output('t-change') change?: EventEmitter<any> = new EventEmitter<any>();\n\n  // FunÃ§Ã£o para atualizar o ngModel do componente, necessÃ¡rio quando nÃ£o for utilizado dentro da tag form.\n  @Output('ngModelChange') ngModelChange?: EventEmitter<any> = new EventEmitter<any>();\n\n  changeValue(value: any) {\n    if (this.switchValue !== value) {\n      this.switchValue = value;\n\n      if (this.propagateChange) {\n        this.propagateChange(value);\n      } else {\n        this.ngModelChange.emit(value);\n      }\n      this.change.emit(this.switchValue);\n    }\n  }\n\n  eventClick() {\n    if (!this.disabled) {\n      this.changeValue(!this.switchValue);\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void { }\n\n  writeValue(value: any): void {\n    if (value !== this.switchValue) {\n      this.switchValue = !!value;\n    }\n  }\n\n}\n","import { AfterViewChecked, ChangeDetectorRef, Component, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ThfSwitchBaseComponent } from './thf-switch-base.component';\nimport { ThfSwitchLabelPosition } from './thf-switch-label-position.enum';\n\n/**\n * @docsExtends ThfSwitchBaseComponent\n *\n * @example\n *\n * <example name=\"thf-switch-basic\" title=\"Totvs Switch Basic\">\n *   <file name=\"sample-thf-switch-basic/sample-thf-switch-basic.component.html\"> </file>\n *   <file name=\"sample-thf-switch-basic/sample-thf-switch-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-switch-labs\" title=\"Totvs Switch Labs\">\n *   <file name=\"sample-thf-switch-labs/sample-thf-switch-labs.component.html\"> </file>\n *   <file name=\"sample-thf-switch-labs/sample-thf-switch-labs.component.ts\"> </file>\n *   <file name=\"sample-thf-switch-labs/sample-thf-switch-labs.component.e2e-spec.ts\"> </file>\n *   <file name=\"sample-thf-switch-labs/sample-thf-switch-labs.component.po.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-switch-order\" title=\"Totvs Switch - Order Summary\">\n *   <file name=\"sample-thf-switch-order/sample-thf-switch-order.component.html\"> </file>\n *   <file name=\"sample-thf-switch-order/sample-thf-switch-order.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-switch-order-reactive-form\" title=\"Totvs Switch - Order Summary Reactive Form\">\n *   <file name=\"sample-thf-switch-order-reactive-form/sample-thf-switch-order-reactive-form.component.html\"> </file>\n *   <file name=\"sample-thf-switch-order-reactive-form/sample-thf-switch-order-reactive-form.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-switch',\n  templateUrl: './thf-switch.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ThfSwitchComponent),\n      multi: true,\n    }\n  ]\n})\nexport class ThfSwitchComponent extends ThfSwitchBaseComponent implements AfterViewChecked {\n\n  constructor(private changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngAfterViewChecked(): void {\n    this.changeDetector.detectChanges();\n  }\n\n  getLabelPosition() {\n    switch (this.labelPosition) {\n      case ThfSwitchLabelPosition.Left: return 'left';\n      case ThfSwitchLabelPosition.Right: return 'right';\n      default: return 'right';\n    }\n  }\n\n  getSwitchPosition() {\n    switch (this.labelPosition) {\n      case ThfSwitchLabelPosition.Left: return 'right';\n      case ThfSwitchLabelPosition.Right: return 'left';\n      default: return 'left';\n    }\n  }\n\n  onKeyDown(event) {\n    if (event.which === 32 || event.keyCode === 32)  {\n      event.preventDefault();\n      this.eventClick();\n    }\n  }\n\n}\n","import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { EventEmitter, Input, Output } from '@angular/core';\n\nimport { convertToBoolean, convertToInt } from '../../../utils/util';\nimport { maxlengthFailed, minlengthFailed, requiredFailed } from '../validators';\n\n/**\n * @description\n *\n * Este Ã© um componente de entrada de dados que possibilita o preechimento com mÃºltiplas linhas.\n * Ã recomendado para observaÃ§Ãµes, detalhamentos e outras situaÃ§Ãµes onde o usuÃ¡rio deva preencher com um texto.\n *\n * Importante:\n *\n * - A propriedade `name` Ã© obrigatÃ³ria para que o formulÃ¡rio e o `model` funcionem corretamente. Do contrÃ¡rio, ocorrerÃ¡ um erro de\n * _Angular_, onde serÃ¡ necessÃ¡rio informar o atributo `name` ou o atributo `[ngModelOptions]=\"{standalone: true}\"`, por exemplo:\n *\n * ```\n * <thf-textarea\n *   [(ngModel)]=\"pessoa.nome\"\n *   [ngModelOptions]=\"{standalone: true}\">\n * </thf-textarea>\n * ```\n */\nexport abstract class ThfTextareaBaseComponent implements ControlValueAccessor, Validator {\n\n  private _disabled: boolean = false;\n  private _focus: boolean = false;\n  private _maxlength: number;\n  private _minlength: number;\n  private _readonly: boolean = false;\n  private _required: boolean = false;\n  private _rows: number = 3;\n\n  private modelLastUpdate: any;\n  private onChangePropagate: any = null;\n  // tslint:disable-next-line\n  private onTouched: any = null;\n  private validatorChange: any;\n\n  /** Label do campo. */\n  @Input('t-label') label?: string;\n\n  /** Texto de apoio do campo. */\n  @Input('t-help') help?: string;\n\n  /** Placeholder, mensagem que aparecerÃ¡ enquanto o campo nÃ£o estiver preenchido. */\n  @Input('t-placeholder') placeholder?: string = '';\n\n  /** Nome e Id do componente. */\n  @Input('name') name: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo serÃ¡ desabilitado.\n   *\n   * @default `false`\n   */\n  @Input('t-disabled') set disabled(disabled: boolean) {\n    this._disabled = convertToBoolean(disabled);\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se a indicaÃ§Ã£o de campo opcional serÃ¡ exibida.\n   *\n   * > NÃ£o serÃ¡ exibida a indicaÃ§Ã£o se:\n   * - O campo conter `t-required`;\n   * - NÃ£o possuir `t-help` e/ou `t-label`.\n   *\n   * @default `false`\n   */\n  @Input('t-optional') optional: boolean;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo serÃ¡ somente leitura.\n   *\n   * @default `false`\n   */\n  @Input('t-readonly') set readonly(readonly: boolean) {\n    this._readonly = convertToBoolean(readonly);\n  }\n\n  get readonly(): boolean {\n    return this._readonly;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo serÃ¡ obrigatÃ³rio.\n   *\n   * > Esta propriedade Ã© desconsiderada quando o _input_ estÃ¡ desabilitado `(t-disabled)`.\n   *\n   * @default `false`\n   */\n  @Input('t-required') set required(required: boolean) {\n    this._required = convertToBoolean(required);\n\n    this.validateModel();\n  }\n\n  get required(): boolean {\n    return this._required;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo iniciarÃ¡ com foco.\n   *\n   * @default `false`\n   */\n  @Input('t-focus') set focus(focus: boolean) {\n    this._focus = convertToBoolean(focus);\n  }\n\n  get focus(): boolean {\n    return this._focus;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica a quantidade mÃ­nima de caracteres que o campo aceita.\n   */\n  @Input('t-minlength') set minlength(minlength: number) {\n    this._minlength = convertToInt(minlength);\n    this.validateModel();\n  }\n\n  get minlength(): number {\n    return this._minlength;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica a quantidade mÃ¡xima de caracteres que o campo aceita.\n   */\n  @Input('t-maxlength') set maxlength(maxlength: number) {\n    this._maxlength = convertToInt(maxlength);\n    this.validateModel();\n  }\n\n  get maxlength(): number {\n    return this._maxlength;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica a quantidade de linhas que serÃ£o exibidas.\n   *\n   * @default `3`\n   */\n  @Input('t-rows') set rows(value: number) {\n    this._rows = isNaN(parseInt(<any>value, 10)) || value < 3 ? 3 : parseInt(<any>value, 10);\n  }\n  get rows(): number {\n    return this._rows;\n  }\n\n  /** Evento disparado ao sair do campo. */\n  @Output('t-blur') blur?: EventEmitter<any> = new EventEmitter<any>();\n\n  /** Evento disparado ao entrar do campo. */\n  @Output('t-enter') enter?: EventEmitter<any> = new EventEmitter<any>();\n\n  /** Evento disparado ao alterar valor e deixar o campo. */\n  @Output('t-change') change?: EventEmitter<any> = new EventEmitter<any>();\n\n  /** Evento disparado ao alterar valor do model. */\n  @Output('t-change-model') changeModel?: EventEmitter<any> = new EventEmitter<any>();\n\n  callOnChange(value: any) {\n    // Quando o input nÃ£o possui um formulÃ¡rio, entÃ£o esta funÃ§Ã£o nÃ£o Ã© registrada\n    if (this.onChangePropagate) {\n      this.onChangePropagate(value);\n    }\n\n    this.controlChangeModelEmitter(value);\n  }\n\n  controlChangeModelEmitter(value: any) {\n    if (this.modelLastUpdate !== value) {\n      this.changeModel.emit(value);\n      this.modelLastUpdate = value;\n    }\n  }\n\n  // FunÃ§Ãµes `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor\n  // usadas para interceptar as mudanÃ§as e nÃ£o atualizar automaticamente o Model\n  registerOnChange(func: any): void {\n    this.onChangePropagate = func;\n  }\n\n  registerOnTouched(func: any): void {\n    this.onTouched = func;\n  }\n\n  registerOnValidatorChange(func: any): void {\n    this.validatorChange = func;\n  }\n\n  validate(abstractControl: AbstractControl): { [key: string]: any; } {\n\n    if (requiredFailed(this.required, this.disabled, abstractControl.value)) {\n      return { required: {\n        valid: false,\n      }};\n    }\n\n    if (minlengthFailed(this.minlength, abstractControl.value)) {\n      return { minlength: {\n        valid: false,\n      }};\n    }\n\n    if (maxlengthFailed(this.maxlength, abstractControl.value)) {\n      return { maxlength: {\n        valid: false,\n      }};\n    }\n\n  }\n\n  // FunÃ§Ã£o implementada do ControlValueAccessor\n  writeValue(value: any) {\n    this.writeValueModel(value);\n  }\n\n  protected validateModel() {\n    if (this.validatorChange) {\n      this.validatorChange();\n    }\n  }\n\n  abstract writeValueModel(value: any): void;\n\n}\n","import { Component, ElementRef, forwardRef, ViewChild } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ThfTextareaBaseComponent } from './thf-textarea-base.component';\n\n/**\n * @docsExtends ThfTextareaBaseComponent\n *\n * @example\n *\n * <example name=\"thf-textarea-basic\" title=\"Totvs Textarea Basic\" >\n *  <file name=\"sample-thf-textarea-basic/sample-thf-textarea-basic.component.html\"> </file>\n *  <file name=\"sample-thf-textarea-basic/sample-thf-textarea-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-textarea-labs\" title=\"Totvs Textarea Labs\" >\n *  <file name=\"sample-thf-textarea-labs/sample-thf-textarea-labs.component.html\"> </file>\n *  <file name=\"sample-thf-textarea-labs/sample-thf-textarea-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-textarea-email\" title=\"Totvs Textarea - Email\" >\n *  <file name=\"sample-thf-textarea-email/sample-thf-textarea-email.component.html\"> </file>\n *  <file name=\"sample-thf-textarea-email/sample-thf-textarea-email.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-textarea-email-reactive-form\" title=\"Totvs Textarea - Email Reactive Form\" >\n *  <file name=\"sample-thf-textarea-email-reactive-form/sample-thf-textarea-email-reactive-form.component.html\"> </file>\n *  <file name=\"sample-thf-textarea-email-reactive-form/sample-thf-textarea-email-reactive-form.component.ts\"> </file>\n * </example>\n *\n */\n@Component({\n  selector: 'thf-textarea',\n  templateUrl: './thf-textarea.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ThfTextareaComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => ThfTextareaComponent),\n      multi: true,\n    }\n  ]\n})\nexport class ThfTextareaComponent extends ThfTextareaBaseComponent {\n\n  @ViewChild('inp', {read: ElementRef, static: true }) inputEl: ElementRef;\n\n  valueBeforeChange: any;\n  fireChange: boolean = false;\n\n  constructor() {\n    super();\n  }\n\n  writeValueModel(value: any): void {\n    if (this.inputEl) {\n      if (!value) {\n        // Se for o valor for undefined, deve limpar o campo\n        this.inputEl.nativeElement.value = '';\n      } else {\n        this.inputEl.nativeElement.value = value;\n      }\n    }\n\n    // Emite evento quando o model Ã© atualizado, inclusive a primeira vez\n    if (value) {\n      this.change.emit(value);\n    }\n  }\n\n  validMaxLength(maxlength: number, value: string) {\n    return (maxlength && value.length > maxlength) ? value.toString().substring(0, maxlength) : value;\n  }\n\n  eventOnInput(event: any) {\n    const value = this.validMaxLength(this.maxlength, event.target.value);\n    this.callOnChange(value);\n    this.inputEl.nativeElement.value = value;\n  }\n\n  eventOnFocus() {\n    // Atualiza valor da variÃ¡vel que serÃ¡ usada para verificar se o campo teve alteraÃ§Ã£o\n    this.valueBeforeChange = this.inputEl.nativeElement.value;\n\n    // Dispara evento quando o usuÃ¡rio entrar no campo\n    // Este evento tambÃ©m Ã© disparado quando o campo inicia com foco.\n    this.enter.emit();\n  }\n\n  eventOnBlur() {\n    this.blur.emit();\n    this.controlChangeEmitter();\n  }\n\n  controlChangeEmitter() {\n    const elementValue = this.inputEl.nativeElement.value;\n\n    if (elementValue !== this.valueBeforeChange) {\n      this.change.emit(elementValue);\n    }\n  }\n\n}\n","// Enum de status de envio dos arquivos.\nexport enum ThfUploadStatus {\n  // Enviou com sucesso.\n  Uploaded,\n  // EstÃ¡ enviando.\n  Uploading,\n  // Ocorreu algum erro no envio.\n  Error,\n  // NÃ£o enviou ou aconteceu algum erro.\n  None\n}\n","import { ThfUploadStatus } from './thf-upload-status.enum';\n\n// Classe responsÃ¡vel pelo arquivo do THF Upload\nexport class ThfUploadFile {\n  // Nome do arquivo.\n  public name: string;\n  // Arquivo bruto.\n  public rawFile: File;\n  // Status de envio do arquivo.\n  public status?: ThfUploadStatus;\n  // Identificador do arquivo.\n  public uid: string;\n  // ExtensÃ£o do arquivo.\n  public extension: string;\n  // Tamanho do arquivo em bytes;\n  public size: number;\n\n  constructor(file: any) {\n    if (file) {\n      this.name = file.name;\n      this.extension = this.getExtension(file.name);\n      this.size = file.size;\n      this.rawFile = file;\n      this.uid = this.generateUUID();\n      this.status = ThfUploadStatus.None;\n    }\n  }\n\n  private getExtension(value: string) {\n    if (value) {\n      const extension = value.substr(value.lastIndexOf('.'));\n      return extension.toLowerCase();\n    }\n\n    return '';\n  }\n\n  private generateUUID() {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n      s4() + '-' + s4() + s4() + s4();\n  }\n}\n","import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { EventEmitter, Input, Output } from '@angular/core';\n\nimport { browserLanguage, convertToBoolean, isEquals, thfLocaleDefault } from '../../../utils/util';\nimport { requiredFailed } from '../validators';\n\nimport { ThfUploadFile } from './thf-upload-file';\nimport { ThfUploadFileRestrictions } from './interfaces/thf-upload-file-restriction.interface';\nimport { ThfUploadLiterals } from './interfaces/thf-upload-literals.interface';\nimport { ThfUploadService } from './thf-upload.service';\nimport { ThfUploadStatus } from './thf-upload-status.enum';\n\nexport const thfUploadLiteralsDefault = {\n  en: <ThfUploadLiterals> {\n    selectFile: 'Select file',\n    deleteFile: 'Delete',\n    cancel: 'Cancel',\n    tryAgain: 'Try again',\n    startSending: 'Start sending'\n  },\n  es: <ThfUploadLiterals> {\n    selectFile: 'Seleccionar archivo',\n    deleteFile: 'Borrar',\n    cancel: 'Cancelar',\n    tryAgain: 'Intentar de nuevo',\n    startSending: 'Iniciar carga'\n  },\n  pt: <ThfUploadLiterals> {\n    selectFile: 'Selecionar arquivo',\n    deleteFile: 'Excluir',\n    cancel: 'Cancelar',\n    tryAgain: 'Tentar Novamente',\n    startSending: 'Iniciar envio'\n  }\n};\n\nconst thfUploadFormFieldDefault = 'files';\n\n/**\n * @description\n *\n * O componente `thf-upload` permite que o usuÃ¡rio envie arquivo(s) ao servidor e acompanhe o progresso.\n * Este componente tambÃ©m possibilita algumas configuraÃ§Ãµes como:\n *  - MÃºltipla seleÃ§Ã£o, onde o usuÃ¡rio pode enviar mais de um arquivo ao servidor.\n *  - Auto envio, onde o arquivo Ã© enviado imediatamente apÃ³s a seleÃ§Ã£o do usuÃ¡rio, nÃ£o necessitando que o usuÃ¡rio\n * clique em enviar.\n *  - RestriÃ§Ãµes de formatos de arquivo e tamanho.\n *  - FunÃ§Ã£o de sucesso que serÃ¡ disparada quando os arquivos forem enviados com sucesso.\n *  - FunÃ§Ã£o de erro que serÃ¡ disparada quando houver erro no envio dos arquivos.\n */\nexport class ThfUploadBaseComponent implements ControlValueAccessor, Validator {\n\n  private _disabled?: boolean;\n  private _fileRestrictions?: ThfUploadFileRestrictions;\n  private _formField?: string;\n  private _hideSelectButton?: boolean;\n  private _hideSendButton?: boolean;\n  private _literals?: any;\n  private _required?: boolean;\n\n  allowedExtensions: string;\n  currentFiles: Array<ThfUploadFile>;\n\n  onModelChange: any;\n  onModelTouched: any;\n\n  private validatorChange: any;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Omite o botÃ£o de seleÃ§Ã£o de arquivos.\n   *\n   * > Caso o valor definido seja `true`, caberÃ¡ ao desenvolvedor a responsabilidade\n   * pela chamada do mÃ©todo `selectFiles()` para seleÃ§Ã£o de arquivos.\n   *\n   * @default `false`\n   */\n  @Input('t-hide-select-button') set hideSelectButton(value: boolean) {\n    this._hideSelectButton = convertToBoolean(value);\n  }\n  get hideSelectButton(): boolean {\n    return this._hideSelectButton;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Omite o botÃ£o de envio de arquivos.\n   *\n   * > Caso o valor definido seja `true`, caberÃ¡ ao desenvolvedor a responsabilidade\n   * pela chamada do mÃ©todo `sendFiles()` para envio do(s) arquivo(s) selecionado(s).\n   *\n   * @default `false`\n   */\n  @Input('t-hide-send-button') set hideSendButton(value: boolean) {\n    this._hideSendButton = convertToBoolean(value);\n  }\n  get hideSendButton(): boolean {\n    return this._hideSendButton;\n  }\n\n  /** RÃ³tulo do campo. */\n  @Input('t-label') label?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto com as literais usadas no `thf-upload`.\n   *\n   * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponÃ­veis:\n   *\n   * ```\n   *  const customLiterals: ThfUploadLiterals = {\n   *    selectFile: 'Buscar arquivo',\n   *    deleteFile: 'Deletar',\n   *    cancel: 'Desistir',\n   *    tryAgain: 'RecomeÃ§ar',\n   *    startSending: 'Enviar'\n   *  };\n   * ```\n   *\n   * Ou passando apenas as literais que deseja customizar:\n   *\n   * ```\n   *  const customLiterals: ThfUploadLiterals = {\n   *    deleteFile: 'Deletar'\n   *  };\n   * ```\n   *\n   * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:\n   *\n   * ```\n   * <thf-upload\n   *   [t-literals]=\"customLiterals\">\n   * </thf-upload>\n   * ```\n   *\n   * > O objeto padrÃ£o de literais serÃ¡ traduzido de acordo com o idioma do *browser* (pt, en, es).\n   */\n  @Input('t-literals') set literals(value: ThfUploadLiterals) {\n    if (value instanceof Object && !(value instanceof Array)) {\n      this._literals = {\n        ...thfUploadLiteralsDefault[thfLocaleDefault],\n        ...thfUploadLiteralsDefault[browserLanguage()],\n        ...value\n      };\n    } else {\n      this._literals = thfUploadLiteralsDefault[browserLanguage()];\n    }\n  }\n  get literals() {\n    return this._literals || thfUploadLiteralsDefault[browserLanguage()];\n  }\n\n  /** Texto de apoio para o campo. */\n  @Input('t-help') help?: string;\n\n  /** URL que deve ser feita a requisiÃ§Ã£o com os arquivos selecionados. */\n  @Input('t-url') url: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto que segue a definiÃ§Ã£o da interface `ThfFileRestrictions`,\n   * que possibilita definir tamanho mÃ¡ximo/mÃ­nimo e extensÃ£o dos arquivos permitidos.\n   */\n  @Input('t-restrictions') set fileRestrictions(restrictions: ThfUploadFileRestrictions) {\n    this._fileRestrictions = restrictions;\n\n    this.setAllowedExtensions(restrictions);\n  }\n\n  get fileRestrictions(): ThfUploadFileRestrictions {\n    return this._fileRestrictions;\n  }\n\n  /** Define o valor do atributo `name` do componente. */\n  @Input('name') name: string = 'file';\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Nome do campo de formulÃ¡rio que serÃ¡ enviado para o serviÃ§o informado na propriedade `t-url`.\n   *\n   * @default `files`\n   */\n  @Input('t-form-field') set formField(value: string) {\n    this._formField = value && typeof value === 'string' ? value : thfUploadFormFieldDefault;\n\n    this.getUploadService().formField = this.formField;\n  }\n\n  get formField(): string {\n    return this._formField;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo serÃ¡ desabilitado.\n   */\n  @Input('t-disabled') set disabled(value: boolean) {\n    this._disabled = convertToBoolean(value);\n\n    this.validateModel(this.currentFiles);\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se o envio do arquivo serÃ¡ automÃ¡tico ao selecionar o mesmo.\n   *\n   * @default `false`\n   */\n  @Input('t-auto-upload') autoUpload?: boolean = false;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se pode selecionar mais de um arquivo.\n   */\n  @Input('t-multiple') isMultiple?: boolean;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se a indicaÃ§Ã£o de campo opcional serÃ¡ exibida.\n   *\n   * > NÃ£o serÃ¡ exibida a indicaÃ§Ã£o se:\n   *  - O campo conter `t-required`;\n   *  - NÃ£o possuir `t-help` e/ou `t-label`.\n   *\n   * @default `false`\n   */\n  @Input('t-optional') optional: boolean;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o campo serÃ¡ obrigatÃ³rio.\n   *\n   * @default `false`\n   */\n  @Input('t-required') set required(required: boolean) {\n    this._required = convertToBoolean(required);\n\n    this.validateModel(this.currentFiles);\n  }\n\n  get required() {\n    return this._required;\n  }\n\n  /**\n   * FunÃ§Ã£o que serÃ¡ executada no momento de realizar o envio do arquivo,\n   * onde serÃ¡ possÃ­vel adicionar informaÃ§Ãµes ao parÃ¢metro que serÃ¡ enviado na requisiÃ§Ã£o.\n   * Ã passado por parÃ¢metro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,\n   * que serÃ¡ enviado em conjunto com o arquivo na requisiÃ§Ã£o, por exemplo:\n   *\n   * ```\n   *   event.data = {id: 'id do usuario'};\n   * ```\n   */\n  @Output('t-upload') onUpload?: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Evento serÃ¡ disparado quando ocorrer algum erro no envio do arquivo.\n   * > Por parÃ¢metro serÃ¡ passado o objeto do retorno que Ã© do tipo `HttpErrorResponse`.\n   */\n  @Output('t-error') onError?: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Evento serÃ¡ disparado quando o envio do arquivo for realizado com sucesso.\n   * > Por parÃ¢metro serÃ¡ passado o objeto do retorno que Ã© do tipo `HttpResponse`.\n   */\n  @Output('t-success') onSuccess?: EventEmitter<any> = new EventEmitter<any>();\n\n  // FunÃ§Ã£o para atualizar o ngModel do componente, necessÃ¡rio quando nÃ£o for utilizado dentro da *tag* `form`.\n  @Output('ngModelChange') ngModelChange?: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(protected uploadService: ThfUploadService) { }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  registerOnValidatorChange(fn: () => void) {\n    this.validatorChange = fn;\n  }\n\n  validate(abstractControl: AbstractControl): { [key: string]: any; } {\n\n    if (requiredFailed(this.required, this.disabled, abstractControl.value)) {\n      return {\n        required: {\n          valid: false,\n        }\n      };\n    }\n\n  }\n\n  writeValue(model: any): void {\n    if (model) {\n      if (!isEquals(this.currentFiles, model)) {\n\n        this.currentFiles = this.parseFiles(model);\n      }\n    } else {\n\n      this.currentFiles = undefined;\n    }\n  }\n\n  protected isExceededFileLimit(currentFilesLength: number): boolean {\n    return this.isMultiple &&\n      this.fileRestrictions &&\n      this.fileRestrictions.maxFiles > 0 &&\n      this.fileRestrictions.maxFiles <= currentFilesLength;\n  }\n\n  // Faz o parse dos arquivos selecionados para arquivos do formato ThfUploadFile e atualiza os arquivos correntes.\n  protected parseFiles(files: Array<File>): Array<ThfUploadFile> {\n    let thfUploadFiles: Array<ThfUploadFile> = this.currentFiles || [];\n    const filesLength = files.length;\n\n    for (let i = 0; i < filesLength; i++) {\n\n      if (this.isExceededFileLimit(thfUploadFiles.length)) {\n        break;\n      }\n\n      const file = new ThfUploadFile(files[i]);\n\n      if (this.checkRestrictions(file)) {\n        thfUploadFiles = this.insertFileInFiles(file, thfUploadFiles);\n      }\n\n    }\n\n    return thfUploadFiles;\n  }\n\n  protected validateModel(model: any) {\n    if (this.validatorChange) {\n      this.validatorChange(model);\n    }\n  }\n\n  // Verifica se o arquivo estÃ¡ de acordo com as restriÃ§Ãµes.\n  private checkRestrictions(file: ThfUploadFile): boolean {\n    const restrictions = this.fileRestrictions;\n\n    if (restrictions) {\n      const allowedExtensions = restrictions.allowedExtensions;\n      const minFileSize = restrictions.minFileSize || 0;\n      const maxFileSize = restrictions.maxFileSize || 31457280; // 30MB\n\n      const isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;\n      const isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;\n\n      return isAccept && isAcceptSize;\n    }\n\n    return true;\n  }\n\n  private existsFileSameName(file: ThfUploadFile, files: Array<ThfUploadFile>): boolean {\n    return files.some(currentFile => file.name === currentFile.name);\n  }\n\n  private getUploadService(): ThfUploadService {\n    return this.uploadService;\n  }\n\n  private insertFileInFiles(newFile: ThfUploadFile, files: Array<ThfUploadFile>) {\n\n    if (this.existsFileSameName(newFile, files)) {\n\n      return this.updateExistsFileInFiles(newFile, files);\n    }\n\n    if (this.isMultiple) {\n\n      files.push(newFile);\n    } else {\n\n      files.splice(0, files.length, newFile);\n    }\n\n    return files;\n  }\n\n  private isAllowedExtension(extension: string, allowedExtensions: Array<string> = []): boolean {\n    return allowedExtensions.some(ext => ext.toLowerCase() === extension);\n  }\n\n  private setAllowedExtensions(restrictions: ThfUploadFileRestrictions = {}) {\n    const _allowedExtensions = restrictions.allowedExtensions || [];\n\n    this.allowedExtensions = _allowedExtensions.join(',');\n  }\n\n  private updateExistsFileInFiles(newFile: ThfUploadFile, files: Array<ThfUploadFile>) {\n    const fileIndex = files.findIndex(currentFile => newFile.name === currentFile.name && currentFile.status !== ThfUploadStatus.Uploaded);\n\n    if (fileIndex !== -1) {\n      files.splice(fileIndex, 1, newFile);\n    }\n\n    return files;\n  }\n\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { HttpClient, HttpEventType, HttpErrorResponse, HttpRequest, HttpResponse } from '@angular/common/http';\n\nimport { ThfUploadFile } from './thf-upload-file';\n\nimport { Observable, Subscription } from 'rxjs';\n\n@Injectable()\nexport class ThfUploadBaseService {\n\n  formField: string = 'files';\n  requests: Array<any> = [];\n\n  constructor(private http: HttpClient) { }\n\n  /**\n   * MÃ©todo responsÃ¡vel por enviar os arquivos ao servidor, conforme o parÃ¢metro URL.\n   *\n   * @param url URL da requisiÃ§Ã£o a ser efetuada.\n   * @param files Arquivos a serem enviados.\n   * @param tOnUpload FunÃ§Ã£o a ser executada quando o arquivo for enviado ao servidor.\n   * @param uploadCallback FunÃ§Ã£o que serÃ¡ executada enquanto os arquivos estiverem sendo enviados.\n   * @param successCallback FunÃ§Ã£o a ser executada quando a requisiÃ§Ã£o for efetuada com sucesso.\n   * @param errorCallback FunÃ§Ã£o a ser executada quando a requisiÃ§Ã£o foi efetuada com sucesso.\n   */\n  public upload(\n    url: string,\n    files: Array<ThfUploadFile>,\n    tOnUpload: EventEmitter<any>,\n    uploadCallback: (file: ThfUploadFile, percent: number) => void,\n    successCallback: (file: ThfUploadFile, event: any) => void,\n    errorCallback: (file: ThfUploadFile, event: any) => void) {\n\n    const filesLength = files.length;\n    const uploadEvent: any = {\n      data: {},\n      file: null\n    };\n\n    for (let i = 0; i < filesLength; i++) {\n      const formData: FormData = new FormData();\n      const file = files[i];\n      const fileName = file.rawFile.name;\n\n      formData.append(this.formField, file.rawFile, fileName);\n\n      // FunÃ§Ã£o upload, onde o desenvolvedor pode enviar dados para a requisiÃ§Ã£o.\n      if (tOnUpload) {\n        uploadEvent['file'] = file;\n        tOnUpload.emit(uploadEvent);\n\n        formData.append('data', JSON.stringify(uploadEvent.data));\n      }\n\n      this.sendFile(url, file, formData, uploadCallback, successCallback, errorCallback);\n    }\n  }\n\n  public sendFile(\n    url: string,\n    file: ThfUploadFile,\n    formData: FormData,\n    uploadCallback: (file: ThfUploadFile, percent: number) => void,\n    successCallback: (file: ThfUploadFile, event: any) => void,\n    errorCallback: (file: ThfUploadFile, event: any) => void) {\n\n    const request = this.getRequest(url, formData).subscribe(event => {\n\n      if (event.type === HttpEventType.UploadProgress) {\n        this.addRequest(file, request);\n\n        const percentDone = Math.round(100 * event.loaded / event.total);\n        uploadCallback(file, percentDone);\n\n      } else if (event instanceof HttpResponse) {\n        // Sucesso, arquivos enviados.\n        successCallback(file, event);\n      }\n    },\n    (err: HttpErrorResponse) => {\n      errorCallback(file, err);\n    });\n  }\n\n  public getRequest(url: string, formData: FormData): Observable<any> {\n    const req = new HttpRequest('POST', url, formData, {\n      reportProgress: true\n    });\n\n    return this.http.request(req);\n  }\n\n  public stopRequestByFile(file: any, callback: () => void) {\n    const requestObj = this.requests.find(req => {\n      return req.file.uid === file.uid;\n    });\n\n    if (requestObj) {\n      const request = requestObj.request;\n      request.unsubscribe();\n      this.removeRequest(requestObj);\n      callback();\n    }\n  }\n\n  public removeRequest(requestObj: any) {\n    const index = this.requests.indexOf(requestObj);\n    this.requests.splice(index, 1);\n  }\n\n  public addRequest(file: ThfUploadFile, request: Subscription) {\n    const hasRequest = this.requests.some(req => {\n      return req.file.uid === file.uid;\n    });\n\n    if (!hasRequest) {\n      this.requests.push({file, request});\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ThfUploadBaseService } from './thf-upload-base.service';\n\n@Injectable()\nexport class ThfUploadService extends ThfUploadBaseService { }\n","import { Component, ElementRef, forwardRef, ViewChild } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ThfUploadBaseComponent } from './thf-upload-base.component';\nimport { ThfUploadFile } from './thf-upload-file';\nimport { ThfUploadService } from './thf-upload.service';\nimport { ThfUploadStatus } from './thf-upload-status.enum';\n\n/**\n * @docsExtends ThfUploadBaseComponent\n *\n * @example\n *\n * <example name=\"thf-upload-basic\" title=\"Totvs Upload Basic\">\n *   <file name=\"sample-thf-upload-basic/sample-thf-upload-basic.component.html\"> </file>\n *   <file name=\"sample-thf-upload-basic/sample-thf-upload-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-upload-labs\" title=\"Totvs Upload Labs\">\n *   <file name=\"sample-thf-upload-labs/sample-thf-upload-labs.component.html\"> </file>\n *   <file name=\"sample-thf-upload-labs/sample-thf-upload-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-upload-resume\" title=\"Totvs Upload - Resume\">\n *   <file name=\"sample-thf-upload-resume/sample-thf-upload-resume.component.html\"> </file>\n *   <file name=\"sample-thf-upload-resume/sample-thf-upload-resume.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-upload-rs\" title=\"Totvs Upload - Realize & Show\">\n *   <file name=\"sample-thf-upload-rs/sample-thf-upload-rs.component.html\"> </file>\n *   <file name=\"sample-thf-upload-rs/sample-thf-upload-rs.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-upload',\n  templateUrl: './thf-upload.component.html',\n  providers: [\n    ThfUploadService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ThfUploadComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => ThfUploadComponent),\n      multi: true,\n    }\n  ]\n})\nexport class ThfUploadComponent extends ThfUploadBaseComponent {\n\n  private calledByCleanInputValue: boolean = false;\n\n  @ViewChild('inputFile', {read: ElementRef, static: true }) private inputFile: ElementRef;\n\n  constructor(private elementRef: ElementRef, uploadService: ThfUploadService) {\n    super(uploadService);\n  }\n\n  get displaySendButton(): boolean {\n    const currentFiles = this.currentFiles || [];\n    return !this.hideSendButton && !this.autoUpload && (currentFiles.length > 0 && this.hasFileNotUploaded);\n  }\n\n  get hasFileNotUploaded(): boolean {\n    if (Array.isArray(this.currentFiles)) {\n      return this.currentFiles.some(file => file.status !== ThfUploadStatus.Uploaded);\n    }\n\n    return false;\n  }\n\n  get isDisabled(): boolean {\n    const currentFiles = this.currentFiles || [];\n\n    return this.hasAnyFileUploading(this.currentFiles) ||\n    !this.url ||\n    this.disabled ||\n    this.isExceededFileLimit(currentFiles.length);\n  }\n\n  /** MÃ©todo responsÃ¡vel por **limpar** o(s) arquivo(s) selecionado(s). */\n  clear() {\n    this.currentFiles = undefined;\n    this.updateModel([]);\n    this.cleanInputValue();\n  }\n\n  // FunÃ§Ã£o disparada ao selecionar algum arquivo.\n  onFileChange(event): void {\n    // necessario este tratamento quando para IE, pois nele o change Ã© disparado quando o campo Ã© limpado tambÃ©m\n    if (this.calledByCleanInputValue) {\n      this.calledByCleanInputValue = false;\n      return event.preventDefault();\n    }\n\n    const files = event.target.files;\n    this.currentFiles = this.currentFiles || [];\n\n    this.currentFiles = this.parseFiles(files);\n\n    this.updateModel([...this.currentFiles]);\n\n    if (this.autoUpload) {\n      this.uploadFiles(this.currentFiles);\n    }\n\n    this.cleanInputValue();\n  }\n\n  // Remove o arquivo passado por parametro da lista dos arquivos correntes.\n  removeFile(file): void {\n    const index = this.currentFiles.indexOf(file);\n    this.currentFiles.splice(index, 1);\n\n    this.updateModel([...this.currentFiles]);\n  }\n\n  /** MÃ©todo responsÃ¡vel por **abrir** a janela para seleÃ§Ã£o de arquivo(s). */\n  selectFiles(): void {\n    this.calledByCleanInputValue = false;\n    this.inputFile.nativeElement.click();\n  }\n\n  /** MÃ©todo responsÃ¡vel por **enviar** o(s) arquivo(s) selecionado(s). */\n  sendFiles(): void {\n    if (this.currentFiles && this.currentFiles.length) {\n\n      this.uploadFiles(this.currentFiles);\n    }\n  }\n\n  // Retorna o tamanho do arquivo em KBytes.\n  protected getFileSize(size: number): string {\n    let kbSize = 0;\n\n    if (size) {\n        kbSize = Math.ceil(size / 1024);\n    }\n\n    return `${kbSize} KB`;\n  }\n\n  // Retorna o thf-icon de acordo com o status do arquivo.\n  protected getThfIcon(file: ThfUploadFile): string {\n    switch (file.status) {\n      case ThfUploadStatus.Uploaded:\n        return 'thf-icon-ok';\n\n      case ThfUploadStatus.Error:\n        return 'thf-icon-close';\n\n      case ThfUploadStatus.None:\n        return 'thf-icon-info';\n\n      case ThfUploadStatus.Uploading:\n      default:\n        return '';\n    }\n  }\n\n  // Verifica se existe algum arquivo sendo enviado ao serviÃ§o.\n  protected hasAnyFileUploading(files: Array<ThfUploadFile>) {\n    if (files && files.length) {\n      return files.some(file => file.status === ThfUploadStatus.Uploading);\n    }\n\n    return false;\n  }\n\n  // Valida se o status passado por parÃ¢metro Ã© igual ao status do arquivo.\n  protected isStatusFile(status: string, file: ThfUploadFile) {\n    return file.status === ThfUploadStatus[status];\n  }\n\n  // Caso o componente estiver no modo AutoUpload, o arquivo tambÃ©m serÃ¡ removido da lista.\n  protected stopUpload(file: ThfUploadFile) {\n    this.uploadService.stopRequestByFile(file, () => {\n      if (this.autoUpload) {\n        this.removeFile(file);\n      } else {\n        this.stopUploadHandler(file);\n      }\n    });\n  }\n\n  // Envia os arquivos passados por parÃ¢metro, exceto os que jÃ¡ foram enviados ao serviÃ§o.\n  protected uploadFiles(files: Array<ThfUploadFile>) {\n    const filesFiltered = files.filter(file => {\n      return file.status !== ThfUploadStatus.Uploaded;\n    });\n\n    this.uploadService.upload(this.url, filesFiltered, this.onUpload,\n      (file, percent): any => {\n        // UPLOADING\n        this.uploadingHandler(file, percent);\n\n      }, (file, eventResponse): any => {\n        // SUCCESS\n        this.successHandler(file);\n        this.onSuccess.emit(eventResponse);\n\n      }, (file, eventError): any => {\n        // Error\n        this.errorHandler(file);\n        this.onError.emit(eventError);\n    });\n  }\n\n  // Atualiza a classe da div, que conter a classe 'thf-upload-filename', para 'thf-upload-filename-loading'.\n  private addFileNameClass(uid: string) {\n    const divStatus = this.elementRef.nativeElement.querySelector(`div[id='${uid}'].thf-upload-progress`);\n    const fileNameDiv = divStatus.querySelector('.thf-upload-filename');\n    fileNameDiv.classList.add('thf-upload-filename-loading');\n  }\n\n  private cleanInputValue() {\n    this.calledByCleanInputValue = true;\n    this.inputFile.nativeElement.value = '';\n  }\n\n  // FunÃ§Ã£o disparada quando Ã© retornado um erro no envio do arquivo.\n  private errorHandler(file: ThfUploadFile) {\n    file.status = ThfUploadStatus.Error;\n    this.setProgressStatus(file.uid, 0, false);\n    this.setUploadStatus(file, 'thf-upload-progress-error', 100);\n  }\n\n  // Remove a classe 'thf-upload-filename-loading' da div que conter a classe 'thf-upload-filename'.\n  private removeFileNameClass(uid: string) {\n    const divStatus = this.elementRef.nativeElement.querySelector(`div[id='${uid}'].thf-upload-progress`);\n    const fileNameDiv = divStatus.querySelector('.thf-upload-filename');\n    fileNameDiv.classList.remove('thf-upload-filename-loading');\n  }\n\n  // Atualiza o status do progresso do envio do arquivo.\n  private setProgressStatus(uid: string, percent: number, isShow: boolean) {\n    const divStatus = this.elementRef.nativeElement.querySelector(`div[id='${uid}'].thf-upload-progress`);\n    const divProgress = divStatus.querySelector('.thf-upload-progress-status');\n    const isDisplay = isShow ? 'block' : 'none';\n\n    divProgress.setAttribute('style', `display: ${isDisplay};`);\n    divProgress.setAttribute('style', `width: ${percent}%;`);\n  }\n\n  // Atualiza o status do envio de arquivos.\n  private setUploadStatus(file, className: string, percent: number) {\n    const uid = file.uid;\n    const divStatus = this.elementRef.nativeElement.querySelector(`div[id='${uid}'].thf-upload-progress`);\n    divStatus.classList.remove('thf-upload-progress-error', 'thf-upload-progress-success');\n    divStatus.classList.add(className);\n\n    if (percent > 5 && file.status !== ThfUploadStatus.None) {\n      this.addFileNameClass(uid);\n    }\n  }\n\n  // FunÃ§Ã£o disparada ao parar um envio de arquivo.\n  private stopUploadHandler(file: ThfUploadFile) {\n    file.status = ThfUploadStatus.None;\n    this.removeFileNameClass(file.uid);\n    this.setProgressStatus(file.uid, 0, false);\n    this.setUploadStatus(file, 'thf-upload-progress', 100);\n  }\n\n  // FunÃ§Ã£o disparada quando o envio Ã© realizado com sucesso.\n  private successHandler(file: ThfUploadFile) {\n    file.status = ThfUploadStatus.Uploaded;\n    this.setProgressStatus(file.uid, 0, false);\n    this.setUploadStatus(file, 'thf-upload-progress-success', 100);\n  }\n\n  // Atualiza o ngModel para os arquivos passados por parÃ¢metro.\n  private updateModel(files: Array<ThfUploadFile>) {\n    this.onModelChange ? this.onModelChange(files) : this.ngModelChange.emit(files);\n  }\n\n  // FunÃ§Ã£o disparada enquanto o arquivo estÃ¡ sendo enviado ao serviÃ§o.\n  private uploadingHandler(file: ThfUploadFile, percent: number) {\n    file.status = ThfUploadStatus.Uploading;\n    this.setProgressStatus(file.uid, percent, true);\n    this.setUploadStatus(file, 'thf-upload-progress', percent);\n  }\n\n}\n","import { AfterViewInit, Component, ElementRef, forwardRef, OnDestroy } from '@angular/core';\nimport { AbstractControl, NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nimport { ThfInputGeneric } from '../thf-input-generic/thf-input-generic';\n\n/**\n * @docsExtends ThfInputBaseComponent\n *\n * @description\n *\n * thf-url Ã© um input especÃ­fico para receber URL, com o pattern jÃ¡ configurado.\n *\n * @example\n *\n * <example name=\"thf-url-basic\" title=\"Totvs Url Basic\">\n *   <file name=\"sample-thf-url-basic/sample-thf-url-basic.component.html\"> </file>\n *   <file name=\"sample-thf-url-basic/sample-thf-url-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-url-labs\" title=\"Totvs Url Labs\">\n *   <file name=\"sample-thf-url-labs/sample-thf-url-labs.component.html\"> </file>\n *   <file name=\"sample-thf-url-labs/sample-thf-url-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-url-shortener\" title=\"Totvs Url - Shortener\">\n *   <file name=\"sample-thf-url-shortener/sample-thf-url-shortener.component.html\"> </file>\n *   <file name=\"sample-thf-url-shortener/sample-thf-url-shortener.component.ts\"> </file>\n * </example>\n *\n */\n@Component({\n  selector: 'thf-url',\n  templateUrl: '../thf-input/thf-input.component.html',\n  providers: [\n  {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ThfUrlComponent),\n    multi: true\n  },\n  {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => ThfUrlComponent),\n    multi: true\n  }]\n})\nexport class ThfUrlComponent extends ThfInputGeneric implements AfterViewInit, OnDestroy {\n\n  icon = 'thf-icon-world';\n\n  maxlength: number = 254;\n\n  type = 'url';\n\n  pattern = '^((https|http):\\\\/\\\\/)?' + // protocol\n  '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n  '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n  '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n  '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n  '(\\\\#[-a-z\\\\d_]*)?$';\n\n  mask = '';\n\n  private listener = this.validateClassesForPattern.bind(this);\n\n  constructor(el: ElementRef) {\n    super(el);\n  }\n\n  ngAfterViewInit() {\n    // Se nÃ£o tem ngModel ou reactive form adiciona validaÃ§Ã£o com classes css\n    setTimeout(() => {\n      if (!this.onChangePropagate) {\n        this.inputEl.nativeElement.addEventListener('keyup', this.listener);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    if (!this.onChangePropagate) {\n      this.inputEl.nativeElement.removeEventListener('keyup', this.listener);\n    }\n  }\n\n  extraValidation(c: AbstractControl): { [key: string]: any; } {\n    return null;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { ThfButtonGroupModule } from '../thf-button-group/index';\nimport { ThfButtonModule } from '../../components/thf-button/index';\nimport { ThfDisclaimerModule } from './../thf-disclaimer/thf-disclaimer.module';\nimport { ThfLoadingModule } from '../../components/thf-loading/index';\nimport { ThfModalModule } from '../../components/thf-modal/thf-modal.module';\nimport { ThfTableModule } from '../../components/thf-table/thf-table.module';\n\nimport { ThfCalendarComponent } from './thf-datepicker/thf-calendar/thf-calendar.component';\nimport { ThfCheckboxGroupComponent } from './thf-checkbox-group/thf-checkbox-group.component';\nimport { ThfCleanComponent } from './thf-clean/thf-clean.component';\nimport { ThfComboComponent } from './thf-combo/thf-combo.component';\nimport { ThfDatepickerComponent } from './thf-datepicker/thf-datepicker.component';\nimport { ThfDatepickerRangeComponent } from './thf-datepicker-range/thf-datepicker-range.component';\nimport { ThfDecimalComponent } from './thf-decimal/thf-decimal.component';\nimport { ThfEmailComponent } from './thf-email/thf-email.component';\nimport { ThfFieldContainerComponent } from './thf-field-container/thf-field-container.component';\nimport { ThfFieldContainerBottomComponent } from './thf-field-container/thf-field-container-bottom/thf-field-container-bottom.component';\nimport { ThfLoginComponent } from './thf-login/thf-login.component';\nimport { ThfLookupComponent } from './thf-lookup/thf-lookup.component';\nimport { ThfLookupModalComponent } from './thf-lookup/thf-lookup-modal/thf-lookup-modal.component';\nimport { ThfMultiselectDropdownComponent } from './thf-multiselect/thf-multiselect-dropdown/thf-multiselect-dropdown.component';\nimport { ThfMultiselectComponent } from './thf-multiselect/thf-multiselect.component';\nimport { ThfMultiselectItemComponent } from './thf-multiselect/thf-multiselect-item/thf-multiselect-item.component';\nimport { ThfMultiselectSearchComponent } from './thf-multiselect/thf-multiselect-search/thf-multiselect-search.component';\nimport { ThfRichTextBodyComponent } from './thf-rich-text/thf-rich-text-body/thf-rich-text-body.component';\nimport { ThfRichTextComponent } from './thf-rich-text/thf-rich-text.component';\nimport { ThfRichTextToolbarComponent } from './thf-rich-text/thf-rich-text-toolbar/thf-rich-text-toolbar.component';\nimport { ThfInputComponent } from './thf-input/thf-input.component';\nimport { ThfNumberComponent } from './thf-number/thf-number.component';\nimport { ThfPasswordComponent } from './thf-password/thf-password.component';\nimport { ThfRadioGroupComponent } from './thf-radio-group/thf-radio-group.component';\nimport { ThfSelectComponent } from './thf-select/thf-select.component';\nimport { ThfSelectOptionTemplateDirective } from './thf-select/thf-select-option-template/thf-select-option-template.directive';\nimport { ThfSwitchComponent } from './thf-switch/thf-switch.component';\nimport { ThfTextareaComponent } from './thf-textarea/thf-textarea.component';\nimport { ThfUploadComponent } from './thf-upload/thf-upload.component';\nimport { ThfUrlComponent } from './thf-url/thf-url.component';\n\n/**\n * @description\n *\n * MÃ³dulo dos componentes thf-combo, thf-checkbox-group, thf-datepicker, thf-datepicker-range, thf-email, thf-input, thf-lookup,\n * thf-number, thf-multiselect, thf-password, thf-radio-group, thf-select, thf-switch, thf-textarea, thf-upload e thf-url.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    ThfButtonModule,\n    ThfDisclaimerModule,\n    ThfLoadingModule,\n    ThfModalModule,\n    ThfTableModule,\n    ThfButtonGroupModule\n  ],\n  exports: [\n    ThfCheckboxGroupComponent,\n    ThfCleanComponent,\n    ThfComboComponent,\n    ThfDecimalComponent,\n    ThfDatepickerComponent,\n    ThfDatepickerRangeComponent,\n    ThfEmailComponent,\n    ThfInputComponent,\n    ThfLoginComponent,\n    ThfLookupComponent,\n    ThfLookupModalComponent,\n    ThfMultiselectComponent,\n    ThfNumberComponent,\n    ThfPasswordComponent,\n    ThfRadioGroupComponent,\n    ThfRichTextComponent,\n    ThfSelectComponent,\n    ThfSelectOptionTemplateDirective,\n    ThfSwitchComponent,\n    ThfTextareaComponent,\n    ThfUploadComponent,\n    ThfUrlComponent\n  ],\n  declarations: [\n    ThfCalendarComponent,\n    ThfCheckboxGroupComponent,\n    ThfCleanComponent,\n    ThfComboComponent,\n    ThfDecimalComponent,\n    ThfDatepickerComponent,\n    ThfDatepickerRangeComponent,\n    ThfEmailComponent,\n    ThfFieldContainerComponent,\n    ThfFieldContainerBottomComponent,\n    ThfInputComponent,\n    ThfLoginComponent,\n    ThfLookupComponent,\n    ThfLookupModalComponent,\n    ThfMultiselectComponent,\n    ThfMultiselectDropdownComponent,\n    ThfMultiselectItemComponent,\n    ThfMultiselectSearchComponent,\n    ThfNumberComponent,\n    ThfPasswordComponent,\n    ThfRadioGroupComponent,\n    ThfRichTextBodyComponent,\n    ThfRichTextComponent,\n    ThfRichTextToolbarComponent,\n    ThfSelectComponent,\n    ThfSelectOptionTemplateDirective,\n    ThfSwitchComponent,\n    ThfTextareaComponent,\n    ThfUploadComponent,\n    ThfUrlComponent\n  ],\n  providers: [],\n  entryComponents: [\n    ThfCalendarComponent,\n    ThfLookupModalComponent\n  ]\n})\nexport class ThfFieldModule { }\n","/**\n * @usedBy ThfInfoComponent\n *\n * @description\n *\n * Define os tipos de orientaÃ§Ãµes disponÃ­veis para o `thf-info`.\n */\nexport enum ThfInfoOrientation {\n\n  /** O valor serÃ¡ exibido na horizontal, ao lado direito em relaÃ§Ã£o ao label. */\n  Horizontal = 'horizontal',\n\n  /** Exibe o valor na vertical, ou seja, abaixo do label. */\n  Vertical = 'vertical'\n\n}\n","import { Input } from '@angular/core';\n\nimport { ThfInfoOrientation } from './thf-info-orietation.enum';\n\nconst thfInfoOrientationDefault = ThfInfoOrientation.Vertical;\n\nexport class ThfInfoBaseComponent {\n\n  private _labelSize: number;\n  private _orientation: ThfInfoOrientation = thfInfoOrientationDefault;\n\n  public readonly thfInfoOrientation = ThfInfoOrientation;\n\n  /** Valor do rÃ³tulo a ser exibido. */\n  @Input('t-label') label: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Quantidade de [colunas](/guides/grid-system) usadas para a exibiÃ§Ã£o da `t-label` quando o componente for\n   * utilizado na orientaÃ§Ã£o horizontal.\n   *\n   * Valores vÃ¡lidos:\n   *  - `[1 .. 11]`\n   *\n   * > A propriedade `t-value` recebe o nÃºmero de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.\n   */\n  @Input('t-label-size') set labelSize(value: number) {\n    if (isNaN(parseInt(<any>value, 10))) {\n      this._labelSize = undefined;\n    } else {\n      value = parseInt(<any>value, 10);\n\n      this._labelSize = (value < 1 || value > 11) ? undefined : value;\n    }\n  }\n\n  get labelSize(): number {\n    return this._labelSize;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define o layout de exibiÃ§Ã£o.\n   *\n   * > Quando definido na horizontal, pode-se utilizar a propriedade `t-label-size` para um maior controle das informaÃ§Ãµes exibidas.\n   *\n   * @default `vertical`\n   */\n  @Input('t-orientation') set orientation(value: ThfInfoOrientation) {\n    this._orientation = (<any>Object).values(ThfInfoOrientation).includes(value) ? value : thfInfoOrientationDefault;\n  }\n  get orientation(): ThfInfoOrientation {\n    return this._orientation;\n  }\n\n  /** Valor do conteÃºdo a ser exibido. */\n  @Input('t-value') value?: string;\n\n}\n","import { Component } from '@angular/core';\n\nimport { ThfInfoBaseComponent } from './thf-info-base.component';\n\n/**\n * @docsExtends ThfInfoBaseComponent\n *\n * @description\n *\n * Este componente tem como objetivo renderizar valores na tela no estilo label na parte superior e\n * valor na parte inferior. Facilita a exibiÃ§Ã£o de dados pois vem com layout padrÃ£o Totvs.\n *\n * @example\n *\n * <example name=\"thf-info-basic\" title=\"Totvs Info Basic\">\n *  <file name=\"sample-thf-info-basic/sample-thf-info-basic.component.html\"> </file>\n *  <file name=\"sample-thf-info-basic/sample-thf-info-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-info-labs\" title=\"Totvs Info Labs\">\n *  <file name=\"sample-thf-info-labs/sample-thf-info-labs.component.html\"> </file>\n *  <file name=\"sample-thf-info-labs/sample-thf-info-labs.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-info',\n  templateUrl: './thf-info.component.html'\n})\nexport class ThfInfoComponent extends ThfInfoBaseComponent { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ThfInfoComponent } from './thf-info.component';\n/**\n * @description\n *\n * MÃ³dulo do componente thf-info.\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ThfInfoComponent\n  ],\n  exports: [ThfInfoComponent],\n  providers: [],\n  schemas: []\n})\nexport class ThfInfoModule { }\n","/**\n * @docsPrivate\n *\n * @description\n *\n * Define os Ã­cones disponÃ­veis para o `thf-tag`.\n */\nexport enum ThfTagIcon {\n\n  /** Ãcone fechar */\n  Danger = 'close',\n\n  /** Ãcone de informaÃ§Ã£o */\n  Info = 'info',\n\n  /** Ãcone que representa confirmaÃ§Ã£o */\n  Success = 'ok',\n\n  /** Ãcone com ponto de exclamaÃ§Ã£o */\n  Warning = 'warning'\n}\n","/**\n * @usedBy ThfTagComponent\n *\n * @description\n *\n * Define os tipos de orientaÃ§Ãµes disponÃ­veis para o `thf-tag`.\n */\nexport enum ThfTagOrientation {\n\n  /** A tag serÃ¡ exibida na horizontal, ao lado direito em relaÃ§Ã£o ao label. */\n  Horizontal = 'horizontal',\n\n  /** Exibe a tag na vertical, ou seja, abaixo do label. */\n  Vertical = 'vertical'\n}\n","/**\n * @usedBy ThfTagComponent\n *\n * @description\n *\n * Define os tipos disponÃ­veis para o `thf-tag`.\n */\nexport enum ThfTagType {\n\n  /** Erro, perigo, problema ou aviso crÃ­tico. */\n  Danger = 'danger',\n\n  /** Informativo ou explicativo. */\n  Info = 'info',\n\n  /** ConfirmaÃ§Ã£o, resultados positivos ou Ãªxito */\n  Success = 'success',\n\n  /** Aviso ou advertÃªncia. */\n  Warning = 'warning'\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { convertToBoolean } from '../../utils/util';\n\nimport { ThfTagIcon } from './enums/thf-tag-icon.enum';\nimport { ThfTagItem } from './interfaces/thf-tag-item.interface';\nimport { ThfTagOrientation } from './enums/thf-tag-orientation.enum';\nimport { ThfTagType } from './enums/thf-tag-type.enum';\n\nconst thfTagOrientationDefault = ThfTagOrientation.Vertical;\nconst thfTagTypeDefault = ThfTagType.Info;\n\n/**\n * @description\n *\n * Este componente apresenta um valor em um marcador colorido que pode conter Ã­cone e *label*, as cores sÃ£o definidas conforme o tipo\n * escolhido.\n * Seu uso Ã© indicado para informaÃ§Ãµes que necessitam de destaque em forma de marcaÃ§Ã£o.\n */\nexport class ThfTagBaseComponent {\n\n  private _icon?: boolean;\n  private _orientation?: ThfTagOrientation = thfTagOrientationDefault;\n  private _type?: ThfTagType = thfTagTypeDefault;\n\n  public readonly thfTagOrientation = ThfTagOrientation;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Texto antes da tag.\n   */\n  @Input('t-label') label?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Apresenta um Ã­cone na tag conforme o tipo:\n   * - `danger`: <span class=\"thf-icon thf-icon-close\"></span>\n   * - `info`: <span class=\"thf-icon thf-icon-info\"></span>\n   * - `success`: <span class=\"thf-icon thf-icon-ok\"></span>\n   * - `warning`: <span class=\"thf-icon thf-icon-warning\"></span>\n   *\n   * @default `false`\n   */\n  @Input('t-icon') set icon(value: boolean) {\n    this._icon = <any>value === '' ? true : convertToBoolean(value);\n  }\n  get icon(): boolean {\n    return this._icon;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define o layout de exibiÃ§Ã£o.\n   *\n   * @default `vertical`\n   */\n  @Input('t-orientation') set orientation(value: ThfTagOrientation) {\n    this._orientation = (<any>Object).values(ThfTagOrientation).includes(value) ? value : thfTagOrientationDefault;\n  }\n  get orientation(): ThfTagOrientation {\n    return this._orientation;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define o tipo e determina a cor do `thf-tag`.\n   *\n   * Valores vÃ¡lidos:\n   *  - `success`: cor verde utilizada para simbolizar sucesso ou Ãªxito.\n   *  - `warning`: cor amarela que representa aviso ou advertÃªncia.\n   *  - `danger`: cor vermelha para erro ou aviso crÃ­tico.\n   *  - `info`: cor cinza escuro que caracteriza conteÃºdo informativo.\n   *\n   * @default `info`\n   */\n  @Input('t-type') set type(value: ThfTagType) {\n    this._type = (<any>Object).values(ThfTagType).includes(value) ? value : thfTagTypeDefault;\n  }\n  get type(): ThfTagType {\n    return this._type;\n  }\n\n  /** Texto da tag. */\n  @Input('t-value') value: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * AÃ§Ã£o que serÃ¡ executada quando o usuÃ¡rio clicar sobre o `thf-tag`\n   * e que receberÃ¡ como parÃ¢metro um objeto contendo o valor e tipo de tag.\n   */\n  @Output('t-click') click?: EventEmitter<any> = new EventEmitter<ThfTagItem>();\n\n  get iconFromType() {\n    switch (this.type) {\n      case ThfTagType.Danger: return ThfTagIcon.Danger;\n\n      case ThfTagType.Info: return ThfTagIcon.Info;\n\n      case ThfTagType.Success: return ThfTagIcon.Success;\n\n      case ThfTagType.Warning: return ThfTagIcon.Warning;\n    }\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { ThfTagBaseComponent } from './thf-tag-base.component';\nimport { ThfTagItem } from './interfaces/thf-tag-item.interface';\n\n/**\n * @docsExtends ThfTagBaseComponent\n *\n * @example\n *\n * <example name=\"thf-tag-basic\" title=\"Totvs Tag Basic\">\n *  <file name=\"sample-thf-tag-basic/sample-thf-tag-basic.component.html\"> </file>\n *  <file name=\"sample-thf-tag-basic/sample-thf-tag-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-tag-labs\" title=\"Totvs Tag Labs\">\n *  <file name=\"sample-thf-tag-labs/sample-thf-tag-labs.component.html\"> </file>\n *  <file name=\"sample-thf-tag-labs/sample-thf-tag-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-tag-bank-account\" title=\"Totvs Tag - Bank Account\">\n *  <file name=\"sample-thf-tag-bank-account/sample-thf-tag-bank-account.component.html\"> </file>\n *  <file name=\"sample-thf-tag-bank-account/sample-thf-tag-bank-account.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-tag',\n  templateUrl: './thf-tag.component.html'\n})\nexport class ThfTagComponent extends ThfTagBaseComponent implements OnInit {\n\n  isClickable: boolean;\n\n  ngOnInit() {\n    this.isClickable = this.click.observers.length > 0;\n  }\n\n  onClick() {\n    const submittedTagItem: ThfTagItem = { value: this.value, type: this.type };\n\n    this.click.emit(submittedTagItem);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThfTagComponent } from './thf-tag.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente `thf-tag`.\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ThfTagComponent\n  ],\n  exports: [\n    ThfTagComponent\n  ],\n  providers: [],\n  schemas: []\n})\nexport class ThfTagModule { }\n","import { EventEmitter, Input, Output } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\nimport { convertToBoolean } from '../../../utils/util';\n\nimport { ThfDynamicFormField } from './thf-dynamic-form-field.interface';\n\n/**\n *\n * @description\n *\n * Componente para criaÃ§Ã£o de formulÃ¡rios dinÃ¢micos a partir de uma lista de objetos.\n *\n * TambÃ©m Ã© possÃ­vel verificar se o formulÃ¡rio estÃ¡ vÃ¡lido e informar valores para a exibiÃ§Ã£o de informaÃ§Ãµes.\n *\n * > Temos uma ferramenta para criaÃ§Ã£o de formulÃ¡rios, onde Ã© possÃ­vel inicializÃ¡-lo atravÃ©s de um JSON.\n * [**Veja aqui**](tools/dynamic-form).\n */\nexport class ThfDynamicFormBaseComponent {\n\n  private _groupForm?: boolean = false;\n\n  /**\n   * @description\n   *\n   * ColeÃ§Ã£o de objetos que implementam a interface `ThfDynamicFormField`, para definiÃ§Ã£o dos campos que serÃ£o criados\n   * dinamicamente.\n   *\n   * > Ex: `[ { property: 'name' } ]`\n   *\n   * Regras de tipagem e criaÃ§Ã£o dos componentes:\n   *\n   * - Caso o *type* informado seja *boolean* o componente criado serÃ¡ o `thf-switch`.\n   * - Caso o *type* informado seja *currency* e nÃ£o seja informado um *mask* ou *pattern* o componente criado serÃ¡ o `thf-decimal`,\n   * caso seja informado um *mask* ou *pattern* o componente criado serÃ¡ o `thf-input`.\n   * - Caso o *type* informado seja *number* e nÃ£o seja informado um *mask* ou *pattern* o componente criado serÃ¡ o `thf-decimal`, caso seja\n   * informado um *mask* ou *pattern* o componente criado serÃ¡ o `thf-input`.\n   * - Caso a lista possua a propriedade `options` e a mesma possua atÃ© 3 itens o componente criado serÃ¡ o `thf-radio-group`\n   * ou `thf-checkbox-group` se informar a propriedade `optionsMulti`.\n   * - Caso a mesma possua 3 ou mais itens, serÃ¡ criado o componente `thf-select` ou, `thf-multiselect` se a propriedade `optionsMulti`\n   * for verdadeira.\n   * - Caso o *type* informado seja *date* ou *datetime* o componente criado serÃ¡ o `thf-datepicker`.\n   * - Caso seja informado a propriedade `optionsService` o componente criado serÃ¡ o `thf-combo`.\n   * - Caso o *type* informado seja *time* o componente criado serÃ¡ um `thf-input` podendo receber um *mask* para formatar\n   * o valor exibido, caso nÃ£o seja informado um *mask* o componente serÃ¡ criado com a mÃ¡scara '99:99' por padrÃ£o.\n   * - Caso a lista possua a propriedade `rows` e esta seja definida com valor maior ou igual a 3 o componente criado serÃ¡\n   * o `thf-textarea`, caso o valor da propriedade `rows` seja menor que 3 o componente criado serÃ¡ o `thf-input`.\n   * - Caso seja informada a propriedade `secret` o componente criado serÃ¡ o `thf-password`.\n   * - Caso o *type* informado seja *string* o componente criado serÃ¡ o `thf-input`.\n   *\n   * @default `[]`\n   */\n  @Input('t-fields') fields: Array<ThfDynamicFormField>;\n\n  /**\n   * Objeto que serÃ¡ utilizado como valor para exibir as informaÃ§Ãµes, serÃ¡ recuperado e preenchido atravÃ©s do atributo *property*\n   * dos objetos contidos na propridade `t-fields`.\n   *\n   * Pode iniciar com valor ou apenas com um objeto vazio que serÃ¡ preenchido conforme descrito acima.\n   *\n   * > Ex: `{ name: 'thf' }`\n   */\n  @Input('t-value') value: any;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Na inicializaÃ§Ã£o do componente serÃ¡ repassado o objeto de formulÃ¡rio utilizado no componente,\n   * podendo ser utilizado para validaÃ§Ãµes e/ou detecÃ§Ã£o de mudanÃ§a dos valores.\n   *\n   * Portanto existem duas maneiras de recuperar o formulÃ¡rio,\n   * atravÃ©s de *template reference* e atravÃ©s do *output*, veja os exemplos abaixo:\n   *\n   * > *template reference*\n   *\n   * ```html\n   *  <thf-dynamic-form #dynamicForm>\n   *  </thf-dynamic-form>\n   *\n   *  <thf-button t-label=\"Adicionar\" [t-disabled]=\"dynamicForm?.form.invalid\">\n   *  </thf-button>\n   *\n   * ```\n   *\n   * > *Output*\n   *\n   * ```html\n   *  ...\n   *  <thf-dynamic-form (t-form)=\"getForm($event)\">\n   *  </thf-dynamic-form>\n   *\n   *  <thf-button t-label=\"Adicionar\" [t-disabled]=\"dynamicForm?.invalid\">\n   *  </thf-button>\n   *  ...\n   *\n   * ```\n   *\n   * ```ts\n   *  ...\n   *\n   *  export class AppComponent {\n   *\n   *    dynamicForm: NgForm;\n   *\n   *    getForm(form: NgForm) {\n   *      this.dynamicForm = form;\n   *    }\n   *\n   *  }\n   * ```\n   *\n   * > Caso a propriedade `t-group-form` for verdadeira nÃ£o serÃ¡ repassado o formulÃ¡rio, pois o mesmo utilizarÃ¡\n   * o formulÃ¡rio pai.\n   */\n  @Output('t-form') formOutput: EventEmitter<NgForm> = new EventEmitter<NgForm>();\n\n  /**\n   * @optional\n   *\n   * @description\n   * Ao informar esta propriedade, o componente passarÃ¡ a utilizar o formulÃ¡rio pai para criar os `FormControl`\n   * e com isso Ã© possÃ­vel recuperar o valor do formulÃ¡rio e suas validaÃ§Ãµes a partir do formulÃ¡rio pai.\n   *\n   * ```html\n   * <form #parentForm=\"ngForm\">\n   *\n   *   <thf-dynamic-form t-group-form [t-fields]=\"fields\"></thf-dynamic-form>\n   *\n   *  <thf-button t-label=\"Adicionar\" [t-disabled]=\"parentForm.invalid\"></thf-button>\n   * </form>\n   * ```\n   */\n  @Input('t-group-form') set groupForm(value: boolean) {\n    this._groupForm = <any> value === '' ? true : convertToBoolean(value);\n  }\n\n  get groupForm(): boolean {\n    return this._groupForm;\n  }\n\n}\n","import { Component, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\nimport { ThfDynamicFormBaseComponent } from './thf-dynamic-form-base.component';\n\n/**\n * @docsExtends ThfDynamicFormBaseComponent\n *\n * @example\n *\n * <example name=\"thf-dynamic-form-basic\" title=\"Totvs Dynamic Form Basic\">\n *  <file name=\"sample-thf-dynamic-form-basic/sample-thf-dynamic-form-basic.component.html\"> </file>\n *  <file name=\"sample-thf-dynamic-form-basic/sample-thf-dynamic-form-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-dynamic-form-register\" title=\"Totvs Dynamic Form - Register\">\n *  <file name=\"sample-thf-dynamic-form-register/sample-thf-dynamic-form-register.component.html\"> </file>\n *  <file name=\"sample-thf-dynamic-form-register/sample-thf-dynamic-form-register.component.ts\"> </file>\n * </example>\n */\n\n@Component({\n  selector: 'thf-dynamic-form',\n  templateUrl: './thf-dynamic-form.component.html'\n})\nexport class ThfDynamicFormComponent extends ThfDynamicFormBaseComponent {\n\n  private _form: NgForm;\n\n  @ViewChild('dynamicForm', { static: false }) set form(value: NgForm) {\n    // necessario para nao ocorrer o ExpressionChangedAfterItHasBeenCheckedError\n    setTimeout(() => {\n      this._form = value;\n\n      this.emitForm();\n    });\n  }\n\n  get form() {\n    return this._form || <any> {};\n  }\n\n  private emitForm() {\n    if (!this.groupForm && this.formOutput.observers.length) {\n      this.formOutput.emit(this.form);\n    }\n  }\n\n}\n","import { ThfDynamicViewField } from './thf-dynamic-view/thf-dynamic-view-field.interface';\n\nexport function getGridColumnsClasses(smColumns, mdColumns, lgColumns, xlColumns, gridColumns) {\n  const systemGrid = {\n    sm: smColumns || gridColumns || 12,\n    md: mdColumns || gridColumns || 6,\n    lg: lgColumns || gridColumns || 4,\n    xl: xlColumns || gridColumns || 3\n  };\n\n  return `thf-sm-${systemGrid.sm} thf-md-${systemGrid.md} thf-lg-${systemGrid.lg} thf-xl-${systemGrid.xl}`;\n}\n\nexport function isVisibleField(field: ThfDynamicViewField): boolean {\n  const containsVisible = 'visible' in field;\n\n  return containsVisible ? field.visible : true;\n}\n","/**\n * @usedBy ThfDynamicFormComponent\n *\n * @description\n *\n * Enum para definiÃ§Ã£o do tipo de campo que serÃ¡ criado dinamicamente.\n */\nexport enum ThfDynamicFieldType {\n\n  /** Valor booleano. */\n  Boolean = 'boolean',\n\n  /** Valor numÃ©rico que contÃ©m casas decimais e milhar. */\n  Currency = 'currency',\n\n  /** Valor para data. */\n  Date = 'date',\n\n  /** Valor para data e hora. */\n  DateTime = 'datetime',\n\n  /** Utilizado para informar/exibir hora. */\n  Time = 'time',\n\n  /** Valor nÃºmerico. */\n  Number = 'number',\n\n  /** Texto. */\n  String = 'string'\n\n}\n","import { Input } from '@angular/core';\nimport { TitleCasePipe } from '@angular/common';\n\nimport { isTypeof } from '../../../../utils/util';\n\nimport { getGridColumnsClasses, isVisibleField } from '../../thf-dynamic.util';\nimport { ThfDynamicFieldType } from '../../thf-dynamic-field-type.enum';\nimport { ThfDynamicFormField } from '../thf-dynamic-form-field.interface';\nimport { ThfDynamicFormFieldInternal } from './thf-dynamic-form-field-internal.interface';\n\nexport class ThfDynamicFormFieldsBaseComponent {\n\n  private _fields: Array<ThfDynamicFormField>;\n  private _value?: any = {};\n\n  visibleFields: Array<ThfDynamicFormFieldInternal> = [];\n\n  // array de objetos que implementam a interface ThfDynamicFormField, que serÃ£o exibidos no componente.\n  @Input('t-fields') set fields(value: Array<ThfDynamicFormField>) {\n    this._fields = Array.isArray(value) ? [...value] : [];\n  }\n\n  get fields() {\n    return this._fields;\n  }\n\n  // valor que serÃ¡ utilizado para iniciar valor no componente.\n  @Input('t-value') set value(value: any) {\n    this._value = value && isTypeof(value, 'object') ? value : {};\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  constructor(private titleCasePipe: TitleCasePipe) {}\n\n  compareTo(value, compareTo) {\n    return value === compareTo;\n  }\n\n  // retorna um array com os objetos configurados e visiveis.\n  protected getVisibleFields() {\n    const visibleFields = [];\n\n    this.fields.forEach(field => {\n      if (this.existsProperty(visibleFields, field.property)) {\n        this.printError(`\"thf-dynamic-form\" property \"${field.property}\" estÃ¡ duplicado. Interface: ThfDynamicFormField.`);\n        return;\n      }\n\n      if (!field['property']) {\n        this.printError('\"thf-dynamic-form\" Ã obrigatÃ³rio ser especificado um property.');\n        return;\n      }\n\n      if (isVisibleField(field)) {\n        visibleFields.push(this.createField(field));\n      }\n    });\n\n    return visibleFields;\n  }\n\n  // converte um array em string para um array de objetos que contem label e value.\n  private convertOptions(options: Array<any>): Array<{ label: string, value: string }> {\n    const everyOptionString = options.every(option => typeof option === 'string');\n\n    if (everyOptionString) {\n      return options.map(value => ({label: value, value}));\n    }\n\n    return options;\n  }\n\n  // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.\n  private createField(field: ThfDynamicFormField): ThfDynamicFormFieldInternal {\n    const control = this.getComponentControl(field);\n    const options = !!field.options ? this.convertOptions(field.options) : undefined;\n\n    const componentClass = getGridColumnsClasses(field.gridSmColumns,\n      field.gridMdColumns,\n      field.gridLgColumns,\n      field.gridXlColumns,\n      field.gridColumns);\n\n    return {\n      label: this.titleCasePipe.transform(field.property),\n      ...field,\n      componentClass,\n      control,\n      options\n    };\n  }\n\n  private existsProperty(fields: Array<ThfDynamicFormField>, property: string) {\n    return fields.some(field => {\n      return field.property === property;\n    });\n  }\n\n  // recupera o componente de acordo com algumas regras do field.\n  private getComponentControl(field: ThfDynamicFormField = <any> {}) {\n    const type = field && field.type ? field.type.toLocaleLowerCase() : 'string';\n\n    if (this.isNumberType(field, type)) {\n      return 'number';\n    } else if (this.isCurrencyType(field, type)) {\n      return 'decimal';\n    } else if (this.isSelect(field)) {\n      return 'select';\n    } else if (this.isRadioGroup(field)) {\n      return 'radioGroup';\n    } else if (this.isCheckboxGroup(field)) {\n      return 'checkboxGroup';\n    } else if (this.isMultiselect(field)) {\n      return 'multiselect';\n    } else if (this.compareTo(type, ThfDynamicFieldType.Boolean)) {\n      return 'switch';\n    } else if (this.compareTo(type, ThfDynamicFieldType.Date) || this.compareTo(type, ThfDynamicFieldType.DateTime)) {\n      return 'datepicker';\n    } else if (this.compareTo(type, ThfDynamicFieldType.Time)) {\n      field.mask = field.mask || '99:99';\n\n      return 'input';\n    } else if (this.isCombo(field)) {\n      return 'combo';\n    } else if (this.isLookup(field)) {\n      return 'lookup';\n    } else if (this.isTextarea(field)) {\n      return 'textarea';\n    } else if (this.isPassword(field)) {\n      return 'password';\n    }\n\n    return 'input';\n  }\n\n  private isCheckboxGroup(field: ThfDynamicFormField) {\n    const { optionsService, optionsMulti, options } = field;\n\n    return !optionsService && optionsMulti && !!options && options.length <= 3;\n  }\n\n  private isCombo(field: ThfDynamicFormField) {\n    const { optionsService } = field;\n\n    return !!optionsService && isTypeof(optionsService, 'string');\n  }\n\n  private isCurrencyType(field: ThfDynamicFormField, type: string) {\n    const { mask, pattern } = field;\n\n    return this.compareTo(type, ThfDynamicFieldType.Currency) && (!mask && !pattern);\n  }\n\n  private isLookup(field: ThfDynamicFormField) {\n    const { searchService } = field;\n\n    return !!searchService && isTypeof(searchService, 'string');\n  }\n\n  private isMultiselect(field: ThfDynamicFormField) {\n    const { optionsService, optionsMulti, options } = field;\n\n    return !optionsService && optionsMulti && !!options && options.length > 3;\n  }\n\n  private isNumberType(field: ThfDynamicFormField, type: string) {\n    const { mask, pattern } = field;\n\n    return this.compareTo(type, ThfDynamicFieldType.Number) && (!mask && !pattern);\n  }\n\n  private isPassword(field: ThfDynamicFormField) {\n    const { secret } = field;\n\n    return secret;\n  }\n\n  private isRadioGroup(field: ThfDynamicFormField) {\n    const { optionsMulti, options } = field;\n\n    return !optionsMulti && !!options && options.length <= 3;\n  }\n\n  private isSelect(field: ThfDynamicFormField) {\n    const { optionsMulti, options } = field;\n\n    return !optionsMulti && !!options && options.length > 3;\n  }\n\n  private isTextarea(field: ThfDynamicFormField) {\n    const { rows } = field;\n\n    return rows && rows >= 3;\n  }\n\n  private printError(error: string) {\n    console.error(error);\n  }\n\n}\n","import { Component, SimpleChanges, OnChanges } from '@angular/core';\n\nimport { ThfDynamicFormFieldsBaseComponent } from './thf-dynamic-form-fields-base.component';\nimport { TitleCasePipe } from '@angular/common';\nimport { ControlContainer, NgForm } from '@angular/forms';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente de criaÃ§Ã£o dos campos dinÃ¢micos.\n */\n@Component({\n  selector: 'thf-dynamic-form-fields',\n  templateUrl: 'thf-dynamic-form-fields.component.html',\n  viewProviders: [ { provide: ControlContainer, useExisting: NgForm } ]\n})\nexport class ThfDynamicFormFieldsComponent extends ThfDynamicFormFieldsBaseComponent implements OnChanges {\n\n  constructor(titleCasePipe: TitleCasePipe) {\n    super(titleCasePipe);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.fields) {\n      this.visibleFields = this.getVisibleFields();\n    }\n  }\n\n  trackBy(index) {\n    return index;\n  }\n\n}\n","import { Input } from '@angular/core';\nimport { CurrencyPipe, DatePipe, DecimalPipe, TitleCasePipe } from '@angular/common';\n\nimport { convertToBoolean, isTypeof } from '../../../utils/util';\nimport { ThfTimePipe } from '../../../pipes/thf-time/thf-time.pipe';\n\nimport { getGridColumnsClasses, isVisibleField } from '../thf-dynamic.util';\nimport { ThfDynamicViewField } from './thf-dynamic-view-field.interface';\n\n/**\n *\n * @description\n *\n * Componente para listar dados dinamicamente a partir de uma lista de objetos.\n *\n * > Por padrÃ£o esse componente cria `thf-info` para exibiÃ§Ã£o, Ã© possÃ­vel criar `thf-tag` passando a propriedade { tag: true }.\n *\n */\nexport class ThfDynamicViewBaseComponent {\n\n  private _fields: Array<ThfDynamicViewField> = [];\n  private _showAllValue: boolean = false;\n  private _value = {};\n\n  visibleFields = [];\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Lista de objetos que implementam a interface `ThfDynamicView`.\n   *\n   * > Ex: `[ { property: 'age' } ]`\n   *\n   * Regras de tipagem e formataÃ§Ã£o dos valores exibidos:\n   *\n   * - Caso o *type* informado seja *currency* e nÃ£o seja informado o *format* o mesmo recebe \"'BRL', 'symbol', '1.2-2'\"\n   * como formato padrÃ£o.\n   * - Caso o *type* informado seja *date* e nÃ£o seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrÃ£o.\n   * - Caso o *type* informado seja *dateTime* e nÃ£o seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrÃ£o.\n   * - Caso o *type* informado seja *number* e nÃ£o seja informado o *format* o mesmo nÃ£o serÃ¡ formatado.\n   * - Caso o *type* informado seja *time* e nÃ£o seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrÃ£o.\n   *\n   * > As propriedades informadas serÃ£o exibidas mesmo nÃ£o contendo valor de referÃªncia no objeto da propriedade `t-value`.\n   *\n   * @default `[]`\n   */\n  @Input('t-fields') set fields(fields: Array<ThfDynamicViewField>) {\n    this._fields = Array.isArray(fields) ? [...fields] : [];\n  }\n\n  get fields() {\n    return this._fields;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica se exibirÃ¡ todas as informaÃ§Ãµes contidas dentro do objeto informado na propriedade `t-value`.\n   *\n   * @default `false`\n   */\n  @Input('t-show-all-value') set showAllValue(value: boolean) {\n    this._showAllValue = convertToBoolean(value);\n  }\n\n  get showAllValue() {\n    return this._showAllValue;\n  }\n\n  /**\n   * @description\n   *\n   * Objeto que serÃ¡ utilizado para exibir as informaÃ§Ãµes dinÃ¢micas, o valor serÃ¡ recuperado atravÃ©s do atributo *property*\n   * dos objetos contidos na propridade `t-fields`.\n   *\n   * > Ex: `{ age: '35' }`\n   */\n  @Input('t-value') set value(value: object) {\n    this._value = value && isTypeof(value, 'object') ? value : {};\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  constructor(\n    private currencyPipe: CurrencyPipe,\n    private datePipe: DatePipe,\n    private decimalPipe: DecimalPipe,\n    private timePipe: ThfTimePipe,\n    private titleCasePipe: TitleCasePipe) { }\n\n  // retorna os fields com os valores recuperados do objeto value.\n  protected getConfiguredFields() {\n    const newFields = [];\n\n    this.fields.forEach(field => {\n      if (isVisibleField(field)) {\n        newFields.push(this.createField(field));\n      }\n    });\n\n    return newFields;\n  }\n\n  // retorna fields ligado ao value mais os atributos do value que nÃ£o possuiam fields.\n  protected getMergedFields() {\n    const mergedFields = [...this.getConfiguredFields()];\n\n    this.getValueFields().forEach(valueField => {\n      const fieldIndex = mergedFields.findIndex(field => field.property === valueField.property);\n      const property = valueField.property;\n\n      if (fieldIndex === -1) {\n        mergedFields.push(this.createField({ property }));\n      }\n    });\n\n    return mergedFields;\n  }\n\n  // retorna o objeto value como fields.\n  protected getValueFields() {\n    return Object.keys(this.value).map(property => {\n      return this.createField({ property });\n    });\n  }\n\n  private createField(field: ThfDynamicViewField) {\n    const property = field.property;\n    const value = this.transformValue(field.type, this.value[property], field.format);\n\n    const classesGridColumns = getGridColumnsClasses(field.gridSmColumns,\n      field.gridMdColumns,\n      field.gridLgColumns,\n      field.gridXlColumns,\n      field.gridColumns);\n\n    return {\n      property,\n      value,\n      label: this.titleCasePipe.transform(property),\n      cssClass: classesGridColumns,\n      ...field\n    };\n  }\n\n  private transformValue(type: string, value, format) {\n    let transformedValue = value;\n\n    switch (type) {\n      case 'currency':\n        transformedValue = this.currencyPipe.transform(value, format || 'BRL', 'symbol', '1.2-2');\n        break;\n      case 'date':\n        transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy');\n        break;\n      case 'dateTime':\n        transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy HH:mm:ss');\n        break;\n      case 'number':\n        transformedValue = this.decimalPipe.transform(value, format);\n        break;\n      case 'time':\n        transformedValue = this.timePipe.transform(value, format || 'HH:mm:ss.ffffff');\n        break;\n    }\n\n    return transformedValue;\n  }\n\n}\n","import { Component, OnChanges, SimpleChanges } from '@angular/core';\nimport { CurrencyPipe, DatePipe, DecimalPipe, TitleCasePipe } from '@angular/common';\n\nimport { ThfTimePipe } from '../../../pipes/thf-time/thf-time.pipe';\n\nimport { ThfDynamicViewBaseComponent } from './thf-dynamic-view-base.component';\n\n/**\n * @docsExtends ThfDynamicViewBaseComponent\n *\n * @example\n *\n * <example name=\"thf-dynamic-view-basic\" title=\"Totvs Dynamic View Basic\">\n *  <file name=\"sample-thf-dynamic-view-basic/sample-thf-dynamic-view-basic.component.html\"> </file>\n *  <file name=\"sample-thf-dynamic-view-basic/sample-thf-dynamic-view-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-dynamic-view-employee\" title=\"Totvs Dynamic View - Employee\">\n *  <file name=\"sample-thf-dynamic-view-employee/sample-thf-dynamic-view-employee.component.html\"> </file>\n *  <file name=\"sample-thf-dynamic-view-employee/sample-thf-dynamic-view-employee.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-dynamic-view',\n  templateUrl: './thf-dynamic-view.component.html'\n})\nexport class ThfDynamicViewComponent extends ThfDynamicViewBaseComponent implements OnChanges {\n\n  constructor(\n    currencyPipe: CurrencyPipe,\n    datePipe: DatePipe,\n    decimalPipe: DecimalPipe,\n    timePipe: ThfTimePipe,\n    titleCasePipe: TitleCasePipe) {\n\n    super(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.fields || changes.value || changes.showAllValue) {\n      this.visibleFields = this.getVisibleFields();\n    }\n  }\n\n  private getVisibleFields() {\n    if (this.showAllValue) {\n      return this.getMergedFields();\n    }\n\n    return this.value && this.fields.length ? this.getConfiguredFields() : this.getValueFields();\n  }\n\n}\n","import { CommonModule, CurrencyPipe, DatePipe, DecimalPipe, TitleCasePipe } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\n\nimport { ThfDividerModule } from '../thf-divider/thf-divider.module';\nimport { ThfFieldModule } from '../thf-field/thf-field.module';\nimport { ThfInfoModule } from '../thf-info/thf-info.module';\nimport { ThfTagModule } from '../thf-tag/thf-tag.module';\nimport { ThfTimeModule } from '../../pipes/thf-time/thf-time.module';\nimport { ThfTimePipe } from '../../pipes/thf-time/thf-time.pipe';\n\nimport { ThfDynamicFormComponent } from './thf-dynamic-form/thf-dynamic-form.component';\nimport { ThfDynamicFormFieldsComponent } from './thf-dynamic-form/thf-dynamic-form-fields/thf-dynamic-form-fields.component';\nimport { ThfDynamicViewComponent } from './thf-dynamic-view/thf-dynamic-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ThfDividerModule,\n    ThfInfoModule,\n    ThfFieldModule,\n    ThfTagModule,\n    ThfTimeModule\n  ],\n  declarations: [\n    ThfDynamicFormComponent,\n    ThfDynamicFormFieldsComponent,\n    ThfDynamicViewComponent\n  ],\n  exports: [\n    ThfDynamicFormComponent,\n    ThfDynamicViewComponent\n  ],\n  providers: [ CurrencyPipe, DatePipe, DecimalPipe, ThfTimePipe, TitleCasePipe ]\n})\nexport class ThfDynamicModule { }\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'thf-grid-cell-action',\n  templateUrl: './thf-grid-cell-action.component.html',\n  styleUrls: ['./thf-grid-cell-action.component.css']\n})\nexport class ThfGridCellActionComponent {\n\n  @Input('t-position') position?: string = '';\n\n  @Input('t-value') value?: string;\n\n  constructor() { }\n\n  onKeyDownContent(event) {\n    // console.log('onKeyDownContent: ', event);\n\n    // ENTER\n    if (event.keyCode === 13) {\n      event.preventDefault();\n\n      // this.openActions(this.value);\n\n      return;\n    }\n  }\n\n}\n","import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'thf-grid-cell',\n  templateUrl: './thf-grid-cell.component.html',\n  styleUrls: ['./thf-grid-cell.component.css']\n})\nexport class ThfGridCellComponent {\n\n  private _width: (string | number);\n\n  _value: any = '';\n  edit: boolean = false;\n  editValue: string = '';\n\n  @Input('t-align') align?: string = 'left';\n\n  @Input('t-freeze') freeze?: boolean = false;\n\n  @Input('t-tab-index') tabIndex?: number = -1;\n\n  @Input('t-position') position?: string = '';\n\n  @Input('t-width') set width(value: (string | number)) {\n    this._width = value;\n\n    if (this.freeze && !this._width) {\n      this._width = 100;\n    }\n  }\n  get width(): (string | number) {\n    return this._width ? `${this._width}px` : '100%';\n  }\n\n  @Input('t-readonly') readonly?: boolean = false;\n\n  @Input('t-required') required?: boolean = false;\n\n  @Output('t-valueChange') valueChange = new EventEmitter<any>();\n  // @Input('t-value') value?: string;\n  @Input('t-value') set value(value: any) {\n    this._value = value;\n    this.valueChange.emit(this._value);\n  }\n  get value(): any {\n    return this._value;\n  }\n\n  @ViewChild('inputElement', { static: true }) inputElement: ElementRef;\n  @ViewChild('contentElement', { static: true }) contentElement: ElementRef;\n\n  constructor(private changeDetectorRef: ChangeDetectorRef) { }\n\n  onKeyDownContent(event: any) {\n    // console.log('onKeyDownContent: ', event);\n\n    // BACKSPACE / DELETE\n    if ((!event.ctrlKey) && ((event.keyCode === 8) || (event.keyCode === 46))) {\n\n      if (this.readonly) {\n        return;\n      }\n\n      event.preventDefault();\n      this.value = '';\n      return;\n    }\n\n    // ENTER\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      this.onEditCell(this.value);\n      return;\n    }\n\n    // A..Z - 0..9\n    if ((event.keyCode >= 65) && (event.keyCode <= 90) || (event.keyCode >= 48) && (event.keyCode <= 57)) {\n      event.preventDefault();\n      this.onEditCell(event.key);\n      return;\n    }\n  }\n\n  dblclick(event: any) {\n    // console.log('dblclick: ', event);\n\n    event.preventDefault();\n\n    this.onEditCell(this.value);\n  }\n\n  onBlurInput(event: any) {\n    // console.log('onBlurInput: ', event);\n\n    this.value = this.editValue;\n    this.editValue = undefined;\n    this.edit = false;\n  }\n\n  onKeyDownInput(event: any) {\n    // console.log('onKeyDownInput: ', event);\n\n    // ENTER\n    if (event.keyCode === 13) {\n      this.value = this.editValue;\n      this.editValue = undefined;\n      this.edit = false;\n      this.changeDetectorRef.detectChanges();\n      this.contentElement.nativeElement.focus();\n    }\n\n    // ESCAPE\n    if (event.keyCode === 27) {\n      this.editValue = undefined;\n      this.edit = false;\n      this.changeDetectorRef.detectChanges();\n      this.contentElement.nativeElement.focus();\n      event.stopPropagation();\n    }\n  }\n\n  private onEditCell(value: any) {\n    if (this.readonly) {\n      return;\n    }\n\n    this.editValue = value;\n    this.edit = true;\n    this.changeDetectorRef.detectChanges();\n    this.inputElement.nativeElement.focus();\n  }\n\n}\n","import { ChangeDetectorRef, Component, ElementRef, Input, OnDestroy, Renderer2, ViewChild } from '@angular/core';\n\nimport { ThfGridRowActions } from './thf-grid-row-actions.interface';\n\n/**\n * @description\n *\n * Componente grid.\n *\n * AÃ§Ãµes / atalhos:\n *\n * - ARROW-UP: Navega para celula superior / Na ultima linha adiciona uma linha em branco no grid;\n * - ARROW-DOWN: Navega para celula inferior;\n * - ARROW-RIGHT: Navega para celula direita;\n * - ARROW-LEFT: Navega para celula esquerda;\n * - TAB: Navega para prÃ³xima celula;\n * - SHIFT+TAB: Navega para celula anterior;\n * - CTRL+DEL: Remove linha;\n * - DEL/BACKSPACE: Limpa celula;\n * - ENTER: Edita linha com valor atual/Confirma ediÃ§Ã£o da celula;\n * - DOUBLE-CLICK: Edita linha com valor atual;\n * - ESC: Cancela ediÃ§Ã£o da celula / Cancela inserÃ§Ã£o de linhas em branco;\n * - A..Z/0..9: Inicia ediÃ§Ã£o com valor em branco.\n *\n * @example\n *\n * <example name=\"thf-grid-basic\" title=\"Totvs Grid Basic\">\n *  <file name=\"sample-thf-grid-basic/sample-thf-grid-basic.component.html\"> </file>\n *  <file name=\"sample-thf-grid-basic/sample-thf-grid-basic.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-grid',\n  templateUrl: './thf-grid.component.html',\n  styleUrls: ['./thf-grid.component.css']\n})\nexport class ThfGridComponent implements OnDestroy {\n\n  lastCell: string = '0-0';\n  lastRow: number = 0;\n  lastColumn: number = 0;\n  currencyCell: string = '0-0';\n  currencyRow: number = 0;\n  currencyColumn: number = 0;\n  currencyObj: any;\n\n  logger = false;\n\n  width = '100%';\n  widthFreeze = 0;\n  widthActions = 0;\n\n  private resizeListener: () => void;\n  private timeoutResize;\n\n  @ViewChild('table', { static: true }) tableElement: ElementRef;\n  @ViewChild('wrapper', { static: true }) tableWrapper: ElementRef;\n\n  private _columns = [];\n\n  /**\n   * @description\n   *\n   * AÃ§Ãµes disparadas quando uma linha do grid Ã© manipulada.\n   */\n  @Input('t-row-actions') rowActions: ThfGridRowActions = {};\n\n  /**\n   * Colunas exibidas no grid.\n   */\n  @Input('t-columns') set columns(value: Array<any>) {\n    this._columns = [...value];\n\n    this._columns.forEach(column => {\n      column.label = column.label || column.property;\n\n      if (column.freeze === true) {\n        column.cssWidth = `${column.width || 100}px`;\n      } else {\n        column.cssWidth = column.width ? `${column.width}px` : '100%';\n      }\n    });\n  }\n  get columns(): Array<any> {\n    return this._columns.filter(column => column.freeze !== true && column.action !== true);\n  }\n\n  /**\n   * Lista com os dados que serÃ£o exibidos no grid.\n   */\n  @Input('t-data') data: Array<any> = [];\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef,\n    private elRef: ElementRef,\n    renderer: Renderer2) {\n\n    this.debounceResize();\n\n    this.resizeListener = renderer.listen('window', 'resize', (event: any) => {\n      this.debounceResize();\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.resizeListener) {\n      this.resizeListener();\n    }\n  }\n\n  private debounceResize() {\n    clearTimeout(this.timeoutResize);\n\n    this.timeoutResize = setTimeout(() => {\n      const widthTableWrapper = this.tableWrapper.nativeElement.offsetWidth;\n      this.width = `${widthTableWrapper - (this.widthFreeze + 8) - this.widthActions}px`;\n    }, 100);\n  }\n\n  get freezeColumns() {\n    const freezeColumns = this._columns.filter(column => column.freeze === true);\n\n    this.widthFreeze = freezeColumns.reduce((prev, current) => prev + (current.width || 100), 0);\n\n    return freezeColumns;\n  }\n\n  get actionColumns() {\n    const actionsColumns = this._columns.filter(column => column.action === true);\n\n    this.widthActions = actionsColumns.length > 0 ? 56 : 0;\n\n    return actionsColumns;\n  }\n\n  cancelRow(event: any, row: any) {\n    const el = event.path.find(element => element.id);\n\n    if (!el) {\n      return;\n    }\n\n    const [x] = (el.id).split('-');\n\n    if (this.isEmptyRow(x)) {\n      if (!this.removeRow(event, row)) {\n        return;\n      }\n\n      this.currencyObj = Object.assign({}, this.data[this.currencyRow - 1]);\n    } else {\n      this.data[+x - 1] = Object.assign({}, this.currencyObj);\n      setTimeout(() => this.selectCell(this.currencyRow, this.currencyColumn));\n    }\n  }\n\n  removeRow(event: any, row: any): boolean {\n\n    if (this.rowActions.beforeRemove && !this.rowActions.beforeRemove(Object.assign({}, row))) {\n      return false;\n    }\n\n    const index = this.data.indexOf(row);\n\n    this.data.splice(index, 1);\n\n    this.changeDetectorRef.detectChanges();\n\n    if ((this.data.length === 0) || (index === this.data.length)) {\n      this.selectCell(this.currencyRow - 1, this.currencyColumn);\n    } else {\n      this.selectCell(this.currencyRow, this.currencyColumn);\n    }\n\n    return true;\n  }\n\n  tableKeydown(event: any, direction: string) {\n    let [row, col] = event.target.id.split('-');\n    row = +row;\n    col = +col;\n    let prow = +row;\n    let pcol = +col;\n\n    // event.preventDefault();\n    // event.stopPropagation();\n\n    // debugger;\n    if (direction === 'down') {\n      if (row <= this.data.length) {\n        prow++;\n      }\n\n      if (row === this.data.length) {\n        if (row === 0 || !this.isEmptyRow(row)) {\n          if (this.saveRow(row)) {\n            if (!this.insertRow()) {\n              return;\n            }\n          } else {\n            return;\n          }\n        } else {\n          prow--;\n        }\n      }\n    } else if ((direction === 'up') && (row > 0)) {\n      prow--;\n    } else if ((direction === 'left') && (col > 0)) {\n      pcol--;\n    } else if ((direction === 'right') && (col < this._columns.length - 1)) {\n      pcol++;\n    } else if (direction === 'next') {\n      if (col < this._columns.length - 1) {\n        pcol++;\n        event.preventDefault();\n      } else if (row < this.data.length) {\n        pcol = 0;\n        prow++;\n        event.preventDefault();\n      }\n    } else if (direction === 'prior') {\n      if (col > 0) {\n        pcol--;\n        event.preventDefault();\n      } else if (row > 0) {\n        pcol = this._columns.length - 1;\n        prow--;\n        event.preventDefault();\n      }\n    }\n\n    if (this.currencyCell === `${prow}-${pcol}`) {\n      // console.log('vazou');\n      return;\n    }\n\n    // debugger;\n    if (prow !== this.currencyRow && row > 0 && this.data.length >= row) {\n      if (!this.isEmptyRow(row)) {\n        if (!this.saveRow(row)) {\n          return;\n        }\n      } else {\n        if (!this.removeRow(event, row)) {\n          return;\n        }\n      }\n    }\n\n    if (this.currencyRow !== prow) {\n      this.currencyObj = Object.assign({}, this.data[prow - 1]);\n      // console.log('mudou de linha');\n    }\n\n    this.lastCell = event.target.id;\n    this.lastRow = row;\n    this.lastColumn = col;\n\n    this.selectCell(prow, pcol);\n  }\n\n  tableClick(event: any) {\n    const el = event.path.find(element => element.id);\n\n    if (!el) {\n      this.selectCell(this.currencyRow, this.currencyColumn);\n      return;\n    }\n\n    if (this.currencyCell === el.id) {\n      return;\n    }\n\n    const [row, col] = (el.id).split('-');\n    const prow = +row;\n    const pcol = +col;\n\n    if (prow !== this.currencyRow) {\n      if (this.currencyRow > 0) {\n        if (!this.isEmptyRow(this.currencyRow)) {\n          if (!this.saveRow(this.currencyRow)) {\n            this.selectCell(this.currencyRow, this.currencyColumn);\n            return;\n          }\n        } else {\n          if (!this.removeRow(event, row)) {\n            return;\n          }\n        }\n      }\n\n      this.currencyObj = Object.assign({}, this.data[prow - 1]);\n      // console.log('>>>>>>> ', prow - 1);\n    }\n\n    this.lastCell = this.currencyCell;\n    this.lastRow = this.currencyRow;\n    this.lastColumn = this.currencyColumn;\n\n    this.currencyCell = el.id;\n    this.currencyRow = prow;\n    this.currencyColumn = pcol;\n  }\n\n  saveRow(row: number): boolean {\n    // console.log(this.data[row - 1]);\n\n    const obj = this.data[row - 1];\n\n    if (!Object.keys(obj).some(prop => obj[prop] !== this.currencyObj[prop])) {\n      // console.log('tudo igual');\n      return true;\n    }\n\n    if (this.rowActions.beforeSave && !this.rowActions.beforeSave(obj, this.currencyObj)) {\n      return false;\n    }\n\n    const requireds = [];\n\n    this.columns.forEach(column => {\n      if (column.required === true && !obj[column.property]) {\n        requireds.push(column.property);\n      }\n    });\n\n    return requireds.length === 0;\n  }\n\n  insertRow() {\n    const obj = {};\n\n    if (this.rowActions.beforeInsert && !this.rowActions.beforeInsert(obj)) {\n      return false;\n    }\n\n    // this.currencyObj = Object.assign({}, obj);\n\n    this.data.push(obj);\n    this.changeDetectorRef.detectChanges();\n\n    return true;\n  }\n\n  isEmptyRow(row: number) {\n    const obj = this.data[row - 1];\n\n    if (!obj) { // title\n      return false;\n    }\n\n    const filled = Object.keys(obj).some(property => obj[property]);\n\n    return !filled;\n  }\n\n  selectCell(row: number, col: number) {\n    const nextCell = this.elRef.nativeElement.querySelector(`[id='${row}-${col}']`);\n\n    if (nextCell) {\n      this.currencyCell = `${row}-${col}`;\n      this.currencyRow = row;\n      this.currencyColumn = col;\n      nextCell.focus();\n    }\n  }\n}\n","import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';\n\n@Component({\n  selector: 'thf-grid-head',\n  templateUrl: './thf-grid-head.component.html',\n  styleUrls: ['./thf-grid-head.component.css']\n})\nexport class ThfGridHeadComponent {\n\n  private _width: (string | number);\n\n  @Input('t-align') align?: string = 'left';\n\n  @Input('t-freeze') boolean?: boolean = false;\n\n  @Input('t-position') position?: string = '';\n\n  @Input('t-tab-index') tabIndex?: number = -1;\n\n  @Input('t-width') set width(value: (string | number)) {\n    this._width = value;\n  }\n  get width(): (string | number) {\n    return this._width ? `${this._width}px` : '100%';\n  }\n\n  @Input('t-title') title?: string;\n\n  constructor(private changeDetectorRef: ChangeDetectorRef) { }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\n\nimport { ThfFieldModule } from './../../components/thf-field/thf-field.module';\n\nimport { ThfGridCellActionComponent } from './thf-grid-cell-action/thf-grid-cell-action.component';\nimport { ThfGridCellComponent } from './thf-grid-cell/thf-grid-cell.component';\nimport { ThfGridComponent } from './thf-grid.component';\nimport { ThfGridHeadComponent } from './thf-grid-head/thf-grid-head.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente thf-grid.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n\n    ThfFieldModule\n  ],\n  declarations: [\n    ThfGridCellActionComponent,\n    ThfGridCellComponent,\n    ThfGridComponent,\n    ThfGridHeadComponent\n  ],\n  exports: [\n    ThfGridComponent\n  ]\n})\nexport class ThfGridModule { }\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { browserLanguage, thfLocaleDefault, convertToBoolean } from '../../utils/util';\n\nimport { ThfListViewAction } from './interfaces/thf-list-view-action.interface';\nimport { ThfListViewLiterals } from './interfaces/thf-list-view-literals.interface';\n\nexport const thfListViewLiteralsDefault = {\n  en: <ThfListViewLiterals> {\n    hideDetails: 'Hide details',\n    loadMoreData: 'Load more data',\n    noData: 'No data found',\n    selectAll: 'Select all',\n    showDetails: 'Show details'\n  },\n  es: <ThfListViewLiterals> {\n    hideDetails: 'Ocultar detalles',\n    loadMoreData: 'Cargar mÃ¡s resultados',\n    noData: 'Datos no encontrados',\n    selectAll: 'Seleccionar todos',\n    showDetails: 'Mostrar detalles'\n  },\n  pt: <ThfListViewLiterals> {\n    hideDetails: 'Ocultar detalhes',\n    loadMoreData: 'Carregar mais resultados',\n    noData: 'Nenhum dado encontrado',\n    selectAll: 'Selecionar todos',\n    showDetails: 'Exibir detalhes'\n  }\n};\n\n/**\n * @description\n *\n * Componente de lista que recebe um array de objetos e renderiza de forma dinÃ¢mica os dados de\n * acordo com a necessidade de cada tela e deve ser utilizado em conjunto com as diretivas de *templates*\n *  **[t-list-view-content-template](/documentation/thf-list-view-content-template)** e\n * **[t-list-view-detail-template](/documentation/thf-list-view-detail-template)**.\n *\n * O componente disponibiliza uma Ã¡rea especÃ­fica para exibiÃ§Ã£o informaÃ§Ãµes adicionais,\n * atravÃ©s da diretiva **[t-list-view-detail-template](/documentation/thf-list-view-detail-template)**.\n */\nexport class ThfListViewBaseComponent {\n\n  private _actions: Array<ThfListViewAction>;\n  private _height: number;\n  private _hideSelectAll: boolean;\n  private _items: Array<any>;\n  private _literals: ThfListViewLiterals;\n  private _select: boolean;\n  private _showMoreDisabled: boolean;\n\n  popupTarget: any;\n  selectAll: boolean = false;\n  showHeader: boolean = false;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Lista de aÃ§Ãµes que serÃ£o exibidas no componente.\n   */\n  @Input('t-actions') set actions(value: Array<ThfListViewAction>) {\n    this._actions = Array.isArray(value) ? value : [];\n  }\n\n  get actions() {\n    return this._actions;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define a altura do `thf-list-view` em *pixels*.\n   */\n  @Input('t-height') set height(height: number) {\n    this._height = height;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  /**\n   * @description\n   *\n   * Esconde o *checkbox* para seleÃ§Ã£o de todos os itens.\n   *\n   * @default `false`\n   */\n  @Input('t-hide-select-all') set hideSelectAll(hideSelectAll: boolean) {\n    this._hideSelectAll = convertToBoolean(hideSelectAll);\n    this.showMainHeader();\n  }\n\n  get hideSelectAll() {\n    return this._hideSelectAll;\n  }\n\n  /** Lista de itens que serÃ£o exibidos no componente. */\n  @Input('t-items') set items(value: Array<any>) {\n    this._items = Array.isArray(value) ? value : [];\n  }\n\n  get items() {\n    return this._items;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto com as literais usadas no `thf-list-view`.\n   *\n   * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponÃ­veis:\n   *\n   * ```\n   *  const customLiterals: ThfListViewLiterals = {\n   *    hideDetail: 'Ocultar detalhes completamente',\n   *    loadMoreData: 'Mais dados',\n   *    showDetail: 'Mostrar mais detalhes',\n   *    selectAll: 'Selecionar todos os itens'\n   *  };\n   * ```\n   *\n   * Ou passando apenas as literais que deseja customizar:\n   *\n   * ```\n   *  const customLiterals: ThfListViewLiterals = {\n   *    showDetail: 'Mostrar mais detalhes'\n   *  };\n   * ```\n   *\n   * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\n   *\n   * ```\n   * <thf-list-view\n   *   [t-literals]=\"customLiterals\">\n   * </thf-list-view>\n   * ```\n   *\n   * > O objeto padrÃ£o de literais serÃ¡ traduzido de acordo com o idioma do browser (pt, en, es).\n   */\n  @Input('t-literals') set literals(value: ThfListViewLiterals) {\n    if (value instanceof Object && !(value instanceof Array)) {\n      this._literals = {\n        ...thfListViewLiteralsDefault[thfLocaleDefault],\n        ...thfListViewLiteralsDefault[browserLanguage()],\n        ...value\n      };\n    } else {\n      this._literals = thfListViewLiteralsDefault[browserLanguage()];\n    }\n  }\n\n  get literals() {\n    return this._literals || thfListViewLiteralsDefault[browserLanguage()];\n  }\n\n  /** Recebe uma propriedade que serÃ¡ utilizada para recuperar o valor do objeto que serÃ¡ usado como link para o tÃ­tulo. */\n  @Input('t-property-link') propertyLink?: string;\n\n  /** Recebe uma propriedade que serÃ¡ utilizada para recuperar o valor do objeto que serÃ¡ exibido como o tÃ­tulo de cada item. */\n  @Input('t-property-title') propertyTitle?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinÃ¢mica `$selected` para identificar se o\n   * item estÃ¡ selecionado, por exemplo:\n   *\n   * ```\n   *  item.$selected\n   *\n   *  // ou\n   *\n   *  item['$selected']\n   * ```\n   *\n   * @default `false`\n   */\n  @Input('t-select') set select(select: boolean) {\n    this._select = convertToBoolean(select);\n    this.showMainHeader();\n  }\n\n  get select() {\n    return this._select;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Indica que o botÃ£o `Carregar Mais Resultados` serÃ¡ desabilitado.\n   */\n  @Input('t-show-more-disabled') set showMoreDisabled(value: boolean) {\n    this._showMoreDisabled = convertToBoolean(value);\n  }\n\n  get showMoreDisabled(): boolean {\n    return this._showMoreDisabled;\n  }\n\n  /**\n   * Recebe uma aÃ§Ã£o, que serÃ¡ executada quando clicar no botÃ£o \"Carregar mais resultados\".\n   *\n   * > Caso nenhuma aÃ§Ã£o for definida o mesmo nÃ£o ficarÃ¡ visÃ­vel.\n   */\n  @Output('t-show-more') showMore?: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * AÃ§Ã£o que serÃ¡ executada ao clicar no tÃ­tulo.\n   *\n   * Ao ser disparado, o mÃ©todo inserido na aÃ§Ã£o irÃ¡ receber como parÃ¢metro o item da lista clicado.\n   */\n  @Output('t-title-action') titleAction?: EventEmitter<any> = new EventEmitter<any>();\n\n  onClickAction(listViewAction: ThfListViewAction, item) {\n    const cleanItem = this.deleteInternalAttrs(item);\n    if (listViewAction.action) {\n      listViewAction.action(cleanItem);\n    }\n  }\n\n  onShowMore(): void {\n    this.showMore.emit();\n  }\n\n  runTitleAction(listItem: any) {\n    const itemWithPublicProperties = this.deleteInternalAttrs(listItem);\n    this.titleAction.emit(itemWithPublicProperties);\n  }\n\n  selectAllListItems() {\n    if (!this.hideSelectAll) {\n      this.selectAll = !this.selectAll;\n\n      this.items.forEach(item => {\n        item.$selected = this.selectAll;\n      });\n    }\n  }\n\n  selectListItem(row: any) {\n    row.$selected = !row.$selected;\n\n    this.selectAll = this.checkIfItemsAreSelected(this.items);\n  }\n\n  private deleteInternalAttrs(item) {\n    const itemCopy = item ? { ...item } : undefined;\n\n    for (const key in itemCopy) {\n      if (itemCopy.hasOwnProperty(key) && key.startsWith('$')) {\n        delete itemCopy[key];\n      }\n    }\n\n    return itemCopy;\n  }\n\n  private checkIfItemsAreSelected(items: Array<any>): boolean {\n    const someCheckedOrIndeterminate = item => item.$selected || item.$selected === null;\n    const everyChecked = item => item.$selected;\n\n    if (items.every(everyChecked)) {\n      return true;\n    }\n\n    if (items.some(someCheckedOrIndeterminate)) {\n      return null;\n    }\n\n    return false;\n  }\n\n  private showMainHeader() {\n    this.showHeader = !!(this.select && !this.hideSelectAll && this.items && this.items.length);\n  }\n\n}\n","import { Directive, Input, TemplateRef } from '@angular/core';\n\n/**\n * @usedBy ThfListViewComponent\n *\n * @description\n *\n * Esta diretiva permite que sejam apresentadas informaÃ§Ãµes essenciais de cada item.\n *\n * Deve-se utilizar como parÃ¢metro a referÃªncia do item e/ou Ã­ndice, sendo por padrÃ£o o item.\n *  - Item: `item` determina o item da linha corrente.\n *  - Ãndice: `index` determina o Ã­ndice da linha corrente.\n *\n * Esta diretiva pode ser usada de duas formas: explÃ­cita ou *syntax sugar*. Veja a seguir ambos, respectivamente:\n *\n * ```\n * ...\n * <thf-list-view\n *   t-property-title=\"name\"\n *   [t-items]=\"[{id: 1, name: \"Register\", email: register@totvs.com}]\">\n *\n *   <ng-template t-list-view-content-template let-item let-code=\"index\">\n *     <div class=\"thf-row\">\n *       <thf-info class=\"thf-md-6\" t-label=\"Code\" [t-value]=\"code\"></thf-info>\n *       <thf-info class=\"thf-md-6\" t-label=\"Email\" [t-value]=\"item.email\"></thf-info>\n *     </div>\n *   </ng-template>\n *\n * </thf-list-view>\n *\n * ...\n * ```\n *\n * ```\n * ...\n * <thf-list-view\n *    t-property-title=\"name\"\n *    [t-items]=\"[{id: 1, name: \"Register\", email: register@totvs.com}]\">\n *\n *    <div *t-list-view-content-template=\"let item, let i=index\" class=\"thf-row\">\n *      <thf-info class=\"thf-md-12\" t-label=\"Email\" [t-value]=\"item.email\"></thf-info>\n *    </div>\n * </thf-list-view>\n * ...\n *\n * ```\n *\n * A diretiva **t-list-view-content-template**, possibilita tambÃ©m alterar o tÃ­tulo dos itens. Para isto,\n * Ã© necessÃ¡rio atribuir a referÃªncia da funÃ§Ã£o que faz a alteraÃ§Ã£o, Ã  propriedade `t-title`,\n * a mesma deve retornar um valor do tipo *string*. Veja o exemplo a seguir:\n *\n * ```\n * ...\n * @Component({\n *    selector: 'app-root',\n *    template: `\n *      ...\n *      <thf-list-view\n *        [t-items]=\"items\">\n *        <ng-template t-list-view-content-template let-item [t-title]=\"customTitle\">\n *          <div class=\"thf-row\">\n *            <thf-info class=\"thf-md-12\" t-label=\"Customer\" [t-value]=\"item.customer\"></thf-info>\n *          </div>\n *        </ng-template>\n *      ...\n *    `\n * })\n * export class AppComponent {\n *    public items = [{\n *      code: 1200,\n *      product: 'Rice',\n *      customer: 'Supermarket 1',\n *    }, {\n *      code: 1355,\n *      product: 'Bean',\n *      customer: 'Supermarket 2'\n *    }];\n *\n *    customTitle(item) {\n *      return `${item.code} - ${item.product}`;\n *    }\n * }\n * ```\n */\n@Directive({\n  selector: '[t-list-view-content-template]'\n})\nexport class ThfListViewContentTemplateDirective {\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * FunÃ§Ã£o que deve retornar um valor do tipo `string`, que serÃ¡ utilizado como o tÃ­tulo de cada item da lista.\n   *\n   * > Por parÃ¢metro serÃ¡ enviado o item corrente, onde poderÃ¡ utilizÃ¡-lo para recuperar dados sobre o mesmo.\n   */\n  @Input('t-title') title: (item) => string;\n\n  // NecessÃ¡rio manter templateRef para o funcionamento do row template.\n  constructor(public templateRef: TemplateRef<any>) { }\n\n}\n","import { Directive, TemplateRef, Input } from '@angular/core';\n\n/**\n * @usedBy ThfListViewComponent\n *\n * @description\n *\n * Esta diretiva permite que sejam apresentadas informaÃ§Ãµes adicionais de cada item, construindo um\n * botÃ£o `Exibir detalhes` abaixo do conteÃºdo principal do item.\n *\n * Deve-se utilizar como parÃ¢metro a referÃªncia do item e/ou Ã­ndice, sendo por padrÃ£o o item.\n *  - Item: `item` determina o item da linha corrente.\n *  - Ãndice: `index` determina o Ã­ndice da linha corrente.\n *\n * Esta diretiva pode ser usada de duas formas: explÃ­cita ou *syntax sugar*. Veja a seguir ambos, respectivamente:\n *\n * ```\n * ...\n * <thf-list-view\n *   t-property-title=\"name\"\n *   [t-items]=\"items\">\n *\n *   <ng-template t-list-view-detail-template let-item let-code=\"index\">\n *     <div class=\"thf-row\">\n *       <thf-info class=\"thf-md-6\" t-label=\"Code\" [t-value]=\"code\"></thf-info>\n *       <thf-info class=\"thf-md-12\" t-label=\"Email\" [t-value]=\"item.email\"></thf-info>\n *     </div>\n *   </ng-template>\n *\n * </thf-list-view>\n *\n * ...\n * ```\n *\n * ```\n * ...\n * <thf-list-view\n *    t-property-title=\"name\"\n *    [t-items]=\"items\">\n *    <div *t-list-view-detail-template=\"let item, let i=index\" class=\"thf-row\">\n *      <thf-info class=\"thf-md-12\" t-label=\"Email\" [t-value]=\"item.email\"></thf-info>\n *    </div>\n * </thf-list-view>\n * ...\n *\n * ```\n */\n@Directive({\n  selector: '[t-list-view-detail-template]'\n})\nexport class ThfListViewDetailTemplateDirective {\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * FunÃ§Ã£o que deve retornar um valor do tipo `boolean`, que serÃ¡ utilizado como a validaÃ§Ã£o para que o detalhe de item\n   * da lista inicie aberto ou fechado.\n   *\n   */\n  @Input('t-show-detail') showDetail: (item) => boolean;\n\n  // NecessÃ¡rio manter templateRef para o funcionamento do row template.\n  constructor(public templateRef: TemplateRef<any>) { }\n\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { AfterContentInit, ChangeDetectorRef, Component, ContentChild, DoCheck, IterableDiffers, ViewChild } from '@angular/core';\n\nimport { isTypeof } from '../../utils/util';\nimport { ThfPopupComponent } from '../thf-popup/thf-popup.component';\n\nimport { ThfListViewAction } from './interfaces/thf-list-view-action.interface';\nimport { ThfListViewBaseComponent } from './thf-list-view-base.component';\nimport { ThfListViewContentTemplateDirective } from './thf-list-view-content-template/thf-list-view-content-template.directive';\nimport { ThfListViewDetailTemplateDirective } from './thf-list-view-detail-template/thf-list-view-detail-template.directive';\n\n/**\n * @docsExtends ThfListViewBaseComponent\n *\n * @example\n *\n * <example name=\"thf-list-view-basic\" title=\"Totvs List View Basic\">\n *  <file name=\"sample-thf-list-view-basic/sample-thf-list-view-basic.component.html\"> </file>\n *  <file name=\"sample-thf-list-view-basic/sample-thf-list-view-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-list-view-labs\" title=\"Totvs List View Labs\">\n *  <file name=\"sample-thf-list-view-labs/sample-thf-list-view-labs.component.html\"> </file>\n *  <file name=\"sample-thf-list-view-labs/sample-thf-list-view-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-list-view-hiring-processes\" title=\"Totvs List View - Hiring Processes\">\n *  <file name=\"sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.component.html\"> </file>\n *  <file name=\"sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.component.ts\"> </file>\n *  <file name=\"sample-thf-list-view-hiring-processes/sample-thf-list-view-hiring-processes.service.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-list-view',\n  templateUrl: './thf-list-view.component.html',\n  animations: [\n    trigger('showHideDetail', [\n      state('*', style({ 'overflow-y': 'visible' })),\n      state('void', style({ 'overflow-y': 'hidden' })),\n      transition('* => void', [\n        style({ height: '*', 'overflow-y': 'hidden' }),\n        animate(100, style({ height: 0 }))\n      ]),\n      transition('void => *', [\n        style({ height: '0' }),\n        animate(100, style({ height: '*' }))\n      ])\n    ])\n  ]\n})\nexport class ThfListViewComponent extends ThfListViewBaseComponent implements AfterContentInit, DoCheck {\n\n  @ContentChild(ThfListViewContentTemplateDirective, { static: true }) listViewContentTemplate: ThfListViewContentTemplateDirective;\n  @ContentChild(ThfListViewDetailTemplateDirective, { static: true }) listViewDetailTemplate: ThfListViewDetailTemplateDirective;\n\n  @ViewChild('popup', { static: true }) thfPopupComponent: ThfPopupComponent;\n\n  private differ;\n\n  constructor(private changeDetector: ChangeDetectorRef, differs: IterableDiffers) {\n    super();\n    this.differ = differs.find([]).create(null);\n  }\n\n  get hasContentTemplate(): boolean {\n    return !!this.listViewContentTemplate;\n  }\n\n  get hasDetailTemplate(): boolean {\n    return !!this.listViewDetailTemplate;\n  }\n\n  get displayShowMoreButton(): boolean {\n    return this.items && this.items.length > 0 && this.showMore.observers.length > 0;\n  }\n\n  get showButtonsActions(): boolean {\n    return this.visibleActions && this.visibleActions.length > 0 && this.visibleActions.length <= 2;\n  }\n\n  get showPopupActions(): boolean {\n    return this.visibleActions && this.visibleActions.length > 2;\n  }\n\n  get titleHasAction() {\n    return this.titleAction.observers.length > 0;\n  }\n\n  get visibleActions() {\n    return this.actions && this.actions.filter(action => action.visible !== false);\n  }\n\n  ngAfterContentInit(): void {\n    this.initShowDetail();\n  }\n\n  ngDoCheck() {\n    this.checkItemsChange();\n  }\n\n  checkTitleType(item: any) {\n    if (this.propertyLink && item[this.propertyLink] ) {\n      return item[this.propertyLink].startsWith('http') ? 'externalLink' : 'internalLink';\n    }\n\n    return 'noLink';\n  }\n\n  getItemTitle(item) {\n    return this.hasContentTemplate && this.listViewContentTemplate.title ?\n    this.listViewContentTemplate.title(item) : item[this.propertyTitle];\n  }\n\n  hasItems(): boolean {\n    return this.items && this.items.length > 0;\n  }\n\n  returnBooleanValue(listViewAction: ThfListViewAction, item: any) {\n    return isTypeof(listViewAction.disabled, 'function') ? (<any>listViewAction).disabled(item) : listViewAction.disabled;\n  }\n\n  trackBy(index) {\n    return index;\n  }\n\n  togglePopup(item, targetRef: HTMLElement) {\n    this.popupTarget = targetRef;\n    this.changeDetector.detectChanges();\n\n    this.thfPopupComponent.toggle(item);\n  }\n\n  private checkItemsChange() {\n    const changesItems = this.differ.diff(this.items);\n\n    if (changesItems && this.selectAll) {\n      this.selectAll = null;\n    }\n\n    if (changesItems && this.items && this.items.length && this.select && !this.hideSelectAll) {\n      this.showHeader = true;\n    }\n  }\n\n  private initShowDetail() {\n    if (this.items && this.items.length > 0 && this.hasDetailTemplate && this.listViewDetailTemplate.showDetail) {\n      this.items.forEach(item => item.$showDetail = this.listViewDetailTemplate.showDetail(item));\n    }\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfButtonModule } from '../thf-button/thf-button.module';\nimport { ThfPopupModule } from '../thf-popup/thf-popup.module';\n\nimport { ThfListViewComponent } from './thf-list-view.component';\nimport { ThfListViewContentTemplateDirective } from './thf-list-view-content-template/thf-list-view-content-template.directive';\nimport { ThfListViewDetailTemplateDirective } from './thf-list-view-detail-template/thf-list-view-detail-template.directive';\n\n/**\n * @description\n *\n * MÃ³dulo do componente `thf-list-view`.\n *\n * > Para o correto funcionamento do componente `thf-list-view`, deve ser importado o mÃ³dulo `BrowserAnimationsModule` no\n * > mÃ³dulo principal da sua aplicaÃ§Ã£o.\n *\n * MÃ³dulo da aplicaÃ§Ã£o:\n * ```\n * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n * import { ThfModule } from '@totvs/thf-ui';\n * ...\n *\n * @NgModule({\n *   imports: [\n *     BrowserModule,\n *     BrowserAnimationsModule,\n *     ...\n *     ThfModule\n *   ],\n *   declarations: [\n *     AppComponent,\n *     ...\n *   ],\n *   providers: [],\n *   bootstrap: [AppComponent]\n * })\n * export class AppModule { }\n * ```\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ThfButtonModule,\n    ThfPopupModule\n  ],\n  declarations: [\n    ThfListViewComponent,\n    ThfListViewContentTemplateDirective,\n    ThfListViewDetailTemplateDirective\n  ],\n  exports: [\n    ThfListViewComponent,\n    ThfListViewContentTemplateDirective,\n    ThfListViewDetailTemplateDirective\n  ],\n  providers: [],\n  schemas: []\n})\nexport class ThfListViewModule { }\n","import { Input } from '@angular/core';\n\nimport { convertToInt } from '../../utils/util';\n\nconst THF_BADGE_COLORS = [\n  'color-01',\n  'color-02',\n  'color-03',\n  'color-04',\n  'color-05',\n  'color-06',\n  'color-07',\n  'color-08',\n  'color-09',\n  'color-10',\n  'color-11',\n  'color-12',\n];\nconst THF_BADGE_COLOR_DEFAULT = 'color-07';\n\n/**\n * @description\n *\n * @docsPrivate\n *\n * Componente utilizado no `thf-menu` para exibir por exemplo a quantidade de tarefas pendentes.\n */\nexport class ThfBadgeBaseComponent {\n\n  private _color: string;\n  private _value: number;\n\n  badgeValue: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define a cor de fundo do componente e aceita os valores:\n   *\n   * <span class=\"dot thf-color-01\"></span> `color-01`\n   *\n   * <span class=\"dot thf-color-02\"></span> `color-02`\n   *\n   * <span class=\"dot thf-color-03\"></span> `color-03`\n   *\n   * <span class=\"dot thf-color-04\"></span> `color-04`\n   *\n   * <span class=\"dot thf-color-05\"></span> `color-05`\n   *\n   * <span class=\"dot thf-color-06\"></span> `color-06`\n   *\n   * <span class=\"dot thf-color-07\"></span> `color-07`\n   *\n   * <span class=\"dot thf-color-08\"></span> `color-08`\n   *\n   * <span class=\"dot thf-color-09\"></span> `color-09`\n   *\n   * <span class=\"dot thf-color-10\"></span> `color-10`\n   *\n   * <span class=\"dot thf-color-11\"></span> `color-11`\n   *\n   * <span class=\"dot thf-color-12\"></span> `color-12`\n   *\n   * @default `color-07`\n   */\n  @Input('t-color') set color(value: string) {\n    this._color = THF_BADGE_COLORS.includes(value) ? value : THF_BADGE_COLOR_DEFAULT;\n  }\n\n  get color(): string {\n    return this._color;\n  }\n\n  /**\n   * @description\n   *\n   * NÃºmero exibido no componente, caso o mesmo seja maior que 99 o valor exibido serÃ¡ 99+.\n   */\n  @Input('t-value') set value(value: number) {\n    this._value = convertToInt(value);\n    this.setBadgeValue(this._value);\n  }\n\n  get value(): number {\n    return this._value;\n  }\n\n  private setBadgeValue(value: number) {\n    const validRangeValue = (value || value === 0) && (value >= 0 && value < 100);\n    this.badgeValue = validRangeValue ? value.toString() : value > 99 ? '99+' : undefined;\n  }\n\n}\n","import { Component } from '@angular/core';\n\nimport { ThfBadgeBaseComponent } from './thf-badge-base.component';\n\n/**\n * @docsExtends ThfBadgeBaseComponent\n *\n * @docsPrivate\n */\n@Component({\n  selector: 'thf-badge',\n  templateUrl: './thf-badge.component.html'\n})\nexport class ThfBadgeComponent extends ThfBadgeBaseComponent { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThfBadgeComponent } from './thf-badge.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente thf-badge.\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ThfBadgeComponent\n  ],\n  exports: [\n    ThfBadgeComponent\n  ]\n})\nexport class ThfBadgeModule { }\n","import { Input } from '@angular/core';\n\nimport { v4 as uuid } from 'uuid';\nimport { browserLanguage, convertToBoolean, convertToInt, isExternalLink, isTypeof, thfLocaleDefault, validValue } from '../../utils/util';\n\nimport { ThfMenuFilter } from './thf-menu-filter/thf-menu-filter.interface';\nimport { ThfMenuItem } from './thf-menu-item.interface';\nimport { ThfMenuService } from './services/thf-menu.service';\n\nexport const thfMenuLiteralsDefault = {\n  en: { itemNotFound: 'Item not found.' },\n  es: { itemNotFound: 'Elemento no encontrado.' },\n  pt: { itemNotFound: 'Item nÃ£o encontrado.' }\n};\n\n/**\n * @description\n *\n * Este Ã© um componente de menu lateral que Ã© utilizado para navegaÃ§Ã£o nas pÃ¡ginas de uma aplicaÃ§Ã£o.\n *\n * O componente thf-menu recebe uma lista de objetos do tipo `MenuItem` com as informaÃ§Ãµes dos itens de menu como\n * textos, links para redirecionamento, aÃ§Ãµes, atÃ© 4 nÃ­veis de menu e Ã­cones para o primeiro nÃ­vel de menu.\n */\nexport abstract class ThfMenuBaseComponent {\n\n  private _collapsed = false;\n  private _filter = false;\n  private _level;\n  private _logo: string;\n  private _maxLevel = 4;\n  private _menus = [];\n  private _params: any;\n  private _service: string | ThfMenuFilter;\n  private _shortLogo: string;\n\n  allowIcons: boolean;\n  allowCollapseMenu: boolean;\n\n  filteredItems;\n  filterService: ThfMenuFilter;\n\n  readonly literals = {\n    ...thfMenuLiteralsDefault[thfLocaleDefault],\n    ...thfMenuLiteralsDefault[browserLanguage()]\n  };\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Colapsa (retrai) o menu e caso receba o valor `false` expande o menu.\n   *\n   * > Utilize esta propriedade para iniciar o menu colapsado.\n   *\n   * > Ao utilizar os mÃ©todos [`colapse`](documentation/thf-menu#colapseMethod), [`expand`](documentation/thf-menu#expandMethod) e\n   * [`toggle`](documentation/thf-menu#toggleMethod) o valor desta propriedade nÃ£o Ã© alterado.\n   *\n   * **Importante:**\n   *\n   * > O menu serÃ¡ colapsado/expandido apenas se todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.\n   *\n   * @default `false`\n   */\n  @Input('t-collapsed') set collapsed(collapsed: boolean) {\n    this._collapsed = convertToBoolean(collapsed);\n\n    this.validateCollapseClass();\n  }\n\n  get collapsed() {\n    return this._collapsed;\n  }\n\n  /** Lista dos itens do menu. Se o valor estiver indefinido ou invÃ¡lido, serÃ¡ inicializado como um array vazio. */\n  @Input('t-menus') set menus(menus: Array<ThfMenuItem>) {\n    this._menus = Array.isArray(menus) ? menus : [];\n  }\n\n  get menus() {\n    return this._menus;\n  }\n\n  get maxLevel() {\n    return this._maxLevel;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Habilita um campo para pesquisa no menu.\n   * A pesquisa Ã© realizada em todos os nÃ­veis do menu e busca apenas pelos itens que contÃ©m uma aÃ§Ã£o e/ou link definidos,\n   * ou tambÃ©m, pode ser realizada atravÃ©s de um serviÃ§o definido na propriedade `t-service`.\n   *\n   * > O campo de pesquisa Ã© desabilitado se o menu estiver colapsado.\n   *\n   * @default `false`\n   */\n  @Input('t-filter') set filter(filter: boolean) {\n    this._filter = <any>filter === '' ? true : convertToBoolean(filter);\n    this.filteredItems = [...this._menus];\n  }\n\n  get filter() {\n    return this._filter;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Nesta propriedade deve ser informada a URL do serviÃ§o em que serÃ¡ utilizado para realizar o filtro de itens do\n   * menu quando realizar uma busca. Caso haja a necessidade de customizaÃ§Ã£o, pode ser informado um\n   * serviÃ§o implementando a interface `ThfMenuFilter`.\n   *\n   * Caso utilizada uma URL, o serviÃ§o deve retornar os dados conforme o\n   * [Guia de implementaÃ§Ã£o de API da Totvs](http://tdn.totvs.com/display/public/INT/Guia+de+implementacao+das+APIs+TOTVS).\n   *\n   * Quando utilizada uma URL de serviÃ§o, serÃ¡ realizado um *GET* na URL informada, passando o valor digitado\n   * no parÃ¢metro `search`, veja exemplo:\n   *\n   * > O filtro no serviÃ§o serÃ¡ realizado caso contenha no mÃ­nimo trÃªs caracteres no campo de busca, por exemplo `tot`.\n   *\n   * ```\n   * <thf-menu t-service=\"/api/v1/fnd/menu\">\n   * </thf-menu>\n   *\n   * RequisiÃ§Ã£o: GET /api/v1/fnd/menu?search=contas\n   * ```\n   *\n   * > Ã necessÃ¡rio que propriedade `t-filter` esteja habilitada.\n   */\n  @Input('t-service') set service(value: string | ThfMenuFilter) {\n    this._service = value || undefined;\n\n    this.configService(this.service);\n  }\n\n  get service() {\n    return this._service;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Deve ser informado um objeto que deseja-se utilizar na requisiÃ§Ã£o de filtro dos itens de menu.\n   *\n   * Caso utilizado um serviÃ§o customizado, implementando a interface `ThfMenuFilter`, o valor desta propriedade\n   * serÃ¡ passado como parÃ¢metro, na funÃ§Ã£o `getFilteredData`.\n   *\n   * Quando utilizada uma URL de serviÃ§o, serÃ¡ realizado um *GET* na URL informada, passando os valores informados\n   * nesta propriedade em conjunto com o parÃ¢metro `search`, veja exemplo:\n   *\n   * ```\n   * <thf-menu t-service=\"/api/v1/fnd/menu\" [t-params]=\"{ company: 1, user: 297767512 }\">\n   * </thf-menu>\n   *\n   * RequisiÃ§Ã£o: GET /api/v1/fnd/menu?search=contas&company=1&user=297767512\n   * ```\n   */\n  @Input('t-params') set params(value: any) {\n    this._params = value && isTypeof(value, 'object') ? value : undefined;\n  }\n\n  get params() {\n    return this._params;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caminho para a logomarca, que serÃ¡ exibida quando o componente estiver expandido, localizada na parte superior.\n   *\n   * > **Importante:**\n   * - Caso esta propriedade estiver indefinida ou invÃ¡lida o espaÃ§o para logomarca serÃ¡ removido.\n   * - Como boa prÃ¡tica, indica-se utilizar imagens com atÃ© `24px` de altura e `224px` de largura,\n   * caso ultrapassar esses valores a imagem serÃ¡ readequada no espaÃ§o disponÃ­vel.\n   */\n  @Input('t-logo') set logo(value: any) {\n    this._logo = isTypeof(value, 'string') && value.trim() ? value : undefined;\n  }\n\n  get logo() {\n    return this._logo;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caminho para a logomarca, que serÃ¡ exibida quando o componente estiver colapsado, localizada na parte superior.\n   *\n   * > **Importante:**\n   * - Caso esta propriedade estiver indefinida ou invÃ¡lida passa a assumir o valor informado na propriedade `t-logo` e na ausÃªncia desta o\n   * espaÃ§o para logomarca serÃ¡ removido.\n   * - Como boa prÃ¡tica, indica-se utilizar imagens com atÃ© `48px` de altura e `48px` de largura,\n   * caso ultrapassar esses valores a imagem serÃ¡ readequada no espaÃ§o disponÃ­vel.\n   * - Caso nÃ£o informar um valor, esta propriedade passa a assumir o valor informado na propriedade `t-logo`.\n   */\n  @Input('t-short-logo') set shortLogo(value: any) {\n    this._shortLogo = isTypeof(value, 'string') && value.trim() ? value : undefined;\n  }\n\n  get shortLogo() {\n    return this._shortLogo;\n  }\n\n  constructor(public menuService: ThfMenuService) { }\n\n  private configService(service: string | ThfMenuFilter) {\n    if (typeof service === 'string' && service.trim()) {\n      // service url\n      this.menuService.configProperties(service);\n      this.filterService = this.menuService;\n\n    } else if (typeof service === 'object' && service.getFilteredData) {\n      // custom service\n      this.filterService = service;\n    } else {\n      this.filterService = undefined;\n    }\n  }\n\n  protected setMenuExtraProperties() {\n    this.allowIcons = !!this.menus.length;\n    this.allowCollapseMenu = !!this.menus.length;\n\n    this.menus.forEach(menuItem => {\n      this._level = 1;\n      this.allowIcons = this.allowIcons ? validValue(menuItem.icon) : false;\n      this.allowCollapseMenu = this.allowCollapseMenu && this.allowIcons ? validValue(menuItem.shortLabel) : false;\n      this.removeBadgeAlert(menuItem);\n      this.setMenuItemProperties(menuItem);\n\n      if (menuItem.subItems) {\n        this._level++;\n        this.processSubItems(menuItem);\n      }\n    });\n  }\n\n  protected setMenuItemProperties(menuItem: ThfMenuItem): void {\n    menuItem['id'] = menuItem['id'] || uuid();\n    menuItem['level'] = this._level;\n    menuItem['type'] = this.setMenuType(menuItem);\n  }\n\n  protected validateMenus(menus): void {\n    menus.forEach(menu => this.validateMenu(menu));\n  }\n\n  private processSubItems(menu) {\n    menu.subItems.forEach((menuItem, index, menuItems) => {\n\n      const previousItem = menuItems[index - 1];\n      if (previousItem && previousItem.subItems) {\n        this._level = previousItem['level'];\n      }\n\n      if (this._level <= this.maxLevel) {\n        this.setMenuItemProperties(menuItem);\n\n        if (menuItem.subItems) {\n          this._level++;\n          this.processSubItems(menuItem);\n        }\n      }\n\n      if (!menu['badgeAlert']) {\n        menu = this.setMenuBadgeAlert(menu, menuItem);\n      }\n\n    });\n\n    menu.subItems = Object.assign([], menu.subItems);\n  }\n\n  private removeBadgeAlert(menuItem: ThfMenuItem): void {\n\n    if (menuItem['badgeAlert']) {\n      delete menuItem['badgeAlert'];\n    }\n\n    if (menuItem.subItems) {\n      menuItem.subItems.forEach(subItem => this.removeBadgeAlert(subItem));\n    }\n\n  }\n\n  private setMenuBadgeAlert(parent: ThfMenuItem, child: ThfMenuItem): ThfMenuItem {\n    const childHasSubItems = child.subItems && child.subItems.length;\n    const childHasBadgeAlert = child['badgeAlert'];\n    const childHasBadge = child.badge && convertToInt(child.badge.value) >= 0;\n\n    parent['badgeAlert'] = childHasBadgeAlert || (childHasBadge && !childHasSubItems);\n\n    return parent;\n  }\n\n  private setMenuType(menuItem: ThfMenuItem): string {\n    if (menuItem.subItems && menuItem.subItems.length > 0 && this._level < this.maxLevel) {\n      return 'subItems';\n    }\n    if (!menuItem.link) {\n      return 'noLink';\n    }\n    if (isExternalLink(menuItem.link)) {\n      return 'externalLink';\n    }\n    return 'internalLink';\n  }\n\n  private validateMenu(menuItem: ThfMenuItem): void {\n    if (!menuItem.label || menuItem.label.trim() === '') {\n      throw new Error('O atributo ThfMenuItem.label nÃ£o pode ser vazio.');\n    } else if (menuItem.subItems) {\n      menuItem.subItems.forEach(subItem => {\n        this.validateMenu(subItem);\n      });\n    }\n  }\n\n  protected abstract validateCollapseClass();\n\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @usedBy ThfMenuComponent\n *\n * @description\n *\n * Esta diretiva permite adicionar um conteÃºdo personalizado entre a logo e o campo de filtro do cabeÃ§alho do\n * [`thf-menu`](/documentation/thf-menu).\n *\n * Para personalizar o conteÃºdo do cabeÃ§alho deve-se utilizar a diretiva `t-menu-header-template` dentro da *tag* do\n * [`thf-menu`](/documentation/thf-menu). Podendo ser utilizada de duas formas:\n *\n * Com `ng-template`\n * ```\n * ...\n * <thf-menu [t-menus]=\"menus\">\n *   <ng-template t-menu-header-template>\n *     ...\n *   </ng-template>\n * </thf-menu>\n * ...\n * ```\n *\n * ou com *syntax sugar*\n * ```\n * ...\n * <thf-menu [t-menus]=\"menus\">\n *   <div *t-menu-header-template>\n *     ...\n *   </div>\n * </thf-menu>\n * ...\n * ```\n *\n * > Quando o menu estiver colapsado ou tela for _mobile_ o conteÃºdo personalizado nÃ£o serÃ¡ exibido.\n */\n@Directive({\n  selector: '[t-menu-header-template]'\n})\nexport class ThfMenuHeaderTemplateDirective {\n\n  // NecessÃ¡rio manter templateRef para o funcionamento do row template.\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * ServiÃ§o que implementa a comunicaÃ§Ã£o entre os items do thf-menu.\n */\n@Injectable()\nexport class ThfMenuItemsService {\n  private subjectParent = new Subject<any>();\n  private subjectChild = new Subject<any>();\n\n  // Envia informaÃ§Ãµes do click do thf-menu-item para o thf-menu\n  sendToParentMenuClicked(menu: object) {\n    this.subjectChild.next(menu);\n  }\n\n  // Recebe do thf-menu-item sua informaÃ§Ã£o de click.\n  receiveFromChildMenuClicked() {\n    return this.subjectChild.asObservable();\n  }\n\n  // Envia para os thf-menu-item a resposta do processamento de click de um thf-menu-item.\n  sendToChildMenuClicked(menu: object) {\n    this.subjectParent.next(menu);\n  }\n\n  // Recebe do thf-menu as informaÃ§Ãµes processadas do click de um thf-menu-item.\n  receiveFromParentMenuClicked(): Observable<any> {\n    return this.subjectParent.asObservable();\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { ThfMenuItemFiltered } from '../thf-menu-item/thf-menu-item-filtered.interface';\nimport { ThfMenuFilter } from '../thf-menu-filter/thf-menu-filter.interface';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * ServiÃ§o que implementa a interface `ThfMenuFilter`, utilizado para fazer requisiÃ§Ãµes ao serviÃ§o informado pelo usuÃ¡rio,\n * caso for uma URL, no componente `thf-menu`.\n */\n@Injectable()\nexport class ThfMenuService implements ThfMenuFilter {\n\n  private _url: string;\n\n  get url(): string { return this._url; }\n\n  constructor(private http: HttpClient) { }\n\n  configProperties(url: string) {\n    this._url = url;\n  }\n\n  getFilteredData(search: string, params?: any): Observable<Array<ThfMenuItemFiltered>> {\n    const filterParams = {\n      search,\n      ...params\n    };\n\n    return this.http.get(this.url, { params: filterParams })\n      .pipe(map((response: { items: Array<ThfMenuItemFiltered> }) => response && response.items));\n  }\n\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  DoCheck,\n  ElementRef,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef\n} from '@angular/core';\n\nimport { NavigationCancel, NavigationEnd, Router } from '@angular/router';\n\nimport { map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\nimport { getFormattedLink, isMobile, openExternalLink } from '../../utils/util';\n\nimport { ThfMenuBaseComponent } from './thf-menu-base.component';\nimport { ThfMenuHeaderTemplateDirective } from './thf-menu-header-template/thf-menu-header-template.directive';\nimport { ThfMenuItem } from './thf-menu-item.interface';\nimport { ThfMenuItemFiltered } from './thf-menu-item/thf-menu-item-filtered.interface';\nimport { ThfMenuItemsService } from './services/thf-menu-items.service';\nimport { ThfMenuService } from './services/thf-menu.service';\n\nconst thfMenuDebounceTime = 400;\nconst thfMenuMinLength = 3;\nconst thfMenuRootLevel = 1;\n\n/**\n * @docsExtends ThfMenuBaseComponent\n *\n * @description\n *\n * Aparece completo em telas com largura maior que 1200px, caso contrÃ¡rio o menu Ã© escondido e chamado por meio de um botÃ£o.\n *\n * O menu tambÃ©m pode ser colapsado. Essa opÃ§Ã£o Ã© habilitada quando todos os itens de primeiro nÃ­vel possuÃ­rem Ã­cones e textos curtos.\n * Se colapsado, somente os itens de primeiro nÃ­vel serÃ£o exibidos e, caso o item selecionado possua sub-nÃ­veis,\n * entÃ£o o menu alternarÃ¡ novamente para o estado aberto.\n *\n * Existe a possibilidade de customizar a logomarca, que Ã© exibida na parte superior do componente.\n *\n * E para adicionar um conteÃºdo personalizado entre a logomarca e o campo de filtro,\n * basta adicionar este conteÃºdo com a diretiva [**t-menu-header-template**](/documentation/thf-menu-header-template).\n *\n * Caso utilizar o filtro de menus, Ã© possÃ­vel realizar buscas em serviÃ§o, apenas informando a URL do serviÃ§o ou a instÃ¢ncia de\n * um serviÃ§o customizado implementando a interface `ThfMenuFilter`.\n *\n * Para o menu funcionar corretamente Ã© necessÃ¡rio importar o `RouterModule` e `Routes` do mÃ³dulo principal de\n *  sua aplicaÃ§Ã£o:\n *\n * ````\n * import { RouterModule, Routes } from '@angular/router';\n *\n * ...\n *\n * @NgModule({\n *   imports: [\n *     RouterModule,\n *     Routes,\n *     ...\n *     ThfModule,\n *     ...\n *   ],\n *   declarations: [\n *     AppComponent\n *   ],\n *   providers: [],\n *   bootstrap: [AppComponent]\n * })\n * export class AppModule { }\n * ```\n *\n * AlÃ©m disso Ã© necessÃ¡rio criar um mÃ³dulo configurando as rotas da aplicaÃ§Ã£o.\n *\n * ```\n * import { NgModule } from '@angular/core';\n *\n * import { RouterModule, Routes } from '@angular/router';\n *\n * import { HelloWorldComponent } from './hello-world/hello-world.component';\n *\n * const routes: Routes = [\n *   {path: 'hello-world', component: HelloWorldComponent}\n * ];\n *\n * @NgModule({\n *   imports: [RouterModule.forRoot(routes, {useHash: true})],\n *   exports: [RouterModule]\n * })\n * export class AppRoutingModule {}\n * ```\n *\n * @example\n *\n * <example name=\"thf-menu-basic\" title=\"Totvs Menu Basic\">\n *   <file name=\"sample-thf-menu-basic/sample-thf-menu-basic.component.html\"> </file>\n *   <file name=\"sample-thf-menu-basic/sample-thf-menu-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-menu-labs\" title=\"Totvs Menu Labs\">\n *   <file name=\"sample-thf-menu-labs/sample-thf-menu-labs.component.html\"> </file>\n *   <file name=\"sample-thf-menu-labs/sample-thf-menu-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-menu-human-resources\" title=\"Totvs Menu - Human Resources\">\n *   <file name=\"sample-thf-menu-human-resources/sample-thf-menu-human-resources.component.html\"> </file>\n *   <file name=\"sample-thf-menu-human-resources/sample-thf-menu-human-resources.component.ts\"> </file>\n *   <file name=\"sample-thf-menu-human-resources/sample-thf-menu-human-resources.service.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-menu',\n  templateUrl: './thf-menu.component.html',\n  providers: [ ThfMenuItemsService, ThfMenuService ]\n})\nexport class ThfMenuComponent extends ThfMenuBaseComponent implements OnDestroy, OnInit, DoCheck {\n\n  @ContentChild(ThfMenuHeaderTemplateDirective, { static: true }) menuHeaderTemplate: ThfMenuHeaderTemplateDirective;\n\n  activeMenuItem: ThfMenuItem;\n  collapsedMobile: boolean;\n  filterLoading = false;\n  groupedMenuItem: ThfMenuItem;\n  linkActive: string;\n  mobileOpened: boolean = false;\n  noData: boolean = false;\n  parentRef: any;\n  timeoutFilter: any;\n\n  private filteringItems: boolean = false;\n  private menuInitialized: boolean = false;\n  private menuPrevious: string = null;\n  private resizeListener: () => void;\n\n  private itemSubscription: Subscription;\n  private routeSubscription: Subscription;\n\n  constructor(viewRef: ViewContainerRef,\n              private element: ElementRef,\n              private renderer: Renderer2,\n              private router: Router,\n              private menuItemsService: ThfMenuItemsService,\n              private changeDetector: ChangeDetectorRef,\n              menuService: ThfMenuService) {\n\n    super(menuService);\n    this.parentRef = viewRef['_view']['component'];\n  }\n\n  private get isActiveItemMenuSubMenu() {\n    return this.activeMenuItem['level'] > this.groupedMenuItem['level'];\n  }\n\n  get enableCollapse() {\n    return this.isCollapsed && !this.collapsedMobile;\n  }\n\n  get enableCollapseButton() {\n    return this.allowCollapseMenu && !this.collapsed && !this.mobileOpened;\n  }\n\n  get hasFooter() {\n    return this.allowCollapseMenu && !this.mobileOpened && this.enableCollapseButton || (this.collapsed && !this.collapsedMobile);\n  }\n\n  get isCollapsed() {\n    return this.allowCollapseMenu && this.collapsed;\n  }\n\n  ngDoCheck() {\n    if (this.filteringItems && this.filter) {\n      return;\n    }\n\n    const menuCurrent = JSON.stringify(this.menus);\n\n    if (this.menuPrevious !== menuCurrent || !this.menuInitialized) {\n      this.updateMenu();\n      this.validateCollapseClass();\n    }\n  }\n\n  ngOnDestroy() {\n    this.itemSubscription.unsubscribe();\n    this.routeSubscription.unsubscribe();\n\n    if (this.resizeListener) {\n      this.resizeListener();\n    }\n  }\n\n  ngOnInit() {\n    this.subscribeToMenuItem();\n    this.subscribeToRoute();\n\n    setTimeout(() => {\n      const urlRouter = this.checkingRouterChildrenFragments();\n      this.checkActiveMenuByUrl(urlRouter);\n    });\n  }\n\n  activateMenuByUrl(urlPath: string, menus: Array<ThfMenuItem>) {\n    if (menus) {\n      return menus.some(menu => {\n        const formattedLink = getFormattedLink(menu.link);\n        if (formattedLink === urlPath) {\n          this.linkActive = formattedLink;\n          this.activateMenuItem(menu);\n          return true;\n        } else {\n          return this.activateMenuByUrl(urlPath, menu.subItems);\n        }\n      });\n    }\n  }\n\n  checkActiveMenuByUrl(urlPath: string): void {\n    if (!this.linkActive || this.linkActive !== urlPath) {\n      this.activateMenuByUrl(urlPath, this.menus);\n    }\n  }\n\n  /**\n   * <a id=\"colapseMethod\"></a>\n   *\n   * *MÃ©todo para colapsar (retrair) o menu.\n   */\n  collapse() {\n    this.validateToggleMenu(true);\n  }\n\n  debounceFilter(filter: string) {\n    clearTimeout(this.timeoutFilter);\n\n    this.timeoutFilter = setTimeout(() => {\n      this.filterProcess(filter);\n    }, thfMenuDebounceTime);\n  }\n\n  /**\n   * <a id=\"expandMethod\"></a>\n   *\n   * *MÃ©todo para expandir (aumentar) o menu.\n   */\n  expand() {\n    this.validateToggleMenu(false);\n  }\n\n  subscribeToMenuItem() {\n    this.itemSubscription = this.menuItemsService.receiveFromChildMenuClicked().subscribe((menu: ThfMenuItem) => {\n      this.clickMenuItem(menu);\n    });\n  }\n\n  subscribeToRoute() {\n    this.routeSubscription = this.router.events.subscribe(val => {\n      if (val instanceof NavigationEnd || val instanceof NavigationCancel) {\n        const urlRouter = this.checkingRouterChildrenFragments();\n        this.checkActiveMenuByUrl(urlRouter);\n      }\n    });\n  }\n\n  /**\n   * <a id=\"toggleMethod\"></a>\n   * *MÃ©todo que colapsa e expande o menu alternadamente.\n   *\n   * > *Os mÃ©todos apenas vÃ£o colapsar/expandir o menu se:\n   *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.\n   */\n  toggle() {\n    this.validateToggleMenu(!this.collapsed);\n  }\n\n  toggleMenuMobile(): void {\n    this.mobileOpened = !this.mobileOpened;\n    this.collapsedMobile = this.collapsed && this.mobileOpened;\n\n    this.validateCollapseClass(this.collapsedMobile);\n\n    if (isMobile()) {\n      return;\n    }\n\n    if (this.mobileOpened) {\n      this.createResizeListener();\n    }\n  }\n\n  private activateCollapseSubMenuItem() {\n\n    this.clearGroupMenuIfFirstLevel(this.activeMenuItem);\n\n    if (!this.collapsed && this.activeMenuItem['level'] > thfMenuRootLevel && this.isActiveItemMenuSubMenu) {\n      this.openParentMenu(this.activeMenuItem);\n    }\n  }\n\n  private activateMenuItem(menu: ThfMenuItem): void {\n    this.activeMenuItem = menu;\n    this.linkActive = menu.link;\n    if (this.activeMenuItem['level'] > thfMenuRootLevel) {\n      this.openParentMenu(this.activeMenuItem);\n    } else {\n      this.groupedMenuItem = null;\n    }\n    this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem, activatedByRoute: true });\n  }\n\n  private areSubMenus(menus: Array<ThfMenuItem>) {\n    return menus.every(menu => menu['level'] > thfMenuRootLevel);\n  }\n\n  private checkingRouterChildrenFragments() {\n    const childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];\n\n    return childrenPrimary ? `/${childrenPrimary.segments.map(it => it.path).join('/')}` : '';\n  }\n\n  private clearGroupMenuIfFirstLevel(activeMenuItem: ThfMenuItem) {\n    if (activeMenuItem['level'] === thfMenuRootLevel) {\n      this.groupedMenuItem = undefined;\n    }\n  }\n\n  private clickMenuItem(menu: ThfMenuItem) {\n    if (menu.action) {\n      this.executeMenuAction(menu);\n    }\n\n    if (menu['type'] === 'externalLink') {\n      openExternalLink(menu.link);\n\n    } else if (menu['type'] === 'internalLink') {\n      this.activateMenuItem(menu);\n\n    } else if (menu['type'] === 'subItems') {\n      if (this.filteringItems) {\n        this.filteringItems = false;\n      }\n\n      this.groupMenuItem(menu);\n    }\n\n    if (menu['type'] !== 'subItems') {\n      this.mobileOpened = false;\n    }\n  }\n\n  private convertToMenuItemFiltered(menuItem: any = { label: '', link: '' }): ThfMenuItemFiltered {\n    const { label, link } = menuItem;\n\n    const menuItemFiltered: ThfMenuItemFiltered = { label, link };\n\n    this.setMenuItemProperties(menuItemFiltered);\n\n    return menuItemFiltered;\n  }\n\n  private createResizeListener() {\n    this.resizeListener = this.renderer.listen('window', 'resize', () => {\n      this.toggleResize();\n      this.resizeListener();\n    });\n  }\n\n  private executeMenuAction(menu: ThfMenuItem): void {\n    if (typeof menu.action === 'string') {\n      this.parentRef[menu.action](menu);\n    } else {\n      menu.action.call(this.parentRef, menu);\n    }\n  }\n\n  private async filterItems(filter: string) {\n    const trimFilter = filter && filter.trim();\n\n    if (trimFilter) {\n      this.filteredItems = [];\n      this.filteredItems = this.filterService ? await this.filterOnService(trimFilter) : this.filterLocalItems(trimFilter);\n      this.filteringItems = true;\n    } else {\n      this.filteredItems = [...this.menus];\n      this.filteringItems = false;\n    }\n\n  }\n\n  private filterLocalItems(filter: string) {\n    const filteredItems = [];\n\n    this.findItems(this.menus, filter.toLowerCase(), filteredItems);\n\n    return filteredItems;\n  }\n\n  private filterProcess(filter: string) {\n    this.filterLoading = true;\n\n    this.filterItems(filter).then(() => {\n\n      this.filterLoading = false;\n\n      this.showNoData();\n      this.changeDetector.detectChanges();\n      this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });\n\n    }).catch(error => {\n      this.filterLoading = false;\n      Promise.reject(error);\n    });\n  }\n\n  private async filterOnService(search: string = '') {\n    if (search.length >= thfMenuMinLength) {\n\n      return await this.filterService.getFilteredData(search, this.params)\n        .pipe(\n          map(menuItemsFiltered => menuItemsFiltered.map(menuItem => this.convertToMenuItemFiltered(menuItem)))\n        )\n        .toPromise();\n    } else {\n      return this.filteredItems;\n    }\n  }\n\n  private findItems(menus: Array<ThfMenuItem>, filter: string, filteredItems: Array<any>) {\n    menus.forEach(menu => {\n      if ((menu.label.toLowerCase().includes(filter) && !menu.subItems) ||\n          (menu.subItems && this.findItems(menu.subItems, filter, filteredItems))) {\n            filteredItems.push(menu);\n      }\n    });\n  }\n\n  private findParent(menus: Array<ThfMenuItem>, menuItem: ThfMenuItem): ThfMenuItem {\n    const getParent = function(menuItems: Array<ThfMenuItem>, id) {\n      if (menuItems) {\n        for (let index = 0; index < menuItems.length; index++) {\n          const menu = menuItems[index];\n          if (menu.subItems && menu.subItems.find(subItem => subItem['id'] === id)) {\n            return menu;\n          }\n          const found = getParent(menu.subItems, id);\n          if (found) {\n            return found;\n          }\n        }\n      }\n    };\n    return getParent(menus, menuItem['id']);\n  }\n\n  private findRootParent(menus: Array<ThfMenuItem>, menu: ThfMenuItem): ThfMenuItem {\n\n    const findParent = this.findParent;\n\n    const getRootParent = function(menuItems: Array<ThfMenuItem>, menuItem): ThfMenuItem {\n\n      let parent = findParent(menuItems, menuItem);\n\n      if (parent['level'] !== thfMenuRootLevel) {\n        parent = getRootParent(menuItems, parent);\n      }\n      return parent;\n    };\n    return getRootParent(menus, menu);\n  }\n\n  private getActiveMenuParent(menus: Array<ThfMenuItem>, activeMenuItem: ThfMenuItem, groupedMenuItem: ThfMenuItem) {\n    if (this.areSubMenus([groupedMenuItem, activeMenuItem])) {\n      return this.findRootParent(menus, activeMenuItem);\n    }\n  }\n\n  private groupMenuItem(menu: ThfMenuItem): void {\n    if (this.collapsed) {\n      this.toggleMenuCollapse();\n    }\n\n    menu['isOpened'] = !menu['isOpened'];\n    this.groupedMenuItem = menu;\n\n    if (this.activeMenuItem && menu['isOpened']\n      && this.isActiveItemMenuSubMenu\n      && this.isRootMenuEqualGroupedMenu(this.menus, this.activeMenuItem, menu)) {\n      this.activateMenuItem(this.activeMenuItem);\n    }\n\n    this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });\n  }\n\n  private isRootMenuEqualGroupedMenu(menus: Array<ThfMenuItem>, activeMenuItem: ThfMenuItem, groupedMenuItem: ThfMenuItem) {\n    const activeMenuRootParent = this.findRootParent(menus, activeMenuItem);\n    return activeMenuRootParent['id'] === groupedMenuItem['id'];\n  }\n\n  private openParentMenu(childMenu: ThfMenuItem): void {\n    const parent = this.findParent(this.menus, childMenu);\n    parent['isOpened'] = true;\n    this.groupedMenuItem = parent;\n  }\n\n  private showNoData() {\n    this.noData = this.filteredItems.length === 0;\n  }\n\n  private toggleGroupedMenuItem() {\n    this.groupedMenuItem['isOpened'] = !this.collapsed && this.allowCollapseMenu;\n  }\n\n  private toggleMenuCollapse(collapsed: boolean = false) {\n\n    this.collapsed = collapsed;\n\n    if (this.groupedMenuItem && this.activeMenuItem) {\n      this.groupedMenuItem = this.getActiveMenuParent(this.menus, this.activeMenuItem, this.groupedMenuItem) || this.groupedMenuItem;\n      this.toggleGroupedMenuItem();\n    }\n\n    if (this.activeMenuItem) {\n      this.activateCollapseSubMenuItem();\n      this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem, activatedByRoute: true });\n    }\n\n    this.updateMenu();\n  }\n\n  private toggleResize() {\n    if (this.mobileOpened) {\n      this.mobileOpened = false;\n      this.collapsedMobile = false;\n      this.validateCollapseClass(this.collapsedMobile);\n    }\n  }\n\n  private validateToggleMenu(collapsed: boolean) {\n\n    if (!this.allowCollapseMenu) {\n      return;\n    }\n\n    this.toggleMenuCollapse(collapsed);\n  }\n\n  private updateMenu() {\n    this.menuInitialized = true;\n    this.setMenuExtraProperties();\n    this.filteredItems = [...this.menus];\n    this.menuPrevious = JSON.stringify(this.menus);\n    this.validateMenus(this.menus);\n  }\n\n  protected validateCollapseClass(collapsedMobile?: boolean) {\n    const wrapper = this.element.nativeElement.parentNode;\n    this.renderer[this.isCollapsed && !collapsedMobile ? 'addClass' : 'removeClass'](wrapper, 'thf-collapsed-menu');\n  }\n\n}\n","import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente que apresenta o campo de pesquisa no thf-menu.\n */\n@Component({\n  selector: 'thf-menu-filter',\n  templateUrl: './thf-menu-filter.component.html'\n})\nexport class ThfMenuFilterComponent {\n\n  // VariÃ¡vel necessÃ¡ria para o thf-clean identificar que deve ser criado.\n  readonly clean = true;\n\n  @Input('t-loading') loading: boolean;\n\n  // utilizado para repassar ao thf-clean\n  @ViewChild('inputFilter', { read: ElementRef, static: true }) inputFilterElement: ElementRef;\n\n  @Output('t-filter') filter = new EventEmitter();\n\n  filterItems(search: string) {\n    this.filter.emit(search);\n  }\n\n}\n","import { Component, ElementRef, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { convertToInt, convertToBoolean } from '../../../utils/util';\n\nimport { ThfMenuItem } from '../thf-menu-item.interface';\nimport { ThfMenuItemsService } from '../services/thf-menu-items.service';\n\n// valor para que caibam 3 linhas de `label`\nconst thfMenuItemSubItemSize = 98;\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente que implementa cada item do thf-menu.\n */\n@Component({\n  selector: 'thf-menu-item',\n  templateUrl: './thf-menu-item.component.html'\n})\nexport class ThfMenuItemComponent implements OnDestroy, OnInit {\n\n  private _badgeValue: number;\n  private _isSelected: boolean = false;\n  private _isSubItem: boolean = false;\n  private _subItems: Array<ThfMenuItem>;\n\n  isSelectedSubItem;\n  maxHeight: number = 0;\n\n  private itemSubscription: Subscription;\n\n  // AÃ§Ã£o que serÃ¡ chamada ao clicar no item.\n  @Input('t-action') action: string | Function;\n\n  // Indica se contÃ©m algum item filho com o badge.\n  @Input('t-badge-alert') badgeAlert: boolean;\n\n  // Cor do badge.\n  @Input('t-badge-color') badgeColor: string;\n\n  // Valor do badge.\n  @Input('t-badge-value') set badgeValue(badgeValue: number) {\n    this._badgeValue = convertToInt(badgeValue);\n  }\n\n  get badgeValue() {\n    return this._badgeValue;\n  }\n\n  // Indica se o menu estÃ¡ colapsado\n  @Input('t-collapsed-menu') collapsedMenu: boolean;\n\n  // Ãcone de menu\n  @Input('t-icon') icon: string;\n\n  // Identificador do item.\n  @Input('t-id') id: string;\n\n  // Indica se o item estÃ¡ aberto (menu agrupado)\n  @Input('t-is-opened') isOpened: boolean;\n\n  // Indica se o item estÃ¡ selecionado.\n  @Input('t-is-selected') set isSelected(value: boolean) {\n    this._isSelected = convertToBoolean(value);\n\n    this.isSelectedSubItem = this.isSelected && this.isSubItem;\n  }\n  get isSelected() {\n    return this._isSelected;\n  }\n\n  // Indica se o item Ã© um sub item\n  @Input('t-is-sub-item') set isSubItem(value: boolean) {\n    this._isSubItem = convertToBoolean(value);\n  }\n\n  get isSubItem() {\n    return this._isSubItem;\n  }\n\n  // Texto que aparecerÃ¡ representando o item.\n  @Input('t-label') label: string;\n\n  // Indica qual em nÃ­vel do thf-menu encontra-se.\n  @Input('t-level') level: number;\n\n  // Link do item.\n  @Input('t-link') link?: string;\n\n  // Texto que aparecerÃ¡ representando o item.\n  @Input('t-short-label') shortLabel: string;\n\n  // Lista de sub-items.\n  @Input('t-sub-items') set subItems(subitems: Array<ThfMenuItem>) {\n    this._subItems = subitems;\n    if (this.isOpened) {\n      this.calcMenuSubItemsMaxHeight();\n    }\n  }\n\n  get subItems() {\n    return this._subItems;\n  }\n\n  // Indica o tipo de item, como 'internalLink' ou 'subItems'.\n  @Input('t-type') type: string;\n\n  @ViewChild('menuSubItems', { static: false }) menuSubItems: ElementRef;\n\n  get canShowBadge() {\n    return this.type !== 'subItems' && (this.badgeValue || this.badgeValue === 0) && this.badgeValue >= 0;\n  }\n\n  constructor(private menuItemsService: ThfMenuItemsService) { }\n\n  ngOnDestroy(): void {\n    this.itemSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n\n    // subscribe to menu component messages\n    this.itemSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(menu => {\n      this.processMenuItem(menu);\n    });\n  }\n\n  clickMenuItem(event): void {\n    if (!(event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n\n      // Emmit to parent\n      this.menuItemsService.sendToParentMenuClicked({\n        link: this.link,\n        action: this.action,\n        id: this.id,\n        icon: this.icon,\n        label: this.label,\n        level: this.level,\n        subItems: this.subItems,\n        isSelected: this.isSelected,\n        isOpened: this.isOpened,\n        shortLabel: this.shortLabel,\n        type: this.type\n      });\n    }\n  }\n\n  private accordionAnimation(menuActive: ThfMenuItem, menuOpened: ThfMenuItem, hasSubItemOpened: boolean, activatedByRoute: boolean) {\n\n    if (this.id === menuOpened['id']) {\n      this.maxHeight = this.subItems.length * thfMenuItemSubItemSize;\n    }\n\n    if (hasSubItemOpened) {\n      this.maxHeight = menuOpened['isOpened'] ?\n        (this.maxHeight + menuOpened.subItems.length * thfMenuItemSubItemSize) :\n        (this.maxHeight - menuOpened.subItems.length * thfMenuItemSubItemSize);\n\n      if (activatedByRoute) {\n        this.maxHeight = this.getMinimumHeight(0, this, menuActive);\n      }\n    }\n  }\n\n  private activateMenu(menu: any): void {\n    this.isSelected = menu && this.id === menu.id;\n  }\n\n  private calcMenuSubItemsMaxHeight() {\n    setTimeout(() => {\n      const subItems = Array.from(this.menuSubItems.nativeElement.querySelectorAll('.thf-menu-item'));\n      subItems.forEach((menuItem: any) => this.maxHeight += menuItem.offsetHeight);\n    });\n  }\n\n  private getMinimumHeight(minimumHeight: number, menuItem: ThfMenuItem, menuActive: ThfMenuItem) {\n    minimumHeight += thfMenuItemSubItemSize;\n\n    if (menuItem.subItems && this.hasSubItem(menuItem.subItems, menuActive['id'])) {\n      for (let index = 0; index < menuItem.subItems.length; index++) {\n        minimumHeight = this.getMinimumHeight(minimumHeight, menuItem.subItems[index], menuActive);\n      }\n    }\n\n    return minimumHeight;\n  }\n\n  private groupedMenu(menuActive: ThfMenuItem, menuOpened: ThfMenuItem, activatedByRoute: boolean = false): void {\n\n    const hasSubItemOpened = (menuOpened && this.id !== menuOpened['id']) ? this.hasSubItem(this.subItems, menuOpened['id']) : false;\n\n    this.isOpened = this.isMenuOpened(menuOpened, hasSubItemOpened);\n\n    this.isSelected = (menuActive && !this.isOpened) ? this.hasSubItem(this.subItems, menuActive['id']) : false;\n\n    if (!this.isOpened) {\n      this.maxHeight = 0;\n      return;\n    }\n    this.accordionAnimation(menuActive, menuOpened, hasSubItemOpened, activatedByRoute);\n  }\n\n  private hasSubItem(subItems: Array<ThfMenuItem>, id: string): boolean {\n    if (subItems) {\n      return subItems.some(item => {\n        return item['id'] === id ? true : this.hasSubItem(item.subItems, id);\n      });\n    }\n  }\n\n  private isMenuOpened(menuOpened: ThfMenuItem, hasSubItemOpened: boolean): boolean {\n    if (menuOpened) {\n      return (this.id === menuOpened['id']) ? menuOpened['isOpened'] : hasSubItemOpened;\n    }\n\n    return false;\n  }\n\n  private processMenuItem(menu) {\n\n    if (this.type === 'internalLink') {\n      this.activateMenu(menu.active);\n      return;\n    }\n\n    if (this.type === 'subItems') {\n      this.groupedMenu(menu.active, menu.grouped, menu.activatedByRoute);\n      return;\n    }\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfBadgeModule } from '../thf-badge/thf-badge.module';\nimport { ThfFieldModule } from '../thf-field/thf-field.module';\nimport { ThfMenuComponent } from './thf-menu.component';\nimport { ThfMenuFilterComponent } from './thf-menu-filter/thf-menu-filter.component';\nimport { ThfMenuHeaderTemplateDirective } from './thf-menu-header-template/thf-menu-header-template.directive';\nimport { ThfMenuItemComponent } from './thf-menu-item/thf-menu-item.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente thf-menu.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ThfBadgeModule,\n    ThfFieldModule\n  ],\n  declarations: [\n    ThfMenuComponent,\n    ThfMenuFilterComponent,\n    ThfMenuHeaderTemplateDirective,\n    ThfMenuItemComponent\n  ],\n  exports: [\n    ThfMenuComponent,\n    ThfMenuHeaderTemplateDirective\n  ]\n})\nexport class ThfMenuModule { }\n","import { Input } from '@angular/core';\n\nimport { v4 as uuid } from 'uuid';\nimport { isExternalLink } from '../../utils/util';\n\nimport { ThfMenuPanelItem } from './thf-menu-panel-item/thf-menu-panel-item.interface';\nimport { ThfMenuPanelItemInternal } from './thf-menu-panel-item/thf-menu-panel-item-internal.interface';\n\n/**\n * @description\n *\n * Este Ã© um componente de menu lateral composto apenas por Ã­cones e com um nÃ­vel, utilizado para navegaÃ§Ã£o\n * em pÃ¡ginas internas, externas da aplicaÃ§Ã£o ou aciona uma aÃ§Ã£o.\n *\n * O componente `thf-menu-panel` recebe uma lista de objetos do tipo `MenuPanelItem` com as informaÃ§Ãµes dos\n * itens de menu como textos, links para redirecionamento, aÃ§Ãµes e Ã­cones.\n */\nexport class ThfMenuPanelBaseComponent {\n\n  private _menus;\n\n  /** Lista dos itens do `thf-menu-panel`. Se o valor estiver indefinido ou invÃ¡lido, serÃ¡ inicializado como um array vazio. */\n  @Input('t-menus') set menus(menus: Array<ThfMenuPanelItem>) {\n    this._menus = Array.isArray(menus) ? menus : [];\n\n    this.setMenuExtraProperties(this._menus);\n    this.validateMenus(this._menus);\n  }\n\n  get menus() {\n    return this._menus;\n  }\n\n  private setMenuExtraProperties(menus: Array<ThfMenuPanelItem>) {\n    menus.forEach(menuItem => this.setMenuItemProperties(<ThfMenuPanelItemInternal> menuItem));\n  }\n\n  private setMenuItemProperties(menuItem: ThfMenuPanelItemInternal) {\n    menuItem.id = menuItem.id || uuid();\n    menuItem.type = this.setMenuType(menuItem);\n  }\n\n  private setMenuType(menuItem: ThfMenuPanelItem): string {\n    if (!menuItem.link) {\n      return 'noLink';\n    }\n\n    if (isExternalLink(menuItem.link)) {\n      return 'externalLink';\n    }\n\n    return 'internalLink';\n  }\n\n  private validateMenu(menuItem: ThfMenuPanelItem) {\n    if (!menuItem.label) {\n      throw new Error('O atributo ThfMenuPanelItem.label nÃ£o pode ser vazio.');\n    }\n\n    if (!menuItem.icon) {\n      throw new Error('O atributo ThfMenuPanelItem.icon nÃ£o pode ser vazio.');\n    }\n  }\n\n  private validateMenus(menus): void {\n    menus.forEach(menu => this.validateMenu(menu));\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * ServiÃ§o que implementa a comunicaÃ§Ã£o entre os items do thf-menu-panel.\n */\n@Injectable()\nexport class ThfMenuPanelItemsService {\n\n  private subjectChild = new Subject<any>();\n  private subjectParent = new Subject<any>();\n\n  // Recebe do thf-menu-panel-item sua informaÃ§Ã£o de click.\n  receiveFromChildMenuClicked() {\n    return this.subjectChild.asObservable();\n  }\n\n  // Recebe do thf-menu-panel as informaÃ§Ãµes processadas do click de um thf-menu-panel-item.\n  receiveFromParentMenuClicked(): Observable<any> {\n    return this.subjectParent.asObservable();\n  }\n\n  // Envia informaÃ§Ãµes do click do thf-menu-panel-item para o thf-menu\n  sendToParentMenuClicked(menu: object) {\n    this.subjectChild.next(menu);\n  }\n\n  // Envia para os thf-menu-panel-item a resposta do processamento de click de um thf-menu-panel-item.\n  sendToChildMenuClicked(menu: object) {\n    this.subjectParent.next(menu);\n  }\n\n}\n","import { Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { NavigationEnd, Router } from '@angular/router';\n\nimport { Subscription } from 'rxjs';\n\nimport { callFunction, getFormattedLink, openExternalLink } from '../../utils/util';\n\nimport { ThfMenuPanelBaseComponent } from './thf-menu-panel-base.component';\nimport { ThfMenuPanelItem } from './thf-menu-panel-item/thf-menu-panel-item.interface';\nimport { ThfMenuPanelItemInternal } from './thf-menu-panel-item/thf-menu-panel-item-internal.interface';\nimport { ThfMenuPanelItemsService } from './services/thf-menu-panel-items.service';\n\n/**\n * @docsExtends ThfMenuPanelBaseComponent\n *\n * @description\n *\n * Para o menu funcionar corretamente Ã© necessÃ¡rio importar o `RouterModule` e `Routes` do mÃ³dulo principal de\n *  sua aplicaÃ§Ã£o:\n *\n * ````\n * import { RouterModule, Routes } from '@angular/router';\n *\n * ...\n *\n * @NgModule({\n *   imports: [\n *     RouterModule,\n *     Routes,\n *     ...\n *     ThfModule,\n *     ...\n *   ],\n *   declarations: [\n *     AppComponent\n *   ],\n *   providers: [],\n *   bootstrap: [AppComponent]\n * })\n * export class AppModule { }\n * ```\n *\n * AlÃ©m disso Ã© necessÃ¡rio criar um mÃ³dulo configurando as rotas da aplicaÃ§Ã£o.\n *\n * ```\n * import { NgModule } from '@angular/core';\n *\n * import { RouterModule, Routes } from '@angular/router';\n *\n * import { HelloWorldComponent } from './hello-world/hello-world.component';\n *\n * const routes: Routes = [\n *   {path: 'hello-world', component: HelloWorldComponent}\n * ];\n *\n * @NgModule({\n *   imports: [RouterModule.forRoot(routes, {useHash: true})],\n *   exports: [RouterModule]\n * })\n * export class AppRoutingModule {}\n * ```\n *\n * @example\n *\n * <example name=\"thf-menu-panel-basic\" title=\"Totvs Menu Panel Basic\">\n *   <file name=\"sample-thf-menu-panel-basic/sample-thf-menu-panel-basic.component.html\"> </file>\n *   <file name=\"sample-thf-menu-panel-basic/sample-thf-menu-panel-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-menu-panel-labs\" title=\"Totvs Menu Panel Labs\">\n *   <file name=\"sample-thf-menu-panel-labs/sample-thf-menu-panel-labs.component.html\"> </file>\n *   <file name=\"sample-thf-menu-panel-labs/sample-thf-menu-panel-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-menu-panel-customer\" title=\"Totvs Menu Panel - Customers\">\n *   <file name=\"sample-thf-menu-panel-customer/sample-thf-menu-panel-customer.component.html\"> </file>\n *   <file name=\"sample-thf-menu-panel-customer/sample-thf-menu-panel-customer.component.ts\"> </file>\n * </example>\n */\n\n@Component({\n  selector: 'thf-menu-panel',\n  templateUrl: './thf-menu-panel.component.html'\n})\nexport class ThfMenuPanelComponent extends ThfMenuPanelBaseComponent implements OnDestroy, OnInit {\n\n  activeMenuItem: ThfMenuPanelItem;\n  linkActive: string;\n  parentRef: any;\n\n  private routeSubscription: Subscription;\n  private itemSubscription: Subscription;\n\n  constructor(\n    viewRef: ViewContainerRef,\n    private location: Location,\n    private menuItemsService: ThfMenuPanelItemsService,\n    private router: Router) {\n\n    super();\n    this.parentRef = viewRef['_view']['component'];\n  }\n\n  ngOnDestroy() {\n    this.itemSubscription.unsubscribe();\n    this.routeSubscription.unsubscribe();\n  }\n\n  ngOnInit() {\n   this.subscribeToMenuItem();\n   this.subscribeToRoute();\n  }\n\n  private activateMenuByUrl(urlPath: string, menus: Array<ThfMenuPanelItem>) {\n    if (menus) {\n      return menus.some(menu => {\n        if (getFormattedLink(menu.link) === urlPath) {\n          this.activateMenuItem(menu);\n          return true;\n        }\n      });\n    }\n  }\n\n  private activateMenuItem(menu: ThfMenuPanelItem): void {\n    this.activeMenuItem = menu;\n    this.linkActive = getFormattedLink(menu.link);\n    this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, activatedByRoute: true });\n  }\n\n  private checkActiveMenuByUrl(urlPath: string): void {\n    if (!this.linkActive || this.linkActive !== urlPath) {\n      this.activateMenuByUrl(urlPath, this.menus);\n    }\n  }\n\n  private clickMenuItem(menu: ThfMenuPanelItemInternal) {\n    if (menu.action) {\n      callFunction(menu.action, this.parentRef, menu);\n    }\n\n    if (menu.type === 'externalLink') {\n\n      openExternalLink(menu.link);\n\n    } else if (menu.type === 'internalLink') {\n\n      this.activateMenuItem(menu);\n    }\n  }\n\n  private subscribeToRoute() {\n     this.routeSubscription = this.router.events.subscribe(rounterEvent => {\n      if (rounterEvent instanceof NavigationEnd) {\n        this.checkActiveMenuByUrl(this.location.path());\n      }\n    });\n  }\n\n  private subscribeToMenuItem() {\n    this.itemSubscription =\n      this.menuItemsService.receiveFromChildMenuClicked().subscribe((menu: ThfMenuPanelItemInternal) => this.clickMenuItem(menu));\n  }\n\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { ThfMenuPanelItemInternal } from './thf-menu-panel-item-internal.interface';\nimport { ThfMenuPanelItemsService } from '../services/thf-menu-panel-items.service';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente que implementa cada item do thf-menu-panel.\n */\n@Component({\n  selector: 'thf-menu-panel-item',\n  templateUrl: './thf-menu-panel-item.component.html'\n})\nexport class ThfMenuPanelItemComponent implements OnDestroy, OnInit {\n\n  itemsSubscription: Subscription;\n\n  @Input('t-menu-item-internal') menuItemInternal: ThfMenuPanelItemInternal;\n\n  constructor(private menuItemsService: ThfMenuPanelItemsService) { }\n\n  ngOnDestroy() {\n    this.itemsSubscription.unsubscribe();\n  }\n\n  ngOnInit() {\n    // subscribe to menu component messages\n    this.subscribeMenuClickedFromParent();\n  }\n\n  clickMenuItem(event) {\n    if (!(event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n\n      // Emmit to parent\n      this.menuItemsService.sendToParentMenuClicked(this.menuItemInternal);\n    }\n  }\n\n  private activateMenu(menu: ThfMenuPanelItemInternal) {\n    this.menuItemInternal.isSelected = this.menuItemInternal.id === menu.id;\n  }\n\n  private processMenuItem(menu) {\n    if (this.menuItemInternal.type === 'internalLink') {\n      this.activateMenu(menu.active);\n    }\n  }\n\n  private subscribeMenuClickedFromParent() {\n   this.itemsSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(menu => {\n      this.processMenuItem(menu);\n    });\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfFieldModule } from '../thf-field/thf-field.module';\nimport { ThfMenuPanelComponent } from './thf-menu-panel.component';\nimport { ThfMenuPanelItemComponent } from './thf-menu-panel-item/thf-menu-panel-item.component';\nimport { ThfMenuPanelItemsService } from './services/thf-menu-panel-items.service';\nimport { ThfTooltipModule } from '../../directives/thf-tooltip/index';\n\n/**\n * @description\n *\n * MÃ³dulo do componente thf-menu-panel.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ThfFieldModule,\n    ThfTooltipModule\n  ],\n  declarations: [\n    ThfMenuPanelComponent,\n    ThfMenuPanelItemComponent\n  ],\n  exports: [\n    ThfMenuPanelComponent\n  ],\n  providers: [\n    ThfMenuPanelItemsService\n  ]\n})\nexport class ThfMenuPanelModule { }\n","import { Component, Input, ViewContainerRef } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { callFunction, isExternalLink, openExternalLink } from '../../../../utils/util';\n\n@Component({\n  selector: 'thf-navbar-action',\n  templateUrl: './thf-navbar-action.component.html'\n})\nexport class ThfNavbarActionComponent {\n\n  private param;\n  private parentRef;\n\n  @Input('t-action') action?: Function;\n\n  @Input('t-icon') icon: string;\n\n  @Input('t-label') label: string;\n\n  @Input('t-link') link?: string;\n\n  @Input('t-tooltip-text') tooltip?: string;\n\n  constructor(viewContainerRef: ViewContainerRef, private router: Router) {\n    this.parentRef = viewContainerRef['_view']['component'];\n  }\n\n  onActionClick() {\n    if (this.action) {\n      return callFunction(this.action, this.parentRef, this.param || this);\n    }\n\n    if (this.link) {\n      return this.openUrl(this.link);\n    }\n  }\n\n  private openUrl(url: string) {\n    if (isExternalLink(url)) {\n      return openExternalLink(url);\n    }\n\n    if (url) {\n      return this.router.navigate([url]);\n    }\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\nimport { ThfNavbarIconAction } from '../../interfaces/thf-navbar-icon-action.interface';\n\n@Component({\n  selector: 'thf-navbar-action-popup',\n  templateUrl: './thf-navbar-action-popup.component.html'\n})\nexport class ThfNavbarActionPopupComponent {\n\n  @Input('t-icon-actions') iconActions: Array<ThfNavbarIconAction>;\n\n  getLastIconAction() {\n    if (this.iconActions && this.iconActions.length > 0) {\n      return this.iconActions[this.iconActions.length - 1].icon;\n    }\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\nimport { ThfNavbarIconAction } from '../interfaces/thf-navbar-icon-action.interface';\n\n@Component({\n  selector: 'thf-navbar-actions',\n  templateUrl: './thf-navbar-actions.component.html'\n})\nexport class ThfNavbarActionsComponent {\n\n  private _iconActions;\n\n  @Input('t-icon-actions') set iconActions(actions: Array<ThfNavbarIconAction>) {\n    this._iconActions = actions.map(action => ({ ...action, separator: true, url: action.link }));\n  }\n\n  get iconActions() {\n    return this._iconActions;\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThfNavbarActionComponent } from './thf-navbar-action/thf-navbar-action.component';\nimport { ThfNavbarActionPopupComponent } from './thf-navbar-action-popup/thf-navbar-action-popup.component';\nimport { ThfNavbarActionsComponent } from './thf-navbar-actions.component';\nimport { ThfPopupModule } from '../../thf-popup/thf-popup.module';\nimport { ThfTooltipModule } from '../../../directives/thf-tooltip/thf-tooltip.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ThfPopupModule,\n    ThfTooltipModule\n  ],\n  declarations: [\n    ThfNavbarActionComponent,\n    ThfNavbarActionPopupComponent,\n    ThfNavbarActionsComponent\n  ],\n  exports: [\n    ThfNavbarActionsComponent\n  ]\n})\nexport class ThfNavbarActionsModule { }\n","import { Input } from '@angular/core';\n\nimport { browserLanguage, convertToBoolean, thfLocaleDefault } from '../../utils/util';\n\nimport { ThfNavbarIconAction } from './interfaces/thf-navbar-icon-action.interface';\nimport { ThfNavbarItem } from './interfaces/thf-navbar-item.interface';\nimport { ThfNavbarLiterals } from './interfaces/thf-navbar-literals.interface';\n\nexport const thfNavbarLiteralsDefault = {\n  en: <ThfNavbarLiterals> {\n    navbarLinks: 'Navbar links'\n  },\n  es: <ThfNavbarLiterals> {\n    navbarLinks: 'Navbar links'\n  },\n  pt: <ThfNavbarLiterals> {\n    navbarLinks: 'Navbar links'\n  }\n};\n\n/**\n * @description\n *\n * O componente `thf-navbar` Ã© um cabeÃ§alho fixo que permite apresentar uma lista de links para facilitar a navegaÃ§Ã£o pelas\n * pÃ¡ginas da aplicaÃ§Ã£o. TambÃ©m possui Ã­cones com aÃ§Ãµes.\n */\nexport class ThfNavbarBaseComponent {\n\n  private _iconActions: Array<ThfNavbarIconAction> = [];\n  private _items: Array<ThfNavbarItem> = [];\n  private _literals: ThfNavbarLiterals;\n  private _shadow: boolean = false;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define uma lista de aÃ§Ãµes apresentadas em Ã­cones no lado direito do `thf-navbar`.\n   */\n  @Input('t-icon-actions') set iconActions(value: Array<ThfNavbarIconAction>) {\n    this._iconActions = value || [];\n  }\n\n  get iconActions(): Array<ThfNavbarIconAction> {\n    return this._iconActions;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define uma lista de items do `thf-navbar`.\n   */\n  @Input('t-items') set items(value: Array<ThfNavbarItem>) {\n    this._items = value || [];\n  }\n\n  get items(): Array<ThfNavbarItem> {\n    return this._items;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto com a literal usada na propriedade `t-literals`.\n   *\n   * Para customizar a literal, basta declarar um objeto do tipo `ThfNavbarLiterals` conforme exemplo abaixo:\n   *\n   * ```\n   *  const customLiterals: ThfNavbarLiterals = {\n   *    navbarLinks: 'Itens de navegaÃ§Ã£o'\n   *  };\n   * ```\n   *\n   * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\n   *\n   * ```\n   * <thf-navbar\n   *   [t-literals]=\"customLiterals\">\n   * </thf-navbar>\n   * ```\n   *\n   *  > O objeto padrÃ£o de literais serÃ¡ traduzido de acordo com o idioma do *browser* (pt, en, es).\n   */\n  @Input('t-literals') set literals(value: ThfNavbarLiterals) {\n    if (value instanceof Object && !(value instanceof Array)) {\n      this._literals = {\n        ...thfNavbarLiteralsDefault[thfLocaleDefault],\n        ...thfNavbarLiteralsDefault[browserLanguage()],\n        ...value\n      };\n    } else {\n      this._literals = thfNavbarLiteralsDefault[browserLanguage()];\n    }\n  }\n  get literals() {\n    return this._literals || thfNavbarLiteralsDefault[browserLanguage()];\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define a logo apresentada `thf-navbar`.\n   */\n  @Input('t-logo') logo?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caso jÃ¡ possua um menu na aplicaÃ§Ã£o o mesmo deve ser repassado para essa propriedade para que quando entre em modo\n   * responsivo os items do `thf-navbar` possam ser adicionados no primeiro item do menu definido.\n   *\n   * Exemplo:\n   *\n   * ```\n   * <thf-navbar\n   *  [t-items]=\"items\"\n   *  [t-icon-actions]=\"iconActions\"\n   *  [t-menu]=\"userMenu\">\n   * </thf-navbar>\n   * <div class=\"thf-wrapper\">\n   *  <thf-menu #userMenu\n   *   [t-menus]=\"[{ label: 'Item 1', link: '/' }]\">\n   *  </thf-menu>\n   * </div>\n   * ```\n   */\n  @Input('t-menu') menu?: any;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Aplica uma sombra na parte inferior do `thf-navbar`.\n   *\n   * @default `false`\n   */\n  @Input('t-shadow') set shadow(value: boolean) {\n    this._shadow = convertToBoolean(value);\n  }\n\n  get shadow(): boolean {\n    return this._shadow;\n  }\n\n}\n","import { Component, Input, EventEmitter, Output } from '@angular/core';\n\nimport { ThfNavbarItem } from '../../interfaces/thf-navbar-item.interface';\n\nimport { isExternalLink } from '../../../../utils/util';\n\n@Component({\n  selector: 'thf-navbar-item',\n  templateUrl: './thf-navbar-item.component.html'\n})\nexport class ThfNavbarItemComponent {\n\n  @Input('t-action') action: Function;\n\n  @Input('t-clickable') clickable?: boolean;\n\n  @Input('t-label') label: string;\n\n  @Input('t-link') link?: string;\n\n  @Output('t-click') click: EventEmitter<ThfNavbarItem> = new EventEmitter<ThfNavbarItem>();\n\n  get type() {\n    if (isExternalLink(this.link)) {\n      return 'externalLink';\n    }\n\n    return 'internalLink';\n  }\n\n  itemClick() {\n\n    if (this.action) {\n      this.action({ label: this.label, link: this.link });\n    }\n\n    this.click.emit();\n  }\n}\n","import { Component, ElementRef, Input, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { NavigationCancel, NavigationEnd, Router } from '@angular/router';\n\nimport { Subscription } from 'rxjs';\n\nimport { ThfNavbarItem } from '../interfaces/thf-navbar-item.interface';\nimport { ThfNavbarItemComponent } from './thf-navbar-item/thf-navbar-item.component';\n\n@Component({\n  selector: 'thf-navbar-items',\n  templateUrl: './thf-navbar-items.component.html'\n})\nexport class ThfNavbarItemsComponent implements OnInit, OnDestroy {\n\n  selectedItem: ThfNavbarItem;\n\n  private routeSubscription: Subscription;\n\n  @ViewChild('navbarItemsContainer', { read: ElementRef, static: true }) navbarItemsContainer: ElementRef;\n\n  @ViewChildren(ThfNavbarItemComponent, { read: ElementRef }) allNavbarItems:  QueryList<any>;\n\n  @Input('t-items') items: Array<ThfNavbarItem>;\n\n  constructor(private router: Router) { }\n\n  ngOnDestroy() {\n    this.routeSubscription.unsubscribe();\n  }\n\n  ngOnInit() {\n    this.subscribeToRoute();\n  }\n\n  selectItem(item: ThfNavbarItem) {\n    this.selectedItem = item;\n  }\n\n  private checkActiveItemByUrl(urlRouter: string) {\n    this.selectedItem = this.items.find(item => item.link === urlRouter);\n  }\n\n  private checkRouterChildrenFragments() {\n    const childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];\n\n    return childrenPrimary ? `/${childrenPrimary.segments.map(it => it.path).join('/')}` : '';\n  }\n\n  private subscribeToRoute() {\n    this.routeSubscription = this.router.events.subscribe(val => {\n      if (val instanceof NavigationEnd || val instanceof NavigationCancel) {\n        const urlRouter = this.checkRouterChildrenFragments();\n        this.checkActiveItemByUrl(urlRouter);\n      }\n    });\n  }\n\n}\n","import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, OnDestroy, Renderer2, ViewChild } from '@angular/core';\nimport { animate, AnimationBuilder, AnimationFactory, AnimationPlayer, keyframes, style } from '@angular/animations';\n\nimport { ThfNavbarBaseComponent } from './thf-navbar-base.component';\nimport { ThfNavbarItemsComponent } from './thf-navbar-items/thf-navbar-items.component';\n\n/**\n * @docsExtends ThfNavbarBaseComponent\n */\n@Component({\n  selector: 'thf-navbar',\n  templateUrl: './thf-navbar.component.html'\n})\nexport class ThfNavbarComponent extends ThfNavbarBaseComponent implements AfterViewInit, OnDestroy {\n\n  disableRight: boolean;\n  showItemsNavigation: boolean = false;\n\n  private allNavbarItemsWidth: any;\n  private mediaQuery: any;\n  private navbarItemsWidth: any;\n  private offset: number = 0;\n  private player: AnimationPlayer;\n\n  protected windowResizeListener: () => void;\n\n  @ViewChild(ThfNavbarItemsComponent, { read: ElementRef, static: true }) navbarItemsElement: ElementRef;\n\n  @ViewChild(ThfNavbarItemsComponent, { static: true }) navbarItems: ThfNavbarItemsComponent;\n\n  constructor(private renderer: Renderer2, private builder: AnimationBuilder, private changeDetector: ChangeDetectorRef) {\n    super();\n    this.windowResizeListener = this.renderer.listen(window, 'resize', this.displayItemsNavigation.bind(this));\n  }\n\n  ngAfterViewInit() {\n    this.displayItemsNavigation();\n    this.menuWrapperAdjust();\n  }\n\n  ngOnDestroy() {\n    if (this.mediaQuery) {\n      this.mediaQuery.removeListener();\n    }\n  }\n\n  navigateItems(orientation) {\n\n    orientation === 'left' ? this.navigateLeft() : this.navigateRight();\n\n    this.animate(this.offset);\n  }\n\n  private adjustNavbarMenu() {\n    const navbarMenu = document.querySelector('thf-navbar thf-menu');\n    const page = document.querySelector('.thf-page');\n    const navbarLogo = document.querySelector('.thf-navbar-logo');\n    navbarMenu.setAttribute('style', `display: none`);\n    if (page) {\n      page.setAttribute('style', 'margin-left: 0; width: 100%');\n    }\n    if (navbarLogo) {\n      navbarLogo.setAttribute('style', `padding: 0 16px 0 0!important`);\n    }\n    this.mediaQuery.addListener(changed => {\n      if (changed.matches) {\n        navbarMenu.setAttribute('style', `display: block`);\n        if (page) {\n          page.setAttribute('style', 'margin-left: 256; width: calc(100% - 256px)');\n        }\n      } else {\n        navbarMenu.setAttribute('style', `display: none`);\n        if (page) {\n          page.setAttribute('style', 'margin-left: 0; width: 100%');\n        }\n      }\n    });\n  }\n\n  private adjustUserMenu() {\n    const userMenuItems = this.menu.menus;\n    this.mediaQuery.addListener(changed => {\n      if (changed.matches) {\n        const subItems = [{label: this.literals.navbarLinks, subItems: this.items}] ;\n        this.menu.menus = [...subItems, ...this.menu.menus];\n      } else {\n        this.menu.menus = userMenuItems;\n      }\n    });\n  }\n\n  private animate(offset: number) {\n    const animation: AnimationFactory = this.buildTransitionAnimation(offset);\n\n    this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);\n    this.player.play();\n  }\n\n  private buildTransitionAnimation(offset: number) {\n    return this.builder.build([\n      animate(\n        '250ms ease',\n        keyframes([style({ transform: `translateX(${offset}px)` })])\n      )\n    ]);\n  }\n\n  private displayItemsNavigation() {\n    this.navbarItemsWidth = this.navbarItemsElement.nativeElement.offsetWidth;\n\n    this.allNavbarItemsWidth =\n      this.navbarItems.allNavbarItems.reduce((previous: any, current: any) => previous + current.nativeElement.offsetWidth, 0);\n\n    this.showItemsNavigation = this.navbarItemsWidth < this.allNavbarItemsWidth + 88;\n\n    this.changeDetector.detectChanges();\n\n    if (this.offset !== 0) {\n      this.offset = 0;\n      this.animate(this.offset);\n    }\n  }\n\n  private menuWrapperAdjust() {\n    const body = document.querySelector('body');\n    body.setAttribute('style', `height: calc(100% - 56px)`);\n    this.mediaQuery = window.matchMedia('(max-width: 768px)');\n\n    !this.menu ? this.adjustNavbarMenu() : this.adjustUserMenu();\n  }\n\n  private navigateRight() {\n\n    const maxAllowedOffset = this.allNavbarItemsWidth - this.navbarItemsElement.nativeElement.offsetWidth;\n    const itemBreakPoint = (this.offset * -1) + this.navbarItemsElement.nativeElement.offsetWidth;\n\n    let movementInPixels = 0;\n\n    this.navbarItems.allNavbarItems.some(navbarItem => {\n      const finalPosition = navbarItem.nativeElement.offsetWidth + navbarItem.nativeElement.offsetLeft;\n\n      if (itemBreakPoint < finalPosition) {\n        movementInPixels = navbarItem.nativeElement.offsetLeft;\n        return true;\n      }\n\n    });\n\n    this.offset = (movementInPixels * -1);\n\n    if ((this.offset * -1) >= maxAllowedOffset) {\n      this.offset = maxAllowedOffset * -1;\n      this.disableRight = true;\n    }\n  }\n\n  private navigateLeft() {\n    this.disableRight = false;\n\n    let movementInPixels;\n\n    this.navbarItems.allNavbarItems.some(navbarItem => {\n\n      const navbarItemOffset = navbarItem.nativeElement.offsetLeft;\n\n      if (navbarItemOffset >= (this.offset * -1)) {\n        movementInPixels = navbarItemOffset - (this.navbarItemsElement.nativeElement.offsetWidth - navbarItem.nativeElement.offsetWidth);\n        return true;\n      }\n\n    });\n\n    this.offset = (movementInPixels * -1);\n\n    if (this.offset > 0) {\n      this.offset = 0;\n    }\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfNavbarItemComponent } from './thf-navbar-item/thf-navbar-item.component';\nimport { ThfNavbarItemsComponent } from './thf-navbar-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule\n  ],\n  declarations: [\n    ThfNavbarItemComponent,\n    ThfNavbarItemsComponent\n  ],\n  exports: [\n    ThfNavbarItemsComponent\n  ]\n})\nexport class ThfNavbarItemsModule { }\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'thf-navbar-item-navigation',\n  templateUrl: './thf-navbar-item-navigation.component.html'\n})\nexport class ThfNavbarItemNavigationComponent {\n\n  @Input('t-disable-left') disableLeft: boolean;\n\n  @Input('t-disable-right') disableRight: boolean;\n\n  @Output('t-click') click: EventEmitter<any> = new EventEmitter<any>();\n\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'thf-navbar-logo',\n  templateUrl: './thf-navbar-logo.component.html'\n})\nexport class ThfNavbarLogoComponent {\n\n  @Input('t-logo') logo?: string;\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ThfMenuModule } from '../thf-menu/thf-menu.module';\nimport { ThfNavbarActionsModule } from './thf-navbar-actions/thf-navbar-actions.module';\nimport { ThfNavbarComponent } from './thf-navbar.component';\nimport { ThfNavbarItemsModule } from './thf-navbar-items/thf-navbar-items.module';\nimport { ThfNavbarItemNavigationComponent } from './thf-navbar-item-navigation/thf-navbar-item-navigation.component';\nimport { ThfNavbarLogoComponent } from './thf-navbar-logo/thf-navbar-logo.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ThfNavbarActionsModule,\n    ThfNavbarItemsModule,\n    ThfMenuModule\n  ],\n  declarations: [\n    ThfNavbarComponent,\n    ThfNavbarItemNavigationComponent,\n    ThfNavbarLogoComponent\n  ],\n  exports: [\n    ThfNavbarComponent\n  ]\n})\nexport class ThfNavbarModule { }\n","/**\n * @docsPrivate\n *\n * @description\n *\n * O componente **thf-page** Ã© utilizado como container principal para os componentes thf-page-header, thf-page-content\n * e para as aÃ§Ãµes dos componentes thf-page-edit e thf-page-detail.\n *\n * Quando estiver sendo utilizado o componente thf-menu junto ao thf-page, ambos devem estar no mesmo nÃ­vel\n * e inseridos em uma div com a classe **thf-wrapper**. Esta classe serÃ¡ responsÃ¡vel por fazer os cÃ¡lculos\n * necessÃ¡rios de alinhamento dos componentes.\n *\n * O componente **thf-page** tambÃ©m pode ser utilizado sem o thf-menu e neste caso o corpo da pÃ¡gina deve ser\n * definido com a altura de 100% para que o thf-page maximize seu tamanho.\n * ```\n * html, body {\n *   height:100%;\n * }\n * ```\n */\nexport class ThfPageBaseComponent { }\n","import { Component } from '@angular/core';\n\nimport { ThfPageBaseComponent } from './thf-page-base.component';\n\n/**\n * @docsPrivate\n *\n * @docsExtends ThfPageBaseComponent\n */\n@Component({\n  selector: 'thf-page',\n  templateUrl: './thf-page.component.html'\n})\nexport class ThfPageComponent extends ThfPageBaseComponent { }\n","/**\n * @docsPrivate\n *\n * @description\n *\n * O componente **thf-page-content** Ã© utilizado como o container para o conteÃºdo da pÃ¡gina.\n */\nexport class ThfPageContentBaseComponent {\n\n  protected resizeListener: () => void;\n\n}\n","import { AfterViewInit, Component, OnDestroy, Renderer2 } from '@angular/core';\n\nimport { ThfPageContentBaseComponent } from './thf-page-content-base.component';\n\n/**\n * @docsPrivate\n *\n * @docsExtends ThfPageContentBaseComponent\n */\n@Component({\n  selector: 'thf-page-content',\n  templateUrl: './thf-page-content.component.html'\n})\nexport class ThfPageContentComponent extends ThfPageContentBaseComponent implements AfterViewInit, OnDestroy {\n\n  contentOpacity: number = 0;\n  height: string = '90%';\n  overflowY: string = 'none';\n\n  constructor(public renderer: Renderer2) {\n    super();\n    this.initializeListeners();\n  }\n\n  ngAfterViewInit() {\n    this.recalculateHeaderSize();\n  }\n\n  ngOnDestroy() {\n    this.removeListeners();\n  }\n\n  recalculateHeaderSize() {\n    setTimeout(() => {\n      const pageHeaderElement: HTMLElement = document.querySelector('div.thf-page-header');\n\n      this.setHeightContent(pageHeaderElement);\n      this.contentOpacity = 1;\n    });\n  }\n\n  setHeightContent(thfPageHeader: HTMLElement) {\n    const bodyHeight = document.body.clientHeight;\n    const pageHeaderHeight = thfPageHeader ? thfPageHeader.offsetTop + thfPageHeader.offsetHeight : 0;\n    const newHeight = bodyHeight - pageHeaderHeight;\n\n    this.height = `${newHeight}px`;\n  }\n\n  private initializeListeners() {\n    this.resizeListener = this.renderer.listen('window', 'resize', () => {\n      this.recalculateHeaderSize();\n    });\n  }\n\n  private removeListeners() {\n    this.resizeListener();\n  }\n\n}\n","import { Input, ViewChild } from '@angular/core';\n\nimport { ThfBreadcrumb } from '../../thf-breadcrumb/thf-breadcrumb.interface';\nimport { ThfPageAction } from '../thf-page-action.interface';\nimport { ThfPageContentComponent } from '../thf-page-content/thf-page-content.component';\n\n/**\n * @description\n *\n * O componente `thf-page-default` Ã© utilizado como o container principal para as telas sem um template definido.\n */\nexport abstract class ThfPageDefaultBaseComponent {\n\n  private _actions?: Array<ThfPageAction> = [];\n  private _title: string;\n\n  @ViewChild(ThfPageContentComponent, { static: true }) thfPageContent: ThfPageContentComponent;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Nesta propriedade deve ser definido um array de objetos que implementam a interface `ThfPageAction`.\n   */\n  @Input('t-actions') set actions(actions: Array<ThfPageAction>) {\n    this._actions = Array.isArray(actions) ? actions : [];\n    this.setDropdownActions();\n  }\n\n  get actions(): Array<ThfPageAction> {\n    return this._actions;\n  }\n\n  /** Objeto com propriedades do breadcrumb. */\n  @Input('t-breadcrumb') breadcrumb?: ThfBreadcrumb;\n\n  /** TÃ­tulo da pÃ¡gina. */\n  @Input('t-title') set title(title: string) {\n    this._title = title;\n    this.thfPageContent.recalculateHeaderSize();\n  }\n\n  get title() {\n    return this._title;\n  }\n\n  // Seta a lista de aÃ§Ãµes no dropdown.\n  abstract setDropdownActions();\n\n}\n","import { AfterContentInit, Component, OnChanges, Renderer2, SimpleChange, ViewContainerRef } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { callFunction, isTypeof } from '../../../utils/util';\nimport { ThfPageAction } from '../thf-page-action.interface';\n\nimport { ThfPageDefaultBaseComponent } from './thf-page-default-base.component';\n\n/**\n * @docsExtends ThfPageDefaultBaseComponent\n *\n * @example\n *\n * <example name=\"thf-page-default-basic\" title=\"Totvs Page Default Basic\">\n *  <file name=\"sample-thf-page-default-basic/sample-thf-page-default-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-default-basic/sample-thf-page-default-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-default-labs\" title=\"Totvs Page Default Labs\">\n *  <file name=\"sample-thf-page-default-labs/sample-thf-page-default-labs.component.html\"> </file>\n *  <file name=\"sample-thf-page-default-labs/sample-thf-page-default-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-default-dashboard\" title=\"Totvs Page Default - Dashboard\">\n *  <file name=\"sample-thf-page-default-dashboard/sample-thf-page-default-dashboard.component.html\"> </file>\n *  <file name=\"sample-thf-page-default-dashboard/sample-thf-page-default-dashboard.component.ts\"> </file>\n *  <file name=\"sample-thf-page-default-dashboard/sample-thf-page-default-dashboard.service.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-page-default',\n  templateUrl: './thf-page-default.component.html'\n})\nexport class ThfPageDefaultComponent extends ThfPageDefaultBaseComponent implements AfterContentInit, OnChanges {\n\n  limitPrimaryActions: number = 3;\n  dropdownActions: Array<ThfPageAction>;\n  isMobile: boolean;\n\n  private maxWidthMobile: number = 480;\n  private parentRef: ViewContainerRef;\n\n  constructor(\n    viewRef: ViewContainerRef,\n    private renderer: Renderer2,\n    private router: Router) {\n\n    super();\n    this.parentRef = viewRef['_view']['component'];\n  }\n\n  public ngAfterContentInit(): void {\n    this.setIsMobile();\n    this.setDropdownActions();\n\n    this.renderer.listen('window', 'resize', (event: Event) => {\n      this.onResize(event);\n    });\n  }\n\n  ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n    this.setDropdownActions();\n  }\n\n  actionIsDisabled(action: any) {\n    return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;\n  }\n\n  callAction(item: ThfPageAction): void {\n    if (item.url) {\n\n      this.router.navigate([item.url]);\n    } else if (item.action) {\n      callFunction(item.action, this.parentRef);\n    }\n  }\n\n  hasPageHeader() {\n    return !!(this.title || (this.actions && this.actions.length) || (this.breadcrumb && this.breadcrumb.items.length));\n  }\n\n  private onResize(event: Event): void {\n    const width = (event.target as Window).innerWidth;\n\n    if (width < this.maxWidthMobile) {\n      this.isMobile = true;\n      this.limitPrimaryActions = 2;\n      this.setDropdownActions();\n    } else {\n      this.isMobile = false;\n      this.limitPrimaryActions = 3;\n      this.setDropdownActions();\n    }\n  }\n\n  private setIsMobile(): void {\n    if (window.innerWidth < this.maxWidthMobile) {\n      this.isMobile = true;\n      this.limitPrimaryActions = 2;\n    }\n  }\n\n  setDropdownActions(): void {\n    if (this.actions.length > this.limitPrimaryActions) {\n      this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);\n    }\n  }\n\n}\n","import { Input, ViewChild } from '@angular/core';\n\nimport { browserLanguage, thfLocaleDefault } from './../../../utils/util';\n\nimport { ThfBreadcrumb } from '../../thf-breadcrumb/thf-breadcrumb.interface';\nimport { ThfPageContentComponent } from '../thf-page-content/thf-page-content.component';\nimport { ThfPageDetailLiterals } from './thf-page-detail-literals.interface';\n\nexport const thfPageDetailLiteralsDefault = {\n  en: <ThfPageDetailLiterals> {\n    back: 'Back',\n    edit: 'Edit',\n    remove: 'Remove'\n  },\n  es: <ThfPageDetailLiterals> {\n    back: 'Volver',\n    edit: 'Editar',\n    remove: 'Eliminar'\n  },\n  pt: <ThfPageDetailLiterals> {\n    back: 'Voltar',\n    edit: 'Editar',\n    remove: 'Remover'\n  }\n};\n\n/**\n * @description\n *\n * O componente **thf-page-detail** Ã© utilizado como container principal para a tela de detalhamento de um registro.\n * Por padrÃ£o possui 3 aÃ§Ãµes, cada aÃ§Ã£o na tela executa uma funÃ§Ã£o no componente que estÃ¡ utilizando o thf-page-detail,\n * sÃ£o elas:\n *  - Voltar (funÃ§Ã£o: back);\n *  - Editar (funÃ§Ã£o: edit);\n *  - Remover (funÃ§Ã£o: remove);\n *\n * Caso nÃ£o estiver implementado alguma funÃ§Ã£o, listado anteriormente, o mesmo nÃ£o serÃ¡ apresentado.\n */\nexport class ThfPageDetailBaseComponent {\n\n  private _literals: ThfPageDetailLiterals;\n  private _title: string;\n\n  @ViewChild(ThfPageContentComponent, { static: true }) thfPageContent: ThfPageContentComponent;\n\n  /** Objeto com propriedades do breadcrumb. */\n  @Input('t-breadcrumb') breadcrumb: ThfBreadcrumb;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto com as literais usadas no `thf-page-detail`.\n   *\n   * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponÃ­veis:\n   *\n   * ```\n   *  const customLiterals: ThfPageDetailLiterals = {\n   *    edit: 'EdiÃ§Ã£o',\n   *    remove: 'ExclusÃ£o',\n   *    back: 'Menu'\n   *  };\n   * ```\n   *\n   * Ou passando apenas as literais que deseja customizar:\n   *\n   * ```\n   *  const customLiterals: ThfPageDetailLiterals = {\n   *    remove: 'Excluir registro permanentemente'\n   *  };\n   * ```\n   *\n   * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\n   *\n   * ```\n   * <thf-page-detail\n   *   [t-literals]=\"customLiterals\">\n   * </thf-page-detail>\n   * ```\n   *\n   *  > O objeto padrÃ£o de literais serÃ¡ traduzido de acordo com o idioma do browser (pt, en, es).\n   */\n  @Input('t-literals') set literals(value: ThfPageDetailLiterals) {\n    if (value instanceof Object && !(value instanceof Array)) {\n      this._literals = {\n        ...thfPageDetailLiteralsDefault[thfLocaleDefault],\n        ...thfPageDetailLiteralsDefault[browserLanguage()],\n        ...value\n      };\n    } else {\n      this._literals = thfPageDetailLiteralsDefault[browserLanguage()];\n    }\n  }\n  get literals() {\n    return this._literals || thfPageDetailLiteralsDefault[browserLanguage()];\n  }\n\n  /** TÃ­tulo da pÃ¡gina. */\n  @Input('t-title') set title(title: string) {\n    this._title = title;\n    this.thfPageContent.recalculateHeaderSize();\n  }\n\n  get title() {\n    return this._title;\n  }\n\n}\n","/**\n * @description Verifica se existe a funÃ§Ã£o dentro do contexto.\n *\n * @param action Nome da funÃ§Ã£o que serÃ¡ verificada a existÃªncia no parentContext.\n *\n * @param parentContext Contexto da qual a funÃ§Ã£o serÃ¡ verificada.\n */\nexport function hasAction(action: string, parentContext: any): boolean {\n  return parentContext && parentContext[action];\n}\n\n/**\n * @description Executa a funÃ§Ã£o cujo o nome foi passado por parÃ¢metro.\n *\n * @param action Nome da funÃ§Ã£o que serÃ¡ executada no parentContext.\n *\n * @param parentContext Contexto da qual a funÃ§Ã£o serÃ¡ executada.\n */\nexport function callAction(action: string, parentContext: any): void {\n  if (hasAction(action, parentContext)) {\n    parentContext[action]();\n  }\n}\n","import { Component, ViewContainerRef } from '@angular/core';\n\nimport { ThfPageDetailBaseComponent } from './thf-page-detail-base.component';\nimport { callAction, hasAction } from '../thf-page-util/thf-page-util';\n\n/**\n * @docsExtends ThfPageDetailBaseComponent\n *\n * @example\n *\n * <example name=\"thf-page-detail-basic\" title=\"Totvs Page Detail Basic\">\n *  <file name=\"sample-thf-page-detail-basic/sample-thf-page-detail-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-detail-basic/sample-thf-page-detail-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-detail-labs\" title=\"Totvs Page Detail Labs\">\n *  <file name=\"sample-thf-page-detail-labs/sample-thf-page-detail-labs.component.html\"> </file>\n *  <file name=\"sample-thf-page-detail-labs/sample-thf-page-detail-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-detail-user\" title=\"Totvs Page Detail - User\">\n *  <file name=\"sample-thf-page-detail-user/sample-thf-page-detail-user.component.html\"> </file>\n *  <file name=\"sample-thf-page-detail-user/sample-thf-page-detail-user.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-page-detail',\n  templateUrl: './thf-page-detail.component.html'\n})\nexport class ThfPageDetailComponent extends ThfPageDetailBaseComponent {\n\n  callActionFn = callAction;\n  hasActionFn = hasAction;\n  parentContext: ViewContainerRef;\n\n  constructor(viewRef: ViewContainerRef) {\n    super();\n    this.parentContext = viewRef['_view']['component'];\n  }\n\n  hasAnyAction(): boolean {\n    return this.hasActionFn('back', this.parentContext) ||\n      this.hasActionFn('edit', this.parentContext) ||\n      this.hasActionFn('remove', this.parentContext);\n  }\n\n  hasEditFn(property: string): string {\n    if (property === 'icon') {\n      return this.hasActionFn('edit', this.parentContext) ? '' : 'thf-icon-delete';\n    } else if (property === 'type') {\n      return this.hasActionFn('edit', this.parentContext) ? 'default' : 'primary';\n    } else {\n      return '';\n    }\n  }\n\n  hasEditOrRemoveFn(property: string): string {\n    if (property === 'icon') {\n      return this.hasActionFn('edit', this.parentContext) || this.hasActionFn('remove', this.parentContext) ? '' : 'thf-icon-arrow-left';\n    } else if (property === 'type') {\n      return this.hasActionFn('edit', this.parentContext) || this.hasActionFn('remove', this.parentContext) ? 'default' : 'primary';\n    } else {\n      return '';\n    }\n  }\n\n  hasPageHeader(): boolean {\n    return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));\n  }\n\n}\n","import { Input, ViewChild } from '@angular/core';\n\nimport { browserLanguage, thfLocaleDefault } from './../../../utils/util';\n\nimport { ThfBreadcrumb } from '../../thf-breadcrumb/thf-breadcrumb.interface';\nimport { ThfPageContentComponent } from '../thf-page-content/thf-page-content.component';\nimport { ThfPageEditLiterals } from './thf-page-edit-literals.interface';\n\nexport const thfPageEditLiteralsDefault = {\n  en: <ThfPageEditLiterals> {\n    cancel: 'Cancel',\n    save: 'Save',\n    saveNew: 'Save and New'\n  },\n  es: <ThfPageEditLiterals> {\n    cancel: 'Cancelar',\n    save: 'Guardar',\n    saveNew: 'Guardar y Nuevo'\n  },\n  pt: <ThfPageEditLiterals> {\n    cancel: 'Cancelar',\n    save: 'Salvar',\n    saveNew: 'Salvar e Novo'\n  }\n};\n\n/**\n * @description\n *\n * O componente **thf-page-edit** Ã© utilizado como container principal para tela de ediÃ§Ã£o ou adiÃ§Ã£o de um\n * registro.\n * Por padrÃ£o possui 3 aÃ§Ãµes, cada aÃ§Ã£o na tela executa uma funÃ§Ã£o no componente que estÃ¡ utilizando o thf-page-edit,\n * sÃ£o elas:\n *  - Cancelar (funÃ§Ã£o: cancel);\n *  - Salvar e Novo (funÃ§Ã£o: saveNew);\n *  - Salvar (funÃ§Ã£o: save);\n *\n * Caso nÃ£o estiver implementado alguma funÃ§Ã£o, listado anteriormente, o mesmo nÃ£o serÃ¡ apresentado.\n *\n * Os botÃµes \"Salvar\" e \"Salvar e Novo\" podem ser habilitados/desabilitados utilizando a propriedade t-disable-submit.\n * Esta propriedade pode ser utilizada para desabilitar os botÃµes caso exista um formulÃ¡rio invÃ¡lido na pÃ¡gina ou alguma\n * regra de negÃ³cio nÃ£o tenha sido atendida.\n */\nexport class ThfPageEditBaseComponent {\n\n  private _literals: ThfPageEditLiterals;\n  private _title: string;\n\n  @ViewChild(ThfPageContentComponent, { static: true }) thfPageContent: ThfPageContentComponent;\n\n  /** Objeto com propriedades do breadcrumb. */\n  @Input('t-breadcrumb') breadcrumb?: ThfBreadcrumb;\n\n  /** Desabilita botÃµes de submissÃ£o (save e saveNew) */\n  @Input('t-disable-submit') disableSubmit?: boolean;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto com as literais usadas no `thf-page-edit`.\n   *\n   * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponÃ­veis:\n   *\n   * ```\n   *  const customLiterals: ThfPageEditLiterals = {\n   *    cancel: 'Voltar',\n   *    save: 'Confirmar',\n   *    saveNew: 'Confirmar e criar um novo'\n   *  };\n   * ```\n   *\n   * Ou passando apenas as literais que deseja customizar:\n   *\n   * ```\n   *  const customLiterals: ThfPageEditLiterals = {\n   *    cancel: 'Cancelar processo'\n   *  };\n   * ```\n   *\n   * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\n   *\n   * ```\n   * <thf-page-edit\n   *   [t-literals]=\"customLiterals\">\n   * </thf-page-edit>\n   * ```\n   *\n   *  > O objeto padrÃ£o de literais serÃ¡ traduzido de acordo com o idioma do browser (pt, en, es).\n   */\n  @Input('t-literals') set literals(value: ThfPageEditLiterals) {\n    if (value instanceof Object && !(value instanceof Array)) {\n      this._literals = {\n        ...thfPageEditLiteralsDefault[thfLocaleDefault],\n        ...thfPageEditLiteralsDefault[browserLanguage()],\n        ...value\n      };\n    } else {\n      this._literals = thfPageEditLiteralsDefault[browserLanguage()];\n    }\n  }\n  get literals() {\n    return this._literals || thfPageEditLiteralsDefault[browserLanguage()];\n  }\n\n  /** TÃ­tulo da pÃ¡gina. */\n  @Input('t-title') set title(title: string) {\n    this._title = title;\n    this.thfPageContent.recalculateHeaderSize();\n  }\n\n  get title() {\n    return this._title;\n  }\n\n}\n","import { Component, ViewContainerRef } from '@angular/core';\n\nimport { ThfPageEditBaseComponent } from './thf-page-edit-base.component';\nimport { callAction, hasAction } from '../thf-page-util/thf-page-util';\n\n/**\n * @docsExtends ThfPageEditBaseComponent\n *\n * @example\n *\n * <example name=\"thf-page-edit-basic\" title=\"Totvs Page Edit Basic\">\n *  <file name=\"sample-thf-page-edit-basic/sample-thf-page-edit-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-edit-basic/sample-thf-page-edit-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-edit-labs\" title=\"Totvs Page Edit Labs\">\n *  <file name=\"sample-thf-page-edit-labs/sample-thf-page-edit-labs.component.html\"> </file>\n *  <file name=\"sample-thf-page-edit-labs/sample-thf-page-edit-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-edit-user\" title=\"Totvs Page Edit - User\">\n *  <file name=\"sample-thf-page-edit-user/sample-thf-page-edit-user.component.html\"> </file>\n *  <file name=\"sample-thf-page-edit-user/sample-thf-page-edit-user.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-page-edit',\n  templateUrl: './thf-page-edit.component.html'\n})\nexport class ThfPageEditComponent extends ThfPageEditBaseComponent {\n  hasAction: Function = hasAction;\n  callAction: Function = callAction;\n\n  private parentContext: ViewContainerRef;\n\n  constructor(viewRef: ViewContainerRef) {\n    super();\n    this.parentContext = viewRef['_view']['component'];\n  }\n\n  getIcon(icon: string): string {\n    if (icon === 'cancel') {\n      return this.isPrimaryAction('cancel') ? 'thf-icon-close' : '';\n    }\n\n    if (icon === 'saveNew') {\n      return this.isPrimaryAction('saveNew') ? 'thf-icon-ok' : '';\n    }\n\n    return '';\n  }\n\n  getType(type: string): string {\n    const isCancelPrimaryAction = type === 'cancel' && this.isPrimaryAction('cancel');\n    const isSaveNewPrimaryAction = type === 'saveNew' && this.isPrimaryAction('saveNew');\n\n    return isCancelPrimaryAction || isSaveNewPrimaryAction ? 'primary' : 'default';\n  }\n\n  hasAnyAction(): boolean {\n    return hasAction('cancel', this.parentContext) || hasAction('saveNew', this.parentContext) || hasAction('save', this.parentContext);\n  }\n\n  hasPageHeader(): boolean {\n    return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));\n  }\n\n  private isPrimaryAction(action: string): boolean {\n    const hasSaveAction = !hasAction('save', this.parentContext);\n\n    if (action === 'saveNew') {\n      return hasSaveAction;\n    }\n\n    if (action === 'cancel') {\n      return !hasAction('saveNew', this.parentContext) && hasSaveAction;\n    }\n\n    return false;\n  }\n\n}\n","import { Input } from '@angular/core';\n\nimport { ThfBreadcrumb } from '../../thf-breadcrumb/thf-breadcrumb.interface';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * O componente **thf-page-header** Ã© responsÃ¡vel pelo tÃ­tulo da pÃ¡gina e container dos botÃµes de aÃ§Ãµes dos componentes\n * thf-page-list e thf-page-base.\n */\nexport class ThfPageHeaderBaseComponent {\n\n  private _breadcrumb: ThfBreadcrumb;\n\n  /** Objeto com propriedades do breadcrumb. */\n\n  @Input('t-breadcrumb') set breadcrumb(value: ThfBreadcrumb) {\n    this._breadcrumb = value;\n  }\n  get breadcrumb(): ThfBreadcrumb {\n    return this._breadcrumb;\n  }\n\n  /** TÃ­tulo da pÃ¡gina. */\n  @Input('t-title') title: string;\n\n}\n","import { Component } from '@angular/core';\n\nimport { ThfPageHeaderBaseComponent } from './thf-page-header-base.component';\n\n/**\n * @docsPrivate\n * @docsExtends ThfPageHeaderBaseComponent\n */\n@Component({\n  selector: 'thf-page-header',\n  templateUrl: './thf-page-header.component.html'\n})\nexport class ThfPageHeaderComponent extends ThfPageHeaderBaseComponent { }\n","import { Input } from '@angular/core';\n\nimport { browserLanguage, thfLocaleDefault } from './../../../utils/util';\n\nimport { ThfBreadcrumb } from '../../thf-breadcrumb/thf-breadcrumb.interface';\nimport { ThfDisclaimerGroup } from '../../thf-disclaimer-group/thf-disclaimer-group.interface';\nimport { ThfPageDefaultBaseComponent } from '../thf-page-default/thf-page-default-base.component';\nimport { ThfPageFilter } from './../thf-page-filter.interface';\nimport { ThfPageListLiterals } from './thf-page-list-literals.interface';\n\nexport const thfPageListLiteralsDefault = {\n  en: <ThfPageListLiterals> {\n    otherActions: 'Other actions'\n  },\n  es: <ThfPageListLiterals> {\n    otherActions: 'Otras acciones'\n  },\n  pt: <ThfPageListLiterals> {\n    otherActions: 'Outras aÃ§Ãµes'\n  }\n};\n\n/**\n * @description\n *\n * O componente `thf-page-list` Ã© utilizado como o container principal para as telas de listagem de dados,\n * podendo ser apresentado como lista ou tabela.\n *\n * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma funÃ§Ã£o que serÃ¡ executada no momento\n * da filtragem. Este comportamento pode ser acionado tanto ao *click* do Ã­cone [thf-icon-search](/guides/icons)\n * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.\n *\n * Para facilitar a manipulaÃ§Ã£o e visualizaÃ§Ã£o dos filtros aplicados, Ã© possÃ­vel tambÃ©m utilizar o componente\n * [`thf-disclaimer-group`](/documentation/thf-disclaimer-group).\n */\nexport abstract class ThfPageListBaseComponent extends ThfPageDefaultBaseComponent {\n\n  private _disclaimerGroup?: ThfDisclaimerGroup;\n  private _literals: ThfPageListLiterals;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto que implementa as propriedades da interface `ThfBreadcrumb`.\n   */\n  @Input('t-breadcrumb') breadcrumb?: ThfBreadcrumb;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto que implementa as propriedades da interface `ThfDisclaimerGroup`.\n   */\n  @Input('t-disclaimer-group') set disclaimerGroup(value: ThfDisclaimerGroup) {\n    if (!value) {\n      value = <any> {};\n    }\n\n    this._disclaimerGroup = value;\n  }\n\n  get disclaimerGroup(): ThfDisclaimerGroup {\n    return this._disclaimerGroup;\n  }\n\n  /**\n   * @description\n   *\n   * Objeto que implementa as propriedades da interface `ThfPageFilter`.\n   */\n  @Input('t-filter') filter: ThfPageFilter;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto com as literais usadas no `thf-page-list`.\n   *\n   * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponÃ­veis:\n   *\n   * ```\n   *  const customLiterals: ThfPageListLiterals = {\n   *    otherActions: 'Mais aÃ§Ãµes'\n   *  };\n   * ```\n   *\n   * Ou passando apenas as literais que deseja customizar:\n   *\n   * ```\n   *  const customLiterals: ThfPageListLiterals = {\n   *    otherActions: 'AÃ§Ãµes da pÃ¡gina'\n   *  };\n   * ```\n   *\n   * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\n   *\n   * ```\n   * <thf-page-list\n   *   [t-literals]=\"customLiterals\">\n   * </thf-page-list>\n   * ```\n   *\n   *  > O objeto padrÃ£o de literais serÃ¡ traduzido de acordo com o idioma do browser (pt, en, es).\n   */\n  @Input('t-literals') set literals(value: ThfPageListLiterals) {\n    if (value instanceof Object && !(value instanceof Array)) {\n      this._literals = {\n        ...thfPageListLiteralsDefault[thfLocaleDefault],\n        ...thfPageListLiteralsDefault[browserLanguage()],\n        ...value\n      };\n    } else {\n      this._literals = thfPageListLiteralsDefault[browserLanguage()];\n    }\n  }\n  get literals() {\n    return this._literals || thfPageListLiteralsDefault[browserLanguage()];\n  }\n\n  protected resizeListener: () => void;\n\n}\n","import {\n  AfterContentInit, Component, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChange, ViewChild, ViewContainerRef\n} from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { browserLanguage, callFunction, isTypeof } from '../../../utils/util';\nimport { ThfPageAction } from '../thf-page-action.interface';\nimport { ThfPageContentComponent } from '../thf-page-content/thf-page-content.component';\n\nimport { ThfPageListBaseComponent } from './thf-page-list-base.component';\n\n/**\n * @docsExtends ThfPageListBaseComponent\n *\n * @example\n *\n * <example name=\"thf-page-list-basic\" title=\"Totvs Page List Basic\">\n *  <file name=\"sample-thf-page-list-basic/sample-thf-page-list-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-list-basic/sample-thf-page-list-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-list-labs\" title=\"Totvs Page List Labs\">\n *  <file name=\"sample-thf-page-list-labs/sample-thf-page-list-labs.component.html\"> </file>\n *  <file name=\"sample-thf-page-list-labs/sample-thf-page-list-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-list-hiring-processes\" title=\"Totvs Page List - Hiring Processes\">\n *  <file name=\"sample-thf-page-list-hiring-processes/sample-thf-page-list-hiring-processes.component.html\"> </file>\n *  <file name=\"sample-thf-page-list-hiring-processes/sample-thf-page-list-hiring-processes.component.ts\"> </file>\n *  <file name=\"sample-thf-page-list-hiring-processes/sample-thf-page-list-hiring-processes.service.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-page-list',\n  templateUrl: './thf-page-list.component.html'\n})\nexport class ThfPageListComponent extends ThfPageListBaseComponent implements AfterContentInit, OnChanges, OnDestroy, OnInit {\n\n  advancedSearch: string;\n  dropdownActions: Array<ThfPageAction>;\n  isMobile: boolean;\n  limitPrimaryActions: number = 3;\n\n  private isRecalculate = true;\n  private maxWidthMobile: number = 480;\n  private parentRef: ViewContainerRef;\n\n  callFunction = callFunction;\n\n  @ViewChild(ThfPageContentComponent, { static: true }) thfPageContent: ThfPageContentComponent;\n\n  constructor(\n    viewRef: ViewContainerRef,\n    public renderer: Renderer2,\n    private router: Router) {\n\n    super();\n    this.parentRef = viewRef['_view']['component'];\n    this.initializeListeners();\n  }\n\n  ngOnInit(): void {\n    this.advancedSearch = this.initFixedLiterals();\n  }\n\n  ngAfterContentInit(): void {\n    this.setIsMobile();\n    this.setDropdownActions();\n  }\n\n  ngOnChanges(changes: {[propName: string]: SimpleChange}) {\n    this.setDropdownActions();\n  }\n\n  ngOnDestroy() {\n    this.removeListeners();\n  }\n\n  actionIsDisabled(action: any) {\n    return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;\n  }\n\n  callAction(item: ThfPageAction): void {\n    if (item.url) {\n      this.router.navigate([item.url]);\n    } else if (item.action) {\n      callFunction(item.action, this.parentRef);\n    }\n  }\n\n  hasPageHeader(): boolean {\n    return  !!(this.title || (this.actions && this.actions.length) || (this.breadcrumb && this.breadcrumb.items.length));\n  }\n\n  private onResize(event: Event): void {\n    const width = (event.target as Window).innerWidth;\n\n    if (width < this.maxWidthMobile) {\n      this.isMobile = true;\n      this.limitPrimaryActions = 2;\n      this.setDropdownActions();\n    } else {\n      this.isMobile = false;\n      this.limitPrimaryActions = 3;\n      this.setDropdownActions();\n    }\n  }\n\n  private setIsMobile(): void {\n    if (window.innerWidth < this.maxWidthMobile) {\n      this.isMobile = true;\n      this.limitPrimaryActions = 2;\n    }\n  }\n\n  setDropdownActions(): void {\n    if (this.actions.length > this.limitPrimaryActions) {\n      this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);\n    }\n  }\n\n  callActionFilter(field: string): void {\n    this.callFunction(this.filter[field], this.parentRef);\n  }\n\n  initFixedLiterals() {\n    const locale = browserLanguage();\n\n    const literal = {\n      pt: {\n        advancedSearch: 'Busca avanÃ§ada'\n      },\n      en: {\n        advancedSearch: 'Advanced search'\n      },\n      es: {\n        advancedSearch: 'BÃºsqueda avanzada'\n      }\n    };\n\n    return literal[locale].advancedSearch;\n  }\n\n  onkeypress(key) {\n    if (key === 13) {\n      this.callActionFilter('action');\n    }\n  }\n\n  changeModel(newModel): void {\n    this.parentRef[this.filter.ngModel] = newModel;\n  }\n\n  // Recebe evento change do disclaimer e recalcula tela\n  onChangeDisclaimerGroup(disclaimers) {\n    if ((disclaimers && disclaimers.length && this.isRecalculate) || (disclaimers.length === 0 && !this.isRecalculate)) {\n      this.thfPageContent.recalculateHeaderSize();\n      this.isRecalculate = !this.isRecalculate;\n    }\n\n    if (this.disclaimerGroup && this.disclaimerGroup.change) {\n      this.disclaimerGroup.change(disclaimers);\n    }\n  }\n\n  private initializeListeners() {\n    this.resizeListener = this.renderer.listen('window', 'resize', (event: MouseEvent) => {\n      this.onResize(event);\n    });\n  }\n\n  private removeListeners() {\n    this.resizeListener();\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfBreadcrumbModule } from '../thf-breadcrumb/thf-breadcrumb.module';\nimport { ThfButtonModule } from '../thf-button/thf-button.module';\nimport { ThfDisclaimerGroupModule } from '../thf-disclaimer-group/thf-disclaimer-group.module';\nimport { ThfDropdownModule } from '../thf-dropdown/thf-dropdown.module';\nimport { ThfFieldModule } from '../thf-field/thf-field.module';\nimport { ThfModalModule } from './../thf-modal/thf-modal.module';\nimport { ThfPageComponent } from './thf-page.component';\nimport { ThfPageContentComponent } from './thf-page-content/thf-page-content.component';\nimport { ThfPageDefaultComponent } from './thf-page-default/thf-page-default.component';\nimport { ThfPageDetailComponent } from './thf-page-detail/thf-page-detail.component';\nimport { ThfPageEditComponent } from './thf-page-edit/thf-page-edit.component';\nimport { ThfPageHeaderComponent } from './thf-page-header/thf-page-header.component';\nimport { ThfPageListComponent } from './thf-page-list/thf-page-list.component';\n\n/**\n * @description\n * MÃ³dulo dos componentes thf-page-default, thf-page-edit, thf-page-list, thf-page-login e thf-page-detail.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    ThfBreadcrumbModule,\n    ThfButtonModule,\n    ThfDisclaimerGroupModule,\n    ThfDropdownModule,\n    ThfFieldModule,\n    ThfModalModule\n  ],\n  declarations: [\n    ThfPageComponent,\n    ThfPageContentComponent,\n    ThfPageDefaultComponent,\n    ThfPageDetailComponent,\n    ThfPageEditComponent,\n    ThfPageHeaderComponent,\n    ThfPageListComponent\n  ],\n  exports: [\n    ThfPageDetailComponent,\n    ThfPageDefaultComponent,\n    ThfPageEditComponent,\n    ThfPageListComponent\n  ]\n})\nexport class ThfPageModule { }\n","import { ElementRef, Input } from '@angular/core';\n\nimport { convertToBoolean } from '../../utils/util';\nimport { THF_CONTROL_POSITIONS } from './../../services/thf-control-position/thf-control-position.constants';\n\nconst THF_POPOVER_DEFAULT_POSITION = 'right';\nconst THF_POPOVER_DEFAULT_TRIGGER = 'click';\nconst THF_POPOVER_TRIGGERS = ['click', 'hover'];\n\n/**\n * @description\n *\n * O componente `thf-popover` Ã© um container pequeno recomendado para incluir vÃ¡rios tipos de conteÃºdo como:\n * grÃ¡ficos, textos, imagens e inputs. Ele abre sobreposto aos outros componentes.\n *\n * Para mostrar apenas pequenos textos recomenda-se o uso da diretiva\n * [**thf-tooltip**](https://thf.totvs.com.br/documentation/thf-tooltip?view=doc).\n *\n * Para conteÃºdos maiores recomenda-se o uso do [**thf-modal**](https://thf.totvs.com.br/documentation/thf-modal?view=doc).\n *\n * Ele contÃ©m um tÃ­tulo e tambÃ©m Ã© possÃ­vel escolher as posiÃ§Ãµes do popover em relaÃ§Ã£o ao componente pai,\n * as posiÃ§Ãµes permitidas sÃ£o: `right`, `right-top`, `right-bottom`, `top`, `top-left`, `top-right`,\n * `left`, `left-top`, `left-bottom`, `bottom`, `bottom-left` e `bottom-right`.\n *\n * TambÃ©m Ã© possÃ­vel escolher entre os dois eventos que podem abrir o *popover*.\n * Os eventos permitidos sÃ£o: `click` e `hover`.\n *\n */\nexport class ThfPopoverBaseComponent {\n\n  // Controla se o popover fica oculto ou visÃ­vel, por padrÃ£o Ã© oculto.\n  isHidden: boolean = true;\n\n  private _hideArrow: boolean = false;\n  private _position?: string = THF_POPOVER_DEFAULT_POSITION;\n  private _trigger?: string = THF_POPOVER_DEFAULT_TRIGGER;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Desabilita a seta do componente *popover*.\n   *\n   * @default `false`\n   */\n  @Input('t-hide-arrow') set hideArrow(value: boolean) {\n    this._hideArrow = convertToBoolean(value);\n  }\n\n  get hideArrow(): boolean {\n    return this._hideArrow;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define a posiÃ§Ã£o que o thf-popover abrirÃ¡ em relaÃ§Ã£o ao componente alvo. Sugere-se que seja\n   * usada a orientaÃ§Ã£o \"right\" (direita), porÃ©m o mesmo Ã© flexÃ­vel e serÃ¡ rotacionado\n   * automaticamente para se adequar a tela, caso necessÃ¡rio.\n   *\n   * PosiÃ§Ãµes vÃ¡lidas:\n   * - `right`: Posiciona o thf-popover no lado direito do componente alvo.\n   * - `right-bottom`: Posiciona o thf-popover no lado direito inferior do componente alvo.\n   * - `right-top`: Posiciona o thf-popover no lado direito superior do componente alvo.\n   * - `bottom`: Posiciona o thf-popover abaixo do componente alvo.\n   * - `bottom-left`: Posiciona o thf-popover abaixo e Ã  esquerda do componente alvo.\n   * - `bottom-right`: Posiciona o thf-popover abaixo e Ã  direita do componente alvo.\n   * - `left`: Posiciona o thf-popover no lado esquerdo do componente alvo.\n   * - `left-top`: Posiciona o thf-popover no lado esquerdo superior do componente alvo.\n   * - `left-bottom`: Posiciona o thf-popover no lado esquerdo inferior do componente alvo.\n   * - `top`: Posiciona o thf-popover acima do componente alvo.\n   * - `top-right`: Posiciona o thf-popover acima e Ã  direita do componente alvo.\n   * - `top-left`: Posiciona o thf-popover acima e Ã  esquerda do componente alvo.\n   *\n   *\n   * @default right\n   */\n  @Input('t-position') set position(value: string) {\n    this._position = THF_CONTROL_POSITIONS.includes(value) ? value : THF_POPOVER_DEFAULT_POSITION;\n  }\n\n  get position(): string {\n    return this._position;\n  }\n\n  /**\n   * @description\n   *\n   * ElementRef do componente de origem responsÃ¡vel por abrir o popover.\n   * Para utilizar o thf-popover deve-se colocar uma variÃ¡vel no componente que vai disparar o evento\n   * de abertura, exemplo:\n   *\n   * ```\n   * <thf-button\n   *   t-label=\"Open Popover\">\n   * </thf-button>\n   *\n   * <thf-popover\n   *   [t-origin]=\"thfButton\"\n   *   [t-title]=\"Totvs Popover\">\n   * </thf-popover>\n   * ```\n   *\n   * TambÃ©m deve-se criar um ViewChild para cada popover, passando como referÃªncia o elemento do\n   * HTML que irÃ¡ disparar o evento. Exemplo:\n   *\n   * ```\n   * @ViewChild(ThfButtonComponent, {read: ElementRef}) thfButton: ThfButtonComponent;\n   * ```\n   */\n  @Input('t-target') target: ElementRef;\n\n  /** TÃ­tulo do popover. */\n  @Input('t-title') title?: string;\n\n  /**\n   * @description\n   *\n   * Define o evento que abrirÃ¡ o thf-popover.\n   *\n   * Valores vÃ¡lidos:\n   *  - `click`: Abre ao clicar no componente alvo.\n   *  - `hover`: Abre ao passar o mouse sobre o componente alvo.\n   *\n   * @default click\n   * @optional\n   */\n  @Input('t-trigger') set trigger(value: string) {\n    this._trigger = THF_POPOVER_TRIGGERS.includes(value) ? value : THF_POPOVER_DEFAULT_TRIGGER;\n  }\n\n  get trigger(): string {\n    return this._trigger;\n  }\n\n  protected clickoutListener: () => void;\n  protected mouseEnterListener: () => void;\n  protected mouseLeaveListener: () => void;\n  protected resizeListener: () => void;\n\n}\n","import { AfterViewInit, Component, ElementRef, OnDestroy, Renderer2, ViewChild } from '@angular/core';\n\nimport { ThfControlPositionService } from './../../services/thf-control-position/thf-control-position.service';\nimport { ThfPopoverBaseComponent } from './thf-popover-base.component';\n\n/**\n *\n * @docsExtends ThfPopoverBaseComponent\n *\n * @example\n *\n * <example name=\"thf-popover-basic\" title=\"Totvs Popover Basic\">\n *   <file name=\"sample-thf-popover-basic/sample-thf-popover-basic.component.html\"> </file>\n *   <file name=\"sample-thf-popover-basic/sample-thf-popover-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-popover-labs\" title=\"Totvs Popover Labs\">\n *   <file name=\"sample-thf-popover-labs/sample-thf-popover-labs.component.html\"> </file>\n *   <file name=\"sample-thf-popover-labs/sample-thf-popover-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-popover-credit-card\" title=\"Totvs Popover - Credit Card\">\n *   <file name=\"sample-thf-popover-credit-card/sample-thf-popover-credit-card.component.html\"> </file>\n *   <file name=\"sample-thf-popover-credit-card/sample-thf-popover-credit-card.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-popover',\n  templateUrl: './thf-popover.component.html',\n  providers: [ ThfControlPositionService ]\n})\nexport class ThfPopoverComponent extends ThfPopoverBaseComponent implements AfterViewInit, OnDestroy {\n\n  arrowDirection = 'left';\n  timeoutResize;\n\n  eventListenerFunction: () => void;\n\n  @ViewChild('popoverElement', {read: ElementRef, static: true }) popoverElement: ElementRef;\n\n  constructor(private renderer: Renderer2, private thfControlPosition: ThfControlPositionService) {\n    super();\n  }\n\n  ngAfterViewInit(): void {\n    this.initEventListenerFunction();\n\n    const popoverOffset = 8;\n    this.thfControlPosition.setElements(this.popoverElement.nativeElement, popoverOffset, this.target);\n\n    this.setRendererListenInit();\n  }\n\n  ngOnDestroy() {\n    this.removeListeners();\n  }\n\n  close(): void {\n    this.isHidden = true;\n  }\n\n  debounceResize() {\n    clearTimeout(this.timeoutResize);\n    this.timeoutResize = setTimeout(() => {\n      this.setPopoverPosition();\n    }, 200);\n  }\n\n  open(): void {\n    this.addScrollEventListener();\n\n    this.isHidden = false;\n    this.setOpacity(0);\n\n    setTimeout(() => {\n      this.thfControlPosition.adjustPosition(this.position);\n      this.arrowDirection = this.thfControlPosition.getArrowDirection();\n      this.setOpacity(1);\n    });\n  }\n\n  setOpacity(value: number): void {\n    this.popoverElement.nativeElement.style.opacity = value;\n  }\n\n  setPopoverPosition() {\n    this.thfControlPosition.adjustPosition(this.position);\n    this.arrowDirection = this.thfControlPosition.getArrowDirection();\n  }\n\n  setRendererListenInit() {\n\n    this.resizeListener = this.renderer.listen('window', 'resize', (event: Event) => {\n      if (!this.isHidden) {\n        this.debounceResize();\n      }\n    });\n\n    if (this.trigger === 'hover') {\n      this.mouseEnterListener = this.renderer.listen(this.target.nativeElement, 'mouseenter', (event: MouseEvent) => {\n        this.open();\n      });\n\n      this.mouseLeaveListener = this.renderer.listen(this.target.nativeElement, 'mouseleave', (event: MouseEvent) => {\n        this.close();\n      });\n    } else {\n      this.clickoutListener = this.renderer.listen('document', 'click', (event: MouseEvent) => {\n        this.togglePopup(event);\n      });\n    }\n  }\n\n  togglePopup(event): void {\n    if (!this.isHidden && !this.popoverElement.nativeElement.contains(event.target) &&\n    !this.target.nativeElement.contains(event.target)) {\n\n      this.close();\n    } else if (this.target.nativeElement.contains(event.target)) {\n\n      this.popoverElement.nativeElement.hidden ? this.open() : this.close();\n    }\n  }\n\n  private addScrollEventListener() {\n    window.addEventListener('scroll', this.eventListenerFunction, true);\n  }\n\n  private initEventListenerFunction() {\n    this.eventListenerFunction = () => {\n        this.setPopoverPosition();\n    };\n  }\n\n  private removeListeners() {\n\n    if (this.clickoutListener) {\n      this.clickoutListener();\n    }\n    if (this.mouseEnterListener) {\n      this.mouseEnterListener();\n    }\n    if (this.mouseLeaveListener) {\n      this.mouseLeaveListener();\n    }\n\n    this.resizeListener();\n\n    window.removeEventListener('scroll', this.eventListenerFunction, true);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThfPopoverComponent } from './thf-popover.component';\n\n/**\n * @description\n * MÃ³dulo do componente thf-popover.\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [ThfPopoverComponent],\n  exports: [ThfPopoverComponent]\n})\nexport class ThfPopoverModule { }\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente para o conjunto de cÃ­rculos que faz a passagem de itens do `thf-slide`.\n */\n@Component({\n  selector: 'thf-slide-circles',\n  templateUrl: './thf-slide-circles.component.html'\n})\nexport class ThfSlideCirclesComponent {\n\n  /** Index do slide atual. */\n  @Input('t-current-slide-index') currentSlideIndex: number;\n\n  /** Itens do slide. */\n  @Input('t-items') items: Array<any>;\n\n  /** Evento emitido ao clicar em um controle. */\n  @Output('t-click') click = new EventEmitter<any>();\n}\n","import { Input } from '@angular/core';\n\nimport { convertToInt } from './../../utils/util';\n\nimport { ThfSlideItem } from './interfaces/thf-slide-item.interface';\n\nconst thfSlideIntervalDefault = 4000;\n\n/**\n * @description\n *\n * Componente de slide para visualizaÃ§Ã£o e controle de elementos de forma cÃ­clica. Exibe um conjunto de imagens ou dados que permitem\n * customizar sua visualizaÃ§Ã£o utilizando a diretiva **[t-slide-content-template](/documentation/thf-slide-content-template)**.\n *\n * #### Boas prÃ¡ticas:\n * - Utilizar imagens no slide, mesmo quando possui conteÃºdo personalizado.\n * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.\n * - Evitar utilizar mais de 5 slides, pois a ideia do componente Ã© destacar apenas informaÃ§Ãµes importantes.\n */\nexport abstract class ThfSlideBaseComponent {\n\n  private _interval: number = thfSlideIntervalDefault;\n  private _height?: number;\n  private _slides: Array<ThfSlideItem | string | any>;\n\n  /**\n   * @optional\n   *\n   * @description\n   * Altura do thf-slide, caso seja slide com template customizado, nÃ£o assume o valor `default`.\n   *\n   * @default `336`\n   */\n  @Input('t-height') set height(value: number) {\n    this._height = convertToInt(value);\n    this.setSlideHeight(this.height);\n  }\n\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides nÃ£o trocam automaticamente.\n   *\n   * @default `4000`\n   */\n  @Input('t-interval') set interval(value: number) {\n    this._interval = convertToInt(value, thfSlideIntervalDefault);\n    this._interval >= 1000 ? this.startInterval() : this.cancelInterval();\n  }\n\n  get interval(): number {\n    return this._interval;\n  }\n\n  /**\n   * @description\n   *\n   * Array de imagens ou dados para o slide, pode ser de trÃªs formas:\n   *\n   * - Array implementando objetos da interface `ThfSlideItem`:\n   * ```\n   * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]\n   * ```\n   * - Array de `strings` com os caminhos das imagens:\n   * ```\n   * ['/assets/image-1', '/assets/image-2' ]\n   * ```\n   * - Array com lista de itens (para utilizar template):\n   * ```\n   * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]\n   * ```\n   *\n   * > As setas de navegaÃ§Ã£o e o controle com cÃ­rculos apenas serÃ£o renderizados caso possua mais de um slide.\n   */\n  @Input('t-slides') set slides(value: Array<ThfSlideItem | string | any>) {\n    this._slides = value;\n    this.setSlideItems(value);\n\n    if (value && value.length) {\n      this.startSlide();\n    }\n  }\n\n  get slides(): Array<ThfSlideItem | string | any> {\n    return this._slides;\n  }\n\n  abstract setSlideHeight(height: number): void;\n\n  protected abstract cancelInterval(): void;\n  protected abstract setSlideItems(value: Array<ThfSlideItem | string | any>): void;\n  protected abstract startSlide(): void;\n  protected abstract startInterval(): void;\n\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @usedBy ThfSlideComponent\n *\n * @description\n *\n * Esta diretiva permite a customizaÃ§Ã£o de um slide.\n *\n * Deve-se utilizar como parÃ¢metro a referÃªncia do item e/ou Ã­ndice, sendo por padrÃ£o o item.\n *  - Item: `item` determina o item do slide corrente.\n *  - Ãndice: `index` determina o Ã­ndice do slide corrente.\n *\n * Esta diretiva pode ser usada de duas formas: explÃ­cita ou *syntax sugar*. Veja a seguir ambos, respectivamente:\n *\n * ```\n * ...\n * <thf-slide\n *   [t-slides]=\"[{ id: 1, name: 'Register', email: 'register@totvs.com' }]\">\n *\n *   <ng-template t-slide-content-template let-item let-code=\"index\">\n *     <div class=\"thf-row\">\n *       <thf-info class=\"thf-md-6\" t-label=\"Code\" [t-value]=\"item.id\"></thf-info>\n *       <thf-info class=\"thf-md-6\" t-label=\"Email\" [t-value]=\"item.email\"></thf-info>\n *     </div>\n *   </ng-template>\n *\n * </thf-slide>\n *\n * ...\n * ```\n *\n * ```\n * ...\n * <thf-slide\n *    [t-slides]=\"[{ id: 1, name: 'Register', email: 'register@totvs.com' }]\">\n *\n *    <div *t-slide-content-template=\"let item, let i=index\" class=\"thf-row\">\n *      <thf-info class=\"thf-md-12\" t-label=\"Email\" [t-value]=\"item.email\"></thf-info>\n *    </div>\n * </thf-slide>\n * ...\n *\n * ```\n */\n@Directive({\n  selector: '[t-slide-content-template]'\n})\nexport class ThfSlideContentTemplateDirective {\n\n  // NecessÃ¡rio manter templateRef para o funcionamento do row template.\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","import { Component, ElementRef, Input, ViewChild } from '@angular/core';\n\nimport { isIEOrEdge } from '../../../utils/util';\n\nimport { ThfSlideContentTemplateDirective } from '../directives/thf-slide-content-template.directive';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente para cada item do thf-slide.\n */\n@Component({\n  selector: 'thf-slide-item',\n  templateUrl: './thf-slide-item.component.html'\n})\nexport class ThfSlideItemComponent {\n\n  @ViewChild('slideItem', { static: true }) itemElement: ElementRef;\n\n  isIEOrEdge: any = isIEOrEdge();\n\n  /** AÃ§Ã£o executada ao clicar em uma imagem */\n  @Input('t-action') action: Function;\n\n  /** Texto alternativo quando a imagem nÃ£o Ã© encontrada */\n  @Input('t-alt') alt: string;\n\n  /** Dados para o template customizado */\n  @Input('t-data') data: Array<any>;\n\n  /** Caminho da imagem */\n  @Input('t-image') image: string;\n\n  /** Altura da imagem */\n  @Input('t-image-height') imageHeight: number;\n\n  /** Template customizado */\n  @Input('t-template') template: ThfSlideContentTemplateDirective;\n\n  /** Link executado ao clicar em uma imagem */\n  @Input('t-link') link: string;\n\n  setLinkType() {\n    if (!this.template && this.link) {\n      return this.link.startsWith('http') ? 'externalLink' : 'internalLink';\n    }\n\n    return 'noLink';\n  }\n\n}\n","import { Component, ContentChild, DoCheck , ElementRef, HostListener, QueryList, ViewChild, ViewChildren } from '@angular/core';\n\nimport { animate, AnimationBuilder, AnimationFactory, AnimationPlayer, keyframes, style } from '@angular/animations';\n\nimport { ThfSlideBaseComponent } from './thf-slide-base.component';\nimport { ThfSlideContentTemplateDirective } from './directives/thf-slide-content-template.directive';\nimport { ThfSlideItem } from './interfaces/thf-slide-item.interface';\nimport { ThfSlideItemComponent } from './thf-slide-item/thf-slide-item.component';\n\nconst thfSlideDefaultHeight = 336;\nconst thfSlideIntervalMin = 1000;\nconst thfSlideMinHeight = 192;\nconst thfSlideTiming = '250ms ease';\n\n/**\n * @docsExtends ThfSlideBaseComponent\n *\n * @example\n * <example name=\"thf-slide-basic\" title=\"Totvs Slide Basic\">\n *   <file name=\"sample-thf-slide-basic/sample-thf-slide-basic.component.html\"> </file>\n *   <file name=\"sample-thf-slide-basic/sample-thf-slide-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-slide-labs\" title=\"Totvs Slide Labs\">\n *   <file name=\"sample-thf-slide-labs/sample-thf-slide-labs.component.html\"> </file>\n *   <file name=\"sample-thf-slide-labs/sample-thf-slide-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-slide-useful-articles\" title=\"Totvs Slide - Useful articles\">\n *   <file name=\"sample-thf-slide-useful-articles/sample-thf-slide-useful-articles.component.html\"> </file>\n *   <file name=\"sample-thf-slide-useful-articles/sample-thf-slide-useful-articles.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-slide-landscapes\" title=\"Totvs Slide - Landscapes\">\n *   <file name=\"sample-thf-slide-landscapes/sample-thf-slide-landscapes.component.html\"> </file>\n *   <file name=\"sample-thf-slide-landscapes/sample-thf-slide-landscapes.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-slide',\n  templateUrl: './thf-slide.component.html',\n})\nexport class ThfSlideComponent extends ThfSlideBaseComponent implements DoCheck {\n\n  private isLoaded: boolean = false;\n  private player: AnimationPlayer;\n  private setInterval: any;\n\n  private get hasElements() {\n    return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;\n  }\n\n  private get isImageSlide() {\n    return !this.slideContentTemplate;\n  }\n\n  private get offset() {\n    return this.currentSlideIndex * this.slideItemWidth;\n  }\n\n  get hasSlides() {\n    return !!this.slides && !!this.slides.length;\n  }\n\n  currentSlideIndex = 0;\n  imageHeight: number;\n  slideItems: Array<ThfSlideItem | any> = [];\n  slideItemWidth: number;\n\n  @ContentChild(ThfSlideContentTemplateDirective, { static: true }) slideContentTemplate: ThfSlideContentTemplateDirective;\n\n  @ViewChild('slide', { static: true }) private slide: ElementRef;\n\n  @ViewChildren(ThfSlideItemComponent) private itemsElements: QueryList<ThfSlideItemComponent>;\n\n  @HostListener('window:resize') onResize() {\n    if (this.slide) {\n      this.setSlideItemWidth();\n      this.goToItem(this.currentSlideIndex);\n    }\n  }\n\n  constructor(private builder: AnimationBuilder) {\n    super();\n  }\n\n  ngDoCheck() {\n\n    if (!this.isLoaded && this.hasElements) {\n\n      this.setSlideItemWidth();\n      this.isLoaded = true;\n\n      if (this.hasSlides) {\n        this.startSlide();\n      }\n    }\n  }\n\n  goToItem(index: number) {\n\n    if (this.interval > thfSlideIntervalMin) {\n      this.startInterval();\n    }\n\n    this.currentSlideIndex = index;\n    this.animate(this.offset);\n  }\n\n  nextControl() {\n\n    if (this.interval > thfSlideIntervalMin) {\n      this.startInterval();\n    }\n\n    this.next();\n  }\n\n  next() {\n    if (this.currentSlideIndex + 1 === this.slideItems.length) {\n      this.currentSlideIndex = 0;\n      this.animate(0);\n      return;\n    }\n    this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;\n    this.animate(this.offset);\n  }\n\n  previous() {\n    if (this.currentSlideIndex === 0) {\n      this.currentSlideIndex = this.slideItems.length - 1;\n      this.animate(this.offset);\n      return;\n    }\n    this.currentSlideIndex = ((this.currentSlideIndex - 1) + this.slideItems.length) % this.slideItems.length;\n    this.animate(this.offset);\n  }\n\n  previousControl() {\n\n    if (this.interval > thfSlideIntervalMin) {\n      this.startInterval();\n    }\n\n    this.previous();\n  }\n\n  setSlideHeight(height: number) {\n    this.setHeight(height);\n  }\n\n  private animate(offset: number) {\n    if (this.hasElements) {\n      const animation: AnimationFactory = this.buildTransitionAnimation(offset);\n\n      this.player = animation.create(this.slide.nativeElement);\n      this.player.play();\n    }\n  }\n\n  private buildTransitionAnimation(offset: number) {\n    return this.builder.build([\n      animate(\n        thfSlideTiming,\n        keyframes([style({ transform: `translateX(-${offset}px)` })])\n      )\n    ]);\n  }\n\n  private createArrayForTemplate(slides: Array<any>) {\n    this.slideItems = [...slides];\n  }\n\n  private createArrayFromSlides(slides: Array<ThfSlideItem | string | any>) {\n    const isStringArray = slides.every(item => typeof item === 'string');\n\n    if (isStringArray) {\n      slides.forEach(element => this.slideItems.push({ image: `${element}` }));\n    } else {\n      this.slideItems = [...<Array<ThfSlideItem>>slides];\n    }\n  }\n\n  private setDefaultHeight(height: number) {\n    if (height && height <= thfSlideMinHeight || !height && this.isImageSlide) {\n      this.slide.nativeElement.style.height = `${thfSlideDefaultHeight}px`;\n      this.imageHeight = thfSlideDefaultHeight;\n    } else {\n      this.imageHeight = undefined;\n    }\n  }\n\n  private setHeight(height: number) {\n    if (height && height > thfSlideMinHeight) {\n      this.slide.nativeElement.style.height = `${height}px`;\n      this.imageHeight = height;\n    } else {\n      this.setDefaultHeight(height);\n    }\n  }\n\n  private setSlideItemWidth() {\n    if (this.hasElements) {\n      this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;\n    }\n  }\n\n  protected cancelInterval() {\n    clearInterval(this.setInterval);\n  }\n\n  protected setSlideItems(slides: Array<ThfSlideItem | string | any>) {\n\n    if (this.hasSlides) {\n      this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);\n    } else {\n      this.slideItems = [];\n      this.cancelInterval();\n    }\n  }\n\n  protected startSlide() {\n\n    this.setSlideHeight(this.height);\n\n    if (this.interval > thfSlideIntervalMin) {\n      this.startInterval();\n    }\n\n    this.currentSlideIndex = 0;\n  }\n\n  protected startInterval() {\n\n    if (this.setInterval) {\n      this.cancelInterval();\n    }\n\n    this.setInterval = this.hasSlides && this.hasElements ? setInterval(() => { this.next(); }, this.interval) : undefined;\n  }\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente para a seta que controla a passagem de itens do `thf-slide`.\n */\n@Component({\n  selector: 'thf-slide-control',\n  templateUrl: './thf-slide-control.component.html'\n})\nexport class ThfSlideControlComponent {\n\n  /** Tipo de controle que aceita os valores: 'previous' e 'next'. */\n  @Input('t-control') control: string;\n\n  /** Evento emitido ao clicar em um controle. */\n  @Output('t-click') click = new EventEmitter<any>();\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfContainerModule } from '../thf-container/thf-container.module';\n\nimport { ThfSlideCirclesComponent } from './thf-slide-circles/thf-slide-circles.component';\nimport { ThfSlideComponent } from './thf-slide.component';\nimport { ThfSlideContentTemplateDirective } from './directives/thf-slide-content-template.directive';\nimport { ThfSlideControlComponent } from './thf-slide-control/thf-slide-control.component';\nimport { ThfSlideItemComponent } from './thf-slide-item/thf-slide-item.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente `thf-slide`.\n *\n * > Para o correto funcionamento do componente `thf-slide`, deve ser importado o mÃ³dulo `BrowserAnimationsModule` no\n * > mÃ³dulo principal da sua aplicaÃ§Ã£o.\n *\n * MÃ³dulo da aplicaÃ§Ã£o:\n * ```\n * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n * import { ThfModule } from '@totvs/thf-ui';\n * ...\n *\n * @NgModule({\n *   imports: [\n *     BrowserModule,\n *     BrowserAnimationsModule,\n *     ...\n *     ThfModule\n *   ],\n *   declarations: [\n *     AppComponent,\n *     ...\n *   ],\n *   providers: [],\n *   bootstrap: [AppComponent]\n * })\n * export class AppModule { }\n * ```\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ThfContainerModule\n  ],\n  declarations: [\n    ThfSlideCirclesComponent,\n    ThfSlideComponent,\n    ThfSlideControlComponent,\n    ThfSlideContentTemplateDirective,\n    ThfSlideItemComponent,\n  ],\n  exports: [\n    ThfSlideComponent,\n    ThfSlideContentTemplateDirective\n  ],\n  providers: [],\n  schemas: []\n})\nexport class ThfSlideModule { }\n","/**\n * @usedBy ThfStepperComponent\n *\n * @description\n *\n * <a id=\"stepperStatus\"></a>\n *\n * *Enums* para os status do `thf-stepper` quando utilizada a propriedade `t-steps`.\n */\nexport enum ThfStepperStatus {\n\n  /** Define o estado do *step* como ativo. */\n  Active = 'active',\n\n  /** Define o estado do *step* como padrÃ£o. */\n  Default = 'default',\n\n  /** Define o estado do *step* como desabilitado. */\n  Disabled = 'disabled',\n\n  /** Define o estado do *step* como concluÃ­do. */\n  Done = 'done',\n\n  /** Define o estado do *step* com erro. */\n  Error = 'error'\n\n}\n","import { AfterContentInit, Component, ElementRef, Input } from '@angular/core';\n\nimport { uuid } from '../../../utils/util';\n\nimport { ThfStepperStatus } from '../enums/thf-stepper-status.enum';\n\n/**\n * @description\n *\n * O componente `thf-step` Ã© utilizado para envolver e renderizar o conteÃºdo de um passo (*step*) do `thf-stepper`, por exemplo:\n *\n * ```\n * <thf-stepper>\n *\n *    <thf-step t-label=\"EndereÃ§o\">\n *\n *        <!-- ConteÃºdo referente ao endereÃ§o -->\n *\n *    </thf-step>\n *\n *    <thf-step t-label=\"Pagamento\">\n *\n *        <!-- ConteÃºdo referente ao pagamento -->\n *\n *    </thf-step>\n *\n *  </thf-stepper>\n * ```\n *\n * A renderizaÃ§Ã£o do conteÃºdo envolvido na tela e o controle dos status sÃ£o feitos automaticamente. No qual, o primeiro\n * `thf-step` encontrado serÃ¡ colocado como ativo, o prÃ³ximo fica com o status *default* e os demais ficam\n * desabilitados (*disabled*).\n *\n * Ao clicar no `thf-step` que estÃ¡ com o status *default*, o que estÃ¡ ativo ficarÃ¡ com o\n * status de concluÃ­do (*done*) e o prÃ³ximo que estava desabilitado ficarÃ¡ com o status *default* e o restante permanecerÃ¡\n * com o status desabilitado.\n *\n * > Ao utilizar o `thf-step`, o componente `thf-stepper` funcionarÃ¡ de forma sequencial, ou seja, nÃ£o serÃ¡ possÃ­vel\n * pular para outro `thf-step` que esteja com o status igual a desabilitado (*disabled*).\n *\n * Acesse a [documentaÃ§Ã£o do `thf-stepper`](/documentation/thf-stepper) para ter mais informaÃ§Ãµes sobre o seu funcionamento\n * e exemplos de uso.\n */\n@Component({\n  selector: 'thf-step',\n  templateUrl: 'thf-step.component.html'\n})\nexport class ThfStepComponent implements AfterContentInit {\n\n  private _status?: ThfStepperStatus = ThfStepperStatus.Disabled;\n\n  // ID do step\n  id?: string = uuid();\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * FunÃ§Ã£o chamada quando o prÃ³ximo *step* for clicado ou quando o mÃ©todo `ThfStepperComponent.next()` for chamado.\n   * Ao retornar `true` define que esse *step* ficarÃ¡ ativo e o atual como concluÃ­do (*done*).\n   *\n   * Ao ser disparada, a mesma receberÃ¡ por parÃ¢metro o `ThfStepComponent` atual.\n   *\n   * O contexto da funÃ§Ã£o que serÃ¡ chamada, serÃ¡ o mesmo que o do `ThfStepComponent`, entÃ£o para poder alterar\n   * para o contexto do componente que o estÃ¡ utilizando, pode ser utilizado a propriedade `bind` do Javascript.\n   * Por exemplo, para a funÃ§Ã£o `validate`:\n   *\n   * ```\n   * <thf-step t-label=\"Step 1\" [t-can-active-next-step]=\"validate.bind(this)\">\n   * ...\n   * </thf-step>\n   * ```\n   */\n  @Input('t-can-active-next-step') canActiveNextStep: Function;\n\n  /** TÃ­tulo que serÃ¡ exibido descrevendo o passo (*step*). */\n  @Input('t-label') label: string;\n\n  // Estado de exibiÃ§Ã£o do `thf-step`.\n  @Input('t-status') set status(status: ThfStepperStatus) {\n    this._status = status;\n\n    this.setDisplayOnActiveOrError();\n  }\n\n  get status() {\n    return this._status;\n  }\n\n  constructor(private elementRef: ElementRef) { }\n\n  ngAfterContentInit() {\n    this.setDisplayOnActiveOrError();\n  }\n\n  protected setDisplayOnActiveOrError() {\n    this.elementRef.nativeElement.style.display =\n      (this.status === ThfStepperStatus.Active || this.status === ThfStepperStatus.Error) ? '' : 'none';\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\nimport { ThfStepperStatus } from '../enums/thf-stepper-status.enum';\n\nconst thfMediumStepSize = 32;\nconst thfLargeStepSize = 48;\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente responsÃ¡vel por exibir os cÃ­rculos dos *steps*.\n */\n@Component({\n  selector: 'thf-stepper-circle',\n  templateUrl: './thf-stepper-circle.component.html'\n})\nexport class ThfStepperCircleComponent {\n\n  // ConteÃºdo que irÃ¡ aparecer no cÃ­rculo do *step*.\n  @Input('t-content') content: any;\n\n  // Define se serÃ£o exibidos Ã­cones no lugar de nÃºmeros nos steps.\n  @Input('t-icons') icons: boolean;\n\n  // Tamanho do *step-circle*.\n  @Input('t-size') size: number;\n\n  // Status do *step*.\n  @Input('t-status') status: string;\n\n  get isActive(): boolean {\n    return this.status === ThfStepperStatus.Active;\n  }\n\n  get isDefault(): boolean {\n    return this.status === ThfStepperStatus.Default;\n  }\n\n  get isDisabled(): boolean {\n    return this.status === ThfStepperStatus.Disabled;\n  }\n\n  get isDone(): boolean {\n    return this.status === ThfStepperStatus.Done;\n  }\n\n  get isError(): boolean {\n    return this.status === ThfStepperStatus.Error;\n  }\n\n  get isLargeStep(): boolean {\n    return this.size >= thfLargeStepSize;\n  }\n\n  get isMediumStep(): boolean {\n    return this.size >= thfMediumStepSize && !this.isLargeStep;\n  }\n\n}\n","/**\n *\n * @usedBy ThfStepperComponent\n *\n * @description\n *\n * <a id=\"stepperOrientation\"></a>\n *\n * *Enums* para definiÃ§Ã£o da orientaÃ§Ã£o do `thf-stepper`.\n */\nexport enum ThfStepperOrientation {\n\n  /** Define a exibiÃ§Ã£o do componente na horizontal. */\n  Horizontal = 'horizontal',\n\n  /** Define a exibiÃ§Ã£o do componente na vertical. */\n  Vertical = 'vertical'\n\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { convertToBoolean } from '../../utils/util';\n\nimport { ThfStepComponent } from './thf-step/thf-step.component';\nimport { ThfStepperItem } from './thf-stepper-item.interface';\nimport { ThfStepperOrientation } from './enums/thf-stepper-orientation.enum';\nimport { ThfStepperStatus } from './enums/thf-stepper-status.enum';\n\nconst thfStepperOrientationDefault = ThfStepperOrientation.Horizontal;\n\n/**\n * @description\n *\n * O `thf-stepper` permite que um processo seja dividido em passos para que o usuÃ¡rio o realize\n * mais facilmente.\n *\n * Existem duas formas de utilizaÃ§Ã£o:\n *\n * 1 - Usando o componente [**thf-step**](/documentation/thf-step) para renderizar e descrever os passos.\n *\n * 2 - AtravÃ©s da propriedade `t-steps` para descrever os passos do processo, sendo responsabilidade do desenvolvedor o controle\n * de renderizaÃ§Ã£o do que serÃ¡ exibido a cada *step* ativo.\n *\n * AtravÃ©s de suas propriedades, Ã© possÃ­vel definir se sua orientaÃ§Ã£o serÃ¡ horizontal ou vertical,\n * alÃ©m da possibilidade de aumentar o tamanho dos *steps*.\n *\n * TambÃ©m Ã© possÃ­vel navegar entre os *steps* atravÃ©s do teclado utilizando a tecla *tab* e, para ativar o *step* em foco basta\n * pressionar a tecla *enter*. AlÃ©m disso, Ã© possÃ­vel ativar a exibiÃ§Ã£o de Ã­cones no lugar de nÃºmeros nos *steps* atravÃ©s da\n * propriedade [`t-step-icons`](/documentation/thf-stepper#stepIconsProperty).\n *\n * #### Utilizando os mÃ©todos do componente:\n *\n * Para acessar os mÃ©todos do componente Ã© necessÃ¡rio ter a referÃªncia do mesmo.\n *\n * Por exemplo, utilizando um [**ViewChild**](https://angular.io/api/core/ViewChild):\n *\n * ```\n * @ViewChild(ThfStepperComponent) thfStepperComponent: ThfStepperComponent;\n * ```\n *\n * E para acessar o mÃ©todo:\n *\n * ```\n * thfStepperComponent.next();\n * ```\n *\n * #### Boas prÃ¡ticas\n *\n * - Evite `labels` extensos que quebram o layout do `thf-stepper`, use `labels` diretos, curtos e intuitivos.\n * - Utilize apenas um `thf-stepper` por pÃ¡gina.\n */\nexport class ThfStepperBaseComponent {\n\n  private _orientation?: ThfStepperOrientation = thfStepperOrientationDefault;\n  private _sequential?: boolean = true;\n  private _step: number = 1;\n  private _steps: Array<ThfStepperItem> = [];\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define a orientaÃ§Ã£o de exibiÃ§Ã£o do `thf-stepper`.\n   *\n   * > Veja os valores vÃ¡lidos no *enum* [ThfStepperOrientation](documentation/thf-stepper#stepperOrientation).\n   *\n   * @default `ThfStepperOrientation.Horizontal`\n   */\n  @Input('t-orientation') set orientation(value: ThfStepperOrientation) {\n    this._orientation = (<any>Object).values(ThfStepperOrientation).includes(value) ? value : thfStepperOrientationDefault;\n  }\n\n  get orientation(): ThfStepperOrientation {\n    return this._orientation;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Controla o passo atual do `thf-stepper`.\n   *\n   * > Ao utilizar esta propriedade e tambÃ©m utilizar o componente [**thf-step**](/documentation/thf-step),\n   * o valor desta propriedade serÃ¡ ignorada permanecendo a definiÃ§Ã£o do [**thf-step**](/documentation/thf-step).\n   *\n   * @default `1`\n   */\n  @Input('t-step') set step(step: number) {\n    if (step >= 1 && step <= this.steps.length) {\n      this._step = step;\n      this._steps[this._step - 1].status = ThfStepperStatus.Active;\n    }\n  }\n\n  get step(): number {\n    return this._step;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Lista dos itens do stepper. Se o valor estiver indefinido ou invÃ¡lido, serÃ¡ inicializado como um array vazio.\n   *\n   * > Ao utilizar esta propriedade e tambÃ©m utilizar o componente [**thf-step**](/documentation/thf-step),\n   * o valor desta propriedade serÃ¡ ignorada permanecendo a definiÃ§Ã£o do [**thf-step**](/documentation/thf-step).\n   */\n  @Input('t-steps') set steps(steps: Array<ThfStepperItem>) {\n    this._steps = Array.isArray(steps) ? steps : [];\n    this._steps.forEach(step => step.status = ThfStepperStatus.Default);\n    this.step = 1;\n  }\n\n  get steps(): Array<ThfStepperItem> {\n    return this._steps;\n  }\n\n  /**\n   *\n   * @optional\n   *\n   * @description\n   *\n   * <a id=\"stepIconsProperty\"></a>\n   *\n   * Habilita a exibiÃ§Ã£o de Ã­cone ao invÃ©s de nÃºmero no centro do cÃ­rculo dos *steps*.\n   *\n   * @default `false`\n   */\n  @Input('t-step-icons') stepIcons: boolean;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define o tamanho dos *steps* em *pixels*, possibilitando um maior destaque.\n   *\n   * O valor informado deve ser entre `24` e `64`.\n   *\n   * > Valores que nÃ£o se enquadrarem a esta regra serÃ£o ignorados, mantendo-se o valor *default*.\n   *\n   * @default `24`\n   */\n  @Input('t-step-size') stepSize: number;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define se o `thf-stepper` serÃ¡ sequencial ou aleatÃ³rio.\n   *\n   * > Ao utilizar o componente [**thf-step**](/documentation/thf-step), o valor desta propriedade sempre serÃ¡ verdadeiro.\n   *\n   * @default `true`\n   */\n  @Input('t-sequential') set sequential(sequential: boolean) {\n    this._sequential = convertToBoolean(sequential);\n  }\n\n  get sequential(): boolean {\n    return this._sequential;\n  }\n\n  /** AÃ§Ã£o que serÃ¡ executada quando o usuÃ¡rio mudar o passo do `thf-stepper`. */\n  @Output('t-change-step') onChangeStep = new EventEmitter<number | ThfStepComponent>();\n\n}\n","import { AfterContentInit, ChangeDetectorRef, Component, ContentChildren, QueryList } from '@angular/core';\n\nimport { ThfStepComponent } from './thf-step/thf-step.component';\nimport { ThfStepperBaseComponent } from './thf-stepper-base.component';\nimport { ThfStepperItem } from './thf-stepper-item.interface';\nimport { ThfStepperStatus } from './enums/thf-stepper-status.enum';\n\n/**\n * @docsExtends ThfStepperBaseComponent\n *\n * @example\n *\n * <example name=\"thf-stepper-basic\" title=\"Totvs Stepper Basic\">\n *  <file name=\"sample-thf-stepper-basic/sample-thf-stepper-basic.component.html\"> </file>\n *  <file name=\"sample-thf-stepper-basic/sample-thf-stepper-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-stepper-labs\" title=\"Totvs Stepper Labs\">\n *  <file name=\"sample-thf-stepper-labs/sample-thf-stepper-labs.component.html\"> </file>\n *  <file name=\"sample-thf-stepper-labs/sample-thf-stepper-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-stepper-sales\" title=\"Totvs Stepper - Sales\">\n *  <file name=\"sample-thf-stepper-sales/sample-thf-stepper-sales.component.html\"> </file>\n *  <file name=\"sample-thf-stepper-sales/sample-thf-stepper-sales.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-stepper',\n  templateUrl: './thf-stepper.component.html'\n})\nexport class ThfStepperComponent extends ThfStepperBaseComponent implements AfterContentInit {\n\n  @ContentChildren(ThfStepComponent) thfSteps: QueryList<ThfStepComponent>;\n\n  private currentActiveStep: ThfStepComponent;\n  private previousActiveStep: ThfStepComponent;\n\n  get currentStepIndex(): number {\n    return this.step - 1;\n  }\n\n  get stepList(): QueryList<ThfStepComponent> | Array<ThfStepperItem> {\n    return this.useThfSteps && this.thfSteps || this.steps;\n  }\n\n  get useThfSteps(): boolean {\n    return !!this.thfSteps.length;\n  }\n\n  constructor(private changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngAfterContentInit() {\n    this.activeFirstStep();\n\n    this.thfSteps.changes.subscribe(() => {\n      this.controlStepsStatus(0, this.thfSteps.first);\n    });\n  }\n\n  /**\n   * Altera o status do *step* para ativo.\n   *\n   * > Este mÃ©todo Ã© valido apenas para as implementaÃ§Ãµes que utilizam o componente [**thf-step**](/documentation/thf-step).\n   *\n   * @param index {number} Ãndice do `thf-step` que se deseja ativar.\n   */\n  active(index: number): void {\n    if (!this.useThfSteps) {\n      return;\n    }\n\n    const stepsArray = this.getThfSteps();\n    const step = stepsArray[index];\n    const isDisabledStep = step.status === ThfStepperStatus.Disabled;\n    const isErrorStep = step.status === ThfStepperStatus.Error;\n\n    if (!isDisabledStep || isErrorStep) {\n      this.changeStep(index, step);\n    }\n\n  }\n\n  /**\n   * Ativa o primeiro *step*.\n   *\n   * > Este mÃ©todo Ã© valido apenas para as implementaÃ§Ãµes que utilizam o componente [**thf-step**](/documentation/thf-step).\n   */\n  first(): void {\n    if (!this.useThfSteps) {\n      return;\n    }\n\n    const firstStep = this.thfSteps.first;\n    const firstStepIndex = 0;\n\n    this.changeStep(firstStepIndex, firstStep);\n  }\n\n  /**\n   * Ativa o prÃ³ximo *step*.\n   *\n   * > Este mÃ©todo Ã© valido apenas para as implementaÃ§Ãµes que utilizam o componente [**thf-step**](/documentation/thf-step).\n   */\n  next(): void {\n    if (!this.useThfSteps) {\n      return;\n    }\n\n    const { steps, stepIndex } = this.getStepsAndIndex(this.currentActiveStep);\n    const nextIndex = stepIndex + 1;\n    const nextStep = steps[nextIndex];\n\n    this.changeStep(nextIndex, nextStep);\n  }\n\n  /**\n   * Ativa o *step* anterior.\n   *\n   * > Este mÃ©todo Ã© valido apenas para as implementaÃ§Ãµes que utilizam o componente [**thf-step**](/documentation/thf-step).\n   */\n  previous(): void {\n    if (!this.useThfSteps) {\n      return;\n    }\n\n    const { steps, stepIndex } = this.getStepsAndIndex(this.currentActiveStep);\n    const previousIndex = stepIndex - 1;\n    const previousStep = steps[previousIndex];\n\n    this.changeStep(previousIndex, previousStep);\n  }\n\n  changeStep(stepIndex: number, step?: ThfStepComponent): void {\n    const isDifferentStep = (!this.currentActiveStep || step.id !== this.currentActiveStep.id);\n\n    if (this.useThfSteps && isDifferentStep && this.allowNextStep(stepIndex)) {\n      this.controlStepsStatus(stepIndex, step);\n\n      this.onChangeStep.emit(step);\n    } else if (!this.useThfSteps && stepIndex !== this.currentStepIndex && this.allowNextStep(stepIndex)) {\n      // if para tratamento do modelo antigo do thf-stepper\n      this.onChangeStep.emit(stepIndex + 1);\n    }\n  }\n\n  onStepActive(step: ThfStepComponent) {\n    this.currentActiveStep = step;\n\n    this.previousActiveStep = this.thfSteps.find(stepChild => stepChild.status === ThfStepperStatus.Active && stepChild.id !== step.id);\n\n    this.setPreviousStepAsDone();\n  }\n\n  trackByFn(step: ThfStepComponent) {\n    return step.id;\n  }\n\n  private activeFirstStep() {\n    const hasStepActive = this.thfSteps.some(thfStep => thfStep.status === ThfStepperStatus.Active);\n\n    if (this.useThfSteps && !hasStepActive) {\n      this.changeStep(0, this.thfSteps.first);\n    }\n  }\n\n  private allowNextStep(nextStepIndex: number): boolean {\n    if (!this.sequential) {\n      return true;\n    }\n\n    if (this.useThfSteps) {\n      return this.isBeforeStep(nextStepIndex) || this.canActiveNextStep(this.currentActiveStep);\n    }\n\n    return this.steps.slice(this.step, nextStepIndex).every(step => step.status === ThfStepperStatus.Done);\n  }\n\n  private canActiveNextStep(currentActiveStep = <any> {}) {\n    if (!currentActiveStep.canActiveNextStep) {\n      return true;\n    }\n\n    const canActiveNextStep = currentActiveStep.canActiveNextStep(currentActiveStep);\n\n    currentActiveStep.status = this.getStepperStatusByCanActive(canActiveNextStep);\n\n    return canActiveNextStep;\n  }\n\n  private controlStepsStatus(stepIndex: number, step: ThfStepComponent): void {\n    if (this.useThfSteps) {\n\n      this.setStepAsActive(step);\n      this.setNextStepAsDefault(step);\n\n      if (this.isBeforeStep(stepIndex)) {\n        this.setFinalSteppersAsDisabled(stepIndex);\n      }\n\n      this.changeDetector.detectChanges();\n    }\n  }\n\n  private getStepperStatusByCanActive(canActiveNextStep): ThfStepperStatus {\n    return canActiveNextStep ? ThfStepperStatus.Done : ThfStepperStatus.Error;\n  }\n\n  private getStepsAndIndex(step: ThfStepComponent = <any> {}): { steps: Array<ThfStepComponent>, stepIndex: number } {\n    const steps = this.getThfSteps();\n    const stepIndex = steps.findIndex(thfStep => thfStep.id === step.id);\n\n    return { steps, stepIndex };\n  }\n\n  private getThfSteps(): Array<ThfStepComponent> {\n    return this.thfSteps.toArray();\n  }\n\n  private isBeforeStep(stepIndex: number): boolean {\n    const currentActiveStepIndex = () => this.getThfSteps().findIndex(step => step.id === this.currentActiveStep.id);\n\n    return !!this.currentActiveStep && currentActiveStepIndex() >= stepIndex;\n  }\n\n  private setFinalSteppersAsDisabled(stepIndex: number): void {\n    this.getThfSteps()\n      .filter((step, index) => step && index >= stepIndex + 2)\n      .forEach(step => step.status = ThfStepperStatus.Disabled);\n  }\n\n  private setStepAsActive(step: ThfStepComponent): void {\n    step.status = ThfStepperStatus.Active;\n  }\n\n  private setNextStepAsDefault(currentStep: ThfStepComponent): void {\n    const { steps, stepIndex } = this.getStepsAndIndex(currentStep);\n    const nextIndex = stepIndex + 1;\n\n    if (nextIndex < this.thfSteps.length) {\n      steps[nextIndex].status = ThfStepperStatus.Default;\n    }\n  }\n\n  private setPreviousStepAsDone(): void {\n    if (this.previousActiveStep) {\n      this.previousActiveStep.status = ThfStepperStatus.Done;\n    }\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente responsÃ¡vel por exibir as legendas dos *steps*.\n */\n@Component({\n  selector: 'thf-stepper-label',\n  templateUrl: './thf-stepper-label.component.html'\n})\n\nexport class ThfStepperLabelComponent {\n\n  // ConteÃºdo da label.\n  @Input('t-content') content: string;\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { browserLanguage, convertToBoolean, isTypeof, thfLocaleDefault } from './../../../utils/util';\n\nimport { ThfStepperOrientation } from '../enums/thf-stepper-orientation.enum';\nimport { ThfStepperStatus } from '../enums/thf-stepper-status.enum';\n\nconst thfStepperStepSizeDefault = 24;\nconst thfStepperStepSizeMax = 64;\nconst thfStepLiteralsDefault = {\n  en: { label: 'Step' },\n  es: { label: 'Paso' },\n  pt: { label: 'Passo' }\n};\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente que representa um *step* contendo as ligaÃ§Ãµes das laterais (`thf-stepper-step-bar`) e a label.\n */\n@Component({\n  selector: 'thf-stepper-step',\n  templateUrl: 'thf-stepper-step.component.html'\n})\nexport class ThfStepperStepComponent {\n\n  private _label: string;\n  private _status: ThfStepperStatus;\n  private _stepIcons?: boolean = false;\n  private _stepSize: number = thfStepperStepSizeDefault;\n\n  readonly literals = {\n    ...thfStepLiteralsDefault[thfLocaleDefault],\n    ...thfStepLiteralsDefault[browserLanguage()]\n  };\n\n  // ConteÃºdo que serÃ¡ repassado para o componente `t-circle-content` atravÃ©s da propriedade `t-content`.\n  @Input('t-circle-content') circleContent: any;\n\n  // Label do *step*.\n  @Input('t-label') set label(value: string) {\n    this._label = isTypeof(value, 'string') ? value : `${this.literals.label} ${this.circleContent}`;\n  }\n\n  get label(): string {\n    return this._label;\n  }\n\n  // Define a orientaÃ§Ã£o de exibiÃ§Ã£o.\n  @Input('t-orientation') orientation: ThfStepperOrientation;\n\n  // Define o estado de exibiÃ§Ã£o.\n  @Input('t-status') set status(value: ThfStepperStatus) {\n    this._status = (value as string) ? value : undefined;\n\n    if (this.status === ThfStepperStatus.Active) {\n      this.activated.emit();\n    }\n  }\n\n  get status(): ThfStepperStatus {\n    return this._status;\n  }\n\n  @Input('t-step-icons') set stepIcons(stepIcons: boolean) {\n    this._stepIcons = convertToBoolean(stepIcons);\n  }\n\n  get stepIcons(): boolean {\n    return this._stepIcons;\n  }\n\n  // Tamanho do `step` em *pixels*, possibilitando um maior destaque.\n  // O valor informado deve ser entre `24` e `64`.\n  @Input('t-step-size') set stepSize(value: number) {\n    this._stepSize = (value >= thfStepperStepSizeDefault && value <= thfStepperStepSizeMax) ? value : thfStepperStepSizeDefault;\n  }\n\n  get stepSize(): number {\n    return this._stepSize;\n  }\n\n  // Evento que serÃ¡ emitido quando o status do *step* estiver ativo (`ThfStepperStatus.Active`).\n  @Output('t-activated') activated = new EventEmitter<any>();\n\n  // Evento que serÃ¡ emitido ao clicar no *step*.\n  @Output('t-click') click = new EventEmitter<any>();\n\n  // Evento que serÃ¡ emitido ao focar no *step* e pressionar a tecla *enter*.\n  @Output('t-enter') enter = new EventEmitter<any>();\n\n  get halfStepSize(): number {\n    return this.stepSize / 2;\n  }\n\n  get isVerticalOrientation(): boolean {\n    return this.orientation === ThfStepperOrientation.Vertical;\n  }\n\n  get marginHorizontalBar(): number {\n    return this.isVerticalOrientation ? undefined : this.halfStepSize;\n  }\n\n  getStatusClass(status: string): string {\n    switch (status) {\n      case ThfStepperStatus.Active:\n        return 'thf-stepper-step-active';\n      case ThfStepperStatus.Disabled:\n        return 'thf-stepper-step-disabled';\n      case ThfStepperStatus.Done:\n        return 'thf-stepper-step-done';\n      case ThfStepperStatus.Error:\n        return 'thf-stepper-step-error';\n      default:\n        return 'thf-stepper-step-default';\n    }\n  }\n\n  onClick(): void {\n    if (this.status !== ThfStepperStatus.Disabled) {\n      this.click.emit();\n    }\n  }\n\n  onEnter(): void {\n    if (this.status !== ThfStepperStatus.Disabled) {\n      this.enter.emit();\n    }\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThfStepComponent } from './thf-step/thf-step.component';\nimport { ThfStepperCircleComponent } from './thf-stepper-circle/thf-stepper-circle.component';\nimport { ThfStepperComponent } from './thf-stepper.component';\nimport { ThfStepperLabelComponent } from './thf-stepper-label/thf-stepper-label.component';\nimport { ThfStepperStepComponent } from './thf-stepper-step/thf-stepper-step.component';\n\n/**\n * @description\n * MÃ³dulo do componente thf-stepper\n */\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    ThfStepComponent,\n    ThfStepperCircleComponent,\n    ThfStepperComponent,\n    ThfStepperLabelComponent,\n    ThfStepperStepComponent\n  ],\n  exports: [\n    ThfStepComponent,\n    ThfStepperComponent\n  ]\n})\nexport class ThfStepperModule { }\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { convertToBoolean } from '../../../utils/util';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente responsÃ¡vel por manipular os botÃµes de aba.\n */\n@Component({\n  selector: 'thf-tab-button',\n  templateUrl: './thf-tab-button.component.html'\n})\nexport class ThfTabButtonComponent implements OnChanges {\n\n  private _active: boolean;\n  private _hide: boolean;\n\n  // Ativa o botÃ£o\n  @Input('t-active') set active(value: boolean) {\n    this._active = value;\n\n    this.emitActivated();\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  // Desabilita o botÃ£o\n  @Input('t-disabled') disabled: boolean;\n\n  // Oculta o botÃ£o\n  @Input('t-hide') set hide(value: boolean) {\n    this._hide = convertToBoolean(value);\n\n    this.setDisplayOnHide();\n  }\n\n  get hide(): boolean {\n    return this._hide;\n  }\n\n  // Identificador do componente\n  @Input('t-id') id: string;\n\n  // RÃ³tulo do botÃ£o\n  @Input('t-label') label: string;\n\n  // Diminui o tamanho do botÃ£o\n  @Input('t-small') small: boolean;\n\n  // FunÃ§Ã£o sera emitida quando a tab ficar ativada\n  @Output('t-activated') activated = new EventEmitter();\n\n  // FunÃ§Ã£o sera emitida quando a tab ficar desabilitada ou escondida\n  @Output('t-change-state') changeState = new EventEmitter();\n\n  // MÃ©todo recebido do usuÃ¡rio para ser disparado quando clicar na aba\n  @Output('t-click') click = new EventEmitter();\n\n  constructor(private elementRef: ElementRef) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ((changes.hide && changes.hide.currentValue) || (changes.disabled && changes.disabled.currentValue)) {\n      this.changeState.emit(this);\n    }\n  }\n\n  onClick() {\n    if (!this.disabled) {\n      this.click.emit(this.id);\n    }\n  }\n\n  private emitActivated() {\n    if (this.active) {\n      this.activated.emit(this);\n    }\n  }\n\n  private setDisplayOnHide() {\n    this.elementRef.nativeElement.style.display = this.hide ? 'none' : '';\n  }\n\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { convertToBoolean, uuid } from '../../../utils/util';\n\n/**\n * @description\n *\n * O componente `thf-tab` renderiza uma aba na qual envolve um conteÃºdo HTML.\n *\n * Com este componente Ã© possÃ­vel atribuir um rÃ³tulo para auxiliar na identificaÃ§Ã£o do conteÃºdo, ativar para que o mesmo seja exibido,\n * desabilitar para impossibilitar o acesso, bem como ocultar para indisponibilizar a aba.\n *\n * > Para controlar a navegaÃ§Ã£o entre diversas abas, utilizar o componente [`thf-tabs`](/documentation/thf-tabs).\n */\nexport abstract class ThfTabBaseComponent {\n\n  private _active?: boolean = false;\n  private _disabled?: boolean = false;\n  private _hide?: boolean = false;\n\n  // ID da aba\n  id?: string = uuid();\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Ativa a aba exibindo seu conteÃºdo.\n   *\n   * > Sugere-se utilizar na aba de conteÃºdo inicial.\n   *\n   * @default `false`\n   */\n  @Input('t-active') set active(active: boolean) {\n    this._active = convertToBoolean(active);\n    this.setDisplayOnActive();\n  }\n\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Desabilita a aba.\n   *\n   * @default `false`\n   */\n  @Input('t-disabled') set disabled(disabled: boolean) {\n    this._disabled = convertToBoolean(disabled);\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Oculta a aba.\n   *\n   * @default `false`\n   */\n  @Input('t-hide') set hide(hide: boolean) {\n    this._hide = convertToBoolean(hide);\n  }\n\n  get hide(): boolean {\n    return this._hide;\n  }\n\n  /** RÃ³tulo da aba. */\n  @Input('t-label') label: string;\n\n  /** MÃ©todo disparado ao clicar na aba. */\n  @Output('t-click') click = new EventEmitter();\n\n  protected abstract setDisplayOnActive();\n\n}\n","import { AfterContentInit, Component, ElementRef } from '@angular/core';\n\nimport { ThfTabBaseComponent } from './thf-tab-base.component';\n\n/**\n * @docsExtends ThfTabBaseComponent\n */\n@Component({\n  selector: 'thf-tab',\n  templateUrl: './thf-tab.component.html'\n})\nexport class ThfTabComponent extends ThfTabBaseComponent implements AfterContentInit {\n\n  constructor(private elementRef: ElementRef) {\n    super();\n  }\n\n  ngAfterContentInit() {\n    this.setDisplayOnActive();\n  }\n\n  protected setDisplayOnActive() {\n    this.elementRef.nativeElement.style.display = this.active ? '' : 'none';\n  }\n\n}\n","import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\n\nimport { ThfPopoverComponent } from '../../thf-popover/thf-popover.component';\nimport { ThfTabComponent } from '../thf-tab/thf-tab.component';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente para agrupamento de componentes `thf-tab-button` que os rendereiza em uma um caixa de diÃ¡logo\n * no formato de lista.\n */\n@Component({\n  selector: 'thf-tab-dropdown',\n  templateUrl: './thf-tab-dropdown.component.html'\n})\nexport class ThfTabDropdownComponent {\n\n  @ViewChild('popover', { static: true }) popover: ThfPopoverComponent;\n  @ViewChild('tabDrop', { read: ElementRef, static: true }) tabDropdown: ElementRef;\n\n  // RÃ³tulo do `thf-tab-button`\n  @Input('t-label') label: string;\n\n  // Diminui o tamanho do botÃ£o\n  @Input('t-small') small: boolean;\n\n  // Lista de abas\n  @Input('t-tabs') tabs: Array<ThfTabComponent> = [];\n\n  // Evento que serÃ¡ emitido ao ativar uma aba\n  @Output('t-activated') activated = new EventEmitter<any>();\n\n  // Evento que serÃ¡ emitido a aba for desabilitada ou ocultada\n  @Output('t-change-state') changeState = new EventEmitter<any>();\n\n  // Evento de click\n  @Output('t-click') click = new EventEmitter<any>();\n\n  getContainerClass() {\n    return this.small ? 'thf-tab-dropdown-container-sm' : 'thf-tab-dropdown-container';\n  }\n\n  togglePopover(): void {\n    this.popover.isHidden ? this.popover.open() : this.popover.close();\n  }\n\n}\n","import { Input } from '@angular/core';\n\nimport { convertToBoolean } from '../../utils/util';\n\n/**\n * @description\n *\n * O componente `thf-tabs` Ã© responsÃ¡vel por agrupar [abas](/documentation/thf-tab) dispostas numa linha horizontal,\n * ideal para facilitar a organizaÃ§Ã£o de conteÃºdos.\n *\n * AtÃ© cinco abas o componente exibe todas normalmente. Contudo, a partir de seis abas, o componente torna visÃ­vel\n * apenas as quatro primeiras, agrupando todas as demais na quinta aba rotulada de **Mais**.\n *\n * > As abas que estiverem agrupadas serÃ£o dispostas numa cascata suspensa que serÃ¡ exibida ao clicar no botÃ£o **Mais**.\n *\n * Ã possÃ­vel realizar a navegaÃ§Ã£o entre as abas atravÃ©s da tecla TAB do teclado.\n * Caso uma aba estiver desabilitada, nÃ£o receberÃ¡ foco de navegaÃ§Ã£o.\n *\n * #### Boas prÃ¡ticas\n *\n * - Evite utilizar uma quantidade excessiva de abas, pois irÃ¡ gerar um *scroll* muito longo no `dropdown`;\n * - Evite `labels` extensos para as `tabs` pois podem quebrar seu *layout*, use `labels` diretos, curtos e intuitivos.\n */\nexport class ThfTabsBaseComponent {\n\n  private _small?: boolean = false;\n\n  /**\n   * @optinal\n   *\n   * @description\n   *\n   * Diminui o tamanho das abas.\n   *\n   * @default `false`\n   */\n  @Input('t-small') set small(value: boolean) {\n    this._small = convertToBoolean(value);\n  }\n\n  get small(): boolean {\n    return this._small;\n  }\n\n}\n","import { ChangeDetectorRef, Component, ContentChildren, QueryList, ViewChild } from '@angular/core';\n\nimport { ThfTabComponent } from './thf-tab/thf-tab.component';\nimport { ThfTabDropdownComponent } from './thf-tab-dropdown/thf-tab-dropdown.component';\nimport { ThfTabsBaseComponent } from './thf-tabs-base.component';\n\nconst thfTabsMaxNumberOfTabs = 5;\n\n/**\n * @docsExtends ThfTabsBaseComponent\n *\n * @example\n *\n * <example name=\"thf-tabs-basic\" title=\"Totvs Tabs Basic\">\n *  <file name=\"sample-thf-tabs-basic/sample-thf-tabs-basic.component.html\"> </file>\n *  <file name=\"sample-thf-tabs-basic/sample-thf-tabs-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-tabs-labs\" title=\"Totvs Tabs Labs\">\n *  <file name=\"sample-thf-tabs-labs/sample-thf-tabs-labs.component.html\"> </file>\n *  <file name=\"sample-thf-tabs-labs/sample-thf-tabs-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-tabs-travel\" title=\"Totvs Tabs - Travel\">\n *  <file name=\"sample-thf-tabs-travel/sample-thf-tabs-travel.component.html\"> </file>\n *  <file name=\"sample-thf-tabs-travel/sample-thf-tabs-travel.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-tabs-business-conf\" title=\"Totvs Tabs - Business Conference\">\n *  <file name=\"sample-thf-tabs-business-conf/sample-thf-tabs-business-conf.component.html\"> </file>\n *  <file name=\"sample-thf-tabs-business-conf/sample-thf-tabs-business-conf.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-tabs',\n  templateUrl: './thf-tabs.component.html'\n})\nexport class ThfTabsComponent extends ThfTabsBaseComponent {\n\n  maxNumberOfTabs = thfTabsMaxNumberOfTabs;\n\n  private previousActiveTab: ThfTabComponent;\n\n  // Tabs utilizados no ng-content\n  @ContentChildren(ThfTabComponent) tabs: QueryList<ThfTabComponent>;\n\n  @ViewChild('tabDropdown', { static: true }) tabDropdown: ThfTabDropdownComponent;\n\n  constructor(private changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  get isShowTabDropdown() {\n    return this.visibleTabs.length > this.maxNumberOfTabs;\n  }\n\n  // tabs que serÃ£o apresentadas na aba \"Mais\"\n  get overflowedTabs() {\n    return this.visibleTabs.filter((_tab, index) => index > (this.maxNumberOfTabs - 2));\n  }\n\n  get visibleTabs() {\n    return this.tabs.filter(tab => !tab.hide);\n  }\n\n  closePopover(): void {\n    const containsPopoverVisible = this.tabDropdown && this.tabDropdown.popover && !this.tabDropdown.popover.isHidden;\n\n    if (containsPopoverVisible) {\n      this.tabDropdown.popover.close();\n    }\n  }\n\n  isVisibleTab(tab) {\n    const visibleTabIndex = this.visibleTabs.findIndex(visibleTab => visibleTab.id === tab.id);\n\n    return (this.visibleTabs.length <= this.maxNumberOfTabs) || (visibleTabIndex < (this.maxNumberOfTabs - 1));\n  }\n\n  // FunÃ§Ã£o disparada quando alguma tab ficar ativa\n  onTabActive(tab) {\n    this.previousActiveTab = this.tabs.find(tabChild => tabChild.active && tabChild.id !== tab.id);\n\n    this.deactivateTab();\n  }\n\n  // funcao serÃ¡ disparada quando mudar o estado do thfTab para desabilitado ou escondido.\n  onTabChangeState(tab: ThfTabComponent) {\n    if (tab.active) {\n      tab.active = false;\n\n      this.activeDistinctTab();\n\n      this.changeDetector.detectChanges();\n    }\n  }\n\n  // selectiona a aba informada por parametro, caso houver click faz a emiÃ§Ã£o do evento.\n  selectedTab(tab: ThfTabComponent) {\n    tab.active = true;\n\n    if (tab.click) {\n      tab.click.emit(tab);\n    }\n\n    this.changeDetector.detectChanges();\n  }\n\n  trackByFn(_i, tab: ThfTabComponent) {\n    return tab.id;\n  }\n\n  // ativa a previousActiveTab ou primeira tab encontrada.\n  private activeDistinctTab() {\n    if (this.previousActiveTab) {\n      this.previousActiveTab.active = true;\n    } else {\n      this.activeFirstTab();\n    }\n  }\n\n  // Ativa a primeira Tab que nÃ£o estiver desabilitada ou escondida.\n  private activeFirstTab() {\n    this.tabs.some(tabChild => {\n      if (!tabChild.disabled && !tabChild.hide) {\n        tabChild.active = true;\n        return true;\n      }\n    });\n  }\n\n  // desativa previousActiveTab e dispara a detecÃ§Ã£o de mudanÃ§a.\n  private deactivateTab() {\n    if (this.previousActiveTab) {\n      this.previousActiveTab.active = false;\n\n      this.changeDetector.detectChanges();\n    }\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ThfPopoverModule } from '../thf-popover/thf-popover.module';\n\nimport { ThfTabButtonComponent } from './thf-tab-button/thf-tab-button.component';\nimport { ThfTabComponent } from './thf-tab/thf-tab.component';\nimport { ThfTabDropdownComponent } from './thf-tab-dropdown/thf-tab-dropdown.component';\nimport { ThfTabsComponent } from './thf-tabs.component';\n\n/**\n * @description\n * MÃ³dulo do componente thf-tabs\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    ThfPopoverModule\n  ],\n  declarations: [\n    ThfTabButtonComponent,\n    ThfTabComponent,\n    ThfTabDropdownComponent,\n    ThfTabsComponent\n  ],\n  entryComponents: [\n    ThfTabButtonComponent,\n    ThfTabDropdownComponent\n  ],\n  exports: [\n    ThfTabComponent,\n    ThfTabsComponent\n  ]\n})\nexport class ThfTabsModule { }\n","import { Component, Input } from '@angular/core';\n\nimport { isTypeof } from '../../../utils/util';\nimport { ThfControlPositionService } from '../../../services/thf-control-position/thf-control-position.service';\n\nimport { ThfToolbarAction } from '../thf-toolbar-action.interface';\n\nconst thfToolbarActionsIconDefault = 'thf-icon-more';\n\n/**\n * @docsPrivate\n *\n * @usedBy ThfToolbarComponent\n *\n * @description\n *\n * O componente `thf-toolbar-actions` tem como objetivo receber uma lista de aÃ§Ãµes e um Ã­cone que podem ser personalizados.\n */\n@Component({\n  selector: 'thf-toolbar-actions',\n  templateUrl: './thf-toolbar-actions.component.html',\n  providers: [ ThfControlPositionService ]\n})\nexport class ThfToolbarActionsComponent {\n\n  private _actionsIcon?: string = thfToolbarActionsIconDefault;\n\n  /** Define uma lista de aÃ§Ãµes. */\n  @Input('t-actions') actions?: Array<ThfToolbarAction>;\n\n  /** Define o Ã­cone das aÃ§Ãµes. */\n  @Input('t-actions-icon') set actionsIcon(icon: string) {\n    this._actionsIcon = isTypeof(icon, 'string') ? icon : thfToolbarActionsIconDefault;\n  }\n\n  get actionsIcon() {\n    return this._actionsIcon;\n  }\n\n}\n","import { Input } from '@angular/core';\n\nimport { convertToInt } from '../../utils/util';\n\nimport { ThfToolbarAction } from './thf-toolbar-action.interface';\nimport { ThfToolbarProfile } from './thf-toolbar-profile/thf-toolbar-profile.interface';\n\n/**\n * @description\n *\n * O componente `thf-toolbar` Ã© um cabeÃ§alho para o tÃ­tulo da aplicaÃ§Ã£o e informaÃ§Ãµes de usuÃ¡rio e notificaÃ§Ãµes quando houver necessidade.\n */\nexport class ThfToolbarBaseComponent {\n\n  private _notificationNumber?: number;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define uma lista de aÃ§Ãµes que serÃ£o exibidas ao clicar no Ã­cone declarado em `t-actions-icon`.\n   */\n  @Input('t-actions') actions?: Array<ThfToolbarAction>;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define um [Ã­cone](/guides/icons) para a propriedade `t-actions`.\n   *\n   * > Caso nÃ£o haja aÃ§Ãµes definidas em `t-actions`, o Ã­cone nÃ£o serÃ¡ exibido.\n   *\n   * @default `thf-icon-more`\n   */\n  @Input('t-actions-icon') actionsIcon?: string;\n\n /** Define o objeto que serÃ¡ o cabeÃ§alho da lista de aÃ§Ãµes com as informaÃ§Ãµes do perfil. */\n  @Input('t-profile') profile?: ThfToolbarProfile;\n\n /** Define uma lista de aÃ§Ãµes que serÃ£o exibidas ao clicar no Ã­cone do perfil. */\n  @Input('t-profile-actions') profileActions?: Array<ThfToolbarAction>;\n\n  /** Se falso, oculta o Ã­cone de notificaÃ§Ãµes. */\n  @Input('t-show-notification') showNotification?: boolean = true;\n\n  /** TÃ­tulo do *toolbar* e aplicaÃ§Ã£o. */\n  @Input('t-title') title: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Lista de aÃ§Ãµes da notificaÃ§Ã£o.\n   */\n  @Input('t-notification-actions') notificationActions?: Array<ThfToolbarAction>;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * NÃºmero de notificaÃ§Ãµes.\n   */\n  @Input('t-notification-number') set notificationNumber(value: number) {\n    this._notificationNumber = convertToInt(value, 0);\n  }\n\n  get notificationNumber(): number {\n    return this._notificationNumber;\n  }\n\n  get isShowProfile() {\n    return this.profile || this.profileActions;\n  }\n}\n","import { Component, OnInit, ViewContainerRef } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n\nimport { ThfToolbarBaseComponent } from './thf-toolbar-base.component';\n\n/**\n * @docsExtends ThfToolbarBaseComponent\n *\n * @example\n *\n * <example name=\"thf-toolbar-basic\" title=\"Totvs Toolbar Basic\">\n *  <file name=\"sample-thf-toolbar-basic/sample-thf-toolbar-basic.component.html\"> </file>\n *  <file name=\"sample-thf-toolbar-basic/sample-thf-toolbar-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-toolbar-labs\" title=\"Totvs Toolbar Labs\">\n *  <file name=\"sample-thf-toolbar-labs/sample-thf-toolbar-labs.component.html\"> </file>\n *  <file name=\"sample-thf-toolbar-labs/sample-thf-toolbar-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-toolbar-logged\" title=\"Totvs Toolbar - Logged\">\n *  <file name=\"sample-thf-toolbar-logged/sample-thf-toolbar-logged.component.html\"> </file>\n *  <file name=\"sample-thf-toolbar-logged/sample-thf-toolbar-logged.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-toolbar',\n  templateUrl: './thf-toolbar.component.html'\n})\nexport class ThfToolbarComponent extends ThfToolbarBaseComponent implements OnInit {\n\n  parentRef: any;\n\n  constructor(private titleService: Title, viewRef: ViewContainerRef) {\n    super();\n    this.parentRef = viewRef['_view']['component'];\n  }\n\n  ngOnInit(): void {\n    this.setTitle(this.title);\n  }\n\n  private setTitle(newTitle: string) {\n    this.titleService.setTitle(newTitle);\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\nimport { ThfControlPositionService } from '../../../services/thf-control-position/thf-control-position.service';\n\nimport { ThfToolbarAction } from '../thf-toolbar-action.interface';\n\n/**\n * @docsPrivate\n *\n * @usedBy ThfToolbarComponent\n *\n * @description\n *\n * O componente `thf-toolbar-notification` tem como objetivo notificar o usuÃ¡rio de novas aÃ§Ãµes da aplicaÃ§Ã£o que necessitam de atenÃ§Ã£o,\n * como por exemplo um alerta de nova mensagem.\n *\n * O mesmo tambÃ©m permite que a cada nova notificaÃ§Ã£o seja incrementado e exibido, ou nÃ£o, este nÃºmero em uma *tag* ao lado do\n * Ã­cone de notificaÃ§Ãµes.\n */\n@Component({\n  selector: 'thf-toolbar-notification',\n  templateUrl: './thf-toolbar-notification.component.html',\n  providers: [ ThfControlPositionService ]\n})\nexport class ThfToolbarNotificationComponent {\n\n  private _notificationNumber?: number = 0;\n\n  /** Define uma lista de aÃ§Ãµes. */\n  @Input('t-notification-actions') notificationActions?: Array<ThfToolbarAction>;\n\n  /** Define o nÃºmero de notificaÃ§Ãµes. */\n  @Input('t-notification-number') set notificationNumber(value: number) {\n    this._notificationNumber = Number.isInteger(value) ? value : 0;\n  }\n\n  get notificationNumber() {\n    return this._notificationNumber;\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\nimport { ThfControlPositionService } from '../../../services/thf-control-position/thf-control-position.service';\n\nimport { ThfToolbarProfile } from './thf-toolbar-profile.interface';\nimport { ThfToolbarAction } from '../thf-toolbar-action.interface';\n\nconst thfToolbarProfileDefaultAvatar = './assets/images/totvs-logo-user.svg';\n\n/**\n * @docsPrivate\n *\n * @docsExtends ThfToolbarProfileComponent\n *\n * @description\n *\n * Componente `thf-toolbar-profile`.\n */\n@Component({\n  selector: 'thf-toolbar-profile',\n  templateUrl: './thf-toolbar-profile.component.html',\n  providers: [ ThfControlPositionService ]\n})\nexport class ThfToolbarProfileComponent {\n\n  /** Objeto que implementa a interface `ThfToolbarProfile`. */\n  @Input('t-profile') profile: ThfToolbarProfile;\n\n  /** Define uma lista de aÃ§Ãµes. */\n  @Input('t-profile-actions') profileActions?: Array<ThfToolbarAction>;\n\n  readonly defaultAvatar = thfToolbarProfileDefaultAvatar;\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ThfAvatarModule } from './../thf-avatar/thf-avatar.module';\nimport { ThfPopupModule } from '../thf-popup/thf-popup.module';\nimport { ThfToolbarActionsComponent } from './thf-toolbar-actions/thf-toolbar-actions.component';\nimport { ThfToolbarComponent } from './thf-toolbar.component';\nimport { ThfToolbarNotificationComponent } from './thf-toolbar-notification/thf-toolbar-notification.component';\nimport { ThfToolbarProfileComponent } from './thf-toolbar-profile/thf-toolbar-profile.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente thf-toolbar\n *\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    ThfAvatarModule,\n    ThfPopupModule\n  ],\n  declarations: [\n    ThfToolbarActionsComponent,\n    ThfToolbarComponent,\n    ThfToolbarNotificationComponent,\n    ThfToolbarProfileComponent\n  ],\n  exports: [\n    ThfToolbarComponent\n  ],\n  providers: [],\n  schemas: []\n})\nexport class ThfToolbarModule { }\n","import { Input, Output, EventEmitter } from '@angular/core';\n\nimport { convertToBoolean, isTypeof } from '../../utils/util';\n\n/**\n *\n * @description\n *\n * O componente `thf-widget` Ã© recomendado para exibiÃ§Ã£o de *dashboards*, podendo ser utilizado\n * para incluir vÃ¡rios tipos de conteÃºdo como: grÃ¡ficos, tabelas, grids e imagens.\n *\n * AlÃ©m da exibiÃ§Ã£o de conteÃºdos, este componente possibilita adicionar aÃ§Ãµes e um link\n * para ajuda, como tambÃ©m possibilita ser utilizado com ou sem sombra.\n *\n * Para controlar sua largura, Ã© possÃ­vel utilizar o [Grid System](/guides/grid-system) para um maior\n * controle de seu redimensionamento, assim possibilitando o tratamento para diferentes resoluÃ§Ãµes.\n */\nexport abstract class ThfWidgetBaseComponent {\n\n  private _background?: string;\n  private _disabled?: boolean = false;\n  private _height?: number;\n  private _help?: string;\n  private _noShadow?: boolean = false;\n  private _primary?: boolean = false;\n  private _primaryLabel?: string;\n  private _title?: string;\n\n  containerHeight?: string = 'auto';\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * AplicaÃ§Ã£o de imagem de fundo.\n   * > Se a imagem escolhida intervir na legibilidade do texto contido no `t-widget`,\n   * pode-se utilizar a propriedade `t-primary` em conjunto para que os textos fiquem na cor branca.\n   *\n   */\n  @Input('t-background') set background(value: string) {\n    this._background = (value && typeof value === 'string') ? value : undefined;\n  }\n\n  get background() {\n    return this._background;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Desabilita todas as aÃ§Ãµes do componente.\n   *\n   * @default `false`\n   */\n  @Input('t-disabled') set disabled(value: boolean) {\n    this._disabled = convertToBoolean(value);\n\n    this.onDisabled.emit(this.disabled);\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define a altura do `thf-widget`.\n   * A altura mÃ­nima para o `thf-widget` depende do que serÃ¡ exibido atravÃ©s das propriedades `t-primary-label`,\n   * `t-setting`, `t-help` e `t-title`.\n   * > Caso nÃ£o seja informado valor, a propriedade irÃ¡ assumir o tamanho do conteÃºdo.\n   */\n  @Input('t-height') set height(value: number) {\n    this._height = parseInt(<any> value, 10);\n    this.setHeight(this.height);\n  }\n\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Link de ajuda\n   */\n  @Input('t-help') set help(value: string) {\n    this._help = isTypeof(value, 'string') ? value : '';\n    this.setHeight(this.height);\n  }\n\n  get help(): string {\n    return this._help;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Desabilita a sombra do `thf-widget`.\n   *\n   * @default `true`\n   */\n  @Input('t-no-shadow') set noShadow(value: boolean) {\n    this._noShadow = <any>value === '' ? true : convertToBoolean(value);\n    this.setHeight(this.height);\n  }\n\n  get noShadow(): boolean {\n    return this._noShadow;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * OpÃ§Ã£o para que o `thf-widget` fique em destaque.\n   *\n   * @default `false`\n   */\n  @Input('t-primary') set primary(value: boolean) {\n    this._primary = <any>value === '' ? true : convertToBoolean(value);\n  }\n\n  get primary(): boolean {\n    return this._primary;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * DescriÃ§Ã£o da primeira aÃ§Ã£o.\n   *\n   * @default `false`\n   */\n  @Input('t-primary-label') set primaryLabel(value: string) {\n    this._primaryLabel = isTypeof(value, 'string') ? value : '';\n    this.setHeight(this.height);\n  }\n\n  get primaryLabel(): string {\n    return this._primaryLabel;\n  }\n\n  /** DescriÃ§Ã£o da segunda aÃ§Ã£o. */\n  @Input('t-secondary-label') secondaryLabel?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * TÃ­tulo do `thf-widget`.\n   *\n   * @default `false`\n   */\n  @Input('t-title') set title(value: string) {\n    this._title = isTypeof(value, 'string') ? value : '';\n    this.setHeight(this.height);\n  }\n\n  get title(): string {\n    return this._title;\n  }\n\n  /** AÃ§Ã£o que serÃ¡ executada quando o usuÃ¡rio clicar sobre a Ã¡rea total do `thf-widget`. */\n  @Output('t-click') click?: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /** FunÃ§Ã£o que serÃ¡ disparada com o valor do `t-disabled` quando esta propriedade for alterada. */\n  @Output('t-on-disabled') onDisabled?: EventEmitter<any> = new EventEmitter<any>();\n\n  /** FunÃ§Ã£o que serÃ¡ chamada na primeira aÃ§Ã£o. */\n  @Output('t-primary-action') primaryAction?: EventEmitter<any> = new EventEmitter<any>();\n\n  /** FunÃ§Ã£o que serÃ¡ chamada na segunda aÃ§Ã£o. */\n  @Output('t-secondary-action') secondaryAction?: EventEmitter<any> = new EventEmitter<any>();\n\n  /** FunÃ§Ã£o chamada ao clicar no Ã­cone de configuraÃ§Ã£o */\n  @Output('t-setting') setting?: EventEmitter<any> = new EventEmitter<any>();\n\n  /** FunÃ§Ã£o que serÃ¡ chamada ao clicar no tÃ­tulo. */\n  @Output('t-title-action') titleAction?: EventEmitter<any> = new EventEmitter<any>();\n\n  abstract setHeight(height: number);\n\n}\n","import { Component, OnInit, ViewContainerRef } from '@angular/core';\n\nimport { ThfWidgetBaseComponent } from './thf-widget-base.component';\n\n/**\n * @docsExtends ThfWidgetBaseComponent\n *\n * @example\n *\n * <example name=\"thf-widget-basic\" title=\"Totvs Widget Basic\">\n *  <file name=\"sample-thf-widget-basic/sample-thf-widget-basic.component.html\"> </file>\n *  <file name=\"sample-thf-widget-basic/sample-thf-widget-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-widget-labs\" title=\"Totvs Widget Labs\">\n *  <file name=\"sample-thf-widget-labs/sample-thf-widget-labs.component.html\"> </file>\n *  <file name=\"sample-thf-widget-labs/sample-thf-widget-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-widget-finance-dashboard\" title=\"Totvs Widget - Finance dashboard\">\n *  <file name=\"sample-thf-widget-finance-dashboard/sample-thf-widget-finance-dashboard.component.html\"> </file>\n *  <file name=\"sample-thf-widget-finance-dashboard/sample-thf-widget-finance-dashboard.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-widget-card\" title=\"Totvs Widget - Card\">\n *  <file name=\"sample-thf-widget-card/sample-thf-widget-card.component.html\"> </file>\n *  <file name=\"sample-thf-widget-card/sample-thf-widget-card.component.ts\"> </file>\n * </example>\n *\n */\n@Component({\n  selector: 'thf-widget',\n  templateUrl: './thf-widget.component.html'\n})\nexport class ThfWidgetComponent extends ThfWidgetBaseComponent implements OnInit {\n\n  get showTitleAction(): boolean {\n    return !!this.titleAction.observers[0];\n  }\n\n  constructor(viewRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this.setHeight(this.height);\n  }\n\n  hasTitleHelpOrSetting(): boolean {\n    return !!this.title || !!this.help || !!this.setting.observers[0];\n  }\n\n  onClick(event: MouseEvent) {\n    if (!this.disabled) {\n      this.click.emit(event);\n    }\n  }\n\n  openHelp(event: MouseEvent) {\n    if (!this.disabled) {\n      event.stopPropagation();\n      window.open(this.help, '_blank');\n    }\n  }\n\n  runPrimaryAction(event: MouseEvent) {\n    if (!this.disabled) {\n      event.stopPropagation();\n      this.primaryAction.emit();\n    }\n  }\n\n  runSecondaryAction(event: MouseEvent) {\n    if (!this.disabled) {\n      event.stopPropagation();\n      this.secondaryAction.emit();\n    }\n  }\n\n  runTitleAction(event: MouseEvent) {\n    if (!this.disabled) {\n      event.stopPropagation();\n      this.titleAction.emit();\n    }\n  }\n\n  setHeight(height: number) {\n    if (height) {\n      let bodyHeight = height;\n      const hasSettingOrHelp = this.setting.observers.length > 0 || this.help;\n      const footerBorder = 1;\n      const footerHeight = 40;\n      const settingHeight = 37;\n      const shadowHeight = 2;\n      const titleHeight = 50;\n\n      if (this.noShadow) {\n        bodyHeight -= shadowHeight;\n      }\n\n      if (hasSettingOrHelp && !this.title) {\n        bodyHeight -= settingHeight;\n      }\n\n      if (this.title) {\n        bodyHeight -= titleHeight;\n      }\n\n      if (this.primaryLabel) {\n        bodyHeight -= footerHeight + footerBorder;\n      }\n\n      this.containerHeight = `${bodyHeight}px`;\n    } else {\n      this.containerHeight = `auto`;\n    }\n  }\n\n  settingOutput(event: MouseEvent) {\n    if (!this.disabled) {\n      event.stopPropagation();\n      this.setting.emit();\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ThfContainerModule } from '../thf-container/index';\nimport { ThfWidgetComponent } from './thf-widget.component';\n\n/**\n * @description\n *\n * MÃ³dulo do componente thf-widget\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    ThfContainerModule\n  ],\n  exports: [\n    ThfWidgetComponent\n  ],\n  declarations: [ThfWidgetComponent]\n})\nexport class ThfWidgetModule { }\n","import { NgModule } from '@angular/core';\n\nimport { ThfAvatarModule } from './thf-avatar/thf-avatar.module';\nimport { ThfBreadcrumbModule } from './thf-breadcrumb/thf-breadcrumb.module';\nimport { ThfButtonModule } from './thf-button/thf-button.module';\nimport { ThfButtonGroupModule } from './thf-button-group/thf-button-group.module';\nimport { ThfCalendarModule } from './thf-calendar/thf-calendar.module';\nimport { ThfChartModule } from './thf-chart/thf-chart.module';\nimport { ThfContainerModule } from './thf-container/thf-container.module';\nimport { ThfDisclaimerGroupModule } from './thf-disclaimer-group/thf-disclaimer-group.module';\nimport { ThfDisclaimerModule } from './thf-disclaimer/thf-disclaimer.module';\nimport { ThfDividerModule } from './thf-divider/thf-divider.module';\nimport { ThfDropdownModule } from './thf-dropdown/thf-dropdown.module';\nimport { ThfDynamicModule } from './thf-dynamic/thf-dynamic.module';\nimport { ThfFieldModule } from './thf-field/thf-field.module';\nimport { ThfGridModule } from './thf-grid/thf-grid.module';\nimport { ThfInfoModule } from './thf-info/thf-info.module';\nimport { ThfListViewModule } from './thf-list-view/thf-list-view.module';\nimport { ThfLoadingModule } from './thf-loading/thf-loading.module';\nimport { ThfMenuModule } from './thf-menu/thf-menu.module';\nimport { ThfMenuPanelModule } from './thf-menu-panel/thf-menu-panel.module';\nimport { ThfModalModule } from './thf-modal/thf-modal.module';\nimport { ThfNavbarModule } from './thf-navbar/thf-navbar.module';\nimport { ThfPageModule } from './thf-page/thf-page.module';\nimport { ThfPopoverModule } from './thf-popover/thf-popover.module';\nimport { ThfPopupModule } from './thf-popup/thf-popup.module';\nimport { ThfSlideModule } from './thf-slide/thf-slide.module';\nimport { ThfStepperModule } from './thf-stepper/thf-stepper.module';\nimport { ThfTableModule } from './thf-table/thf-table.module';\nimport { ThfTabsModule } from './thf-tabs/thf-tabs.module';\nimport { ThfTagModule } from './thf-tag/thf-tag.module';\nimport { ThfToolbarModule } from './thf-toolbar/thf-toolbar.module';\nimport { ThfWidgetModule } from './thf-widget/thf-widget.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    ThfAvatarModule,\n    ThfBreadcrumbModule,\n    ThfButtonModule,\n    ThfButtonGroupModule,\n    ThfCalendarModule,\n    ThfChartModule,\n    ThfContainerModule,\n    ThfDisclaimerGroupModule,\n    ThfDisclaimerModule,\n    ThfDividerModule,\n    ThfDropdownModule,\n    ThfDynamicModule,\n    ThfFieldModule,\n    ThfGridModule,\n    ThfInfoModule,\n    ThfListViewModule,\n    ThfLoadingModule,\n    ThfMenuModule,\n    ThfMenuPanelModule,\n    ThfModalModule,\n    ThfNavbarModule,\n    ThfPageModule,\n    ThfPopoverModule,\n    ThfPopupModule,\n    ThfSlideModule,\n    ThfStepperModule,\n    ThfTableModule,\n    ThfTabsModule,\n    ThfTagModule,\n    ThfToolbarModule,\n    ThfWidgetModule\n  ],\n  exports: [\n    ThfAvatarModule,\n    ThfBreadcrumbModule,\n    ThfButtonModule,\n    ThfButtonGroupModule,\n    ThfCalendarModule,\n    ThfChartModule,\n    ThfContainerModule,\n    ThfDisclaimerGroupModule,\n    ThfDisclaimerModule,\n    ThfDividerModule,\n    ThfDropdownModule,\n    ThfDynamicModule,\n    ThfFieldModule,\n    ThfGridModule,\n    ThfInfoModule,\n    ThfListViewModule,\n    ThfLoadingModule,\n    ThfMenuModule,\n    ThfMenuPanelModule,\n    ThfModalModule,\n    ThfNavbarModule,\n    ThfPageModule,\n    ThfPopoverModule,\n    ThfPopupModule,\n    ThfSlideModule,\n    ThfStepperModule,\n    ThfTableModule,\n    ThfTabsModule,\n    ThfTagModule,\n    ThfToolbarModule,\n    ThfWidgetModule\n  ],\n  providers: [],\n  bootstrap: []\n})\nexport class ThfComponentsModule { }\n","import { NgModule } from '@angular/core';\n\nimport { ThfTooltipModule } from './thf-tooltip/thf-tooltip.module';\n\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    ThfTooltipModule\n  ],\n  exports: [\n    ThfTooltipModule\n  ],\n  providers: [],\n  bootstrap: []\n})\n\nexport class ThfDirectivesModule { }\n","import { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: [],\n  providers: [],\n  bootstrap: []\n})\nexport class ThfGuardsModule { }\n","/**\n * @docsPrivate\n *\n * @usedBy ThfDialogService\n *\n * @description\n * Enums para as aÃ§Ãµes do componente thf-dialog-base.service.\n */\nexport enum ThfDialogType {\n  // Enum para alert\n  Alert,\n  // Enum para confirm\n  Confirm\n}\n","import { ThfDialogAlertOptions, ThfDialogConfirmOptions } from './interfaces/thf-dialog.interface';\nimport { ThfDialogType } from './thf-dialog.enum';\n\n/**\n * @description\n *\n * O thf-dialog Ã© um serviÃ§o para exibiÃ§Ã£o de caixas de diÃ¡logo, Ã© possÃ­vel customiza-los passando alguns parÃ¢metros de acordo com a\n * necessidade do desenvolvedor.\n */\n\nexport abstract class ThfDialogBaseService {\n\n  /** Exibe um diÃ¡logo de confirmaÃ§Ã£o, Ã© possÃ­vel definir aÃ§Ãµes para as opÃ§Ãµes de confirmaÃ§Ã£o e cancelamento. */\n  confirm(confirmOptions: ThfDialogConfirmOptions): void {\n    this.openDialog(ThfDialogType.Confirm, confirmOptions);\n  }\n\n  /** Exibe um diÃ¡logo de alerta. */\n  alert(alertOptions: ThfDialogAlertOptions): void {\n    this.openDialog(ThfDialogType.Alert, alertOptions);\n  }\n\n  // Usado para chamar um diÃ¡logo\n  abstract openDialog(dialogType: ThfDialogType, dialogOptions: (ThfDialogAlertOptions | ThfDialogConfirmOptions)): void;\n}\n","import { Component, ComponentRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { browserLanguage, thfLocaleDefault } from '../../utils/util';\n\nimport { ThfDialogAlertLiterals } from './interfaces/thf-dialog-alert-literals.interface';\nimport { ThfDialogAlertOptions, ThfDialogConfirmOptions } from './interfaces/thf-dialog.interface';\nimport { ThfDialogConfirmLiterals } from './interfaces/thf-dialog-confirm-literals.interface';\nimport { ThfDialogType } from './thf-dialog.enum';\nimport { ThfModalAction } from '../../components/thf-modal/thf-modal-action.interface';\nimport { ThfModalComponent } from '../../components/thf-modal/thf-modal.component';\n\nexport const thfDialogAlertLiteralsDefault = {\n  en: <ThfDialogAlertLiterals> { ok: 'Ok' },\n  es: <ThfDialogAlertLiterals> { ok: 'Ok' },\n  pt: <ThfDialogAlertLiterals> { ok: 'Ok' }\n};\n\nexport const thfDialogConfirmLiteralsDefault = {\n  en: <ThfDialogConfirmLiterals> { cancel: 'Cancel', confirm: 'Confirm' },\n  es: <ThfDialogConfirmLiterals> { cancel: 'Cancelar', confirm: 'Confirmar' },\n  pt: <ThfDialogConfirmLiterals> { cancel: 'Cancelar', confirm: 'Confirmar' }\n};\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente que serve como container do thf-dialog.service\n */\n\n@Component({\n  templateUrl: './thf-dialog.component.html'\n})\nexport class ThfDialogComponent implements OnDestroy, OnInit {\n  // ViewChild para o uso do thf-modal.component\n  @ViewChild(ThfModalComponent, { static: true }) thfModal: ThfModalComponent;\n\n  // Title do thfModal\n  title: string;\n\n  // Message do thfModal\n  message: string;\n\n  // Objeto primary do thfModal\n  primaryAction: ThfModalAction = { label: 'ok', action: () => { } };\n\n  // Objeto secondary do thfModal\n  secondaryAction: ThfModalAction;\n\n  // Literais usadas nos botÃ£o de alerta do thfModal\n  literalsAlert: ThfDialogAlertLiterals;\n\n  // Literais usadas nos botÃµes de confirmaÃ§Ã£o do thfModal\n  literalsConfirm: ThfDialogConfirmLiterals;\n\n  // Atributo para armazenar a referencia do componente criado via serviÃ§o.\n  private componentRef: ComponentRef<ThfDialogComponent>;\n  private closeSubscription: Subscription;\n\n  ngOnDestroy() {\n    this.closeSubscription.unsubscribe();\n  }\n\n  ngOnInit() {\n    this.closeSubscription = this.thfModal.onXClosed.subscribe(close => this.destroy());\n  }\n\n    // Fecha o thfModal\n  close(): void {\n    this.thfModal.close();\n    this.destroy();\n  }\n\n  destroy() {\n    if (this.componentRef) {\n      this.componentRef.destroy();\n    }\n  }\n\n  // Insere os valores recebidos de this.open para o thfModal\n  configDialog(primaryLabel?, primaryAction?, secondaryLabel?, secondaryAction?) {\n\n    this.primaryAction = {\n      label: primaryLabel,\n      action: () => {\n          if (primaryAction) {\n            primaryAction();\n          }\n          this.close();\n      }\n    };\n\n    if (secondaryLabel) {\n      this.secondaryAction = {\n        label: secondaryLabel,\n        action: () => {\n          if (secondaryAction) {\n            secondaryAction();\n          }\n          this.close();\n        }\n      };\n    }\n  }\n\n  // Insere os valores recebidos de thf-dialog.service de acordo com o tipo de diÃ¡lago solicitado\n  open(dialogOptions: (ThfDialogConfirmOptions | ThfDialogAlertOptions),\n       dialogType: ThfDialogType,\n       componentRef?: ComponentRef<ThfDialogComponent>): void {\n\n    this.title = dialogOptions.title;\n    this.message = dialogOptions.message;\n\n    this.componentRef = componentRef;\n\n    this.setDialogLiterals(dialogOptions, dialogType);\n\n    switch (dialogType) {\n      case ThfDialogType.Confirm: {\n        this.configDialog(\n          this.literalsConfirm.confirm, (<ThfDialogConfirmOptions>dialogOptions).confirm,\n          this.literalsConfirm.cancel, (<ThfDialogConfirmOptions>dialogOptions).cancel);\n        break;\n      }\n      case ThfDialogType.Alert: {\n        this.configDialog(this.literalsAlert.ok, (<ThfDialogAlertOptions>dialogOptions).ok);\n        break;\n      }\n    }\n\n    this.thfModal.open();\n  }\n\n  private setDialogLiterals(dialogOptions: ThfDialogConfirmOptions | ThfDialogAlertOptions, dialogType: ThfDialogType) {\n    const alertLiterals = thfDialogAlertLiteralsDefault;\n    const confirmLiterals = thfDialogConfirmLiteralsDefault;\n    const literals = dialogOptions.literals;\n\n    if (dialogType === ThfDialogType.Alert) {\n      this.literalsAlert = {...alertLiterals[thfLocaleDefault], ...alertLiterals[browserLanguage()], ...literals};\n    } else {\n      this.literalsConfirm = {...confirmLiterals[thfLocaleDefault], ...confirmLiterals[browserLanguage()], ...literals};\n    }\n  }\n}\n","import { Injectable, ComponentRef } from '@angular/core';\n\nimport { ThfComponentInjectorService } from './../thf-component-injector/thf-component-injector.service';\nimport { ThfDialogAlertOptions, ThfDialogConfirmOptions } from './interfaces/thf-dialog.interface';\nimport { ThfDialogBaseService } from './thf-dialog-base.service';\nimport { ThfDialogComponent } from './thf-dialog.component';\nimport { ThfDialogType } from './thf-dialog.enum';\n\n/**\n * @docsExtends ThfDialogBaseService\n *\n * @example\n *\n * <example name=\"thf-dialog-basic\" title=\"Totvs Dialog Basic\">\n *  <file name=\"sample-thf-dialog-basic/sample-thf-dialog-basic.component.html\"> </file>\n *  <file name=\"sample-thf-dialog-basic/sample-thf-dialog-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-dialog-labs\" title=\"Totvs Dialog Labs\">\n *  <file name=\"sample-thf-dialog-labs/sample-thf-dialog-labs.component.html\"> </file>\n *  <file name=\"sample-thf-dialog-labs/sample-thf-dialog-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-dialog-cancel-credit-card\" title=\"Totvs Dialog - Cancel Credit Card\">\n *  <file name=\"sample-thf-dialog-cancel-credit-card/sample-thf-dialog-cancel-credit-card.component.html\"> </file>\n *  <file name=\"sample-thf-dialog-cancel-credit-card/sample-thf-dialog-cancel-credit-card.component.ts\"> </file>\n * </example>\n */\n@Injectable()\nexport class ThfDialogService extends ThfDialogBaseService {\n\n  constructor(private thfComponentInjector: ThfComponentInjectorService) {\n    super();\n  }\n\n  openDialog(dialogType: ThfDialogType, dialogOptions: ThfDialogAlertOptions | ThfDialogConfirmOptions): void {\n    const componentRef: ComponentRef<any> = this.thfComponentInjector.createComponentInApplication(ThfDialogComponent);\n    componentRef.changeDetectorRef.detectChanges();\n    componentRef.instance.open(dialogOptions, dialogType, componentRef);\n  }\n}\n","/**\n * @docsPrivate\n *\n * Enums para a orientaÃ§Ã£o da notificaÃ§Ã£o, do componente thf-toaster-base.component.\n */\nexport enum ThfToasterOrientation {\n  /** OrientÃ§Ã£o do componente fica no rodapÃ© */\n  Bottom,\n  /** OrientÃ§Ã£o do componente fica no topo */\n  Top\n}\n","/**\n * @docsPrivate\n *\n * Enums para os tipos de notificaÃ§Ã£o, do componente thf-toaster-base.component.\n */\nexport enum ThfToasterType {\n  /** Enum para informaÃ§Ãµes do tipo \"Erro\" */\n  Error,\n  /** Enum para informaÃ§Ãµes do tipo \"InformaÃ§Ã£o\" */\n  Information,\n  /** Enum para informaÃ§Ãµes do tipo \"Sucesso\" */\n  Success,\n  /** Enum para informaÃ§Ãµes do tipo \"AtenÃ§Ã£o\" */\n  Warning\n}\n","import { ComponentRef } from '@angular/core';\n\nimport { ThfNotification } from './thf-notification.interface';\nimport { ThfToaster } from './thf-toaster/thf-toaster.interface';\nimport { ThfToasterOrientation } from './thf-toaster/thf-toaster-orientation.enum';\nimport { ThfToasterType } from './thf-toaster/thf-toaster-type.enum';\n\n/**\n * @description\n *\n * ServiÃ§o responsÃ¡vel por emitir as notificaÃ§Ãµes em uma pÃ¡gina. SÃ£o disponibilizados os mÃ©todos de:\n *\n * - success,\n * - warning,\n * - error,\n * - information.\n *\n * Cada um destes mÃ©todos recebe como parÃ¢metro o objeto \"ThfNotification\" que contÃ©m os dados da mensagem e o\n * objeto ViewContainerRef que Ã© a representaÃ§Ã£o do container do componente onde serÃ¡ criada a notificaÃ§Ã£o.\n *\n * Estas notificaÃ§Ãµes serÃ£o exibidas durante 10 segundos, apÃ³s este tempo a mesma Ã© removida automaticamente.\n */\nexport abstract class ThfNotificationBaseService {\n\n   // Array responsÃ¡vel por guardar a instÃ¢ncia de thf-toaster's superiores.\n  stackTop: Array<ComponentRef<any>> = [];\n\n  // Array responsÃ¡vel por guardar a instÃ¢ncia de thf-toaster's inferiores.\n  stackBottom: Array<ComponentRef<any>> = [];\n\n  // DuraÃ§Ã£o do toaster ativo.\n  protected durationToaster = 10000;\n\n  /**\n   * Emite uma notificaÃ§Ã£o de sucesso.\n   *\n   * @param notification {ThfNotification | string} Objeto com os dados da notificaÃ§Ã£o ou somente a string com a mensagem da notificaÃ§Ã£o.\n   */\n  public success(notification: ThfNotification | string) {\n    this.createToaster(this.buildToaster(notification, ThfToasterType.Success));\n  }\n\n  /**\n   * Emite uma notificaÃ§Ã£o de atenÃ§Ã£o.\n   *\n   * @param notification {ThfNotification | string} Objeto com os dados da notificaÃ§Ã£o ou somente a string com a mensagem da notificaÃ§Ã£o\n   */\n  public warning(notification: ThfNotification | string) {\n    this.createToaster(this.buildToaster(notification, ThfToasterType.Warning));\n  }\n\n  /**\n   * Emite uma notificaÃ§Ã£o de erro.\n   *\n   * @param notification {ThfNotification | string} Objeto com os dados da notificaÃ§Ã£o ou somente a string com a mensagem da notificaÃ§Ã£o\n   */\n  public error(notification: ThfNotification | string) {\n    this.createToaster(this.buildToaster(notification, ThfToasterType.Error));\n  }\n\n  /**\n   * Emite uma notificaÃ§Ã£o de informaÃ§Ã£o.\n   *\n   * @param notification {ThfNotification | string} Objeto com os dados da notificaÃ§Ã£o ou somente a string com a mensagem da notificaÃ§Ã£o\n   */\n  public information(notification: ThfNotification | string) {\n    this.createToaster(this.buildToaster(notification, ThfToasterType.Information));\n  }\n\n  /**\n   * @docsPrivate\n   *\n   * Cria um objeto do tipo ThfToaster de acordo o tipo.\n   *\n   * @param notification {ThfNotification | string} Objeto ThfNotification com os dados da notificaÃ§Ã£o\n   */\n  private buildToaster(notification: ThfNotification | string, type: ThfToasterType): ThfToaster {\n    let index = 0;\n    let orientation;\n\n    if ((<ThfNotification>notification).orientation === undefined ||\n        (<ThfNotification>notification).orientation === ThfToasterOrientation.Bottom) {\n      index = this.stackBottom.length;\n      orientation = ThfToasterOrientation.Bottom;\n    } else {\n      index = this.stackTop.length;\n      orientation = ThfToasterOrientation.Top;\n    }\n\n    const toaster: ThfToaster = {\n      componentRef: undefined,\n      message: (<ThfNotification>notification).message || <string>notification,\n      type: type,\n      orientation: orientation,\n      action: (<ThfNotification>notification).action,\n      actionLabel: (<ThfNotification>notification).actionLabel,\n      position: index\n    };\n\n    if ((<ThfNotification>notification).action) {\n      toaster.action = (param: any) => {\n        (<ThfNotification>notification).action();\n        this.destroyToaster(param.componentRef);\n      };\n    }\n\n    return toaster;\n  }\n\n  /**\n   * @docsPrivate\n   *\n   * MÃ©todo responsÃ¡vel por criar o thf-toaster.\n   *\n   * @param toaster {ThfToaster} Objeto contendo as informaÃ§Ãµes do toaster.\n   */\n  abstract createToaster(toaster: ThfToaster): void;\n\n  /**\n   * @docsPrivate\n   *\n   * MÃ©todo responsÃ¡vel por destruir o thf-toaster.\n   *\n   * @param toaster {ComponentRef} NÃºmero da posiÃ§Ã£o ou instancia do toaster a ser destruÃ­do.\n   * @param orientation {ThfToasterOrientation} OrientaÃ§Ã£o do ThfToaster: Top ou Bottom\n   */\n  abstract destroyToaster(toaster: ComponentRef<any>): void;\n\n}\n","import { ThfToasterOrientation } from './thf-toaster-orientation.enum';\nimport { ThfToasterType } from './thf-toaster-type.enum';\nimport { ThfToaster } from './thf-toaster.interface';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * O componente thf-toaster foi construÃ­do para exibir notificaÃ§Ãµes para o usuÃ¡rio.\n */\nexport abstract class ThfToasterBaseComponent {\n\n  /** Disponibiliza uma aÃ§Ã£o para a notificaÃ§Ã£o. */\n  action: Function;\n\n  /** Permite alterar o label do botÃ£o quando houver uma aÃ§Ã£o definida. */\n  actionLabel: string;\n\n  /** Mensagem a ser exibida na notificaÃ§Ã£o. */\n  message: string;\n\n  /** OrientaÃ§Ã£o da notificaÃ§Ã£o, a mesma pode ser exibida na parte superior ou inferior da pÃ¡gina. */\n  orientation: ThfToasterOrientation = ThfToasterOrientation.Bottom;\n\n  /** ComponentRef */\n  componentRef: any;\n\n  /** PosiÃ§Ã£o para notificaÃ§Ã£o aparecer na tela. */\n  position: number;\n\n  /** Tipo de notificaÃ§Ã£o. */\n  type: ThfToasterType;\n\n  /** Fecha a notificaÃ§Ã£o. */\n  abstract close(): void;\n\n  /**\n   * Altera a posiÃ§Ã£o da notificaÃ§Ã£o.\n   * @param number value\n   */\n  abstract changePosition(value: number): void;\n\n  /**\n   * Configura o componente thf-toaster de acordo com as definiÃ§Ãµes do usuÃ¡rio.\n   * @param ThfToaster thfToaster\n   * @param ComponentRef comp\n   */\n  abstract configToaster(thfToaster: ThfToaster): void;\n\n}\n","import { ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nimport { ThfToasterBaseComponent } from './thf-toaster-base.component';\nimport { ThfToaster } from './thf-toaster.interface';\nimport { ThfToasterType } from './thf-toaster-type.enum';\nimport { ThfToasterOrientation } from './thf-toaster-orientation.enum';\n\n/**\n * @docsPrivate\n *\n * @docsExtends ThfToasterBaseComponent\n */\n@Component({\n  selector: 'thf-toaster',\n  templateUrl: './thf-toaster.component.html'\n})\nexport class ThfToasterComponent extends ThfToasterBaseComponent {\n\n  /* Ãcone do Toaster */\n  private icon: string;\n  /* Margem do Toaster referÃªnte Ã  sua orientaÃ§Ã£o e posiÃ§Ã£o*/\n  private margin: number = 20;\n  /* Observable para monitorar o Close to Toaster */\n  private observableOnClose = new Subject<any>();\n  /* Mostra ou oculta o Toaster */\n  private showToaster: boolean = true;\n  /* PosiÃ§Ã£o do Toaster*/\n  private toasterPosition: string = 'thf-toaster-bottom';\n  /* Tipo do Toaster */\n  private toasterType: string;\n\n  /* Componente toaster */\n  @ViewChild('toaster', { static: false }) toaster: ElementRef;\n\n  constructor(public changeDetector: ChangeDetectorRef, private elementeRef?: ElementRef) {\n    super();\n  }\n\n  /* Muda a posiÃ§Ã£o do Toaster na tela*/\n  changePosition(position: number): void {\n    this.elementeRef.nativeElement.style.display = 'table';\n\n    this.margin = 6 + (44 * (position)) + position * 6;\n\n    if (this.orientation === ThfToasterOrientation.Top) {\n      this.toaster.nativeElement.style.top = this.margin + 'px';\n    } else {\n      this.toaster.nativeElement.style.bottom = this.margin + 'px';\n    }\n\n  }\n\n  /* Fecha o componente Toaster */\n  close(): void {\n    this.showToaster = false;\n    this.observableOnClose.next(true);\n  }\n\n  /* Configura o Toaster com os atributos passados para ele */\n  configToaster(thfToaster: ThfToaster) {\n    this.type = thfToaster.type;\n    this.message = thfToaster.message;\n    this.orientation = thfToaster.orientation;\n    this.position = thfToaster.position;\n    this.action = thfToaster.action;\n    this.actionLabel = (thfToaster.actionLabel) ? thfToaster.actionLabel : 'Fechar';\n    this.componentRef = thfToaster.componentRef;\n\n    /* Muda a orientaÃ§Ã£o do Toaster */\n    if (this.orientation === ThfToasterOrientation.Top) {\n      this.toasterPosition = 'thf-toaster-top';\n    }\n\n    /* Muda a posiÃ§Ã£o do Toaster */\n    this.changePosition(this.position);\n\n    /* Switch para o tipo de Toaster */\n    switch (this.type) {\n      case ThfToasterType.Error: {\n        this.toasterType = 'thf-toaster-error';\n        this.icon = 'thf-icon-close';\n        break;\n      }\n      case ThfToasterType.Information: {\n        this.toasterType = 'thf-toaster-info';\n        this.icon = 'thf-icon-info';\n        break;\n      }\n      case ThfToasterType.Success: {\n        this.toasterType = 'thf-toaster-success';\n        this.icon = 'thf-icon-ok';\n        break;\n      }\n      case ThfToasterType.Warning: {\n        this.toasterType = 'thf-toaster-warning';\n        this.icon = 'thf-icon-warning';\n        break;\n      }\n    }\n\n    this.changeDetector.detectChanges();\n  }\n\n  getShowToaster() {\n    return this.showToaster;\n  }\n\n  getIcon() {\n    return this.icon;\n  }\n\n  getToasterPosition() {\n    return this.toasterPosition;\n  }\n\n  getToasterType() {\n    return this.toasterType;\n  }\n\n  /* Chama a funÃ§Ã£o passada pelo atributo `action` */\n  thfToasterAction(): void {\n    this.action(this);\n  }\n\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { ThfComponentInjectorService } from './../thf-component-injector/thf-component-injector.service';\nimport { ThfNotificationBaseService } from './thf-notification-base.service';\nimport { ThfToaster } from './thf-toaster/thf-toaster.interface';\nimport { ThfToasterOrientation } from './thf-toaster/thf-toaster-orientation.enum';\nimport { ThfToasterComponent } from './thf-toaster/thf-toaster.component';\n\n/**\n * @docsExtends ThfNotificationBaseService\n *\n * @example\n *\n * <example name=\"thf-notification-basic\" title=\"Totvs Notification Basic\">\n *  <file name=\"sample-thf-notification-basic/sample-thf-notification-basic.component.html\"> </file>\n *  <file name=\"sample-thf-notification-basic/sample-thf-notification-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-notification-labs\" title=\"Totvs Notification Labs\">\n *  <file name=\"sample-thf-notification-labs/sample-thf-notification-labs.component.html\"> </file>\n *  <file name=\"sample-thf-notification-labs/sample-thf-notification-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-notification-sales\" title=\"Totvs Notification - Sales\">\n *  <file name=\"sample-thf-notification-sales/sample-thf-notification-sales.component.html\"> </file>\n *  <file name=\"sample-thf-notification-sales/sample-thf-notification-sales.component.ts\"> </file>\n * </example>\n */\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThfNotificationService extends ThfNotificationBaseService {\n\n  constructor(private thfComponentInjector: ThfComponentInjectorService) {\n    super();\n  }\n\n  createToaster(toaster: ThfToaster): void {\n    const componentRef: ComponentRef<any> = this.thfComponentInjector.createComponentInApplication(ThfToasterComponent);\n\n    toaster.componentRef = componentRef;\n\n    componentRef.changeDetectorRef.detectChanges();\n    componentRef.instance.configToaster(toaster);\n\n    if (toaster.orientation === ThfToasterOrientation.Top) {\n      this.stackTop.push(componentRef);\n    } else {\n      this.stackBottom.push(componentRef);\n    }\n\n    this.observableOnClose(componentRef);\n\n    if (toaster.action === undefined) {\n      setTimeout(() => {\n        this.destroyToaster(componentRef);\n      }, this.durationToaster);\n    }\n  }\n\n  destroyToaster(toaster: any): void {\n    let stack;\n\n    if (toaster.instance.orientation === ThfToasterOrientation.Top) {\n      stack = this.stackTop;\n    } else {\n      stack = this.stackBottom;\n    }\n\n    const index = stack.indexOf(toaster);\n    stack.splice(index, 1);\n\n    this.thfComponentInjector.destroyComponentInApplication(toaster);\n\n    for (let count = 0; count < stack.length; count++) {\n      stack[count].instance.changePosition(count);\n    }\n  }\n\n  private observableOnClose(componentRef: any) {\n    componentRef.instance.observableOnClose.subscribe(() => {\n      this.destroyToaster(componentRef);\n    });\n  }\n\n}\n","import { HttpInterceptor, HttpHandler, HttpRequest, HttpResponse, HttpEvent, HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nconst NO_ERROR_HEADER_PARAM = 'X-Totvs-No-Error';\n\n/**\n * @description\n *\n * O serviÃ§o Totvs Http Interceptor realiza o tratamento de requisiÃ§Ãµes HTTP conforme o padrÃ£o do\n * [**Guia de implementaÃ§Ã£o das APIs TOTVS**](http://tdn.totvs.com/pages/viewpage.action?pageId=484701395) para adaptÃ¡-lo\n * ao modelo do THF.\n *\n * Ao analisar o objeto `_messages` retornado pela requisiÃ§Ã£o, o serviÃ§o exibirÃ¡ notificaÃ§Ãµes com mensagens na tela.\n * Os retornos de erros com cÃ³digos 4xx e 5xx sÃ£o tratados automaticamente, sem a necessidade de incluir o `_messages`.\n *\n * TambÃ©m existe a possibilidade de nÃ£o apresentar a notificaÃ§Ã£o quando houver algum erro com cÃ³digos 4xx e 5xx,\n * utilizando o parÃ¢metro `X-Totvs-No-Error` que foi definido conforme o\n * [**Guia de implementaÃ§Ã£o das APIs TOTVS**](http://tdn.totvs.com/pages/viewpage.action?pageId=484701395) (em CabeÃ§alhos Customizados).\n * O parÃ¢metro `X-Totvs-No-Error` deve ser informado no cabeÃ§alho da requisiÃ§Ã£o com o valor `'true'` para funcionar corretamente,\n * por exemplo:\n *\n * ```\n * ...\n *  const headers = { 'X-Totvs-No-Error': 'true' };\n *\n *  this.http.get(`/customers/1`, { headers: headers });\n * ...\n *\n * ```\n * > ApÃ³s a validaÃ§Ã£o no interceptor, o parÃ¢metro serÃ¡ removido do cabeÃ§alho da requisiÃ§Ã£o.\n *\n * O `Content-Type` deve ser `application/json` e a estrutura de mensagem recebida pelo serviÃ§o deve seguir o\n * [**Guia de implementaÃ§Ã£o das APIs TOTVS**](http://tdn.totvs.com/pages/viewpage.action?pageId=484701395)\n * (em Mensagens de sucesso para coleÃ§Ãµes), exemplo:\n *  - _messages: lista de mensagens de erro ou informativo resultante do serviÃ§o.\n *    - type: success, warning, error, e information;\n *    - code: tÃ­tulo ou cÃ³digo da mensagem;\n *    - message: texto da mensagem;\n *    - detailedMessage: detalhamento do erro ou informativo;\n *\n * Ao importar o mÃ³dulo `ThfModule` na aplicaÃ§Ã£o, o `thf-http-interceptor` Ã© automaticamente configurado sem a necessidade\n * de qualquer configuraÃ§Ã£o extra.\n *\n * Ao realizar requisiÃ§Ãµes utilize o `HttpClient`, conforme exemplo abaixo:\n *\n * ```\n * import { HttpClient } from '@angular/common/http';\n *\n * ...\n *\n * @Injectable()\n * export class UserService {\n *\n *   constructor(private http: HttpClient) { }\n *\n *   getUsers() {\n *     return this.http.get('/api/users');\n *   }\n *\n *   ...\n *\n * }\n * ```\n *\n */\nexport abstract class ThfHttpInterceptorBaseService implements HttpInterceptor {\n\n  notificationTypes = ['success', 'warning', 'error', 'information'];\n\n  constructor(private notification: any, private dialog: any) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const cloneRequest = request.clone();\n\n    request = request.headers.has(NO_ERROR_HEADER_PARAM) ? this.cloneRequestWithoutNoErrorHeaderParam(request) : request;\n\n    return next.handle(request).pipe(tap((response: HttpEvent<any>) => {\n\n      if (response instanceof HttpResponse) {\n\n        this.processResponse(response);\n\n      }\n    }, (error: HttpErrorResponse) => {\n\n      this.processErrorResponse(error, cloneRequest);\n\n    }));\n  }\n\n  processResponse(response: HttpResponse<any>) {\n    if (response.body && response.body._messages) {\n\n      const messages = response.body._messages;\n\n      if (messages instanceof Array) {\n        messages.forEach((message: any) => {\n          this.showNotification(message);\n        });\n      } else {\n        this.showNotification(messages);\n      }\n    }\n  }\n\n  processErrorResponse(response: HttpErrorResponse, request: HttpRequest<any>) {\n    const errorResponse = response.status !== 0\n      ? response.error\n      : { code: 0, message: 'Servidor nÃ£o estÃ¡ respondendo.', detailedMessage: response.message };\n\n    const hasNoErrorParam = this.hasNoErrorParam(request);\n\n    // not show the notification when has NoError parameter on header of request.\n    if (errorResponse && errorResponse.message && !hasNoErrorParam) {\n      this.showNotification({ ...errorResponse, type: 'error' });\n    }\n  }\n\n  private cloneRequestWithoutNoErrorHeaderParam(request: HttpRequest<any>): HttpRequest<any> {\n    return request && request.clone({headers: request.headers.delete(NO_ERROR_HEADER_PARAM)});\n  }\n\n  private hasNoErrorParam(request: HttpRequest<any>): boolean {\n    const noErrorParam = request && request.headers.get(NO_ERROR_HEADER_PARAM);\n\n    return noErrorParam && noErrorParam.toString().toLocaleLowerCase() === 'true';\n  }\n\n  private showNotification(response: any) {\n    const typeNotification = this.notificationTypes.includes(response.type) ? response.type : 'information';\n\n    const notificationAction = this.generateNotificationAction(response);\n\n    this.notification[typeNotification]({\n      message: response.message,\n      actionLabel: notificationAction.label,\n      action: notificationAction.action\n    });\n  }\n\n  private generateNotificationAction(errorResponse: any) {\n\n    let notificationAction;\n    let notificationLabel;\n\n    let notificationMessage = errorResponse.message.concat(` ${errorResponse.detailedMessage}`);\n\n    if (errorResponse.details && errorResponse.details instanceof Array) {\n      errorResponse.details.forEach((detailError: any) => {\n        notificationMessage += `\\n${detailError.message}`;\n      });\n    }\n\n    if (errorResponse.helpUrl && !(errorResponse.detailedMessage || errorResponse.details)) {\n      notificationLabel = 'Ajuda';\n      notificationAction = this.generateUrlHelpFunction(errorResponse.helpUrl);\n\n    } else if (errorResponse.detailedMessage || errorResponse.details) {\n      notificationLabel = 'Detalhes';\n      notificationAction = this.generateDialogDetailFunction(errorResponse, notificationMessage);\n    }\n    return { label: notificationLabel, action: notificationAction };\n  }\n\n  private generateUrlHelpFunction(helpUrl: string) {\n    return () => { window.open(helpUrl, '_blank'); };\n  }\n\n  private generateDialogDetailFunction(errorResponse: any, notificationMessage: string) {\n    return () => {\n      this.dialog.alert({\n        title: errorResponse.code,\n        message: notificationMessage,\n        ok: errorResponse.helpUrl ? this.generateUrlHelpFunction(errorResponse.helpUrl) : undefined\n      });\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { ThfHttpInterceptorBaseService } from './thf-http-interceptor-base.service';\nimport { ThfNotificationService } from './../../services/thf-notification/thf-notification.service';\nimport { ThfDialogService } from './../../services/thf-dialog/thf-dialog.service';\n\n/**\n * @docsExtends ThfHttpInterceptorBaseService\n *\n * @example\n * <example name='thf-http-interceptor-labs' title='Totvs Http Interceptor Labs'>\n *  <file name='sample-thf-http-interceptor-labs.component.ts'> </file>\n *  <file name='sample-thf-http-interceptor-labs.component.html'> </file>\n * </example>\n */\n@Injectable()\nexport class ThfHttpInterceptorService extends ThfHttpInterceptorBaseService {\n  constructor(notification: ThfNotificationService, dialog: ThfDialogService) {\n    super(notification, dialog);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { ThfDialogService } from './../../services/thf-dialog/thf-dialog.service';\nimport { ThfNotificationService } from './../../services/thf-notification/thf-notification.service';\nimport { ThfHttpInterceptorService } from './thf-http-interceptor.service';\n\n@NgModule({\n  providers: [\n    ThfHttpInterceptorService,\n    ThfDialogService,\n    ThfNotificationService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ThfHttpInterceptorService,\n      multi: true\n    }\n  ]\n})\nexport class ThfHttpInterceptorModule { }\n","import { Injectable } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\n/**\n * @docsPrivate\n *\n * ServiÃ§o responsÃ¡vel por efetuar o controle de interaÃ§Ã£o com o serviÃ§o de interceptor `ThfHttpRequestInterceptorService`\n * gerenciando o seu estado.\n */\n@Injectable()\nexport class ThfHttpRequesControltService {\n\n  controlHttpRequest: Subject<number> = new Subject<number>();\n\n  getControlHttpRequest(): Observable<any> {\n    return this.controlHttpRequest.asObservable();\n  }\n\n  send(value: number = 0) {\n    this.controlHttpRequest.next(value);\n  }\n\n}\n","import { ComponentRef, Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\n\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\n\nimport { ThfComponentInjectorService } from '../../services/thf-component-injector/thf-component-injector.service';\nimport { ThfLoadingOverlayComponent } from '../../components/thf-loading/thf-loading-overlay/thf-loading-overlay.component';\n\nimport { ThfHttpRequesControltService } from './thf-http-request-control-service';\n\nconst noCountPendingRequests = 'X-Totvs-No-Count-Pending-Requests';\nconst screenLock = 'X-Totvs-Screen-Lock';\n\n/**\n * @description\n *\n * O serviÃ§o Totvs Http Request Interceptor realiza a contabilizaÃ§Ã£o de requisiÃ§Ãµes pendentes na aplicaÃ§Ã£o.\n *\n * Existe a possibilidade de nÃ£o efetuar a contabilizaÃ§Ã£o das requisiÃ§Ãµes pendentes, utilizando o parÃ¢metro\n * `X-Totvs-No-Count-Pending-Requests`. Para isso deve ser informado no cabeÃ§alho da requisiÃ§Ã£o com o valor `'true'`,\n * por exemplo:\n *\n * ```\n * ...\n *  const headers = { 'X-Totvs-No-Count-Pending-Requests': 'true' };\n *\n *  this.http.get(`/customers/1`, { headers: headers });\n * ...\n *\n * ```\n * Para obter a quantidade de requisiÃ§Ãµes pendentes, deve inscrever-se no mÃ©todo `getCountPendingRequests` do\n * serviÃ§o `ThfHttpRequestInterceptorService`, com isso, ao realizar requisiÃ§Ãµes utilizando `HttpClient`,\n * serÃ¡ retornado a quantidade de requisiÃ§Ãµes pendentes.\n *\n * TambÃ©m existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisiÃ§Ã£o\n * deve-se passar o parÃ¢metro `X-Totvs-Screen-Lock` no cabeÃ§alho da requisiÃ§Ã£o com valor `'true'`.\n *\n * por exemplo:\n *\n * ```\n * ...\n *  const headers = { 'X-Totvs-Screen-Lock': 'true' };\n *\n *  this.http.get(`/customers/1`, { headers: headers });\n * ...\n *\n * ```\n * > ApÃ³s a validaÃ§Ã£o no interceptor, o parÃ¢metro serÃ¡ removido do cabeÃ§alho da requisiÃ§Ã£o.\n *\n * Ao importar o mÃ³dulo `ThfModule` na aplicaÃ§Ã£o, o `thf-http-request-interceptor` Ã© automaticamente configurado sem a necessidade\n * de qualquer configuraÃ§Ã£o extra.\n *\n *\n * Segue abaixo um exemplo de uso:\n *\n * ```\n * import { HttpClient } from '@angular/common/http';\n *\n * ...\n *\n * @Injectable()\n * export class CustomersService {\n *\n *  headers = { 'X-Totvs-No-Count-Pending-Requests': true, 'X-Totvs-Screen-Lock': 'true' }\n *  pendingRequests: number = 0;\n *  subscription: Subscription;\n *\n *  constructor(\n *    private http: HttpClient,\n *    private httpRequestInterceptor: ThfHttpRequestInterceptorService) { }\n *\n *  ngOnDestroy(): void {\n *    this.subscription.unsubscribe();\n *  }\n *\n *  ngOnInit(): void {\n *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {\n *      this.pendingRequests = data;\n *    });\n *  }\n *\n *  getCustomers() {\n *    return this.http.get(`/customers/1`, { headers: headers });\n *  }\n *\n *  ...\n *\n * }\n * ```\n *\n * @example\n * <example name='thf-http-request-interceptor-labs' title='Totvs Http Request Interceptor Labs'>\n *  <file name='sample-thf-http-request-interceptor-labs.component.ts'> </file>\n *  <file name='sample-thf-http-request-interceptor-labs.component.html'> </file>\n * </example>\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThfHttpRequestInterceptorService implements HttpInterceptor {\n\n  private loadingOverlayComponent: ComponentRef<ThfLoadingOverlayComponent> = undefined;\n\n  private pendingRequests: number = 0;\n  private overlayRequests: number = 0;\n\n  constructor(\n    private controlHttpRequest: ThfHttpRequesControltService,\n    private thfComponentInjector: ThfComponentInjectorService) {  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler) {\n\n    const requestClone = request.clone();\n\n    request = this.requestCloneWithoutHeaderParam([noCountPendingRequests, screenLock], request);\n\n    this.setCountPendingRequests(true, requestClone);\n    this.setCountOverlayRequests(true, requestClone);\n\n    return next.handle(request).pipe(\n      tap((response: HttpEvent<any>) => {\n        if (response instanceof HttpResponse) {\n          this.setCountPendingRequests(false, requestClone);\n          this.setCountOverlayRequests(false, requestClone);\n        }\n      }),\n      catchError(error => {\n        this.setCountPendingRequests(false, requestClone);\n        this.setCountOverlayRequests(false, requestClone);\n\n        return throwError(error);\n      })\n    );\n  }\n\n  getCountPendingRequests(): Observable<any> {\n    return this.controlHttpRequest.getControlHttpRequest();\n  }\n\n  private buildLoading() {\n    if (!this.loadingOverlayComponent) {\n      this.loadingOverlayComponent = this.thfComponentInjector.createComponentInApplication(ThfLoadingOverlayComponent);\n      this.loadingOverlayComponent.instance.screenLock = true;\n      this.loadingOverlayComponent.instance.changeDetector.detectChanges();\n    }\n  }\n\n  private destroyLoading() {\n    if (this.loadingOverlayComponent) {\n      this.thfComponentInjector.destroyComponentInApplication(this.loadingOverlayComponent);\n      this.loadingOverlayComponent = undefined;\n    }\n  }\n\n  private requestCloneWithoutHeaderParam(headersParams: Array<string>, request: HttpRequest<any>): HttpRequest<any> {\n    let isRequestClone = false;\n\n    headersParams.forEach(headerParam => {\n      if (request.headers.has(headerParam)) {\n        request.headers.delete(headerParam);\n        isRequestClone = true;\n      }\n\n    });\n\n    return isRequestClone ? request.clone({headers: request.headers}) : request;\n  }\n\n  private setCountPendingRequests(isIncrement: boolean, request: HttpRequest<any>) {\n\n    const hasCountPendingRequestHeaderParam = request.headers.has(noCountPendingRequests);\n    const headerParam = request.headers.get(noCountPendingRequests);\n\n    if (hasCountPendingRequestHeaderParam && (headerParam.toString().toLowerCase() === 'true' ) ) {\n      return;\n    }\n\n    this.pendingRequests += isIncrement ? 1 : -1;\n    this.controlHttpRequest.send(this.pendingRequests);\n\n  }\n\n  private setCountOverlayRequests(isIncrement: boolean, request: HttpRequest<any>) {\n    const hasOverlayRequestHeaderParam = request.headers.has(screenLock);\n\n    if (hasOverlayRequestHeaderParam) {\n      const headerParam = request.headers.get(screenLock);\n\n      if (headerParam.toString().toLowerCase() === 'false') {\n        return;\n      }\n\n      this.overlayRequests += isIncrement ? 1 : -1;\n      this.overlayRequests > 0 ? this.buildLoading() : this.destroyLoading();\n    }\n  }\n\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\n\nimport { ThfComponentInjectorService } from '../../services/thf-component-injector/thf-component-injector.service';\nimport { ThfHttpRequesControltService } from './thf-http-request-control-service';\nimport { ThfHttpRequestInterceptorService } from './thf-http-request-interceptor.service';\n\nimport { ThfLoadingComponent } from '../../components/thf-loading/thf-loading.component';\nimport { ThfLoadingOverlayComponent } from '../../components/thf-loading/thf-loading-overlay/thf-loading-overlay.component';\n\n@NgModule({\n  providers: [\n    ThfHttpRequesControltService,\n    ThfHttpRequestInterceptorService,\n    ThfComponentInjectorService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ThfHttpRequestInterceptorService,\n      multi: true\n    }\n  ],\n  entryComponents: [ThfLoadingOverlayComponent, ThfLoadingComponent]\n})\nexport class ThfHttpRequestModule { }\n","import { NgModule } from '@angular/core';\n\nimport { ThfHttpInterceptorModule } from './thf-http-interceptor/thf-http-interceptor.module';\nimport { ThfHttpRequestModule } from './thf-http-request/thf-http-request.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    ThfHttpInterceptorModule,\n    ThfHttpRequestModule\n  ],\n  exports: [\n    ThfHttpInterceptorModule,\n    ThfHttpRequestModule\n  ],\n  providers: [],\n  bootstrap: []\n})\nexport class ThfInterceptorsModule { }\n","import { NgModule } from '@angular/core';\n\nimport { ThfTimeModule } from '../pipes/thf-time/thf-time.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    ThfTimeModule\n  ],\n  exports: [\n    ThfTimeModule\n  ],\n  providers: [],\n  bootstrap: []\n})\nexport class ThfPipesModule { }\n","import { NgModule } from '@angular/core';\n\nimport { ThfColorPaletteService } from './thf-color-palette.service';\n\n/**\n * @description\n *\n * MÃ³dulo do serviÃ§o `thf-color-palette`.\n */\n@NgModule({\n  providers: [\n    ThfColorPaletteService\n  ],\n  bootstrap: []\n})\nexport class ThfColorPaletteModule { }\n","import { NgModule } from '@angular/core';\n\nimport { ThfComponentInjectorService } from './thf-component-injector.service';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: [],\n  providers: [\n    ThfComponentInjectorService\n  ],\n  bootstrap: []\n})\nexport class ThfComponentInjectorModule { }\n","import { NgModule } from '@angular/core';\n\nimport { ThfControlPositionService } from './thf-control-position.service';\n\n/**\n * @description\n *\n * MÃ³dulo do serviÃ§o thf-control-position.\n */\n@NgModule({\n  providers: [\n    ThfControlPositionService\n  ]\n})\nexport class ThfControlPositionModule { }\n","import { NgModule } from '@angular/core';\n\nimport { ThfDateService } from './thf-date.service';\n\n/**\n * @description\n *\n * MÃ³dulo do serviÃ§o `thf-date`.\n */\n@NgModule({\n  providers: [\n    ThfDateService\n  ],\n  bootstrap: []\n})\nexport class ThfDateTimeModule { }\n","import { NgModule } from '@angular/core';\n\nimport { ThfModalModule } from '../../components/thf-modal/thf-modal.module';\nimport { ThfDialogComponent } from './thf-dialog.component';\nimport { ThfDialogService } from './thf-dialog.service';\n\n@NgModule({\n  declarations: [\n    ThfDialogComponent\n  ],\n  imports: [\n    ThfModalModule\n  ],\n  exports: [\n    ThfDialogComponent\n  ],\n  entryComponents: [\n    ThfDialogComponent\n  ],\n  providers: [\n    ThfDialogService\n  ]\n})\nexport class ThfDialogModule { }\n","import { PipeTransform } from '@angular/core';\n\n/**\n * @description\n *\n * O pipe thf-i18n Ã© responsÃ¡vel por tratar literais parÃ¢metrizadas, dando mais flexibilidade as literais de traduÃ§Ã£o.\n * O nÃºmero de parÃ¢metros inseridos nas literais deve coincidir com a quantia de parÃ¢metros passados por parÃ¢metro,\n * os parÃ¢metros serÃ£o substituidos de acordo com a ordem informada.\n *\n * Para inserir um parÃ¢metro em uma literal, o mesmo deverÃ¡ ser inserido entre chaves dentro da literal e posicionado\n * de acordo como deve ser exibido apÃ³s a sua transformaÃ§Ã£o.\n *\n * ```\n * const i18nPT = {\n *   pagination: 'PÃ¡gina {1} de {2} pÃ¡ginas.',\n *   totalPages: 'Total de {totalPages} encontradas.'\n * };\n * ```\n *\n * Ã possÃ­vel passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem\n * informada na literal.\n *\n * ```\n * {{ i18nPT.pagination | thfI18n:[1,10] }}\n * {{ i18nPT.totalPages | thfI18n:10 }}\n * ```\n */\nexport class ThfI18nBasePipe implements PipeTransform {\n\n  transform(value: string, args: any): string {\n    if (!value) {\n      return '';\n    }\n\n    if (!(args instanceof Array)) {\n      args = [args];\n    }\n\n    for (const arg of args) {\n      value = value.replace(/(\\{\\w*\\})+/,  arg);\n    }\n\n    return value;\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { ThfI18nBasePipe } from './thf-i18n-base.pipe';\n\n/**\n * @docsExtends ThfI18nBasePipe\n *\n * @example\n * <example name='thf-i18n-pipe-labs' title='Totvs i18n Pipe Labs' >\n *  <file name='sample-thf-i18n-pipe-labs.component.html'> </file>\n *  <file name='sample-thf-i18n-pipe-labs.component.ts'> </file>\n *  <file name='sample-thf-i18n-pipe.component.html'> </file>\n *  <file name='sample-thf-i18n-pipe.component.ts'> </file>\n * </example>\n */\n@Pipe({\n  name: 'thfI18n'\n})\nexport class ThfI18nPipe extends ThfI18nBasePipe implements PipeTransform { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ThfToasterComponent } from './thf-toaster/thf-toaster.component';\n\n@NgModule({\n  declarations: [\n    ThfToasterComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n  ],\n  entryComponents: [\n    ThfToasterComponent\n  ],\n  providers: [],\n  bootstrap: []\n})\nexport class ThfNotificationModule { }\n","import { NgModule } from '@angular/core';\n\nimport { ThfColorPaletteModule } from './thf-color-palette/thf-color-palette.module';\nimport { ThfComponentInjectorModule } from './thf-component-injector/thf-component-injector.module';\nimport { ThfControlPositionModule } from './thf-control-position/thf-control-position.module';\nimport { ThfDateTimeModule } from './thf-date/thf-date.module';\nimport { ThfDialogModule } from './thf-dialog/thf-dialog.module';\nimport { ThfI18nPipe } from './thf-i18n/thf-i18n.pipe';\nimport { ThfLanguageModule } from './thf-language/thf-language.module';\nimport { ThfNotificationModule } from './thf-notification/thf-notification.module' ;\n\n@NgModule({\n  declarations: [\n    ThfI18nPipe\n  ],\n  imports: [\n    ThfColorPaletteModule,\n    ThfComponentInjectorModule,\n    ThfControlPositionModule,\n    ThfDateTimeModule,\n    ThfDialogModule,\n    ThfLanguageModule,\n    ThfNotificationModule\n  ],\n  exports: [\n    ThfColorPaletteModule,\n    ThfComponentInjectorModule,\n    ThfControlPositionModule,\n    ThfDateTimeModule,\n    ThfDialogModule,\n    ThfI18nPipe,\n    ThfNotificationModule\n  ],\n  providers: [],\n  bootstrap: []\n})\nexport class ThfServicesModule { }\n","import { NgModule } from '@angular/core';\n\nimport { ThfComponentsModule } from './components/components.module';\nimport { ThfDirectivesModule } from './directives/directives.module';\nimport { ThfGuardsModule } from './guards/guards.module';\nimport { ThfInterceptorsModule } from './interceptors/interceptors.module';\nimport { ThfPipesModule } from './pipes/pipes.module';\nimport { ThfServicesModule } from './services/services.module';\nimport { ThfNotificationService } from './services/thf-notification/thf-notification.service';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    ThfComponentsModule,\n    ThfDirectivesModule,\n    ThfGuardsModule,\n    ThfInterceptorsModule,\n    ThfPipesModule,\n    ThfServicesModule\n  ],\n  exports: [\n    ThfComponentsModule,\n    ThfDirectivesModule,\n    ThfInterceptorsModule,\n    ThfGuardsModule,\n    ThfPipesModule,\n    ThfServicesModule\n  ],\n  providers: [ ThfNotificationService ],\n  bootstrap: []\n})\nexport class ThfModule { }\n","import { InjectionToken } from '@angular/core';\n\nimport { ThfI18nConfig } from './interfaces/thf-i18n-config.interface';\n\nexport const I18N_CONFIG = new InjectionToken<ThfI18nConfig>('I18N_CONFIG');\n","import { HttpClient } from '@angular/common/http';\nimport { Inject } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { isLanguage, reloadCurrentPage } from '../../utils/util';\nimport { ThfLanguageService } from '../thf-language/thf-language.service';\n\nimport { I18N_CONFIG } from './thf-i18n-config-injection-token';\nimport { ThfI18nConfig } from './interfaces/thf-i18n-config.interface';\nimport { ThfI18nLiterals } from './interfaces/thf-i18n-literals.interface';\n\n/**\n * @description\n *\n * O serviÃ§o `ThfI18nService` possibilita utilizar mÃºltiplos idiomas e contextos na aplicaÃ§Ã£o.\n *\n * > Antes da utilizaÃ§Ã£o do serviÃ§o, Ã© necessÃ¡rio realizar a\n * [importaÃ§Ã£o e configuraÃ§Ã£o do mÃ³dulo `ThfI18nModule`](/documentation/thf-i18n#i18n-config).\n *\n * **UtilizaÃ§Ã£o do serviÃ§o `ThfI18nService`:**\n *\n * Para utilizar o serviÃ§o basta importÃ¡-lo nos componentes que necessitarem de literais e fazer a injeÃ§Ã£o de\n * dependÃªncia no construtor:\n * ```\n *  import { ThfI18nService } from '@totvs/thf-ui';\n *  ...\n *  constructor(private thfI18nService: ThfI18nService) { }\n *  ...\n * ```\n *\n * Por fim realizar a busca pelas literais, inscrevendo-se no [Observable](https://angular.io/guide/observables) pelo\n * mÃ©todo `getLiterals()`.\n *\n * > O mÃ©todo `getLiterals()` pode receber um objeto do tipo da interface `ThfI18nLiterals` como parÃ¢metro,\n * porÃ©m, nenhuma das propriedades sÃ£o obrigatÃ³rias. Caso nenhum parÃ¢metro seja passado, serÃ£o buscadas\n * todas as literais do contexto definido com padrÃ£o, no idioma definido como padrÃ£o.\n *\n * Exemplos de requisiÃ§Ã£o:\n * ```\n * literals = {};\n * literalsEn = {};\n * literalsCrm = {};\n *\n * constructor(private thfI18nService: ThfI18nService) {\n *   thfI18nService.getLiterals()\n *     .subscribe((literals) => {\n *       this.literals = literals;\n *     });\n *\n *   thfI18nService.getLiterals({context: 'crm', literals: ['add', 'remove']})\n *     .subscribe((literals) => {\n *       this.literalsCrm = literals;\n *     });\n *\n *   thfI18nService.getLiterals({language: 'en-us'})\n *     .subscribe((literals) => {\n *       this.literalsEn = literals;\n *     });\n * }\n * ```\n *\n * Para apresentar as literais capturadas acima no HTML do componente, deve-se utilizar o\n * seguinte cÃ³digo:\n *\n * <pre ngNonBindable>\n * {{ literals?.add }}\n * {{ literals?.remove }}\n * </pre>\n *\n * Caso as literais contenham variÃ¡veis que precisem ser substituÃ­das, pode-se utilizar o *pipe* `thfI18n`.\n * Ã possÃ­vel informar propriedades do componente como `name` e `nickname` ou\n * informar o valor diretamente com \"\" ou nÃºmero, conforme o exemplo abaixo:\n *\n * <pre ngNonBindable>\n * {{ literals?.people | thfI18n:[120] }}\n * {{ literals?.greeting | thfI18n:[name, nickname] }}\n * {{ literals?.greeting | thfI18n:[\"Brad\", \"Green\"] }}\n * </pre>\n *\n * > Ã importante o uso do operador `?` (Elvis) para evitar erros enquanto as literais nÃ£o forem carregadas.\n *\n * ### Teste unitÃ¡rio\n *\n * Abaixo segue um exemplo de *setup* inicial de teste unitÃ¡rio do *AppComponent* que utiliza o `ThfI18nService`:\n *\n * ```\n * import { async, TestBed } from '@angular/core/testing';\n * import { HttpClientTestingModule } from '@angular/common/http/testing';\n *\n * import { ThfI18nModule } from '@totvs/thf-ui';\n *\n * import { AppComponent } from './app.component';\n *\n * describe('AppComponent', () => {\n *   const anotherPT = {\n *     text: 'texto',\n *     add: 'adicionar',\n *     remove: 'remover'\n *   };\n *\n *   const generalPT = {\n *     text: 'texto',\n *     add: 'adicionar',\n *     remove: 'remover'\n *   };\n *\n *   const config = {\n *     default: {\n *       language: 'pt-BR',\n *       context: 'general',\n *       cache: false\n *     },\n *     contexts: {\n *       general: {\n *         'pt-br': generalPT\n *       },\n *       another: {\n *         'pt-br': anotherPT\n *       }\n *     }\n *   };\n *\n *   beforeEach(async(() => {\n *     TestBed.configureTestingModule({\n *       declarations: [\n *         AppComponent\n *       ],\n *       imports: [\n *         HttpClientTestingModule,\n *         ThfI18nModule.config(config)\n *       ]\n *     }).compileComponents();\n *   }));\n *\n *   it('should create the app', async(() => {\n *     const fixture = TestBed.createComponent(AppComponent);\n *     const app = fixture.debugElement.componentInstance;\n *\n *     expect(app).toBeTruthy();\n *   }));\n *\n * });\n * ```\n */\n\nexport class ThfI18nBaseService {\n\n  private varI18n: any = {};\n\n  private contextDefault: string;\n\n  private useCache: boolean = false;\n\n  private servicesContext: any = {};\n\n  constructor(\n    @Inject(I18N_CONFIG) private config?: ThfI18nConfig,\n    @Inject(HttpClient) private http?: HttpClient,\n    private languageService?: ThfLanguageService) {\n\n    this.setConfig(config);\n  }\n\n  /**\n   * <a id=\"get-language\"></a>\n   * MÃ©todo que retorna o idioma padrÃ£o ativo.\n   *\n   * A busca deste idioma pelo mÃ©todo serÃ¡ feita na seguinte ordem:\n   *\n   *   1 - o idioma que foi armazenado no *localStorage*, atravÃ©s do mÃ©todo [`setLanguage()`](documentation/thf-i18n#setLanguage).\n   *\n   *   2 - o valor inserido no mÃ³dulo do i18n atravÃ©s do parÃ¢metro `config`, sendo o idioma inserido na propriedade\n   * `language` da interface [`ThfI18nConfigDefault`](documentation/thf-i18n#thfI18nConfigDefault).\n   *\n   *   3 - o idioma do navegador utilizado.\n   *\n   * > Caso o idioma do navegador nÃ£o seja suportado pelo THF (`pt`, `en` ou `es`), serÃ¡ retornado valor `pt`.\n   *\n   * **Retorno:**\n   *\n   * `string` com a sigla do idioma padrÃ£o.\n   */\n  getLanguage(): string {\n    return this.languageService.getLanguage();\n  }\n\n  /**\n   * MÃ©todo que retorna o idioma padrÃ£o ativo, com somente a abreviaÃ§Ã£o do idioma (duas primeiras letras).\n   * Por exemplo: \"pt\" ou \"es\".\n   *\n   * A busca deste idioma Ã© baseada no mÃ©todo [**getLanguage()**](/documentation/thf-i18n#get-language).\n   *\n   * **Retorno:**\n   *\n   * `string` com a sigla do idioma padrÃ£o.\n   */\n  getShortLanguage(): string {\n    return this.languageService.getShortLanguage();\n  }\n\n  /**\n   * <a id=\"setLanguage\"></a>\n   * MÃ©todo para alterar o idioma padrÃ£o do mÃ³dulo do i18n.\n   *\n   * Ao utilizar este mÃ©todo, o idioma ficarÃ¡ gravado no armazenamento local do navegador, que serÃ¡ utilizado pelo\n   * serviÃ§o do `i18n` para buscar as literais no idioma padrÃ£o.\n   *\n   * @param language {string} Sigla do idioma.\n   *\n   * Esta sigla deve ser composta por duas letras representando o idioma,\n   * podendo ser adicionado outras duas letras representando o paÃ­s, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.\n   *\n   * > Caso seja informado um valor diferente deste padrÃ£o, o mesmo serÃ¡ ignorado.\n   *\n   * @param reload {boolean} Indica se a pÃ¡gina atual poderÃ¡ ser recarregada apÃ³s a alteraÃ§Ã£o do idioma.\n   *\n   * Este recurso pode ser Ãºtil para os usuÃ¡rios que utilizam o mÃ©todo `getLiterals()` do serviÃ§o do i18n para poder\n   * buscar novamente as literais no novo idioma configurado.\n   */\n  setLanguage(language: string, reload?: boolean): void {\n\n    if (!isLanguage(language)) {\n      return;\n    }\n\n    this.languageService.setLanguage(language);\n\n    if (reload) {\n      reloadCurrentPage();\n    }\n\n  }\n\n  private setConfig(config: ThfI18nConfig) {\n    // Seta as configuraÃ§Ãµes padrÃµes definidas no importaÃ§Ã£o do mÃ³dulo\n    if (config['default']) {\n\n      this.languageService.setLanguageDefault(config['default']['language']);\n\n      this.contextDefault = (config['default']['context']) ? config['default']['context'] : '';\n      this.useCache = (config['default']['cache']) ? config['default']['cache'] : false;\n    }\n\n    // Carrega a lista dos contextos e as contantes informadas\n    if (config['contexts']) {\n      this.setVarI18n(config['contexts']);\n\n      // Se nenhum contexto foi definido como padrÃ£o,\n      // entÃ£o define o primeiro contexto\n      if (!this.contextDefault) {\n        for (const context in config['contexts']) {\n          if (this.config['contexts'].hasOwnProperty(context)) {\n            this.contextDefault = context;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  getLiterals(options: ThfI18nLiterals = {}): Observable<object> {\n    const language = options['language'] ? options['language'].toLowerCase() : this.getLanguage();\n    const context = (options['context']) ? options['context'] : this.contextDefault;\n    const literals: Array<string> = (options['literals']) ? options['literals'] : [];\n\n    return new Observable(observer => {\n      if (this.servicesContext[context]) {\n        // Faz o processo de busca de um contexto que contÃ©m serviÃ§o\n        this.getLiteralsFromContextService(language, context, literals, observer);\n      } else {\n        // Faz o processo de busca de um contexto que utiliza constante\n        this.getLiteralsFromContextConstant(language, context, literals, observer);\n      }\n    });\n  }\n\n  // Processo de busca de um contexto que contÃ©m serviÃ§o.\n  //    1 - Procura na variÃ¡vel I18n deste serviÃ§o\n  //    2 - Procura no local storage (Se o cache estiver definido como true na configuraÃ§Ã£o do mÃ³dulo)\n  //    3 - Dispara o serviÃ§o, mesmo que jÃ¡ tenha encontrado no local storage, para garantir a atualizaÃ§Ã£o\n  //    4 - Se nenhuma literal for encontrada, entÃ£o busca em pt-br\n  private getLiteralsFromContextService(language: string,\n                                        context: string,\n                                        literals: Array<string>,\n                                        observer: any,\n                                        translations: any = {},\n                                        languageAlternative: string = null) {\n\n    // Idioma usado para tentar buscar as literais faltantes\n    const languageSearch = (languageAlternative) ? languageAlternative : language;\n\n    translations = this.mergeObject(translations, this.searchInVarI18n(languageSearch, context, literals));\n\n    if (this.countObject(translations) > 0) {\n      observer.next(translations);\n    }\n\n    // realiza a busca no localStorage e em seguida no serviÃ§o\n    this.getLiteralsLocalStorageAndCache(languageSearch, context, literals, observer, translations, languageAlternative);\n  }\n\n  // Procura no local storage e em seguida no serviÃ§o\n  // Caso nÃ£o encontre nem no serviÃ§o, recomeÃ§a a busca em pt-br\n  private getLiteralsLocalStorageAndCache(language: string,\n                                          context: string,\n                                          literals: Array<string>,\n                                          observer: any,\n                                          translations: any,\n                                          languageAlternative: string = null) {\n\n    const languageSearch = (languageAlternative) ? languageAlternative : language;\n    let translationTemp;\n    // Verifica se usa cache\n    if (this.useCache) {\n      translationTemp = this.searchInLocalStorage(languageSearch, context, literals);\n      if (this.countObject(translationTemp) > 0) {\n        this.updateVarI18n(language, context, translationTemp);\n        translations = this.mergeObject(translationTemp, translations);\n        observer.next(translations);\n      }\n    }\n\n    // Busca do ServiÃ§o\n    this.getHttpService(this.servicesContext[context], languageSearch, literals)\n      .subscribe(\n        response => {\n          if (response) {\n            this.updateLocalStorage(language, context, response);\n            this.updateVarI18n(language, context, response);\n            translationTemp = this.searchInVarI18n(language, context, literals);\n            translations = this.mergeObject(translationTemp, translations);\n            observer.next(translations);\n          }\n\n          // Se nÃ£o encontrou todas as literais pesquisadas no idioma\n          // EntÃ£o refaz o processo procurando em portuguÃªs\n          if (literals.length > this.countObject(translations)) {\n            if (languageAlternative === 'pt-br') {\n              // Se nÃ£o encontrou nem em portuguÃªs, entÃ£o retorna o nome das literais\n              translations = this.completeFaultLiterals(language, context, literals, translations);\n              this.updateLocalStorage(language, context, translations);\n              this.updateVarI18n(language, context, translations);\n              observer.next(translations);\n            } else {\n              this.getLiteralsFromContextService(language, context, literals, observer, translations, 'pt-br');\n            }\n          }\n        });\n  }\n\n  // Procura pela lista de literais\n  // Se nÃ£o encontrar todas, procura em pt-br\n  private getLiteralsFromContextConstant(language: string,\n                                         context: string,\n                                         literals: Array<string>,\n                                         observer: any,\n                                         translations: any = {}) {\n\n    translations = this.mergeObject(translations, this.searchInVarI18n(language, context, literals));\n    if (this.countObject(translations) > 0) {\n      observer.next(translations);\n    }\n\n    // Se foi pesquisado por literais\n    if (literals.length > 0) {\n      // Se nÃ£o encontrou todas as literais pesquisadas no idioma, procura em portuguÃªs\n      if (literals.length > this.countObject(translations)) {\n        if (language === 'pt-br') {\n          // Se nÃ£o encontrou nem em portuguÃªs, entÃ£o retorna o nome das literais\n          translations = this.completeFaultLiterals(language, context, literals, translations);\n          observer.next(translations);\n        } else {\n          this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);\n        }\n      }\n    } else {\n      // Se nÃ£o encontrar nenhuma literal, procura em portuguÃªs\n      if (this.countObject(translations) === 0 && language !== 'pt-br') {\n        this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);\n      }\n\n      // caso nÃ£o informar literais e nÃ£o houver traduÃ§Ã£o\n      observer.next(translations);\n      observer.complete();\n    }\n  }\n\n  // Busca pelas literais no local storage\n  private searchInLocalStorage(language: string, context: string, literals: Array<string>): any {\n    const translations: any = {};\n\n    if (literals.length > 0) {\n      for (let i = 0; i < literals.length; i++) {\n        const literal = literals[i];\n        const translation = localStorage.getItem(language + '-' + context + '-' + literal);\n        if (translation) {\n          translations[literal] = translation;\n        }\n      }\n    }\n    return translations;\n  }\n\n  // Busca pelas literais na variÃ¡vel do serviÃ§o\n  private searchInVarI18n(language: string, context: string, literals: Array<string>): any {\n    let translations: any = {};\n\n    if (this.varI18n[language] && this.varI18n[language][context]) {\n      const content = this.varI18n[language][context];\n\n      if (literals.length > 0) {\n        // Busca as literais desejadas\n        for (let i = 0; i < literals.length; i++) {\n          const literal = literals[i];\n          if (content.hasOwnProperty(literal)) {\n            translations[literal] = content[literal];\n          }\n        }\n      } else {\n        // Atribui todas as literais\n        translations = { ...content };\n      }\n    }\n    return translations;\n  }\n\n  // Atualiza o local storage\n  private updateLocalStorage(language: string, context: string, data: any) {\n    if (this.useCache) {\n      for (const literal in data) {\n        if (data.hasOwnProperty(literal)) {\n          localStorage.setItem(language + '-' + context + '-' + literal, data[literal]);\n        }\n      }\n    }\n  }\n\n  // Atualiza a variÃ¡vel local com as literais com os objetos passados na configuraÃ§Ã£o\n  private setVarI18n(contexts: any) {\n    // Percorre os contextos\n    for (const context in contexts) {\n      if (contexts.hasOwnProperty(context)) {\n        const contextContent = contexts[context];\n\n        // Percorre os idiomas dentro do contexto\n        for (const language in contextContent) {\n          if (contextContent.hasOwnProperty(language)) {\n            const languageContent = contextContent[language];\n\n            if (language === 'url') {\n              this.servicesContext[context] = languageContent;\n            } else {\n              this.updateVarI18n(language, context, languageContent);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Atualiza a variÃ¡vel local com as literais idioma e contexto\n  private updateVarI18n(language: string, context: string, data: any) {\n    language = language.toLowerCase();\n\n    if (!this.varI18n[language]) {\n      this.varI18n[language] = {[context]: {}};\n    }\n    if (!this.varI18n[language][context]) {\n      this.varI18n[language][context] = {};\n    }\n\n    // Cria ou atualiza o contexto dentro do storage\n    this.varI18n[language][context] = this.mergeObject(data, this.varI18n[language][context]);\n  }\n\n  private getHttpService(url: string, language: string, literals: Array<string>): Observable<object> {\n    let param = '?language=' + language;\n    if (literals.length > 0) {\n      param += '&literals=' + literals.join();\n    }\n\n    // Remove a barra final do endereÃ§o\n    url = (url.lastIndexOf('/') === url.length - 1) ? url.substr(0, url.length - 1) : url;\n\n    return this.http.get(url + param);\n  }\n\n  // Completa com o nome da literais, as que nÃ£o foram encontradas\n  private completeFaultLiterals(language: string,\n                                context: string,\n                                literals: Array<string>,\n                                translations: any) {\n    for (let i = 0; i < literals.length; i++) {\n      const literal = literals[i];\n      if (!translations[literal]) {\n        translations[literal] = literal;\n      }\n    }\n    return translations;\n  }\n\n  // Conta os atributos do objeto\n  private countObject(obj: object) {\n    return Object.keys(obj).length;\n  }\n\n  // Faz o merge dos objetos, sempre dando preferÃªncia para o primeiro objeto de parÃ¢metro\n  private mergeObject(objPermanent: any, obj: any) {\n    return { ...obj, ...objPermanent };\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { ThfLanguageService } from './../thf-language/thf-language.service';\n\nimport { ThfI18nBaseService } from './thf-i18n-base.service';\nimport { ThfI18nConfig } from './interfaces/thf-i18n-config.interface';\n\n/**\n * @docsExtends ThfI18nBaseService\n */\n\n@Injectable()\nexport class ThfI18nService extends ThfI18nBaseService { }\n\n// FunÃ§Ã£o usada para retornar instÃ¢ncia para o mÃ³dulo thf-i18n.module\nexport function returnThfI18nService(config: ThfI18nConfig, http: HttpClient, languageService: ThfLanguageService) {\n  return new ThfI18nService(config, http, languageService);\n}\n","import { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { ThfLanguageService } from './../thf-language/thf-language.service';\n\nimport { I18N_CONFIG } from './thf-i18n-config-injection-token';\nimport { returnThfI18nService, ThfI18nService } from './thf-i18n.service';\nimport { ThfI18nConfig } from './interfaces/thf-i18n-config.interface';\nimport { ThfLanguageModule } from '../thf-language/thf-language.module';\n\n/**\n * @description\n *\n * MÃ³dulo do serviÃ§o `ThfI18nService` para controle de idiomas com THF.\n *\n * Para utilizaÃ§Ã£o do serviÃ§o de idiomas `ThfI18nService`, deve-se importar este mÃ³dulo mesmo jÃ¡ havendo importado\n * o mÃ³dulo `ThfModule`. Na importaÃ§Ã£o deve ser invocado o mÃ©todo `config`, informando um objeto que deve implementar\n * a interface [`ThfI18nConfig`](documentation/thf-i18n#thfI18nConfig) para configuraÃ§Ã£o.\n *\n * <a id=\"i18n-config\"></a>\n * **Exemplo de configuraÃ§Ã£o do mÃ³dulo do i18n:**\n * ```\n * import { ThfI18nConfig } from '@totvs/thf-ui';\n *\n * import { generalEn } from './i18n/general-en';\n * import { generalPt } from './i18n/general-pt';\n *\n * const i18nConfig: ThfI18nConfig = {\n *   default: {\n *     language: 'pt-BR',\n *     context: 'general',\n *     cache: true\n *   },\n *   contexts: {\n *     general: {\n *       'pt-BR': generalPt,\n *       'en-US': generalEn\n *     },\n *     hcm: {\n *       url: 'http://10.1.1.1/api/translations/hcm/'\n *     }\n *   }\n * };\n *\n * @NgModule({\n *   declarations: [],\n *   imports: [\n *     ThfModule,\n *     ThfI18nModule.config(i18nConfig)\n *   ],\n *   bootstrap: [AppComponent]\n * })\n * ```\n *\n * Para cada contexto Ã© possÃ­vel definir a origem das literais, que podem ser de um serviÃ§o REST ou\n * de um objeto. Exemplo:\n *\n * Arquivo general-pt.ts\n * ```\n * export const generalPt = {\n *  add: 'Adicionar',\n *  greeting: 'Prazer, {0} {1}',\n *  people: '{0} Pessoas,\n *  remove: 'Remover'\n * }\n * ```\n *\n * Arquivo general-en.ts\n * ```\n * export const generalEn = {\n *  add: 'Add',\n *  greeting: 'Nice to meet you, {0} {1}',\n *  people: '{0} People,\n *  remove: 'Remove'\n * }\n * ```\n *\n * **Exemplo de configuraÃ§Ã£o de contextos usando constantes externas:**\n * ```\n * import { ThfI18nConfig } from '@totvs/thf-ui';\n *\n * import { generalEn } from './i18n/general-en';\n * import { generalPt } from './i18n/general-pt';\n *\n * const i18nConfig: ThfI18nConfig = {\n *   contexts: {\n *     general: {\n *       'pt-BR': generalPt, // constantes em arquivos separados\n *       'en-US': generalEn // constantes em arquivos separados\n *     },\n *     crm: {\n *       url: 'http://10.0.0.1:3000/api/translations/crm'\n *     }\n *   },\n *   default: {}\n * }\n * ```\n *\n * **Exemplo de configuraÃ§Ã£o de um contexto utilizando serviÃ§o:**\n *\n * Ao optar por utilizar um serviÃ§o para configuraÃ§Ã£o de contexto, deverÃ¡ ser definida a URL\n * especÃ­fica do contexto, como nos exemplos abaixo:\n *\n *  - http://10.0.0.1:3000/api/translations/crm\n *  - http://10.0.0.1:3000/api/translations/general\n *\n * Os idiomas e literais serÃ£o automaticamente buscados com parÃ¢metros na prÃ³pria URL:\n * - **language**: o idioma serÃ¡ sempre passado por parÃ¢metro e Ã© recomendado utilizar uma das linguagens\n * suportadas pelo THF (`pt-br`, `en-us` ou `es-es`).\n * - **literals**: as literais serÃ£o separadas por vÃ­rgula. Caso esse parÃ¢metro nÃ£o seja informado, o\n * serviÃ§o deve retornar todas as literais do idioma.\n *\n * Exemplos de requisiÃ§Ã£o:\n *\n *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br\n *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br&literals=add,remove,text\n *\n * > Sempre que o idioma solicitado nÃ£o for encontrado, serÃ¡ buscado por `pt-br`.\n *\n * AlÃ©m dos contextos, Ã© possÃ­vel definir as configuraÃ§Ãµes *default* do sistema na configuraÃ§Ã£o do\n * mÃ³dulo utilizando a interface [`ThfI18nConfig`](documentation/thf-i18n#thfI18nConfig):\n *\n * **Exemplo de padrÃµes definidos:**\n * ```\n * const i18nConfig: ThfI18nConfig = {\n *   contexts: {\n *     general: { }\n *   },\n *   default: {\n *    language: 'pt-BR',\n *    context: 'general',\n *    cache: true\n *   }\n * }\n * ```\n *\n * **Importante:**\n *\n * Recomenda-se que as definiÃ§Ãµes *default* sejam realizadas apenas uma vez na aplicaÃ§Ã£o,\n * preferencialmente no mÃ³dulo `AppModule`.\n *\n * **i18n com *Lazy loading***\n *\n * Para aplicaÃ§Ãµes que utilizem a abordagem de mÃ³dulos com carregamento *lazy loading*, caso seja\n * definida outra configuraÃ§Ã£o do `ThfI18nModule`, deve-se atentar os seguintes detalhes:\n *\n * - Caso existam literais comuns na aplicaÃ§Ã£o, estas devem ser reimportadas;\n * - NÃ£o defina outra *default language* para este mÃ³dulo. Caso for definida, serÃ¡ sobreposta para\n * toda a aplicaÃ§Ã£o;\n * - Caso precise de mÃ³dulos carregados via *lazy loading* com linguagens diferentes, utilize o\n * mÃ©todo [`setLanguage()`](documentation/thf-i18n#setLanguage) disponibilizado pelo `ThfI18nService`\n * para definir a linguagem da aplicaÃ§Ã£o e dos mÃ³dulos com as linguagens diferentes.\n */\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n    ThfLanguageModule\n  ]\n})\nexport class ThfI18nModule {\n\n  static config(config: ThfI18nConfig): ModuleWithProviders {\n    return {\n      ngModule: ThfI18nModule,\n      providers: [\n        {\n          provide: I18N_CONFIG,\n          useValue: config\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initializeLanguageDefault,\n          multi: true,\n          deps: [I18N_CONFIG, ThfLanguageService]\n        },\n        {\n          provide: ThfI18nService,\n          useFactory: returnThfI18nService,\n          deps: [I18N_CONFIG, HttpClient, ThfLanguageService]\n        }\n      ]\n    };\n  }\n\n}\n\nexport function initializeLanguageDefault(config: ThfI18nConfig, languageService: ThfLanguageService) {\n  // tslint:disable-next-line:prefer-immediate-return\n  const setDefaultLanguage = () => {\n    if (config.default.language) {\n      languageService.setLanguageDefault(config.default.language);\n    }\n  };\n  return setDefaultLanguage;\n}\n"]}