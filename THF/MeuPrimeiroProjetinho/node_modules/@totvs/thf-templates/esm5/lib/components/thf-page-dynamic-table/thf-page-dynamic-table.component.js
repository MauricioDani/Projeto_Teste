/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { ThfDialogService, ThfNotificationService } from '@totvs/thf-ui';
import * as util from '../../utils/util';
import { ThfPageDynamicDetailComponent } from '../thf-page-dynamic-detail/thf-page-dynamic-detail.component';
// import { ThfPageDynamicEditComponent } from '../thf-page-dynamic-edit/thf-page-dynamic-edit.component';
import { ThfPageDynamicListBaseComponent } from './thf-page-dynamic-list-base.component';
import { ThfPageDynamicService } from './thf-page-dynamic.service';
/** @type {?} */
export var thfPageDynamicTableLiteralsDefault = {
    en: {
        pageAction: 'New',
        pageActionRemoveAll: 'Delete',
        tableActionView: 'View',
        tableActionEdit: 'Edit',
        tableActionDuplicate: 'Duplicate',
        tableActionDelete: 'Delete',
        confirmRemoveTitle: 'Confirm delete',
        confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',
        confirmRemoveAllTitle: 'Confirm batch deletion',
        confirmRemoveAllMessage: 'Are you sure you want to delete all these records? You can not undo this action.',
        loadDataErrorNotification: 'Service not found',
        removeSuccessNotification: 'Item deleted successfully',
        removeAllSuccessNotification: 'Items deleted successfully'
    },
    es: {
        pageAction: 'Nuevo',
        pageActionRemoveAll: 'Borrar',
        tableActionView: 'Visualizar',
        tableActionEdit: 'Editar',
        tableActionDuplicate: 'Duplicar',
        tableActionDelete: 'Borrar',
        confirmRemoveTitle: 'Confirmar la exclusión',
        confirmRemoveMessage: '¿Está seguro de que desea eliminar este registro? No puede deshacer esta acción.',
        confirmRemoveAllTitle: 'Confirmar la exclusión por lotes',
        confirmRemoveAllMessage: '¿Está seguro de que desea eliminar todos estos registros? No puede deshacer esta acción.',
        loadDataErrorNotification: 'Servicio no informado.',
        removeSuccessNotification: 'Elemento eliminado con éxito',
        removeAllSuccessNotification: 'Elementos eliminados con éxito'
    },
    pt: {
        pageAction: 'Novo',
        pageActionRemoveAll: 'Excluir',
        tableActionView: 'Visualizar',
        tableActionEdit: 'Editar',
        tableActionDuplicate: 'Duplicar',
        tableActionDelete: 'Excluir',
        confirmRemoveTitle: 'Confirmar exclusão',
        confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? Você não poderá desfazer essa ação.',
        confirmRemoveAllTitle: 'Confirmar exclusão em lote',
        confirmRemoveAllMessage: 'Tem certeza de que deseja excluir todos esses registros? Você não poderá desfazer essa ação.',
        loadDataErrorNotification: 'Serviço não informado.',
        removeSuccessNotification: 'Item excluido com sucesso',
        removeAllSuccessNotification: 'Items excluidos com sucesso'
    }
};
/**
 * \@docsExtends ThfPageDynamicListBaseComponent
 *
 * \@description
 *
 * O `thf-page-dynamic-table` é uma página que exibe uma lista de registros em uma tabela baseado em uma lista de fields,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * \@example
 *
 * <example name="thf-page-dynamic-table-basic" title="Totvs Page Dynamic Table Basic">
 *  <file name="sample-thf-page-dynamic-table-basic/sample-thf-page-dynamic-table-basic.component.html"> </file>
 *  <file name="sample-thf-page-dynamic-table-basic/sample-thf-page-dynamic-table-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-dynamic-table-users" title="Totvs Page Dynamic Table - Users">
 *  <file name="sample-thf-page-dynamic-table-users/sample-thf-page-dynamic-table-users.component.html"> </file>
 *  <file name="sample-thf-page-dynamic-table-users/sample-thf-page-dynamic-table-users.component.ts"> </file>
 * </example>
 */
var ThfPageDynamicTableComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfPageDynamicTableComponent, _super);
    function ThfPageDynamicTableComponent(router, activatedRoute, thfDialogService, thfNotification, thfPageDynamicService) {
        var _this = _super.call(this) || this;
        _this.router = router;
        _this.activatedRoute = activatedRoute;
        _this.thfDialogService = thfDialogService;
        _this.thfNotification = thfNotification;
        _this.thfPageDynamicService = thfPageDynamicService;
        _this._actions = {};
        _this._pageActions = [];
        _this._tableActions = [];
        _this.page = 1;
        _this.params = {};
        _this.hasNext = false;
        _this.items = [];
        _this.literals = tslib_1.__assign({}, thfPageDynamicTableLiteralsDefault[util.thfLocaleDefault], thfPageDynamicTableLiteralsDefault[util.browserLanguage()]);
        return _this;
    }
    Object.defineProperty(ThfPageDynamicTableComponent.prototype, "actions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Ações da página e da tabela.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Ações da página e da tabela.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._actions = value && typeof value === 'object' && Object.keys(value).length > 0 ? value : {};
            this.setPageActions(this.actions);
            this.setRemoveAllAction();
            this.setTableActions(this.actions);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.activatedRoute.snapshot.data.serviceApi) {
            this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;
            this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadMetadata();
        }
        else {
            this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadData();
        }
    };
    /**
     * @param {?} filter
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.onAdvancedSearch = /**
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        this.loadData(tslib_1.__assign({ page: 1 }, filter));
        this.params = filter;
    };
    /**
     * @param {?} disclaimers
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.onChangeDisclaimers = /**
     * @param {?} disclaimers
     * @return {?}
     */
    function (disclaimers) {
        /** @type {?} */
        var filter = {};
        disclaimers.forEach((/**
         * @param {?} disclaimer
         * @return {?}
         */
        function (disclaimer) {
            filter[disclaimer.property] = disclaimer.value;
        }));
        this.onAdvancedSearch(filter);
    };
    /**
     * @param {?} filter
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.onQuickSearch = /**
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        this.loadData(filter ? { page: 1, search: filter } : undefined);
        this.params = filter ? { search: filter } : {};
    };
    /**
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.showMore = /**
     * @return {?}
     */
    function () {
        this.loadData(tslib_1.__assign({ page: ++this.page }, this.params));
    };
    Object.defineProperty(ThfPageDynamicTableComponent.prototype, "hasActionRemoveAll", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.actions.removeAll;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPageDynamicTableComponent.prototype, "pageActions", {
        get: /**
         * @return {?}
         */
        function () {
            return tslib_1.__spread(this._pageActions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPageDynamicTableComponent.prototype, "tableActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tableActions;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.confirmRemove = /**
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var confirmOptions = {
            title: this.literals.confirmRemoveTitle,
            message: this.literals.confirmRemoveMessage,
            confirm: this.remove.bind(this, item)
        };
        this.thfDialogService.confirm(confirmOptions);
    };
    /**
     * @private
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.confirmRemoveAll = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var confirmOptions = {
            title: this.literals.confirmRemoveAllTitle,
            message: this.literals.confirmRemoveAllMessage,
            confirm: this.removeAll.bind(this)
        };
        this.thfDialogService.confirm(confirmOptions);
    };
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.formatUniqueKey = /**
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var keys = util.mapObjectByProperties(item, this.keys);
        return util.valuesFromObject(keys).join('|');
    };
    /**
     * @private
     * @param {?=} params
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.loadData = /**
     * @private
     * @param {?=} params
     * @return {?}
     */
    function (params) {
        var _this = this;
        if (params === void 0) { params = {}; }
        if (!this.serviceApi) {
            this.thfNotification.error(this.literals.loadDataErrorNotification);
            return;
        }
        /** @type {?} */
        var defaultParams = { page: 1, pageSize: 10 };
        /** @type {?} */
        var fullParams = tslib_1.__assign({}, defaultParams, params);
        this.thfPageDynamicService.getResources(fullParams).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            _this.items = fullParams.page === 1 ? response.items : tslib_1.__spread(_this.items, response.items);
            _this.page = fullParams.page;
            _this.hasNext = response.hasNext;
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.loadMetadata = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.thfPageDynamicService.getMetadata().toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            _this.autoRouter = response.autoRouter;
            _this.actions = response.actions || {};
            _this.breadcrumb = response.breadcrumb || { items: [] };
            _this.fields = response.fields || [];
            _this.title = response.title;
            _this.loadData();
        }));
    };
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    /**
     * @private
     * @param {?} route
     * @param {?=} forceStopAutoRouter
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.navigateTo = 
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    /**
     * @private
     * @param {?} route
     * @param {?=} forceStopAutoRouter
     * @return {?}
     */
    function (route, forceStopAutoRouter) {
        var _this = this;
        if (forceStopAutoRouter === void 0) { forceStopAutoRouter = false; }
        this.router.navigate([route.url || route.path], { queryParams: route.params })
            .catch((/**
         * @return {?}
         */
        function () {
            if (forceStopAutoRouter || !_this.autoRouter) {
                return;
            }
            _this.router.config.unshift((/** @type {?} */ ({
                path: route.path, component: route.component, data: { serviceApi: _this.serviceApi, autoRouter: true }
            })));
            _this.navigateTo(route, true);
        }));
    };
    /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.openDetail = /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    function (path, item) {
        /** @type {?} */
        var url = this.resolveUrl(item, path);
        this.navigateTo({ path: path, url: url, component: ThfPageDynamicDetailComponent });
    };
    /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.openDuplicate = /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    function (path, item) {
        /** @type {?} */
        var duplicates = util.mapObjectByProperties(item, this.duplicates);
        this.navigateTo({ path: path, params: { duplicate: JSON.stringify(duplicates) } });
        // this.navigateTo({ path, params: { duplicate: JSON.stringify(duplicates) } , component: ThfPageDynamicEditComponent });
    };
    /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.openEdit = /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    function (path, item) {
        /** @type {?} */
        var url = this.resolveUrl(item, path);
        this.navigateTo({ path: path, url: url });
        // this.navigateTo({ path, url, component: ThfPageDynamicEditComponent });
    };
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.openNew = /**
     * @private
     * @param {?} path
     * @return {?}
     */
    function (path) {
        this.navigateTo({ path: path });
        // this.navigateTo({ path, component: ThfPageDynamicEditComponent });
    };
    /**
     * Caso exista mais de um identificador, será concatenado com '|'.
     *
     * Ex: { id: 1, company: 'totvs' }
     *
     * Para o endpoint /resources/:id será executada a url /resources/1|totvs
     */
    /**
     * Caso exista mais de um identificador, será concatenado com '|'.
     *
     * Ex: { id: 1, company: 'totvs' }
     *
     * Para o endpoint /resources/:id será executada a url /resources/1|totvs
     * @private
     * @param {?} item
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.remove = /**
     * Caso exista mais de um identificador, será concatenado com '|'.
     *
     * Ex: { id: 1, company: 'totvs' }
     *
     * Para o endpoint /resources/:id será executada a url /resources/1|totvs
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        /** @type {?} */
        var uniqueKey = this.formatUniqueKey(item);
        this.thfPageDynamicService.deleteResource(uniqueKey).toPromise().then((/**
         * @return {?}
         */
        function () {
            _this.removeLocalItems([item]);
            _this.thfNotification.success(_this.literals.removeSuccessNotification);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.removeAll = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // TODO: usar propriedade nova pra validar os itens selecionados
        /** @type {?} */
        var selectedItems = this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.$selected; }));
        if (selectedItems.length === 0) {
            // TODO: usar propriedade nova pra validar os itens selecionados
            return;
        }
        /** @type {?} */
        var keysSelectedItems = util.mapArrayByProperties(selectedItems, this.keys);
        this.thfPageDynamicService.deleteResources(keysSelectedItems).toPromise().then((/**
         * @return {?}
         */
        function () {
            _this.removeLocalItems(selectedItems);
            _this.thfNotification.success(_this.literals.removeAllSuccessNotification);
        }));
    };
    /**
     * @private
     * @param {?=} items
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.removeLocalItems = /**
     * @private
     * @param {?=} items
     * @return {?}
     */
    function (items) {
        var _this = this;
        if (items === void 0) { items = []; }
        items.forEach((/**
         * @param {?} itemRemoved
         * @return {?}
         */
        function (itemRemoved) {
            /** @type {?} */
            var indexItemRemoved = _this.items.indexOf(itemRemoved);
            _this.items.splice(indexItemRemoved, 1);
        }));
    };
    /**
     * @private
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.resolveUrl = /**
     * @private
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    function (item, path) {
        /** @type {?} */
        var uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    };
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.setPageActions = /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    function (actions) {
        if (actions) {
            this._pageActions = [
                { label: this.literals.pageAction, action: this.openNew.bind(this, actions.new), disabled: !this._actions.new },
            ];
        }
    };
    /**
     * @private
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.setRemoveAllAction = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._actions.removeAll) {
            this._pageActions.push({
                label: this.literals.pageActionRemoveAll, action: this.confirmRemoveAll.bind(this),
                disabled: !this._actions.removeAll
            });
        }
    };
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    ThfPageDynamicTableComponent.prototype.setTableActions = /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    function (actions) {
        if (actions) {
            this._tableActions = [
                { action: this.openDetail.bind(this, actions.detail), label: this.literals.tableActionView, visible: !!this._actions.detail },
                { action: this.openEdit.bind(this, actions.edit), label: this.literals.tableActionEdit, visible: !!this._actions.edit },
                { action: this.openDuplicate.bind(this, actions.duplicate), label: this.literals.tableActionDuplicate,
                    visible: !!this._actions.duplicate
                },
                { action: this.confirmRemove.bind(this), label: this.literals.tableActionDelete, separator: true, type: 'danger',
                    visible: !!this._actions.remove
                }
            ];
        }
    };
    ThfPageDynamicTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-page-dynamic-table',
                    template: "<thf-page-dynamic-search\n  [t-actions]=\"pageActions\"\n  [t-breadcrumb]=\"breadcrumb\"\n  [t-filters]=\"filters\"\n  [t-title]=\"title\"\n  (t-advanced-search)=\"onAdvancedSearch($event)\"\n  (t-change-disclaimers)=\"onChangeDisclaimers($event)\"\n  (t-quick-search)=\"onQuickSearch($event)\">\n\n  <thf-table\n    t-sort=\"true\"\n    [t-actions]=\"tableActions\"\n    [t-checkbox]=\"hasActionRemoveAll\"\n    [t-columns]=\"columns\"\n    [t-items]=\"items\"\n    [t-show-more-disabled]=\"!hasNext\"\n    (t-show-more)=\"showMore()\">\n  </thf-table>\n\n</thf-page-dynamic-search>\n",
                    providers: [ThfPageDynamicService]
                }] }
    ];
    /** @nocollapse */
    ThfPageDynamicTableComponent.ctorParameters = function () { return [
        { type: Router },
        { type: ActivatedRoute },
        { type: ThfDialogService },
        { type: ThfNotificationService },
        { type: ThfPageDynamicService }
    ]; };
    ThfPageDynamicTableComponent.propDecorators = {
        actions: [{ type: Input, args: ['t-actions',] }]
    };
    return ThfPageDynamicTableComponent;
}(ThfPageDynamicListBaseComponent));
export { ThfPageDynamicTableComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype._pageActions;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype._tableActions;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype.page;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype.params;
    /** @type {?} */
    ThfPageDynamicTableComponent.prototype.hasNext;
    /** @type {?} */
    ThfPageDynamicTableComponent.prototype.items;
    /** @type {?} */
    ThfPageDynamicTableComponent.prototype.literals;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype.thfDialogService;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype.thfNotification;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype.thfPageDynamicService;
}
//# sourceMappingURL=data:application/json;base64,