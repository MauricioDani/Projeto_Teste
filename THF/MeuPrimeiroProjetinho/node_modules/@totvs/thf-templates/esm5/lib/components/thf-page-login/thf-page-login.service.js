/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ThfPageLoginAuthenticationType } from './enums/thf-page-login-authentication-type.enum';
var ThfPageLoginService = /** @class */ (function () {
    function ThfPageLoginService(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?} type
     * @param {?} loginForm
     * @return {?}
     */
    ThfPageLoginService.prototype.onLogin = /**
     * @param {?} url
     * @param {?} type
     * @param {?} loginForm
     * @return {?}
     */
    function (url, type, loginForm) {
        if (type === ThfPageLoginAuthenticationType.Bearer) {
            loginForm.password = btoa(loginForm.password);
            return this.http.post(url, loginForm);
        }
        else {
            /** @type {?} */
            var user = "(" + loginForm.login + ":" + loginForm.password + ")";
            /** @type {?} */
            var headers = new HttpHeaders({
                'Authorization': type + " " + btoa(user)
            });
            delete loginForm.login;
            delete loginForm.password;
            return this.http.post(url, loginForm, { headers: headers });
        }
    };
    ThfPageLoginService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ThfPageLoginService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return ThfPageLoginService;
}());
export { ThfPageLoginService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhZ2UtbG9naW4uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdGVtcGxhdGVzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLXBhZ2UtbG9naW4vdGhmLXBhZ2UtbG9naW4uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSzNDLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBRWpHO0lBR0UsNkJBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7SUFBSSxDQUFDOzs7Ozs7O0lBRXpDLHFDQUFPOzs7Ozs7SUFBUCxVQUFRLEdBQVcsRUFBRSxJQUFvQyxFQUFFLFNBQXVCO1FBRWhGLElBQUksSUFBSSxLQUFLLDhCQUE4QixDQUFDLE1BQU0sRUFBRTtZQUNsRCxTQUFTLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDdkM7YUFBTTs7Z0JBQ0MsSUFBSSxHQUFHLE1BQUksU0FBUyxDQUFDLEtBQUssU0FBSSxTQUFTLENBQUMsUUFBUSxNQUFHOztnQkFDbkQsT0FBTyxHQUFHLElBQUksV0FBVyxDQUFDO2dCQUM5QixlQUFlLEVBQUssSUFBSSxNQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQzthQUN6QyxDQUFDO1lBQ0YsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ3ZCLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUMxQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsRUFBRSxPQUFPLFNBQUEsRUFBRSxDQUFDLENBQUM7U0FDcEQ7SUFFSCxDQUFDOztnQkFwQkYsVUFBVTs7OztnQkFSRixVQUFVOztJQThCbkIsMEJBQUM7Q0FBQSxBQXRCRCxJQXNCQztTQXJCWSxtQkFBbUI7Ozs7OztJQUVsQixtQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBUaGZQYWdlTG9naW4gfSBmcm9tICcuL2ludGVyZmFjZXMvdGhmLXBhZ2UtbG9naW4uaW50ZXJmYWNlJztcbmltcG9ydCB7IFRoZlBhZ2VMb2dpbkF1dGhlbnRpY2F0aW9uVHlwZSB9IGZyb20gJy4vZW51bXMvdGhmLXBhZ2UtbG9naW4tYXV0aGVudGljYXRpb24tdHlwZS5lbnVtJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRoZlBhZ2VMb2dpblNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XG5cbiAgb25Mb2dpbih1cmw6IHN0cmluZywgdHlwZTogVGhmUGFnZUxvZ2luQXV0aGVudGljYXRpb25UeXBlLCBsb2dpbkZvcm06IFRoZlBhZ2VMb2dpbik6IE9ic2VydmFibGU8T2JqZWN0PiB7XG5cbiAgICBpZiAodHlwZSA9PT0gVGhmUGFnZUxvZ2luQXV0aGVudGljYXRpb25UeXBlLkJlYXJlcikge1xuICAgICAgbG9naW5Gb3JtLnBhc3N3b3JkID0gYnRvYShsb2dpbkZvcm0ucGFzc3dvcmQpO1xuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHVybCwgbG9naW5Gb3JtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdXNlciA9IGAoJHtsb2dpbkZvcm0ubG9naW59OiR7bG9naW5Gb3JtLnBhc3N3b3JkfSlgO1xuICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycyh7XG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYCR7dHlwZX0gYCArIGJ0b2EodXNlcilcbiAgICAgIH0pO1xuICAgICAgZGVsZXRlIGxvZ2luRm9ybS5sb2dpbjtcbiAgICAgIGRlbGV0ZSBsb2dpbkZvcm0ucGFzc3dvcmQ7XG4gICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodXJsLCBsb2dpbkZvcm0sIHsgaGVhZGVycyB9KTtcbiAgICB9XG5cbiAgfVxuXG59XG4iXX0=