/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { addZero, convertDateToISOExtended } from '../../utils/util';
var ThfPageJobSchedulerService = /** @class */ (function () {
    function ThfPageJobSchedulerService(http) {
        this.http = http;
        this.endpoint = '/';
        this.headers = new HttpHeaders({
            'X-TOTVS-SCREEN-LOCK': 'true'
        });
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.configServiceApi = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        this.endpoint = config.endpoint;
    };
    // Cria um recurso
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.createResource = 
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    function (resource) {
        /** @type {?} */
        var jobScheduler = this.convertToJobScheduler(resource);
        return this.http.post("" + this.endpoint, jobScheduler, { headers: this.headers });
    };
    /**
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.getHeadProcesses = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var headers = { 'X-Totvs-No-Error': 'true' };
        return this.http.head(this.endpoint + "/processes", { headers: headers });
    };
    // Busca parametros pelo processo id
    // Busca parametros pelo processo id
    /**
     * @param {?} processId
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.getParametersByProcess = 
    // Busca parametros pelo processo id
    /**
     * @param {?} processId
     * @return {?}
     */
    function (processId) {
        return this.http.get(this.endpoint + "/processes/" + processId + "/parameters", { headers: this.headers })
            .pipe(map((/**
         * @param {?} resource
         * @return {?}
         */
        function (resource) { return resource.items; })));
    };
    // Busca um único recurso
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.getProcess = 
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.endpoint + "/processes/" + id, { headers: this.headers });
    };
    // Busca uma lista de processos
    // Busca uma lista de processos
    /**
     * @param {?=} params
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.getProcesses = 
    // Busca uma lista de processos
    /**
     * @param {?=} params
     * @return {?}
     */
    function (params) {
        if (params === void 0) { params = {}; }
        return this.http.get(this.endpoint + "/processes", { params: params });
    };
    // Busca um único recurso
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.getResource = 
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return this.http.get(this.endpoint + "/" + id, { headers: this.headers })
            .pipe(map((/**
         * @param {?} resource
         * @return {?}
         */
        function (resource) { return _this.convertToJobSchedulerInternal(resource); })));
    };
    // Atualiza um recurso
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.updateResource = 
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    function (id, resource) {
        /** @type {?} */
        var jobScheduler = this.convertToJobScheduler(resource);
        return this.http.put(this.endpoint + "/" + id, jobScheduler, { headers: this.headers });
    };
    /**
     * @private
     * @param {?} jobSchedulerInternal
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.convertToJobScheduler = /**
     * @private
     * @param {?} jobSchedulerInternal
     * @return {?}
     */
    function (jobSchedulerInternal) {
        /** @type {?} */
        var jobScheduler = tslib_1.__assign({}, jobSchedulerInternal);
        if (jobSchedulerInternal.periodicity) {
            if (jobSchedulerInternal.periodicity === 'single') {
                jobScheduler.recurrent = false;
            }
            else {
                Object.assign(jobScheduler, this.convertToPeriodicity(jobSchedulerInternal));
            }
        }
        if (jobSchedulerInternal.firstExecutionHour) {
            jobScheduler.firstExecution =
                this.replaceHourFirstExecution(jobSchedulerInternal.firstExecution, jobSchedulerInternal.firstExecutionHour);
        }
        if (!Object.keys(this.returnValidExecutionParameter(jobScheduler.executionParameter)).length) {
            delete jobScheduler.executionParameter;
        }
        this.removeInvalidKeys(jobScheduler);
        return jobScheduler;
    };
    /**
     * @private
     * @param {?=} jobScheduler
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.convertToJobSchedulerInternal = /**
     * @private
     * @param {?=} jobScheduler
     * @return {?}
     */
    function (jobScheduler) {
        if (jobScheduler === void 0) { jobScheduler = (/** @type {?} */ ({})); }
        /** @type {?} */
        var jobSchedulerInternal = tslib_1.__assign({}, jobScheduler);
        if (jobScheduler.firstExecution) {
            jobSchedulerInternal.firstExecutionHour = this.getHourFirstExecution(jobScheduler.firstExecution);
        }
        Object.assign(jobSchedulerInternal, this.convertToPeriodicityInternal(jobScheduler));
        this.removeInvalidKeys(jobSchedulerInternal, ['weekly', 'monthly', 'daily']);
        return jobSchedulerInternal;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.convertToPeriodicity = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var newValue = {};
        /** @type {?} */
        var valuePeriodicity = value.periodicity;
        if (valuePeriodicity) {
            newValue[valuePeriodicity] = {};
            if (valuePeriodicity === 'monthly') {
                newValue[valuePeriodicity].day = value.dayOfMonth ? parseInt(value.dayOfMonth, 10) : 0;
            }
            else if (valuePeriodicity === 'weekly') {
                newValue[valuePeriodicity].daysOfWeek = value.daysOfWeek;
            }
            newValue[valuePeriodicity].hour = value.hour ? parseInt(value.hour.split(':')[0], 10) : 0;
            newValue[valuePeriodicity].minute = value.hour ? parseInt(value.hour.split(':')[1], 10) : 0;
        }
        return newValue;
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.convertToPeriodicityInternal = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = (/** @type {?} */ ({})); }
        if (value.monthly) {
            return {
                periodicity: 'monthly',
                hour: addZero(value.monthly.hour) + ":" + addZero(value.monthly.minute),
                dayOfMonth: value.monthly.day
            };
        }
        else if (value.daily) {
            return {
                periodicity: 'daily',
                hour: addZero(value.daily.hour) + ":" + addZero(value.daily.minute)
            };
        }
        else if (value.weekly) {
            return {
                periodicity: 'weekly',
                hour: addZero(value.weekly.hour) + ":" + addZero(value.weekly.minute),
                daysOfWeek: tslib_1.__spread(value.weekly.daysOfWeek)
            };
        }
        else {
            return {
                periodicity: 'single'
            };
        }
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.getCurrentHour = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var hours = addZero(date.getHours());
        /** @type {?} */
        var minutes = addZero(date.getMinutes());
        return hours + ":" + minutes;
    };
    /**
     * @private
     * @param {?} firstExecutionDate
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.getHourFirstExecution = /**
     * @private
     * @param {?} firstExecutionDate
     * @return {?}
     */
    function (firstExecutionDate) {
        return this.getCurrentHour(new Date(firstExecutionDate));
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} keys
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.removeInvalidKeys = /**
     * @private
     * @param {?} value
     * @param {?=} keys
     * @return {?}
     */
    function (value, keys) {
        /** @type {?} */
        var invalidKeys = keys || ['periodicity', 'hour', 'minute', 'day', 'daysOfWeek', 'dayOfMonth', 'firstExecutionHour'];
        Object.keys(value).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (invalidKeys.includes(key)) {
                delete value[key];
            }
        }));
    };
    /**
     * @private
     * @param {?} date
     * @param {?} time
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.replaceHourFirstExecution = /**
     * @private
     * @param {?} date
     * @param {?} time
     * @return {?}
     */
    function (date, time) {
        /** @type {?} */
        var firstExecutionDate = new Date(date);
        /** @type {?} */
        var timeSplited = time.split(':');
        /** @type {?} */
        var hours = parseInt(timeSplited[0], 10);
        /** @type {?} */
        var minutes = parseInt(timeSplited[1], 10);
        firstExecutionDate.setHours(hours, minutes);
        return convertDateToISOExtended(firstExecutionDate);
    };
    /**
     * @private
     * @param {?} parameter
     * @return {?}
     */
    ThfPageJobSchedulerService.prototype.returnValidExecutionParameter = /**
     * @private
     * @param {?} parameter
     * @return {?}
     */
    function (parameter) {
        /** @type {?} */
        var newParameter = tslib_1.__assign({}, parameter);
        for (var key in newParameter) {
            if (newParameter.hasOwnProperty(key) && newParameter[key] === undefined) {
                delete newParameter[key];
            }
        }
        return newParameter;
    };
    ThfPageJobSchedulerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ThfPageJobSchedulerService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return ThfPageJobSchedulerService;
}());
export { ThfPageJobSchedulerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageJobSchedulerService.prototype.endpoint;
    /** @type {?} */
    ThfPageJobSchedulerService.prototype.headers;
    /**
     * @type {?}
     * @private
     */
    ThfPageJobSchedulerService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,