/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map } from 'rxjs/operators';
var ThfPageDynamicService = /** @class */ (function () {
    function ThfPageDynamicService(http) {
        this.http = http;
        this.endpoint = '/';
        this.headers = new HttpHeaders({
            'X-TOTVS-SCREEN-LOCK': 'true'
        });
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    ThfPageDynamicService.prototype.configServiceApi = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        this.endpoint = config.endpoint;
    };
    /**
     * @param {?=} type
     * @return {?}
     */
    ThfPageDynamicService.prototype.getMetadata = /**
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        if (type === void 0) { type = 'list'; }
        /** @type {?} */
        var key = this.endpoint + "-" + type + "-metadata";
        /** @type {?} */
        var cache = JSON.parse(localStorage.getItem(key)) || {};
        /** @type {?} */
        var url = this.endpoint + "/metadata?type=" + type + "&version=" + (cache.version || '');
        return this.http.get(url).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response.version === cache.version) {
                return cache;
            }
            localStorage.setItem(key, JSON.stringify(response));
            return tslib_1.__assign({}, cache, response);
        })));
    };
    // Deleta um único recurso
    // Deleta um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    ThfPageDynamicService.prototype.deleteResource = 
    // Deleta um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.delete(this.endpoint + "/" + id, { headers: this.headers });
    };
    // Deleta recursos em lote
    // Deleta recursos em lote
    /**
     * @param {?} ids
     * @return {?}
     */
    ThfPageDynamicService.prototype.deleteResources = 
    // Deleta recursos em lote
    /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        return this.http.request('delete', "" + this.endpoint, { headers: this.headers, body: ids });
    };
    // Busca uma lista de recursos
    // Busca uma lista de recursos
    /**
     * @param {?=} params
     * @return {?}
     */
    ThfPageDynamicService.prototype.getResources = 
    // Busca uma lista de recursos
    /**
     * @param {?=} params
     * @return {?}
     */
    function (params) {
        if (params === void 0) { params = {}; }
        return this.http.get(this.endpoint, { headers: this.headers, params: params });
    };
    // Busca um único recurso
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    ThfPageDynamicService.prototype.getResource = 
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.endpoint + "/" + id, { headers: this.headers });
    };
    // Cria um recurso
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    ThfPageDynamicService.prototype.createResource = 
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    function (resource) {
        return this.http.post("" + this.endpoint, resource, { headers: this.headers });
    };
    // Atualiza um recurso
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    ThfPageDynamicService.prototype.updateResource = 
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    function (id, resource) {
        return this.http.put(this.endpoint + "/" + id, resource, { headers: this.headers });
    };
    ThfPageDynamicService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ThfPageDynamicService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return ThfPageDynamicService;
}());
export { ThfPageDynamicService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicService.prototype.endpoint;
    /** @type {?} */
    ThfPageDynamicService.prototype.headers;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhZ2UtZHluYW1pYy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi10ZW1wbGF0ZXMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtcGFnZS1keW5hbWljLXRhYmxlL3RoZi1wYWdlLWR5bmFtaWMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUcvRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckM7SUFTRSwrQkFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQU41QixhQUFRLEdBQUcsR0FBRyxDQUFDO1FBRWQsWUFBTyxHQUFnQixJQUFJLFdBQVcsQ0FBQztZQUM5QyxxQkFBcUIsRUFBRSxNQUFNO1NBQzlCLENBQUMsQ0FBQztJQUVxQyxDQUFDOzs7OztJQUV6QyxnREFBZ0I7Ozs7SUFBaEIsVUFBaUIsTUFBa0M7UUFBbEMsdUJBQUEsRUFBQSxXQUFrQztRQUNqRCxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDbEMsQ0FBQzs7Ozs7SUFFRCwyQ0FBVzs7OztJQUFYLFVBQVksSUFBcUI7UUFBckIscUJBQUEsRUFBQSxhQUFxQjs7WUFDekIsR0FBRyxHQUFNLElBQUksQ0FBQyxRQUFRLFNBQUksSUFBSSxjQUFXOztZQUN6QyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRTs7WUFFbkQsR0FBRyxHQUFNLElBQUksQ0FBQyxRQUFRLHVCQUFrQixJQUFJLGtCQUFZLEtBQUssQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFFO1FBRW5GLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFDLFFBQWE7WUFDL0MsSUFBSSxRQUFRLENBQUMsT0FBTyxLQUFLLEtBQUssQ0FBQyxPQUFPLEVBQUU7Z0JBQ3RDLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7WUFFRCxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFFcEQsNEJBQWEsS0FBSyxFQUFLLFFBQVEsRUFBRztRQUNwQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVELDBCQUEwQjs7Ozs7O0lBQzFCLDhDQUFjOzs7Ozs7SUFBZCxVQUFlLEVBQUU7UUFDZixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFJLElBQUksQ0FBQyxRQUFRLFNBQUksRUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRCwwQkFBMEI7Ozs7OztJQUMxQiwrQ0FBZTs7Ozs7O0lBQWYsVUFBZ0IsR0FBZTtRQUM3QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxLQUFHLElBQUksQ0FBQyxRQUFVLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUUsQ0FBQztJQUNoRyxDQUFDO0lBRUQsOEJBQThCOzs7Ozs7SUFDOUIsNENBQVk7Ozs7OztJQUFaLFVBQWEsTUFBZTtRQUFmLHVCQUFBLEVBQUEsV0FBZTtRQUMxQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVELHlCQUF5Qjs7Ozs7O0lBQ3pCLDJDQUFXOzs7Ozs7SUFBWCxVQUFZLEVBQUU7UUFDWixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFJLElBQUksQ0FBQyxRQUFRLFNBQUksRUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRCxrQkFBa0I7Ozs7OztJQUNsQiw4Q0FBYzs7Ozs7O0lBQWQsVUFBZSxRQUFRO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBRyxJQUFJLENBQUMsUUFBVSxFQUFFLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRUQsc0JBQXNCOzs7Ozs7O0lBQ3RCLDhDQUFjOzs7Ozs7O0lBQWQsVUFBZSxFQUFFLEVBQUUsUUFBUTtRQUN6QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFJLElBQUksQ0FBQyxRQUFRLFNBQUksRUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUN0RixDQUFDOztnQkE1REYsVUFBVTs7OztnQkFMRixVQUFVOztJQWtFbkIsNEJBQUM7Q0FBQSxBQTdERCxJQTZEQztTQTVEWSxxQkFBcUI7Ozs7OztJQUVoQyx5Q0FBdUI7O0lBRXZCLHdDQUVHOzs7OztJQUVTLHFDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUaGZQYWdlRHluYW1pY1NlcnZpY2Uge1xuXG4gIHByaXZhdGUgZW5kcG9pbnQgPSAnLyc7XG5cbiAgcmVhZG9ubHkgaGVhZGVyczogSHR0cEhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoe1xuICAgICdYLVRPVFZTLVNDUkVFTi1MT0NLJzogJ3RydWUnXG4gIH0pO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XG5cbiAgY29uZmlnU2VydmljZUFwaShjb25maWc6IHsgZW5kcG9pbnQ/OiBzdHJpbmcgfSA9IHt9KSB7XG4gICAgdGhpcy5lbmRwb2ludCA9IGNvbmZpZy5lbmRwb2ludDtcbiAgfVxuXG4gIGdldE1ldGFkYXRhKHR5cGU6IHN0cmluZyA9ICdsaXN0Jyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgY29uc3Qga2V5ID0gYCR7dGhpcy5lbmRwb2ludH0tJHt0eXBlfS1tZXRhZGF0YWA7XG4gICAgY29uc3QgY2FjaGUgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpIHx8IHt9O1xuXG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5lbmRwb2ludH0vbWV0YWRhdGE/dHlwZT0ke3R5cGV9JnZlcnNpb249JHtjYWNoZS52ZXJzaW9uIHx8ICcnfWA7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpLnBpcGUobWFwKChyZXNwb25zZTogYW55KSA9PiB7XG4gICAgICBpZiAocmVzcG9uc2UudmVyc2lvbiA9PT0gY2FjaGUudmVyc2lvbikge1xuICAgICAgICByZXR1cm4gY2FjaGU7XG4gICAgICB9XG5cbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UpKTtcblxuICAgICAgcmV0dXJuICB7IC4uLmNhY2hlLCAuLi5yZXNwb25zZSB9O1xuICAgIH0pKTtcbiAgfVxuXG4gIC8vIERlbGV0YSB1bSDDum5pY28gcmVjdXJzb1xuICBkZWxldGVSZXNvdXJjZShpZCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUoYCR7dGhpcy5lbmRwb2ludH0vJHtpZH1gLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcbiAgfVxuXG4gIC8vIERlbGV0YSByZWN1cnNvcyBlbSBsb3RlXG4gIGRlbGV0ZVJlc291cmNlcyhpZHM6IEFycmF5PGFueT4pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAucmVxdWVzdCgnZGVsZXRlJywgYCR7dGhpcy5lbmRwb2ludH1gLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycywgYm9keTogaWRzIH0gKTtcbiAgfVxuXG4gIC8vIEJ1c2NhIHVtYSBsaXN0YSBkZSByZWN1cnNvc1xuICBnZXRSZXNvdXJjZXMocGFyYW1zOiB7fSA9IHt9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh0aGlzLmVuZHBvaW50LCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycywgcGFyYW1zIH0pO1xuICB9XG5cbiAgLy8gQnVzY2EgdW0gw7puaWNvIHJlY3Vyc29cbiAgZ2V0UmVzb3VyY2UoaWQpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGAke3RoaXMuZW5kcG9pbnR9LyR7aWR9YCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gIH1cblxuICAvLyBDcmlhIHVtIHJlY3Vyc29cbiAgY3JlYXRlUmVzb3VyY2UocmVzb3VyY2UpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdChgJHt0aGlzLmVuZHBvaW50fWAsIHJlc291cmNlLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcbiAgfVxuXG4gIC8vIEF0dWFsaXphIHVtIHJlY3Vyc29cbiAgdXBkYXRlUmVzb3VyY2UoaWQsIHJlc291cmNlKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLnB1dChgJHt0aGlzLmVuZHBvaW50fS8ke2lkfWAsIHJlc291cmNlLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcbiAgfVxufVxuIl19