/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { ThfDynamicFieldType } from '@totvs/thf-ui';
import { getBrowserLanguage } from '../../utils/util';
import { ThfAdvancedFilterComponent } from './thf-advanced-filter/thf-advanced-filter.component';
import { ThfPageDynamicSearchBaseComponent } from './thf-page-dynamic-search-base.component';
/**
 * \@docsExtends ThfPageDynamicSearchBaseComponent
 *
 * \@example
 *
 * <example name="thf-page-dynamic-search-basic" title="Totvs Page Dynamic Search Basic">
 *  <file name="sample-thf-page-dynamic-search-basic/sample-thf-page-dynamic-search-basic.component.html"> </file>
 *  <file name="sample-thf-page-dynamic-search-basic/sample-thf-page-dynamic-search-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-dynamic-search-hiring-processes" title="Totvs Page Dynamic Search - Hiring processes">
 *  <file name="sample-thf-page-dynamic-search-hiring-processes/sample-thf-page-dynamic-search-hiring-processes.component.html"> </file>
 *  <file name="sample-thf-page-dynamic-search-hiring-processes/sample-thf-page-dynamic-search-hiring-processes.component.ts"> </file>
 *  <file name="sample-thf-page-dynamic-search-hiring-processes/sample-thf-page-dynamic-search-hiring-processes.service.ts"> </file>
 * </example>
 */
var ThfPageDynamicSearchComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ThfPageDynamicSearchComponent, _super);
    function ThfPageDynamicSearchComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._disclaimerGroup = {
            change: _this.onChangeDisclaimerGroup.bind(_this),
            disclaimers: [],
            title: _this.literals.disclaimerGroupTitle
        };
        _this._filterSettings = {
            action: 'onAction',
            advancedAction: 'onAdvancedAction',
            ngModel: 'quickFilter',
            placeholder: _this.literals.filterSettingsPlaceholder
        };
        // Flag to control when changeDisclaimerGroup should be called
        _this.changeDisclaimersEnabled = false;
        return _this;
    }
    Object.defineProperty(ThfPageDynamicSearchComponent.prototype, "disclaimerGroup", {
        get: /**
         * @return {?}
         */
        function () {
            return Object.assign({}, this._disclaimerGroup);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPageDynamicSearchComponent.prototype, "filterSettings", {
        get: /**
         * @return {?}
         */
        function () {
            this._filterSettings.advancedAction = this.filters.length === 0 ? undefined : 'onAdvancedAction';
            return Object.assign({}, this._filterSettings);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThfPageDynamicSearchComponent.prototype.onAction = /**
     * @return {?}
     */
    function () {
        this.changeDisclaimersEnabled = false;
        this._disclaimerGroup.disclaimers = [
            { property: 'search', label: this.literals.quickSearchLabel + " " + this.quickFilter, value: this.quickFilter }
        ];
        if (this.quickSearch.observers && this.quickSearch.observers.length > 0) {
            this.quickSearch.emit(this.quickFilter);
        }
        this.quickFilter = undefined;
    };
    /**
     * @return {?}
     */
    ThfPageDynamicSearchComponent.prototype.onAdvancedAction = /**
     * @return {?}
     */
    function () {
        this.thfAdvancedFilter.open();
    };
    /**
     * @param {?} filters
     * @return {?}
     */
    ThfPageDynamicSearchComponent.prototype.onAdvancedSearch = /**
     * @param {?} filters
     * @return {?}
     */
    function (filters) {
        this.changeDisclaimersEnabled = false;
        this._disclaimerGroup.disclaimers = this.setDisclaimers(filters);
        this.advancedSearch.emit(filters);
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    ThfPageDynamicSearchComponent.prototype.formatDate = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var year = parseInt(date.substr(0, 4), 10);
        /** @type {?} */
        var month = parseInt(date.substr(5, 2), 10);
        /** @type {?} */
        var day = parseInt(date.substr(8, 2), 10);
        return new Date(year, month - 1, day).toLocaleDateString(getBrowserLanguage());
    };
    /**
     * @private
     * @param {?} fields
     * @param {?} fieldName
     * @return {?}
     */
    ThfPageDynamicSearchComponent.prototype.getFieldByProperty = /**
     * @private
     * @param {?} fields
     * @param {?} fieldName
     * @return {?}
     */
    function (fields, fieldName) {
        return fields.find((/**
         * @param {?} field
         * @return {?}
         */
        function (field) { return field.property === fieldName; }));
    };
    /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    ThfPageDynamicSearchComponent.prototype.onChangeDisclaimerGroup = /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    function (disclaimers) {
        this.changeDisclaimersEnabled ? this.changeDisclaimers.emit(disclaimers) : this.changeDisclaimersEnabled = true;
    };
    /**
     * @private
     * @param {?} filters
     * @return {?}
     */
    ThfPageDynamicSearchComponent.prototype.setDisclaimers = /**
     * @private
     * @param {?} filters
     * @return {?}
     */
    function (filters) {
        var _this = this;
        /** @type {?} */
        var disclaimers = [];
        Object.keys(filters).forEach((/**
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            /** @type {?} */
            var field = _this.getFieldByProperty(_this.filters, filter);
            /** @type {?} */
            var value = field.type === ThfDynamicFieldType.Date ? _this.formatDate(filters[filter]) : filters[filter];
            disclaimers.push({
                label: field.label + ": " + value,
                property: filter,
                value: filters[filter]
            });
        }));
        return disclaimers;
    };
    ThfPageDynamicSearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-page-dynamic-search',
                    template: "<thf-page-list\n  [t-actions]=\"actions\"\n  [t-breadcrumb]=\"breadcrumb\"\n  [t-disclaimer-group]=\"disclaimerGroup\"\n  [t-filter]=\"filterSettings\"\n  [t-title]=\"title\">\n\n  <thf-advanced-filter\n    [t-filters]=\"filters\"\n    (t-search-event)=\"onAdvancedSearch($event)\">\n  </thf-advanced-filter>\n\n  <ng-content></ng-content>\n\n</thf-page-list>\n"
                }] }
    ];
    ThfPageDynamicSearchComponent.propDecorators = {
        thfAdvancedFilter: [{ type: ViewChild, args: [ThfAdvancedFilterComponent, { static: true },] }]
    };
    return ThfPageDynamicSearchComponent;
}(ThfPageDynamicSearchBaseComponent));
export { ThfPageDynamicSearchComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicSearchComponent.prototype._disclaimerGroup;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicSearchComponent.prototype._filterSettings;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicSearchComponent.prototype.changeDisclaimersEnabled;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicSearchComponent.prototype.quickFilter;
    /** @type {?} */
    ThfPageDynamicSearchComponent.prototype.thfAdvancedFilter;
}
//# sourceMappingURL=data:application/json;base64,