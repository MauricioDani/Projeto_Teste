/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, thfLocaleDefault } from '../../utils/util';
import { thfModalPasswordRecoveryLiterals } from './literals/i18n/thf-modal-password-recovery-literals';
import { ThfModalPasswordRecoveryType } from './enums/thf-modal-password-recovery-type.enum';
/** @type {?} */
var ThfModalPasswordRecoveryDefaultMaxLength = 15;
/** @type {?} */
var ThfModalPasswordRecoveryDefaultMinLength = 15;
/** @type {?} */
var ThfModalPasswordRecoveryDefaultPhone = '(99) 99999-9999';
/** @type {?} */
var ThfModalPasswordRecoveryTypeDefault = ThfModalPasswordRecoveryType.Email;
/**
 * \@description
 *
 * O componente `thf-modal-password-recovery` é utilizado como template para solicitação de troca de senha.
 *
 * É composto por uma modal que possui três telas, cada uma com as seguintes características:
 *
 * - A primeira possui campos para preenchimento de email ou número de telefone;
 * - Tela com campo para preenchimento de código SMS enviado para o número de telefone enviado;
 * - A terceira se trata de uma confirmação de envio de link para a caixa de email do usuário.
 *
 *
 * A propriedade `t-url-recovery` automatiza a rotina do componente e simplifica o processo
 * para recuperação de senha, bastando definir uma url para requisição dos recursos.
 * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
 * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
 *
 *
 * Para a modal de digitação de código SMS, é possível definir uma mensagem de erro
 * customizada com a propriedade `t-code-error` e há um link para
 * reenvio de código por SMS. Ao reenviar, o evento `t-code-submit` envia um objeto com o telefone do usuário e a quantidade
 * de vezes em que o usuário fez a solicitação de reenvio.
 *
 * > É indicada a utilização da tela de digitação para envio de código SMS apenas
 * se a opção por envio SMS for disponibilizada para o usuário.
 *
 *
 * A modal de confirmação contém uma ação de reenvio e o evento `t-submit`
 * é quem passa o objeto contendo o email em conjunto com a quantidade de tentativas de reenvio.
 *
 * > A tela de confirmação é indicada para quando o usuário solicitar a troca através do email.
 *
 * > Os textos das modals são pré-definidos, imutáveis e são traduzidos de acordo com o idioma do *browser* (pt, en e es)
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/\@totvs/thf-theme/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 * @abstract
 */
var ThfModalPasswordRecoveryBaseComponent = /** @class */ (function () {
    function ThfModalPasswordRecoveryBaseComponent() {
        this._phoneMask = ThfModalPasswordRecoveryDefaultPhone;
        this._type = ThfModalPasswordRecoveryTypeDefault;
        this.maxLength = ThfModalPasswordRecoveryDefaultMaxLength;
        this.minLength = ThfModalPasswordRecoveryDefaultMinLength;
        this.literals = tslib_1.__assign({}, thfModalPasswordRecoveryLiterals[thfLocaleDefault], thfModalPasswordRecoveryLiterals[browserLanguage()]);
        /**
         * \@optional
         *
         * \@description
         *
         * Ação contendo como parâmetro o código enviado por SMS e digitado pelo usuário.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
         */
        this.codeSubmit = new EventEmitter();
        /**
         * \@optional
         *
         * \@description
         *
         * Ação contendo o email como parâmetro e que é executada quando o usuário clica sobres os botões de 'enviar' e 'reenviar' e-mail.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
         */
        this.submit = new EventEmitter();
    }
    Object.defineProperty(ThfModalPasswordRecoveryBaseComponent.prototype, "contactEmail", {
        get: /**
         * @return {?}
         */
        function () {
            return this._contactEmail;
        },
        /**
         * @optional
         *
         * @description
         *
         * Definição do e-mail que é exibido na mensagem para contato de suporte.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Definição do e-mail que é exibido na mensagem para contato de suporte.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._contactEmail = value;
            this.smsCodeErrorMessage = this.concatenateSMSErrorMessage(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfModalPasswordRecoveryBaseComponent.prototype, "phoneMask", {
        get: /**
         * @return {?}
         */
        function () {
            return this._phoneMask;
        },
        /**
         * @optional
         *
         * @description
         *
         * Definição da mascara do campo de telefone.
         *
         * @default `(99) 99999-9999`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Definição da mascara do campo de telefone.
         *
         * \@default `(99) 99999-9999`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._phoneMask = value || ThfModalPasswordRecoveryDefaultPhone;
            this.minLength = this.maxLength = this._phoneMask.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfModalPasswordRecoveryBaseComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o tipo de recuperação de senha que será exibido.
         *
         * @default `ThfModalPasswordRecoveryType.Email`
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o tipo de recuperação de senha que será exibido.
         *
         * \@default `ThfModalPasswordRecoveryType.Email`
         *
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = ((/** @type {?} */ (Object))).values(ThfModalPasswordRecoveryType).includes(value) ? value : ThfModalPasswordRecoveryTypeDefault;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.concatenateSMSErrorMessage = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var literalCodeErrorMessage = this.literals.smsCodeErrorMessagePhrase;
        return value && value !== '' ? literalCodeErrorMessage + " " + this.literals.prepositionIn + " " + value + "." : literalCodeErrorMessage;
    };
    ThfModalPasswordRecoveryBaseComponent.propDecorators = {
        contactEmail: [{ type: Input, args: ['t-contact-email',] }],
        codeError: [{ type: Input, args: ['t-code-error',] }],
        phoneMask: [{ type: Input, args: ['t-phone-mask',] }],
        type: [{ type: Input, args: ['t-type',] }],
        urlRecovery: [{ type: Input, args: ['t-url-recovery',] }],
        codeSubmit: [{ type: Output, args: ['t-code-submit',] }],
        submit: [{ type: Output, args: ['t-submit',] }]
    };
    return ThfModalPasswordRecoveryBaseComponent;
}());
export { ThfModalPasswordRecoveryBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfModalPasswordRecoveryBaseComponent.prototype._contactEmail;
    /**
     * @type {?}
     * @private
     */
    ThfModalPasswordRecoveryBaseComponent.prototype._phoneMask;
    /**
     * @type {?}
     * @private
     */
    ThfModalPasswordRecoveryBaseComponent.prototype._type;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.email;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.maxLength;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.minLength;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.modalPasswordRecoveryTypeAll;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.phone;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.smsCode;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.smsCodeErrorMessage;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.literals;
    /**
     * \@optional
     *
     * \@description
     *
     * Definição de mensagem de erro customizada para quando o usuário passar um código SMS inválido ou errado.
     * @type {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.codeError;
    /**
     * \@optional
     *
     * \@description
     *
     * Endpoint usado pelo template para requisição do recurso. Quando preenchido,
     * o métodos `t-submit` e `t-submit-code` serão ignorados e o componente adquirirá automatização
     * para o processo de solicitação de troca de senha.
     *
     * ### Processos
     * Ao digitar um valor válido no campo de email/telefone e pressionar **enviar**,
     * o componente fará uma requisição `POST` na url especificada nesta propriedade passando o objeto contendo o valor definido pelo usuário.
     *
     * ```
     * body {
     *  email: email,
     *  retry?: retry
     * }
     * ```
     *
     *
     * #### Recuperação por email
     * Para a recuperação de senha por **email**, o código de resposta HTTP de status esperado é `204`.
     *
     * Em caso de **sucesso**, será exibida a modal de confirmação de e-mail para o usuário.
     *
     *
     * > A ação **Reenviar** na tela de confirmação efetua uma nova requisição
     * passando-se o objeto com incremento para o valor da propriedade **retry**.
     *
     * *Processo finalizado.*
     *
     *
     * #### Recuperação por SMS
     * Se a opção de recuperação for por **SMS**, o código de status de sucesso deve ser `200`.
     * Em caso de **sucesso**, abre-se a modal de digitação de código SMS e a resposta
     * desta requisição deve retornar uma definição de dados abaixo:
     *
     * ```
     * 200:
     *  {
     *    hash: hash,
     *    urlValidationCode?: url
     *  }
     * ```
     *
     *
     * - O **hash** será o código de validação da solicitação do SMS para ser enviado juntamente com o código de verificação do SMS;
     * - **urlValidationCode** é a url usada para validação do código enviado por SMS.
     *
     *
     * > Caso não seja passado urlValidationCode, o endpoint usado para validação do código será `<t-url-recovery>/validation`.
     *
     *
     * #### Validação do código SMS
     * Ao digitar um valor válido no campo de código SMS e pressionar **continuar**, o componente fará uma requisição `POST` contendo:
     *
     * ```
     * POST /<t-url-recovery>/validation OU /<urlValidationCode>
     * Body {
     *  hash: hash,
     *  code: code
     * }
     * ```
     *
     *
     * O código de resposta HTTP de status esperado é `200`.
     *
     * Em caso de **erro** na validação do código SMS, a modal se mantém com o campo para digitação
     * de código SMS
     *
     *
     * > Pode-se atribuir a mensagem de erro (message) para o atributo `t-code-error` conforme retorno abaixo:
     *
     * ```
     * 400
     *  {
     *    error {
     *      message: 'Error Message'
     *    }
     *  }
     * ```
     *
     *
     * Em caso de **sucesso**, espera-se a resposta desta requisição retornando a seguinte definição:
     *
     * ```
     * 200:
     *  {
     *    token: token,
     *    urlChangePassword?: url
     *  }
     * ```
     *
     *
     * - **token**: Token de alteração de senha;
     * - **urlChangePassword**: url para o formulário de alteração de senha.
     *
     *
     * O componente está configurado para redirecionar para a url estabelecida em `urlChangePassword`.
     *
     * > Caso não seja passado valor para urlChangePassword,
     * a url usada para validação será a `<t-url-recovery>/changePassword?token=<token>`.
     *
     * *Processo finalizado.*
     * @type {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.urlRecovery;
    /**
     * \@optional
     *
     * \@description
     *
     * Ação contendo como parâmetro o código enviado por SMS e digitado pelo usuário.
     *
     * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
     * @type {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.codeSubmit;
    /**
     * \@optional
     *
     * \@description
     *
     * Ação contendo o email como parâmetro e que é executada quando o usuário clica sobres os botões de 'enviar' e 'reenviar' e-mail.
     *
     * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
     * @type {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.submit;
    /**
     * Acão para conclusão de processo e fechamento da modal. Indica-se sua utilização
     * para após o envio e validação do código SMS enviado pelo usuário.
     *
     * > Nas modals em que há a ação de 'cancelar' dispensa-se o uso desta ação pois o componente já trata o fechamento da modal.
     * @abstract
     * @return {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.completed = function () { };
    /**
     * Abre a modal de preenchimento de email ou número de telefone para solicitação de troca de senha.
     * @abstract
     * @return {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.open = function () { };
    /**
     * Abre a modal de confirmação de envio de email.
     * @abstract
     * @return {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.openConfirmation = function () { };
    /**
     * Abre a modal de preenchimento do código SMS enviado ao usuário.
     * @abstract
     * @return {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.openSmsCode = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvdHZzL3RoZi10ZW1wbGF0ZXMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90aGYtbW9kYWwtcGFzc3dvcmQtcmVjb3ZlcnkvdGhmLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVELE9BQU8sRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVyRSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUN4RyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQzs7SUFFdkYsd0NBQXdDLEdBQUcsRUFBRTs7SUFDN0Msd0NBQXdDLEdBQUcsRUFBRTs7SUFDN0Msb0NBQW9DLEdBQUcsaUJBQWlCOztJQUN4RCxtQ0FBbUMsR0FBaUMsNEJBQTRCLENBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrRDVHO0lBQUE7UUFHVSxlQUFVLEdBQUcsb0NBQW9DLENBQUM7UUFDbEQsVUFBSyxHQUFpQyxtQ0FBbUMsQ0FBQztRQUdsRixjQUFTLEdBQUcsd0NBQXdDLENBQUM7UUFDckQsY0FBUyxHQUFHLHdDQUF3QyxDQUFDO1FBTXJELGFBQVEsd0JBT0QsZ0NBQWdDLENBQUMsZ0JBQWdCLENBQUMsRUFDbEQsZ0NBQWdDLENBQUMsZUFBZSxFQUFFLENBQUMsRUFDdEQ7Ozs7Ozs7Ozs7UUFxTHFCLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDOzs7Ozs7Ozs7O1FBVzFDLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO0lBK0J2RCxDQUFDO0lBdE5DLHNCQUE4QiwrREFBWTs7OztRQU0xQztZQUNFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM1QixDQUFDO1FBZkQ7Ozs7OztXQU1HOzs7Ozs7Ozs7O1FBQ0gsVUFBMkMsS0FBYTtZQUN0RCxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztZQUUzQixJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BFLENBQUM7OztPQUFBO0lBd0JELHNCQUEyQiw0REFBUzs7OztRQUtwQztZQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN6QixDQUFDO1FBaEJEOzs7Ozs7OztXQVFHOzs7Ozs7Ozs7Ozs7UUFDSCxVQUFxQyxLQUFhO1lBQ2hELElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxJQUFJLG9DQUFvQyxDQUFDO1lBQ2hFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUMzRCxDQUFDOzs7T0FBQTtJQWdCRCxzQkFBcUIsdURBQUk7Ozs7UUFJekI7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQztRQWhCRDs7Ozs7Ozs7O1dBU0c7Ozs7Ozs7Ozs7Ozs7UUFDSCxVQUEwQixLQUFtQztZQUMzRCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsbUJBQUssTUFBTSxFQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsbUNBQW1DLENBQUM7UUFDaEksQ0FBQzs7O09BQUE7Ozs7OztJQStKTywwRUFBMEI7Ozs7O0lBQWxDLFVBQW1DLEtBQWE7O1lBQ3hDLHVCQUF1QixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMseUJBQXlCO1FBRXZFLE9BQU8sS0FBSyxJQUFJLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFJLHVCQUF1QixTQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxTQUFJLEtBQUssTUFBRyxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQztJQUNqSSxDQUFDOzsrQkFwTkEsS0FBSyxTQUFDLGlCQUFpQjs0QkFpQnZCLEtBQUssU0FBQyxjQUFjOzRCQVdwQixLQUFLLFNBQUMsY0FBYzt1QkFtQnBCLEtBQUssU0FBQyxRQUFROzhCQWtIZCxLQUFLLFNBQUMsZ0JBQWdCOzZCQVd0QixNQUFNLFNBQUMsZUFBZTt5QkFXdEIsTUFBTSxTQUFDLFVBQVU7O0lBK0JwQiw0Q0FBQztDQUFBLEFBdFBELElBc1BDO1NBdFBxQixxQ0FBcUM7Ozs7OztJQUV6RCw4REFBOEI7Ozs7O0lBQzlCLDJEQUEwRDs7Ozs7SUFDMUQsc0RBQWtGOztJQUVsRixzREFBYzs7SUFDZCwwREFBcUQ7O0lBQ3JELDBEQUFxRDs7SUFDckQsNkVBQXNDOztJQUN0QyxzREFBYzs7SUFDZCx3REFBZ0I7O0lBQ2hCLG9FQUE0Qjs7SUFFNUIseURBU0k7Ozs7Ozs7OztJQTBCSiwwREFBeUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWdKekMsNERBQThDOzs7Ozs7Ozs7OztJQVc5QywyREFBOEQ7Ozs7Ozs7Ozs7O0lBVzlELHVEQUFxRDs7Ozs7Ozs7O0lBUXJELDRFQUEyQjs7Ozs7O0lBSzNCLHVFQUFzQjs7Ozs7O0lBS3RCLG1GQUFrQzs7Ozs7O0lBS2xDLDhFQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBicm93c2VyTGFuZ3VhZ2UsIHRoZkxvY2FsZURlZmF1bHQgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgdGhmTW9kYWxQYXNzd29yZFJlY292ZXJ5TGl0ZXJhbHMgfSBmcm9tICcuL2xpdGVyYWxzL2kxOG4vdGhmLW1vZGFsLXBhc3N3b3JkLXJlY292ZXJ5LWxpdGVyYWxzJztcbmltcG9ydCB7IFRoZk1vZGFsUGFzc3dvcmRSZWNvdmVyeVR5cGUgfSBmcm9tICcuL2VudW1zL3RoZi1tb2RhbC1wYXNzd29yZC1yZWNvdmVyeS10eXBlLmVudW0nO1xuXG5jb25zdCBUaGZNb2RhbFBhc3N3b3JkUmVjb3ZlcnlEZWZhdWx0TWF4TGVuZ3RoID0gMTU7XG5jb25zdCBUaGZNb2RhbFBhc3N3b3JkUmVjb3ZlcnlEZWZhdWx0TWluTGVuZ3RoID0gMTU7XG5jb25zdCBUaGZNb2RhbFBhc3N3b3JkUmVjb3ZlcnlEZWZhdWx0UGhvbmUgPSAnKDk5KSA5OTk5OS05OTk5JztcbmNvbnN0IFRoZk1vZGFsUGFzc3dvcmRSZWNvdmVyeVR5cGVEZWZhdWx0OiBUaGZNb2RhbFBhc3N3b3JkUmVjb3ZlcnlUeXBlID0gVGhmTW9kYWxQYXNzd29yZFJlY292ZXJ5VHlwZS5FbWFpbDtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHRoZi1tb2RhbC1wYXNzd29yZC1yZWNvdmVyeWAgw6kgdXRpbGl6YWRvIGNvbW8gdGVtcGxhdGUgcGFyYSBzb2xpY2l0YcOnw6NvIGRlIHRyb2NhIGRlIHNlbmhhLlxuICpcbiAqIMOJIGNvbXBvc3RvIHBvciB1bWEgbW9kYWwgcXVlIHBvc3N1aSB0csOqcyB0ZWxhcywgY2FkYSB1bWEgY29tIGFzIHNlZ3VpbnRlcyBjYXJhY3RlcsOtc3RpY2FzOlxuICpcbiAqIC0gQSBwcmltZWlyYSBwb3NzdWkgY2FtcG9zIHBhcmEgcHJlZW5jaGltZW50byBkZSBlbWFpbCBvdSBuw7ptZXJvIGRlIHRlbGVmb25lO1xuICogLSBUZWxhIGNvbSBjYW1wbyBwYXJhIHByZWVuY2hpbWVudG8gZGUgY8OzZGlnbyBTTVMgZW52aWFkbyBwYXJhIG8gbsO6bWVybyBkZSB0ZWxlZm9uZSBlbnZpYWRvO1xuICogLSBBIHRlcmNlaXJhIHNlIHRyYXRhIGRlIHVtYSBjb25maXJtYcOnw6NvIGRlIGVudmlvIGRlIGxpbmsgcGFyYSBhIGNhaXhhIGRlIGVtYWlsIGRvIHVzdcOhcmlvLlxuICpcbiAqXG4gKiBBIHByb3ByaWVkYWRlIGB0LXVybC1yZWNvdmVyeWAgYXV0b21hdGl6YSBhIHJvdGluYSBkbyBjb21wb25lbnRlIGUgc2ltcGxpZmljYSBvIHByb2Nlc3NvXG4gKiBwYXJhIHJlY3VwZXJhw6fDo28gZGUgc2VuaGEsIGJhc3RhbmRvIGRlZmluaXIgdW1hIHVybCBwYXJhIHJlcXVpc2nDp8OjbyBkb3MgcmVjdXJzb3MuXG4gKiBTZXUgZGV0YWxoYW1lbnRvIHBhcmEgdXNvIHBvZGUgc2VyIHZpc3RvIGxvZ28gYWJhaXhvIGVtICpwcm9wcmllZGFkZXMqLlxuICogQ2FzbyBqdWxndWUgbmVjZXNzw6FyaW8sIHBvZGUtc2UgdGFtYsOpbSBkZWZpbmlyIG1hbnVhbG1lbnRlIGEgcm90aW5hIGRvIGNvbXBvbmVudGUuXG4gKlxuICpcbiAqIFBhcmEgYSBtb2RhbCBkZSBkaWdpdGHDp8OjbyBkZSBjw7NkaWdvIFNNUywgw6kgcG9zc8OtdmVsIGRlZmluaXIgdW1hIG1lbnNhZ2VtIGRlIGVycm9cbiAqIGN1c3RvbWl6YWRhIGNvbSBhIHByb3ByaWVkYWRlIGB0LWNvZGUtZXJyb3JgIGUgaMOhIHVtIGxpbmsgcGFyYVxuICogcmVlbnZpbyBkZSBjw7NkaWdvIHBvciBTTVMuIEFvIHJlZW52aWFyLCBvIGV2ZW50byBgdC1jb2RlLXN1Ym1pdGAgZW52aWEgdW0gb2JqZXRvIGNvbSBvIHRlbGVmb25lIGRvIHVzdcOhcmlvIGUgYSBxdWFudGlkYWRlXG4gKiBkZSB2ZXplcyBlbSBxdWUgbyB1c3XDoXJpbyBmZXogYSBzb2xpY2l0YcOnw6NvIGRlIHJlZW52aW8uXG4gKlxuICogPiDDiSBpbmRpY2FkYSBhIHV0aWxpemHDp8OjbyBkYSB0ZWxhIGRlIGRpZ2l0YcOnw6NvIHBhcmEgZW52aW8gZGUgY8OzZGlnbyBTTVMgYXBlbmFzXG4gKiBzZSBhIG9ww6fDo28gcG9yIGVudmlvIFNNUyBmb3IgZGlzcG9uaWJpbGl6YWRhIHBhcmEgbyB1c3XDoXJpby5cbiAqXG4gKlxuICogQSBtb2RhbCBkZSBjb25maXJtYcOnw6NvIGNvbnTDqW0gdW1hIGHDp8OjbyBkZSByZWVudmlvIGUgbyBldmVudG8gYHQtc3VibWl0YFxuICogw6kgcXVlbSBwYXNzYSBvIG9iamV0byBjb250ZW5kbyBvIGVtYWlsIGVtIGNvbmp1bnRvIGNvbSBhIHF1YW50aWRhZGUgZGUgdGVudGF0aXZhcyBkZSByZWVudmlvLlxuICpcbiAqID4gQSB0ZWxhIGRlIGNvbmZpcm1hw6fDo28gw6kgaW5kaWNhZGEgcGFyYSBxdWFuZG8gbyB1c3XDoXJpbyBzb2xpY2l0YXIgYSB0cm9jYSBhdHJhdsOpcyBkbyBlbWFpbC5cbiAqXG4gKiA+IE9zIHRleHRvcyBkYXMgbW9kYWxzIHPDo28gcHLDqS1kZWZpbmlkb3MsIGltdXTDoXZlaXMgZSBzw6NvIHRyYWR1emlkb3MgZGUgYWNvcmRvIGNvbSBvIGlkaW9tYSBkbyAqYnJvd3NlciogKHB0LCBlbiBlIGVzKVxuICpcbiAqIFBhcmEgcXVlIGFzIGltYWdlbnMgc2VqYW0gZXhpYmlkYXMgY29ycmV0YW1lbnRlLCDDqSBuZWNlc3PDoXJpbyBpbmNsdWlyIG8gY2FtaW5obyBkZWxhcyBhbyBwcm9qZXRvLiBQYXJhIGlzc28sIGVkaXRlXG4gKiBvICphc3NldHMqIG5vIGFycXVpdm8gKiphbmd1bGFyLmpzb24qKiBkYSBhcGxpY2HDp8OjbyBuYSBzZWd1aW50ZSBvcmRlbTpcbiAqIGBgYFxuICogICBcImFzc2V0c1wiOiBbXG4gKiAgICAgXCJzcmMvYXNzZXRzXCIsXG4gKiAgICAgXCJzcmMvZmF2aWNvbi5pY29cIixcbiAqICAgICB7XG4gKiAgICAgICBcImdsb2JcIjogXCIqKlxcLypcIixcbiAqICAgICAgIFwiaW5wdXRcIjogXCJub2RlX21vZHVsZXMvQHRvdHZzL3RoZi10aGVtZS9pbWFnZXNcIixcbiAqICAgICAgIFwib3V0cHV0XCI6IFwiYXNzZXRzL2ltYWdlc1wiXG4gKiAgICAgfVxuICogICBdXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRoZk1vZGFsUGFzc3dvcmRSZWNvdmVyeUJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2NvbnRhY3RFbWFpbDogc3RyaW5nO1xuICBwcml2YXRlIF9waG9uZU1hc2sgPSBUaGZNb2RhbFBhc3N3b3JkUmVjb3ZlcnlEZWZhdWx0UGhvbmU7XG4gIHByaXZhdGUgX3R5cGU6IFRoZk1vZGFsUGFzc3dvcmRSZWNvdmVyeVR5cGUgPSBUaGZNb2RhbFBhc3N3b3JkUmVjb3ZlcnlUeXBlRGVmYXVsdDtcblxuICBlbWFpbDogc3RyaW5nO1xuICBtYXhMZW5ndGggPSBUaGZNb2RhbFBhc3N3b3JkUmVjb3ZlcnlEZWZhdWx0TWF4TGVuZ3RoO1xuICBtaW5MZW5ndGggPSBUaGZNb2RhbFBhc3N3b3JkUmVjb3ZlcnlEZWZhdWx0TWluTGVuZ3RoO1xuICBtb2RhbFBhc3N3b3JkUmVjb3ZlcnlUeXBlQWxsOiBib29sZWFuO1xuICBwaG9uZTogc3RyaW5nO1xuICBzbXNDb2RlOiBzdHJpbmc7XG4gIHNtc0NvZGVFcnJvck1lc3NhZ2U6IHN0cmluZztcblxuICBsaXRlcmFsczogeyBjYW5jZWxCdXR0b246IHN0cmluZywgY2xvc2VCdXR0b246IHN0cmluZywgY29udGludWVCdXR0b246IHN0cmluZywgZW1haWw6IHN0cmluZywgZW1haWxFcnJvck1lc3NhZ2VQaHJhc2U6IHN0cmluZyxcbiAgICBlbWFpbFNlbnRDb25maXJtYXRpb25QaHJhc2U6IHN0cmluZywgZW1haWxTZW50VGl0bGU6IHN0cmluZywgZm9yZ290UGFzc3dvcmRUaXRsZTogc3RyaW5nLFxuICAgIGluc2VydENvZGU6IHN0cmluZywgaW5zZXJ0RW1haWw6IHN0cmluZywgaW5zZXJ0UGhvbmU6IHN0cmluZywgcGhvbmVFcnJvck1lc3NhZ2VQaHJhc2U6IHN0cmluZyxcbiAgICBwcmVwb3NpdGlvbkluOiBzdHJpbmcsIHByZXBvc2l0aW9uT3I6IHN0cmluZywgcmVjb3ZlcnlQYXNzd29yZFBocmFzZTogc3RyaW5nLCByZXNlbmRFbWFpbEJ1dHRvbjogc3RyaW5nLFxuICAgIHJlc2VuZFNtc0NvZGVQaHJhc2U6IHN0cmluZywgc2VuZEFnYWluOiBzdHJpbmcsIHNlbmRCdXR0b246IHN0cmluZywgc21zOiBzdHJpbmcsIHNtc0NvZGU6IHN0cmluZyxcbiAgICBzbXNDb2RlRXJyb3JNZXNzYWdlUGhyYXNlOiBzdHJpbmcsIHNlbnRTbXNDb2RlUGhyYXNlOiBzdHJpbmcsIHN1cHBvcnRDb250YWN0OiBzdHJpbmcsIHRlbGVwaG9uZTogc3RyaW5nLCB0eXBlQ29kZVRpdGxlOiBzdHJpbmcgfSA9XG4gICAge1xuICAgICAgLi4udGhmTW9kYWxQYXNzd29yZFJlY292ZXJ5TGl0ZXJhbHNbdGhmTG9jYWxlRGVmYXVsdF0sXG4gICAgICAuLi50aGZNb2RhbFBhc3N3b3JkUmVjb3ZlcnlMaXRlcmFsc1ticm93c2VyTGFuZ3VhZ2UoKV0sXG4gICAgfTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmnDp8OjbyBkbyBlLW1haWwgcXVlIMOpIGV4aWJpZG8gbmEgbWVuc2FnZW0gcGFyYSBjb250YXRvIGRlIHN1cG9ydGUuXG4gICAqL1xuICBASW5wdXQoJ3QtY29udGFjdC1lbWFpbCcpIHNldCBjb250YWN0RW1haWwodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2NvbnRhY3RFbWFpbCA9IHZhbHVlO1xuXG4gICAgdGhpcy5zbXNDb2RlRXJyb3JNZXNzYWdlID0gdGhpcy5jb25jYXRlbmF0ZVNNU0Vycm9yTWVzc2FnZSh2YWx1ZSk7XG4gIH1cblxuICBnZXQgY29udGFjdEVtYWlsKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250YWN0RW1haWw7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmnDp8OjbyBkZSBtZW5zYWdlbSBkZSBlcnJvIGN1c3RvbWl6YWRhIHBhcmEgcXVhbmRvIG8gdXN1w6FyaW8gcGFzc2FyIHVtIGPDs2RpZ28gU01TIGludsOhbGlkbyBvdSBlcnJhZG8uXG4gICAqL1xuICBASW5wdXQoJ3QtY29kZS1lcnJvcicpIGNvZGVFcnJvcjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluacOnw6NvIGRhIG1hc2NhcmEgZG8gY2FtcG8gZGUgdGVsZWZvbmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IGAoOTkpIDk5OTk5LTk5OTlgXG4gICAqL1xuICBASW5wdXQoJ3QtcGhvbmUtbWFzaycpIHNldCBwaG9uZU1hc2sodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3Bob25lTWFzayA9IHZhbHVlIHx8IFRoZk1vZGFsUGFzc3dvcmRSZWNvdmVyeURlZmF1bHRQaG9uZTtcbiAgICB0aGlzLm1pbkxlbmd0aCA9IHRoaXMubWF4TGVuZ3RoID0gdGhpcy5fcGhvbmVNYXNrLmxlbmd0aDtcbiAgfVxuXG4gIGdldCBwaG9uZU1hc2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Bob25lTWFzaztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBvIHRpcG8gZGUgcmVjdXBlcmHDp8OjbyBkZSBzZW5oYSBxdWUgc2Vyw6EgZXhpYmlkby5cbiAgICpcbiAgICogQGRlZmF1bHQgYFRoZk1vZGFsUGFzc3dvcmRSZWNvdmVyeVR5cGUuRW1haWxgXG4gICAqXG4gICAqL1xuICBASW5wdXQoJ3QtdHlwZScpIHNldCB0eXBlKHZhbHVlOiBUaGZNb2RhbFBhc3N3b3JkUmVjb3ZlcnlUeXBlKSB7XG4gICAgdGhpcy5fdHlwZSA9ICg8YW55Pk9iamVjdCkudmFsdWVzKFRoZk1vZGFsUGFzc3dvcmRSZWNvdmVyeVR5cGUpLmluY2x1ZGVzKHZhbHVlKSA/IHZhbHVlIDogVGhmTW9kYWxQYXNzd29yZFJlY292ZXJ5VHlwZURlZmF1bHQ7XG4gIH1cblxuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEVuZHBvaW50IHVzYWRvIHBlbG8gdGVtcGxhdGUgcGFyYSByZXF1aXNpw6fDo28gZG8gcmVjdXJzby4gUXVhbmRvIHByZWVuY2hpZG8sXG4gICAqIG8gbcOpdG9kb3MgYHQtc3VibWl0YCBlIGB0LXN1Ym1pdC1jb2RlYCBzZXLDo28gaWdub3JhZG9zIGUgbyBjb21wb25lbnRlIGFkcXVpcmlyw6EgYXV0b21hdGl6YcOnw6NvXG4gICAqIHBhcmEgbyBwcm9jZXNzbyBkZSBzb2xpY2l0YcOnw6NvIGRlIHRyb2NhIGRlIHNlbmhhLlxuICAgKlxuICAgKiAjIyMgUHJvY2Vzc29zXG4gICAqIEFvIGRpZ2l0YXIgdW0gdmFsb3IgdsOhbGlkbyBubyBjYW1wbyBkZSBlbWFpbC90ZWxlZm9uZSBlIHByZXNzaW9uYXIgKiplbnZpYXIqKixcbiAgICogbyBjb21wb25lbnRlIGZhcsOhIHVtYSByZXF1aXNpw6fDo28gYFBPU1RgIG5hIHVybCBlc3BlY2lmaWNhZGEgbmVzdGEgcHJvcHJpZWRhZGUgcGFzc2FuZG8gbyBvYmpldG8gY29udGVuZG8gbyB2YWxvciBkZWZpbmlkbyBwZWxvIHVzdcOhcmlvLlxuICAgKlxuICAgKiBgYGBcbiAgICogYm9keSB7XG4gICAqICBlbWFpbDogZW1haWwsXG4gICAqICByZXRyeT86IHJldHJ5XG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqXG4gICAqICMjIyMgUmVjdXBlcmHDp8OjbyBwb3IgZW1haWxcbiAgICogUGFyYSBhIHJlY3VwZXJhw6fDo28gZGUgc2VuaGEgcG9yICoqZW1haWwqKiwgbyBjw7NkaWdvIGRlIHJlc3Bvc3RhIEhUVFAgZGUgc3RhdHVzIGVzcGVyYWRvIMOpIGAyMDRgLlxuICAgKlxuICAgKiBFbSBjYXNvIGRlICoqc3VjZXNzbyoqLCBzZXLDoSBleGliaWRhIGEgbW9kYWwgZGUgY29uZmlybWHDp8OjbyBkZSBlLW1haWwgcGFyYSBvIHVzdcOhcmlvLlxuICAgKlxuICAgKlxuICAgKiA+IEEgYcOnw6NvICoqUmVlbnZpYXIqKiBuYSB0ZWxhIGRlIGNvbmZpcm1hw6fDo28gZWZldHVhIHVtYSBub3ZhIHJlcXVpc2nDp8Ojb1xuICAgKiBwYXNzYW5kby1zZSBvIG9iamV0byBjb20gaW5jcmVtZW50byBwYXJhIG8gdmFsb3IgZGEgcHJvcHJpZWRhZGUgKipyZXRyeSoqLlxuICAgKlxuICAgKiAqUHJvY2Vzc28gZmluYWxpemFkby4qXG4gICAqXG4gICAqXG4gICAqICMjIyMgUmVjdXBlcmHDp8OjbyBwb3IgU01TXG4gICAqIFNlIGEgb3DDp8OjbyBkZSByZWN1cGVyYcOnw6NvIGZvciBwb3IgKipTTVMqKiwgbyBjw7NkaWdvIGRlIHN0YXR1cyBkZSBzdWNlc3NvIGRldmUgc2VyIGAyMDBgLlxuICAgKiBFbSBjYXNvIGRlICoqc3VjZXNzbyoqLCBhYnJlLXNlIGEgbW9kYWwgZGUgZGlnaXRhw6fDo28gZGUgY8OzZGlnbyBTTVMgZSBhIHJlc3Bvc3RhXG4gICAqIGRlc3RhIHJlcXVpc2nDp8OjbyBkZXZlIHJldG9ybmFyIHVtYSBkZWZpbmnDp8OjbyBkZSBkYWRvcyBhYmFpeG86XG4gICAqXG4gICAqIGBgYFxuICAgKiAyMDA6XG4gICAqICB7XG4gICAqICAgIGhhc2g6IGhhc2gsXG4gICAqICAgIHVybFZhbGlkYXRpb25Db2RlPzogdXJsXG4gICAqICB9XG4gICAqIGBgYFxuICAgKlxuICAgKlxuICAgKiAtIE8gKipoYXNoKiogc2Vyw6EgbyBjw7NkaWdvIGRlIHZhbGlkYcOnw6NvIGRhIHNvbGljaXRhw6fDo28gZG8gU01TIHBhcmEgc2VyIGVudmlhZG8ganVudGFtZW50ZSBjb20gbyBjw7NkaWdvIGRlIHZlcmlmaWNhw6fDo28gZG8gU01TO1xuICAgKiAtICoqdXJsVmFsaWRhdGlvbkNvZGUqKiDDqSBhIHVybCB1c2FkYSBwYXJhIHZhbGlkYcOnw6NvIGRvIGPDs2RpZ28gZW52aWFkbyBwb3IgU01TLlxuICAgKlxuICAgKlxuICAgKiA+IENhc28gbsOjbyBzZWphIHBhc3NhZG8gdXJsVmFsaWRhdGlvbkNvZGUsIG8gZW5kcG9pbnQgdXNhZG8gcGFyYSB2YWxpZGHDp8OjbyBkbyBjw7NkaWdvIHNlcsOhIGA8dC11cmwtcmVjb3Zlcnk+L3ZhbGlkYXRpb25gLlxuICAgKlxuICAgKlxuICAgKiAjIyMjIFZhbGlkYcOnw6NvIGRvIGPDs2RpZ28gU01TXG4gICAqIEFvIGRpZ2l0YXIgdW0gdmFsb3IgdsOhbGlkbyBubyBjYW1wbyBkZSBjw7NkaWdvIFNNUyBlIHByZXNzaW9uYXIgKipjb250aW51YXIqKiwgbyBjb21wb25lbnRlIGZhcsOhIHVtYSByZXF1aXNpw6fDo28gYFBPU1RgIGNvbnRlbmRvOlxuICAgKlxuICAgKiBgYGBcbiAgICogUE9TVCAvPHQtdXJsLXJlY292ZXJ5Pi92YWxpZGF0aW9uIE9VIC88dXJsVmFsaWRhdGlvbkNvZGU+XG4gICAqIEJvZHkge1xuICAgKiAgaGFzaDogaGFzaCxcbiAgICogIGNvZGU6IGNvZGVcbiAgICogfVxuICAgKiBgYGBcbiAgICpcbiAgICpcbiAgICogTyBjw7NkaWdvIGRlIHJlc3Bvc3RhIEhUVFAgZGUgc3RhdHVzIGVzcGVyYWRvIMOpIGAyMDBgLlxuICAgKlxuICAgKiBFbSBjYXNvIGRlICoqZXJybyoqIG5hIHZhbGlkYcOnw6NvIGRvIGPDs2RpZ28gU01TLCBhIG1vZGFsIHNlIG1hbnTDqW0gY29tIG8gY2FtcG8gcGFyYSBkaWdpdGHDp8Ojb1xuICAgKiBkZSBjw7NkaWdvIFNNU1xuICAgKlxuICAgKlxuICAgKiA+IFBvZGUtc2UgYXRyaWJ1aXIgYSBtZW5zYWdlbSBkZSBlcnJvIChtZXNzYWdlKSBwYXJhIG8gYXRyaWJ1dG8gYHQtY29kZS1lcnJvcmAgY29uZm9ybWUgcmV0b3JubyBhYmFpeG86XG4gICAqXG4gICAqIGBgYFxuICAgKiA0MDBcbiAgICogIHtcbiAgICogICAgZXJyb3Ige1xuICAgKiAgICAgIG1lc3NhZ2U6ICdFcnJvciBNZXNzYWdlJ1xuICAgKiAgICB9XG4gICAqICB9XG4gICAqIGBgYFxuICAgKlxuICAgKlxuICAgKiBFbSBjYXNvIGRlICoqc3VjZXNzbyoqLCBlc3BlcmEtc2UgYSByZXNwb3N0YSBkZXN0YSByZXF1aXNpw6fDo28gcmV0b3JuYW5kbyBhIHNlZ3VpbnRlIGRlZmluacOnw6NvOlxuICAgKlxuICAgKiBgYGBcbiAgICogMjAwOlxuICAgKiAge1xuICAgKiAgICB0b2tlbjogdG9rZW4sXG4gICAqICAgIHVybENoYW5nZVBhc3N3b3JkPzogdXJsXG4gICAqICB9XG4gICAqIGBgYFxuICAgKlxuICAgKlxuICAgKiAtICoqdG9rZW4qKjogVG9rZW4gZGUgYWx0ZXJhw6fDo28gZGUgc2VuaGE7XG4gICAqIC0gKip1cmxDaGFuZ2VQYXNzd29yZCoqOiB1cmwgcGFyYSBvIGZvcm11bMOhcmlvIGRlIGFsdGVyYcOnw6NvIGRlIHNlbmhhLlxuICAgKlxuICAgKlxuICAgKiBPIGNvbXBvbmVudGUgZXN0w6EgY29uZmlndXJhZG8gcGFyYSByZWRpcmVjaW9uYXIgcGFyYSBhIHVybCBlc3RhYmVsZWNpZGEgZW0gYHVybENoYW5nZVBhc3N3b3JkYC5cbiAgICpcbiAgICogPiBDYXNvIG7Do28gc2VqYSBwYXNzYWRvIHZhbG9yIHBhcmEgdXJsQ2hhbmdlUGFzc3dvcmQsXG4gICAqIGEgdXJsIHVzYWRhIHBhcmEgdmFsaWRhw6fDo28gc2Vyw6EgYSBgPHQtdXJsLXJlY292ZXJ5Pi9jaGFuZ2VQYXNzd29yZD90b2tlbj08dG9rZW4+YC5cbiAgICpcbiAgICogKlByb2Nlc3NvIGZpbmFsaXphZG8uKlxuICAgKi9cbiAgQElucHV0KCd0LXVybC1yZWNvdmVyeScpIHVybFJlY292ZXJ5Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEHDp8OjbyBjb250ZW5kbyBjb21vIHBhcsOibWV0cm8gbyBjw7NkaWdvIGVudmlhZG8gcG9yIFNNUyBlIGRpZ2l0YWRvIHBlbG8gdXN1w6FyaW8uXG4gICAqXG4gICAqID4gRXN0YSBwcm9wcmllZGFkZSBzZXLDoSBpZ25vcmFkYSBzZSBmb3IgZGVmaW5pZG8gdmFsb3IgcGFyYSBhIHByb3ByaWVkYWRlIGB0LXVybC1yZWNvdmVyeWAuXG4gICAqL1xuICBAT3V0cHV0KCd0LWNvZGUtc3VibWl0JykgY29kZVN1Ym1pdCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEHDp8OjbyBjb250ZW5kbyBvIGVtYWlsIGNvbW8gcGFyw6JtZXRybyBlIHF1ZSDDqSBleGVjdXRhZGEgcXVhbmRvIG8gdXN1w6FyaW8gY2xpY2Egc29icmVzIG9zIGJvdMO1ZXMgZGUgJ2VudmlhcicgZSAncmVlbnZpYXInIGUtbWFpbC5cbiAgICpcbiAgICogPiBFc3RhIHByb3ByaWVkYWRlIHNlcsOhIGlnbm9yYWRhIHNlIGZvciBkZWZpbmlkbyB2YWxvciBwYXJhIGEgcHJvcHJpZWRhZGUgYHQtdXJsLXJlY292ZXJ5YC5cbiAgICovXG4gIEBPdXRwdXQoJ3Qtc3VibWl0Jykgc3VibWl0ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgLyoqXG4gICAqIEFjw6NvIHBhcmEgY29uY2x1c8OjbyBkZSBwcm9jZXNzbyBlIGZlY2hhbWVudG8gZGEgbW9kYWwuIEluZGljYS1zZSBzdWEgdXRpbGl6YcOnw6NvXG4gICAqIHBhcmEgYXDDs3MgbyBlbnZpbyBlIHZhbGlkYcOnw6NvIGRvIGPDs2RpZ28gU01TIGVudmlhZG8gcGVsbyB1c3XDoXJpby5cbiAgICpcbiAgICogPiBOYXMgbW9kYWxzIGVtIHF1ZSBow6EgYSBhw6fDo28gZGUgJ2NhbmNlbGFyJyBkaXNwZW5zYS1zZSBvIHVzbyBkZXN0YSBhw6fDo28gcG9pcyBvIGNvbXBvbmVudGUgasOhIHRyYXRhIG8gZmVjaGFtZW50byBkYSBtb2RhbC5cbiAgICovXG4gIGFic3RyYWN0IGNvbXBsZXRlZCgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBBYnJlIGEgbW9kYWwgZGUgcHJlZW5jaGltZW50byBkZSBlbWFpbCBvdSBuw7ptZXJvIGRlIHRlbGVmb25lIHBhcmEgc29saWNpdGHDp8OjbyBkZSB0cm9jYSBkZSBzZW5oYS5cbiAgICovXG4gIGFic3RyYWN0IG9wZW4oKTogdm9pZDtcblxuICAvKipcbiAgICogQWJyZSBhIG1vZGFsIGRlIGNvbmZpcm1hw6fDo28gZGUgZW52aW8gZGUgZW1haWwuXG4gICAqL1xuICBhYnN0cmFjdCBvcGVuQ29uZmlybWF0aW9uKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEFicmUgYSBtb2RhbCBkZSBwcmVlbmNoaW1lbnRvIGRvIGPDs2RpZ28gU01TIGVudmlhZG8gYW8gdXN1w6FyaW8uXG4gICAqL1xuICBhYnN0cmFjdCBvcGVuU21zQ29kZSgpOiB2b2lkO1xuXG4gIHByaXZhdGUgY29uY2F0ZW5hdGVTTVNFcnJvck1lc3NhZ2UodmFsdWU6IHN0cmluZykge1xuICAgIGNvbnN0IGxpdGVyYWxDb2RlRXJyb3JNZXNzYWdlID0gdGhpcy5saXRlcmFscy5zbXNDb2RlRXJyb3JNZXNzYWdlUGhyYXNlO1xuXG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlICE9PSAnJyA/IGAke2xpdGVyYWxDb2RlRXJyb3JNZXNzYWdlfSAke3RoaXMubGl0ZXJhbHMucHJlcG9zaXRpb25Jbn0gJHt2YWx1ZX0uYCA6IGxpdGVyYWxDb2RlRXJyb3JNZXNzYWdlO1xuICB9XG5cbn1cbiJdfQ==