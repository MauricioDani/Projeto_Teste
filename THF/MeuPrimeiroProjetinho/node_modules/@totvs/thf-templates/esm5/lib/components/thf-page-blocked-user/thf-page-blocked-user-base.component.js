/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { ThfPageBlockedUserReason } from './enums/thf-page-blocked-user-reason.enum';
/** @type {?} */
var ThfPageBlockedUserReasonDefault = ThfPageBlockedUserReason.None;
/** @type {?} */
var ThfPageBlockedUserParamsDefault = { attempts: 5, days: 90, hours: 24 };
/**
 * \@description
 *
 * O componente `thf-page-blocked-user` é utilizado como template para tela de bloqueio de usuário.
 * É possível definir entre três tipos de telas para alertar o usuário sobre um eventual bloqueio de login.
 *
 * Cada modelo de bloqueio possui uma imagem e texto adequados à situação.
 * Os textos das telas são pré-definidos e imutáveis, porém,
 * é possível estipular parâmetros como dias, horas e tentativas de acesso esgotadas.
 *
 * Por fim, há propriedades para adição de telefone e/ou email para contato e também a definição para a url de retorno.
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/\@totvs/thf-theme/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 *
 * _______________
 *
 * #### Praticidade
 * O `thf-page-blocked-user`, assim como suas propriedades, pode também ser transmitido diretamente pelas configuraçãos de rota e,
 * desta maneira, dispensa-se qualquer menção e/ou importação no restante da aplicação. O exemplo abaixo exemplifica
 * a forma dinâmica com a qual o template pode ser gerado se navegasse para uma rota denominada como `/access-denied`:
 *
 *
 * ```
 *   import { ThfPageBlockedUserComponent, ThfPageBlockedUserReason } from '\@totvs/thf-templates';
 *
 *   ...
 *   const routes: Routes = [
 *     {
 *       path: 'access-denied', component: ThfPageBlockedUserComponent, data: {
 *         contactEmail: 'dev.totvs\@totvs.com',
 *         contactPhone: '0800 1234 000',
 *         reason: ThfPageBlockedUserReason.ExpiredPassword,
 *         urlBack: '/home'
 *       }
 *     }
 *     ...
 *   ];
 *
 * \@NgModule({
 *     imports: [RouterModule.forRoot(routes)],
 *     exports: [RouterModule]
 *   })
 *   export class AppRoutingModule { }
 * ```
 *
 * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.
 *
 */
var ThfPageBlockedUserBaseComponent = /** @class */ (function () {
    function ThfPageBlockedUserBaseComponent() {
        this._params = tslib_1.__assign({}, ThfPageBlockedUserParamsDefault);
        this._reason = ThfPageBlockedUserReason.None;
        this._urlBack = '/';
    }
    Object.defineProperty(ThfPageBlockedUserBaseComponent.prototype, "params", {
        get: /**
         * @return {?}
         */
        function () {
            return this._params;
        },
        /**
         * @optional
         *
         * @description
         *
         * Designação de valores usados para a customização da mensagem de bloqueio.
         * Confira abaixo os valores pré-definidos.
         *
         * ```
         *  const customLiterals: ThfPageBlockedUserReasonParams = {
         *    attempts: 5,
         *    days: 90,
         *    hours: 24
         *  };
         * ```
         *
         * > Salientamos a importância e atenção para configuração desses valores conforme definidos no projeto.
         *
         * > Veja os parâmetros customizáveis na interface `ThfPageBlockedUserReasonParams`.
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Designação de valores usados para a customização da mensagem de bloqueio.
         * Confira abaixo os valores pré-definidos.
         *
         * ```
         *  const customLiterals: ThfPageBlockedUserReasonParams = {
         *    attempts: 5,
         *    days: 90,
         *    hours: 24
         *  };
         * ```
         *
         * > Salientamos a importância e atenção para configuração desses valores conforme definidos no projeto.
         *
         * > Veja os parâmetros customizáveis na interface `ThfPageBlockedUserReasonParams`.
         *
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object) {
                /** @type {?} */
                var keys = Object.keys(value);
                /** @type {?} */
                var newParams_1 = tslib_1.__assign({}, ThfPageBlockedUserParamsDefault);
                keys.forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                function (key) {
                    newParams_1[key] = value[key];
                }));
                this._params = newParams_1;
            }
            else {
                this._params = tslib_1.__assign({}, ThfPageBlockedUserParamsDefault);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPageBlockedUserBaseComponent.prototype, "reason", {
        get: /**
         * @return {?}
         */
        function () {
            return this._reason;
        },
        /**
         * @optional
         *
         * @description
         *
         * Definição de motivo de bloqueio de usuário. As informações modificam conforme o motivo selecionado.
         *
         * > Veja os valores válidos no *enum* `ThfPageBlockedUserReason`.
         *
         * @default `ThfPageBlockedUserReason.None`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Definição de motivo de bloqueio de usuário. As informações modificam conforme o motivo selecionado.
         *
         * > Veja os valores válidos no *enum* `ThfPageBlockedUserReason`.
         *
         * \@default `ThfPageBlockedUserReason.None`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._reason = ((/** @type {?} */ (Object))).values(ThfPageBlockedUserReason).includes(value) ? value : ThfPageBlockedUserReasonDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThfPageBlockedUserBaseComponent.prototype, "urlBack", {
        get: /**
         * @return {?}
         */
        function () {
            return this._urlBack;
        },
        /**
         * @optional
         *
         * @description
         *
         * URL para a ação de retorno da página.
         *
         * @default `/`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * URL para a ação de retorno da página.
         *
         * \@default `/`
         * @param {?} url
         * @return {?}
         */
        function (url) {
            this._urlBack = url;
        },
        enumerable: true,
        configurable: true
    });
    ThfPageBlockedUserBaseComponent.propDecorators = {
        contactEmail: [{ type: Input, args: ['t-contact-email',] }],
        contactPhone: [{ type: Input, args: ['t-contact-phone',] }],
        params: [{ type: Input, args: ['t-params',] }],
        logo: [{ type: Input, args: ['t-logo',] }],
        reason: [{ type: Input, args: ['t-reason',] }],
        secondaryLogo: [{ type: Input, args: ['t-secondary-logo',] }],
        urlBack: [{ type: Input, args: ['t-url-back',] }]
    };
    return ThfPageBlockedUserBaseComponent;
}());
export { ThfPageBlockedUserBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageBlockedUserBaseComponent.prototype._params;
    /**
     * @type {?}
     * @private
     */
    ThfPageBlockedUserBaseComponent.prototype._reason;
    /**
     * @type {?}
     * @private
     */
    ThfPageBlockedUserBaseComponent.prototype._urlBack;
    /**
     * \@optional
     *
     * \@description
     *
     * Valor para o email de contato que deve ser exibido. A ação está de acordo com o protocolo MAILTO e é possível definir
     * tanto rotas internas quanto externas.
     * @type {?}
     */
    ThfPageBlockedUserBaseComponent.prototype.contactEmail;
    /**
     * \@optional
     *
     * \@description
     *
     * Valor para o telefone de contato que deve ser exibido. A ação está de acordo com o protocolo TEL.
     *
     * > A propriedade não contem tratamento de máscara, fica a critério do desenvolvedor defini-la.
     * @type {?}
     */
    ThfPageBlockedUserBaseComponent.prototype.contactPhone;
    /**
     * Caminho para a logomarca localizada na parte superior, caso não seja definida ou seja inválida assume a logo padrão da TOTVS.
     * @type {?}
     */
    ThfPageBlockedUserBaseComponent.prototype.logo;
    /**
     * \@optional
     *
     * \@description
     *
     * Caminho para a logomarca localizada no rodapé.
     * @type {?}
     */
    ThfPageBlockedUserBaseComponent.prototype.secondaryLogo;
}
//# sourceMappingURL=data:application/json;base64,