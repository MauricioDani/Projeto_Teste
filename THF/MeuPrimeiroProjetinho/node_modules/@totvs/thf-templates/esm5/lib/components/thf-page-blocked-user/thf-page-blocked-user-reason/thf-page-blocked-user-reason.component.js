/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, Input } from '@angular/core';
import { browserLanguage, thfLocaleDefault } from '../../../utils/util';
import { thfPageBlockedUserLiterals } from './../literals/i18n/thf-page-blocked-user-literals';
import { ThfPageBlockedUserReason } from '../enums/thf-page-blocked-user-reason.enum';
var ThfPageBlockedUserReasonComponent = /** @class */ (function () {
    function ThfPageBlockedUserReasonComponent(changeDetector) {
        this.changeDetector = changeDetector;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ThfPageBlockedUserReasonComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.reason || changes.params) {
            this.getLiterals();
        }
    };
    /**
     * @return {?}
     */
    ThfPageBlockedUserReasonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getLiterals();
    };
    /**
     * @return {?}
     */
    ThfPageBlockedUserReasonComponent.prototype.getImageByReasonType = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var reasonImage;
        switch (this.reason) {
            case 'none': {
                reasonImage = 'big-lock';
                break;
            }
            case 'exceededAttempts': {
                reasonImage = 'blocked-user';
                break;
            }
            case 'expiredPassword': {
                reasonImage = 'expired';
                break;
            }
        }
        return "./assets/images/" + reasonImage + ".svg";
    };
    /**
     * @return {?}
     */
    ThfPageBlockedUserReasonComponent.prototype.getParams = /**
     * @return {?}
     */
    function () {
        this.literalParams =
            this.reason === 'expiredPassword' ? [this.params.days, this.params.days] : [this.params.attempts, this.params.hours];
    };
    /**
     * @private
     * @return {?}
     */
    ThfPageBlockedUserReasonComponent.prototype.getLiterals = /**
     * @private
     * @return {?}
     */
    function () {
        this.getParams();
        this.literals = tslib_1.__assign({}, thfPageBlockedUserLiterals[this.reason][thfLocaleDefault], thfPageBlockedUserLiterals[this.reason][browserLanguage()]);
        this.changeDetector.detectChanges();
    };
    ThfPageBlockedUserReasonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-page-blocked-user-reason',
                    template: "<div class=\"thf-page-blocked-user-reason-content\">\n  <img \n    class=\"thf-page-blocked-user-image thf-mb-3\" \n    [src]=\"getImageByReasonType()\"> \n  <div class=\"thf-page-blocked-user-header thf-mb-md-3 thf-row\">\n    <div class=\"thf-md-12\">{{ literals?.title }}</div>\n  </div>\n  <div class=\"thf-page-blocked-user-text thf-font-text thf-row\">\n    <div class=\"thf-mb-sm-2 thf-mb-md-3 thf-md-12 thf-page-blocked-user-text-bold\">{{ literals?.firstPhrase | thfI18n:literalParams }}</div>\n    <div class=\"thf-mb-sm-2 thf-mb-md-3 thf-md-12\">{{ literals?.secondPhrase }}</div>\n    <div class=\"thf-mb-sm-2 thf-mb-md-3 thf-md-12\" *ngIf=\"literals?.thirdPhrase\">{{ literals?.thirdPhrase }}</div>\n  </div>\n</div>"
                }] }
    ];
    /** @nocollapse */
    ThfPageBlockedUserReasonComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    ThfPageBlockedUserReasonComponent.propDecorators = {
        params: [{ type: Input, args: ['t-params',] }],
        reason: [{ type: Input, args: ['t-reason',] }]
    };
    return ThfPageBlockedUserReasonComponent;
}());
export { ThfPageBlockedUserReasonComponent };
if (false) {
    /** @type {?} */
    ThfPageBlockedUserReasonComponent.prototype.literalParams;
    /** @type {?} */
    ThfPageBlockedUserReasonComponent.prototype.literals;
    /** @type {?} */
    ThfPageBlockedUserReasonComponent.prototype.params;
    /** @type {?} */
    ThfPageBlockedUserReasonComponent.prototype.reason;
    /**
     * @type {?}
     * @private
     */
    ThfPageBlockedUserReasonComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXRlbXBsYXRlcy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1wYWdlLWJsb2NrZWQtdXNlci90aGYtcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uL3RoZi1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQW9DLE1BQU0sZUFBZSxDQUFDO0FBRXRHLE9BQU8sRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV4RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUMvRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUd0RjtJQWFFLDJDQUFvQixjQUFpQztRQUFqQyxtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7SUFBRyxDQUFDOzs7OztJQUV6RCx1REFBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQzs7OztJQUVELG9EQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7O0lBRUQsZ0VBQW9COzs7SUFBcEI7O1lBQ00sV0FBVztRQUVmLFFBQVEsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNuQixLQUFLLE1BQU0sQ0FBQyxDQUFDO2dCQUNYLFdBQVcsR0FBRyxVQUFVLENBQUM7Z0JBQ3pCLE1BQU07YUFDUDtZQUNELEtBQUssa0JBQWtCLENBQUMsQ0FBQztnQkFDdkIsV0FBVyxHQUFHLGNBQWMsQ0FBQztnQkFDN0IsTUFBTTthQUNQO1lBQ0QsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDO2dCQUN0QixXQUFXLEdBQUcsU0FBUyxDQUFDO2dCQUN4QixNQUFNO2FBQ1A7U0FDRjtRQUNELE9BQU8scUJBQW1CLFdBQVcsU0FBTSxDQUFDO0lBQzlDLENBQUM7Ozs7SUFFRCxxREFBUzs7O0lBQVQ7UUFDRSxJQUFJLENBQUMsYUFBYTtZQUNoQixJQUFJLENBQUMsTUFBTSxLQUFLLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6SCxDQUFDOzs7OztJQUVPLHVEQUFXOzs7O0lBQW5CO1FBQ0UsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRWpCLElBQUksQ0FBQyxRQUFRLHdCQUNSLDBCQUEwQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUN6RCwwQkFBMEIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FDOUQsQ0FBQztRQUVGLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7Z0JBM0RGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsOEJBQThCO29CQUN4QyxxdUJBQTREO2lCQUM3RDs7OztnQkFYUSxpQkFBaUI7Ozt5QkFpQnZCLEtBQUssU0FBQyxVQUFVO3lCQUVoQixLQUFLLFNBQUMsVUFBVTs7SUFrRG5CLHdDQUFDO0NBQUEsQUE3REQsSUE2REM7U0F6RFksaUNBQWlDOzs7SUFFNUMsMERBQWM7O0lBQ2QscURBQTBGOztJQUUxRixtREFBMEQ7O0lBRTFELG1EQUFvRDs7Ozs7SUFFeEMsMkRBQXlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGJyb3dzZXJMYW5ndWFnZSwgdGhmTG9jYWxlRGVmYXVsdCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyB0aGZQYWdlQmxvY2tlZFVzZXJMaXRlcmFscyB9IGZyb20gJy4vLi4vbGl0ZXJhbHMvaTE4bi90aGYtcGFnZS1ibG9ja2VkLXVzZXItbGl0ZXJhbHMnO1xuaW1wb3J0IHsgVGhmUGFnZUJsb2NrZWRVc2VyUmVhc29uIH0gZnJvbSAnLi4vZW51bXMvdGhmLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi5lbnVtJztcbmltcG9ydCB7IFRoZlBhZ2VCbG9ja2VkVXNlclJlYXNvblBhcmFtcyB9IGZyb20gJy4uL2ludGVyZmFjZXMvdGhmLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi1wYXJhbXMuaW50ZXJmYWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGhmLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi90aGYtcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUaGZQYWdlQmxvY2tlZFVzZXJSZWFzb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCB7XG5cbiAgbGl0ZXJhbFBhcmFtcztcbiAgbGl0ZXJhbHM6IHt0aXRsZTogc3RyaW5nLCBmaXJzdFBocmFzZTogc3RyaW5nLCBzZWNvbmRQaHJhc2U6IHN0cmluZywgdGhpcmRQaHJhc2U6IHN0cmluZ307XG5cbiAgQElucHV0KCd0LXBhcmFtcycpIHBhcmFtczogVGhmUGFnZUJsb2NrZWRVc2VyUmVhc29uUGFyYW1zO1xuXG4gIEBJbnB1dCgndC1yZWFzb24nKSByZWFzb246IFRoZlBhZ2VCbG9ja2VkVXNlclJlYXNvbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMucmVhc29uIHx8IGNoYW5nZXMucGFyYW1zKSB7XG4gICAgICB0aGlzLmdldExpdGVyYWxzKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5nZXRMaXRlcmFscygpO1xuICB9XG5cbiAgZ2V0SW1hZ2VCeVJlYXNvblR5cGUoKSB7XG4gICAgbGV0IHJlYXNvbkltYWdlO1xuXG4gICAgc3dpdGNoICh0aGlzLnJlYXNvbikge1xuICAgICAgY2FzZSAnbm9uZSc6IHtcbiAgICAgICAgcmVhc29uSW1hZ2UgPSAnYmlnLWxvY2snO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2V4Y2VlZGVkQXR0ZW1wdHMnOiB7XG4gICAgICAgIHJlYXNvbkltYWdlID0gJ2Jsb2NrZWQtdXNlcic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnZXhwaXJlZFBhc3N3b3JkJzoge1xuICAgICAgICByZWFzb25JbWFnZSA9ICdleHBpcmVkJztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBgLi9hc3NldHMvaW1hZ2VzLyR7cmVhc29uSW1hZ2V9LnN2Z2A7XG4gIH1cblxuICBnZXRQYXJhbXMoKSB7XG4gICAgdGhpcy5saXRlcmFsUGFyYW1zID1cbiAgICAgIHRoaXMucmVhc29uID09PSAnZXhwaXJlZFBhc3N3b3JkJyA/IFt0aGlzLnBhcmFtcy5kYXlzLCB0aGlzLnBhcmFtcy5kYXlzXSA6IFt0aGlzLnBhcmFtcy5hdHRlbXB0cywgdGhpcy5wYXJhbXMuaG91cnNdO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRMaXRlcmFscygpIHtcbiAgICB0aGlzLmdldFBhcmFtcygpO1xuXG4gICAgdGhpcy5saXRlcmFscyA9IHtcbiAgICAgIC4uLnRoZlBhZ2VCbG9ja2VkVXNlckxpdGVyYWxzW3RoaXMucmVhc29uXVt0aGZMb2NhbGVEZWZhdWx0XSxcbiAgICAgIC4uLnRoZlBhZ2VCbG9ja2VkVXNlckxpdGVyYWxzW3RoaXMucmVhc29uXVticm93c2VyTGFuZ3VhZ2UoKV0sXG4gICAgfTtcblxuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbn1cbiJdfQ==