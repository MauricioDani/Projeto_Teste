/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { DatePipe } from '@angular/common';
import { ThfInfoOrientation } from '@totvs/thf-ui';
var ThfPageJobSchedulerSummaryComponent = /** @class */ (function () {
    function ThfPageJobSchedulerSummaryComponent(datePipe) {
        this.datePipe = datePipe;
        this.executionValue = '';
        this.firstExecutionValue = '';
        this.infoOrientation = ThfInfoOrientation.Horizontal;
        this.periodicityValue = '';
        this.recurrentValue = '';
        this.literals = (/** @type {?} */ ({}));
        this.parameters = [];
        this.value = (/** @type {?} */ ({}));
    }
    /**
     * @return {?}
     */
    ThfPageJobSchedulerSummaryComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _a = this.value, periodicity = _a.periodicity, hour = _a.hour, dayOfMonth = _a.dayOfMonth, daysOfWeek = _a.daysOfWeek, recurrent = _a.recurrent, firstExecution = _a.firstExecution, firstExecutionHour = _a.firstExecutionHour;
        this.periodicityValue = this.getPeriodicityLabel(periodicity);
        this.executionValue = this.getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth);
        this.firstExecutionValue = this.getFirstExecutionLabel(firstExecution, firstExecutionHour);
        this.recurrentValue = this.getRecurrentValue(recurrent);
    };
    /**
     * @private
     * @param {?} periodicity
     * @param {?=} hour
     * @param {?=} daysOfWeek
     * @param {?=} dayOfMonth
     * @return {?}
     */
    ThfPageJobSchedulerSummaryComponent.prototype.getExecutionValue = /**
     * @private
     * @param {?} periodicity
     * @param {?=} hour
     * @param {?=} daysOfWeek
     * @param {?=} dayOfMonth
     * @return {?}
     */
    function (periodicity, hour, daysOfWeek, dayOfMonth) {
        switch (periodicity) {
            case 'daily':
                return this.getHourLabel(hour);
            case 'monthly':
                return this.getMonthlyLabelExecution(dayOfMonth, hour);
            case 'weekly':
                return this.getWeeklyLabelExecution(daysOfWeek, hour);
            default:
                return this.literals.notReported;
        }
    };
    /**
     * @private
     * @param {?} firstExecution
     * @param {?=} firstExecutionHour
     * @return {?}
     */
    ThfPageJobSchedulerSummaryComponent.prototype.getFirstExecutionLabel = /**
     * @private
     * @param {?} firstExecution
     * @param {?=} firstExecutionHour
     * @return {?}
     */
    function (firstExecution, firstExecutionHour) {
        if (firstExecution) {
            /** @type {?} */
            var date = this.datePipe.transform(firstExecution, 'dd/MM/yyyy', '-0200');
            return date + " " + this.getHourLabel(firstExecutionHour);
        }
        else {
            return this.literals.notReported;
        }
    };
    /**
     * @private
     * @param {?} hour
     * @return {?}
     */
    ThfPageJobSchedulerSummaryComponent.prototype.getHourLabel = /**
     * @private
     * @param {?} hour
     * @return {?}
     */
    function (hour) {
        return this.literals.at + " " + (hour || '00:00') + "h";
    };
    /**
     * @private
     * @param {?} dayOfMonth
     * @param {?} hour
     * @return {?}
     */
    ThfPageJobSchedulerSummaryComponent.prototype.getMonthlyLabelExecution = /**
     * @private
     * @param {?} dayOfMonth
     * @param {?} hour
     * @return {?}
     */
    function (dayOfMonth, hour) {
        /** @type {?} */
        var hourLabel = this.getHourLabel(hour);
        return this.literals.day + " " + dayOfMonth + " " + hourLabel;
    };
    /**
     * @private
     * @param {?} periodicity
     * @return {?}
     */
    ThfPageJobSchedulerSummaryComponent.prototype.getPeriodicityLabel = /**
     * @private
     * @param {?} periodicity
     * @return {?}
     */
    function (periodicity) {
        switch (periodicity) {
            case 'daily':
                return this.literals.daily;
            case 'monthly':
                return this.literals.monthly;
            case 'weekly':
                return this.literals.weekly;
            default:
                return this.literals.single;
        }
    };
    /**
     * @private
     * @param {?} recurrent
     * @return {?}
     */
    ThfPageJobSchedulerSummaryComponent.prototype.getRecurrentValue = /**
     * @private
     * @param {?} recurrent
     * @return {?}
     */
    function (recurrent) {
        return recurrent ? this.literals.yes : this.literals.no;
    };
    /**
     * @private
     * @return {?}
     */
    ThfPageJobSchedulerSummaryComponent.prototype.getSorterWeekDays = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            'sunday': 0,
            'monday': 1,
            'tuesday': 2,
            'wednesday': 3,
            'thursday': 4,
            'friday': 5,
            'saturday': 6
        };
    };
    /**
     * @private
     * @param {?} day
     * @return {?}
     */
    ThfPageJobSchedulerSummaryComponent.prototype.getTranslateWeekDay = /**
     * @private
     * @param {?} day
     * @return {?}
     */
    function (day) {
        /** @type {?} */
        var days = {
            Sunday: this.literals.sunday,
            Monday: this.literals.monday,
            Tuesday: this.literals.tuesday,
            Wednesday: this.literals.wednesday,
            Thursday: this.literals.thursday,
            Friday: this.literals.friday,
            Saturday: this.literals.saturday,
        };
        return days[day] || '';
    };
    /**
     * @private
     * @param {?=} days
     * @return {?}
     */
    ThfPageJobSchedulerSummaryComponent.prototype.getWeekDaysLabel = /**
     * @private
     * @param {?=} days
     * @return {?}
     */
    function (days) {
        var _this = this;
        if (days === void 0) { days = []; }
        /** @type {?} */
        var weekDaysSorted = this.sortWeekDays(days);
        return weekDaysSorted.map((/**
         * @param {?} day
         * @return {?}
         */
        function (day) { return _this.getTranslateWeekDay(day); })).join(', ');
    };
    /**
     * @private
     * @param {?} daysOfWeek
     * @param {?} hour
     * @return {?}
     */
    ThfPageJobSchedulerSummaryComponent.prototype.getWeeklyLabelExecution = /**
     * @private
     * @param {?} daysOfWeek
     * @param {?} hour
     * @return {?}
     */
    function (daysOfWeek, hour) {
        if (daysOfWeek && Array.isArray(daysOfWeek)) {
            return this.getWeekDaysLabel(daysOfWeek) + " " + this.getHourLabel(hour);
        }
        else {
            return this.literals.notReported;
        }
    };
    /**
     * @private
     * @param {?=} days
     * @return {?}
     */
    ThfPageJobSchedulerSummaryComponent.prototype.sortWeekDays = /**
     * @private
     * @param {?=} days
     * @return {?}
     */
    function (days) {
        if (days === void 0) { days = []; }
        /** @type {?} */
        var sorterWeekDays = this.getSorterWeekDays();
        return days.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            /** @type {?} */
            var currDay = a.toLowerCase();
            /** @type {?} */
            var nextDay = b.toLowerCase();
            return sorterWeekDays[currDay] > sorterWeekDays[nextDay] ? 1 : -1;
        }));
    };
    ThfPageJobSchedulerSummaryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'thf-page-job-scheduler-summary',
                    template: "<div class=\"thf-md-12\">\n  <thf-info\n    [t-label]=\"literals.process\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"value.processID\">\n  </thf-info>\n\n  <thf-info\n    [t-label]=\"literals.periodicity\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"periodicityValue\">\n  </thf-info>\n\n  <thf-info *ngIf=\"value.periodicity !== 'single'\"\n    [t-label]=\"literals.execution\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"executionValue\">\n  </thf-info>\n\n  <thf-info\n    [t-label]=\"literals.recurrent\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"recurrentValue\">\n  </thf-info>\n\n  <thf-info\n    [t-label]=\"literals.firstExecution\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"firstExecutionValue\">\n  </thf-info>\n</div>\n\n<thf-widget *ngIf=\"parameters && parameters.length\"\n  class=\"thf-pt-1 thf-pb-1 thf-md-12\"\n  [t-title]=\"literals.parameters\">\n\n  <thf-dynamic-view\n    [t-fields]=\"parameters\"\n    [t-value]=\"value.executionParameter\">\n  </thf-dynamic-view>\n\n</thf-widget>\n\n"
                }] }
    ];
    /** @nocollapse */
    ThfPageJobSchedulerSummaryComponent.ctorParameters = function () { return [
        { type: DatePipe }
    ]; };
    ThfPageJobSchedulerSummaryComponent.propDecorators = {
        literals: [{ type: Input, args: ['t-literals',] }],
        parameters: [{ type: Input, args: ['t-parameters',] }],
        value: [{ type: Input, args: ['t-value',] }]
    };
    return ThfPageJobSchedulerSummaryComponent;
}());
export { ThfPageJobSchedulerSummaryComponent };
if (false) {
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.executionValue;
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.firstExecutionValue;
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.infoOrientation;
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.periodicityValue;
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.recurrentValue;
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.literals;
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.parameters;
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.value;
    /**
     * @type {?}
     * @private
     */
    ThfPageJobSchedulerSummaryComponent.prototype.datePipe;
}
//# sourceMappingURL=data:application/json;base64,