{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@totvs/thf-templates/lib/utils/util.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/literals/i18n/thf-modal-password-recovery-literals.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/enums/thf-modal-password-recovery-type.enum.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/thf-modal-password-recovery-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/enums/thf-modal-password-recovery-modal-content.enum.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/thf-modal-password-recovery.service.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/thf-modal-password-recovery.component.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/thf-modal-password-recovery-error-message/thf-modal-password-recovery-error-message.component.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/thf-modal-password-recovery.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-background/thf-page-background.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-background/thf-page-background.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-blocked-user/enums/thf-page-blocked-user-reason.enum.ts","ng://@totvs/thf-templates/lib/components/thf-page-blocked-user/thf-page-blocked-user-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-blocked-user/thf-page-blocked-user.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-blocked-user/thf-page-blocked-user-contacts/thf-page-blocked-user-contacts.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-blocked-user/literals/i18n/thf-page-blocked-user-literals.ts","ng://@totvs/thf-templates/lib/components/thf-page-blocked-user/thf-page-blocked-user-reason/thf-page-blocked-user-reason.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-blocked-user/thf-page-blocked-user.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-change-password/thf-page-change-password-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-change-password/literals/i18n/thf-page-change-password-literals.ts","ng://@totvs/thf-templates/lib/components/thf-page-change-password/thf-page-change-password.service.ts","ng://@totvs/thf-templates/lib/components/thf-page-change-password/thf-page-change-password.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-change-password/thf-page-change-password.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-detail/thf-page-dynamic.service.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-detail/thf-page-dynamic-detail.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-detail/thf-page-dynamic-detail.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-edit/thf-page-dynamic.service.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-edit/thf-page-dynamic-edit.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-edit/thf-page-dynamic-edit.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-search/thf-advanced-filter/thf-advanced-filter-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-search/thf-advanced-filter/thf-advanced-filter.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-search/thf-page-dynamic-search-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-search/thf-page-dynamic-search.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-search/thf-page-dynamic-search.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-table/thf-page-dynamic-list-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-table/thf-page-dynamic.service.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-table/thf-page-dynamic-table.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-table/thf-page-dynamic-table.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler-internal.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler-literals.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler.service.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler-lookup.service.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler-execution/thf-page-job-scheduler-execution.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler-parameters/thf-page-job-scheduler-parameters.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler-summary/thf-page-job-scheduler-summary.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-login/enums/thf-page-login-authentication-type.enum.ts","ng://@totvs/thf-templates/lib/components/thf-page-login/thf-page-login-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-login/thf-page-login.service.ts","ng://@totvs/thf-templates/lib/components/thf-page-login/thf-page-login.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-login/thf-page-login-popover/thf-page-login-popover.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-login/thf-page-login.module.ts","ng://@totvs/thf-templates/lib/components/components.module.ts","ng://@totvs/thf-templates/lib/thf-templates.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__read","o","m","r","ar","error","__spread","concat","thfLocales","thfLocaleDefault","browserLanguage","language","getBrowserLanguage","toLowerCase","substring","includes","getShortBrowserLanguage","navigator","convertToBoolean","val","trim","isTypeof","object","type","isExternalLink","url","startsWith","mapObjectByProperties","properties","reduce","selectedProperties","property","_a","valuesFromObject","keys","map","addZero","time","thfModalPasswordRecoveryLiterals","en","cancelButton","closeButton","continueButton","email","emailErrorMessagePhrase","emailSentConfirmationPhrase","emailSentTitle","forgotPasswordTitle","insertCode","insertEmail","insertPhone","phoneErrorMessagePhrase","prepositionIn","prepositionOr","recoveryPasswordPhrase","resendEmailButton","resendSmsCodePhrase","sendAgainPhrase","sendAgain","sendButton","sentSmsCodePhrase","sms","smsCodeErrorMessagePhrase","supportContact","telephone","typeCodeTitle","es","pt","All","Email","SMS","ThfModalPasswordRecoveryDefaultMaxLength","ThfModalPasswordRecoveryDefaultMinLength","ThfModalPasswordRecoveryDefaultPhone","ThfModalPasswordRecoveryTypeDefault","ThfModalPasswordRecoveryType","ThfModalPasswordRecoveryBaseComponent","_phoneMask","_type","maxLength","minLength","literals","codeSubmit","EventEmitter","submit","defineProperty","_contactEmail","smsCodeErrorMessage","concatenateSMSErrorMessage","values","literalCodeErrorMessage","Input","args","Output","SMSCode","Confirmation","ThfModalPasswordRecoveryService","http","post","urlRecovery","item","params","observe","Injectable","HttpClient","ThfModalPasswordRecoveryComponent","_super","router","thfI18nPipe","thfModalPasswordRecoveryService","_this","chosenTypeFormOption","codeMask","emailModal","emailModalPhrases","endpoint","invalidCode","invalidEmail","modalType","ThfModalPasswordRecoveryModalContent","submittedCodeValue","submittedContactValue","primaryAction","undefined","action","secondaryAction","typeFormOptions","tslib_1.__extends","ngOnDestroy","passwordRecoverySubscription","unsubscribe","smsCodeSubscription","completed","cancelAction","formModelChangesCheck","form","invalidForm","invalid","dirty","disabled","codeError","showCustomCodeError","pristine","getInputType","pipeModalPhrases","setTimeout","control","emailForm","controls","resetFormFields","open","checkFormType","setEmailModalPhrasesAndActions","recoveryModalElement","openConfirmation","modalTitle","setActions","submitAction","openSmsCode","submitSmsCodeAction","smsCodeForm","resendSmsCode","incrementRetryAttempts","submitActionRequest","emit","assignSmsResponse","responseObj","smsBodyResponse","hash","urlValidationCode","modalPasswordRecoveryTypeAll","close","formReset","markAsPristine","markAsUntouched","updateValueAndValidity","getEmitValue","phone","retry","openExternalLink","queryParam","window","openInternalLink","navigate","queryParams","token","setPipeArguments","redirectToChangePassword","recoveryToken","urlChangePassword","smsCode","primarylabel","secondaryLabel","setRequestEndpoint","literalAttr","arg","transform","data","subscribe","response","status","code","submitSmsCodeRequest","message","Component","selector","template","Router","ThfI18nPipe","ViewChild","static","ThfModalPasswordRecoveryErrorMessageComponent","ThfModalPasswordRecoveryModule","NgModule","imports","CommonModule","FormsModule","ThfFieldModule","ThfModalModule","declarations","exports","providers","ThfPageBackgroundComponent","_showSelectLanguage","selectLanguageOptions","selectedLanguage","_logo","_secondaryLogo","showSelectLanguage","ngOnInit","selectedLanguageOption","onChangeLanguage","ThfPageBackgroundModule","RouterModule","ThfDividerModule","None","ExceededAttempts","ExpiredPassword","ThfPageBlockedUserReasonDefault","ThfPageBlockedUserReason","ThfPageBlockedUserParamsDefault","attempts","days","hours","ThfPageBlockedUserBaseComponent","_params","_reason","_urlBack","newParams_1","forEach","key","thfPageBlockedUserButtonLiterals","primaryButton","ThfPageBlockedUserComponent","activatedRoute","checkingForRouteMetadata","snapshot","navigateTo","checkingForMetadataProperty","contactEmail","contactPhone","reason","urlBack","ActivatedRoute","ThfPageBlockedUserContactsComponent","changeDetector","overflowItem","ngAfterViewInit","checkContactItemWidth","ngOnChanges","changes","phoneWidth","phoneItem","nativeElement","offsetWidth","mailWidth","mailItem","contactGroupHalfWidth","contactGroup","detectChanges","ChangeDetectorRef","thfPageBlockedUserLiterals","none","title","firstPhrase","secondPhrase","exceededAttempts","thirdPhrase","expiredPassword","ThfPageBlockedUserReasonComponent","getLiterals","getImageByReasonType","reasonImage","getParams","literalParams","ThfPageBlockedUserModule","ThfModule","ThfPageChangePasswordBaseComponent","_hideCurrentPassword","_requirements","_urlHome","_recovery","recoveryUrlType","showRequirements","modalAction","bind","urlHome","thfPageChangePasswordLiterals","backButton","confirmPassword","createNewPassword","createNewPasswordPhrase","currentPassword","enterSystemButton","forgotPassword","newPassword","passwordSuccessfullyCreated","passwordSuccessfullyUpdated","requirements","safetyTips","safetyTipsFirst","safetyTipsPhrase","safetyTipsSecond","safetyTipsThird","saveButton","ThfPageChangePasswordService","ThfPageChangePasswordComponent","route","service","thfComponentInjector","viewRef","componentRef","parentRef","urlNewPassword","subscribeToTokenParameter","newPasswordSubscription","onForgotPasswordClick","recovery","createModalPasswordRecoveryComponent","onLoginSubmit","getLoginForm","postUrlNewPassword","observers","emitSubmit","modal","validatePassword","passwordForm","controlConfirmPassword","controlNewPassword","setFormErrors","equalPassword","required","find","requirement","validateRequirement","hideCurrentPassword","destroyComponentInApplication","createComponentInApplication","instance","contactMail","phoneMask","changeDetectorRef","setErrors","ThfComponentInjectorService","ViewContainerRef","ThfModalComponent","read","NgForm","ThfPageChangePasswordModule","entryComponents","ThfPageDynamicService","headers","HttpHeaders","X-TOTVS-SCREEN-LOCK","configServiceApi","config","getMetadata","cache","JSON","parse","localStorage","getItem","version","get","pipe","setItem","stringify","deleteResource","id","delete","deleteResources","ids","request","getResources","getResource","createResource","resource","updateResource","put","thfPageDynamicDetailLiteralsDefault","pageActionEdit","pageActionRemove","pageActionBack","confirmRemoveTitle","confirmRemoveMessage","removeNotificationSuccess","registerNotFound","ThfPageDynamicDetailComponent","thfNotification","thfDialogService","thfPageDynamicService","_actions","_autoRouter","_duplicates","_fields","_keys","_pageActions","util.thfLocaleDefault","util.browserLanguage","model","breadcrumb","items","isObject","getPageActions","util.convertToBoolean","isArray","getKeysByFields","fields","getDuplicatesByFields","paramId","serviceApi","loadMetadata","loadData","confirmRemove","path","confirmOptions","confirm","remove","formatUniqueKey","util.valuesFromObject","util.mapObjectByProperties","join","goBack","history","back","toPromise","then","catch","actions","autoRouter","forceStopAutoRouter","unshift","component","openEdit","resolveUrl","uniqueKey","success","replace","pageActions","edit","filter","field","duplicate","ThfNotificationService","ThfDialogService","ThfPageDynamicDetailModule","ThfDynamicModule","ThfPageModule","ThfWidgetModule","thfPageDynamicEditLiteralsDefault","cancelConfirmMessage","detailActionNew","pageActionCancel","pageActionSave","pageActionSaveNew","saveNewNotificationSuccessSave","saveNewNotificationSuccessUpdate","saveNewNotificationWarning","saveNotificationSuccessSave","saveNotificationSuccessUpdate","saveNotificationWarning","ThfPageDynamicEditComponent","_controlFields","_detailFields","detailActions","getControlFields","getDetailFields","cancel","dynamicForm","typeMetadata","gridDetail","insertRow","save","warning","saveOperation","msgSucess","saveNew","reset","ThfPageDynamicEditModule","ThfButtonModule","ThfGridModule","thfAdvancedFiltersLiteralsDefault","primaryActionLabel","secondaryActionLabel","ThfAdvancedFilterBaseComponent","_filters","searchEvent","filters","ThfAdvancedFilterComponent","models","getValuesFromForm","thfModal","ThfDynamicFormComponent","thfPageDynamicSearchLiteralsDefault","disclaimerGroupTitle","filterSettingsPlaceholder","quickSearchLabel","ThfPageDynamicSearchBaseComponent","advancedSearch","changeDisclaimers","quickSearch","ThfPageDynamicSearchComponent","_disclaimerGroup","change","onChangeDisclaimerGroup","disclaimers","_filterSettings","advancedAction","ngModel","placeholder","changeDisclaimersEnabled","onAction","quickFilter","onAdvancedAction","thfAdvancedFilter","onAdvancedSearch","setDisclaimers","formatDate","date","year","parseInt","substr","month","day","Date","toLocaleDateString","getFieldByProperty","fieldName","ThfDynamicFieldType","ThfPageDynamicSearchModule","ThfPageDynamicListBaseComponent","_columns","setFieldsProperties","visible","thfPageDynamicTableLiteralsDefault","pageAction","pageActionRemoveAll","tableActionView","tableActionEdit","tableActionDuplicate","tableActionDelete","confirmRemoveAllTitle","confirmRemoveAllMessage","loadDataErrorNotification","removeSuccessNotification","removeAllSuccessNotification","ThfPageDynamicTableComponent","_tableActions","page","hasNext","setPageActions","setRemoveAllAction","setTableActions","onChangeDisclaimers","disclaimer","onQuickSearch","search","showMore","removeAll","confirmRemoveAll","fullParams","pageSize","openDetail","openDuplicate","duplicates","openNew","removeLocalItems","selectedItems","$selected","keysSelectedItems","itemRemoved","indexItemRemoved","indexOf","splice","new","detail","separator","ThfPageDynamicTableModule","ThfTableModule","ThfPageJobSchedulerInternal","periodicity","firstExecution","firstExecutionHour","getCurrentHour","recurrent","getHours","getMinutes","ThfPageJobSchedulerBaseComponent","thfPageJobSchedulerService","markAsDirtyInvalidControls","markAsDirty","thfPageJobSchedulerLiteralsDefault","at","execution","process","enterProcess","single","daily","weekly","monthly","scheduling","parameterization","conclude","hour","weekDays","sunday","monday","tuesday","wednesday","thursday","friday","saturday","parameters","yes","no","notReported","periodicityData","confirmation","confirmSaveMessage","confirmUpdateMessage","parametersNotFound","ThfPageJobSchedulerService","jobScheduler","convertToJobScheduler","getHeadProcesses","head","X-Totvs-No-Error","getParametersByProcess","processId","getProcess","getProcesses","convertToJobSchedulerInternal","jobSchedulerInternal","convertToPeriodicity","replaceHourFirstExecution","returnValidExecutionParameter","executionParameter","removeInvalidKeys","getHourFirstExecution","convertToPeriodicityInternal","newValue","valuePeriodicity","dayOfMonth","daysOfWeek","split","minute","firstExecutionDate","invalidKeys","timeSplited","minutes","setHours","getMonth","getDate","toString","formatYear","getFullYear","dateString","convertDateToISOExtended","parameter","newParameter","ThfPageJobSchedulerLookupService","getFilteredData","getObjectByValue","ThfPageJobSchedulerComponent","thfPageDynamicLookupService","isEdit","backPageAction","nextStepOperation","isDisabledBack","concludePageActions","confirmJobScheduler","nextPageActions","isDisabledAdvance","jobSchedulerActions","steps","innerWidth","changePageActionsBySteps","currentStep","nextStep","stepsLength","stepNumber","schedulerExecution","schedulerParameters","ThfStepperStatus","Done","onChangeProcess","existAPI","confirmMessage","emitSuccessMessage","msgSuccess","_arguments","generator","resetJobSchedulerForm","P","Promise","resolve","reject","fulfilled","rejected","result","operation","Default","encapsulation","ViewEncapsulation","ThfPageJobSchedulerExecutionComponent","thfPageJobSchedulerLookup","_value","dayPattern","existProcessAPI","minDateFirstExecution","periodicityOptions","timePattern","changeProcess","subscribeProcessIdValueChanges","periodicityTemplates","dailyTemplate","monthlyTemplate","weeklyTempalte","checkExistsProcessesAPI","getPeriodicityOptions","getWeekDays","valueChanges","ThfPageJobSchedulerParametersComponent","valueChange","ThfPageJobSchedulerSummaryComponent","datePipe","executionValue","firstExecutionValue","infoOrientation","ThfInfoOrientation","Horizontal","periodicityValue","recurrentValue","getPeriodicityLabel","getExecutionValue","getFirstExecutionLabel","getRecurrentValue","getHourLabel","getMonthlyLabelExecution","getWeeklyLabelExecution","hourLabel","getSorterWeekDays","getTranslateWeekDay","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","getWeekDaysLabel","sortWeekDays","sorterWeekDays","sort","a","currDay","nextDay","DatePipe","ThfPageJobSchedulerModule","ThfContainerModule","ThfDialogModule","ThfInfoModule","ThfStepperModule","Basic","Bearer","thfPageLoginLiteralsDefault","loginErrorPattern","loginHint","loginPlaceholder","passwordErrorPattern","passwordPlaceholder","customFieldErrorPattern","customFieldPlaceholder","rememberUser","rememberUserHint","submitLabel","submittedLabel","highlightInfo","registerUrl","titlePopover","forgotYourPassword","ifYouTryHarder","yourUserWillBeBlocked","createANewPasswordNow","iForgotMyPassword","thfPageLoginLiteralIn","thfPageLoginLiteralTo","ThfPageLoginBaseComponent","loginService","allLoginErrors","allPasswordErrors","containsCustomLiterals","customizedDefaultLiterals","showExceededAttemptsWarning","_authenticationType","ThfPageLoginAuthenticationType","_hideRememberUser","_loading","_loginErrors","_passwordErrors","loginChange","loginSubmit","passwordChange","_customField","customFieldType","customFieldObject","getDefaultCustomFieldObject","options","setLoginHintLiteral","_productName","setTitleLiteral","_environment","environment","_exceededAttemptsWarning","valueDefault","validNumber","validDefaultValue","defaultValue","convertToInt","exceededAttemptsWarning","_literals","_login","authenticationUrl","setLoginErrors","setPasswordErrors","_registerUrl","_authenticationUrl","_blockedUrl","loginSubscription","closePopover","loginForm","login","password","customField","onLogin","authenticationType","setValuesToProperties","sessionStorage","redirectBlockedUrl","blockedUrl","defaultLoginHintLiteral","prepositionLiteral","concatenateLiteral","defaultTitleLiteral","concatenate","defaultLiteral","prefixLiteral","literal","maxAttemptsRemaining","loginErrors","loginWarnings","passwordErrors","passwordWarnings","ThfPageLoginService","btoa","user","Authorization","ThfPageLoginComponent","differs","customPasswordError","custom","differ","ngAfterViewChecked","validateArrayChanges","array","callback","generateLoginError","generatePasswordError","changeLoginModel","changePasswordModel","thfPageLoginRecovery","resetControl","setControlErrors","allErrors","errors","patternError","hasError","valid","markAsTouched","setUrlRedirect","element","diff","openUrl","onSelectedLanguage","productName","IterableDiffers","ThfPageLoginPopoverComponent","recoveryType","_remainingAttempts","_selectedLanguage","remainingAttempts","ThfPageLoginModule","ThfComponentsModule","ThfTemplatesModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Idiomas suportados pelas pÃ¡ginas\nexport const thfLocales = ['pt', 'en', 'es'];\n// Idioma padrÃ£o\nexport const thfLocaleDefault = 'pt';\n\n/**\n * @deprecated\n * Utilize o mÃ©todo `getShortBrowserLanguage`.\n *\n * @description\n * Retorna idioma do browser ou o idioma padrÃ£o.\n */\nexport function browserLanguage() {\n  return getShortBrowserLanguage();\n}\n\n/**\n * Retorna o idioma atual do navegador\n */\nexport function getBrowserLanguage(): string {\n  // navigator.userLanguage is the value for IE10\n  return navigator.language || navigator['userLanguage'];\n}\n\n/**\n * Retorna o idioma do navegador, com somente as duas primeiras letras. Por exemplo: \"pt\" ou \"es\".\n *\n * Caso o valor retornado pelo navegador nÃ£o estiver dentro dos idiomas suportados pelo THF,\n * serÃ¡ retornado a linguagem padrÃ£o (thfLocaleDefault).\n */\nexport function getShortBrowserLanguage(): string {\n  const language = (getBrowserLanguage() || thfLocaleDefault).toLowerCase().substring(0, 2);\n\n  if (!thfLocales.includes(language)) {\n    return thfLocaleDefault;\n  }\n\n  return language;\n}\n\nexport function convertToBoolean(val: any): boolean {\n  if (typeof val === 'string') {\n    val = val.toLowerCase().trim();\n    return (val === 'true' || val === 'on' || val === '');\n  }\n\n  if (typeof val === 'number') {\n    return val === 1;\n  }\n\n  return !!val;\n}\n\nexport function convertToInt(value: any, valueDefault?: any): number {\n  const validNumber = parseInt(value, 10);\n  const validDefaultValue = parseInt(valueDefault, 10);\n  const defaultValue = validDefaultValue || validDefaultValue === 0 ? validDefaultValue : undefined;\n\n  return validNumber || validNumber === 0 ? validNumber : defaultValue;\n}\n\nexport function isTypeof(object: any, type: any) {\n  return typeof object === type;\n}\n\n/**\n *\n * @param fn FunÃ§Ã£o que serÃ¡ executada dentro do contexto. Podendo ser o nome da funÃ§Ã£o\n * ou a referÃªncia da mesma.\n *\n * @param context Contexto do qual a funÃ§Ã£o serÃ¡ executada.\n */\nexport function callFunction(fn: any, context: any, param?): void {\n  if (isTypeof(fn, 'function')) {\n    fn.call(context, param);\n  } else {\n    context[fn](param);\n  }\n}\n\nexport function convertIsoToDate(value: string , start: boolean, end: boolean) {\n  if (value) {\n    const day = parseInt(value.substring(8, 10), 10);\n    const month = parseInt(value.substring(5, 7), 10);\n    const year = parseInt(value.substring(0, 4), 10);\n    if (start) {\n      const date = new Date(year, month - 1, day, 0, 0, 0);\n\n      setYearFrom0To100(date, year);\n\n      return date;\n    } else if (end) {\n      const date = new Date(year, month - 1, day, 23, 59, 59);\n\n      setYearFrom0To100(date, year);\n\n      return date;\n    } else {\n      const milliseconds = Date.parse(value);\n      const timezone = new Date().getTimezoneOffset() * 60000;\n      return new Date(milliseconds + timezone);\n    }\n  }\n}\n\nexport function convertDateToISOExtended(date: Date, time?: string) {\n  if (date) {\n\n    const getMonth = date.getMonth() + 1;\n    const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();\n    const month = getMonth < 10 ? '0' + getMonth : getMonth;\n    const year = formatYear(date.getFullYear());\n\n    const dateString = date.toString();\n\n    if (time) {\n      return year + '-' + month + '-' + day + time;\n    } else {\n      return year + '-' + month + '-' + day + 'T' + dateString.substring(16, 24) +\n          dateString.substring(28, 31) + ':' + dateString.substring(31, 33);\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.\n * @param year Ano\n */\nexport function formatYear(year: number) {\n\n  if (year >= 1000) {\n    return year.toString();\n  }\n\n  if (year > 99 && year < 1000) {\n    return `0${year}`;\n  }\n\n  if (year > 9 && year < 100) {\n    return `00${year}`;\n  }\n\n  if (year >= 0 && year < 10) {\n    return `000${year}`;\n  }\n\n}\n\nexport function isEquals(value, comparedValue) {\n  return JSON.stringify(value) === JSON.stringify(comparedValue);\n}\n\n/**\n * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.\n * @param date Data\n * @param year Ano original\n */\nexport function setYearFrom0To100(date: Date, year: number) {\n  if (year >= 0 && year < 100 ) {\n    date.setFullYear(year);\n  }\n}\n\nexport function sortOptionsByProperty(options: Array<any>, property: string) {\n  options.sort((optionA, optionB) => {\n    optionA = optionA[property].toString().toLowerCase();\n    optionB = optionB[property].toString().toLowerCase();\n\n    if (optionA < optionB) {\n      return -1;\n    }\n    if (optionA > optionB) {\n      return 1;\n    }\n    return 0;\n  });\n}\n\nexport function removeDuplicatedOptions(list: Array<any>) {\n  for (let i = 0; i < list.length; i++) {\n    if (i === 0) { continue; }\n\n    if (list.findIndex(op => op.value === list[i].value) !== i) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n}\n\nexport function removeUndefinedAndNullOptions(list: Array<any>) {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i].value === undefined || list[i].value === null ) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n}\n\nexport function validValue(value: any) {\n  return (value !== null && value !== undefined && value !== '') || value === false;\n}\n\nexport function isExternalLink(url): boolean {\n  return url ? url.startsWith('http') : false;\n}\n\nexport function openExternalLink(url): void {\n  window.open(url, '_blank');\n}\n\nexport function  getFormattedLink(link: string): string {\n  let formattedLink = '';\n  // Retira todos os pontos no comeÃ§o da URL.\n  if (link) {\n    formattedLink = link.replace(/^(\\.)+/g, '');\n  }\n  // Verifica se foi utilizado uma rota que nÃ£o comece com barra.\n  if (!formattedLink.startsWith('/')) {\n    formattedLink = '/'.concat(formattedLink);\n  }\n  return formattedLink;\n}\n\n/**\n * MÃ©todo responsÃ¡vel por ordenar dois valores.\n *\n * @param leftSide Primeiro valor a ser comparado.\n * @param rightSide Segundo valor a ser comparado.\n * @param ascending Determina se serÃ¡ em ordem ascendente ou descendente.\n */\nexport function sortValues(leftSide: string, rightSide: string, ascending: boolean = true): number {\n  if (ascending) {\n    if (leftSide < rightSide) {\n      return -1;\n    } else if (leftSide > rightSide) {\n      return 1;\n    }\n  } else if (ascending === false) {\n    if (leftSide < rightSide) {\n      return 1;\n    } else if (leftSide > rightSide) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nexport function validateDateRange(date: Date, dateStart: Date, dateEnd: Date) {\n  if (dateStart && dateEnd) {\n    return (date >= dateStart && date <= dateEnd);\n  } else if (dateStart && !dateEnd) {\n    return (date >= dateStart);\n  } else if (!dateStart && dateEnd) {\n    return (date <= dateEnd);\n  } else {\n    return true;\n  }\n}\n\nexport function capitalizeFirstLetter(text: string): string {\n  return `${text.charAt(0).toUpperCase()}${text.slice(1)}`;\n}\n\n/**\n * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de\n * origem.\n *\n * Exemplo:\n *\n * ```\n * const people = [\n *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'SÃ£o Paulo', dependents: 2 },\n *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },\n *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }\n * ];\n *\n * const properties = ['id', 'name'];\n *\n * const idAndName = mapArrayByProperties(people, properties);\n *\n * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]\n * ```\n *\n * Um outro uso para o mÃ©todo Ã© \"parear\" todos os objetos do array com as mesmas propriedades.\n *\n * ```\n * const customers = [\n *  { id: 1, name: 'Fulano', city: 'SÃ£o Paulo', dependents: 2 }, // sem genre\n *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents\n *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }\n * ];\n * const properties = ['id', 'name', 'city', 'genre', 'dependents'];\n *\n * const pattern = mapArrayByProperties(customers, properties);\n * console.log(pattern);\n *\n * // [\n * //   { id: 1, name: 'Fulano', city: 'SÃ£o Paulo', genre: undefined, dependents: 2 },\n * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },\n * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }\n * // ]\n * ```\n *\n * @param items {Array<any>} Array de items original.\n * @param properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.\n *\n * @returns Array<any>\n */\nexport function mapArrayByProperties(items: Array<any> = [], properties: Array<string> = []): Array<any> {\n  return items.map(item => mapObjectByProperties(item, properties));\n}\n\n/**\n * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.\n *\n * Exemplo:\n *\n * ```\n * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'SÃ£o Paulo', dependents: 2 };\n *\n * const properties = ['id', 'name'];\n *\n * const idAndName = mapObjectByProperties(person, properties);\n *\n * console.log(idAndName); // { id: 1, name: 'Fulano' }\n * ```\n *\n * @param object {Array<any>} Array de items original.\n * @param properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.\n *\n * @returns Array<any>\n */\nexport function mapObjectByProperties(object: any = {}, properties: Array<string> = []) {\n  const getSelectedProperties = (selectedProperties, property) => ({ ...selectedProperties, [property]: object[property] });\n\n  return properties.reduce(getSelectedProperties, {});\n}\n\n/**\n * Retorna os valores de um objeto dentro de um array.\n *\n * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versÃ£o typescrit for atualizada.\n *\n * @param object Objeto de onde serÃ¡ pego os valores.\n */\nexport function valuesFromObject(object: any = {}): Array<any> {\n  return Object.keys(object).map(property => object[property]);\n}\n\n/**\n * adiciona 0 no tempo informado, caso menor q 10\n *\n * @param time\n */\nexport function addZero(time: number) {\n  if (!time) {\n    return '00';\n  }\n\n  if (time < 10) {\n    return `0${time}`;\n  }\n\n  return time;\n}\n","export const thfModalPasswordRecoveryLiterals = {\n  en: <any> {\n    cancelButton: 'Cancel',\n    closeButton: 'Close',\n    continueButton: 'Continue',\n    email: 'e-mail',\n    emailErrorMessagePhrase: 'Invalid e-mail format',\n    emailSentConfirmationPhrase: `We have sent the instructions and new password creation link to your e-mail.\n    If you did not receive it after a few minutes, check your spam box or click Resend.`,\n    emailSentTitle: 'E-mail sent',\n    forgotPasswordTitle: 'Forgot your password?',\n    insertCode: 'Type the code',\n    insertEmail: 'Enter your e-mail',\n    insertPhone: 'Enter your mobile number',\n    phoneErrorMessagePhrase: 'Invalid phone number',\n    prepositionIn: 'in',\n    prepositionOr: 'or',\n    recoveryPasswordPhrase: 'To recover your password we will send you a {0} with instructions.',\n    resendEmailButton: 'Resend',\n    resendSmsCodePhrase: 'If the code does not arrive within a few minutes, please send it again.',\n    sendAgainPhrase: 'If the code does not arrive within a few minutes',\n    sendAgain: 'send again.',\n    sendButton: 'Submit',\n    sentSmsCodePhrase: 'We sent a code for your mobile phone.',\n    sms: 'SMS',\n    smsCodeErrorMessagePhrase: 'Invalid code. Please re-enter or contact support',\n    supportContact: 'If you do not have access to {0} contact support',\n    telephone: 'telephone',\n    typeCodeTitle: 'Enter sent code'\n  },\n  es: <any> {\n    cancelButton: 'Cancelar',\n    closeButton: 'Cerrar',\n    continueButton: 'Continuar',\n    email: 'e-mail',\n    emailErrorMessagePhrase: 'Formato de correo electrÃ³nico no vÃ¡lido',\n    emailSentConfirmationPhrase: `Enviamos las instrucciones y enlace de creaciÃ³n de nueva contraseÃ±a para su correo electrÃ³nico.\n    Si no ha recibido despuÃ©s de unos minutos, compruebe su caja de spam o haga clic en Reenviar`,\n    emailSentTitle: 'E-mail enviado',\n    forgotPasswordTitle: 'Olvidaste tu contraseÃ±a?',\n    insertCode: 'Introduzca el cÃ³digo',\n    insertEmail: 'Introduce tu e-mail',\n    insertPhone: 'Introduce tu nÃºmero de celular',\n    phoneErrorMessagePhrase: 'NÃºmero de telÃ©fono no vÃ¡lido',\n    prepositionIn: 'en',\n    prepositionOr: 'u',\n    recoveryPasswordPhrase: 'Para recuperar su contraseÃ±a vamos a enviar un {0} con instrucciones.',\n    resendEmailButton: 'Reenviar',\n    resendSmsCodePhrase: 'Si el cÃ³digo no llega dentro de unos minutos, vuelva a enviar.',\n    sendAgain: 'envÃ­e de nuevo.',\n    sendAgainPhrase: 'Si el cÃ³digo no llega dentro de unos minutos',\n    sendButton: 'Enviar',\n    sentSmsCodePhrase: 'Enviamos un cÃ³digo para su celular.',\n    sms: 'SMS',\n    smsCodeErrorMessagePhrase: 'CÃ³digo no vÃ¡lido. Escriba de nuevo o pÃ³ngase en contacto con el soporte',\n    supportContact: 'Si no tiene acceso a {0} pÃ³ngase en contacto con el soporte',\n    telephone: 'telÃ©fono',\n    typeCodeTitle: 'Escribir cÃ³digo enviado'\n  },\n  pt: <any> {\n    cancelButton: 'Cancelar',\n    closeButton: 'Fechar',\n    continueButton: 'Continuar',\n    email: 'e-mail',\n    emailErrorMessagePhrase: 'Formato de e-mail invÃ¡lido',\n    emailSentConfirmationPhrase: `Enviamos as instruÃ§Ãµes e link de criaÃ§Ã£o de nova senha para o seu e-mail.\n    Caso nÃ£o tenha recebido apÃ³s alguns minutos, verifique sua caixa de spam ou clique em Reenviar.`,\n    emailSentTitle: 'E-mail enviado',\n    forgotPasswordTitle: 'Esqueceu sua senha?',\n    insertCode: 'Digite o cÃ³digo',\n    insertEmail: 'Insira seu e-mail',\n    insertPhone: 'Insira seu nÃºmero de celular',\n    phoneErrorMessagePhrase: 'NÃºmero de telefone invÃ¡lido',\n    prepositionIn: 'em',\n    prepositionOr: 'ou',\n    recoveryPasswordPhrase: 'Para recuperar sua senha vamos enviar um {0} com instruÃ§Ãµes.',\n    resendEmailButton: 'Reenviar',\n    resendSmsCodePhrase: 'Se o cÃ³digo nÃ£o chegar dentro de alguns minutos envie novamente',\n    sendAgain: 'envie novamente.',\n    sendAgainPhrase: 'Se o cÃ³digo nÃ£o chegar dentro de alguns minutos',\n    sendButton: 'Enviar',\n    sentSmsCodePhrase: 'Enviamos um cÃ³digo para seu celular cadastrado.',\n    sms: 'SMS',\n    smsCodeErrorMessagePhrase: 'CÃ³digo invÃ¡lido. Digite novamente ou contacte o suporte',\n    supportContact: 'Se nÃ£o tiver acesso ao {0} contacte o suporte',\n    telephone: 'telefone',\n    typeCodeTitle: 'Digitar cÃ³digo enviado'\n  }\n};\n","/**\n * @usedBy ThfModalPasswordRecoveryComponent\n *\n * @description\n *\n * *Enum* para especificaÃ§Ã£o do tipo de recuperaÃ§Ã£o de senha.\n */\nexport enum ThfModalPasswordRecoveryType {\n  /** Possibilita ao usuÃ¡rio optar por envio via email ou SMS */\n  All = 'all',\n\n  /** DefiniÃ§Ã£o para recuperaÃ§Ã£o apenas por email */\n  Email = 'email',\n\n  /** DefiniÃ§Ã£o para recuperaÃ§Ã£o apenas por SMS */\n  SMS = 'sms'\n\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { browserLanguage, thfLocaleDefault } from '../../utils/util';\n\nimport { thfModalPasswordRecoveryLiterals } from './literals/i18n/thf-modal-password-recovery-literals';\nimport { ThfModalPasswordRecoveryType } from './enums/thf-modal-password-recovery-type.enum';\n\nconst ThfModalPasswordRecoveryDefaultMaxLength = 15;\nconst ThfModalPasswordRecoveryDefaultMinLength = 15;\nconst ThfModalPasswordRecoveryDefaultPhone = '(99) 99999-9999';\nconst ThfModalPasswordRecoveryTypeDefault: ThfModalPasswordRecoveryType = ThfModalPasswordRecoveryType.Email;\n\n/**\n * @description\n *\n * O componente `thf-modal-password-recovery` Ã© utilizado como template para solicitaÃ§Ã£o de troca de senha.\n *\n * Ã composto por uma modal que possui trÃªs telas, cada uma com as seguintes caracterÃ­sticas:\n *\n * - A primeira possui campos para preenchimento de email ou nÃºmero de telefone;\n * - Tela com campo para preenchimento de cÃ³digo SMS enviado para o nÃºmero de telefone enviado;\n * - A terceira se trata de uma confirmaÃ§Ã£o de envio de link para a caixa de email do usuÃ¡rio.\n *\n *\n * A propriedade `t-url-recovery` automatiza a rotina do componente e simplifica o processo\n * para recuperaÃ§Ã£o de senha, bastando definir uma url para requisiÃ§Ã£o dos recursos.\n * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.\n * Caso julgue necessÃ¡rio, pode-se tambÃ©m definir manualmente a rotina do componente.\n *\n *\n * Para a modal de digitaÃ§Ã£o de cÃ³digo SMS, Ã© possÃ­vel definir uma mensagem de erro\n * customizada com a propriedade `t-code-error` e hÃ¡ um link para\n * reenvio de cÃ³digo por SMS. Ao reenviar, o evento `t-code-submit` envia um objeto com o telefone do usuÃ¡rio e a quantidade\n * de vezes em que o usuÃ¡rio fez a solicitaÃ§Ã£o de reenvio.\n *\n * > Ã indicada a utilizaÃ§Ã£o da tela de digitaÃ§Ã£o para envio de cÃ³digo SMS apenas\n * se a opÃ§Ã£o por envio SMS for disponibilizada para o usuÃ¡rio.\n *\n *\n * A modal de confirmaÃ§Ã£o contÃ©m uma aÃ§Ã£o de reenvio e o evento `t-submit`\n * Ã© quem passa o objeto contendo o email em conjunto com a quantidade de tentativas de reenvio.\n *\n * > A tela de confirmaÃ§Ã£o Ã© indicada para quando o usuÃ¡rio solicitar a troca atravÃ©s do email.\n *\n * > Os textos das modals sÃ£o prÃ©-definidos, imutÃ¡veis e sÃ£o traduzidos de acordo com o idioma do *browser* (pt, en e es)\n *\n * Para que as imagens sejam exibidas corretamente, Ã© necessÃ¡rio incluir o caminho delas ao projeto. Para isso, edite\n * o *assets* no arquivo **angular.json** da aplicaÃ§Ã£o na seguinte ordem:\n * ```\n *   \"assets\": [\n *     \"src/assets\",\n *     \"src/favicon.ico\",\n *     {\n *       \"glob\": \"**\\/*\",\n *       \"input\": \"node_modules/@totvs/thf-theme/images\",\n *       \"output\": \"assets/images\"\n *     }\n *   ]\n * ```\n */\nexport abstract class ThfModalPasswordRecoveryBaseComponent {\n\n  private _contactEmail: string;\n  private _phoneMask = ThfModalPasswordRecoveryDefaultPhone;\n  private _type: ThfModalPasswordRecoveryType = ThfModalPasswordRecoveryTypeDefault;\n\n  email: string;\n  maxLength = ThfModalPasswordRecoveryDefaultMaxLength;\n  minLength = ThfModalPasswordRecoveryDefaultMinLength;\n  modalPasswordRecoveryTypeAll: boolean;\n  phone: string;\n  smsCode: string;\n  smsCodeErrorMessage: string;\n\n  literals: { cancelButton: string, closeButton: string, continueButton: string, email: string, emailErrorMessagePhrase: string,\n    emailSentConfirmationPhrase: string, emailSentTitle: string, forgotPasswordTitle: string,\n    insertCode: string, insertEmail: string, insertPhone: string, phoneErrorMessagePhrase: string,\n    prepositionIn: string, prepositionOr: string, recoveryPasswordPhrase: string, resendEmailButton: string,\n    resendSmsCodePhrase: string, sendAgain: string, sendButton: string, sms: string, smsCode: string,\n    smsCodeErrorMessagePhrase: string, sentSmsCodePhrase: string, supportContact: string, telephone: string, typeCodeTitle: string } =\n    {\n      ...thfModalPasswordRecoveryLiterals[thfLocaleDefault],\n      ...thfModalPasswordRecoveryLiterals[browserLanguage()],\n    };\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * DefiniÃ§Ã£o do e-mail que Ã© exibido na mensagem para contato de suporte.\n   */\n  @Input('t-contact-email') set contactEmail(value: string) {\n    this._contactEmail = value;\n\n    this.smsCodeErrorMessage = this.concatenateSMSErrorMessage(value);\n  }\n\n  get contactEmail() {\n    return this._contactEmail;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * DefiniÃ§Ã£o de mensagem de erro customizada para quando o usuÃ¡rio passar um cÃ³digo SMS invÃ¡lido ou errado.\n   */\n  @Input('t-code-error') codeError: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * DefiniÃ§Ã£o da mascara do campo de telefone.\n   *\n   * @default `(99) 99999-9999`\n   */\n  @Input('t-phone-mask') set phoneMask(value: string) {\n    this._phoneMask = value || ThfModalPasswordRecoveryDefaultPhone;\n    this.minLength = this.maxLength = this._phoneMask.length;\n  }\n\n  get phoneMask() {\n    return this._phoneMask;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define o tipo de recuperaÃ§Ã£o de senha que serÃ¡ exibido.\n   *\n   * @default `ThfModalPasswordRecoveryType.Email`\n   *\n   */\n  @Input('t-type') set type(value: ThfModalPasswordRecoveryType) {\n    this._type = (<any>Object).values(ThfModalPasswordRecoveryType).includes(value) ? value : ThfModalPasswordRecoveryTypeDefault;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Endpoint usado pelo template para requisiÃ§Ã£o do recurso. Quando preenchido,\n   * o mÃ©todos `t-submit` e `t-submit-code` serÃ£o ignorados e o componente adquirirÃ¡ automatizaÃ§Ã£o\n   * para o processo de solicitaÃ§Ã£o de troca de senha.\n   *\n   * ### Processos\n   * Ao digitar um valor vÃ¡lido no campo de email/telefone e pressionar **enviar**,\n   * o componente farÃ¡ uma requisiÃ§Ã£o `POST` na url especificada nesta propriedade passando o objeto contendo o valor definido pelo usuÃ¡rio.\n   *\n   * ```\n   * body {\n   *  email: email,\n   *  retry?: retry\n   * }\n   * ```\n   *\n   *\n   * #### RecuperaÃ§Ã£o por email\n   * Para a recuperaÃ§Ã£o de senha por **email**, o cÃ³digo de resposta HTTP de status esperado Ã© `204`.\n   *\n   * Em caso de **sucesso**, serÃ¡ exibida a modal de confirmaÃ§Ã£o de e-mail para o usuÃ¡rio.\n   *\n   *\n   * > A aÃ§Ã£o **Reenviar** na tela de confirmaÃ§Ã£o efetua uma nova requisiÃ§Ã£o\n   * passando-se o objeto com incremento para o valor da propriedade **retry**.\n   *\n   * *Processo finalizado.*\n   *\n   *\n   * #### RecuperaÃ§Ã£o por SMS\n   * Se a opÃ§Ã£o de recuperaÃ§Ã£o for por **SMS**, o cÃ³digo de status de sucesso deve ser `200`.\n   * Em caso de **sucesso**, abre-se a modal de digitaÃ§Ã£o de cÃ³digo SMS e a resposta\n   * desta requisiÃ§Ã£o deve retornar uma definiÃ§Ã£o de dados abaixo:\n   *\n   * ```\n   * 200:\n   *  {\n   *    hash: hash,\n   *    urlValidationCode?: url\n   *  }\n   * ```\n   *\n   *\n   * - O **hash** serÃ¡ o cÃ³digo de validaÃ§Ã£o da solicitaÃ§Ã£o do SMS para ser enviado juntamente com o cÃ³digo de verificaÃ§Ã£o do SMS;\n   * - **urlValidationCode** Ã© a url usada para validaÃ§Ã£o do cÃ³digo enviado por SMS.\n   *\n   *\n   * > Caso nÃ£o seja passado urlValidationCode, o endpoint usado para validaÃ§Ã£o do cÃ³digo serÃ¡ `<t-url-recovery>/validation`.\n   *\n   *\n   * #### ValidaÃ§Ã£o do cÃ³digo SMS\n   * Ao digitar um valor vÃ¡lido no campo de cÃ³digo SMS e pressionar **continuar**, o componente farÃ¡ uma requisiÃ§Ã£o `POST` contendo:\n   *\n   * ```\n   * POST /<t-url-recovery>/validation OU /<urlValidationCode>\n   * Body {\n   *  hash: hash,\n   *  code: code\n   * }\n   * ```\n   *\n   *\n   * O cÃ³digo de resposta HTTP de status esperado Ã© `200`.\n   *\n   * Em caso de **erro** na validaÃ§Ã£o do cÃ³digo SMS, a modal se mantÃ©m com o campo para digitaÃ§Ã£o\n   * de cÃ³digo SMS\n   *\n   *\n   * > Pode-se atribuir a mensagem de erro (message) para o atributo `t-code-error` conforme retorno abaixo:\n   *\n   * ```\n   * 400\n   *  {\n   *    error {\n   *      message: 'Error Message'\n   *    }\n   *  }\n   * ```\n   *\n   *\n   * Em caso de **sucesso**, espera-se a resposta desta requisiÃ§Ã£o retornando a seguinte definiÃ§Ã£o:\n   *\n   * ```\n   * 200:\n   *  {\n   *    token: token,\n   *    urlChangePassword?: url\n   *  }\n   * ```\n   *\n   *\n   * - **token**: Token de alteraÃ§Ã£o de senha;\n   * - **urlChangePassword**: url para o formulÃ¡rio de alteraÃ§Ã£o de senha.\n   *\n   *\n   * O componente estÃ¡ configurado para redirecionar para a url estabelecida em `urlChangePassword`.\n   *\n   * > Caso nÃ£o seja passado valor para urlChangePassword,\n   * a url usada para validaÃ§Ã£o serÃ¡ a `<t-url-recovery>/changePassword?token=<token>`.\n   *\n   * *Processo finalizado.*\n   */\n  @Input('t-url-recovery') urlRecovery?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * AÃ§Ã£o contendo como parÃ¢metro o cÃ³digo enviado por SMS e digitado pelo usuÃ¡rio.\n   *\n   * > Esta propriedade serÃ¡ ignorada se for definido valor para a propriedade `t-url-recovery`.\n   */\n  @Output('t-code-submit') codeSubmit = new EventEmitter<any>();\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * AÃ§Ã£o contendo o email como parÃ¢metro e que Ã© executada quando o usuÃ¡rio clica sobres os botÃµes de 'enviar' e 'reenviar' e-mail.\n   *\n   * > Esta propriedade serÃ¡ ignorada se for definido valor para a propriedade `t-url-recovery`.\n   */\n  @Output('t-submit') submit = new EventEmitter<any>();\n\n  /**\n   * AcÃ£o para conclusÃ£o de processo e fechamento da modal. Indica-se sua utilizaÃ§Ã£o\n   * para apÃ³s o envio e validaÃ§Ã£o do cÃ³digo SMS enviado pelo usuÃ¡rio.\n   *\n   * > Nas modals em que hÃ¡ a aÃ§Ã£o de 'cancelar' dispensa-se o uso desta aÃ§Ã£o pois o componente jÃ¡ trata o fechamento da modal.\n   */\n  abstract completed(): void;\n\n  /**\n   * Abre a modal de preenchimento de email ou nÃºmero de telefone para solicitaÃ§Ã£o de troca de senha.\n   */\n  abstract open(): void;\n\n  /**\n   * Abre a modal de confirmaÃ§Ã£o de envio de email.\n   */\n  abstract openConfirmation(): void;\n\n  /**\n   * Abre a modal de preenchimento do cÃ³digo SMS enviado ao usuÃ¡rio.\n   */\n  abstract openSmsCode(): void;\n\n  private concatenateSMSErrorMessage(value: string) {\n    const literalCodeErrorMessage = this.literals.smsCodeErrorMessagePhrase;\n\n    return value && value !== '' ? `${literalCodeErrorMessage} ${this.literals.prepositionIn} ${value}.` : literalCodeErrorMessage;\n  }\n\n}\n","/**\n * @docsPrivate\n *\n * @description\n *\n * Enum para definiÃ§Ã£o do tipo de conteÃºdo exibido na modal.\n */\nexport enum ThfModalPasswordRecoveryModalContent {\n\n  /** ExibiÃ§Ã£o de modal contendo campo para preenchimento de email ou nÃºmero de telefone */\n  Email = 'email',\n\n  /** ExibiÃ§Ã£o de modal contendo campo para inserÃ§Ã£o de cÃ³digo enviado por SMS */\n  SMSCode = 'smsCode',\n\n  /** ExibiÃ§Ã£o de modal de confirmaÃ§Ã£o de envio */\n  Confirmation = 'confirmation'\n\n}\n","import { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { ThfModalPasswordRecovery } from './interfaces/thf-modal-password-recovery.interface';\n\n@Injectable()\nexport class ThfModalPasswordRecoveryService {\n\n  constructor(private http: HttpClient) { }\n\n  post(\n    urlRecovery: string,\n    item: ThfModalPasswordRecovery,\n    params?: HttpParams | { [param: string]: string | Array<string>; }\n    ): Observable<HttpResponse<Object>> {\n    return this.http.post<any>(urlRecovery, item, { observe: 'response', params: params });\n  }\n\n}\n","import { Component, OnDestroy, ViewChild } from '@angular/core';\nimport { AbstractControl, NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\nimport { isExternalLink } from '../../utils/util';\nimport { ThfI18nPipe, ThfModalAction, ThfModalComponent, ThfRadioGroupOption } from '@totvs/thf-ui';\n\nimport { ThfModalPasswordRecovery } from './interfaces/thf-modal-password-recovery.interface';\nimport { ThfModalPasswordRecoveryBaseComponent } from './thf-modal-password-recovery-base.component';\nimport { ThfModalPasswordRecoveryModalContent } from './enums/thf-modal-password-recovery-modal-content.enum';\nimport { ThfModalPasswordRecoveryService } from './thf-modal-password-recovery.service';\nimport { ThfModalPasswordRecoveryType } from './enums/thf-modal-password-recovery-type.enum';\n\n/**\n * @docsExtends ThfModalPasswordRecoveryBaseComponent\n *\n * @example\n *\n * <example name=\"thf-modal-password-recovery-basic\" title=\"Totvs Modal Password Recovery Basic\">\n *  <file name=\"sample-thf-modal-password-recovery-basic/sample-thf-modal-password-recovery-basic.component.html\"> </file>\n *  <file name=\"sample-thf-modal-password-recovery-basic/sample-thf-modal-password-recovery-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-modal-password-recovery-labs\" title=\"Totvs Modal Password Recovery Labs\">\n *  <file name=\"sample-thf-modal-password-recovery-labs/sample-thf-modal-password-recovery-labs.component.html\"> </file>\n *  <file name=\"sample-thf-modal-password-recovery-labs/sample-thf-modal-password-recovery-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-modal-password-recovery-request\" title=\"Totvs Modal Password Recovery Request\">\n *  <file name=\"sample-thf-modal-password-recovery-request/sample-thf-modal-password-recovery-request.component.html\"> </file>\n *  <file name=\"sample-thf-modal-password-recovery-request/sample-thf-modal-password-recovery-request.component.ts\"> </file>\n * </example>\n */\n\n@Component({\n  selector: 'thf-modal-password-recovery',\n  templateUrl: './thf-modal-password-recovery.component.html'\n})\n\nexport class ThfModalPasswordRecoveryComponent extends ThfModalPasswordRecoveryBaseComponent implements OnDestroy {\n\n  chosenTypeFormOption: string = ThfModalPasswordRecoveryType.Email;\n  codeMask: string = '9 9 9 9 9 9';\n  control: AbstractControl;\n  emailModal: boolean = true;\n  emailModalPhrases = {};\n  endpoint: string = '.';\n  invalidCode: boolean = false;\n  invalidEmail: boolean = false;\n  modalTitle: string;\n  modalType: ThfModalPasswordRecoveryModalContent = ThfModalPasswordRecoveryModalContent.Email;\n  showCustomCodeError: boolean;\n  smsCodeErrorMessagePhrase: string;\n  submittedCodeValue = {} as ThfModalPasswordRecovery;\n  submittedContactValue = {} as ThfModalPasswordRecovery;\n\n  private passwordRecoverySubscription: Subscription;\n  private smsBodyResponse;\n  private smsCodeSubscription: Subscription;\n\n  @ViewChild('emailForm', { static: false }) emailForm: NgForm;\n\n  @ViewChild('recoveryModal', { static: true }) recoveryModalElement: ThfModalComponent;\n\n  @ViewChild('smsCodeForm', { static: false }) smsCodeForm: NgForm;\n\n  primaryAction: ThfModalAction = { label: undefined, action: () => { } };\n\n  secondaryAction: ThfModalAction = { label: undefined, action: () => { } };\n\n  typeFormOptions: Array<ThfRadioGroupOption> = [\n    { label: 'e-mail', value: ThfModalPasswordRecoveryType.Email },\n    { label: 'SMS', value: ThfModalPasswordRecoveryType.SMS }\n  ];\n\n  constructor(\n    private router: Router,\n    private thfI18nPipe: ThfI18nPipe,\n    private thfModalPasswordRecoveryService: ThfModalPasswordRecoveryService\n    ) {\n    super();\n  }\n\n  ngOnDestroy() {\n    if (this.passwordRecoverySubscription) {\n      this.passwordRecoverySubscription.unsubscribe();\n    }\n\n    if (this.smsCodeSubscription) {\n      this.smsCodeSubscription.unsubscribe();\n    }\n  }\n\n  completed() {\n    this.cancelAction();\n  }\n\n  formModelChangesCheck(form: NgForm) {\n    const invalidForm = form.invalid;\n    this.invalidEmail = invalidForm && form.dirty;\n    this.primaryAction.disabled = invalidForm;\n\n    if (this.modalType === ThfModalPasswordRecoveryModalContent.SMSCode) {\n      const codeError: boolean = this.codeError !== undefined && this.codeError !== '';\n      this.showCustomCodeError = codeError && form.pristine;\n    }\n  }\n\n  getInputType(type) {\n    this.type = type;\n    this.pipeModalPhrases();\n    setTimeout(() => {\n      this.control = this.emailForm.controls[type];\n      this.formModelChangesCheck(this.emailForm);\n      this.resetFormFields(this.control);\n    });\n  }\n\n  open() {\n    const control = this.checkFormType(this.type);\n    this.control = this.emailForm.controls[control];\n    this.setEmailModalPhrasesAndActions();\n    this.formModelChangesCheck(this.emailForm);\n    this.recoveryModalElement.open();\n  }\n\n  openConfirmation() {\n    this.modalTitle = this.literals.emailSentTitle;\n    this.modalType = ThfModalPasswordRecoveryModalContent.Confirmation;\n    this.setActions(this.cancelAction, this.literals.closeButton, this.submitAction, this.literals.resendEmailButton, false);\n  }\n\n  openSmsCode() {\n    this.modalTitle = this.literals.typeCodeTitle;\n    this.modalType = ThfModalPasswordRecoveryModalContent.SMSCode;\n    this.setActions(this.submitSmsCodeAction, this.literals.continueButton, this.cancelAction, this.literals.cancelButton, true);\n\n    setTimeout(() => {\n      this.control = this.smsCodeForm.controls['sms'];\n      this.formModelChangesCheck(this.smsCodeForm);\n    });\n  }\n\n  resendSmsCode() {\n    this.incrementRetryAttempts();\n    if (this.urlRecovery) {\n      this.submitActionRequest(this.submittedContactValue, this.type);\n    } else {\n      this.submit.emit(this.submittedContactValue);\n    }\n  }\n\n  private assignSmsResponse(responseObj) {\n    this.smsBodyResponse = Object.assign({}, {hash: responseObj.hash});\n    if (responseObj.urlValidationCode) {\n      this.smsBodyResponse = Object.assign(this.smsBodyResponse, {urlValidationCode: responseObj.urlValidationCode});\n    }\n  }\n\n  private cancelAction() {\n    this.resetFormFields(this.control);\n    this.submittedContactValue = {};\n\n    this.chosenTypeFormOption = ThfModalPasswordRecoveryType.Email;\n    this.modalType = ThfModalPasswordRecoveryModalContent.Email;\n    this.type = this.modalPasswordRecoveryTypeAll ? ThfModalPasswordRecoveryType.All : this.type;\n    this.recoveryModalElement.close();\n  }\n\n  private checkFormType(type: ThfModalPasswordRecoveryType) {\n    return type !== ThfModalPasswordRecoveryType.All ? type : ThfModalPasswordRecoveryType.Email;\n  }\n\n  private formReset(control: AbstractControl) {\n    control.markAsPristine();\n    control.markAsUntouched();\n    control.updateValueAndValidity();\n  }\n\n  private getEmitValue(type: ThfModalPasswordRecoveryType) {\n    return type === ThfModalPasswordRecoveryType.SMS ? this.phone : this.email;\n  }\n\n  private incrementRetryAttempts() {\n    this.submittedContactValue.retry = (this.submittedContactValue.retry + 1 || 1);\n  }\n\n  private openExternalLink(url, queryParam) {\n    window.open(`${url}?token=${queryParam}`, '_self');\n  }\n\n  private openInternalLink(url, endpoint, queryParam) {\n    this.router.navigate([`${url}/${endpoint}`], { queryParams: { token: queryParam } });\n  }\n\n  private pipeModalPhrases() {\n    if (this.type === ThfModalPasswordRecoveryType.SMS) {\n      this.emailModalPhrases['firstPhrase'] = this.setPipeArguments(this.literals.recoveryPasswordPhrase, this.literals.sms);\n      this.emailModalPhrases['secondPhrase'] = this.setPipeArguments(this.literals.supportContact, this.literals.telephone);\n    } else {\n      this.emailModalPhrases['firstPhrase'] = this.setPipeArguments(this.literals.recoveryPasswordPhrase, this.literals.email);\n      this.emailModalPhrases['secondPhrase'] = this.setPipeArguments(this.literals.supportContact, this.literals.email);\n    }\n  }\n\n  private redirectToChangePassword(recoveryToken: ThfModalPasswordRecovery) {\n    const urlChangePassword = recoveryToken.urlChangePassword;\n    if (urlChangePassword) {\n      isExternalLink(urlChangePassword) ?\n      this.openExternalLink(urlChangePassword, recoveryToken.token) :\n      this.openInternalLink(this.urlRecovery, urlChangePassword, recoveryToken.token);\n    } else {\n      const changePasswordEndpoint = 'changePassword';\n      this.openInternalLink(this.urlRecovery, changePasswordEndpoint, recoveryToken.token);\n    }\n  }\n\n  private resetFormFields(control) {\n    this.formReset(control);\n    this.email = undefined;\n    this.phone = undefined;\n    this.smsCode = undefined;\n  }\n\n  private setActions(primaryAction, primarylabel, secondaryAction, secondaryLabel, disabled) {\n    this.primaryAction.action = () => primaryAction.call(this);\n    this.primaryAction.label = primarylabel;\n    this.secondaryAction.action = () => secondaryAction.call(this);\n    this.secondaryAction.label = secondaryLabel;\n    this.primaryAction.disabled = disabled;\n  }\n\n  private setEmailModalPhrasesAndActions() {\n    this.modalTitle = this.literals.forgotPasswordTitle;\n    this.pipeModalPhrases();\n    this.modalPasswordRecoveryTypeAll = this.type === ThfModalPasswordRecoveryType.All;\n    this.setActions(this.submitAction, this.literals.sendButton, this.cancelAction, this.literals.cancelButton, true);\n  }\n\n  private setRequestEndpoint(urlValidationCode?: string) {\n    const endpoint = urlValidationCode || 'validation';\n\n    return `${this.urlRecovery}/${endpoint}`;\n  }\n\n  private setPipeArguments(literalAttr: string, arg: string) {\n    return this.thfI18nPipe.transform(literalAttr, arg);\n  }\n\n  private submitAction() {\n    this.modalType === ThfModalPasswordRecoveryModalContent.Confirmation ? this.incrementRetryAttempts() : this.formReset(this.control);\n    this.submittedContactValue[this.checkFormType(this.type)] = this.getEmitValue(this.type);\n    if (this.urlRecovery) {\n      this.submitActionRequest(this.submittedContactValue, this.type);\n    } else {\n      this.submit.emit(this.submittedContactValue);\n    }\n  }\n\n  private submitActionRequest(data: ThfModalPasswordRecovery, modalType: ThfModalPasswordRecoveryType) {\n    const params = modalType === ThfModalPasswordRecoveryType.SMS ? { type: 'sms' } : undefined;\n\n    this.passwordRecoverySubscription =\n    this.thfModalPasswordRecoveryService.post(this.urlRecovery, data, params)\n    .subscribe(response => {\n      if ((modalType === ThfModalPasswordRecoveryType.Email || modalType === ThfModalPasswordRecoveryType.All) && response.status === 204) {\n        this.openConfirmation();\n      } else if (modalType === ThfModalPasswordRecoveryType.SMS && response.status === 200) {\n        this.assignSmsResponse(response.body);\n        this.openSmsCode();\n      }\n    });\n  }\n\n  private submitSmsCodeAction() {\n    this.submittedCodeValue.code = this.smsCode;\n\n    if (this.urlRecovery) {\n      this.submittedCodeValue = Object.assign(this.submittedCodeValue, {hash: this.smsBodyResponse.hash});\n      this.submitSmsCodeRequest(this.submittedCodeValue);\n\n    } else {\n      this.codeSubmit.emit(this.submittedCodeValue);\n    }\n    this.resetFormFields(this.control);\n  }\n\n  private submitSmsCodeRequest(data: ThfModalPasswordRecovery) {\n    this.smsCodeSubscription = this.thfModalPasswordRecoveryService\n    .post(this.setRequestEndpoint(this.smsBodyResponse.urlValidationCode), data)\n    .subscribe(\n      response => {\n        const successStatus = response.status === 200;\n        if (successStatus) {\n          this.completed();\n          this.redirectToChangePassword(response.body);\n        }\n      },\n      error => {\n        this.codeError = error.error.message;\n        this.openSmsCode();\n      }\n    );\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente utilizado para exibiÃ§Ã£o da mensagem customizada de erro em um campo de formulÃ¡rio.\n */\n@Component({\n  selector: 'thf-modal-password-recovery-error-message',\n  templateUrl: './thf-modal-password-recovery-error-message.component.html'\n})\n\nexport class ThfModalPasswordRecoveryErrorMessageComponent {\n\n  /** Texto exibido na mensagem de erro. */\n  @Input('t-text') text: string;\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\n\nimport { ThfFieldModule, ThfI18nPipe, ThfModalModule } from '@totvs/thf-ui';\n\nimport { ThfModalPasswordRecoveryComponent } from './thf-modal-password-recovery.component';\nimport { ThfModalPasswordRecoveryErrorMessageComponent\n} from './thf-modal-password-recovery-error-message/thf-modal-password-recovery-error-message.component';\nimport { ThfModalPasswordRecoveryService } from './thf-modal-password-recovery.service';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-modal-password-recovery.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n\n    ThfFieldModule,\n    ThfModalModule\n  ],\n  declarations: [\n    ThfModalPasswordRecoveryComponent,\n    ThfModalPasswordRecoveryErrorMessageComponent\n  ],\n  exports: [\n    ThfModalPasswordRecoveryComponent,\n    ThfModalPasswordRecoveryErrorMessageComponent\n  ],\n  providers: [ThfI18nPipe, ThfModalPasswordRecoveryService]\n})\nexport class ThfModalPasswordRecoveryModule { }\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { browserLanguage, convertToBoolean, isTypeof } from './../../utils/util';\nimport { ThfSelectOption } from '@totvs/thf-ui';\n\n@Component({\n  selector: 'thf-page-background',\n  templateUrl: './thf-page-background.component.html'\n})\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente para definiÃ§Ã£o de cor de fundo e dos logotipos primÃ¡rio e secundÃ¡rio para os templates\n * de `thf-page-login` e demais templates de login.\n */\nexport class ThfPageBackgroundComponent implements OnInit {\n\n  private _logo?: string;\n  private _secondaryLogo?: string;\n  private _showSelectLanguage?: boolean = false;\n\n  selectedLanguageOption: string;\n\n  selectLanguageOptions: Array<ThfSelectOption> = [\n    { label: 'English', value: 'en' },\n    { label: 'EspaÃ±ol', value: 'es' },\n    { label: 'PortuguÃªs', value: 'pt' }\n  ];\n\n  /** Insere uma imagem de destaque ao lado direito do container. */\n  @Input('t-background') background?: string;\n\n  /** Designa se o logotipo deve desaparecer em resoluÃ§Ãµes menores. */\n  @Input('t-hide-logo') hideLogo?: boolean;\n\n  /** Texto de destaque sobreposto Ã  imagem de destaque. Essa opÃ§Ã£o Ã© utilizada em conjunto com o atributo `t-background`. */\n  @Input('t-highlight-info') highlightInfo?: string;\n\n  /** Caminho para a logomarca localizada na parte superior. */\n  @Input('t-logo') set logo(value: any) {\n    this._logo = isTypeof(value, 'string') && value.trim() ? value : undefined;\n  }\n\n  get logo() {\n    return this._logo;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caminho para a logomarca localizada no rodapÃ©.\n   */\n  @Input('t-secondary-logo') set secondaryLogo(value: any) {\n    this._secondaryLogo = isTypeof(value, 'string') && value.trim() ? value : undefined;\n  }\n\n  get secondaryLogo() {\n    return this._secondaryLogo;\n  }\n\n  /** Define se o seletor de idiomas deve ser exibido. */\n  @Input('t-show-select-language') set showSelectLanguage(showSelectLanguage: boolean) {\n    this._showSelectLanguage = convertToBoolean(showSelectLanguage);\n  }\n  get showSelectLanguage() {\n    return this._showSelectLanguage;\n  }\n\n  /**\n   * Evento disparado ao selecionar alguma opÃ§Ã£o no seletor de idiomas.\n   * Para este evento serÃ¡ passado como parÃ¢metro o valor de idioma selecionado.\n   */\n  @Output('t-selected-language') selectedLanguage?: EventEmitter<any> = new EventEmitter<any>();\n\n  ngOnInit() {\n    this.selectedLanguageOption = browserLanguage();\n  }\n\n  onChangeLanguage() {\n    this.selectedLanguage.emit(this.selectedLanguageOption);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfDividerModule, ThfFieldModule } from '@totvs/thf-ui';\n\nimport { ThfPageBackgroundComponent } from './thf-page-background.component';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-background.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    ThfDividerModule,\n    ThfFieldModule,\n  ],\n  declarations: [\n    ThfPageBackgroundComponent\n  ],\n  exports: [\n    ThfPageBackgroundComponent\n  ]\n})\nexport class ThfPageBackgroundModule { }\n","/**\n * @usedBy ThfPageBlockedUserComponent\n *\n * @description\n *\n * *Enum* para os tipos de motivo de bloqueio de usuÃ¡rio. As informaÃ§Ãµes modificam conforme o motivo selecionado pelo desenvolvedor.\n */\nexport enum ThfPageBlockedUserReason {\n\n  /** Sem definiÃ§Ã£o; a tela exibirÃ¡ conteÃºdo de bloqueio genÃ©rico. */\n  None = 'none',\n\n  /** DefiniÃ§Ã£o para tentativas de acesso esgotadas. */\n  ExceededAttempts = 'exceededAttempts',\n\n  /** DefiniÃ§Ã£o para senha expirada. */\n  ExpiredPassword = 'expiredPassword',\n\n}\n","import { Input, OnInit } from '@angular/core';\n\nimport { ThfPageBlockedUserReason } from './enums/thf-page-blocked-user-reason.enum';\nimport { ThfPageBlockedUserReasonParams } from './interfaces/thf-page-blocked-user-reason-params.interface';\n\nconst ThfPageBlockedUserReasonDefault: ThfPageBlockedUserReason = ThfPageBlockedUserReason.None;\nconst ThfPageBlockedUserParamsDefault: ThfPageBlockedUserReasonParams = { attempts: 5, days: 90, hours: 24 };\n\n/**\n * @description\n *\n * O componente `thf-page-blocked-user` Ã© utilizado como template para tela de bloqueio de usuÃ¡rio.\n * Ã possÃ­vel definir entre trÃªs tipos de telas para alertar o usuÃ¡rio sobre um eventual bloqueio de login.\n *\n * Cada modelo de bloqueio possui uma imagem e texto adequados Ã  situaÃ§Ã£o.\n * Os textos das telas sÃ£o prÃ©-definidos e imutÃ¡veis, porÃ©m,\n * Ã© possÃ­vel estipular parÃ¢metros como dias, horas e tentativas de acesso esgotadas.\n *\n * Por fim, hÃ¡ propriedades para adiÃ§Ã£o de telefone e/ou email para contato e tambÃ©m a definiÃ§Ã£o para a url de retorno.\n *\n * Para que as imagens sejam exibidas corretamente, Ã© necessÃ¡rio incluir o caminho delas ao projeto. Para isso, edite\n * o *assets* no arquivo **angular.json** da aplicaÃ§Ã£o na seguinte ordem:\n * ```\n *   \"assets\": [\n *     \"src/assets\",\n *     \"src/favicon.ico\",\n *     {\n *       \"glob\": \"**\\/*\",\n *       \"input\": \"node_modules/@totvs/thf-theme/images\",\n *       \"output\": \"assets/images\"\n *     }\n *   ]\n * ```\n *\n * _______________\n *\n * #### Praticidade\n * O `thf-page-blocked-user`, assim como suas propriedades, pode tambÃ©m ser transmitido diretamente pelas configuraÃ§Ã£os de rota e,\n * desta maneira, dispensa-se qualquer menÃ§Ã£o e/ou importaÃ§Ã£o no restante da aplicaÃ§Ã£o. O exemplo abaixo exemplifica\n * a forma dinÃ¢mica com a qual o template pode ser gerado se navegasse para uma rota denominada como `/access-denied`:\n *\n *\n * ```\n *   import { ThfPageBlockedUserComponent, ThfPageBlockedUserReason } from '@totvs/thf-templates';\n *\n *   ...\n *   const routes: Routes = [\n *     {\n *       path: 'access-denied', component: ThfPageBlockedUserComponent, data: {\n *         contactEmail: 'dev.totvs@totvs.com',\n *         contactPhone: '0800 1234 000',\n *         reason: ThfPageBlockedUserReason.ExpiredPassword,\n *         urlBack: '/home'\n *       }\n *     }\n *     ...\n *   ];\n *\n *   @NgModule({\n *     imports: [RouterModule.forRoot(routes)],\n *     exports: [RouterModule]\n *   })\n *   export class AppRoutingModule { }\n * ```\n *\n * > Ã essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.\n *\n */\nexport class ThfPageBlockedUserBaseComponent {\n\n  private _params: ThfPageBlockedUserReasonParams = {...ThfPageBlockedUserParamsDefault};\n  private _reason: ThfPageBlockedUserReason = ThfPageBlockedUserReason.None;\n  private _urlBack: string = '/';\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Valor para o email de contato que deve ser exibido. A aÃ§Ã£o estÃ¡ de acordo com o protocolo MAILTO e Ã© possÃ­vel definir\n   * tanto rotas internas quanto externas.\n   */\n  @Input('t-contact-email') contactEmail: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Valor para o telefone de contato que deve ser exibido. A aÃ§Ã£o estÃ¡ de acordo com o protocolo TEL.\n   *\n   * > A propriedade nÃ£o contem tratamento de mÃ¡scara, fica a critÃ©rio do desenvolvedor defini-la.\n   */\n  @Input('t-contact-phone') contactPhone: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * DesignaÃ§Ã£o de valores usados para a customizaÃ§Ã£o da mensagem de bloqueio.\n   * Confira abaixo os valores prÃ©-definidos.\n   *\n   * ```\n   *  const customLiterals: ThfPageBlockedUserReasonParams = {\n   *    attempts: 5,\n   *    days: 90,\n   *    hours: 24\n   *  };\n   * ```\n   *\n   * > Salientamos a importÃ¢ncia e atenÃ§Ã£o para configuraÃ§Ã£o desses valores conforme definidos no projeto.\n   *\n   * > Veja os parÃ¢metros customizÃ¡veis na interface `ThfPageBlockedUserReasonParams`.\n   *\n   */\n  @Input('t-params') set params(value: ThfPageBlockedUserReasonParams) {\n    if (value instanceof Object) {\n      const keys = Object.keys(value);\n      const newParams = {...ThfPageBlockedUserParamsDefault};\n\n      keys.forEach(key => {\n        newParams[key] = value[key];\n      });\n\n      this._params = newParams;\n    } else {\n      this._params = {...ThfPageBlockedUserParamsDefault};\n    }\n  }\n\n  get params() {\n    return this._params;\n  }\n\n  /** Caminho para a logomarca localizada na parte superior, caso nÃ£o seja definida ou seja invÃ¡lida assume a logo padrÃ£o da TOTVS. */\n  @Input('t-logo') logo?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * DefiniÃ§Ã£o de motivo de bloqueio de usuÃ¡rio. As informaÃ§Ãµes modificam conforme o motivo selecionado.\n   *\n   * > Veja os valores vÃ¡lidos no *enum* `ThfPageBlockedUserReason`.\n   *\n   * @default `ThfPageBlockedUserReason.None`\n   */\n  @Input('t-reason') set reason(value: ThfPageBlockedUserReason) {\n    this._reason = (<any>Object).values(ThfPageBlockedUserReason).includes(value) ? value : ThfPageBlockedUserReasonDefault;\n  }\n\n  get reason() {\n    return this._reason;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caminho para a logomarca localizada no rodapÃ©.\n   */\n  @Input('t-secondary-logo') secondaryLogo?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * URL para a aÃ§Ã£o de retorno da pÃ¡gina.\n   *\n   * @default `/`\n   */\n  @Input('t-url-back') set urlBack(url: string) {\n    this._urlBack = url;\n  }\n\n  get urlBack() {\n    return this._urlBack;\n  }\n\n}\n","import { ActivatedRoute, Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\nimport { browserLanguage, isExternalLink, thfLocaleDefault } from '../../utils/util';\n\nimport { ThfPageBlockedUserBaseComponent } from './thf-page-blocked-user-base.component';\n\nexport const thfPageBlockedUserButtonLiterals: Object = {\n  en: <any> {\n    primaryButton: 'Back to home screen',\n  },\n  es: <any> {\n    primaryButton: 'Volver al inicio',\n  },\n  pt: <any> {\n    primaryButton: 'Voltar para o inÃ­cio',\n  }\n};\n\n/**\n * @docsExtends ThfPageBlockedUserBaseComponent\n *\n * @example\n *\n * <example name=\"thf-page-blocked-user-basic\" title=\"Totvs Page Blocked User Basic\">\n *  <file name=\"sample-thf-page-blocked-user-basic/sample-thf-page-blocked-user-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-blocked-user-basic/sample-thf-page-blocked-user-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-blocked-user-labs\" title=\"Totvs Page Blocked User Labs\">\n *  <file name=\"sample-thf-page-blocked-user-labs/sample-thf-page-blocked-user-labs.component.html\"> </file>\n *  <file name=\"sample-thf-page-blocked-user-labs/sample-thf-page-blocked-user-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-blocked-user-exceeded-attempts\" title=\"Totvs Page Blocked User Exceeded Attempts\">\n *  <file name=\"sample-thf-page-blocked-user-exceeded-attempts/sample-thf-page-blocked-user-exceeded-attempts.component.html\"> </file>\n *  <file name=\"sample-thf-page-blocked-user-exceeded-attempts/sample-thf-page-blocked-user-exceeded-attempts.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-blocked-user-expired-password\" title=\"Totvs Page Blocked User Expired Password\">\n *  <file name=\"sample-thf-page-blocked-user-expired-password/sample-thf-page-blocked-user-expired-password.component.html\"> </file>\n *  <file name=\"sample-thf-page-blocked-user-expired-password/sample-thf-page-blocked-user-expired-password.component.ts\"> </file>\n * </example>\n */\n\n@Component({\n  selector: 'thf-page-blocked-user',\n  templateUrl: './thf-page-blocked-user.component.html'\n})\n\nexport class ThfPageBlockedUserComponent extends ThfPageBlockedUserBaseComponent implements OnInit {\n\n  literals = {\n    ...thfPageBlockedUserButtonLiterals[thfLocaleDefault],\n    ...thfPageBlockedUserButtonLiterals[browserLanguage()],\n  };\n\n  constructor(private activatedRoute: ActivatedRoute, private router: Router) {\n    super();\n  }\n\n  ngOnInit() {\n    this.checkingForRouteMetadata(this.activatedRoute.snapshot.data);\n  }\n\n  navigateTo(url: string) {\n    isExternalLink(url) ?  window.open(url) : this.router.navigate([url || '/']);\n  }\n\n  private checkingForMetadataProperty(object, property) {\n    if (Object.prototype.hasOwnProperty.call(object, property)) {\n      return object[property];\n    }\n  }\n\n  private checkingForRouteMetadata(data) {\n    if (Object.keys(data).length !== 0) {\n      this.contactEmail = this.checkingForMetadataProperty(data, 'contactEmail') || this.contactEmail;\n      this.contactPhone = this.checkingForMetadataProperty(data, 'contactPhone') || this.contactPhone;\n      this.reason = this.checkingForMetadataProperty(data, 'reason') || this.reason;\n      this.urlBack = this.checkingForMetadataProperty(data, 'urlBack') || this.urlBack;\n    }\n  }\n\n}\n","import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild } from '@angular/core';\n\nconst thfPageBlockedUserContactItemMargin = 16;\n\n@Component({\n  selector: 'thf-page-blocked-user-contacts',\n  templateUrl: './thf-page-blocked-user-contacts.component.html'\n})\nexport class ThfPageBlockedUserContactsComponent implements AfterViewInit, OnChanges {\n\n  literals: Object;\n  overflowItem: boolean = false;\n\n  private mailText: string;\n  private phoneText: string;\n\n  @Input('t-email') email: string;\n\n  @Input('t-phone') phone: string;\n\n  @ViewChild('contactGroup', { static: true }) contactGroup: ElementRef;\n\n  @ViewChild('mailItem', { static: true }) mailItem: ElementRef;\n\n  @ViewChild('phoneItem', { static: true }) phoneItem: ElementRef;\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  ngAfterViewInit() {\n    this.checkContactItemWidth();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.email || changes.phone) {\n      this.checkContactItemWidth();\n    }\n  }\n\n  private checkContactItemWidth() {\n    if ( !this.email || !this.phone ) {\n      this.overflowItem = true;\n      return;\n    } else {\n      setTimeout(() => {\n        const phoneWidth = this.phoneItem.nativeElement.offsetWidth;\n        const mailWidth = this.mailItem.nativeElement.offsetWidth;\n        const contactGroupHalfWidth = this.contactGroup.nativeElement.offsetWidth / 2;\n\n        this.overflowItem = phoneWidth > contactGroupHalfWidth || mailWidth > contactGroupHalfWidth - thfPageBlockedUserContactItemMargin;\n      });\n    }\n    this.changeDetector.detectChanges();\n  }\n\n}\n","export const thfPageBlockedUserLiterals = {\n  none: {\n    pt: {\n      title: 'Opa!',\n      firstPhrase: 'Tivemos que bloquear essa tela temporariamente.',\n      secondPhrase: 'Mas nÃ£o se preocupe! Basta fazer seu login novamente.'\n    },\n    en: {\n      title: 'Oops!',\n      firstPhrase: 'We had to temporarily block this screen.',\n      secondPhrase: 'But do not worry! Just sign in again.'\n    },\n    es: {\n      title: 'Opa!',\n      firstPhrase: 'Tuvimos que bloquear esta pantalla temporalmente.',\n      secondPhrase: 'Â¡Pero no se preocupe! SÃ³lo tienes que iniciar sesiÃ³n de nuevo.'\n    },\n  },\n  exceededAttempts: {\n    pt: {\n      title:\n        'Opa!',\n      firstPhrase:\n        `Para sua seguranÃ§a, apÃ³s {0} tentativa(s) de senha seu usuÃ¡rio fica bloqueado e nÃ£o pode ser acessado em {1} hora(s) :( `,\n      secondPhrase:\n        'Isso Ã© para evitar que hackers invadam sua conta.',\n      thirdPhrase:\n        'Mas nÃ£o se preocupe! Se vocÃª for o dono da conta e apenas esqueceu sua senha, basta entrar em contato com o suporte.'\n    },\n    en: {\n      title:\n        'Oops!',\n      firstPhrase:\n        `For your security, after {0} attempt(s) of password\n        your user gets blocked and can not be accessed in {1} hour(s) :(`,\n      secondPhrase:\n        'This is to prevent hackers from hacking into your account.',\n      thirdPhrase:\n        'But do not worry! If you are the owner of the account and just forgot your password, just contact support.'\n    },\n    es: {\n      title:\n        'Opa!',\n      firstPhrase:\n        `Para su seguridad, despuÃ©s de {0} intento(s) de contraseÃ±a\n        su usuario queda bloqueado y no puede ser accedido en {1} hora(s) :(`,\n      secondPhrase:\n        'Esto es para evitar que los hackers invadan su cuenta.',\n      thirdPhrase:\n        `Â¡Pero no se preocupe! Si usted es el dueÃ±o de la cuenta\n        y acaba de olvidar su contraseÃ±a, simplemente pÃ³ngase en contacto con el soporte.`\n    }\n  },\n  expiredPassword: {\n    pt: {\n      title:\n        'Opa! Sua senha expirou',\n      firstPhrase:\n        `A cada {0} dia(s) Ã© preciso criar uma nova senha por questÃ£o de seguranÃ§a. ApÃ³s esses {0} dia(s) seu acesso Ã© bloqueado :(`,\n      secondPhrase:\n        'Mas nÃ£o se preocupe! Basta entrar em contato com o administrador do sistema.'\n    },\n    en: {\n      title:\n        'Oops! Your Password has expired',\n      firstPhrase:\n        `Every {0} day(s) you need to create a new password for security reasons.\n        After these {0} day(s) your access is blocked :(`,\n      secondPhrase:\n        'But do not worry! Just contact your system administrator.'\n    },\n    es: {\n      title:\n        'Opa! Su contraseÃ±a ha caducado',\n      firstPhrase:\n        `Cada {0} dÃ­a(s) es necesario crear una nueva contraseÃ±a por razones de seguridad.\n        DespuÃ©s de estos {0} dÃ­a(s) su acceso estÃ¡ bloqueado :(`,\n      secondPhrase:\n        'Â¡Pero no se preocupe! SÃ³lo tienes que ponerse en contacto con el administrador del sistema.'\n    }\n  }\n};\n","import { ChangeDetectorRef, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\nimport { browserLanguage, thfLocaleDefault } from '../../../utils/util';\n\nimport { thfPageBlockedUserLiterals } from './../literals/i18n/thf-page-blocked-user-literals';\nimport { ThfPageBlockedUserReason } from '../enums/thf-page-blocked-user-reason.enum';\nimport { ThfPageBlockedUserReasonParams } from '../interfaces/thf-page-blocked-user-reason-params.interface';\n\n@Component({\n  selector: 'thf-page-blocked-user-reason',\n  templateUrl: './thf-page-blocked-user-reason.component.html'\n})\nexport class ThfPageBlockedUserReasonComponent implements OnChanges, OnInit {\n\n  literalParams;\n  literals: {title: string, firstPhrase: string, secondPhrase: string, thirdPhrase: string};\n\n  @Input('t-params') params: ThfPageBlockedUserReasonParams;\n\n  @Input('t-reason') reason: ThfPageBlockedUserReason;\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.reason || changes.params) {\n      this.getLiterals();\n    }\n  }\n\n  ngOnInit() {\n    this.getLiterals();\n  }\n\n  getImageByReasonType() {\n    let reasonImage;\n\n    switch (this.reason) {\n      case 'none': {\n        reasonImage = 'big-lock';\n        break;\n      }\n      case 'exceededAttempts': {\n        reasonImage = 'blocked-user';\n        break;\n      }\n      case 'expiredPassword': {\n        reasonImage = 'expired';\n        break;\n      }\n    }\n    return `./assets/images/${reasonImage}.svg`;\n  }\n\n  getParams() {\n    this.literalParams =\n      this.reason === 'expiredPassword' ? [this.params.days, this.params.days] : [this.params.attempts, this.params.hours];\n  }\n\n  private getLiterals() {\n    this.getParams();\n\n    this.literals = {\n      ...thfPageBlockedUserLiterals[this.reason][thfLocaleDefault],\n      ...thfPageBlockedUserLiterals[this.reason][browserLanguage()],\n    };\n\n    this.changeDetector.detectChanges();\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfModule } from '@totvs/thf-ui';\n\nimport { ThfPageBackgroundModule } from '../thf-page-background/index';\nimport { ThfPageBlockedUserComponent } from './thf-page-blocked-user.component';\nimport { ThfPageBlockedUserContactsComponent } from './thf-page-blocked-user-contacts/thf-page-blocked-user-contacts.component';\nimport { ThfPageBlockedUserReasonComponent } from './thf-page-blocked-user-reason/thf-page-blocked-user-reason.component';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-blocked-user.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n\n    ThfModule,\n    ThfPageBackgroundModule,\n  ],\n  declarations: [\n    ThfPageBlockedUserComponent,\n    ThfPageBlockedUserContactsComponent,\n    ThfPageBlockedUserReasonComponent,\n  ],\n  exports: [\n    ThfPageBlockedUserComponent,\n    ThfPageBlockedUserContactsComponent,\n    ThfPageBlockedUserReasonComponent,\n  ]\n})\nexport class ThfPageBlockedUserModule { }\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { ThfModalAction } from '@totvs/thf-ui';\n\nimport { convertToBoolean, isExternalLink, isTypeof } from '../../utils/util';\n\nimport { ThfPageChangePasswordRecovery } from './interfaces/thf-page-change-password-recovery.interface';\nimport { ThfPageChangePasswordRequirement } from './interfaces/thf-page-change-password-requirement.interface';\n\n/**\n * @description\n *\n * O componente `thf-page-change-password` Ã© utilizado como template para tela de cadastro ou alteraÃ§Ã£o de senha.\n *\n * Apresenta dicas e regras para senhas mais seguras e tambÃ©m possibilidade de personalizar o redirecionamento para as telas\n * 'esqueceu a senha', 'voltar' e 'entrar no sistema'. Os textos das telas sÃ£o prÃ©-definidos e imutÃ¡veis.\n *\n * A propriedade `t-url-new-password` automatiza a rotina do template e simplifica o processo de cadastro/alteraÃ§Ã£o de senha, bastando\n * definir uma url para POST das informaÃ§Ãµes digitadas pelo usuÃ¡rio.  A flexibilidade e praticidade podem chegar a um nÃ­vel em que o\n * desenvolvimento da aplicaÃ§Ã£o no *client side* Ã© desprovida de qualquer cÃ³digo-fonte relacionado Ã  rotina de cadastro/alteraÃ§Ã£o de senha.\n * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.\n * Caso julgue necessÃ¡rio, pode-se tambÃ©m definir manualmente a rotina do componente.\n *\n * Para que as imagens sejam exibidas corretamente, Ã© necessÃ¡rio incluir o caminho delas ao projeto. Para isso, edite\n * o *assets* no arquivo **angular.json** da aplicaÃ§Ã£o na seguinte ordem:\n * ```\n *   \"assets\": [\n *     \"src/assets\",\n *     \"src/favicon.ico\",\n *     {\n *       \"glob\": \"**\\/*\",\n *       \"input\": \"node_modules/@totvs/thf-theme/images\",\n *       \"output\": \"assets/images\"\n *     }\n *   ]\n * ```\n */\nexport abstract class ThfPageChangePasswordBaseComponent {\n\n  private _hideCurrentPassword: boolean = false;\n  private _recovery: string | ThfPageChangePasswordRecovery | Function;\n  private _requirements: Array<ThfPageChangePasswordRequirement> = [];\n  private _urlHome: string = '/';\n  protected validatorChange: any;\n\n  confirmPassword: string;\n  currentPassword: string;\n  modalAction: ThfModalAction;\n  newPassword: string;\n  recoveryUrlType: string;\n  showRequirements: boolean;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Esconde o campo `Senha atual` para que o template seja para criaÃ§Ã£o de senha.\n   *\n   * @default `false`\n   */\n  @Input('t-hide-current-password') set hideCurrentPassword(value: boolean) {\n    this._hideCurrentPassword = convertToBoolean(value);\n  }\n\n  get hideCurrentPassword(): boolean {\n    return this._hideCurrentPassword;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caminho para a logomarca localizada na parte superior.\n   *\n   * > Caso seja indefinida o espaÃ§o se mantÃ©m preservado porÃ©m vazio.\n   */\n  @Input('t-logo') logo?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * URL para a aÃ§Ã£o do link `Esqueceu a senha`.\n   *\n   * A propriedade aceita os seguintes tipos:\n   *\n   * - **String**: informe uma url externa ou uma rota vÃ¡lida;\n   * - **Function**: pode-se customizar a aÃ§Ã£o. Para esta possilidade basta atribuir:\n   * ```\n   * <thf-page-change-password>\n   *      [recovery]=\"this.myFunc.bind(this)\";\n   * </thf-page-change-password>\n   * ```\n   *\n   * - **ThfPageChangePasswordRecovery**: cria-se vÃ­nculo automÃ¡tico com o template **thf-modal-password-recovery**.\n   *   O objeto deve conter a **url** para requisiÃ§Ã£o dos recursos e pode-se definir o **tipo** de modal para recuperaÃ§Ã£o de senha,\n   *   **email** para contato e **mÃ¡scara** do campo de telefone.\n   *\n   * > Caso nÃ£o tenha valor o link `Esqueceu a senha` desaparece.\n   */\n  @Input('t-recovery') set recovery(value: string | Function | ThfPageChangePasswordRecovery) {\n    this._recovery = value;\n\n    if (isTypeof(value, 'string')) {\n      this.recoveryUrlType = isExternalLink(value) ? 'externalLink' : 'internalLink';\n    }\n  }\n\n  get recovery() {\n    return this._recovery;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Lista de regras para criaÃ§Ã£o e alteraÃ§Ã£o de senha.\n   */\n  @Input('t-requirements') set requirements(value: Array<ThfPageChangePasswordRequirement>) {\n    this._requirements = value || [];\n    this.showRequirements = this._requirements.length > 0;\n  }\n  get requirements() {\n    return this._requirements;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caminho para a logomarca localizada no rodapÃ©.\n   */\n  @Input('t-secondary-logo') secondaryLogo?: string;\n\n  /**\n   * Token para solicitaÃ§Ã£o de troca/recuperaÃ§Ã£o de senha.\n   *\n   * > Esta propriedade serÃ¡ ignorada caso exista um token como parÃ¢metro na URL inicial do template.\n   */\n  @Input('t-token') token?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * URL para a aÃ§Ã£o de retorno da pÃ¡gina.\n   *\n   * > O botÃ£o `Voltar` aparece apenas para telas de alteraÃ§Ã£o de senha, ou seja, sÃ³ aparece se a propriedade `t-hide-current-password` for\n   * falsa.\n   *\n   * @default `/`\n   */\n  @Input('t-url-back') urlBack: string = '/';\n\n  /**\n   * Endpoint usado pelo template para realizar um POST. Quando preenchido, o mÃ©todo `t-submit` serÃ¡ ignorado e o componente adquirirÃ¡\n   * automatizaÃ§Ã£o para o processo de cadastro/troca de senha.\n   *\n   * ### Processo\n   * Ao digitar um valor vÃ¡lido nos campos de senha e pressionar **salvar**,\n   * o componente farÃ¡ uma requisiÃ§Ã£o `POST` na url especificada nesta propriedade passando o objeto contendo os valores definidos pelo\n   * usuÃ¡rio.\n   *\n   * ```\n   * body {\n   *  token?: token,\n   *  oldPassword?: oldPassword,\n   *  newPassword: newPassword\n   * }\n   * ```\n   *\n   * O cÃ³digo de resposta HTTP de status esperado Ã© `204`.\n   *\n   * Em caso de **sucesso**, serÃ¡ exibida a modal de confirmaÃ§Ã£o de senha alterada.\n   *\n   * > O token serÃ¡ informado pela propriedade `t-token`do componente ou por um *query parameter* na URL do template.\n   *\n   * *Processo finalizado.*\n   *\n   * _______________\n   *\n   * #### Praticidade\n   * As informaÃ§Ãµes do serviÃ§o de autenticaÃ§Ã£o tambÃ©m podem ser transmitidas diretamente pelas configuraÃ§Ã£os de rota e, desta maneira,\n   * dispensa-se qualquer menÃ§Ã£o e/ou importaÃ§Ã£o do componente `thf-page-change-password` no restante da aplicaÃ§Ã£o. O exemplo abaixo\n   * exemplifica a forma dinÃ¢mica com a qual o template de tela de troca de senha pode ser gerado ao navegar para rota `/change-password`, e\n   * tambÃ©m como ele se comunica com o serviÃ§o para efetuaÃ§Ã£o do processo de troca de senha do usuÃ¡rio e solicitaÃ§Ã£o de nova senha.\n   * Basta definir nas configuraÃ§Ãµes de rota:\n   *\n   *\n   * ```\n   *   import { ThfModalPasswordRecoveryType, ThfPageChangePasswordComponent } from '@totvs/thf-templates';\n   *\n   *   ...\n   *   const routes: Routes = [\n   *     {\n   *       path: 'change-password', component: ThfPageChangePasswordComponent, data: {\n   *         serviceApi: 'https://thf.totvs.com.br/sample/api/new-password',\n   *         recovery: {\n   *           url: 'https://thf.totvs.com.br/sample/api/users',\n   *           type: ThfModalPasswordRecoveryType.All,\n   *           contactMail: 'dev.totvs@totvs.com',\n   *           phoneMask: '9-999-999-9999'\n   *         }\n   *       }\n   *     }\n   *     ...\n   *   ];\n   *\n   *   @NgModule({\n   *     imports: [RouterModule.forRoot(routes)],\n   *     exports: [RouterModule]\n   *   })\n   *   export class AppRoutingModule { }\n   * ```\n   *\n   *\n   * O metadado `serviceApi` deve ser a **url** para requisiÃ§Ã£o dos recursos de troca de senha. E `recovery` Ã© a interface\n   * `ThfPageChangePasswordRecovery` responsÃ¡vel pelas especificaÃ§Ãµes contidas na modal de recuperaÃ§Ã£o de senha.\n   *\n   * > Ã essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.\n   *\n   */\n  @Input('t-url-new-password') urlNewPassword?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * URL para a aÃ§Ã£o do botÃ£o `Entrar no sistema` da modal de confirmaÃ§Ã£o que aparece apÃ³s salvar a senha ou se chamada pelo mÃ©todo\n   * `openConfirmation`.\n   *\n   * @default `/`\n   */\n  @Input('t-url-home') set urlHome(value: string) {\n    this._urlHome = value;\n    this.modalAction.action = this.navigateTo.bind(this, this.urlHome);\n  }\n  get urlHome() {\n    return this._urlHome;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * FunÃ§Ã£o executada ao submeter o form pelo botÃ£o salvar.\n   *\n   * Caso definida essa funÃ§Ã£o, a modal de confirmaÃ§Ã£o nÃ£o aparece, mas pode ser chamada pelo\n   * mÃ©todo `openConfirmation`. Exemplo:\n   *\n   * ```\n   * @ViewChild(ThfPageChangePasswordComponent) changePassword: ThfPageChangePasswordComponent;\n   *\n   * onSubmit() {\n   *  this.changePassword.openConfirmation();\n   * }\n   *\n   * ```\n   * > Esta propriedade serÃ¡ ignorada se for definido valor para a propriedade `t-url-new-password`.\n   */\n  @Output('t-submit') submit: EventEmitter<any> = new EventEmitter();\n\n  abstract navigateTo(url: string): void;\n\n}\n","export const thfPageChangePasswordLiterals = {\n  en: <any> {\n    backButton: 'Back',\n    confirmPassword: 'Confirm password',\n    createNewPassword: 'Create new password',\n    createNewPasswordPhrase: 'Protect your account with a personal password created by you',\n    currentPassword: 'Current password',\n    enterSystemButton: 'Enter the system',\n    forgotPassword: 'Forgot your password?',\n    newPassword: 'New password',\n    passwordSuccessfullyCreated: 'Password successfully created!',\n    passwordSuccessfullyUpdated: 'Password successfully updated!',\n    requirements: 'Password requirements',\n    safetyTips: 'Safety tips!',\n    safetyTipsFirst: 'is used in other accounts;',\n    safetyTipsPhrase: 'Avoid a password that:',\n    safetyTipsSecond: 'has personal information like your name, nickname or family names;',\n    safetyTipsThird: 'that uses obvious sequences like \"123\" or obvious words like \"password\";',\n    saveButton: 'Save',\n  },\n  es: <any> {\n    backButton: 'Volver',\n    confirmPassword: 'Confirmar seÃ±a',\n    createNewPassword: 'Crear nueva contraseÃ±a',\n    createNewPasswordPhrase: 'Proteger su cuenta con una contraseÃ±a personal creada por usted',\n    currentPassword: 'ContraseÃ±a actual',\n    enterSystemButton: 'Entrar en el sistema',\n    forgotPassword: 'Â¿Olvidaste tu contraseÃ±a?',\n    newPassword: 'Nueva contraseÃ±a',\n    passwordSuccessfullyCreated: 'ContraseÃ±a creada correctamente!',\n    passwordSuccessfullyUpdated: 'ContraseÃ±a correctamente actualizada!',\n    requirements: 'Requisitos de contraseÃ±a',\n    safetyTips: 'Consejos de seguridad!',\n    safetyTipsFirst: 'se utilice en otras cuentas;',\n    safetyTipsPhrase: 'Evite una contraseÃ±a que:',\n    safetyTipsSecond: 'utiliza informaciÃ³n personal como su nombre, apellido o nombre de familia;',\n    safetyTipsThird: 'utilice secuencias muy obvias como \"1234\" o \"abcd\" o palabras obvias como \"contraseÃ±a\";',\n    saveButton: 'Guardar',\n  },\n  pt: <any> {\n    backButton: 'Voltar',\n    confirmPassword: 'Confirmar senha',\n    createNewPassword: 'Criar nova senha',\n    createNewPasswordPhrase: 'Proteja sua conta com uma senha pessoal criada por vocÃª',\n    currentPassword: 'Senha atual',\n    enterSystemButton: 'Entrar no sistema',\n    forgotPassword: 'Esqueceu sua senha?',\n    newPassword: 'Nova senha',\n    passwordSuccessfullyCreated: 'Senha criada com sucesso!',\n    passwordSuccessfullyUpdated: 'Senha alterada com sucesso!',\n    requirements: 'Requisitos de senha',\n    safetyTips: 'Dicas de seguranÃ§a!',\n    safetyTipsFirst: 'seja usada em outras contas;',\n    safetyTipsPhrase: 'Evite uma senha que:',\n    safetyTipsSecond: 'usa informaÃ§Ãµes pessoais como seu nome, apelido ou nome de familiares;',\n    safetyTipsThird: 'use sequÃªncias muito Ã³bvias como \"1234\" ou \"abcd\" ou palavras Ã³bvias como âsenhaâ;',\n    saveButton: 'Salvar',\n  }\n};\n","import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { HttpClient, HttpResponse } from '@angular/common/http';\n\n@Injectable()\nexport class ThfPageChangePasswordService {\n\n  constructor(private http: HttpClient) {}\n\n  post(url: string, item: any): Observable<HttpResponse<Object>> {\n    return this.http.post<any>(url, item, { observe: 'response' });\n  }\n}\n","import { AfterViewInit, Component, ComponentRef, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Subscription } from 'rxjs';\n\nimport { ThfComponentInjectorService, ThfModalAction, ThfModalComponent } from '@totvs/thf-ui';\n\nimport { browserLanguage, isExternalLink, isTypeof, thfLocaleDefault } from '../../utils/util';\n\nimport { ThfModalPasswordRecoveryComponent } from '../thf-modal-password-recovery/thf-modal-password-recovery.component';\nimport { ThfModalPasswordRecoveryType } from '../thf-modal-password-recovery/enums/thf-modal-password-recovery-type.enum';\nimport { ThfPageChangePassword } from './interfaces/thf-page-change-password.interface';\nimport { ThfPageChangePasswordBaseComponent } from './thf-page-change-password-base.component';\nimport { thfPageChangePasswordLiterals } from './literals/i18n/thf-page-change-password-literals';\nimport { ThfPageChangePasswordRecovery } from './interfaces/thf-page-change-password-recovery.interface';\nimport { ThfPageChangePasswordRequirement } from './interfaces/thf-page-change-password-requirement.interface';\nimport { ThfPageChangePasswordService } from './thf-page-change-password.service';\n\n/**\n * @docsExtends ThfPageChangePasswordBaseComponent\n *\n * @example\n *\n * <example name=\"thf-page-change-password-basic\" title=\"Totvs Page Change Password Basic\">\n *  <file name=\"sample-thf-page-change-password-basic/sample-thf-page-change-password-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-change-password-basic/sample-thf-page-change-password-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-change-password-labs\" title=\"Totvs Page Change Password Labs\">\n *  <file name=\"sample-thf-page-change-password-labs/sample-thf-page-change-password-labs.component.html\"> </file>\n *  <file name=\"sample-thf-page-change-password-labs/sample-thf-page-change-password-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-change-password-modify\" title=\"Totvs Page Change Password Modify\">\n *  <file name=\"sample-thf-page-change-password-modify/sample-thf-page-change-password-modify.component.html\"> </file>\n *  <file name=\"sample-thf-page-change-password-modify/sample-thf-page-change-password-modify.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-change-password-create\" title=\"Totvs Page Change Password Create\">\n *  <file name=\"sample-thf-page-change-password-create/sample-thf-page-change-password-create.component.html\"> </file>\n *  <file name=\"sample-thf-page-change-password-create/sample-thf-page-change-password-create.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-change-password-request\" title=\"Totvs Page Change Password Request\">\n *  <file name=\"sample-thf-page-change-password-request/sample-thf-page-change-password-request.component.html\"> </file>\n *  <file name=\"sample-thf-page-change-password-request/sample-thf-page-change-password-request.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-page-change-password',\n  templateUrl: './thf-page-change-password.component.html'\n})\n\nexport class ThfPageChangePasswordComponent extends ThfPageChangePasswordBaseComponent implements AfterViewInit, OnDestroy, OnInit {\n\n  private newPasswordSubscription: Subscription;\n\n  readonly literals: { backButton: string, confirmPassword: string, createNewPassword: string, createNewPasswordPhrase: string,\n    currentPassword: string, enterSystemButton: string, forgotPassword: string, newPassword: string, passwordSuccessfullyCreated: string,\n    passwordSuccessfullyUpdated: string, safetyTips: string, safetyTipsPhrase: string, safetyTipsFirst: string, safetyTipsSecond: string,\n    safetyTipsThird: string, saveButton: string } =\n    {\n      ...thfPageChangePasswordLiterals[thfLocaleDefault],\n      ...thfPageChangePasswordLiterals[browserLanguage()],\n    };\n\n  private componentRef: ComponentRef<any> = null;\n\n  modalAction: ThfModalAction = {\n    action: this.navigateTo.bind(this, this.urlHome),\n    label: this.literals.enterSystemButton\n  };\n\n  parentRef: any;\n\n  @ViewChild(ThfModalComponent, { static: true }) modal: ThfModalComponent;\n  @ViewChild('pageChangePassword', { read: ViewContainerRef, static: true }) pageChangePassword: ViewContainerRef;\n  @ViewChild('passwordForm', { read: NgForm, static: true }) passwordForm: NgForm;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private route: ActivatedRoute,\n    private router: Router,\n    private service: ThfPageChangePasswordService,\n    private thfComponentInjector: ThfComponentInjectorService,\n    viewRef: ViewContainerRef) {\n      super();\n      this.parentRef = viewRef['_view']['component'];\n  }\n\n  ngAfterViewInit() {\n    if (this.urlNewPassword) {\n      this.subscribeToTokenParameter();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.newPasswordSubscription) {\n      this.newPasswordSubscription.unsubscribe();\n    }\n  }\n\n  ngOnInit() {\n    this.checkingForRouteMetadata(this.activatedRoute.snapshot.data);\n  }\n\n  navigateTo(url: string) {\n    isExternalLink(url) ?  window.open(url) : this.router.navigate([url || '/']);\n  }\n\n  onForgotPasswordClick(recovery): void {\n    if (isTypeof(recovery, 'function')) {\n      recovery();\n    } else {\n      this.createModalPasswordRecoveryComponent(recovery);\n    }\n  }\n\n  onLoginSubmit(): void {\n\n    const form = this.getLoginForm();\n\n    if (this.urlNewPassword) {\n      this.postUrlNewPassword(form);\n    } else if (this.submit && this.submit.observers.length) {\n      this.emitSubmit(form);\n    }\n  }\n\n  /**\n   * Abre uma modal de confirmaÃ§Ã£o com texto, imagem e botÃ£o que redireciona para o link definido na propriedade `t-url-home`\u001c\n   */\n  openConfirmation() {\n    this.modal.open();\n  }\n\n  validatePassword() {\n    const controls =  this.passwordForm.form.controls;\n    const controlConfirmPassword = controls['confirmPassword'];\n    const controlNewPassword = controls['newPassword'];\n\n    if (!this.newPassword) {\n      this.setFormErrors({'required': true}, [controlNewPassword]);\n    } else if (!this.confirmPassword) {\n      this.setFormErrors({'required': true}, [controlConfirmPassword]);\n    } else if (this.newPassword && this.confirmPassword && this.newPassword !== this.confirmPassword) {\n      this.setFormErrors({'equalPassword': true}, [controlNewPassword, controlConfirmPassword]);\n    }  else {\n      this.setFormErrors(null, [controlConfirmPassword, controlNewPassword]);\n    }\n\n    if (this.requirements.length && this.requirements.find(requirement =>  this.validateRequirement(requirement) === false)) {\n      this.setFormErrors({'requirement': true}, [controlNewPassword]);\n    }\n  }\n\n  validateRequirement(requirement: ThfPageChangePasswordRequirement) {\n    return typeof requirement.status === 'function' ? requirement.status.call(this.parentRef, this.newPassword) : requirement.status;\n  }\n\n  private checkingForMetadataProperty(object, property) {\n    if (Object.prototype.hasOwnProperty.call(object, property)) {\n      return object[property];\n    }\n  }\n\n  private checkingForRouteMetadata(data) {\n    if (Object.keys(data).length !== 0) {\n      this.urlNewPassword = this.checkingForMetadataProperty(data, 'serviceApi') || this.urlNewPassword;\n      this.recovery = this.checkingForMetadataProperty(data, 'recovery') || this.recovery;\n      this.hideCurrentPassword = this.checkingForMetadataProperty(data, 'hideCurrentPassword') || this.hideCurrentPassword;\n    }\n  }\n\n  private createModalPasswordRecoveryComponent(recovery: ThfPageChangePasswordRecovery) {\n    if (this.componentRef) {\n      this.thfComponentInjector.destroyComponentInApplication(this.componentRef);\n    }\n\n    this.componentRef = this.thfComponentInjector.createComponentInApplication(ThfModalPasswordRecoveryComponent);\n    this.componentRef.instance.recovery = recovery.url;\n    this.componentRef.instance.contactEmail = recovery.contactMail;\n    this.componentRef.instance.phoneMask = recovery.phoneMask;\n    this.componentRef.instance.type = recovery.type || ThfModalPasswordRecoveryType.Email;\n    this.componentRef.changeDetectorRef.detectChanges();\n    setTimeout(() => {\n      this.componentRef.instance.open();\n    });\n  }\n\n  private emitSubmit(form: ThfPageChangePassword) {\n    this.submit.emit(form);\n  }\n\n  private getLoginForm(): ThfPageChangePassword {\n    return {\n      currentPassword: this.currentPassword,\n      newPassword: this.newPassword\n    };\n  }\n\n  private postUrlNewPassword(form: ThfPageChangePassword) {\n\n    form['token'] = this.token;\n\n    this.service.post(this.urlNewPassword, form).subscribe(response => {\n      if (response.status === 204) {\n        this.openConfirmation();\n      }\n    });\n  }\n\n  private setFormErrors(error: any, controls?: Array<any>) {\n    controls.forEach(control => {\n      control.setErrors(error);\n    });\n  }\n\n  private subscribeToTokenParameter() {\n    this.route.queryParams.subscribe(params => {\n      const token = params['token'];\n\n      if (token) {\n        this.token = token;\n      }\n    });\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfModule } from '@totvs/thf-ui';\n\nimport { ThfModalPasswordRecoveryComponent } from '../thf-modal-password-recovery/thf-modal-password-recovery.component';\nimport { ThfPageBackgroundModule } from '../thf-page-background/index';\nimport { ThfPageChangePasswordComponent } from './thf-page-change-password.component';\nimport { ThfPageChangePasswordService } from './thf-page-change-password.service';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-change-password.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n\n    ThfModule,\n    ThfPageBackgroundModule\n  ],\n  declarations: [\n    ThfPageChangePasswordComponent\n  ],\n  entryComponents: [\n    ThfModalPasswordRecoveryComponent\n  ],\n  providers: [\n    ThfPageChangePasswordService\n  ],\n  exports: [\n    ThfPageChangePasswordComponent\n  ]\n})\nexport class ThfPageChangePasswordModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ThfPageDynamicService {\n\n  private endpoint = '/';\n\n  readonly headers: HttpHeaders = new HttpHeaders({\n    'X-TOTVS-SCREEN-LOCK': 'true'\n  });\n\n  constructor(private http: HttpClient) { }\n\n  configServiceApi(config: { endpoint?: string } = {}) {\n    this.endpoint = config.endpoint;\n  }\n\n  getMetadata(type: string = 'list'): Observable<any> {\n    const key = `${this.endpoint}-${type}-metadata`;\n    const cache = JSON.parse(localStorage.getItem(key)) || {};\n\n    const url = `${this.endpoint}/metadata?type=${type}&version=${cache.version || ''}`;\n\n    return this.http.get(url).pipe(map((response: any) => {\n      if (response.version === cache.version) {\n        return cache;\n      }\n\n      localStorage.setItem(key, JSON.stringify(response));\n\n      return  { ...cache, ...response };\n    }));\n  }\n\n  // Deleta um Ãºnico recurso\n  deleteResource(id): Observable<any> {\n    return this.http.delete(`${this.endpoint}/${id}`, { headers: this.headers });\n  }\n\n  // Deleta recursos em lote\n  deleteResources(ids: Array<any>): Observable<any> {\n    return this.http.request('delete', `${this.endpoint}`, { headers: this.headers, body: ids } );\n  }\n\n  // Busca uma lista de recursos\n  getResources(params: {} = {}): Observable<any> {\n    return this.http.get(this.endpoint, { headers: this.headers, params });\n  }\n\n  // Busca um Ãºnico recurso\n  getResource(id): Observable<any> {\n    return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers });\n  }\n\n  // Cria um recurso\n  createResource(resource): Observable<any> {\n    return this.http.post(`${this.endpoint}`, resource, { headers: this.headers });\n  }\n\n  // Atualiza um recurso\n  updateResource(id, resource): Observable<any> {\n    return this.http.put(`${this.endpoint}/${id}`, resource, { headers: this.headers });\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Route, Router, ActivatedRoute } from '@angular/router';\n\nimport * as util from '../../utils/util';\n\nimport { ThfBreadcrumb, ThfPageAction, ThfDialogService, ThfDialogConfirmOptions, ThfNotificationService } from '@totvs/thf-ui';\n\nimport { ThfPageDynamicDetailActions } from './thf-page-dynamic-detail-actions.interface';\nimport { ThfPageDynamicDetailField } from './thf-page-dynamic-detail-field.interface';\nimport { ThfPageDynamicService } from './thf-page-dynamic.service';\n\nexport const thfPageDynamicDetailLiteralsDefault = {\n  en: {\n    pageActionEdit: 'Edit',\n    pageActionRemove: 'Delete',\n    pageActionBack: 'Back',\n    confirmRemoveTitle: 'Confirm delete',\n    confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',\n    removeNotificationSuccess: 'Item deleted successfully.',\n    registerNotFound: 'Register not found.'\n  },\n  es: {\n    pageActionEdit: 'Editar',\n    pageActionRemove: 'Borrar',\n    pageActionBack: 'Regreso',\n    confirmRemoveTitle: 'Confirmar la exclusiÃ³n',\n    confirmRemoveMessage: 'Â¿EstÃ¡ seguro de que desea eliminar este registro? No puede deshacer esta acciÃ³n.',\n    removeNotificationSuccess: 'Elemento eliminado con Ã©xito.',\n    registerNotFound: 'Registro no encontrado.'\n  },\n  pt: {\n    pageActionEdit: 'Editar',\n    pageActionRemove: 'Excluir',\n    pageActionBack: 'Voltar',\n    confirmRemoveTitle: 'Confirmar exclusÃ£o',\n    confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? VocÃª nÃ£o poderÃ¡ desfazer essa aÃ§Ã£o.',\n    removeNotificationSuccess: 'Item excluÃ­do com sucesso.',\n    registerNotFound: 'Registro nÃ£o encontrado.'\n  }\n};\n\n/**\n * @description\n *\n * O `thf-page-dynamic-detail` Ã© uma pÃ¡gina que serve para exibir registros em detalhes,\n * o mesmo tambÃ©m suporta metadados conforme especificado na documentaÃ§Ã£o.\n *\n * @example\n *\n * <example name=\"thf-page-dynamic-detail-basic\" title=\"Totvs Page Dynamic Detail Basic\">\n *  <file name=\"sample-thf-page-dynamic-detail-basic/sample-thf-page-dynamic-detail-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-detail-basic/sample-thf-page-dynamic-detail-basic.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-page-dynamic-detail',\n  templateUrl: './thf-page-dynamic-detail.component.html',\n  providers: [ ThfPageDynamicService ]\n})\nexport class ThfPageDynamicDetailComponent implements OnInit {\n\n  private _actions: ThfPageDynamicDetailActions = {};\n  private _autoRouter: boolean = false;\n  private _duplicates: Array<any> = [];\n  private _fields: Array<any> = [];\n  private _keys: Array<any> = [];\n  private _pageActions: Array<ThfPageAction> = [];\n\n  literals = {\n    ...thfPageDynamicDetailLiteralsDefault[util.thfLocaleDefault],\n    ...thfPageDynamicDetailLiteralsDefault[util.browserLanguage()]\n  };\n  model: any = {};\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define as aÃ§Ãµes da pÃ¡gina de acordo com a interface `ThfPageDynamicDetailActions`.\n   */\n  @Input('t-actions') set actions(value: ThfPageDynamicDetailActions) {\n    this._actions = this.isObject(value) ? value : {};\n\n    this._pageActions = this.getPageActions(this._actions);\n  }\n\n  /**\n   * @todo Validar rotas na mÃ£o pois se existir uma rota '**' o catch do navigation nÃ£o funciona.\n   *\n   * @optional\n   *\n   * @description\n   *\n   * Cria automaticamente as rotas de ediÃ§Ã£o (novo/duplicate) e detalhes caso as aÃ§Ãµes\n   * estejam definidas nas aÃ§Ãµes.\n   *\n   * > Para o correto funcionamento nÃ£o pode haver nenhum rota coringa (`**`) especificada.\n   *\n   * @default false\n   */\n  @Input('t-auto-router') set autoRouter(value: boolean) {\n    this._autoRouter = util.convertToBoolean(value);\n  }\n\n  get autoRouter(): boolean {\n    return this._autoRouter;\n  }\n\n  /** Objeto com propriedades do breadcrumb. */\n  @Input('t-breadcrumb') breadcrumb?: ThfBreadcrumb = { items: [] };\n\n  /** Lista dos campos exibidos na pÃ¡gina. */\n  @Input('t-fields') set fields(value: Array<ThfPageDynamicDetailField>) {\n    this._fields = Array.isArray(value) ? [...value] : [];\n\n    this._keys = this.getKeysByFields(this.fields);\n    this._duplicates = this.getDuplicatesByFields(this.fields);\n  }\n\n  get fields(): Array<ThfPageDynamicDetailField> {\n    return this._fields;\n  }\n\n  /** TÃ­tulo da pÃ¡gina. */\n  @Input('t-title') title: string;\n\n  /**\n   * @description\n   *\n   * Endpoint usado pelo template para requisiÃ§Ã£o do recurso que serÃ£o exibido.\n   *\n   * Caso a aÃ§Ã£o `remove` estiver configurada, serÃ¡ feito uma requisiÃ§Ã£o de exclusÃ£o nesse mesmo endpoint passando os campos\n   * setados como `key: true`.\n   *\n   * > `DELETE {end-point}/{keys}`\n   *\n   * ```\n   *  <thf-page-dynamic-detail\n   *    [t-actions]=\"{ remove: '/' }\"\n   *    [t-fields]=\"[ { property: 'id', key: true } ]\"\n   *    t-service=\"/api/thf-samples/v1/people\"\n   *    ...>\n   *  </thf-page-dynamic-detail>\n   * ```\n   *\n   * ResquisiÃ§Ã£o disparada, onde a propriedade `id` Ã© igual a 2:\n   *\n   * ```\n   *  DELETE /api/thf-samples/v1/people/2 HTTP/1.1\n   *  Host: localhost:4000\n   *  Connection: keep-alive\n   *  Accept: application/json, text/plain\n   *  ...\n   * ```\n   *\n   * > Caso esteja usando metadados com o template, serÃ¡ disparado uma requisiÃ§Ã£o na inicializaÃ§Ã£o do template para buscar\n   * > os metadados da pÃ¡gina passando o tipo do metadado esperado e a versÃ£o cacheada pelo browser.\n   * >\n   * > `GET {end-point}/metadata?type=detail&version={version}`\n   */\n  @Input('t-service-api') serviceApi: string;\n\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private thfNotification: ThfNotificationService,\n    private thfDialogService: ThfDialogService,\n    private thfPageDynamicService: ThfPageDynamicService) {\n  }\n\n  ngOnInit(): void {\n    const paramId = this.activatedRoute.snapshot.params['id'];\n\n    if (this.activatedRoute.snapshot.data.serviceApi) {\n      this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;\n\n      this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });\n\n      this.loadMetadata(paramId);\n    } else {\n      this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });\n\n      this.loadData(paramId);\n    }\n  }\n\n  get duplicates() {\n    return [...this._duplicates];\n  }\n\n  get keys() {\n    return [...this._keys];\n  }\n\n  get pageActions() {\n    return [...this._pageActions];\n  }\n\n  private confirmRemove(path) {\n    const confirmOptions: ThfDialogConfirmOptions = {\n      title: this.literals.confirmRemoveTitle,\n      message: this.literals.confirmRemoveMessage,\n      confirm: this.remove.bind(this, path)\n    };\n\n    this.thfDialogService.confirm(confirmOptions);\n  }\n\n  private formatUniqueKey(item) {\n    const keys = util.mapObjectByProperties(item, this.keys);\n\n    return util.valuesFromObject(keys).join('|');\n  }\n\n  private goBack(/*path*/) {\n    window.history.back();\n    // if (path) {\n    //   this.navigateTo({ path, component: ThfPageDynamicEditComponent });\n    // } else {\n    //   window.history.back();\n    // }\n  }\n\n  private loadData(id) {\n    this.thfPageDynamicService.getResource(id).toPromise().then(response => {\n      this.model = response;\n    }).catch(() => {\n      this.model = undefined;\n      this.actions = undefined;\n    });\n  }\n\n  private loadMetadata(id) {\n    this.thfPageDynamicService.getMetadata('detail').toPromise().then(response => {\n      this.autoRouter = response.autoRouter;\n      this.actions = response.actions || {};\n      this.breadcrumb = response.breadcrumb || { items : [] };\n      this.fields = response.fields || [];\n      this.title = response.title;\n\n      this.loadData(id);\n    });\n  }\n\n  // @todo Validar rotas na mÃ£o pois se existir uma rota '**' o catch do navigation nÃ£o funciona.\n  private navigateTo(route: { path: string, component?, url?: string, params?: any }, forceStopAutoRouter: boolean = false) {\n    this.router.navigate([route.url || route.path], { queryParams: route.params })\n      .catch(() => {\n        if (forceStopAutoRouter || !this.autoRouter) {\n          return;\n        }\n\n        this.router.config.unshift(<Route>{\n          path: route.path, component: route.component, data: { serviceApi: this.serviceApi, autoRouter: true }\n        });\n\n        this.navigateTo(route, true);\n      });\n  }\n\n  private openEdit(path) {\n    const url = this.resolveUrl(this.model, path);\n\n    // this.navigateTo({ path, url, component: ThfPageDynamicEditComponent });\n    this.navigateTo({ path, url });\n  }\n\n  private remove(path) {\n    const uniqueKey = this.formatUniqueKey(this.model);\n\n    this.thfPageDynamicService.deleteResource(uniqueKey).toPromise().then(() => {\n      this.thfNotification.success(this.literals.removeNotificationSuccess);\n\n      this.navigateTo({ path: path });\n      // this.navigateTo({ path: path, component: ThfPageDynamicTableComponent });\n    });\n  }\n\n  private resolveUrl(item: any, path: string) {\n    const uniqueKey = this.formatUniqueKey(item);\n\n    return path.replace(/:id/g, uniqueKey);\n  }\n\n  private getPageActions(actions: ThfPageDynamicDetailActions = {}): Array<ThfPageAction> {\n    const pageActions = [];\n\n    if (actions.edit) {\n      pageActions.push({ label: this.literals.pageActionEdit, action: this.openEdit.bind(this, actions.edit) });\n    }\n\n    if (actions.remove) {\n      pageActions.push({ label: this.literals.pageActionRemove, action: this.confirmRemove.bind(this, actions.remove) });\n    }\n\n    if (actions.back === undefined || actions.back) {\n      pageActions.push({ label: this.literals.pageActionBack, action: this.goBack.bind(this, actions.back) });\n    }\n\n    return pageActions;\n  }\n\n  private getKeysByFields(fields: Array<any> = []) {\n    return fields.filter(field => field.key === true).map(field => field.property);\n  }\n\n  private getDuplicatesByFields(fields: Array<any> = []) {\n    return fields.filter(field => field.duplicate === true).map(field => field.property);\n  }\n\n  private isObject(value: any): boolean {\n    return !!value && typeof value === 'object' && !Array.isArray(value);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfDynamicModule, ThfModalModule, ThfPageModule, ThfWidgetModule } from '@totvs/thf-ui';\n\nimport { ThfPageDynamicDetailComponent } from './thf-page-dynamic-detail.component';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-dynamic-detail.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n\n    ThfDynamicModule,\n    ThfModalModule,\n    ThfPageModule,\n    ThfWidgetModule\n  ],\n  declarations: [\n    ThfPageDynamicDetailComponent\n  ],\n  exports: [\n    ThfPageDynamicDetailComponent\n  ]\n})\nexport class ThfPageDynamicDetailModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ThfPageDynamicService {\n\n  private endpoint = '/';\n\n  readonly headers: HttpHeaders = new HttpHeaders({\n    'X-TOTVS-SCREEN-LOCK': 'true'\n  });\n\n  constructor(private http: HttpClient) { }\n\n  configServiceApi(config: { endpoint?: string } = {}) {\n    this.endpoint = config.endpoint;\n  }\n\n  getMetadata(type: string = 'list'): Observable<any> {\n    const key = `${this.endpoint}-${type}-metadata`;\n    const cache = JSON.parse(localStorage.getItem(key)) || {};\n\n    const url = `${this.endpoint}/metadata?type=${type}&version=${cache.version || ''}`;\n\n    return this.http.get(url).pipe(map((response: any) => {\n      if (response.version === cache.version) {\n        return cache;\n      }\n\n      localStorage.setItem(key, JSON.stringify(response));\n\n      return  { ...cache, ...response };\n    }));\n  }\n\n  // Deleta um Ãºnico recurso\n  deleteResource(id): Observable<any> {\n    return this.http.delete(`${this.endpoint}/${id}`, { headers: this.headers });\n  }\n\n  // Deleta recursos em lote\n  deleteResources(ids: Array<any>): Observable<any> {\n    return this.http.request('delete', `${this.endpoint}`, { headers: this.headers, body: ids } );\n  }\n\n  // Busca uma lista de recursos\n  getResources(params: {} = {}): Observable<any> {\n    return this.http.get(this.endpoint, { headers: this.headers, params });\n  }\n\n  // Busca um Ãºnico recurso\n  getResource(id): Observable<any> {\n    return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers });\n  }\n\n  // Cria um recurso\n  createResource(resource): Observable<any> {\n    return this.http.post(`${this.endpoint}`, resource, { headers: this.headers });\n  }\n\n  // Atualiza um recurso\n  updateResource(id, resource): Observable<any> {\n    return this.http.put(`${this.endpoint}/${id}`, resource, { headers: this.headers });\n  }\n}\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\n\nimport {\n  ThfBreadcrumb,\n  ThfDialogService,\n  ThfDynamicFormComponent,\n  ThfGridComponent,\n  ThfGridRowActions,\n  ThfNotificationService,\n  ThfPageAction } from '@totvs/thf-ui';\n\nimport * as util from './../../utils/util';\n\nimport { ThfPageDynamicEditActions } from './thf-page-dynamic-edit-actions.interface';\nimport { ThfPageDynamicEditField } from './thf-page-dynamic-edit-field.interface';\nimport { ThfPageDynamicService } from './thf-page-dynamic.service';\n\nexport const thfPageDynamicEditLiteralsDefault = {\n  en: {\n    cancelConfirmMessage: 'Are you sure you want to cancel this operation?',\n    detailActionNew: 'New',\n    pageActionCancel: 'Cancel',\n    pageActionSave: 'Save',\n    pageActionSaveNew: 'Save and new',\n    registerNotFound: 'Register not found.',\n    saveNewNotificationSuccessSave: 'Resource successfully saved.',\n    saveNewNotificationSuccessUpdate: 'Resource successfully updated.',\n    saveNewNotificationWarning: 'Form must be filled out correctly.',\n    saveNotificationSuccessSave: 'Resource successfully saved.',\n    saveNotificationSuccessUpdate: 'Resource successfully updated.',\n    saveNotificationWarning: 'Form must be filled out correctly.',\n  },\n  es: {\n    cancelConfirmMessage: 'EstÃ¡ seguro de que desea cancelar esta operaciÃ³n?',\n    detailActionNew: 'Nuevo',\n    pageActionCancel: 'Cancelar',\n    pageActionSave: 'Guardar',\n    pageActionSaveNew: 'Guardar y nuevo',\n    registerNotFound: 'Registro no encontrado.',\n    saveNewNotificationSuccessSave: 'Recurso salvo con Ã©xito.',\n    saveNewNotificationSuccessUpdate: 'Recurso actualizado con Ã©xito.',\n    saveNewNotificationWarning: 'El formulario debe llenarse correctamente.',\n    saveNotificationSuccessSave: 'Recurso salvo con Ã©xito.',\n    saveNotificationSuccessUpdate: 'Recurso actualizado con Ã©xito.',\n    saveNotificationWarning: 'El formulario debe llenarse correctamente.',\n  },\n  pt: {\n    cancelConfirmMessage: 'Tem certeza que deseja cancelar esta operaÃ§Ã£o?',\n    detailActionNew: 'Novo',\n    pageActionCancel: 'Cancelar',\n    pageActionSave: 'Salvar',\n    pageActionSaveNew: 'Salvar e novo',\n    registerNotFound: 'Registro nÃ£o encontrado.',\n    saveNewNotificationSuccessSave: 'Recurso salvo com sucesso.',\n    saveNewNotificationSuccessUpdate: 'Recurso atualizado com sucesso.',\n    saveNewNotificationWarning: 'FormulÃ¡rio precisa ser preenchido corretamente.',\n    saveNotificationSuccessSave: 'Recurso salvo com sucesso.',\n    saveNotificationSuccessUpdate: 'Recurso atualizado com sucesso.',\n    saveNotificationWarning: 'FormulÃ¡rio precisa ser preenchido corretamente.',\n  }\n};\n\n/**\n * @description\n *\n * O `thf-page-dynamic-edit` Ã© uma pÃ¡gina que pode servir para editar ou criar novos registros,\n * o mesmo tambÃ©m suporta metadados conforme especificado na documentaÃ§Ã£o.\n *\n * @example\n *\n * <example name=\"thf-page-dynamic-edit-basic\" title=\"Totvs Page Dynamic Edit Basic\">\n *  <file name=\"sample-thf-page-dynamic-edit-basic/sample-thf-page-dynamic-edit-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-edit-basic/sample-thf-page-dynamic-edit-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-dynamic-edit-user\" title=\"Totvs Page Dynamic Edit - User\">\n *  <file name=\"sample-thf-page-dynamic-edit-user/sample-thf-page-dynamic-edit-user.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-edit-user/sample-thf-page-dynamic-edit-user.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-dynamic-edit-master-detail\" title=\"Totvs Page Dynamic Edit - Master Detail\">\n *  <file name=\"sample-thf-page-dynamic-edit-master-detail/sample-thf-page-dynamic-edit-master-detail.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-edit-master-detail/sample-thf-page-dynamic-edit-master-detail.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-page-dynamic-edit',\n  templateUrl: './thf-page-dynamic-edit.component.html',\n  providers: [ ThfPageDynamicService ]\n})\nexport class ThfPageDynamicEditComponent implements OnInit {\n\n  private _actions: ThfPageDynamicEditActions = {};\n  private _autoRouter: boolean = false;\n  private _controlFields: Array<any> = [];\n  private _detailFields: Array<any> = [];\n  private _duplicates: Array<any> = [];\n  private _fields: Array<any> = [];\n  private _keys: Array<any> = [];\n  private _pageActions: Array<ThfPageAction> = [];\n\n  literals = {\n    ...thfPageDynamicEditLiteralsDefault[util.thfLocaleDefault],\n    ...thfPageDynamicEditLiteralsDefault[util.browserLanguage()]\n  };\n  model: any = {};\n\n  // beforeSave: return boolean\n  // afterSave\n  // beforeRemove: return boolean\n  // afterRemove\n  // beforeInsert: : return boolean\n  readonly detailActions: ThfGridRowActions = { };\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * AÃ§Ãµes da pÃ¡gina.\n   */\n  @Input('t-actions') set actions(value: ThfPageDynamicEditActions) {\n    this._actions = this.isObject(value) ? value : {};\n\n    this._pageActions = this.getPageActions(this._actions);\n  }\n\n  /**\n   * @todo Validar rotas na mÃ£o pois se existir uma rota '**' o catch do navigation nÃ£o funciona.\n   *\n   * @optional\n   *\n   * @description\n   *\n   * Cria automaticamente as rotas de ediÃ§Ã£o (novo/duplicate) e detalhes caso as aÃ§Ãµes\n   * estejam definidas nas aÃ§Ãµes.\n   *\n   * > Para o correto funcionamento nÃ£o pode haver nenhum rota coringa (`**`) especificada.\n   *\n   * @default false\n   */\n  @Input('t-auto-router') set autoRouter(value: boolean) {\n    this._autoRouter = util.convertToBoolean(value);\n  }\n\n  get autoRouter(): boolean {\n    return this._autoRouter;\n  }\n\n  /** Objeto com propriedades do breadcrumb. */\n  @Input('t-breadcrumb') breadcrumb?: ThfBreadcrumb = { items: [] };\n\n  /** Lista dos campos usados na tabela e busca avanÃ§ada. */\n  @Input('t-fields') set fields(value: Array<ThfPageDynamicEditField>) {\n    this._fields = Array.isArray(value) ? [...value] : [];\n\n    this._keys = this.getKeysByFields(this._fields);\n    this._duplicates = this.getDuplicatesByFields(this._fields);\n\n    this._controlFields = this.getControlFields(this._fields);\n    this._detailFields = this.getDetailFields(this._fields);\n  }\n\n  get fields(): Array<ThfPageDynamicEditField> {\n    return this._fields;\n  }\n\n  /**\n   * @description\n   *\n   * Endpoint usado pelo template para requisiÃ§Ã£o do recurso que serÃ£o exibido para ediÃ§Ã£o.\n   *\n   * Para as aÃ§Ãµes de `save` e `saveNew`, serÃ¡ feito uma requisiÃ§Ã£o de criaÃ§Ã£o nesse mesmo endpoint passando os valores\n   * preenchidos pelo usuÃ¡rio via payload.\n   *\n   * > `POST {end-point}`\n   *\n   * ```\n   *  <thf-page-dynamic-edit\n   *    [t-actions]=\"{ save: '/', saveNew: 'new' }\"\n   *    [t-fields]=\"[ { property: 'name' }, { property: 'city' } ]\"\n   *    t-service=\"/api/thf-samples/v1/people\"\n   *    ...>\n   *  </thf-page-dynamic-edit>\n   * ```\n   *\n   * ResquisiÃ§Ã£o disparada, onde a propriedade `name` e `city` foram preenchidas:\n   *\n   * ```\n   *  POST /api/thf-samples/v1/people HTTP/1.1\n   *  Host: localhost:4000\n   *  Connection: keep-alive\n   *  Accept: application/json, text/plain\n   *  ...\n   * ```\n   *\n   * Request payload:\n   *\n   * ```\n   * { \"name\": \"Fulano\", \"city\": \"Smallville\" }\n   * ```\n   * > Caso esteja usando metadados com o template, serÃ¡ disparado uma requisiÃ§Ã£o na inicializaÃ§Ã£o do template para buscar\n   * > os metadados da pÃ¡gina passando o tipo do metadado esperado e a versÃ£o cacheada pelo browser.\n   * >\n   * > `GET {end-point}/metadata?type=create&version={version}`\n   *\n   * Caso queira que o template carregue um recurso jÃ¡ existente, deve-se ser incluÃ­do um parametro na rota chamado `id`.\n   *\n   * Exemplo de configuraÃ§Ã£o de rota:\n   *\n   * ```\n   *  RouterModule.forRoot([\n   *    ...\n   *    { path: 'edit/:id', component: PersonEditComponent },\n   *    ...\n   *  ],\n   * ```\n   *\n   * Baseado nisso, na inicializaÃ§Ã£o do template, serÃ¡ disparado uma requisiÃ§Ã£o para buscar o recurso que serÃ¡ editado.\n   *\n   * > `GET {end-point}/{id}`\n   *\n   * Nos mÃ©todos de `save` e `saveNew`, ao invÃ©s de um `POST`, serÃ¡ disparado um `PUT`.\n   *\n   * ResquisiÃ§Ã£o disparada, onde a propriedade `name` e `city` foram preenchidas / atualizadas, e o `id` da url Ã© 2:\n   *\n   * ```\n   *  PUT /api/thf-samples/v1/people/2 HTTP/1.1\n   *  Host: localhost:4000\n   *  Connection: keep-alive\n   *  Accept: application/json, text/plain\n   *  ...\n   * ```\n   *\n   * Request payload:\n   *\n   * ```\n   * { \"name\": \"Fulano\", \"city\": \"Metropolis\" }\n   * ```\n   *\n   * > Caso esteja usando metadados com o template, serÃ¡ disparado uma requisiÃ§Ã£o na inicializaÃ§Ã£o do template para buscar\n   * > os metadados da pÃ¡gina passando o tipo do metadado esperado e a versÃ£o cacheada pelo browser.\n   * >\n   * > `GET {end-point}/metadata?type=edit&version={version}`\n   */\n  @Input('t-service-api') serviceApi: string;\n\n  /** TÃ­tulo da pÃ¡gina. */\n  @Input('t-title') title: string;\n\n  @ViewChild('dynamicForm', { static: true }) dynamicForm: ThfDynamicFormComponent;\n  @ViewChild('gridDetail', { static: true }) gridDetail: ThfGridComponent;\n\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private thfNotification: ThfNotificationService,\n    private thfDialogService: ThfDialogService,\n    private thfPageDynamicService: ThfPageDynamicService) {\n  }\n\n  ngOnInit(): void {\n    const paramId = this.activatedRoute.snapshot.params['id'];\n    const duplicate = this.activatedRoute.snapshot.queryParams['duplicate'];\n\n    if (this.activatedRoute.snapshot.data.serviceApi) {\n      this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;\n\n      this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });\n\n      this.loadMetadata(paramId, duplicate);\n    } else {\n      this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });\n\n      this.loadData(paramId, duplicate);\n    }\n  }\n\n  get duplicates() {\n    return [...this._duplicates];\n  }\n\n  get keys() {\n    return [...this._keys];\n  }\n\n  get pageActions() {\n    return [...this._pageActions];\n  }\n\n  get controlFields() {\n    return this._controlFields;\n  }\n\n  get detailFields() {\n    return this._detailFields;\n  }\n\n  private cancel(path) {\n    if (this.dynamicForm && this.dynamicForm.form.dirty) {\n      this.thfDialogService.confirm({\n        message: this.literals.cancelConfirmMessage,\n        title: this.literals.pageActionCancel,\n        confirm: this.goBack.bind(this, path)\n      });\n    } else {\n      this.goBack(path);\n    }\n  }\n\n  private formatUniqueKey(item) {\n    const keys = util.mapObjectByProperties(item, this.keys);\n\n    return util.valuesFromObject(keys).join('|');\n  }\n\n  private goBack(path) {\n    if (path) {\n      this.router.navigate([path]);\n    } else {\n      window.history.back();\n    }\n  }\n\n  private loadData(id, duplicate?) {\n    if (!id) {\n      try {\n        this.model = JSON.parse(duplicate) || {};\n      } catch {\n        this.model = {};\n      }\n\n      return;\n    }\n\n    this.thfPageDynamicService.getResource(id).toPromise().then(response => {\n      this.model = response;\n    }).catch(() => {\n      this.model = undefined;\n      this.actions = undefined;\n      this._pageActions = [];\n    });\n  }\n\n  private loadMetadata(paramId: string | number, duplicate: string) {\n    const typeMetadata = paramId ? 'edit' : 'create';\n\n    this.thfPageDynamicService.getMetadata(typeMetadata).toPromise().then(response => {\n      this.autoRouter = response.autoRouter;\n      this.actions = response.actions || {};\n      this.breadcrumb = response.breadcrumb || { items : [] };\n      this.fields = response.fields || [];\n      this.title = response.title;\n\n      this.loadData(paramId, duplicate);\n    });\n  }\n\n  private navigateTo(path: string) {\n    if (path) {\n      const url = this.resolveUrl(this.model, path);\n\n      this.router.navigate([url]);\n    } else {\n      window.history.back();\n    }\n  }\n\n  private detailActionNew() {\n    this.gridDetail.insertRow();\n  }\n\n  private resolveUrl(item: any, path: string) {\n    const uniqueKey = this.formatUniqueKey(item);\n\n    return path.replace(/:id/g, uniqueKey);\n  }\n\n  private save(path) {\n    if (this.dynamicForm.form.invalid) {\n      this.thfNotification.warning(this.literals.saveNotificationWarning);\n      return;\n    }\n\n    const paramId = this.activatedRoute.snapshot.params['id'];\n\n    const saveOperation: Observable<any> = paramId\n      ? this.thfPageDynamicService.updateResource(paramId, this.model)\n      : this.thfPageDynamicService.createResource(this.model);\n\n    const msgSucess = paramId ? this.literals.saveNotificationSuccessUpdate : this.literals.saveNotificationSuccessSave;\n\n    saveOperation.toPromise().then(() => {\n      this.thfNotification.success(msgSucess);\n\n      this.navigateTo(path);\n    });\n  }\n\n  private saveNew(path) {\n    if (this.dynamicForm.form.invalid) {\n      this.thfNotification.warning(this.literals.saveNewNotificationWarning);\n      return;\n    }\n\n    const paramId = this.activatedRoute.snapshot.params['id'];\n\n    if (paramId) {\n      this.thfPageDynamicService.updateResource(paramId, this.model)\n        .toPromise().then(() => {\n          this.thfNotification.success(this.literals.saveNewNotificationSuccessUpdate);\n\n          this.navigateTo(path);\n        });\n    } else {\n      this.thfPageDynamicService.createResource(this.model)\n        .toPromise().then(() => {\n          this.thfNotification.success(this.literals.saveNewNotificationSuccessSave);\n\n          this.model = {};\n          this.dynamicForm.form.reset();\n        });\n    }\n  }\n\n  private getKeysByFields(fields: Array<any> = []) {\n    return fields.filter(field => field.key === true).map(field => field.property);\n  }\n\n  private getControlFields(fields: Array<any> = []) {\n    return fields.filter(field => field.type !== 'detail');\n  }\n\n  private getDetailFields(fields: Array<any> = []) {\n    return fields.filter(field => field.type === 'detail');\n  }\n\n  private getDuplicatesByFields(fields: Array<any> = []) {\n    return fields.filter(field => field.duplicate === true).map(field => field.property);\n  }\n\n  private getPageActions(actions: ThfPageDynamicEditActions = {}): Array<ThfPageAction> {\n    const pageActions = [{ label: this.literals.pageActionSave, action: this.save.bind(this, actions.save) }];\n\n    if (actions.saveNew) {\n      pageActions.push({ label: this.literals.pageActionSaveNew, action: this.saveNew.bind(this, actions.saveNew) });\n    }\n\n    if (actions.cancel === undefined || actions.cancel) {\n      pageActions.push({ label: this.literals.pageActionCancel, action: this.cancel.bind(this, actions.cancel) });\n    }\n\n    return pageActions;\n  }\n\n  private isObject(value: any): boolean {\n    return !!value && typeof value === 'object' && !Array.isArray(value);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  ThfButtonModule,\n  ThfDividerModule,\n  ThfDynamicModule,\n  ThfGridModule,\n  ThfPageModule,\n  ThfWidgetModule\n} from '@totvs/thf-ui';\n\nimport { ThfPageDynamicEditComponent } from './thf-page-dynamic-edit.component';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-dynamic-detail.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n\n    ThfButtonModule,\n    ThfDividerModule,\n    ThfDynamicModule,\n    ThfGridModule,\n    ThfPageModule,\n    ThfWidgetModule\n  ],\n  declarations: [\n    ThfPageDynamicEditComponent\n  ],\n  exports: [\n    ThfPageDynamicEditComponent\n  ]\n})\nexport class ThfPageDynamicEditModule { }\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { ThfDynamicFormField } from '@totvs/thf-ui';\n\nimport { browserLanguage, thfLocaleDefault } from '../../../utils/util';\n\nexport const thfAdvancedFiltersLiteralsDefault = {\n  en: {\n    title: 'Advanced search',\n    primaryActionLabel: 'Apply filters',\n    secondaryActionLabel: 'Cancel'\n  },\n  es: {\n    title: 'BÃºsqueda avanzada',\n    primaryActionLabel: 'Aplicar filtros',\n    secondaryActionLabel: 'Cancelar'\n  },\n  pt: {\n    title: 'Busca avanÃ§ada',\n    primaryActionLabel: 'Aplicar filtros',\n    secondaryActionLabel: 'Cancelar'\n  }\n};\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Filtro de busca avanÃ§ada criado a partir de um formulÃ¡rio dinÃ¢mico.\n * Componente de uso interno.\n */\nexport class ThfAdvancedFilterBaseComponent {\n\n  private _filters: Array<ThfDynamicFormField> = [];\n\n  literals = {\n    ...thfAdvancedFiltersLiteralsDefault[thfLocaleDefault],\n    ...thfAdvancedFiltersLiteralsDefault[browserLanguage()]\n  };\n\n  /**\n   * ColeÃ§Ã£o de objetos que implementam a interface ThfDynamicFormField, para definiÃ§Ã£o dos campos que serÃ£o criados\n   * dinamicamente.\n   */\n  @Input('t-filters') set filters(filters: Array<ThfDynamicFormField>) {\n    this._filters = Array.isArray(filters) ? [...filters] : [];\n  }\n\n  get filters() {\n    return this._filters;\n  }\n\n  /** FunÃ§Ã£o que serÃ¡ disparada e receberÃ¡ os valores do formulÃ¡rio ao ser clicado no botÃ£o buscar. */\n  @Output('t-search-event') searchEvent = new EventEmitter<any>();\n\n}\n","import { Component, ViewChild } from '@angular/core';\n\nimport { ThfDynamicFormComponent, ThfModalAction, ThfModalComponent } from '@totvs/thf-ui';\n\nimport { ThfAdvancedFilterBaseComponent } from './thf-advanced-filter-base.component';\n\n/**\n * @docsPrivate\n *\n * @docsExtends ThfAdvancedFilterBaseComponent\n *\n * @examplePrivate\n *\n * <example-private name=\"thf-advanced-filter\" title=\"Totvs Busca AvanÃ§ada\">\n *   <file name=\"sample-thf-advanced-filter.component.html\"> </file>\n *   <file name=\"sample-thf-advanced-filter.component.ts\"> </file>\n * </example-private>\n */\n@Component({\n  selector: 'thf-advanced-filter',\n  templateUrl: './thf-advanced-filter.component.html'\n})\nexport class ThfAdvancedFilterComponent extends ThfAdvancedFilterBaseComponent {\n\n  filter = {};\n\n  @ViewChild(ThfModalComponent, { static: true }) thfModal: ThfModalComponent;\n\n  @ViewChild(ThfDynamicFormComponent, { static: true }) thfDynamicForm: ThfDynamicFormComponent;\n\n  primaryAction: ThfModalAction = {\n    action: () => {\n      const models = this.getValuesFromForm();\n\n      this.searchEvent.emit(models);\n      this.thfModal.close();\n    },\n    label: this.literals.primaryActionLabel\n  };\n\n  secondaryAction: ThfModalAction = {\n    action: () => {\n      this.thfModal.close();\n    },\n    label: this.literals.secondaryActionLabel\n  };\n\n  // Retorna os models dos campos preenchidos\n  getValuesFromForm() {\n    Object.keys(this.filter).forEach(property => {\n      if (this.filter[property] === undefined || this.filter[property] === '') {\n        delete this.filter[property];\n      }\n    });\n\n    return this.filter;\n  }\n\n  open() {\n    this.filter = {};\n    this.thfModal.open();\n  }\n\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { ThfBreadcrumb, ThfDynamicFormField, ThfPageAction } from '@totvs/thf-ui';\n\nimport { browserLanguage, thfLocaleDefault } from '../../utils/util';\n\nexport const thfPageDynamicSearchLiteralsDefault = {\n  en: {\n    disclaimerGroupTitle: 'Displaying results filtered by:',\n    filterSettingsPlaceholder: 'Search',\n    quickSearchLabel: 'Quick search:'\n  },\n  es: {\n    disclaimerGroupTitle: 'Presentando resultados filtrados por:',\n    filterSettingsPlaceholder: 'Buscar',\n    quickSearchLabel: 'BÃºsqueda rÃ¡pida:'\n  },\n  pt: {\n    disclaimerGroupTitle: 'Apresentando resultados filtrados por:',\n    filterSettingsPlaceholder: 'Pesquisar',\n    quickSearchLabel: 'Pesquisa rÃ¡pida:'\n  }\n};\n\n/**\n * @description\n *\n * Componente com as aÃ§Ãµes de pesquisa jÃ¡ definidas, bastando que o desenvolvedor implemente apenas a chamada para as APIs\n * e exiba as informaÃ§Ãµes.\n */\nexport class ThfPageDynamicSearchBaseComponent {\n\n  private _filters: Array<ThfDynamicFormField> = [];\n\n  literals = {\n    ...thfPageDynamicSearchLiteralsDefault[thfLocaleDefault],\n    ...thfPageDynamicSearchLiteralsDefault[browserLanguage()]\n  };\n\n  /** Nesta propriedade deve ser definido um array de objetos que implementam a interface `ThfPageAction`. */\n  @Input('t-actions') actions?: Array<ThfPageAction> = [];\n\n  /** Objeto com propriedades do breadcrumb. */\n  @Input('t-breadcrumb') breadcrumb?: ThfBreadcrumb = { items: [] };\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Lista dos campos usados na busca avanÃ§ada. Caso o mesmo nÃ£o seja passado a busca avanÃ§ada nÃ£o serÃ¡ exibida.\n   */\n  @Input('t-filters') set filters(filters: Array<ThfDynamicFormField>) {\n    this._filters = Array.isArray(filters) ? [...filters] : [];\n  }\n\n  get filters(): Array<ThfDynamicFormField> {\n    return this._filters;\n  }\n\n  /** TÃ­tulo da pÃ¡gina. */\n  @Input('t-title') title: string;\n\n  /**\n   * @description\n   *\n   * Evento disparado ao executar a pesquisa avanÃ§ada, o mesmo irÃ¡ repassar um objeto com os valores preenchidos no modal de pesquisa.\n   *\n   * > Campos nÃ£o preenchidos nÃ£o irÃ£o aparecer no objeto passado por parÃ¢metro.\n   */\n  @Output('t-advanced-search') advancedSearch?: EventEmitter<any> = new EventEmitter();\n\n  /** Evento disparado ao remover um ou todos os disclaimers pelo usuÃ¡rio. */\n  @Output('t-change-disclaimers') changeDisclaimers?: EventEmitter<any> = new EventEmitter();\n\n  /** Evento disparado ao realizar uma busca pelo campo de pesquisa rÃ¡pida, o mesmo serÃ¡ chamado repassando o valor digitado. */\n  @Output('t-quick-search') quickSearch?: EventEmitter<string> = new EventEmitter();\n\n}\n","import { Component, ViewChild } from '@angular/core';\n\nimport { ThfDisclaimerGroup, ThfDynamicFieldType, ThfDynamicFormField, ThfPageFilter } from '@totvs/thf-ui';\n\nimport { getBrowserLanguage } from '../../utils/util';\n\nimport { ThfAdvancedFilterComponent } from './thf-advanced-filter/thf-advanced-filter.component';\nimport { ThfPageDynamicSearchBaseComponent } from './thf-page-dynamic-search-base.component';\n\n/**\n * @docsExtends ThfPageDynamicSearchBaseComponent\n *\n * @example\n *\n * <example name=\"thf-page-dynamic-search-basic\" title=\"Totvs Page Dynamic Search Basic\">\n *  <file name=\"sample-thf-page-dynamic-search-basic/sample-thf-page-dynamic-search-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-search-basic/sample-thf-page-dynamic-search-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-dynamic-search-hiring-processes\" title=\"Totvs Page Dynamic Search - Hiring processes\">\n *  <file name=\"sample-thf-page-dynamic-search-hiring-processes/sample-thf-page-dynamic-search-hiring-processes.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-search-hiring-processes/sample-thf-page-dynamic-search-hiring-processes.component.ts\"> </file>\n *  <file name=\"sample-thf-page-dynamic-search-hiring-processes/sample-thf-page-dynamic-search-hiring-processes.service.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-page-dynamic-search',\n  templateUrl: './thf-page-dynamic-search.component.html'\n})\nexport class ThfPageDynamicSearchComponent extends ThfPageDynamicSearchBaseComponent {\n\n  private readonly _disclaimerGroup: ThfDisclaimerGroup = {\n    change: this.onChangeDisclaimerGroup.bind(this),\n    disclaimers: [],\n    title: this.literals.disclaimerGroupTitle\n  };\n\n  private readonly _filterSettings: ThfPageFilter = {\n    action: 'onAction',\n    advancedAction: 'onAdvancedAction',\n    ngModel: 'quickFilter',\n    placeholder: this.literals.filterSettingsPlaceholder\n  };\n\n  // Flag to control when changeDisclaimerGroup should be called\n  private changeDisclaimersEnabled: boolean = false;\n\n  private quickFilter;\n\n  @ViewChild(ThfAdvancedFilterComponent, { static: true }) thfAdvancedFilter: ThfAdvancedFilterComponent;\n\n  get disclaimerGroup() {\n    return Object.assign({}, this._disclaimerGroup);\n  }\n\n  get filterSettings() {\n    this._filterSettings.advancedAction = this.filters.length === 0 ? undefined : 'onAdvancedAction';\n\n    return Object.assign({}, this._filterSettings);\n  }\n\n  onAction() {\n    this.changeDisclaimersEnabled = false;\n    this._disclaimerGroup.disclaimers = [\n      { property: 'search', label: `${this.literals.quickSearchLabel} ${this.quickFilter}`, value: this.quickFilter }\n    ];\n\n    if (this.quickSearch.observers && this.quickSearch.observers.length > 0) {\n      this.quickSearch.emit(this.quickFilter);\n    }\n\n    this.quickFilter = undefined;\n  }\n\n  onAdvancedAction() {\n    this.thfAdvancedFilter.open();\n  }\n\n  onAdvancedSearch(filters) {\n    this.changeDisclaimersEnabled = false;\n    this._disclaimerGroup.disclaimers = this.setDisclaimers(filters);\n\n    this.advancedSearch.emit(filters);\n  }\n\n  private formatDate(date: string) {\n    const year = parseInt(date.substr(0, 4), 10);\n    const month = parseInt(date.substr(5, 2), 10);\n    const day = parseInt(date.substr(8, 2), 10);\n\n    return new Date(year, month - 1, day).toLocaleDateString(getBrowserLanguage());\n  }\n\n  private getFieldByProperty(fields: Array<ThfDynamicFormField>, fieldName: string) {\n    return fields.find((field: ThfDynamicFormField) => field.property === fieldName);\n  }\n\n  private onChangeDisclaimerGroup(disclaimers) {\n    this.changeDisclaimersEnabled ? this.changeDisclaimers.emit(disclaimers) : this.changeDisclaimersEnabled = true;\n  }\n\n  private setDisclaimers(filters) {\n    const disclaimers = [];\n\n    Object.keys(filters).forEach(filter => {\n      const field = this.getFieldByProperty(this.filters, filter);\n\n      const value = field.type === ThfDynamicFieldType.Date ? this.formatDate(filters[filter]) : filters[filter];\n\n      disclaimers.push({\n        label: `${field.label}: ${value}`,\n        property: filter,\n        value: filters[filter]\n      });\n    });\n\n    return disclaimers;\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfDynamicModule, ThfModalModule, ThfPageModule } from '@totvs/thf-ui';\n\nimport { ThfAdvancedFilterComponent } from './thf-advanced-filter/thf-advanced-filter.component';\nimport { ThfPageDynamicSearchComponent } from './thf-page-dynamic-search.component';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-dynamic-search.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n\n    ThfDynamicModule,\n    ThfModalModule,\n    ThfPageModule\n  ],\n  declarations: [\n    ThfAdvancedFilterComponent,\n    ThfPageDynamicSearchComponent\n  ],\n  exports: [\n    ThfPageDynamicSearchComponent\n  ]\n})\nexport class ThfPageDynamicSearchModule { }\n","import { Input } from '@angular/core';\n\nimport { ThfBreadcrumb } from '@totvs/thf-ui';\n\nimport { convertToBoolean } from '../../utils/util';\n\nimport { ThfPageDynamicTableField } from './thf-page-dynamic-table-field.interface';\n\nexport class ThfPageDynamicListBaseComponent {\n\n  private _autoRouter: boolean = false;\n  private _columns: Array<any> = [];\n  private _duplicates: Array<any> = [];\n  private _fields: Array<any> = [];\n  private _filters: Array<any> = [];\n  private _keys: Array<any> = [];\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Cria automaticamente as rotas de ediÃ§Ã£o (novo/duplicate) e detalhes caso sejam definidas aÃ§Ãµes na propriedade `t-actions`\n   *\n   * As rotas criadas serÃ£o baseadas na propriedade `t-actions`.\n   *\n   * > Para o correto funcionamento nÃ£o pode haver nenhuma rota coringa (`**`) especificada.\n   *\n   * @default false\n   */\n  @Input('t-auto-router') set autoRouter(value: boolean) {\n    this._autoRouter = convertToBoolean(value);\n  }\n\n  get autoRouter(): boolean {\n    return this._autoRouter;\n  }\n\n  /** Objeto com propriedades do breadcrumb. */\n  @Input('t-breadcrumb') breadcrumb?: ThfBreadcrumb = { items: [] };\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Lista dos campos usados na tabela e busca avanÃ§ada.\n   *\n   *\n   * > Caso nÃ£o seja definido fields a tabela assumirÃ¡ o comportamento padrÃ£o.\n   */\n  @Input('t-fields') set fields(fields: Array<ThfPageDynamicTableField>) {\n    this._fields = Array.isArray(fields) ? [...fields] : [];\n\n    this.setFieldsProperties(this.fields);\n  }\n\n  get fields(): Array<ThfPageDynamicTableField> {\n    return this._fields;\n  }\n\n  /** Endpoint da API dos recursos que serÃ£o exibidos. */\n  /**\n   * @description\n   *\n   * Endpoint usado pelo template para requisiÃ§Ã£o dos recursos que serÃ£o exibidos.\n   *\n   * Caso a aÃ§Ã£o `remove` estiver configurada, serÃ¡ feito uma requisiÃ§Ã£o de exclusÃ£o nesse mesmo endpoint passando os campos\n   * setados como `key: true`.\n   *\n   * > `DELETE {end-point}/{keys}`\n   *\n   * ```\n   *  <thf-page-dynamic-table\n   *    [t-actions]=\"{ remove: true }\"\n   *    [t-fields]=\"[ { property: 'id', key: true } ]\"\n   *    t-service=\"/api/thf-samples/v1/people\"\n   *    ...>\n   *  </thf-page-dynamic-table>\n   * ```\n   *\n   * ResquisiÃ§Ã£o disparada, onde a propriedade `id` Ã© igual a 2:\n   *\n   * ```\n   *  DELETE /api/thf-samples/v1/people/2 HTTP/1.1\n   *  Host: localhost:4000\n   *  Connection: keep-alive\n   *  Accept: application/json, text/plain\n   *  ...\n   * ```\n   *\n   * Para a aÃ§Ã£o `removeAll`, serÃ¡ feito uma requisiÃ§Ã£o de exclusÃ£o em lote para esse mesmo endpoint passando, uma lista\n   * de objetos com os campos setados como `key: true` via `payload`.\n   *\n   * > `DELETE {end-point}`\n   *\n   * > `Payload: [ {key}, {key} ... {key} ]`\n   *\n   * ```\n   *  <thf-page-dynamic-table\n   *    [t-actions]=\"{ removeAll: true }\"\n   *    [t-fields]=\"[ { property: 'id', key: true } ]\"\n   *    t-service=\"/api/thf-samples/v1/people\"\n   *    ...>\n   *  </thf-page-dynamic-table>\n   * ```\n   *\n   * ResquisiÃ§Ã£o disparada, onde foram selecionados 3 itens para serem removidos:\n   *\n   * ```\n   *  DELETE /api/thf-samples/v1/people HTTP/1.1\n   *  Host: localhost:4000\n   *  Connection: keep-alive\n   *  Accept: application/json, text/plain\n   *  ...\n   * ```\n   *\n   * Request payload:\n   *\n   * ```\n   * [{\"id\":2},{\"id\":4},{\"id\":5}]\n   * ```\n   *\n   * > Caso esteja usando metadados com o template, serÃ¡ disparado uma requisiÃ§Ã£o na inicializaÃ§Ã£o do template para buscar\n   * > os metadados da pÃ¡gina passando o tipo do metadado esperado e a versÃ£o cacheada pelo browser.\n   * >\n   * > `GET {end-point}/metadata?type=list&version={version}`\n   */\n  @Input('t-service-api') serviceApi: string;\n\n  /** TÃ­tulo da pÃ¡gina. */\n  @Input('t-title') title: string;\n\n  get columns() {\n    return [...this._columns];\n  }\n\n  get duplicates() {\n    return [...this._duplicates];\n  }\n\n  get filters() {\n    return [...this._filters];\n  }\n\n  get keys() {\n    return [...this._keys];\n  }\n\n  private setFieldsProperties(fields: Array<any>) {\n    this._filters = fields.filter(field => field.filter === true);\n    this._columns = fields.filter(field => field.visible === undefined || field.visible === true);\n    this._keys = fields.filter(field => field.key === true).map(field => field.property);\n    this._duplicates = fields.filter(field => field.duplicate === true).map(field => field.property);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ThfPageDynamicService {\n\n  private endpoint = '/';\n\n  readonly headers: HttpHeaders = new HttpHeaders({\n    'X-TOTVS-SCREEN-LOCK': 'true'\n  });\n\n  constructor(private http: HttpClient) { }\n\n  configServiceApi(config: { endpoint?: string } = {}) {\n    this.endpoint = config.endpoint;\n  }\n\n  getMetadata(type: string = 'list'): Observable<any> {\n    const key = `${this.endpoint}-${type}-metadata`;\n    const cache = JSON.parse(localStorage.getItem(key)) || {};\n\n    const url = `${this.endpoint}/metadata?type=${type}&version=${cache.version || ''}`;\n\n    return this.http.get(url).pipe(map((response: any) => {\n      if (response.version === cache.version) {\n        return cache;\n      }\n\n      localStorage.setItem(key, JSON.stringify(response));\n\n      return  { ...cache, ...response };\n    }));\n  }\n\n  // Deleta um Ãºnico recurso\n  deleteResource(id): Observable<any> {\n    return this.http.delete(`${this.endpoint}/${id}`, { headers: this.headers });\n  }\n\n  // Deleta recursos em lote\n  deleteResources(ids: Array<any>): Observable<any> {\n    return this.http.request('delete', `${this.endpoint}`, { headers: this.headers, body: ids } );\n  }\n\n  // Busca uma lista de recursos\n  getResources(params: {} = {}): Observable<any> {\n    return this.http.get(this.endpoint, { headers: this.headers, params });\n  }\n\n  // Busca um Ãºnico recurso\n  getResource(id): Observable<any> {\n    return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers });\n  }\n\n  // Cria um recurso\n  createResource(resource): Observable<any> {\n    return this.http.post(`${this.endpoint}`, resource, { headers: this.headers });\n  }\n\n  // Atualiza um recurso\n  updateResource(id, resource): Observable<any> {\n    return this.http.put(`${this.endpoint}/${id}`, resource, { headers: this.headers });\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, Route, Router } from '@angular/router';\n\nimport { ThfDialogConfirmOptions, ThfDialogService, ThfNotificationService, ThfPageAction, ThfTableAction } from '@totvs/thf-ui';\n\nimport * as util from '../../utils/util';\n\nimport { ThfPageDynamicDetailComponent } from '../thf-page-dynamic-detail/thf-page-dynamic-detail.component';\n// import { ThfPageDynamicEditComponent } from '../thf-page-dynamic-edit/thf-page-dynamic-edit.component';\n\nimport { ThfPageDynamicListBaseComponent } from './thf-page-dynamic-list-base.component';\nimport { ThfPageDynamicService } from './thf-page-dynamic.service';\nimport { ThfPageDynamicTableActions } from './thf-page-dynamic-table-actions.interface';\n\nexport const thfPageDynamicTableLiteralsDefault = {\n  en: {\n    pageAction: 'New',\n    pageActionRemoveAll: 'Delete',\n    tableActionView: 'View',\n    tableActionEdit: 'Edit',\n    tableActionDuplicate: 'Duplicate',\n    tableActionDelete: 'Delete',\n    confirmRemoveTitle: 'Confirm delete',\n    confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',\n    confirmRemoveAllTitle: 'Confirm batch deletion',\n    confirmRemoveAllMessage: 'Are you sure you want to delete all these records? You can not undo this action.',\n    loadDataErrorNotification: 'Service not found',\n    removeSuccessNotification: 'Item deleted successfully',\n    removeAllSuccessNotification: 'Items deleted successfully'\n  },\n  es: {\n    pageAction: 'Nuevo',\n    pageActionRemoveAll: 'Borrar',\n    tableActionView: 'Visualizar',\n    tableActionEdit: 'Editar',\n    tableActionDuplicate: 'Duplicar',\n    tableActionDelete: 'Borrar',\n    confirmRemoveTitle: 'Confirmar la exclusiÃ³n',\n    confirmRemoveMessage: 'Â¿EstÃ¡ seguro de que desea eliminar este registro? No puede deshacer esta acciÃ³n.',\n    confirmRemoveAllTitle: 'Confirmar la exclusiÃ³n por lotes',\n    confirmRemoveAllMessage: 'Â¿EstÃ¡ seguro de que desea eliminar todos estos registros? No puede deshacer esta acciÃ³n.',\n    loadDataErrorNotification: 'Servicio no informado.',\n    removeSuccessNotification: 'Elemento eliminado con Ã©xito',\n    removeAllSuccessNotification: 'Elementos eliminados con Ã©xito'\n  },\n  pt: {\n    pageAction: 'Novo',\n    pageActionRemoveAll: 'Excluir',\n    tableActionView: 'Visualizar',\n    tableActionEdit: 'Editar',\n    tableActionDuplicate: 'Duplicar',\n    tableActionDelete: 'Excluir',\n    confirmRemoveTitle: 'Confirmar exclusÃ£o',\n    confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? VocÃª nÃ£o poderÃ¡ desfazer essa aÃ§Ã£o.',\n    confirmRemoveAllTitle: 'Confirmar exclusÃ£o em lote',\n    confirmRemoveAllMessage: 'Tem certeza de que deseja excluir todos esses registros? VocÃª nÃ£o poderÃ¡ desfazer essa aÃ§Ã£o.',\n    loadDataErrorNotification: 'ServiÃ§o nÃ£o informado.',\n    removeSuccessNotification: 'Item excluido com sucesso',\n    removeAllSuccessNotification: 'Items excluidos com sucesso'\n  }\n};\n\n/**\n * @docsExtends ThfPageDynamicListBaseComponent\n *\n * @description\n *\n * O `thf-page-dynamic-table` Ã© uma pÃ¡gina que exibe uma lista de registros em uma tabela baseado em uma lista de fields,\n * o mesmo tambÃ©m suporta metadados conforme especificado na documentaÃ§Ã£o.\n *\n * @example\n *\n * <example name=\"thf-page-dynamic-table-basic\" title=\"Totvs Page Dynamic Table Basic\">\n *  <file name=\"sample-thf-page-dynamic-table-basic/sample-thf-page-dynamic-table-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-table-basic/sample-thf-page-dynamic-table-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-dynamic-table-users\" title=\"Totvs Page Dynamic Table - Users\">\n *  <file name=\"sample-thf-page-dynamic-table-users/sample-thf-page-dynamic-table-users.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-table-users/sample-thf-page-dynamic-table-users.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-page-dynamic-table',\n  templateUrl: './thf-page-dynamic-table.component.html',\n  providers: [ ThfPageDynamicService ]\n})\nexport class ThfPageDynamicTableComponent extends ThfPageDynamicListBaseComponent implements OnInit {\n\n  private _actions: ThfPageDynamicTableActions = {};\n  private _pageActions: Array<ThfPageAction> = [];\n  private _tableActions: Array<ThfTableAction> = [];\n\n  private page: number = 1;\n  private params = {};\n\n  hasNext = false;\n  items = [];\n  literals = {\n    ...thfPageDynamicTableLiteralsDefault[util.thfLocaleDefault],\n    ...thfPageDynamicTableLiteralsDefault[util.browserLanguage()]\n  };\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * AÃ§Ãµes da pÃ¡gina e da tabela.\n   */\n  @Input('t-actions') set actions(value: ThfPageDynamicTableActions) {\n    this._actions = value && typeof value === 'object' && Object.keys(value).length > 0 ? value : {};\n\n    this.setPageActions(this.actions);\n    this.setRemoveAllAction();\n    this.setTableActions(this.actions);\n  }\n\n  get actions(): ThfPageDynamicTableActions {\n    return this._actions;\n  }\n\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private thfDialogService: ThfDialogService,\n    private thfNotification: ThfNotificationService,\n    private thfPageDynamicService: ThfPageDynamicService\n    ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.activatedRoute.snapshot.data.serviceApi) {\n      this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;\n\n      this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });\n\n      this.loadMetadata();\n    } else {\n      this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });\n\n      this.loadData();\n    }\n  }\n\n  onAdvancedSearch(filter) {\n    this.loadData({ page: 1, ...filter });\n    this.params = filter;\n  }\n\n  onChangeDisclaimers(disclaimers) {\n    const filter = {};\n\n    disclaimers.forEach(disclaimer => {\n      filter[disclaimer.property] = disclaimer.value;\n    });\n\n    this.onAdvancedSearch(filter);\n  }\n\n  onQuickSearch(filter) {\n    this.loadData(filter ? { page: 1, search: filter } : undefined);\n    this.params = filter ? { search: filter } : {};\n  }\n\n  showMore() {\n    this.loadData({ page: ++this.page, ...this.params });\n  }\n\n  get hasActionRemoveAll() {\n    return !!this.actions.removeAll;\n  }\n\n  get pageActions() {\n    return [...this._pageActions];\n  }\n\n  get tableActions() {\n    return this._tableActions;\n  }\n\n  private confirmRemove(item) {\n    const confirmOptions: ThfDialogConfirmOptions = {\n      title: this.literals.confirmRemoveTitle,\n      message: this.literals.confirmRemoveMessage,\n      confirm: this.remove.bind(this, item)\n    };\n\n    this.thfDialogService.confirm(confirmOptions);\n  }\n\n  private confirmRemoveAll() {\n    const confirmOptions: ThfDialogConfirmOptions = {\n      title: this.literals.confirmRemoveAllTitle,\n      message: this.literals.confirmRemoveAllMessage,\n      confirm: this.removeAll.bind(this)\n    };\n\n    this.thfDialogService.confirm(confirmOptions);\n  }\n\n  private formatUniqueKey(item) {\n    const keys = util.mapObjectByProperties(item, this.keys);\n\n    return util.valuesFromObject(keys).join('|');\n  }\n\n  private loadData(params: { page?: number, search?: string } = {}) {\n    if (!this.serviceApi) {\n      this.thfNotification.error(this.literals.loadDataErrorNotification);\n      return;\n    }\n\n    const defaultParams: any = { page: 1, pageSize: 10 };\n    const fullParams: any = { ...defaultParams, ...params };\n\n    this.thfPageDynamicService.getResources(fullParams).toPromise().then((response: any) => {\n      this.items = fullParams.page === 1 ? response.items : [...this.items, ...response.items];\n      this.page = fullParams.page;\n      this.hasNext = response.hasNext;\n    });\n  }\n\n  private loadMetadata() {\n    this.thfPageDynamicService.getMetadata().toPromise().then(response => {\n      this.autoRouter = response.autoRouter;\n      this.actions = response.actions || {};\n      this.breadcrumb = response.breadcrumb || { items : [] };\n      this.fields = response.fields || [];\n      this.title = response.title;\n\n      this.loadData();\n    });\n  }\n\n  // @todo Validar rotas na mÃ£o pois se existir uma rota '**' o catch do navigation nÃ£o funciona.\n  private navigateTo(route: {path: string, component?, url?: string, params?: any}, forceStopAutoRouter: boolean = false) {\n    this.router.navigate([route.url || route.path], { queryParams: route.params })\n      .catch(() => {\n        if (forceStopAutoRouter || !this.autoRouter) {\n          return;\n        }\n\n        this.router.config.unshift(<Route>{\n          path: route.path, component: route.component,  data: { serviceApi: this.serviceApi, autoRouter: true }\n        });\n\n        this.navigateTo(route, true);\n      });\n  }\n\n  private openDetail(path: string, item) {\n    const url = this.resolveUrl(item, path);\n\n    this.navigateTo({ path, url, component: ThfPageDynamicDetailComponent });\n  }\n\n  private openDuplicate(path: string, item) {\n    const duplicates = util.mapObjectByProperties(item, this.duplicates);\n\n    this.navigateTo({ path, params: { duplicate: JSON.stringify(duplicates) } });\n    // this.navigateTo({ path, params: { duplicate: JSON.stringify(duplicates) } , component: ThfPageDynamicEditComponent });\n  }\n\n  private openEdit(path: string, item) {\n    const url = this.resolveUrl(item, path);\n\n    this.navigateTo({ path, url });\n    // this.navigateTo({ path, url, component: ThfPageDynamicEditComponent });\n  }\n\n  private openNew(path: string) {\n    this.navigateTo({ path });\n    // this.navigateTo({ path, component: ThfPageDynamicEditComponent });\n  }\n\n  /**\n   * Caso exista mais de um identificador, serÃ¡ concatenado com '|'.\n   *\n   * Ex: { id: 1, company: 'totvs' }\n   *\n   * Para o endpoint /resources/:id serÃ¡ executada a url /resources/1|totvs\n   */\n  private remove(item) {\n    const uniqueKey = this.formatUniqueKey(item);\n\n    this.thfPageDynamicService.deleteResource(uniqueKey).toPromise().then(() => {\n      this.removeLocalItems([item]);\n\n      this.thfNotification.success(this.literals.removeSuccessNotification);\n    });\n  }\n\n  private removeAll() {\n    // TODO: usar propriedade nova pra validar os itens selecionados\n    const selectedItems = this.items.filter(item => item.$selected);\n\n    if (selectedItems.length === 0) {\n      // TODO: usar propriedade nova pra validar os itens selecionados\n      return;\n    }\n\n    const keysSelectedItems = util.mapArrayByProperties(selectedItems, this.keys);\n\n    this.thfPageDynamicService.deleteResources(keysSelectedItems).toPromise().then(() => {\n      this.removeLocalItems(selectedItems);\n\n      this.thfNotification.success(this.literals.removeAllSuccessNotification);\n    });\n  }\n\n  private removeLocalItems(items = []) {\n    items.forEach(itemRemoved => {\n      const indexItemRemoved = this.items.indexOf(itemRemoved);\n\n      this.items.splice(indexItemRemoved, 1);\n    });\n  }\n\n  private resolveUrl(item: any, path: string) {\n    const uniqueKey = this.formatUniqueKey(item);\n\n    return path.replace(/:id/g, uniqueKey);\n  }\n\n  private setPageActions(actions: ThfPageDynamicTableActions) {\n    if (actions) {\n      this._pageActions = [\n        { label: this.literals.pageAction, action: this.openNew.bind(this, actions.new), disabled: !this._actions.new },\n      ];\n    }\n  }\n\n  private setRemoveAllAction() {\n    if (this._actions.removeAll) {\n      this._pageActions.push({\n      label: this.literals.pageActionRemoveAll, action: this.confirmRemoveAll.bind(this),\n        disabled: !this._actions.removeAll\n      });\n    }\n  }\n\n  private setTableActions(actions: ThfPageDynamicTableActions) {\n    if (actions) {\n      this._tableActions = [\n        { action: this.openDetail.bind(this, actions.detail), label: this.literals.tableActionView, visible: !!this._actions.detail },\n        { action: this.openEdit.bind(this, actions.edit), label: this.literals.tableActionEdit, visible: !!this._actions.edit },\n        { action: this.openDuplicate.bind(this, actions.duplicate), label: this.literals.tableActionDuplicate,\n          visible: !!this._actions.duplicate\n        },\n        { action: this.confirmRemove.bind(this), label: this.literals.tableActionDelete, separator: true, type: 'danger',\n          visible: !!this._actions.remove\n        }\n      ];\n    }\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfTableModule } from '@totvs/thf-ui';\n\nimport { ThfPageDynamicSearchModule } from '../thf-page-dynamic-search/thf-page-dynamic-search.module';\n\nimport { ThfPageDynamicTableComponent } from './thf-page-dynamic-table.component';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-dynamic-search.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n\n    ThfTableModule,\n    ThfPageDynamicSearchModule\n  ],\n  declarations: [\n    ThfPageDynamicTableComponent\n  ],\n  exports: [\n    ThfPageDynamicTableComponent\n  ]\n})\nexport class ThfPageDynamicTableModule { }\n","import { ThfJobSchedulerInternal } from './interfaces/thf-job-scheduler-internal.interface';\n\nexport class ThfPageJobSchedulerInternal implements ThfJobSchedulerInternal {\n\n  periodicity = 'single';\n  firstExecution = new Date();\n  firstExecutionHour = this.getCurrentHour(this.firstExecution);\n  recurrent = true;\n\n  private getCurrentHour(date: Date): string {\n    const hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();\n    const minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();\n\n    return `${hours}:${minutes}`;\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nimport { Input } from '@angular/core';\n\nimport { ThfBreadcrumb } from '@totvs/thf-ui';\n\nimport { ThfJobSchedulerInternal } from './interfaces/thf-job-scheduler-internal.interface';\nimport { ThfPageJobSchedulerInternal } from './thf-page-job-scheduler-internal';\nimport { ThfPageJobSchedulerService } from './thf-page-job-scheduler.service';\n\n/**\n * @description\n *\n * O `thf-page-job-scheduler` Ã© uma pÃ¡gina para criaÃ§Ã£o e atualizaÃ§Ã£o do *Job Scheduler* de forma simplificada, apenas informando\n * o serviÃ§o (endpoint) para consumo, sem a necessidade de criar componentes e tratamentos dos dados.\n */\nexport class ThfPageJobSchedulerBaseComponent {\n\n  /** Objeto com propriedades do breadcrumb. */\n  @Input('t-breadcrumb') breadcrumb?: ThfBreadcrumb = { items: [] };\n\n  /**\n   * Endpoint usado pelo template para requisiÃ§Ã£o do recurso que serÃ¡ utilizado para criaÃ§Ã£o e ediÃ§Ã£o.\n   *\n   * #### Processos\n   *\n   * Em sua inicializaÃ§Ã£o serÃ¡ verificado a existÃªncia do endpoint `{end-point}/processes`.\n   * Caso o endpoint seja vÃ¡lido, serÃ¡ utilizado um componente para selecionar o processo e filtrÃ¡-los.\n   * Caso nÃ£o seja vÃ¡lido, serÃ¡ utilizado um campo de entrada de texto para informar o endpoint.\n   *\n   * Para realizar o filtro de busca do processo, serÃ¡ enviado o conteÃºdo a ser filtrado atravÃ©s da propriedade *search*.\n   * Os processos devem retornar uma lista de objetos que seguem a definiÃ§Ã£o de dados abaixo:\n   *\n   * ```\n   * GET {end-point}/processes?search=ac04\n   * ...\n   * { \"processID\": \"string\", \"description\": \"string\" }\n   * ```\n   *\n   * Para retornar parÃ¢metros dos processos, serÃ¡ realizado um `GET` como exemplificado abaixo.\n   * Os parÃ¢metros devem retornar uma lista de objetos que seguem a interface [ThfDynamicFormField](/documentation/thf-dynamic-form).\n   *\n   * ```\n   * GET {end-point}/processes/:id/parameters\n   * ...\n   * { items: [{ \"property\": \"server\" }, { \"property\": \"program\" }] }\n   * ```\n   *\n   * #### Salvar e Atualizar\n   *\n   * Para salvar o recurso, serÃ¡ feito uma requisiÃ§Ã£o de criaÃ§Ã£o no mesmo endpoint, passando os valores\n   * preenchidos pelo usuÃ¡rio via *payload*. Abaixo uma requisiÃ§Ã£o `POST` disparada,\n   * onde as propriedades do *Job Scheduler* foram preenchidas:\n   *\n   * ```\n   *  POST /api/thf-samples/v1/jobschedulers HTTP/1.1\n   *  Host: localhost:4000\n   *  Connection: keep-alive\n   *  Accept: application/json, text/plain\n   *  ...\n   * ```\n   *\n   * *Request payload*:\n   *\n   * ```\n   * { \"firstExecution\": \"2018-12-07T00:00:01-00:00\", \"recurrent\": true, \"daily\": { \"hour\": 10, \"minute\": 12 }, \"processID\": \"ac0405\" }\n   * ```\n   *\n   * Caso queira que o template carregue um recurso jÃ¡ existente, deve ser incluÃ­do um parÃ¢metro na rota chamado `id`.\n   *\n   * Exemplo de configuraÃ§Ã£o de rota:\n   *\n   * ```\n   *  RouterModule.forRoot([\n   *    ...\n   *    { path: 'edit/:id', component: ExampleJobSchedulerComponent },\n   *    ...\n   *  ],\n   * ```\n   *\n   * Baseado nisso, na inicializaÃ§Ã£o do template serÃ¡ disparado uma requisiÃ§Ã£o para buscar o recurso que serÃ¡ editado.\n   *\n   * ```\n   * GET {end-point}/{id}\n   * ```\n   *\n   * Ao salvar o recurso serÃ¡ disparado um `PUT` com os dados preenchidos. Abaixo uma requisiÃ§Ã£o `PUT` disparada,\n   * onde a propriedade *recurrent* e *daily* foram preenchidas/atualizadas e o `id` da url Ã© 1:\n   *\n   * ```\n   *  PUT /api/thf-samples/v1/jobschedulers/1 HTTP/1.1\n   *  Host: localhost:4000\n   *  Connection: keep-alive\n   *  Accept: application/json, text/plain\n   *  ...\n   * ```\n   *\n   * *Request payload*:\n   *\n   * ```\n   * { \"firstExecution\": \"2018-12-07T00:00:01-00:00\", \"recurrent\": false, \"daily\": { \"hour\": 11, \"minute\": 30 }, \"processID\": \"ac0405\" }\n   * ```\n   */\n  @Input('t-service-api') serviceApi: string;\n\n  /** TÃ­tulo da pÃ¡gina. */\n  @Input('t-title') title: string;\n\n  model: ThfJobSchedulerInternal = new ThfPageJobSchedulerInternal();\n\n  constructor(protected thfPageJobSchedulerService: ThfPageJobSchedulerService) {}\n\n  protected loadData(id: string | number) {\n    if (!id) {\n      this.model = new ThfPageJobSchedulerInternal();\n      return;\n    }\n\n    this.thfPageJobSchedulerService.getResource(id).toPromise().then((response: ThfJobSchedulerInternal) => {\n      this.model = response;\n    }).catch(() => {\n      this.model = new ThfPageJobSchedulerInternal();\n    });\n\n  }\n\n  protected markAsDirtyInvalidControls(controls: { [key: string]: AbstractControl } ) {\n    for (const key in controls) {\n      if (controls.hasOwnProperty(key)) {\n        const control = controls[key];\n\n        if (control.invalid) {\n          control.markAsDirty();\n        }\n      }\n    }\n  }\n\n}\n","export const thfPageJobSchedulerLiteralsDefault = {\n  en: {\n    at: 'at',\n    back: 'Back',\n    next: 'Next',\n    periodicity: 'Periodicity',\n    execution: 'Execution',\n    process: 'Process',\n    enterProcess: 'Enter a process',\n    recurrent: 'Recurrent',\n    single: 'Single',\n    daily: 'Daily',\n    weekly: 'Weekly',\n    monthly: 'Monthly',\n    scheduling: 'Scheduling',\n    parameterization: 'Parameterization',\n    conclude: 'Conclude',\n    firstExecution: 'First Execution',\n    hour: 'Hour',\n    day: 'Day',\n    weekDays: 'Week days',\n    sunday: 'Sunday',\n    monday: 'Monday',\n    tuesday: 'Tuesday',\n    wednesday: 'Wednesday',\n    thursday: 'Thursday',\n    friday: 'Friday',\n    saturday: 'Saturday',\n    parameters: 'Parameters',\n    yes: 'Yes',\n    no: 'No',\n    notReported: 'Not reported',\n    periodicityData: 'Periodicity data',\n    confirmation: 'Confirmation',\n    confirmSaveMessage: 'Are you sure you want to complete this schedule?',\n    confirmUpdateMessage: 'Are you sure you want to update this schedule?',\n    saveNotificationSuccessUpdate: 'Successfully updated scheduling',\n    saveNotificationSuccessSave: 'Successfully saved scheduling',\n    parametersNotFound: 'Parameters not found.'\n  },\n  es: {\n    at: 'a las',\n    back: 'Volver',\n    next: 'Avanzar',\n    periodicity: 'Periodicidad',\n    execution: 'EjecuciÃ³n',\n    process: 'Proceso',\n    enterProcess: 'Informe un proceso',\n    recurrent: 'Recurrente',\n    single: 'Ãnica',\n    daily: 'Diaria',\n    weekly: 'Semanal',\n    monthly: 'Mensual',\n    scheduling: 'ProgramaciÃ³n',\n    parameterization: 'ParametrizaciÃ³n',\n    conclude: 'Completar',\n    firstExecution: 'Primera ejecuciÃ³n',\n    hour: 'Horario',\n    day: 'DÃ­a',\n    weekDays: 'Dias de la semana',\n    sunday: 'Domingo',\n    monday: 'Lunes',\n    tuesday: 'Martes',\n    wednesday: 'MiÃ©rcoles',\n    thursday: 'Jueves',\n    friday: 'Viernes',\n    saturday: 'SÃ¡bado',\n    parameters: 'ParÃ¡metros',\n    yes: 'SÃ­',\n    no: 'No',\n    notReported: 'No informado',\n    periodicityData: 'Dados da periodicidade',\n    confirmation: 'ConfirmaciÃ³n',\n    confirmSaveMessage: 'Â¿EstÃ¡ seguro de que desea completar esta programaciÃ³n de proceso?',\n    confirmUpdateMessage: 'Â¿EstÃ¡ seguro de que desea cambiar esta programaciÃ³n de proceso?',\n    saveNotificationSuccessUpdate: 'ProgramaciÃ³n de proceso actualizada con Ã©xito.',\n    saveNotificationSuccessSave: 'ProgramaciÃ³n de proceso salvo con Ã©xito.',\n    parametersNotFound: 'No se encontraron parÃ¡metros.'\n  },\n  pt: {\n    at: 'Ã s',\n    back: 'Voltar',\n    next: 'AvanÃ§ar',\n    periodicity: 'Periodicidade',\n    execution: 'ExecuÃ§Ã£o',\n    process: 'Processo',\n    enterProcess: 'Informe um processo',\n    recurrent: 'Recorrente',\n    single: 'Ãnica',\n    daily: 'DiÃ¡ria',\n    weekly: 'Semanal',\n    monthly: 'Mensal',\n    scheduling: 'Agendamento',\n    parameterization: 'ParametrizaÃ§Ã£o',\n    conclude: 'Concluir',\n    firstExecution: 'Primeira execuÃ§Ã£o',\n    hour: 'HorÃ¡rio',\n    day: 'Dia',\n    weekDays: 'Dias de semana',\n    sunday: 'Domingo',\n    monday: 'Segunda-feira',\n    tuesday: 'TerÃ§a-feira',\n    wednesday: 'Quarta-feira',\n    thursday: 'Quinta-feira',\n    friday: 'Sexta-feira',\n    saturday: 'SÃ¡bado',\n    parameters: 'ParÃ¢metros',\n    yes: 'Sim',\n    no: 'NÃ£o',\n    notReported: 'NÃ£o informado',\n    periodicityData: 'Dados da periodicidade',\n    confirmation: 'ConfirmaÃ§Ã£o',\n    confirmSaveMessage: 'Tem certeza que deseja concluir este agendamento de processo?',\n    confirmUpdateMessage: 'Tem certeza que deseja alterar este agendamento de processo?',\n    saveNotificationSuccessUpdate: 'Agendamento de processo atualizado com sucesso.',\n    saveNotificationSuccessSave: 'Agendamento de processo salvo com sucesso.',\n    parametersNotFound: 'ParÃ¢metros nÃ£o foram encontrados.'\n  }\n};\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { addZero, convertDateToISOExtended } from '../../utils/util';\nimport { ThfDynamicFormField } from '@totvs/thf-ui';\n\nimport { ThfJobScheduler } from './interfaces/thf-job-scheduler.interface';\nimport { ThfJobSchedulerInternal } from './interfaces/thf-job-scheduler-internal.interface';\n\n@Injectable()\nexport class ThfPageJobSchedulerService {\n\n  private endpoint = '/';\n\n  readonly headers: HttpHeaders = new HttpHeaders({\n    'X-TOTVS-SCREEN-LOCK': 'true'\n  });\n\n  constructor(private http: HttpClient) { }\n\n  configServiceApi(config: { endpoint?: string } = {}) {\n    this.endpoint = config.endpoint;\n  }\n\n  // Cria um recurso\n  createResource(resource): Observable<any> {\n    const jobScheduler = this.convertToJobScheduler(resource);\n\n    return this.http.post(`${this.endpoint}`, jobScheduler, { headers: this.headers });\n  }\n\n  getHeadProcesses() {\n    const headers = { 'X-Totvs-No-Error': 'true' };\n\n    return this.http.head(`${this.endpoint}/processes`, { headers });\n  }\n\n  // Busca parametros pelo processo id\n  getParametersByProcess(processId: string | number): Observable<any> {\n    return this.http.get(`${this.endpoint}/processes/${processId}/parameters`, { headers: this.headers })\n    .pipe(map((resource: { items: Array<ThfDynamicFormField> }) => resource.items));\n  }\n\n  // Busca um Ãºnico recurso\n  getProcess(id: string | number): Observable<any> {\n    return this.http.get(`${this.endpoint}/processes/${id}`, { headers: this.headers });\n  }\n\n  // Busca uma lista de processos\n  getProcesses(params: {} = {}): Observable<any> {\n    return this.http.get(`${this.endpoint}/processes`, { params });\n  }\n\n  // Busca um Ãºnico recurso\n  getResource(id: string | number): Observable<any> {\n    return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers })\n      .pipe(map(resource => this.convertToJobSchedulerInternal(resource)));\n  }\n\n  // Atualiza um recurso\n  updateResource(id, resource): Observable<any> {\n    const jobScheduler = this.convertToJobScheduler(resource);\n\n    return this.http.put(`${this.endpoint}/${id}`, jobScheduler, { headers: this.headers });\n  }\n\n  private convertToJobScheduler(jobSchedulerInternal): ThfJobScheduler {\n    const jobScheduler = { ...jobSchedulerInternal };\n\n    if (jobSchedulerInternal.periodicity) {\n\n      if (jobSchedulerInternal.periodicity === 'single') {\n        jobScheduler.recurrent = false;\n      } else {\n        Object.assign(jobScheduler, this.convertToPeriodicity(jobSchedulerInternal));\n      }\n\n    }\n\n    if (jobSchedulerInternal.firstExecutionHour) {\n      jobScheduler.firstExecution =\n        this.replaceHourFirstExecution(jobSchedulerInternal.firstExecution, jobSchedulerInternal.firstExecutionHour);\n    }\n\n    if (!Object.keys(this.returnValidExecutionParameter(jobScheduler.executionParameter)).length) {\n      delete jobScheduler.executionParameter;\n    }\n\n    this.removeInvalidKeys(jobScheduler);\n\n    return jobScheduler;\n  }\n\n  private convertToJobSchedulerInternal(jobScheduler = <any> {}): ThfJobSchedulerInternal {\n    const jobSchedulerInternal = { ...jobScheduler };\n\n    if (jobScheduler.firstExecution) {\n      jobSchedulerInternal.firstExecutionHour = this.getHourFirstExecution(jobScheduler.firstExecution);\n    }\n\n    Object.assign(jobSchedulerInternal, this.convertToPeriodicityInternal(jobScheduler));\n\n    this.removeInvalidKeys(jobSchedulerInternal, ['weekly', 'monthly', 'daily']);\n\n    return jobSchedulerInternal;\n  }\n\n  private convertToPeriodicity(value: { periodicity: string , dayOfMonth?: string, daysOfWeek?: number, hour?: string }) {\n    const newValue = {};\n    const valuePeriodicity = value.periodicity;\n\n    if (valuePeriodicity) {\n      newValue[valuePeriodicity] = {};\n\n      if (valuePeriodicity === 'monthly') {\n        newValue[valuePeriodicity].day = value.dayOfMonth ? parseInt(value.dayOfMonth, 10) : 0;\n      } else if (valuePeriodicity === 'weekly') {\n        newValue[valuePeriodicity].daysOfWeek = value.daysOfWeek;\n      }\n\n      newValue[valuePeriodicity].hour = value.hour ? parseInt(value.hour.split(':')[0], 10) : 0;\n      newValue[valuePeriodicity].minute = value.hour ? parseInt(value.hour.split(':')[1], 10) : 0;\n    }\n\n    return newValue;\n  }\n\n  private convertToPeriodicityInternal(value = <any> {}) {\n    if (value.monthly) {\n      return {\n        periodicity: 'monthly',\n        hour: `${addZero(value.monthly.hour)}:${addZero(value.monthly.minute)}`,\n        dayOfMonth: value.monthly.day\n      };\n    } else if (value.daily) {\n      return {\n        periodicity: 'daily',\n        hour: `${addZero(value.daily.hour)}:${addZero(value.daily.minute)}`\n      };\n    } else if (value.weekly) {\n      return {\n        periodicity: 'weekly',\n        hour: `${addZero(value.weekly.hour)}:${addZero(value.weekly.minute)}`,\n        daysOfWeek: [...value.weekly.daysOfWeek]\n      };\n    } else {\n      return {\n        periodicity: 'single'\n      };\n    }\n  }\n\n  private getCurrentHour(date: Date): string {\n    const hours = addZero(date.getHours());\n    const minutes = addZero(date.getMinutes());\n\n    return `${hours}:${minutes}`;\n  }\n\n  private getHourFirstExecution(firstExecutionDate: string): string {\n    return this.getCurrentHour(new Date(firstExecutionDate));\n  }\n\n  private removeInvalidKeys(value: object, keys?: Array<string>) {\n    const invalidKeys = keys || ['periodicity', 'hour', 'minute', 'day', 'daysOfWeek', 'dayOfMonth', 'firstExecutionHour'];\n\n    Object.keys(value).forEach(key => {\n      if (invalidKeys.includes(key)) {\n        delete value[key];\n      }\n    });\n  }\n\n  private replaceHourFirstExecution(date: string, time: string): string {\n    const firstExecutionDate = new Date(date);\n\n    const timeSplited = time.split(':');\n\n    const hours = parseInt(timeSplited[0], 10);\n    const minutes = parseInt(timeSplited[1], 10);\n\n    firstExecutionDate.setHours(hours, minutes);\n\n    return convertDateToISOExtended(firstExecutionDate);\n  }\n\n  private returnValidExecutionParameter(parameter: object) {\n    const newParameter = { ...parameter };\n\n    for (const key in newParameter) {\n      if (newParameter.hasOwnProperty(key) && newParameter[key] === undefined) {\n        delete newParameter[key];\n      }\n    }\n\n    return newParameter;\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { ThfLookupFilter } from '@totvs/thf-ui';\n\nimport { ThfPageJobSchedulerService } from './thf-page-job-scheduler.service';\n\n@Injectable()\nexport class ThfPageJobSchedulerLookupService implements ThfLookupFilter {\n\n  constructor(private thfPageJobSchedulerService: ThfPageJobSchedulerService) { }\n\n  getFilteredData(search: string, page: number, pageSize: number): Observable<any> {\n    const params = { page, pageSize, search };\n\n    return this.thfPageJobSchedulerService.getProcesses(params);\n  }\n\n  getObjectByValue(processId: string): Observable<any> {\n    return this.thfPageJobSchedulerService.getProcess(processId);\n  }\n\n}\n","import { ActivatedRoute, Router } from '@angular/router';\nimport { Component, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\nimport { Observable } from 'rxjs';\n\nimport {\n  ThfDialogService,\n  ThfDynamicFormField,\n  ThfNotificationService,\n  ThfPageAction,\n  ThfStepperItem,\n  ThfStepperStatus\n} from '@totvs/thf-ui';\n\nimport * as util from './../../utils/util';\n\nimport { ThfJobSchedulerInternal } from './interfaces/thf-job-scheduler-internal.interface';\nimport { ThfPageJobSchedulerInternal } from './thf-page-job-scheduler-internal';\nimport { ThfPageJobSchedulerBaseComponent } from './thf-page-job-scheduler-base.component';\nimport { thfPageJobSchedulerLiteralsDefault } from './thf-page-job-scheduler-literals';\nimport { ThfPageJobSchedulerLookupService } from './thf-page-job-scheduler-lookup.service';\nimport { ThfPageJobSchedulerService } from './thf-page-job-scheduler.service';\n\n/**\n * @docsExtends ThfPageJobSchedulerBaseComponent\n *\n * @example\n *\n * <example name=\"thf-page-job-scheduler-basic\" title=\"Totvs Page Job Scheduler Basic\">\n *  <file name=\"sample-thf-page-job-scheduler-basic/sample-thf-page-job-scheduler-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-job-scheduler-basic/sample-thf-page-job-scheduler-basic.component.ts\"> </file>\n * </example>\n *\n */\n@Component({\n  selector: 'thf-page-job-scheduler',\n  templateUrl: './thf-page-job-scheduler.component.html',\n  encapsulation: ViewEncapsulation.None,\n  styles: [`\n    thf-container .thf-container {\n      overflow-y: unset;\n    }\n  `]\n})\nexport class ThfPageJobSchedulerComponent extends ThfPageJobSchedulerBaseComponent implements OnInit {\n\n  isEdit = false;\n  literals = {\n    ...thfPageJobSchedulerLiteralsDefault[util.thfLocaleDefault],\n    ...thfPageJobSchedulerLiteralsDefault[util.browserLanguage()]\n  };\n  parameters: Array<ThfDynamicFormField> = [];\n  saveOperation: Observable<any>;\n  step: number = 1;\n\n  private backPageAction: ThfPageAction = {\n    label: this.literals.back,\n    action: this.nextStepOperation.bind(this, 'back'),\n    disabled: this.isDisabledBack.bind(this)\n  };\n\n  private concludePageActions: Array<ThfPageAction> = [\n    {\n      label: this.literals.conclude,\n      action: this.confirmJobScheduler.bind(this)\n    },\n    { ...this.backPageAction }\n  ];\n\n  private nextPageActions: Array<ThfPageAction> = [\n    {\n      label: this.literals.next,\n      action: this.nextStepOperation.bind(this, 'next'),\n      disabled: this.isDisabledAdvance.bind(this)\n    },\n    { ...this.backPageAction }\n  ];\n\n  jobSchedulerActions: Array<ThfPageAction> = [\n    ...this.nextPageActions\n  ];\n\n  readonly steps: Array<ThfStepperItem> = [\n    { label: this.literals.scheduling },\n    { label: this.literals.parameterization },\n    { label: this.literals.conclude }\n  ];\n\n  @ViewChild('schedulerExecution', { static: true }) schedulerExecution: { form: NgForm };\n  @ViewChild('schedulerParameters', { static: true }) schedulerParameters: { form: NgForm };\n\n  constructor(\n    public thfPageDynamicLookupService: ThfPageJobSchedulerLookupService,\n    private activatedRoute: ActivatedRoute,\n    private thfDialogService: ThfDialogService,\n    private thfNotification: ThfNotificationService,\n    private router: Router,\n    thfPageJobSchedulerService: ThfPageJobSchedulerService) {\n      super(thfPageJobSchedulerService);\n    }\n\n  get stepperOrientation(): 'horizontal' | 'vertical' {\n    return window.innerWidth > 481 && window.innerWidth < 960 ? 'horizontal' : 'vertical';\n  }\n\n  ngOnInit() {\n    const paramId = this.activatedRoute.snapshot.params['id'];\n\n    this.isEdit = !!paramId;\n\n    this.thfPageJobSchedulerService.configServiceApi({ endpoint: this.serviceApi });\n\n    this.loadData(paramId);\n  }\n\n  changePageActionsBySteps(currentStep: number, nextStep: number) {\n    const stepsLength = this.steps.length;\n\n    if (nextStep === stepsLength) {\n    this.jobSchedulerActions = [ ...this.concludePageActions ];\n\n    } else if (currentStep === stepsLength && nextStep < currentStep) {\n\n    this.jobSchedulerActions = [ ...this.nextPageActions ];\n    }\n  }\n\n  nextStep(stepNumber: number) {\n\n    if (stepNumber > 1 && this.schedulerExecution.form.invalid) {\n      this.markAsDirtyInvalidControls(this.schedulerExecution.form.controls);\n      return;\n    }\n\n    if (stepNumber > 2 && (this.schedulerParameters && this.schedulerParameters.form && this.schedulerParameters.form.invalid)) {\n      this.markAsDirtyInvalidControls(this.schedulerParameters.form.controls);\n      return;\n    }\n\n    this.changePageActionsBySteps(this.step, stepNumber);\n\n    const steps = this.steps[this.step - 1];\n    this.step = stepNumber;\n\n    if (steps) {\n      steps.status = ThfStepperStatus.Done;\n    }\n  }\n\n  onChangeProcess(process: { processId: string, existAPI: boolean }) {\n    if (process.existAPI && process.processId) {\n      this.getParametersByProcess(process.processId);\n\n      if (!this.isEdit) {\n        this.model.executionParameter = {};\n      }\n\n      return;\n    }\n\n  }\n\n  private confirmJobScheduler() {\n    const paramId = this.activatedRoute.snapshot.params['id'];\n\n    const confirmMessage = paramId ? this.literals.confirmUpdateMessage : this.literals.confirmSaveMessage;\n\n    this.thfDialogService.confirm({\n      title: this.literals.confirmation,\n      message: confirmMessage,\n      confirm: () => {\n        const model = Object.assign({}, this.model);\n\n        this.save(model, paramId);\n      }\n    });\n\n  }\n\n  private async emitSuccessMessage(msgSuccess: any, saveOperation: Observable<any>) {\n    await saveOperation.toPromise();\n    this.thfNotification.success(msgSuccess);\n    this.resetJobSchedulerForm();\n  }\n\n  private getParametersByProcess(process: any) {\n\n    this.thfPageJobSchedulerService.getParametersByProcess(process).subscribe(parameters => {\n      this.parameters = parameters;\n    });\n\n  }\n\n  private isDisabledAdvance(): boolean {\n    return this.schedulerExecution ? this.schedulerExecution.form.invalid : false;\n  }\n\n  private isDisabledBack(): boolean {\n    return this.step === 1;\n  }\n\n  private nextStepOperation(operation?: 'back' | 'next') {\n    const stepNumber = operation === 'back' ? this.step - 1 : this.step + 1;\n\n    this.nextStep(stepNumber);\n  }\n\n  private resetJobSchedulerForm() {\n    this.schedulerExecution.form.reset();\n\n    // radiogroup nÃ£o estava atribuindo novo valor, fica vermelho sem o timetout.\n    setTimeout(() => {\n      this.model = new ThfPageJobSchedulerInternal();\n\n      this.step = 1;\n      this.steps.forEach(step => {\n        step.status = ThfStepperStatus.Default;\n      });\n\n      this.jobSchedulerActions = [...this.nextPageActions];\n    });\n\n  }\n\n  private save(model: ThfJobSchedulerInternal, paramId) {\n    const saveOperation = paramId\n      ? this.thfPageJobSchedulerService.updateResource(paramId, model)\n      : this.thfPageJobSchedulerService.createResource(model);\n\n    const msgSuccess = paramId ? this.literals.saveNotificationSuccessUpdate : this.literals.saveNotificationSuccessSave;\n\n    this.emitSuccessMessage(msgSuccess, saveOperation);\n  }\n\n}\n","import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\nimport { ThfCheckboxGroupOption, ThfRadioGroupOption } from '@totvs/thf-ui';\n\nimport { isTypeof } from '../../../utils/util';\n\nimport { ThfPageJobSchedulerLookupService } from '../thf-page-job-scheduler-lookup.service';\nimport { ThfPageJobSchedulerService } from '../thf-page-job-scheduler.service';\n\n@Component({\n  selector: 'thf-page-job-scheduler-execution',\n  templateUrl: 'thf-page-job-scheduler-execution.component.html'\n})\nexport class ThfPageJobSchedulerExecutionComponent implements OnInit, AfterViewInit {\n\n  private _value: any = {};\n\n  dayPattern = '^(3[0-1]|[0-2][0-9]|[1-9]|0[1-9])$';\n  existProcessAPI = true;\n  minDateFirstExecution = new Date();\n  periodicityOptions: Array<ThfRadioGroupOption> = [];\n  periodicityTemplates: { daily: TemplateRef<any>, weekly: TemplateRef<any>, monthly: TemplateRef<any> } ;\n  timePattern = '^(2[0-3]|[01][0-9]):?([0-5][0-9])$';\n  weekDays: Array<ThfCheckboxGroupOption> = [];\n\n  @ViewChild('formExecution', { static: true }) form: NgForm;\n\n  // templates\n  @ViewChild('dailyTemplate', { static: true }) dailyTemplate;\n  @ViewChild('monthlyTemplate', { static: true }) monthlyTemplate;\n  @ViewChild('weeklyTemplate', { static: true }) weeklyTempalte;\n\n  @Input('t-is-edit') isEdit: boolean = false;\n\n  @Input('t-literals') literals = <any> {};\n\n  @Input('t-value') set value(value: any) {\n    this._value = value && isTypeof(value, 'object') ? value : {};\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  @Output('t-change-process') changeProcess: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private thfPageJobSchedulerService: ThfPageJobSchedulerService,\n    public thfPageJobSchedulerLookup: ThfPageJobSchedulerLookupService) { }\n\n  get startDateFirstExecution() {\n    return this.isEdit ? undefined : this.minDateFirstExecution;\n  }\n\n  ngAfterViewInit() {\n\n    setTimeout(() => {\n      this.subscribeProcessIdValueChanges();\n    });\n\n  }\n\n  ngOnInit() {\n    this.periodicityTemplates = {\n      daily: this.dailyTemplate,\n      monthly: this.monthlyTemplate,\n      weekly: this.weeklyTempalte\n    };\n\n    this.checkExistsProcessesAPI();\n\n    this.periodicityOptions = this.getPeriodicityOptions();\n    this.weekDays = this.getWeekDays();\n  }\n\n  private checkExistsProcessesAPI() {\n    this.thfPageJobSchedulerService.getHeadProcesses().subscribe(undefined, error => {\n      this.existProcessAPI = false;\n    });\n  }\n\n  private getPeriodicityOptions() {\n    return [\n      { label: this.literals.single, value: 'single' },\n      { label: this.literals.daily, value: 'daily' },\n      { label: this.literals.weekly, value: 'weekly' },\n      { label: this.literals.monthly, value: 'monthly' }\n    ];\n  }\n\n  private getWeekDays() {\n    return [\n      { label: this.literals.sunday, value: 'Sunday' },\n      { label: this.literals.monday, value: 'Monday' },\n      { label: this.literals.tuesday, value: 'Tuesday' },\n      { label: this.literals.wednesday, value: 'Wednesday' },\n      { label: this.literals.thursday, value: 'Thursday' },\n      { label: this.literals.friday, value: 'Friday' },\n      { label: this.literals.saturday, value: 'Saturday' }\n    ];\n  }\n\n  private subscribeProcessIdValueChanges() {\n    this.form.controls['processID'].valueChanges.subscribe(processId => {\n      this.changeProcess.emit({ processId, existAPI: this.existProcessAPI });\n    });\n  }\n\n}\n","import { AfterViewInit, Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\nimport { ThfDynamicFormField } from '@totvs/thf-ui';\n\n@Component({\n  selector: 'thf-page-job-scheduler-parameters',\n  templateUrl: 'thf-page-job-scheduler-parameters.component.html'\n})\nexport class ThfPageJobSchedulerParametersComponent implements AfterViewInit {\n\n  @ViewChild('parametersForm', { static: true }) form: NgForm;\n\n  @Input('t-literals') literals = <any> {};\n\n  @Input('t-parameters') parameters: Array<ThfDynamicFormField> = [];\n\n  @Input('t-value') value;\n\n  @Output('t-valueChange') valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  ngAfterViewInit() {\n    if (this.form) {\n      setTimeout(() => {\n\n        this.form.valueChanges.subscribe(value => {\n          this.valueChange.emit(value);\n        });\n\n      });\n    }\n  }\n\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\nimport { ThfDynamicViewField, ThfInfoOrientation } from '@totvs/thf-ui';\n\nimport { ThfJobSchedulerInternal } from '../interfaces/thf-job-scheduler-internal.interface';\n\n@Component({\n  selector: 'thf-page-job-scheduler-summary',\n  templateUrl: 'thf-page-job-scheduler-summary.component.html'\n})\nexport class ThfPageJobSchedulerSummaryComponent implements OnInit {\n\n  executionValue = '';\n  firstExecutionValue = '';\n  infoOrientation = ThfInfoOrientation.Horizontal;\n  periodicityValue = '';\n  recurrentValue = '';\n\n  @Input('t-literals') literals = <any> {};\n\n  @Input('t-parameters') parameters: Array<ThfDynamicViewField> = [];\n\n  @Input('t-value') value: ThfJobSchedulerInternal = <any> {};\n\n  constructor(private datePipe: DatePipe) {}\n\n  ngOnInit() {\n    const { periodicity, hour, dayOfMonth, daysOfWeek, recurrent, firstExecution, firstExecutionHour } = this.value;\n\n    this.periodicityValue = this.getPeriodicityLabel(periodicity);\n    this.executionValue = this.getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth);\n    this.firstExecutionValue = this.getFirstExecutionLabel(firstExecution, firstExecutionHour);\n    this.recurrentValue = this.getRecurrentValue(recurrent);\n  }\n\n  private getExecutionValue(periodicity: string, hour?: string, daysOfWeek?: Array<string>, dayOfMonth?: number) {\n    switch (periodicity) {\n      case 'daily':\n        return this.getHourLabel(hour);\n      case 'monthly':\n        return this.getMonthlyLabelExecution(dayOfMonth, hour);\n      case 'weekly':\n        return this.getWeeklyLabelExecution(daysOfWeek, hour);\n      default:\n        return this.literals.notReported;\n    }\n  }\n\n  private getFirstExecutionLabel(firstExecution: Date, firstExecutionHour?: string): string {\n    if (firstExecution) {\n      const date = this.datePipe.transform(firstExecution, 'dd/MM/yyyy', '-0200');\n\n      return `${date} ${this.getHourLabel(firstExecutionHour)}`;\n    } else {\n      return this.literals.notReported;\n    }\n  }\n\n  private getHourLabel(hour: string) {\n    return `${this.literals.at} ${hour || '00:00'}h`;\n  }\n\n  private getMonthlyLabelExecution(dayOfMonth: number, hour: string) {\n    const hourLabel = this.getHourLabel(hour);\n\n    return `${this.literals.day} ${dayOfMonth} ${hourLabel}`;\n  }\n\n  private getPeriodicityLabel(periodicity) {\n    switch (periodicity) {\n      case 'daily':\n        return this.literals.daily;\n      case 'monthly':\n        return this.literals.monthly;\n      case 'weekly':\n        return this.literals.weekly;\n      default:\n        return this.literals.single;\n    }\n  }\n\n  private getRecurrentValue(recurrent: boolean): string {\n    return recurrent ? this.literals.yes : this.literals.no;\n  }\n\n  private getSorterWeekDays() {\n    return {\n      'sunday': 0,\n      'monday': 1,\n      'tuesday': 2,\n      'wednesday': 3,\n      'thursday': 4,\n      'friday': 5,\n      'saturday': 6\n    };\n  }\n\n  private getTranslateWeekDay(day: string): string {\n    const days = {\n      Sunday: this.literals.sunday,\n      Monday: this.literals.monday,\n      Tuesday: this.literals.tuesday,\n      Wednesday: this.literals.wednesday,\n      Thursday: this.literals.thursday,\n      Friday: this.literals.friday,\n      Saturday: this.literals.saturday,\n    };\n\n    return days[day] || '';\n  }\n\n  private getWeekDaysLabel(days: Array<string> = []): string {\n    const weekDaysSorted = this.sortWeekDays(days);\n\n    return weekDaysSorted.map(day => this.getTranslateWeekDay(day)).join(', ');\n  }\n\n  private getWeeklyLabelExecution(daysOfWeek: Array<string>, hour: string) {\n    if (daysOfWeek && Array.isArray(daysOfWeek)) {\n      return `${this.getWeekDaysLabel(daysOfWeek)} ${this.getHourLabel(hour)}`;\n    } else {\n      return this.literals.notReported;\n    }\n  }\n\n  private sortWeekDays(days: Array<string> = []) {\n    const sorterWeekDays = this.getSorterWeekDays();\n\n    return days.sort((a: string, b: string) => {\n      const currDay = a.toLowerCase();\n      const nextDay = b.toLowerCase();\n\n      return sorterWeekDays[currDay] > sorterWeekDays[nextDay] ? 1 : -1;\n    });\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\n\nimport {\n  ThfButtonModule,\n  ThfContainerModule,\n  ThfDialogModule,\n  ThfDividerModule,\n  ThfDynamicModule,\n  ThfFieldModule,\n  ThfInfoModule,\n  ThfPageModule,\n  ThfStepperModule,\n  ThfWidgetModule\n} from '@totvs/thf-ui';\n\nimport { ThfPageJobSchedulerComponent } from './thf-page-job-scheduler.component';\nimport { ThfPageJobSchedulerExecutionComponent } from './thf-page-job-scheduler-execution/thf-page-job-scheduler-execution.component';\nimport { ThfPageJobSchedulerLookupService } from './thf-page-job-scheduler-lookup.service';\nimport { ThfPageJobSchedulerParametersComponent } from './thf-page-job-scheduler-parameters/thf-page-job-scheduler-parameters.component';\nimport { ThfPageJobSchedulerService } from './thf-page-job-scheduler.service';\nimport { ThfPageJobSchedulerSummaryComponent } from './thf-page-job-scheduler-summary/thf-page-job-scheduler-summary.component';\n\n@NgModule({\n  declarations: [\n    ThfPageJobSchedulerComponent,\n    ThfPageJobSchedulerExecutionComponent,\n    ThfPageJobSchedulerParametersComponent,\n    ThfPageJobSchedulerSummaryComponent\n  ],\n  exports: [\n    ThfPageJobSchedulerComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ThfButtonModule,\n    ThfContainerModule,\n    ThfDialogModule,\n    ThfDividerModule,\n    ThfDynamicModule,\n    ThfFieldModule,\n    ThfInfoModule,\n    ThfPageModule,\n    ThfStepperModule,\n    ThfWidgetModule\n  ],\n  providers: [\n    ThfPageJobSchedulerService,\n    ThfPageJobSchedulerLookupService\n  ]\n})\nexport class ThfPageJobSchedulerModule { }\n","/**\n * @usedBy ThfPageLoginComponent\n *\n * @description\n *\n * *Enum* para definiÃ§Ã£o do tipo de autenticaÃ§Ã£o.\n */\nexport enum ThfPageLoginAuthenticationType {\n\n  /** AutenticaÃ§Ã£o Basic */\n  Basic = 'Basic',\n\n  /** AutenticaÃ§Ã£o Bearer */\n  Bearer = 'Bearer',\n\n}\n","import { Subscription } from 'rxjs';\nimport { EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { browserLanguage, convertToBoolean, convertToInt, isExternalLink, isTypeof, thfLocaleDefault } from './../../utils/util';\n\nimport { ThfPageLogin } from './interfaces/thf-page-login.interface';\nimport { ThfPageLoginAuthenticationType } from './enums/thf-page-login-authentication-type.enum';\nimport { ThfPageLoginCustomField } from './interfaces/thf-page-login-custom-field.interface';\nimport { ThfPageLoginLiterals } from './interfaces/thf-page-login-literals.interface';\nimport { ThfPageLoginRecovery } from './interfaces/thf-page-login-recovery.interface';\nimport { ThfPageLoginService } from './thf-page-login.service';\n\nconst thfPageLoginContentMaxLength = 40;\n\nexport const thfPageLoginLiteralsDefault = {\n  en: <ThfPageLoginLiterals> {\n    title: 'Welcome',\n    loginErrorPattern: 'Invalid Login',\n    loginHint: `Your login user was given to you at your first day.\n    If you don't have this information contact support`,\n    loginPlaceholder: 'Insert your e-mail',\n    passwordErrorPattern: 'Invalid Password',\n    passwordPlaceholder: 'Insert your password',\n    customFieldErrorPattern: 'Invalid value',\n    customFieldPlaceholder: 'Please enter a value',\n    rememberUser: 'Automatic login',\n    rememberUserHint: 'You can disable this option in system configuration',\n    submitLabel: 'Enter',\n    submittedLabel: 'Loading...',\n    forgotPassword: 'Forgot your Password?',\n    highlightInfo: '',\n    registerUrl: 'New register',\n    titlePopover: 'Oops!',\n    forgotYourPassword: 'Forgot your password?',\n    ifYouTryHarder: 'If you try ',\n    attempts: '{0} more time(s) ',\n    yourUserWillBeBlocked: 'without success your user will be blocked and you will be left 24 hours without being able to access :(',\n    createANewPasswordNow: 'Better create a new password now! You will be able to log into the system right away.',\n    iForgotMyPassword: 'I forgot my password'\n  },\n  es: <ThfPageLoginLiterals> {\n    title: 'Bienvenido',\n    loginErrorPattern: 'Login invÃ¡lido',\n    loginHint: `Su usuario ha sido entregado para usted en su primer dÃ­a.\n    Si no tiene esta informaciÃ³n, pÃ³ngase en contacto con el soporte tÃ©cnico`,\n    loginPlaceholder: 'Inserte su e-mail',\n    passwordErrorPattern: 'ContraseÃ±a invÃ¡lida',\n    passwordPlaceholder: 'Inserte su contraseÃ±a',\n    customFieldErrorPattern: 'Valor no vÃ¡lido.',\n    customFieldPlaceholder: 'Por favor introduzca un valor',\n    rememberUser: 'Inicio de sesiÃ³n automÃ¡ticamente',\n    rememberUserHint: 'Puede deshabilitar esta opciÃ³n en el menÃº del sistema.',\n    submitLabel: 'Entrar',\n    submittedLabel: 'Cargando...',\n    forgotPassword: 'Olvidaste tu contraseÃ±a?',\n    highlightInfo: '',\n    registerUrl: 'Nuevo registro',\n    titlePopover: 'Opa!',\n    forgotYourPassword: 'Olvidaste tu contraseÃ±a?',\n    ifYouTryHarder: 'Si intenta mÃ¡s ',\n    attempts: '{0} vez/veces ',\n    yourUserWillBeBlocked: 'sin Ã©xito su usuario sera bloqueado y usted vÃ¡s permanecer 24 horas sin poder acceder a :(',\n    createANewPasswordNow: 'Â¡Mejor crear una nueva contraseÃ±a ahora! Usted podrÃ¡ entrar en el sistema inmediatamente despuÃ©s.',\n    iForgotMyPassword: 'Olvide mi contraseÃ±a'\n  },\n  pt: <ThfPageLoginLiterals> {\n    title: 'Bem-vindo',\n    loginErrorPattern: 'Login invÃ¡lido',\n    loginHint: `Seu usuÃ¡rio foi entregue a vocÃª no seu primeiro dia.\n    Caso nÃ£o tenha mais essa informaÃ§Ã£o contacte o suporte`,\n    loginPlaceholder: 'Insira seu e-mail',\n    passwordErrorPattern: 'Senha invÃ¡lida',\n    passwordPlaceholder: 'Insira sua senha',\n    customFieldErrorPattern: 'Valor invÃ¡lido.',\n    customFieldPlaceholder: 'Por favor insira um valor',\n    rememberUser: 'Logar automaticamente',\n    rememberUserHint: 'VocÃª pode desabilitar essa opÃ§Ã£o no menu do sistema',\n    submitLabel: 'Entrar',\n    submittedLabel: 'Carregando...',\n    forgotPassword: 'Esqueceu sua senha?',\n    highlightInfo: '',\n    registerUrl: 'Novo registro',\n    titlePopover: 'Opa!',\n    forgotYourPassword: 'Esqueceu sua senha?',\n    ifYouTryHarder: 'Se tentar mais ',\n    attempts: '{0} vez(es) ',\n    yourUserWillBeBlocked: 'sem sucesso seu usuÃ¡rio serÃ¡ bloqueado e vocÃª fica 24 horas sem poder acessar :(',\n    createANewPasswordNow: 'Melhor criar uma senha nova agora! VocÃª vai poder entrar no sistema logo em seguida.',\n    iForgotMyPassword: 'Esqueci minha senha'\n  }\n};\n\nexport const thfPageLoginLiteralIn = {\n  en: 'in',\n  es: 'en',\n  pt: 'em'\n};\n\nexport const thfPageLoginLiteralTo = {\n  en: 'to',\n  es: 'al',\n  pt: 'ao',\n};\n\n/**\n * @description\n *\n * O componente `thf-page-login` Ã© utilizado como template para tela de login.\n * Com ele Ã© possÃ­vel definirmos valores para usuÃ¡rio, senha e definir aÃ§Ãµes para recuperaÃ§Ã£o de senha e gravaÃ§Ã£o de dados do usuÃ¡rio.\n * TambÃ©m Ã© possÃ­vel inserir uma imagem em conjunto com um texto de destaque.\n *\n *\n * A propriedade `t-authentication-url` automatiza a rotina do componente e simplifica o processo para autenticaÃ§Ã£o do usuÃ¡rio, bastando\n * definir uma url para requisiÃ§Ã£o da autenticaÃ§Ã£o. A flexibilidade e praticidade podem chegar a um nÃ­vel em que o desenvolvimento\n * da aplicaÃ§Ã£o no *client side* Ã© desprovida de qualquer cÃ³digo-fonte relacionado Ã  rotina de login de usuÃ¡rio.\n * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.\n * Caso julgue necessÃ¡rio, pode-se tambÃ©m definir manualmente a rotina do componente.\n *\n *\n * Para que as imagens sejam exibidas corretamente, Ã© necessÃ¡rio incluir o caminho delas ao projeto. Para isso, edite\n * o *assets* no arquivo **angular.json** da aplicaÃ§Ã£o na seguinte ordem:\n * ```\n *   \"assets\": [\n *     \"src/assets\",\n *     \"src/favicon.ico\",\n *     {\n *       \"glob\": \"**\\/*\",\n *       \"input\": \"node_modules/@totvs/thf-theme/images\",\n *       \"output\": \"assets/images\"\n *     }\n *   ]\n * ```\n */\nexport abstract class ThfPageLoginBaseComponent implements OnDestroy {\n\n  allLoginErrors: Array<string> = [];\n  allPasswordErrors: Array<string> = [];\n  containsCustomLiterals: boolean = false;\n  customFieldObject: ThfPageLoginCustomField;\n  customFieldType: string;\n  customizedDefaultLiterals: ThfPageLoginLiterals = {};\n  loginSubscription: Subscription;\n  password: string;\n  selectedLanguage: string;\n  showExceededAttemptsWarning = false;\n\n  private _authenticationType: ThfPageLoginAuthenticationType = ThfPageLoginAuthenticationType.Basic;\n  private _authenticationUrl: string;\n  private _blockedUrl: string;\n  private _contactEmail: string;\n  private _customField: string | ThfPageLoginCustomField;\n  private _environment?: string;\n  private _exceededAttemptsWarning?: number;\n  private _hideRememberUser: boolean = false;\n  private _literals: ThfPageLoginLiterals;\n  private _loading?: boolean = false;\n  private _login: string;\n  private _loginErrors: Array<string> = [];\n  private _passwordErrors: Array<string> = [];\n  private _productName: string;\n  private _recovery: string | ThfPageLoginRecovery | Function;\n  private _registerUrl: string;\n  private _urlRecovery: string;\n\n  protected rememberUser: boolean = false;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Ao informar um valor do tipo `string`, o mesmo serÃ¡ aplicado como a chave do campo customizado e utilizarÃ¡\n   * os valores padrÃµes contidos na propriedade `literals` como `customFieldErrorPattern` e `customFieldPlaceholder`.\n   *\n   * Existe a possibilidade de informar um objeto que segue a definiÃ§Ã£o da interface `ThfPageLoginCustomField`, onde\n   * atravÃ©s dos parÃ¢metros enviados pode gerar um `thf-input`, `thf-combo` especificamente para serviÃ§os\n   * ou `thf-select` para valores fixos.\n   *\n   * Abaixo seguem os exemplos de cada tipo de campo.\n   *\n   * `thf-input`:\n   *\n   * ```\n   * {\n   *   property: 'domain',\n   *   value: 'jv01',\n   *   placeholder: 'Enter your domain',\n   *   pattern: '[a-z]',\n   *   errorPattern: 'Invalid value',\n   * }\n   * ```\n   *\n   * `thf-combo`:\n   *\n   * ```\n   * {\n   *   property: 'domain',\n   *   value: 'jv01',\n   *   placeholder: 'Enter your domain',\n   *   url: 'https://thf.totvs.com.br/sample/api/comboOption/domains',\n   *   fieldValue: 'nickname'\n   * }\n   * ```\n   *\n   * `thf-select`:\n   *\n   * ```\n   * {\n   *   property: 'domain',\n   *   value: 'jv01',\n   *   placeholder: 'Enter your domain',\n   *   options: [{label: 'Domain 1', value: '1'}, {label: 'Domain 2', value: '2'}]\n   * }\n   * ```\n   *\n   * Caso o customField possua options, url e fieldValue preenchidos, serÃ¡ priorizado o thf-select\n   * utilizando o options.\n   *\n   */\n  @Input('t-custom-field') set customField(value: string | ThfPageLoginCustomField) {\n    if (value) {\n\n      if (isTypeof(value, 'string')) {\n        this.customFieldType = 'input';\n        this._customField = value;\n        this.customFieldObject = this.getDefaultCustomFieldObject(value);\n        return;\n      }\n\n      if (isTypeof(value, 'object') && !Array.isArray(value) && value['property']) {\n        this._customField = value;\n        this.customFieldObject = <ThfPageLoginCustomField> value;\n\n        if (!this.customFieldObject.options && !this.customFieldObject.url) {\n          this.customFieldType = 'input';\n        } else {\n          this.customFieldType = this.customFieldObject.options ? 'select' : 'combo';\n        }\n\n        return;\n      }\n\n    }\n\n    this._customField = undefined;\n    this.customFieldObject = undefined;\n  }\n\n  get customField(): string | ThfPageLoginCustomField {\n    return this._customField;\n  }\n\n  /**\n   * O `t-background` permite inserir uma imagem de destaque ao lado direito do formulÃ¡rio de login, caso a propriedade\n   * nÃ£o seja preenchida o formulÃ¡rio serÃ¡ centralizado no espaÃ§o disponÃ­vel.\n   *\n   * A fonte da imagem pode ser de um caminho local ou uma url de um servidor externo.\n   *\n   * AlÃ©m da imagem, Ã© possÃ­vel adicionar um texto informativo por cima da imagem da imagem de destaque, para isso informe\n   * um valor para a literal `highlightInfo`.\n   *\n   * > Veja mais sobre as literais na propriedade `t-literals`.\n   *\n   * Exemplos de valores vÃ¡lidos:\n   * - **local**: `./assets/images/login-background.png`\n   * - **url externa**: `https://thf.totvs.com.br/assets/images/login-background.png`\n   *\n   * > Essa propriedade Ã© ignorada para aplicaÃ§Ãµes mobile.\n   */\n  @Input('t-background') background?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Personaliza o e-mail que Ã© exibido na mensagem de dica de login padrÃ£o para contato de suporte.\n   */\n  @Input('t-contact-email') set contactEmail(value: string) {\n    const language = this.selectedLanguage || browserLanguage();\n    this._contactEmail = value;\n\n    this.setLoginHintLiteral(language, value);\n  }\n  get contactEmail() {\n    return this._contactEmail;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Valor customizado que sucede o tÃ­tulo de boas-vindas.\n   *\n   * > Esta propriedade Ã© sobreposta se `t-literals` contiver uma definiÃ§Ã£o customizada para a literal `title`.\n   *\n   * > Veja mais sobre as literais na propriedade `t-literals`.\n   *\n   */\n  @Input('t-product-name') set productName(value: string) {\n    const language = this.selectedLanguage || browserLanguage();\n    this._productName = value;\n\n    this.setTitleLiteral(language, value);\n  }\n  get productName() {\n    return this._productName;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   * Adiciona uma `tag` abaixo do tÃ­tulo que especifica o ambiente que o usuÃ¡rio estÃ¡ fazendo o login.\n   *\n   * > Essa propriedade limita o texto em 40 caracteres.\n   */\n  @Input('t-environment') set environment(environment: string) {\n    if (environment && environment.length > thfPageLoginContentMaxLength) {\n      this._environment = environment.substring(0, thfPageLoginContentMaxLength);\n    } else {\n      this._environment = environment;\n    }\n  }\n  get environment() {\n    return this._environment;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   * Exibe um aviso de bloqueio de acordo com a quantidade restante de tentativas.\n   * O aviso serÃ¡ exibido somente se a quantidade for maior que zero.\n   *\n   * > Caso tenha algum valor atribuÃ­do para o atributo `t-authentication-url` e o retorno da requisiÃ§Ã£o estiver atribuindo valor\n   * para o `t-exceeded-attempts-warning`, o valor considerado serÃ¡ o do retorno da requisiÃ§Ã£o.\n   *\n   * @default `0`\n   */\n  @Input('t-exceeded-attempts-warning') set exceededAttemptsWarning(value: number) {\n    this._exceededAttemptsWarning = convertToInt(value);\n    this.showExceededAttemptsWarning = this.exceededAttemptsWarning > 0;\n  }\n\n  get exceededAttemptsWarning(): number {\n    return this._exceededAttemptsWarning;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Esconde a funÃ§Ã£o \"Lembrar usuÃ¡rio\" do formulÃ¡rio de login.\n   *\n   * Quando essa propriedade Ã© setada com `true` a propriedade `rememberUser` enviada no evento `t-login-submit` serÃ¡ sempre\n   * `false`.\n   *\n   * > Veja a propriedade `t-literals` para customizar a literal `rememberUser`.\n   *\n   * @default `false`\n   */\n  @Input('t-hide-remember-user') set hideRememberUser(value: boolean) {\n    this._hideRememberUser = <any>value === '' ? true : convertToBoolean(value);\n\n    if (this._hideRememberUser) {\n      this.rememberUser = false;\n    }\n  }\n  get hideRememberUser(): boolean {\n    return this._hideRememberUser;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto com as literais usadas no `thf-page-login`.\n   *\n   * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponÃ­veis:\n   *\n   * ```\n   *  const customLiterals: ThfPageLoginLiterals = {\n   *    title: 'Seja bem-vindo',\n   *    loginErrorPattern: 'Login obrigatÃ³rio',\n   *    loginHint: 'Caso nÃ£o possua usuÃ¡rio entre em contato com o suporte',\n   *    loginLabel: 'Insira seu usuÃ¡rio',\n   *    loginPlaceholder: 'Insira seu usuÃ¡rio de acesso',\n   *    passwordErrorPattern: 'Senha obrigatÃ³ria',\n   *    passwordLabel: 'Insira sua senha',\n   *    passwordPlaceholder: 'Insira sua senha de acesso'\n   *    customFieldErrorPattern: 'Campo customizado invÃ¡lido',\n   *    customFieldPlaceholder: 'Por favor insira um valor',\n   *    rememberUser: 'Lembrar usuÃ¡rio',\n   *    rememberUserHint: 'Esta opÃ§Ã£o pode ser desabilitada nas configuraÃ§Ãµes do sistema',\n   *    submitLabel: 'Acessar sistema',\n   *    forgotPassword: 'Esqueceu sua senha?'\n   *  };\n   * ```\n   *\n   * Ou passando apenas as literais que deseja customizar:\n   *\n   * ```\n   *  const customLiterals: ThfPageLoginLiterals = {\n   *    loginPlaceholder: 'Insira seu usuÃ¡rio de acesso',\n   *    passwordPlaceholder: 'Insira sua senha de acesso',\n   *    submitLabel: 'Acessar sistema'\n   *  };\n   * ```\n   *\n   * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\n   *\n   * ```\n   * <thf-page-login\n   *   [t-literals]=\"customLiterals\">\n   * </thf-page-login>\n   * ```\n   *\n   *  > O objeto padrÃ£o de literais serÃ¡ traduzido de acordo com o idioma do browser (pt, en, es).\n   *  > Ã tambÃ©m possÃ­vel alternar o objeto padrÃ£o de literais atravÃ©s do seletor de idiomas localizado na parte inferior do template.\n   */\n  @Input('t-literals') set literals(value: ThfPageLoginLiterals) {\n    const language = this.selectedLanguage || browserLanguage();\n\n    if (value) {\n      this.getLiterals(language, value);\n      this.containsCustomLiterals =\n        !this.literals.title.includes(thfPageLoginLiteralsDefault[language].title) ||\n        !this.literals.loginHint.includes(thfPageLoginLiteralsDefault[language].loginHint);\n    } else {\n      this.containsCustomLiterals = false;\n      this._literals = thfPageLoginLiteralsDefault[language];\n    }\n  }\n\n  get literals() {\n    return this._literals || thfPageLoginLiteralsDefault[browserLanguage()];\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Habilita um estado de carregamento ao botÃ£o de *login*.\n   *\n   * > Ã necessÃ¡rio atribuir `true` Ã  esta propriedade na funÃ§Ã£o definida em `t-login-submit`.\n   *\n   * @default `false`\n   */\n  @Input('t-loading') set loading(value: boolean) {\n    this._loading = convertToBoolean(value);\n  }\n\n  get loading(): boolean {\n    return this._loading;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Valor do modelo do campo de login.\n   *\n   */\n  @Input('t-login') set login(value: string) {\n    this._login = value;\n\n    if (!this.authenticationUrl) {\n      this.loginChange.emit(this._login);\n    }\n  }\n\n  get login(): string {\n    return this._login;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caminho para a logomarca localizada na parte superior.\n   *\n   * > Caso seja indefinida o espaÃ§o se mantÃ©m preservado porÃ©m vazio.\n   */\n  @Input('t-logo') logo?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * ExpressÃ£o regular para validar o campo de login, caso a expressÃ£o nÃ£o seja atentida, a literal `loginErrorPattern`\n   * serÃ¡ exibida.\n   *\n   * Exemplos de valores vÃ¡lidos:\n   * - email: `[expressao-regular-email]`\n   * - cpf: `[expressao-regular-cpf]`\n   *\n   * > Veja a propriedade `t-literals` para customizar a literal `loginErrorPattern`.\n   */\n  @Input('t-login-pattern') loginPattern?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Atributo que recebe uma lista de erros e exibe abaixo do campo de login.\n   */\n  @Input('t-login-errors') set loginErrors(value: Array<string>) {\n    this._loginErrors = value || [];\n    this.setLoginErrors(this._loginErrors);\n  }\n  get loginErrors() {\n    return this._loginErrors;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Atributo que recebe uma lista de erros e exibe abaixo do campo de password.\n   */\n  @Input('t-password-errors') set passwordErrors(value: Array<string>) {\n    this._passwordErrors = value || [];\n    this.setPasswordErrors(this._passwordErrors);\n  }\n  get passwordErrors() {\n    return this._passwordErrors;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * ExpressÃ£o regular para validar o campo de password, caso a expressÃ£o nÃ£o seja atentida, a literal `passwordErrorPattern`\n   * serÃ¡ exibida.\n   *\n   * Exemplos de valores vÃ¡lidos:\n   * - Apenas nÃºmeros: `\\d?`\n   * - Letras mÃ­nusculas: `\\z?`\n   *\n   * > Veja a propriedade `t-literals` para customizar a literal `passwordErrorPattern`.\n   */\n  @Input('t-password-pattern') passwordPattern?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Exibe um link abaixo do formulÃ¡rio de login para que os usuÃ¡rios da aplicaÃ§Ã£o faÃ§am a recuperaÃ§Ã£o dos dados de autenticaÃ§Ã£o.\n   *\n   * A propriedade aceita os seguintes tipos:\n   *\n   * - **String**: informe uma url externa ou uma rota vÃ¡lida;\n   * - **Function**: pode-se customizar a aÃ§Ã£o. Para esta possilidade basta atribuir:\n   * ```\n   * <thf-page-login>\n   *   [recovery]=\"this.funcaominha.bind(this)\";\n   * </thf-page-login>\n   * ```\n   *\n   * - **ThfPageLoginRecovery**: cria-se vÃ­nculo automÃ¡tico com o template **thf-modal-password-recovery**.\n   *   O objeto deve conter a **url** para requisiÃ§Ã£o dos recursos e pode-se definir o **tipo** de modal para recuperaÃ§Ã£o de senha,\n   *   **email** para contato e **mÃ¡scara** do campo de telefone.\n   */\n  @Input('t-recovery') set recovery(value: string | Function | ThfPageLoginRecovery) {\n    this._recovery = value;\n  }\n\n  get recovery() {\n    return this._recovery;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caso a aplicaÃ§Ã£o tenha um link para novos cadastros, informe uma url externa ou uma rota vÃ¡lida, dessa\n   * forma serÃ¡ exibido um link abaixo do formulÃ¡rio de login para os usuÃ¡rios da aplicaÃ§Ã£o.\n   *\n   * Exemplos de valores vÃ¡lidos:\n   * - **local**: `/home`\n   * - **url externa**: `https://thf.totvs.com.br`\n   *\n   * > Veja a propriedade `t-literals` para customizar a literal `registerUrl`.\n   */\n  @Input('t-register-url') set registerUrl(value: string) {\n    this._registerUrl = isTypeof(value, 'string') ? value : undefined;\n  }\n\n  get registerUrl(): string {\n    return this._registerUrl;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caminho para a logomarca localizada no rodapÃ©.\n   */\n  @Input('t-secondary-logo') secondaryLogo?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Atributo que recebe o tipo de esquema da autenticaÃ§Ã£o, sendo suportados apenas os valores `Basic` e `Bearer`.\n   *\n   * > Caso o tipo definido seja `Basic`, o componente farÃ¡ uma requisiÃ§Ã£o `POST` contendo:\n   *\n   * ```\n   * headers {\n   *  Authorization: Basic base64(login:password)\n   * }\n   *\n   * body {\n   *  rememberUser: rememberUser\n   * }\n   * ```\n   *\n   * > Caso o tipo definido seja `Bearer`, o componente farÃ¡ uma requisiÃ§Ã£o `POST` contendo:\n   *\n   * ```\n   * body {\n   *  login: login,\n   *  password: base64(password)\n   *  rememberUser: rememberUser\n   * }\n   * ```\n   *\n   * @default `ThfPageLoginAuthenticationType.Basic`\n   */\n  @Input('t-authentication-type') set authenticationType(value: ThfPageLoginAuthenticationType) {\n    this._authenticationType =\n    (<any>Object).values(ThfPageLoginAuthenticationType).includes(value) ? value : ThfPageLoginAuthenticationType.Basic;\n  }\n\n  get authenticationType(): ThfPageLoginAuthenticationType {\n    return this._authenticationType;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Endpoint usado pelo template para requisiÃ§Ã£o do recurso. Quando preenchido, o mÃ©todo `t-login-submit` serÃ¡ ignorado e o\n   * componente adquirirÃ¡ automatizaÃ§Ã£o para o processo de autenticaÃ§Ã£o.\n   *\n   * ### Processos\n   * Ao digitar um valor vÃ¡lido no campo de login/password e pressionar **Enter**, o componente farÃ¡ uma requisiÃ§Ã£o `POST`\n   * na url especificada nesta propriedade passando o objeto contendo o valor definido pelo usuÃ¡rio:\n   *\n   * ```\n   * headers {\n   *  Authorization: Basic base64(login:password)\n   * }\n   *\n   * body {\n   *  rememberUser: rememberUser\n   * }\n   * ```\n   *\n   * Em caso de **sucesso**, o objeto de retorno Ã© armazenado no `sessionStorage` e o usuÃ¡rio Ã© redirecionado para a pÃ¡gina inicial da\n   * aplicaÃ§Ã£o `/`.\n   *\n   * ```\n   * 200:\n   *  {\n   *    user: user\n   *  }\n   * ```\n   *\n   * Em caso de **erro** na autenticaÃ§Ã£o, espera-se o seguinte retorno:\n   *\n   * ```\n   * 400/401\n   *  {\n   *    code: 400/401,\n   *    message: message,\n   *    detailedMessage: detailedMessage,\n   *    helpUrl?: helpUrl\n   *  }\n   * ```\n   *\n   * > Pode-se atribuir uma quantidade mÃ¡xima de tentativas restantes (maxAttemptsRemaining) para o atributo `t-exceeded-attempts-warning`,\n   * assim como os avisos relacionados aos campos login e password (loginWarnings, passwordWarnings) para os atributos `t-login-errors` e\n   * `t-password-errors` conforme retorno abaixo:\n   *\n   * ```\n   * 400\n   *  {\n   *    code: 400/401,\n   *    message: message,\n   *    detailedMessage: detailedMessage,\n   *    helpUrl?: helpUrl,\n   *    maxAttemptsRemaining?: maxAttemptsRemaining,\n   *    loginWarnings?: [loginWarnings],\n   *    passwordWarnings?: [passwordWarnings],\n   *  }\n   * ```\n   *\n   * > Caso o valor atribuÃ­do para `t-exceeded-attempts-warning` seja igual a 0(zero), poderÃ¡ ser passado um valor para o\n   * atributo `t-blocked-url` e o usuÃ¡rio serÃ¡ redirecionado para uma tela de bloqueio.\n   *\n   * *Processo finalizado.*\n   *\n   * _______________\n   *\n   * #### Praticidade\n   * As informaÃ§Ãµes do serviÃ§o de autenticaÃ§Ã£o tambÃ©m podem ser transmitidas diretamente pelas configuraÃ§Ã£os de rota e, desta maneira,\n   * dispensa-se qualquer menÃ§Ã£o e/ou importaÃ§Ã£o do componente `thf-page-login` no restante da aplicaÃ§Ã£o. O exemplo abaixo exemplifica\n   * a forma dinÃ¢mica com a qual o template de tela de login pode ser gerado ao navegar para rota `/login`, e tambÃ©m como ele se comunica\n   * com o serviÃ§o para efetuaÃ§Ã£o do processo de autenticaÃ§Ã£o do usuÃ¡rio e solicitaÃ§Ã£o de nova senha.\n   * Basta definir nas configuraÃ§Ãµes de rota:\n   *\n   *\n   * ```\n   *   import { ThfPageLoginComponent, ThfPageLoginAthenticationType } from '@totvs/thf-templates';\n   *\n   *   ...\n   *   const routes: Routes = [\n   *     {\n   *       path: 'login', component: ThfPageLoginComponent, data: {\n   *         serviceApi: 'https://thf.totvs.com.br/sample/api/users/authentication',\n   *         environment: 'development',\n   *         recovery: {\n   *           url: 'https://thf.totvs.com.br/sample/api/users',\n   *           type: ThfModalPasswordRecoveryType.All,\n   *           contactMail: 'dev.totvs@totvs.com',\n   *           phoneMask: '9-999-999-9999'\n   *         },\n   *         registerUrl: '/new-password',\n   *         authenticationType: ThfPageLoginAthenticationType.Basic\n   *       }\n   *     }\n   *     ...\n   *   ];\n   *\n   *   @NgModule({\n   *     imports: [RouterModule.forRoot(routes)],\n   *     exports: [RouterModule]\n   *   })\n   *   export class AppRoutingModule { }\n   * ```\n   *\n   *\n   * O metadado `serviceApi` deve ser a **url** para requisiÃ§Ã£o dos recursos de autenticaÃ§Ã£o, o `environment` alimenta a propriedade\n   * `t-environment`, `recovery` Ã© a interface `ThfPageLoginRecovery` responsÃ¡vel pelas especificaÃ§Ãµes contidas na modal de recuperaÃ§Ã£o de\n   * senha, `registerUrl` alimenta a propriedade `t-register-url` e `authenticationType` que define a propriedade `t-authentication-type`.\n   *\n   * > Ã essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.\n   *\n   */\n  @Input('t-authentication-url') set authenticationUrl(value: string) {\n    this._authenticationUrl = isTypeof(value, 'string') ? value : undefined;\n  }\n\n  get authenticationUrl(): string {\n    return this._authenticationUrl;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caso o valor atribuÃ­do para `t-exceeded-attempts-warning` seja igual a 0(zero) e a aplicaÃ§Ã£o tenha um link de bloqueio de usuÃ¡rio,\n   * informe uma url externa ou uma rota vÃ¡lida, dessa forma em caso de bloqueio o usuÃ¡rio serÃ¡ redirecionado.\n   */\n  @Input('t-blocked-url') set blockedUrl(value: string) {\n    this._blockedUrl = isTypeof(value, 'string') ? value : undefined;\n  }\n\n  get blockedUrl(): string {\n    return this._blockedUrl;\n  }\n\n  /**\n   * Evento disparado quando o usuÃ¡rio alterar o input do campo login.\n   *\n   * Esse evento receberÃ¡ como parÃ¢metro uma variÃ¡vel do tipo `string` com o texto informado no campo.\n   *\n   * > Esta propriedade serÃ¡ ignorada se for definido valor para a propriedade `t-authentication-url`.\n   */\n  @Output('t-login-change') loginChange?: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * Evento disparado ao submeter o formulÃ¡rio de login (apertando `Enter` dentro dos campos ou pressionando o botÃ£o de confirmaÃ§Ã£o).\n   *\n   * Esse evento receberÃ¡ como parÃ¢metro um objeto do tipo `ThfPageLogin` com os dados informados no formulÃ¡rio.\n   *\n   * > Esta propriedade serÃ¡ ignorada se for definido valor para a propriedade `t-url-recovery`.\n   *\n   * > Para mais detalhes consulte a documentaÃ§Ã£o sobre a interface `ThfPageLogin` mais abaixo.\n   */\n  @Output('t-login-submit') loginSubmit = new EventEmitter<ThfPageLogin>();\n\n  /**\n   * Evento disparado quando o usuÃ¡rio alterar o input do campo password.\n   *\n   * Esse evento receberÃ¡ como parÃ¢metro uma variÃ¡vel do tipo `string` com o texto informado no campo.\n   *\n   * > Esta propriedade serÃ¡ ignorada se for definido valor para a propriedade `t-authentication-url`.\n   */\n  @Output('t-password-change') passwordChange?: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(private loginService: ThfPageLoginService, public router: Router) { }\n\n  ngOnDestroy() {\n    if (this.loginSubscription) {\n      this.loginSubscription.unsubscribe();\n    }\n  }\n\n  closePopover() {\n    this.showExceededAttemptsWarning = false;\n  }\n\n  getLiterals(language?: string, value?) {\n    language = language || browserLanguage();\n\n    if (value instanceof Object && !(value instanceof Array)) {\n      this.customizedDefaultLiterals = {\n        ...this.customizedDefaultLiterals,\n        ...value\n      };\n\n      this._literals = {\n        ...thfPageLoginLiteralsDefault[thfLocaleDefault],\n        ...thfPageLoginLiteralsDefault[language],\n        ...this.customizedDefaultLiterals,\n        ...value\n      };\n    } else {\n      this.containsCustomLiterals = false;\n      this._literals = thfPageLoginLiteralsDefault[language];\n    }\n  }\n\n  onLoginSubmit(): void {\n    const loginForm: ThfPageLogin = {\n      login: this.login,\n      password: this.password,\n      rememberUser: this.rememberUser\n    };\n\n    if (this.customField) {\n      loginForm[this.customFieldObject.property] = this.customFieldObject.value;\n    }\n\n    if (this.authenticationUrl) {\n      this.loginSubscription =\n      this.loginService.onLogin(this.authenticationUrl, this.authenticationType, loginForm)\n      .subscribe(data => {\n        this.setValuesToProperties();\n        sessionStorage.setItem('THF_USER_LOGIN', JSON.stringify(data));\n        this.openInternalLink('/');\n      },\n      error => {\n        if (error.error.code === '400' || error.error.code === '401') {\n          this.setValuesToProperties(error);\n          this.redirectBlockedUrl(this.exceededAttemptsWarning, this.blockedUrl);\n        }\n      });\n    } else {\n      this.loginSubmit.emit(loginForm);\n      this.showExceededAttemptsWarning = this.exceededAttemptsWarning > 0;\n    }\n  }\n\n  setLoginHintLiteral(language: string, value: string) {\n    const defaultLoginHintLiteral = thfPageLoginLiteralsDefault[language].loginHint;\n    const prepositionLiteral = thfPageLoginLiteralIn[language];\n    if (value) {\n      this.concatenateLiteral(value, 'loginHint', defaultLoginHintLiteral, prepositionLiteral);\n    } else if (!value) {\n      this.literals = { loginHint: defaultLoginHintLiteral };\n    }\n  }\n\n  setTitleLiteral(language: string, value: string) {\n    const defaultTitleLiteral = thfPageLoginLiteralsDefault[language].title;\n    const prepositionLiteral = thfPageLoginLiteralTo[language];\n    if (value) {\n      this.concatenateLiteral(value, 'title', defaultTitleLiteral, prepositionLiteral);\n    } else if (!value && this.literals.title.includes(defaultTitleLiteral)) {\n        this.literals = { title: defaultTitleLiteral };\n      }\n  }\n\n  private concatenate(defaultLiteral: string, prefixLiteral: string, value: string) {\n    return `${defaultLiteral} ${prefixLiteral} ${value}`;\n  }\n\n  private concatenateLiteral(value: string, literal: string, defaultLiteral: string, prepositionLiteral: string) {\n    if (value && this.literals[literal].includes(defaultLiteral) || this.literals[literal].includes(value)) {\n      this.literals = {\n        [literal]: this.concatenate(defaultLiteral, prepositionLiteral, value)\n      };\n    }\n  }\n\n  private getDefaultCustomFieldObject(property): ThfPageLoginCustomField {\n    return { property };\n  }\n\n  private openExternalLink(url: string) {\n    window.open(url, '_blank');\n  }\n\n  private openInternalLink(url: string) {\n    this.router.navigate([url]);\n  }\n\n  private redirectBlockedUrl(attempts: number, blockedUrl: string) {\n    if (attempts === 0 && blockedUrl) {\n      this.showExceededAttemptsWarning = false;\n      isExternalLink(blockedUrl) ? this.openExternalLink(blockedUrl) : this.openInternalLink(blockedUrl);\n    }\n  }\n\n  private setValuesToProperties(result?) {\n    if (result) {\n      this.exceededAttemptsWarning = result.error.maxAttemptsRemaining;\n      this.loginErrors = result.error.loginWarnings;\n      this.passwordErrors = result.error.passwordWarnings;\n      this.blockedUrl = result.error.blockedUrl;\n    } else {\n      this.exceededAttemptsWarning = 0;\n      this.loginErrors = [];\n      this.passwordErrors = [];\n      this.blockedUrl = '';\n    }\n  }\n\n  protected abstract setLoginErrors(value: Array<string>): void;\n\n  protected abstract setPasswordErrors(value: Array<string>): void;\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { ThfPageLogin } from './interfaces/thf-page-login.interface';\nimport { ThfPageLoginAuthenticationType } from './enums/thf-page-login-authentication-type.enum';\n\n@Injectable()\nexport class ThfPageLoginService {\n\n  constructor(private http: HttpClient) { }\n\n  onLogin(url: string, type: ThfPageLoginAuthenticationType, loginForm: ThfPageLogin): Observable<Object> {\n\n    if (type === ThfPageLoginAuthenticationType.Bearer) {\n      loginForm.password = btoa(loginForm.password);\n      return this.http.post(url, loginForm);\n    } else {\n      const user = `(${loginForm.login}:${loginForm.password})`;\n      const headers = new HttpHeaders({\n        'Authorization': `${type} ` + btoa(user)\n      });\n      delete loginForm.login;\n      delete loginForm.password;\n      return this.http.post(url, loginForm, { headers });\n    }\n\n  }\n\n}\n","import { AbstractControl, NgForm } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AfterViewChecked, ChangeDetectorRef, Component, ComponentRef, IterableDiffers, OnInit, ViewChild, ViewContainerRef\n} from '@angular/core';\n\nimport { isExternalLink } from '../../utils/util';\nimport { ThfComponentInjectorService } from '@totvs/thf-ui';\n\nimport { ThfModalPasswordRecoveryComponent } from '../thf-modal-password-recovery/thf-modal-password-recovery.component';\nimport { ThfModalPasswordRecoveryType } from '../thf-modal-password-recovery/enums/thf-modal-password-recovery-type.enum';\nimport { ThfPageLoginBaseComponent } from './thf-page-login-base.component';\nimport { ThfPageLoginRecovery } from './interfaces/thf-page-login-recovery.interface';\nimport { ThfPageLoginService } from './thf-page-login.service';\n\n/**\n * @docsExtends ThfPageLoginBaseComponent\n *\n * @example\n *\n * <example name=\"thf-page-login-basic\" title=\"Totvs Page Login Basic\">\n *  <file name=\"sample-thf-page-login-basic/sample-thf-page-login-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-login-basic/sample-thf-page-login-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-login-labs\" title=\"Totvs Page Login Labs\">\n *  <file name=\"sample-thf-page-login-labs/sample-thf-page-login-labs.component.html\"> </file>\n *  <file name=\"sample-thf-page-login-labs/sample-thf-page-login-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-login-human-resources\" title=\"Totvs Page Login - Human Resources\">\n *  <file name=\"sample-thf-page-login-human-resources/sample-thf-page-login-human-resources.component.html\"> </file>\n *  <file name=\"sample-thf-page-login-human-resources/sample-thf-page-login-human-resources.component.ts\"> </file>\n *  <file name=\"sample-thf-page-login-human-resources/sample-thf-page-login-human-resources.module.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-login-automatic-service\" title=\"Totvs Page Login - Automatic Service\">\n *  <file name=\"sample-thf-page-login-automatic-service/sample-thf-page-login-automatic-service.component.html\"> </file>\n *  <file name=\"sample-thf-page-login-automatic-service/sample-thf-page-login-automatic-service.component.ts\"> </file>\n * </example>\n */\n\n@Component({\n  selector: 'thf-page-login',\n  templateUrl: './thf-page-login.component.html'\n})\n\nexport class ThfPageLoginComponent extends ThfPageLoginBaseComponent implements AfterViewChecked, OnInit {\n\n  private componentRef: ComponentRef<any> = null;\n  private differ: any;\n  private readonly customPasswordError = { custom : false };\n\n  @ViewChild('loginForm', { read: NgForm, static: true }) loginForm: NgForm;\n  @ViewChild('pageLogin', { read: ViewContainerRef, static: true }) pageLogin: ViewContainerRef;\n\n  constructor(\n    public changeDetector: ChangeDetectorRef,\n    private activatedRoute: ActivatedRoute,\n    private thfComponentInjector: ThfComponentInjectorService,\n    differs: IterableDiffers,\n    loginService: ThfPageLoginService,\n    router: Router,\n    ) {\n    super(loginService, router);\n    this.differ = differs.find([]).create(null);\n  }\n\n  ngAfterViewChecked() {\n    if (this.differ) {\n      this.validateArrayChanges(this.differ, [\n        { array: this.loginErrors, callback: this.generateLoginError.bind(this) },\n        { array: this.passwordErrors, callback: this.generatePasswordError.bind(this) }\n      ]);\n    }\n  }\n\n  ngOnInit() {\n    this.checkingForRouteMetadata(this.activatedRoute.snapshot.data);\n  }\n\n  changeLoginModel() {\n    if (this.authenticationUrl) {\n      this.loginErrors = [];\n    } else {\n      this.setLoginErrors(this.loginErrors);\n      this.loginChange.emit(this.login);\n    }\n  }\n\n  changePasswordModel() {\n    if (this.authenticationUrl) {\n      this.passwordErrors = [];\n    } else {\n      this.setPasswordErrors(this.passwordErrors);\n      this.passwordChange.emit(this.password);\n    }\n  }\n\n  private checkingForMetadataProperty(object, property) {\n    if (Object.prototype.hasOwnProperty.call(object, property)) {\n      return object[property];\n    }\n  }\n\n  private checkingForRouteMetadata(data) {\n    if (Object.keys(data).length !== 0) {\n      this.authenticationUrl = this.checkingForMetadataProperty(data, 'serviceApi') || this.authenticationUrl;\n      this.authenticationType = this.checkingForMetadataProperty(data, 'authenticationType') || this.authenticationType;\n      this.environment = this.checkingForMetadataProperty(data, 'environment') || this.environment;\n      this.recovery = this.checkingForMetadataProperty(data, 'recovery') || this.recovery;\n      this.registerUrl = this.checkingForMetadataProperty(data, 'registerUrl') || this.registerUrl;\n    }\n  }\n\n  private createModalPasswordRecoveryComponent(thfPageLoginRecovery: ThfPageLoginRecovery) {\n    if (this.componentRef) {\n      this.thfComponentInjector.destroyComponentInApplication(this.componentRef);\n    }\n\n    this.componentRef = this.thfComponentInjector.createComponentInApplication(ThfModalPasswordRecoveryComponent);\n    this.componentRef.instance.urlRecovery = thfPageLoginRecovery.url;\n    this.componentRef.instance.contactEmail = thfPageLoginRecovery.contactMail;\n    this.componentRef.instance.phoneMask = thfPageLoginRecovery.phoneMask;\n    this.componentRef.instance.type = thfPageLoginRecovery.type || ThfModalPasswordRecoveryType.Email;\n    this.componentRef.changeDetectorRef.detectChanges();\n    setTimeout(() => {\n      this.componentRef.instance.open();\n    });\n  }\n\n  private generateLoginError() {\n    if (this.loginErrors && this.loginErrors.length) {\n      this.setLoginErrors(this.loginErrors);\n    } else {\n      const control = this.loginForm.form.controls['login'];\n      if (control) {\n        this.resetControl(control);\n      }\n    }\n  }\n\n  private generatePasswordError() {\n    if (this.passwordErrors && this.passwordErrors.length) {\n      this.setPasswordErrors(this.passwordErrors);\n    } else {\n      const control = this.loginForm.form.controls['password'];\n\n      if (control) {\n        this.resetControl(control);\n      }\n    }\n  }\n\n  private resetControl(control: AbstractControl) {\n    control.markAsPristine();\n    control.markAsUntouched();\n    control.updateValueAndValidity();\n  }\n\n  private setControlErrors(allErrors: string, control: AbstractControl, errors: Array<string>, patternError: string) {\n\n    if (control) {\n\n      this[allErrors] = control.hasError('pattern') ? [...errors, ...[patternError]] : [...errors];\n\n      if (errors && errors.length && (control.valid || control.pristine)) {\n        control.markAsTouched();\n        control.markAsDirty();\n        control.setErrors(this.customPasswordError);\n      }\n    }\n\n  }\n\n  private setUrlRedirect(url) {\n    isExternalLink(url) ?  window.open(url, '_blank') : this.router.navigate([url]);\n  }\n\n  private validateArrayChanges(differ: any, array: Array<{ array: Array<any>, callback: any }>) {\n\n    array.forEach(element => {\n      const changes = differ.diff(element.array);\n      if (changes) {\n        element.callback();\n        this.changeDetector.detectChanges();\n      }\n    });\n  }\n\n  protected openUrl(recovery: any): void {\n    switch (typeof recovery) {\n      case 'string': {\n        this.setUrlRedirect(recovery);\n        break;\n      }\n      case 'function': {\n        recovery();\n        break;\n      }\n      case 'object': {\n        this.createModalPasswordRecoveryComponent(recovery);\n        break;\n      }\n    }\n  }\n\n  protected setLoginErrors(errors: Array<string>) {\n    const control = this.loginForm.form.controls['login'];\n    this.setControlErrors('allLoginErrors', control, errors, this.literals.loginErrorPattern);\n  }\n\n  protected setPasswordErrors(errors: Array<string>) {\n    const control = this.loginForm.form.controls['password'];\n    this.setControlErrors('allPasswordErrors', control, errors, this.literals.passwordErrorPattern);\n  }\n\n  onSelectedLanguage(language: string) {\n    this.selectedLanguage = language;\n    this.getLiterals(language, this.containsCustomLiterals ? this.customizedDefaultLiterals : undefined);\n    this.setTitleLiteral(language, this.productName);\n    this.setLoginHintLiteral(language, this.contactEmail);\n  }\n\n}\n","import { ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { browserLanguage, isExternalLink, isTypeof, thfLocaleDefault } from '../../../utils/util';\n\nimport { thfPageLoginLiteralsDefault } from './../thf-page-login-base.component';\nimport { ThfPageLoginRecovery } from '../interfaces/thf-page-login-recovery.interface';\n\n@Component({\n  selector: 'thf-page-login-popover',\n  templateUrl: './thf-page-login-popover.component.html'\n})\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente para definiÃ§Ã£o da mensagem de aviso de bloqueio do `thf-page-login`.\n */\nexport class ThfPageLoginPopoverComponent implements OnInit {\n\n  literals;\n  literalParams;\n  recoveryType: string;\n\n  private _recovery: string | Function | ThfPageLoginRecovery;\n  private _remainingAttempts: number;\n  private _selectedLanguage: string;\n\n  /** exibe o link de 'esqueci minha senha' e verifica se o valor Ã© um link interno ou externo */\n  @Input('t-recovery') set recovery(value: string | Function | ThfPageLoginRecovery) {\n    this._recovery = value;\n\n    if (isTypeof(value, 'string')) {\n      this.recoveryType = isExternalLink(value) ? 'externalLink' : 'internalLink';\n    }\n  }\n\n  get recovery() {\n    return this._recovery;\n  }\n\n  /** define se a mensagem deverÃ¡ ser exibida caso seja maior que 0(zero) */\n  @Input('t-remaining-attempts') set remainingAttempts(value: number) {\n    this._remainingAttempts = value;\n    this.getLiterals(this.selectedLanguage);\n  }\n\n  get remainingAttempts() {\n    return this._remainingAttempts;\n  }\n\n  /** define o idioma da mensagem conforme selecionado no 'thf-page-login' */\n  @Input('t-selected-language') set selectedLanguage(value: string) {\n    this._selectedLanguage = value;\n    this.getLiterals(value);\n  }\n\n  get selectedLanguage() {\n    return this._selectedLanguage;\n  }\n\n  /** se 't-recovery' for do tipo Function ou ThfPageLoginRecovery, emite para o mÃ©todo 'openUrl' do componente 'thf-page-login' */\n  @Output('t-forgot-password') forgotPassword = new EventEmitter<any>();\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this.getLiterals(this.selectedLanguage);\n  }\n\n  onForgotPasswordClick(recovery) {\n    this.forgotPassword.emit(recovery);\n  }\n\n  private getLiterals(language?: string) {\n    language = language || browserLanguage();\n\n    this.literalParams = this.remainingAttempts;\n\n    this.literals = {\n      ...thfPageLoginLiteralsDefault[thfLocaleDefault],\n      ...thfPageLoginLiteralsDefault[language],\n    };\n\n    this.changeDetector.detectChanges();\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfModule } from '@totvs/thf-ui';\n\nimport { ThfModalPasswordRecoveryComponent } from '../thf-modal-password-recovery/thf-modal-password-recovery.component';\nimport { ThfPageBackgroundModule } from '../thf-page-background/index';\nimport { ThfPageLoginComponent } from './thf-page-login.component';\nimport { ThfPageLoginPopoverComponent } from './thf-page-login-popover/thf-page-login-popover.component';\nimport { ThfPageLoginService } from './thf-page-login.service';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-login.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    ThfPageBackgroundModule,\n    ThfModule\n  ],\n  declarations: [\n    ThfPageLoginComponent,\n    ThfPageLoginPopoverComponent\n  ],\n  entryComponents: [\n    ThfModalPasswordRecoveryComponent\n  ],\n  exports: [\n    ThfPageLoginComponent\n  ],\n  providers: [ThfPageLoginService]\n})\nexport class ThfPageLoginModule { }\n","import { NgModule } from '@angular/core';\n\nimport { ThfModalPasswordRecoveryModule } from './thf-modal-password-recovery/thf-modal-password-recovery.module';\nimport { ThfPageBackgroundModule } from './thf-page-background/thf-page-background.module';\nimport { ThfPageBlockedUserModule } from './thf-page-blocked-user/thf-page-blocked-user.module';\nimport { ThfPageChangePasswordModule } from './thf-page-change-password/thf-page-change-password.module';\nimport { ThfPageDynamicDetailModule } from './thf-page-dynamic-detail/thf-page-dynamic-detail.module';\nimport { ThfPageDynamicEditModule } from './thf-page-dynamic-edit/thf-page-dynamic-edit.module';\nimport { ThfPageDynamicSearchModule } from './thf-page-dynamic-search/thf-page-dynamic-search.module';\nimport { ThfPageDynamicTableModule } from './thf-page-dynamic-table/thf-page-dynamic-table.module';\nimport { ThfPageJobSchedulerModule } from './thf-page-job-scheduler/thf-page-job-scheduler.module';\nimport { ThfPageLoginModule } from './thf-page-login/thf-page-login.module';\n\n@NgModule({\n  imports: [\n    ThfModalPasswordRecoveryModule,\n    ThfPageBackgroundModule,\n    ThfPageBlockedUserModule,\n    ThfPageChangePasswordModule,\n    ThfPageDynamicDetailModule,\n    ThfPageDynamicEditModule,\n    ThfPageDynamicSearchModule,\n    ThfPageDynamicTableModule,\n    ThfPageJobSchedulerModule,\n    ThfPageLoginModule\n  ],\n  exports: [\n    ThfModalPasswordRecoveryModule,\n    ThfPageBackgroundModule,\n    ThfPageBlockedUserModule,\n    ThfPageChangePasswordModule,\n    ThfPageDynamicDetailModule,\n    ThfPageDynamicEditModule,\n    ThfPageDynamicSearchModule,\n    ThfPageDynamicTableModule,\n    ThfPageJobSchedulerModule,\n    ThfPageLoginModule\n  ]\n})\nexport class ThfComponentsModule { }\n","import { NgModule } from '@angular/core';\n\nimport { ThfComponentsModule } from './components/components.module';\n\n@NgModule({\n  imports: [\n    ThfComponentsModule\n  ],\n  exports: [\n    ThfComponentsModule\n  ]\n})\nexport class ThfTemplatesModule { }\n"]}