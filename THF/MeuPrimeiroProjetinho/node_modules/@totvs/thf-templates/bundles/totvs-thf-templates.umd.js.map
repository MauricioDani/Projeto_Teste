{"version":3,"file":"totvs-thf-templates.umd.js","sources":["../../../node_modules/tslib/tslib.es6.js","ng://@totvs/thf-templates/lib/utils/util.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/literals/i18n/thf-modal-password-recovery-literals.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/enums/thf-modal-password-recovery-type.enum.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/thf-modal-password-recovery-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/enums/thf-modal-password-recovery-modal-content.enum.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/thf-modal-password-recovery.service.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/thf-modal-password-recovery.component.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/thf-modal-password-recovery-error-message/thf-modal-password-recovery-error-message.component.ts","ng://@totvs/thf-templates/lib/components/thf-modal-password-recovery/thf-modal-password-recovery.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-background/thf-page-background.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-background/thf-page-background.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-blocked-user/enums/thf-page-blocked-user-reason.enum.ts","ng://@totvs/thf-templates/lib/components/thf-page-blocked-user/thf-page-blocked-user-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-blocked-user/thf-page-blocked-user.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-blocked-user/thf-page-blocked-user-contacts/thf-page-blocked-user-contacts.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-blocked-user/literals/i18n/thf-page-blocked-user-literals.ts","ng://@totvs/thf-templates/lib/components/thf-page-blocked-user/thf-page-blocked-user-reason/thf-page-blocked-user-reason.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-blocked-user/thf-page-blocked-user.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-change-password/thf-page-change-password-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-change-password/literals/i18n/thf-page-change-password-literals.ts","ng://@totvs/thf-templates/lib/components/thf-page-change-password/thf-page-change-password.service.ts","ng://@totvs/thf-templates/lib/components/thf-page-change-password/thf-page-change-password.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-change-password/thf-page-change-password.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-detail/thf-page-dynamic.service.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-detail/thf-page-dynamic-detail.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-detail/thf-page-dynamic-detail.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-edit/thf-page-dynamic.service.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-edit/thf-page-dynamic-edit.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-edit/thf-page-dynamic-edit.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-search/thf-advanced-filter/thf-advanced-filter-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-search/thf-advanced-filter/thf-advanced-filter.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-search/thf-page-dynamic-search-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-search/thf-page-dynamic-search.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-search/thf-page-dynamic-search.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-table/thf-page-dynamic-list-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-table/thf-page-dynamic.service.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-table/thf-page-dynamic-table.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-dynamic-table/thf-page-dynamic-table.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler-internal.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler-literals.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler.service.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler-lookup.service.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler-execution/thf-page-job-scheduler-execution.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler-parameters/thf-page-job-scheduler-parameters.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler-summary/thf-page-job-scheduler-summary.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-job-scheduler/thf-page-job-scheduler.module.ts","ng://@totvs/thf-templates/lib/components/thf-page-login/enums/thf-page-login-authentication-type.enum.ts","ng://@totvs/thf-templates/lib/components/thf-page-login/thf-page-login-base.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-login/thf-page-login.service.ts","ng://@totvs/thf-templates/lib/components/thf-page-login/thf-page-login.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-login/thf-page-login-popover/thf-page-login-popover.component.ts","ng://@totvs/thf-templates/lib/components/thf-page-login/thf-page-login.module.ts","ng://@totvs/thf-templates/lib/components/components.module.ts","ng://@totvs/thf-templates/lib/thf-templates.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Idiomas suportados pelas pÃ¡ginas\nexport const thfLocales = ['pt', 'en', 'es'];\n// Idioma padrÃ£o\nexport const thfLocaleDefault = 'pt';\n\n/**\n * @deprecated\n * Utilize o mÃ©todo `getShortBrowserLanguage`.\n *\n * @description\n * Retorna idioma do browser ou o idioma padrÃ£o.\n */\nexport function browserLanguage() {\n  return getShortBrowserLanguage();\n}\n\n/**\n * Retorna o idioma atual do navegador\n */\nexport function getBrowserLanguage(): string {\n  // navigator.userLanguage is the value for IE10\n  return navigator.language || navigator['userLanguage'];\n}\n\n/**\n * Retorna o idioma do navegador, com somente as duas primeiras letras. Por exemplo: \"pt\" ou \"es\".\n *\n * Caso o valor retornado pelo navegador nÃ£o estiver dentro dos idiomas suportados pelo THF,\n * serÃ¡ retornado a linguagem padrÃ£o (thfLocaleDefault).\n */\nexport function getShortBrowserLanguage(): string {\n  const language = (getBrowserLanguage() || thfLocaleDefault).toLowerCase().substring(0, 2);\n\n  if (!thfLocales.includes(language)) {\n    return thfLocaleDefault;\n  }\n\n  return language;\n}\n\nexport function convertToBoolean(val: any): boolean {\n  if (typeof val === 'string') {\n    val = val.toLowerCase().trim();\n    return (val === 'true' || val === 'on' || val === '');\n  }\n\n  if (typeof val === 'number') {\n    return val === 1;\n  }\n\n  return !!val;\n}\n\nexport function convertToInt(value: any, valueDefault?: any): number {\n  const validNumber = parseInt(value, 10);\n  const validDefaultValue = parseInt(valueDefault, 10);\n  const defaultValue = validDefaultValue || validDefaultValue === 0 ? validDefaultValue : undefined;\n\n  return validNumber || validNumber === 0 ? validNumber : defaultValue;\n}\n\nexport function isTypeof(object: any, type: any) {\n  return typeof object === type;\n}\n\n/**\n *\n * @param fn FunÃ§Ã£o que serÃ¡ executada dentro do contexto. Podendo ser o nome da funÃ§Ã£o\n * ou a referÃªncia da mesma.\n *\n * @param context Contexto do qual a funÃ§Ã£o serÃ¡ executada.\n */\nexport function callFunction(fn: any, context: any, param?): void {\n  if (isTypeof(fn, 'function')) {\n    fn.call(context, param);\n  } else {\n    context[fn](param);\n  }\n}\n\nexport function convertIsoToDate(value: string , start: boolean, end: boolean) {\n  if (value) {\n    const day = parseInt(value.substring(8, 10), 10);\n    const month = parseInt(value.substring(5, 7), 10);\n    const year = parseInt(value.substring(0, 4), 10);\n    if (start) {\n      const date = new Date(year, month - 1, day, 0, 0, 0);\n\n      setYearFrom0To100(date, year);\n\n      return date;\n    } else if (end) {\n      const date = new Date(year, month - 1, day, 23, 59, 59);\n\n      setYearFrom0To100(date, year);\n\n      return date;\n    } else {\n      const milliseconds = Date.parse(value);\n      const timezone = new Date().getTimezoneOffset() * 60000;\n      return new Date(milliseconds + timezone);\n    }\n  }\n}\n\nexport function convertDateToISOExtended(date: Date, time?: string) {\n  if (date) {\n\n    const getMonth = date.getMonth() + 1;\n    const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();\n    const month = getMonth < 10 ? '0' + getMonth : getMonth;\n    const year = formatYear(date.getFullYear());\n\n    const dateString = date.toString();\n\n    if (time) {\n      return year + '-' + month + '-' + day + time;\n    } else {\n      return year + '-' + month + '-' + day + 'T' + dateString.substring(16, 24) +\n          dateString.substring(28, 31) + ':' + dateString.substring(31, 33);\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.\n * @param year Ano\n */\nexport function formatYear(year: number) {\n\n  if (year >= 1000) {\n    return year.toString();\n  }\n\n  if (year > 99 && year < 1000) {\n    return `0${year}`;\n  }\n\n  if (year > 9 && year < 100) {\n    return `00${year}`;\n  }\n\n  if (year >= 0 && year < 10) {\n    return `000${year}`;\n  }\n\n}\n\nexport function isEquals(value, comparedValue) {\n  return JSON.stringify(value) === JSON.stringify(comparedValue);\n}\n\n/**\n * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.\n * @param date Data\n * @param year Ano original\n */\nexport function setYearFrom0To100(date: Date, year: number) {\n  if (year >= 0 && year < 100 ) {\n    date.setFullYear(year);\n  }\n}\n\nexport function sortOptionsByProperty(options: Array<any>, property: string) {\n  options.sort((optionA, optionB) => {\n    optionA = optionA[property].toString().toLowerCase();\n    optionB = optionB[property].toString().toLowerCase();\n\n    if (optionA < optionB) {\n      return -1;\n    }\n    if (optionA > optionB) {\n      return 1;\n    }\n    return 0;\n  });\n}\n\nexport function removeDuplicatedOptions(list: Array<any>) {\n  for (let i = 0; i < list.length; i++) {\n    if (i === 0) { continue; }\n\n    if (list.findIndex(op => op.value === list[i].value) !== i) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n}\n\nexport function removeUndefinedAndNullOptions(list: Array<any>) {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i].value === undefined || list[i].value === null ) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n}\n\nexport function validValue(value: any) {\n  return (value !== null && value !== undefined && value !== '') || value === false;\n}\n\nexport function isExternalLink(url): boolean {\n  return url ? url.startsWith('http') : false;\n}\n\nexport function openExternalLink(url): void {\n  window.open(url, '_blank');\n}\n\nexport function  getFormattedLink(link: string): string {\n  let formattedLink = '';\n  // Retira todos os pontos no comeÃ§o da URL.\n  if (link) {\n    formattedLink = link.replace(/^(\\.)+/g, '');\n  }\n  // Verifica se foi utilizado uma rota que nÃ£o comece com barra.\n  if (!formattedLink.startsWith('/')) {\n    formattedLink = '/'.concat(formattedLink);\n  }\n  return formattedLink;\n}\n\n/**\n * MÃ©todo responsÃ¡vel por ordenar dois valores.\n *\n * @param leftSide Primeiro valor a ser comparado.\n * @param rightSide Segundo valor a ser comparado.\n * @param ascending Determina se serÃ¡ em ordem ascendente ou descendente.\n */\nexport function sortValues(leftSide: string, rightSide: string, ascending: boolean = true): number {\n  if (ascending) {\n    if (leftSide < rightSide) {\n      return -1;\n    } else if (leftSide > rightSide) {\n      return 1;\n    }\n  } else if (ascending === false) {\n    if (leftSide < rightSide) {\n      return 1;\n    } else if (leftSide > rightSide) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nexport function validateDateRange(date: Date, dateStart: Date, dateEnd: Date) {\n  if (dateStart && dateEnd) {\n    return (date >= dateStart && date <= dateEnd);\n  } else if (dateStart && !dateEnd) {\n    return (date >= dateStart);\n  } else if (!dateStart && dateEnd) {\n    return (date <= dateEnd);\n  } else {\n    return true;\n  }\n}\n\nexport function capitalizeFirstLetter(text: string): string {\n  return `${text.charAt(0).toUpperCase()}${text.slice(1)}`;\n}\n\n/**\n * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de\n * origem.\n *\n * Exemplo:\n *\n * ```\n * const people = [\n *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'SÃ£o Paulo', dependents: 2 },\n *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },\n *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }\n * ];\n *\n * const properties = ['id', 'name'];\n *\n * const idAndName = mapArrayByProperties(people, properties);\n *\n * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]\n * ```\n *\n * Um outro uso para o mÃ©todo Ã© \"parear\" todos os objetos do array com as mesmas propriedades.\n *\n * ```\n * const customers = [\n *  { id: 1, name: 'Fulano', city: 'SÃ£o Paulo', dependents: 2 }, // sem genre\n *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents\n *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }\n * ];\n * const properties = ['id', 'name', 'city', 'genre', 'dependents'];\n *\n * const pattern = mapArrayByProperties(customers, properties);\n * console.log(pattern);\n *\n * // [\n * //   { id: 1, name: 'Fulano', city: 'SÃ£o Paulo', genre: undefined, dependents: 2 },\n * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },\n * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }\n * // ]\n * ```\n *\n * @param items {Array<any>} Array de items original.\n * @param properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.\n *\n * @returns Array<any>\n */\nexport function mapArrayByProperties(items: Array<any> = [], properties: Array<string> = []): Array<any> {\n  return items.map(item => mapObjectByProperties(item, properties));\n}\n\n/**\n * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.\n *\n * Exemplo:\n *\n * ```\n * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'SÃ£o Paulo', dependents: 2 };\n *\n * const properties = ['id', 'name'];\n *\n * const idAndName = mapObjectByProperties(person, properties);\n *\n * console.log(idAndName); // { id: 1, name: 'Fulano' }\n * ```\n *\n * @param object {Array<any>} Array de items original.\n * @param properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.\n *\n * @returns Array<any>\n */\nexport function mapObjectByProperties(object: any = {}, properties: Array<string> = []) {\n  const getSelectedProperties = (selectedProperties, property) => ({ ...selectedProperties, [property]: object[property] });\n\n  return properties.reduce(getSelectedProperties, {});\n}\n\n/**\n * Retorna os valores de um objeto dentro de um array.\n *\n * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versÃ£o typescrit for atualizada.\n *\n * @param object Objeto de onde serÃ¡ pego os valores.\n */\nexport function valuesFromObject(object: any = {}): Array<any> {\n  return Object.keys(object).map(property => object[property]);\n}\n\n/**\n * adiciona 0 no tempo informado, caso menor q 10\n *\n * @param time\n */\nexport function addZero(time: number) {\n  if (!time) {\n    return '00';\n  }\n\n  if (time < 10) {\n    return `0${time}`;\n  }\n\n  return time;\n}\n","export const thfModalPasswordRecoveryLiterals = {\n  en: <any> {\n    cancelButton: 'Cancel',\n    closeButton: 'Close',\n    continueButton: 'Continue',\n    email: 'e-mail',\n    emailErrorMessagePhrase: 'Invalid e-mail format',\n    emailSentConfirmationPhrase: `We have sent the instructions and new password creation link to your e-mail.\n    If you did not receive it after a few minutes, check your spam box or click Resend.`,\n    emailSentTitle: 'E-mail sent',\n    forgotPasswordTitle: 'Forgot your password?',\n    insertCode: 'Type the code',\n    insertEmail: 'Enter your e-mail',\n    insertPhone: 'Enter your mobile number',\n    phoneErrorMessagePhrase: 'Invalid phone number',\n    prepositionIn: 'in',\n    prepositionOr: 'or',\n    recoveryPasswordPhrase: 'To recover your password we will send you a {0} with instructions.',\n    resendEmailButton: 'Resend',\n    resendSmsCodePhrase: 'If the code does not arrive within a few minutes, please send it again.',\n    sendAgainPhrase: 'If the code does not arrive within a few minutes',\n    sendAgain: 'send again.',\n    sendButton: 'Submit',\n    sentSmsCodePhrase: 'We sent a code for your mobile phone.',\n    sms: 'SMS',\n    smsCodeErrorMessagePhrase: 'Invalid code. Please re-enter or contact support',\n    supportContact: 'If you do not have access to {0} contact support',\n    telephone: 'telephone',\n    typeCodeTitle: 'Enter sent code'\n  },\n  es: <any> {\n    cancelButton: 'Cancelar',\n    closeButton: 'Cerrar',\n    continueButton: 'Continuar',\n    email: 'e-mail',\n    emailErrorMessagePhrase: 'Formato de correo electrÃ³nico no vÃ¡lido',\n    emailSentConfirmationPhrase: `Enviamos las instrucciones y enlace de creaciÃ³n de nueva contraseÃ±a para su correo electrÃ³nico.\n    Si no ha recibido despuÃ©s de unos minutos, compruebe su caja de spam o haga clic en Reenviar`,\n    emailSentTitle: 'E-mail enviado',\n    forgotPasswordTitle: 'Olvidaste tu contraseÃ±a?',\n    insertCode: 'Introduzca el cÃ³digo',\n    insertEmail: 'Introduce tu e-mail',\n    insertPhone: 'Introduce tu nÃºmero de celular',\n    phoneErrorMessagePhrase: 'NÃºmero de telÃ©fono no vÃ¡lido',\n    prepositionIn: 'en',\n    prepositionOr: 'u',\n    recoveryPasswordPhrase: 'Para recuperar su contraseÃ±a vamos a enviar un {0} con instrucciones.',\n    resendEmailButton: 'Reenviar',\n    resendSmsCodePhrase: 'Si el cÃ³digo no llega dentro de unos minutos, vuelva a enviar.',\n    sendAgain: 'envÃ­e de nuevo.',\n    sendAgainPhrase: 'Si el cÃ³digo no llega dentro de unos minutos',\n    sendButton: 'Enviar',\n    sentSmsCodePhrase: 'Enviamos un cÃ³digo para su celular.',\n    sms: 'SMS',\n    smsCodeErrorMessagePhrase: 'CÃ³digo no vÃ¡lido. Escriba de nuevo o pÃ³ngase en contacto con el soporte',\n    supportContact: 'Si no tiene acceso a {0} pÃ³ngase en contacto con el soporte',\n    telephone: 'telÃ©fono',\n    typeCodeTitle: 'Escribir cÃ³digo enviado'\n  },\n  pt: <any> {\n    cancelButton: 'Cancelar',\n    closeButton: 'Fechar',\n    continueButton: 'Continuar',\n    email: 'e-mail',\n    emailErrorMessagePhrase: 'Formato de e-mail invÃ¡lido',\n    emailSentConfirmationPhrase: `Enviamos as instruÃ§Ãµes e link de criaÃ§Ã£o de nova senha para o seu e-mail.\n    Caso nÃ£o tenha recebido apÃ³s alguns minutos, verifique sua caixa de spam ou clique em Reenviar.`,\n    emailSentTitle: 'E-mail enviado',\n    forgotPasswordTitle: 'Esqueceu sua senha?',\n    insertCode: 'Digite o cÃ³digo',\n    insertEmail: 'Insira seu e-mail',\n    insertPhone: 'Insira seu nÃºmero de celular',\n    phoneErrorMessagePhrase: 'NÃºmero de telefone invÃ¡lido',\n    prepositionIn: 'em',\n    prepositionOr: 'ou',\n    recoveryPasswordPhrase: 'Para recuperar sua senha vamos enviar um {0} com instruÃ§Ãµes.',\n    resendEmailButton: 'Reenviar',\n    resendSmsCodePhrase: 'Se o cÃ³digo nÃ£o chegar dentro de alguns minutos envie novamente',\n    sendAgain: 'envie novamente.',\n    sendAgainPhrase: 'Se o cÃ³digo nÃ£o chegar dentro de alguns minutos',\n    sendButton: 'Enviar',\n    sentSmsCodePhrase: 'Enviamos um cÃ³digo para seu celular cadastrado.',\n    sms: 'SMS',\n    smsCodeErrorMessagePhrase: 'CÃ³digo invÃ¡lido. Digite novamente ou contacte o suporte',\n    supportContact: 'Se nÃ£o tiver acesso ao {0} contacte o suporte',\n    telephone: 'telefone',\n    typeCodeTitle: 'Digitar cÃ³digo enviado'\n  }\n};\n","/**\n * @usedBy ThfModalPasswordRecoveryComponent\n *\n * @description\n *\n * *Enum* para especificaÃ§Ã£o do tipo de recuperaÃ§Ã£o de senha.\n */\nexport enum ThfModalPasswordRecoveryType {\n  /** Possibilita ao usuÃ¡rio optar por envio via email ou SMS */\n  All = 'all',\n\n  /** DefiniÃ§Ã£o para recuperaÃ§Ã£o apenas por email */\n  Email = 'email',\n\n  /** DefiniÃ§Ã£o para recuperaÃ§Ã£o apenas por SMS */\n  SMS = 'sms'\n\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { browserLanguage, thfLocaleDefault } from '../../utils/util';\n\nimport { thfModalPasswordRecoveryLiterals } from './literals/i18n/thf-modal-password-recovery-literals';\nimport { ThfModalPasswordRecoveryType } from './enums/thf-modal-password-recovery-type.enum';\n\nconst ThfModalPasswordRecoveryDefaultMaxLength = 15;\nconst ThfModalPasswordRecoveryDefaultMinLength = 15;\nconst ThfModalPasswordRecoveryDefaultPhone = '(99) 99999-9999';\nconst ThfModalPasswordRecoveryTypeDefault: ThfModalPasswordRecoveryType = ThfModalPasswordRecoveryType.Email;\n\n/**\n * @description\n *\n * O componente `thf-modal-password-recovery` Ã© utilizado como template para solicitaÃ§Ã£o de troca de senha.\n *\n * Ã composto por uma modal que possui trÃªs telas, cada uma com as seguintes caracterÃ­sticas:\n *\n * - A primeira possui campos para preenchimento de email ou nÃºmero de telefone;\n * - Tela com campo para preenchimento de cÃ³digo SMS enviado para o nÃºmero de telefone enviado;\n * - A terceira se trata de uma confirmaÃ§Ã£o de envio de link para a caixa de email do usuÃ¡rio.\n *\n *\n * A propriedade `t-url-recovery` automatiza a rotina do componente e simplifica o processo\n * para recuperaÃ§Ã£o de senha, bastando definir uma url para requisiÃ§Ã£o dos recursos.\n * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.\n * Caso julgue necessÃ¡rio, pode-se tambÃ©m definir manualmente a rotina do componente.\n *\n *\n * Para a modal de digitaÃ§Ã£o de cÃ³digo SMS, Ã© possÃ­vel definir uma mensagem de erro\n * customizada com a propriedade `t-code-error` e hÃ¡ um link para\n * reenvio de cÃ³digo por SMS. Ao reenviar, o evento `t-code-submit` envia um objeto com o telefone do usuÃ¡rio e a quantidade\n * de vezes em que o usuÃ¡rio fez a solicitaÃ§Ã£o de reenvio.\n *\n * > Ã indicada a utilizaÃ§Ã£o da tela de digitaÃ§Ã£o para envio de cÃ³digo SMS apenas\n * se a opÃ§Ã£o por envio SMS for disponibilizada para o usuÃ¡rio.\n *\n *\n * A modal de confirmaÃ§Ã£o contÃ©m uma aÃ§Ã£o de reenvio e o evento `t-submit`\n * Ã© quem passa o objeto contendo o email em conjunto com a quantidade de tentativas de reenvio.\n *\n * > A tela de confirmaÃ§Ã£o Ã© indicada para quando o usuÃ¡rio solicitar a troca atravÃ©s do email.\n *\n * > Os textos das modals sÃ£o prÃ©-definidos, imutÃ¡veis e sÃ£o traduzidos de acordo com o idioma do *browser* (pt, en e es)\n *\n * Para que as imagens sejam exibidas corretamente, Ã© necessÃ¡rio incluir o caminho delas ao projeto. Para isso, edite\n * o *assets* no arquivo **angular.json** da aplicaÃ§Ã£o na seguinte ordem:\n * ```\n *   \"assets\": [\n *     \"src/assets\",\n *     \"src/favicon.ico\",\n *     {\n *       \"glob\": \"**\\/*\",\n *       \"input\": \"node_modules/@totvs/thf-theme/images\",\n *       \"output\": \"assets/images\"\n *     }\n *   ]\n * ```\n */\nexport abstract class ThfModalPasswordRecoveryBaseComponent {\n\n  private _contactEmail: string;\n  private _phoneMask = ThfModalPasswordRecoveryDefaultPhone;\n  private _type: ThfModalPasswordRecoveryType = ThfModalPasswordRecoveryTypeDefault;\n\n  email: string;\n  maxLength = ThfModalPasswordRecoveryDefaultMaxLength;\n  minLength = ThfModalPasswordRecoveryDefaultMinLength;\n  modalPasswordRecoveryTypeAll: boolean;\n  phone: string;\n  smsCode: string;\n  smsCodeErrorMessage: string;\n\n  literals: { cancelButton: string, closeButton: string, continueButton: string, email: string, emailErrorMessagePhrase: string,\n    emailSentConfirmationPhrase: string, emailSentTitle: string, forgotPasswordTitle: string,\n    insertCode: string, insertEmail: string, insertPhone: string, phoneErrorMessagePhrase: string,\n    prepositionIn: string, prepositionOr: string, recoveryPasswordPhrase: string, resendEmailButton: string,\n    resendSmsCodePhrase: string, sendAgain: string, sendButton: string, sms: string, smsCode: string,\n    smsCodeErrorMessagePhrase: string, sentSmsCodePhrase: string, supportContact: string, telephone: string, typeCodeTitle: string } =\n    {\n      ...thfModalPasswordRecoveryLiterals[thfLocaleDefault],\n      ...thfModalPasswordRecoveryLiterals[browserLanguage()],\n    };\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * DefiniÃ§Ã£o do e-mail que Ã© exibido na mensagem para contato de suporte.\n   */\n  @Input('t-contact-email') set contactEmail(value: string) {\n    this._contactEmail = value;\n\n    this.smsCodeErrorMessage = this.concatenateSMSErrorMessage(value);\n  }\n\n  get contactEmail() {\n    return this._contactEmail;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * DefiniÃ§Ã£o de mensagem de erro customizada para quando o usuÃ¡rio passar um cÃ³digo SMS invÃ¡lido ou errado.\n   */\n  @Input('t-code-error') codeError: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * DefiniÃ§Ã£o da mascara do campo de telefone.\n   *\n   * @default `(99) 99999-9999`\n   */\n  @Input('t-phone-mask') set phoneMask(value: string) {\n    this._phoneMask = value || ThfModalPasswordRecoveryDefaultPhone;\n    this.minLength = this.maxLength = this._phoneMask.length;\n  }\n\n  get phoneMask() {\n    return this._phoneMask;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define o tipo de recuperaÃ§Ã£o de senha que serÃ¡ exibido.\n   *\n   * @default `ThfModalPasswordRecoveryType.Email`\n   *\n   */\n  @Input('t-type') set type(value: ThfModalPasswordRecoveryType) {\n    this._type = (<any>Object).values(ThfModalPasswordRecoveryType).includes(value) ? value : ThfModalPasswordRecoveryTypeDefault;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Endpoint usado pelo template para requisiÃ§Ã£o do recurso. Quando preenchido,\n   * o mÃ©todos `t-submit` e `t-submit-code` serÃ£o ignorados e o componente adquirirÃ¡ automatizaÃ§Ã£o\n   * para o processo de solicitaÃ§Ã£o de troca de senha.\n   *\n   * ### Processos\n   * Ao digitar um valor vÃ¡lido no campo de email/telefone e pressionar **enviar**,\n   * o componente farÃ¡ uma requisiÃ§Ã£o `POST` na url especificada nesta propriedade passando o objeto contendo o valor definido pelo usuÃ¡rio.\n   *\n   * ```\n   * body {\n   *  email: email,\n   *  retry?: retry\n   * }\n   * ```\n   *\n   *\n   * #### RecuperaÃ§Ã£o por email\n   * Para a recuperaÃ§Ã£o de senha por **email**, o cÃ³digo de resposta HTTP de status esperado Ã© `204`.\n   *\n   * Em caso de **sucesso**, serÃ¡ exibida a modal de confirmaÃ§Ã£o de e-mail para o usuÃ¡rio.\n   *\n   *\n   * > A aÃ§Ã£o **Reenviar** na tela de confirmaÃ§Ã£o efetua uma nova requisiÃ§Ã£o\n   * passando-se o objeto com incremento para o valor da propriedade **retry**.\n   *\n   * *Processo finalizado.*\n   *\n   *\n   * #### RecuperaÃ§Ã£o por SMS\n   * Se a opÃ§Ã£o de recuperaÃ§Ã£o for por **SMS**, o cÃ³digo de status de sucesso deve ser `200`.\n   * Em caso de **sucesso**, abre-se a modal de digitaÃ§Ã£o de cÃ³digo SMS e a resposta\n   * desta requisiÃ§Ã£o deve retornar uma definiÃ§Ã£o de dados abaixo:\n   *\n   * ```\n   * 200:\n   *  {\n   *    hash: hash,\n   *    urlValidationCode?: url\n   *  }\n   * ```\n   *\n   *\n   * - O **hash** serÃ¡ o cÃ³digo de validaÃ§Ã£o da solicitaÃ§Ã£o do SMS para ser enviado juntamente com o cÃ³digo de verificaÃ§Ã£o do SMS;\n   * - **urlValidationCode** Ã© a url usada para validaÃ§Ã£o do cÃ³digo enviado por SMS.\n   *\n   *\n   * > Caso nÃ£o seja passado urlValidationCode, o endpoint usado para validaÃ§Ã£o do cÃ³digo serÃ¡ `<t-url-recovery>/validation`.\n   *\n   *\n   * #### ValidaÃ§Ã£o do cÃ³digo SMS\n   * Ao digitar um valor vÃ¡lido no campo de cÃ³digo SMS e pressionar **continuar**, o componente farÃ¡ uma requisiÃ§Ã£o `POST` contendo:\n   *\n   * ```\n   * POST /<t-url-recovery>/validation OU /<urlValidationCode>\n   * Body {\n   *  hash: hash,\n   *  code: code\n   * }\n   * ```\n   *\n   *\n   * O cÃ³digo de resposta HTTP de status esperado Ã© `200`.\n   *\n   * Em caso de **erro** na validaÃ§Ã£o do cÃ³digo SMS, a modal se mantÃ©m com o campo para digitaÃ§Ã£o\n   * de cÃ³digo SMS\n   *\n   *\n   * > Pode-se atribuir a mensagem de erro (message) para o atributo `t-code-error` conforme retorno abaixo:\n   *\n   * ```\n   * 400\n   *  {\n   *    error {\n   *      message: 'Error Message'\n   *    }\n   *  }\n   * ```\n   *\n   *\n   * Em caso de **sucesso**, espera-se a resposta desta requisiÃ§Ã£o retornando a seguinte definiÃ§Ã£o:\n   *\n   * ```\n   * 200:\n   *  {\n   *    token: token,\n   *    urlChangePassword?: url\n   *  }\n   * ```\n   *\n   *\n   * - **token**: Token de alteraÃ§Ã£o de senha;\n   * - **urlChangePassword**: url para o formulÃ¡rio de alteraÃ§Ã£o de senha.\n   *\n   *\n   * O componente estÃ¡ configurado para redirecionar para a url estabelecida em `urlChangePassword`.\n   *\n   * > Caso nÃ£o seja passado valor para urlChangePassword,\n   * a url usada para validaÃ§Ã£o serÃ¡ a `<t-url-recovery>/changePassword?token=<token>`.\n   *\n   * *Processo finalizado.*\n   */\n  @Input('t-url-recovery') urlRecovery?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * AÃ§Ã£o contendo como parÃ¢metro o cÃ³digo enviado por SMS e digitado pelo usuÃ¡rio.\n   *\n   * > Esta propriedade serÃ¡ ignorada se for definido valor para a propriedade `t-url-recovery`.\n   */\n  @Output('t-code-submit') codeSubmit = new EventEmitter<any>();\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * AÃ§Ã£o contendo o email como parÃ¢metro e que Ã© executada quando o usuÃ¡rio clica sobres os botÃµes de 'enviar' e 'reenviar' e-mail.\n   *\n   * > Esta propriedade serÃ¡ ignorada se for definido valor para a propriedade `t-url-recovery`.\n   */\n  @Output('t-submit') submit = new EventEmitter<any>();\n\n  /**\n   * AcÃ£o para conclusÃ£o de processo e fechamento da modal. Indica-se sua utilizaÃ§Ã£o\n   * para apÃ³s o envio e validaÃ§Ã£o do cÃ³digo SMS enviado pelo usuÃ¡rio.\n   *\n   * > Nas modals em que hÃ¡ a aÃ§Ã£o de 'cancelar' dispensa-se o uso desta aÃ§Ã£o pois o componente jÃ¡ trata o fechamento da modal.\n   */\n  abstract completed(): void;\n\n  /**\n   * Abre a modal de preenchimento de email ou nÃºmero de telefone para solicitaÃ§Ã£o de troca de senha.\n   */\n  abstract open(): void;\n\n  /**\n   * Abre a modal de confirmaÃ§Ã£o de envio de email.\n   */\n  abstract openConfirmation(): void;\n\n  /**\n   * Abre a modal de preenchimento do cÃ³digo SMS enviado ao usuÃ¡rio.\n   */\n  abstract openSmsCode(): void;\n\n  private concatenateSMSErrorMessage(value: string) {\n    const literalCodeErrorMessage = this.literals.smsCodeErrorMessagePhrase;\n\n    return value && value !== '' ? `${literalCodeErrorMessage} ${this.literals.prepositionIn} ${value}.` : literalCodeErrorMessage;\n  }\n\n}\n","/**\n * @docsPrivate\n *\n * @description\n *\n * Enum para definiÃ§Ã£o do tipo de conteÃºdo exibido na modal.\n */\nexport enum ThfModalPasswordRecoveryModalContent {\n\n  /** ExibiÃ§Ã£o de modal contendo campo para preenchimento de email ou nÃºmero de telefone */\n  Email = 'email',\n\n  /** ExibiÃ§Ã£o de modal contendo campo para inserÃ§Ã£o de cÃ³digo enviado por SMS */\n  SMSCode = 'smsCode',\n\n  /** ExibiÃ§Ã£o de modal de confirmaÃ§Ã£o de envio */\n  Confirmation = 'confirmation'\n\n}\n","import { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { ThfModalPasswordRecovery } from './interfaces/thf-modal-password-recovery.interface';\n\n@Injectable()\nexport class ThfModalPasswordRecoveryService {\n\n  constructor(private http: HttpClient) { }\n\n  post(\n    urlRecovery: string,\n    item: ThfModalPasswordRecovery,\n    params?: HttpParams | { [param: string]: string | Array<string>; }\n    ): Observable<HttpResponse<Object>> {\n    return this.http.post<any>(urlRecovery, item, { observe: 'response', params: params });\n  }\n\n}\n","import { Component, OnDestroy, ViewChild } from '@angular/core';\nimport { AbstractControl, NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\nimport { isExternalLink } from '../../utils/util';\nimport { ThfI18nPipe, ThfModalAction, ThfModalComponent, ThfRadioGroupOption } from '@totvs/thf-ui';\n\nimport { ThfModalPasswordRecovery } from './interfaces/thf-modal-password-recovery.interface';\nimport { ThfModalPasswordRecoveryBaseComponent } from './thf-modal-password-recovery-base.component';\nimport { ThfModalPasswordRecoveryModalContent } from './enums/thf-modal-password-recovery-modal-content.enum';\nimport { ThfModalPasswordRecoveryService } from './thf-modal-password-recovery.service';\nimport { ThfModalPasswordRecoveryType } from './enums/thf-modal-password-recovery-type.enum';\n\n/**\n * @docsExtends ThfModalPasswordRecoveryBaseComponent\n *\n * @example\n *\n * <example name=\"thf-modal-password-recovery-basic\" title=\"Totvs Modal Password Recovery Basic\">\n *  <file name=\"sample-thf-modal-password-recovery-basic/sample-thf-modal-password-recovery-basic.component.html\"> </file>\n *  <file name=\"sample-thf-modal-password-recovery-basic/sample-thf-modal-password-recovery-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-modal-password-recovery-labs\" title=\"Totvs Modal Password Recovery Labs\">\n *  <file name=\"sample-thf-modal-password-recovery-labs/sample-thf-modal-password-recovery-labs.component.html\"> </file>\n *  <file name=\"sample-thf-modal-password-recovery-labs/sample-thf-modal-password-recovery-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-modal-password-recovery-request\" title=\"Totvs Modal Password Recovery Request\">\n *  <file name=\"sample-thf-modal-password-recovery-request/sample-thf-modal-password-recovery-request.component.html\"> </file>\n *  <file name=\"sample-thf-modal-password-recovery-request/sample-thf-modal-password-recovery-request.component.ts\"> </file>\n * </example>\n */\n\n@Component({\n  selector: 'thf-modal-password-recovery',\n  templateUrl: './thf-modal-password-recovery.component.html'\n})\n\nexport class ThfModalPasswordRecoveryComponent extends ThfModalPasswordRecoveryBaseComponent implements OnDestroy {\n\n  chosenTypeFormOption: string = ThfModalPasswordRecoveryType.Email;\n  codeMask: string = '9 9 9 9 9 9';\n  control: AbstractControl;\n  emailModal: boolean = true;\n  emailModalPhrases = {};\n  endpoint: string = '.';\n  invalidCode: boolean = false;\n  invalidEmail: boolean = false;\n  modalTitle: string;\n  modalType: ThfModalPasswordRecoveryModalContent = ThfModalPasswordRecoveryModalContent.Email;\n  showCustomCodeError: boolean;\n  smsCodeErrorMessagePhrase: string;\n  submittedCodeValue = {} as ThfModalPasswordRecovery;\n  submittedContactValue = {} as ThfModalPasswordRecovery;\n\n  private passwordRecoverySubscription: Subscription;\n  private smsBodyResponse;\n  private smsCodeSubscription: Subscription;\n\n  @ViewChild('emailForm', { static: false }) emailForm: NgForm;\n\n  @ViewChild('recoveryModal', { static: true }) recoveryModalElement: ThfModalComponent;\n\n  @ViewChild('smsCodeForm', { static: false }) smsCodeForm: NgForm;\n\n  primaryAction: ThfModalAction = { label: undefined, action: () => { } };\n\n  secondaryAction: ThfModalAction = { label: undefined, action: () => { } };\n\n  typeFormOptions: Array<ThfRadioGroupOption> = [\n    { label: 'e-mail', value: ThfModalPasswordRecoveryType.Email },\n    { label: 'SMS', value: ThfModalPasswordRecoveryType.SMS }\n  ];\n\n  constructor(\n    private router: Router,\n    private thfI18nPipe: ThfI18nPipe,\n    private thfModalPasswordRecoveryService: ThfModalPasswordRecoveryService\n    ) {\n    super();\n  }\n\n  ngOnDestroy() {\n    if (this.passwordRecoverySubscription) {\n      this.passwordRecoverySubscription.unsubscribe();\n    }\n\n    if (this.smsCodeSubscription) {\n      this.smsCodeSubscription.unsubscribe();\n    }\n  }\n\n  completed() {\n    this.cancelAction();\n  }\n\n  formModelChangesCheck(form: NgForm) {\n    const invalidForm = form.invalid;\n    this.invalidEmail = invalidForm && form.dirty;\n    this.primaryAction.disabled = invalidForm;\n\n    if (this.modalType === ThfModalPasswordRecoveryModalContent.SMSCode) {\n      const codeError: boolean = this.codeError !== undefined && this.codeError !== '';\n      this.showCustomCodeError = codeError && form.pristine;\n    }\n  }\n\n  getInputType(type) {\n    this.type = type;\n    this.pipeModalPhrases();\n    setTimeout(() => {\n      this.control = this.emailForm.controls[type];\n      this.formModelChangesCheck(this.emailForm);\n      this.resetFormFields(this.control);\n    });\n  }\n\n  open() {\n    const control = this.checkFormType(this.type);\n    this.control = this.emailForm.controls[control];\n    this.setEmailModalPhrasesAndActions();\n    this.formModelChangesCheck(this.emailForm);\n    this.recoveryModalElement.open();\n  }\n\n  openConfirmation() {\n    this.modalTitle = this.literals.emailSentTitle;\n    this.modalType = ThfModalPasswordRecoveryModalContent.Confirmation;\n    this.setActions(this.cancelAction, this.literals.closeButton, this.submitAction, this.literals.resendEmailButton, false);\n  }\n\n  openSmsCode() {\n    this.modalTitle = this.literals.typeCodeTitle;\n    this.modalType = ThfModalPasswordRecoveryModalContent.SMSCode;\n    this.setActions(this.submitSmsCodeAction, this.literals.continueButton, this.cancelAction, this.literals.cancelButton, true);\n\n    setTimeout(() => {\n      this.control = this.smsCodeForm.controls['sms'];\n      this.formModelChangesCheck(this.smsCodeForm);\n    });\n  }\n\n  resendSmsCode() {\n    this.incrementRetryAttempts();\n    if (this.urlRecovery) {\n      this.submitActionRequest(this.submittedContactValue, this.type);\n    } else {\n      this.submit.emit(this.submittedContactValue);\n    }\n  }\n\n  private assignSmsResponse(responseObj) {\n    this.smsBodyResponse = Object.assign({}, {hash: responseObj.hash});\n    if (responseObj.urlValidationCode) {\n      this.smsBodyResponse = Object.assign(this.smsBodyResponse, {urlValidationCode: responseObj.urlValidationCode});\n    }\n  }\n\n  private cancelAction() {\n    this.resetFormFields(this.control);\n    this.submittedContactValue = {};\n\n    this.chosenTypeFormOption = ThfModalPasswordRecoveryType.Email;\n    this.modalType = ThfModalPasswordRecoveryModalContent.Email;\n    this.type = this.modalPasswordRecoveryTypeAll ? ThfModalPasswordRecoveryType.All : this.type;\n    this.recoveryModalElement.close();\n  }\n\n  private checkFormType(type: ThfModalPasswordRecoveryType) {\n    return type !== ThfModalPasswordRecoveryType.All ? type : ThfModalPasswordRecoveryType.Email;\n  }\n\n  private formReset(control: AbstractControl) {\n    control.markAsPristine();\n    control.markAsUntouched();\n    control.updateValueAndValidity();\n  }\n\n  private getEmitValue(type: ThfModalPasswordRecoveryType) {\n    return type === ThfModalPasswordRecoveryType.SMS ? this.phone : this.email;\n  }\n\n  private incrementRetryAttempts() {\n    this.submittedContactValue.retry = (this.submittedContactValue.retry + 1 || 1);\n  }\n\n  private openExternalLink(url, queryParam) {\n    window.open(`${url}?token=${queryParam}`, '_self');\n  }\n\n  private openInternalLink(url, endpoint, queryParam) {\n    this.router.navigate([`${url}/${endpoint}`], { queryParams: { token: queryParam } });\n  }\n\n  private pipeModalPhrases() {\n    if (this.type === ThfModalPasswordRecoveryType.SMS) {\n      this.emailModalPhrases['firstPhrase'] = this.setPipeArguments(this.literals.recoveryPasswordPhrase, this.literals.sms);\n      this.emailModalPhrases['secondPhrase'] = this.setPipeArguments(this.literals.supportContact, this.literals.telephone);\n    } else {\n      this.emailModalPhrases['firstPhrase'] = this.setPipeArguments(this.literals.recoveryPasswordPhrase, this.literals.email);\n      this.emailModalPhrases['secondPhrase'] = this.setPipeArguments(this.literals.supportContact, this.literals.email);\n    }\n  }\n\n  private redirectToChangePassword(recoveryToken: ThfModalPasswordRecovery) {\n    const urlChangePassword = recoveryToken.urlChangePassword;\n    if (urlChangePassword) {\n      isExternalLink(urlChangePassword) ?\n      this.openExternalLink(urlChangePassword, recoveryToken.token) :\n      this.openInternalLink(this.urlRecovery, urlChangePassword, recoveryToken.token);\n    } else {\n      const changePasswordEndpoint = 'changePassword';\n      this.openInternalLink(this.urlRecovery, changePasswordEndpoint, recoveryToken.token);\n    }\n  }\n\n  private resetFormFields(control) {\n    this.formReset(control);\n    this.email = undefined;\n    this.phone = undefined;\n    this.smsCode = undefined;\n  }\n\n  private setActions(primaryAction, primarylabel, secondaryAction, secondaryLabel, disabled) {\n    this.primaryAction.action = () => primaryAction.call(this);\n    this.primaryAction.label = primarylabel;\n    this.secondaryAction.action = () => secondaryAction.call(this);\n    this.secondaryAction.label = secondaryLabel;\n    this.primaryAction.disabled = disabled;\n  }\n\n  private setEmailModalPhrasesAndActions() {\n    this.modalTitle = this.literals.forgotPasswordTitle;\n    this.pipeModalPhrases();\n    this.modalPasswordRecoveryTypeAll = this.type === ThfModalPasswordRecoveryType.All;\n    this.setActions(this.submitAction, this.literals.sendButton, this.cancelAction, this.literals.cancelButton, true);\n  }\n\n  private setRequestEndpoint(urlValidationCode?: string) {\n    const endpoint = urlValidationCode || 'validation';\n\n    return `${this.urlRecovery}/${endpoint}`;\n  }\n\n  private setPipeArguments(literalAttr: string, arg: string) {\n    return this.thfI18nPipe.transform(literalAttr, arg);\n  }\n\n  private submitAction() {\n    this.modalType === ThfModalPasswordRecoveryModalContent.Confirmation ? this.incrementRetryAttempts() : this.formReset(this.control);\n    this.submittedContactValue[this.checkFormType(this.type)] = this.getEmitValue(this.type);\n    if (this.urlRecovery) {\n      this.submitActionRequest(this.submittedContactValue, this.type);\n    } else {\n      this.submit.emit(this.submittedContactValue);\n    }\n  }\n\n  private submitActionRequest(data: ThfModalPasswordRecovery, modalType: ThfModalPasswordRecoveryType) {\n    const params = modalType === ThfModalPasswordRecoveryType.SMS ? { type: 'sms' } : undefined;\n\n    this.passwordRecoverySubscription =\n    this.thfModalPasswordRecoveryService.post(this.urlRecovery, data, params)\n    .subscribe(response => {\n      if ((modalType === ThfModalPasswordRecoveryType.Email || modalType === ThfModalPasswordRecoveryType.All) && response.status === 204) {\n        this.openConfirmation();\n      } else if (modalType === ThfModalPasswordRecoveryType.SMS && response.status === 200) {\n        this.assignSmsResponse(response.body);\n        this.openSmsCode();\n      }\n    });\n  }\n\n  private submitSmsCodeAction() {\n    this.submittedCodeValue.code = this.smsCode;\n\n    if (this.urlRecovery) {\n      this.submittedCodeValue = Object.assign(this.submittedCodeValue, {hash: this.smsBodyResponse.hash});\n      this.submitSmsCodeRequest(this.submittedCodeValue);\n\n    } else {\n      this.codeSubmit.emit(this.submittedCodeValue);\n    }\n    this.resetFormFields(this.control);\n  }\n\n  private submitSmsCodeRequest(data: ThfModalPasswordRecovery) {\n    this.smsCodeSubscription = this.thfModalPasswordRecoveryService\n    .post(this.setRequestEndpoint(this.smsBodyResponse.urlValidationCode), data)\n    .subscribe(\n      response => {\n        const successStatus = response.status === 200;\n        if (successStatus) {\n          this.completed();\n          this.redirectToChangePassword(response.body);\n        }\n      },\n      error => {\n        this.codeError = error.error.message;\n        this.openSmsCode();\n      }\n    );\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente utilizado para exibiÃ§Ã£o da mensagem customizada de erro em um campo de formulÃ¡rio.\n */\n@Component({\n  selector: 'thf-modal-password-recovery-error-message',\n  templateUrl: './thf-modal-password-recovery-error-message.component.html'\n})\n\nexport class ThfModalPasswordRecoveryErrorMessageComponent {\n\n  /** Texto exibido na mensagem de erro. */\n  @Input('t-text') text: string;\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\n\nimport { ThfFieldModule, ThfI18nPipe, ThfModalModule } from '@totvs/thf-ui';\n\nimport { ThfModalPasswordRecoveryComponent } from './thf-modal-password-recovery.component';\nimport { ThfModalPasswordRecoveryErrorMessageComponent\n} from './thf-modal-password-recovery-error-message/thf-modal-password-recovery-error-message.component';\nimport { ThfModalPasswordRecoveryService } from './thf-modal-password-recovery.service';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-modal-password-recovery.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n\n    ThfFieldModule,\n    ThfModalModule\n  ],\n  declarations: [\n    ThfModalPasswordRecoveryComponent,\n    ThfModalPasswordRecoveryErrorMessageComponent\n  ],\n  exports: [\n    ThfModalPasswordRecoveryComponent,\n    ThfModalPasswordRecoveryErrorMessageComponent\n  ],\n  providers: [ThfI18nPipe, ThfModalPasswordRecoveryService]\n})\nexport class ThfModalPasswordRecoveryModule { }\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { browserLanguage, convertToBoolean, isTypeof } from './../../utils/util';\nimport { ThfSelectOption } from '@totvs/thf-ui';\n\n@Component({\n  selector: 'thf-page-background',\n  templateUrl: './thf-page-background.component.html'\n})\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente para definiÃ§Ã£o de cor de fundo e dos logotipos primÃ¡rio e secundÃ¡rio para os templates\n * de `thf-page-login` e demais templates de login.\n */\nexport class ThfPageBackgroundComponent implements OnInit {\n\n  private _logo?: string;\n  private _secondaryLogo?: string;\n  private _showSelectLanguage?: boolean = false;\n\n  selectedLanguageOption: string;\n\n  selectLanguageOptions: Array<ThfSelectOption> = [\n    { label: 'English', value: 'en' },\n    { label: 'EspaÃ±ol', value: 'es' },\n    { label: 'PortuguÃªs', value: 'pt' }\n  ];\n\n  /** Insere uma imagem de destaque ao lado direito do container. */\n  @Input('t-background') background?: string;\n\n  /** Designa se o logotipo deve desaparecer em resoluÃ§Ãµes menores. */\n  @Input('t-hide-logo') hideLogo?: boolean;\n\n  /** Texto de destaque sobreposto Ã  imagem de destaque. Essa opÃ§Ã£o Ã© utilizada em conjunto com o atributo `t-background`. */\n  @Input('t-highlight-info') highlightInfo?: string;\n\n  /** Caminho para a logomarca localizada na parte superior. */\n  @Input('t-logo') set logo(value: any) {\n    this._logo = isTypeof(value, 'string') && value.trim() ? value : undefined;\n  }\n\n  get logo() {\n    return this._logo;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caminho para a logomarca localizada no rodapÃ©.\n   */\n  @Input('t-secondary-logo') set secondaryLogo(value: any) {\n    this._secondaryLogo = isTypeof(value, 'string') && value.trim() ? value : undefined;\n  }\n\n  get secondaryLogo() {\n    return this._secondaryLogo;\n  }\n\n  /** Define se o seletor de idiomas deve ser exibido. */\n  @Input('t-show-select-language') set showSelectLanguage(showSelectLanguage: boolean) {\n    this._showSelectLanguage = convertToBoolean(showSelectLanguage);\n  }\n  get showSelectLanguage() {\n    return this._showSelectLanguage;\n  }\n\n  /**\n   * Evento disparado ao selecionar alguma opÃ§Ã£o no seletor de idiomas.\n   * Para este evento serÃ¡ passado como parÃ¢metro o valor de idioma selecionado.\n   */\n  @Output('t-selected-language') selectedLanguage?: EventEmitter<any> = new EventEmitter<any>();\n\n  ngOnInit() {\n    this.selectedLanguageOption = browserLanguage();\n  }\n\n  onChangeLanguage() {\n    this.selectedLanguage.emit(this.selectedLanguageOption);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfDividerModule, ThfFieldModule } from '@totvs/thf-ui';\n\nimport { ThfPageBackgroundComponent } from './thf-page-background.component';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-background.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    ThfDividerModule,\n    ThfFieldModule,\n  ],\n  declarations: [\n    ThfPageBackgroundComponent\n  ],\n  exports: [\n    ThfPageBackgroundComponent\n  ]\n})\nexport class ThfPageBackgroundModule { }\n","/**\n * @usedBy ThfPageBlockedUserComponent\n *\n * @description\n *\n * *Enum* para os tipos de motivo de bloqueio de usuÃ¡rio. As informaÃ§Ãµes modificam conforme o motivo selecionado pelo desenvolvedor.\n */\nexport enum ThfPageBlockedUserReason {\n\n  /** Sem definiÃ§Ã£o; a tela exibirÃ¡ conteÃºdo de bloqueio genÃ©rico. */\n  None = 'none',\n\n  /** DefiniÃ§Ã£o para tentativas de acesso esgotadas. */\n  ExceededAttempts = 'exceededAttempts',\n\n  /** DefiniÃ§Ã£o para senha expirada. */\n  ExpiredPassword = 'expiredPassword',\n\n}\n","import { Input, OnInit } from '@angular/core';\n\nimport { ThfPageBlockedUserReason } from './enums/thf-page-blocked-user-reason.enum';\nimport { ThfPageBlockedUserReasonParams } from './interfaces/thf-page-blocked-user-reason-params.interface';\n\nconst ThfPageBlockedUserReasonDefault: ThfPageBlockedUserReason = ThfPageBlockedUserReason.None;\nconst ThfPageBlockedUserParamsDefault: ThfPageBlockedUserReasonParams = { attempts: 5, days: 90, hours: 24 };\n\n/**\n * @description\n *\n * O componente `thf-page-blocked-user` Ã© utilizado como template para tela de bloqueio de usuÃ¡rio.\n * Ã possÃ­vel definir entre trÃªs tipos de telas para alertar o usuÃ¡rio sobre um eventual bloqueio de login.\n *\n * Cada modelo de bloqueio possui uma imagem e texto adequados Ã  situaÃ§Ã£o.\n * Os textos das telas sÃ£o prÃ©-definidos e imutÃ¡veis, porÃ©m,\n * Ã© possÃ­vel estipular parÃ¢metros como dias, horas e tentativas de acesso esgotadas.\n *\n * Por fim, hÃ¡ propriedades para adiÃ§Ã£o de telefone e/ou email para contato e tambÃ©m a definiÃ§Ã£o para a url de retorno.\n *\n * Para que as imagens sejam exibidas corretamente, Ã© necessÃ¡rio incluir o caminho delas ao projeto. Para isso, edite\n * o *assets* no arquivo **angular.json** da aplicaÃ§Ã£o na seguinte ordem:\n * ```\n *   \"assets\": [\n *     \"src/assets\",\n *     \"src/favicon.ico\",\n *     {\n *       \"glob\": \"**\\/*\",\n *       \"input\": \"node_modules/@totvs/thf-theme/images\",\n *       \"output\": \"assets/images\"\n *     }\n *   ]\n * ```\n *\n * _______________\n *\n * #### Praticidade\n * O `thf-page-blocked-user`, assim como suas propriedades, pode tambÃ©m ser transmitido diretamente pelas configuraÃ§Ã£os de rota e,\n * desta maneira, dispensa-se qualquer menÃ§Ã£o e/ou importaÃ§Ã£o no restante da aplicaÃ§Ã£o. O exemplo abaixo exemplifica\n * a forma dinÃ¢mica com a qual o template pode ser gerado se navegasse para uma rota denominada como `/access-denied`:\n *\n *\n * ```\n *   import { ThfPageBlockedUserComponent, ThfPageBlockedUserReason } from '@totvs/thf-templates';\n *\n *   ...\n *   const routes: Routes = [\n *     {\n *       path: 'access-denied', component: ThfPageBlockedUserComponent, data: {\n *         contactEmail: 'dev.totvs@totvs.com',\n *         contactPhone: '0800 1234 000',\n *         reason: ThfPageBlockedUserReason.ExpiredPassword,\n *         urlBack: '/home'\n *       }\n *     }\n *     ...\n *   ];\n *\n *   @NgModule({\n *     imports: [RouterModule.forRoot(routes)],\n *     exports: [RouterModule]\n *   })\n *   export class AppRoutingModule { }\n * ```\n *\n * > Ã essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.\n *\n */\nexport class ThfPageBlockedUserBaseComponent {\n\n  private _params: ThfPageBlockedUserReasonParams = {...ThfPageBlockedUserParamsDefault};\n  private _reason: ThfPageBlockedUserReason = ThfPageBlockedUserReason.None;\n  private _urlBack: string = '/';\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Valor para o email de contato que deve ser exibido. A aÃ§Ã£o estÃ¡ de acordo com o protocolo MAILTO e Ã© possÃ­vel definir\n   * tanto rotas internas quanto externas.\n   */\n  @Input('t-contact-email') contactEmail: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Valor para o telefone de contato que deve ser exibido. A aÃ§Ã£o estÃ¡ de acordo com o protocolo TEL.\n   *\n   * > A propriedade nÃ£o contem tratamento de mÃ¡scara, fica a critÃ©rio do desenvolvedor defini-la.\n   */\n  @Input('t-contact-phone') contactPhone: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * DesignaÃ§Ã£o de valores usados para a customizaÃ§Ã£o da mensagem de bloqueio.\n   * Confira abaixo os valores prÃ©-definidos.\n   *\n   * ```\n   *  const customLiterals: ThfPageBlockedUserReasonParams = {\n   *    attempts: 5,\n   *    days: 90,\n   *    hours: 24\n   *  };\n   * ```\n   *\n   * > Salientamos a importÃ¢ncia e atenÃ§Ã£o para configuraÃ§Ã£o desses valores conforme definidos no projeto.\n   *\n   * > Veja os parÃ¢metros customizÃ¡veis na interface `ThfPageBlockedUserReasonParams`.\n   *\n   */\n  @Input('t-params') set params(value: ThfPageBlockedUserReasonParams) {\n    if (value instanceof Object) {\n      const keys = Object.keys(value);\n      const newParams = {...ThfPageBlockedUserParamsDefault};\n\n      keys.forEach(key => {\n        newParams[key] = value[key];\n      });\n\n      this._params = newParams;\n    } else {\n      this._params = {...ThfPageBlockedUserParamsDefault};\n    }\n  }\n\n  get params() {\n    return this._params;\n  }\n\n  /** Caminho para a logomarca localizada na parte superior, caso nÃ£o seja definida ou seja invÃ¡lida assume a logo padrÃ£o da TOTVS. */\n  @Input('t-logo') logo?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * DefiniÃ§Ã£o de motivo de bloqueio de usuÃ¡rio. As informaÃ§Ãµes modificam conforme o motivo selecionado.\n   *\n   * > Veja os valores vÃ¡lidos no *enum* `ThfPageBlockedUserReason`.\n   *\n   * @default `ThfPageBlockedUserReason.None`\n   */\n  @Input('t-reason') set reason(value: ThfPageBlockedUserReason) {\n    this._reason = (<any>Object).values(ThfPageBlockedUserReason).includes(value) ? value : ThfPageBlockedUserReasonDefault;\n  }\n\n  get reason() {\n    return this._reason;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caminho para a logomarca localizada no rodapÃ©.\n   */\n  @Input('t-secondary-logo') secondaryLogo?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * URL para a aÃ§Ã£o de retorno da pÃ¡gina.\n   *\n   * @default `/`\n   */\n  @Input('t-url-back') set urlBack(url: string) {\n    this._urlBack = url;\n  }\n\n  get urlBack() {\n    return this._urlBack;\n  }\n\n}\n","import { ActivatedRoute, Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\nimport { browserLanguage, isExternalLink, thfLocaleDefault } from '../../utils/util';\n\nimport { ThfPageBlockedUserBaseComponent } from './thf-page-blocked-user-base.component';\n\nexport const thfPageBlockedUserButtonLiterals: Object = {\n  en: <any> {\n    primaryButton: 'Back to home screen',\n  },\n  es: <any> {\n    primaryButton: 'Volver al inicio',\n  },\n  pt: <any> {\n    primaryButton: 'Voltar para o inÃ­cio',\n  }\n};\n\n/**\n * @docsExtends ThfPageBlockedUserBaseComponent\n *\n * @example\n *\n * <example name=\"thf-page-blocked-user-basic\" title=\"Totvs Page Blocked User Basic\">\n *  <file name=\"sample-thf-page-blocked-user-basic/sample-thf-page-blocked-user-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-blocked-user-basic/sample-thf-page-blocked-user-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-blocked-user-labs\" title=\"Totvs Page Blocked User Labs\">\n *  <file name=\"sample-thf-page-blocked-user-labs/sample-thf-page-blocked-user-labs.component.html\"> </file>\n *  <file name=\"sample-thf-page-blocked-user-labs/sample-thf-page-blocked-user-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-blocked-user-exceeded-attempts\" title=\"Totvs Page Blocked User Exceeded Attempts\">\n *  <file name=\"sample-thf-page-blocked-user-exceeded-attempts/sample-thf-page-blocked-user-exceeded-attempts.component.html\"> </file>\n *  <file name=\"sample-thf-page-blocked-user-exceeded-attempts/sample-thf-page-blocked-user-exceeded-attempts.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-blocked-user-expired-password\" title=\"Totvs Page Blocked User Expired Password\">\n *  <file name=\"sample-thf-page-blocked-user-expired-password/sample-thf-page-blocked-user-expired-password.component.html\"> </file>\n *  <file name=\"sample-thf-page-blocked-user-expired-password/sample-thf-page-blocked-user-expired-password.component.ts\"> </file>\n * </example>\n */\n\n@Component({\n  selector: 'thf-page-blocked-user',\n  templateUrl: './thf-page-blocked-user.component.html'\n})\n\nexport class ThfPageBlockedUserComponent extends ThfPageBlockedUserBaseComponent implements OnInit {\n\n  literals = {\n    ...thfPageBlockedUserButtonLiterals[thfLocaleDefault],\n    ...thfPageBlockedUserButtonLiterals[browserLanguage()],\n  };\n\n  constructor(private activatedRoute: ActivatedRoute, private router: Router) {\n    super();\n  }\n\n  ngOnInit() {\n    this.checkingForRouteMetadata(this.activatedRoute.snapshot.data);\n  }\n\n  navigateTo(url: string) {\n    isExternalLink(url) ?  window.open(url) : this.router.navigate([url || '/']);\n  }\n\n  private checkingForMetadataProperty(object, property) {\n    if (Object.prototype.hasOwnProperty.call(object, property)) {\n      return object[property];\n    }\n  }\n\n  private checkingForRouteMetadata(data) {\n    if (Object.keys(data).length !== 0) {\n      this.contactEmail = this.checkingForMetadataProperty(data, 'contactEmail') || this.contactEmail;\n      this.contactPhone = this.checkingForMetadataProperty(data, 'contactPhone') || this.contactPhone;\n      this.reason = this.checkingForMetadataProperty(data, 'reason') || this.reason;\n      this.urlBack = this.checkingForMetadataProperty(data, 'urlBack') || this.urlBack;\n    }\n  }\n\n}\n","import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild } from '@angular/core';\n\nconst thfPageBlockedUserContactItemMargin = 16;\n\n@Component({\n  selector: 'thf-page-blocked-user-contacts',\n  templateUrl: './thf-page-blocked-user-contacts.component.html'\n})\nexport class ThfPageBlockedUserContactsComponent implements AfterViewInit, OnChanges {\n\n  literals: Object;\n  overflowItem: boolean = false;\n\n  private mailText: string;\n  private phoneText: string;\n\n  @Input('t-email') email: string;\n\n  @Input('t-phone') phone: string;\n\n  @ViewChild('contactGroup', { static: true }) contactGroup: ElementRef;\n\n  @ViewChild('mailItem', { static: true }) mailItem: ElementRef;\n\n  @ViewChild('phoneItem', { static: true }) phoneItem: ElementRef;\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  ngAfterViewInit() {\n    this.checkContactItemWidth();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.email || changes.phone) {\n      this.checkContactItemWidth();\n    }\n  }\n\n  private checkContactItemWidth() {\n    if ( !this.email || !this.phone ) {\n      this.overflowItem = true;\n      return;\n    } else {\n      setTimeout(() => {\n        const phoneWidth = this.phoneItem.nativeElement.offsetWidth;\n        const mailWidth = this.mailItem.nativeElement.offsetWidth;\n        const contactGroupHalfWidth = this.contactGroup.nativeElement.offsetWidth / 2;\n\n        this.overflowItem = phoneWidth > contactGroupHalfWidth || mailWidth > contactGroupHalfWidth - thfPageBlockedUserContactItemMargin;\n      });\n    }\n    this.changeDetector.detectChanges();\n  }\n\n}\n","export const thfPageBlockedUserLiterals = {\n  none: {\n    pt: {\n      title: 'Opa!',\n      firstPhrase: 'Tivemos que bloquear essa tela temporariamente.',\n      secondPhrase: 'Mas nÃ£o se preocupe! Basta fazer seu login novamente.'\n    },\n    en: {\n      title: 'Oops!',\n      firstPhrase: 'We had to temporarily block this screen.',\n      secondPhrase: 'But do not worry! Just sign in again.'\n    },\n    es: {\n      title: 'Opa!',\n      firstPhrase: 'Tuvimos que bloquear esta pantalla temporalmente.',\n      secondPhrase: 'Â¡Pero no se preocupe! SÃ³lo tienes que iniciar sesiÃ³n de nuevo.'\n    },\n  },\n  exceededAttempts: {\n    pt: {\n      title:\n        'Opa!',\n      firstPhrase:\n        `Para sua seguranÃ§a, apÃ³s {0} tentativa(s) de senha seu usuÃ¡rio fica bloqueado e nÃ£o pode ser acessado em {1} hora(s) :( `,\n      secondPhrase:\n        'Isso Ã© para evitar que hackers invadam sua conta.',\n      thirdPhrase:\n        'Mas nÃ£o se preocupe! Se vocÃª for o dono da conta e apenas esqueceu sua senha, basta entrar em contato com o suporte.'\n    },\n    en: {\n      title:\n        'Oops!',\n      firstPhrase:\n        `For your security, after {0} attempt(s) of password\n        your user gets blocked and can not be accessed in {1} hour(s) :(`,\n      secondPhrase:\n        'This is to prevent hackers from hacking into your account.',\n      thirdPhrase:\n        'But do not worry! If you are the owner of the account and just forgot your password, just contact support.'\n    },\n    es: {\n      title:\n        'Opa!',\n      firstPhrase:\n        `Para su seguridad, despuÃ©s de {0} intento(s) de contraseÃ±a\n        su usuario queda bloqueado y no puede ser accedido en {1} hora(s) :(`,\n      secondPhrase:\n        'Esto es para evitar que los hackers invadan su cuenta.',\n      thirdPhrase:\n        `Â¡Pero no se preocupe! Si usted es el dueÃ±o de la cuenta\n        y acaba de olvidar su contraseÃ±a, simplemente pÃ³ngase en contacto con el soporte.`\n    }\n  },\n  expiredPassword: {\n    pt: {\n      title:\n        'Opa! Sua senha expirou',\n      firstPhrase:\n        `A cada {0} dia(s) Ã© preciso criar uma nova senha por questÃ£o de seguranÃ§a. ApÃ³s esses {0} dia(s) seu acesso Ã© bloqueado :(`,\n      secondPhrase:\n        'Mas nÃ£o se preocupe! Basta entrar em contato com o administrador do sistema.'\n    },\n    en: {\n      title:\n        'Oops! Your Password has expired',\n      firstPhrase:\n        `Every {0} day(s) you need to create a new password for security reasons.\n        After these {0} day(s) your access is blocked :(`,\n      secondPhrase:\n        'But do not worry! Just contact your system administrator.'\n    },\n    es: {\n      title:\n        'Opa! Su contraseÃ±a ha caducado',\n      firstPhrase:\n        `Cada {0} dÃ­a(s) es necesario crear una nueva contraseÃ±a por razones de seguridad.\n        DespuÃ©s de estos {0} dÃ­a(s) su acceso estÃ¡ bloqueado :(`,\n      secondPhrase:\n        'Â¡Pero no se preocupe! SÃ³lo tienes que ponerse en contacto con el administrador del sistema.'\n    }\n  }\n};\n","import { ChangeDetectorRef, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\nimport { browserLanguage, thfLocaleDefault } from '../../../utils/util';\n\nimport { thfPageBlockedUserLiterals } from './../literals/i18n/thf-page-blocked-user-literals';\nimport { ThfPageBlockedUserReason } from '../enums/thf-page-blocked-user-reason.enum';\nimport { ThfPageBlockedUserReasonParams } from '../interfaces/thf-page-blocked-user-reason-params.interface';\n\n@Component({\n  selector: 'thf-page-blocked-user-reason',\n  templateUrl: './thf-page-blocked-user-reason.component.html'\n})\nexport class ThfPageBlockedUserReasonComponent implements OnChanges, OnInit {\n\n  literalParams;\n  literals: {title: string, firstPhrase: string, secondPhrase: string, thirdPhrase: string};\n\n  @Input('t-params') params: ThfPageBlockedUserReasonParams;\n\n  @Input('t-reason') reason: ThfPageBlockedUserReason;\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.reason || changes.params) {\n      this.getLiterals();\n    }\n  }\n\n  ngOnInit() {\n    this.getLiterals();\n  }\n\n  getImageByReasonType() {\n    let reasonImage;\n\n    switch (this.reason) {\n      case 'none': {\n        reasonImage = 'big-lock';\n        break;\n      }\n      case 'exceededAttempts': {\n        reasonImage = 'blocked-user';\n        break;\n      }\n      case 'expiredPassword': {\n        reasonImage = 'expired';\n        break;\n      }\n    }\n    return `./assets/images/${reasonImage}.svg`;\n  }\n\n  getParams() {\n    this.literalParams =\n      this.reason === 'expiredPassword' ? [this.params.days, this.params.days] : [this.params.attempts, this.params.hours];\n  }\n\n  private getLiterals() {\n    this.getParams();\n\n    this.literals = {\n      ...thfPageBlockedUserLiterals[this.reason][thfLocaleDefault],\n      ...thfPageBlockedUserLiterals[this.reason][browserLanguage()],\n    };\n\n    this.changeDetector.detectChanges();\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfModule } from '@totvs/thf-ui';\n\nimport { ThfPageBackgroundModule } from '../thf-page-background/index';\nimport { ThfPageBlockedUserComponent } from './thf-page-blocked-user.component';\nimport { ThfPageBlockedUserContactsComponent } from './thf-page-blocked-user-contacts/thf-page-blocked-user-contacts.component';\nimport { ThfPageBlockedUserReasonComponent } from './thf-page-blocked-user-reason/thf-page-blocked-user-reason.component';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-blocked-user.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n\n    ThfModule,\n    ThfPageBackgroundModule,\n  ],\n  declarations: [\n    ThfPageBlockedUserComponent,\n    ThfPageBlockedUserContactsComponent,\n    ThfPageBlockedUserReasonComponent,\n  ],\n  exports: [\n    ThfPageBlockedUserComponent,\n    ThfPageBlockedUserContactsComponent,\n    ThfPageBlockedUserReasonComponent,\n  ]\n})\nexport class ThfPageBlockedUserModule { }\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { ThfModalAction } from '@totvs/thf-ui';\n\nimport { convertToBoolean, isExternalLink, isTypeof } from '../../utils/util';\n\nimport { ThfPageChangePasswordRecovery } from './interfaces/thf-page-change-password-recovery.interface';\nimport { ThfPageChangePasswordRequirement } from './interfaces/thf-page-change-password-requirement.interface';\n\n/**\n * @description\n *\n * O componente `thf-page-change-password` Ã© utilizado como template para tela de cadastro ou alteraÃ§Ã£o de senha.\n *\n * Apresenta dicas e regras para senhas mais seguras e tambÃ©m possibilidade de personalizar o redirecionamento para as telas\n * 'esqueceu a senha', 'voltar' e 'entrar no sistema'. Os textos das telas sÃ£o prÃ©-definidos e imutÃ¡veis.\n *\n * A propriedade `t-url-new-password` automatiza a rotina do template e simplifica o processo de cadastro/alteraÃ§Ã£o de senha, bastando\n * definir uma url para POST das informaÃ§Ãµes digitadas pelo usuÃ¡rio.  A flexibilidade e praticidade podem chegar a um nÃ­vel em que o\n * desenvolvimento da aplicaÃ§Ã£o no *client side* Ã© desprovida de qualquer cÃ³digo-fonte relacionado Ã  rotina de cadastro/alteraÃ§Ã£o de senha.\n * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.\n * Caso julgue necessÃ¡rio, pode-se tambÃ©m definir manualmente a rotina do componente.\n *\n * Para que as imagens sejam exibidas corretamente, Ã© necessÃ¡rio incluir o caminho delas ao projeto. Para isso, edite\n * o *assets* no arquivo **angular.json** da aplicaÃ§Ã£o na seguinte ordem:\n * ```\n *   \"assets\": [\n *     \"src/assets\",\n *     \"src/favicon.ico\",\n *     {\n *       \"glob\": \"**\\/*\",\n *       \"input\": \"node_modules/@totvs/thf-theme/images\",\n *       \"output\": \"assets/images\"\n *     }\n *   ]\n * ```\n */\nexport abstract class ThfPageChangePasswordBaseComponent {\n\n  private _hideCurrentPassword: boolean = false;\n  private _recovery: string | ThfPageChangePasswordRecovery | Function;\n  private _requirements: Array<ThfPageChangePasswordRequirement> = [];\n  private _urlHome: string = '/';\n  protected validatorChange: any;\n\n  confirmPassword: string;\n  currentPassword: string;\n  modalAction: ThfModalAction;\n  newPassword: string;\n  recoveryUrlType: string;\n  showRequirements: boolean;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Esconde o campo `Senha atual` para que o template seja para criaÃ§Ã£o de senha.\n   *\n   * @default `false`\n   */\n  @Input('t-hide-current-password') set hideCurrentPassword(value: boolean) {\n    this._hideCurrentPassword = convertToBoolean(value);\n  }\n\n  get hideCurrentPassword(): boolean {\n    return this._hideCurrentPassword;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caminho para a logomarca localizada na parte superior.\n   *\n   * > Caso seja indefinida o espaÃ§o se mantÃ©m preservado porÃ©m vazio.\n   */\n  @Input('t-logo') logo?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * URL para a aÃ§Ã£o do link `Esqueceu a senha`.\n   *\n   * A propriedade aceita os seguintes tipos:\n   *\n   * - **String**: informe uma url externa ou uma rota vÃ¡lida;\n   * - **Function**: pode-se customizar a aÃ§Ã£o. Para esta possilidade basta atribuir:\n   * ```\n   * <thf-page-change-password>\n   *      [recovery]=\"this.myFunc.bind(this)\";\n   * </thf-page-change-password>\n   * ```\n   *\n   * - **ThfPageChangePasswordRecovery**: cria-se vÃ­nculo automÃ¡tico com o template **thf-modal-password-recovery**.\n   *   O objeto deve conter a **url** para requisiÃ§Ã£o dos recursos e pode-se definir o **tipo** de modal para recuperaÃ§Ã£o de senha,\n   *   **email** para contato e **mÃ¡scara** do campo de telefone.\n   *\n   * > Caso nÃ£o tenha valor o link `Esqueceu a senha` desaparece.\n   */\n  @Input('t-recovery') set recovery(value: string | Function | ThfPageChangePasswordRecovery) {\n    this._recovery = value;\n\n    if (isTypeof(value, 'string')) {\n      this.recoveryUrlType = isExternalLink(value) ? 'externalLink' : 'internalLink';\n    }\n  }\n\n  get recovery() {\n    return this._recovery;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Lista de regras para criaÃ§Ã£o e alteraÃ§Ã£o de senha.\n   */\n  @Input('t-requirements') set requirements(value: Array<ThfPageChangePasswordRequirement>) {\n    this._requirements = value || [];\n    this.showRequirements = this._requirements.length > 0;\n  }\n  get requirements() {\n    return this._requirements;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caminho para a logomarca localizada no rodapÃ©.\n   */\n  @Input('t-secondary-logo') secondaryLogo?: string;\n\n  /**\n   * Token para solicitaÃ§Ã£o de troca/recuperaÃ§Ã£o de senha.\n   *\n   * > Esta propriedade serÃ¡ ignorada caso exista um token como parÃ¢metro na URL inicial do template.\n   */\n  @Input('t-token') token?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * URL para a aÃ§Ã£o de retorno da pÃ¡gina.\n   *\n   * > O botÃ£o `Voltar` aparece apenas para telas de alteraÃ§Ã£o de senha, ou seja, sÃ³ aparece se a propriedade `t-hide-current-password` for\n   * falsa.\n   *\n   * @default `/`\n   */\n  @Input('t-url-back') urlBack: string = '/';\n\n  /**\n   * Endpoint usado pelo template para realizar um POST. Quando preenchido, o mÃ©todo `t-submit` serÃ¡ ignorado e o componente adquirirÃ¡\n   * automatizaÃ§Ã£o para o processo de cadastro/troca de senha.\n   *\n   * ### Processo\n   * Ao digitar um valor vÃ¡lido nos campos de senha e pressionar **salvar**,\n   * o componente farÃ¡ uma requisiÃ§Ã£o `POST` na url especificada nesta propriedade passando o objeto contendo os valores definidos pelo\n   * usuÃ¡rio.\n   *\n   * ```\n   * body {\n   *  token?: token,\n   *  oldPassword?: oldPassword,\n   *  newPassword: newPassword\n   * }\n   * ```\n   *\n   * O cÃ³digo de resposta HTTP de status esperado Ã© `204`.\n   *\n   * Em caso de **sucesso**, serÃ¡ exibida a modal de confirmaÃ§Ã£o de senha alterada.\n   *\n   * > O token serÃ¡ informado pela propriedade `t-token`do componente ou por um *query parameter* na URL do template.\n   *\n   * *Processo finalizado.*\n   *\n   * _______________\n   *\n   * #### Praticidade\n   * As informaÃ§Ãµes do serviÃ§o de autenticaÃ§Ã£o tambÃ©m podem ser transmitidas diretamente pelas configuraÃ§Ã£os de rota e, desta maneira,\n   * dispensa-se qualquer menÃ§Ã£o e/ou importaÃ§Ã£o do componente `thf-page-change-password` no restante da aplicaÃ§Ã£o. O exemplo abaixo\n   * exemplifica a forma dinÃ¢mica com a qual o template de tela de troca de senha pode ser gerado ao navegar para rota `/change-password`, e\n   * tambÃ©m como ele se comunica com o serviÃ§o para efetuaÃ§Ã£o do processo de troca de senha do usuÃ¡rio e solicitaÃ§Ã£o de nova senha.\n   * Basta definir nas configuraÃ§Ãµes de rota:\n   *\n   *\n   * ```\n   *   import { ThfModalPasswordRecoveryType, ThfPageChangePasswordComponent } from '@totvs/thf-templates';\n   *\n   *   ...\n   *   const routes: Routes = [\n   *     {\n   *       path: 'change-password', component: ThfPageChangePasswordComponent, data: {\n   *         serviceApi: 'https://thf.totvs.com.br/sample/api/new-password',\n   *         recovery: {\n   *           url: 'https://thf.totvs.com.br/sample/api/users',\n   *           type: ThfModalPasswordRecoveryType.All,\n   *           contactMail: 'dev.totvs@totvs.com',\n   *           phoneMask: '9-999-999-9999'\n   *         }\n   *       }\n   *     }\n   *     ...\n   *   ];\n   *\n   *   @NgModule({\n   *     imports: [RouterModule.forRoot(routes)],\n   *     exports: [RouterModule]\n   *   })\n   *   export class AppRoutingModule { }\n   * ```\n   *\n   *\n   * O metadado `serviceApi` deve ser a **url** para requisiÃ§Ã£o dos recursos de troca de senha. E `recovery` Ã© a interface\n   * `ThfPageChangePasswordRecovery` responsÃ¡vel pelas especificaÃ§Ãµes contidas na modal de recuperaÃ§Ã£o de senha.\n   *\n   * > Ã essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.\n   *\n   */\n  @Input('t-url-new-password') urlNewPassword?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * URL para a aÃ§Ã£o do botÃ£o `Entrar no sistema` da modal de confirmaÃ§Ã£o que aparece apÃ³s salvar a senha ou se chamada pelo mÃ©todo\n   * `openConfirmation`.\n   *\n   * @default `/`\n   */\n  @Input('t-url-home') set urlHome(value: string) {\n    this._urlHome = value;\n    this.modalAction.action = this.navigateTo.bind(this, this.urlHome);\n  }\n  get urlHome() {\n    return this._urlHome;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * FunÃ§Ã£o executada ao submeter o form pelo botÃ£o salvar.\n   *\n   * Caso definida essa funÃ§Ã£o, a modal de confirmaÃ§Ã£o nÃ£o aparece, mas pode ser chamada pelo\n   * mÃ©todo `openConfirmation`. Exemplo:\n   *\n   * ```\n   * @ViewChild(ThfPageChangePasswordComponent) changePassword: ThfPageChangePasswordComponent;\n   *\n   * onSubmit() {\n   *  this.changePassword.openConfirmation();\n   * }\n   *\n   * ```\n   * > Esta propriedade serÃ¡ ignorada se for definido valor para a propriedade `t-url-new-password`.\n   */\n  @Output('t-submit') submit: EventEmitter<any> = new EventEmitter();\n\n  abstract navigateTo(url: string): void;\n\n}\n","export const thfPageChangePasswordLiterals = {\n  en: <any> {\n    backButton: 'Back',\n    confirmPassword: 'Confirm password',\n    createNewPassword: 'Create new password',\n    createNewPasswordPhrase: 'Protect your account with a personal password created by you',\n    currentPassword: 'Current password',\n    enterSystemButton: 'Enter the system',\n    forgotPassword: 'Forgot your password?',\n    newPassword: 'New password',\n    passwordSuccessfullyCreated: 'Password successfully created!',\n    passwordSuccessfullyUpdated: 'Password successfully updated!',\n    requirements: 'Password requirements',\n    safetyTips: 'Safety tips!',\n    safetyTipsFirst: 'is used in other accounts;',\n    safetyTipsPhrase: 'Avoid a password that:',\n    safetyTipsSecond: 'has personal information like your name, nickname or family names;',\n    safetyTipsThird: 'that uses obvious sequences like \"123\" or obvious words like \"password\";',\n    saveButton: 'Save',\n  },\n  es: <any> {\n    backButton: 'Volver',\n    confirmPassword: 'Confirmar seÃ±a',\n    createNewPassword: 'Crear nueva contraseÃ±a',\n    createNewPasswordPhrase: 'Proteger su cuenta con una contraseÃ±a personal creada por usted',\n    currentPassword: 'ContraseÃ±a actual',\n    enterSystemButton: 'Entrar en el sistema',\n    forgotPassword: 'Â¿Olvidaste tu contraseÃ±a?',\n    newPassword: 'Nueva contraseÃ±a',\n    passwordSuccessfullyCreated: 'ContraseÃ±a creada correctamente!',\n    passwordSuccessfullyUpdated: 'ContraseÃ±a correctamente actualizada!',\n    requirements: 'Requisitos de contraseÃ±a',\n    safetyTips: 'Consejos de seguridad!',\n    safetyTipsFirst: 'se utilice en otras cuentas;',\n    safetyTipsPhrase: 'Evite una contraseÃ±a que:',\n    safetyTipsSecond: 'utiliza informaciÃ³n personal como su nombre, apellido o nombre de familia;',\n    safetyTipsThird: 'utilice secuencias muy obvias como \"1234\" o \"abcd\" o palabras obvias como \"contraseÃ±a\";',\n    saveButton: 'Guardar',\n  },\n  pt: <any> {\n    backButton: 'Voltar',\n    confirmPassword: 'Confirmar senha',\n    createNewPassword: 'Criar nova senha',\n    createNewPasswordPhrase: 'Proteja sua conta com uma senha pessoal criada por vocÃª',\n    currentPassword: 'Senha atual',\n    enterSystemButton: 'Entrar no sistema',\n    forgotPassword: 'Esqueceu sua senha?',\n    newPassword: 'Nova senha',\n    passwordSuccessfullyCreated: 'Senha criada com sucesso!',\n    passwordSuccessfullyUpdated: 'Senha alterada com sucesso!',\n    requirements: 'Requisitos de senha',\n    safetyTips: 'Dicas de seguranÃ§a!',\n    safetyTipsFirst: 'seja usada em outras contas;',\n    safetyTipsPhrase: 'Evite uma senha que:',\n    safetyTipsSecond: 'usa informaÃ§Ãµes pessoais como seu nome, apelido ou nome de familiares;',\n    safetyTipsThird: 'use sequÃªncias muito Ã³bvias como \"1234\" ou \"abcd\" ou palavras Ã³bvias como âsenhaâ;',\n    saveButton: 'Salvar',\n  }\n};\n","import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { HttpClient, HttpResponse } from '@angular/common/http';\n\n@Injectable()\nexport class ThfPageChangePasswordService {\n\n  constructor(private http: HttpClient) {}\n\n  post(url: string, item: any): Observable<HttpResponse<Object>> {\n    return this.http.post<any>(url, item, { observe: 'response' });\n  }\n}\n","import { AfterViewInit, Component, ComponentRef, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Subscription } from 'rxjs';\n\nimport { ThfComponentInjectorService, ThfModalAction, ThfModalComponent } from '@totvs/thf-ui';\n\nimport { browserLanguage, isExternalLink, isTypeof, thfLocaleDefault } from '../../utils/util';\n\nimport { ThfModalPasswordRecoveryComponent } from '../thf-modal-password-recovery/thf-modal-password-recovery.component';\nimport { ThfModalPasswordRecoveryType } from '../thf-modal-password-recovery/enums/thf-modal-password-recovery-type.enum';\nimport { ThfPageChangePassword } from './interfaces/thf-page-change-password.interface';\nimport { ThfPageChangePasswordBaseComponent } from './thf-page-change-password-base.component';\nimport { thfPageChangePasswordLiterals } from './literals/i18n/thf-page-change-password-literals';\nimport { ThfPageChangePasswordRecovery } from './interfaces/thf-page-change-password-recovery.interface';\nimport { ThfPageChangePasswordRequirement } from './interfaces/thf-page-change-password-requirement.interface';\nimport { ThfPageChangePasswordService } from './thf-page-change-password.service';\n\n/**\n * @docsExtends ThfPageChangePasswordBaseComponent\n *\n * @example\n *\n * <example name=\"thf-page-change-password-basic\" title=\"Totvs Page Change Password Basic\">\n *  <file name=\"sample-thf-page-change-password-basic/sample-thf-page-change-password-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-change-password-basic/sample-thf-page-change-password-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-change-password-labs\" title=\"Totvs Page Change Password Labs\">\n *  <file name=\"sample-thf-page-change-password-labs/sample-thf-page-change-password-labs.component.html\"> </file>\n *  <file name=\"sample-thf-page-change-password-labs/sample-thf-page-change-password-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-change-password-modify\" title=\"Totvs Page Change Password Modify\">\n *  <file name=\"sample-thf-page-change-password-modify/sample-thf-page-change-password-modify.component.html\"> </file>\n *  <file name=\"sample-thf-page-change-password-modify/sample-thf-page-change-password-modify.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-change-password-create\" title=\"Totvs Page Change Password Create\">\n *  <file name=\"sample-thf-page-change-password-create/sample-thf-page-change-password-create.component.html\"> </file>\n *  <file name=\"sample-thf-page-change-password-create/sample-thf-page-change-password-create.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-change-password-request\" title=\"Totvs Page Change Password Request\">\n *  <file name=\"sample-thf-page-change-password-request/sample-thf-page-change-password-request.component.html\"> </file>\n *  <file name=\"sample-thf-page-change-password-request/sample-thf-page-change-password-request.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-page-change-password',\n  templateUrl: './thf-page-change-password.component.html'\n})\n\nexport class ThfPageChangePasswordComponent extends ThfPageChangePasswordBaseComponent implements AfterViewInit, OnDestroy, OnInit {\n\n  private newPasswordSubscription: Subscription;\n\n  readonly literals: { backButton: string, confirmPassword: string, createNewPassword: string, createNewPasswordPhrase: string,\n    currentPassword: string, enterSystemButton: string, forgotPassword: string, newPassword: string, passwordSuccessfullyCreated: string,\n    passwordSuccessfullyUpdated: string, safetyTips: string, safetyTipsPhrase: string, safetyTipsFirst: string, safetyTipsSecond: string,\n    safetyTipsThird: string, saveButton: string } =\n    {\n      ...thfPageChangePasswordLiterals[thfLocaleDefault],\n      ...thfPageChangePasswordLiterals[browserLanguage()],\n    };\n\n  private componentRef: ComponentRef<any> = null;\n\n  modalAction: ThfModalAction = {\n    action: this.navigateTo.bind(this, this.urlHome),\n    label: this.literals.enterSystemButton\n  };\n\n  parentRef: any;\n\n  @ViewChild(ThfModalComponent, { static: true }) modal: ThfModalComponent;\n  @ViewChild('pageChangePassword', { read: ViewContainerRef, static: true }) pageChangePassword: ViewContainerRef;\n  @ViewChild('passwordForm', { read: NgForm, static: true }) passwordForm: NgForm;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private route: ActivatedRoute,\n    private router: Router,\n    private service: ThfPageChangePasswordService,\n    private thfComponentInjector: ThfComponentInjectorService,\n    viewRef: ViewContainerRef) {\n      super();\n      this.parentRef = viewRef['_view']['component'];\n  }\n\n  ngAfterViewInit() {\n    if (this.urlNewPassword) {\n      this.subscribeToTokenParameter();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.newPasswordSubscription) {\n      this.newPasswordSubscription.unsubscribe();\n    }\n  }\n\n  ngOnInit() {\n    this.checkingForRouteMetadata(this.activatedRoute.snapshot.data);\n  }\n\n  navigateTo(url: string) {\n    isExternalLink(url) ?  window.open(url) : this.router.navigate([url || '/']);\n  }\n\n  onForgotPasswordClick(recovery): void {\n    if (isTypeof(recovery, 'function')) {\n      recovery();\n    } else {\n      this.createModalPasswordRecoveryComponent(recovery);\n    }\n  }\n\n  onLoginSubmit(): void {\n\n    const form = this.getLoginForm();\n\n    if (this.urlNewPassword) {\n      this.postUrlNewPassword(form);\n    } else if (this.submit && this.submit.observers.length) {\n      this.emitSubmit(form);\n    }\n  }\n\n  /**\n   * Abre uma modal de confirmaÃ§Ã£o com texto, imagem e botÃ£o que redireciona para o link definido na propriedade `t-url-home`\u001c\n   */\n  openConfirmation() {\n    this.modal.open();\n  }\n\n  validatePassword() {\n    const controls =  this.passwordForm.form.controls;\n    const controlConfirmPassword = controls['confirmPassword'];\n    const controlNewPassword = controls['newPassword'];\n\n    if (!this.newPassword) {\n      this.setFormErrors({'required': true}, [controlNewPassword]);\n    } else if (!this.confirmPassword) {\n      this.setFormErrors({'required': true}, [controlConfirmPassword]);\n    } else if (this.newPassword && this.confirmPassword && this.newPassword !== this.confirmPassword) {\n      this.setFormErrors({'equalPassword': true}, [controlNewPassword, controlConfirmPassword]);\n    }  else {\n      this.setFormErrors(null, [controlConfirmPassword, controlNewPassword]);\n    }\n\n    if (this.requirements.length && this.requirements.find(requirement =>  this.validateRequirement(requirement) === false)) {\n      this.setFormErrors({'requirement': true}, [controlNewPassword]);\n    }\n  }\n\n  validateRequirement(requirement: ThfPageChangePasswordRequirement) {\n    return typeof requirement.status === 'function' ? requirement.status.call(this.parentRef, this.newPassword) : requirement.status;\n  }\n\n  private checkingForMetadataProperty(object, property) {\n    if (Object.prototype.hasOwnProperty.call(object, property)) {\n      return object[property];\n    }\n  }\n\n  private checkingForRouteMetadata(data) {\n    if (Object.keys(data).length !== 0) {\n      this.urlNewPassword = this.checkingForMetadataProperty(data, 'serviceApi') || this.urlNewPassword;\n      this.recovery = this.checkingForMetadataProperty(data, 'recovery') || this.recovery;\n      this.hideCurrentPassword = this.checkingForMetadataProperty(data, 'hideCurrentPassword') || this.hideCurrentPassword;\n    }\n  }\n\n  private createModalPasswordRecoveryComponent(recovery: ThfPageChangePasswordRecovery) {\n    if (this.componentRef) {\n      this.thfComponentInjector.destroyComponentInApplication(this.componentRef);\n    }\n\n    this.componentRef = this.thfComponentInjector.createComponentInApplication(ThfModalPasswordRecoveryComponent);\n    this.componentRef.instance.recovery = recovery.url;\n    this.componentRef.instance.contactEmail = recovery.contactMail;\n    this.componentRef.instance.phoneMask = recovery.phoneMask;\n    this.componentRef.instance.type = recovery.type || ThfModalPasswordRecoveryType.Email;\n    this.componentRef.changeDetectorRef.detectChanges();\n    setTimeout(() => {\n      this.componentRef.instance.open();\n    });\n  }\n\n  private emitSubmit(form: ThfPageChangePassword) {\n    this.submit.emit(form);\n  }\n\n  private getLoginForm(): ThfPageChangePassword {\n    return {\n      currentPassword: this.currentPassword,\n      newPassword: this.newPassword\n    };\n  }\n\n  private postUrlNewPassword(form: ThfPageChangePassword) {\n\n    form['token'] = this.token;\n\n    this.service.post(this.urlNewPassword, form).subscribe(response => {\n      if (response.status === 204) {\n        this.openConfirmation();\n      }\n    });\n  }\n\n  private setFormErrors(error: any, controls?: Array<any>) {\n    controls.forEach(control => {\n      control.setErrors(error);\n    });\n  }\n\n  private subscribeToTokenParameter() {\n    this.route.queryParams.subscribe(params => {\n      const token = params['token'];\n\n      if (token) {\n        this.token = token;\n      }\n    });\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfModule } from '@totvs/thf-ui';\n\nimport { ThfModalPasswordRecoveryComponent } from '../thf-modal-password-recovery/thf-modal-password-recovery.component';\nimport { ThfPageBackgroundModule } from '../thf-page-background/index';\nimport { ThfPageChangePasswordComponent } from './thf-page-change-password.component';\nimport { ThfPageChangePasswordService } from './thf-page-change-password.service';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-change-password.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n\n    ThfModule,\n    ThfPageBackgroundModule\n  ],\n  declarations: [\n    ThfPageChangePasswordComponent\n  ],\n  entryComponents: [\n    ThfModalPasswordRecoveryComponent\n  ],\n  providers: [\n    ThfPageChangePasswordService\n  ],\n  exports: [\n    ThfPageChangePasswordComponent\n  ]\n})\nexport class ThfPageChangePasswordModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ThfPageDynamicService {\n\n  private endpoint = '/';\n\n  readonly headers: HttpHeaders = new HttpHeaders({\n    'X-TOTVS-SCREEN-LOCK': 'true'\n  });\n\n  constructor(private http: HttpClient) { }\n\n  configServiceApi(config: { endpoint?: string } = {}) {\n    this.endpoint = config.endpoint;\n  }\n\n  getMetadata(type: string = 'list'): Observable<any> {\n    const key = `${this.endpoint}-${type}-metadata`;\n    const cache = JSON.parse(localStorage.getItem(key)) || {};\n\n    const url = `${this.endpoint}/metadata?type=${type}&version=${cache.version || ''}`;\n\n    return this.http.get(url).pipe(map((response: any) => {\n      if (response.version === cache.version) {\n        return cache;\n      }\n\n      localStorage.setItem(key, JSON.stringify(response));\n\n      return  { ...cache, ...response };\n    }));\n  }\n\n  // Deleta um Ãºnico recurso\n  deleteResource(id): Observable<any> {\n    return this.http.delete(`${this.endpoint}/${id}`, { headers: this.headers });\n  }\n\n  // Deleta recursos em lote\n  deleteResources(ids: Array<any>): Observable<any> {\n    return this.http.request('delete', `${this.endpoint}`, { headers: this.headers, body: ids } );\n  }\n\n  // Busca uma lista de recursos\n  getResources(params: {} = {}): Observable<any> {\n    return this.http.get(this.endpoint, { headers: this.headers, params });\n  }\n\n  // Busca um Ãºnico recurso\n  getResource(id): Observable<any> {\n    return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers });\n  }\n\n  // Cria um recurso\n  createResource(resource): Observable<any> {\n    return this.http.post(`${this.endpoint}`, resource, { headers: this.headers });\n  }\n\n  // Atualiza um recurso\n  updateResource(id, resource): Observable<any> {\n    return this.http.put(`${this.endpoint}/${id}`, resource, { headers: this.headers });\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Route, Router, ActivatedRoute } from '@angular/router';\n\nimport * as util from '../../utils/util';\n\nimport { ThfBreadcrumb, ThfPageAction, ThfDialogService, ThfDialogConfirmOptions, ThfNotificationService } from '@totvs/thf-ui';\n\nimport { ThfPageDynamicDetailActions } from './thf-page-dynamic-detail-actions.interface';\nimport { ThfPageDynamicDetailField } from './thf-page-dynamic-detail-field.interface';\nimport { ThfPageDynamicService } from './thf-page-dynamic.service';\n\nexport const thfPageDynamicDetailLiteralsDefault = {\n  en: {\n    pageActionEdit: 'Edit',\n    pageActionRemove: 'Delete',\n    pageActionBack: 'Back',\n    confirmRemoveTitle: 'Confirm delete',\n    confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',\n    removeNotificationSuccess: 'Item deleted successfully.',\n    registerNotFound: 'Register not found.'\n  },\n  es: {\n    pageActionEdit: 'Editar',\n    pageActionRemove: 'Borrar',\n    pageActionBack: 'Regreso',\n    confirmRemoveTitle: 'Confirmar la exclusiÃ³n',\n    confirmRemoveMessage: 'Â¿EstÃ¡ seguro de que desea eliminar este registro? No puede deshacer esta acciÃ³n.',\n    removeNotificationSuccess: 'Elemento eliminado con Ã©xito.',\n    registerNotFound: 'Registro no encontrado.'\n  },\n  pt: {\n    pageActionEdit: 'Editar',\n    pageActionRemove: 'Excluir',\n    pageActionBack: 'Voltar',\n    confirmRemoveTitle: 'Confirmar exclusÃ£o',\n    confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? VocÃª nÃ£o poderÃ¡ desfazer essa aÃ§Ã£o.',\n    removeNotificationSuccess: 'Item excluÃ­do com sucesso.',\n    registerNotFound: 'Registro nÃ£o encontrado.'\n  }\n};\n\n/**\n * @description\n *\n * O `thf-page-dynamic-detail` Ã© uma pÃ¡gina que serve para exibir registros em detalhes,\n * o mesmo tambÃ©m suporta metadados conforme especificado na documentaÃ§Ã£o.\n *\n * @example\n *\n * <example name=\"thf-page-dynamic-detail-basic\" title=\"Totvs Page Dynamic Detail Basic\">\n *  <file name=\"sample-thf-page-dynamic-detail-basic/sample-thf-page-dynamic-detail-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-detail-basic/sample-thf-page-dynamic-detail-basic.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-page-dynamic-detail',\n  templateUrl: './thf-page-dynamic-detail.component.html',\n  providers: [ ThfPageDynamicService ]\n})\nexport class ThfPageDynamicDetailComponent implements OnInit {\n\n  private _actions: ThfPageDynamicDetailActions = {};\n  private _autoRouter: boolean = false;\n  private _duplicates: Array<any> = [];\n  private _fields: Array<any> = [];\n  private _keys: Array<any> = [];\n  private _pageActions: Array<ThfPageAction> = [];\n\n  literals = {\n    ...thfPageDynamicDetailLiteralsDefault[util.thfLocaleDefault],\n    ...thfPageDynamicDetailLiteralsDefault[util.browserLanguage()]\n  };\n  model: any = {};\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Define as aÃ§Ãµes da pÃ¡gina de acordo com a interface `ThfPageDynamicDetailActions`.\n   */\n  @Input('t-actions') set actions(value: ThfPageDynamicDetailActions) {\n    this._actions = this.isObject(value) ? value : {};\n\n    this._pageActions = this.getPageActions(this._actions);\n  }\n\n  /**\n   * @todo Validar rotas na mÃ£o pois se existir uma rota '**' o catch do navigation nÃ£o funciona.\n   *\n   * @optional\n   *\n   * @description\n   *\n   * Cria automaticamente as rotas de ediÃ§Ã£o (novo/duplicate) e detalhes caso as aÃ§Ãµes\n   * estejam definidas nas aÃ§Ãµes.\n   *\n   * > Para o correto funcionamento nÃ£o pode haver nenhum rota coringa (`**`) especificada.\n   *\n   * @default false\n   */\n  @Input('t-auto-router') set autoRouter(value: boolean) {\n    this._autoRouter = util.convertToBoolean(value);\n  }\n\n  get autoRouter(): boolean {\n    return this._autoRouter;\n  }\n\n  /** Objeto com propriedades do breadcrumb. */\n  @Input('t-breadcrumb') breadcrumb?: ThfBreadcrumb = { items: [] };\n\n  /** Lista dos campos exibidos na pÃ¡gina. */\n  @Input('t-fields') set fields(value: Array<ThfPageDynamicDetailField>) {\n    this._fields = Array.isArray(value) ? [...value] : [];\n\n    this._keys = this.getKeysByFields(this.fields);\n    this._duplicates = this.getDuplicatesByFields(this.fields);\n  }\n\n  get fields(): Array<ThfPageDynamicDetailField> {\n    return this._fields;\n  }\n\n  /** TÃ­tulo da pÃ¡gina. */\n  @Input('t-title') title: string;\n\n  /**\n   * @description\n   *\n   * Endpoint usado pelo template para requisiÃ§Ã£o do recurso que serÃ£o exibido.\n   *\n   * Caso a aÃ§Ã£o `remove` estiver configurada, serÃ¡ feito uma requisiÃ§Ã£o de exclusÃ£o nesse mesmo endpoint passando os campos\n   * setados como `key: true`.\n   *\n   * > `DELETE {end-point}/{keys}`\n   *\n   * ```\n   *  <thf-page-dynamic-detail\n   *    [t-actions]=\"{ remove: '/' }\"\n   *    [t-fields]=\"[ { property: 'id', key: true } ]\"\n   *    t-service=\"/api/thf-samples/v1/people\"\n   *    ...>\n   *  </thf-page-dynamic-detail>\n   * ```\n   *\n   * ResquisiÃ§Ã£o disparada, onde a propriedade `id` Ã© igual a 2:\n   *\n   * ```\n   *  DELETE /api/thf-samples/v1/people/2 HTTP/1.1\n   *  Host: localhost:4000\n   *  Connection: keep-alive\n   *  Accept: application/json, text/plain\n   *  ...\n   * ```\n   *\n   * > Caso esteja usando metadados com o template, serÃ¡ disparado uma requisiÃ§Ã£o na inicializaÃ§Ã£o do template para buscar\n   * > os metadados da pÃ¡gina passando o tipo do metadado esperado e a versÃ£o cacheada pelo browser.\n   * >\n   * > `GET {end-point}/metadata?type=detail&version={version}`\n   */\n  @Input('t-service-api') serviceApi: string;\n\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private thfNotification: ThfNotificationService,\n    private thfDialogService: ThfDialogService,\n    private thfPageDynamicService: ThfPageDynamicService) {\n  }\n\n  ngOnInit(): void {\n    const paramId = this.activatedRoute.snapshot.params['id'];\n\n    if (this.activatedRoute.snapshot.data.serviceApi) {\n      this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;\n\n      this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });\n\n      this.loadMetadata(paramId);\n    } else {\n      this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });\n\n      this.loadData(paramId);\n    }\n  }\n\n  get duplicates() {\n    return [...this._duplicates];\n  }\n\n  get keys() {\n    return [...this._keys];\n  }\n\n  get pageActions() {\n    return [...this._pageActions];\n  }\n\n  private confirmRemove(path) {\n    const confirmOptions: ThfDialogConfirmOptions = {\n      title: this.literals.confirmRemoveTitle,\n      message: this.literals.confirmRemoveMessage,\n      confirm: this.remove.bind(this, path)\n    };\n\n    this.thfDialogService.confirm(confirmOptions);\n  }\n\n  private formatUniqueKey(item) {\n    const keys = util.mapObjectByProperties(item, this.keys);\n\n    return util.valuesFromObject(keys).join('|');\n  }\n\n  private goBack(/*path*/) {\n    window.history.back();\n    // if (path) {\n    //   this.navigateTo({ path, component: ThfPageDynamicEditComponent });\n    // } else {\n    //   window.history.back();\n    // }\n  }\n\n  private loadData(id) {\n    this.thfPageDynamicService.getResource(id).toPromise().then(response => {\n      this.model = response;\n    }).catch(() => {\n      this.model = undefined;\n      this.actions = undefined;\n    });\n  }\n\n  private loadMetadata(id) {\n    this.thfPageDynamicService.getMetadata('detail').toPromise().then(response => {\n      this.autoRouter = response.autoRouter;\n      this.actions = response.actions || {};\n      this.breadcrumb = response.breadcrumb || { items : [] };\n      this.fields = response.fields || [];\n      this.title = response.title;\n\n      this.loadData(id);\n    });\n  }\n\n  // @todo Validar rotas na mÃ£o pois se existir uma rota '**' o catch do navigation nÃ£o funciona.\n  private navigateTo(route: { path: string, component?, url?: string, params?: any }, forceStopAutoRouter: boolean = false) {\n    this.router.navigate([route.url || route.path], { queryParams: route.params })\n      .catch(() => {\n        if (forceStopAutoRouter || !this.autoRouter) {\n          return;\n        }\n\n        this.router.config.unshift(<Route>{\n          path: route.path, component: route.component, data: { serviceApi: this.serviceApi, autoRouter: true }\n        });\n\n        this.navigateTo(route, true);\n      });\n  }\n\n  private openEdit(path) {\n    const url = this.resolveUrl(this.model, path);\n\n    // this.navigateTo({ path, url, component: ThfPageDynamicEditComponent });\n    this.navigateTo({ path, url });\n  }\n\n  private remove(path) {\n    const uniqueKey = this.formatUniqueKey(this.model);\n\n    this.thfPageDynamicService.deleteResource(uniqueKey).toPromise().then(() => {\n      this.thfNotification.success(this.literals.removeNotificationSuccess);\n\n      this.navigateTo({ path: path });\n      // this.navigateTo({ path: path, component: ThfPageDynamicTableComponent });\n    });\n  }\n\n  private resolveUrl(item: any, path: string) {\n    const uniqueKey = this.formatUniqueKey(item);\n\n    return path.replace(/:id/g, uniqueKey);\n  }\n\n  private getPageActions(actions: ThfPageDynamicDetailActions = {}): Array<ThfPageAction> {\n    const pageActions = [];\n\n    if (actions.edit) {\n      pageActions.push({ label: this.literals.pageActionEdit, action: this.openEdit.bind(this, actions.edit) });\n    }\n\n    if (actions.remove) {\n      pageActions.push({ label: this.literals.pageActionRemove, action: this.confirmRemove.bind(this, actions.remove) });\n    }\n\n    if (actions.back === undefined || actions.back) {\n      pageActions.push({ label: this.literals.pageActionBack, action: this.goBack.bind(this, actions.back) });\n    }\n\n    return pageActions;\n  }\n\n  private getKeysByFields(fields: Array<any> = []) {\n    return fields.filter(field => field.key === true).map(field => field.property);\n  }\n\n  private getDuplicatesByFields(fields: Array<any> = []) {\n    return fields.filter(field => field.duplicate === true).map(field => field.property);\n  }\n\n  private isObject(value: any): boolean {\n    return !!value && typeof value === 'object' && !Array.isArray(value);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfDynamicModule, ThfModalModule, ThfPageModule, ThfWidgetModule } from '@totvs/thf-ui';\n\nimport { ThfPageDynamicDetailComponent } from './thf-page-dynamic-detail.component';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-dynamic-detail.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n\n    ThfDynamicModule,\n    ThfModalModule,\n    ThfPageModule,\n    ThfWidgetModule\n  ],\n  declarations: [\n    ThfPageDynamicDetailComponent\n  ],\n  exports: [\n    ThfPageDynamicDetailComponent\n  ]\n})\nexport class ThfPageDynamicDetailModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ThfPageDynamicService {\n\n  private endpoint = '/';\n\n  readonly headers: HttpHeaders = new HttpHeaders({\n    'X-TOTVS-SCREEN-LOCK': 'true'\n  });\n\n  constructor(private http: HttpClient) { }\n\n  configServiceApi(config: { endpoint?: string } = {}) {\n    this.endpoint = config.endpoint;\n  }\n\n  getMetadata(type: string = 'list'): Observable<any> {\n    const key = `${this.endpoint}-${type}-metadata`;\n    const cache = JSON.parse(localStorage.getItem(key)) || {};\n\n    const url = `${this.endpoint}/metadata?type=${type}&version=${cache.version || ''}`;\n\n    return this.http.get(url).pipe(map((response: any) => {\n      if (response.version === cache.version) {\n        return cache;\n      }\n\n      localStorage.setItem(key, JSON.stringify(response));\n\n      return  { ...cache, ...response };\n    }));\n  }\n\n  // Deleta um Ãºnico recurso\n  deleteResource(id): Observable<any> {\n    return this.http.delete(`${this.endpoint}/${id}`, { headers: this.headers });\n  }\n\n  // Deleta recursos em lote\n  deleteResources(ids: Array<any>): Observable<any> {\n    return this.http.request('delete', `${this.endpoint}`, { headers: this.headers, body: ids } );\n  }\n\n  // Busca uma lista de recursos\n  getResources(params: {} = {}): Observable<any> {\n    return this.http.get(this.endpoint, { headers: this.headers, params });\n  }\n\n  // Busca um Ãºnico recurso\n  getResource(id): Observable<any> {\n    return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers });\n  }\n\n  // Cria um recurso\n  createResource(resource): Observable<any> {\n    return this.http.post(`${this.endpoint}`, resource, { headers: this.headers });\n  }\n\n  // Atualiza um recurso\n  updateResource(id, resource): Observable<any> {\n    return this.http.put(`${this.endpoint}/${id}`, resource, { headers: this.headers });\n  }\n}\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\n\nimport {\n  ThfBreadcrumb,\n  ThfDialogService,\n  ThfDynamicFormComponent,\n  ThfGridComponent,\n  ThfGridRowActions,\n  ThfNotificationService,\n  ThfPageAction } from '@totvs/thf-ui';\n\nimport * as util from './../../utils/util';\n\nimport { ThfPageDynamicEditActions } from './thf-page-dynamic-edit-actions.interface';\nimport { ThfPageDynamicEditField } from './thf-page-dynamic-edit-field.interface';\nimport { ThfPageDynamicService } from './thf-page-dynamic.service';\n\nexport const thfPageDynamicEditLiteralsDefault = {\n  en: {\n    cancelConfirmMessage: 'Are you sure you want to cancel this operation?',\n    detailActionNew: 'New',\n    pageActionCancel: 'Cancel',\n    pageActionSave: 'Save',\n    pageActionSaveNew: 'Save and new',\n    registerNotFound: 'Register not found.',\n    saveNewNotificationSuccessSave: 'Resource successfully saved.',\n    saveNewNotificationSuccessUpdate: 'Resource successfully updated.',\n    saveNewNotificationWarning: 'Form must be filled out correctly.',\n    saveNotificationSuccessSave: 'Resource successfully saved.',\n    saveNotificationSuccessUpdate: 'Resource successfully updated.',\n    saveNotificationWarning: 'Form must be filled out correctly.',\n  },\n  es: {\n    cancelConfirmMessage: 'EstÃ¡ seguro de que desea cancelar esta operaciÃ³n?',\n    detailActionNew: 'Nuevo',\n    pageActionCancel: 'Cancelar',\n    pageActionSave: 'Guardar',\n    pageActionSaveNew: 'Guardar y nuevo',\n    registerNotFound: 'Registro no encontrado.',\n    saveNewNotificationSuccessSave: 'Recurso salvo con Ã©xito.',\n    saveNewNotificationSuccessUpdate: 'Recurso actualizado con Ã©xito.',\n    saveNewNotificationWarning: 'El formulario debe llenarse correctamente.',\n    saveNotificationSuccessSave: 'Recurso salvo con Ã©xito.',\n    saveNotificationSuccessUpdate: 'Recurso actualizado con Ã©xito.',\n    saveNotificationWarning: 'El formulario debe llenarse correctamente.',\n  },\n  pt: {\n    cancelConfirmMessage: 'Tem certeza que deseja cancelar esta operaÃ§Ã£o?',\n    detailActionNew: 'Novo',\n    pageActionCancel: 'Cancelar',\n    pageActionSave: 'Salvar',\n    pageActionSaveNew: 'Salvar e novo',\n    registerNotFound: 'Registro nÃ£o encontrado.',\n    saveNewNotificationSuccessSave: 'Recurso salvo com sucesso.',\n    saveNewNotificationSuccessUpdate: 'Recurso atualizado com sucesso.',\n    saveNewNotificationWarning: 'FormulÃ¡rio precisa ser preenchido corretamente.',\n    saveNotificationSuccessSave: 'Recurso salvo com sucesso.',\n    saveNotificationSuccessUpdate: 'Recurso atualizado com sucesso.',\n    saveNotificationWarning: 'FormulÃ¡rio precisa ser preenchido corretamente.',\n  }\n};\n\n/**\n * @description\n *\n * O `thf-page-dynamic-edit` Ã© uma pÃ¡gina que pode servir para editar ou criar novos registros,\n * o mesmo tambÃ©m suporta metadados conforme especificado na documentaÃ§Ã£o.\n *\n * @example\n *\n * <example name=\"thf-page-dynamic-edit-basic\" title=\"Totvs Page Dynamic Edit Basic\">\n *  <file name=\"sample-thf-page-dynamic-edit-basic/sample-thf-page-dynamic-edit-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-edit-basic/sample-thf-page-dynamic-edit-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-dynamic-edit-user\" title=\"Totvs Page Dynamic Edit - User\">\n *  <file name=\"sample-thf-page-dynamic-edit-user/sample-thf-page-dynamic-edit-user.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-edit-user/sample-thf-page-dynamic-edit-user.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-dynamic-edit-master-detail\" title=\"Totvs Page Dynamic Edit - Master Detail\">\n *  <file name=\"sample-thf-page-dynamic-edit-master-detail/sample-thf-page-dynamic-edit-master-detail.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-edit-master-detail/sample-thf-page-dynamic-edit-master-detail.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-page-dynamic-edit',\n  templateUrl: './thf-page-dynamic-edit.component.html',\n  providers: [ ThfPageDynamicService ]\n})\nexport class ThfPageDynamicEditComponent implements OnInit {\n\n  private _actions: ThfPageDynamicEditActions = {};\n  private _autoRouter: boolean = false;\n  private _controlFields: Array<any> = [];\n  private _detailFields: Array<any> = [];\n  private _duplicates: Array<any> = [];\n  private _fields: Array<any> = [];\n  private _keys: Array<any> = [];\n  private _pageActions: Array<ThfPageAction> = [];\n\n  literals = {\n    ...thfPageDynamicEditLiteralsDefault[util.thfLocaleDefault],\n    ...thfPageDynamicEditLiteralsDefault[util.browserLanguage()]\n  };\n  model: any = {};\n\n  // beforeSave: return boolean\n  // afterSave\n  // beforeRemove: return boolean\n  // afterRemove\n  // beforeInsert: : return boolean\n  readonly detailActions: ThfGridRowActions = { };\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * AÃ§Ãµes da pÃ¡gina.\n   */\n  @Input('t-actions') set actions(value: ThfPageDynamicEditActions) {\n    this._actions = this.isObject(value) ? value : {};\n\n    this._pageActions = this.getPageActions(this._actions);\n  }\n\n  /**\n   * @todo Validar rotas na mÃ£o pois se existir uma rota '**' o catch do navigation nÃ£o funciona.\n   *\n   * @optional\n   *\n   * @description\n   *\n   * Cria automaticamente as rotas de ediÃ§Ã£o (novo/duplicate) e detalhes caso as aÃ§Ãµes\n   * estejam definidas nas aÃ§Ãµes.\n   *\n   * > Para o correto funcionamento nÃ£o pode haver nenhum rota coringa (`**`) especificada.\n   *\n   * @default false\n   */\n  @Input('t-auto-router') set autoRouter(value: boolean) {\n    this._autoRouter = util.convertToBoolean(value);\n  }\n\n  get autoRouter(): boolean {\n    return this._autoRouter;\n  }\n\n  /** Objeto com propriedades do breadcrumb. */\n  @Input('t-breadcrumb') breadcrumb?: ThfBreadcrumb = { items: [] };\n\n  /** Lista dos campos usados na tabela e busca avanÃ§ada. */\n  @Input('t-fields') set fields(value: Array<ThfPageDynamicEditField>) {\n    this._fields = Array.isArray(value) ? [...value] : [];\n\n    this._keys = this.getKeysByFields(this._fields);\n    this._duplicates = this.getDuplicatesByFields(this._fields);\n\n    this._controlFields = this.getControlFields(this._fields);\n    this._detailFields = this.getDetailFields(this._fields);\n  }\n\n  get fields(): Array<ThfPageDynamicEditField> {\n    return this._fields;\n  }\n\n  /**\n   * @description\n   *\n   * Endpoint usado pelo template para requisiÃ§Ã£o do recurso que serÃ£o exibido para ediÃ§Ã£o.\n   *\n   * Para as aÃ§Ãµes de `save` e `saveNew`, serÃ¡ feito uma requisiÃ§Ã£o de criaÃ§Ã£o nesse mesmo endpoint passando os valores\n   * preenchidos pelo usuÃ¡rio via payload.\n   *\n   * > `POST {end-point}`\n   *\n   * ```\n   *  <thf-page-dynamic-edit\n   *    [t-actions]=\"{ save: '/', saveNew: 'new' }\"\n   *    [t-fields]=\"[ { property: 'name' }, { property: 'city' } ]\"\n   *    t-service=\"/api/thf-samples/v1/people\"\n   *    ...>\n   *  </thf-page-dynamic-edit>\n   * ```\n   *\n   * ResquisiÃ§Ã£o disparada, onde a propriedade `name` e `city` foram preenchidas:\n   *\n   * ```\n   *  POST /api/thf-samples/v1/people HTTP/1.1\n   *  Host: localhost:4000\n   *  Connection: keep-alive\n   *  Accept: application/json, text/plain\n   *  ...\n   * ```\n   *\n   * Request payload:\n   *\n   * ```\n   * { \"name\": \"Fulano\", \"city\": \"Smallville\" }\n   * ```\n   * > Caso esteja usando metadados com o template, serÃ¡ disparado uma requisiÃ§Ã£o na inicializaÃ§Ã£o do template para buscar\n   * > os metadados da pÃ¡gina passando o tipo do metadado esperado e a versÃ£o cacheada pelo browser.\n   * >\n   * > `GET {end-point}/metadata?type=create&version={version}`\n   *\n   * Caso queira que o template carregue um recurso jÃ¡ existente, deve-se ser incluÃ­do um parametro na rota chamado `id`.\n   *\n   * Exemplo de configuraÃ§Ã£o de rota:\n   *\n   * ```\n   *  RouterModule.forRoot([\n   *    ...\n   *    { path: 'edit/:id', component: PersonEditComponent },\n   *    ...\n   *  ],\n   * ```\n   *\n   * Baseado nisso, na inicializaÃ§Ã£o do template, serÃ¡ disparado uma requisiÃ§Ã£o para buscar o recurso que serÃ¡ editado.\n   *\n   * > `GET {end-point}/{id}`\n   *\n   * Nos mÃ©todos de `save` e `saveNew`, ao invÃ©s de um `POST`, serÃ¡ disparado um `PUT`.\n   *\n   * ResquisiÃ§Ã£o disparada, onde a propriedade `name` e `city` foram preenchidas / atualizadas, e o `id` da url Ã© 2:\n   *\n   * ```\n   *  PUT /api/thf-samples/v1/people/2 HTTP/1.1\n   *  Host: localhost:4000\n   *  Connection: keep-alive\n   *  Accept: application/json, text/plain\n   *  ...\n   * ```\n   *\n   * Request payload:\n   *\n   * ```\n   * { \"name\": \"Fulano\", \"city\": \"Metropolis\" }\n   * ```\n   *\n   * > Caso esteja usando metadados com o template, serÃ¡ disparado uma requisiÃ§Ã£o na inicializaÃ§Ã£o do template para buscar\n   * > os metadados da pÃ¡gina passando o tipo do metadado esperado e a versÃ£o cacheada pelo browser.\n   * >\n   * > `GET {end-point}/metadata?type=edit&version={version}`\n   */\n  @Input('t-service-api') serviceApi: string;\n\n  /** TÃ­tulo da pÃ¡gina. */\n  @Input('t-title') title: string;\n\n  @ViewChild('dynamicForm', { static: true }) dynamicForm: ThfDynamicFormComponent;\n  @ViewChild('gridDetail', { static: true }) gridDetail: ThfGridComponent;\n\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private thfNotification: ThfNotificationService,\n    private thfDialogService: ThfDialogService,\n    private thfPageDynamicService: ThfPageDynamicService) {\n  }\n\n  ngOnInit(): void {\n    const paramId = this.activatedRoute.snapshot.params['id'];\n    const duplicate = this.activatedRoute.snapshot.queryParams['duplicate'];\n\n    if (this.activatedRoute.snapshot.data.serviceApi) {\n      this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;\n\n      this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });\n\n      this.loadMetadata(paramId, duplicate);\n    } else {\n      this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });\n\n      this.loadData(paramId, duplicate);\n    }\n  }\n\n  get duplicates() {\n    return [...this._duplicates];\n  }\n\n  get keys() {\n    return [...this._keys];\n  }\n\n  get pageActions() {\n    return [...this._pageActions];\n  }\n\n  get controlFields() {\n    return this._controlFields;\n  }\n\n  get detailFields() {\n    return this._detailFields;\n  }\n\n  private cancel(path) {\n    if (this.dynamicForm && this.dynamicForm.form.dirty) {\n      this.thfDialogService.confirm({\n        message: this.literals.cancelConfirmMessage,\n        title: this.literals.pageActionCancel,\n        confirm: this.goBack.bind(this, path)\n      });\n    } else {\n      this.goBack(path);\n    }\n  }\n\n  private formatUniqueKey(item) {\n    const keys = util.mapObjectByProperties(item, this.keys);\n\n    return util.valuesFromObject(keys).join('|');\n  }\n\n  private goBack(path) {\n    if (path) {\n      this.router.navigate([path]);\n    } else {\n      window.history.back();\n    }\n  }\n\n  private loadData(id, duplicate?) {\n    if (!id) {\n      try {\n        this.model = JSON.parse(duplicate) || {};\n      } catch {\n        this.model = {};\n      }\n\n      return;\n    }\n\n    this.thfPageDynamicService.getResource(id).toPromise().then(response => {\n      this.model = response;\n    }).catch(() => {\n      this.model = undefined;\n      this.actions = undefined;\n      this._pageActions = [];\n    });\n  }\n\n  private loadMetadata(paramId: string | number, duplicate: string) {\n    const typeMetadata = paramId ? 'edit' : 'create';\n\n    this.thfPageDynamicService.getMetadata(typeMetadata).toPromise().then(response => {\n      this.autoRouter = response.autoRouter;\n      this.actions = response.actions || {};\n      this.breadcrumb = response.breadcrumb || { items : [] };\n      this.fields = response.fields || [];\n      this.title = response.title;\n\n      this.loadData(paramId, duplicate);\n    });\n  }\n\n  private navigateTo(path: string) {\n    if (path) {\n      const url = this.resolveUrl(this.model, path);\n\n      this.router.navigate([url]);\n    } else {\n      window.history.back();\n    }\n  }\n\n  private detailActionNew() {\n    this.gridDetail.insertRow();\n  }\n\n  private resolveUrl(item: any, path: string) {\n    const uniqueKey = this.formatUniqueKey(item);\n\n    return path.replace(/:id/g, uniqueKey);\n  }\n\n  private save(path) {\n    if (this.dynamicForm.form.invalid) {\n      this.thfNotification.warning(this.literals.saveNotificationWarning);\n      return;\n    }\n\n    const paramId = this.activatedRoute.snapshot.params['id'];\n\n    const saveOperation: Observable<any> = paramId\n      ? this.thfPageDynamicService.updateResource(paramId, this.model)\n      : this.thfPageDynamicService.createResource(this.model);\n\n    const msgSucess = paramId ? this.literals.saveNotificationSuccessUpdate : this.literals.saveNotificationSuccessSave;\n\n    saveOperation.toPromise().then(() => {\n      this.thfNotification.success(msgSucess);\n\n      this.navigateTo(path);\n    });\n  }\n\n  private saveNew(path) {\n    if (this.dynamicForm.form.invalid) {\n      this.thfNotification.warning(this.literals.saveNewNotificationWarning);\n      return;\n    }\n\n    const paramId = this.activatedRoute.snapshot.params['id'];\n\n    if (paramId) {\n      this.thfPageDynamicService.updateResource(paramId, this.model)\n        .toPromise().then(() => {\n          this.thfNotification.success(this.literals.saveNewNotificationSuccessUpdate);\n\n          this.navigateTo(path);\n        });\n    } else {\n      this.thfPageDynamicService.createResource(this.model)\n        .toPromise().then(() => {\n          this.thfNotification.success(this.literals.saveNewNotificationSuccessSave);\n\n          this.model = {};\n          this.dynamicForm.form.reset();\n        });\n    }\n  }\n\n  private getKeysByFields(fields: Array<any> = []) {\n    return fields.filter(field => field.key === true).map(field => field.property);\n  }\n\n  private getControlFields(fields: Array<any> = []) {\n    return fields.filter(field => field.type !== 'detail');\n  }\n\n  private getDetailFields(fields: Array<any> = []) {\n    return fields.filter(field => field.type === 'detail');\n  }\n\n  private getDuplicatesByFields(fields: Array<any> = []) {\n    return fields.filter(field => field.duplicate === true).map(field => field.property);\n  }\n\n  private getPageActions(actions: ThfPageDynamicEditActions = {}): Array<ThfPageAction> {\n    const pageActions = [{ label: this.literals.pageActionSave, action: this.save.bind(this, actions.save) }];\n\n    if (actions.saveNew) {\n      pageActions.push({ label: this.literals.pageActionSaveNew, action: this.saveNew.bind(this, actions.saveNew) });\n    }\n\n    if (actions.cancel === undefined || actions.cancel) {\n      pageActions.push({ label: this.literals.pageActionCancel, action: this.cancel.bind(this, actions.cancel) });\n    }\n\n    return pageActions;\n  }\n\n  private isObject(value: any): boolean {\n    return !!value && typeof value === 'object' && !Array.isArray(value);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  ThfButtonModule,\n  ThfDividerModule,\n  ThfDynamicModule,\n  ThfGridModule,\n  ThfPageModule,\n  ThfWidgetModule\n} from '@totvs/thf-ui';\n\nimport { ThfPageDynamicEditComponent } from './thf-page-dynamic-edit.component';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-dynamic-detail.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n\n    ThfButtonModule,\n    ThfDividerModule,\n    ThfDynamicModule,\n    ThfGridModule,\n    ThfPageModule,\n    ThfWidgetModule\n  ],\n  declarations: [\n    ThfPageDynamicEditComponent\n  ],\n  exports: [\n    ThfPageDynamicEditComponent\n  ]\n})\nexport class ThfPageDynamicEditModule { }\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { ThfDynamicFormField } from '@totvs/thf-ui';\n\nimport { browserLanguage, thfLocaleDefault } from '../../../utils/util';\n\nexport const thfAdvancedFiltersLiteralsDefault = {\n  en: {\n    title: 'Advanced search',\n    primaryActionLabel: 'Apply filters',\n    secondaryActionLabel: 'Cancel'\n  },\n  es: {\n    title: 'BÃºsqueda avanzada',\n    primaryActionLabel: 'Aplicar filtros',\n    secondaryActionLabel: 'Cancelar'\n  },\n  pt: {\n    title: 'Busca avanÃ§ada',\n    primaryActionLabel: 'Aplicar filtros',\n    secondaryActionLabel: 'Cancelar'\n  }\n};\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Filtro de busca avanÃ§ada criado a partir de um formulÃ¡rio dinÃ¢mico.\n * Componente de uso interno.\n */\nexport class ThfAdvancedFilterBaseComponent {\n\n  private _filters: Array<ThfDynamicFormField> = [];\n\n  literals = {\n    ...thfAdvancedFiltersLiteralsDefault[thfLocaleDefault],\n    ...thfAdvancedFiltersLiteralsDefault[browserLanguage()]\n  };\n\n  /**\n   * ColeÃ§Ã£o de objetos que implementam a interface ThfDynamicFormField, para definiÃ§Ã£o dos campos que serÃ£o criados\n   * dinamicamente.\n   */\n  @Input('t-filters') set filters(filters: Array<ThfDynamicFormField>) {\n    this._filters = Array.isArray(filters) ? [...filters] : [];\n  }\n\n  get filters() {\n    return this._filters;\n  }\n\n  /** FunÃ§Ã£o que serÃ¡ disparada e receberÃ¡ os valores do formulÃ¡rio ao ser clicado no botÃ£o buscar. */\n  @Output('t-search-event') searchEvent = new EventEmitter<any>();\n\n}\n","import { Component, ViewChild } from '@angular/core';\n\nimport { ThfDynamicFormComponent, ThfModalAction, ThfModalComponent } from '@totvs/thf-ui';\n\nimport { ThfAdvancedFilterBaseComponent } from './thf-advanced-filter-base.component';\n\n/**\n * @docsPrivate\n *\n * @docsExtends ThfAdvancedFilterBaseComponent\n *\n * @examplePrivate\n *\n * <example-private name=\"thf-advanced-filter\" title=\"Totvs Busca AvanÃ§ada\">\n *   <file name=\"sample-thf-advanced-filter.component.html\"> </file>\n *   <file name=\"sample-thf-advanced-filter.component.ts\"> </file>\n * </example-private>\n */\n@Component({\n  selector: 'thf-advanced-filter',\n  templateUrl: './thf-advanced-filter.component.html'\n})\nexport class ThfAdvancedFilterComponent extends ThfAdvancedFilterBaseComponent {\n\n  filter = {};\n\n  @ViewChild(ThfModalComponent, { static: true }) thfModal: ThfModalComponent;\n\n  @ViewChild(ThfDynamicFormComponent, { static: true }) thfDynamicForm: ThfDynamicFormComponent;\n\n  primaryAction: ThfModalAction = {\n    action: () => {\n      const models = this.getValuesFromForm();\n\n      this.searchEvent.emit(models);\n      this.thfModal.close();\n    },\n    label: this.literals.primaryActionLabel\n  };\n\n  secondaryAction: ThfModalAction = {\n    action: () => {\n      this.thfModal.close();\n    },\n    label: this.literals.secondaryActionLabel\n  };\n\n  // Retorna os models dos campos preenchidos\n  getValuesFromForm() {\n    Object.keys(this.filter).forEach(property => {\n      if (this.filter[property] === undefined || this.filter[property] === '') {\n        delete this.filter[property];\n      }\n    });\n\n    return this.filter;\n  }\n\n  open() {\n    this.filter = {};\n    this.thfModal.open();\n  }\n\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nimport { ThfBreadcrumb, ThfDynamicFormField, ThfPageAction } from '@totvs/thf-ui';\n\nimport { browserLanguage, thfLocaleDefault } from '../../utils/util';\n\nexport const thfPageDynamicSearchLiteralsDefault = {\n  en: {\n    disclaimerGroupTitle: 'Displaying results filtered by:',\n    filterSettingsPlaceholder: 'Search',\n    quickSearchLabel: 'Quick search:'\n  },\n  es: {\n    disclaimerGroupTitle: 'Presentando resultados filtrados por:',\n    filterSettingsPlaceholder: 'Buscar',\n    quickSearchLabel: 'BÃºsqueda rÃ¡pida:'\n  },\n  pt: {\n    disclaimerGroupTitle: 'Apresentando resultados filtrados por:',\n    filterSettingsPlaceholder: 'Pesquisar',\n    quickSearchLabel: 'Pesquisa rÃ¡pida:'\n  }\n};\n\n/**\n * @description\n *\n * Componente com as aÃ§Ãµes de pesquisa jÃ¡ definidas, bastando que o desenvolvedor implemente apenas a chamada para as APIs\n * e exiba as informaÃ§Ãµes.\n */\nexport class ThfPageDynamicSearchBaseComponent {\n\n  private _filters: Array<ThfDynamicFormField> = [];\n\n  literals = {\n    ...thfPageDynamicSearchLiteralsDefault[thfLocaleDefault],\n    ...thfPageDynamicSearchLiteralsDefault[browserLanguage()]\n  };\n\n  /** Nesta propriedade deve ser definido um array de objetos que implementam a interface `ThfPageAction`. */\n  @Input('t-actions') actions?: Array<ThfPageAction> = [];\n\n  /** Objeto com propriedades do breadcrumb. */\n  @Input('t-breadcrumb') breadcrumb?: ThfBreadcrumb = { items: [] };\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Lista dos campos usados na busca avanÃ§ada. Caso o mesmo nÃ£o seja passado a busca avanÃ§ada nÃ£o serÃ¡ exibida.\n   */\n  @Input('t-filters') set filters(filters: Array<ThfDynamicFormField>) {\n    this._filters = Array.isArray(filters) ? [...filters] : [];\n  }\n\n  get filters(): Array<ThfDynamicFormField> {\n    return this._filters;\n  }\n\n  /** TÃ­tulo da pÃ¡gina. */\n  @Input('t-title') title: string;\n\n  /**\n   * @description\n   *\n   * Evento disparado ao executar a pesquisa avanÃ§ada, o mesmo irÃ¡ repassar um objeto com os valores preenchidos no modal de pesquisa.\n   *\n   * > Campos nÃ£o preenchidos nÃ£o irÃ£o aparecer no objeto passado por parÃ¢metro.\n   */\n  @Output('t-advanced-search') advancedSearch?: EventEmitter<any> = new EventEmitter();\n\n  /** Evento disparado ao remover um ou todos os disclaimers pelo usuÃ¡rio. */\n  @Output('t-change-disclaimers') changeDisclaimers?: EventEmitter<any> = new EventEmitter();\n\n  /** Evento disparado ao realizar uma busca pelo campo de pesquisa rÃ¡pida, o mesmo serÃ¡ chamado repassando o valor digitado. */\n  @Output('t-quick-search') quickSearch?: EventEmitter<string> = new EventEmitter();\n\n}\n","import { Component, ViewChild } from '@angular/core';\n\nimport { ThfDisclaimerGroup, ThfDynamicFieldType, ThfDynamicFormField, ThfPageFilter } from '@totvs/thf-ui';\n\nimport { getBrowserLanguage } from '../../utils/util';\n\nimport { ThfAdvancedFilterComponent } from './thf-advanced-filter/thf-advanced-filter.component';\nimport { ThfPageDynamicSearchBaseComponent } from './thf-page-dynamic-search-base.component';\n\n/**\n * @docsExtends ThfPageDynamicSearchBaseComponent\n *\n * @example\n *\n * <example name=\"thf-page-dynamic-search-basic\" title=\"Totvs Page Dynamic Search Basic\">\n *  <file name=\"sample-thf-page-dynamic-search-basic/sample-thf-page-dynamic-search-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-search-basic/sample-thf-page-dynamic-search-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-dynamic-search-hiring-processes\" title=\"Totvs Page Dynamic Search - Hiring processes\">\n *  <file name=\"sample-thf-page-dynamic-search-hiring-processes/sample-thf-page-dynamic-search-hiring-processes.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-search-hiring-processes/sample-thf-page-dynamic-search-hiring-processes.component.ts\"> </file>\n *  <file name=\"sample-thf-page-dynamic-search-hiring-processes/sample-thf-page-dynamic-search-hiring-processes.service.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-page-dynamic-search',\n  templateUrl: './thf-page-dynamic-search.component.html'\n})\nexport class ThfPageDynamicSearchComponent extends ThfPageDynamicSearchBaseComponent {\n\n  private readonly _disclaimerGroup: ThfDisclaimerGroup = {\n    change: this.onChangeDisclaimerGroup.bind(this),\n    disclaimers: [],\n    title: this.literals.disclaimerGroupTitle\n  };\n\n  private readonly _filterSettings: ThfPageFilter = {\n    action: 'onAction',\n    advancedAction: 'onAdvancedAction',\n    ngModel: 'quickFilter',\n    placeholder: this.literals.filterSettingsPlaceholder\n  };\n\n  // Flag to control when changeDisclaimerGroup should be called\n  private changeDisclaimersEnabled: boolean = false;\n\n  private quickFilter;\n\n  @ViewChild(ThfAdvancedFilterComponent, { static: true }) thfAdvancedFilter: ThfAdvancedFilterComponent;\n\n  get disclaimerGroup() {\n    return Object.assign({}, this._disclaimerGroup);\n  }\n\n  get filterSettings() {\n    this._filterSettings.advancedAction = this.filters.length === 0 ? undefined : 'onAdvancedAction';\n\n    return Object.assign({}, this._filterSettings);\n  }\n\n  onAction() {\n    this.changeDisclaimersEnabled = false;\n    this._disclaimerGroup.disclaimers = [\n      { property: 'search', label: `${this.literals.quickSearchLabel} ${this.quickFilter}`, value: this.quickFilter }\n    ];\n\n    if (this.quickSearch.observers && this.quickSearch.observers.length > 0) {\n      this.quickSearch.emit(this.quickFilter);\n    }\n\n    this.quickFilter = undefined;\n  }\n\n  onAdvancedAction() {\n    this.thfAdvancedFilter.open();\n  }\n\n  onAdvancedSearch(filters) {\n    this.changeDisclaimersEnabled = false;\n    this._disclaimerGroup.disclaimers = this.setDisclaimers(filters);\n\n    this.advancedSearch.emit(filters);\n  }\n\n  private formatDate(date: string) {\n    const year = parseInt(date.substr(0, 4), 10);\n    const month = parseInt(date.substr(5, 2), 10);\n    const day = parseInt(date.substr(8, 2), 10);\n\n    return new Date(year, month - 1, day).toLocaleDateString(getBrowserLanguage());\n  }\n\n  private getFieldByProperty(fields: Array<ThfDynamicFormField>, fieldName: string) {\n    return fields.find((field: ThfDynamicFormField) => field.property === fieldName);\n  }\n\n  private onChangeDisclaimerGroup(disclaimers) {\n    this.changeDisclaimersEnabled ? this.changeDisclaimers.emit(disclaimers) : this.changeDisclaimersEnabled = true;\n  }\n\n  private setDisclaimers(filters) {\n    const disclaimers = [];\n\n    Object.keys(filters).forEach(filter => {\n      const field = this.getFieldByProperty(this.filters, filter);\n\n      const value = field.type === ThfDynamicFieldType.Date ? this.formatDate(filters[filter]) : filters[filter];\n\n      disclaimers.push({\n        label: `${field.label}: ${value}`,\n        property: filter,\n        value: filters[filter]\n      });\n    });\n\n    return disclaimers;\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfDynamicModule, ThfModalModule, ThfPageModule } from '@totvs/thf-ui';\n\nimport { ThfAdvancedFilterComponent } from './thf-advanced-filter/thf-advanced-filter.component';\nimport { ThfPageDynamicSearchComponent } from './thf-page-dynamic-search.component';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-dynamic-search.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n\n    ThfDynamicModule,\n    ThfModalModule,\n    ThfPageModule\n  ],\n  declarations: [\n    ThfAdvancedFilterComponent,\n    ThfPageDynamicSearchComponent\n  ],\n  exports: [\n    ThfPageDynamicSearchComponent\n  ]\n})\nexport class ThfPageDynamicSearchModule { }\n","import { Input } from '@angular/core';\n\nimport { ThfBreadcrumb } from '@totvs/thf-ui';\n\nimport { convertToBoolean } from '../../utils/util';\n\nimport { ThfPageDynamicTableField } from './thf-page-dynamic-table-field.interface';\n\nexport class ThfPageDynamicListBaseComponent {\n\n  private _autoRouter: boolean = false;\n  private _columns: Array<any> = [];\n  private _duplicates: Array<any> = [];\n  private _fields: Array<any> = [];\n  private _filters: Array<any> = [];\n  private _keys: Array<any> = [];\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Cria automaticamente as rotas de ediÃ§Ã£o (novo/duplicate) e detalhes caso sejam definidas aÃ§Ãµes na propriedade `t-actions`\n   *\n   * As rotas criadas serÃ£o baseadas na propriedade `t-actions`.\n   *\n   * > Para o correto funcionamento nÃ£o pode haver nenhuma rota coringa (`**`) especificada.\n   *\n   * @default false\n   */\n  @Input('t-auto-router') set autoRouter(value: boolean) {\n    this._autoRouter = convertToBoolean(value);\n  }\n\n  get autoRouter(): boolean {\n    return this._autoRouter;\n  }\n\n  /** Objeto com propriedades do breadcrumb. */\n  @Input('t-breadcrumb') breadcrumb?: ThfBreadcrumb = { items: [] };\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Lista dos campos usados na tabela e busca avanÃ§ada.\n   *\n   *\n   * > Caso nÃ£o seja definido fields a tabela assumirÃ¡ o comportamento padrÃ£o.\n   */\n  @Input('t-fields') set fields(fields: Array<ThfPageDynamicTableField>) {\n    this._fields = Array.isArray(fields) ? [...fields] : [];\n\n    this.setFieldsProperties(this.fields);\n  }\n\n  get fields(): Array<ThfPageDynamicTableField> {\n    return this._fields;\n  }\n\n  /** Endpoint da API dos recursos que serÃ£o exibidos. */\n  /**\n   * @description\n   *\n   * Endpoint usado pelo template para requisiÃ§Ã£o dos recursos que serÃ£o exibidos.\n   *\n   * Caso a aÃ§Ã£o `remove` estiver configurada, serÃ¡ feito uma requisiÃ§Ã£o de exclusÃ£o nesse mesmo endpoint passando os campos\n   * setados como `key: true`.\n   *\n   * > `DELETE {end-point}/{keys}`\n   *\n   * ```\n   *  <thf-page-dynamic-table\n   *    [t-actions]=\"{ remove: true }\"\n   *    [t-fields]=\"[ { property: 'id', key: true } ]\"\n   *    t-service=\"/api/thf-samples/v1/people\"\n   *    ...>\n   *  </thf-page-dynamic-table>\n   * ```\n   *\n   * ResquisiÃ§Ã£o disparada, onde a propriedade `id` Ã© igual a 2:\n   *\n   * ```\n   *  DELETE /api/thf-samples/v1/people/2 HTTP/1.1\n   *  Host: localhost:4000\n   *  Connection: keep-alive\n   *  Accept: application/json, text/plain\n   *  ...\n   * ```\n   *\n   * Para a aÃ§Ã£o `removeAll`, serÃ¡ feito uma requisiÃ§Ã£o de exclusÃ£o em lote para esse mesmo endpoint passando, uma lista\n   * de objetos com os campos setados como `key: true` via `payload`.\n   *\n   * > `DELETE {end-point}`\n   *\n   * > `Payload: [ {key}, {key} ... {key} ]`\n   *\n   * ```\n   *  <thf-page-dynamic-table\n   *    [t-actions]=\"{ removeAll: true }\"\n   *    [t-fields]=\"[ { property: 'id', key: true } ]\"\n   *    t-service=\"/api/thf-samples/v1/people\"\n   *    ...>\n   *  </thf-page-dynamic-table>\n   * ```\n   *\n   * ResquisiÃ§Ã£o disparada, onde foram selecionados 3 itens para serem removidos:\n   *\n   * ```\n   *  DELETE /api/thf-samples/v1/people HTTP/1.1\n   *  Host: localhost:4000\n   *  Connection: keep-alive\n   *  Accept: application/json, text/plain\n   *  ...\n   * ```\n   *\n   * Request payload:\n   *\n   * ```\n   * [{\"id\":2},{\"id\":4},{\"id\":5}]\n   * ```\n   *\n   * > Caso esteja usando metadados com o template, serÃ¡ disparado uma requisiÃ§Ã£o na inicializaÃ§Ã£o do template para buscar\n   * > os metadados da pÃ¡gina passando o tipo do metadado esperado e a versÃ£o cacheada pelo browser.\n   * >\n   * > `GET {end-point}/metadata?type=list&version={version}`\n   */\n  @Input('t-service-api') serviceApi: string;\n\n  /** TÃ­tulo da pÃ¡gina. */\n  @Input('t-title') title: string;\n\n  get columns() {\n    return [...this._columns];\n  }\n\n  get duplicates() {\n    return [...this._duplicates];\n  }\n\n  get filters() {\n    return [...this._filters];\n  }\n\n  get keys() {\n    return [...this._keys];\n  }\n\n  private setFieldsProperties(fields: Array<any>) {\n    this._filters = fields.filter(field => field.filter === true);\n    this._columns = fields.filter(field => field.visible === undefined || field.visible === true);\n    this._keys = fields.filter(field => field.key === true).map(field => field.property);\n    this._duplicates = fields.filter(field => field.duplicate === true).map(field => field.property);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ThfPageDynamicService {\n\n  private endpoint = '/';\n\n  readonly headers: HttpHeaders = new HttpHeaders({\n    'X-TOTVS-SCREEN-LOCK': 'true'\n  });\n\n  constructor(private http: HttpClient) { }\n\n  configServiceApi(config: { endpoint?: string } = {}) {\n    this.endpoint = config.endpoint;\n  }\n\n  getMetadata(type: string = 'list'): Observable<any> {\n    const key = `${this.endpoint}-${type}-metadata`;\n    const cache = JSON.parse(localStorage.getItem(key)) || {};\n\n    const url = `${this.endpoint}/metadata?type=${type}&version=${cache.version || ''}`;\n\n    return this.http.get(url).pipe(map((response: any) => {\n      if (response.version === cache.version) {\n        return cache;\n      }\n\n      localStorage.setItem(key, JSON.stringify(response));\n\n      return  { ...cache, ...response };\n    }));\n  }\n\n  // Deleta um Ãºnico recurso\n  deleteResource(id): Observable<any> {\n    return this.http.delete(`${this.endpoint}/${id}`, { headers: this.headers });\n  }\n\n  // Deleta recursos em lote\n  deleteResources(ids: Array<any>): Observable<any> {\n    return this.http.request('delete', `${this.endpoint}`, { headers: this.headers, body: ids } );\n  }\n\n  // Busca uma lista de recursos\n  getResources(params: {} = {}): Observable<any> {\n    return this.http.get(this.endpoint, { headers: this.headers, params });\n  }\n\n  // Busca um Ãºnico recurso\n  getResource(id): Observable<any> {\n    return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers });\n  }\n\n  // Cria um recurso\n  createResource(resource): Observable<any> {\n    return this.http.post(`${this.endpoint}`, resource, { headers: this.headers });\n  }\n\n  // Atualiza um recurso\n  updateResource(id, resource): Observable<any> {\n    return this.http.put(`${this.endpoint}/${id}`, resource, { headers: this.headers });\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, Route, Router } from '@angular/router';\n\nimport { ThfDialogConfirmOptions, ThfDialogService, ThfNotificationService, ThfPageAction, ThfTableAction } from '@totvs/thf-ui';\n\nimport * as util from '../../utils/util';\n\nimport { ThfPageDynamicDetailComponent } from '../thf-page-dynamic-detail/thf-page-dynamic-detail.component';\n// import { ThfPageDynamicEditComponent } from '../thf-page-dynamic-edit/thf-page-dynamic-edit.component';\n\nimport { ThfPageDynamicListBaseComponent } from './thf-page-dynamic-list-base.component';\nimport { ThfPageDynamicService } from './thf-page-dynamic.service';\nimport { ThfPageDynamicTableActions } from './thf-page-dynamic-table-actions.interface';\n\nexport const thfPageDynamicTableLiteralsDefault = {\n  en: {\n    pageAction: 'New',\n    pageActionRemoveAll: 'Delete',\n    tableActionView: 'View',\n    tableActionEdit: 'Edit',\n    tableActionDuplicate: 'Duplicate',\n    tableActionDelete: 'Delete',\n    confirmRemoveTitle: 'Confirm delete',\n    confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',\n    confirmRemoveAllTitle: 'Confirm batch deletion',\n    confirmRemoveAllMessage: 'Are you sure you want to delete all these records? You can not undo this action.',\n    loadDataErrorNotification: 'Service not found',\n    removeSuccessNotification: 'Item deleted successfully',\n    removeAllSuccessNotification: 'Items deleted successfully'\n  },\n  es: {\n    pageAction: 'Nuevo',\n    pageActionRemoveAll: 'Borrar',\n    tableActionView: 'Visualizar',\n    tableActionEdit: 'Editar',\n    tableActionDuplicate: 'Duplicar',\n    tableActionDelete: 'Borrar',\n    confirmRemoveTitle: 'Confirmar la exclusiÃ³n',\n    confirmRemoveMessage: 'Â¿EstÃ¡ seguro de que desea eliminar este registro? No puede deshacer esta acciÃ³n.',\n    confirmRemoveAllTitle: 'Confirmar la exclusiÃ³n por lotes',\n    confirmRemoveAllMessage: 'Â¿EstÃ¡ seguro de que desea eliminar todos estos registros? No puede deshacer esta acciÃ³n.',\n    loadDataErrorNotification: 'Servicio no informado.',\n    removeSuccessNotification: 'Elemento eliminado con Ã©xito',\n    removeAllSuccessNotification: 'Elementos eliminados con Ã©xito'\n  },\n  pt: {\n    pageAction: 'Novo',\n    pageActionRemoveAll: 'Excluir',\n    tableActionView: 'Visualizar',\n    tableActionEdit: 'Editar',\n    tableActionDuplicate: 'Duplicar',\n    tableActionDelete: 'Excluir',\n    confirmRemoveTitle: 'Confirmar exclusÃ£o',\n    confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? VocÃª nÃ£o poderÃ¡ desfazer essa aÃ§Ã£o.',\n    confirmRemoveAllTitle: 'Confirmar exclusÃ£o em lote',\n    confirmRemoveAllMessage: 'Tem certeza de que deseja excluir todos esses registros? VocÃª nÃ£o poderÃ¡ desfazer essa aÃ§Ã£o.',\n    loadDataErrorNotification: 'ServiÃ§o nÃ£o informado.',\n    removeSuccessNotification: 'Item excluido com sucesso',\n    removeAllSuccessNotification: 'Items excluidos com sucesso'\n  }\n};\n\n/**\n * @docsExtends ThfPageDynamicListBaseComponent\n *\n * @description\n *\n * O `thf-page-dynamic-table` Ã© uma pÃ¡gina que exibe uma lista de registros em uma tabela baseado em uma lista de fields,\n * o mesmo tambÃ©m suporta metadados conforme especificado na documentaÃ§Ã£o.\n *\n * @example\n *\n * <example name=\"thf-page-dynamic-table-basic\" title=\"Totvs Page Dynamic Table Basic\">\n *  <file name=\"sample-thf-page-dynamic-table-basic/sample-thf-page-dynamic-table-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-table-basic/sample-thf-page-dynamic-table-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-dynamic-table-users\" title=\"Totvs Page Dynamic Table - Users\">\n *  <file name=\"sample-thf-page-dynamic-table-users/sample-thf-page-dynamic-table-users.component.html\"> </file>\n *  <file name=\"sample-thf-page-dynamic-table-users/sample-thf-page-dynamic-table-users.component.ts\"> </file>\n * </example>\n */\n@Component({\n  selector: 'thf-page-dynamic-table',\n  templateUrl: './thf-page-dynamic-table.component.html',\n  providers: [ ThfPageDynamicService ]\n})\nexport class ThfPageDynamicTableComponent extends ThfPageDynamicListBaseComponent implements OnInit {\n\n  private _actions: ThfPageDynamicTableActions = {};\n  private _pageActions: Array<ThfPageAction> = [];\n  private _tableActions: Array<ThfTableAction> = [];\n\n  private page: number = 1;\n  private params = {};\n\n  hasNext = false;\n  items = [];\n  literals = {\n    ...thfPageDynamicTableLiteralsDefault[util.thfLocaleDefault],\n    ...thfPageDynamicTableLiteralsDefault[util.browserLanguage()]\n  };\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * AÃ§Ãµes da pÃ¡gina e da tabela.\n   */\n  @Input('t-actions') set actions(value: ThfPageDynamicTableActions) {\n    this._actions = value && typeof value === 'object' && Object.keys(value).length > 0 ? value : {};\n\n    this.setPageActions(this.actions);\n    this.setRemoveAllAction();\n    this.setTableActions(this.actions);\n  }\n\n  get actions(): ThfPageDynamicTableActions {\n    return this._actions;\n  }\n\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private thfDialogService: ThfDialogService,\n    private thfNotification: ThfNotificationService,\n    private thfPageDynamicService: ThfPageDynamicService\n    ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (this.activatedRoute.snapshot.data.serviceApi) {\n      this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;\n\n      this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });\n\n      this.loadMetadata();\n    } else {\n      this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });\n\n      this.loadData();\n    }\n  }\n\n  onAdvancedSearch(filter) {\n    this.loadData({ page: 1, ...filter });\n    this.params = filter;\n  }\n\n  onChangeDisclaimers(disclaimers) {\n    const filter = {};\n\n    disclaimers.forEach(disclaimer => {\n      filter[disclaimer.property] = disclaimer.value;\n    });\n\n    this.onAdvancedSearch(filter);\n  }\n\n  onQuickSearch(filter) {\n    this.loadData(filter ? { page: 1, search: filter } : undefined);\n    this.params = filter ? { search: filter } : {};\n  }\n\n  showMore() {\n    this.loadData({ page: ++this.page, ...this.params });\n  }\n\n  get hasActionRemoveAll() {\n    return !!this.actions.removeAll;\n  }\n\n  get pageActions() {\n    return [...this._pageActions];\n  }\n\n  get tableActions() {\n    return this._tableActions;\n  }\n\n  private confirmRemove(item) {\n    const confirmOptions: ThfDialogConfirmOptions = {\n      title: this.literals.confirmRemoveTitle,\n      message: this.literals.confirmRemoveMessage,\n      confirm: this.remove.bind(this, item)\n    };\n\n    this.thfDialogService.confirm(confirmOptions);\n  }\n\n  private confirmRemoveAll() {\n    const confirmOptions: ThfDialogConfirmOptions = {\n      title: this.literals.confirmRemoveAllTitle,\n      message: this.literals.confirmRemoveAllMessage,\n      confirm: this.removeAll.bind(this)\n    };\n\n    this.thfDialogService.confirm(confirmOptions);\n  }\n\n  private formatUniqueKey(item) {\n    const keys = util.mapObjectByProperties(item, this.keys);\n\n    return util.valuesFromObject(keys).join('|');\n  }\n\n  private loadData(params: { page?: number, search?: string } = {}) {\n    if (!this.serviceApi) {\n      this.thfNotification.error(this.literals.loadDataErrorNotification);\n      return;\n    }\n\n    const defaultParams: any = { page: 1, pageSize: 10 };\n    const fullParams: any = { ...defaultParams, ...params };\n\n    this.thfPageDynamicService.getResources(fullParams).toPromise().then((response: any) => {\n      this.items = fullParams.page === 1 ? response.items : [...this.items, ...response.items];\n      this.page = fullParams.page;\n      this.hasNext = response.hasNext;\n    });\n  }\n\n  private loadMetadata() {\n    this.thfPageDynamicService.getMetadata().toPromise().then(response => {\n      this.autoRouter = response.autoRouter;\n      this.actions = response.actions || {};\n      this.breadcrumb = response.breadcrumb || { items : [] };\n      this.fields = response.fields || [];\n      this.title = response.title;\n\n      this.loadData();\n    });\n  }\n\n  // @todo Validar rotas na mÃ£o pois se existir uma rota '**' o catch do navigation nÃ£o funciona.\n  private navigateTo(route: {path: string, component?, url?: string, params?: any}, forceStopAutoRouter: boolean = false) {\n    this.router.navigate([route.url || route.path], { queryParams: route.params })\n      .catch(() => {\n        if (forceStopAutoRouter || !this.autoRouter) {\n          return;\n        }\n\n        this.router.config.unshift(<Route>{\n          path: route.path, component: route.component,  data: { serviceApi: this.serviceApi, autoRouter: true }\n        });\n\n        this.navigateTo(route, true);\n      });\n  }\n\n  private openDetail(path: string, item) {\n    const url = this.resolveUrl(item, path);\n\n    this.navigateTo({ path, url, component: ThfPageDynamicDetailComponent });\n  }\n\n  private openDuplicate(path: string, item) {\n    const duplicates = util.mapObjectByProperties(item, this.duplicates);\n\n    this.navigateTo({ path, params: { duplicate: JSON.stringify(duplicates) } });\n    // this.navigateTo({ path, params: { duplicate: JSON.stringify(duplicates) } , component: ThfPageDynamicEditComponent });\n  }\n\n  private openEdit(path: string, item) {\n    const url = this.resolveUrl(item, path);\n\n    this.navigateTo({ path, url });\n    // this.navigateTo({ path, url, component: ThfPageDynamicEditComponent });\n  }\n\n  private openNew(path: string) {\n    this.navigateTo({ path });\n    // this.navigateTo({ path, component: ThfPageDynamicEditComponent });\n  }\n\n  /**\n   * Caso exista mais de um identificador, serÃ¡ concatenado com '|'.\n   *\n   * Ex: { id: 1, company: 'totvs' }\n   *\n   * Para o endpoint /resources/:id serÃ¡ executada a url /resources/1|totvs\n   */\n  private remove(item) {\n    const uniqueKey = this.formatUniqueKey(item);\n\n    this.thfPageDynamicService.deleteResource(uniqueKey).toPromise().then(() => {\n      this.removeLocalItems([item]);\n\n      this.thfNotification.success(this.literals.removeSuccessNotification);\n    });\n  }\n\n  private removeAll() {\n    // TODO: usar propriedade nova pra validar os itens selecionados\n    const selectedItems = this.items.filter(item => item.$selected);\n\n    if (selectedItems.length === 0) {\n      // TODO: usar propriedade nova pra validar os itens selecionados\n      return;\n    }\n\n    const keysSelectedItems = util.mapArrayByProperties(selectedItems, this.keys);\n\n    this.thfPageDynamicService.deleteResources(keysSelectedItems).toPromise().then(() => {\n      this.removeLocalItems(selectedItems);\n\n      this.thfNotification.success(this.literals.removeAllSuccessNotification);\n    });\n  }\n\n  private removeLocalItems(items = []) {\n    items.forEach(itemRemoved => {\n      const indexItemRemoved = this.items.indexOf(itemRemoved);\n\n      this.items.splice(indexItemRemoved, 1);\n    });\n  }\n\n  private resolveUrl(item: any, path: string) {\n    const uniqueKey = this.formatUniqueKey(item);\n\n    return path.replace(/:id/g, uniqueKey);\n  }\n\n  private setPageActions(actions: ThfPageDynamicTableActions) {\n    if (actions) {\n      this._pageActions = [\n        { label: this.literals.pageAction, action: this.openNew.bind(this, actions.new), disabled: !this._actions.new },\n      ];\n    }\n  }\n\n  private setRemoveAllAction() {\n    if (this._actions.removeAll) {\n      this._pageActions.push({\n      label: this.literals.pageActionRemoveAll, action: this.confirmRemoveAll.bind(this),\n        disabled: !this._actions.removeAll\n      });\n    }\n  }\n\n  private setTableActions(actions: ThfPageDynamicTableActions) {\n    if (actions) {\n      this._tableActions = [\n        { action: this.openDetail.bind(this, actions.detail), label: this.literals.tableActionView, visible: !!this._actions.detail },\n        { action: this.openEdit.bind(this, actions.edit), label: this.literals.tableActionEdit, visible: !!this._actions.edit },\n        { action: this.openDuplicate.bind(this, actions.duplicate), label: this.literals.tableActionDuplicate,\n          visible: !!this._actions.duplicate\n        },\n        { action: this.confirmRemove.bind(this), label: this.literals.tableActionDelete, separator: true, type: 'danger',\n          visible: !!this._actions.remove\n        }\n      ];\n    }\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfTableModule } from '@totvs/thf-ui';\n\nimport { ThfPageDynamicSearchModule } from '../thf-page-dynamic-search/thf-page-dynamic-search.module';\n\nimport { ThfPageDynamicTableComponent } from './thf-page-dynamic-table.component';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-dynamic-search.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n\n    ThfTableModule,\n    ThfPageDynamicSearchModule\n  ],\n  declarations: [\n    ThfPageDynamicTableComponent\n  ],\n  exports: [\n    ThfPageDynamicTableComponent\n  ]\n})\nexport class ThfPageDynamicTableModule { }\n","import { ThfJobSchedulerInternal } from './interfaces/thf-job-scheduler-internal.interface';\n\nexport class ThfPageJobSchedulerInternal implements ThfJobSchedulerInternal {\n\n  periodicity = 'single';\n  firstExecution = new Date();\n  firstExecutionHour = this.getCurrentHour(this.firstExecution);\n  recurrent = true;\n\n  private getCurrentHour(date: Date): string {\n    const hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();\n    const minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();\n\n    return `${hours}:${minutes}`;\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nimport { Input } from '@angular/core';\n\nimport { ThfBreadcrumb } from '@totvs/thf-ui';\n\nimport { ThfJobSchedulerInternal } from './interfaces/thf-job-scheduler-internal.interface';\nimport { ThfPageJobSchedulerInternal } from './thf-page-job-scheduler-internal';\nimport { ThfPageJobSchedulerService } from './thf-page-job-scheduler.service';\n\n/**\n * @description\n *\n * O `thf-page-job-scheduler` Ã© uma pÃ¡gina para criaÃ§Ã£o e atualizaÃ§Ã£o do *Job Scheduler* de forma simplificada, apenas informando\n * o serviÃ§o (endpoint) para consumo, sem a necessidade de criar componentes e tratamentos dos dados.\n */\nexport class ThfPageJobSchedulerBaseComponent {\n\n  /** Objeto com propriedades do breadcrumb. */\n  @Input('t-breadcrumb') breadcrumb?: ThfBreadcrumb = { items: [] };\n\n  /**\n   * Endpoint usado pelo template para requisiÃ§Ã£o do recurso que serÃ¡ utilizado para criaÃ§Ã£o e ediÃ§Ã£o.\n   *\n   * #### Processos\n   *\n   * Em sua inicializaÃ§Ã£o serÃ¡ verificado a existÃªncia do endpoint `{end-point}/processes`.\n   * Caso o endpoint seja vÃ¡lido, serÃ¡ utilizado um componente para selecionar o processo e filtrÃ¡-los.\n   * Caso nÃ£o seja vÃ¡lido, serÃ¡ utilizado um campo de entrada de texto para informar o endpoint.\n   *\n   * Para realizar o filtro de busca do processo, serÃ¡ enviado o conteÃºdo a ser filtrado atravÃ©s da propriedade *search*.\n   * Os processos devem retornar uma lista de objetos que seguem a definiÃ§Ã£o de dados abaixo:\n   *\n   * ```\n   * GET {end-point}/processes?search=ac04\n   * ...\n   * { \"processID\": \"string\", \"description\": \"string\" }\n   * ```\n   *\n   * Para retornar parÃ¢metros dos processos, serÃ¡ realizado um `GET` como exemplificado abaixo.\n   * Os parÃ¢metros devem retornar uma lista de objetos que seguem a interface [ThfDynamicFormField](/documentation/thf-dynamic-form).\n   *\n   * ```\n   * GET {end-point}/processes/:id/parameters\n   * ...\n   * { items: [{ \"property\": \"server\" }, { \"property\": \"program\" }] }\n   * ```\n   *\n   * #### Salvar e Atualizar\n   *\n   * Para salvar o recurso, serÃ¡ feito uma requisiÃ§Ã£o de criaÃ§Ã£o no mesmo endpoint, passando os valores\n   * preenchidos pelo usuÃ¡rio via *payload*. Abaixo uma requisiÃ§Ã£o `POST` disparada,\n   * onde as propriedades do *Job Scheduler* foram preenchidas:\n   *\n   * ```\n   *  POST /api/thf-samples/v1/jobschedulers HTTP/1.1\n   *  Host: localhost:4000\n   *  Connection: keep-alive\n   *  Accept: application/json, text/plain\n   *  ...\n   * ```\n   *\n   * *Request payload*:\n   *\n   * ```\n   * { \"firstExecution\": \"2018-12-07T00:00:01-00:00\", \"recurrent\": true, \"daily\": { \"hour\": 10, \"minute\": 12 }, \"processID\": \"ac0405\" }\n   * ```\n   *\n   * Caso queira que o template carregue um recurso jÃ¡ existente, deve ser incluÃ­do um parÃ¢metro na rota chamado `id`.\n   *\n   * Exemplo de configuraÃ§Ã£o de rota:\n   *\n   * ```\n   *  RouterModule.forRoot([\n   *    ...\n   *    { path: 'edit/:id', component: ExampleJobSchedulerComponent },\n   *    ...\n   *  ],\n   * ```\n   *\n   * Baseado nisso, na inicializaÃ§Ã£o do template serÃ¡ disparado uma requisiÃ§Ã£o para buscar o recurso que serÃ¡ editado.\n   *\n   * ```\n   * GET {end-point}/{id}\n   * ```\n   *\n   * Ao salvar o recurso serÃ¡ disparado um `PUT` com os dados preenchidos. Abaixo uma requisiÃ§Ã£o `PUT` disparada,\n   * onde a propriedade *recurrent* e *daily* foram preenchidas/atualizadas e o `id` da url Ã© 1:\n   *\n   * ```\n   *  PUT /api/thf-samples/v1/jobschedulers/1 HTTP/1.1\n   *  Host: localhost:4000\n   *  Connection: keep-alive\n   *  Accept: application/json, text/plain\n   *  ...\n   * ```\n   *\n   * *Request payload*:\n   *\n   * ```\n   * { \"firstExecution\": \"2018-12-07T00:00:01-00:00\", \"recurrent\": false, \"daily\": { \"hour\": 11, \"minute\": 30 }, \"processID\": \"ac0405\" }\n   * ```\n   */\n  @Input('t-service-api') serviceApi: string;\n\n  /** TÃ­tulo da pÃ¡gina. */\n  @Input('t-title') title: string;\n\n  model: ThfJobSchedulerInternal = new ThfPageJobSchedulerInternal();\n\n  constructor(protected thfPageJobSchedulerService: ThfPageJobSchedulerService) {}\n\n  protected loadData(id: string | number) {\n    if (!id) {\n      this.model = new ThfPageJobSchedulerInternal();\n      return;\n    }\n\n    this.thfPageJobSchedulerService.getResource(id).toPromise().then((response: ThfJobSchedulerInternal) => {\n      this.model = response;\n    }).catch(() => {\n      this.model = new ThfPageJobSchedulerInternal();\n    });\n\n  }\n\n  protected markAsDirtyInvalidControls(controls: { [key: string]: AbstractControl } ) {\n    for (const key in controls) {\n      if (controls.hasOwnProperty(key)) {\n        const control = controls[key];\n\n        if (control.invalid) {\n          control.markAsDirty();\n        }\n      }\n    }\n  }\n\n}\n","export const thfPageJobSchedulerLiteralsDefault = {\n  en: {\n    at: 'at',\n    back: 'Back',\n    next: 'Next',\n    periodicity: 'Periodicity',\n    execution: 'Execution',\n    process: 'Process',\n    enterProcess: 'Enter a process',\n    recurrent: 'Recurrent',\n    single: 'Single',\n    daily: 'Daily',\n    weekly: 'Weekly',\n    monthly: 'Monthly',\n    scheduling: 'Scheduling',\n    parameterization: 'Parameterization',\n    conclude: 'Conclude',\n    firstExecution: 'First Execution',\n    hour: 'Hour',\n    day: 'Day',\n    weekDays: 'Week days',\n    sunday: 'Sunday',\n    monday: 'Monday',\n    tuesday: 'Tuesday',\n    wednesday: 'Wednesday',\n    thursday: 'Thursday',\n    friday: 'Friday',\n    saturday: 'Saturday',\n    parameters: 'Parameters',\n    yes: 'Yes',\n    no: 'No',\n    notReported: 'Not reported',\n    periodicityData: 'Periodicity data',\n    confirmation: 'Confirmation',\n    confirmSaveMessage: 'Are you sure you want to complete this schedule?',\n    confirmUpdateMessage: 'Are you sure you want to update this schedule?',\n    saveNotificationSuccessUpdate: 'Successfully updated scheduling',\n    saveNotificationSuccessSave: 'Successfully saved scheduling',\n    parametersNotFound: 'Parameters not found.'\n  },\n  es: {\n    at: 'a las',\n    back: 'Volver',\n    next: 'Avanzar',\n    periodicity: 'Periodicidad',\n    execution: 'EjecuciÃ³n',\n    process: 'Proceso',\n    enterProcess: 'Informe un proceso',\n    recurrent: 'Recurrente',\n    single: 'Ãnica',\n    daily: 'Diaria',\n    weekly: 'Semanal',\n    monthly: 'Mensual',\n    scheduling: 'ProgramaciÃ³n',\n    parameterization: 'ParametrizaciÃ³n',\n    conclude: 'Completar',\n    firstExecution: 'Primera ejecuciÃ³n',\n    hour: 'Horario',\n    day: 'DÃ­a',\n    weekDays: 'Dias de la semana',\n    sunday: 'Domingo',\n    monday: 'Lunes',\n    tuesday: 'Martes',\n    wednesday: 'MiÃ©rcoles',\n    thursday: 'Jueves',\n    friday: 'Viernes',\n    saturday: 'SÃ¡bado',\n    parameters: 'ParÃ¡metros',\n    yes: 'SÃ­',\n    no: 'No',\n    notReported: 'No informado',\n    periodicityData: 'Dados da periodicidade',\n    confirmation: 'ConfirmaciÃ³n',\n    confirmSaveMessage: 'Â¿EstÃ¡ seguro de que desea completar esta programaciÃ³n de proceso?',\n    confirmUpdateMessage: 'Â¿EstÃ¡ seguro de que desea cambiar esta programaciÃ³n de proceso?',\n    saveNotificationSuccessUpdate: 'ProgramaciÃ³n de proceso actualizada con Ã©xito.',\n    saveNotificationSuccessSave: 'ProgramaciÃ³n de proceso salvo con Ã©xito.',\n    parametersNotFound: 'No se encontraron parÃ¡metros.'\n  },\n  pt: {\n    at: 'Ã s',\n    back: 'Voltar',\n    next: 'AvanÃ§ar',\n    periodicity: 'Periodicidade',\n    execution: 'ExecuÃ§Ã£o',\n    process: 'Processo',\n    enterProcess: 'Informe um processo',\n    recurrent: 'Recorrente',\n    single: 'Ãnica',\n    daily: 'DiÃ¡ria',\n    weekly: 'Semanal',\n    monthly: 'Mensal',\n    scheduling: 'Agendamento',\n    parameterization: 'ParametrizaÃ§Ã£o',\n    conclude: 'Concluir',\n    firstExecution: 'Primeira execuÃ§Ã£o',\n    hour: 'HorÃ¡rio',\n    day: 'Dia',\n    weekDays: 'Dias de semana',\n    sunday: 'Domingo',\n    monday: 'Segunda-feira',\n    tuesday: 'TerÃ§a-feira',\n    wednesday: 'Quarta-feira',\n    thursday: 'Quinta-feira',\n    friday: 'Sexta-feira',\n    saturday: 'SÃ¡bado',\n    parameters: 'ParÃ¢metros',\n    yes: 'Sim',\n    no: 'NÃ£o',\n    notReported: 'NÃ£o informado',\n    periodicityData: 'Dados da periodicidade',\n    confirmation: 'ConfirmaÃ§Ã£o',\n    confirmSaveMessage: 'Tem certeza que deseja concluir este agendamento de processo?',\n    confirmUpdateMessage: 'Tem certeza que deseja alterar este agendamento de processo?',\n    saveNotificationSuccessUpdate: 'Agendamento de processo atualizado com sucesso.',\n    saveNotificationSuccessSave: 'Agendamento de processo salvo com sucesso.',\n    parametersNotFound: 'ParÃ¢metros nÃ£o foram encontrados.'\n  }\n};\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { addZero, convertDateToISOExtended } from '../../utils/util';\nimport { ThfDynamicFormField } from '@totvs/thf-ui';\n\nimport { ThfJobScheduler } from './interfaces/thf-job-scheduler.interface';\nimport { ThfJobSchedulerInternal } from './interfaces/thf-job-scheduler-internal.interface';\n\n@Injectable()\nexport class ThfPageJobSchedulerService {\n\n  private endpoint = '/';\n\n  readonly headers: HttpHeaders = new HttpHeaders({\n    'X-TOTVS-SCREEN-LOCK': 'true'\n  });\n\n  constructor(private http: HttpClient) { }\n\n  configServiceApi(config: { endpoint?: string } = {}) {\n    this.endpoint = config.endpoint;\n  }\n\n  // Cria um recurso\n  createResource(resource): Observable<any> {\n    const jobScheduler = this.convertToJobScheduler(resource);\n\n    return this.http.post(`${this.endpoint}`, jobScheduler, { headers: this.headers });\n  }\n\n  getHeadProcesses() {\n    const headers = { 'X-Totvs-No-Error': 'true' };\n\n    return this.http.head(`${this.endpoint}/processes`, { headers });\n  }\n\n  // Busca parametros pelo processo id\n  getParametersByProcess(processId: string | number): Observable<any> {\n    return this.http.get(`${this.endpoint}/processes/${processId}/parameters`, { headers: this.headers })\n    .pipe(map((resource: { items: Array<ThfDynamicFormField> }) => resource.items));\n  }\n\n  // Busca um Ãºnico recurso\n  getProcess(id: string | number): Observable<any> {\n    return this.http.get(`${this.endpoint}/processes/${id}`, { headers: this.headers });\n  }\n\n  // Busca uma lista de processos\n  getProcesses(params: {} = {}): Observable<any> {\n    return this.http.get(`${this.endpoint}/processes`, { params });\n  }\n\n  // Busca um Ãºnico recurso\n  getResource(id: string | number): Observable<any> {\n    return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers })\n      .pipe(map(resource => this.convertToJobSchedulerInternal(resource)));\n  }\n\n  // Atualiza um recurso\n  updateResource(id, resource): Observable<any> {\n    const jobScheduler = this.convertToJobScheduler(resource);\n\n    return this.http.put(`${this.endpoint}/${id}`, jobScheduler, { headers: this.headers });\n  }\n\n  private convertToJobScheduler(jobSchedulerInternal): ThfJobScheduler {\n    const jobScheduler = { ...jobSchedulerInternal };\n\n    if (jobSchedulerInternal.periodicity) {\n\n      if (jobSchedulerInternal.periodicity === 'single') {\n        jobScheduler.recurrent = false;\n      } else {\n        Object.assign(jobScheduler, this.convertToPeriodicity(jobSchedulerInternal));\n      }\n\n    }\n\n    if (jobSchedulerInternal.firstExecutionHour) {\n      jobScheduler.firstExecution =\n        this.replaceHourFirstExecution(jobSchedulerInternal.firstExecution, jobSchedulerInternal.firstExecutionHour);\n    }\n\n    if (!Object.keys(this.returnValidExecutionParameter(jobScheduler.executionParameter)).length) {\n      delete jobScheduler.executionParameter;\n    }\n\n    this.removeInvalidKeys(jobScheduler);\n\n    return jobScheduler;\n  }\n\n  private convertToJobSchedulerInternal(jobScheduler = <any> {}): ThfJobSchedulerInternal {\n    const jobSchedulerInternal = { ...jobScheduler };\n\n    if (jobScheduler.firstExecution) {\n      jobSchedulerInternal.firstExecutionHour = this.getHourFirstExecution(jobScheduler.firstExecution);\n    }\n\n    Object.assign(jobSchedulerInternal, this.convertToPeriodicityInternal(jobScheduler));\n\n    this.removeInvalidKeys(jobSchedulerInternal, ['weekly', 'monthly', 'daily']);\n\n    return jobSchedulerInternal;\n  }\n\n  private convertToPeriodicity(value: { periodicity: string , dayOfMonth?: string, daysOfWeek?: number, hour?: string }) {\n    const newValue = {};\n    const valuePeriodicity = value.periodicity;\n\n    if (valuePeriodicity) {\n      newValue[valuePeriodicity] = {};\n\n      if (valuePeriodicity === 'monthly') {\n        newValue[valuePeriodicity].day = value.dayOfMonth ? parseInt(value.dayOfMonth, 10) : 0;\n      } else if (valuePeriodicity === 'weekly') {\n        newValue[valuePeriodicity].daysOfWeek = value.daysOfWeek;\n      }\n\n      newValue[valuePeriodicity].hour = value.hour ? parseInt(value.hour.split(':')[0], 10) : 0;\n      newValue[valuePeriodicity].minute = value.hour ? parseInt(value.hour.split(':')[1], 10) : 0;\n    }\n\n    return newValue;\n  }\n\n  private convertToPeriodicityInternal(value = <any> {}) {\n    if (value.monthly) {\n      return {\n        periodicity: 'monthly',\n        hour: `${addZero(value.monthly.hour)}:${addZero(value.monthly.minute)}`,\n        dayOfMonth: value.monthly.day\n      };\n    } else if (value.daily) {\n      return {\n        periodicity: 'daily',\n        hour: `${addZero(value.daily.hour)}:${addZero(value.daily.minute)}`\n      };\n    } else if (value.weekly) {\n      return {\n        periodicity: 'weekly',\n        hour: `${addZero(value.weekly.hour)}:${addZero(value.weekly.minute)}`,\n        daysOfWeek: [...value.weekly.daysOfWeek]\n      };\n    } else {\n      return {\n        periodicity: 'single'\n      };\n    }\n  }\n\n  private getCurrentHour(date: Date): string {\n    const hours = addZero(date.getHours());\n    const minutes = addZero(date.getMinutes());\n\n    return `${hours}:${minutes}`;\n  }\n\n  private getHourFirstExecution(firstExecutionDate: string): string {\n    return this.getCurrentHour(new Date(firstExecutionDate));\n  }\n\n  private removeInvalidKeys(value: object, keys?: Array<string>) {\n    const invalidKeys = keys || ['periodicity', 'hour', 'minute', 'day', 'daysOfWeek', 'dayOfMonth', 'firstExecutionHour'];\n\n    Object.keys(value).forEach(key => {\n      if (invalidKeys.includes(key)) {\n        delete value[key];\n      }\n    });\n  }\n\n  private replaceHourFirstExecution(date: string, time: string): string {\n    const firstExecutionDate = new Date(date);\n\n    const timeSplited = time.split(':');\n\n    const hours = parseInt(timeSplited[0], 10);\n    const minutes = parseInt(timeSplited[1], 10);\n\n    firstExecutionDate.setHours(hours, minutes);\n\n    return convertDateToISOExtended(firstExecutionDate);\n  }\n\n  private returnValidExecutionParameter(parameter: object) {\n    const newParameter = { ...parameter };\n\n    for (const key in newParameter) {\n      if (newParameter.hasOwnProperty(key) && newParameter[key] === undefined) {\n        delete newParameter[key];\n      }\n    }\n\n    return newParameter;\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { ThfLookupFilter } from '@totvs/thf-ui';\n\nimport { ThfPageJobSchedulerService } from './thf-page-job-scheduler.service';\n\n@Injectable()\nexport class ThfPageJobSchedulerLookupService implements ThfLookupFilter {\n\n  constructor(private thfPageJobSchedulerService: ThfPageJobSchedulerService) { }\n\n  getFilteredData(search: string, page: number, pageSize: number): Observable<any> {\n    const params = { page, pageSize, search };\n\n    return this.thfPageJobSchedulerService.getProcesses(params);\n  }\n\n  getObjectByValue(processId: string): Observable<any> {\n    return this.thfPageJobSchedulerService.getProcess(processId);\n  }\n\n}\n","import { ActivatedRoute, Router } from '@angular/router';\nimport { Component, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\nimport { Observable } from 'rxjs';\n\nimport {\n  ThfDialogService,\n  ThfDynamicFormField,\n  ThfNotificationService,\n  ThfPageAction,\n  ThfStepperItem,\n  ThfStepperStatus\n} from '@totvs/thf-ui';\n\nimport * as util from './../../utils/util';\n\nimport { ThfJobSchedulerInternal } from './interfaces/thf-job-scheduler-internal.interface';\nimport { ThfPageJobSchedulerInternal } from './thf-page-job-scheduler-internal';\nimport { ThfPageJobSchedulerBaseComponent } from './thf-page-job-scheduler-base.component';\nimport { thfPageJobSchedulerLiteralsDefault } from './thf-page-job-scheduler-literals';\nimport { ThfPageJobSchedulerLookupService } from './thf-page-job-scheduler-lookup.service';\nimport { ThfPageJobSchedulerService } from './thf-page-job-scheduler.service';\n\n/**\n * @docsExtends ThfPageJobSchedulerBaseComponent\n *\n * @example\n *\n * <example name=\"thf-page-job-scheduler-basic\" title=\"Totvs Page Job Scheduler Basic\">\n *  <file name=\"sample-thf-page-job-scheduler-basic/sample-thf-page-job-scheduler-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-job-scheduler-basic/sample-thf-page-job-scheduler-basic.component.ts\"> </file>\n * </example>\n *\n */\n@Component({\n  selector: 'thf-page-job-scheduler',\n  templateUrl: './thf-page-job-scheduler.component.html',\n  encapsulation: ViewEncapsulation.None,\n  styles: [`\n    thf-container .thf-container {\n      overflow-y: unset;\n    }\n  `]\n})\nexport class ThfPageJobSchedulerComponent extends ThfPageJobSchedulerBaseComponent implements OnInit {\n\n  isEdit = false;\n  literals = {\n    ...thfPageJobSchedulerLiteralsDefault[util.thfLocaleDefault],\n    ...thfPageJobSchedulerLiteralsDefault[util.browserLanguage()]\n  };\n  parameters: Array<ThfDynamicFormField> = [];\n  saveOperation: Observable<any>;\n  step: number = 1;\n\n  private backPageAction: ThfPageAction = {\n    label: this.literals.back,\n    action: this.nextStepOperation.bind(this, 'back'),\n    disabled: this.isDisabledBack.bind(this)\n  };\n\n  private concludePageActions: Array<ThfPageAction> = [\n    {\n      label: this.literals.conclude,\n      action: this.confirmJobScheduler.bind(this)\n    },\n    { ...this.backPageAction }\n  ];\n\n  private nextPageActions: Array<ThfPageAction> = [\n    {\n      label: this.literals.next,\n      action: this.nextStepOperation.bind(this, 'next'),\n      disabled: this.isDisabledAdvance.bind(this)\n    },\n    { ...this.backPageAction }\n  ];\n\n  jobSchedulerActions: Array<ThfPageAction> = [\n    ...this.nextPageActions\n  ];\n\n  readonly steps: Array<ThfStepperItem> = [\n    { label: this.literals.scheduling },\n    { label: this.literals.parameterization },\n    { label: this.literals.conclude }\n  ];\n\n  @ViewChild('schedulerExecution', { static: true }) schedulerExecution: { form: NgForm };\n  @ViewChild('schedulerParameters', { static: true }) schedulerParameters: { form: NgForm };\n\n  constructor(\n    public thfPageDynamicLookupService: ThfPageJobSchedulerLookupService,\n    private activatedRoute: ActivatedRoute,\n    private thfDialogService: ThfDialogService,\n    private thfNotification: ThfNotificationService,\n    private router: Router,\n    thfPageJobSchedulerService: ThfPageJobSchedulerService) {\n      super(thfPageJobSchedulerService);\n    }\n\n  get stepperOrientation(): 'horizontal' | 'vertical' {\n    return window.innerWidth > 481 && window.innerWidth < 960 ? 'horizontal' : 'vertical';\n  }\n\n  ngOnInit() {\n    const paramId = this.activatedRoute.snapshot.params['id'];\n\n    this.isEdit = !!paramId;\n\n    this.thfPageJobSchedulerService.configServiceApi({ endpoint: this.serviceApi });\n\n    this.loadData(paramId);\n  }\n\n  changePageActionsBySteps(currentStep: number, nextStep: number) {\n    const stepsLength = this.steps.length;\n\n    if (nextStep === stepsLength) {\n    this.jobSchedulerActions = [ ...this.concludePageActions ];\n\n    } else if (currentStep === stepsLength && nextStep < currentStep) {\n\n    this.jobSchedulerActions = [ ...this.nextPageActions ];\n    }\n  }\n\n  nextStep(stepNumber: number) {\n\n    if (stepNumber > 1 && this.schedulerExecution.form.invalid) {\n      this.markAsDirtyInvalidControls(this.schedulerExecution.form.controls);\n      return;\n    }\n\n    if (stepNumber > 2 && (this.schedulerParameters && this.schedulerParameters.form && this.schedulerParameters.form.invalid)) {\n      this.markAsDirtyInvalidControls(this.schedulerParameters.form.controls);\n      return;\n    }\n\n    this.changePageActionsBySteps(this.step, stepNumber);\n\n    const steps = this.steps[this.step - 1];\n    this.step = stepNumber;\n\n    if (steps) {\n      steps.status = ThfStepperStatus.Done;\n    }\n  }\n\n  onChangeProcess(process: { processId: string, existAPI: boolean }) {\n    if (process.existAPI && process.processId) {\n      this.getParametersByProcess(process.processId);\n\n      if (!this.isEdit) {\n        this.model.executionParameter = {};\n      }\n\n      return;\n    }\n\n  }\n\n  private confirmJobScheduler() {\n    const paramId = this.activatedRoute.snapshot.params['id'];\n\n    const confirmMessage = paramId ? this.literals.confirmUpdateMessage : this.literals.confirmSaveMessage;\n\n    this.thfDialogService.confirm({\n      title: this.literals.confirmation,\n      message: confirmMessage,\n      confirm: () => {\n        const model = Object.assign({}, this.model);\n\n        this.save(model, paramId);\n      }\n    });\n\n  }\n\n  private async emitSuccessMessage(msgSuccess: any, saveOperation: Observable<any>) {\n    await saveOperation.toPromise();\n    this.thfNotification.success(msgSuccess);\n    this.resetJobSchedulerForm();\n  }\n\n  private getParametersByProcess(process: any) {\n\n    this.thfPageJobSchedulerService.getParametersByProcess(process).subscribe(parameters => {\n      this.parameters = parameters;\n    });\n\n  }\n\n  private isDisabledAdvance(): boolean {\n    return this.schedulerExecution ? this.schedulerExecution.form.invalid : false;\n  }\n\n  private isDisabledBack(): boolean {\n    return this.step === 1;\n  }\n\n  private nextStepOperation(operation?: 'back' | 'next') {\n    const stepNumber = operation === 'back' ? this.step - 1 : this.step + 1;\n\n    this.nextStep(stepNumber);\n  }\n\n  private resetJobSchedulerForm() {\n    this.schedulerExecution.form.reset();\n\n    // radiogroup nÃ£o estava atribuindo novo valor, fica vermelho sem o timetout.\n    setTimeout(() => {\n      this.model = new ThfPageJobSchedulerInternal();\n\n      this.step = 1;\n      this.steps.forEach(step => {\n        step.status = ThfStepperStatus.Default;\n      });\n\n      this.jobSchedulerActions = [...this.nextPageActions];\n    });\n\n  }\n\n  private save(model: ThfJobSchedulerInternal, paramId) {\n    const saveOperation = paramId\n      ? this.thfPageJobSchedulerService.updateResource(paramId, model)\n      : this.thfPageJobSchedulerService.createResource(model);\n\n    const msgSuccess = paramId ? this.literals.saveNotificationSuccessUpdate : this.literals.saveNotificationSuccessSave;\n\n    this.emitSuccessMessage(msgSuccess, saveOperation);\n  }\n\n}\n","import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\nimport { ThfCheckboxGroupOption, ThfRadioGroupOption } from '@totvs/thf-ui';\n\nimport { isTypeof } from '../../../utils/util';\n\nimport { ThfPageJobSchedulerLookupService } from '../thf-page-job-scheduler-lookup.service';\nimport { ThfPageJobSchedulerService } from '../thf-page-job-scheduler.service';\n\n@Component({\n  selector: 'thf-page-job-scheduler-execution',\n  templateUrl: 'thf-page-job-scheduler-execution.component.html'\n})\nexport class ThfPageJobSchedulerExecutionComponent implements OnInit, AfterViewInit {\n\n  private _value: any = {};\n\n  dayPattern = '^(3[0-1]|[0-2][0-9]|[1-9]|0[1-9])$';\n  existProcessAPI = true;\n  minDateFirstExecution = new Date();\n  periodicityOptions: Array<ThfRadioGroupOption> = [];\n  periodicityTemplates: { daily: TemplateRef<any>, weekly: TemplateRef<any>, monthly: TemplateRef<any> } ;\n  timePattern = '^(2[0-3]|[01][0-9]):?([0-5][0-9])$';\n  weekDays: Array<ThfCheckboxGroupOption> = [];\n\n  @ViewChild('formExecution', { static: true }) form: NgForm;\n\n  // templates\n  @ViewChild('dailyTemplate', { static: true }) dailyTemplate;\n  @ViewChild('monthlyTemplate', { static: true }) monthlyTemplate;\n  @ViewChild('weeklyTemplate', { static: true }) weeklyTempalte;\n\n  @Input('t-is-edit') isEdit: boolean = false;\n\n  @Input('t-literals') literals = <any> {};\n\n  @Input('t-value') set value(value: any) {\n    this._value = value && isTypeof(value, 'object') ? value : {};\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  @Output('t-change-process') changeProcess: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private thfPageJobSchedulerService: ThfPageJobSchedulerService,\n    public thfPageJobSchedulerLookup: ThfPageJobSchedulerLookupService) { }\n\n  get startDateFirstExecution() {\n    return this.isEdit ? undefined : this.minDateFirstExecution;\n  }\n\n  ngAfterViewInit() {\n\n    setTimeout(() => {\n      this.subscribeProcessIdValueChanges();\n    });\n\n  }\n\n  ngOnInit() {\n    this.periodicityTemplates = {\n      daily: this.dailyTemplate,\n      monthly: this.monthlyTemplate,\n      weekly: this.weeklyTempalte\n    };\n\n    this.checkExistsProcessesAPI();\n\n    this.periodicityOptions = this.getPeriodicityOptions();\n    this.weekDays = this.getWeekDays();\n  }\n\n  private checkExistsProcessesAPI() {\n    this.thfPageJobSchedulerService.getHeadProcesses().subscribe(undefined, error => {\n      this.existProcessAPI = false;\n    });\n  }\n\n  private getPeriodicityOptions() {\n    return [\n      { label: this.literals.single, value: 'single' },\n      { label: this.literals.daily, value: 'daily' },\n      { label: this.literals.weekly, value: 'weekly' },\n      { label: this.literals.monthly, value: 'monthly' }\n    ];\n  }\n\n  private getWeekDays() {\n    return [\n      { label: this.literals.sunday, value: 'Sunday' },\n      { label: this.literals.monday, value: 'Monday' },\n      { label: this.literals.tuesday, value: 'Tuesday' },\n      { label: this.literals.wednesday, value: 'Wednesday' },\n      { label: this.literals.thursday, value: 'Thursday' },\n      { label: this.literals.friday, value: 'Friday' },\n      { label: this.literals.saturday, value: 'Saturday' }\n    ];\n  }\n\n  private subscribeProcessIdValueChanges() {\n    this.form.controls['processID'].valueChanges.subscribe(processId => {\n      this.changeProcess.emit({ processId, existAPI: this.existProcessAPI });\n    });\n  }\n\n}\n","import { AfterViewInit, Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\nimport { ThfDynamicFormField } from '@totvs/thf-ui';\n\n@Component({\n  selector: 'thf-page-job-scheduler-parameters',\n  templateUrl: 'thf-page-job-scheduler-parameters.component.html'\n})\nexport class ThfPageJobSchedulerParametersComponent implements AfterViewInit {\n\n  @ViewChild('parametersForm', { static: true }) form: NgForm;\n\n  @Input('t-literals') literals = <any> {};\n\n  @Input('t-parameters') parameters: Array<ThfDynamicFormField> = [];\n\n  @Input('t-value') value;\n\n  @Output('t-valueChange') valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  ngAfterViewInit() {\n    if (this.form) {\n      setTimeout(() => {\n\n        this.form.valueChanges.subscribe(value => {\n          this.valueChange.emit(value);\n        });\n\n      });\n    }\n  }\n\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\nimport { ThfDynamicViewField, ThfInfoOrientation } from '@totvs/thf-ui';\n\nimport { ThfJobSchedulerInternal } from '../interfaces/thf-job-scheduler-internal.interface';\n\n@Component({\n  selector: 'thf-page-job-scheduler-summary',\n  templateUrl: 'thf-page-job-scheduler-summary.component.html'\n})\nexport class ThfPageJobSchedulerSummaryComponent implements OnInit {\n\n  executionValue = '';\n  firstExecutionValue = '';\n  infoOrientation = ThfInfoOrientation.Horizontal;\n  periodicityValue = '';\n  recurrentValue = '';\n\n  @Input('t-literals') literals = <any> {};\n\n  @Input('t-parameters') parameters: Array<ThfDynamicViewField> = [];\n\n  @Input('t-value') value: ThfJobSchedulerInternal = <any> {};\n\n  constructor(private datePipe: DatePipe) {}\n\n  ngOnInit() {\n    const { periodicity, hour, dayOfMonth, daysOfWeek, recurrent, firstExecution, firstExecutionHour } = this.value;\n\n    this.periodicityValue = this.getPeriodicityLabel(periodicity);\n    this.executionValue = this.getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth);\n    this.firstExecutionValue = this.getFirstExecutionLabel(firstExecution, firstExecutionHour);\n    this.recurrentValue = this.getRecurrentValue(recurrent);\n  }\n\n  private getExecutionValue(periodicity: string, hour?: string, daysOfWeek?: Array<string>, dayOfMonth?: number) {\n    switch (periodicity) {\n      case 'daily':\n        return this.getHourLabel(hour);\n      case 'monthly':\n        return this.getMonthlyLabelExecution(dayOfMonth, hour);\n      case 'weekly':\n        return this.getWeeklyLabelExecution(daysOfWeek, hour);\n      default:\n        return this.literals.notReported;\n    }\n  }\n\n  private getFirstExecutionLabel(firstExecution: Date, firstExecutionHour?: string): string {\n    if (firstExecution) {\n      const date = this.datePipe.transform(firstExecution, 'dd/MM/yyyy', '-0200');\n\n      return `${date} ${this.getHourLabel(firstExecutionHour)}`;\n    } else {\n      return this.literals.notReported;\n    }\n  }\n\n  private getHourLabel(hour: string) {\n    return `${this.literals.at} ${hour || '00:00'}h`;\n  }\n\n  private getMonthlyLabelExecution(dayOfMonth: number, hour: string) {\n    const hourLabel = this.getHourLabel(hour);\n\n    return `${this.literals.day} ${dayOfMonth} ${hourLabel}`;\n  }\n\n  private getPeriodicityLabel(periodicity) {\n    switch (periodicity) {\n      case 'daily':\n        return this.literals.daily;\n      case 'monthly':\n        return this.literals.monthly;\n      case 'weekly':\n        return this.literals.weekly;\n      default:\n        return this.literals.single;\n    }\n  }\n\n  private getRecurrentValue(recurrent: boolean): string {\n    return recurrent ? this.literals.yes : this.literals.no;\n  }\n\n  private getSorterWeekDays() {\n    return {\n      'sunday': 0,\n      'monday': 1,\n      'tuesday': 2,\n      'wednesday': 3,\n      'thursday': 4,\n      'friday': 5,\n      'saturday': 6\n    };\n  }\n\n  private getTranslateWeekDay(day: string): string {\n    const days = {\n      Sunday: this.literals.sunday,\n      Monday: this.literals.monday,\n      Tuesday: this.literals.tuesday,\n      Wednesday: this.literals.wednesday,\n      Thursday: this.literals.thursday,\n      Friday: this.literals.friday,\n      Saturday: this.literals.saturday,\n    };\n\n    return days[day] || '';\n  }\n\n  private getWeekDaysLabel(days: Array<string> = []): string {\n    const weekDaysSorted = this.sortWeekDays(days);\n\n    return weekDaysSorted.map(day => this.getTranslateWeekDay(day)).join(', ');\n  }\n\n  private getWeeklyLabelExecution(daysOfWeek: Array<string>, hour: string) {\n    if (daysOfWeek && Array.isArray(daysOfWeek)) {\n      return `${this.getWeekDaysLabel(daysOfWeek)} ${this.getHourLabel(hour)}`;\n    } else {\n      return this.literals.notReported;\n    }\n  }\n\n  private sortWeekDays(days: Array<string> = []) {\n    const sorterWeekDays = this.getSorterWeekDays();\n\n    return days.sort((a: string, b: string) => {\n      const currDay = a.toLowerCase();\n      const nextDay = b.toLowerCase();\n\n      return sorterWeekDays[currDay] > sorterWeekDays[nextDay] ? 1 : -1;\n    });\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\n\nimport {\n  ThfButtonModule,\n  ThfContainerModule,\n  ThfDialogModule,\n  ThfDividerModule,\n  ThfDynamicModule,\n  ThfFieldModule,\n  ThfInfoModule,\n  ThfPageModule,\n  ThfStepperModule,\n  ThfWidgetModule\n} from '@totvs/thf-ui';\n\nimport { ThfPageJobSchedulerComponent } from './thf-page-job-scheduler.component';\nimport { ThfPageJobSchedulerExecutionComponent } from './thf-page-job-scheduler-execution/thf-page-job-scheduler-execution.component';\nimport { ThfPageJobSchedulerLookupService } from './thf-page-job-scheduler-lookup.service';\nimport { ThfPageJobSchedulerParametersComponent } from './thf-page-job-scheduler-parameters/thf-page-job-scheduler-parameters.component';\nimport { ThfPageJobSchedulerService } from './thf-page-job-scheduler.service';\nimport { ThfPageJobSchedulerSummaryComponent } from './thf-page-job-scheduler-summary/thf-page-job-scheduler-summary.component';\n\n@NgModule({\n  declarations: [\n    ThfPageJobSchedulerComponent,\n    ThfPageJobSchedulerExecutionComponent,\n    ThfPageJobSchedulerParametersComponent,\n    ThfPageJobSchedulerSummaryComponent\n  ],\n  exports: [\n    ThfPageJobSchedulerComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ThfButtonModule,\n    ThfContainerModule,\n    ThfDialogModule,\n    ThfDividerModule,\n    ThfDynamicModule,\n    ThfFieldModule,\n    ThfInfoModule,\n    ThfPageModule,\n    ThfStepperModule,\n    ThfWidgetModule\n  ],\n  providers: [\n    ThfPageJobSchedulerService,\n    ThfPageJobSchedulerLookupService\n  ]\n})\nexport class ThfPageJobSchedulerModule { }\n","/**\n * @usedBy ThfPageLoginComponent\n *\n * @description\n *\n * *Enum* para definiÃ§Ã£o do tipo de autenticaÃ§Ã£o.\n */\nexport enum ThfPageLoginAuthenticationType {\n\n  /** AutenticaÃ§Ã£o Basic */\n  Basic = 'Basic',\n\n  /** AutenticaÃ§Ã£o Bearer */\n  Bearer = 'Bearer',\n\n}\n","import { Subscription } from 'rxjs';\nimport { EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { browserLanguage, convertToBoolean, convertToInt, isExternalLink, isTypeof, thfLocaleDefault } from './../../utils/util';\n\nimport { ThfPageLogin } from './interfaces/thf-page-login.interface';\nimport { ThfPageLoginAuthenticationType } from './enums/thf-page-login-authentication-type.enum';\nimport { ThfPageLoginCustomField } from './interfaces/thf-page-login-custom-field.interface';\nimport { ThfPageLoginLiterals } from './interfaces/thf-page-login-literals.interface';\nimport { ThfPageLoginRecovery } from './interfaces/thf-page-login-recovery.interface';\nimport { ThfPageLoginService } from './thf-page-login.service';\n\nconst thfPageLoginContentMaxLength = 40;\n\nexport const thfPageLoginLiteralsDefault = {\n  en: <ThfPageLoginLiterals> {\n    title: 'Welcome',\n    loginErrorPattern: 'Invalid Login',\n    loginHint: `Your login user was given to you at your first day.\n    If you don't have this information contact support`,\n    loginPlaceholder: 'Insert your e-mail',\n    passwordErrorPattern: 'Invalid Password',\n    passwordPlaceholder: 'Insert your password',\n    customFieldErrorPattern: 'Invalid value',\n    customFieldPlaceholder: 'Please enter a value',\n    rememberUser: 'Automatic login',\n    rememberUserHint: 'You can disable this option in system configuration',\n    submitLabel: 'Enter',\n    submittedLabel: 'Loading...',\n    forgotPassword: 'Forgot your Password?',\n    highlightInfo: '',\n    registerUrl: 'New register',\n    titlePopover: 'Oops!',\n    forgotYourPassword: 'Forgot your password?',\n    ifYouTryHarder: 'If you try ',\n    attempts: '{0} more time(s) ',\n    yourUserWillBeBlocked: 'without success your user will be blocked and you will be left 24 hours without being able to access :(',\n    createANewPasswordNow: 'Better create a new password now! You will be able to log into the system right away.',\n    iForgotMyPassword: 'I forgot my password'\n  },\n  es: <ThfPageLoginLiterals> {\n    title: 'Bienvenido',\n    loginErrorPattern: 'Login invÃ¡lido',\n    loginHint: `Su usuario ha sido entregado para usted en su primer dÃ­a.\n    Si no tiene esta informaciÃ³n, pÃ³ngase en contacto con el soporte tÃ©cnico`,\n    loginPlaceholder: 'Inserte su e-mail',\n    passwordErrorPattern: 'ContraseÃ±a invÃ¡lida',\n    passwordPlaceholder: 'Inserte su contraseÃ±a',\n    customFieldErrorPattern: 'Valor no vÃ¡lido.',\n    customFieldPlaceholder: 'Por favor introduzca un valor',\n    rememberUser: 'Inicio de sesiÃ³n automÃ¡ticamente',\n    rememberUserHint: 'Puede deshabilitar esta opciÃ³n en el menÃº del sistema.',\n    submitLabel: 'Entrar',\n    submittedLabel: 'Cargando...',\n    forgotPassword: 'Olvidaste tu contraseÃ±a?',\n    highlightInfo: '',\n    registerUrl: 'Nuevo registro',\n    titlePopover: 'Opa!',\n    forgotYourPassword: 'Olvidaste tu contraseÃ±a?',\n    ifYouTryHarder: 'Si intenta mÃ¡s ',\n    attempts: '{0} vez/veces ',\n    yourUserWillBeBlocked: 'sin Ã©xito su usuario sera bloqueado y usted vÃ¡s permanecer 24 horas sin poder acceder a :(',\n    createANewPasswordNow: 'Â¡Mejor crear una nueva contraseÃ±a ahora! Usted podrÃ¡ entrar en el sistema inmediatamente despuÃ©s.',\n    iForgotMyPassword: 'Olvide mi contraseÃ±a'\n  },\n  pt: <ThfPageLoginLiterals> {\n    title: 'Bem-vindo',\n    loginErrorPattern: 'Login invÃ¡lido',\n    loginHint: `Seu usuÃ¡rio foi entregue a vocÃª no seu primeiro dia.\n    Caso nÃ£o tenha mais essa informaÃ§Ã£o contacte o suporte`,\n    loginPlaceholder: 'Insira seu e-mail',\n    passwordErrorPattern: 'Senha invÃ¡lida',\n    passwordPlaceholder: 'Insira sua senha',\n    customFieldErrorPattern: 'Valor invÃ¡lido.',\n    customFieldPlaceholder: 'Por favor insira um valor',\n    rememberUser: 'Logar automaticamente',\n    rememberUserHint: 'VocÃª pode desabilitar essa opÃ§Ã£o no menu do sistema',\n    submitLabel: 'Entrar',\n    submittedLabel: 'Carregando...',\n    forgotPassword: 'Esqueceu sua senha?',\n    highlightInfo: '',\n    registerUrl: 'Novo registro',\n    titlePopover: 'Opa!',\n    forgotYourPassword: 'Esqueceu sua senha?',\n    ifYouTryHarder: 'Se tentar mais ',\n    attempts: '{0} vez(es) ',\n    yourUserWillBeBlocked: 'sem sucesso seu usuÃ¡rio serÃ¡ bloqueado e vocÃª fica 24 horas sem poder acessar :(',\n    createANewPasswordNow: 'Melhor criar uma senha nova agora! VocÃª vai poder entrar no sistema logo em seguida.',\n    iForgotMyPassword: 'Esqueci minha senha'\n  }\n};\n\nexport const thfPageLoginLiteralIn = {\n  en: 'in',\n  es: 'en',\n  pt: 'em'\n};\n\nexport const thfPageLoginLiteralTo = {\n  en: 'to',\n  es: 'al',\n  pt: 'ao',\n};\n\n/**\n * @description\n *\n * O componente `thf-page-login` Ã© utilizado como template para tela de login.\n * Com ele Ã© possÃ­vel definirmos valores para usuÃ¡rio, senha e definir aÃ§Ãµes para recuperaÃ§Ã£o de senha e gravaÃ§Ã£o de dados do usuÃ¡rio.\n * TambÃ©m Ã© possÃ­vel inserir uma imagem em conjunto com um texto de destaque.\n *\n *\n * A propriedade `t-authentication-url` automatiza a rotina do componente e simplifica o processo para autenticaÃ§Ã£o do usuÃ¡rio, bastando\n * definir uma url para requisiÃ§Ã£o da autenticaÃ§Ã£o. A flexibilidade e praticidade podem chegar a um nÃ­vel em que o desenvolvimento\n * da aplicaÃ§Ã£o no *client side* Ã© desprovida de qualquer cÃ³digo-fonte relacionado Ã  rotina de login de usuÃ¡rio.\n * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.\n * Caso julgue necessÃ¡rio, pode-se tambÃ©m definir manualmente a rotina do componente.\n *\n *\n * Para que as imagens sejam exibidas corretamente, Ã© necessÃ¡rio incluir o caminho delas ao projeto. Para isso, edite\n * o *assets* no arquivo **angular.json** da aplicaÃ§Ã£o na seguinte ordem:\n * ```\n *   \"assets\": [\n *     \"src/assets\",\n *     \"src/favicon.ico\",\n *     {\n *       \"glob\": \"**\\/*\",\n *       \"input\": \"node_modules/@totvs/thf-theme/images\",\n *       \"output\": \"assets/images\"\n *     }\n *   ]\n * ```\n */\nexport abstract class ThfPageLoginBaseComponent implements OnDestroy {\n\n  allLoginErrors: Array<string> = [];\n  allPasswordErrors: Array<string> = [];\n  containsCustomLiterals: boolean = false;\n  customFieldObject: ThfPageLoginCustomField;\n  customFieldType: string;\n  customizedDefaultLiterals: ThfPageLoginLiterals = {};\n  loginSubscription: Subscription;\n  password: string;\n  selectedLanguage: string;\n  showExceededAttemptsWarning = false;\n\n  private _authenticationType: ThfPageLoginAuthenticationType = ThfPageLoginAuthenticationType.Basic;\n  private _authenticationUrl: string;\n  private _blockedUrl: string;\n  private _contactEmail: string;\n  private _customField: string | ThfPageLoginCustomField;\n  private _environment?: string;\n  private _exceededAttemptsWarning?: number;\n  private _hideRememberUser: boolean = false;\n  private _literals: ThfPageLoginLiterals;\n  private _loading?: boolean = false;\n  private _login: string;\n  private _loginErrors: Array<string> = [];\n  private _passwordErrors: Array<string> = [];\n  private _productName: string;\n  private _recovery: string | ThfPageLoginRecovery | Function;\n  private _registerUrl: string;\n  private _urlRecovery: string;\n\n  protected rememberUser: boolean = false;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Ao informar um valor do tipo `string`, o mesmo serÃ¡ aplicado como a chave do campo customizado e utilizarÃ¡\n   * os valores padrÃµes contidos na propriedade `literals` como `customFieldErrorPattern` e `customFieldPlaceholder`.\n   *\n   * Existe a possibilidade de informar um objeto que segue a definiÃ§Ã£o da interface `ThfPageLoginCustomField`, onde\n   * atravÃ©s dos parÃ¢metros enviados pode gerar um `thf-input`, `thf-combo` especificamente para serviÃ§os\n   * ou `thf-select` para valores fixos.\n   *\n   * Abaixo seguem os exemplos de cada tipo de campo.\n   *\n   * `thf-input`:\n   *\n   * ```\n   * {\n   *   property: 'domain',\n   *   value: 'jv01',\n   *   placeholder: 'Enter your domain',\n   *   pattern: '[a-z]',\n   *   errorPattern: 'Invalid value',\n   * }\n   * ```\n   *\n   * `thf-combo`:\n   *\n   * ```\n   * {\n   *   property: 'domain',\n   *   value: 'jv01',\n   *   placeholder: 'Enter your domain',\n   *   url: 'https://thf.totvs.com.br/sample/api/comboOption/domains',\n   *   fieldValue: 'nickname'\n   * }\n   * ```\n   *\n   * `thf-select`:\n   *\n   * ```\n   * {\n   *   property: 'domain',\n   *   value: 'jv01',\n   *   placeholder: 'Enter your domain',\n   *   options: [{label: 'Domain 1', value: '1'}, {label: 'Domain 2', value: '2'}]\n   * }\n   * ```\n   *\n   * Caso o customField possua options, url e fieldValue preenchidos, serÃ¡ priorizado o thf-select\n   * utilizando o options.\n   *\n   */\n  @Input('t-custom-field') set customField(value: string | ThfPageLoginCustomField) {\n    if (value) {\n\n      if (isTypeof(value, 'string')) {\n        this.customFieldType = 'input';\n        this._customField = value;\n        this.customFieldObject = this.getDefaultCustomFieldObject(value);\n        return;\n      }\n\n      if (isTypeof(value, 'object') && !Array.isArray(value) && value['property']) {\n        this._customField = value;\n        this.customFieldObject = <ThfPageLoginCustomField> value;\n\n        if (!this.customFieldObject.options && !this.customFieldObject.url) {\n          this.customFieldType = 'input';\n        } else {\n          this.customFieldType = this.customFieldObject.options ? 'select' : 'combo';\n        }\n\n        return;\n      }\n\n    }\n\n    this._customField = undefined;\n    this.customFieldObject = undefined;\n  }\n\n  get customField(): string | ThfPageLoginCustomField {\n    return this._customField;\n  }\n\n  /**\n   * O `t-background` permite inserir uma imagem de destaque ao lado direito do formulÃ¡rio de login, caso a propriedade\n   * nÃ£o seja preenchida o formulÃ¡rio serÃ¡ centralizado no espaÃ§o disponÃ­vel.\n   *\n   * A fonte da imagem pode ser de um caminho local ou uma url de um servidor externo.\n   *\n   * AlÃ©m da imagem, Ã© possÃ­vel adicionar um texto informativo por cima da imagem da imagem de destaque, para isso informe\n   * um valor para a literal `highlightInfo`.\n   *\n   * > Veja mais sobre as literais na propriedade `t-literals`.\n   *\n   * Exemplos de valores vÃ¡lidos:\n   * - **local**: `./assets/images/login-background.png`\n   * - **url externa**: `https://thf.totvs.com.br/assets/images/login-background.png`\n   *\n   * > Essa propriedade Ã© ignorada para aplicaÃ§Ãµes mobile.\n   */\n  @Input('t-background') background?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Personaliza o e-mail que Ã© exibido na mensagem de dica de login padrÃ£o para contato de suporte.\n   */\n  @Input('t-contact-email') set contactEmail(value: string) {\n    const language = this.selectedLanguage || browserLanguage();\n    this._contactEmail = value;\n\n    this.setLoginHintLiteral(language, value);\n  }\n  get contactEmail() {\n    return this._contactEmail;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Valor customizado que sucede o tÃ­tulo de boas-vindas.\n   *\n   * > Esta propriedade Ã© sobreposta se `t-literals` contiver uma definiÃ§Ã£o customizada para a literal `title`.\n   *\n   * > Veja mais sobre as literais na propriedade `t-literals`.\n   *\n   */\n  @Input('t-product-name') set productName(value: string) {\n    const language = this.selectedLanguage || browserLanguage();\n    this._productName = value;\n\n    this.setTitleLiteral(language, value);\n  }\n  get productName() {\n    return this._productName;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   * Adiciona uma `tag` abaixo do tÃ­tulo que especifica o ambiente que o usuÃ¡rio estÃ¡ fazendo o login.\n   *\n   * > Essa propriedade limita o texto em 40 caracteres.\n   */\n  @Input('t-environment') set environment(environment: string) {\n    if (environment && environment.length > thfPageLoginContentMaxLength) {\n      this._environment = environment.substring(0, thfPageLoginContentMaxLength);\n    } else {\n      this._environment = environment;\n    }\n  }\n  get environment() {\n    return this._environment;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   * Exibe um aviso de bloqueio de acordo com a quantidade restante de tentativas.\n   * O aviso serÃ¡ exibido somente se a quantidade for maior que zero.\n   *\n   * > Caso tenha algum valor atribuÃ­do para o atributo `t-authentication-url` e o retorno da requisiÃ§Ã£o estiver atribuindo valor\n   * para o `t-exceeded-attempts-warning`, o valor considerado serÃ¡ o do retorno da requisiÃ§Ã£o.\n   *\n   * @default `0`\n   */\n  @Input('t-exceeded-attempts-warning') set exceededAttemptsWarning(value: number) {\n    this._exceededAttemptsWarning = convertToInt(value);\n    this.showExceededAttemptsWarning = this.exceededAttemptsWarning > 0;\n  }\n\n  get exceededAttemptsWarning(): number {\n    return this._exceededAttemptsWarning;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Esconde a funÃ§Ã£o \"Lembrar usuÃ¡rio\" do formulÃ¡rio de login.\n   *\n   * Quando essa propriedade Ã© setada com `true` a propriedade `rememberUser` enviada no evento `t-login-submit` serÃ¡ sempre\n   * `false`.\n   *\n   * > Veja a propriedade `t-literals` para customizar a literal `rememberUser`.\n   *\n   * @default `false`\n   */\n  @Input('t-hide-remember-user') set hideRememberUser(value: boolean) {\n    this._hideRememberUser = <any>value === '' ? true : convertToBoolean(value);\n\n    if (this._hideRememberUser) {\n      this.rememberUser = false;\n    }\n  }\n  get hideRememberUser(): boolean {\n    return this._hideRememberUser;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Objeto com as literais usadas no `thf-page-login`.\n   *\n   * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponÃ­veis:\n   *\n   * ```\n   *  const customLiterals: ThfPageLoginLiterals = {\n   *    title: 'Seja bem-vindo',\n   *    loginErrorPattern: 'Login obrigatÃ³rio',\n   *    loginHint: 'Caso nÃ£o possua usuÃ¡rio entre em contato com o suporte',\n   *    loginLabel: 'Insira seu usuÃ¡rio',\n   *    loginPlaceholder: 'Insira seu usuÃ¡rio de acesso',\n   *    passwordErrorPattern: 'Senha obrigatÃ³ria',\n   *    passwordLabel: 'Insira sua senha',\n   *    passwordPlaceholder: 'Insira sua senha de acesso'\n   *    customFieldErrorPattern: 'Campo customizado invÃ¡lido',\n   *    customFieldPlaceholder: 'Por favor insira um valor',\n   *    rememberUser: 'Lembrar usuÃ¡rio',\n   *    rememberUserHint: 'Esta opÃ§Ã£o pode ser desabilitada nas configuraÃ§Ãµes do sistema',\n   *    submitLabel: 'Acessar sistema',\n   *    forgotPassword: 'Esqueceu sua senha?'\n   *  };\n   * ```\n   *\n   * Ou passando apenas as literais que deseja customizar:\n   *\n   * ```\n   *  const customLiterals: ThfPageLoginLiterals = {\n   *    loginPlaceholder: 'Insira seu usuÃ¡rio de acesso',\n   *    passwordPlaceholder: 'Insira sua senha de acesso',\n   *    submitLabel: 'Acessar sistema'\n   *  };\n   * ```\n   *\n   * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\n   *\n   * ```\n   * <thf-page-login\n   *   [t-literals]=\"customLiterals\">\n   * </thf-page-login>\n   * ```\n   *\n   *  > O objeto padrÃ£o de literais serÃ¡ traduzido de acordo com o idioma do browser (pt, en, es).\n   *  > Ã tambÃ©m possÃ­vel alternar o objeto padrÃ£o de literais atravÃ©s do seletor de idiomas localizado na parte inferior do template.\n   */\n  @Input('t-literals') set literals(value: ThfPageLoginLiterals) {\n    const language = this.selectedLanguage || browserLanguage();\n\n    if (value) {\n      this.getLiterals(language, value);\n      this.containsCustomLiterals =\n        !this.literals.title.includes(thfPageLoginLiteralsDefault[language].title) ||\n        !this.literals.loginHint.includes(thfPageLoginLiteralsDefault[language].loginHint);\n    } else {\n      this.containsCustomLiterals = false;\n      this._literals = thfPageLoginLiteralsDefault[language];\n    }\n  }\n\n  get literals() {\n    return this._literals || thfPageLoginLiteralsDefault[browserLanguage()];\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Habilita um estado de carregamento ao botÃ£o de *login*.\n   *\n   * > Ã necessÃ¡rio atribuir `true` Ã  esta propriedade na funÃ§Ã£o definida em `t-login-submit`.\n   *\n   * @default `false`\n   */\n  @Input('t-loading') set loading(value: boolean) {\n    this._loading = convertToBoolean(value);\n  }\n\n  get loading(): boolean {\n    return this._loading;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Valor do modelo do campo de login.\n   *\n   */\n  @Input('t-login') set login(value: string) {\n    this._login = value;\n\n    if (!this.authenticationUrl) {\n      this.loginChange.emit(this._login);\n    }\n  }\n\n  get login(): string {\n    return this._login;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caminho para a logomarca localizada na parte superior.\n   *\n   * > Caso seja indefinida o espaÃ§o se mantÃ©m preservado porÃ©m vazio.\n   */\n  @Input('t-logo') logo?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * ExpressÃ£o regular para validar o campo de login, caso a expressÃ£o nÃ£o seja atentida, a literal `loginErrorPattern`\n   * serÃ¡ exibida.\n   *\n   * Exemplos de valores vÃ¡lidos:\n   * - email: `[expressao-regular-email]`\n   * - cpf: `[expressao-regular-cpf]`\n   *\n   * > Veja a propriedade `t-literals` para customizar a literal `loginErrorPattern`.\n   */\n  @Input('t-login-pattern') loginPattern?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Atributo que recebe uma lista de erros e exibe abaixo do campo de login.\n   */\n  @Input('t-login-errors') set loginErrors(value: Array<string>) {\n    this._loginErrors = value || [];\n    this.setLoginErrors(this._loginErrors);\n  }\n  get loginErrors() {\n    return this._loginErrors;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Atributo que recebe uma lista de erros e exibe abaixo do campo de password.\n   */\n  @Input('t-password-errors') set passwordErrors(value: Array<string>) {\n    this._passwordErrors = value || [];\n    this.setPasswordErrors(this._passwordErrors);\n  }\n  get passwordErrors() {\n    return this._passwordErrors;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * ExpressÃ£o regular para validar o campo de password, caso a expressÃ£o nÃ£o seja atentida, a literal `passwordErrorPattern`\n   * serÃ¡ exibida.\n   *\n   * Exemplos de valores vÃ¡lidos:\n   * - Apenas nÃºmeros: `\\d?`\n   * - Letras mÃ­nusculas: `\\z?`\n   *\n   * > Veja a propriedade `t-literals` para customizar a literal `passwordErrorPattern`.\n   */\n  @Input('t-password-pattern') passwordPattern?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Exibe um link abaixo do formulÃ¡rio de login para que os usuÃ¡rios da aplicaÃ§Ã£o faÃ§am a recuperaÃ§Ã£o dos dados de autenticaÃ§Ã£o.\n   *\n   * A propriedade aceita os seguintes tipos:\n   *\n   * - **String**: informe uma url externa ou uma rota vÃ¡lida;\n   * - **Function**: pode-se customizar a aÃ§Ã£o. Para esta possilidade basta atribuir:\n   * ```\n   * <thf-page-login>\n   *   [recovery]=\"this.funcaominha.bind(this)\";\n   * </thf-page-login>\n   * ```\n   *\n   * - **ThfPageLoginRecovery**: cria-se vÃ­nculo automÃ¡tico com o template **thf-modal-password-recovery**.\n   *   O objeto deve conter a **url** para requisiÃ§Ã£o dos recursos e pode-se definir o **tipo** de modal para recuperaÃ§Ã£o de senha,\n   *   **email** para contato e **mÃ¡scara** do campo de telefone.\n   */\n  @Input('t-recovery') set recovery(value: string | Function | ThfPageLoginRecovery) {\n    this._recovery = value;\n  }\n\n  get recovery() {\n    return this._recovery;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caso a aplicaÃ§Ã£o tenha um link para novos cadastros, informe uma url externa ou uma rota vÃ¡lida, dessa\n   * forma serÃ¡ exibido um link abaixo do formulÃ¡rio de login para os usuÃ¡rios da aplicaÃ§Ã£o.\n   *\n   * Exemplos de valores vÃ¡lidos:\n   * - **local**: `/home`\n   * - **url externa**: `https://thf.totvs.com.br`\n   *\n   * > Veja a propriedade `t-literals` para customizar a literal `registerUrl`.\n   */\n  @Input('t-register-url') set registerUrl(value: string) {\n    this._registerUrl = isTypeof(value, 'string') ? value : undefined;\n  }\n\n  get registerUrl(): string {\n    return this._registerUrl;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caminho para a logomarca localizada no rodapÃ©.\n   */\n  @Input('t-secondary-logo') secondaryLogo?: string;\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Atributo que recebe o tipo de esquema da autenticaÃ§Ã£o, sendo suportados apenas os valores `Basic` e `Bearer`.\n   *\n   * > Caso o tipo definido seja `Basic`, o componente farÃ¡ uma requisiÃ§Ã£o `POST` contendo:\n   *\n   * ```\n   * headers {\n   *  Authorization: Basic base64(login:password)\n   * }\n   *\n   * body {\n   *  rememberUser: rememberUser\n   * }\n   * ```\n   *\n   * > Caso o tipo definido seja `Bearer`, o componente farÃ¡ uma requisiÃ§Ã£o `POST` contendo:\n   *\n   * ```\n   * body {\n   *  login: login,\n   *  password: base64(password)\n   *  rememberUser: rememberUser\n   * }\n   * ```\n   *\n   * @default `ThfPageLoginAuthenticationType.Basic`\n   */\n  @Input('t-authentication-type') set authenticationType(value: ThfPageLoginAuthenticationType) {\n    this._authenticationType =\n    (<any>Object).values(ThfPageLoginAuthenticationType).includes(value) ? value : ThfPageLoginAuthenticationType.Basic;\n  }\n\n  get authenticationType(): ThfPageLoginAuthenticationType {\n    return this._authenticationType;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Endpoint usado pelo template para requisiÃ§Ã£o do recurso. Quando preenchido, o mÃ©todo `t-login-submit` serÃ¡ ignorado e o\n   * componente adquirirÃ¡ automatizaÃ§Ã£o para o processo de autenticaÃ§Ã£o.\n   *\n   * ### Processos\n   * Ao digitar um valor vÃ¡lido no campo de login/password e pressionar **Enter**, o componente farÃ¡ uma requisiÃ§Ã£o `POST`\n   * na url especificada nesta propriedade passando o objeto contendo o valor definido pelo usuÃ¡rio:\n   *\n   * ```\n   * headers {\n   *  Authorization: Basic base64(login:password)\n   * }\n   *\n   * body {\n   *  rememberUser: rememberUser\n   * }\n   * ```\n   *\n   * Em caso de **sucesso**, o objeto de retorno Ã© armazenado no `sessionStorage` e o usuÃ¡rio Ã© redirecionado para a pÃ¡gina inicial da\n   * aplicaÃ§Ã£o `/`.\n   *\n   * ```\n   * 200:\n   *  {\n   *    user: user\n   *  }\n   * ```\n   *\n   * Em caso de **erro** na autenticaÃ§Ã£o, espera-se o seguinte retorno:\n   *\n   * ```\n   * 400/401\n   *  {\n   *    code: 400/401,\n   *    message: message,\n   *    detailedMessage: detailedMessage,\n   *    helpUrl?: helpUrl\n   *  }\n   * ```\n   *\n   * > Pode-se atribuir uma quantidade mÃ¡xima de tentativas restantes (maxAttemptsRemaining) para o atributo `t-exceeded-attempts-warning`,\n   * assim como os avisos relacionados aos campos login e password (loginWarnings, passwordWarnings) para os atributos `t-login-errors` e\n   * `t-password-errors` conforme retorno abaixo:\n   *\n   * ```\n   * 400\n   *  {\n   *    code: 400/401,\n   *    message: message,\n   *    detailedMessage: detailedMessage,\n   *    helpUrl?: helpUrl,\n   *    maxAttemptsRemaining?: maxAttemptsRemaining,\n   *    loginWarnings?: [loginWarnings],\n   *    passwordWarnings?: [passwordWarnings],\n   *  }\n   * ```\n   *\n   * > Caso o valor atribuÃ­do para `t-exceeded-attempts-warning` seja igual a 0(zero), poderÃ¡ ser passado um valor para o\n   * atributo `t-blocked-url` e o usuÃ¡rio serÃ¡ redirecionado para uma tela de bloqueio.\n   *\n   * *Processo finalizado.*\n   *\n   * _______________\n   *\n   * #### Praticidade\n   * As informaÃ§Ãµes do serviÃ§o de autenticaÃ§Ã£o tambÃ©m podem ser transmitidas diretamente pelas configuraÃ§Ã£os de rota e, desta maneira,\n   * dispensa-se qualquer menÃ§Ã£o e/ou importaÃ§Ã£o do componente `thf-page-login` no restante da aplicaÃ§Ã£o. O exemplo abaixo exemplifica\n   * a forma dinÃ¢mica com a qual o template de tela de login pode ser gerado ao navegar para rota `/login`, e tambÃ©m como ele se comunica\n   * com o serviÃ§o para efetuaÃ§Ã£o do processo de autenticaÃ§Ã£o do usuÃ¡rio e solicitaÃ§Ã£o de nova senha.\n   * Basta definir nas configuraÃ§Ãµes de rota:\n   *\n   *\n   * ```\n   *   import { ThfPageLoginComponent, ThfPageLoginAthenticationType } from '@totvs/thf-templates';\n   *\n   *   ...\n   *   const routes: Routes = [\n   *     {\n   *       path: 'login', component: ThfPageLoginComponent, data: {\n   *         serviceApi: 'https://thf.totvs.com.br/sample/api/users/authentication',\n   *         environment: 'development',\n   *         recovery: {\n   *           url: 'https://thf.totvs.com.br/sample/api/users',\n   *           type: ThfModalPasswordRecoveryType.All,\n   *           contactMail: 'dev.totvs@totvs.com',\n   *           phoneMask: '9-999-999-9999'\n   *         },\n   *         registerUrl: '/new-password',\n   *         authenticationType: ThfPageLoginAthenticationType.Basic\n   *       }\n   *     }\n   *     ...\n   *   ];\n   *\n   *   @NgModule({\n   *     imports: [RouterModule.forRoot(routes)],\n   *     exports: [RouterModule]\n   *   })\n   *   export class AppRoutingModule { }\n   * ```\n   *\n   *\n   * O metadado `serviceApi` deve ser a **url** para requisiÃ§Ã£o dos recursos de autenticaÃ§Ã£o, o `environment` alimenta a propriedade\n   * `t-environment`, `recovery` Ã© a interface `ThfPageLoginRecovery` responsÃ¡vel pelas especificaÃ§Ãµes contidas na modal de recuperaÃ§Ã£o de\n   * senha, `registerUrl` alimenta a propriedade `t-register-url` e `authenticationType` que define a propriedade `t-authentication-type`.\n   *\n   * > Ã essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.\n   *\n   */\n  @Input('t-authentication-url') set authenticationUrl(value: string) {\n    this._authenticationUrl = isTypeof(value, 'string') ? value : undefined;\n  }\n\n  get authenticationUrl(): string {\n    return this._authenticationUrl;\n  }\n\n  /**\n   * @optional\n   *\n   * @description\n   *\n   * Caso o valor atribuÃ­do para `t-exceeded-attempts-warning` seja igual a 0(zero) e a aplicaÃ§Ã£o tenha um link de bloqueio de usuÃ¡rio,\n   * informe uma url externa ou uma rota vÃ¡lida, dessa forma em caso de bloqueio o usuÃ¡rio serÃ¡ redirecionado.\n   */\n  @Input('t-blocked-url') set blockedUrl(value: string) {\n    this._blockedUrl = isTypeof(value, 'string') ? value : undefined;\n  }\n\n  get blockedUrl(): string {\n    return this._blockedUrl;\n  }\n\n  /**\n   * Evento disparado quando o usuÃ¡rio alterar o input do campo login.\n   *\n   * Esse evento receberÃ¡ como parÃ¢metro uma variÃ¡vel do tipo `string` com o texto informado no campo.\n   *\n   * > Esta propriedade serÃ¡ ignorada se for definido valor para a propriedade `t-authentication-url`.\n   */\n  @Output('t-login-change') loginChange?: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * Evento disparado ao submeter o formulÃ¡rio de login (apertando `Enter` dentro dos campos ou pressionando o botÃ£o de confirmaÃ§Ã£o).\n   *\n   * Esse evento receberÃ¡ como parÃ¢metro um objeto do tipo `ThfPageLogin` com os dados informados no formulÃ¡rio.\n   *\n   * > Esta propriedade serÃ¡ ignorada se for definido valor para a propriedade `t-url-recovery`.\n   *\n   * > Para mais detalhes consulte a documentaÃ§Ã£o sobre a interface `ThfPageLogin` mais abaixo.\n   */\n  @Output('t-login-submit') loginSubmit = new EventEmitter<ThfPageLogin>();\n\n  /**\n   * Evento disparado quando o usuÃ¡rio alterar o input do campo password.\n   *\n   * Esse evento receberÃ¡ como parÃ¢metro uma variÃ¡vel do tipo `string` com o texto informado no campo.\n   *\n   * > Esta propriedade serÃ¡ ignorada se for definido valor para a propriedade `t-authentication-url`.\n   */\n  @Output('t-password-change') passwordChange?: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(private loginService: ThfPageLoginService, public router: Router) { }\n\n  ngOnDestroy() {\n    if (this.loginSubscription) {\n      this.loginSubscription.unsubscribe();\n    }\n  }\n\n  closePopover() {\n    this.showExceededAttemptsWarning = false;\n  }\n\n  getLiterals(language?: string, value?) {\n    language = language || browserLanguage();\n\n    if (value instanceof Object && !(value instanceof Array)) {\n      this.customizedDefaultLiterals = {\n        ...this.customizedDefaultLiterals,\n        ...value\n      };\n\n      this._literals = {\n        ...thfPageLoginLiteralsDefault[thfLocaleDefault],\n        ...thfPageLoginLiteralsDefault[language],\n        ...this.customizedDefaultLiterals,\n        ...value\n      };\n    } else {\n      this.containsCustomLiterals = false;\n      this._literals = thfPageLoginLiteralsDefault[language];\n    }\n  }\n\n  onLoginSubmit(): void {\n    const loginForm: ThfPageLogin = {\n      login: this.login,\n      password: this.password,\n      rememberUser: this.rememberUser\n    };\n\n    if (this.customField) {\n      loginForm[this.customFieldObject.property] = this.customFieldObject.value;\n    }\n\n    if (this.authenticationUrl) {\n      this.loginSubscription =\n      this.loginService.onLogin(this.authenticationUrl, this.authenticationType, loginForm)\n      .subscribe(data => {\n        this.setValuesToProperties();\n        sessionStorage.setItem('THF_USER_LOGIN', JSON.stringify(data));\n        this.openInternalLink('/');\n      },\n      error => {\n        if (error.error.code === '400' || error.error.code === '401') {\n          this.setValuesToProperties(error);\n          this.redirectBlockedUrl(this.exceededAttemptsWarning, this.blockedUrl);\n        }\n      });\n    } else {\n      this.loginSubmit.emit(loginForm);\n      this.showExceededAttemptsWarning = this.exceededAttemptsWarning > 0;\n    }\n  }\n\n  setLoginHintLiteral(language: string, value: string) {\n    const defaultLoginHintLiteral = thfPageLoginLiteralsDefault[language].loginHint;\n    const prepositionLiteral = thfPageLoginLiteralIn[language];\n    if (value) {\n      this.concatenateLiteral(value, 'loginHint', defaultLoginHintLiteral, prepositionLiteral);\n    } else if (!value) {\n      this.literals = { loginHint: defaultLoginHintLiteral };\n    }\n  }\n\n  setTitleLiteral(language: string, value: string) {\n    const defaultTitleLiteral = thfPageLoginLiteralsDefault[language].title;\n    const prepositionLiteral = thfPageLoginLiteralTo[language];\n    if (value) {\n      this.concatenateLiteral(value, 'title', defaultTitleLiteral, prepositionLiteral);\n    } else if (!value && this.literals.title.includes(defaultTitleLiteral)) {\n        this.literals = { title: defaultTitleLiteral };\n      }\n  }\n\n  private concatenate(defaultLiteral: string, prefixLiteral: string, value: string) {\n    return `${defaultLiteral} ${prefixLiteral} ${value}`;\n  }\n\n  private concatenateLiteral(value: string, literal: string, defaultLiteral: string, prepositionLiteral: string) {\n    if (value && this.literals[literal].includes(defaultLiteral) || this.literals[literal].includes(value)) {\n      this.literals = {\n        [literal]: this.concatenate(defaultLiteral, prepositionLiteral, value)\n      };\n    }\n  }\n\n  private getDefaultCustomFieldObject(property): ThfPageLoginCustomField {\n    return { property };\n  }\n\n  private openExternalLink(url: string) {\n    window.open(url, '_blank');\n  }\n\n  private openInternalLink(url: string) {\n    this.router.navigate([url]);\n  }\n\n  private redirectBlockedUrl(attempts: number, blockedUrl: string) {\n    if (attempts === 0 && blockedUrl) {\n      this.showExceededAttemptsWarning = false;\n      isExternalLink(blockedUrl) ? this.openExternalLink(blockedUrl) : this.openInternalLink(blockedUrl);\n    }\n  }\n\n  private setValuesToProperties(result?) {\n    if (result) {\n      this.exceededAttemptsWarning = result.error.maxAttemptsRemaining;\n      this.loginErrors = result.error.loginWarnings;\n      this.passwordErrors = result.error.passwordWarnings;\n      this.blockedUrl = result.error.blockedUrl;\n    } else {\n      this.exceededAttemptsWarning = 0;\n      this.loginErrors = [];\n      this.passwordErrors = [];\n      this.blockedUrl = '';\n    }\n  }\n\n  protected abstract setLoginErrors(value: Array<string>): void;\n\n  protected abstract setPasswordErrors(value: Array<string>): void;\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { ThfPageLogin } from './interfaces/thf-page-login.interface';\nimport { ThfPageLoginAuthenticationType } from './enums/thf-page-login-authentication-type.enum';\n\n@Injectable()\nexport class ThfPageLoginService {\n\n  constructor(private http: HttpClient) { }\n\n  onLogin(url: string, type: ThfPageLoginAuthenticationType, loginForm: ThfPageLogin): Observable<Object> {\n\n    if (type === ThfPageLoginAuthenticationType.Bearer) {\n      loginForm.password = btoa(loginForm.password);\n      return this.http.post(url, loginForm);\n    } else {\n      const user = `(${loginForm.login}:${loginForm.password})`;\n      const headers = new HttpHeaders({\n        'Authorization': `${type} ` + btoa(user)\n      });\n      delete loginForm.login;\n      delete loginForm.password;\n      return this.http.post(url, loginForm, { headers });\n    }\n\n  }\n\n}\n","import { AbstractControl, NgForm } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AfterViewChecked, ChangeDetectorRef, Component, ComponentRef, IterableDiffers, OnInit, ViewChild, ViewContainerRef\n} from '@angular/core';\n\nimport { isExternalLink } from '../../utils/util';\nimport { ThfComponentInjectorService } from '@totvs/thf-ui';\n\nimport { ThfModalPasswordRecoveryComponent } from '../thf-modal-password-recovery/thf-modal-password-recovery.component';\nimport { ThfModalPasswordRecoveryType } from '../thf-modal-password-recovery/enums/thf-modal-password-recovery-type.enum';\nimport { ThfPageLoginBaseComponent } from './thf-page-login-base.component';\nimport { ThfPageLoginRecovery } from './interfaces/thf-page-login-recovery.interface';\nimport { ThfPageLoginService } from './thf-page-login.service';\n\n/**\n * @docsExtends ThfPageLoginBaseComponent\n *\n * @example\n *\n * <example name=\"thf-page-login-basic\" title=\"Totvs Page Login Basic\">\n *  <file name=\"sample-thf-page-login-basic/sample-thf-page-login-basic.component.html\"> </file>\n *  <file name=\"sample-thf-page-login-basic/sample-thf-page-login-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-login-labs\" title=\"Totvs Page Login Labs\">\n *  <file name=\"sample-thf-page-login-labs/sample-thf-page-login-labs.component.html\"> </file>\n *  <file name=\"sample-thf-page-login-labs/sample-thf-page-login-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-login-human-resources\" title=\"Totvs Page Login - Human Resources\">\n *  <file name=\"sample-thf-page-login-human-resources/sample-thf-page-login-human-resources.component.html\"> </file>\n *  <file name=\"sample-thf-page-login-human-resources/sample-thf-page-login-human-resources.component.ts\"> </file>\n *  <file name=\"sample-thf-page-login-human-resources/sample-thf-page-login-human-resources.module.ts\"> </file>\n * </example>\n *\n * <example name=\"thf-page-login-automatic-service\" title=\"Totvs Page Login - Automatic Service\">\n *  <file name=\"sample-thf-page-login-automatic-service/sample-thf-page-login-automatic-service.component.html\"> </file>\n *  <file name=\"sample-thf-page-login-automatic-service/sample-thf-page-login-automatic-service.component.ts\"> </file>\n * </example>\n */\n\n@Component({\n  selector: 'thf-page-login',\n  templateUrl: './thf-page-login.component.html'\n})\n\nexport class ThfPageLoginComponent extends ThfPageLoginBaseComponent implements AfterViewChecked, OnInit {\n\n  private componentRef: ComponentRef<any> = null;\n  private differ: any;\n  private readonly customPasswordError = { custom : false };\n\n  @ViewChild('loginForm', { read: NgForm, static: true }) loginForm: NgForm;\n  @ViewChild('pageLogin', { read: ViewContainerRef, static: true }) pageLogin: ViewContainerRef;\n\n  constructor(\n    public changeDetector: ChangeDetectorRef,\n    private activatedRoute: ActivatedRoute,\n    private thfComponentInjector: ThfComponentInjectorService,\n    differs: IterableDiffers,\n    loginService: ThfPageLoginService,\n    router: Router,\n    ) {\n    super(loginService, router);\n    this.differ = differs.find([]).create(null);\n  }\n\n  ngAfterViewChecked() {\n    if (this.differ) {\n      this.validateArrayChanges(this.differ, [\n        { array: this.loginErrors, callback: this.generateLoginError.bind(this) },\n        { array: this.passwordErrors, callback: this.generatePasswordError.bind(this) }\n      ]);\n    }\n  }\n\n  ngOnInit() {\n    this.checkingForRouteMetadata(this.activatedRoute.snapshot.data);\n  }\n\n  changeLoginModel() {\n    if (this.authenticationUrl) {\n      this.loginErrors = [];\n    } else {\n      this.setLoginErrors(this.loginErrors);\n      this.loginChange.emit(this.login);\n    }\n  }\n\n  changePasswordModel() {\n    if (this.authenticationUrl) {\n      this.passwordErrors = [];\n    } else {\n      this.setPasswordErrors(this.passwordErrors);\n      this.passwordChange.emit(this.password);\n    }\n  }\n\n  private checkingForMetadataProperty(object, property) {\n    if (Object.prototype.hasOwnProperty.call(object, property)) {\n      return object[property];\n    }\n  }\n\n  private checkingForRouteMetadata(data) {\n    if (Object.keys(data).length !== 0) {\n      this.authenticationUrl = this.checkingForMetadataProperty(data, 'serviceApi') || this.authenticationUrl;\n      this.authenticationType = this.checkingForMetadataProperty(data, 'authenticationType') || this.authenticationType;\n      this.environment = this.checkingForMetadataProperty(data, 'environment') || this.environment;\n      this.recovery = this.checkingForMetadataProperty(data, 'recovery') || this.recovery;\n      this.registerUrl = this.checkingForMetadataProperty(data, 'registerUrl') || this.registerUrl;\n    }\n  }\n\n  private createModalPasswordRecoveryComponent(thfPageLoginRecovery: ThfPageLoginRecovery) {\n    if (this.componentRef) {\n      this.thfComponentInjector.destroyComponentInApplication(this.componentRef);\n    }\n\n    this.componentRef = this.thfComponentInjector.createComponentInApplication(ThfModalPasswordRecoveryComponent);\n    this.componentRef.instance.urlRecovery = thfPageLoginRecovery.url;\n    this.componentRef.instance.contactEmail = thfPageLoginRecovery.contactMail;\n    this.componentRef.instance.phoneMask = thfPageLoginRecovery.phoneMask;\n    this.componentRef.instance.type = thfPageLoginRecovery.type || ThfModalPasswordRecoveryType.Email;\n    this.componentRef.changeDetectorRef.detectChanges();\n    setTimeout(() => {\n      this.componentRef.instance.open();\n    });\n  }\n\n  private generateLoginError() {\n    if (this.loginErrors && this.loginErrors.length) {\n      this.setLoginErrors(this.loginErrors);\n    } else {\n      const control = this.loginForm.form.controls['login'];\n      if (control) {\n        this.resetControl(control);\n      }\n    }\n  }\n\n  private generatePasswordError() {\n    if (this.passwordErrors && this.passwordErrors.length) {\n      this.setPasswordErrors(this.passwordErrors);\n    } else {\n      const control = this.loginForm.form.controls['password'];\n\n      if (control) {\n        this.resetControl(control);\n      }\n    }\n  }\n\n  private resetControl(control: AbstractControl) {\n    control.markAsPristine();\n    control.markAsUntouched();\n    control.updateValueAndValidity();\n  }\n\n  private setControlErrors(allErrors: string, control: AbstractControl, errors: Array<string>, patternError: string) {\n\n    if (control) {\n\n      this[allErrors] = control.hasError('pattern') ? [...errors, ...[patternError]] : [...errors];\n\n      if (errors && errors.length && (control.valid || control.pristine)) {\n        control.markAsTouched();\n        control.markAsDirty();\n        control.setErrors(this.customPasswordError);\n      }\n    }\n\n  }\n\n  private setUrlRedirect(url) {\n    isExternalLink(url) ?  window.open(url, '_blank') : this.router.navigate([url]);\n  }\n\n  private validateArrayChanges(differ: any, array: Array<{ array: Array<any>, callback: any }>) {\n\n    array.forEach(element => {\n      const changes = differ.diff(element.array);\n      if (changes) {\n        element.callback();\n        this.changeDetector.detectChanges();\n      }\n    });\n  }\n\n  protected openUrl(recovery: any): void {\n    switch (typeof recovery) {\n      case 'string': {\n        this.setUrlRedirect(recovery);\n        break;\n      }\n      case 'function': {\n        recovery();\n        break;\n      }\n      case 'object': {\n        this.createModalPasswordRecoveryComponent(recovery);\n        break;\n      }\n    }\n  }\n\n  protected setLoginErrors(errors: Array<string>) {\n    const control = this.loginForm.form.controls['login'];\n    this.setControlErrors('allLoginErrors', control, errors, this.literals.loginErrorPattern);\n  }\n\n  protected setPasswordErrors(errors: Array<string>) {\n    const control = this.loginForm.form.controls['password'];\n    this.setControlErrors('allPasswordErrors', control, errors, this.literals.passwordErrorPattern);\n  }\n\n  onSelectedLanguage(language: string) {\n    this.selectedLanguage = language;\n    this.getLiterals(language, this.containsCustomLiterals ? this.customizedDefaultLiterals : undefined);\n    this.setTitleLiteral(language, this.productName);\n    this.setLoginHintLiteral(language, this.contactEmail);\n  }\n\n}\n","import { ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { browserLanguage, isExternalLink, isTypeof, thfLocaleDefault } from '../../../utils/util';\n\nimport { thfPageLoginLiteralsDefault } from './../thf-page-login-base.component';\nimport { ThfPageLoginRecovery } from '../interfaces/thf-page-login-recovery.interface';\n\n@Component({\n  selector: 'thf-page-login-popover',\n  templateUrl: './thf-page-login-popover.component.html'\n})\n\n/**\n * @docsPrivate\n *\n * @description\n *\n * Componente para definiÃ§Ã£o da mensagem de aviso de bloqueio do `thf-page-login`.\n */\nexport class ThfPageLoginPopoverComponent implements OnInit {\n\n  literals;\n  literalParams;\n  recoveryType: string;\n\n  private _recovery: string | Function | ThfPageLoginRecovery;\n  private _remainingAttempts: number;\n  private _selectedLanguage: string;\n\n  /** exibe o link de 'esqueci minha senha' e verifica se o valor Ã© um link interno ou externo */\n  @Input('t-recovery') set recovery(value: string | Function | ThfPageLoginRecovery) {\n    this._recovery = value;\n\n    if (isTypeof(value, 'string')) {\n      this.recoveryType = isExternalLink(value) ? 'externalLink' : 'internalLink';\n    }\n  }\n\n  get recovery() {\n    return this._recovery;\n  }\n\n  /** define se a mensagem deverÃ¡ ser exibida caso seja maior que 0(zero) */\n  @Input('t-remaining-attempts') set remainingAttempts(value: number) {\n    this._remainingAttempts = value;\n    this.getLiterals(this.selectedLanguage);\n  }\n\n  get remainingAttempts() {\n    return this._remainingAttempts;\n  }\n\n  /** define o idioma da mensagem conforme selecionado no 'thf-page-login' */\n  @Input('t-selected-language') set selectedLanguage(value: string) {\n    this._selectedLanguage = value;\n    this.getLiterals(value);\n  }\n\n  get selectedLanguage() {\n    return this._selectedLanguage;\n  }\n\n  /** se 't-recovery' for do tipo Function ou ThfPageLoginRecovery, emite para o mÃ©todo 'openUrl' do componente 'thf-page-login' */\n  @Output('t-forgot-password') forgotPassword = new EventEmitter<any>();\n\n  constructor(private changeDetector: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this.getLiterals(this.selectedLanguage);\n  }\n\n  onForgotPasswordClick(recovery) {\n    this.forgotPassword.emit(recovery);\n  }\n\n  private getLiterals(language?: string) {\n    language = language || browserLanguage();\n\n    this.literalParams = this.remainingAttempts;\n\n    this.literals = {\n      ...thfPageLoginLiteralsDefault[thfLocaleDefault],\n      ...thfPageLoginLiteralsDefault[language],\n    };\n\n    this.changeDetector.detectChanges();\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ThfModule } from '@totvs/thf-ui';\n\nimport { ThfModalPasswordRecoveryComponent } from '../thf-modal-password-recovery/thf-modal-password-recovery.component';\nimport { ThfPageBackgroundModule } from '../thf-page-background/index';\nimport { ThfPageLoginComponent } from './thf-page-login.component';\nimport { ThfPageLoginPopoverComponent } from './thf-page-login-popover/thf-page-login-popover.component';\nimport { ThfPageLoginService } from './thf-page-login.service';\n\n/**\n * @description\n *\n * MÃ³dulo do template do thf-page-login.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    ThfPageBackgroundModule,\n    ThfModule\n  ],\n  declarations: [\n    ThfPageLoginComponent,\n    ThfPageLoginPopoverComponent\n  ],\n  entryComponents: [\n    ThfModalPasswordRecoveryComponent\n  ],\n  exports: [\n    ThfPageLoginComponent\n  ],\n  providers: [ThfPageLoginService]\n})\nexport class ThfPageLoginModule { }\n","import { NgModule } from '@angular/core';\n\nimport { ThfModalPasswordRecoveryModule } from './thf-modal-password-recovery/thf-modal-password-recovery.module';\nimport { ThfPageBackgroundModule } from './thf-page-background/thf-page-background.module';\nimport { ThfPageBlockedUserModule } from './thf-page-blocked-user/thf-page-blocked-user.module';\nimport { ThfPageChangePasswordModule } from './thf-page-change-password/thf-page-change-password.module';\nimport { ThfPageDynamicDetailModule } from './thf-page-dynamic-detail/thf-page-dynamic-detail.module';\nimport { ThfPageDynamicEditModule } from './thf-page-dynamic-edit/thf-page-dynamic-edit.module';\nimport { ThfPageDynamicSearchModule } from './thf-page-dynamic-search/thf-page-dynamic-search.module';\nimport { ThfPageDynamicTableModule } from './thf-page-dynamic-table/thf-page-dynamic-table.module';\nimport { ThfPageJobSchedulerModule } from './thf-page-job-scheduler/thf-page-job-scheduler.module';\nimport { ThfPageLoginModule } from './thf-page-login/thf-page-login.module';\n\n@NgModule({\n  imports: [\n    ThfModalPasswordRecoveryModule,\n    ThfPageBackgroundModule,\n    ThfPageBlockedUserModule,\n    ThfPageChangePasswordModule,\n    ThfPageDynamicDetailModule,\n    ThfPageDynamicEditModule,\n    ThfPageDynamicSearchModule,\n    ThfPageDynamicTableModule,\n    ThfPageJobSchedulerModule,\n    ThfPageLoginModule\n  ],\n  exports: [\n    ThfModalPasswordRecoveryModule,\n    ThfPageBackgroundModule,\n    ThfPageBlockedUserModule,\n    ThfPageChangePasswordModule,\n    ThfPageDynamicDetailModule,\n    ThfPageDynamicEditModule,\n    ThfPageDynamicSearchModule,\n    ThfPageDynamicTableModule,\n    ThfPageJobSchedulerModule,\n    ThfPageLoginModule\n  ]\n})\nexport class ThfComponentsModule { }\n","import { NgModule } from '@angular/core';\n\nimport { ThfComponentsModule } from './components/components.module';\n\n@NgModule({\n  imports: [\n    ThfComponentsModule\n  ],\n  exports: [\n    ThfComponentsModule\n  ]\n})\nexport class ThfTemplatesModule { }\n"],"names":["EventEmitter","Input","Output","Injectable","HttpClient","tslib_1.__extends","Component","Router","ThfI18nPipe","ViewChild","NgModule","CommonModule","FormsModule","ThfFieldModule","ThfModalModule","RouterModule","ThfDividerModule","ActivatedRoute","ChangeDetectorRef","ThfModule","ThfComponentInjectorService","ViewContainerRef","ThfModalComponent","NgForm","http","HttpHeaders","map","util.thfLocaleDefault","util.browserLanguage","util.convertToBoolean","util.mapObjectByProperties","util.valuesFromObject","ThfNotificationService","ThfDialogService","ThfDynamicModule","ThfPageModule","ThfWidgetModule","ThfPageDynamicService","ThfButtonModule","ThfGridModule","ThfDynamicFormComponent","ThfDynamicFieldType","util.mapArrayByProperties","ThfTableModule","ThfStepperStatus","ViewEncapsulation","ThfInfoOrientation","DatePipe","ThfContainerModule","ThfDialogModule","ThfInfoModule","ThfStepperModule","IterableDiffers"],"mappings":"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"}