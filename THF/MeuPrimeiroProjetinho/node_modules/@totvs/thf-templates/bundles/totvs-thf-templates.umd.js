(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@totvs/thf-ui'), require('@angular/router'), require('@angular/common/http'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@totvs/thf-templates', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@totvs/thf-ui', '@angular/router', '@angular/common/http', 'rxjs/operators'], factory) :
    (global = global || self, factory((global.totvs = global.totvs || {}, global.totvs['thf-templates'] = {}), global.ng.core, global.ng.common, global.ng.forms, global.thfUi, global.ng.router, global.ng.common.http, global.rxjs.operators));
}(this, function (exports, core, common, forms, thfUi, router, http, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // Idiomas suportados pelas páginas
    /** @type {?} */
    var thfLocales = ['pt', 'en', 'es'];
    // Idioma padrão
    /** @type {?} */
    var thfLocaleDefault = 'pt';
    /**
     * @deprecated
     * Utilize o método `getShortBrowserLanguage`.
     *
     * \@description
     * Retorna idioma do browser ou o idioma padrão.
     * @return {?}
     */
    function browserLanguage() {
        return getShortBrowserLanguage();
    }
    /**
     * Retorna o idioma atual do navegador
     * @return {?}
     */
    function getBrowserLanguage() {
        // navigator.userLanguage is the value for IE10
        return navigator.language || navigator['userLanguage'];
    }
    /**
     * Retorna o idioma do navegador, com somente as duas primeiras letras. Por exemplo: "pt" ou "es".
     *
     * Caso o valor retornado pelo navegador não estiver dentro dos idiomas suportados pelo THF,
     * será retornado a linguagem padrão (thfLocaleDefault).
     * @return {?}
     */
    function getShortBrowserLanguage() {
        /** @type {?} */
        var language = (getBrowserLanguage() || thfLocaleDefault).toLowerCase().substring(0, 2);
        if (!thfLocales.includes(language)) {
            return thfLocaleDefault;
        }
        return language;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    function convertToBoolean(val) {
        if (typeof val === 'string') {
            val = val.toLowerCase().trim();
            return (val === 'true' || val === 'on' || val === '');
        }
        if (typeof val === 'number') {
            return val === 1;
        }
        return !!val;
    }
    /**
     * @param {?} value
     * @param {?=} valueDefault
     * @return {?}
     */
    function convertToInt(value, valueDefault) {
        /** @type {?} */
        var validNumber = parseInt(value, 10);
        /** @type {?} */
        var validDefaultValue = parseInt(valueDefault, 10);
        /** @type {?} */
        var defaultValue = validDefaultValue || validDefaultValue === 0 ? validDefaultValue : undefined;
        return validNumber || validNumber === 0 ? validNumber : defaultValue;
    }
    /**
     * @param {?} object
     * @param {?} type
     * @return {?}
     */
    function isTypeof(object, type) {
        return typeof object === type;
    }
    /**
     * @param {?} date
     * @param {?=} time
     * @return {?}
     */
    function convertDateToISOExtended(date, time) {
        if (date) {
            /** @type {?} */
            var getMonth = date.getMonth() + 1;
            /** @type {?} */
            var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
            /** @type {?} */
            var month = getMonth < 10 ? '0' + getMonth : getMonth;
            /** @type {?} */
            var year = formatYear(date.getFullYear());
            /** @type {?} */
            var dateString = date.toString();
            if (time) {
                return year + '-' + month + '-' + day + time;
            }
            else {
                return year + '-' + month + '-' + day + 'T' + dateString.substring(16, 24) +
                    dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
            }
        }
        else {
            return null;
        }
    }
    /**
     * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
     * @param {?} year Ano
     * @return {?}
     */
    function formatYear(year) {
        if (year >= 1000) {
            return year.toString();
        }
        if (year > 99 && year < 1000) {
            return "0" + year;
        }
        if (year > 9 && year < 100) {
            return "00" + year;
        }
        if (year >= 0 && year < 10) {
            return "000" + year;
        }
    }
    /**
     * @param {?} url
     * @return {?}
     */
    function isExternalLink(url) {
        return url ? url.startsWith('http') : false;
    }
    /**
     * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
     * origem.
     *
     * Exemplo:
     *
     * ```
     * const people = [
     *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
     *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
     *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
     * ];
     *
     * const properties = ['id', 'name'];
     *
     * const idAndName = mapArrayByProperties(people, properties);
     *
     * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
     * ```
     *
     * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
     *
     * ```
     * const customers = [
     *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
     *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
     *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
     * ];
     * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
     *
     * const pattern = mapArrayByProperties(customers, properties);
     * console.log(pattern);
     *
     * // [
     * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
     * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
     * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
     * // ]
     * ```
     *
     * @param {?=} items {Array<any>} Array de items original.
     * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
     *
     * @return {?} Array<any>
     */
    function mapArrayByProperties(items, properties) {
        if (items === void 0) { items = []; }
        if (properties === void 0) { properties = []; }
        return items.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return mapObjectByProperties(item, properties); }));
    }
    /**
     * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
     *
     * Exemplo:
     *
     * ```
     * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
     *
     * const properties = ['id', 'name'];
     *
     * const idAndName = mapObjectByProperties(person, properties);
     *
     * console.log(idAndName); // { id: 1, name: 'Fulano' }
     * ```
     *
     * @param {?=} object {Array<any>} Array de items original.
     * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
     *
     * @return {?} Array<any>
     */
    function mapObjectByProperties(object, properties) {
        if (object === void 0) { object = {}; }
        if (properties === void 0) { properties = []; }
        /** @type {?} */
        var getSelectedProperties = (/**
         * @param {?} selectedProperties
         * @param {?} property
         * @return {?}
         */
        function (selectedProperties, property) {
            var _a;
            return (__assign({}, selectedProperties, (_a = {}, _a[property] = object[property], _a)));
        });
        return properties.reduce(getSelectedProperties, {});
    }
    /**
     * Retorna os valores de um objeto dentro de um array.
     *
     * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
     *
     * @param {?=} object Objeto de onde será pego os valores.
     * @return {?}
     */
    function valuesFromObject(object) {
        if (object === void 0) { object = {}; }
        return Object.keys(object).map((/**
         * @param {?} property
         * @return {?}
         */
        function (property) { return object[property]; }));
    }
    /**
     * adiciona 0 no tempo informado, caso menor q 10
     *
     * @param {?} time
     * @return {?}
     */
    function addZero(time) {
        if (!time) {
            return '00';
        }
        if (time < 10) {
            return "0" + time;
        }
        return time;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfModalPasswordRecoveryLiterals = {
        en: (/** @type {?} */ ({
            cancelButton: 'Cancel',
            closeButton: 'Close',
            continueButton: 'Continue',
            email: 'e-mail',
            emailErrorMessagePhrase: 'Invalid e-mail format',
            emailSentConfirmationPhrase: "We have sent the instructions and new password creation link to your e-mail.\n    If you did not receive it after a few minutes, check your spam box or click Resend.",
            emailSentTitle: 'E-mail sent',
            forgotPasswordTitle: 'Forgot your password?',
            insertCode: 'Type the code',
            insertEmail: 'Enter your e-mail',
            insertPhone: 'Enter your mobile number',
            phoneErrorMessagePhrase: 'Invalid phone number',
            prepositionIn: 'in',
            prepositionOr: 'or',
            recoveryPasswordPhrase: 'To recover your password we will send you a {0} with instructions.',
            resendEmailButton: 'Resend',
            resendSmsCodePhrase: 'If the code does not arrive within a few minutes, please send it again.',
            sendAgainPhrase: 'If the code does not arrive within a few minutes',
            sendAgain: 'send again.',
            sendButton: 'Submit',
            sentSmsCodePhrase: 'We sent a code for your mobile phone.',
            sms: 'SMS',
            smsCodeErrorMessagePhrase: 'Invalid code. Please re-enter or contact support',
            supportContact: 'If you do not have access to {0} contact support',
            telephone: 'telephone',
            typeCodeTitle: 'Enter sent code'
        })),
        es: (/** @type {?} */ ({
            cancelButton: 'Cancelar',
            closeButton: 'Cerrar',
            continueButton: 'Continuar',
            email: 'e-mail',
            emailErrorMessagePhrase: 'Formato de correo electrónico no válido',
            emailSentConfirmationPhrase: "Enviamos las instrucciones y enlace de creaci\u00F3n de nueva contrase\u00F1a para su correo electr\u00F3nico.\n    Si no ha recibido despu\u00E9s de unos minutos, compruebe su caja de spam o haga clic en Reenviar",
            emailSentTitle: 'E-mail enviado',
            forgotPasswordTitle: 'Olvidaste tu contraseña?',
            insertCode: 'Introduzca el código',
            insertEmail: 'Introduce tu e-mail',
            insertPhone: 'Introduce tu número de celular',
            phoneErrorMessagePhrase: 'Número de teléfono no válido',
            prepositionIn: 'en',
            prepositionOr: 'u',
            recoveryPasswordPhrase: 'Para recuperar su contraseña vamos a enviar un {0} con instrucciones.',
            resendEmailButton: 'Reenviar',
            resendSmsCodePhrase: 'Si el código no llega dentro de unos minutos, vuelva a enviar.',
            sendAgain: 'envíe de nuevo.',
            sendAgainPhrase: 'Si el código no llega dentro de unos minutos',
            sendButton: 'Enviar',
            sentSmsCodePhrase: 'Enviamos un código para su celular.',
            sms: 'SMS',
            smsCodeErrorMessagePhrase: 'Código no válido. Escriba de nuevo o póngase en contacto con el soporte',
            supportContact: 'Si no tiene acceso a {0} póngase en contacto con el soporte',
            telephone: 'teléfono',
            typeCodeTitle: 'Escribir código enviado'
        })),
        pt: (/** @type {?} */ ({
            cancelButton: 'Cancelar',
            closeButton: 'Fechar',
            continueButton: 'Continuar',
            email: 'e-mail',
            emailErrorMessagePhrase: 'Formato de e-mail inválido',
            emailSentConfirmationPhrase: "Enviamos as instru\u00E7\u00F5es e link de cria\u00E7\u00E3o de nova senha para o seu e-mail.\n    Caso n\u00E3o tenha recebido ap\u00F3s alguns minutos, verifique sua caixa de spam ou clique em Reenviar.",
            emailSentTitle: 'E-mail enviado',
            forgotPasswordTitle: 'Esqueceu sua senha?',
            insertCode: 'Digite o código',
            insertEmail: 'Insira seu e-mail',
            insertPhone: 'Insira seu número de celular',
            phoneErrorMessagePhrase: 'Número de telefone inválido',
            prepositionIn: 'em',
            prepositionOr: 'ou',
            recoveryPasswordPhrase: 'Para recuperar sua senha vamos enviar um {0} com instruções.',
            resendEmailButton: 'Reenviar',
            resendSmsCodePhrase: 'Se o código não chegar dentro de alguns minutos envie novamente',
            sendAgain: 'envie novamente.',
            sendAgainPhrase: 'Se o código não chegar dentro de alguns minutos',
            sendButton: 'Enviar',
            sentSmsCodePhrase: 'Enviamos um código para seu celular cadastrado.',
            sms: 'SMS',
            smsCodeErrorMessagePhrase: 'Código inválido. Digite novamente ou contacte o suporte',
            supportContact: 'Se não tiver acesso ao {0} contacte o suporte',
            telephone: 'telefone',
            typeCodeTitle: 'Digitar código enviado'
        }))
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ThfModalPasswordRecoveryType = {
        /** Possibilita ao usuário optar por envio via email ou SMS */
        All: 'all',
        /** Definição para recuperação apenas por email */
        Email: 'email',
        /** Definição para recuperação apenas por SMS */
        SMS: 'sms',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ThfModalPasswordRecoveryDefaultMaxLength = 15;
    /** @type {?} */
    var ThfModalPasswordRecoveryDefaultMinLength = 15;
    /** @type {?} */
    var ThfModalPasswordRecoveryDefaultPhone = '(99) 99999-9999';
    /** @type {?} */
    var ThfModalPasswordRecoveryTypeDefault = ThfModalPasswordRecoveryType.Email;
    /**
     * \@description
     *
     * O componente `thf-modal-password-recovery` é utilizado como template para solicitação de troca de senha.
     *
     * É composto por uma modal que possui três telas, cada uma com as seguintes características:
     *
     * - A primeira possui campos para preenchimento de email ou número de telefone;
     * - Tela com campo para preenchimento de código SMS enviado para o número de telefone enviado;
     * - A terceira se trata de uma confirmação de envio de link para a caixa de email do usuário.
     *
     *
     * A propriedade `t-url-recovery` automatiza a rotina do componente e simplifica o processo
     * para recuperação de senha, bastando definir uma url para requisição dos recursos.
     * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
     * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
     *
     *
     * Para a modal de digitação de código SMS, é possível definir uma mensagem de erro
     * customizada com a propriedade `t-code-error` e há um link para
     * reenvio de código por SMS. Ao reenviar, o evento `t-code-submit` envia um objeto com o telefone do usuário e a quantidade
     * de vezes em que o usuário fez a solicitação de reenvio.
     *
     * > É indicada a utilização da tela de digitação para envio de código SMS apenas
     * se a opção por envio SMS for disponibilizada para o usuário.
     *
     *
     * A modal de confirmação contém uma ação de reenvio e o evento `t-submit`
     * é quem passa o objeto contendo o email em conjunto com a quantidade de tentativas de reenvio.
     *
     * > A tela de confirmação é indicada para quando o usuário solicitar a troca através do email.
     *
     * > Os textos das modals são pré-definidos, imutáveis e são traduzidos de acordo com o idioma do *browser* (pt, en e es)
     *
     * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
     * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
     * ```
     *   "assets": [
     *     "src/assets",
     *     "src/favicon.ico",
     *     {
     *       "glob": "**\/*",
     *       "input": "node_modules/\@totvs/thf-theme/images",
     *       "output": "assets/images"
     *     }
     *   ]
     * ```
     * @abstract
     */
    var ThfModalPasswordRecoveryBaseComponent = /** @class */ (function () {
        function ThfModalPasswordRecoveryBaseComponent() {
            this._phoneMask = ThfModalPasswordRecoveryDefaultPhone;
            this._type = ThfModalPasswordRecoveryTypeDefault;
            this.maxLength = ThfModalPasswordRecoveryDefaultMaxLength;
            this.minLength = ThfModalPasswordRecoveryDefaultMinLength;
            this.literals = __assign({}, thfModalPasswordRecoveryLiterals[thfLocaleDefault], thfModalPasswordRecoveryLiterals[browserLanguage()]);
            /**
             * \@optional
             *
             * \@description
             *
             * Ação contendo como parâmetro o código enviado por SMS e digitado pelo usuário.
             *
             * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
             */
            this.codeSubmit = new core.EventEmitter();
            /**
             * \@optional
             *
             * \@description
             *
             * Ação contendo o email como parâmetro e que é executada quando o usuário clica sobres os botões de 'enviar' e 'reenviar' e-mail.
             *
             * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
             */
            this.submit = new core.EventEmitter();
        }
        Object.defineProperty(ThfModalPasswordRecoveryBaseComponent.prototype, "contactEmail", {
            get: /**
             * @return {?}
             */
            function () {
                return this._contactEmail;
            },
            /**
             * @optional
             *
             * @description
             *
             * Definição do e-mail que é exibido na mensagem para contato de suporte.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Definição do e-mail que é exibido na mensagem para contato de suporte.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._contactEmail = value;
                this.smsCodeErrorMessage = this.concatenateSMSErrorMessage(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfModalPasswordRecoveryBaseComponent.prototype, "phoneMask", {
            get: /**
             * @return {?}
             */
            function () {
                return this._phoneMask;
            },
            /**
             * @optional
             *
             * @description
             *
             * Definição da mascara do campo de telefone.
             *
             * @default `(99) 99999-9999`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Definição da mascara do campo de telefone.
             *
             * \@default `(99) 99999-9999`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._phoneMask = value || ThfModalPasswordRecoveryDefaultPhone;
                this.minLength = this.maxLength = this._phoneMask.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfModalPasswordRecoveryBaseComponent.prototype, "type", {
            get: /**
             * @return {?}
             */
            function () {
                return this._type;
            },
            /**
             * @optional
             *
             * @description
             *
             * Define o tipo de recuperação de senha que será exibido.
             *
             * @default `ThfModalPasswordRecoveryType.Email`
             *
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define o tipo de recuperação de senha que será exibido.
             *
             * \@default `ThfModalPasswordRecoveryType.Email`
             *
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._type = ((/** @type {?} */ (Object))).values(ThfModalPasswordRecoveryType).includes(value) ? value : ThfModalPasswordRecoveryTypeDefault;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfModalPasswordRecoveryBaseComponent.prototype.concatenateSMSErrorMessage = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var literalCodeErrorMessage = this.literals.smsCodeErrorMessagePhrase;
            return value && value !== '' ? literalCodeErrorMessage + " " + this.literals.prepositionIn + " " + value + "." : literalCodeErrorMessage;
        };
        ThfModalPasswordRecoveryBaseComponent.propDecorators = {
            contactEmail: [{ type: core.Input, args: ['t-contact-email',] }],
            codeError: [{ type: core.Input, args: ['t-code-error',] }],
            phoneMask: [{ type: core.Input, args: ['t-phone-mask',] }],
            type: [{ type: core.Input, args: ['t-type',] }],
            urlRecovery: [{ type: core.Input, args: ['t-url-recovery',] }],
            codeSubmit: [{ type: core.Output, args: ['t-code-submit',] }],
            submit: [{ type: core.Output, args: ['t-submit',] }]
        };
        return ThfModalPasswordRecoveryBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ThfModalPasswordRecoveryModalContent = {
        /** Exibição de modal contendo campo para preenchimento de email ou número de telefone */
        Email: 'email',
        /** Exibição de modal contendo campo para inserção de código enviado por SMS */
        SMSCode: 'smsCode',
        /** Exibição de modal de confirmação de envio */
        Confirmation: 'confirmation',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfModalPasswordRecoveryService = /** @class */ (function () {
        function ThfModalPasswordRecoveryService(http) {
            this.http = http;
        }
        /**
         * @param {?} urlRecovery
         * @param {?} item
         * @param {?=} params
         * @return {?}
         */
        ThfModalPasswordRecoveryService.prototype.post = /**
         * @param {?} urlRecovery
         * @param {?} item
         * @param {?=} params
         * @return {?}
         */
        function (urlRecovery, item, params) {
            return this.http.post(urlRecovery, item, { observe: 'response', params: params });
        };
        ThfModalPasswordRecoveryService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfModalPasswordRecoveryService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return ThfModalPasswordRecoveryService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfModalPasswordRecoveryBaseComponent
     *
     * \@example
     *
     * <example name="thf-modal-password-recovery-basic" title="Totvs Modal Password Recovery Basic">
     *  <file name="sample-thf-modal-password-recovery-basic/sample-thf-modal-password-recovery-basic.component.html"> </file>
     *  <file name="sample-thf-modal-password-recovery-basic/sample-thf-modal-password-recovery-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-modal-password-recovery-labs" title="Totvs Modal Password Recovery Labs">
     *  <file name="sample-thf-modal-password-recovery-labs/sample-thf-modal-password-recovery-labs.component.html"> </file>
     *  <file name="sample-thf-modal-password-recovery-labs/sample-thf-modal-password-recovery-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-modal-password-recovery-request" title="Totvs Modal Password Recovery Request">
     *  <file name="sample-thf-modal-password-recovery-request/sample-thf-modal-password-recovery-request.component.html"> </file>
     *  <file name="sample-thf-modal-password-recovery-request/sample-thf-modal-password-recovery-request.component.ts"> </file>
     * </example>
     */
    var ThfModalPasswordRecoveryComponent = /** @class */ (function (_super) {
        __extends(ThfModalPasswordRecoveryComponent, _super);
        function ThfModalPasswordRecoveryComponent(router, thfI18nPipe, thfModalPasswordRecoveryService) {
            var _this = _super.call(this) || this;
            _this.router = router;
            _this.thfI18nPipe = thfI18nPipe;
            _this.thfModalPasswordRecoveryService = thfModalPasswordRecoveryService;
            _this.chosenTypeFormOption = ThfModalPasswordRecoveryType.Email;
            _this.codeMask = '9 9 9 9 9 9';
            _this.emailModal = true;
            _this.emailModalPhrases = {};
            _this.endpoint = '.';
            _this.invalidCode = false;
            _this.invalidEmail = false;
            _this.modalType = ThfModalPasswordRecoveryModalContent.Email;
            _this.submittedCodeValue = (/** @type {?} */ ({}));
            _this.submittedContactValue = (/** @type {?} */ ({}));
            _this.primaryAction = { label: undefined, action: (/**
                 * @return {?}
                 */
                function () { }) };
            _this.secondaryAction = { label: undefined, action: (/**
                 * @return {?}
                 */
                function () { }) };
            _this.typeFormOptions = [
                { label: 'e-mail', value: ThfModalPasswordRecoveryType.Email },
                { label: 'SMS', value: ThfModalPasswordRecoveryType.SMS }
            ];
            return _this;
        }
        /**
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.passwordRecoverySubscription) {
                this.passwordRecoverySubscription.unsubscribe();
            }
            if (this.smsCodeSubscription) {
                this.smsCodeSubscription.unsubscribe();
            }
        };
        /**
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.completed = /**
         * @return {?}
         */
        function () {
            this.cancelAction();
        };
        /**
         * @param {?} form
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.formModelChangesCheck = /**
         * @param {?} form
         * @return {?}
         */
        function (form) {
            /** @type {?} */
            var invalidForm = form.invalid;
            this.invalidEmail = invalidForm && form.dirty;
            this.primaryAction.disabled = invalidForm;
            if (this.modalType === ThfModalPasswordRecoveryModalContent.SMSCode) {
                /** @type {?} */
                var codeError = this.codeError !== undefined && this.codeError !== '';
                this.showCustomCodeError = codeError && form.pristine;
            }
        };
        /**
         * @param {?} type
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.getInputType = /**
         * @param {?} type
         * @return {?}
         */
        function (type) {
            var _this = this;
            this.type = type;
            this.pipeModalPhrases();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.control = _this.emailForm.controls[type];
                _this.formModelChangesCheck(_this.emailForm);
                _this.resetFormFields(_this.control);
            }));
        };
        /**
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.open = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var control = this.checkFormType(this.type);
            this.control = this.emailForm.controls[control];
            this.setEmailModalPhrasesAndActions();
            this.formModelChangesCheck(this.emailForm);
            this.recoveryModalElement.open();
        };
        /**
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.openConfirmation = /**
         * @return {?}
         */
        function () {
            this.modalTitle = this.literals.emailSentTitle;
            this.modalType = ThfModalPasswordRecoveryModalContent.Confirmation;
            this.setActions(this.cancelAction, this.literals.closeButton, this.submitAction, this.literals.resendEmailButton, false);
        };
        /**
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.openSmsCode = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.modalTitle = this.literals.typeCodeTitle;
            this.modalType = ThfModalPasswordRecoveryModalContent.SMSCode;
            this.setActions(this.submitSmsCodeAction, this.literals.continueButton, this.cancelAction, this.literals.cancelButton, true);
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.control = _this.smsCodeForm.controls['sms'];
                _this.formModelChangesCheck(_this.smsCodeForm);
            }));
        };
        /**
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.resendSmsCode = /**
         * @return {?}
         */
        function () {
            this.incrementRetryAttempts();
            if (this.urlRecovery) {
                this.submitActionRequest(this.submittedContactValue, this.type);
            }
            else {
                this.submit.emit(this.submittedContactValue);
            }
        };
        /**
         * @private
         * @param {?} responseObj
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.assignSmsResponse = /**
         * @private
         * @param {?} responseObj
         * @return {?}
         */
        function (responseObj) {
            this.smsBodyResponse = Object.assign({}, { hash: responseObj.hash });
            if (responseObj.urlValidationCode) {
                this.smsBodyResponse = Object.assign(this.smsBodyResponse, { urlValidationCode: responseObj.urlValidationCode });
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.cancelAction = /**
         * @private
         * @return {?}
         */
        function () {
            this.resetFormFields(this.control);
            this.submittedContactValue = {};
            this.chosenTypeFormOption = ThfModalPasswordRecoveryType.Email;
            this.modalType = ThfModalPasswordRecoveryModalContent.Email;
            this.type = this.modalPasswordRecoveryTypeAll ? ThfModalPasswordRecoveryType.All : this.type;
            this.recoveryModalElement.close();
        };
        /**
         * @private
         * @param {?} type
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.checkFormType = /**
         * @private
         * @param {?} type
         * @return {?}
         */
        function (type) {
            return type !== ThfModalPasswordRecoveryType.All ? type : ThfModalPasswordRecoveryType.Email;
        };
        /**
         * @private
         * @param {?} control
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.formReset = /**
         * @private
         * @param {?} control
         * @return {?}
         */
        function (control) {
            control.markAsPristine();
            control.markAsUntouched();
            control.updateValueAndValidity();
        };
        /**
         * @private
         * @param {?} type
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.getEmitValue = /**
         * @private
         * @param {?} type
         * @return {?}
         */
        function (type) {
            return type === ThfModalPasswordRecoveryType.SMS ? this.phone : this.email;
        };
        /**
         * @private
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.incrementRetryAttempts = /**
         * @private
         * @return {?}
         */
        function () {
            this.submittedContactValue.retry = (this.submittedContactValue.retry + 1 || 1);
        };
        /**
         * @private
         * @param {?} url
         * @param {?} queryParam
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.openExternalLink = /**
         * @private
         * @param {?} url
         * @param {?} queryParam
         * @return {?}
         */
        function (url, queryParam) {
            window.open(url + "?token=" + queryParam, '_self');
        };
        /**
         * @private
         * @param {?} url
         * @param {?} endpoint
         * @param {?} queryParam
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.openInternalLink = /**
         * @private
         * @param {?} url
         * @param {?} endpoint
         * @param {?} queryParam
         * @return {?}
         */
        function (url, endpoint, queryParam) {
            this.router.navigate([url + "/" + endpoint], { queryParams: { token: queryParam } });
        };
        /**
         * @private
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.pipeModalPhrases = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.type === ThfModalPasswordRecoveryType.SMS) {
                this.emailModalPhrases['firstPhrase'] = this.setPipeArguments(this.literals.recoveryPasswordPhrase, this.literals.sms);
                this.emailModalPhrases['secondPhrase'] = this.setPipeArguments(this.literals.supportContact, this.literals.telephone);
            }
            else {
                this.emailModalPhrases['firstPhrase'] = this.setPipeArguments(this.literals.recoveryPasswordPhrase, this.literals.email);
                this.emailModalPhrases['secondPhrase'] = this.setPipeArguments(this.literals.supportContact, this.literals.email);
            }
        };
        /**
         * @private
         * @param {?} recoveryToken
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.redirectToChangePassword = /**
         * @private
         * @param {?} recoveryToken
         * @return {?}
         */
        function (recoveryToken) {
            /** @type {?} */
            var urlChangePassword = recoveryToken.urlChangePassword;
            if (urlChangePassword) {
                isExternalLink(urlChangePassword) ?
                    this.openExternalLink(urlChangePassword, recoveryToken.token) :
                    this.openInternalLink(this.urlRecovery, urlChangePassword, recoveryToken.token);
            }
            else {
                /** @type {?} */
                var changePasswordEndpoint = 'changePassword';
                this.openInternalLink(this.urlRecovery, changePasswordEndpoint, recoveryToken.token);
            }
        };
        /**
         * @private
         * @param {?} control
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.resetFormFields = /**
         * @private
         * @param {?} control
         * @return {?}
         */
        function (control) {
            this.formReset(control);
            this.email = undefined;
            this.phone = undefined;
            this.smsCode = undefined;
        };
        /**
         * @private
         * @param {?} primaryAction
         * @param {?} primarylabel
         * @param {?} secondaryAction
         * @param {?} secondaryLabel
         * @param {?} disabled
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.setActions = /**
         * @private
         * @param {?} primaryAction
         * @param {?} primarylabel
         * @param {?} secondaryAction
         * @param {?} secondaryLabel
         * @param {?} disabled
         * @return {?}
         */
        function (primaryAction, primarylabel, secondaryAction, secondaryLabel, disabled) {
            var _this = this;
            this.primaryAction.action = (/**
             * @return {?}
             */
            function () { return primaryAction.call(_this); });
            this.primaryAction.label = primarylabel;
            this.secondaryAction.action = (/**
             * @return {?}
             */
            function () { return secondaryAction.call(_this); });
            this.secondaryAction.label = secondaryLabel;
            this.primaryAction.disabled = disabled;
        };
        /**
         * @private
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.setEmailModalPhrasesAndActions = /**
         * @private
         * @return {?}
         */
        function () {
            this.modalTitle = this.literals.forgotPasswordTitle;
            this.pipeModalPhrases();
            this.modalPasswordRecoveryTypeAll = this.type === ThfModalPasswordRecoveryType.All;
            this.setActions(this.submitAction, this.literals.sendButton, this.cancelAction, this.literals.cancelButton, true);
        };
        /**
         * @private
         * @param {?=} urlValidationCode
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.setRequestEndpoint = /**
         * @private
         * @param {?=} urlValidationCode
         * @return {?}
         */
        function (urlValidationCode) {
            /** @type {?} */
            var endpoint = urlValidationCode || 'validation';
            return this.urlRecovery + "/" + endpoint;
        };
        /**
         * @private
         * @param {?} literalAttr
         * @param {?} arg
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.setPipeArguments = /**
         * @private
         * @param {?} literalAttr
         * @param {?} arg
         * @return {?}
         */
        function (literalAttr, arg) {
            return this.thfI18nPipe.transform(literalAttr, arg);
        };
        /**
         * @private
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.submitAction = /**
         * @private
         * @return {?}
         */
        function () {
            this.modalType === ThfModalPasswordRecoveryModalContent.Confirmation ? this.incrementRetryAttempts() : this.formReset(this.control);
            this.submittedContactValue[this.checkFormType(this.type)] = this.getEmitValue(this.type);
            if (this.urlRecovery) {
                this.submitActionRequest(this.submittedContactValue, this.type);
            }
            else {
                this.submit.emit(this.submittedContactValue);
            }
        };
        /**
         * @private
         * @param {?} data
         * @param {?} modalType
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.submitActionRequest = /**
         * @private
         * @param {?} data
         * @param {?} modalType
         * @return {?}
         */
        function (data, modalType) {
            var _this = this;
            /** @type {?} */
            var params = modalType === ThfModalPasswordRecoveryType.SMS ? { type: 'sms' } : undefined;
            this.passwordRecoverySubscription =
                this.thfModalPasswordRecoveryService.post(this.urlRecovery, data, params)
                    .subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    if ((modalType === ThfModalPasswordRecoveryType.Email || modalType === ThfModalPasswordRecoveryType.All) && response.status === 204) {
                        _this.openConfirmation();
                    }
                    else if (modalType === ThfModalPasswordRecoveryType.SMS && response.status === 200) {
                        _this.assignSmsResponse(response.body);
                        _this.openSmsCode();
                    }
                }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.submitSmsCodeAction = /**
         * @private
         * @return {?}
         */
        function () {
            this.submittedCodeValue.code = this.smsCode;
            if (this.urlRecovery) {
                this.submittedCodeValue = Object.assign(this.submittedCodeValue, { hash: this.smsBodyResponse.hash });
                this.submitSmsCodeRequest(this.submittedCodeValue);
            }
            else {
                this.codeSubmit.emit(this.submittedCodeValue);
            }
            this.resetFormFields(this.control);
        };
        /**
         * @private
         * @param {?} data
         * @return {?}
         */
        ThfModalPasswordRecoveryComponent.prototype.submitSmsCodeRequest = /**
         * @private
         * @param {?} data
         * @return {?}
         */
        function (data) {
            var _this = this;
            this.smsCodeSubscription = this.thfModalPasswordRecoveryService
                .post(this.setRequestEndpoint(this.smsBodyResponse.urlValidationCode), data)
                .subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                /** @type {?} */
                var successStatus = response.status === 200;
                if (successStatus) {
                    _this.completed();
                    _this.redirectToChangePassword(response.body);
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.codeError = error.error.message;
                _this.openSmsCode();
            }));
        };
        ThfModalPasswordRecoveryComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-modal-password-recovery',
                        template: "<thf-modal #recoveryModal\n  t-hide-close\n  t-size=\"auto\"\n  [ngSwitch]=\"modalType\"\n  [t-primary-action]=\"primaryAction\"\n  [t-secondary-action]=\"secondaryAction\"\n  [t-title]=\"modalTitle\"> \n  <div class=\"thf-modal-password-recovery-wrapper\">\n    <div *ngSwitchCase=\"'email'\" class=\"thf-modal-password-recovery-content thf-row\">\n      <div class=\"thf-modal-password-recovery-text thf-md-12 thf-mb-1\">\n        {{ emailModalPhrases.firstPhrase }}\n      </div>\n      <div class=\"thf-mb-2 thf-md-12\">\n        <form #emailForm=\"ngForm\">\n\n          <div *ngIf=\"modalPasswordRecoveryTypeAll\">\n            <thf-radio-group \n              name=\"type\"\n              [(ngModel)]=\"chosenTypeFormOption\"\n              [t-options]=\"typeFormOptions\"\n              (t-change)=\"getInputType($event)\">\n            </thf-radio-group>\n          </div>\n\n          <div class=\"thf-mt-1\">\n            <thf-email *ngIf=\"type === 'email' || type === 'all'\"\n              name=\"email\"\n              [(ngModel)]=\"email\"\n              t-required\n              [t-label]=\"literals.insertEmail\"\n              (t-change-model)=\"formModelChangesCheck(emailForm)\">\n            </thf-email>\n    \n            <thf-input *ngIf=\"type === 'sms'\"\n              name=\"sms\"\n              [(ngModel)]=\"phone\"\n              t-icon=\"thf-icon-telephone\"\n              t-required\n              [t-label]=\"literals.insertPhone\"\n              [t-mask]=\"phoneMask\"\n              [t-maxlength]=\"maxLength\"\n              [t-minlength]=\"minLength\"\n              (t-change-model)=\"formModelChangesCheck(emailForm)\">\n            </thf-input>\n          </div>\n          \n          <div class=\"thf-field-container-bottom thf-field-container-error-container\">\n            <thf-modal-password-recovery-error-message *ngIf=\"invalidEmail && control.dirty\" \n              [t-text]=\"type === 'sms' ? literals.phoneErrorMessagePhrase : literals.emailErrorMessagePhrase\">\n            </thf-modal-password-recovery-error-message>\n          </div>\n        </form>\n      </div>\n      <div class=\"thf-modal-password-recovery-text thf-md-12\">{{ emailModalPhrases.secondPhrase }}<span *ngIf=\"contactEmail\">\n        {{ literals.prepositionIn }} \n          <a class=\"thf-modal-password-recovery-link\" href=\"mailto:{{ contactEmail }}\" target=\"_self\">{{ contactEmail }}</a>\n        </span>{{ endpoint }}\n      </div>\n    </div>\n\n    <div #smsCodeModal *ngSwitchCase=\"'smsCode'\" class=\"thf-modal-password-recovery-content thf-row\">\n      <div class=\"thf-modal-password-recovery-text thf-md-12 thf-mb-1\">{{ literals.sentSmsCodePhrase }}</div>\n      <div class=\"thf-mb-2 thf-md-12\">\n        <form #smsCodeForm=\"ngForm\">\n          <thf-input\n            name=\"sms\"\n            [(ngModel)]=\"smsCode\"\n            t-maxlength=\"11\"\n            t-minlength=\"11\"\n            t-required\n            [t-label]=\"literals.insertCode\"\n            [t-mask]=\"codeMask\"\n            (t-change-model)=\"formModelChangesCheck(smsCodeForm)\">\n          </thf-input>\n          <div class=\"thf-field-container-bottom thf-field-container-error-container\">\n            <thf-modal-password-recovery-error-message *ngIf=\"invalidEmail\"\n              [t-text]=\"smsCodeErrorMessage || this.literals.smsCodeErrorMessagePhrase\">\n            </thf-modal-password-recovery-error-message>\n            <thf-modal-password-recovery-error-message *ngIf=\"showCustomCodeError\"\n              [t-text]=\"codeError\">\n            </thf-modal-password-recovery-error-message>\n          </div>\n        </form>\n      </div>\n      <div class=\"thf-modal-password-recovery-text thf-md-12\">\n        {{ literals.sendAgainPhrase }} \n        <span class=\"thf-modal-password-recovery-link\" (click)=\"resendSmsCode()\">{{ literals.sendAgain }}</span>\n      </div>\n    </div>\n    \n    <div #confirmationModal *ngSwitchCase=\"'confirmation'\" class=\"thf-modal-password-recovery-content thf-row\">\n      <img \n        class=\"thf-modal-password-recovery-user-image thf-mb-2\" \n        src=\"./assets/images/email-sent.svg\"> \n      <div class=\"thf-modal-password-recovery-text\">\n        {{ literals.emailSentConfirmationPhrase }}\n      </div>\n    </div>\n  </div>\n</thf-modal>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfModalPasswordRecoveryComponent.ctorParameters = function () { return [
            { type: router.Router },
            { type: thfUi.ThfI18nPipe },
            { type: ThfModalPasswordRecoveryService }
        ]; };
        ThfModalPasswordRecoveryComponent.propDecorators = {
            emailForm: [{ type: core.ViewChild, args: ['emailForm', { static: false },] }],
            recoveryModalElement: [{ type: core.ViewChild, args: ['recoveryModal', { static: true },] }],
            smsCodeForm: [{ type: core.ViewChild, args: ['smsCodeForm', { static: false },] }]
        };
        return ThfModalPasswordRecoveryComponent;
    }(ThfModalPasswordRecoveryBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Componente utilizado para exibição da mensagem customizada de erro em um campo de formulário.
     */
    var ThfModalPasswordRecoveryErrorMessageComponent = /** @class */ (function () {
        function ThfModalPasswordRecoveryErrorMessageComponent() {
        }
        ThfModalPasswordRecoveryErrorMessageComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-modal-password-recovery-error-message',
                        template: "<div class=\"thf-field-container-bottom-text-error thf-field-container-error-item\">\n  <span class=\"thf-icon thf-icon-exclamation\"></span>\n  <span class=\"thf-field-container-error-text\">{{ text }}</span>\n</div>\n"
                    }] }
        ];
        ThfModalPasswordRecoveryErrorMessageComponent.propDecorators = {
            text: [{ type: core.Input, args: ['t-text',] }]
        };
        return ThfModalPasswordRecoveryErrorMessageComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do template do thf-modal-password-recovery.
     */
    var ThfModalPasswordRecoveryModule = /** @class */ (function () {
        function ThfModalPasswordRecoveryModule() {
        }
        ThfModalPasswordRecoveryModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            thfUi.ThfFieldModule,
                            thfUi.ThfModalModule
                        ],
                        declarations: [
                            ThfModalPasswordRecoveryComponent,
                            ThfModalPasswordRecoveryErrorMessageComponent
                        ],
                        exports: [
                            ThfModalPasswordRecoveryComponent,
                            ThfModalPasswordRecoveryErrorMessageComponent
                        ],
                        providers: [thfUi.ThfI18nPipe, ThfModalPasswordRecoveryService]
                    },] }
        ];
        return ThfModalPasswordRecoveryModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageBackgroundComponent = /** @class */ (function () {
        function ThfPageBackgroundComponent() {
            this._showSelectLanguage = false;
            this.selectLanguageOptions = [
                { label: 'English', value: 'en' },
                { label: 'Español', value: 'es' },
                { label: 'Português', value: 'pt' }
            ];
            /**
             * Evento disparado ao selecionar alguma opção no seletor de idiomas.
             * Para este evento será passado como parâmetro o valor de idioma selecionado.
             */
            this.selectedLanguage = new core.EventEmitter();
        }
        Object.defineProperty(ThfPageBackgroundComponent.prototype, "logo", {
            get: /**
             * @return {?}
             */
            function () {
                return this._logo;
            },
            /** Caminho para a logomarca localizada na parte superior. */
            set: /**
             * Caminho para a logomarca localizada na parte superior.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._logo = isTypeof(value, 'string') && value.trim() ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageBackgroundComponent.prototype, "secondaryLogo", {
            get: /**
             * @return {?}
             */
            function () {
                return this._secondaryLogo;
            },
            /**
             * @optional
             *
             * @description
             *
             * Caminho para a logomarca localizada no rodapé.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Caminho para a logomarca localizada no rodapé.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._secondaryLogo = isTypeof(value, 'string') && value.trim() ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageBackgroundComponent.prototype, "showSelectLanguage", {
            get: /**
             * @return {?}
             */
            function () {
                return this._showSelectLanguage;
            },
            /** Define se o seletor de idiomas deve ser exibido. */
            set: /**
             * Define se o seletor de idiomas deve ser exibido.
             * @param {?} showSelectLanguage
             * @return {?}
             */
            function (showSelectLanguage) {
                this._showSelectLanguage = convertToBoolean(showSelectLanguage);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfPageBackgroundComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.selectedLanguageOption = browserLanguage();
        };
        /**
         * @return {?}
         */
        ThfPageBackgroundComponent.prototype.onChangeLanguage = /**
         * @return {?}
         */
        function () {
            this.selectedLanguage.emit(this.selectedLanguageOption);
        };
        ThfPageBackgroundComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-background',
                        template: "<div class=\"thf-page-login-container\">\n  <div class=\"thf-page-login-panel\">\n    <img *ngIf=\"logo\"\n      class=\"thf-page-background-main-logo\"\n      [class.thf-page-background-hide-logo]=\"hideLogo\"\n      alt=\"main-logo\"\n      [src]=\"logo\">\n\n    <div class=\"thf-page-login-body\">\n      <div class=\"thf-page-login-panel-content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n    <div class=\"thf-page-background-footer thf-sm-12\">\n\n      <thf-divider class=\"thf-page-background-footer-mobile-only\"></thf-divider>\n\n      <div class=\"thf-page-background-footer-content\">\n        <div *ngIf=\"showSelectLanguage\" class=\"thf-page-background-footer-select\">\n          <thf-select\n            name=\"selectedLanguageOption\"\n            [(ngModel)]=\"selectedLanguageOption\"\n            [t-options]=\"selectLanguageOptions\"\n            (t-change) = \"onChangeLanguage()\">\n          </thf-select>\n        </div>\n\n        <div class=\"thf-page-background-secondary-logo\"\n          [ngClass]=\"showSelectLanguage ? 'thf-page-background-secondary-logo-right' : 'thf-page-background-secondary-logo-centered'\">\n\n          <img *ngIf=\"secondaryLogo\"\n            class=\"thf-page-background-secondary-logo-image\"\n            alt=\"secondary-logo\"\n            [src]=\"secondaryLogo\">\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"background\"\n    [ngClass]=\"background ? 'thf-page-login-highlight-image' : 'thf-page-login-highlight-image-off'\"\n    [style.background-image]=\"'url(' + background + ')'\">\n    <div class=\"thf-page-login-highlight-text\">\n      <div class=\"thf-font-display\">{{ highlightInfo }}</div>\n    </div>\n  </div>\n</div>\n"
                    }] }
        ];
        ThfPageBackgroundComponent.propDecorators = {
            background: [{ type: core.Input, args: ['t-background',] }],
            hideLogo: [{ type: core.Input, args: ['t-hide-logo',] }],
            highlightInfo: [{ type: core.Input, args: ['t-highlight-info',] }],
            logo: [{ type: core.Input, args: ['t-logo',] }],
            secondaryLogo: [{ type: core.Input, args: ['t-secondary-logo',] }],
            showSelectLanguage: [{ type: core.Input, args: ['t-show-select-language',] }],
            selectedLanguage: [{ type: core.Output, args: ['t-selected-language',] }]
        };
        return ThfPageBackgroundComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do template do thf-page-background.
     */
    var ThfPageBackgroundModule = /** @class */ (function () {
        function ThfPageBackgroundModule() {
        }
        ThfPageBackgroundModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            router.RouterModule,
                            thfUi.ThfDividerModule,
                            thfUi.ThfFieldModule,
                        ],
                        declarations: [
                            ThfPageBackgroundComponent
                        ],
                        exports: [
                            ThfPageBackgroundComponent
                        ]
                    },] }
        ];
        return ThfPageBackgroundModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ThfPageBlockedUserReason = {
        /** Sem definição; a tela exibirá conteúdo de bloqueio genérico. */
        None: 'none',
        /** Definição para tentativas de acesso esgotadas. */
        ExceededAttempts: 'exceededAttempts',
        /** Definição para senha expirada. */
        ExpiredPassword: 'expiredPassword',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ThfPageBlockedUserReasonDefault = ThfPageBlockedUserReason.None;
    /** @type {?} */
    var ThfPageBlockedUserParamsDefault = { attempts: 5, days: 90, hours: 24 };
    /**
     * \@description
     *
     * O componente `thf-page-blocked-user` é utilizado como template para tela de bloqueio de usuário.
     * É possível definir entre três tipos de telas para alertar o usuário sobre um eventual bloqueio de login.
     *
     * Cada modelo de bloqueio possui uma imagem e texto adequados à situação.
     * Os textos das telas são pré-definidos e imutáveis, porém,
     * é possível estipular parâmetros como dias, horas e tentativas de acesso esgotadas.
     *
     * Por fim, há propriedades para adição de telefone e/ou email para contato e também a definição para a url de retorno.
     *
     * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
     * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
     * ```
     *   "assets": [
     *     "src/assets",
     *     "src/favicon.ico",
     *     {
     *       "glob": "**\/*",
     *       "input": "node_modules/\@totvs/thf-theme/images",
     *       "output": "assets/images"
     *     }
     *   ]
     * ```
     *
     * _______________
     *
     * #### Praticidade
     * O `thf-page-blocked-user`, assim como suas propriedades, pode também ser transmitido diretamente pelas configuraçãos de rota e,
     * desta maneira, dispensa-se qualquer menção e/ou importação no restante da aplicação. O exemplo abaixo exemplifica
     * a forma dinâmica com a qual o template pode ser gerado se navegasse para uma rota denominada como `/access-denied`:
     *
     *
     * ```
     *   import { ThfPageBlockedUserComponent, ThfPageBlockedUserReason } from '\@totvs/thf-templates';
     *
     *   ...
     *   const routes: Routes = [
     *     {
     *       path: 'access-denied', component: ThfPageBlockedUserComponent, data: {
     *         contactEmail: 'dev.totvs\@totvs.com',
     *         contactPhone: '0800 1234 000',
     *         reason: ThfPageBlockedUserReason.ExpiredPassword,
     *         urlBack: '/home'
     *       }
     *     }
     *     ...
     *   ];
     *
     * \@NgModule({
     *     imports: [RouterModule.forRoot(routes)],
     *     exports: [RouterModule]
     *   })
     *   export class AppRoutingModule { }
     * ```
     *
     * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.
     *
     */
    var ThfPageBlockedUserBaseComponent = /** @class */ (function () {
        function ThfPageBlockedUserBaseComponent() {
            this._params = __assign({}, ThfPageBlockedUserParamsDefault);
            this._reason = ThfPageBlockedUserReason.None;
            this._urlBack = '/';
        }
        Object.defineProperty(ThfPageBlockedUserBaseComponent.prototype, "params", {
            get: /**
             * @return {?}
             */
            function () {
                return this._params;
            },
            /**
             * @optional
             *
             * @description
             *
             * Designação de valores usados para a customização da mensagem de bloqueio.
             * Confira abaixo os valores pré-definidos.
             *
             * ```
             *  const customLiterals: ThfPageBlockedUserReasonParams = {
             *    attempts: 5,
             *    days: 90,
             *    hours: 24
             *  };
             * ```
             *
             * > Salientamos a importância e atenção para configuração desses valores conforme definidos no projeto.
             *
             * > Veja os parâmetros customizáveis na interface `ThfPageBlockedUserReasonParams`.
             *
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Designação de valores usados para a customização da mensagem de bloqueio.
             * Confira abaixo os valores pré-definidos.
             *
             * ```
             *  const customLiterals: ThfPageBlockedUserReasonParams = {
             *    attempts: 5,
             *    days: 90,
             *    hours: 24
             *  };
             * ```
             *
             * > Salientamos a importância e atenção para configuração desses valores conforme definidos no projeto.
             *
             * > Veja os parâmetros customizáveis na interface `ThfPageBlockedUserReasonParams`.
             *
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value instanceof Object) {
                    /** @type {?} */
                    var keys = Object.keys(value);
                    /** @type {?} */
                    var newParams_1 = __assign({}, ThfPageBlockedUserParamsDefault);
                    keys.forEach((/**
                     * @param {?} key
                     * @return {?}
                     */
                    function (key) {
                        newParams_1[key] = value[key];
                    }));
                    this._params = newParams_1;
                }
                else {
                    this._params = __assign({}, ThfPageBlockedUserParamsDefault);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageBlockedUserBaseComponent.prototype, "reason", {
            get: /**
             * @return {?}
             */
            function () {
                return this._reason;
            },
            /**
             * @optional
             *
             * @description
             *
             * Definição de motivo de bloqueio de usuário. As informações modificam conforme o motivo selecionado.
             *
             * > Veja os valores válidos no *enum* `ThfPageBlockedUserReason`.
             *
             * @default `ThfPageBlockedUserReason.None`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Definição de motivo de bloqueio de usuário. As informações modificam conforme o motivo selecionado.
             *
             * > Veja os valores válidos no *enum* `ThfPageBlockedUserReason`.
             *
             * \@default `ThfPageBlockedUserReason.None`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._reason = ((/** @type {?} */ (Object))).values(ThfPageBlockedUserReason).includes(value) ? value : ThfPageBlockedUserReasonDefault;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageBlockedUserBaseComponent.prototype, "urlBack", {
            get: /**
             * @return {?}
             */
            function () {
                return this._urlBack;
            },
            /**
             * @optional
             *
             * @description
             *
             * URL para a ação de retorno da página.
             *
             * @default `/`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * URL para a ação de retorno da página.
             *
             * \@default `/`
             * @param {?} url
             * @return {?}
             */
            function (url) {
                this._urlBack = url;
            },
            enumerable: true,
            configurable: true
        });
        ThfPageBlockedUserBaseComponent.propDecorators = {
            contactEmail: [{ type: core.Input, args: ['t-contact-email',] }],
            contactPhone: [{ type: core.Input, args: ['t-contact-phone',] }],
            params: [{ type: core.Input, args: ['t-params',] }],
            logo: [{ type: core.Input, args: ['t-logo',] }],
            reason: [{ type: core.Input, args: ['t-reason',] }],
            secondaryLogo: [{ type: core.Input, args: ['t-secondary-logo',] }],
            urlBack: [{ type: core.Input, args: ['t-url-back',] }]
        };
        return ThfPageBlockedUserBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfPageBlockedUserButtonLiterals = {
        en: (/** @type {?} */ ({
            primaryButton: 'Back to home screen',
        })),
        es: (/** @type {?} */ ({
            primaryButton: 'Volver al inicio',
        })),
        pt: (/** @type {?} */ ({
            primaryButton: 'Voltar para o início',
        }))
    };
    /**
     * \@docsExtends ThfPageBlockedUserBaseComponent
     *
     * \@example
     *
     * <example name="thf-page-blocked-user-basic" title="Totvs Page Blocked User Basic">
     *  <file name="sample-thf-page-blocked-user-basic/sample-thf-page-blocked-user-basic.component.html"> </file>
     *  <file name="sample-thf-page-blocked-user-basic/sample-thf-page-blocked-user-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-blocked-user-labs" title="Totvs Page Blocked User Labs">
     *  <file name="sample-thf-page-blocked-user-labs/sample-thf-page-blocked-user-labs.component.html"> </file>
     *  <file name="sample-thf-page-blocked-user-labs/sample-thf-page-blocked-user-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-blocked-user-exceeded-attempts" title="Totvs Page Blocked User Exceeded Attempts">
     *  <file name="sample-thf-page-blocked-user-exceeded-attempts/sample-thf-page-blocked-user-exceeded-attempts.component.html"> </file>
     *  <file name="sample-thf-page-blocked-user-exceeded-attempts/sample-thf-page-blocked-user-exceeded-attempts.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-blocked-user-expired-password" title="Totvs Page Blocked User Expired Password">
     *  <file name="sample-thf-page-blocked-user-expired-password/sample-thf-page-blocked-user-expired-password.component.html"> </file>
     *  <file name="sample-thf-page-blocked-user-expired-password/sample-thf-page-blocked-user-expired-password.component.ts"> </file>
     * </example>
     */
    var ThfPageBlockedUserComponent = /** @class */ (function (_super) {
        __extends(ThfPageBlockedUserComponent, _super);
        function ThfPageBlockedUserComponent(activatedRoute, router) {
            var _this = _super.call(this) || this;
            _this.activatedRoute = activatedRoute;
            _this.router = router;
            _this.literals = __assign({}, thfPageBlockedUserButtonLiterals[thfLocaleDefault], thfPageBlockedUserButtonLiterals[browserLanguage()]);
            return _this;
        }
        /**
         * @return {?}
         */
        ThfPageBlockedUserComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.checkingForRouteMetadata(this.activatedRoute.snapshot.data);
        };
        /**
         * @param {?} url
         * @return {?}
         */
        ThfPageBlockedUserComponent.prototype.navigateTo = /**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            isExternalLink(url) ? window.open(url) : this.router.navigate([url || '/']);
        };
        /**
         * @private
         * @param {?} object
         * @param {?} property
         * @return {?}
         */
        ThfPageBlockedUserComponent.prototype.checkingForMetadataProperty = /**
         * @private
         * @param {?} object
         * @param {?} property
         * @return {?}
         */
        function (object, property) {
            if (Object.prototype.hasOwnProperty.call(object, property)) {
                return object[property];
            }
        };
        /**
         * @private
         * @param {?} data
         * @return {?}
         */
        ThfPageBlockedUserComponent.prototype.checkingForRouteMetadata = /**
         * @private
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (Object.keys(data).length !== 0) {
                this.contactEmail = this.checkingForMetadataProperty(data, 'contactEmail') || this.contactEmail;
                this.contactPhone = this.checkingForMetadataProperty(data, 'contactPhone') || this.contactPhone;
                this.reason = this.checkingForMetadataProperty(data, 'reason') || this.reason;
                this.urlBack = this.checkingForMetadataProperty(data, 'urlBack') || this.urlBack;
            }
        };
        ThfPageBlockedUserComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-blocked-user',
                        template: "<div class=\"thf-page-blocked-user-wrapper\">\n  <div class=\"thf-page-background-wrap\">\n    <thf-page-background\n      [t-hide-logo]=\"true\"\n      [t-logo]=\"logo\"\n      [t-secondary-logo]=\"secondaryLogo\">\n\n      <thf-page-blocked-user-reason\n        [t-params]=\"params\"\n        [t-reason]=\"reason\">\n      </thf-page-blocked-user-reason>\n\n      <div class=\"thf-page-blocked-user-mobile-bottom-alignment\">\n        <thf-page-blocked-user-contacts\n          [t-email]=\"contactEmail\"\n          [t-phone]=\"contactPhone\">\n        </thf-page-blocked-user-contacts>\n\n        <div class=\"thf-row\">\n          <thf-button\n            class=\"thf-lg-12 thf-sm-12 thf-page-blocked-user-button\"\n            t-type=\"primary\"\n            [t-label]=\"literals.primaryButton\"\n            (t-click)=\"navigateTo(urlBack)\">\n          </thf-button>\n        </div>\n      </div>\n    </thf-page-background>\n  </div>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfPageBlockedUserComponent.ctorParameters = function () { return [
            { type: router.ActivatedRoute },
            { type: router.Router }
        ]; };
        return ThfPageBlockedUserComponent;
    }(ThfPageBlockedUserBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfPageBlockedUserContactItemMargin = 16;
    var ThfPageBlockedUserContactsComponent = /** @class */ (function () {
        function ThfPageBlockedUserContactsComponent(changeDetector) {
            this.changeDetector = changeDetector;
            this.overflowItem = false;
        }
        /**
         * @return {?}
         */
        ThfPageBlockedUserContactsComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.checkContactItemWidth();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        ThfPageBlockedUserContactsComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.email || changes.phone) {
                this.checkContactItemWidth();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageBlockedUserContactsComponent.prototype.checkContactItemWidth = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.email || !this.phone) {
                this.overflowItem = true;
                return;
            }
            else {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var phoneWidth = _this.phoneItem.nativeElement.offsetWidth;
                    /** @type {?} */
                    var mailWidth = _this.mailItem.nativeElement.offsetWidth;
                    /** @type {?} */
                    var contactGroupHalfWidth = _this.contactGroup.nativeElement.offsetWidth / 2;
                    _this.overflowItem = phoneWidth > contactGroupHalfWidth || mailWidth > contactGroupHalfWidth - thfPageBlockedUserContactItemMargin;
                }));
            }
            this.changeDetector.detectChanges();
        };
        ThfPageBlockedUserContactsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-blocked-user-contacts',
                        template: "<div #contactGroup class=\"thf-page-blocked-user-contact-group thf-row thf-mb-3\">\n  <div *ngIf=\"phone\"\n    class=\"thf-page-blocked-user-contact-item\"\n    [ngClass]=\"overflowItem ? 'thf-md-12' : 'thf-md-6'\">\n    <a\n      class=\"thf-page-blocked-user-link thf-clickable\"\n      [class.thf-page-blocked-user-contact-content-inline]=\"overflowItem\"\n      href=\"tel:{{ phone }}\"\n      target=\"_self\">\n      <div class=\"thf-page-blocked-user-contact-group-item\">\n        <span class=\"thf-page-blocked-user-contact-icon thf-icon thf-icon-telephone thf-pr-1\"></span>\n        <span #phoneItem class=\"thf-page-blocked-user-contact-text thf-font-text\">{{ phone }}</span>\n      </div>\n    </a>\n  </div>\n  <div *ngIf=\"email\"\n    class=\"thf-page-blocked-user-contact-item thf-page-blocked-user-contact-mail\"\n    [ngClass]=\"overflowItem ? 'thf-md-12' : 'thf-md-6'\">\n    <a\n      class=\"thf-page-blocked-user-link thf-clickable\"\n      [class.thf-page-blocked-user-contact-content-inline]=\"overflowItem\"\n      href=\"mailto:{{ email }}\"\n      target=\"_self\">\n      <div class=\"thf-page-blocked-user-contact-group-item\">\n        <span class=\"thf-page-blocked-user-contact-icon thf-icon thf-icon-mail thf-pr-1 \"></span>\n        <span #mailItem class=\"thf-page-blocked-user-contact-text thf-font-text\">{{ email }}</span>\n      </div>\n    </a>\n  </div>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        ThfPageBlockedUserContactsComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        ThfPageBlockedUserContactsComponent.propDecorators = {
            email: [{ type: core.Input, args: ['t-email',] }],
            phone: [{ type: core.Input, args: ['t-phone',] }],
            contactGroup: [{ type: core.ViewChild, args: ['contactGroup', { static: true },] }],
            mailItem: [{ type: core.ViewChild, args: ['mailItem', { static: true },] }],
            phoneItem: [{ type: core.ViewChild, args: ['phoneItem', { static: true },] }]
        };
        return ThfPageBlockedUserContactsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfPageBlockedUserLiterals = {
        none: {
            pt: {
                title: 'Opa!',
                firstPhrase: 'Tivemos que bloquear essa tela temporariamente.',
                secondPhrase: 'Mas não se preocupe! Basta fazer seu login novamente.'
            },
            en: {
                title: 'Oops!',
                firstPhrase: 'We had to temporarily block this screen.',
                secondPhrase: 'But do not worry! Just sign in again.'
            },
            es: {
                title: 'Opa!',
                firstPhrase: 'Tuvimos que bloquear esta pantalla temporalmente.',
                secondPhrase: '¡Pero no se preocupe! Sólo tienes que iniciar sesión de nuevo.'
            },
        },
        exceededAttempts: {
            pt: {
                title: 'Opa!',
                firstPhrase: "Para sua seguran\u00E7a, ap\u00F3s {0} tentativa(s) de senha seu usu\u00E1rio fica bloqueado e n\u00E3o pode ser acessado em {1} hora(s) :( ",
                secondPhrase: 'Isso é para evitar que hackers invadam sua conta.',
                thirdPhrase: 'Mas não se preocupe! Se você for o dono da conta e apenas esqueceu sua senha, basta entrar em contato com o suporte.'
            },
            en: {
                title: 'Oops!',
                firstPhrase: "For your security, after {0} attempt(s) of password\n        your user gets blocked and can not be accessed in {1} hour(s) :(",
                secondPhrase: 'This is to prevent hackers from hacking into your account.',
                thirdPhrase: 'But do not worry! If you are the owner of the account and just forgot your password, just contact support.'
            },
            es: {
                title: 'Opa!',
                firstPhrase: "Para su seguridad, despu\u00E9s de {0} intento(s) de contrase\u00F1a\n        su usuario queda bloqueado y no puede ser accedido en {1} hora(s) :(",
                secondPhrase: 'Esto es para evitar que los hackers invadan su cuenta.',
                thirdPhrase: "\u00A1Pero no se preocupe! Si usted es el due\u00F1o de la cuenta\n        y acaba de olvidar su contrase\u00F1a, simplemente p\u00F3ngase en contacto con el soporte."
            }
        },
        expiredPassword: {
            pt: {
                title: 'Opa! Sua senha expirou',
                firstPhrase: "A cada {0} dia(s) \u00E9 preciso criar uma nova senha por quest\u00E3o de seguran\u00E7a. Ap\u00F3s esses {0} dia(s) seu acesso \u00E9 bloqueado :(",
                secondPhrase: 'Mas não se preocupe! Basta entrar em contato com o administrador do sistema.'
            },
            en: {
                title: 'Oops! Your Password has expired',
                firstPhrase: "Every {0} day(s) you need to create a new password for security reasons.\n        After these {0} day(s) your access is blocked :(",
                secondPhrase: 'But do not worry! Just contact your system administrator.'
            },
            es: {
                title: 'Opa! Su contraseña ha caducado',
                firstPhrase: "Cada {0} d\u00EDa(s) es necesario crear una nueva contrase\u00F1a por razones de seguridad.\n        Despu\u00E9s de estos {0} d\u00EDa(s) su acceso est\u00E1 bloqueado :(",
                secondPhrase: '¡Pero no se preocupe! Sólo tienes que ponerse en contacto con el administrador del sistema.'
            }
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageBlockedUserReasonComponent = /** @class */ (function () {
        function ThfPageBlockedUserReasonComponent(changeDetector) {
            this.changeDetector = changeDetector;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ThfPageBlockedUserReasonComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.reason || changes.params) {
                this.getLiterals();
            }
        };
        /**
         * @return {?}
         */
        ThfPageBlockedUserReasonComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.getLiterals();
        };
        /**
         * @return {?}
         */
        ThfPageBlockedUserReasonComponent.prototype.getImageByReasonType = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var reasonImage;
            switch (this.reason) {
                case 'none': {
                    reasonImage = 'big-lock';
                    break;
                }
                case 'exceededAttempts': {
                    reasonImage = 'blocked-user';
                    break;
                }
                case 'expiredPassword': {
                    reasonImage = 'expired';
                    break;
                }
            }
            return "./assets/images/" + reasonImage + ".svg";
        };
        /**
         * @return {?}
         */
        ThfPageBlockedUserReasonComponent.prototype.getParams = /**
         * @return {?}
         */
        function () {
            this.literalParams =
                this.reason === 'expiredPassword' ? [this.params.days, this.params.days] : [this.params.attempts, this.params.hours];
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageBlockedUserReasonComponent.prototype.getLiterals = /**
         * @private
         * @return {?}
         */
        function () {
            this.getParams();
            this.literals = __assign({}, thfPageBlockedUserLiterals[this.reason][thfLocaleDefault], thfPageBlockedUserLiterals[this.reason][browserLanguage()]);
            this.changeDetector.detectChanges();
        };
        ThfPageBlockedUserReasonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-blocked-user-reason',
                        template: "<div class=\"thf-page-blocked-user-reason-content\">\n  <img \n    class=\"thf-page-blocked-user-image thf-mb-3\" \n    [src]=\"getImageByReasonType()\"> \n  <div class=\"thf-page-blocked-user-header thf-mb-md-3 thf-row\">\n    <div class=\"thf-md-12\">{{ literals?.title }}</div>\n  </div>\n  <div class=\"thf-page-blocked-user-text thf-font-text thf-row\">\n    <div class=\"thf-mb-sm-2 thf-mb-md-3 thf-md-12 thf-page-blocked-user-text-bold\">{{ literals?.firstPhrase | thfI18n:literalParams }}</div>\n    <div class=\"thf-mb-sm-2 thf-mb-md-3 thf-md-12\">{{ literals?.secondPhrase }}</div>\n    <div class=\"thf-mb-sm-2 thf-mb-md-3 thf-md-12\" *ngIf=\"literals?.thirdPhrase\">{{ literals?.thirdPhrase }}</div>\n  </div>\n</div>"
                    }] }
        ];
        /** @nocollapse */
        ThfPageBlockedUserReasonComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        ThfPageBlockedUserReasonComponent.propDecorators = {
            params: [{ type: core.Input, args: ['t-params',] }],
            reason: [{ type: core.Input, args: ['t-reason',] }]
        };
        return ThfPageBlockedUserReasonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do template do thf-page-blocked-user.
     */
    var ThfPageBlockedUserModule = /** @class */ (function () {
        function ThfPageBlockedUserModule() {
        }
        ThfPageBlockedUserModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            router.RouterModule,
                            thfUi.ThfModule,
                            ThfPageBackgroundModule,
                        ],
                        declarations: [
                            ThfPageBlockedUserComponent,
                            ThfPageBlockedUserContactsComponent,
                            ThfPageBlockedUserReasonComponent,
                        ],
                        exports: [
                            ThfPageBlockedUserComponent,
                            ThfPageBlockedUserContactsComponent,
                            ThfPageBlockedUserReasonComponent,
                        ]
                    },] }
        ];
        return ThfPageBlockedUserModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O componente `thf-page-change-password` é utilizado como template para tela de cadastro ou alteração de senha.
     *
     * Apresenta dicas e regras para senhas mais seguras e também possibilidade de personalizar o redirecionamento para as telas
     * 'esqueceu a senha', 'voltar' e 'entrar no sistema'. Os textos das telas são pré-definidos e imutáveis.
     *
     * A propriedade `t-url-new-password` automatiza a rotina do template e simplifica o processo de cadastro/alteração de senha, bastando
     * definir uma url para POST das informações digitadas pelo usuário.  A flexibilidade e praticidade podem chegar a um nível em que o
     * desenvolvimento da aplicação no *client side* é desprovida de qualquer código-fonte relacionado à rotina de cadastro/alteração de senha.
     * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
     * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
     *
     * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
     * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
     * ```
     *   "assets": [
     *     "src/assets",
     *     "src/favicon.ico",
     *     {
     *       "glob": "**\/*",
     *       "input": "node_modules/\@totvs/thf-theme/images",
     *       "output": "assets/images"
     *     }
     *   ]
     * ```
     * @abstract
     */
    var ThfPageChangePasswordBaseComponent = /** @class */ (function () {
        function ThfPageChangePasswordBaseComponent() {
            this._hideCurrentPassword = false;
            this._requirements = [];
            this._urlHome = '/';
            /**
             * \@optional
             *
             * \@description
             *
             * URL para a ação de retorno da página.
             *
             * > O botão `Voltar` aparece apenas para telas de alteração de senha, ou seja, só aparece se a propriedade `t-hide-current-password` for
             * falsa.
             *
             * \@default `/`
             */
            this.urlBack = '/';
            /**
             * \@optional
             *
             * \@description
             *
             * Função executada ao submeter o form pelo botão salvar.
             *
             * Caso definida essa função, a modal de confirmação não aparece, mas pode ser chamada pelo
             * método `openConfirmation`. Exemplo:
             *
             * ```
             * \@ViewChild(ThfPageChangePasswordComponent) changePassword: ThfPageChangePasswordComponent;
             *
             * onSubmit() {
             *  this.changePassword.openConfirmation();
             * }
             *
             * ```
             * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-new-password`.
             */
            this.submit = new core.EventEmitter();
        }
        Object.defineProperty(ThfPageChangePasswordBaseComponent.prototype, "hideCurrentPassword", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hideCurrentPassword;
            },
            /**
             * @optional
             *
             * @description
             *
             * Esconde o campo `Senha atual` para que o template seja para criação de senha.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Esconde o campo `Senha atual` para que o template seja para criação de senha.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._hideCurrentPassword = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageChangePasswordBaseComponent.prototype, "recovery", {
            get: /**
             * @return {?}
             */
            function () {
                return this._recovery;
            },
            /**
             * @optional
             *
             * @description
             *
             * URL para a ação do link `Esqueceu a senha`.
             *
             * A propriedade aceita os seguintes tipos:
             *
             * - **String**: informe uma url externa ou uma rota válida;
             * - **Function**: pode-se customizar a ação. Para esta possilidade basta atribuir:
             * ```
             * <thf-page-change-password>
             *      [recovery]="this.myFunc.bind(this)";
             * </thf-page-change-password>
             * ```
             *
             * - **ThfPageChangePasswordRecovery**: cria-se vínculo automático com o template **thf-modal-password-recovery**.
             *   O objeto deve conter a **url** para requisição dos recursos e pode-se definir o **tipo** de modal para recuperação de senha,
             *   **email** para contato e **máscara** do campo de telefone.
             *
             * > Caso não tenha valor o link `Esqueceu a senha` desaparece.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * URL para a ação do link `Esqueceu a senha`.
             *
             * A propriedade aceita os seguintes tipos:
             *
             * - **String**: informe uma url externa ou uma rota válida;
             * - **Function**: pode-se customizar a ação. Para esta possilidade basta atribuir:
             * ```
             * <thf-page-change-password>
             *      [recovery]="this.myFunc.bind(this)";
             * </thf-page-change-password>
             * ```
             *
             * - **ThfPageChangePasswordRecovery**: cria-se vínculo automático com o template **thf-modal-password-recovery**.
             *   O objeto deve conter a **url** para requisição dos recursos e pode-se definir o **tipo** de modal para recuperação de senha,
             *   **email** para contato e **máscara** do campo de telefone.
             *
             * > Caso não tenha valor o link `Esqueceu a senha` desaparece.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._recovery = value;
                if (isTypeof(value, 'string')) {
                    this.recoveryUrlType = isExternalLink(value) ? 'externalLink' : 'internalLink';
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageChangePasswordBaseComponent.prototype, "requirements", {
            get: /**
             * @return {?}
             */
            function () {
                return this._requirements;
            },
            /**
             * @optional
             *
             * @description
             *
             * Lista de regras para criação e alteração de senha.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Lista de regras para criação e alteração de senha.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._requirements = value || [];
                this.showRequirements = this._requirements.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageChangePasswordBaseComponent.prototype, "urlHome", {
            get: /**
             * @return {?}
             */
            function () {
                return this._urlHome;
            },
            /**
             * @optional
             *
             * @description
             *
             * URL para a ação do botão `Entrar no sistema` da modal de confirmação que aparece após salvar a senha ou se chamada pelo método
             * `openConfirmation`.
             *
             * @default `/`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * URL para a ação do botão `Entrar no sistema` da modal de confirmação que aparece após salvar a senha ou se chamada pelo método
             * `openConfirmation`.
             *
             * \@default `/`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._urlHome = value;
                this.modalAction.action = this.navigateTo.bind(this, this.urlHome);
            },
            enumerable: true,
            configurable: true
        });
        ThfPageChangePasswordBaseComponent.propDecorators = {
            hideCurrentPassword: [{ type: core.Input, args: ['t-hide-current-password',] }],
            logo: [{ type: core.Input, args: ['t-logo',] }],
            recovery: [{ type: core.Input, args: ['t-recovery',] }],
            requirements: [{ type: core.Input, args: ['t-requirements',] }],
            secondaryLogo: [{ type: core.Input, args: ['t-secondary-logo',] }],
            token: [{ type: core.Input, args: ['t-token',] }],
            urlBack: [{ type: core.Input, args: ['t-url-back',] }],
            urlNewPassword: [{ type: core.Input, args: ['t-url-new-password',] }],
            urlHome: [{ type: core.Input, args: ['t-url-home',] }],
            submit: [{ type: core.Output, args: ['t-submit',] }]
        };
        return ThfPageChangePasswordBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfPageChangePasswordLiterals = {
        en: (/** @type {?} */ ({
            backButton: 'Back',
            confirmPassword: 'Confirm password',
            createNewPassword: 'Create new password',
            createNewPasswordPhrase: 'Protect your account with a personal password created by you',
            currentPassword: 'Current password',
            enterSystemButton: 'Enter the system',
            forgotPassword: 'Forgot your password?',
            newPassword: 'New password',
            passwordSuccessfullyCreated: 'Password successfully created!',
            passwordSuccessfullyUpdated: 'Password successfully updated!',
            requirements: 'Password requirements',
            safetyTips: 'Safety tips!',
            safetyTipsFirst: 'is used in other accounts;',
            safetyTipsPhrase: 'Avoid a password that:',
            safetyTipsSecond: 'has personal information like your name, nickname or family names;',
            safetyTipsThird: 'that uses obvious sequences like "123" or obvious words like "password";',
            saveButton: 'Save',
        })),
        es: (/** @type {?} */ ({
            backButton: 'Volver',
            confirmPassword: 'Confirmar seña',
            createNewPassword: 'Crear nueva contraseña',
            createNewPasswordPhrase: 'Proteger su cuenta con una contraseña personal creada por usted',
            currentPassword: 'Contraseña actual',
            enterSystemButton: 'Entrar en el sistema',
            forgotPassword: '¿Olvidaste tu contraseña?',
            newPassword: 'Nueva contraseña',
            passwordSuccessfullyCreated: 'Contraseña creada correctamente!',
            passwordSuccessfullyUpdated: 'Contraseña correctamente actualizada!',
            requirements: 'Requisitos de contraseña',
            safetyTips: 'Consejos de seguridad!',
            safetyTipsFirst: 'se utilice en otras cuentas;',
            safetyTipsPhrase: 'Evite una contraseña que:',
            safetyTipsSecond: 'utiliza información personal como su nombre, apellido o nombre de familia;',
            safetyTipsThird: 'utilice secuencias muy obvias como "1234" o "abcd" o palabras obvias como "contraseña";',
            saveButton: 'Guardar',
        })),
        pt: (/** @type {?} */ ({
            backButton: 'Voltar',
            confirmPassword: 'Confirmar senha',
            createNewPassword: 'Criar nova senha',
            createNewPasswordPhrase: 'Proteja sua conta com uma senha pessoal criada por você',
            currentPassword: 'Senha atual',
            enterSystemButton: 'Entrar no sistema',
            forgotPassword: 'Esqueceu sua senha?',
            newPassword: 'Nova senha',
            passwordSuccessfullyCreated: 'Senha criada com sucesso!',
            passwordSuccessfullyUpdated: 'Senha alterada com sucesso!',
            requirements: 'Requisitos de senha',
            safetyTips: 'Dicas de segurança!',
            safetyTipsFirst: 'seja usada em outras contas;',
            safetyTipsPhrase: 'Evite uma senha que:',
            safetyTipsSecond: 'usa informações pessoais como seu nome, apelido ou nome de familiares;',
            safetyTipsThird: 'use sequências muito óbvias como "1234" ou "abcd" ou palavras óbvias como “senha”;',
            saveButton: 'Salvar',
        }))
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageChangePasswordService = /** @class */ (function () {
        function ThfPageChangePasswordService(http) {
            this.http = http;
        }
        /**
         * @param {?} url
         * @param {?} item
         * @return {?}
         */
        ThfPageChangePasswordService.prototype.post = /**
         * @param {?} url
         * @param {?} item
         * @return {?}
         */
        function (url, item) {
            return this.http.post(url, item, { observe: 'response' });
        };
        ThfPageChangePasswordService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfPageChangePasswordService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return ThfPageChangePasswordService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfPageChangePasswordBaseComponent
     *
     * \@example
     *
     * <example name="thf-page-change-password-basic" title="Totvs Page Change Password Basic">
     *  <file name="sample-thf-page-change-password-basic/sample-thf-page-change-password-basic.component.html"> </file>
     *  <file name="sample-thf-page-change-password-basic/sample-thf-page-change-password-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-change-password-labs" title="Totvs Page Change Password Labs">
     *  <file name="sample-thf-page-change-password-labs/sample-thf-page-change-password-labs.component.html"> </file>
     *  <file name="sample-thf-page-change-password-labs/sample-thf-page-change-password-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-change-password-modify" title="Totvs Page Change Password Modify">
     *  <file name="sample-thf-page-change-password-modify/sample-thf-page-change-password-modify.component.html"> </file>
     *  <file name="sample-thf-page-change-password-modify/sample-thf-page-change-password-modify.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-change-password-create" title="Totvs Page Change Password Create">
     *  <file name="sample-thf-page-change-password-create/sample-thf-page-change-password-create.component.html"> </file>
     *  <file name="sample-thf-page-change-password-create/sample-thf-page-change-password-create.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-change-password-request" title="Totvs Page Change Password Request">
     *  <file name="sample-thf-page-change-password-request/sample-thf-page-change-password-request.component.html"> </file>
     *  <file name="sample-thf-page-change-password-request/sample-thf-page-change-password-request.component.ts"> </file>
     * </example>
     */
    var ThfPageChangePasswordComponent = /** @class */ (function (_super) {
        __extends(ThfPageChangePasswordComponent, _super);
        function ThfPageChangePasswordComponent(activatedRoute, route, router, service, thfComponentInjector, viewRef) {
            var _this = _super.call(this) || this;
            _this.activatedRoute = activatedRoute;
            _this.route = route;
            _this.router = router;
            _this.service = service;
            _this.thfComponentInjector = thfComponentInjector;
            _this.literals = __assign({}, thfPageChangePasswordLiterals[thfLocaleDefault], thfPageChangePasswordLiterals[browserLanguage()]);
            _this.componentRef = null;
            _this.modalAction = {
                action: _this.navigateTo.bind(_this, _this.urlHome),
                label: _this.literals.enterSystemButton
            };
            _this.parentRef = viewRef['_view']['component'];
            return _this;
        }
        /**
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            if (this.urlNewPassword) {
                this.subscribeToTokenParameter();
            }
        };
        /**
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.newPasswordSubscription) {
                this.newPasswordSubscription.unsubscribe();
            }
        };
        /**
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.checkingForRouteMetadata(this.activatedRoute.snapshot.data);
        };
        /**
         * @param {?} url
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.navigateTo = /**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            isExternalLink(url) ? window.open(url) : this.router.navigate([url || '/']);
        };
        /**
         * @param {?} recovery
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.onForgotPasswordClick = /**
         * @param {?} recovery
         * @return {?}
         */
        function (recovery) {
            if (isTypeof(recovery, 'function')) {
                recovery();
            }
            else {
                this.createModalPasswordRecoveryComponent(recovery);
            }
        };
        /**
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.onLoginSubmit = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var form = this.getLoginForm();
            if (this.urlNewPassword) {
                this.postUrlNewPassword(form);
            }
            else if (this.submit && this.submit.observers.length) {
                this.emitSubmit(form);
            }
        };
        /**
         * Abre uma modal de confirmação com texto, imagem e botão que redireciona para o link definido na propriedade `t-url-home`
         */
        /**
         * Abre uma modal de confirmação com texto, imagem e botão que redireciona para o link definido na propriedade `t-url-home`
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.openConfirmation = /**
         * Abre uma modal de confirmação com texto, imagem e botão que redireciona para o link definido na propriedade `t-url-home`
         * @return {?}
         */
        function () {
            this.modal.open();
        };
        /**
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.validatePassword = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var controls = this.passwordForm.form.controls;
            /** @type {?} */
            var controlConfirmPassword = controls['confirmPassword'];
            /** @type {?} */
            var controlNewPassword = controls['newPassword'];
            if (!this.newPassword) {
                this.setFormErrors({ 'required': true }, [controlNewPassword]);
            }
            else if (!this.confirmPassword) {
                this.setFormErrors({ 'required': true }, [controlConfirmPassword]);
            }
            else if (this.newPassword && this.confirmPassword && this.newPassword !== this.confirmPassword) {
                this.setFormErrors({ 'equalPassword': true }, [controlNewPassword, controlConfirmPassword]);
            }
            else {
                this.setFormErrors(null, [controlConfirmPassword, controlNewPassword]);
            }
            if (this.requirements.length && this.requirements.find((/**
             * @param {?} requirement
             * @return {?}
             */
            function (requirement) { return _this.validateRequirement(requirement) === false; }))) {
                this.setFormErrors({ 'requirement': true }, [controlNewPassword]);
            }
        };
        /**
         * @param {?} requirement
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.validateRequirement = /**
         * @param {?} requirement
         * @return {?}
         */
        function (requirement) {
            return typeof requirement.status === 'function' ? requirement.status.call(this.parentRef, this.newPassword) : requirement.status;
        };
        /**
         * @private
         * @param {?} object
         * @param {?} property
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.checkingForMetadataProperty = /**
         * @private
         * @param {?} object
         * @param {?} property
         * @return {?}
         */
        function (object, property) {
            if (Object.prototype.hasOwnProperty.call(object, property)) {
                return object[property];
            }
        };
        /**
         * @private
         * @param {?} data
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.checkingForRouteMetadata = /**
         * @private
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (Object.keys(data).length !== 0) {
                this.urlNewPassword = this.checkingForMetadataProperty(data, 'serviceApi') || this.urlNewPassword;
                this.recovery = this.checkingForMetadataProperty(data, 'recovery') || this.recovery;
                this.hideCurrentPassword = this.checkingForMetadataProperty(data, 'hideCurrentPassword') || this.hideCurrentPassword;
            }
        };
        /**
         * @private
         * @param {?} recovery
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.createModalPasswordRecoveryComponent = /**
         * @private
         * @param {?} recovery
         * @return {?}
         */
        function (recovery) {
            var _this = this;
            if (this.componentRef) {
                this.thfComponentInjector.destroyComponentInApplication(this.componentRef);
            }
            this.componentRef = this.thfComponentInjector.createComponentInApplication(ThfModalPasswordRecoveryComponent);
            this.componentRef.instance.recovery = recovery.url;
            this.componentRef.instance.contactEmail = recovery.contactMail;
            this.componentRef.instance.phoneMask = recovery.phoneMask;
            this.componentRef.instance.type = recovery.type || ThfModalPasswordRecoveryType.Email;
            this.componentRef.changeDetectorRef.detectChanges();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.componentRef.instance.open();
            }));
        };
        /**
         * @private
         * @param {?} form
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.emitSubmit = /**
         * @private
         * @param {?} form
         * @return {?}
         */
        function (form) {
            this.submit.emit(form);
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.getLoginForm = /**
         * @private
         * @return {?}
         */
        function () {
            return {
                currentPassword: this.currentPassword,
                newPassword: this.newPassword
            };
        };
        /**
         * @private
         * @param {?} form
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.postUrlNewPassword = /**
         * @private
         * @param {?} form
         * @return {?}
         */
        function (form) {
            var _this = this;
            form['token'] = this.token;
            this.service.post(this.urlNewPassword, form).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response.status === 204) {
                    _this.openConfirmation();
                }
            }));
        };
        /**
         * @private
         * @param {?} error
         * @param {?=} controls
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.setFormErrors = /**
         * @private
         * @param {?} error
         * @param {?=} controls
         * @return {?}
         */
        function (error, controls) {
            controls.forEach((/**
             * @param {?} control
             * @return {?}
             */
            function (control) {
                control.setErrors(error);
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageChangePasswordComponent.prototype.subscribeToTokenParameter = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.route.queryParams.subscribe((/**
             * @param {?} params
             * @return {?}
             */
            function (params) {
                /** @type {?} */
                var token = params['token'];
                if (token) {
                    _this.token = token;
                }
            }));
        };
        ThfPageChangePasswordComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-change-password',
                        template: "<div class=\"thf-page-change-password-wrapper\" #pageChangePassword>\n  <div class=\"thf-page-change-password-container\">\n    <thf-page-background class=\"thf-page-change-password\"\n      [t-logo]=\"logo\"\n      [t-secondary-logo]=\"secondaryLogo\">\n\n      <div class=\"thf-page-blocked-user-header thf-row\">\n        <div class=\"thf-md-12\">{{literals.createNewPassword}}</div>\n        <div class=\"thf-md-12 thf-text-center thf-font-text\">\n          {{literals.createNewPasswordPhrase}}\n        </div>\n      </div>\n\n      <form #passwordForm=\"ngForm\">\n\n        <div class=\"thf-row thf-mt-3 thf-mt-sm-1\">\n          <div class=\"thf-md-6\"\n            [ngClass]=\"{'thf-offset-md-3 thf-offset-lg-3 thf-offset-xl-3': !showRequirements}\">\n            <div *ngIf=\"!hideCurrentPassword\">\n              <thf-password\n                name=\"currentPassword\"\n                [(ngModel)]=\"currentPassword\"\n                t-required\n                [t-label]=\"literals.currentPassword\">\n              </thf-password>\n            </div>\n            <div *ngIf=\"!hideCurrentPassword && recovery\" class=\"thf-text-center thf-mb-sm-1 thf-mb-2\">\n              <a *ngIf=\"recoveryUrlType === 'internalLink'\"\n                class=\"thf-font-text-bold thf-page-change-password-forgot-password\"\n                [routerLink]=\"recovery\">\n                {{literals.forgotPassword}}\n              </a>\n              <a *ngIf=\"recoveryUrlType === 'externalLink'\"\n                class=\"thf-font-text-bold thf-page-change-password-forgot-password\"\n                [href]=\"recovery\">\n                {{literals.forgotPassword}}\n              </a>\n              <a *ngIf=\"!recoveryUrlType\"\n                class=\"thf-font-text-bold thf-page-change-password-forgot-password thf-clickable\"\n                (click)=\"onForgotPasswordClick(recovery)\">\n                {{literals.forgotPassword}}\n              </a>\n            </div>\n            <div>\n              <thf-password\n                name=\"newPassword\"\n                [(ngModel)]=\"newPassword\"\n                t-required\n                [t-label]=\"literals.newPassword\"\n                (t-change-model)=\"validatePassword()\">\n              </thf-password>\n            </div>\n            <div>\n              <thf-password\n                name=\"confirmPassword\"\n                [(ngModel)]=\"confirmPassword\"\n                t-required\n                [t-label]=\"literals.confirmPassword\"\n                (t-change-model)=\"validatePassword()\">\n              </thf-password>\n            </div>\n          </div>\n          <div *ngIf=\"showRequirements\"\n            class=\"thf-md-6 thf-page-change-password-required-container\">\n            <thf-container>\n              <ul class=\"thf-page-change-password-required-list\">\n                <li class=\"thf-page-change-password-required-item\">\n                  <p class=\"thf-mb-1 thf-font-text-bold thf-page-change-password-required-title\">\n                    {{literals?.requirements}}\n                  </p>\n                </li>\n                <li *ngFor=\"let requirement of requirements\"\n                  class=\"thf-page-change-password-required-item\">\n                  <span class=\"thf-icon thf-page-change-password-required-icon\"\n                    [ngClass]=\"validateRequirement(requirement) ? 'thf-icon-ok thf-page-change-password-required-ok' : 'thf-icon-minus thf-page-change-password-required-minus'\">\n                  </span>\n                  <p class=\"thf-page-change-password-required-text thf-font-text\">\n                    {{requirement.requirement}}\n                  </p>\n                </li>\n              </ul>\n            </thf-container>\n          </div>\n        </div>\n      </form>\n\n      <thf-divider class=\"thf-sm-12\"></thf-divider>\n\n      <div class=\"thf-page-change-password-tips thf-row\">\n        <div class=\"thf-md-2 thf-mr-3\">\n          <img\n            class=\"thf-page-change-password-lock-image thf-mb-3\"\n            alt=\"Blocked user image\"\n            src=\"./assets/images/big-lock.svg\"\n          />\n        </div>\n        <div class=\"thf-md-9 thf-page-change-password-tips-text\">\n          <div class=\"thf-font-text-bold thf-pb-1\">{{literals.safetyTips}}</div>\n          <div class=\"thf-font-text-small\">\n            <div class=\"thf-row thf-pb-1\">{{literals.safetyTipsPhrase}}</div>\n            <div class=\"thf-row thf-pb-1\">\u2022 {{literals.safetyTipsFirst}}</div>\n            <div class=\"thf-row thf-pb-1\">\u2022 {{literals.safetyTipsSecond}}</div>\n            <div class=\"thf-row thf-pb-1\">\u2022 {{literals.safetyTipsThird}}</div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"thf-page-change-password-buttons thf-row\">\n\n        <thf-divider class=\"thf-sm-12 thf-mobile-only\"></thf-divider>\n\n        <thf-button *ngIf=\"!hideCurrentPassword\"\n          class=\"thf-sm-6 thf-mb-sm-1\"\n          [t-label]=\"literals.backButton\"\n          (t-click)=\"navigateTo(urlBack)\">\n        </thf-button>\n\n        <thf-button\n          [ngClass]=\"hideCurrentPassword ? 'thf-md-12':'thf-sm-6'\"\n          t-type=\"primary\"\n          [t-disabled]=\"passwordForm.invalid\"\n          [t-label]=\"literals.saveButton\"\n          (t-click)=\"onLoginSubmit()\">\n        </thf-button>\n\n      </div>\n\n    </thf-page-background>\n\n  </div>\n</div>\n\n<thf-modal\n  [t-primary-action]=\"modalAction\"\n  t-hide-close\n  t-size=\"auto\"\n  [t-title]=\"hideCurrentPassword ? literals.passwordSuccessfullyCreated : literals.passwordSuccessfullyUpdated\">\n\n  <div class=\"thf-text-center\">\n    <img\n      alt=\"Blocked user image\"\n      class=\"thf-page-change-password-lock-image thf-mb-3\"\n      src=\"./assets/images/success.svg\"\n    />\n  </div>\n</thf-modal>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfPageChangePasswordComponent.ctorParameters = function () { return [
            { type: router.ActivatedRoute },
            { type: router.ActivatedRoute },
            { type: router.Router },
            { type: ThfPageChangePasswordService },
            { type: thfUi.ThfComponentInjectorService },
            { type: core.ViewContainerRef }
        ]; };
        ThfPageChangePasswordComponent.propDecorators = {
            modal: [{ type: core.ViewChild, args: [thfUi.ThfModalComponent, { static: true },] }],
            pageChangePassword: [{ type: core.ViewChild, args: ['pageChangePassword', { read: core.ViewContainerRef, static: true },] }],
            passwordForm: [{ type: core.ViewChild, args: ['passwordForm', { read: forms.NgForm, static: true },] }]
        };
        return ThfPageChangePasswordComponent;
    }(ThfPageChangePasswordBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do template do thf-page-change-password.
     */
    var ThfPageChangePasswordModule = /** @class */ (function () {
        function ThfPageChangePasswordModule() {
        }
        ThfPageChangePasswordModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            router.RouterModule,
                            thfUi.ThfModule,
                            ThfPageBackgroundModule
                        ],
                        declarations: [
                            ThfPageChangePasswordComponent
                        ],
                        entryComponents: [
                            ThfModalPasswordRecoveryComponent
                        ],
                        providers: [
                            ThfPageChangePasswordService
                        ],
                        exports: [
                            ThfPageChangePasswordComponent
                        ]
                    },] }
        ];
        return ThfPageChangePasswordModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageDynamicService = /** @class */ (function () {
        function ThfPageDynamicService(http$1) {
            this.http = http$1;
            this.endpoint = '/';
            this.headers = new http.HttpHeaders({
                'X-TOTVS-SCREEN-LOCK': 'true'
            });
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        ThfPageDynamicService.prototype.configServiceApi = /**
         * @param {?=} config
         * @return {?}
         */
        function (config) {
            if (config === void 0) { config = {}; }
            this.endpoint = config.endpoint;
        };
        /**
         * @param {?=} type
         * @return {?}
         */
        ThfPageDynamicService.prototype.getMetadata = /**
         * @param {?=} type
         * @return {?}
         */
        function (type) {
            if (type === void 0) { type = 'list'; }
            /** @type {?} */
            var key = this.endpoint + "-" + type + "-metadata";
            /** @type {?} */
            var cache = JSON.parse(localStorage.getItem(key)) || {};
            /** @type {?} */
            var url = this.endpoint + "/metadata?type=" + type + "&version=" + (cache.version || '');
            return this.http.get(url).pipe(operators.map((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response.version === cache.version) {
                    return cache;
                }
                localStorage.setItem(key, JSON.stringify(response));
                return __assign({}, cache, response);
            })));
        };
        // Deleta um único recurso
        // Deleta um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        ThfPageDynamicService.prototype.deleteResource = 
        // Deleta um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            return this.http.delete(this.endpoint + "/" + id, { headers: this.headers });
        };
        // Deleta recursos em lote
        // Deleta recursos em lote
        /**
         * @param {?} ids
         * @return {?}
         */
        ThfPageDynamicService.prototype.deleteResources = 
        // Deleta recursos em lote
        /**
         * @param {?} ids
         * @return {?}
         */
        function (ids) {
            return this.http.request('delete', "" + this.endpoint, { headers: this.headers, body: ids });
        };
        // Busca uma lista de recursos
        // Busca uma lista de recursos
        /**
         * @param {?=} params
         * @return {?}
         */
        ThfPageDynamicService.prototype.getResources = 
        // Busca uma lista de recursos
        /**
         * @param {?=} params
         * @return {?}
         */
        function (params) {
            if (params === void 0) { params = {}; }
            return this.http.get(this.endpoint, { headers: this.headers, params: params });
        };
        // Busca um único recurso
        // Busca um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        ThfPageDynamicService.prototype.getResource = 
        // Busca um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            return this.http.get(this.endpoint + "/" + id, { headers: this.headers });
        };
        // Cria um recurso
        // Cria um recurso
        /**
         * @param {?} resource
         * @return {?}
         */
        ThfPageDynamicService.prototype.createResource = 
        // Cria um recurso
        /**
         * @param {?} resource
         * @return {?}
         */
        function (resource) {
            return this.http.post("" + this.endpoint, resource, { headers: this.headers });
        };
        // Atualiza um recurso
        // Atualiza um recurso
        /**
         * @param {?} id
         * @param {?} resource
         * @return {?}
         */
        ThfPageDynamicService.prototype.updateResource = 
        // Atualiza um recurso
        /**
         * @param {?} id
         * @param {?} resource
         * @return {?}
         */
        function (id, resource) {
            return this.http.put(this.endpoint + "/" + id, resource, { headers: this.headers });
        };
        ThfPageDynamicService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfPageDynamicService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return ThfPageDynamicService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfPageDynamicDetailLiteralsDefault = {
        en: {
            pageActionEdit: 'Edit',
            pageActionRemove: 'Delete',
            pageActionBack: 'Back',
            confirmRemoveTitle: 'Confirm delete',
            confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',
            removeNotificationSuccess: 'Item deleted successfully.',
            registerNotFound: 'Register not found.'
        },
        es: {
            pageActionEdit: 'Editar',
            pageActionRemove: 'Borrar',
            pageActionBack: 'Regreso',
            confirmRemoveTitle: 'Confirmar la exclusión',
            confirmRemoveMessage: '¿Está seguro de que desea eliminar este registro? No puede deshacer esta acción.',
            removeNotificationSuccess: 'Elemento eliminado con éxito.',
            registerNotFound: 'Registro no encontrado.'
        },
        pt: {
            pageActionEdit: 'Editar',
            pageActionRemove: 'Excluir',
            pageActionBack: 'Voltar',
            confirmRemoveTitle: 'Confirmar exclusão',
            confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? Você não poderá desfazer essa ação.',
            removeNotificationSuccess: 'Item excluído com sucesso.',
            registerNotFound: 'Registro não encontrado.'
        }
    };
    /**
     * \@description
     *
     * O `thf-page-dynamic-detail` é uma página que serve para exibir registros em detalhes,
     * o mesmo também suporta metadados conforme especificado na documentação.
     *
     * \@example
     *
     * <example name="thf-page-dynamic-detail-basic" title="Totvs Page Dynamic Detail Basic">
     *  <file name="sample-thf-page-dynamic-detail-basic/sample-thf-page-dynamic-detail-basic.component.html"> </file>
     *  <file name="sample-thf-page-dynamic-detail-basic/sample-thf-page-dynamic-detail-basic.component.ts"> </file>
     * </example>
     */
    var ThfPageDynamicDetailComponent = /** @class */ (function () {
        function ThfPageDynamicDetailComponent(router, activatedRoute, thfNotification, thfDialogService, thfPageDynamicService) {
            this.router = router;
            this.activatedRoute = activatedRoute;
            this.thfNotification = thfNotification;
            this.thfDialogService = thfDialogService;
            this.thfPageDynamicService = thfPageDynamicService;
            this._actions = {};
            this._autoRouter = false;
            this._duplicates = [];
            this._fields = [];
            this._keys = [];
            this._pageActions = [];
            this.literals = __assign({}, thfPageDynamicDetailLiteralsDefault[thfLocaleDefault], thfPageDynamicDetailLiteralsDefault[browserLanguage()]);
            this.model = {};
            /**
             * Objeto com propriedades do breadcrumb.
             */
            this.breadcrumb = { items: [] };
        }
        Object.defineProperty(ThfPageDynamicDetailComponent.prototype, "actions", {
            /**
             * @optional
             *
             * @description
             *
             * Define as ações da página de acordo com a interface `ThfPageDynamicDetailActions`.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Define as ações da página de acordo com a interface `ThfPageDynamicDetailActions`.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._actions = this.isObject(value) ? value : {};
                this._pageActions = this.getPageActions(this._actions);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicDetailComponent.prototype, "autoRouter", {
            get: /**
             * @return {?}
             */
            function () {
                return this._autoRouter;
            },
            /**
             * @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
             *
             * @optional
             *
             * @description
             *
             * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso as ações
             * estejam definidas nas ações.
             *
             * > Para o correto funcionamento não pode haver nenhum rota coringa (`**`) especificada.
             *
             * @default false
             */
            set: /**
             * \@todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
             *
             * \@optional
             *
             * \@description
             *
             * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso as ações
             * estejam definidas nas ações.
             *
             * > Para o correto funcionamento não pode haver nenhum rota coringa (`**`) especificada.
             *
             * \@default false
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._autoRouter = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicDetailComponent.prototype, "fields", {
            get: /**
             * @return {?}
             */
            function () {
                return this._fields;
            },
            /** Lista dos campos exibidos na página. */
            set: /**
             * Lista dos campos exibidos na página.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._fields = Array.isArray(value) ? __spread(value) : [];
                this._keys = this.getKeysByFields(this.fields);
                this._duplicates = this.getDuplicatesByFields(this.fields);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfPageDynamicDetailComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var paramId = this.activatedRoute.snapshot.params['id'];
            if (this.activatedRoute.snapshot.data.serviceApi) {
                this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;
                this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
                this.loadMetadata(paramId);
            }
            else {
                this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
                this.loadData(paramId);
            }
        };
        Object.defineProperty(ThfPageDynamicDetailComponent.prototype, "duplicates", {
            get: /**
             * @return {?}
             */
            function () {
                return __spread(this._duplicates);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicDetailComponent.prototype, "keys", {
            get: /**
             * @return {?}
             */
            function () {
                return __spread(this._keys);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicDetailComponent.prototype, "pageActions", {
            get: /**
             * @return {?}
             */
            function () {
                return __spread(this._pageActions);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @param {?} path
         * @return {?}
         */
        ThfPageDynamicDetailComponent.prototype.confirmRemove = /**
         * @private
         * @param {?} path
         * @return {?}
         */
        function (path) {
            /** @type {?} */
            var confirmOptions = {
                title: this.literals.confirmRemoveTitle,
                message: this.literals.confirmRemoveMessage,
                confirm: this.remove.bind(this, path)
            };
            this.thfDialogService.confirm(confirmOptions);
        };
        /**
         * @private
         * @param {?} item
         * @return {?}
         */
        ThfPageDynamicDetailComponent.prototype.formatUniqueKey = /**
         * @private
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var keys = mapObjectByProperties(item, this.keys);
            return valuesFromObject(keys).join('|');
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageDynamicDetailComponent.prototype.goBack = /**
         * @private
         * @return {?}
         */
        function ( /*path*/) {
            window.history.back();
            // if (path) {
            //   this.navigateTo({ path, component: ThfPageDynamicEditComponent });
            // } else {
            //   window.history.back();
            // }
        };
        /**
         * @private
         * @param {?} id
         * @return {?}
         */
        ThfPageDynamicDetailComponent.prototype.loadData = /**
         * @private
         * @param {?} id
         * @return {?}
         */
        function (id) {
            var _this = this;
            this.thfPageDynamicService.getResource(id).toPromise().then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.model = response;
            })).catch((/**
             * @return {?}
             */
            function () {
                _this.model = undefined;
                _this.actions = undefined;
            }));
        };
        /**
         * @private
         * @param {?} id
         * @return {?}
         */
        ThfPageDynamicDetailComponent.prototype.loadMetadata = /**
         * @private
         * @param {?} id
         * @return {?}
         */
        function (id) {
            var _this = this;
            this.thfPageDynamicService.getMetadata('detail').toPromise().then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.autoRouter = response.autoRouter;
                _this.actions = response.actions || {};
                _this.breadcrumb = response.breadcrumb || { items: [] };
                _this.fields = response.fields || [];
                _this.title = response.title;
                _this.loadData(id);
            }));
        };
        // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
        // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
        /**
         * @private
         * @param {?} route
         * @param {?=} forceStopAutoRouter
         * @return {?}
         */
        ThfPageDynamicDetailComponent.prototype.navigateTo = 
        // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
        /**
         * @private
         * @param {?} route
         * @param {?=} forceStopAutoRouter
         * @return {?}
         */
        function (route, forceStopAutoRouter) {
            var _this = this;
            if (forceStopAutoRouter === void 0) { forceStopAutoRouter = false; }
            this.router.navigate([route.url || route.path], { queryParams: route.params })
                .catch((/**
             * @return {?}
             */
            function () {
                if (forceStopAutoRouter || !_this.autoRouter) {
                    return;
                }
                _this.router.config.unshift((/** @type {?} */ ({
                    path: route.path, component: route.component, data: { serviceApi: _this.serviceApi, autoRouter: true }
                })));
                _this.navigateTo(route, true);
            }));
        };
        /**
         * @private
         * @param {?} path
         * @return {?}
         */
        ThfPageDynamicDetailComponent.prototype.openEdit = /**
         * @private
         * @param {?} path
         * @return {?}
         */
        function (path) {
            /** @type {?} */
            var url = this.resolveUrl(this.model, path);
            // this.navigateTo({ path, url, component: ThfPageDynamicEditComponent });
            this.navigateTo({ path: path, url: url });
        };
        /**
         * @private
         * @param {?} path
         * @return {?}
         */
        ThfPageDynamicDetailComponent.prototype.remove = /**
         * @private
         * @param {?} path
         * @return {?}
         */
        function (path) {
            var _this = this;
            /** @type {?} */
            var uniqueKey = this.formatUniqueKey(this.model);
            this.thfPageDynamicService.deleteResource(uniqueKey).toPromise().then((/**
             * @return {?}
             */
            function () {
                _this.thfNotification.success(_this.literals.removeNotificationSuccess);
                _this.navigateTo({ path: path });
                // this.navigateTo({ path: path, component: ThfPageDynamicTableComponent });
            }));
        };
        /**
         * @private
         * @param {?} item
         * @param {?} path
         * @return {?}
         */
        ThfPageDynamicDetailComponent.prototype.resolveUrl = /**
         * @private
         * @param {?} item
         * @param {?} path
         * @return {?}
         */
        function (item, path) {
            /** @type {?} */
            var uniqueKey = this.formatUniqueKey(item);
            return path.replace(/:id/g, uniqueKey);
        };
        /**
         * @private
         * @param {?=} actions
         * @return {?}
         */
        ThfPageDynamicDetailComponent.prototype.getPageActions = /**
         * @private
         * @param {?=} actions
         * @return {?}
         */
        function (actions) {
            if (actions === void 0) { actions = {}; }
            /** @type {?} */
            var pageActions = [];
            if (actions.edit) {
                pageActions.push({ label: this.literals.pageActionEdit, action: this.openEdit.bind(this, actions.edit) });
            }
            if (actions.remove) {
                pageActions.push({ label: this.literals.pageActionRemove, action: this.confirmRemove.bind(this, actions.remove) });
            }
            if (actions.back === undefined || actions.back) {
                pageActions.push({ label: this.literals.pageActionBack, action: this.goBack.bind(this, actions.back) });
            }
            return pageActions;
        };
        /**
         * @private
         * @param {?=} fields
         * @return {?}
         */
        ThfPageDynamicDetailComponent.prototype.getKeysByFields = /**
         * @private
         * @param {?=} fields
         * @return {?}
         */
        function (fields) {
            if (fields === void 0) { fields = []; }
            return fields.filter((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.key === true; })).map((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.property; }));
        };
        /**
         * @private
         * @param {?=} fields
         * @return {?}
         */
        ThfPageDynamicDetailComponent.prototype.getDuplicatesByFields = /**
         * @private
         * @param {?=} fields
         * @return {?}
         */
        function (fields) {
            if (fields === void 0) { fields = []; }
            return fields.filter((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.duplicate === true; })).map((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.property; }));
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfPageDynamicDetailComponent.prototype.isObject = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return !!value && typeof value === 'object' && !Array.isArray(value);
        };
        ThfPageDynamicDetailComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-dynamic-detail',
                        template: "<thf-page-default\n  [t-actions]=\"pageActions\"\n  [t-breadcrumb]=\"breadcrumb\"\n  [t-title]=\"title\">\n\n  <ng-container *ngIf=\"model; then viewFieldsTemplate; else registerNotFoundTemplate\">\n  </ng-container>\n\n</thf-page-default>\n\n<ng-template #registerNotFoundTemplate>\n\n  <thf-widget>\n    <span class=\"thf-icon thf-icon-info\"></span>\n    <span class=\"thf-font-text-large\">\n      {{ literals.registerNotFound }}\n    </span>\n  </thf-widget>\n\n</ng-template>\n\n<ng-template #viewFieldsTemplate>\n\n  <thf-dynamic-view [t-fields]=\"fields\" [t-value]=\"model\">\n  </thf-dynamic-view>\n\n</ng-template>\n",
                        providers: [ThfPageDynamicService]
                    }] }
        ];
        /** @nocollapse */
        ThfPageDynamicDetailComponent.ctorParameters = function () { return [
            { type: router.Router },
            { type: router.ActivatedRoute },
            { type: thfUi.ThfNotificationService },
            { type: thfUi.ThfDialogService },
            { type: ThfPageDynamicService }
        ]; };
        ThfPageDynamicDetailComponent.propDecorators = {
            actions: [{ type: core.Input, args: ['t-actions',] }],
            autoRouter: [{ type: core.Input, args: ['t-auto-router',] }],
            breadcrumb: [{ type: core.Input, args: ['t-breadcrumb',] }],
            fields: [{ type: core.Input, args: ['t-fields',] }],
            title: [{ type: core.Input, args: ['t-title',] }],
            serviceApi: [{ type: core.Input, args: ['t-service-api',] }]
        };
        return ThfPageDynamicDetailComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do template do thf-page-dynamic-detail.
     */
    var ThfPageDynamicDetailModule = /** @class */ (function () {
        function ThfPageDynamicDetailModule() {
        }
        ThfPageDynamicDetailModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            router.RouterModule,
                            thfUi.ThfDynamicModule,
                            thfUi.ThfModalModule,
                            thfUi.ThfPageModule,
                            thfUi.ThfWidgetModule
                        ],
                        declarations: [
                            ThfPageDynamicDetailComponent
                        ],
                        exports: [
                            ThfPageDynamicDetailComponent
                        ]
                    },] }
        ];
        return ThfPageDynamicDetailModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageDynamicService$1 = /** @class */ (function () {
        function ThfPageDynamicService(http$1) {
            this.http = http$1;
            this.endpoint = '/';
            this.headers = new http.HttpHeaders({
                'X-TOTVS-SCREEN-LOCK': 'true'
            });
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        ThfPageDynamicService.prototype.configServiceApi = /**
         * @param {?=} config
         * @return {?}
         */
        function (config) {
            if (config === void 0) { config = {}; }
            this.endpoint = config.endpoint;
        };
        /**
         * @param {?=} type
         * @return {?}
         */
        ThfPageDynamicService.prototype.getMetadata = /**
         * @param {?=} type
         * @return {?}
         */
        function (type) {
            if (type === void 0) { type = 'list'; }
            /** @type {?} */
            var key = this.endpoint + "-" + type + "-metadata";
            /** @type {?} */
            var cache = JSON.parse(localStorage.getItem(key)) || {};
            /** @type {?} */
            var url = this.endpoint + "/metadata?type=" + type + "&version=" + (cache.version || '');
            return this.http.get(url).pipe(operators.map((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response.version === cache.version) {
                    return cache;
                }
                localStorage.setItem(key, JSON.stringify(response));
                return __assign({}, cache, response);
            })));
        };
        // Deleta um único recurso
        // Deleta um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        ThfPageDynamicService.prototype.deleteResource = 
        // Deleta um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            return this.http.delete(this.endpoint + "/" + id, { headers: this.headers });
        };
        // Deleta recursos em lote
        // Deleta recursos em lote
        /**
         * @param {?} ids
         * @return {?}
         */
        ThfPageDynamicService.prototype.deleteResources = 
        // Deleta recursos em lote
        /**
         * @param {?} ids
         * @return {?}
         */
        function (ids) {
            return this.http.request('delete', "" + this.endpoint, { headers: this.headers, body: ids });
        };
        // Busca uma lista de recursos
        // Busca uma lista de recursos
        /**
         * @param {?=} params
         * @return {?}
         */
        ThfPageDynamicService.prototype.getResources = 
        // Busca uma lista de recursos
        /**
         * @param {?=} params
         * @return {?}
         */
        function (params) {
            if (params === void 0) { params = {}; }
            return this.http.get(this.endpoint, { headers: this.headers, params: params });
        };
        // Busca um único recurso
        // Busca um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        ThfPageDynamicService.prototype.getResource = 
        // Busca um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            return this.http.get(this.endpoint + "/" + id, { headers: this.headers });
        };
        // Cria um recurso
        // Cria um recurso
        /**
         * @param {?} resource
         * @return {?}
         */
        ThfPageDynamicService.prototype.createResource = 
        // Cria um recurso
        /**
         * @param {?} resource
         * @return {?}
         */
        function (resource) {
            return this.http.post("" + this.endpoint, resource, { headers: this.headers });
        };
        // Atualiza um recurso
        // Atualiza um recurso
        /**
         * @param {?} id
         * @param {?} resource
         * @return {?}
         */
        ThfPageDynamicService.prototype.updateResource = 
        // Atualiza um recurso
        /**
         * @param {?} id
         * @param {?} resource
         * @return {?}
         */
        function (id, resource) {
            return this.http.put(this.endpoint + "/" + id, resource, { headers: this.headers });
        };
        ThfPageDynamicService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfPageDynamicService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return ThfPageDynamicService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfPageDynamicEditLiteralsDefault = {
        en: {
            cancelConfirmMessage: 'Are you sure you want to cancel this operation?',
            detailActionNew: 'New',
            pageActionCancel: 'Cancel',
            pageActionSave: 'Save',
            pageActionSaveNew: 'Save and new',
            registerNotFound: 'Register not found.',
            saveNewNotificationSuccessSave: 'Resource successfully saved.',
            saveNewNotificationSuccessUpdate: 'Resource successfully updated.',
            saveNewNotificationWarning: 'Form must be filled out correctly.',
            saveNotificationSuccessSave: 'Resource successfully saved.',
            saveNotificationSuccessUpdate: 'Resource successfully updated.',
            saveNotificationWarning: 'Form must be filled out correctly.',
        },
        es: {
            cancelConfirmMessage: 'Está seguro de que desea cancelar esta operación?',
            detailActionNew: 'Nuevo',
            pageActionCancel: 'Cancelar',
            pageActionSave: 'Guardar',
            pageActionSaveNew: 'Guardar y nuevo',
            registerNotFound: 'Registro no encontrado.',
            saveNewNotificationSuccessSave: 'Recurso salvo con éxito.',
            saveNewNotificationSuccessUpdate: 'Recurso actualizado con éxito.',
            saveNewNotificationWarning: 'El formulario debe llenarse correctamente.',
            saveNotificationSuccessSave: 'Recurso salvo con éxito.',
            saveNotificationSuccessUpdate: 'Recurso actualizado con éxito.',
            saveNotificationWarning: 'El formulario debe llenarse correctamente.',
        },
        pt: {
            cancelConfirmMessage: 'Tem certeza que deseja cancelar esta operação?',
            detailActionNew: 'Novo',
            pageActionCancel: 'Cancelar',
            pageActionSave: 'Salvar',
            pageActionSaveNew: 'Salvar e novo',
            registerNotFound: 'Registro não encontrado.',
            saveNewNotificationSuccessSave: 'Recurso salvo com sucesso.',
            saveNewNotificationSuccessUpdate: 'Recurso atualizado com sucesso.',
            saveNewNotificationWarning: 'Formulário precisa ser preenchido corretamente.',
            saveNotificationSuccessSave: 'Recurso salvo com sucesso.',
            saveNotificationSuccessUpdate: 'Recurso atualizado com sucesso.',
            saveNotificationWarning: 'Formulário precisa ser preenchido corretamente.',
        }
    };
    /**
     * \@description
     *
     * O `thf-page-dynamic-edit` é uma página que pode servir para editar ou criar novos registros,
     * o mesmo também suporta metadados conforme especificado na documentação.
     *
     * \@example
     *
     * <example name="thf-page-dynamic-edit-basic" title="Totvs Page Dynamic Edit Basic">
     *  <file name="sample-thf-page-dynamic-edit-basic/sample-thf-page-dynamic-edit-basic.component.html"> </file>
     *  <file name="sample-thf-page-dynamic-edit-basic/sample-thf-page-dynamic-edit-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-dynamic-edit-user" title="Totvs Page Dynamic Edit - User">
     *  <file name="sample-thf-page-dynamic-edit-user/sample-thf-page-dynamic-edit-user.component.html"> </file>
     *  <file name="sample-thf-page-dynamic-edit-user/sample-thf-page-dynamic-edit-user.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-dynamic-edit-master-detail" title="Totvs Page Dynamic Edit - Master Detail">
     *  <file name="sample-thf-page-dynamic-edit-master-detail/sample-thf-page-dynamic-edit-master-detail.component.html"> </file>
     *  <file name="sample-thf-page-dynamic-edit-master-detail/sample-thf-page-dynamic-edit-master-detail.component.ts"> </file>
     * </example>
     */
    var ThfPageDynamicEditComponent = /** @class */ (function () {
        function ThfPageDynamicEditComponent(router, activatedRoute, thfNotification, thfDialogService, thfPageDynamicService) {
            this.router = router;
            this.activatedRoute = activatedRoute;
            this.thfNotification = thfNotification;
            this.thfDialogService = thfDialogService;
            this.thfPageDynamicService = thfPageDynamicService;
            this._actions = {};
            this._autoRouter = false;
            this._controlFields = [];
            this._detailFields = [];
            this._duplicates = [];
            this._fields = [];
            this._keys = [];
            this._pageActions = [];
            this.literals = __assign({}, thfPageDynamicEditLiteralsDefault[thfLocaleDefault], thfPageDynamicEditLiteralsDefault[browserLanguage()]);
            this.model = {};
            // beforeSave: return boolean
            // afterSave
            // beforeRemove: return boolean
            // afterRemove
            // beforeInsert: : return boolean
            this.detailActions = {};
            /**
             * Objeto com propriedades do breadcrumb.
             */
            this.breadcrumb = { items: [] };
        }
        Object.defineProperty(ThfPageDynamicEditComponent.prototype, "actions", {
            /**
             * @optional
             *
             * @description
             *
             * Ações da página.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Ações da página.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._actions = this.isObject(value) ? value : {};
                this._pageActions = this.getPageActions(this._actions);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicEditComponent.prototype, "autoRouter", {
            get: /**
             * @return {?}
             */
            function () {
                return this._autoRouter;
            },
            /**
             * @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
             *
             * @optional
             *
             * @description
             *
             * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso as ações
             * estejam definidas nas ações.
             *
             * > Para o correto funcionamento não pode haver nenhum rota coringa (`**`) especificada.
             *
             * @default false
             */
            set: /**
             * \@todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
             *
             * \@optional
             *
             * \@description
             *
             * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso as ações
             * estejam definidas nas ações.
             *
             * > Para o correto funcionamento não pode haver nenhum rota coringa (`**`) especificada.
             *
             * \@default false
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._autoRouter = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicEditComponent.prototype, "fields", {
            get: /**
             * @return {?}
             */
            function () {
                return this._fields;
            },
            /** Lista dos campos usados na tabela e busca avançada. */
            set: /**
             * Lista dos campos usados na tabela e busca avançada.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._fields = Array.isArray(value) ? __spread(value) : [];
                this._keys = this.getKeysByFields(this._fields);
                this._duplicates = this.getDuplicatesByFields(this._fields);
                this._controlFields = this.getControlFields(this._fields);
                this._detailFields = this.getDetailFields(this._fields);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var paramId = this.activatedRoute.snapshot.params['id'];
            /** @type {?} */
            var duplicate = this.activatedRoute.snapshot.queryParams['duplicate'];
            if (this.activatedRoute.snapshot.data.serviceApi) {
                this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;
                this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
                this.loadMetadata(paramId, duplicate);
            }
            else {
                this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
                this.loadData(paramId, duplicate);
            }
        };
        Object.defineProperty(ThfPageDynamicEditComponent.prototype, "duplicates", {
            get: /**
             * @return {?}
             */
            function () {
                return __spread(this._duplicates);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicEditComponent.prototype, "keys", {
            get: /**
             * @return {?}
             */
            function () {
                return __spread(this._keys);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicEditComponent.prototype, "pageActions", {
            get: /**
             * @return {?}
             */
            function () {
                return __spread(this._pageActions);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicEditComponent.prototype, "controlFields", {
            get: /**
             * @return {?}
             */
            function () {
                return this._controlFields;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicEditComponent.prototype, "detailFields", {
            get: /**
             * @return {?}
             */
            function () {
                return this._detailFields;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @param {?} path
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.cancel = /**
         * @private
         * @param {?} path
         * @return {?}
         */
        function (path) {
            if (this.dynamicForm && this.dynamicForm.form.dirty) {
                this.thfDialogService.confirm({
                    message: this.literals.cancelConfirmMessage,
                    title: this.literals.pageActionCancel,
                    confirm: this.goBack.bind(this, path)
                });
            }
            else {
                this.goBack(path);
            }
        };
        /**
         * @private
         * @param {?} item
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.formatUniqueKey = /**
         * @private
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var keys = mapObjectByProperties(item, this.keys);
            return valuesFromObject(keys).join('|');
        };
        /**
         * @private
         * @param {?} path
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.goBack = /**
         * @private
         * @param {?} path
         * @return {?}
         */
        function (path) {
            if (path) {
                this.router.navigate([path]);
            }
            else {
                window.history.back();
            }
        };
        /**
         * @private
         * @param {?} id
         * @param {?=} duplicate
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.loadData = /**
         * @private
         * @param {?} id
         * @param {?=} duplicate
         * @return {?}
         */
        function (id, duplicate) {
            var _this = this;
            if (!id) {
                try {
                    this.model = JSON.parse(duplicate) || {};
                }
                catch (_a) {
                    this.model = {};
                }
                return;
            }
            this.thfPageDynamicService.getResource(id).toPromise().then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.model = response;
            })).catch((/**
             * @return {?}
             */
            function () {
                _this.model = undefined;
                _this.actions = undefined;
                _this._pageActions = [];
            }));
        };
        /**
         * @private
         * @param {?} paramId
         * @param {?} duplicate
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.loadMetadata = /**
         * @private
         * @param {?} paramId
         * @param {?} duplicate
         * @return {?}
         */
        function (paramId, duplicate) {
            var _this = this;
            /** @type {?} */
            var typeMetadata = paramId ? 'edit' : 'create';
            this.thfPageDynamicService.getMetadata(typeMetadata).toPromise().then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.autoRouter = response.autoRouter;
                _this.actions = response.actions || {};
                _this.breadcrumb = response.breadcrumb || { items: [] };
                _this.fields = response.fields || [];
                _this.title = response.title;
                _this.loadData(paramId, duplicate);
            }));
        };
        /**
         * @private
         * @param {?} path
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.navigateTo = /**
         * @private
         * @param {?} path
         * @return {?}
         */
        function (path) {
            if (path) {
                /** @type {?} */
                var url = this.resolveUrl(this.model, path);
                this.router.navigate([url]);
            }
            else {
                window.history.back();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.detailActionNew = /**
         * @private
         * @return {?}
         */
        function () {
            this.gridDetail.insertRow();
        };
        /**
         * @private
         * @param {?} item
         * @param {?} path
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.resolveUrl = /**
         * @private
         * @param {?} item
         * @param {?} path
         * @return {?}
         */
        function (item, path) {
            /** @type {?} */
            var uniqueKey = this.formatUniqueKey(item);
            return path.replace(/:id/g, uniqueKey);
        };
        /**
         * @private
         * @param {?} path
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.save = /**
         * @private
         * @param {?} path
         * @return {?}
         */
        function (path) {
            var _this = this;
            if (this.dynamicForm.form.invalid) {
                this.thfNotification.warning(this.literals.saveNotificationWarning);
                return;
            }
            /** @type {?} */
            var paramId = this.activatedRoute.snapshot.params['id'];
            /** @type {?} */
            var saveOperation = paramId
                ? this.thfPageDynamicService.updateResource(paramId, this.model)
                : this.thfPageDynamicService.createResource(this.model);
            /** @type {?} */
            var msgSucess = paramId ? this.literals.saveNotificationSuccessUpdate : this.literals.saveNotificationSuccessSave;
            saveOperation.toPromise().then((/**
             * @return {?}
             */
            function () {
                _this.thfNotification.success(msgSucess);
                _this.navigateTo(path);
            }));
        };
        /**
         * @private
         * @param {?} path
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.saveNew = /**
         * @private
         * @param {?} path
         * @return {?}
         */
        function (path) {
            var _this = this;
            if (this.dynamicForm.form.invalid) {
                this.thfNotification.warning(this.literals.saveNewNotificationWarning);
                return;
            }
            /** @type {?} */
            var paramId = this.activatedRoute.snapshot.params['id'];
            if (paramId) {
                this.thfPageDynamicService.updateResource(paramId, this.model)
                    .toPromise().then((/**
                 * @return {?}
                 */
                function () {
                    _this.thfNotification.success(_this.literals.saveNewNotificationSuccessUpdate);
                    _this.navigateTo(path);
                }));
            }
            else {
                this.thfPageDynamicService.createResource(this.model)
                    .toPromise().then((/**
                 * @return {?}
                 */
                function () {
                    _this.thfNotification.success(_this.literals.saveNewNotificationSuccessSave);
                    _this.model = {};
                    _this.dynamicForm.form.reset();
                }));
            }
        };
        /**
         * @private
         * @param {?=} fields
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.getKeysByFields = /**
         * @private
         * @param {?=} fields
         * @return {?}
         */
        function (fields) {
            if (fields === void 0) { fields = []; }
            return fields.filter((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.key === true; })).map((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.property; }));
        };
        /**
         * @private
         * @param {?=} fields
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.getControlFields = /**
         * @private
         * @param {?=} fields
         * @return {?}
         */
        function (fields) {
            if (fields === void 0) { fields = []; }
            return fields.filter((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.type !== 'detail'; }));
        };
        /**
         * @private
         * @param {?=} fields
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.getDetailFields = /**
         * @private
         * @param {?=} fields
         * @return {?}
         */
        function (fields) {
            if (fields === void 0) { fields = []; }
            return fields.filter((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.type === 'detail'; }));
        };
        /**
         * @private
         * @param {?=} fields
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.getDuplicatesByFields = /**
         * @private
         * @param {?=} fields
         * @return {?}
         */
        function (fields) {
            if (fields === void 0) { fields = []; }
            return fields.filter((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.duplicate === true; })).map((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.property; }));
        };
        /**
         * @private
         * @param {?=} actions
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.getPageActions = /**
         * @private
         * @param {?=} actions
         * @return {?}
         */
        function (actions) {
            if (actions === void 0) { actions = {}; }
            /** @type {?} */
            var pageActions = [{ label: this.literals.pageActionSave, action: this.save.bind(this, actions.save) }];
            if (actions.saveNew) {
                pageActions.push({ label: this.literals.pageActionSaveNew, action: this.saveNew.bind(this, actions.saveNew) });
            }
            if (actions.cancel === undefined || actions.cancel) {
                pageActions.push({ label: this.literals.pageActionCancel, action: this.cancel.bind(this, actions.cancel) });
            }
            return pageActions;
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfPageDynamicEditComponent.prototype.isObject = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return !!value && typeof value === 'object' && !Array.isArray(value);
        };
        ThfPageDynamicEditComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-dynamic-edit',
                        template: "<thf-page-default\n  [t-actions]=\"pageActions\"\n  [t-breadcrumb]=\"breadcrumb\"\n  [t-title]=\"title\">\n\n  <ng-container *ngIf=\"model; then formFieldsTemplate; else registerNotFoundTemplate\">\n  </ng-container>\n\n</thf-page-default>\n\n<ng-template #registerNotFoundTemplate>\n\n  <thf-widget>\n    <span class=\"thf-icon thf-icon-info\"></span>\n    <span class=\"thf-font-text-large\">\n      {{ literals.registerNotFound }}\n    </span>\n  </thf-widget>\n\n</ng-template>\n\n<ng-template #formFieldsTemplate>\n\n  <thf-dynamic-form #dynamicForm [t-fields]=\"controlFields\" [t-value]=\"model\">\n  </thf-dynamic-form>\n\n  <div *ngIf=\"detailFields.length > 0\" class=\"thf-sm-12\">\n    <thf-divider [t-label]=\"detailFields[0].divider\"></thf-divider>\n\n    <div class=\"thf-row thf-mb-2\">\n      <thf-button [t-label]=\"literals.detailActionNew\" (t-click)=\"detailActionNew()\" t-small></thf-button>\n    </div>\n\n    <thf-grid #gridDetail\n      [t-row-actions]=\"detailActions\"\n      [t-columns]=\"detailFields[0].detail.columns\"\n      [t-data]=\"model[detailFields[0].property]\">\n    </thf-grid>\n  </div>\n\n</ng-template>\n",
                        providers: [ThfPageDynamicService$1]
                    }] }
        ];
        /** @nocollapse */
        ThfPageDynamicEditComponent.ctorParameters = function () { return [
            { type: router.Router },
            { type: router.ActivatedRoute },
            { type: thfUi.ThfNotificationService },
            { type: thfUi.ThfDialogService },
            { type: ThfPageDynamicService$1 }
        ]; };
        ThfPageDynamicEditComponent.propDecorators = {
            actions: [{ type: core.Input, args: ['t-actions',] }],
            autoRouter: [{ type: core.Input, args: ['t-auto-router',] }],
            breadcrumb: [{ type: core.Input, args: ['t-breadcrumb',] }],
            fields: [{ type: core.Input, args: ['t-fields',] }],
            serviceApi: [{ type: core.Input, args: ['t-service-api',] }],
            title: [{ type: core.Input, args: ['t-title',] }],
            dynamicForm: [{ type: core.ViewChild, args: ['dynamicForm', { static: true },] }],
            gridDetail: [{ type: core.ViewChild, args: ['gridDetail', { static: true },] }]
        };
        return ThfPageDynamicEditComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do template do thf-page-dynamic-detail.
     */
    var ThfPageDynamicEditModule = /** @class */ (function () {
        function ThfPageDynamicEditModule() {
        }
        ThfPageDynamicEditModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            router.RouterModule,
                            thfUi.ThfButtonModule,
                            thfUi.ThfDividerModule,
                            thfUi.ThfDynamicModule,
                            thfUi.ThfGridModule,
                            thfUi.ThfPageModule,
                            thfUi.ThfWidgetModule
                        ],
                        declarations: [
                            ThfPageDynamicEditComponent
                        ],
                        exports: [
                            ThfPageDynamicEditComponent
                        ]
                    },] }
        ];
        return ThfPageDynamicEditModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfAdvancedFiltersLiteralsDefault = {
        en: {
            title: 'Advanced search',
            primaryActionLabel: 'Apply filters',
            secondaryActionLabel: 'Cancel'
        },
        es: {
            title: 'Búsqueda avanzada',
            primaryActionLabel: 'Aplicar filtros',
            secondaryActionLabel: 'Cancelar'
        },
        pt: {
            title: 'Busca avançada',
            primaryActionLabel: 'Aplicar filtros',
            secondaryActionLabel: 'Cancelar'
        }
    };
    /**
     * \@docsPrivate
     *
     * \@description
     *
     * Filtro de busca avançada criado a partir de um formulário dinâmico.
     * Componente de uso interno.
     */
    var ThfAdvancedFilterBaseComponent = /** @class */ (function () {
        function ThfAdvancedFilterBaseComponent() {
            this._filters = [];
            this.literals = __assign({}, thfAdvancedFiltersLiteralsDefault[thfLocaleDefault], thfAdvancedFiltersLiteralsDefault[browserLanguage()]);
            /**
             * Função que será disparada e receberá os valores do formulário ao ser clicado no botão buscar.
             */
            this.searchEvent = new core.EventEmitter();
        }
        Object.defineProperty(ThfAdvancedFilterBaseComponent.prototype, "filters", {
            get: /**
             * @return {?}
             */
            function () {
                return this._filters;
            },
            /**
             * Coleção de objetos que implementam a interface ThfDynamicFormField, para definição dos campos que serão criados
             * dinamicamente.
             */
            set: /**
             * Coleção de objetos que implementam a interface ThfDynamicFormField, para definição dos campos que serão criados
             * dinamicamente.
             * @param {?} filters
             * @return {?}
             */
            function (filters) {
                this._filters = Array.isArray(filters) ? __spread(filters) : [];
            },
            enumerable: true,
            configurable: true
        });
        ThfAdvancedFilterBaseComponent.propDecorators = {
            filters: [{ type: core.Input, args: ['t-filters',] }],
            searchEvent: [{ type: core.Output, args: ['t-search-event',] }]
        };
        return ThfAdvancedFilterBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsPrivate
     *
     * \@docsExtends ThfAdvancedFilterBaseComponent
     *
     * \@examplePrivate
     *
     * <example-private name="thf-advanced-filter" title="Totvs Busca Avançada">
     *   <file name="sample-thf-advanced-filter.component.html"> </file>
     *   <file name="sample-thf-advanced-filter.component.ts"> </file>
     * </example-private>
     */
    var ThfAdvancedFilterComponent = /** @class */ (function (_super) {
        __extends(ThfAdvancedFilterComponent, _super);
        function ThfAdvancedFilterComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.filter = {};
            _this.primaryAction = {
                action: (/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var models = _this.getValuesFromForm();
                    _this.searchEvent.emit(models);
                    _this.thfModal.close();
                }),
                label: _this.literals.primaryActionLabel
            };
            _this.secondaryAction = {
                action: (/**
                 * @return {?}
                 */
                function () {
                    _this.thfModal.close();
                }),
                label: _this.literals.secondaryActionLabel
            };
            return _this;
        }
        // Retorna os models dos campos preenchidos
        // Retorna os models dos campos preenchidos
        /**
         * @return {?}
         */
        ThfAdvancedFilterComponent.prototype.getValuesFromForm = 
        // Retorna os models dos campos preenchidos
        /**
         * @return {?}
         */
        function () {
            var _this = this;
            Object.keys(this.filter).forEach((/**
             * @param {?} property
             * @return {?}
             */
            function (property) {
                if (_this.filter[property] === undefined || _this.filter[property] === '') {
                    delete _this.filter[property];
                }
            }));
            return this.filter;
        };
        /**
         * @return {?}
         */
        ThfAdvancedFilterComponent.prototype.open = /**
         * @return {?}
         */
        function () {
            this.filter = {};
            this.thfModal.open();
        };
        ThfAdvancedFilterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-advanced-filter',
                        template: "<thf-modal\n  t-hide-close\n  [t-primary-action]=\"primaryAction\"\n  [t-secondary-action]=\"secondaryAction\"\n  [t-title]=\"literals.title\">\n\n  <thf-dynamic-form\n    [t-fields]=\"filters\"\n    [t-value]=\"filter\">\n  </thf-dynamic-form>\n\n</thf-modal>\n"
                    }] }
        ];
        ThfAdvancedFilterComponent.propDecorators = {
            thfModal: [{ type: core.ViewChild, args: [thfUi.ThfModalComponent, { static: true },] }],
            thfDynamicForm: [{ type: core.ViewChild, args: [thfUi.ThfDynamicFormComponent, { static: true },] }]
        };
        return ThfAdvancedFilterComponent;
    }(ThfAdvancedFilterBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfPageDynamicSearchLiteralsDefault = {
        en: {
            disclaimerGroupTitle: 'Displaying results filtered by:',
            filterSettingsPlaceholder: 'Search',
            quickSearchLabel: 'Quick search:'
        },
        es: {
            disclaimerGroupTitle: 'Presentando resultados filtrados por:',
            filterSettingsPlaceholder: 'Buscar',
            quickSearchLabel: 'Búsqueda rápida:'
        },
        pt: {
            disclaimerGroupTitle: 'Apresentando resultados filtrados por:',
            filterSettingsPlaceholder: 'Pesquisar',
            quickSearchLabel: 'Pesquisa rápida:'
        }
    };
    /**
     * \@description
     *
     * Componente com as ações de pesquisa já definidas, bastando que o desenvolvedor implemente apenas a chamada para as APIs
     * e exiba as informações.
     */
    var ThfPageDynamicSearchBaseComponent = /** @class */ (function () {
        function ThfPageDynamicSearchBaseComponent() {
            this._filters = [];
            this.literals = __assign({}, thfPageDynamicSearchLiteralsDefault[thfLocaleDefault], thfPageDynamicSearchLiteralsDefault[browserLanguage()]);
            /**
             * Nesta propriedade deve ser definido um array de objetos que implementam a interface `ThfPageAction`.
             */
            this.actions = [];
            /**
             * Objeto com propriedades do breadcrumb.
             */
            this.breadcrumb = { items: [] };
            /**
             * \@description
             *
             * Evento disparado ao executar a pesquisa avançada, o mesmo irá repassar um objeto com os valores preenchidos no modal de pesquisa.
             *
             * > Campos não preenchidos não irão aparecer no objeto passado por parâmetro.
             */
            this.advancedSearch = new core.EventEmitter();
            /**
             * Evento disparado ao remover um ou todos os disclaimers pelo usuário.
             */
            this.changeDisclaimers = new core.EventEmitter();
            /**
             * Evento disparado ao realizar uma busca pelo campo de pesquisa rápida, o mesmo será chamado repassando o valor digitado.
             */
            this.quickSearch = new core.EventEmitter();
        }
        Object.defineProperty(ThfPageDynamicSearchBaseComponent.prototype, "filters", {
            get: /**
             * @return {?}
             */
            function () {
                return this._filters;
            },
            /**
             * @optional
             *
             * @description
             *
             * Lista dos campos usados na busca avançada. Caso o mesmo não seja passado a busca avançada não será exibida.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Lista dos campos usados na busca avançada. Caso o mesmo não seja passado a busca avançada não será exibida.
             * @param {?} filters
             * @return {?}
             */
            function (filters) {
                this._filters = Array.isArray(filters) ? __spread(filters) : [];
            },
            enumerable: true,
            configurable: true
        });
        ThfPageDynamicSearchBaseComponent.propDecorators = {
            actions: [{ type: core.Input, args: ['t-actions',] }],
            breadcrumb: [{ type: core.Input, args: ['t-breadcrumb',] }],
            filters: [{ type: core.Input, args: ['t-filters',] }],
            title: [{ type: core.Input, args: ['t-title',] }],
            advancedSearch: [{ type: core.Output, args: ['t-advanced-search',] }],
            changeDisclaimers: [{ type: core.Output, args: ['t-change-disclaimers',] }],
            quickSearch: [{ type: core.Output, args: ['t-quick-search',] }]
        };
        return ThfPageDynamicSearchBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfPageDynamicSearchBaseComponent
     *
     * \@example
     *
     * <example name="thf-page-dynamic-search-basic" title="Totvs Page Dynamic Search Basic">
     *  <file name="sample-thf-page-dynamic-search-basic/sample-thf-page-dynamic-search-basic.component.html"> </file>
     *  <file name="sample-thf-page-dynamic-search-basic/sample-thf-page-dynamic-search-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-dynamic-search-hiring-processes" title="Totvs Page Dynamic Search - Hiring processes">
     *  <file name="sample-thf-page-dynamic-search-hiring-processes/sample-thf-page-dynamic-search-hiring-processes.component.html"> </file>
     *  <file name="sample-thf-page-dynamic-search-hiring-processes/sample-thf-page-dynamic-search-hiring-processes.component.ts"> </file>
     *  <file name="sample-thf-page-dynamic-search-hiring-processes/sample-thf-page-dynamic-search-hiring-processes.service.ts"> </file>
     * </example>
     */
    var ThfPageDynamicSearchComponent = /** @class */ (function (_super) {
        __extends(ThfPageDynamicSearchComponent, _super);
        function ThfPageDynamicSearchComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._disclaimerGroup = {
                change: _this.onChangeDisclaimerGroup.bind(_this),
                disclaimers: [],
                title: _this.literals.disclaimerGroupTitle
            };
            _this._filterSettings = {
                action: 'onAction',
                advancedAction: 'onAdvancedAction',
                ngModel: 'quickFilter',
                placeholder: _this.literals.filterSettingsPlaceholder
            };
            // Flag to control when changeDisclaimerGroup should be called
            _this.changeDisclaimersEnabled = false;
            return _this;
        }
        Object.defineProperty(ThfPageDynamicSearchComponent.prototype, "disclaimerGroup", {
            get: /**
             * @return {?}
             */
            function () {
                return Object.assign({}, this._disclaimerGroup);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicSearchComponent.prototype, "filterSettings", {
            get: /**
             * @return {?}
             */
            function () {
                this._filterSettings.advancedAction = this.filters.length === 0 ? undefined : 'onAdvancedAction';
                return Object.assign({}, this._filterSettings);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfPageDynamicSearchComponent.prototype.onAction = /**
         * @return {?}
         */
        function () {
            this.changeDisclaimersEnabled = false;
            this._disclaimerGroup.disclaimers = [
                { property: 'search', label: this.literals.quickSearchLabel + " " + this.quickFilter, value: this.quickFilter }
            ];
            if (this.quickSearch.observers && this.quickSearch.observers.length > 0) {
                this.quickSearch.emit(this.quickFilter);
            }
            this.quickFilter = undefined;
        };
        /**
         * @return {?}
         */
        ThfPageDynamicSearchComponent.prototype.onAdvancedAction = /**
         * @return {?}
         */
        function () {
            this.thfAdvancedFilter.open();
        };
        /**
         * @param {?} filters
         * @return {?}
         */
        ThfPageDynamicSearchComponent.prototype.onAdvancedSearch = /**
         * @param {?} filters
         * @return {?}
         */
        function (filters) {
            this.changeDisclaimersEnabled = false;
            this._disclaimerGroup.disclaimers = this.setDisclaimers(filters);
            this.advancedSearch.emit(filters);
        };
        /**
         * @private
         * @param {?} date
         * @return {?}
         */
        ThfPageDynamicSearchComponent.prototype.formatDate = /**
         * @private
         * @param {?} date
         * @return {?}
         */
        function (date) {
            /** @type {?} */
            var year = parseInt(date.substr(0, 4), 10);
            /** @type {?} */
            var month = parseInt(date.substr(5, 2), 10);
            /** @type {?} */
            var day = parseInt(date.substr(8, 2), 10);
            return new Date(year, month - 1, day).toLocaleDateString(getBrowserLanguage());
        };
        /**
         * @private
         * @param {?} fields
         * @param {?} fieldName
         * @return {?}
         */
        ThfPageDynamicSearchComponent.prototype.getFieldByProperty = /**
         * @private
         * @param {?} fields
         * @param {?} fieldName
         * @return {?}
         */
        function (fields, fieldName) {
            return fields.find((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.property === fieldName; }));
        };
        /**
         * @private
         * @param {?} disclaimers
         * @return {?}
         */
        ThfPageDynamicSearchComponent.prototype.onChangeDisclaimerGroup = /**
         * @private
         * @param {?} disclaimers
         * @return {?}
         */
        function (disclaimers) {
            this.changeDisclaimersEnabled ? this.changeDisclaimers.emit(disclaimers) : this.changeDisclaimersEnabled = true;
        };
        /**
         * @private
         * @param {?} filters
         * @return {?}
         */
        ThfPageDynamicSearchComponent.prototype.setDisclaimers = /**
         * @private
         * @param {?} filters
         * @return {?}
         */
        function (filters) {
            var _this = this;
            /** @type {?} */
            var disclaimers = [];
            Object.keys(filters).forEach((/**
             * @param {?} filter
             * @return {?}
             */
            function (filter) {
                /** @type {?} */
                var field = _this.getFieldByProperty(_this.filters, filter);
                /** @type {?} */
                var value = field.type === thfUi.ThfDynamicFieldType.Date ? _this.formatDate(filters[filter]) : filters[filter];
                disclaimers.push({
                    label: field.label + ": " + value,
                    property: filter,
                    value: filters[filter]
                });
            }));
            return disclaimers;
        };
        ThfPageDynamicSearchComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-dynamic-search',
                        template: "<thf-page-list\n  [t-actions]=\"actions\"\n  [t-breadcrumb]=\"breadcrumb\"\n  [t-disclaimer-group]=\"disclaimerGroup\"\n  [t-filter]=\"filterSettings\"\n  [t-title]=\"title\">\n\n  <thf-advanced-filter\n    [t-filters]=\"filters\"\n    (t-search-event)=\"onAdvancedSearch($event)\">\n  </thf-advanced-filter>\n\n  <ng-content></ng-content>\n\n</thf-page-list>\n"
                    }] }
        ];
        ThfPageDynamicSearchComponent.propDecorators = {
            thfAdvancedFilter: [{ type: core.ViewChild, args: [ThfAdvancedFilterComponent, { static: true },] }]
        };
        return ThfPageDynamicSearchComponent;
    }(ThfPageDynamicSearchBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do template do thf-page-dynamic-search.
     */
    var ThfPageDynamicSearchModule = /** @class */ (function () {
        function ThfPageDynamicSearchModule() {
        }
        ThfPageDynamicSearchModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            router.RouterModule,
                            thfUi.ThfDynamicModule,
                            thfUi.ThfModalModule,
                            thfUi.ThfPageModule
                        ],
                        declarations: [
                            ThfAdvancedFilterComponent,
                            ThfPageDynamicSearchComponent
                        ],
                        exports: [
                            ThfPageDynamicSearchComponent
                        ]
                    },] }
        ];
        return ThfPageDynamicSearchModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageDynamicListBaseComponent = /** @class */ (function () {
        function ThfPageDynamicListBaseComponent() {
            this._autoRouter = false;
            this._columns = [];
            this._duplicates = [];
            this._fields = [];
            this._filters = [];
            this._keys = [];
            /**
             * Objeto com propriedades do breadcrumb.
             */
            this.breadcrumb = { items: [] };
        }
        Object.defineProperty(ThfPageDynamicListBaseComponent.prototype, "autoRouter", {
            get: /**
             * @return {?}
             */
            function () {
                return this._autoRouter;
            },
            /**
             * @optional
             *
             * @description
             *
             * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso sejam definidas ações na propriedade `t-actions`
             *
             * As rotas criadas serão baseadas na propriedade `t-actions`.
             *
             * > Para o correto funcionamento não pode haver nenhuma rota coringa (`**`) especificada.
             *
             * @default false
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso sejam definidas ações na propriedade `t-actions`
             *
             * As rotas criadas serão baseadas na propriedade `t-actions`.
             *
             * > Para o correto funcionamento não pode haver nenhuma rota coringa (`**`) especificada.
             *
             * \@default false
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._autoRouter = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicListBaseComponent.prototype, "fields", {
            get: /**
             * @return {?}
             */
            function () {
                return this._fields;
            },
            /**
             * @optional
             *
             * @description
             *
             * Lista dos campos usados na tabela e busca avançada.
             *
             *
             * > Caso não seja definido fields a tabela assumirá o comportamento padrão.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Lista dos campos usados na tabela e busca avançada.
             *
             *
             * > Caso não seja definido fields a tabela assumirá o comportamento padrão.
             * @param {?} fields
             * @return {?}
             */
            function (fields) {
                this._fields = Array.isArray(fields) ? __spread(fields) : [];
                this.setFieldsProperties(this.fields);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicListBaseComponent.prototype, "columns", {
            get: /**
             * @return {?}
             */
            function () {
                return __spread(this._columns);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicListBaseComponent.prototype, "duplicates", {
            get: /**
             * @return {?}
             */
            function () {
                return __spread(this._duplicates);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicListBaseComponent.prototype, "filters", {
            get: /**
             * @return {?}
             */
            function () {
                return __spread(this._filters);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicListBaseComponent.prototype, "keys", {
            get: /**
             * @return {?}
             */
            function () {
                return __spread(this._keys);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @param {?} fields
         * @return {?}
         */
        ThfPageDynamicListBaseComponent.prototype.setFieldsProperties = /**
         * @private
         * @param {?} fields
         * @return {?}
         */
        function (fields) {
            this._filters = fields.filter((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.filter === true; }));
            this._columns = fields.filter((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.visible === undefined || field.visible === true; }));
            this._keys = fields.filter((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.key === true; })).map((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.property; }));
            this._duplicates = fields.filter((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.duplicate === true; })).map((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.property; }));
        };
        ThfPageDynamicListBaseComponent.propDecorators = {
            autoRouter: [{ type: core.Input, args: ['t-auto-router',] }],
            breadcrumb: [{ type: core.Input, args: ['t-breadcrumb',] }],
            fields: [{ type: core.Input, args: ['t-fields',] }],
            serviceApi: [{ type: core.Input, args: ['t-service-api',] }],
            title: [{ type: core.Input, args: ['t-title',] }]
        };
        return ThfPageDynamicListBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageDynamicService$2 = /** @class */ (function () {
        function ThfPageDynamicService(http$1) {
            this.http = http$1;
            this.endpoint = '/';
            this.headers = new http.HttpHeaders({
                'X-TOTVS-SCREEN-LOCK': 'true'
            });
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        ThfPageDynamicService.prototype.configServiceApi = /**
         * @param {?=} config
         * @return {?}
         */
        function (config) {
            if (config === void 0) { config = {}; }
            this.endpoint = config.endpoint;
        };
        /**
         * @param {?=} type
         * @return {?}
         */
        ThfPageDynamicService.prototype.getMetadata = /**
         * @param {?=} type
         * @return {?}
         */
        function (type) {
            if (type === void 0) { type = 'list'; }
            /** @type {?} */
            var key = this.endpoint + "-" + type + "-metadata";
            /** @type {?} */
            var cache = JSON.parse(localStorage.getItem(key)) || {};
            /** @type {?} */
            var url = this.endpoint + "/metadata?type=" + type + "&version=" + (cache.version || '');
            return this.http.get(url).pipe(operators.map((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response.version === cache.version) {
                    return cache;
                }
                localStorage.setItem(key, JSON.stringify(response));
                return __assign({}, cache, response);
            })));
        };
        // Deleta um único recurso
        // Deleta um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        ThfPageDynamicService.prototype.deleteResource = 
        // Deleta um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            return this.http.delete(this.endpoint + "/" + id, { headers: this.headers });
        };
        // Deleta recursos em lote
        // Deleta recursos em lote
        /**
         * @param {?} ids
         * @return {?}
         */
        ThfPageDynamicService.prototype.deleteResources = 
        // Deleta recursos em lote
        /**
         * @param {?} ids
         * @return {?}
         */
        function (ids) {
            return this.http.request('delete', "" + this.endpoint, { headers: this.headers, body: ids });
        };
        // Busca uma lista de recursos
        // Busca uma lista de recursos
        /**
         * @param {?=} params
         * @return {?}
         */
        ThfPageDynamicService.prototype.getResources = 
        // Busca uma lista de recursos
        /**
         * @param {?=} params
         * @return {?}
         */
        function (params) {
            if (params === void 0) { params = {}; }
            return this.http.get(this.endpoint, { headers: this.headers, params: params });
        };
        // Busca um único recurso
        // Busca um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        ThfPageDynamicService.prototype.getResource = 
        // Busca um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            return this.http.get(this.endpoint + "/" + id, { headers: this.headers });
        };
        // Cria um recurso
        // Cria um recurso
        /**
         * @param {?} resource
         * @return {?}
         */
        ThfPageDynamicService.prototype.createResource = 
        // Cria um recurso
        /**
         * @param {?} resource
         * @return {?}
         */
        function (resource) {
            return this.http.post("" + this.endpoint, resource, { headers: this.headers });
        };
        // Atualiza um recurso
        // Atualiza um recurso
        /**
         * @param {?} id
         * @param {?} resource
         * @return {?}
         */
        ThfPageDynamicService.prototype.updateResource = 
        // Atualiza um recurso
        /**
         * @param {?} id
         * @param {?} resource
         * @return {?}
         */
        function (id, resource) {
            return this.http.put(this.endpoint + "/" + id, resource, { headers: this.headers });
        };
        ThfPageDynamicService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfPageDynamicService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return ThfPageDynamicService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfPageDynamicTableLiteralsDefault = {
        en: {
            pageAction: 'New',
            pageActionRemoveAll: 'Delete',
            tableActionView: 'View',
            tableActionEdit: 'Edit',
            tableActionDuplicate: 'Duplicate',
            tableActionDelete: 'Delete',
            confirmRemoveTitle: 'Confirm delete',
            confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',
            confirmRemoveAllTitle: 'Confirm batch deletion',
            confirmRemoveAllMessage: 'Are you sure you want to delete all these records? You can not undo this action.',
            loadDataErrorNotification: 'Service not found',
            removeSuccessNotification: 'Item deleted successfully',
            removeAllSuccessNotification: 'Items deleted successfully'
        },
        es: {
            pageAction: 'Nuevo',
            pageActionRemoveAll: 'Borrar',
            tableActionView: 'Visualizar',
            tableActionEdit: 'Editar',
            tableActionDuplicate: 'Duplicar',
            tableActionDelete: 'Borrar',
            confirmRemoveTitle: 'Confirmar la exclusión',
            confirmRemoveMessage: '¿Está seguro de que desea eliminar este registro? No puede deshacer esta acción.',
            confirmRemoveAllTitle: 'Confirmar la exclusión por lotes',
            confirmRemoveAllMessage: '¿Está seguro de que desea eliminar todos estos registros? No puede deshacer esta acción.',
            loadDataErrorNotification: 'Servicio no informado.',
            removeSuccessNotification: 'Elemento eliminado con éxito',
            removeAllSuccessNotification: 'Elementos eliminados con éxito'
        },
        pt: {
            pageAction: 'Novo',
            pageActionRemoveAll: 'Excluir',
            tableActionView: 'Visualizar',
            tableActionEdit: 'Editar',
            tableActionDuplicate: 'Duplicar',
            tableActionDelete: 'Excluir',
            confirmRemoveTitle: 'Confirmar exclusão',
            confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? Você não poderá desfazer essa ação.',
            confirmRemoveAllTitle: 'Confirmar exclusão em lote',
            confirmRemoveAllMessage: 'Tem certeza de que deseja excluir todos esses registros? Você não poderá desfazer essa ação.',
            loadDataErrorNotification: 'Serviço não informado.',
            removeSuccessNotification: 'Item excluido com sucesso',
            removeAllSuccessNotification: 'Items excluidos com sucesso'
        }
    };
    /**
     * \@docsExtends ThfPageDynamicListBaseComponent
     *
     * \@description
     *
     * O `thf-page-dynamic-table` é uma página que exibe uma lista de registros em uma tabela baseado em uma lista de fields,
     * o mesmo também suporta metadados conforme especificado na documentação.
     *
     * \@example
     *
     * <example name="thf-page-dynamic-table-basic" title="Totvs Page Dynamic Table Basic">
     *  <file name="sample-thf-page-dynamic-table-basic/sample-thf-page-dynamic-table-basic.component.html"> </file>
     *  <file name="sample-thf-page-dynamic-table-basic/sample-thf-page-dynamic-table-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-dynamic-table-users" title="Totvs Page Dynamic Table - Users">
     *  <file name="sample-thf-page-dynamic-table-users/sample-thf-page-dynamic-table-users.component.html"> </file>
     *  <file name="sample-thf-page-dynamic-table-users/sample-thf-page-dynamic-table-users.component.ts"> </file>
     * </example>
     */
    var ThfPageDynamicTableComponent = /** @class */ (function (_super) {
        __extends(ThfPageDynamicTableComponent, _super);
        function ThfPageDynamicTableComponent(router, activatedRoute, thfDialogService, thfNotification, thfPageDynamicService) {
            var _this = _super.call(this) || this;
            _this.router = router;
            _this.activatedRoute = activatedRoute;
            _this.thfDialogService = thfDialogService;
            _this.thfNotification = thfNotification;
            _this.thfPageDynamicService = thfPageDynamicService;
            _this._actions = {};
            _this._pageActions = [];
            _this._tableActions = [];
            _this.page = 1;
            _this.params = {};
            _this.hasNext = false;
            _this.items = [];
            _this.literals = __assign({}, thfPageDynamicTableLiteralsDefault[thfLocaleDefault], thfPageDynamicTableLiteralsDefault[browserLanguage()]);
            return _this;
        }
        Object.defineProperty(ThfPageDynamicTableComponent.prototype, "actions", {
            get: /**
             * @return {?}
             */
            function () {
                return this._actions;
            },
            /**
             * @optional
             *
             * @description
             *
             * Ações da página e da tabela.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Ações da página e da tabela.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._actions = value && typeof value === 'object' && Object.keys(value).length > 0 ? value : {};
                this.setPageActions(this.actions);
                this.setRemoveAllAction();
                this.setTableActions(this.actions);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            if (this.activatedRoute.snapshot.data.serviceApi) {
                this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;
                this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
                this.loadMetadata();
            }
            else {
                this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
                this.loadData();
            }
        };
        /**
         * @param {?} filter
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.onAdvancedSearch = /**
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            this.loadData(__assign({ page: 1 }, filter));
            this.params = filter;
        };
        /**
         * @param {?} disclaimers
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.onChangeDisclaimers = /**
         * @param {?} disclaimers
         * @return {?}
         */
        function (disclaimers) {
            /** @type {?} */
            var filter = {};
            disclaimers.forEach((/**
             * @param {?} disclaimer
             * @return {?}
             */
            function (disclaimer) {
                filter[disclaimer.property] = disclaimer.value;
            }));
            this.onAdvancedSearch(filter);
        };
        /**
         * @param {?} filter
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.onQuickSearch = /**
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            this.loadData(filter ? { page: 1, search: filter } : undefined);
            this.params = filter ? { search: filter } : {};
        };
        /**
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.showMore = /**
         * @return {?}
         */
        function () {
            this.loadData(__assign({ page: ++this.page }, this.params));
        };
        Object.defineProperty(ThfPageDynamicTableComponent.prototype, "hasActionRemoveAll", {
            get: /**
             * @return {?}
             */
            function () {
                return !!this.actions.removeAll;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicTableComponent.prototype, "pageActions", {
            get: /**
             * @return {?}
             */
            function () {
                return __spread(this._pageActions);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageDynamicTableComponent.prototype, "tableActions", {
            get: /**
             * @return {?}
             */
            function () {
                return this._tableActions;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @param {?} item
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.confirmRemove = /**
         * @private
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var confirmOptions = {
                title: this.literals.confirmRemoveTitle,
                message: this.literals.confirmRemoveMessage,
                confirm: this.remove.bind(this, item)
            };
            this.thfDialogService.confirm(confirmOptions);
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.confirmRemoveAll = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var confirmOptions = {
                title: this.literals.confirmRemoveAllTitle,
                message: this.literals.confirmRemoveAllMessage,
                confirm: this.removeAll.bind(this)
            };
            this.thfDialogService.confirm(confirmOptions);
        };
        /**
         * @private
         * @param {?} item
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.formatUniqueKey = /**
         * @private
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var keys = mapObjectByProperties(item, this.keys);
            return valuesFromObject(keys).join('|');
        };
        /**
         * @private
         * @param {?=} params
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.loadData = /**
         * @private
         * @param {?=} params
         * @return {?}
         */
        function (params) {
            var _this = this;
            if (params === void 0) { params = {}; }
            if (!this.serviceApi) {
                this.thfNotification.error(this.literals.loadDataErrorNotification);
                return;
            }
            /** @type {?} */
            var defaultParams = { page: 1, pageSize: 10 };
            /** @type {?} */
            var fullParams = __assign({}, defaultParams, params);
            this.thfPageDynamicService.getResources(fullParams).toPromise().then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.items = fullParams.page === 1 ? response.items : __spread(_this.items, response.items);
                _this.page = fullParams.page;
                _this.hasNext = response.hasNext;
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.loadMetadata = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.thfPageDynamicService.getMetadata().toPromise().then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.autoRouter = response.autoRouter;
                _this.actions = response.actions || {};
                _this.breadcrumb = response.breadcrumb || { items: [] };
                _this.fields = response.fields || [];
                _this.title = response.title;
                _this.loadData();
            }));
        };
        // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
        // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
        /**
         * @private
         * @param {?} route
         * @param {?=} forceStopAutoRouter
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.navigateTo = 
        // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
        /**
         * @private
         * @param {?} route
         * @param {?=} forceStopAutoRouter
         * @return {?}
         */
        function (route, forceStopAutoRouter) {
            var _this = this;
            if (forceStopAutoRouter === void 0) { forceStopAutoRouter = false; }
            this.router.navigate([route.url || route.path], { queryParams: route.params })
                .catch((/**
             * @return {?}
             */
            function () {
                if (forceStopAutoRouter || !_this.autoRouter) {
                    return;
                }
                _this.router.config.unshift((/** @type {?} */ ({
                    path: route.path, component: route.component, data: { serviceApi: _this.serviceApi, autoRouter: true }
                })));
                _this.navigateTo(route, true);
            }));
        };
        /**
         * @private
         * @param {?} path
         * @param {?} item
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.openDetail = /**
         * @private
         * @param {?} path
         * @param {?} item
         * @return {?}
         */
        function (path, item) {
            /** @type {?} */
            var url = this.resolveUrl(item, path);
            this.navigateTo({ path: path, url: url, component: ThfPageDynamicDetailComponent });
        };
        /**
         * @private
         * @param {?} path
         * @param {?} item
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.openDuplicate = /**
         * @private
         * @param {?} path
         * @param {?} item
         * @return {?}
         */
        function (path, item) {
            /** @type {?} */
            var duplicates = mapObjectByProperties(item, this.duplicates);
            this.navigateTo({ path: path, params: { duplicate: JSON.stringify(duplicates) } });
            // this.navigateTo({ path, params: { duplicate: JSON.stringify(duplicates) } , component: ThfPageDynamicEditComponent });
        };
        /**
         * @private
         * @param {?} path
         * @param {?} item
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.openEdit = /**
         * @private
         * @param {?} path
         * @param {?} item
         * @return {?}
         */
        function (path, item) {
            /** @type {?} */
            var url = this.resolveUrl(item, path);
            this.navigateTo({ path: path, url: url });
            // this.navigateTo({ path, url, component: ThfPageDynamicEditComponent });
        };
        /**
         * @private
         * @param {?} path
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.openNew = /**
         * @private
         * @param {?} path
         * @return {?}
         */
        function (path) {
            this.navigateTo({ path: path });
            // this.navigateTo({ path, component: ThfPageDynamicEditComponent });
        };
        /**
         * Caso exista mais de um identificador, será concatenado com '|'.
         *
         * Ex: { id: 1, company: 'totvs' }
         *
         * Para o endpoint /resources/:id será executada a url /resources/1|totvs
         */
        /**
         * Caso exista mais de um identificador, será concatenado com '|'.
         *
         * Ex: { id: 1, company: 'totvs' }
         *
         * Para o endpoint /resources/:id será executada a url /resources/1|totvs
         * @private
         * @param {?} item
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.remove = /**
         * Caso exista mais de um identificador, será concatenado com '|'.
         *
         * Ex: { id: 1, company: 'totvs' }
         *
         * Para o endpoint /resources/:id será executada a url /resources/1|totvs
         * @private
         * @param {?} item
         * @return {?}
         */
        function (item) {
            var _this = this;
            /** @type {?} */
            var uniqueKey = this.formatUniqueKey(item);
            this.thfPageDynamicService.deleteResource(uniqueKey).toPromise().then((/**
             * @return {?}
             */
            function () {
                _this.removeLocalItems([item]);
                _this.thfNotification.success(_this.literals.removeSuccessNotification);
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.removeAll = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            // TODO: usar propriedade nova pra validar os itens selecionados
            /** @type {?} */
            var selectedItems = this.items.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.$selected; }));
            if (selectedItems.length === 0) {
                // TODO: usar propriedade nova pra validar os itens selecionados
                return;
            }
            /** @type {?} */
            var keysSelectedItems = mapArrayByProperties(selectedItems, this.keys);
            this.thfPageDynamicService.deleteResources(keysSelectedItems).toPromise().then((/**
             * @return {?}
             */
            function () {
                _this.removeLocalItems(selectedItems);
                _this.thfNotification.success(_this.literals.removeAllSuccessNotification);
            }));
        };
        /**
         * @private
         * @param {?=} items
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.removeLocalItems = /**
         * @private
         * @param {?=} items
         * @return {?}
         */
        function (items) {
            var _this = this;
            if (items === void 0) { items = []; }
            items.forEach((/**
             * @param {?} itemRemoved
             * @return {?}
             */
            function (itemRemoved) {
                /** @type {?} */
                var indexItemRemoved = _this.items.indexOf(itemRemoved);
                _this.items.splice(indexItemRemoved, 1);
            }));
        };
        /**
         * @private
         * @param {?} item
         * @param {?} path
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.resolveUrl = /**
         * @private
         * @param {?} item
         * @param {?} path
         * @return {?}
         */
        function (item, path) {
            /** @type {?} */
            var uniqueKey = this.formatUniqueKey(item);
            return path.replace(/:id/g, uniqueKey);
        };
        /**
         * @private
         * @param {?} actions
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.setPageActions = /**
         * @private
         * @param {?} actions
         * @return {?}
         */
        function (actions) {
            if (actions) {
                this._pageActions = [
                    { label: this.literals.pageAction, action: this.openNew.bind(this, actions.new), disabled: !this._actions.new },
                ];
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.setRemoveAllAction = /**
         * @private
         * @return {?}
         */
        function () {
            if (this._actions.removeAll) {
                this._pageActions.push({
                    label: this.literals.pageActionRemoveAll, action: this.confirmRemoveAll.bind(this),
                    disabled: !this._actions.removeAll
                });
            }
        };
        /**
         * @private
         * @param {?} actions
         * @return {?}
         */
        ThfPageDynamicTableComponent.prototype.setTableActions = /**
         * @private
         * @param {?} actions
         * @return {?}
         */
        function (actions) {
            if (actions) {
                this._tableActions = [
                    { action: this.openDetail.bind(this, actions.detail), label: this.literals.tableActionView, visible: !!this._actions.detail },
                    { action: this.openEdit.bind(this, actions.edit), label: this.literals.tableActionEdit, visible: !!this._actions.edit },
                    { action: this.openDuplicate.bind(this, actions.duplicate), label: this.literals.tableActionDuplicate,
                        visible: !!this._actions.duplicate
                    },
                    { action: this.confirmRemove.bind(this), label: this.literals.tableActionDelete, separator: true, type: 'danger',
                        visible: !!this._actions.remove
                    }
                ];
            }
        };
        ThfPageDynamicTableComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-dynamic-table',
                        template: "<thf-page-dynamic-search\n  [t-actions]=\"pageActions\"\n  [t-breadcrumb]=\"breadcrumb\"\n  [t-filters]=\"filters\"\n  [t-title]=\"title\"\n  (t-advanced-search)=\"onAdvancedSearch($event)\"\n  (t-change-disclaimers)=\"onChangeDisclaimers($event)\"\n  (t-quick-search)=\"onQuickSearch($event)\">\n\n  <thf-table\n    t-sort=\"true\"\n    [t-actions]=\"tableActions\"\n    [t-checkbox]=\"hasActionRemoveAll\"\n    [t-columns]=\"columns\"\n    [t-items]=\"items\"\n    [t-show-more-disabled]=\"!hasNext\"\n    (t-show-more)=\"showMore()\">\n  </thf-table>\n\n</thf-page-dynamic-search>\n",
                        providers: [ThfPageDynamicService$2]
                    }] }
        ];
        /** @nocollapse */
        ThfPageDynamicTableComponent.ctorParameters = function () { return [
            { type: router.Router },
            { type: router.ActivatedRoute },
            { type: thfUi.ThfDialogService },
            { type: thfUi.ThfNotificationService },
            { type: ThfPageDynamicService$2 }
        ]; };
        ThfPageDynamicTableComponent.propDecorators = {
            actions: [{ type: core.Input, args: ['t-actions',] }]
        };
        return ThfPageDynamicTableComponent;
    }(ThfPageDynamicListBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do template do thf-page-dynamic-search.
     */
    var ThfPageDynamicTableModule = /** @class */ (function () {
        function ThfPageDynamicTableModule() {
        }
        ThfPageDynamicTableModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            router.RouterModule,
                            thfUi.ThfTableModule,
                            ThfPageDynamicSearchModule
                        ],
                        declarations: [
                            ThfPageDynamicTableComponent
                        ],
                        exports: [
                            ThfPageDynamicTableComponent
                        ]
                    },] }
        ];
        return ThfPageDynamicTableModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageJobSchedulerInternal = /** @class */ (function () {
        function ThfPageJobSchedulerInternal() {
            this.periodicity = 'single';
            this.firstExecution = new Date();
            this.firstExecutionHour = this.getCurrentHour(this.firstExecution);
            this.recurrent = true;
        }
        /**
         * @private
         * @param {?} date
         * @return {?}
         */
        ThfPageJobSchedulerInternal.prototype.getCurrentHour = /**
         * @private
         * @param {?} date
         * @return {?}
         */
        function (date) {
            /** @type {?} */
            var hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();
            /** @type {?} */
            var minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();
            return hours + ":" + minutes;
        };
        return ThfPageJobSchedulerInternal;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * O `thf-page-job-scheduler` é uma página para criação e atualização do *Job Scheduler* de forma simplificada, apenas informando
     * o serviço (endpoint) para consumo, sem a necessidade de criar componentes e tratamentos dos dados.
     */
    var ThfPageJobSchedulerBaseComponent = /** @class */ (function () {
        function ThfPageJobSchedulerBaseComponent(thfPageJobSchedulerService) {
            this.thfPageJobSchedulerService = thfPageJobSchedulerService;
            /**
             * Objeto com propriedades do breadcrumb.
             */
            this.breadcrumb = { items: [] };
            this.model = new ThfPageJobSchedulerInternal();
        }
        /**
         * @protected
         * @param {?} id
         * @return {?}
         */
        ThfPageJobSchedulerBaseComponent.prototype.loadData = /**
         * @protected
         * @param {?} id
         * @return {?}
         */
        function (id) {
            var _this = this;
            if (!id) {
                this.model = new ThfPageJobSchedulerInternal();
                return;
            }
            this.thfPageJobSchedulerService.getResource(id).toPromise().then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.model = response;
            })).catch((/**
             * @return {?}
             */
            function () {
                _this.model = new ThfPageJobSchedulerInternal();
            }));
        };
        /**
         * @protected
         * @param {?} controls
         * @return {?}
         */
        ThfPageJobSchedulerBaseComponent.prototype.markAsDirtyInvalidControls = /**
         * @protected
         * @param {?} controls
         * @return {?}
         */
        function (controls) {
            for (var key in controls) {
                if (controls.hasOwnProperty(key)) {
                    /** @type {?} */
                    var control = controls[key];
                    if (control.invalid) {
                        control.markAsDirty();
                    }
                }
            }
        };
        ThfPageJobSchedulerBaseComponent.propDecorators = {
            breadcrumb: [{ type: core.Input, args: ['t-breadcrumb',] }],
            serviceApi: [{ type: core.Input, args: ['t-service-api',] }],
            title: [{ type: core.Input, args: ['t-title',] }]
        };
        return ThfPageJobSchedulerBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfPageJobSchedulerLiteralsDefault = {
        en: {
            at: 'at',
            back: 'Back',
            next: 'Next',
            periodicity: 'Periodicity',
            execution: 'Execution',
            process: 'Process',
            enterProcess: 'Enter a process',
            recurrent: 'Recurrent',
            single: 'Single',
            daily: 'Daily',
            weekly: 'Weekly',
            monthly: 'Monthly',
            scheduling: 'Scheduling',
            parameterization: 'Parameterization',
            conclude: 'Conclude',
            firstExecution: 'First Execution',
            hour: 'Hour',
            day: 'Day',
            weekDays: 'Week days',
            sunday: 'Sunday',
            monday: 'Monday',
            tuesday: 'Tuesday',
            wednesday: 'Wednesday',
            thursday: 'Thursday',
            friday: 'Friday',
            saturday: 'Saturday',
            parameters: 'Parameters',
            yes: 'Yes',
            no: 'No',
            notReported: 'Not reported',
            periodicityData: 'Periodicity data',
            confirmation: 'Confirmation',
            confirmSaveMessage: 'Are you sure you want to complete this schedule?',
            confirmUpdateMessage: 'Are you sure you want to update this schedule?',
            saveNotificationSuccessUpdate: 'Successfully updated scheduling',
            saveNotificationSuccessSave: 'Successfully saved scheduling',
            parametersNotFound: 'Parameters not found.'
        },
        es: {
            at: 'a las',
            back: 'Volver',
            next: 'Avanzar',
            periodicity: 'Periodicidad',
            execution: 'Ejecución',
            process: 'Proceso',
            enterProcess: 'Informe un proceso',
            recurrent: 'Recurrente',
            single: 'Única',
            daily: 'Diaria',
            weekly: 'Semanal',
            monthly: 'Mensual',
            scheduling: 'Programación',
            parameterization: 'Parametrización',
            conclude: 'Completar',
            firstExecution: 'Primera ejecución',
            hour: 'Horario',
            day: 'Día',
            weekDays: 'Dias de la semana',
            sunday: 'Domingo',
            monday: 'Lunes',
            tuesday: 'Martes',
            wednesday: 'Miércoles',
            thursday: 'Jueves',
            friday: 'Viernes',
            saturday: 'Sábado',
            parameters: 'Parámetros',
            yes: 'Sí',
            no: 'No',
            notReported: 'No informado',
            periodicityData: 'Dados da periodicidade',
            confirmation: 'Confirmación',
            confirmSaveMessage: '¿Está seguro de que desea completar esta programación de proceso?',
            confirmUpdateMessage: '¿Está seguro de que desea cambiar esta programación de proceso?',
            saveNotificationSuccessUpdate: 'Programación de proceso actualizada con éxito.',
            saveNotificationSuccessSave: 'Programación de proceso salvo con éxito.',
            parametersNotFound: 'No se encontraron parámetros.'
        },
        pt: {
            at: 'às',
            back: 'Voltar',
            next: 'Avançar',
            periodicity: 'Periodicidade',
            execution: 'Execução',
            process: 'Processo',
            enterProcess: 'Informe um processo',
            recurrent: 'Recorrente',
            single: 'Única',
            daily: 'Diária',
            weekly: 'Semanal',
            monthly: 'Mensal',
            scheduling: 'Agendamento',
            parameterization: 'Parametrização',
            conclude: 'Concluir',
            firstExecution: 'Primeira execução',
            hour: 'Horário',
            day: 'Dia',
            weekDays: 'Dias de semana',
            sunday: 'Domingo',
            monday: 'Segunda-feira',
            tuesday: 'Terça-feira',
            wednesday: 'Quarta-feira',
            thursday: 'Quinta-feira',
            friday: 'Sexta-feira',
            saturday: 'Sábado',
            parameters: 'Parâmetros',
            yes: 'Sim',
            no: 'Não',
            notReported: 'Não informado',
            periodicityData: 'Dados da periodicidade',
            confirmation: 'Confirmação',
            confirmSaveMessage: 'Tem certeza que deseja concluir este agendamento de processo?',
            confirmUpdateMessage: 'Tem certeza que deseja alterar este agendamento de processo?',
            saveNotificationSuccessUpdate: 'Agendamento de processo atualizado com sucesso.',
            saveNotificationSuccessSave: 'Agendamento de processo salvo com sucesso.',
            parametersNotFound: 'Parâmetros não foram encontrados.'
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageJobSchedulerService = /** @class */ (function () {
        function ThfPageJobSchedulerService(http$1) {
            this.http = http$1;
            this.endpoint = '/';
            this.headers = new http.HttpHeaders({
                'X-TOTVS-SCREEN-LOCK': 'true'
            });
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.configServiceApi = /**
         * @param {?=} config
         * @return {?}
         */
        function (config) {
            if (config === void 0) { config = {}; }
            this.endpoint = config.endpoint;
        };
        // Cria um recurso
        // Cria um recurso
        /**
         * @param {?} resource
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.createResource = 
        // Cria um recurso
        /**
         * @param {?} resource
         * @return {?}
         */
        function (resource) {
            /** @type {?} */
            var jobScheduler = this.convertToJobScheduler(resource);
            return this.http.post("" + this.endpoint, jobScheduler, { headers: this.headers });
        };
        /**
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.getHeadProcesses = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var headers = { 'X-Totvs-No-Error': 'true' };
            return this.http.head(this.endpoint + "/processes", { headers: headers });
        };
        // Busca parametros pelo processo id
        // Busca parametros pelo processo id
        /**
         * @param {?} processId
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.getParametersByProcess = 
        // Busca parametros pelo processo id
        /**
         * @param {?} processId
         * @return {?}
         */
        function (processId) {
            return this.http.get(this.endpoint + "/processes/" + processId + "/parameters", { headers: this.headers })
                .pipe(operators.map((/**
             * @param {?} resource
             * @return {?}
             */
            function (resource) { return resource.items; })));
        };
        // Busca um único recurso
        // Busca um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.getProcess = 
        // Busca um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            return this.http.get(this.endpoint + "/processes/" + id, { headers: this.headers });
        };
        // Busca uma lista de processos
        // Busca uma lista de processos
        /**
         * @param {?=} params
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.getProcesses = 
        // Busca uma lista de processos
        /**
         * @param {?=} params
         * @return {?}
         */
        function (params) {
            if (params === void 0) { params = {}; }
            return this.http.get(this.endpoint + "/processes", { params: params });
        };
        // Busca um único recurso
        // Busca um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.getResource = 
        // Busca um único recurso
        /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            var _this = this;
            return this.http.get(this.endpoint + "/" + id, { headers: this.headers })
                .pipe(operators.map((/**
             * @param {?} resource
             * @return {?}
             */
            function (resource) { return _this.convertToJobSchedulerInternal(resource); })));
        };
        // Atualiza um recurso
        // Atualiza um recurso
        /**
         * @param {?} id
         * @param {?} resource
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.updateResource = 
        // Atualiza um recurso
        /**
         * @param {?} id
         * @param {?} resource
         * @return {?}
         */
        function (id, resource) {
            /** @type {?} */
            var jobScheduler = this.convertToJobScheduler(resource);
            return this.http.put(this.endpoint + "/" + id, jobScheduler, { headers: this.headers });
        };
        /**
         * @private
         * @param {?} jobSchedulerInternal
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.convertToJobScheduler = /**
         * @private
         * @param {?} jobSchedulerInternal
         * @return {?}
         */
        function (jobSchedulerInternal) {
            /** @type {?} */
            var jobScheduler = __assign({}, jobSchedulerInternal);
            if (jobSchedulerInternal.periodicity) {
                if (jobSchedulerInternal.periodicity === 'single') {
                    jobScheduler.recurrent = false;
                }
                else {
                    Object.assign(jobScheduler, this.convertToPeriodicity(jobSchedulerInternal));
                }
            }
            if (jobSchedulerInternal.firstExecutionHour) {
                jobScheduler.firstExecution =
                    this.replaceHourFirstExecution(jobSchedulerInternal.firstExecution, jobSchedulerInternal.firstExecutionHour);
            }
            if (!Object.keys(this.returnValidExecutionParameter(jobScheduler.executionParameter)).length) {
                delete jobScheduler.executionParameter;
            }
            this.removeInvalidKeys(jobScheduler);
            return jobScheduler;
        };
        /**
         * @private
         * @param {?=} jobScheduler
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.convertToJobSchedulerInternal = /**
         * @private
         * @param {?=} jobScheduler
         * @return {?}
         */
        function (jobScheduler) {
            if (jobScheduler === void 0) { jobScheduler = (/** @type {?} */ ({})); }
            /** @type {?} */
            var jobSchedulerInternal = __assign({}, jobScheduler);
            if (jobScheduler.firstExecution) {
                jobSchedulerInternal.firstExecutionHour = this.getHourFirstExecution(jobScheduler.firstExecution);
            }
            Object.assign(jobSchedulerInternal, this.convertToPeriodicityInternal(jobScheduler));
            this.removeInvalidKeys(jobSchedulerInternal, ['weekly', 'monthly', 'daily']);
            return jobSchedulerInternal;
        };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.convertToPeriodicity = /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = {};
            /** @type {?} */
            var valuePeriodicity = value.periodicity;
            if (valuePeriodicity) {
                newValue[valuePeriodicity] = {};
                if (valuePeriodicity === 'monthly') {
                    newValue[valuePeriodicity].day = value.dayOfMonth ? parseInt(value.dayOfMonth, 10) : 0;
                }
                else if (valuePeriodicity === 'weekly') {
                    newValue[valuePeriodicity].daysOfWeek = value.daysOfWeek;
                }
                newValue[valuePeriodicity].hour = value.hour ? parseInt(value.hour.split(':')[0], 10) : 0;
                newValue[valuePeriodicity].minute = value.hour ? parseInt(value.hour.split(':')[1], 10) : 0;
            }
            return newValue;
        };
        /**
         * @private
         * @param {?=} value
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.convertToPeriodicityInternal = /**
         * @private
         * @param {?=} value
         * @return {?}
         */
        function (value) {
            if (value === void 0) { value = (/** @type {?} */ ({})); }
            if (value.monthly) {
                return {
                    periodicity: 'monthly',
                    hour: addZero(value.monthly.hour) + ":" + addZero(value.monthly.minute),
                    dayOfMonth: value.monthly.day
                };
            }
            else if (value.daily) {
                return {
                    periodicity: 'daily',
                    hour: addZero(value.daily.hour) + ":" + addZero(value.daily.minute)
                };
            }
            else if (value.weekly) {
                return {
                    periodicity: 'weekly',
                    hour: addZero(value.weekly.hour) + ":" + addZero(value.weekly.minute),
                    daysOfWeek: __spread(value.weekly.daysOfWeek)
                };
            }
            else {
                return {
                    periodicity: 'single'
                };
            }
        };
        /**
         * @private
         * @param {?} date
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.getCurrentHour = /**
         * @private
         * @param {?} date
         * @return {?}
         */
        function (date) {
            /** @type {?} */
            var hours = addZero(date.getHours());
            /** @type {?} */
            var minutes = addZero(date.getMinutes());
            return hours + ":" + minutes;
        };
        /**
         * @private
         * @param {?} firstExecutionDate
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.getHourFirstExecution = /**
         * @private
         * @param {?} firstExecutionDate
         * @return {?}
         */
        function (firstExecutionDate) {
            return this.getCurrentHour(new Date(firstExecutionDate));
        };
        /**
         * @private
         * @param {?} value
         * @param {?=} keys
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.removeInvalidKeys = /**
         * @private
         * @param {?} value
         * @param {?=} keys
         * @return {?}
         */
        function (value, keys) {
            /** @type {?} */
            var invalidKeys = keys || ['periodicity', 'hour', 'minute', 'day', 'daysOfWeek', 'dayOfMonth', 'firstExecutionHour'];
            Object.keys(value).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                if (invalidKeys.includes(key)) {
                    delete value[key];
                }
            }));
        };
        /**
         * @private
         * @param {?} date
         * @param {?} time
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.replaceHourFirstExecution = /**
         * @private
         * @param {?} date
         * @param {?} time
         * @return {?}
         */
        function (date, time) {
            /** @type {?} */
            var firstExecutionDate = new Date(date);
            /** @type {?} */
            var timeSplited = time.split(':');
            /** @type {?} */
            var hours = parseInt(timeSplited[0], 10);
            /** @type {?} */
            var minutes = parseInt(timeSplited[1], 10);
            firstExecutionDate.setHours(hours, minutes);
            return convertDateToISOExtended(firstExecutionDate);
        };
        /**
         * @private
         * @param {?} parameter
         * @return {?}
         */
        ThfPageJobSchedulerService.prototype.returnValidExecutionParameter = /**
         * @private
         * @param {?} parameter
         * @return {?}
         */
        function (parameter) {
            /** @type {?} */
            var newParameter = __assign({}, parameter);
            for (var key in newParameter) {
                if (newParameter.hasOwnProperty(key) && newParameter[key] === undefined) {
                    delete newParameter[key];
                }
            }
            return newParameter;
        };
        ThfPageJobSchedulerService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfPageJobSchedulerService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return ThfPageJobSchedulerService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageJobSchedulerLookupService = /** @class */ (function () {
        function ThfPageJobSchedulerLookupService(thfPageJobSchedulerService) {
            this.thfPageJobSchedulerService = thfPageJobSchedulerService;
        }
        /**
         * @param {?} search
         * @param {?} page
         * @param {?} pageSize
         * @return {?}
         */
        ThfPageJobSchedulerLookupService.prototype.getFilteredData = /**
         * @param {?} search
         * @param {?} page
         * @param {?} pageSize
         * @return {?}
         */
        function (search, page, pageSize) {
            /** @type {?} */
            var params = { page: page, pageSize: pageSize, search: search };
            return this.thfPageJobSchedulerService.getProcesses(params);
        };
        /**
         * @param {?} processId
         * @return {?}
         */
        ThfPageJobSchedulerLookupService.prototype.getObjectByValue = /**
         * @param {?} processId
         * @return {?}
         */
        function (processId) {
            return this.thfPageJobSchedulerService.getProcess(processId);
        };
        ThfPageJobSchedulerLookupService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfPageJobSchedulerLookupService.ctorParameters = function () { return [
            { type: ThfPageJobSchedulerService }
        ]; };
        return ThfPageJobSchedulerLookupService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfPageJobSchedulerBaseComponent
     *
     * \@example
     *
     * <example name="thf-page-job-scheduler-basic" title="Totvs Page Job Scheduler Basic">
     *  <file name="sample-thf-page-job-scheduler-basic/sample-thf-page-job-scheduler-basic.component.html"> </file>
     *  <file name="sample-thf-page-job-scheduler-basic/sample-thf-page-job-scheduler-basic.component.ts"> </file>
     * </example>
     *
     */
    var ThfPageJobSchedulerComponent = /** @class */ (function (_super) {
        __extends(ThfPageJobSchedulerComponent, _super);
        function ThfPageJobSchedulerComponent(thfPageDynamicLookupService, activatedRoute, thfDialogService, thfNotification, router, thfPageJobSchedulerService) {
            var _this = _super.call(this, thfPageJobSchedulerService) || this;
            _this.thfPageDynamicLookupService = thfPageDynamicLookupService;
            _this.activatedRoute = activatedRoute;
            _this.thfDialogService = thfDialogService;
            _this.thfNotification = thfNotification;
            _this.router = router;
            _this.isEdit = false;
            _this.literals = __assign({}, thfPageJobSchedulerLiteralsDefault[thfLocaleDefault], thfPageJobSchedulerLiteralsDefault[browserLanguage()]);
            _this.parameters = [];
            _this.step = 1;
            _this.backPageAction = {
                label: _this.literals.back,
                action: _this.nextStepOperation.bind(_this, 'back'),
                disabled: _this.isDisabledBack.bind(_this)
            };
            _this.concludePageActions = [
                {
                    label: _this.literals.conclude,
                    action: _this.confirmJobScheduler.bind(_this)
                },
                __assign({}, _this.backPageAction)
            ];
            _this.nextPageActions = [
                {
                    label: _this.literals.next,
                    action: _this.nextStepOperation.bind(_this, 'next'),
                    disabled: _this.isDisabledAdvance.bind(_this)
                },
                __assign({}, _this.backPageAction)
            ];
            _this.jobSchedulerActions = __spread(_this.nextPageActions);
            _this.steps = [
                { label: _this.literals.scheduling },
                { label: _this.literals.parameterization },
                { label: _this.literals.conclude }
            ];
            return _this;
        }
        Object.defineProperty(ThfPageJobSchedulerComponent.prototype, "stepperOrientation", {
            get: /**
             * @return {?}
             */
            function () {
                return window.innerWidth > 481 && window.innerWidth < 960 ? 'horizontal' : 'vertical';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfPageJobSchedulerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var paramId = this.activatedRoute.snapshot.params['id'];
            this.isEdit = !!paramId;
            this.thfPageJobSchedulerService.configServiceApi({ endpoint: this.serviceApi });
            this.loadData(paramId);
        };
        /**
         * @param {?} currentStep
         * @param {?} nextStep
         * @return {?}
         */
        ThfPageJobSchedulerComponent.prototype.changePageActionsBySteps = /**
         * @param {?} currentStep
         * @param {?} nextStep
         * @return {?}
         */
        function (currentStep, nextStep) {
            /** @type {?} */
            var stepsLength = this.steps.length;
            if (nextStep === stepsLength) {
                this.jobSchedulerActions = __spread(this.concludePageActions);
            }
            else if (currentStep === stepsLength && nextStep < currentStep) {
                this.jobSchedulerActions = __spread(this.nextPageActions);
            }
        };
        /**
         * @param {?} stepNumber
         * @return {?}
         */
        ThfPageJobSchedulerComponent.prototype.nextStep = /**
         * @param {?} stepNumber
         * @return {?}
         */
        function (stepNumber) {
            if (stepNumber > 1 && this.schedulerExecution.form.invalid) {
                this.markAsDirtyInvalidControls(this.schedulerExecution.form.controls);
                return;
            }
            if (stepNumber > 2 && (this.schedulerParameters && this.schedulerParameters.form && this.schedulerParameters.form.invalid)) {
                this.markAsDirtyInvalidControls(this.schedulerParameters.form.controls);
                return;
            }
            this.changePageActionsBySteps(this.step, stepNumber);
            /** @type {?} */
            var steps = this.steps[this.step - 1];
            this.step = stepNumber;
            if (steps) {
                steps.status = thfUi.ThfStepperStatus.Done;
            }
        };
        /**
         * @param {?} process
         * @return {?}
         */
        ThfPageJobSchedulerComponent.prototype.onChangeProcess = /**
         * @param {?} process
         * @return {?}
         */
        function (process) {
            if (process.existAPI && process.processId) {
                this.getParametersByProcess(process.processId);
                if (!this.isEdit) {
                    this.model.executionParameter = {};
                }
                return;
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageJobSchedulerComponent.prototype.confirmJobScheduler = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var paramId = this.activatedRoute.snapshot.params['id'];
            /** @type {?} */
            var confirmMessage = paramId ? this.literals.confirmUpdateMessage : this.literals.confirmSaveMessage;
            this.thfDialogService.confirm({
                title: this.literals.confirmation,
                message: confirmMessage,
                confirm: (/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var model = Object.assign({}, _this.model);
                    _this.save(model, paramId);
                })
            });
        };
        /**
         * @private
         * @param {?} msgSuccess
         * @param {?} saveOperation
         * @return {?}
         */
        ThfPageJobSchedulerComponent.prototype.emitSuccessMessage = /**
         * @private
         * @param {?} msgSuccess
         * @param {?} saveOperation
         * @return {?}
         */
        function (msgSuccess, saveOperation) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, saveOperation.toPromise()];
                        case 1:
                            _a.sent();
                            this.thfNotification.success(msgSuccess);
                            this.resetJobSchedulerForm();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @private
         * @param {?} process
         * @return {?}
         */
        ThfPageJobSchedulerComponent.prototype.getParametersByProcess = /**
         * @private
         * @param {?} process
         * @return {?}
         */
        function (process) {
            var _this = this;
            this.thfPageJobSchedulerService.getParametersByProcess(process).subscribe((/**
             * @param {?} parameters
             * @return {?}
             */
            function (parameters) {
                _this.parameters = parameters;
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageJobSchedulerComponent.prototype.isDisabledAdvance = /**
         * @private
         * @return {?}
         */
        function () {
            return this.schedulerExecution ? this.schedulerExecution.form.invalid : false;
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageJobSchedulerComponent.prototype.isDisabledBack = /**
         * @private
         * @return {?}
         */
        function () {
            return this.step === 1;
        };
        /**
         * @private
         * @param {?=} operation
         * @return {?}
         */
        ThfPageJobSchedulerComponent.prototype.nextStepOperation = /**
         * @private
         * @param {?=} operation
         * @return {?}
         */
        function (operation) {
            /** @type {?} */
            var stepNumber = operation === 'back' ? this.step - 1 : this.step + 1;
            this.nextStep(stepNumber);
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageJobSchedulerComponent.prototype.resetJobSchedulerForm = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.schedulerExecution.form.reset();
            // radiogroup não estava atribuindo novo valor, fica vermelho sem o timetout.
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.model = new ThfPageJobSchedulerInternal();
                _this.step = 1;
                _this.steps.forEach((/**
                 * @param {?} step
                 * @return {?}
                 */
                function (step) {
                    step.status = thfUi.ThfStepperStatus.Default;
                }));
                _this.jobSchedulerActions = __spread(_this.nextPageActions);
            }));
        };
        /**
         * @private
         * @param {?} model
         * @param {?} paramId
         * @return {?}
         */
        ThfPageJobSchedulerComponent.prototype.save = /**
         * @private
         * @param {?} model
         * @param {?} paramId
         * @return {?}
         */
        function (model, paramId) {
            /** @type {?} */
            var saveOperation = paramId
                ? this.thfPageJobSchedulerService.updateResource(paramId, model)
                : this.thfPageJobSchedulerService.createResource(model);
            /** @type {?} */
            var msgSuccess = paramId ? this.literals.saveNotificationSuccessUpdate : this.literals.saveNotificationSuccessSave;
            this.emitSuccessMessage(msgSuccess, saveOperation);
        };
        ThfPageJobSchedulerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-job-scheduler',
                        template: "<thf-page-default\n  [t-actions]=\"jobSchedulerActions\"\n  [t-breadcrumb]=\"breadcrumb\"\n  [t-title]=\"title\">\n\n  <div class=\"thf-row\">\n\n    <thf-stepper\n      class=\"thf-lg-3 thf-xl-2\"\n      t-sequential=\"true\"\n      [t-orientation]=\"stepperOrientation\"\n      [t-step]=\"step\"\n      [t-steps]=\"steps\"\n      (t-change-step)=\"nextStep($event)\">\n    </thf-stepper>\n\n    <thf-container class=\"thf-lg-8 thf-xl-6\">\n      <form #formScheduler=\"ngForm\">\n\n        <thf-page-job-scheduler-execution [hidden]=\"step !== 1\"\n          #schedulerExecution\n          class=\"thf-md-12\"\n          [t-is-edit]=\"isEdit\"\n          [t-literals]=\"literals\"\n          [t-value]=\"model\"\n          (t-change-process)=\"onChangeProcess($event)\">\n        </thf-page-job-scheduler-execution>\n\n        <thf-page-job-scheduler-parameters *ngIf=\"step === 2\"\n          #schedulerParameters\n          class=\"thf-md-12\"\n          [t-literals]=\"literals\"\n          [t-parameters]=\"parameters || []\"\n          [(t-value)]=\"model.executionParameter\">\n        </thf-page-job-scheduler-parameters>\n\n        <thf-page-job-scheduler-summary *ngIf=\"step === 3\"\n          class=\"thf-md-12\"\n          [t-literals]=\"literals\"\n          [t-parameters]=\"parameters\"\n          [t-value]=\"model\">\n        </thf-page-job-scheduler-summary>\n      </form>\n    </thf-container>\n  </div>\n\n</thf-page-default>\n",
                        encapsulation: core.ViewEncapsulation.None,
                        styles: ["\n    thf-container .thf-container {\n      overflow-y: unset;\n    }\n  "]
                    }] }
        ];
        /** @nocollapse */
        ThfPageJobSchedulerComponent.ctorParameters = function () { return [
            { type: ThfPageJobSchedulerLookupService },
            { type: router.ActivatedRoute },
            { type: thfUi.ThfDialogService },
            { type: thfUi.ThfNotificationService },
            { type: router.Router },
            { type: ThfPageJobSchedulerService }
        ]; };
        ThfPageJobSchedulerComponent.propDecorators = {
            schedulerExecution: [{ type: core.ViewChild, args: ['schedulerExecution', { static: true },] }],
            schedulerParameters: [{ type: core.ViewChild, args: ['schedulerParameters', { static: true },] }]
        };
        return ThfPageJobSchedulerComponent;
    }(ThfPageJobSchedulerBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageJobSchedulerExecutionComponent = /** @class */ (function () {
        function ThfPageJobSchedulerExecutionComponent(thfPageJobSchedulerService, thfPageJobSchedulerLookup) {
            this.thfPageJobSchedulerService = thfPageJobSchedulerService;
            this.thfPageJobSchedulerLookup = thfPageJobSchedulerLookup;
            this._value = {};
            this.dayPattern = '^(3[0-1]|[0-2][0-9]|[1-9]|0[1-9])$';
            this.existProcessAPI = true;
            this.minDateFirstExecution = new Date();
            this.periodicityOptions = [];
            this.timePattern = '^(2[0-3]|[01][0-9]):?([0-5][0-9])$';
            this.weekDays = [];
            this.isEdit = false;
            this.literals = (/** @type {?} */ ({}));
            this.changeProcess = new core.EventEmitter();
        }
        Object.defineProperty(ThfPageJobSchedulerExecutionComponent.prototype, "value", {
            get: /**
             * @return {?}
             */
            function () {
                return this._value;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._value = value && isTypeof(value, 'object') ? value : {};
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageJobSchedulerExecutionComponent.prototype, "startDateFirstExecution", {
            get: /**
             * @return {?}
             */
            function () {
                return this.isEdit ? undefined : this.minDateFirstExecution;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfPageJobSchedulerExecutionComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.subscribeProcessIdValueChanges();
            }));
        };
        /**
         * @return {?}
         */
        ThfPageJobSchedulerExecutionComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.periodicityTemplates = {
                daily: this.dailyTemplate,
                monthly: this.monthlyTemplate,
                weekly: this.weeklyTempalte
            };
            this.checkExistsProcessesAPI();
            this.periodicityOptions = this.getPeriodicityOptions();
            this.weekDays = this.getWeekDays();
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageJobSchedulerExecutionComponent.prototype.checkExistsProcessesAPI = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.thfPageJobSchedulerService.getHeadProcesses().subscribe(undefined, (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.existProcessAPI = false;
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageJobSchedulerExecutionComponent.prototype.getPeriodicityOptions = /**
         * @private
         * @return {?}
         */
        function () {
            return [
                { label: this.literals.single, value: 'single' },
                { label: this.literals.daily, value: 'daily' },
                { label: this.literals.weekly, value: 'weekly' },
                { label: this.literals.monthly, value: 'monthly' }
            ];
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageJobSchedulerExecutionComponent.prototype.getWeekDays = /**
         * @private
         * @return {?}
         */
        function () {
            return [
                { label: this.literals.sunday, value: 'Sunday' },
                { label: this.literals.monday, value: 'Monday' },
                { label: this.literals.tuesday, value: 'Tuesday' },
                { label: this.literals.wednesday, value: 'Wednesday' },
                { label: this.literals.thursday, value: 'Thursday' },
                { label: this.literals.friday, value: 'Friday' },
                { label: this.literals.saturday, value: 'Saturday' }
            ];
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageJobSchedulerExecutionComponent.prototype.subscribeProcessIdValueChanges = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.form.controls['processID'].valueChanges.subscribe((/**
             * @param {?} processId
             * @return {?}
             */
            function (processId) {
                _this.changeProcess.emit({ processId: processId, existAPI: _this.existProcessAPI });
            }));
        };
        ThfPageJobSchedulerExecutionComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-job-scheduler-execution',
                        template: "<form #formExecution=\"ngForm\">\n  <div class=\"thf-row\">\n    <ng-container *ngIf=\"existProcessAPI; then lookupProcessesID; else inputProcessesID\"></ng-container>\n  </div>\n\n  <div class=\"thf-row\">\n    <thf-divider class=\"thf-md-12\" [t-label]=\"literals.firstExecution\"></thf-divider>\n\n    <thf-datepicker\n      class=\"thf-md-4\"\n      name=\"firstExecution\"\n      [(ngModel)]=\"value.firstExecution\"\n      t-placeholder=\"dd/mm/aaaa\"\n      t-required\n      [t-disabled]=\"isEdit\"\n      [t-label]=\"literals.day\"\n      [t-min-date]=\"startDateFirstExecution\">\n    </thf-datepicker>\n\n    <thf-input\n      class=\"thf-md-2\"\n      name=\"firstExecutionHour\"\n      [(ngModel)]=\"value.firstExecutionHour\"\n      t-mask=\"99:99\"\n      t-mask-format-model\n      t-placeholder=\"HH:mm\"\n      t-required\n      [t-disabled]=\"isEdit\"\n      [t-label]=\"literals.hour\"\n      [t-pattern]=\"timePattern\">\n    </thf-input>\n\n  </div>\n\n  <hr>\n\n  <div class=\"thf-row\">\n    <thf-radio-group\n      class=\"thf-sm-12\"\n      name=\"periodicity\"\n      [(ngModel)]=\"value.periodicity\"\n      t-columns=\"4\"\n      t-required\n      [t-label]=\"literals.periodicity\"\n      [t-options]=\"periodicityOptions\">\n    </thf-radio-group>\n\n    <ng-container *ngIf=\"value.periodicity !== 'single'\">\n      <thf-divider class=\"thf-md-12\" [t-label]=\"literals.periodicityData\">\n      </thf-divider>\n\n      <div class=\"thf-row\">\n        <ng-container *ngTemplateOutlet=\"periodicityTemplates[value.periodicity]\">\n        </ng-container>\n      </div>\n\n      <div class=\"thf-row\">\n        <thf-switch\n          class=\"thf-md-3\"\n          name=\"recurrent\"\n          [(ngModel)]=\"value.recurrent\"\n          [t-label]=\"literals.recurrent\"\n          [t-label-off]=\"literals.no\"\n          [t-label-on]=\"literals.yes\">\n        </thf-switch>\n      </div>\n    </ng-container>\n  </div>\n\n  <ng-template #lookupProcessesID>\n    <thf-lookup\n      class=\"thf-md-12\"\n      name=\"processID\"\n      [(ngModel)]=\"value.processID\"\n      t-field-label=\"description\"\n      t-field-value=\"processID\"\n      t-required\n      [t-disabled]=\"isEdit\"\n      [t-filter-service]=\"thfPageJobSchedulerLookup\"\n      [t-label]=\"literals.process\"\n      [t-placeholder]=\"literals.enterProcess\">\n    </thf-lookup>\n  </ng-template>\n\n  <ng-template #inputProcessesID>\n    <thf-input\n      class=\"thf-md-12\"\n      name=\"processID\"\n      [(ngModel)]=\"value.processID\"\n      t-required\n      [t-disabled]=\"isEdit\"\n      [t-label]=\"literals.process\"\n      [t-placeholder]=\"literals.enterProcess\">\n    </thf-input>\n  </ng-template>\n\n  <ng-template #dailyTemplate>\n    <ng-container *ngTemplateOutlet=\"inputHourTemplate\">\n    </ng-container>\n  </ng-template>\n\n  <ng-template #weeklyTemplate>\n    <div class=\"thf-row\">\n      <ng-container *ngTemplateOutlet=\"inputHourTemplate\">\n      </ng-container>\n    </div>\n\n    <thf-checkbox-group\n      class=\"thf-md-12\"\n      name=\"daysOfWeek\"\n      [(ngModel)]=\"value.daysOfWeek\"\n      t-columns=\"4\"\n      t-required\n      [t-label]=\"literals.weekDays\"\n      [t-options]=\"weekDays\">\n    </thf-checkbox-group>\n  </ng-template>\n\n  <ng-template #monthlyTemplate>\n    <thf-number\n      class=\"thf-md-3\"\n      name=\"dayOfMonth\"\n      [(ngModel)]=\"value.dayOfMonth\"\n      t-required\n      [t-error-pattern]=\"'Dia inv\u00E1lido'\"\n      [t-label]=\"literals.day\"\n      [t-max]=\"31\"\n      [t-pattern]=\"dayPattern\">\n    </thf-number>\n\n    <ng-container *ngTemplateOutlet=\"inputHourTemplate\">\n    </ng-container>\n  </ng-template>\n\n  <ng-template #inputHourTemplate>\n    <thf-input\n      class=\"thf-md-2\"\n      name=\"hour\"\n      [(ngModel)]=\"value.hour\"\n      t-mask=\"99:99\"\n      t-mask-format-model\n      t-placeholder=\"HH:mm\"\n      t-required\n      [t-label]=\"literals.hour\"\n      [t-pattern]=\"timePattern\">\n    </thf-input>\n  </ng-template>\n</form>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfPageJobSchedulerExecutionComponent.ctorParameters = function () { return [
            { type: ThfPageJobSchedulerService },
            { type: ThfPageJobSchedulerLookupService }
        ]; };
        ThfPageJobSchedulerExecutionComponent.propDecorators = {
            form: [{ type: core.ViewChild, args: ['formExecution', { static: true },] }],
            dailyTemplate: [{ type: core.ViewChild, args: ['dailyTemplate', { static: true },] }],
            monthlyTemplate: [{ type: core.ViewChild, args: ['monthlyTemplate', { static: true },] }],
            weeklyTempalte: [{ type: core.ViewChild, args: ['weeklyTemplate', { static: true },] }],
            isEdit: [{ type: core.Input, args: ['t-is-edit',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }],
            value: [{ type: core.Input, args: ['t-value',] }],
            changeProcess: [{ type: core.Output, args: ['t-change-process',] }]
        };
        return ThfPageJobSchedulerExecutionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageJobSchedulerParametersComponent = /** @class */ (function () {
        function ThfPageJobSchedulerParametersComponent() {
            this.literals = (/** @type {?} */ ({}));
            this.parameters = [];
            this.valueChange = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        ThfPageJobSchedulerParametersComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.form) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.form.valueChanges.subscribe((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) {
                        _this.valueChange.emit(value);
                    }));
                }));
            }
        };
        ThfPageJobSchedulerParametersComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-job-scheduler-parameters',
                        template: "<ng-container *ngIf=\"parameters && parameters.length; then formFieldsTemplate; else parametersNotFoundTemplate\">\n</ng-container>\n\n<ng-template #parametersNotFoundTemplate>\n\n  <div class=\"thf-text-center\">\n    <span class=\"thf-icon thf-icon-info\"></span>\n    <span class=\"thf-font-text-large\">\n      {{ literals.parametersNotFound }}\n    </span>\n  </div>\n\n</ng-template>\n\n<ng-template #formFieldsTemplate>\n  <form #parametersForm=\"ngForm\">\n    <thf-dynamic-form\n      t-group-form\n      [t-fields]=\"parameters\"\n      [t-value]=\"value\">\n    </thf-dynamic-form>\n  </form>\n</ng-template>\n"
                    }] }
        ];
        ThfPageJobSchedulerParametersComponent.propDecorators = {
            form: [{ type: core.ViewChild, args: ['parametersForm', { static: true },] }],
            literals: [{ type: core.Input, args: ['t-literals',] }],
            parameters: [{ type: core.Input, args: ['t-parameters',] }],
            value: [{ type: core.Input, args: ['t-value',] }],
            valueChange: [{ type: core.Output, args: ['t-valueChange',] }]
        };
        return ThfPageJobSchedulerParametersComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageJobSchedulerSummaryComponent = /** @class */ (function () {
        function ThfPageJobSchedulerSummaryComponent(datePipe) {
            this.datePipe = datePipe;
            this.executionValue = '';
            this.firstExecutionValue = '';
            this.infoOrientation = thfUi.ThfInfoOrientation.Horizontal;
            this.periodicityValue = '';
            this.recurrentValue = '';
            this.literals = (/** @type {?} */ ({}));
            this.parameters = [];
            this.value = (/** @type {?} */ ({}));
        }
        /**
         * @return {?}
         */
        ThfPageJobSchedulerSummaryComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _a = this.value, periodicity = _a.periodicity, hour = _a.hour, dayOfMonth = _a.dayOfMonth, daysOfWeek = _a.daysOfWeek, recurrent = _a.recurrent, firstExecution = _a.firstExecution, firstExecutionHour = _a.firstExecutionHour;
            this.periodicityValue = this.getPeriodicityLabel(periodicity);
            this.executionValue = this.getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth);
            this.firstExecutionValue = this.getFirstExecutionLabel(firstExecution, firstExecutionHour);
            this.recurrentValue = this.getRecurrentValue(recurrent);
        };
        /**
         * @private
         * @param {?} periodicity
         * @param {?=} hour
         * @param {?=} daysOfWeek
         * @param {?=} dayOfMonth
         * @return {?}
         */
        ThfPageJobSchedulerSummaryComponent.prototype.getExecutionValue = /**
         * @private
         * @param {?} periodicity
         * @param {?=} hour
         * @param {?=} daysOfWeek
         * @param {?=} dayOfMonth
         * @return {?}
         */
        function (periodicity, hour, daysOfWeek, dayOfMonth) {
            switch (periodicity) {
                case 'daily':
                    return this.getHourLabel(hour);
                case 'monthly':
                    return this.getMonthlyLabelExecution(dayOfMonth, hour);
                case 'weekly':
                    return this.getWeeklyLabelExecution(daysOfWeek, hour);
                default:
                    return this.literals.notReported;
            }
        };
        /**
         * @private
         * @param {?} firstExecution
         * @param {?=} firstExecutionHour
         * @return {?}
         */
        ThfPageJobSchedulerSummaryComponent.prototype.getFirstExecutionLabel = /**
         * @private
         * @param {?} firstExecution
         * @param {?=} firstExecutionHour
         * @return {?}
         */
        function (firstExecution, firstExecutionHour) {
            if (firstExecution) {
                /** @type {?} */
                var date = this.datePipe.transform(firstExecution, 'dd/MM/yyyy', '-0200');
                return date + " " + this.getHourLabel(firstExecutionHour);
            }
            else {
                return this.literals.notReported;
            }
        };
        /**
         * @private
         * @param {?} hour
         * @return {?}
         */
        ThfPageJobSchedulerSummaryComponent.prototype.getHourLabel = /**
         * @private
         * @param {?} hour
         * @return {?}
         */
        function (hour) {
            return this.literals.at + " " + (hour || '00:00') + "h";
        };
        /**
         * @private
         * @param {?} dayOfMonth
         * @param {?} hour
         * @return {?}
         */
        ThfPageJobSchedulerSummaryComponent.prototype.getMonthlyLabelExecution = /**
         * @private
         * @param {?} dayOfMonth
         * @param {?} hour
         * @return {?}
         */
        function (dayOfMonth, hour) {
            /** @type {?} */
            var hourLabel = this.getHourLabel(hour);
            return this.literals.day + " " + dayOfMonth + " " + hourLabel;
        };
        /**
         * @private
         * @param {?} periodicity
         * @return {?}
         */
        ThfPageJobSchedulerSummaryComponent.prototype.getPeriodicityLabel = /**
         * @private
         * @param {?} periodicity
         * @return {?}
         */
        function (periodicity) {
            switch (periodicity) {
                case 'daily':
                    return this.literals.daily;
                case 'monthly':
                    return this.literals.monthly;
                case 'weekly':
                    return this.literals.weekly;
                default:
                    return this.literals.single;
            }
        };
        /**
         * @private
         * @param {?} recurrent
         * @return {?}
         */
        ThfPageJobSchedulerSummaryComponent.prototype.getRecurrentValue = /**
         * @private
         * @param {?} recurrent
         * @return {?}
         */
        function (recurrent) {
            return recurrent ? this.literals.yes : this.literals.no;
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageJobSchedulerSummaryComponent.prototype.getSorterWeekDays = /**
         * @private
         * @return {?}
         */
        function () {
            return {
                'sunday': 0,
                'monday': 1,
                'tuesday': 2,
                'wednesday': 3,
                'thursday': 4,
                'friday': 5,
                'saturday': 6
            };
        };
        /**
         * @private
         * @param {?} day
         * @return {?}
         */
        ThfPageJobSchedulerSummaryComponent.prototype.getTranslateWeekDay = /**
         * @private
         * @param {?} day
         * @return {?}
         */
        function (day) {
            /** @type {?} */
            var days = {
                Sunday: this.literals.sunday,
                Monday: this.literals.monday,
                Tuesday: this.literals.tuesday,
                Wednesday: this.literals.wednesday,
                Thursday: this.literals.thursday,
                Friday: this.literals.friday,
                Saturday: this.literals.saturday,
            };
            return days[day] || '';
        };
        /**
         * @private
         * @param {?=} days
         * @return {?}
         */
        ThfPageJobSchedulerSummaryComponent.prototype.getWeekDaysLabel = /**
         * @private
         * @param {?=} days
         * @return {?}
         */
        function (days) {
            var _this = this;
            if (days === void 0) { days = []; }
            /** @type {?} */
            var weekDaysSorted = this.sortWeekDays(days);
            return weekDaysSorted.map((/**
             * @param {?} day
             * @return {?}
             */
            function (day) { return _this.getTranslateWeekDay(day); })).join(', ');
        };
        /**
         * @private
         * @param {?} daysOfWeek
         * @param {?} hour
         * @return {?}
         */
        ThfPageJobSchedulerSummaryComponent.prototype.getWeeklyLabelExecution = /**
         * @private
         * @param {?} daysOfWeek
         * @param {?} hour
         * @return {?}
         */
        function (daysOfWeek, hour) {
            if (daysOfWeek && Array.isArray(daysOfWeek)) {
                return this.getWeekDaysLabel(daysOfWeek) + " " + this.getHourLabel(hour);
            }
            else {
                return this.literals.notReported;
            }
        };
        /**
         * @private
         * @param {?=} days
         * @return {?}
         */
        ThfPageJobSchedulerSummaryComponent.prototype.sortWeekDays = /**
         * @private
         * @param {?=} days
         * @return {?}
         */
        function (days) {
            if (days === void 0) { days = []; }
            /** @type {?} */
            var sorterWeekDays = this.getSorterWeekDays();
            return days.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                /** @type {?} */
                var currDay = a.toLowerCase();
                /** @type {?} */
                var nextDay = b.toLowerCase();
                return sorterWeekDays[currDay] > sorterWeekDays[nextDay] ? 1 : -1;
            }));
        };
        ThfPageJobSchedulerSummaryComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-job-scheduler-summary',
                        template: "<div class=\"thf-md-12\">\n  <thf-info\n    [t-label]=\"literals.process\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"value.processID\">\n  </thf-info>\n\n  <thf-info\n    [t-label]=\"literals.periodicity\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"periodicityValue\">\n  </thf-info>\n\n  <thf-info *ngIf=\"value.periodicity !== 'single'\"\n    [t-label]=\"literals.execution\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"executionValue\">\n  </thf-info>\n\n  <thf-info\n    [t-label]=\"literals.recurrent\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"recurrentValue\">\n  </thf-info>\n\n  <thf-info\n    [t-label]=\"literals.firstExecution\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"firstExecutionValue\">\n  </thf-info>\n</div>\n\n<thf-widget *ngIf=\"parameters && parameters.length\"\n  class=\"thf-pt-1 thf-pb-1 thf-md-12\"\n  [t-title]=\"literals.parameters\">\n\n  <thf-dynamic-view\n    [t-fields]=\"parameters\"\n    [t-value]=\"value.executionParameter\">\n  </thf-dynamic-view>\n\n</thf-widget>\n\n"
                    }] }
        ];
        /** @nocollapse */
        ThfPageJobSchedulerSummaryComponent.ctorParameters = function () { return [
            { type: common.DatePipe }
        ]; };
        ThfPageJobSchedulerSummaryComponent.propDecorators = {
            literals: [{ type: core.Input, args: ['t-literals',] }],
            parameters: [{ type: core.Input, args: ['t-parameters',] }],
            value: [{ type: core.Input, args: ['t-value',] }]
        };
        return ThfPageJobSchedulerSummaryComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageJobSchedulerModule = /** @class */ (function () {
        function ThfPageJobSchedulerModule() {
        }
        ThfPageJobSchedulerModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ThfPageJobSchedulerComponent,
                            ThfPageJobSchedulerExecutionComponent,
                            ThfPageJobSchedulerParametersComponent,
                            ThfPageJobSchedulerSummaryComponent
                        ],
                        exports: [
                            ThfPageJobSchedulerComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            thfUi.ThfButtonModule,
                            thfUi.ThfContainerModule,
                            thfUi.ThfDialogModule,
                            thfUi.ThfDividerModule,
                            thfUi.ThfDynamicModule,
                            thfUi.ThfFieldModule,
                            thfUi.ThfInfoModule,
                            thfUi.ThfPageModule,
                            thfUi.ThfStepperModule,
                            thfUi.ThfWidgetModule
                        ],
                        providers: [
                            ThfPageJobSchedulerService,
                            ThfPageJobSchedulerLookupService
                        ]
                    },] }
        ];
        return ThfPageJobSchedulerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var ThfPageLoginAuthenticationType = {
        /** Autenticação Basic */
        Basic: 'Basic',
        /** Autenticação Bearer */
        Bearer: 'Bearer',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var thfPageLoginContentMaxLength = 40;
    /** @type {?} */
    var thfPageLoginLiteralsDefault = {
        en: (/** @type {?} */ ({
            title: 'Welcome',
            loginErrorPattern: 'Invalid Login',
            loginHint: "Your login user was given to you at your first day.\n    If you don't have this information contact support",
            loginPlaceholder: 'Insert your e-mail',
            passwordErrorPattern: 'Invalid Password',
            passwordPlaceholder: 'Insert your password',
            customFieldErrorPattern: 'Invalid value',
            customFieldPlaceholder: 'Please enter a value',
            rememberUser: 'Automatic login',
            rememberUserHint: 'You can disable this option in system configuration',
            submitLabel: 'Enter',
            submittedLabel: 'Loading...',
            forgotPassword: 'Forgot your Password?',
            highlightInfo: '',
            registerUrl: 'New register',
            titlePopover: 'Oops!',
            forgotYourPassword: 'Forgot your password?',
            ifYouTryHarder: 'If you try ',
            attempts: '{0} more time(s) ',
            yourUserWillBeBlocked: 'without success your user will be blocked and you will be left 24 hours without being able to access :(',
            createANewPasswordNow: 'Better create a new password now! You will be able to log into the system right away.',
            iForgotMyPassword: 'I forgot my password'
        })),
        es: (/** @type {?} */ ({
            title: 'Bienvenido',
            loginErrorPattern: 'Login inválido',
            loginHint: "Su usuario ha sido entregado para usted en su primer d\u00EDa.\n    Si no tiene esta informaci\u00F3n, p\u00F3ngase en contacto con el soporte t\u00E9cnico",
            loginPlaceholder: 'Inserte su e-mail',
            passwordErrorPattern: 'Contraseña inválida',
            passwordPlaceholder: 'Inserte su contraseña',
            customFieldErrorPattern: 'Valor no válido.',
            customFieldPlaceholder: 'Por favor introduzca un valor',
            rememberUser: 'Inicio de sesión automáticamente',
            rememberUserHint: 'Puede deshabilitar esta opción en el menú del sistema.',
            submitLabel: 'Entrar',
            submittedLabel: 'Cargando...',
            forgotPassword: 'Olvidaste tu contraseña?',
            highlightInfo: '',
            registerUrl: 'Nuevo registro',
            titlePopover: 'Opa!',
            forgotYourPassword: 'Olvidaste tu contraseña?',
            ifYouTryHarder: 'Si intenta más ',
            attempts: '{0} vez/veces ',
            yourUserWillBeBlocked: 'sin éxito su usuario sera bloqueado y usted vás permanecer 24 horas sin poder acceder a :(',
            createANewPasswordNow: '¡Mejor crear una nueva contraseña ahora! Usted podrá entrar en el sistema inmediatamente después.',
            iForgotMyPassword: 'Olvide mi contraseña'
        })),
        pt: (/** @type {?} */ ({
            title: 'Bem-vindo',
            loginErrorPattern: 'Login inválido',
            loginHint: "Seu usu\u00E1rio foi entregue a voc\u00EA no seu primeiro dia.\n    Caso n\u00E3o tenha mais essa informa\u00E7\u00E3o contacte o suporte",
            loginPlaceholder: 'Insira seu e-mail',
            passwordErrorPattern: 'Senha inválida',
            passwordPlaceholder: 'Insira sua senha',
            customFieldErrorPattern: 'Valor inválido.',
            customFieldPlaceholder: 'Por favor insira um valor',
            rememberUser: 'Logar automaticamente',
            rememberUserHint: 'Você pode desabilitar essa opção no menu do sistema',
            submitLabel: 'Entrar',
            submittedLabel: 'Carregando...',
            forgotPassword: 'Esqueceu sua senha?',
            highlightInfo: '',
            registerUrl: 'Novo registro',
            titlePopover: 'Opa!',
            forgotYourPassword: 'Esqueceu sua senha?',
            ifYouTryHarder: 'Se tentar mais ',
            attempts: '{0} vez(es) ',
            yourUserWillBeBlocked: 'sem sucesso seu usuário será bloqueado e você fica 24 horas sem poder acessar :(',
            createANewPasswordNow: 'Melhor criar uma senha nova agora! Você vai poder entrar no sistema logo em seguida.',
            iForgotMyPassword: 'Esqueci minha senha'
        }))
    };
    /** @type {?} */
    var thfPageLoginLiteralIn = {
        en: 'in',
        es: 'en',
        pt: 'em'
    };
    /** @type {?} */
    var thfPageLoginLiteralTo = {
        en: 'to',
        es: 'al',
        pt: 'ao',
    };
    /**
     * \@description
     *
     * O componente `thf-page-login` é utilizado como template para tela de login.
     * Com ele é possível definirmos valores para usuário, senha e definir ações para recuperação de senha e gravação de dados do usuário.
     * Também é possível inserir uma imagem em conjunto com um texto de destaque.
     *
     *
     * A propriedade `t-authentication-url` automatiza a rotina do componente e simplifica o processo para autenticação do usuário, bastando
     * definir uma url para requisição da autenticação. A flexibilidade e praticidade podem chegar a um nível em que o desenvolvimento
     * da aplicação no *client side* é desprovida de qualquer código-fonte relacionado à rotina de login de usuário.
     * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
     * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
     *
     *
     * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
     * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
     * ```
     *   "assets": [
     *     "src/assets",
     *     "src/favicon.ico",
     *     {
     *       "glob": "**\/*",
     *       "input": "node_modules/\@totvs/thf-theme/images",
     *       "output": "assets/images"
     *     }
     *   ]
     * ```
     * @abstract
     */
    var ThfPageLoginBaseComponent = /** @class */ (function () {
        function ThfPageLoginBaseComponent(loginService, router) {
            this.loginService = loginService;
            this.router = router;
            this.allLoginErrors = [];
            this.allPasswordErrors = [];
            this.containsCustomLiterals = false;
            this.customizedDefaultLiterals = {};
            this.showExceededAttemptsWarning = false;
            this._authenticationType = ThfPageLoginAuthenticationType.Basic;
            this._hideRememberUser = false;
            this._loading = false;
            this._loginErrors = [];
            this._passwordErrors = [];
            this.rememberUser = false;
            /**
             * Evento disparado quando o usuário alterar o input do campo login.
             *
             * Esse evento receberá como parâmetro uma variável do tipo `string` com o texto informado no campo.
             *
             * > Esta propriedade será ignorada se for definido valor para a propriedade `t-authentication-url`.
             */
            this.loginChange = new core.EventEmitter();
            /**
             * Evento disparado ao submeter o formulário de login (apertando `Enter` dentro dos campos ou pressionando o botão de confirmação).
             *
             * Esse evento receberá como parâmetro um objeto do tipo `ThfPageLogin` com os dados informados no formulário.
             *
             * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
             *
             * > Para mais detalhes consulte a documentação sobre a interface `ThfPageLogin` mais abaixo.
             */
            this.loginSubmit = new core.EventEmitter();
            /**
             * Evento disparado quando o usuário alterar o input do campo password.
             *
             * Esse evento receberá como parâmetro uma variável do tipo `string` com o texto informado no campo.
             *
             * > Esta propriedade será ignorada se for definido valor para a propriedade `t-authentication-url`.
             */
            this.passwordChange = new core.EventEmitter();
        }
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "customField", {
            get: /**
             * @return {?}
             */
            function () {
                return this._customField;
            },
            /**
             * @optional
             *
             * @description
             *
             * Ao informar um valor do tipo `string`, o mesmo será aplicado como a chave do campo customizado e utilizará
             * os valores padrões contidos na propriedade `literals` como `customFieldErrorPattern` e `customFieldPlaceholder`.
             *
             * Existe a possibilidade de informar um objeto que segue a definição da interface `ThfPageLoginCustomField`, onde
             * através dos parâmetros enviados pode gerar um `thf-input`, `thf-combo` especificamente para serviços
             * ou `thf-select` para valores fixos.
             *
             * Abaixo seguem os exemplos de cada tipo de campo.
             *
             * `thf-input`:
             *
             * ```
             * {
             *   property: 'domain',
             *   value: 'jv01',
             *   placeholder: 'Enter your domain',
             *   pattern: '[a-z]',
             *   errorPattern: 'Invalid value',
             * }
             * ```
             *
             * `thf-combo`:
             *
             * ```
             * {
             *   property: 'domain',
             *   value: 'jv01',
             *   placeholder: 'Enter your domain',
             *   url: 'https://thf.totvs.com.br/sample/api/comboOption/domains',
             *   fieldValue: 'nickname'
             * }
             * ```
             *
             * `thf-select`:
             *
             * ```
             * {
             *   property: 'domain',
             *   value: 'jv01',
             *   placeholder: 'Enter your domain',
             *   options: [{label: 'Domain 1', value: '1'}, {label: 'Domain 2', value: '2'}]
             * }
             * ```
             *
             * Caso o customField possua options, url e fieldValue preenchidos, será priorizado o thf-select
             * utilizando o options.
             *
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Ao informar um valor do tipo `string`, o mesmo será aplicado como a chave do campo customizado e utilizará
             * os valores padrões contidos na propriedade `literals` como `customFieldErrorPattern` e `customFieldPlaceholder`.
             *
             * Existe a possibilidade de informar um objeto que segue a definição da interface `ThfPageLoginCustomField`, onde
             * através dos parâmetros enviados pode gerar um `thf-input`, `thf-combo` especificamente para serviços
             * ou `thf-select` para valores fixos.
             *
             * Abaixo seguem os exemplos de cada tipo de campo.
             *
             * `thf-input`:
             *
             * ```
             * {
             *   property: 'domain',
             *   value: 'jv01',
             *   placeholder: 'Enter your domain',
             *   pattern: '[a-z]',
             *   errorPattern: 'Invalid value',
             * }
             * ```
             *
             * `thf-combo`:
             *
             * ```
             * {
             *   property: 'domain',
             *   value: 'jv01',
             *   placeholder: 'Enter your domain',
             *   url: 'https://thf.totvs.com.br/sample/api/comboOption/domains',
             *   fieldValue: 'nickname'
             * }
             * ```
             *
             * `thf-select`:
             *
             * ```
             * {
             *   property: 'domain',
             *   value: 'jv01',
             *   placeholder: 'Enter your domain',
             *   options: [{label: 'Domain 1', value: '1'}, {label: 'Domain 2', value: '2'}]
             * }
             * ```
             *
             * Caso o customField possua options, url e fieldValue preenchidos, será priorizado o thf-select
             * utilizando o options.
             *
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value) {
                    if (isTypeof(value, 'string')) {
                        this.customFieldType = 'input';
                        this._customField = value;
                        this.customFieldObject = this.getDefaultCustomFieldObject(value);
                        return;
                    }
                    if (isTypeof(value, 'object') && !Array.isArray(value) && value['property']) {
                        this._customField = value;
                        this.customFieldObject = (/** @type {?} */ (value));
                        if (!this.customFieldObject.options && !this.customFieldObject.url) {
                            this.customFieldType = 'input';
                        }
                        else {
                            this.customFieldType = this.customFieldObject.options ? 'select' : 'combo';
                        }
                        return;
                    }
                }
                this._customField = undefined;
                this.customFieldObject = undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "contactEmail", {
            get: /**
             * @return {?}
             */
            function () {
                return this._contactEmail;
            },
            /**
             * @optional
             *
             * @description
             *
             * Personaliza o e-mail que é exibido na mensagem de dica de login padrão para contato de suporte.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Personaliza o e-mail que é exibido na mensagem de dica de login padrão para contato de suporte.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var language = this.selectedLanguage || browserLanguage();
                this._contactEmail = value;
                this.setLoginHintLiteral(language, value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "productName", {
            get: /**
             * @return {?}
             */
            function () {
                return this._productName;
            },
            /**
             * @optional
             *
             * @description
             *
             * Valor customizado que sucede o título de boas-vindas.
             *
             * > Esta propriedade é sobreposta se `t-literals` contiver uma definição customizada para a literal `title`.
             *
             * > Veja mais sobre as literais na propriedade `t-literals`.
             *
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Valor customizado que sucede o título de boas-vindas.
             *
             * > Esta propriedade é sobreposta se `t-literals` contiver uma definição customizada para a literal `title`.
             *
             * > Veja mais sobre as literais na propriedade `t-literals`.
             *
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var language = this.selectedLanguage || browserLanguage();
                this._productName = value;
                this.setTitleLiteral(language, value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "environment", {
            get: /**
             * @return {?}
             */
            function () {
                return this._environment;
            },
            /**
             * @optional
             *
             * @description
             * Adiciona uma `tag` abaixo do título que especifica o ambiente que o usuário está fazendo o login.
             *
             * > Essa propriedade limita o texto em 40 caracteres.
             */
            set: /**
             * \@optional
             *
             * \@description
             * Adiciona uma `tag` abaixo do título que especifica o ambiente que o usuário está fazendo o login.
             *
             * > Essa propriedade limita o texto em 40 caracteres.
             * @param {?} environment
             * @return {?}
             */
            function (environment) {
                if (environment && environment.length > thfPageLoginContentMaxLength) {
                    this._environment = environment.substring(0, thfPageLoginContentMaxLength);
                }
                else {
                    this._environment = environment;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "exceededAttemptsWarning", {
            get: /**
             * @return {?}
             */
            function () {
                return this._exceededAttemptsWarning;
            },
            /**
             * @optional
             *
             * @description
             * Exibe um aviso de bloqueio de acordo com a quantidade restante de tentativas.
             * O aviso será exibido somente se a quantidade for maior que zero.
             *
             * > Caso tenha algum valor atribuído para o atributo `t-authentication-url` e o retorno da requisição estiver atribuindo valor
             * para o `t-exceeded-attempts-warning`, o valor considerado será o do retorno da requisição.
             *
             * @default `0`
             */
            set: /**
             * \@optional
             *
             * \@description
             * Exibe um aviso de bloqueio de acordo com a quantidade restante de tentativas.
             * O aviso será exibido somente se a quantidade for maior que zero.
             *
             * > Caso tenha algum valor atribuído para o atributo `t-authentication-url` e o retorno da requisição estiver atribuindo valor
             * para o `t-exceeded-attempts-warning`, o valor considerado será o do retorno da requisição.
             *
             * \@default `0`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._exceededAttemptsWarning = convertToInt(value);
                this.showExceededAttemptsWarning = this.exceededAttemptsWarning > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "hideRememberUser", {
            get: /**
             * @return {?}
             */
            function () {
                return this._hideRememberUser;
            },
            /**
             * @optional
             *
             * @description
             *
             * Esconde a função "Lembrar usuário" do formulário de login.
             *
             * Quando essa propriedade é setada com `true` a propriedade `rememberUser` enviada no evento `t-login-submit` será sempre
             * `false`.
             *
             * > Veja a propriedade `t-literals` para customizar a literal `rememberUser`.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Esconde a função "Lembrar usuário" do formulário de login.
             *
             * Quando essa propriedade é setada com `true` a propriedade `rememberUser` enviada no evento `t-login-submit` será sempre
             * `false`.
             *
             * > Veja a propriedade `t-literals` para customizar a literal `rememberUser`.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._hideRememberUser = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
                if (this._hideRememberUser) {
                    this.rememberUser = false;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "literals", {
            get: /**
             * @return {?}
             */
            function () {
                return this._literals || thfPageLoginLiteralsDefault[browserLanguage()];
            },
            /**
             * @optional
             *
             * @description
             *
             * Objeto com as literais usadas no `thf-page-login`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfPageLoginLiterals = {
             *    title: 'Seja bem-vindo',
             *    loginErrorPattern: 'Login obrigatório',
             *    loginHint: 'Caso não possua usuário entre em contato com o suporte',
             *    loginLabel: 'Insira seu usuário',
             *    loginPlaceholder: 'Insira seu usuário de acesso',
             *    passwordErrorPattern: 'Senha obrigatória',
             *    passwordLabel: 'Insira sua senha',
             *    passwordPlaceholder: 'Insira sua senha de acesso'
             *    customFieldErrorPattern: 'Campo customizado inválido',
             *    customFieldPlaceholder: 'Por favor insira um valor',
             *    rememberUser: 'Lembrar usuário',
             *    rememberUserHint: 'Esta opção pode ser desabilitada nas configurações do sistema',
             *    submitLabel: 'Acessar sistema',
             *    forgotPassword: 'Esqueceu sua senha?'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfPageLoginLiterals = {
             *    loginPlaceholder: 'Insira seu usuário de acesso',
             *    passwordPlaceholder: 'Insira sua senha de acesso',
             *    submitLabel: 'Acessar sistema'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-page-login
             *   [t-literals]="customLiterals">
             * </thf-page-login>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             *  > É também possível alternar o objeto padrão de literais através do seletor de idiomas localizado na parte inferior do template.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Objeto com as literais usadas no `thf-page-login`.
             *
             * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
             *
             * ```
             *  const customLiterals: ThfPageLoginLiterals = {
             *    title: 'Seja bem-vindo',
             *    loginErrorPattern: 'Login obrigatório',
             *    loginHint: 'Caso não possua usuário entre em contato com o suporte',
             *    loginLabel: 'Insira seu usuário',
             *    loginPlaceholder: 'Insira seu usuário de acesso',
             *    passwordErrorPattern: 'Senha obrigatória',
             *    passwordLabel: 'Insira sua senha',
             *    passwordPlaceholder: 'Insira sua senha de acesso'
             *    customFieldErrorPattern: 'Campo customizado inválido',
             *    customFieldPlaceholder: 'Por favor insira um valor',
             *    rememberUser: 'Lembrar usuário',
             *    rememberUserHint: 'Esta opção pode ser desabilitada nas configurações do sistema',
             *    submitLabel: 'Acessar sistema',
             *    forgotPassword: 'Esqueceu sua senha?'
             *  };
             * ```
             *
             * Ou passando apenas as literais que deseja customizar:
             *
             * ```
             *  const customLiterals: ThfPageLoginLiterals = {
             *    loginPlaceholder: 'Insira seu usuário de acesso',
             *    passwordPlaceholder: 'Insira sua senha de acesso',
             *    submitLabel: 'Acessar sistema'
             *  };
             * ```
             *
             * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
             *
             * ```
             * <thf-page-login
             *   [t-literals]="customLiterals">
             * </thf-page-login>
             * ```
             *
             *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
             *  > É também possível alternar o objeto padrão de literais através do seletor de idiomas localizado na parte inferior do template.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var language = this.selectedLanguage || browserLanguage();
                if (value) {
                    this.getLiterals(language, value);
                    this.containsCustomLiterals =
                        !this.literals.title.includes(thfPageLoginLiteralsDefault[language].title) ||
                            !this.literals.loginHint.includes(thfPageLoginLiteralsDefault[language].loginHint);
                }
                else {
                    this.containsCustomLiterals = false;
                    this._literals = thfPageLoginLiteralsDefault[language];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "loading", {
            get: /**
             * @return {?}
             */
            function () {
                return this._loading;
            },
            /**
             * @optional
             *
             * @description
             *
             * Habilita um estado de carregamento ao botão de *login*.
             *
             * > É necessário atribuir `true` à esta propriedade na função definida em `t-login-submit`.
             *
             * @default `false`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Habilita um estado de carregamento ao botão de *login*.
             *
             * > É necessário atribuir `true` à esta propriedade na função definida em `t-login-submit`.
             *
             * \@default `false`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._loading = convertToBoolean(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "login", {
            get: /**
             * @return {?}
             */
            function () {
                return this._login;
            },
            /**
             * @optional
             *
             * @description
             *
             * Valor do modelo do campo de login.
             *
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Valor do modelo do campo de login.
             *
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._login = value;
                if (!this.authenticationUrl) {
                    this.loginChange.emit(this._login);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "loginErrors", {
            get: /**
             * @return {?}
             */
            function () {
                return this._loginErrors;
            },
            /**
             * @optional
             *
             * @description
             *
             * Atributo que recebe uma lista de erros e exibe abaixo do campo de login.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Atributo que recebe uma lista de erros e exibe abaixo do campo de login.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._loginErrors = value || [];
                this.setLoginErrors(this._loginErrors);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "passwordErrors", {
            get: /**
             * @return {?}
             */
            function () {
                return this._passwordErrors;
            },
            /**
             * @optional
             *
             * @description
             *
             * Atributo que recebe uma lista de erros e exibe abaixo do campo de password.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Atributo que recebe uma lista de erros e exibe abaixo do campo de password.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._passwordErrors = value || [];
                this.setPasswordErrors(this._passwordErrors);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "recovery", {
            get: /**
             * @return {?}
             */
            function () {
                return this._recovery;
            },
            /**
             * @optional
             *
             * @description
             *
             * Exibe um link abaixo do formulário de login para que os usuários da aplicação façam a recuperação dos dados de autenticação.
             *
             * A propriedade aceita os seguintes tipos:
             *
             * - **String**: informe uma url externa ou uma rota válida;
             * - **Function**: pode-se customizar a ação. Para esta possilidade basta atribuir:
             * ```
             * <thf-page-login>
             *   [recovery]="this.funcaominha.bind(this)";
             * </thf-page-login>
             * ```
             *
             * - **ThfPageLoginRecovery**: cria-se vínculo automático com o template **thf-modal-password-recovery**.
             *   O objeto deve conter a **url** para requisição dos recursos e pode-se definir o **tipo** de modal para recuperação de senha,
             *   **email** para contato e **máscara** do campo de telefone.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Exibe um link abaixo do formulário de login para que os usuários da aplicação façam a recuperação dos dados de autenticação.
             *
             * A propriedade aceita os seguintes tipos:
             *
             * - **String**: informe uma url externa ou uma rota válida;
             * - **Function**: pode-se customizar a ação. Para esta possilidade basta atribuir:
             * ```
             * <thf-page-login>
             *   [recovery]="this.funcaominha.bind(this)";
             * </thf-page-login>
             * ```
             *
             * - **ThfPageLoginRecovery**: cria-se vínculo automático com o template **thf-modal-password-recovery**.
             *   O objeto deve conter a **url** para requisição dos recursos e pode-se definir o **tipo** de modal para recuperação de senha,
             *   **email** para contato e **máscara** do campo de telefone.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._recovery = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "registerUrl", {
            get: /**
             * @return {?}
             */
            function () {
                return this._registerUrl;
            },
            /**
             * @optional
             *
             * @description
             *
             * Caso a aplicação tenha um link para novos cadastros, informe uma url externa ou uma rota válida, dessa
             * forma será exibido um link abaixo do formulário de login para os usuários da aplicação.
             *
             * Exemplos de valores válidos:
             * - **local**: `/home`
             * - **url externa**: `https://thf.totvs.com.br`
             *
             * > Veja a propriedade `t-literals` para customizar a literal `registerUrl`.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Caso a aplicação tenha um link para novos cadastros, informe uma url externa ou uma rota válida, dessa
             * forma será exibido um link abaixo do formulário de login para os usuários da aplicação.
             *
             * Exemplos de valores válidos:
             * - **local**: `/home`
             * - **url externa**: `https://thf.totvs.com.br`
             *
             * > Veja a propriedade `t-literals` para customizar a literal `registerUrl`.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._registerUrl = isTypeof(value, 'string') ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "authenticationType", {
            get: /**
             * @return {?}
             */
            function () {
                return this._authenticationType;
            },
            /**
             * @optional
             *
             * @description
             *
             * Atributo que recebe o tipo de esquema da autenticação, sendo suportados apenas os valores `Basic` e `Bearer`.
             *
             * > Caso o tipo definido seja `Basic`, o componente fará uma requisição `POST` contendo:
             *
             * ```
             * headers {
             *  Authorization: Basic base64(login:password)
             * }
             *
             * body {
             *  rememberUser: rememberUser
             * }
             * ```
             *
             * > Caso o tipo definido seja `Bearer`, o componente fará uma requisição `POST` contendo:
             *
             * ```
             * body {
             *  login: login,
             *  password: base64(password)
             *  rememberUser: rememberUser
             * }
             * ```
             *
             * @default `ThfPageLoginAuthenticationType.Basic`
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Atributo que recebe o tipo de esquema da autenticação, sendo suportados apenas os valores `Basic` e `Bearer`.
             *
             * > Caso o tipo definido seja `Basic`, o componente fará uma requisição `POST` contendo:
             *
             * ```
             * headers {
             *  Authorization: Basic base64(login:password)
             * }
             *
             * body {
             *  rememberUser: rememberUser
             * }
             * ```
             *
             * > Caso o tipo definido seja `Bearer`, o componente fará uma requisição `POST` contendo:
             *
             * ```
             * body {
             *  login: login,
             *  password: base64(password)
             *  rememberUser: rememberUser
             * }
             * ```
             *
             * \@default `ThfPageLoginAuthenticationType.Basic`
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._authenticationType =
                    ((/** @type {?} */ (Object))).values(ThfPageLoginAuthenticationType).includes(value) ? value : ThfPageLoginAuthenticationType.Basic;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "authenticationUrl", {
            get: /**
             * @return {?}
             */
            function () {
                return this._authenticationUrl;
            },
            /**
             * @optional
             *
             * @description
             *
             * Endpoint usado pelo template para requisição do recurso. Quando preenchido, o método `t-login-submit` será ignorado e o
             * componente adquirirá automatização para o processo de autenticação.
             *
             * ### Processos
             * Ao digitar um valor válido no campo de login/password e pressionar **Enter**, o componente fará uma requisição `POST`
             * na url especificada nesta propriedade passando o objeto contendo o valor definido pelo usuário:
             *
             * ```
             * headers {
             *  Authorization: Basic base64(login:password)
             * }
             *
             * body {
             *  rememberUser: rememberUser
             * }
             * ```
             *
             * Em caso de **sucesso**, o objeto de retorno é armazenado no `sessionStorage` e o usuário é redirecionado para a página inicial da
             * aplicação `/`.
             *
             * ```
             * 200:
             *  {
             *    user: user
             *  }
             * ```
             *
             * Em caso de **erro** na autenticação, espera-se o seguinte retorno:
             *
             * ```
             * 400/401
             *  {
             *    code: 400/401,
             *    message: message,
             *    detailedMessage: detailedMessage,
             *    helpUrl?: helpUrl
             *  }
             * ```
             *
             * > Pode-se atribuir uma quantidade máxima de tentativas restantes (maxAttemptsRemaining) para o atributo `t-exceeded-attempts-warning`,
             * assim como os avisos relacionados aos campos login e password (loginWarnings, passwordWarnings) para os atributos `t-login-errors` e
             * `t-password-errors` conforme retorno abaixo:
             *
             * ```
             * 400
             *  {
             *    code: 400/401,
             *    message: message,
             *    detailedMessage: detailedMessage,
             *    helpUrl?: helpUrl,
             *    maxAttemptsRemaining?: maxAttemptsRemaining,
             *    loginWarnings?: [loginWarnings],
             *    passwordWarnings?: [passwordWarnings],
             *  }
             * ```
             *
             * > Caso o valor atribuído para `t-exceeded-attempts-warning` seja igual a 0(zero), poderá ser passado um valor para o
             * atributo `t-blocked-url` e o usuário será redirecionado para uma tela de bloqueio.
             *
             * *Processo finalizado.*
             *
             * _______________
             *
             * #### Praticidade
             * As informações do serviço de autenticação também podem ser transmitidas diretamente pelas configuraçãos de rota e, desta maneira,
             * dispensa-se qualquer menção e/ou importação do componente `thf-page-login` no restante da aplicação. O exemplo abaixo exemplifica
             * a forma dinâmica com a qual o template de tela de login pode ser gerado ao navegar para rota `/login`, e também como ele se comunica
             * com o serviço para efetuação do processo de autenticação do usuário e solicitação de nova senha.
             * Basta definir nas configurações de rota:
             *
             *
             * ```
             *   import { ThfPageLoginComponent, ThfPageLoginAthenticationType } from '@totvs/thf-templates';
             *
             *   ...
             *   const routes: Routes = [
             *     {
             *       path: 'login', component: ThfPageLoginComponent, data: {
             *         serviceApi: 'https://thf.totvs.com.br/sample/api/users/authentication',
             *         environment: 'development',
             *         recovery: {
             *           url: 'https://thf.totvs.com.br/sample/api/users',
             *           type: ThfModalPasswordRecoveryType.All,
             *           contactMail: 'dev.totvs@totvs.com',
             *           phoneMask: '9-999-999-9999'
             *         },
             *         registerUrl: '/new-password',
             *         authenticationType: ThfPageLoginAthenticationType.Basic
             *       }
             *     }
             *     ...
             *   ];
             *
             *   @NgModule({
             *     imports: [RouterModule.forRoot(routes)],
             *     exports: [RouterModule]
             *   })
             *   export class AppRoutingModule { }
             * ```
             *
             *
             * O metadado `serviceApi` deve ser a **url** para requisição dos recursos de autenticação, o `environment` alimenta a propriedade
             * `t-environment`, `recovery` é a interface `ThfPageLoginRecovery` responsável pelas especificações contidas na modal de recuperação de
             * senha, `registerUrl` alimenta a propriedade `t-register-url` e `authenticationType` que define a propriedade `t-authentication-type`.
             *
             * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.
             *
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Endpoint usado pelo template para requisição do recurso. Quando preenchido, o método `t-login-submit` será ignorado e o
             * componente adquirirá automatização para o processo de autenticação.
             *
             * ### Processos
             * Ao digitar um valor válido no campo de login/password e pressionar **Enter**, o componente fará uma requisição `POST`
             * na url especificada nesta propriedade passando o objeto contendo o valor definido pelo usuário:
             *
             * ```
             * headers {
             *  Authorization: Basic base64(login:password)
             * }
             *
             * body {
             *  rememberUser: rememberUser
             * }
             * ```
             *
             * Em caso de **sucesso**, o objeto de retorno é armazenado no `sessionStorage` e o usuário é redirecionado para a página inicial da
             * aplicação `/`.
             *
             * ```
             * 200:
             *  {
             *    user: user
             *  }
             * ```
             *
             * Em caso de **erro** na autenticação, espera-se o seguinte retorno:
             *
             * ```
             * 400/401
             *  {
             *    code: 400/401,
             *    message: message,
             *    detailedMessage: detailedMessage,
             *    helpUrl?: helpUrl
             *  }
             * ```
             *
             * > Pode-se atribuir uma quantidade máxima de tentativas restantes (maxAttemptsRemaining) para o atributo `t-exceeded-attempts-warning`,
             * assim como os avisos relacionados aos campos login e password (loginWarnings, passwordWarnings) para os atributos `t-login-errors` e
             * `t-password-errors` conforme retorno abaixo:
             *
             * ```
             * 400
             *  {
             *    code: 400/401,
             *    message: message,
             *    detailedMessage: detailedMessage,
             *    helpUrl?: helpUrl,
             *    maxAttemptsRemaining?: maxAttemptsRemaining,
             *    loginWarnings?: [loginWarnings],
             *    passwordWarnings?: [passwordWarnings],
             *  }
             * ```
             *
             * > Caso o valor atribuído para `t-exceeded-attempts-warning` seja igual a 0(zero), poderá ser passado um valor para o
             * atributo `t-blocked-url` e o usuário será redirecionado para uma tela de bloqueio.
             *
             * *Processo finalizado.*
             *
             * _______________
             *
             * #### Praticidade
             * As informações do serviço de autenticação também podem ser transmitidas diretamente pelas configuraçãos de rota e, desta maneira,
             * dispensa-se qualquer menção e/ou importação do componente `thf-page-login` no restante da aplicação. O exemplo abaixo exemplifica
             * a forma dinâmica com a qual o template de tela de login pode ser gerado ao navegar para rota `/login`, e também como ele se comunica
             * com o serviço para efetuação do processo de autenticação do usuário e solicitação de nova senha.
             * Basta definir nas configurações de rota:
             *
             *
             * ```
             *   import { ThfPageLoginComponent, ThfPageLoginAthenticationType } from '\@totvs/thf-templates';
             *
             *   ...
             *   const routes: Routes = [
             *     {
             *       path: 'login', component: ThfPageLoginComponent, data: {
             *         serviceApi: 'https://thf.totvs.com.br/sample/api/users/authentication',
             *         environment: 'development',
             *         recovery: {
             *           url: 'https://thf.totvs.com.br/sample/api/users',
             *           type: ThfModalPasswordRecoveryType.All,
             *           contactMail: 'dev.totvs\@totvs.com',
             *           phoneMask: '9-999-999-9999'
             *         },
             *         registerUrl: '/new-password',
             *         authenticationType: ThfPageLoginAthenticationType.Basic
             *       }
             *     }
             *     ...
             *   ];
             *
             * \@NgModule({
             *     imports: [RouterModule.forRoot(routes)],
             *     exports: [RouterModule]
             *   })
             *   export class AppRoutingModule { }
             * ```
             *
             *
             * O metadado `serviceApi` deve ser a **url** para requisição dos recursos de autenticação, o `environment` alimenta a propriedade
             * `t-environment`, `recovery` é a interface `ThfPageLoginRecovery` responsável pelas especificações contidas na modal de recuperação de
             * senha, `registerUrl` alimenta a propriedade `t-register-url` e `authenticationType` que define a propriedade `t-authentication-type`.
             *
             * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.
             *
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._authenticationUrl = isTypeof(value, 'string') ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginBaseComponent.prototype, "blockedUrl", {
            get: /**
             * @return {?}
             */
            function () {
                return this._blockedUrl;
            },
            /**
             * @optional
             *
             * @description
             *
             * Caso o valor atribuído para `t-exceeded-attempts-warning` seja igual a 0(zero) e a aplicação tenha um link de bloqueio de usuário,
             * informe uma url externa ou uma rota válida, dessa forma em caso de bloqueio o usuário será redirecionado.
             */
            set: /**
             * \@optional
             *
             * \@description
             *
             * Caso o valor atribuído para `t-exceeded-attempts-warning` seja igual a 0(zero) e a aplicação tenha um link de bloqueio de usuário,
             * informe uma url externa ou uma rota válida, dessa forma em caso de bloqueio o usuário será redirecionado.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._blockedUrl = isTypeof(value, 'string') ? value : undefined;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfPageLoginBaseComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.loginSubscription) {
                this.loginSubscription.unsubscribe();
            }
        };
        /**
         * @return {?}
         */
        ThfPageLoginBaseComponent.prototype.closePopover = /**
         * @return {?}
         */
        function () {
            this.showExceededAttemptsWarning = false;
        };
        /**
         * @param {?=} language
         * @param {?=} value
         * @return {?}
         */
        ThfPageLoginBaseComponent.prototype.getLiterals = /**
         * @param {?=} language
         * @param {?=} value
         * @return {?}
         */
        function (language, value) {
            language = language || browserLanguage();
            if (value instanceof Object && !(value instanceof Array)) {
                this.customizedDefaultLiterals = __assign({}, this.customizedDefaultLiterals, value);
                this._literals = __assign({}, thfPageLoginLiteralsDefault[thfLocaleDefault], thfPageLoginLiteralsDefault[language], this.customizedDefaultLiterals, value);
            }
            else {
                this.containsCustomLiterals = false;
                this._literals = thfPageLoginLiteralsDefault[language];
            }
        };
        /**
         * @return {?}
         */
        ThfPageLoginBaseComponent.prototype.onLoginSubmit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var loginForm = {
                login: this.login,
                password: this.password,
                rememberUser: this.rememberUser
            };
            if (this.customField) {
                loginForm[this.customFieldObject.property] = this.customFieldObject.value;
            }
            if (this.authenticationUrl) {
                this.loginSubscription =
                    this.loginService.onLogin(this.authenticationUrl, this.authenticationType, loginForm)
                        .subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        _this.setValuesToProperties();
                        sessionStorage.setItem('THF_USER_LOGIN', JSON.stringify(data));
                        _this.openInternalLink('/');
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        if (error.error.code === '400' || error.error.code === '401') {
                            _this.setValuesToProperties(error);
                            _this.redirectBlockedUrl(_this.exceededAttemptsWarning, _this.blockedUrl);
                        }
                    }));
            }
            else {
                this.loginSubmit.emit(loginForm);
                this.showExceededAttemptsWarning = this.exceededAttemptsWarning > 0;
            }
        };
        /**
         * @param {?} language
         * @param {?} value
         * @return {?}
         */
        ThfPageLoginBaseComponent.prototype.setLoginHintLiteral = /**
         * @param {?} language
         * @param {?} value
         * @return {?}
         */
        function (language, value) {
            /** @type {?} */
            var defaultLoginHintLiteral = thfPageLoginLiteralsDefault[language].loginHint;
            /** @type {?} */
            var prepositionLiteral = thfPageLoginLiteralIn[language];
            if (value) {
                this.concatenateLiteral(value, 'loginHint', defaultLoginHintLiteral, prepositionLiteral);
            }
            else if (!value) {
                this.literals = { loginHint: defaultLoginHintLiteral };
            }
        };
        /**
         * @param {?} language
         * @param {?} value
         * @return {?}
         */
        ThfPageLoginBaseComponent.prototype.setTitleLiteral = /**
         * @param {?} language
         * @param {?} value
         * @return {?}
         */
        function (language, value) {
            /** @type {?} */
            var defaultTitleLiteral = thfPageLoginLiteralsDefault[language].title;
            /** @type {?} */
            var prepositionLiteral = thfPageLoginLiteralTo[language];
            if (value) {
                this.concatenateLiteral(value, 'title', defaultTitleLiteral, prepositionLiteral);
            }
            else if (!value && this.literals.title.includes(defaultTitleLiteral)) {
                this.literals = { title: defaultTitleLiteral };
            }
        };
        /**
         * @private
         * @param {?} defaultLiteral
         * @param {?} prefixLiteral
         * @param {?} value
         * @return {?}
         */
        ThfPageLoginBaseComponent.prototype.concatenate = /**
         * @private
         * @param {?} defaultLiteral
         * @param {?} prefixLiteral
         * @param {?} value
         * @return {?}
         */
        function (defaultLiteral, prefixLiteral, value) {
            return defaultLiteral + " " + prefixLiteral + " " + value;
        };
        /**
         * @private
         * @param {?} value
         * @param {?} literal
         * @param {?} defaultLiteral
         * @param {?} prepositionLiteral
         * @return {?}
         */
        ThfPageLoginBaseComponent.prototype.concatenateLiteral = /**
         * @private
         * @param {?} value
         * @param {?} literal
         * @param {?} defaultLiteral
         * @param {?} prepositionLiteral
         * @return {?}
         */
        function (value, literal, defaultLiteral, prepositionLiteral) {
            var _a;
            if (value && this.literals[literal].includes(defaultLiteral) || this.literals[literal].includes(value)) {
                this.literals = (_a = {},
                    _a[literal] = this.concatenate(defaultLiteral, prepositionLiteral, value),
                    _a);
            }
        };
        /**
         * @private
         * @param {?} property
         * @return {?}
         */
        ThfPageLoginBaseComponent.prototype.getDefaultCustomFieldObject = /**
         * @private
         * @param {?} property
         * @return {?}
         */
        function (property) {
            return { property: property };
        };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        ThfPageLoginBaseComponent.prototype.openExternalLink = /**
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            window.open(url, '_blank');
        };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        ThfPageLoginBaseComponent.prototype.openInternalLink = /**
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            this.router.navigate([url]);
        };
        /**
         * @private
         * @param {?} attempts
         * @param {?} blockedUrl
         * @return {?}
         */
        ThfPageLoginBaseComponent.prototype.redirectBlockedUrl = /**
         * @private
         * @param {?} attempts
         * @param {?} blockedUrl
         * @return {?}
         */
        function (attempts, blockedUrl) {
            if (attempts === 0 && blockedUrl) {
                this.showExceededAttemptsWarning = false;
                isExternalLink(blockedUrl) ? this.openExternalLink(blockedUrl) : this.openInternalLink(blockedUrl);
            }
        };
        /**
         * @private
         * @param {?=} result
         * @return {?}
         */
        ThfPageLoginBaseComponent.prototype.setValuesToProperties = /**
         * @private
         * @param {?=} result
         * @return {?}
         */
        function (result) {
            if (result) {
                this.exceededAttemptsWarning = result.error.maxAttemptsRemaining;
                this.loginErrors = result.error.loginWarnings;
                this.passwordErrors = result.error.passwordWarnings;
                this.blockedUrl = result.error.blockedUrl;
            }
            else {
                this.exceededAttemptsWarning = 0;
                this.loginErrors = [];
                this.passwordErrors = [];
                this.blockedUrl = '';
            }
        };
        ThfPageLoginBaseComponent.propDecorators = {
            customField: [{ type: core.Input, args: ['t-custom-field',] }],
            background: [{ type: core.Input, args: ['t-background',] }],
            contactEmail: [{ type: core.Input, args: ['t-contact-email',] }],
            productName: [{ type: core.Input, args: ['t-product-name',] }],
            environment: [{ type: core.Input, args: ['t-environment',] }],
            exceededAttemptsWarning: [{ type: core.Input, args: ['t-exceeded-attempts-warning',] }],
            hideRememberUser: [{ type: core.Input, args: ['t-hide-remember-user',] }],
            literals: [{ type: core.Input, args: ['t-literals',] }],
            loading: [{ type: core.Input, args: ['t-loading',] }],
            login: [{ type: core.Input, args: ['t-login',] }],
            logo: [{ type: core.Input, args: ['t-logo',] }],
            loginPattern: [{ type: core.Input, args: ['t-login-pattern',] }],
            loginErrors: [{ type: core.Input, args: ['t-login-errors',] }],
            passwordErrors: [{ type: core.Input, args: ['t-password-errors',] }],
            passwordPattern: [{ type: core.Input, args: ['t-password-pattern',] }],
            recovery: [{ type: core.Input, args: ['t-recovery',] }],
            registerUrl: [{ type: core.Input, args: ['t-register-url',] }],
            secondaryLogo: [{ type: core.Input, args: ['t-secondary-logo',] }],
            authenticationType: [{ type: core.Input, args: ['t-authentication-type',] }],
            authenticationUrl: [{ type: core.Input, args: ['t-authentication-url',] }],
            blockedUrl: [{ type: core.Input, args: ['t-blocked-url',] }],
            loginChange: [{ type: core.Output, args: ['t-login-change',] }],
            loginSubmit: [{ type: core.Output, args: ['t-login-submit',] }],
            passwordChange: [{ type: core.Output, args: ['t-password-change',] }]
        };
        return ThfPageLoginBaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageLoginService = /** @class */ (function () {
        function ThfPageLoginService(http) {
            this.http = http;
        }
        /**
         * @param {?} url
         * @param {?} type
         * @param {?} loginForm
         * @return {?}
         */
        ThfPageLoginService.prototype.onLogin = /**
         * @param {?} url
         * @param {?} type
         * @param {?} loginForm
         * @return {?}
         */
        function (url, type, loginForm) {
            if (type === ThfPageLoginAuthenticationType.Bearer) {
                loginForm.password = btoa(loginForm.password);
                return this.http.post(url, loginForm);
            }
            else {
                /** @type {?} */
                var user = "(" + loginForm.login + ":" + loginForm.password + ")";
                /** @type {?} */
                var headers = new http.HttpHeaders({
                    'Authorization': type + " " + btoa(user)
                });
                delete loginForm.login;
                delete loginForm.password;
                return this.http.post(url, loginForm, { headers: headers });
            }
        };
        ThfPageLoginService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ThfPageLoginService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return ThfPageLoginService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docsExtends ThfPageLoginBaseComponent
     *
     * \@example
     *
     * <example name="thf-page-login-basic" title="Totvs Page Login Basic">
     *  <file name="sample-thf-page-login-basic/sample-thf-page-login-basic.component.html"> </file>
     *  <file name="sample-thf-page-login-basic/sample-thf-page-login-basic.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-login-labs" title="Totvs Page Login Labs">
     *  <file name="sample-thf-page-login-labs/sample-thf-page-login-labs.component.html"> </file>
     *  <file name="sample-thf-page-login-labs/sample-thf-page-login-labs.component.ts"> </file>
     * </example>
     *
     * <example name="thf-page-login-human-resources" title="Totvs Page Login - Human Resources">
     *  <file name="sample-thf-page-login-human-resources/sample-thf-page-login-human-resources.component.html"> </file>
     *  <file name="sample-thf-page-login-human-resources/sample-thf-page-login-human-resources.component.ts"> </file>
     *  <file name="sample-thf-page-login-human-resources/sample-thf-page-login-human-resources.module.ts"> </file>
     * </example>
     *
     * <example name="thf-page-login-automatic-service" title="Totvs Page Login - Automatic Service">
     *  <file name="sample-thf-page-login-automatic-service/sample-thf-page-login-automatic-service.component.html"> </file>
     *  <file name="sample-thf-page-login-automatic-service/sample-thf-page-login-automatic-service.component.ts"> </file>
     * </example>
     */
    var ThfPageLoginComponent = /** @class */ (function (_super) {
        __extends(ThfPageLoginComponent, _super);
        function ThfPageLoginComponent(changeDetector, activatedRoute, thfComponentInjector, differs, loginService, router) {
            var _this = _super.call(this, loginService, router) || this;
            _this.changeDetector = changeDetector;
            _this.activatedRoute = activatedRoute;
            _this.thfComponentInjector = thfComponentInjector;
            _this.componentRef = null;
            _this.customPasswordError = { custom: false };
            _this.differ = differs.find([]).create(null);
            return _this;
        }
        /**
         * @return {?}
         */
        ThfPageLoginComponent.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
        function () {
            if (this.differ) {
                this.validateArrayChanges(this.differ, [
                    { array: this.loginErrors, callback: this.generateLoginError.bind(this) },
                    { array: this.passwordErrors, callback: this.generatePasswordError.bind(this) }
                ]);
            }
        };
        /**
         * @return {?}
         */
        ThfPageLoginComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.checkingForRouteMetadata(this.activatedRoute.snapshot.data);
        };
        /**
         * @return {?}
         */
        ThfPageLoginComponent.prototype.changeLoginModel = /**
         * @return {?}
         */
        function () {
            if (this.authenticationUrl) {
                this.loginErrors = [];
            }
            else {
                this.setLoginErrors(this.loginErrors);
                this.loginChange.emit(this.login);
            }
        };
        /**
         * @return {?}
         */
        ThfPageLoginComponent.prototype.changePasswordModel = /**
         * @return {?}
         */
        function () {
            if (this.authenticationUrl) {
                this.passwordErrors = [];
            }
            else {
                this.setPasswordErrors(this.passwordErrors);
                this.passwordChange.emit(this.password);
            }
        };
        /**
         * @private
         * @param {?} object
         * @param {?} property
         * @return {?}
         */
        ThfPageLoginComponent.prototype.checkingForMetadataProperty = /**
         * @private
         * @param {?} object
         * @param {?} property
         * @return {?}
         */
        function (object, property) {
            if (Object.prototype.hasOwnProperty.call(object, property)) {
                return object[property];
            }
        };
        /**
         * @private
         * @param {?} data
         * @return {?}
         */
        ThfPageLoginComponent.prototype.checkingForRouteMetadata = /**
         * @private
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (Object.keys(data).length !== 0) {
                this.authenticationUrl = this.checkingForMetadataProperty(data, 'serviceApi') || this.authenticationUrl;
                this.authenticationType = this.checkingForMetadataProperty(data, 'authenticationType') || this.authenticationType;
                this.environment = this.checkingForMetadataProperty(data, 'environment') || this.environment;
                this.recovery = this.checkingForMetadataProperty(data, 'recovery') || this.recovery;
                this.registerUrl = this.checkingForMetadataProperty(data, 'registerUrl') || this.registerUrl;
            }
        };
        /**
         * @private
         * @param {?} thfPageLoginRecovery
         * @return {?}
         */
        ThfPageLoginComponent.prototype.createModalPasswordRecoveryComponent = /**
         * @private
         * @param {?} thfPageLoginRecovery
         * @return {?}
         */
        function (thfPageLoginRecovery) {
            var _this = this;
            if (this.componentRef) {
                this.thfComponentInjector.destroyComponentInApplication(this.componentRef);
            }
            this.componentRef = this.thfComponentInjector.createComponentInApplication(ThfModalPasswordRecoveryComponent);
            this.componentRef.instance.urlRecovery = thfPageLoginRecovery.url;
            this.componentRef.instance.contactEmail = thfPageLoginRecovery.contactMail;
            this.componentRef.instance.phoneMask = thfPageLoginRecovery.phoneMask;
            this.componentRef.instance.type = thfPageLoginRecovery.type || ThfModalPasswordRecoveryType.Email;
            this.componentRef.changeDetectorRef.detectChanges();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.componentRef.instance.open();
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageLoginComponent.prototype.generateLoginError = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.loginErrors && this.loginErrors.length) {
                this.setLoginErrors(this.loginErrors);
            }
            else {
                /** @type {?} */
                var control = this.loginForm.form.controls['login'];
                if (control) {
                    this.resetControl(control);
                }
            }
        };
        /**
         * @private
         * @return {?}
         */
        ThfPageLoginComponent.prototype.generatePasswordError = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.passwordErrors && this.passwordErrors.length) {
                this.setPasswordErrors(this.passwordErrors);
            }
            else {
                /** @type {?} */
                var control = this.loginForm.form.controls['password'];
                if (control) {
                    this.resetControl(control);
                }
            }
        };
        /**
         * @private
         * @param {?} control
         * @return {?}
         */
        ThfPageLoginComponent.prototype.resetControl = /**
         * @private
         * @param {?} control
         * @return {?}
         */
        function (control) {
            control.markAsPristine();
            control.markAsUntouched();
            control.updateValueAndValidity();
        };
        /**
         * @private
         * @param {?} allErrors
         * @param {?} control
         * @param {?} errors
         * @param {?} patternError
         * @return {?}
         */
        ThfPageLoginComponent.prototype.setControlErrors = /**
         * @private
         * @param {?} allErrors
         * @param {?} control
         * @param {?} errors
         * @param {?} patternError
         * @return {?}
         */
        function (allErrors, control, errors, patternError) {
            if (control) {
                this[allErrors] = control.hasError('pattern') ? __spread(errors, [patternError]) : __spread(errors);
                if (errors && errors.length && (control.valid || control.pristine)) {
                    control.markAsTouched();
                    control.markAsDirty();
                    control.setErrors(this.customPasswordError);
                }
            }
        };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        ThfPageLoginComponent.prototype.setUrlRedirect = /**
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            isExternalLink(url) ? window.open(url, '_blank') : this.router.navigate([url]);
        };
        /**
         * @private
         * @param {?} differ
         * @param {?} array
         * @return {?}
         */
        ThfPageLoginComponent.prototype.validateArrayChanges = /**
         * @private
         * @param {?} differ
         * @param {?} array
         * @return {?}
         */
        function (differ, array) {
            var _this = this;
            array.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                /** @type {?} */
                var changes = differ.diff(element.array);
                if (changes) {
                    element.callback();
                    _this.changeDetector.detectChanges();
                }
            }));
        };
        /**
         * @protected
         * @param {?} recovery
         * @return {?}
         */
        ThfPageLoginComponent.prototype.openUrl = /**
         * @protected
         * @param {?} recovery
         * @return {?}
         */
        function (recovery) {
            switch (typeof recovery) {
                case 'string': {
                    this.setUrlRedirect(recovery);
                    break;
                }
                case 'function': {
                    recovery();
                    break;
                }
                case 'object': {
                    this.createModalPasswordRecoveryComponent(recovery);
                    break;
                }
            }
        };
        /**
         * @protected
         * @param {?} errors
         * @return {?}
         */
        ThfPageLoginComponent.prototype.setLoginErrors = /**
         * @protected
         * @param {?} errors
         * @return {?}
         */
        function (errors) {
            /** @type {?} */
            var control = this.loginForm.form.controls['login'];
            this.setControlErrors('allLoginErrors', control, errors, this.literals.loginErrorPattern);
        };
        /**
         * @protected
         * @param {?} errors
         * @return {?}
         */
        ThfPageLoginComponent.prototype.setPasswordErrors = /**
         * @protected
         * @param {?} errors
         * @return {?}
         */
        function (errors) {
            /** @type {?} */
            var control = this.loginForm.form.controls['password'];
            this.setControlErrors('allPasswordErrors', control, errors, this.literals.passwordErrorPattern);
        };
        /**
         * @param {?} language
         * @return {?}
         */
        ThfPageLoginComponent.prototype.onSelectedLanguage = /**
         * @param {?} language
         * @return {?}
         */
        function (language) {
            this.selectedLanguage = language;
            this.getLiterals(language, this.containsCustomLiterals ? this.customizedDefaultLiterals : undefined);
            this.setTitleLiteral(language, this.productName);
            this.setLoginHintLiteral(language, this.contactEmail);
        };
        ThfPageLoginComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-login',
                        template: "<thf-page-background #pageLogin\n  t-show-select-language\n  [t-background]=\"background\"\n  [t-highlight-info]=\"literals.highlightInfo\"\n  [t-logo]=\"logo\"\n  [t-secondary-logo]=\"secondaryLogo\"\n  (t-selected-language)=\"onSelectedLanguage($event)\">\n\n  <div class=\"thf-page-login-header thf-mb-2 thf-mb-sm-1 thf-pt-sm-1\">\n    <div class=\"thf-page-login-header-title thf-mb-sm-1\">{{ literals.title }}</div>\n    <thf-tag\n      *ngIf=\"environment\"\n      t-type=\"warning\"\n      [t-value]=\"environment\">\n    </thf-tag>\n  </div>\n\n  <form #loginForm=\"ngForm\" class=\"thf-page-login-form\">\n    <div class=\"thf-row\">\n      <div class=\"thf-lg-12\">\n        <div class=\"thf-page-login-hint thf-page-login-info-container\">\n          <thf-login\n            class=\"thf-page-login-info-field\"\n            name=\"login\"\n            [(ngModel)]=\"login\"\n            t-focus\n            t-required\n            [t-label]=\"literals.loginLabel\"\n            [t-pattern]=\"loginPattern\"\n            [t-placeholder]=\"literals.loginPlaceholder\"\n            (click)=\"closePopover()\"\n            (keyup.enter)=\"loginForm.valid && onLoginSubmit()\"\n            (t-change-model)=\"changeLoginModel()\">\n          </thf-login>\n\n          <div class=\"thf-page-login-info-icon-container\">\n            <span\n              class=\"thf-icon thf-field-icon thf-icon-info\"\n              t-tooltip-position=\"right\"\n              [t-tooltip]=\"literals.loginHint\">\n            </span>\n          </div>\n        </div>\n\n        <div class=\"thf-field-container-bottom thf-field-container-error-container\">\n          <div *ngFor=\"let error of allLoginErrors\u001C\" class=\"thf-field-container-bottom-text-error thf-field-container-error-item\">\n            <span class=\"thf-icon thf-icon-exclamation\"></span>\n            <span class=\"thf-field-container-error-text\">{{error}}</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"thf-lg-12\">\n        <div class=\"thf-page-login-password-container\">\n          <thf-password\n            class=\"thf-page-login-field-size thf-page-login-password-item\"\n            name=\"password\"\n            [(ngModel)]=\"password\"\n            t-required\n            [t-label]=\"literals.passwordLabel\"\n            [t-pattern]=\"passwordPattern\"\n            [t-placeholder]=\"literals.passwordPlaceholder\"\n            (click)=\"closePopover()\"\n            (keyup.enter)=\"loginForm.valid && onLoginSubmit()\"\n            (t-change-model)=\"changePasswordModel()\">\n          </thf-password>\n          <div class=\"thf-page-login-password-item thf-page-login-password-popover-container\">\n            <thf-page-login-popover *ngIf=\"showExceededAttemptsWarning && exceededAttemptsWarning\"\n              [t-recovery]=\"recovery\"\n              [t-remaining-attempts]=\"exceededAttemptsWarning\"\n              [t-selected-language]=\"selectedLanguage\"\n              (t-forgot-password) = \"openUrl($event)\">\n            </thf-page-login-popover>\n          </div>\n        </div>\n        <div class=\"thf-field-container-bottom thf-field-container-error-container\">\n          <div *ngFor=\"let error of allPasswordErrors\" class=\"thf-field-container-bottom-text-error thf-field-container-error-item\">\n            <span class=\"thf-icon thf-icon-exclamation\"></span>\n            <span class=\"thf-field-container-error-text\">{{error}}</span>\n          </div>\n        </div>\n      </div>\n\n      <thf-input *ngIf=\"customField && customFieldType === 'input'\"\n        class=\"thf-page-login-field-size thf-lg-12\"\n        name=\"customFieldInput\"\n        [(ngModel)]=\"customFieldObject.value\"\n        t-required\n        [t-error-pattern]=\"customFieldObject.errorPattern || literals.customFieldErrorPattern\"\n        [t-pattern]=\"customFieldObject.pattern\"\n        [t-placeholder]=\"customFieldObject.placeholder || literals.customFieldPlaceholder\"\n        (keyup.enter)=\"loginForm.valid && onLoginSubmit()\">\n      </thf-input>\n\n      <thf-combo *ngIf=\"customField && customFieldType === 'combo'\"\n        class=\"thf-page-login-field-size thf-lg-12\"\n        name=\"customFieldCombo\"\n        [(ngModel)]=\"customFieldObject.value\"\n        t-required\n        [t-field-value]=\"customFieldObject.fieldValue\"\n        [t-filter-service]=\"customFieldObject.url\"\n        [t-placeholder]=\"customFieldObject.placeholder || literals.customFieldPlaceholder\">\n      </thf-combo>\n\n      <thf-select *ngIf=\"customField && customFieldType === 'select'\"\n        class=\"thf-page-login-field-size thf-lg-12\"\n        name=\"customFieldSelect\"\n        [(ngModel)]=\"customFieldObject.value\"\n        t-required\n        [t-placeholder]=\"customFieldObject.placeholder || literals.customFieldPlaceholder\"\n        [t-options]=\"customFieldObject.options\">\n      </thf-select>\n\n      <div class=\"thf-lg-12\">\n        <div *ngIf=\"!hideRememberUser\" class=\"thf-page-login-hint thf-page-login-info-container\">\n          <thf-switch\n            class=\"thf-page-login-info-field thf-lg-7 thf-offset-lg-5 thf-offset-xl-5\"\n            name=\"rememberUser\"\n            [(ngModel)]=\"rememberUser\"\n            t-label-position=\"1\"\n            [t-label-off]=\"literals.rememberUser\"\n            [t-label-on]=\"literals.rememberUser\"\n            (keyup.enter)=\"loginForm.valid && onLoginSubmit()\">\n          </thf-switch>\n\n          <div class=\"thf-page-login-info-icon-container thf-page-login-info-icon-remember-user\">\n            <span\n              class=\"thf-icon thf-field-icon thf-icon-info\"\n              t-tooltip-position=\"right\"\n              [t-tooltip]=\"literals.rememberUserHint\">\n            </span>\n          </div>\n        </div>\n      </div>\n\n\n      <thf-button\n        class=\"thf-lg-12 thf-page-login-button thf-page-login-field-size\"\n        t-type=\"primary\"\n        [t-disabled]=\"loginForm.invalid\"\n        [t-label]=\"loading ? literals.submittedLabel : literals.submitLabel\"\n        [t-loading]=\"loading\"\n        (t-click)=\"onLoginSubmit()\">\n      </thf-button>\n\n      <div *ngIf=\"recovery\"\n        class=\"thf-page-login-recovery-link\">\n        <a class=\"thf-font-text-large-bold\" (click)=\"openUrl(recovery)\">{{ literals.forgotPassword }}</a>\n      </div>\n\n      <div *ngIf=\"registerUrl\"\n        class=\"thf-page-login-register-link\">\n        <a class=\"thf-font-text-large-bold\" (click)=\"openUrl(registerUrl)\">{{ literals.registerUrl }}</a>\n      </div>\n    </div>\n  </form>\n</thf-page-background>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfPageLoginComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: router.ActivatedRoute },
            { type: thfUi.ThfComponentInjectorService },
            { type: core.IterableDiffers },
            { type: ThfPageLoginService },
            { type: router.Router }
        ]; };
        ThfPageLoginComponent.propDecorators = {
            loginForm: [{ type: core.ViewChild, args: ['loginForm', { read: forms.NgForm, static: true },] }],
            pageLogin: [{ type: core.ViewChild, args: ['pageLogin', { read: core.ViewContainerRef, static: true },] }]
        };
        return ThfPageLoginComponent;
    }(ThfPageLoginBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfPageLoginPopoverComponent = /** @class */ (function () {
        function ThfPageLoginPopoverComponent(changeDetector) {
            this.changeDetector = changeDetector;
            /**
             * se 't-recovery' for do tipo Function ou ThfPageLoginRecovery, emite para o método 'openUrl' do componente 'thf-page-login'
             */
            this.forgotPassword = new core.EventEmitter();
        }
        Object.defineProperty(ThfPageLoginPopoverComponent.prototype, "recovery", {
            get: /**
             * @return {?}
             */
            function () {
                return this._recovery;
            },
            /** exibe o link de 'esqueci minha senha' e verifica se o valor é um link interno ou externo */
            set: /**
             * exibe o link de 'esqueci minha senha' e verifica se o valor é um link interno ou externo
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._recovery = value;
                if (isTypeof(value, 'string')) {
                    this.recoveryType = isExternalLink(value) ? 'externalLink' : 'internalLink';
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginPopoverComponent.prototype, "remainingAttempts", {
            get: /**
             * @return {?}
             */
            function () {
                return this._remainingAttempts;
            },
            /** define se a mensagem deverá ser exibida caso seja maior que 0(zero) */
            set: /**
             * define se a mensagem deverá ser exibida caso seja maior que 0(zero)
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._remainingAttempts = value;
                this.getLiterals(this.selectedLanguage);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ThfPageLoginPopoverComponent.prototype, "selectedLanguage", {
            get: /**
             * @return {?}
             */
            function () {
                return this._selectedLanguage;
            },
            /** define o idioma da mensagem conforme selecionado no 'thf-page-login' */
            set: /**
             * define o idioma da mensagem conforme selecionado no 'thf-page-login'
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._selectedLanguage = value;
                this.getLiterals(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ThfPageLoginPopoverComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.getLiterals(this.selectedLanguage);
        };
        /**
         * @param {?} recovery
         * @return {?}
         */
        ThfPageLoginPopoverComponent.prototype.onForgotPasswordClick = /**
         * @param {?} recovery
         * @return {?}
         */
        function (recovery) {
            this.forgotPassword.emit(recovery);
        };
        /**
         * @private
         * @param {?=} language
         * @return {?}
         */
        ThfPageLoginPopoverComponent.prototype.getLiterals = /**
         * @private
         * @param {?=} language
         * @return {?}
         */
        function (language) {
            language = language || browserLanguage();
            this.literalParams = this.remainingAttempts;
            this.literals = __assign({}, thfPageLoginLiteralsDefault[thfLocaleDefault], thfPageLoginLiteralsDefault[language]);
            this.changeDetector.detectChanges();
        };
        ThfPageLoginPopoverComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'thf-page-login-popover',
                        template: "<div class=\"thf-page-login-popover-container\">\n  <div class=\"thf-page-login-popover\">\n    <div class=\"thf-page-login-popover-arrow\"></div>\n    <div class=\"thf-page-login-popover-content\">\n      <p class=\"thf-font-text-bold thf-page-login-popover-title\">\n        {{ literals?.titlePopover }}\n      </p>\n      <p class=\"thf-font-text\">\n        {{ literals?.forgotYourPassword }}\n      </p>\n      <p class=\"thf-font-text\">\n        {{ literals?.ifYouTryHarder }}\n        <span class=\"thf-font-text-bold thf-page-login-popover-attempts\">\n          {{ literals?.attempts | thfI18n:literalParams }}\n        </span>{{ literals?.yourUserWillBeBlocked }}\n      </p>\n      <br>\n      <p class=\"thf-font-text\">\n        {{ literals?.createANewPasswordNow }}\n      </p>\n      <div *ngIf=\"recovery\" class=\"thf-font-text-bold thf-mt-1 thf-page-login-popover-link-container\">\n        <a *ngIf=\"recoveryType === 'internalLink'\"\n          class=\"thf-page-login-popover-link\"\n          [routerLink]=\"recovery\">\n          {{ literals?.iForgotMyPassword }}\n        </a>\n        <a *ngIf=\"recoveryType === 'externalLink'\"\n          class=\"thf-page-login-popover-link\"\n          [href]=\"recovery\"\n          target=\"_blank\">\n          {{ literals?.iForgotMyPassword }}\n        </a>\n        <a *ngIf=\"!recoveryType\"\n          class=\"thf-page-login-popover-link\"\n          (click)=\"onForgotPasswordClick(recovery)\">\n          {{ literals?.iForgotMyPassword }}\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ThfPageLoginPopoverComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        ThfPageLoginPopoverComponent.propDecorators = {
            recovery: [{ type: core.Input, args: ['t-recovery',] }],
            remainingAttempts: [{ type: core.Input, args: ['t-remaining-attempts',] }],
            selectedLanguage: [{ type: core.Input, args: ['t-selected-language',] }],
            forgotPassword: [{ type: core.Output, args: ['t-forgot-password',] }]
        };
        return ThfPageLoginPopoverComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@description
     *
     * Módulo do template do thf-page-login.
     */
    var ThfPageLoginModule = /** @class */ (function () {
        function ThfPageLoginModule() {
        }
        ThfPageLoginModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            router.RouterModule,
                            ThfPageBackgroundModule,
                            thfUi.ThfModule
                        ],
                        declarations: [
                            ThfPageLoginComponent,
                            ThfPageLoginPopoverComponent
                        ],
                        entryComponents: [
                            ThfModalPasswordRecoveryComponent
                        ],
                        exports: [
                            ThfPageLoginComponent
                        ],
                        providers: [ThfPageLoginService]
                    },] }
        ];
        return ThfPageLoginModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfComponentsModule = /** @class */ (function () {
        function ThfComponentsModule() {
        }
        ThfComponentsModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            ThfModalPasswordRecoveryModule,
                            ThfPageBackgroundModule,
                            ThfPageBlockedUserModule,
                            ThfPageChangePasswordModule,
                            ThfPageDynamicDetailModule,
                            ThfPageDynamicEditModule,
                            ThfPageDynamicSearchModule,
                            ThfPageDynamicTableModule,
                            ThfPageJobSchedulerModule,
                            ThfPageLoginModule
                        ],
                        exports: [
                            ThfModalPasswordRecoveryModule,
                            ThfPageBackgroundModule,
                            ThfPageBlockedUserModule,
                            ThfPageChangePasswordModule,
                            ThfPageDynamicDetailModule,
                            ThfPageDynamicEditModule,
                            ThfPageDynamicSearchModule,
                            ThfPageDynamicTableModule,
                            ThfPageJobSchedulerModule,
                            ThfPageLoginModule
                        ]
                    },] }
        ];
        return ThfComponentsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ThfTemplatesModule = /** @class */ (function () {
        function ThfTemplatesModule() {
        }
        ThfTemplatesModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            ThfComponentsModule
                        ],
                        exports: [
                            ThfComponentsModule
                        ]
                    },] }
        ];
        return ThfTemplatesModule;
    }());

    exports.ThfComponentsModule = ThfComponentsModule;
    exports.ThfModalPasswordRecoveryComponent = ThfModalPasswordRecoveryComponent;
    exports.ThfModalPasswordRecoveryModalContent = ThfModalPasswordRecoveryModalContent;
    exports.ThfModalPasswordRecoveryModule = ThfModalPasswordRecoveryModule;
    exports.ThfModalPasswordRecoveryType = ThfModalPasswordRecoveryType;
    exports.ThfPageBackgroundComponent = ThfPageBackgroundComponent;
    exports.ThfPageBackgroundModule = ThfPageBackgroundModule;
    exports.ThfPageBlockedUserComponent = ThfPageBlockedUserComponent;
    exports.ThfPageBlockedUserModule = ThfPageBlockedUserModule;
    exports.ThfPageBlockedUserReason = ThfPageBlockedUserReason;
    exports.ThfPageChangePasswordComponent = ThfPageChangePasswordComponent;
    exports.ThfPageChangePasswordModule = ThfPageChangePasswordModule;
    exports.ThfPageDynamicDetailComponent = ThfPageDynamicDetailComponent;
    exports.ThfPageDynamicDetailModule = ThfPageDynamicDetailModule;
    exports.ThfPageDynamicEditComponent = ThfPageDynamicEditComponent;
    exports.ThfPageDynamicEditModule = ThfPageDynamicEditModule;
    exports.ThfPageDynamicSearchComponent = ThfPageDynamicSearchComponent;
    exports.ThfPageDynamicSearchModule = ThfPageDynamicSearchModule;
    exports.ThfPageDynamicTableComponent = ThfPageDynamicTableComponent;
    exports.ThfPageDynamicTableModule = ThfPageDynamicTableModule;
    exports.ThfPageJobSchedulerComponent = ThfPageJobSchedulerComponent;
    exports.ThfPageJobSchedulerModule = ThfPageJobSchedulerModule;
    exports.ThfPageLoginAuthenticationType = ThfPageLoginAuthenticationType;
    exports.ThfPageLoginComponent = ThfPageLoginComponent;
    exports.ThfPageLoginModule = ThfPageLoginModule;
    exports.ThfTemplatesModule = ThfTemplatesModule;
    exports.thfModalPasswordRecoveryLiterals = thfModalPasswordRecoveryLiterals;
    exports.thfPageBlockedUserButtonLiterals = thfPageBlockedUserButtonLiterals;
    exports.thfPageBlockedUserLiterals = thfPageBlockedUserLiterals;
    exports.thfPageChangePasswordLiterals = thfPageChangePasswordLiterals;
    exports.thfPageDynamicDetailLiteralsDefault = thfPageDynamicDetailLiteralsDefault;
    exports.thfPageDynamicEditLiteralsDefault = thfPageDynamicEditLiteralsDefault;
    exports.thfPageDynamicTableLiteralsDefault = thfPageDynamicTableLiteralsDefault;
    exports.ɵa = ThfModalPasswordRecoveryBaseComponent;
    exports.ɵb = ThfModalPasswordRecoveryService;
    exports.ɵc = ThfModalPasswordRecoveryErrorMessageComponent;
    exports.ɵd = ThfPageBlockedUserBaseComponent;
    exports.ɵe = ThfPageBlockedUserContactsComponent;
    exports.ɵf = ThfPageBlockedUserReasonComponent;
    exports.ɵg = ThfPageChangePasswordBaseComponent;
    exports.ɵh = ThfPageChangePasswordService;
    exports.ɵi = ThfPageDynamicService;
    exports.ɵj = ThfPageDynamicService$1;
    exports.ɵk = ThfAdvancedFilterComponent;
    exports.ɵl = ThfAdvancedFilterBaseComponent;
    exports.ɵm = ThfPageDynamicSearchBaseComponent;
    exports.ɵn = ThfPageDynamicListBaseComponent;
    exports.ɵo = ThfPageDynamicService$2;
    exports.ɵp = ThfPageJobSchedulerBaseComponent;
    exports.ɵq = ThfPageJobSchedulerService;
    exports.ɵr = ThfPageJobSchedulerLookupService;
    exports.ɵs = ThfPageJobSchedulerExecutionComponent;
    exports.ɵt = ThfPageJobSchedulerParametersComponent;
    exports.ɵu = ThfPageJobSchedulerSummaryComponent;
    exports.ɵv = ThfPageLoginBaseComponent;
    exports.ɵw = ThfPageLoginService;
    exports.ɵx = ThfPageLoginPopoverComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=totvs-thf-templates.umd.js.map
