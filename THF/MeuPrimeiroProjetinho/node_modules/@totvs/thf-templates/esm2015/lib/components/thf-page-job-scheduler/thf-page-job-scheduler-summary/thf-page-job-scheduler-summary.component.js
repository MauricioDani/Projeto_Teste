/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { DatePipe } from '@angular/common';
import { ThfInfoOrientation } from '@totvs/thf-ui';
export class ThfPageJobSchedulerSummaryComponent {
    /**
     * @param {?} datePipe
     */
    constructor(datePipe) {
        this.datePipe = datePipe;
        this.executionValue = '';
        this.firstExecutionValue = '';
        this.infoOrientation = ThfInfoOrientation.Horizontal;
        this.periodicityValue = '';
        this.recurrentValue = '';
        this.literals = (/** @type {?} */ ({}));
        this.parameters = [];
        this.value = (/** @type {?} */ ({}));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const { periodicity, hour, dayOfMonth, daysOfWeek, recurrent, firstExecution, firstExecutionHour } = this.value;
        this.periodicityValue = this.getPeriodicityLabel(periodicity);
        this.executionValue = this.getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth);
        this.firstExecutionValue = this.getFirstExecutionLabel(firstExecution, firstExecutionHour);
        this.recurrentValue = this.getRecurrentValue(recurrent);
    }
    /**
     * @private
     * @param {?} periodicity
     * @param {?=} hour
     * @param {?=} daysOfWeek
     * @param {?=} dayOfMonth
     * @return {?}
     */
    getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth) {
        switch (periodicity) {
            case 'daily':
                return this.getHourLabel(hour);
            case 'monthly':
                return this.getMonthlyLabelExecution(dayOfMonth, hour);
            case 'weekly':
                return this.getWeeklyLabelExecution(daysOfWeek, hour);
            default:
                return this.literals.notReported;
        }
    }
    /**
     * @private
     * @param {?} firstExecution
     * @param {?=} firstExecutionHour
     * @return {?}
     */
    getFirstExecutionLabel(firstExecution, firstExecutionHour) {
        if (firstExecution) {
            /** @type {?} */
            const date = this.datePipe.transform(firstExecution, 'dd/MM/yyyy', '-0200');
            return `${date} ${this.getHourLabel(firstExecutionHour)}`;
        }
        else {
            return this.literals.notReported;
        }
    }
    /**
     * @private
     * @param {?} hour
     * @return {?}
     */
    getHourLabel(hour) {
        return `${this.literals.at} ${hour || '00:00'}h`;
    }
    /**
     * @private
     * @param {?} dayOfMonth
     * @param {?} hour
     * @return {?}
     */
    getMonthlyLabelExecution(dayOfMonth, hour) {
        /** @type {?} */
        const hourLabel = this.getHourLabel(hour);
        return `${this.literals.day} ${dayOfMonth} ${hourLabel}`;
    }
    /**
     * @private
     * @param {?} periodicity
     * @return {?}
     */
    getPeriodicityLabel(periodicity) {
        switch (periodicity) {
            case 'daily':
                return this.literals.daily;
            case 'monthly':
                return this.literals.monthly;
            case 'weekly':
                return this.literals.weekly;
            default:
                return this.literals.single;
        }
    }
    /**
     * @private
     * @param {?} recurrent
     * @return {?}
     */
    getRecurrentValue(recurrent) {
        return recurrent ? this.literals.yes : this.literals.no;
    }
    /**
     * @private
     * @return {?}
     */
    getSorterWeekDays() {
        return {
            'sunday': 0,
            'monday': 1,
            'tuesday': 2,
            'wednesday': 3,
            'thursday': 4,
            'friday': 5,
            'saturday': 6
        };
    }
    /**
     * @private
     * @param {?} day
     * @return {?}
     */
    getTranslateWeekDay(day) {
        /** @type {?} */
        const days = {
            Sunday: this.literals.sunday,
            Monday: this.literals.monday,
            Tuesday: this.literals.tuesday,
            Wednesday: this.literals.wednesday,
            Thursday: this.literals.thursday,
            Friday: this.literals.friday,
            Saturday: this.literals.saturday,
        };
        return days[day] || '';
    }
    /**
     * @private
     * @param {?=} days
     * @return {?}
     */
    getWeekDaysLabel(days = []) {
        /** @type {?} */
        const weekDaysSorted = this.sortWeekDays(days);
        return weekDaysSorted.map((/**
         * @param {?} day
         * @return {?}
         */
        day => this.getTranslateWeekDay(day))).join(', ');
    }
    /**
     * @private
     * @param {?} daysOfWeek
     * @param {?} hour
     * @return {?}
     */
    getWeeklyLabelExecution(daysOfWeek, hour) {
        if (daysOfWeek && Array.isArray(daysOfWeek)) {
            return `${this.getWeekDaysLabel(daysOfWeek)} ${this.getHourLabel(hour)}`;
        }
        else {
            return this.literals.notReported;
        }
    }
    /**
     * @private
     * @param {?=} days
     * @return {?}
     */
    sortWeekDays(days = []) {
        /** @type {?} */
        const sorterWeekDays = this.getSorterWeekDays();
        return days.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            /** @type {?} */
            const currDay = a.toLowerCase();
            /** @type {?} */
            const nextDay = b.toLowerCase();
            return sorterWeekDays[currDay] > sorterWeekDays[nextDay] ? 1 : -1;
        }));
    }
}
ThfPageJobSchedulerSummaryComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-job-scheduler-summary',
                template: "<div class=\"thf-md-12\">\n  <thf-info\n    [t-label]=\"literals.process\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"value.processID\">\n  </thf-info>\n\n  <thf-info\n    [t-label]=\"literals.periodicity\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"periodicityValue\">\n  </thf-info>\n\n  <thf-info *ngIf=\"value.periodicity !== 'single'\"\n    [t-label]=\"literals.execution\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"executionValue\">\n  </thf-info>\n\n  <thf-info\n    [t-label]=\"literals.recurrent\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"recurrentValue\">\n  </thf-info>\n\n  <thf-info\n    [t-label]=\"literals.firstExecution\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"firstExecutionValue\">\n  </thf-info>\n</div>\n\n<thf-widget *ngIf=\"parameters && parameters.length\"\n  class=\"thf-pt-1 thf-pb-1 thf-md-12\"\n  [t-title]=\"literals.parameters\">\n\n  <thf-dynamic-view\n    [t-fields]=\"parameters\"\n    [t-value]=\"value.executionParameter\">\n  </thf-dynamic-view>\n\n</thf-widget>\n\n"
            }] }
];
/** @nocollapse */
ThfPageJobSchedulerSummaryComponent.ctorParameters = () => [
    { type: DatePipe }
];
ThfPageJobSchedulerSummaryComponent.propDecorators = {
    literals: [{ type: Input, args: ['t-literals',] }],
    parameters: [{ type: Input, args: ['t-parameters',] }],
    value: [{ type: Input, args: ['t-value',] }]
};
if (false) {
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.executionValue;
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.firstExecutionValue;
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.infoOrientation;
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.periodicityValue;
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.recurrentValue;
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.literals;
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.parameters;
    /** @type {?} */
    ThfPageJobSchedulerSummaryComponent.prototype.value;
    /**
     * @type {?}
     * @private
     */
    ThfPageJobSchedulerSummaryComponent.prototype.datePipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhZ2Utam9iLXNjaGVkdWxlci1zdW1tYXJ5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdGVtcGxhdGVzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLXBhZ2Utam9iLXNjaGVkdWxlci90aGYtcGFnZS1qb2Itc2NoZWR1bGVyLXN1bW1hcnkvdGhmLXBhZ2Utam9iLXNjaGVkdWxlci1zdW1tYXJ5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTNDLE9BQU8sRUFBdUIsa0JBQWtCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFReEUsTUFBTSxPQUFPLG1DQUFtQzs7OztJQWM5QyxZQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBWnRDLG1CQUFjLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLHdCQUFtQixHQUFHLEVBQUUsQ0FBQztRQUN6QixvQkFBZSxHQUFHLGtCQUFrQixDQUFDLFVBQVUsQ0FBQztRQUNoRCxxQkFBZ0IsR0FBRyxFQUFFLENBQUM7UUFDdEIsbUJBQWMsR0FBRyxFQUFFLENBQUM7UUFFQyxhQUFRLEdBQUcsbUJBQU0sRUFBRSxFQUFBLENBQUM7UUFFbEIsZUFBVSxHQUErQixFQUFFLENBQUM7UUFFakQsVUFBSyxHQUE0QixtQkFBTSxFQUFFLEVBQUEsQ0FBQztJQUVuQixDQUFDOzs7O0lBRTFDLFFBQVE7Y0FDQSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUs7UUFFL0csSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFX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QUUvQyxPQUFPLElBQUksQ0FBQyxJQUFJOzs7OztRQUFDLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxFQUFFOztrQkFDbEMsT0FBTyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUU7O2tCQUN6QixPQUFPLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRTtZQUUvQixPQUFPLGNBQWMsQ0FBQyxPQUFPLENBQUMsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEUsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7WUFoSUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQ0FBZ0M7Z0JBQzFDLHdrQ0FBNEQ7YUFDN0Q7Ozs7WUFUUSxRQUFROzs7dUJBa0JkLEtBQUssU0FBQyxZQUFZO3lCQUVsQixLQUFLLFNBQUMsY0FBYztvQkFFcEIsS0FBSyxTQUFDLFNBQVM7Ozs7SUFWaEIsNkRBQW9COztJQUNwQixrRUFBeUI7O0lBQ3pCLDhEQUFnRDs7SUFDaEQsK0RBQXNCOztJQUN0Qiw2REFBb0I7O0lBRXBCLHVEQUF5Qzs7SUFFekMseURBQW1FOztJQUVuRSxvREFBNEQ7Ozs7O0lBRWhELHVEQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0ZVBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBUaGZEeW5hbWljVmlld0ZpZWxkLCBUaGZJbmZvT3JpZW50YXRpb24gfSBmcm9tICdAdG90dnMvdGhmLXVpJztcblxuaW1wb3J0IHsgVGhmSm9iU2NoZWR1bGVySW50ZXJuYWwgfSBmcm9tICcuLi9pbnRlcmZhY2VzL3RoZi1qb2Itc2NoZWR1bGVyLWludGVybmFsLmludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoZi1wYWdlLWpvYi1zY2hlZHVsZXItc3VtbWFyeScsXG4gIHRlbXBsYXRlVXJsOiAndGhmLXBhZ2Utam9iLXNjaGVkdWxlci1zdW1tYXJ5LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUaGZQYWdlSm9iU2NoZWR1bGVyU3VtbWFyeUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgZXhlY3V0aW9uVmFsdWUgPSAnJztcbiAgZmlyc3RFeGVjdXRpb25WYWx1ZSA9ICcnO1xuICBpbmZvT3JpZW50YXRpb24gPSBUaGZJbmZvT3JpZW50YXRpb24uSG9yaXpvbnRhbDtcbiAgcGVyaW9kaWNpdHlWYWx1ZSA9ICcnO1xuICByZWN1cnJlbnRWYWx1ZSA9ICcnO1xuXG4gIEBJbnB1dCgndC1saXRlcmFscycpIGxpdGVyYWxzID0gPGFueT4ge307XG5cbiAgQElucHV0KCd0LXBhcmFtZXRlcnMnKSBwYXJhbWV0ZXJzOiBBcnJheTxUaGZEeW5hbWljVmlld0ZpZWxkPiA9IFtdO1xuXG4gIEBJbnB1dCgndC12YWx1ZScpIHZhbHVlOiBUaGZKb2JTY2hlZHVsZXJJbnRlcm5hbCA9IDxhbnk+IHt9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0ZVBpcGU6IERhdGVQaXBlKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGNvbnN0IHsgcGVyaW9kaWNpdHksIGhvdXIsIGRheU9mTW9udGgsIGRheXNPZldlZWssIHJlY3VycmVudCwgZmlyc3RFeGVjdXRpb24sIGZpcnN0RXhlY3V0aW9uSG91ciB9ID0gdGhpcy52YWx1ZTtcblxuICAgIHRoaXMucGVyaW9kaWNpdHlWYWx1ZSA9IHRoaXMuZ2V0UGVyaW9kaWNpdHlMYWJlbChwZXJpb2RpY2l0eSk7XG4gICAgdGhpcy5leGVjdXRpb25WYWx1ZSA9IHRoaXMuZ2V0RXhlY3V0aW9uVmFsdWUocGVyaW9kaWNpdHksIGhvdXIsIGRheXNPZldlZWssIGRheU9mTW9udGgpO1xuICAgIHRoaXMuZmlyc3RFeGVjdXRpb25WYWx1ZSA9IHRoaXMuZ2V0Rmlyc3RFeGVjdXRpb25MYWJlbChmaXJzdEV4ZWN1dGlvbiwgZmlyc3RFeGVjdXRpb25Ib3VyKTtcbiAgICB0aGlzLnJlY3VycmVudFZhbHVlID0gdGhpcy5nZXRSZWN1cnJlbnRWYWx1ZShyZWN1cnJlbnQpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRFeGVjdXRpb25WYWx1ZShwZXJpb2RpY2l0eTogc3RyaW5nLCBob3VyPzogc3RyaW5nLCBkYXlzT2ZXZWVrPzogQXJyYXk8c3RyaW5nPiwgZGF5T2ZNb250aD86IG51bWJlcikge1xuICAgIHN3aXRjaCAocGVyaW9kaWNpdHkpIHtcbiAgICAgIGNhc2UgJ2RhaWx5JzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SG91ckxhYmVsKGhvdXIpO1xuICAgICAgY2FzZSAnbW9udGhseSc6XG4gICAgICAgIHJldHVybiB0aGlzLmdldE1vbnRobHlMYWJlbEV4ZWN1dGlvbihkYXlPZk1vbnRoLCBob3VyKTtcbiAgICAgIGNhc2UgJ3dlZWtseSc6XG4gICAgICAgIHJldHVybiB0aGlzLmdldFdlZWtseUxhYmVsRXhlY3V0aW9uKGRheXNPZldlZWssIGhvdXIpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRoaXMubGl0ZXJhbHMubm90UmVwb3J0ZWQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRGaXJzdEV4ZWN1dGlvbkxhYmVsKGZpcnN0RXhlY3V0aW9uOiBEYXRlLCBmaXJzdEV4ZWN1dGlvbkhvdXI/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChmaXJzdEV4ZWN1dGlvbikge1xuICAgICAgY29uc3QgZGF0ZSA9IHRoaXMuZGF0ZVBpcGUudHJhbnNmb3JtKGZpcnN0RXhlY3V0aW9uLCAnZGQvTU0veXl5eScsICctMDIwMCcpO1xuXG4gICAgICByZXR1cm4gYCR7ZGF0ZX0gJHt0aGlzLmdldEhvdXJMYWJlbChmaXJzdEV4ZWN1dGlvbkhvdXIpfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmxpdGVyYWxzLm5vdFJlcG9ydGVkO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0SG91ckxhYmVsKGhvdXI6IHN0cmluZykge1xuICAgIHJldHVybiBgJHt0aGlzLmxpdGVyYWxzLmF0fSAke2hvdXIgfHwgJzAwOjAwJ31oYDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TW9udGhseUxhYmVsRXhlY3V0aW9uKGRheU9mTW9udGg6IG51bWJlciwgaG91cjogc3RyaW5nKSB7XG4gICAgY29uc3QgaG91ckxhYmVsID0gdGhpcy5nZXRIb3VyTGFiZWwoaG91cik7XG5cbiAgICByZXR1cm4gYCR7dGhpcy5saXRlcmFscy5kYXl9ICR7ZGF5T2ZNb250aH0gJHtob3VyTGFiZWx9YDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UGVyaW9kaWNpdHlMYWJlbChwZXJpb2RpY2l0eSkge1xuICAgIHN3aXRjaCAocGVyaW9kaWNpdHkpIHtcbiAgICAgIGNhc2UgJ2RhaWx5JzpcbiAgICAgICAgcmV0dXJuIHRoaXMubGl0ZXJhbHMuZGFpbHk7XG4gICAgICBjYXNlICdtb250aGx5JzpcbiAgICAgICAgcmV0dXJuIHRoaXMubGl0ZXJhbHMubW9udGhseTtcbiAgICAgIGNhc2UgJ3dlZWtseSc6XG4gICAgICAgIHJldHVybiB0aGlzLmxpdGVyYWxzLndlZWtseTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0aGlzLmxpdGVyYWxzLnNpbmdsZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFJlY3VycmVudFZhbHVlKHJlY3VycmVudDogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHJlY3VycmVudCA/IHRoaXMubGl0ZXJhbHMueWVzIDogdGhpcy5saXRlcmFscy5ubztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U29ydGVyV2Vla0RheXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdzdW5kYXknOiAwLFxuICAgICAgJ21vbmRheSc6IDEsXG4gICAgICAndHVlc2RheSc6IDIsXG4gICAgICAnd2VkbmVzZGF5JzogMyxcbiAgICAgICd0aHVyc2RheSc6IDQsXG4gICAgICAnZnJpZGF5JzogNSxcbiAgICAgICdzYXR1cmRheSc6IDZcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRUcmFuc2xhdGVXZWVrRGF5KGRheTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBkYXlzID0ge1xuICAgICAgU3VuZGF5OiB0aGlzLmxpdGVyYWxzLnN1bmRheSxcbiAgICAgIE1vbmRheTogdGhpcy5saXRlcmFscy5tb25kYXksXG4gICAgICBUdWVzZGF5OiB0aGlzLmxpdGVyYWxzLnR1ZXNkYXksXG4gICAgICBXZWRuZXNkYXk6IHRoaXMubGl0ZXJhbHMud2VkbmVzZGF5LFxuICAgICAgVGh1cnNkYXk6IHRoaXMubGl0ZXJhbHMudGh1cnNkYXksXG4gICAgICBGcmlkYXk6IHRoaXMubGl0ZXJhbHMuZnJpZGF5LFxuICAgICAgU2F0dXJkYXk6IHRoaXMubGl0ZXJhbHMuc2F0dXJkYXksXG4gICAgfTtcblxuICAgIHJldHVybiBkYXlzW2RheV0gfHwgJyc7XG4gIH1cblxuICBwcml2YXRlIGdldFdlZWtEYXlzTGFiZWwoZGF5czogQXJyYXk8c3RyaW5nPiA9IFtdKTogc3RyaW5nIHtcbiAgICBjb25zdCB3ZWVrRGF5c1NvcnRlZCA9IHRoaXMuc29ydFdlZWtEYXlzKGRheXMpO1xuXG4gICAgcmV0dXJuIHdlZWtEYXlzU29ydGVkLm1hcChkYXkgPT4gdGhpcy5nZXRUcmFuc2xhdGVXZWVrRGF5KGRheSkpLmpvaW4oJywgJyk7XG4gIH1cblxuICBwcml2YXRlIGdldFdlZWtseUxhYmVsRXhlY3V0aW9uKGRheXNPZldlZWs6IEFycmF5PHN0cmluZz4sIGhvdXI6IHN0cmluZykge1xuICAgIGlmIChkYXlzT2ZXZWVrICYmIEFycmF5LmlzQXJyYXkoZGF5c09mV2VlaykpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLmdldFdlZWtEYXlzTGFiZWwoZGF5c09mV2Vlayl9ICR7dGhpcy5nZXRIb3VyTGFiZWwoaG91cil9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMubGl0ZXJhbHMubm90UmVwb3J0ZWQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzb3J0V2Vla0RheXMoZGF5czogQXJyYXk8c3RyaW5nPiA9IFtdKSB7XG4gICAgY29uc3Qgc29ydGVyV2Vla0RheXMgPSB0aGlzLmdldFNvcnRlcldlZWtEYXlzKCk7XG5cbiAgICByZXR1cm4gZGF5cy5zb3J0KChhOiBzdHJpbmcsIGI6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgY3VyckRheSA9IGEudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNvbnN0IG5leHREYXkgPSBiLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIHJldHVybiBzb3J0ZXJXZWVrRGF5c1tjdXJyRGF5XSA+IHNvcnRlcldlZWtEYXlzW25leHREYXldID8gMSA6IC0xO1xuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==