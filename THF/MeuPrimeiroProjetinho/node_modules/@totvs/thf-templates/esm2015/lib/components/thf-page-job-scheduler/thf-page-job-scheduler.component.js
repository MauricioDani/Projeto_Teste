/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ActivatedRoute, Router } from '@angular/router';
import { Component, ViewChild, ViewEncapsulation } from '@angular/core';
import { ThfDialogService, ThfNotificationService, ThfStepperStatus } from '@totvs/thf-ui';
import * as util from './../../utils/util';
import { ThfPageJobSchedulerInternal } from './thf-page-job-scheduler-internal';
import { ThfPageJobSchedulerBaseComponent } from './thf-page-job-scheduler-base.component';
import { thfPageJobSchedulerLiteralsDefault } from './thf-page-job-scheduler-literals';
import { ThfPageJobSchedulerLookupService } from './thf-page-job-scheduler-lookup.service';
import { ThfPageJobSchedulerService } from './thf-page-job-scheduler.service';
/**
 * \@docsExtends ThfPageJobSchedulerBaseComponent
 *
 * \@example
 *
 * <example name="thf-page-job-scheduler-basic" title="Totvs Page Job Scheduler Basic">
 *  <file name="sample-thf-page-job-scheduler-basic/sample-thf-page-job-scheduler-basic.component.html"> </file>
 *  <file name="sample-thf-page-job-scheduler-basic/sample-thf-page-job-scheduler-basic.component.ts"> </file>
 * </example>
 *
 */
export class ThfPageJobSchedulerComponent extends ThfPageJobSchedulerBaseComponent {
    /**
     * @param {?} thfPageDynamicLookupService
     * @param {?} activatedRoute
     * @param {?} thfDialogService
     * @param {?} thfNotification
     * @param {?} router
     * @param {?} thfPageJobSchedulerService
     */
    constructor(thfPageDynamicLookupService, activatedRoute, thfDialogService, thfNotification, router, thfPageJobSchedulerService) {
        super(thfPageJobSchedulerService);
        this.thfPageDynamicLookupService = thfPageDynamicLookupService;
        this.activatedRoute = activatedRoute;
        this.thfDialogService = thfDialogService;
        this.thfNotification = thfNotification;
        this.router = router;
        this.isEdit = false;
        this.literals = Object.assign({}, thfPageJobSchedulerLiteralsDefault[util.thfLocaleDefault], thfPageJobSchedulerLiteralsDefault[util.browserLanguage()]);
        this.parameters = [];
        this.step = 1;
        this.backPageAction = {
            label: this.literals.back,
            action: this.nextStepOperation.bind(this, 'back'),
            disabled: this.isDisabledBack.bind(this)
        };
        this.concludePageActions = [
            {
                label: this.literals.conclude,
                action: this.confirmJobScheduler.bind(this)
            },
            Object.assign({}, this.backPageAction)
        ];
        this.nextPageActions = [
            {
                label: this.literals.next,
                action: this.nextStepOperation.bind(this, 'next'),
                disabled: this.isDisabledAdvance.bind(this)
            },
            Object.assign({}, this.backPageAction)
        ];
        this.jobSchedulerActions = [
            ...this.nextPageActions
        ];
        this.steps = [
            { label: this.literals.scheduling },
            { label: this.literals.parameterization },
            { label: this.literals.conclude }
        ];
    }
    /**
     * @return {?}
     */
    get stepperOrientation() {
        return window.innerWidth > 481 && window.innerWidth < 960 ? 'horizontal' : 'vertical';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        this.isEdit = !!paramId;
        this.thfPageJobSchedulerService.configServiceApi({ endpoint: this.serviceApi });
        this.loadData(paramId);
    }
    /**
     * @param {?} currentStep
     * @param {?} nextStep
     * @return {?}
     */
    changePageActionsBySteps(currentStep, nextStep) {
        /** @type {?} */
        const stepsLength = this.steps.length;
        if (nextStep === stepsLength) {
            this.jobSchedulerActions = [...this.concludePageActions];
        }
        else if (currentStep === stepsLength && nextStep < currentStep) {
            this.jobSchedulerActions = [...this.nextPageActions];
        }
    }
    /**
     * @param {?} stepNumber
     * @return {?}
     */
    nextStep(stepNumber) {
        if (stepNumber > 1 && this.schedulerExecution.form.invalid) {
            this.markAsDirtyInvalidControls(this.schedulerExecution.form.controls);
            return;
        }
        if (stepNumber > 2 && (this.schedulerParameters && this.schedulerParameters.form && this.schedulerParameters.form.invalid)) {
            this.markAsDirtyInvalidControls(this.schedulerParameters.form.controls);
            return;
        }
        this.changePageActionsBySteps(this.step, stepNumber);
        /** @type {?} */
        const steps = this.steps[this.step - 1];
        this.step = stepNumber;
        if (steps) {
            steps.status = ThfStepperStatus.Done;
        }
    }
    /**
     * @param {?} process
     * @return {?}
     */
    onChangeProcess(process) {
        if (process.existAPI && process.processId) {
            this.getParametersByProcess(process.processId);
            if (!this.isEdit) {
                this.model.executionParameter = {};
            }
            return;
        }
    }
    /**
     * @private
     * @return {?}
     */
    confirmJobScheduler() {
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        /** @type {?} */
        const confirmMessage = paramId ? this.literals.confirmUpdateMessage : this.literals.confirmSaveMessage;
        this.thfDialogService.confirm({
            title: this.literals.confirmation,
            message: confirmMessage,
            confirm: (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const model = Object.assign({}, this.model);
                this.save(model, paramId);
            })
        });
    }
    /**
     * @private
     * @param {?} msgSuccess
     * @param {?} saveOperation
     * @return {?}
     */
    emitSuccessMessage(msgSuccess, saveOperation) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield saveOperation.toPromise();
            this.thfNotification.success(msgSuccess);
            this.resetJobSchedulerForm();
        });
    }
    /**
     * @private
     * @param {?} process
     * @return {?}
     */
    getParametersByProcess(process) {
        this.thfPageJobSchedulerService.getParametersByProcess(process).subscribe((/**
         * @param {?} parameters
         * @return {?}
         */
        parameters => {
            this.parameters = parameters;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    isDisabledAdvance() {
        return this.schedulerExecution ? this.schedulerExecution.form.invalid : false;
    }
    /**
     * @private
     * @return {?}
     */
    isDisabledBack() {
        return this.step === 1;
    }
    /**
     * @private
     * @param {?=} operation
     * @return {?}
     */
    nextStepOperation(operation) {
        /** @type {?} */
        const stepNumber = operation === 'back' ? this.step - 1 : this.step + 1;
        this.nextStep(stepNumber);
    }
    /**
     * @private
     * @return {?}
     */
    resetJobSchedulerForm() {
        this.schedulerExecution.form.reset();
        // radiogroup nÃ£o estava atribuindo novo valor, fica vermelho sem o timetout.
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.model = new ThfPageJobSchedulerInternal();
            this.step = 1;
            this.steps.forEach((/**
             * @param {?} step
             * @return {?}
             */
            step => {
                step.status = ThfStepperStatus.Default;
            }));
            this.jobSchedulerActions = [...this.nextPageActions];
        }));
    }
    /**
     * @private
     * @param {?} model
     * @param {?} paramId
     * @return {?}
     */
    save(model, paramId) {
        /** @type {?} */
        const saveOperation = paramId
            ? this.thfPageJobSchedulerService.updateResource(paramId, model)
            : this.thfPageJobSchedulerService.createResource(model);
        /** @type {?} */
        const msgSuccess = paramId ? this.literals.saveNotificationSuccessUpdate : this.literals.saveNotificationSuccessSave;
        this.emitSuccessMessage(msgSuccess, saveOperation);
    }
}
ThfPageJobSchedulerComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-job-scheduler',
                template: "<thf-page-default\n  [t-actions]=\"jobSchedulerActions\"\n  [t-breadcrumb]=\"breadcrumb\"\n  [t-title]=\"title\">\n\n  <div class=\"thf-row\">\n\n    <thf-stepper\n      class=\"thf-lg-3 thf-xl-2\"\n      t-sequential=\"true\"\n      [t-orientation]=\"stepperOrientation\"\n      [t-step]=\"step\"\n      [t-steps]=\"steps\"\n      (t-change-step)=\"nextStep($event)\">\n    </thf-stepper>\n\n    <thf-container class=\"thf-lg-8 thf-xl-6\">\n      <form #formScheduler=\"ngForm\">\n\n        <thf-page-job-scheduler-execution [hidden]=\"step !== 1\"\n          #schedulerExecution\n          class=\"thf-md-12\"\n          [t-is-edit]=\"isEdit\"\n          [t-literals]=\"literals\"\n          [t-value]=\"model\"\n          (t-change-process)=\"onChangeProcess($event)\">\n        </thf-page-job-scheduler-execution>\n\n        <thf-page-job-scheduler-parameters *ngIf=\"step === 2\"\n          #schedulerParameters\n          class=\"thf-md-12\"\n          [t-literals]=\"literals\"\n          [t-parameters]=\"parameters || []\"\n          [(t-value)]=\"model.executionParameter\">\n        </thf-page-job-scheduler-parameters>\n\n        <thf-page-job-scheduler-summary *ngIf=\"step === 3\"\n          class=\"thf-md-12\"\n          [t-literals]=\"literals\"\n          [t-parameters]=\"parameters\"\n          [t-value]=\"model\">\n        </thf-page-job-scheduler-summary>\n      </form>\n    </thf-container>\n  </div>\n\n</thf-page-default>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [`
    thf-container .thf-container {
      overflow-y: unset;
    }
  `]
            }] }
];
/** @nocollapse */
ThfPageJobSchedulerComponent.ctorParameters = () => [
    { type: ThfPageJobSchedulerLookupService },
    { type: ActivatedRoute },
    { type: ThfDialogService },
    { type: ThfNotificationService },
    { type: Router },
    { type: ThfPageJobSchedulerService }
];
ThfPageJobSchedulerComponent.propDecorators = {
    schedulerExecution: [{ type: ViewChild, args: ['schedulerExecution', { static: true },] }],
    schedulerParameters: [{ type: ViewChild, args: ['schedulerParameters', { static: true },] }]
};
if (false) {
    /** @type {?} */
    ThfPageJobSchedulerComponent.prototype.isEdit;
    /** @type {?} */
    ThfPageJobSchedulerComponent.prototype.literals;
    /** @type {?} */
    ThfPageJobSchedulerComponent.prototype.parameters;
    /** @type {?} */
    ThfPageJobSchedulerComponent.prototype.saveOperation;
    /** @type {?} */
    ThfPageJobSchedulerComponent.prototype.step;
    /**
     * @type {?}
     * @private
     */
    ThfPageJobSchedulerComponent.prototype.backPageAction;
    /**
     * @type {?}
     * @private
     */
    ThfPageJobSchedulerComponent.prototype.concludePageActions;
    /**
     * @type {?}
     * @private
     */
    ThfPageJobSchedulerComponent.prototype.nextPageActions;
    /** @type {?} */
    ThfPageJobSchedulerComponent.prototype.jobSchedulerActions;
    /** @type {?} */
    ThfPageJobSchedulerComponent.prototype.steps;
    /** @type {?} */
    ThfPageJobSchedulerComponent.prototype.schedulerExecution;
    /** @type {?} */
    ThfPageJobSchedulerComponent.prototype.schedulerParameters;
    /** @type {?} */
    ThfPageJobSchedulerComponent.prototype.thfPageDynamicLookupService;
    /**
     * @type {?}
     * @private
     */
    ThfPageJobSchedulerComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    ThfPageJobSchedulerComponent.prototype.thfDialogService;
    /**
     * @type {?}
     * @private
     */
    ThfPageJobSchedulerComponent.prototype.thfNotification;
    /**
     * @type {?}
     * @private
     */
    ThfPageJobSchedulerComponent.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,