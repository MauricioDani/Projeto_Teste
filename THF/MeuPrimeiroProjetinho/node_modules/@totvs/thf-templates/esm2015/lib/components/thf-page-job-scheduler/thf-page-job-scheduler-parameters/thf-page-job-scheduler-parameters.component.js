/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';
export class ThfPageJobSchedulerParametersComponent {
    constructor() {
        this.literals = (/** @type {?} */ ({}));
        this.parameters = [];
        this.valueChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.form) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.form.valueChanges.subscribe((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => {
                    this.valueChange.emit(value);
                }));
            }));
        }
    }
}
ThfPageJobSchedulerParametersComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-job-scheduler-parameters',
                template: "<ng-container *ngIf=\"parameters && parameters.length; then formFieldsTemplate; else parametersNotFoundTemplate\">\n</ng-container>\n\n<ng-template #parametersNotFoundTemplate>\n\n  <div class=\"thf-text-center\">\n    <span class=\"thf-icon thf-icon-info\"></span>\n    <span class=\"thf-font-text-large\">\n      {{ literals.parametersNotFound }}\n    </span>\n  </div>\n\n</ng-template>\n\n<ng-template #formFieldsTemplate>\n  <form #parametersForm=\"ngForm\">\n    <thf-dynamic-form\n      t-group-form\n      [t-fields]=\"parameters\"\n      [t-value]=\"value\">\n    </thf-dynamic-form>\n  </form>\n</ng-template>\n"
            }] }
];
ThfPageJobSchedulerParametersComponent.propDecorators = {
    form: [{ type: ViewChild, args: ['parametersForm', { static: true },] }],
    literals: [{ type: Input, args: ['t-literals',] }],
    parameters: [{ type: Input, args: ['t-parameters',] }],
    value: [{ type: Input, args: ['t-value',] }],
    valueChange: [{ type: Output, args: ['t-valueChange',] }]
};
if (false) {
    /** @type {?} */
    ThfPageJobSchedulerParametersComponent.prototype.form;
    /** @type {?} */
    ThfPageJobSchedulerParametersComponent.prototype.literals;
    /** @type {?} */
    ThfPageJobSchedulerParametersComponent.prototype.parameters;
    /** @type {?} */
    ThfPageJobSchedulerParametersComponent.prototype.value;
    /** @type {?} */
    ThfPageJobSchedulerParametersComponent.prototype.valueChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhZ2Utam9iLXNjaGVkdWxlci1wYXJhbWV0ZXJzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdGVtcGxhdGVzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLXBhZ2Utam9iLXNjaGVkdWxlci90aGYtcGFnZS1qb2Itc2NoZWR1bGVyLXBhcmFtZXRlcnMvdGhmLXBhZ2Utam9iLXNjaGVkdWxlci1wYXJhbWV0ZXJzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pHLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVF4QyxNQUFNLE9BQU8sc0NBQXNDO0lBSm5EO1FBUXVCLGFBQVEsR0FBRyxtQkFBTSxFQUFFLEVBQUEsQ0FBQztRQUVsQixlQUFVLEdBQStCLEVBQUUsQ0FBQztRQUkxQyxnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBY3BGLENBQUM7Ozs7SUFaQyxlQUFlO1FBQ2IsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsVUFBVTs7O1lBQUMsR0FBRyxFQUFFO2dCQUVkLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVM7Ozs7Z0JBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ3ZDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMvQixDQUFDLEVBQUMsQ0FBQztZQUVMLENBQUMsRUFBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7WUExQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxtQ0FBbUM7Z0JBQzdDLHluQkFBK0Q7YUFDaEU7OzttQkFHRSxTQUFTLFNBQUMsZ0JBQWdCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO3VCQUU1QyxLQUFLLFNBQUMsWUFBWTt5QkFFbEIsS0FBSyxTQUFDLGNBQWM7b0JBRXBCLEtBQUssU0FBQyxTQUFTOzBCQUVmLE1BQU0sU0FBQyxlQUFlOzs7O0lBUnZCLHNEQUE0RDs7SUFFNUQsMERBQXlDOztJQUV6Qyw0REFBbUU7O0lBRW5FLHVEQUF3Qjs7SUFFeEIsNkRBQWtGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdGb3JtIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBUaGZEeW5hbWljRm9ybUZpZWxkIH0gZnJvbSAnQHRvdHZzL3RoZi11aSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoZi1wYWdlLWpvYi1zY2hlZHVsZXItcGFyYW1ldGVycycsXG4gIHRlbXBsYXRlVXJsOiAndGhmLXBhZ2Utam9iLXNjaGVkdWxlci1wYXJhbWV0ZXJzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUaGZQYWdlSm9iU2NoZWR1bGVyUGFyYW1ldGVyc0NvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG4gIEBWaWV3Q2hpbGQoJ3BhcmFtZXRlcnNGb3JtJywgeyBzdGF0aWM6IHRydWUgfSkgZm9ybTogTmdGb3JtO1xuXG4gIEBJbnB1dCgndC1saXRlcmFscycpIGxpdGVyYWxzID0gPGFueT4ge307XG5cbiAgQElucHV0KCd0LXBhcmFtZXRlcnMnKSBwYXJhbWV0ZXJzOiBBcnJheTxUaGZEeW5hbWljRm9ybUZpZWxkPiA9IFtdO1xuXG4gIEBJbnB1dCgndC12YWx1ZScpIHZhbHVlO1xuXG4gIEBPdXRwdXQoJ3QtdmFsdWVDaGFuZ2UnKSB2YWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKHRoaXMuZm9ybSkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgdGhpcy5mb3JtLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2UuZW1pdCh2YWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxufVxuIl19