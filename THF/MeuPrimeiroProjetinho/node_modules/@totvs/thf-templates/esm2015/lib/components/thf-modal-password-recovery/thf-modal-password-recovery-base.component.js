/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, thfLocaleDefault } from '../../utils/util';
import { thfModalPasswordRecoveryLiterals } from './literals/i18n/thf-modal-password-recovery-literals';
import { ThfModalPasswordRecoveryType } from './enums/thf-modal-password-recovery-type.enum';
/** @type {?} */
const ThfModalPasswordRecoveryDefaultMaxLength = 15;
/** @type {?} */
const ThfModalPasswordRecoveryDefaultMinLength = 15;
/** @type {?} */
const ThfModalPasswordRecoveryDefaultPhone = '(99) 99999-9999';
/** @type {?} */
const ThfModalPasswordRecoveryTypeDefault = ThfModalPasswordRecoveryType.Email;
/**
 * \@description
 *
 * O componente `thf-modal-password-recovery` é utilizado como template para solicitação de troca de senha.
 *
 * É composto por uma modal que possui três telas, cada uma com as seguintes características:
 *
 * - A primeira possui campos para preenchimento de email ou número de telefone;
 * - Tela com campo para preenchimento de código SMS enviado para o número de telefone enviado;
 * - A terceira se trata de uma confirmação de envio de link para a caixa de email do usuário.
 *
 *
 * A propriedade `t-url-recovery` automatiza a rotina do componente e simplifica o processo
 * para recuperação de senha, bastando definir uma url para requisição dos recursos.
 * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
 * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
 *
 *
 * Para a modal de digitação de código SMS, é possível definir uma mensagem de erro
 * customizada com a propriedade `t-code-error` e há um link para
 * reenvio de código por SMS. Ao reenviar, o evento `t-code-submit` envia um objeto com o telefone do usuário e a quantidade
 * de vezes em que o usuário fez a solicitação de reenvio.
 *
 * > É indicada a utilização da tela de digitação para envio de código SMS apenas
 * se a opção por envio SMS for disponibilizada para o usuário.
 *
 *
 * A modal de confirmação contém uma ação de reenvio e o evento `t-submit`
 * é quem passa o objeto contendo o email em conjunto com a quantidade de tentativas de reenvio.
 *
 * > A tela de confirmação é indicada para quando o usuário solicitar a troca através do email.
 *
 * > Os textos das modals são pré-definidos, imutáveis e são traduzidos de acordo com o idioma do *browser* (pt, en e es)
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/\@totvs/thf-theme/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 * @abstract
 */
export class ThfModalPasswordRecoveryBaseComponent {
    constructor() {
        this._phoneMask = ThfModalPasswordRecoveryDefaultPhone;
        this._type = ThfModalPasswordRecoveryTypeDefault;
        this.maxLength = ThfModalPasswordRecoveryDefaultMaxLength;
        this.minLength = ThfModalPasswordRecoveryDefaultMinLength;
        this.literals = Object.assign({}, thfModalPasswordRecoveryLiterals[thfLocaleDefault], thfModalPasswordRecoveryLiterals[browserLanguage()]);
        /**
         * \@optional
         *
         * \@description
         *
         * Ação contendo como parâmetro o código enviado por SMS e digitado pelo usuário.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
         */
        this.codeSubmit = new EventEmitter();
        /**
         * \@optional
         *
         * \@description
         *
         * Ação contendo o email como parâmetro e que é executada quando o usuário clica sobres os botões de 'enviar' e 'reenviar' e-mail.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
         */
        this.submit = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Definição do e-mail que é exibido na mensagem para contato de suporte.
     * @param {?} value
     * @return {?}
     */
    set contactEmail(value) {
        this._contactEmail = value;
        this.smsCodeErrorMessage = this.concatenateSMSErrorMessage(value);
    }
    /**
     * @return {?}
     */
    get contactEmail() {
        return this._contactEmail;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Definição da mascara do campo de telefone.
     *
     * \@default `(99) 99999-9999`
     * @param {?} value
     * @return {?}
     */
    set phoneMask(value) {
        this._phoneMask = value || ThfModalPasswordRecoveryDefaultPhone;
        this.minLength = this.maxLength = this._phoneMask.length;
    }
    /**
     * @return {?}
     */
    get phoneMask() {
        return this._phoneMask;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define o tipo de recuperação de senha que será exibido.
     *
     * \@default `ThfModalPasswordRecoveryType.Email`
     *
     * @param {?} value
     * @return {?}
     */
    set type(value) {
        this._type = ((/** @type {?} */ (Object))).values(ThfModalPasswordRecoveryType).includes(value) ? value : ThfModalPasswordRecoveryTypeDefault;
    }
    /**
     * @return {?}
     */
    get type() {
        return this._type;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    concatenateSMSErrorMessage(value) {
        /** @type {?} */
        const literalCodeErrorMessage = this.literals.smsCodeErrorMessagePhrase;
        return value && value !== '' ? `${literalCodeErrorMessage} ${this.literals.prepositionIn} ${value}.` : literalCodeErrorMessage;
    }
}
ThfModalPasswordRecoveryBaseComponent.propDecorators = {
    contactEmail: [{ type: Input, args: ['t-contact-email',] }],
    codeError: [{ type: Input, args: ['t-code-error',] }],
    phoneMask: [{ type: Input, args: ['t-phone-mask',] }],
    type: [{ type: Input, args: ['t-type',] }],
    urlRecovery: [{ type: Input, args: ['t-url-recovery',] }],
    codeSubmit: [{ type: Output, args: ['t-code-submit',] }],
    submit: [{ type: Output, args: ['t-submit',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfModalPasswordRecoveryBaseComponent.prototype._contactEmail;
    /**
     * @type {?}
     * @private
     */
    ThfModalPasswordRecoveryBaseComponent.prototype._phoneMask;
    /**
     * @type {?}
     * @private
     */
    ThfModalPasswordRecoveryBaseComponent.prototype._type;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.email;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.maxLength;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.minLength;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.modalPasswordRecoveryTypeAll;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.phone;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.smsCode;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.smsCodeErrorMessage;
    /** @type {?} */
    ThfModalPasswordRecoveryBaseComponent.prototype.literals;
    /**
     * \@optional
     *
     * \@description
     *
     * Definição de mensagem de erro customizada para quando o usuário passar um código SMS inválido ou errado.
     * @type {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.codeError;
    /**
     * \@optional
     *
     * \@description
     *
     * Endpoint usado pelo template para requisição do recurso. Quando preenchido,
     * o métodos `t-submit` e `t-submit-code` serão ignorados e o componente adquirirá automatização
     * para o processo de solicitação de troca de senha.
     *
     * ### Processos
     * Ao digitar um valor válido no campo de email/telefone e pressionar **enviar**,
     * o componente fará uma requisição `POST` na url especificada nesta propriedade passando o objeto contendo o valor definido pelo usuário.
     *
     * ```
     * body {
     *  email: email,
     *  retry?: retry
     * }
     * ```
     *
     *
     * #### Recuperação por email
     * Para a recuperação de senha por **email**, o código de resposta HTTP de status esperado é `204`.
     *
     * Em caso de **sucesso**, será exibida a modal de confirmação de e-mail para o usuário.
     *
     *
     * > A ação **Reenviar** na tela de confirmação efetua uma nova requisição
     * passando-se o objeto com incremento para o valor da propriedade **retry**.
     *
     * *Processo finalizado.*
     *
     *
     * #### Recuperação por SMS
     * Se a opção de recuperação for por **SMS**, o código de status de sucesso deve ser `200`.
     * Em caso de **sucesso**, abre-se a modal de digitação de código SMS e a resposta
     * desta requisição deve retornar uma definição de dados abaixo:
     *
     * ```
     * 200:
     *  {
     *    hash: hash,
     *    urlValidationCode?: url
     *  }
     * ```
     *
     *
     * - O **hash** será o código de validação da solicitação do SMS para ser enviado juntamente com o código de verificação do SMS;
     * - **urlValidationCode** é a url usada para validação do código enviado por SMS.
     *
     *
     * > Caso não seja passado urlValidationCode, o endpoint usado para validação do código será `<t-url-recovery>/validation`.
     *
     *
     * #### Validação do código SMS
     * Ao digitar um valor válido no campo de código SMS e pressionar **continuar**, o componente fará uma requisição `POST` contendo:
     *
     * ```
     * POST /<t-url-recovery>/validation OU /<urlValidationCode>
     * Body {
     *  hash: hash,
     *  code: code
     * }
     * ```
     *
     *
     * O código de resposta HTTP de status esperado é `200`.
     *
     * Em caso de **erro** na validação do código SMS, a modal se mantém com o campo para digitação
     * de código SMS
     *
     *
     * > Pode-se atribuir a mensagem de erro (message) para o atributo `t-code-error` conforme retorno abaixo:
     *
     * ```
     * 400
     *  {
     *    error {
     *      message: 'Error Message'
     *    }
     *  }
     * ```
     *
     *
     * Em caso de **sucesso**, espera-se a resposta desta requisição retornando a seguinte definição:
     *
     * ```
     * 200:
     *  {
     *    token: token,
     *    urlChangePassword?: url
     *  }
     * ```
     *
     *
     * - **token**: Token de alteração de senha;
     * - **urlChangePassword**: url para o formulário de alteração de senha.
     *
     *
     * O componente está configurado para redirecionar para a url estabelecida em `urlChangePassword`.
     *
     * > Caso não seja passado valor para urlChangePassword,
     * a url usada para validação será a `<t-url-recovery>/changePassword?token=<token>`.
     *
     * *Processo finalizado.*
     * @type {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.urlRecovery;
    /**
     * \@optional
     *
     * \@description
     *
     * Ação contendo como parâmetro o código enviado por SMS e digitado pelo usuário.
     *
     * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
     * @type {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.codeSubmit;
    /**
     * \@optional
     *
     * \@description
     *
     * Ação contendo o email como parâmetro e que é executada quando o usuário clica sobres os botões de 'enviar' e 'reenviar' e-mail.
     *
     * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
     * @type {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.submit;
    /**
     * Acão para conclusão de processo e fechamento da modal. Indica-se sua utilização
     * para após o envio e validação do código SMS enviado pelo usuário.
     *
     * > Nas modals em que há a ação de 'cancelar' dispensa-se o uso desta ação pois o componente já trata o fechamento da modal.
     * @abstract
     * @return {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.completed = function () { };
    /**
     * Abre a modal de preenchimento de email ou número de telefone para solicitação de troca de senha.
     * @abstract
     * @return {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.open = function () { };
    /**
     * Abre a modal de confirmação de envio de email.
     * @abstract
     * @return {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.openConfirmation = function () { };
    /**
     * Abre a modal de preenchimento do código SMS enviado ao usuário.
     * @abstract
     * @return {?}
     */
    ThfModalPasswordRecoveryBaseComponent.prototype.openSmsCode = function () { };
}
//# sourceMappingURL=data:application/json;base64,