/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, Input } from '@angular/core';
import { browserLanguage, thfLocaleDefault } from '../../../utils/util';
import { thfPageBlockedUserLiterals } from './../literals/i18n/thf-page-blocked-user-literals';
import { ThfPageBlockedUserReason } from '../enums/thf-page-blocked-user-reason.enum';
export class ThfPageBlockedUserReasonComponent {
    /**
     * @param {?} changeDetector
     */
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.reason || changes.params) {
            this.getLiterals();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getLiterals();
    }
    /**
     * @return {?}
     */
    getImageByReasonType() {
        /** @type {?} */
        let reasonImage;
        switch (this.reason) {
            case 'none': {
                reasonImage = 'big-lock';
                break;
            }
            case 'exceededAttempts': {
                reasonImage = 'blocked-user';
                break;
            }
            case 'expiredPassword': {
                reasonImage = 'expired';
                break;
            }
        }
        return `./assets/images/${reasonImage}.svg`;
    }
    /**
     * @return {?}
     */
    getParams() {
        this.literalParams =
            this.reason === 'expiredPassword' ? [this.params.days, this.params.days] : [this.params.attempts, this.params.hours];
    }
    /**
     * @private
     * @return {?}
     */
    getLiterals() {
        this.getParams();
        this.literals = Object.assign({}, thfPageBlockedUserLiterals[this.reason][thfLocaleDefault], thfPageBlockedUserLiterals[this.reason][browserLanguage()]);
        this.changeDetector.detectChanges();
    }
}
ThfPageBlockedUserReasonComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-blocked-user-reason',
                template: "<div class=\"thf-page-blocked-user-reason-content\">\n  <img \n    class=\"thf-page-blocked-user-image thf-mb-3\" \n    [src]=\"getImageByReasonType()\"> \n  <div class=\"thf-page-blocked-user-header thf-mb-md-3 thf-row\">\n    <div class=\"thf-md-12\">{{ literals?.title }}</div>\n  </div>\n  <div class=\"thf-page-blocked-user-text thf-font-text thf-row\">\n    <div class=\"thf-mb-sm-2 thf-mb-md-3 thf-md-12 thf-page-blocked-user-text-bold\">{{ literals?.firstPhrase | thfI18n:literalParams }}</div>\n    <div class=\"thf-mb-sm-2 thf-mb-md-3 thf-md-12\">{{ literals?.secondPhrase }}</div>\n    <div class=\"thf-mb-sm-2 thf-mb-md-3 thf-md-12\" *ngIf=\"literals?.thirdPhrase\">{{ literals?.thirdPhrase }}</div>\n  </div>\n</div>"
            }] }
];
/** @nocollapse */
ThfPageBlockedUserReasonComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThfPageBlockedUserReasonComponent.propDecorators = {
    params: [{ type: Input, args: ['t-params',] }],
    reason: [{ type: Input, args: ['t-reason',] }]
};
if (false) {
    /** @type {?} */
    ThfPageBlockedUserReasonComponent.prototype.literalParams;
    /** @type {?} */
    ThfPageBlockedUserReasonComponent.prototype.literals;
    /** @type {?} */
    ThfPageBlockedUserReasonComponent.prototype.params;
    /** @type {?} */
    ThfPageBlockedUserReasonComponent.prototype.reason;
    /**
     * @type {?}
     * @private
     */
    ThfPageBlockedUserReasonComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXRlbXBsYXRlcy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1wYWdlLWJsb2NrZWQtdXNlci90aGYtcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uL3RoZi1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBb0MsTUFBTSxlQUFlLENBQUM7QUFFdEcsT0FBTyxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXhFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBQy9GLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBT3RGLE1BQU0sT0FBTyxpQ0FBaUM7Ozs7SUFTNUMsWUFBb0IsY0FBaUM7UUFBakMsbUJBQWMsR0FBZCxjQUFjLENBQW1CO0lBQUcsQ0FBQzs7Ozs7SUFFekQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ3BDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNwQjtJQUNILENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7Ozs7SUFFRCxvQkFBb0I7O1lBQ2QsV0FBVztRQUVmLFFBQVEsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNuQixLQUFLLE1BQU0sQ0FBQyxDQUFDO2dCQUNYLFdBQVcsR0FBRyxVQUFVLENBQUM7Z0JBQ3pCLE1BQU07YUFDUDtZQUNELEtBQUssa0JBQWtCLENBQUMsQ0FBQztnQkFDdkIsV0FBVyxHQUFHLGNBQWMsQ0FBQztnQkFDN0IsTUFBTTthQUNQO1lBQ0QsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDO2dCQUN0QixXQUFXLEdBQUcsU0FBUyxDQUFDO2dCQUN4QixNQUFNO2FBQ1A7U0FDRjtRQUNELE9BQU8sbUJBQW1CLFdBQVcsTUFBTSxDQUFDO0lBQzlDLENBQUM7Ozs7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLGFBQWE7WUFDaEIsSUFBSSxDQUFDLE1BQU0sS0FBSyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekgsQ0FBQzs7Ozs7SUFFTyxXQUFXO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUVqQixJQUFJLENBQUMsUUFBUSxxQkFDUiwwQkFBMEIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsRUFDekQsMEJBQTBCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQzlELENBQUM7UUFFRixJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3RDLENBQUM7OztZQTNERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDhCQUE4QjtnQkFDeEMscXVCQUE0RDthQUM3RDs7OztZQVhRLGlCQUFpQjs7O3FCQWlCdkIsS0FBSyxTQUFDLFVBQVU7cUJBRWhCLEtBQUssU0FBQyxVQUFVOzs7O0lBTGpCLDBEQUFjOztJQUNkLHFEQUEwRjs7SUFFMUYsbURBQTBEOztJQUUxRCxtREFBb0Q7Ozs7O0lBRXhDLDJEQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBicm93c2VyTGFuZ3VhZ2UsIHRoZkxvY2FsZURlZmF1bHQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgdGhmUGFnZUJsb2NrZWRVc2VyTGl0ZXJhbHMgfSBmcm9tICcuLy4uL2xpdGVyYWxzL2kxOG4vdGhmLXBhZ2UtYmxvY2tlZC11c2VyLWxpdGVyYWxzJztcbmltcG9ydCB7IFRoZlBhZ2VCbG9ja2VkVXNlclJlYXNvbiB9IGZyb20gJy4uL2VudW1zL3RoZi1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24uZW51bSc7XG5pbXBvcnQgeyBUaGZQYWdlQmxvY2tlZFVzZXJSZWFzb25QYXJhbXMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL3RoZi1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24tcGFyYW1zLmludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RoZi1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vdGhmLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgVGhmUGFnZUJsb2NrZWRVc2VyUmVhc29uQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQge1xuXG4gIGxpdGVyYWxQYXJhbXM7XG4gIGxpdGVyYWxzOiB7dGl0bGU6IHN0cmluZywgZmlyc3RQaHJhc2U6IHN0cmluZywgc2Vjb25kUGhyYXNlOiBzdHJpbmcsIHRoaXJkUGhyYXNlOiBzdHJpbmd9O1xuXG4gIEBJbnB1dCgndC1wYXJhbXMnKSBwYXJhbXM6IFRoZlBhZ2VCbG9ja2VkVXNlclJlYXNvblBhcmFtcztcblxuICBASW5wdXQoJ3QtcmVhc29uJykgcmVhc29uOiBUaGZQYWdlQmxvY2tlZFVzZXJSZWFzb247XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLnJlYXNvbiB8fCBjaGFuZ2VzLnBhcmFtcykge1xuICAgICAgdGhpcy5nZXRMaXRlcmFscygpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuZ2V0TGl0ZXJhbHMoKTtcbiAgfVxuXG4gIGdldEltYWdlQnlSZWFzb25UeXBlKCkge1xuICAgIGxldCByZWFzb25JbWFnZTtcblxuICAgIHN3aXRjaCAodGhpcy5yZWFzb24pIHtcbiAgICAgIGNhc2UgJ25vbmUnOiB7XG4gICAgICAgIHJlYXNvbkltYWdlID0gJ2JpZy1sb2NrJztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdleGNlZWRlZEF0dGVtcHRzJzoge1xuICAgICAgICByZWFzb25JbWFnZSA9ICdibG9ja2VkLXVzZXInO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2V4cGlyZWRQYXNzd29yZCc6IHtcbiAgICAgICAgcmVhc29uSW1hZ2UgPSAnZXhwaXJlZCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYC4vYXNzZXRzL2ltYWdlcy8ke3JlYXNvbkltYWdlfS5zdmdgO1xuICB9XG5cbiAgZ2V0UGFyYW1zKCkge1xuICAgIHRoaXMubGl0ZXJhbFBhcmFtcyA9XG4gICAgICB0aGlzLnJlYXNvbiA9PT0gJ2V4cGlyZWRQYXNzd29yZCcgPyBbdGhpcy5wYXJhbXMuZGF5cywgdGhpcy5wYXJhbXMuZGF5c10gOiBbdGhpcy5wYXJhbXMuYXR0ZW1wdHMsIHRoaXMucGFyYW1zLmhvdXJzXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TGl0ZXJhbHMoKSB7XG4gICAgdGhpcy5nZXRQYXJhbXMoKTtcblxuICAgIHRoaXMubGl0ZXJhbHMgPSB7XG4gICAgICAuLi50aGZQYWdlQmxvY2tlZFVzZXJMaXRlcmFsc1t0aGlzLnJlYXNvbl1bdGhmTG9jYWxlRGVmYXVsdF0sXG4gICAgICAuLi50aGZQYWdlQmxvY2tlZFVzZXJMaXRlcmFsc1t0aGlzLnJlYXNvbl1bYnJvd3Nlckxhbmd1YWdlKCldLFxuICAgIH07XG5cbiAgICB0aGlzLmNoYW5nZURldGVjdG9yLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG59XG4iXX0=