/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, isExternalLink, isTypeof, thfLocaleDefault } from '../../../utils/util';
import { thfPageLoginLiteralsDefault } from './../thf-page-login-base.component';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para definição da mensagem de aviso de bloqueio do `thf-page-login`.
 */
export class ThfPageLoginPopoverComponent {
    /**
     * @param {?} changeDetector
     */
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        /**
         * se 't-recovery' for do tipo Function ou ThfPageLoginRecovery, emite para o método 'openUrl' do componente 'thf-page-login'
         */
        this.forgotPassword = new EventEmitter();
    }
    /**
     * exibe o link de 'esqueci minha senha' e verifica se o valor é um link interno ou externo
     * @param {?} value
     * @return {?}
     */
    set recovery(value) {
        this._recovery = value;
        if (isTypeof(value, 'string')) {
            this.recoveryType = isExternalLink(value) ? 'externalLink' : 'internalLink';
        }
    }
    /**
     * @return {?}
     */
    get recovery() {
        return this._recovery;
    }
    /**
     * define se a mensagem deverá ser exibida caso seja maior que 0(zero)
     * @param {?} value
     * @return {?}
     */
    set remainingAttempts(value) {
        this._remainingAttempts = value;
        this.getLiterals(this.selectedLanguage);
    }
    /**
     * @return {?}
     */
    get remainingAttempts() {
        return this._remainingAttempts;
    }
    /**
     * define o idioma da mensagem conforme selecionado no 'thf-page-login'
     * @param {?} value
     * @return {?}
     */
    set selectedLanguage(value) {
        this._selectedLanguage = value;
        this.getLiterals(value);
    }
    /**
     * @return {?}
     */
    get selectedLanguage() {
        return this._selectedLanguage;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getLiterals(this.selectedLanguage);
    }
    /**
     * @param {?} recovery
     * @return {?}
     */
    onForgotPasswordClick(recovery) {
        this.forgotPassword.emit(recovery);
    }
    /**
     * @private
     * @param {?=} language
     * @return {?}
     */
    getLiterals(language) {
        language = language || browserLanguage();
        this.literalParams = this.remainingAttempts;
        this.literals = Object.assign({}, thfPageLoginLiteralsDefault[thfLocaleDefault], thfPageLoginLiteralsDefault[language]);
        this.changeDetector.detectChanges();
    }
}
ThfPageLoginPopoverComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-login-popover',
                template: "<div class=\"thf-page-login-popover-container\">\n  <div class=\"thf-page-login-popover\">\n    <div class=\"thf-page-login-popover-arrow\"></div>\n    <div class=\"thf-page-login-popover-content\">\n      <p class=\"thf-font-text-bold thf-page-login-popover-title\">\n        {{ literals?.titlePopover }}\n      </p>\n      <p class=\"thf-font-text\">\n        {{ literals?.forgotYourPassword }}\n      </p>\n      <p class=\"thf-font-text\">\n        {{ literals?.ifYouTryHarder }}\n        <span class=\"thf-font-text-bold thf-page-login-popover-attempts\">\n          {{ literals?.attempts | thfI18n:literalParams }}\n        </span>{{ literals?.yourUserWillBeBlocked }}\n      </p>\n      <br>\n      <p class=\"thf-font-text\">\n        {{ literals?.createANewPasswordNow }}\n      </p>\n      <div *ngIf=\"recovery\" class=\"thf-font-text-bold thf-mt-1 thf-page-login-popover-link-container\">\n        <a *ngIf=\"recoveryType === 'internalLink'\"\n          class=\"thf-page-login-popover-link\"\n          [routerLink]=\"recovery\">\n          {{ literals?.iForgotMyPassword }}\n        </a>\n        <a *ngIf=\"recoveryType === 'externalLink'\"\n          class=\"thf-page-login-popover-link\"\n          [href]=\"recovery\"\n          target=\"_blank\">\n          {{ literals?.iForgotMyPassword }}\n        </a>\n        <a *ngIf=\"!recoveryType\"\n          class=\"thf-page-login-popover-link\"\n          (click)=\"onForgotPasswordClick(recovery)\">\n          {{ literals?.iForgotMyPassword }}\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
ThfPageLoginPopoverComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThfPageLoginPopoverComponent.propDecorators = {
    recovery: [{ type: Input, args: ['t-recovery',] }],
    remainingAttempts: [{ type: Input, args: ['t-remaining-attempts',] }],
    selectedLanguage: [{ type: Input, args: ['t-selected-language',] }],
    forgotPassword: [{ type: Output, args: ['t-forgot-password',] }]
};
if (false) {
    /** @type {?} */
    ThfPageLoginPopoverComponent.prototype.literals;
    /** @type {?} */
    ThfPageLoginPopoverComponent.prototype.literalParams;
    /** @type {?} */
    ThfPageLoginPopoverComponent.prototype.recoveryType;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginPopoverComponent.prototype._recovery;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginPopoverComponent.prototype._remainingAttempts;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginPopoverComponent.prototype._selectedLanguage;
    /**
     * se 't-recovery' for do tipo Function ou ThfPageLoginRecovery, emite para o método 'openUrl' do componente 'thf-page-login'
     * @type {?}
     */
    ThfPageLoginPopoverComponent.prototype.forgotPassword;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginPopoverComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhZ2UtbG9naW4tcG9wb3Zlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG90dnMvdGhmLXRlbXBsYXRlcy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RoZi1wYWdlLWxvZ2luL3RoZi1wYWdlLWxvZ2luLXBvcG92ZXIvdGhmLXBhZ2UtbG9naW4tcG9wb3Zlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbEcsT0FBTyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFbEcsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFRakY7Ozs7OztHQU1HO0FBQ0gsTUFBTSxPQUFPLDRCQUE0Qjs7OztJQThDdkMsWUFBb0IsY0FBaUM7UUFBakMsbUJBQWMsR0FBZCxjQUFjLENBQW1COzs7O1FBRnhCLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUVkLENBQUM7Ozs7OztJQW5DekQsSUFBeUIsUUFBUSxDQUFDLEtBQStDO1FBQy9FLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBRXZCLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsRUFBRTtZQUM3QixJQUFJLENBQUMsWUFBWSxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUM7U0FDN0U7SUFDSCxDQUFDOzs7O0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7Ozs7OztJQUdELElBQW1DLGlCQUFpQixDQUFDLEtBQWE7UUFDaEUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFDLENBQUM7Ozs7SUFFRCxJQUFJLGlCQUFpQjtRQUNuQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztJQUNqQyxDQUFDOzs7Ozs7SUFHRCxJQUFrQyxnQkFBZ0IsQ0FBQyxLQUFhO1FBQzlELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDOzs7O0lBRUQsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDaEMsQ0FBQzs7OztJQU9ELFFBQVE7UUFDTixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFDLENBQUM7Ozs7O0lBRUQscUJBQXFCLENBQUMsUUFBUTtRQUM1QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7Ozs7SUFFTyxXQUFXLENBQUMsUUFBaUI7UUFDbkMsUUFBUSxHQUFHLFFBQVEsSUFBSSxlQUFlLEVBQUUsQ0FBQztRQUV6QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUU1QyxJQUFJLENBQUMsUUFBUSxxQkFDUiwyQkFBMkIsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUM3QywyQkFBMkIsQ0FBQyxRQUFRLENBQUMsQ0FDekMsQ0FBQztRQUVGLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7O1lBL0VGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyw2aURBQXNEO2FBQ3ZEOzs7O1lBVlEsaUJBQWlCOzs7dUJBOEJ2QixLQUFLLFNBQUMsWUFBWTtnQ0FhbEIsS0FBSyxTQUFDLHNCQUFzQjsrQkFVNUIsS0FBSyxTQUFDLHFCQUFxQjs2QkFVM0IsTUFBTSxTQUFDLG1CQUFtQjs7OztJQTFDM0IsZ0RBQVM7O0lBQ1QscURBQWM7O0lBQ2Qsb0RBQXFCOzs7OztJQUVyQixpREFBNEQ7Ozs7O0lBQzVELDBEQUFtQzs7Ozs7SUFDbkMseURBQWtDOzs7OztJQW9DbEMsc0RBQXNFOzs7OztJQUUxRCxzREFBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBicm93c2VyTGFuZ3VhZ2UsIGlzRXh0ZXJuYWxMaW5rLCBpc1R5cGVvZiwgdGhmTG9jYWxlRGVmYXVsdCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyB0aGZQYWdlTG9naW5MaXRlcmFsc0RlZmF1bHQgfSBmcm9tICcuLy4uL3RoZi1wYWdlLWxvZ2luLWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IFRoZlBhZ2VMb2dpblJlY292ZXJ5IH0gZnJvbSAnLi4vaW50ZXJmYWNlcy90aGYtcGFnZS1sb2dpbi1yZWNvdmVyeS5pbnRlcmZhY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aGYtcGFnZS1sb2dpbi1wb3BvdmVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RoZi1wYWdlLWxvZ2luLXBvcG92ZXIuY29tcG9uZW50Lmh0bWwnXG59KVxuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcGFyYSBkZWZpbmnDp8OjbyBkYSBtZW5zYWdlbSBkZSBhdmlzbyBkZSBibG9xdWVpbyBkbyBgdGhmLXBhZ2UtbG9naW5gLlxuICovXG5leHBvcnQgY2xhc3MgVGhmUGFnZUxvZ2luUG9wb3ZlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgbGl0ZXJhbHM7XG4gIGxpdGVyYWxQYXJhbXM7XG4gIHJlY292ZXJ5VHlwZTogc3RyaW5nO1xuXG4gIHByaXZhdGUgX3JlY292ZXJ5OiBzdHJpbmcgfCBGdW5jdGlvbiB8IFRoZlBhZ2VMb2dpblJlY292ZXJ5O1xuICBwcml2YXRlIF9yZW1haW5pbmdBdHRlbXB0czogbnVtYmVyO1xuICBwcml2YXRlIF9zZWxlY3RlZExhbmd1YWdlOiBzdHJpbmc7XG5cbiAgLyoqIGV4aWJlIG8gbGluayBkZSAnZXNxdWVjaSBtaW5oYSBzZW5oYScgZSB2ZXJpZmljYSBzZSBvIHZhbG9yIMOpIHVtIGxpbmsgaW50ZXJubyBvdSBleHRlcm5vICovXG4gIEBJbnB1dCgndC1yZWNvdmVyeScpIHNldCByZWNvdmVyeSh2YWx1ZTogc3RyaW5nIHwgRnVuY3Rpb24gfCBUaGZQYWdlTG9naW5SZWNvdmVyeSkge1xuICAgIHRoaXMuX3JlY292ZXJ5ID0gdmFsdWU7XG5cbiAgICBpZiAoaXNUeXBlb2YodmFsdWUsICdzdHJpbmcnKSkge1xuICAgICAgdGhpcy5yZWNvdmVyeVR5cGUgPSBpc0V4dGVybmFsTGluayh2YWx1ZSkgPyAnZXh0ZXJuYWxMaW5rJyA6ICdpbnRlcm5hbExpbmsnO1xuICAgIH1cbiAgfVxuXG4gIGdldCByZWNvdmVyeSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjb3Zlcnk7XG4gIH1cblxuICAvKiogZGVmaW5lIHNlIGEgbWVuc2FnZW0gZGV2ZXLDoSBzZXIgZXhpYmlkYSBjYXNvIHNlamEgbWFpb3IgcXVlIDAoemVybykgKi9cbiAgQElucHV0KCd0LXJlbWFpbmluZy1hdHRlbXB0cycpIHNldCByZW1haW5pbmdBdHRlbXB0cyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fcmVtYWluaW5nQXR0ZW1wdHMgPSB2YWx1ZTtcbiAgICB0aGlzLmdldExpdGVyYWxzKHRoaXMuc2VsZWN0ZWRMYW5ndWFnZSk7XG4gIH1cblxuICBnZXQgcmVtYWluaW5nQXR0ZW1wdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlbWFpbmluZ0F0dGVtcHRzO1xuICB9XG5cbiAgLyoqIGRlZmluZSBvIGlkaW9tYSBkYSBtZW5zYWdlbSBjb25mb3JtZSBzZWxlY2lvbmFkbyBubyAndGhmLXBhZ2UtbG9naW4nICovXG4gIEBJbnB1dCgndC1zZWxlY3RlZC1sYW5ndWFnZScpIHNldCBzZWxlY3RlZExhbmd1YWdlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zZWxlY3RlZExhbmd1YWdlID0gdmFsdWU7XG4gICAgdGhpcy5nZXRMaXRlcmFscyh2YWx1ZSk7XG4gIH1cblxuICBnZXQgc2VsZWN0ZWRMYW5ndWFnZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWRMYW5ndWFnZTtcbiAgfVxuXG4gIC8qKiBzZSAndC1yZWNvdmVyeScgZm9yIGRvIHRpcG8gRnVuY3Rpb24gb3UgVGhmUGFnZUxvZ2luUmVjb3ZlcnksIGVtaXRlIHBhcmEgbyBtw6l0b2RvICdvcGVuVXJsJyBkbyBjb21wb25lbnRlICd0aGYtcGFnZS1sb2dpbicgKi9cbiAgQE91dHB1dCgndC1mb3Jnb3QtcGFzc3dvcmQnKSBmb3Jnb3RQYXNzd29yZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuZ2V0TGl0ZXJhbHModGhpcy5zZWxlY3RlZExhbmd1YWdlKTtcbiAgfVxuXG4gIG9uRm9yZ290UGFzc3dvcmRDbGljayhyZWNvdmVyeSkge1xuICAgIHRoaXMuZm9yZ290UGFzc3dvcmQuZW1pdChyZWNvdmVyeSk7XG4gIH1cblxuICBwcml2YXRlIGdldExpdGVyYWxzKGxhbmd1YWdlPzogc3RyaW5nKSB7XG4gICAgbGFuZ3VhZ2UgPSBsYW5ndWFnZSB8fCBicm93c2VyTGFuZ3VhZ2UoKTtcblxuICAgIHRoaXMubGl0ZXJhbFBhcmFtcyA9IHRoaXMucmVtYWluaW5nQXR0ZW1wdHM7XG5cbiAgICB0aGlzLmxpdGVyYWxzID0ge1xuICAgICAgLi4udGhmUGFnZUxvZ2luTGl0ZXJhbHNEZWZhdWx0W3RoZkxvY2FsZURlZmF1bHRdLFxuICAgICAgLi4udGhmUGFnZUxvZ2luTGl0ZXJhbHNEZWZhdWx0W2xhbmd1YWdlXSxcbiAgICB9O1xuXG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxufVxuIl19