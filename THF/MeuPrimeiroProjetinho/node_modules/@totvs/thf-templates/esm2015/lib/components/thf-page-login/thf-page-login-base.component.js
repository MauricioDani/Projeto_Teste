/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, convertToBoolean, convertToInt, isExternalLink, isTypeof, thfLocaleDefault } from './../../utils/util';
import { ThfPageLoginAuthenticationType } from './enums/thf-page-login-authentication-type.enum';
/** @type {?} */
const thfPageLoginContentMaxLength = 40;
/** @type {?} */
export const thfPageLoginLiteralsDefault = {
    en: (/** @type {?} */ ({
        title: 'Welcome',
        loginErrorPattern: 'Invalid Login',
        loginHint: `Your login user was given to you at your first day.
    If you don't have this information contact support`,
        loginPlaceholder: 'Insert your e-mail',
        passwordErrorPattern: 'Invalid Password',
        passwordPlaceholder: 'Insert your password',
        customFieldErrorPattern: 'Invalid value',
        customFieldPlaceholder: 'Please enter a value',
        rememberUser: 'Automatic login',
        rememberUserHint: 'You can disable this option in system configuration',
        submitLabel: 'Enter',
        submittedLabel: 'Loading...',
        forgotPassword: 'Forgot your Password?',
        highlightInfo: '',
        registerUrl: 'New register',
        titlePopover: 'Oops!',
        forgotYourPassword: 'Forgot your password?',
        ifYouTryHarder: 'If you try ',
        attempts: '{0} more time(s) ',
        yourUserWillBeBlocked: 'without success your user will be blocked and you will be left 24 hours without being able to access :(',
        createANewPasswordNow: 'Better create a new password now! You will be able to log into the system right away.',
        iForgotMyPassword: 'I forgot my password'
    })),
    es: (/** @type {?} */ ({
        title: 'Bienvenido',
        loginErrorPattern: 'Login inválido',
        loginHint: `Su usuario ha sido entregado para usted en su primer día.
    Si no tiene esta información, póngase en contacto con el soporte técnico`,
        loginPlaceholder: 'Inserte su e-mail',
        passwordErrorPattern: 'Contraseña inválida',
        passwordPlaceholder: 'Inserte su contraseña',
        customFieldErrorPattern: 'Valor no válido.',
        customFieldPlaceholder: 'Por favor introduzca un valor',
        rememberUser: 'Inicio de sesión automáticamente',
        rememberUserHint: 'Puede deshabilitar esta opción en el menú del sistema.',
        submitLabel: 'Entrar',
        submittedLabel: 'Cargando...',
        forgotPassword: 'Olvidaste tu contraseña?',
        highlightInfo: '',
        registerUrl: 'Nuevo registro',
        titlePopover: 'Opa!',
        forgotYourPassword: 'Olvidaste tu contraseña?',
        ifYouTryHarder: 'Si intenta más ',
        attempts: '{0} vez/veces ',
        yourUserWillBeBlocked: 'sin éxito su usuario sera bloqueado y usted vás permanecer 24 horas sin poder acceder a :(',
        createANewPasswordNow: '¡Mejor crear una nueva contraseña ahora! Usted podrá entrar en el sistema inmediatamente después.',
        iForgotMyPassword: 'Olvide mi contraseña'
    })),
    pt: (/** @type {?} */ ({
        title: 'Bem-vindo',
        loginErrorPattern: 'Login inválido',
        loginHint: `Seu usuário foi entregue a você no seu primeiro dia.
    Caso não tenha mais essa informação contacte o suporte`,
        loginPlaceholder: 'Insira seu e-mail',
        passwordErrorPattern: 'Senha inválida',
        passwordPlaceholder: 'Insira sua senha',
        customFieldErrorPattern: 'Valor inválido.',
        customFieldPlaceholder: 'Por favor insira um valor',
        rememberUser: 'Logar automaticamente',
        rememberUserHint: 'Você pode desabilitar essa opção no menu do sistema',
        submitLabel: 'Entrar',
        submittedLabel: 'Carregando...',
        forgotPassword: 'Esqueceu sua senha?',
        highlightInfo: '',
        registerUrl: 'Novo registro',
        titlePopover: 'Opa!',
        forgotYourPassword: 'Esqueceu sua senha?',
        ifYouTryHarder: 'Se tentar mais ',
        attempts: '{0} vez(es) ',
        yourUserWillBeBlocked: 'sem sucesso seu usuário será bloqueado e você fica 24 horas sem poder acessar :(',
        createANewPasswordNow: 'Melhor criar uma senha nova agora! Você vai poder entrar no sistema logo em seguida.',
        iForgotMyPassword: 'Esqueci minha senha'
    }))
};
/** @type {?} */
export const thfPageLoginLiteralIn = {
    en: 'in',
    es: 'en',
    pt: 'em'
};
/** @type {?} */
export const thfPageLoginLiteralTo = {
    en: 'to',
    es: 'al',
    pt: 'ao',
};
/**
 * \@description
 *
 * O componente `thf-page-login` é utilizado como template para tela de login.
 * Com ele é possível definirmos valores para usuário, senha e definir ações para recuperação de senha e gravação de dados do usuário.
 * Também é possível inserir uma imagem em conjunto com um texto de destaque.
 *
 *
 * A propriedade `t-authentication-url` automatiza a rotina do componente e simplifica o processo para autenticação do usuário, bastando
 * definir uma url para requisição da autenticação. A flexibilidade e praticidade podem chegar a um nível em que o desenvolvimento
 * da aplicação no *client side* é desprovida de qualquer código-fonte relacionado à rotina de login de usuário.
 * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
 * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
 *
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/\@totvs/thf-theme/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 * @abstract
 */
export class ThfPageLoginBaseComponent {
    /**
     * @param {?} loginService
     * @param {?} router
     */
    constructor(loginService, router) {
        this.loginService = loginService;
        this.router = router;
        this.allLoginErrors = [];
        this.allPasswordErrors = [];
        this.containsCustomLiterals = false;
        this.customizedDefaultLiterals = {};
        this.showExceededAttemptsWarning = false;
        this._authenticationType = ThfPageLoginAuthenticationType.Basic;
        this._hideRememberUser = false;
        this._loading = false;
        this._loginErrors = [];
        this._passwordErrors = [];
        this.rememberUser = false;
        /**
         * Evento disparado quando o usuário alterar o input do campo login.
         *
         * Esse evento receberá como parâmetro uma variável do tipo `string` com o texto informado no campo.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `t-authentication-url`.
         */
        this.loginChange = new EventEmitter();
        /**
         * Evento disparado ao submeter o formulário de login (apertando `Enter` dentro dos campos ou pressionando o botão de confirmação).
         *
         * Esse evento receberá como parâmetro um objeto do tipo `ThfPageLogin` com os dados informados no formulário.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
         *
         * > Para mais detalhes consulte a documentação sobre a interface `ThfPageLogin` mais abaixo.
         */
        this.loginSubmit = new EventEmitter();
        /**
         * Evento disparado quando o usuário alterar o input do campo password.
         *
         * Esse evento receberá como parâmetro uma variável do tipo `string` com o texto informado no campo.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `t-authentication-url`.
         */
        this.passwordChange = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Ao informar um valor do tipo `string`, o mesmo será aplicado como a chave do campo customizado e utilizará
     * os valores padrões contidos na propriedade `literals` como `customFieldErrorPattern` e `customFieldPlaceholder`.
     *
     * Existe a possibilidade de informar um objeto que segue a definição da interface `ThfPageLoginCustomField`, onde
     * através dos parâmetros enviados pode gerar um `thf-input`, `thf-combo` especificamente para serviços
     * ou `thf-select` para valores fixos.
     *
     * Abaixo seguem os exemplos de cada tipo de campo.
     *
     * `thf-input`:
     *
     * ```
     * {
     *   property: 'domain',
     *   value: 'jv01',
     *   placeholder: 'Enter your domain',
     *   pattern: '[a-z]',
     *   errorPattern: 'Invalid value',
     * }
     * ```
     *
     * `thf-combo`:
     *
     * ```
     * {
     *   property: 'domain',
     *   value: 'jv01',
     *   placeholder: 'Enter your domain',
     *   url: 'https://thf.totvs.com.br/sample/api/comboOption/domains',
     *   fieldValue: 'nickname'
     * }
     * ```
     *
     * `thf-select`:
     *
     * ```
     * {
     *   property: 'domain',
     *   value: 'jv01',
     *   placeholder: 'Enter your domain',
     *   options: [{label: 'Domain 1', value: '1'}, {label: 'Domain 2', value: '2'}]
     * }
     * ```
     *
     * Caso o customField possua options, url e fieldValue preenchidos, será priorizado o thf-select
     * utilizando o options.
     *
     * @param {?} value
     * @return {?}
     */
    set customField(value) {
        if (value) {
            if (isTypeof(value, 'string')) {
                this.customFieldType = 'input';
                this._customField = value;
                this.customFieldObject = this.getDefaultCustomFieldObject(value);
                return;
            }
            if (isTypeof(value, 'object') && !Array.isArray(value) && value['property']) {
                this._customField = value;
                this.customFieldObject = (/** @type {?} */ (value));
                if (!this.customFieldObject.options && !this.customFieldObject.url) {
                    this.customFieldType = 'input';
                }
                else {
                    this.customFieldType = this.customFieldObject.options ? 'select' : 'combo';
                }
                return;
            }
        }
        this._customField = undefined;
        this.customFieldObject = undefined;
    }
    /**
     * @return {?}
     */
    get customField() {
        return this._customField;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Personaliza o e-mail que é exibido na mensagem de dica de login padrão para contato de suporte.
     * @param {?} value
     * @return {?}
     */
    set contactEmail(value) {
        /** @type {?} */
        const language = this.selectedLanguage || browserLanguage();
        this._contactEmail = value;
        this.setLoginHintLiteral(language, value);
    }
    /**
     * @return {?}
     */
    get contactEmail() {
        return this._contactEmail;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Valor customizado que sucede o título de boas-vindas.
     *
     * > Esta propriedade é sobreposta se `t-literals` contiver uma definição customizada para a literal `title`.
     *
     * > Veja mais sobre as literais na propriedade `t-literals`.
     *
     * @param {?} value
     * @return {?}
     */
    set productName(value) {
        /** @type {?} */
        const language = this.selectedLanguage || browserLanguage();
        this._productName = value;
        this.setTitleLiteral(language, value);
    }
    /**
     * @return {?}
     */
    get productName() {
        return this._productName;
    }
    /**
     * \@optional
     *
     * \@description
     * Adiciona uma `tag` abaixo do título que especifica o ambiente que o usuário está fazendo o login.
     *
     * > Essa propriedade limita o texto em 40 caracteres.
     * @param {?} environment
     * @return {?}
     */
    set environment(environment) {
        if (environment && environment.length > thfPageLoginContentMaxLength) {
            this._environment = environment.substring(0, thfPageLoginContentMaxLength);
        }
        else {
            this._environment = environment;
        }
    }
    /**
     * @return {?}
     */
    get environment() {
        return this._environment;
    }
    /**
     * \@optional
     *
     * \@description
     * Exibe um aviso de bloqueio de acordo com a quantidade restante de tentativas.
     * O aviso será exibido somente se a quantidade for maior que zero.
     *
     * > Caso tenha algum valor atribuído para o atributo `t-authentication-url` e o retorno da requisição estiver atribuindo valor
     * para o `t-exceeded-attempts-warning`, o valor considerado será o do retorno da requisição.
     *
     * \@default `0`
     * @param {?} value
     * @return {?}
     */
    set exceededAttemptsWarning(value) {
        this._exceededAttemptsWarning = convertToInt(value);
        this.showExceededAttemptsWarning = this.exceededAttemptsWarning > 0;
    }
    /**
     * @return {?}
     */
    get exceededAttemptsWarning() {
        return this._exceededAttemptsWarning;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Esconde a função "Lembrar usuário" do formulário de login.
     *
     * Quando essa propriedade é setada com `true` a propriedade `rememberUser` enviada no evento `t-login-submit` será sempre
     * `false`.
     *
     * > Veja a propriedade `t-literals` para customizar a literal `rememberUser`.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set hideRememberUser(value) {
        this._hideRememberUser = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        if (this._hideRememberUser) {
            this.rememberUser = false;
        }
    }
    /**
     * @return {?}
     */
    get hideRememberUser() {
        return this._hideRememberUser;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto com as literais usadas no `thf-page-login`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: ThfPageLoginLiterals = {
     *    title: 'Seja bem-vindo',
     *    loginErrorPattern: 'Login obrigatório',
     *    loginHint: 'Caso não possua usuário entre em contato com o suporte',
     *    loginLabel: 'Insira seu usuário',
     *    loginPlaceholder: 'Insira seu usuário de acesso',
     *    passwordErrorPattern: 'Senha obrigatória',
     *    passwordLabel: 'Insira sua senha',
     *    passwordPlaceholder: 'Insira sua senha de acesso'
     *    customFieldErrorPattern: 'Campo customizado inválido',
     *    customFieldPlaceholder: 'Por favor insira um valor',
     *    rememberUser: 'Lembrar usuário',
     *    rememberUserHint: 'Esta opção pode ser desabilitada nas configurações do sistema',
     *    submitLabel: 'Acessar sistema',
     *    forgotPassword: 'Esqueceu sua senha?'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: ThfPageLoginLiterals = {
     *    loginPlaceholder: 'Insira seu usuário de acesso',
     *    passwordPlaceholder: 'Insira sua senha de acesso',
     *    submitLabel: 'Acessar sistema'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <thf-page-login
     *   [t-literals]="customLiterals">
     * </thf-page-login>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
     *  > É também possível alternar o objeto padrão de literais através do seletor de idiomas localizado na parte inferior do template.
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        /** @type {?} */
        const language = this.selectedLanguage || browserLanguage();
        if (value) {
            this.getLiterals(language, value);
            this.containsCustomLiterals =
                !this.literals.title.includes(thfPageLoginLiteralsDefault[language].title) ||
                    !this.literals.loginHint.includes(thfPageLoginLiteralsDefault[language].loginHint);
        }
        else {
            this.containsCustomLiterals = false;
            this._literals = thfPageLoginLiteralsDefault[language];
        }
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || thfPageLoginLiteralsDefault[browserLanguage()];
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Habilita um estado de carregamento ao botão de *login*.
     *
     * > É necessário atribuir `true` à esta propriedade na função definida em `t-login-submit`.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set loading(value) {
        this._loading = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get loading() {
        return this._loading;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Valor do modelo do campo de login.
     *
     * @param {?} value
     * @return {?}
     */
    set login(value) {
        this._login = value;
        if (!this.authenticationUrl) {
            this.loginChange.emit(this._login);
        }
    }
    /**
     * @return {?}
     */
    get login() {
        return this._login;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Atributo que recebe uma lista de erros e exibe abaixo do campo de login.
     * @param {?} value
     * @return {?}
     */
    set loginErrors(value) {
        this._loginErrors = value || [];
        this.setLoginErrors(this._loginErrors);
    }
    /**
     * @return {?}
     */
    get loginErrors() {
        return this._loginErrors;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Atributo que recebe uma lista de erros e exibe abaixo do campo de password.
     * @param {?} value
     * @return {?}
     */
    set passwordErrors(value) {
        this._passwordErrors = value || [];
        this.setPasswordErrors(this._passwordErrors);
    }
    /**
     * @return {?}
     */
    get passwordErrors() {
        return this._passwordErrors;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Exibe um link abaixo do formulário de login para que os usuários da aplicação façam a recuperação dos dados de autenticação.
     *
     * A propriedade aceita os seguintes tipos:
     *
     * - **String**: informe uma url externa ou uma rota válida;
     * - **Function**: pode-se customizar a ação. Para esta possilidade basta atribuir:
     * ```
     * <thf-page-login>
     *   [recovery]="this.funcaominha.bind(this)";
     * </thf-page-login>
     * ```
     *
     * - **ThfPageLoginRecovery**: cria-se vínculo automático com o template **thf-modal-password-recovery**.
     *   O objeto deve conter a **url** para requisição dos recursos e pode-se definir o **tipo** de modal para recuperação de senha,
     *   **email** para contato e **máscara** do campo de telefone.
     * @param {?} value
     * @return {?}
     */
    set recovery(value) {
        this._recovery = value;
    }
    /**
     * @return {?}
     */
    get recovery() {
        return this._recovery;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Caso a aplicação tenha um link para novos cadastros, informe uma url externa ou uma rota válida, dessa
     * forma será exibido um link abaixo do formulário de login para os usuários da aplicação.
     *
     * Exemplos de valores válidos:
     * - **local**: `/home`
     * - **url externa**: `https://thf.totvs.com.br`
     *
     * > Veja a propriedade `t-literals` para customizar a literal `registerUrl`.
     * @param {?} value
     * @return {?}
     */
    set registerUrl(value) {
        this._registerUrl = isTypeof(value, 'string') ? value : undefined;
    }
    /**
     * @return {?}
     */
    get registerUrl() {
        return this._registerUrl;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Atributo que recebe o tipo de esquema da autenticação, sendo suportados apenas os valores `Basic` e `Bearer`.
     *
     * > Caso o tipo definido seja `Basic`, o componente fará uma requisição `POST` contendo:
     *
     * ```
     * headers {
     *  Authorization: Basic base64(login:password)
     * }
     *
     * body {
     *  rememberUser: rememberUser
     * }
     * ```
     *
     * > Caso o tipo definido seja `Bearer`, o componente fará uma requisição `POST` contendo:
     *
     * ```
     * body {
     *  login: login,
     *  password: base64(password)
     *  rememberUser: rememberUser
     * }
     * ```
     *
     * \@default `ThfPageLoginAuthenticationType.Basic`
     * @param {?} value
     * @return {?}
     */
    set authenticationType(value) {
        this._authenticationType =
            ((/** @type {?} */ (Object))).values(ThfPageLoginAuthenticationType).includes(value) ? value : ThfPageLoginAuthenticationType.Basic;
    }
    /**
     * @return {?}
     */
    get authenticationType() {
        return this._authenticationType;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Endpoint usado pelo template para requisição do recurso. Quando preenchido, o método `t-login-submit` será ignorado e o
     * componente adquirirá automatização para o processo de autenticação.
     *
     * ### Processos
     * Ao digitar um valor válido no campo de login/password e pressionar **Enter**, o componente fará uma requisição `POST`
     * na url especificada nesta propriedade passando o objeto contendo o valor definido pelo usuário:
     *
     * ```
     * headers {
     *  Authorization: Basic base64(login:password)
     * }
     *
     * body {
     *  rememberUser: rememberUser
     * }
     * ```
     *
     * Em caso de **sucesso**, o objeto de retorno é armazenado no `sessionStorage` e o usuário é redirecionado para a página inicial da
     * aplicação `/`.
     *
     * ```
     * 200:
     *  {
     *    user: user
     *  }
     * ```
     *
     * Em caso de **erro** na autenticação, espera-se o seguinte retorno:
     *
     * ```
     * 400/401
     *  {
     *    code: 400/401,
     *    message: message,
     *    detailedMessage: detailedMessage,
     *    helpUrl?: helpUrl
     *  }
     * ```
     *
     * > Pode-se atribuir uma quantidade máxima de tentativas restantes (maxAttemptsRemaining) para o atributo `t-exceeded-attempts-warning`,
     * assim como os avisos relacionados aos campos login e password (loginWarnings, passwordWarnings) para os atributos `t-login-errors` e
     * `t-password-errors` conforme retorno abaixo:
     *
     * ```
     * 400
     *  {
     *    code: 400/401,
     *    message: message,
     *    detailedMessage: detailedMessage,
     *    helpUrl?: helpUrl,
     *    maxAttemptsRemaining?: maxAttemptsRemaining,
     *    loginWarnings?: [loginWarnings],
     *    passwordWarnings?: [passwordWarnings],
     *  }
     * ```
     *
     * > Caso o valor atribuído para `t-exceeded-attempts-warning` seja igual a 0(zero), poderá ser passado um valor para o
     * atributo `t-blocked-url` e o usuário será redirecionado para uma tela de bloqueio.
     *
     * *Processo finalizado.*
     *
     * _______________
     *
     * #### Praticidade
     * As informações do serviço de autenticação também podem ser transmitidas diretamente pelas configuraçãos de rota e, desta maneira,
     * dispensa-se qualquer menção e/ou importação do componente `thf-page-login` no restante da aplicação. O exemplo abaixo exemplifica
     * a forma dinâmica com a qual o template de tela de login pode ser gerado ao navegar para rota `/login`, e também como ele se comunica
     * com o serviço para efetuação do processo de autenticação do usuário e solicitação de nova senha.
     * Basta definir nas configurações de rota:
     *
     *
     * ```
     *   import { ThfPageLoginComponent, ThfPageLoginAthenticationType } from '\@totvs/thf-templates';
     *
     *   ...
     *   const routes: Routes = [
     *     {
     *       path: 'login', component: ThfPageLoginComponent, data: {
     *         serviceApi: 'https://thf.totvs.com.br/sample/api/users/authentication',
     *         environment: 'development',
     *         recovery: {
     *           url: 'https://thf.totvs.com.br/sample/api/users',
     *           type: ThfModalPasswordRecoveryType.All,
     *           contactMail: 'dev.totvs\@totvs.com',
     *           phoneMask: '9-999-999-9999'
     *         },
     *         registerUrl: '/new-password',
     *         authenticationType: ThfPageLoginAthenticationType.Basic
     *       }
     *     }
     *     ...
     *   ];
     *
     * \@NgModule({
     *     imports: [RouterModule.forRoot(routes)],
     *     exports: [RouterModule]
     *   })
     *   export class AppRoutingModule { }
     * ```
     *
     *
     * O metadado `serviceApi` deve ser a **url** para requisição dos recursos de autenticação, o `environment` alimenta a propriedade
     * `t-environment`, `recovery` é a interface `ThfPageLoginRecovery` responsável pelas especificações contidas na modal de recuperação de
     * senha, `registerUrl` alimenta a propriedade `t-register-url` e `authenticationType` que define a propriedade `t-authentication-type`.
     *
     * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.
     *
     * @param {?} value
     * @return {?}
     */
    set authenticationUrl(value) {
        this._authenticationUrl = isTypeof(value, 'string') ? value : undefined;
    }
    /**
     * @return {?}
     */
    get authenticationUrl() {
        return this._authenticationUrl;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Caso o valor atribuído para `t-exceeded-attempts-warning` seja igual a 0(zero) e a aplicação tenha um link de bloqueio de usuário,
     * informe uma url externa ou uma rota válida, dessa forma em caso de bloqueio o usuário será redirecionado.
     * @param {?} value
     * @return {?}
     */
    set blockedUrl(value) {
        this._blockedUrl = isTypeof(value, 'string') ? value : undefined;
    }
    /**
     * @return {?}
     */
    get blockedUrl() {
        return this._blockedUrl;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.loginSubscription) {
            this.loginSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    closePopover() {
        this.showExceededAttemptsWarning = false;
    }
    /**
     * @param {?=} language
     * @param {?=} value
     * @return {?}
     */
    getLiterals(language, value) {
        language = language || browserLanguage();
        if (value instanceof Object && !(value instanceof Array)) {
            this.customizedDefaultLiterals = Object.assign({}, this.customizedDefaultLiterals, value);
            this._literals = Object.assign({}, thfPageLoginLiteralsDefault[thfLocaleDefault], thfPageLoginLiteralsDefault[language], this.customizedDefaultLiterals, value);
        }
        else {
            this.containsCustomLiterals = false;
            this._literals = thfPageLoginLiteralsDefault[language];
        }
    }
    /**
     * @return {?}
     */
    onLoginSubmit() {
        /** @type {?} */
        const loginForm = {
            login: this.login,
            password: this.password,
            rememberUser: this.rememberUser
        };
        if (this.customField) {
            loginForm[this.customFieldObject.property] = this.customFieldObject.value;
        }
        if (this.authenticationUrl) {
            this.loginSubscription =
                this.loginService.onLogin(this.authenticationUrl, this.authenticationType, loginForm)
                    .subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    this.setValuesToProperties();
                    sessionStorage.setItem('THF_USER_LOGIN', JSON.stringify(data));
                    this.openInternalLink('/');
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    if (error.error.code === '400' || error.error.code === '401') {
                        this.setValuesToProperties(error);
                        this.redirectBlockedUrl(this.exceededAttemptsWarning, this.blockedUrl);
                    }
                }));
        }
        else {
            this.loginSubmit.emit(loginForm);
            this.showExceededAttemptsWarning = this.exceededAttemptsWarning > 0;
        }
    }
    /**
     * @param {?} language
     * @param {?} value
     * @return {?}
     */
    setLoginHintLiteral(language, value) {
        /** @type {?} */
        const defaultLoginHintLiteral = thfPageLoginLiteralsDefault[language].loginHint;
        /** @type {?} */
        const prepositionLiteral = thfPageLoginLiteralIn[language];
        if (value) {
            this.concatenateLiteral(value, 'loginHint', defaultLoginHintLiteral, prepositionLiteral);
        }
        else if (!value) {
            this.literals = { loginHint: defaultLoginHintLiteral };
        }
    }
    /**
     * @param {?} language
     * @param {?} value
     * @return {?}
     */
    setTitleLiteral(language, value) {
        /** @type {?} */
        const defaultTitleLiteral = thfPageLoginLiteralsDefault[language].title;
        /** @type {?} */
        const prepositionLiteral = thfPageLoginLiteralTo[language];
        if (value) {
            this.concatenateLiteral(value, 'title', defaultTitleLiteral, prepositionLiteral);
        }
        else if (!value && this.literals.title.includes(defaultTitleLiteral)) {
            this.literals = { title: defaultTitleLiteral };
        }
    }
    /**
     * @private
     * @param {?} defaultLiteral
     * @param {?} prefixLiteral
     * @param {?} value
     * @return {?}
     */
    concatenate(defaultLiteral, prefixLiteral, value) {
        return `${defaultLiteral} ${prefixLiteral} ${value}`;
    }
    /**
     * @private
     * @param {?} value
     * @param {?} literal
     * @param {?} defaultLiteral
     * @param {?} prepositionLiteral
     * @return {?}
     */
    concatenateLiteral(value, literal, defaultLiteral, prepositionLiteral) {
        if (value && this.literals[literal].includes(defaultLiteral) || this.literals[literal].includes(value)) {
            this.literals = {
                [literal]: this.concatenate(defaultLiteral, prepositionLiteral, value)
            };
        }
    }
    /**
     * @private
     * @param {?} property
     * @return {?}
     */
    getDefaultCustomFieldObject(property) {
        return { property };
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    openExternalLink(url) {
        window.open(url, '_blank');
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    openInternalLink(url) {
        this.router.navigate([url]);
    }
    /**
     * @private
     * @param {?} attempts
     * @param {?} blockedUrl
     * @return {?}
     */
    redirectBlockedUrl(attempts, blockedUrl) {
        if (attempts === 0 && blockedUrl) {
            this.showExceededAttemptsWarning = false;
            isExternalLink(blockedUrl) ? this.openExternalLink(blockedUrl) : this.openInternalLink(blockedUrl);
        }
    }
    /**
     * @private
     * @param {?=} result
     * @return {?}
     */
    setValuesToProperties(result) {
        if (result) {
            this.exceededAttemptsWarning = result.error.maxAttemptsRemaining;
            this.loginErrors = result.error.loginWarnings;
            this.passwordErrors = result.error.passwordWarnings;
            this.blockedUrl = result.error.blockedUrl;
        }
        else {
            this.exceededAttemptsWarning = 0;
            this.loginErrors = [];
            this.passwordErrors = [];
            this.blockedUrl = '';
        }
    }
}
ThfPageLoginBaseComponent.propDecorators = {
    customField: [{ type: Input, args: ['t-custom-field',] }],
    background: [{ type: Input, args: ['t-background',] }],
    contactEmail: [{ type: Input, args: ['t-contact-email',] }],
    productName: [{ type: Input, args: ['t-product-name',] }],
    environment: [{ type: Input, args: ['t-environment',] }],
    exceededAttemptsWarning: [{ type: Input, args: ['t-exceeded-attempts-warning',] }],
    hideRememberUser: [{ type: Input, args: ['t-hide-remember-user',] }],
    literals: [{ type: Input, args: ['t-literals',] }],
    loading: [{ type: Input, args: ['t-loading',] }],
    login: [{ type: Input, args: ['t-login',] }],
    logo: [{ type: Input, args: ['t-logo',] }],
    loginPattern: [{ type: Input, args: ['t-login-pattern',] }],
    loginErrors: [{ type: Input, args: ['t-login-errors',] }],
    passwordErrors: [{ type: Input, args: ['t-password-errors',] }],
    passwordPattern: [{ type: Input, args: ['t-password-pattern',] }],
    recovery: [{ type: Input, args: ['t-recovery',] }],
    registerUrl: [{ type: Input, args: ['t-register-url',] }],
    secondaryLogo: [{ type: Input, args: ['t-secondary-logo',] }],
    authenticationType: [{ type: Input, args: ['t-authentication-type',] }],
    authenticationUrl: [{ type: Input, args: ['t-authentication-url',] }],
    blockedUrl: [{ type: Input, args: ['t-blocked-url',] }],
    loginChange: [{ type: Output, args: ['t-login-change',] }],
    loginSubmit: [{ type: Output, args: ['t-login-submit',] }],
    passwordChange: [{ type: Output, args: ['t-password-change',] }]
};
if (false) {
    /** @type {?} */
    ThfPageLoginBaseComponent.prototype.allLoginErrors;
    /** @type {?} */
    ThfPageLoginBaseComponent.prototype.allPasswordErrors;
    /** @type {?} */
    ThfPageLoginBaseComponent.prototype.containsCustomLiterals;
    /** @type {?} */
    ThfPageLoginBaseComponent.prototype.customFieldObject;
    /** @type {?} */
    ThfPageLoginBaseComponent.prototype.customFieldType;
    /** @type {?} */
    ThfPageLoginBaseComponent.prototype.customizedDefaultLiterals;
    /** @type {?} */
    ThfPageLoginBaseComponent.prototype.loginSubscription;
    /** @type {?} */
    ThfPageLoginBaseComponent.prototype.password;
    /** @type {?} */
    ThfPageLoginBaseComponent.prototype.selectedLanguage;
    /** @type {?} */
    ThfPageLoginBaseComponent.prototype.showExceededAttemptsWarning;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._authenticationType;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._authenticationUrl;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._blockedUrl;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._contactEmail;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._customField;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._environment;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._exceededAttemptsWarning;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._hideRememberUser;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._loading;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._login;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._loginErrors;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._passwordErrors;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._productName;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._recovery;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._registerUrl;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype._urlRecovery;
    /**
     * @type {?}
     * @protected
     */
    ThfPageLoginBaseComponent.prototype.rememberUser;
    /**
     * O `t-background` permite inserir uma imagem de destaque ao lado direito do formulário de login, caso a propriedade
     * não seja preenchida o formulário será centralizado no espaço disponível.
     *
     * A fonte da imagem pode ser de um caminho local ou uma url de um servidor externo.
     *
     * Além da imagem, é possível adicionar um texto informativo por cima da imagem da imagem de destaque, para isso informe
     * um valor para a literal `highlightInfo`.
     *
     * > Veja mais sobre as literais na propriedade `t-literals`.
     *
     * Exemplos de valores válidos:
     * - **local**: `./assets/images/login-background.png`
     * - **url externa**: `https://thf.totvs.com.br/assets/images/login-background.png`
     *
     * > Essa propriedade é ignorada para aplicações mobile.
     * @type {?}
     */
    ThfPageLoginBaseComponent.prototype.background;
    /**
     * \@optional
     *
     * \@description
     *
     * Caminho para a logomarca localizada na parte superior.
     *
     * > Caso seja indefinida o espaço se mantém preservado porém vazio.
     * @type {?}
     */
    ThfPageLoginBaseComponent.prototype.logo;
    /**
     * \@optional
     *
     * \@description
     *
     * Expressão regular para validar o campo de login, caso a expressão não seja atentida, a literal `loginErrorPattern`
     * será exibida.
     *
     * Exemplos de valores válidos:
     * - email: `[expressao-regular-email]`
     * - cpf: `[expressao-regular-cpf]`
     *
     * > Veja a propriedade `t-literals` para customizar a literal `loginErrorPattern`.
     * @type {?}
     */
    ThfPageLoginBaseComponent.prototype.loginPattern;
    /**
     * \@optional
     *
     * \@description
     *
     * Expressão regular para validar o campo de password, caso a expressão não seja atentida, a literal `passwordErrorPattern`
     * será exibida.
     *
     * Exemplos de valores válidos:
     * - Apenas números: `\d?`
     * - Letras mínusculas: `\z?`
     *
     * > Veja a propriedade `t-literals` para customizar a literal `passwordErrorPattern`.
     * @type {?}
     */
    ThfPageLoginBaseComponent.prototype.passwordPattern;
    /**
     * \@optional
     *
     * \@description
     *
     * Caminho para a logomarca localizada no rodapé.
     * @type {?}
     */
    ThfPageLoginBaseComponent.prototype.secondaryLogo;
    /**
     * Evento disparado quando o usuário alterar o input do campo login.
     *
     * Esse evento receberá como parâmetro uma variável do tipo `string` com o texto informado no campo.
     *
     * > Esta propriedade será ignorada se for definido valor para a propriedade `t-authentication-url`.
     * @type {?}
     */
    ThfPageLoginBaseComponent.prototype.loginChange;
    /**
     * Evento disparado ao submeter o formulário de login (apertando `Enter` dentro dos campos ou pressionando o botão de confirmação).
     *
     * Esse evento receberá como parâmetro um objeto do tipo `ThfPageLogin` com os dados informados no formulário.
     *
     * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
     *
     * > Para mais detalhes consulte a documentação sobre a interface `ThfPageLogin` mais abaixo.
     * @type {?}
     */
    ThfPageLoginBaseComponent.prototype.loginSubmit;
    /**
     * Evento disparado quando o usuário alterar o input do campo password.
     *
     * Esse evento receberá como parâmetro uma variável do tipo `string` com o texto informado no campo.
     *
     * > Esta propriedade será ignorada se for definido valor para a propriedade `t-authentication-url`.
     * @type {?}
     */
    ThfPageLoginBaseComponent.prototype.passwordChange;
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginBaseComponent.prototype.loginService;
    /** @type {?} */
    ThfPageLoginBaseComponent.prototype.router;
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    ThfPageLoginBaseComponent.prototype.setLoginErrors = function (value) { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    ThfPageLoginBaseComponent.prototype.setPasswordErrors = function (value) { };
}
//# sourceMappingURL=data:application/json;base64,