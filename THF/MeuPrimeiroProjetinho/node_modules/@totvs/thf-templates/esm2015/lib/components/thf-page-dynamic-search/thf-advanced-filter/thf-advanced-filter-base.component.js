/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, thfLocaleDefault } from '../../../utils/util';
/** @type {?} */
export const thfAdvancedFiltersLiteralsDefault = {
    en: {
        title: 'Advanced search',
        primaryActionLabel: 'Apply filters',
        secondaryActionLabel: 'Cancel'
    },
    es: {
        title: 'Búsqueda avanzada',
        primaryActionLabel: 'Aplicar filtros',
        secondaryActionLabel: 'Cancelar'
    },
    pt: {
        title: 'Busca avançada',
        primaryActionLabel: 'Aplicar filtros',
        secondaryActionLabel: 'Cancelar'
    }
};
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Filtro de busca avançada criado a partir de um formulário dinâmico.
 * Componente de uso interno.
 */
export class ThfAdvancedFilterBaseComponent {
    constructor() {
        this._filters = [];
        this.literals = Object.assign({}, thfAdvancedFiltersLiteralsDefault[thfLocaleDefault], thfAdvancedFiltersLiteralsDefault[browserLanguage()]);
        /**
         * Função que será disparada e receberá os valores do formulário ao ser clicado no botão buscar.
         */
        this.searchEvent = new EventEmitter();
    }
    /**
     * Coleção de objetos que implementam a interface ThfDynamicFormField, para definição dos campos que serão criados
     * dinamicamente.
     * @param {?} filters
     * @return {?}
     */
    set filters(filters) {
        this._filters = Array.isArray(filters) ? [...filters] : [];
    }
    /**
     * @return {?}
     */
    get filters() {
        return this._filters;
    }
}
ThfAdvancedFilterBaseComponent.propDecorators = {
    filters: [{ type: Input, args: ['t-filters',] }],
    searchEvent: [{ type: Output, args: ['t-search-event',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfAdvancedFilterBaseComponent.prototype._filters;
    /** @type {?} */
    ThfAdvancedFilterBaseComponent.prototype.literals;
    /**
     * Função que será disparada e receberá os valores do formulário ao ser clicado no botão buscar.
     * @type {?}
     */
    ThfAdvancedFilterBaseComponent.prototype.searchEvent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLWFkdmFuY2VkLWZpbHRlci1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdGVtcGxhdGVzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLXBhZ2UtZHluYW1pYy1zZWFyY2gvdGhmLWFkdmFuY2VkLWZpbHRlci90aGYtYWR2YW5jZWQtZmlsdGVyLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDOztBQUV4RSxNQUFNLE9BQU8saUNBQWlDLEdBQUc7SUFDL0MsRUFBRSxFQUFFO1FBQ0YsS0FBSyxFQUFFLGlCQUFpQjtRQUN4QixrQkFBa0IsRUFBRSxlQUFlO1FBQ25DLG9CQUFvQixFQUFFLFFBQVE7S0FDL0I7SUFDRCxFQUFFLEVBQUU7UUFDRixLQUFLLEVBQUUsbUJBQW1CO1FBQzFCLGtCQUFrQixFQUFFLGlCQUFpQjtRQUNyQyxvQkFBb0IsRUFBRSxVQUFVO0tBQ2pDO0lBQ0QsRUFBRSxFQUFFO1FBQ0YsS0FBSyxFQUFFLGdCQUFnQjtRQUN2QixrQkFBa0IsRUFBRSxpQkFBaUI7UUFDckMsb0JBQW9CLEVBQUUsVUFBVTtLQUNqQztDQUNGOzs7Ozs7Ozs7QUFVRCxNQUFNLE9BQU8sOEJBQThCO0lBQTNDO1FBRVUsYUFBUSxHQUErQixFQUFFLENBQUM7UUFFbEQsYUFBUSxxQkFDSCxpQ0FBaUMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUNuRCxpQ0FBaUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxFQUN2RDs7OztRQWV3QixnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUFFbEUsQ0FBQzs7Ozs7OztJQVhDLElBQXdCLE9BQU8sQ0FBQyxPQUFtQztRQUNqRSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzdELENBQUM7Ozs7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQzs7O3NCQU5BLEtBQUssU0FBQyxXQUFXOzBCQVNqQixNQUFNLFNBQUMsZ0JBQWdCOzs7Ozs7O0lBcEJ4QixrREFBa0Q7O0lBRWxELGtEQUdFOzs7OztJQWVGLHFEQUFnRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBUaGZEeW5hbWljRm9ybUZpZWxkIH0gZnJvbSAnQHRvdHZzL3RoZi11aSc7XG5cbmltcG9ydCB7IGJyb3dzZXJMYW5ndWFnZSwgdGhmTG9jYWxlRGVmYXVsdCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5leHBvcnQgY29uc3QgdGhmQWR2YW5jZWRGaWx0ZXJzTGl0ZXJhbHNEZWZhdWx0ID0ge1xuICBlbjoge1xuICAgIHRpdGxlOiAnQWR2YW5jZWQgc2VhcmNoJyxcbiAgICBwcmltYXJ5QWN0aW9uTGFiZWw6ICdBcHBseSBmaWx0ZXJzJyxcbiAgICBzZWNvbmRhcnlBY3Rpb25MYWJlbDogJ0NhbmNlbCdcbiAgfSxcbiAgZXM6IHtcbiAgICB0aXRsZTogJ0LDunNxdWVkYSBhdmFuemFkYScsXG4gICAgcHJpbWFyeUFjdGlvbkxhYmVsOiAnQXBsaWNhciBmaWx0cm9zJyxcbiAgICBzZWNvbmRhcnlBY3Rpb25MYWJlbDogJ0NhbmNlbGFyJ1xuICB9LFxuICBwdDoge1xuICAgIHRpdGxlOiAnQnVzY2EgYXZhbsOnYWRhJyxcbiAgICBwcmltYXJ5QWN0aW9uTGFiZWw6ICdBcGxpY2FyIGZpbHRyb3MnLFxuICAgIHNlY29uZGFyeUFjdGlvbkxhYmVsOiAnQ2FuY2VsYXInXG4gIH1cbn07XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRmlsdHJvIGRlIGJ1c2NhIGF2YW7Dp2FkYSBjcmlhZG8gYSBwYXJ0aXIgZGUgdW0gZm9ybXVsw6FyaW8gZGluw6JtaWNvLlxuICogQ29tcG9uZW50ZSBkZSB1c28gaW50ZXJuby5cbiAqL1xuZXhwb3J0IGNsYXNzIFRoZkFkdmFuY2VkRmlsdGVyQmFzZUNvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfZmlsdGVyczogQXJyYXk8VGhmRHluYW1pY0Zvcm1GaWVsZD4gPSBbXTtcblxuICBsaXRlcmFscyA9IHtcbiAgICAuLi50aGZBZHZhbmNlZEZpbHRlcnNMaXRlcmFsc0RlZmF1bHRbdGhmTG9jYWxlRGVmYXVsdF0sXG4gICAgLi4udGhmQWR2YW5jZWRGaWx0ZXJzTGl0ZXJhbHNEZWZhdWx0W2Jyb3dzZXJMYW5ndWFnZSgpXVxuICB9O1xuXG4gIC8qKlxuICAgKiBDb2xlw6fDo28gZGUgb2JqZXRvcyBxdWUgaW1wbGVtZW50YW0gYSBpbnRlcmZhY2UgVGhmRHluYW1pY0Zvcm1GaWVsZCwgcGFyYSBkZWZpbmnDp8OjbyBkb3MgY2FtcG9zIHF1ZSBzZXLDo28gY3JpYWRvc1xuICAgKiBkaW5hbWljYW1lbnRlLlxuICAgKi9cbiAgQElucHV0KCd0LWZpbHRlcnMnKSBzZXQgZmlsdGVycyhmaWx0ZXJzOiBBcnJheTxUaGZEeW5hbWljRm9ybUZpZWxkPikge1xuICAgIHRoaXMuX2ZpbHRlcnMgPSBBcnJheS5pc0FycmF5KGZpbHRlcnMpID8gWy4uLmZpbHRlcnNdIDogW107XG4gIH1cblxuICBnZXQgZmlsdGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5fZmlsdGVycztcbiAgfVxuXG4gIC8qKiBGdW7Dp8OjbyBxdWUgc2Vyw6EgZGlzcGFyYWRhIGUgcmVjZWJlcsOhIG9zIHZhbG9yZXMgZG8gZm9ybXVsw6FyaW8gYW8gc2VyIGNsaWNhZG8gbm8gYm90w6NvIGJ1c2Nhci4gKi9cbiAgQE91dHB1dCgndC1zZWFyY2gtZXZlbnQnKSBzZWFyY2hFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG59XG4iXX0=