/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { ThfDialogService, ThfNotificationService } from '@totvs/thf-ui';
import * as util from '../../utils/util';
import { ThfPageDynamicDetailComponent } from '../thf-page-dynamic-detail/thf-page-dynamic-detail.component';
// import { ThfPageDynamicEditComponent } from '../thf-page-dynamic-edit/thf-page-dynamic-edit.component';
import { ThfPageDynamicListBaseComponent } from './thf-page-dynamic-list-base.component';
import { ThfPageDynamicService } from './thf-page-dynamic.service';
/** @type {?} */
export const thfPageDynamicTableLiteralsDefault = {
    en: {
        pageAction: 'New',
        pageActionRemoveAll: 'Delete',
        tableActionView: 'View',
        tableActionEdit: 'Edit',
        tableActionDuplicate: 'Duplicate',
        tableActionDelete: 'Delete',
        confirmRemoveTitle: 'Confirm delete',
        confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',
        confirmRemoveAllTitle: 'Confirm batch deletion',
        confirmRemoveAllMessage: 'Are you sure you want to delete all these records? You can not undo this action.',
        loadDataErrorNotification: 'Service not found',
        removeSuccessNotification: 'Item deleted successfully',
        removeAllSuccessNotification: 'Items deleted successfully'
    },
    es: {
        pageAction: 'Nuevo',
        pageActionRemoveAll: 'Borrar',
        tableActionView: 'Visualizar',
        tableActionEdit: 'Editar',
        tableActionDuplicate: 'Duplicar',
        tableActionDelete: 'Borrar',
        confirmRemoveTitle: 'Confirmar la exclusión',
        confirmRemoveMessage: '¿Está seguro de que desea eliminar este registro? No puede deshacer esta acción.',
        confirmRemoveAllTitle: 'Confirmar la exclusión por lotes',
        confirmRemoveAllMessage: '¿Está seguro de que desea eliminar todos estos registros? No puede deshacer esta acción.',
        loadDataErrorNotification: 'Servicio no informado.',
        removeSuccessNotification: 'Elemento eliminado con éxito',
        removeAllSuccessNotification: 'Elementos eliminados con éxito'
    },
    pt: {
        pageAction: 'Novo',
        pageActionRemoveAll: 'Excluir',
        tableActionView: 'Visualizar',
        tableActionEdit: 'Editar',
        tableActionDuplicate: 'Duplicar',
        tableActionDelete: 'Excluir',
        confirmRemoveTitle: 'Confirmar exclusão',
        confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? Você não poderá desfazer essa ação.',
        confirmRemoveAllTitle: 'Confirmar exclusão em lote',
        confirmRemoveAllMessage: 'Tem certeza de que deseja excluir todos esses registros? Você não poderá desfazer essa ação.',
        loadDataErrorNotification: 'Serviço não informado.',
        removeSuccessNotification: 'Item excluido com sucesso',
        removeAllSuccessNotification: 'Items excluidos com sucesso'
    }
};
/**
 * \@docsExtends ThfPageDynamicListBaseComponent
 *
 * \@description
 *
 * O `thf-page-dynamic-table` é uma página que exibe uma lista de registros em uma tabela baseado em uma lista de fields,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * \@example
 *
 * <example name="thf-page-dynamic-table-basic" title="Totvs Page Dynamic Table Basic">
 *  <file name="sample-thf-page-dynamic-table-basic/sample-thf-page-dynamic-table-basic.component.html"> </file>
 *  <file name="sample-thf-page-dynamic-table-basic/sample-thf-page-dynamic-table-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-dynamic-table-users" title="Totvs Page Dynamic Table - Users">
 *  <file name="sample-thf-page-dynamic-table-users/sample-thf-page-dynamic-table-users.component.html"> </file>
 *  <file name="sample-thf-page-dynamic-table-users/sample-thf-page-dynamic-table-users.component.ts"> </file>
 * </example>
 */
export class ThfPageDynamicTableComponent extends ThfPageDynamicListBaseComponent {
    /**
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} thfDialogService
     * @param {?} thfNotification
     * @param {?} thfPageDynamicService
     */
    constructor(router, activatedRoute, thfDialogService, thfNotification, thfPageDynamicService) {
        super();
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.thfDialogService = thfDialogService;
        this.thfNotification = thfNotification;
        this.thfPageDynamicService = thfPageDynamicService;
        this._actions = {};
        this._pageActions = [];
        this._tableActions = [];
        this.page = 1;
        this.params = {};
        this.hasNext = false;
        this.items = [];
        this.literals = Object.assign({}, thfPageDynamicTableLiteralsDefault[util.thfLocaleDefault], thfPageDynamicTableLiteralsDefault[util.browserLanguage()]);
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Ações da página e da tabela.
     * @param {?} value
     * @return {?}
     */
    set actions(value) {
        this._actions = value && typeof value === 'object' && Object.keys(value).length > 0 ? value : {};
        this.setPageActions(this.actions);
        this.setRemoveAllAction();
        this.setTableActions(this.actions);
    }
    /**
     * @return {?}
     */
    get actions() {
        return this._actions;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.activatedRoute.snapshot.data.serviceApi) {
            this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;
            this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadMetadata();
        }
        else {
            this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadData();
        }
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    onAdvancedSearch(filter) {
        this.loadData(Object.assign({ page: 1 }, filter));
        this.params = filter;
    }
    /**
     * @param {?} disclaimers
     * @return {?}
     */
    onChangeDisclaimers(disclaimers) {
        /** @type {?} */
        const filter = {};
        disclaimers.forEach((/**
         * @param {?} disclaimer
         * @return {?}
         */
        disclaimer => {
            filter[disclaimer.property] = disclaimer.value;
        }));
        this.onAdvancedSearch(filter);
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    onQuickSearch(filter) {
        this.loadData(filter ? { page: 1, search: filter } : undefined);
        this.params = filter ? { search: filter } : {};
    }
    /**
     * @return {?}
     */
    showMore() {
        this.loadData(Object.assign({ page: ++this.page }, this.params));
    }
    /**
     * @return {?}
     */
    get hasActionRemoveAll() {
        return !!this.actions.removeAll;
    }
    /**
     * @return {?}
     */
    get pageActions() {
        return [...this._pageActions];
    }
    /**
     * @return {?}
     */
    get tableActions() {
        return this._tableActions;
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    confirmRemove(item) {
        /** @type {?} */
        const confirmOptions = {
            title: this.literals.confirmRemoveTitle,
            message: this.literals.confirmRemoveMessage,
            confirm: this.remove.bind(this, item)
        };
        this.thfDialogService.confirm(confirmOptions);
    }
    /**
     * @private
     * @return {?}
     */
    confirmRemoveAll() {
        /** @type {?} */
        const confirmOptions = {
            title: this.literals.confirmRemoveAllTitle,
            message: this.literals.confirmRemoveAllMessage,
            confirm: this.removeAll.bind(this)
        };
        this.thfDialogService.confirm(confirmOptions);
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    formatUniqueKey(item) {
        /** @type {?} */
        const keys = util.mapObjectByProperties(item, this.keys);
        return util.valuesFromObject(keys).join('|');
    }
    /**
     * @private
     * @param {?=} params
     * @return {?}
     */
    loadData(params = {}) {
        if (!this.serviceApi) {
            this.thfNotification.error(this.literals.loadDataErrorNotification);
            return;
        }
        /** @type {?} */
        const defaultParams = { page: 1, pageSize: 10 };
        /** @type {?} */
        const fullParams = Object.assign({}, defaultParams, params);
        this.thfPageDynamicService.getResources(fullParams).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            this.items = fullParams.page === 1 ? response.items : [...this.items, ...response.items];
            this.page = fullParams.page;
            this.hasNext = response.hasNext;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    loadMetadata() {
        this.thfPageDynamicService.getMetadata().toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.autoRouter = response.autoRouter;
            this.actions = response.actions || {};
            this.breadcrumb = response.breadcrumb || { items: [] };
            this.fields = response.fields || [];
            this.title = response.title;
            this.loadData();
        }));
    }
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    /**
     * @private
     * @param {?} route
     * @param {?=} forceStopAutoRouter
     * @return {?}
     */
    navigateTo(route, forceStopAutoRouter = false) {
        this.router.navigate([route.url || route.path], { queryParams: route.params })
            .catch((/**
         * @return {?}
         */
        () => {
            if (forceStopAutoRouter || !this.autoRouter) {
                return;
            }
            this.router.config.unshift((/** @type {?} */ ({
                path: route.path, component: route.component, data: { serviceApi: this.serviceApi, autoRouter: true }
            })));
            this.navigateTo(route, true);
        }));
    }
    /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    openDetail(path, item) {
        /** @type {?} */
        const url = this.resolveUrl(item, path);
        this.navigateTo({ path, url, component: ThfPageDynamicDetailComponent });
    }
    /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    openDuplicate(path, item) {
        /** @type {?} */
        const duplicates = util.mapObjectByProperties(item, this.duplicates);
        this.navigateTo({ path, params: { duplicate: JSON.stringify(duplicates) } });
        // this.navigateTo({ path, params: { duplicate: JSON.stringify(duplicates) } , component: ThfPageDynamicEditComponent });
    }
    /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    openEdit(path, item) {
        /** @type {?} */
        const url = this.resolveUrl(item, path);
        this.navigateTo({ path, url });
        // this.navigateTo({ path, url, component: ThfPageDynamicEditComponent });
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    openNew(path) {
        this.navigateTo({ path });
        // this.navigateTo({ path, component: ThfPageDynamicEditComponent });
    }
    /**
     * Caso exista mais de um identificador, será concatenado com '|'.
     *
     * Ex: { id: 1, company: 'totvs' }
     *
     * Para o endpoint /resources/:id será executada a url /resources/1|totvs
     * @private
     * @param {?} item
     * @return {?}
     */
    remove(item) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(item);
        this.thfPageDynamicService.deleteResource(uniqueKey).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.removeLocalItems([item]);
            this.thfNotification.success(this.literals.removeSuccessNotification);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    removeAll() {
        // TODO: usar propriedade nova pra validar os itens selecionados
        /** @type {?} */
        const selectedItems = this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.$selected));
        if (selectedItems.length === 0) {
            // TODO: usar propriedade nova pra validar os itens selecionados
            return;
        }
        /** @type {?} */
        const keysSelectedItems = util.mapArrayByProperties(selectedItems, this.keys);
        this.thfPageDynamicService.deleteResources(keysSelectedItems).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.removeLocalItems(selectedItems);
            this.thfNotification.success(this.literals.removeAllSuccessNotification);
        }));
    }
    /**
     * @private
     * @param {?=} items
     * @return {?}
     */
    removeLocalItems(items = []) {
        items.forEach((/**
         * @param {?} itemRemoved
         * @return {?}
         */
        itemRemoved => {
            /** @type {?} */
            const indexItemRemoved = this.items.indexOf(itemRemoved);
            this.items.splice(indexItemRemoved, 1);
        }));
    }
    /**
     * @private
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    resolveUrl(item, path) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    }
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    setPageActions(actions) {
        if (actions) {
            this._pageActions = [
                { label: this.literals.pageAction, action: this.openNew.bind(this, actions.new), disabled: !this._actions.new },
            ];
        }
    }
    /**
     * @private
     * @return {?}
     */
    setRemoveAllAction() {
        if (this._actions.removeAll) {
            this._pageActions.push({
                label: this.literals.pageActionRemoveAll, action: this.confirmRemoveAll.bind(this),
                disabled: !this._actions.removeAll
            });
        }
    }
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    setTableActions(actions) {
        if (actions) {
            this._tableActions = [
                { action: this.openDetail.bind(this, actions.detail), label: this.literals.tableActionView, visible: !!this._actions.detail },
                { action: this.openEdit.bind(this, actions.edit), label: this.literals.tableActionEdit, visible: !!this._actions.edit },
                { action: this.openDuplicate.bind(this, actions.duplicate), label: this.literals.tableActionDuplicate,
                    visible: !!this._actions.duplicate
                },
                { action: this.confirmRemove.bind(this), label: this.literals.tableActionDelete, separator: true, type: 'danger',
                    visible: !!this._actions.remove
                }
            ];
        }
    }
}
ThfPageDynamicTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-dynamic-table',
                template: "<thf-page-dynamic-search\n  [t-actions]=\"pageActions\"\n  [t-breadcrumb]=\"breadcrumb\"\n  [t-filters]=\"filters\"\n  [t-title]=\"title\"\n  (t-advanced-search)=\"onAdvancedSearch($event)\"\n  (t-change-disclaimers)=\"onChangeDisclaimers($event)\"\n  (t-quick-search)=\"onQuickSearch($event)\">\n\n  <thf-table\n    t-sort=\"true\"\n    [t-actions]=\"tableActions\"\n    [t-checkbox]=\"hasActionRemoveAll\"\n    [t-columns]=\"columns\"\n    [t-items]=\"items\"\n    [t-show-more-disabled]=\"!hasNext\"\n    (t-show-more)=\"showMore()\">\n  </thf-table>\n\n</thf-page-dynamic-search>\n",
                providers: [ThfPageDynamicService]
            }] }
];
/** @nocollapse */
ThfPageDynamicTableComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ThfDialogService },
    { type: ThfNotificationService },
    { type: ThfPageDynamicService }
];
ThfPageDynamicTableComponent.propDecorators = {
    actions: [{ type: Input, args: ['t-actions',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype._pageActions;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype._tableActions;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype.page;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype.params;
    /** @type {?} */
    ThfPageDynamicTableComponent.prototype.hasNext;
    /** @type {?} */
    ThfPageDynamicTableComponent.prototype.items;
    /** @type {?} */
    ThfPageDynamicTableComponent.prototype.literals;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype.thfDialogService;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype.thfNotification;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicTableComponent.prototype.thfPageDynamicService;
}
//# sourceMappingURL=data:application/json;base64,