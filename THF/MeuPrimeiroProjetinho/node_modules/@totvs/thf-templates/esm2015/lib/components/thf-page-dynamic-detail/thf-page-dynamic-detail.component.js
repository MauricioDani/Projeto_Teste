/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import * as util from '../../utils/util';
import { ThfDialogService, ThfNotificationService } from '@totvs/thf-ui';
import { ThfPageDynamicService } from './thf-page-dynamic.service';
/** @type {?} */
export const thfPageDynamicDetailLiteralsDefault = {
    en: {
        pageActionEdit: 'Edit',
        pageActionRemove: 'Delete',
        pageActionBack: 'Back',
        confirmRemoveTitle: 'Confirm delete',
        confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',
        removeNotificationSuccess: 'Item deleted successfully.',
        registerNotFound: 'Register not found.'
    },
    es: {
        pageActionEdit: 'Editar',
        pageActionRemove: 'Borrar',
        pageActionBack: 'Regreso',
        confirmRemoveTitle: 'Confirmar la exclusión',
        confirmRemoveMessage: '¿Está seguro de que desea eliminar este registro? No puede deshacer esta acción.',
        removeNotificationSuccess: 'Elemento eliminado con éxito.',
        registerNotFound: 'Registro no encontrado.'
    },
    pt: {
        pageActionEdit: 'Editar',
        pageActionRemove: 'Excluir',
        pageActionBack: 'Voltar',
        confirmRemoveTitle: 'Confirmar exclusão',
        confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? Você não poderá desfazer essa ação.',
        removeNotificationSuccess: 'Item excluído com sucesso.',
        registerNotFound: 'Registro não encontrado.'
    }
};
/**
 * \@description
 *
 * O `thf-page-dynamic-detail` é uma página que serve para exibir registros em detalhes,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * \@example
 *
 * <example name="thf-page-dynamic-detail-basic" title="Totvs Page Dynamic Detail Basic">
 *  <file name="sample-thf-page-dynamic-detail-basic/sample-thf-page-dynamic-detail-basic.component.html"> </file>
 *  <file name="sample-thf-page-dynamic-detail-basic/sample-thf-page-dynamic-detail-basic.component.ts"> </file>
 * </example>
 */
export class ThfPageDynamicDetailComponent {
    /**
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} thfNotification
     * @param {?} thfDialogService
     * @param {?} thfPageDynamicService
     */
    constructor(router, activatedRoute, thfNotification, thfDialogService, thfPageDynamicService) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.thfNotification = thfNotification;
        this.thfDialogService = thfDialogService;
        this.thfPageDynamicService = thfPageDynamicService;
        this._actions = {};
        this._autoRouter = false;
        this._duplicates = [];
        this._fields = [];
        this._keys = [];
        this._pageActions = [];
        this.literals = Object.assign({}, thfPageDynamicDetailLiteralsDefault[util.thfLocaleDefault], thfPageDynamicDetailLiteralsDefault[util.browserLanguage()]);
        this.model = {};
        /**
         * Objeto com propriedades do breadcrumb.
         */
        this.breadcrumb = { items: [] };
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define as ações da página de acordo com a interface `ThfPageDynamicDetailActions`.
     * @param {?} value
     * @return {?}
     */
    set actions(value) {
        this._actions = this.isObject(value) ? value : {};
        this._pageActions = this.getPageActions(this._actions);
    }
    /**
     * \@todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
     *
     * \@optional
     *
     * \@description
     *
     * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso as ações
     * estejam definidas nas ações.
     *
     * > Para o correto funcionamento não pode haver nenhum rota coringa (`**`) especificada.
     *
     * \@default false
     * @param {?} value
     * @return {?}
     */
    set autoRouter(value) {
        this._autoRouter = util.convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get autoRouter() {
        return this._autoRouter;
    }
    /**
     * Lista dos campos exibidos na página.
     * @param {?} value
     * @return {?}
     */
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
        this._keys = this.getKeysByFields(this.fields);
        this._duplicates = this.getDuplicatesByFields(this.fields);
    }
    /**
     * @return {?}
     */
    get fields() {
        return this._fields;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        if (this.activatedRoute.snapshot.data.serviceApi) {
            this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;
            this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadMetadata(paramId);
        }
        else {
            this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadData(paramId);
        }
    }
    /**
     * @return {?}
     */
    get duplicates() {
        return [...this._duplicates];
    }
    /**
     * @return {?}
     */
    get keys() {
        return [...this._keys];
    }
    /**
     * @return {?}
     */
    get pageActions() {
        return [...this._pageActions];
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    confirmRemove(path) {
        /** @type {?} */
        const confirmOptions = {
            title: this.literals.confirmRemoveTitle,
            message: this.literals.confirmRemoveMessage,
            confirm: this.remove.bind(this, path)
        };
        this.thfDialogService.confirm(confirmOptions);
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    formatUniqueKey(item) {
        /** @type {?} */
        const keys = util.mapObjectByProperties(item, this.keys);
        return util.valuesFromObject(keys).join('|');
    }
    /**
     * @private
     * @return {?}
     */
    goBack( /*path*/) {
        window.history.back();
        // if (path) {
        //   this.navigateTo({ path, component: ThfPageDynamicEditComponent });
        // } else {
        //   window.history.back();
        // }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    loadData(id) {
        this.thfPageDynamicService.getResource(id).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.model = response;
        })).catch((/**
         * @return {?}
         */
        () => {
            this.model = undefined;
            this.actions = undefined;
        }));
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    loadMetadata(id) {
        this.thfPageDynamicService.getMetadata('detail').toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.autoRouter = response.autoRouter;
            this.actions = response.actions || {};
            this.breadcrumb = response.breadcrumb || { items: [] };
            this.fields = response.fields || [];
            this.title = response.title;
            this.loadData(id);
        }));
    }
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    /**
     * @private
     * @param {?} route
     * @param {?=} forceStopAutoRouter
     * @return {?}
     */
    navigateTo(route, forceStopAutoRouter = false) {
        this.router.navigate([route.url || route.path], { queryParams: route.params })
            .catch((/**
         * @return {?}
         */
        () => {
            if (forceStopAutoRouter || !this.autoRouter) {
                return;
            }
            this.router.config.unshift((/** @type {?} */ ({
                path: route.path, component: route.component, data: { serviceApi: this.serviceApi, autoRouter: true }
            })));
            this.navigateTo(route, true);
        }));
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    openEdit(path) {
        /** @type {?} */
        const url = this.resolveUrl(this.model, path);
        // this.navigateTo({ path, url, component: ThfPageDynamicEditComponent });
        this.navigateTo({ path, url });
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    remove(path) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(this.model);
        this.thfPageDynamicService.deleteResource(uniqueKey).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.thfNotification.success(this.literals.removeNotificationSuccess);
            this.navigateTo({ path: path });
            // this.navigateTo({ path: path, component: ThfPageDynamicTableComponent });
        }));
    }
    /**
     * @private
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    resolveUrl(item, path) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    }
    /**
     * @private
     * @param {?=} actions
     * @return {?}
     */
    getPageActions(actions = {}) {
        /** @type {?} */
        const pageActions = [];
        if (actions.edit) {
            pageActions.push({ label: this.literals.pageActionEdit, action: this.openEdit.bind(this, actions.edit) });
        }
        if (actions.remove) {
            pageActions.push({ label: this.literals.pageActionRemove, action: this.confirmRemove.bind(this, actions.remove) });
        }
        if (actions.back === undefined || actions.back) {
            pageActions.push({ label: this.literals.pageActionBack, action: this.goBack.bind(this, actions.back) });
        }
        return pageActions;
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getKeysByFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.key === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getDuplicatesByFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.duplicate === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    isObject(value) {
        return !!value && typeof value === 'object' && !Array.isArray(value);
    }
}
ThfPageDynamicDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-dynamic-detail',
                template: "<thf-page-default\n  [t-actions]=\"pageActions\"\n  [t-breadcrumb]=\"breadcrumb\"\n  [t-title]=\"title\">\n\n  <ng-container *ngIf=\"model; then viewFieldsTemplate; else registerNotFoundTemplate\">\n  </ng-container>\n\n</thf-page-default>\n\n<ng-template #registerNotFoundTemplate>\n\n  <thf-widget>\n    <span class=\"thf-icon thf-icon-info\"></span>\n    <span class=\"thf-font-text-large\">\n      {{ literals.registerNotFound }}\n    </span>\n  </thf-widget>\n\n</ng-template>\n\n<ng-template #viewFieldsTemplate>\n\n  <thf-dynamic-view [t-fields]=\"fields\" [t-value]=\"model\">\n  </thf-dynamic-view>\n\n</ng-template>\n",
                providers: [ThfPageDynamicService]
            }] }
];
/** @nocollapse */
ThfPageDynamicDetailComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ThfNotificationService },
    { type: ThfDialogService },
    { type: ThfPageDynamicService }
];
ThfPageDynamicDetailComponent.propDecorators = {
    actions: [{ type: Input, args: ['t-actions',] }],
    autoRouter: [{ type: Input, args: ['t-auto-router',] }],
    breadcrumb: [{ type: Input, args: ['t-breadcrumb',] }],
    fields: [{ type: Input, args: ['t-fields',] }],
    title: [{ type: Input, args: ['t-title',] }],
    serviceApi: [{ type: Input, args: ['t-service-api',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicDetailComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicDetailComponent.prototype._autoRouter;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicDetailComponent.prototype._duplicates;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicDetailComponent.prototype._fields;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicDetailComponent.prototype._keys;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicDetailComponent.prototype._pageActions;
    /** @type {?} */
    ThfPageDynamicDetailComponent.prototype.literals;
    /** @type {?} */
    ThfPageDynamicDetailComponent.prototype.model;
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?}
     */
    ThfPageDynamicDetailComponent.prototype.breadcrumb;
    /**
     * Título da página.
     * @type {?}
     */
    ThfPageDynamicDetailComponent.prototype.title;
    /**
     * \@description
     *
     * Endpoint usado pelo template para requisição do recurso que serão exibido.
     *
     * Caso a ação `remove` estiver configurada, será feito uma requisição de exclusão nesse mesmo endpoint passando os campos
     * setados como `key: true`.
     *
     * > `DELETE {end-point}/{keys}`
     *
     * ```
     *  <thf-page-dynamic-detail
     *    [t-actions]="{ remove: '/' }"
     *    [t-fields]="[ { property: 'id', key: true } ]"
     *    t-service="/api/thf-samples/v1/people"
     *    ...>
     *  </thf-page-dynamic-detail>
     * ```
     *
     * Resquisição disparada, onde a propriedade `id` é igual a 2:
     *
     * ```
     *  DELETE /api/thf-samples/v1/people/2 HTTP/1.1
     *  Host: localhost:4000
     *  Connection: keep-alive
     *  Accept: application/json, text/plain
     *  ...
     * ```
     *
     * > Caso esteja usando metadados com o template, será disparado uma requisição na inicialização do template para buscar
     * > os metadados da página passando o tipo do metadado esperado e a versão cacheada pelo browser.
     * >
     * > `GET {end-point}/metadata?type=detail&version={version}`
     * @type {?}
     */
    ThfPageDynamicDetailComponent.prototype.serviceApi;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicDetailComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicDetailComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicDetailComponent.prototype.thfNotification;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicDetailComponent.prototype.thfDialogService;
    /**
     * @type {?}
     * @private
     */
    ThfPageDynamicDetailComponent.prototype.thfPageDynamicService;
}
//# sourceMappingURL=data:application/json;base64,