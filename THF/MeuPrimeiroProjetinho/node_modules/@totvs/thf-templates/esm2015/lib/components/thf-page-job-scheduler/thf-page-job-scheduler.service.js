/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { addZero, convertDateToISOExtended } from '../../utils/util';
export class ThfPageJobSchedulerService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.endpoint = '/';
        this.headers = new HttpHeaders({
            'X-TOTVS-SCREEN-LOCK': 'true'
        });
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    configServiceApi(config = {}) {
        this.endpoint = config.endpoint;
    }
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    createResource(resource) {
        /** @type {?} */
        const jobScheduler = this.convertToJobScheduler(resource);
        return this.http.post(`${this.endpoint}`, jobScheduler, { headers: this.headers });
    }
    /**
     * @return {?}
     */
    getHeadProcesses() {
        /** @type {?} */
        const headers = { 'X-Totvs-No-Error': 'true' };
        return this.http.head(`${this.endpoint}/processes`, { headers });
    }
    // Busca parametros pelo processo id
    /**
     * @param {?} processId
     * @return {?}
     */
    getParametersByProcess(processId) {
        return this.http.get(`${this.endpoint}/processes/${processId}/parameters`, { headers: this.headers })
            .pipe(map((/**
         * @param {?} resource
         * @return {?}
         */
        (resource) => resource.items)));
    }
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    getProcess(id) {
        return this.http.get(`${this.endpoint}/processes/${id}`, { headers: this.headers });
    }
    // Busca uma lista de processos
    /**
     * @param {?=} params
     * @return {?}
     */
    getProcesses(params = {}) {
        return this.http.get(`${this.endpoint}/processes`, { params });
    }
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    getResource(id) {
        return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers })
            .pipe(map((/**
         * @param {?} resource
         * @return {?}
         */
        resource => this.convertToJobSchedulerInternal(resource))));
    }
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    updateResource(id, resource) {
        /** @type {?} */
        const jobScheduler = this.convertToJobScheduler(resource);
        return this.http.put(`${this.endpoint}/${id}`, jobScheduler, { headers: this.headers });
    }
    /**
     * @private
     * @param {?} jobSchedulerInternal
     * @return {?}
     */
    convertToJobScheduler(jobSchedulerInternal) {
        /** @type {?} */
        const jobScheduler = Object.assign({}, jobSchedulerInternal);
        if (jobSchedulerInternal.periodicity) {
            if (jobSchedulerInternal.periodicity === 'single') {
                jobScheduler.recurrent = false;
            }
            else {
                Object.assign(jobScheduler, this.convertToPeriodicity(jobSchedulerInternal));
            }
        }
        if (jobSchedulerInternal.firstExecutionHour) {
            jobScheduler.firstExecution =
                this.replaceHourFirstExecution(jobSchedulerInternal.firstExecution, jobSchedulerInternal.firstExecutionHour);
        }
        if (!Object.keys(this.returnValidExecutionParameter(jobScheduler.executionParameter)).length) {
            delete jobScheduler.executionParameter;
        }
        this.removeInvalidKeys(jobScheduler);
        return jobScheduler;
    }
    /**
     * @private
     * @param {?=} jobScheduler
     * @return {?}
     */
    convertToJobSchedulerInternal(jobScheduler = (/** @type {?} */ ({}))) {
        /** @type {?} */
        const jobSchedulerInternal = Object.assign({}, jobScheduler);
        if (jobScheduler.firstExecution) {
            jobSchedulerInternal.firstExecutionHour = this.getHourFirstExecution(jobScheduler.firstExecution);
        }
        Object.assign(jobSchedulerInternal, this.convertToPeriodicityInternal(jobScheduler));
        this.removeInvalidKeys(jobSchedulerInternal, ['weekly', 'monthly', 'daily']);
        return jobSchedulerInternal;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    convertToPeriodicity(value) {
        /** @type {?} */
        const newValue = {};
        /** @type {?} */
        const valuePeriodicity = value.periodicity;
        if (valuePeriodicity) {
            newValue[valuePeriodicity] = {};
            if (valuePeriodicity === 'monthly') {
                newValue[valuePeriodicity].day = value.dayOfMonth ? parseInt(value.dayOfMonth, 10) : 0;
            }
            else if (valuePeriodicity === 'weekly') {
                newValue[valuePeriodicity].daysOfWeek = value.daysOfWeek;
            }
            newValue[valuePeriodicity].hour = value.hour ? parseInt(value.hour.split(':')[0], 10) : 0;
            newValue[valuePeriodicity].minute = value.hour ? parseInt(value.hour.split(':')[1], 10) : 0;
        }
        return newValue;
    }
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    convertToPeriodicityInternal(value = (/** @type {?} */ ({}))) {
        if (value.monthly) {
            return {
                periodicity: 'monthly',
                hour: `${addZero(value.monthly.hour)}:${addZero(value.monthly.minute)}`,
                dayOfMonth: value.monthly.day
            };
        }
        else if (value.daily) {
            return {
                periodicity: 'daily',
                hour: `${addZero(value.daily.hour)}:${addZero(value.daily.minute)}`
            };
        }
        else if (value.weekly) {
            return {
                periodicity: 'weekly',
                hour: `${addZero(value.weekly.hour)}:${addZero(value.weekly.minute)}`,
                daysOfWeek: [...value.weekly.daysOfWeek]
            };
        }
        else {
            return {
                periodicity: 'single'
            };
        }
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    getCurrentHour(date) {
        /** @type {?} */
        const hours = addZero(date.getHours());
        /** @type {?} */
        const minutes = addZero(date.getMinutes());
        return `${hours}:${minutes}`;
    }
    /**
     * @private
     * @param {?} firstExecutionDate
     * @return {?}
     */
    getHourFirstExecution(firstExecutionDate) {
        return this.getCurrentHour(new Date(firstExecutionDate));
    }
    /**
     * @private
     * @param {?} value
     * @param {?=} keys
     * @return {?}
     */
    removeInvalidKeys(value, keys) {
        /** @type {?} */
        const invalidKeys = keys || ['periodicity', 'hour', 'minute', 'day', 'daysOfWeek', 'dayOfMonth', 'firstExecutionHour'];
        Object.keys(value).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            if (invalidKeys.includes(key)) {
                delete value[key];
            }
        }));
    }
    /**
     * @private
     * @param {?} date
     * @param {?} time
     * @return {?}
     */
    replaceHourFirstExecution(date, time) {
        /** @type {?} */
        const firstExecutionDate = new Date(date);
        /** @type {?} */
        const timeSplited = time.split(':');
        /** @type {?} */
        const hours = parseInt(timeSplited[0], 10);
        /** @type {?} */
        const minutes = parseInt(timeSplited[1], 10);
        firstExecutionDate.setHours(hours, minutes);
        return convertDateToISOExtended(firstExecutionDate);
    }
    /**
     * @private
     * @param {?} parameter
     * @return {?}
     */
    returnValidExecutionParameter(parameter) {
        /** @type {?} */
        const newParameter = Object.assign({}, parameter);
        for (const key in newParameter) {
            if (newParameter.hasOwnProperty(key) && newParameter[key] === undefined) {
                delete newParameter[key];
            }
        }
        return newParameter;
    }
}
ThfPageJobSchedulerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfPageJobSchedulerService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageJobSchedulerService.prototype.endpoint;
    /** @type {?} */
    ThfPageJobSchedulerService.prototype.headers;
    /**
     * @type {?}
     * @private
     */
    ThfPageJobSchedulerService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,