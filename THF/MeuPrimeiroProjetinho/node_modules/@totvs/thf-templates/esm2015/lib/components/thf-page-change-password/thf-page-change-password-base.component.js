/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, isExternalLink, isTypeof } from '../../utils/util';
/**
 * \@description
 *
 * O componente `thf-page-change-password` é utilizado como template para tela de cadastro ou alteração de senha.
 *
 * Apresenta dicas e regras para senhas mais seguras e também possibilidade de personalizar o redirecionamento para as telas
 * 'esqueceu a senha', 'voltar' e 'entrar no sistema'. Os textos das telas são pré-definidos e imutáveis.
 *
 * A propriedade `t-url-new-password` automatiza a rotina do template e simplifica o processo de cadastro/alteração de senha, bastando
 * definir uma url para POST das informações digitadas pelo usuário.  A flexibilidade e praticidade podem chegar a um nível em que o
 * desenvolvimento da aplicação no *client side* é desprovida de qualquer código-fonte relacionado à rotina de cadastro/alteração de senha.
 * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
 * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/\@totvs/thf-theme/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 * @abstract
 */
export class ThfPageChangePasswordBaseComponent {
    constructor() {
        this._hideCurrentPassword = false;
        this._requirements = [];
        this._urlHome = '/';
        /**
         * \@optional
         *
         * \@description
         *
         * URL para a ação de retorno da página.
         *
         * > O botão `Voltar` aparece apenas para telas de alteração de senha, ou seja, só aparece se a propriedade `t-hide-current-password` for
         * falsa.
         *
         * \@default `/`
         */
        this.urlBack = '/';
        /**
         * \@optional
         *
         * \@description
         *
         * Função executada ao submeter o form pelo botão salvar.
         *
         * Caso definida essa função, a modal de confirmação não aparece, mas pode ser chamada pelo
         * método `openConfirmation`. Exemplo:
         *
         * ```
         * \@ViewChild(ThfPageChangePasswordComponent) changePassword: ThfPageChangePasswordComponent;
         *
         * onSubmit() {
         *  this.changePassword.openConfirmation();
         * }
         *
         * ```
         * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-new-password`.
         */
        this.submit = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Esconde o campo `Senha atual` para que o template seja para criação de senha.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set hideCurrentPassword(value) {
        this._hideCurrentPassword = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get hideCurrentPassword() {
        return this._hideCurrentPassword;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * URL para a ação do link `Esqueceu a senha`.
     *
     * A propriedade aceita os seguintes tipos:
     *
     * - **String**: informe uma url externa ou uma rota válida;
     * - **Function**: pode-se customizar a ação. Para esta possilidade basta atribuir:
     * ```
     * <thf-page-change-password>
     *      [recovery]="this.myFunc.bind(this)";
     * </thf-page-change-password>
     * ```
     *
     * - **ThfPageChangePasswordRecovery**: cria-se vínculo automático com o template **thf-modal-password-recovery**.
     *   O objeto deve conter a **url** para requisição dos recursos e pode-se definir o **tipo** de modal para recuperação de senha,
     *   **email** para contato e **máscara** do campo de telefone.
     *
     * > Caso não tenha valor o link `Esqueceu a senha` desaparece.
     * @param {?} value
     * @return {?}
     */
    set recovery(value) {
        this._recovery = value;
        if (isTypeof(value, 'string')) {
            this.recoveryUrlType = isExternalLink(value) ? 'externalLink' : 'internalLink';
        }
    }
    /**
     * @return {?}
     */
    get recovery() {
        return this._recovery;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Lista de regras para criação e alteração de senha.
     * @param {?} value
     * @return {?}
     */
    set requirements(value) {
        this._requirements = value || [];
        this.showRequirements = this._requirements.length > 0;
    }
    /**
     * @return {?}
     */
    get requirements() {
        return this._requirements;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * URL para a ação do botão `Entrar no sistema` da modal de confirmação que aparece após salvar a senha ou se chamada pelo método
     * `openConfirmation`.
     *
     * \@default `/`
     * @param {?} value
     * @return {?}
     */
    set urlHome(value) {
        this._urlHome = value;
        this.modalAction.action = this.navigateTo.bind(this, this.urlHome);
    }
    /**
     * @return {?}
     */
    get urlHome() {
        return this._urlHome;
    }
}
ThfPageChangePasswordBaseComponent.propDecorators = {
    hideCurrentPassword: [{ type: Input, args: ['t-hide-current-password',] }],
    logo: [{ type: Input, args: ['t-logo',] }],
    recovery: [{ type: Input, args: ['t-recovery',] }],
    requirements: [{ type: Input, args: ['t-requirements',] }],
    secondaryLogo: [{ type: Input, args: ['t-secondary-logo',] }],
    token: [{ type: Input, args: ['t-token',] }],
    urlBack: [{ type: Input, args: ['t-url-back',] }],
    urlNewPassword: [{ type: Input, args: ['t-url-new-password',] }],
    urlHome: [{ type: Input, args: ['t-url-home',] }],
    submit: [{ type: Output, args: ['t-submit',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageChangePasswordBaseComponent.prototype._hideCurrentPassword;
    /**
     * @type {?}
     * @private
     */
    ThfPageChangePasswordBaseComponent.prototype._recovery;
    /**
     * @type {?}
     * @private
     */
    ThfPageChangePasswordBaseComponent.prototype._requirements;
    /**
     * @type {?}
     * @private
     */
    ThfPageChangePasswordBaseComponent.prototype._urlHome;
    /**
     * @type {?}
     * @protected
     */
    ThfPageChangePasswordBaseComponent.prototype.validatorChange;
    /** @type {?} */
    ThfPageChangePasswordBaseComponent.prototype.confirmPassword;
    /** @type {?} */
    ThfPageChangePasswordBaseComponent.prototype.currentPassword;
    /** @type {?} */
    ThfPageChangePasswordBaseComponent.prototype.modalAction;
    /** @type {?} */
    ThfPageChangePasswordBaseComponent.prototype.newPassword;
    /** @type {?} */
    ThfPageChangePasswordBaseComponent.prototype.recoveryUrlType;
    /** @type {?} */
    ThfPageChangePasswordBaseComponent.prototype.showRequirements;
    /**
     * \@optional
     *
     * \@description
     *
     * Caminho para a logomarca localizada na parte superior.
     *
     * > Caso seja indefinida o espaço se mantém preservado porém vazio.
     * @type {?}
     */
    ThfPageChangePasswordBaseComponent.prototype.logo;
    /**
     * \@optional
     *
     * \@description
     *
     * Caminho para a logomarca localizada no rodapé.
     * @type {?}
     */
    ThfPageChangePasswordBaseComponent.prototype.secondaryLogo;
    /**
     * Token para solicitação de troca/recuperação de senha.
     *
     * > Esta propriedade será ignorada caso exista um token como parâmetro na URL inicial do template.
     * @type {?}
     */
    ThfPageChangePasswordBaseComponent.prototype.token;
    /**
     * \@optional
     *
     * \@description
     *
     * URL para a ação de retorno da página.
     *
     * > O botão `Voltar` aparece apenas para telas de alteração de senha, ou seja, só aparece se a propriedade `t-hide-current-password` for
     * falsa.
     *
     * \@default `/`
     * @type {?}
     */
    ThfPageChangePasswordBaseComponent.prototype.urlBack;
    /**
     * Endpoint usado pelo template para realizar um POST. Quando preenchido, o método `t-submit` será ignorado e o componente adquirirá
     * automatização para o processo de cadastro/troca de senha.
     *
     * ### Processo
     * Ao digitar um valor válido nos campos de senha e pressionar **salvar**,
     * o componente fará uma requisição `POST` na url especificada nesta propriedade passando o objeto contendo os valores definidos pelo
     * usuário.
     *
     * ```
     * body {
     *  token?: token,
     *  oldPassword?: oldPassword,
     *  newPassword: newPassword
     * }
     * ```
     *
     * O código de resposta HTTP de status esperado é `204`.
     *
     * Em caso de **sucesso**, será exibida a modal de confirmação de senha alterada.
     *
     * > O token será informado pela propriedade `t-token`do componente ou por um *query parameter* na URL do template.
     *
     * *Processo finalizado.*
     *
     * _______________
     *
     * #### Praticidade
     * As informações do serviço de autenticação também podem ser transmitidas diretamente pelas configuraçãos de rota e, desta maneira,
     * dispensa-se qualquer menção e/ou importação do componente `thf-page-change-password` no restante da aplicação. O exemplo abaixo
     * exemplifica a forma dinâmica com a qual o template de tela de troca de senha pode ser gerado ao navegar para rota `/change-password`, e
     * também como ele se comunica com o serviço para efetuação do processo de troca de senha do usuário e solicitação de nova senha.
     * Basta definir nas configurações de rota:
     *
     *
     * ```
     *   import { ThfModalPasswordRecoveryType, ThfPageChangePasswordComponent } from '\@totvs/thf-templates';
     *
     *   ...
     *   const routes: Routes = [
     *     {
     *       path: 'change-password', component: ThfPageChangePasswordComponent, data: {
     *         serviceApi: 'https://thf.totvs.com.br/sample/api/new-password',
     *         recovery: {
     *           url: 'https://thf.totvs.com.br/sample/api/users',
     *           type: ThfModalPasswordRecoveryType.All,
     *           contactMail: 'dev.totvs\@totvs.com',
     *           phoneMask: '9-999-999-9999'
     *         }
     *       }
     *     }
     *     ...
     *   ];
     *
     * \@NgModule({
     *     imports: [RouterModule.forRoot(routes)],
     *     exports: [RouterModule]
     *   })
     *   export class AppRoutingModule { }
     * ```
     *
     *
     * O metadado `serviceApi` deve ser a **url** para requisição dos recursos de troca de senha. E `recovery` é a interface
     * `ThfPageChangePasswordRecovery` responsável pelas especificações contidas na modal de recuperação de senha.
     *
     * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.
     *
     * @type {?}
     */
    ThfPageChangePasswordBaseComponent.prototype.urlNewPassword;
    /**
     * \@optional
     *
     * \@description
     *
     * Função executada ao submeter o form pelo botão salvar.
     *
     * Caso definida essa função, a modal de confirmação não aparece, mas pode ser chamada pelo
     * método `openConfirmation`. Exemplo:
     *
     * ```
     * \@ViewChild(ThfPageChangePasswordComponent) changePassword: ThfPageChangePasswordComponent;
     *
     * onSubmit() {
     *  this.changePassword.openConfirmation();
     * }
     *
     * ```
     * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-new-password`.
     * @type {?}
     */
    ThfPageChangePasswordBaseComponent.prototype.submit;
    /**
     * @abstract
     * @param {?} url
     * @return {?}
     */
    ThfPageChangePasswordBaseComponent.prototype.navigateTo = function (url) { };
}
//# sourceMappingURL=data:application/json;base64,