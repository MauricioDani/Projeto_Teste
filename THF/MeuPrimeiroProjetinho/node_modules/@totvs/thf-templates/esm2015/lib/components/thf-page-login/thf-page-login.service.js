/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ThfPageLoginAuthenticationType } from './enums/thf-page-login-authentication-type.enum';
export class ThfPageLoginService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?} type
     * @param {?} loginForm
     * @return {?}
     */
    onLogin(url, type, loginForm) {
        if (type === ThfPageLoginAuthenticationType.Bearer) {
            loginForm.password = btoa(loginForm.password);
            return this.http.post(url, loginForm);
        }
        else {
            /** @type {?} */
            const user = `(${loginForm.login}:${loginForm.password})`;
            /** @type {?} */
            const headers = new HttpHeaders({
                'Authorization': `${type} ` + btoa(user)
            });
            delete loginForm.login;
            delete loginForm.password;
            return this.http.post(url, loginForm, { headers });
        }
    }
}
ThfPageLoginService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfPageLoginService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ThfPageLoginService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhmLXBhZ2UtbG9naW4uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0b3R2cy90aGYtdGVtcGxhdGVzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGhmLXBhZ2UtbG9naW4vdGhmLXBhZ2UtbG9naW4uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSzNDLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBR2pHLE1BQU0sT0FBTyxtQkFBbUI7Ozs7SUFFOUIsWUFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUFJLENBQUM7Ozs7Ozs7SUFFekMsT0FBTyxDQUFDLEdBQVcsRUFBRSxJQUFvQyxFQUFFLFNBQXVCO1FBRWhGLElBQUksSUFBSSxLQUFLLDhCQUE4QixDQUFDLE1BQU0sRUFBRTtZQUNsRCxTQUFTLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDdkM7YUFBTTs7a0JBQ0MsSUFBSSxHQUFHLElBQUksU0FBUyxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUMsUUFBUSxHQUFHOztrQkFDbkQsT0FBTyxHQUFHLElBQUksV0FBVyxDQUFDO2dCQUM5QixlQUFlLEVBQUUsR0FBRyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2FBQ3pDLENBQUM7WUFDRixPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUM7WUFDdkIsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDO1lBQzFCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDcEQ7SUFFSCxDQUFDOzs7WUFwQkYsVUFBVTs7OztZQVJGLFVBQVU7Ozs7Ozs7SUFXTCxtQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBUaGZQYWdlTG9naW4gfSBmcm9tICcuL2ludGVyZmFjZXMvdGhmLXBhZ2UtbG9naW4uaW50ZXJmYWNlJztcbmltcG9ydCB7IFRoZlBhZ2VMb2dpbkF1dGhlbnRpY2F0aW9uVHlwZSB9IGZyb20gJy4vZW51bXMvdGhmLXBhZ2UtbG9naW4tYXV0aGVudGljYXRpb24tdHlwZS5lbnVtJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRoZlBhZ2VMb2dpblNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XG5cbiAgb25Mb2dpbih1cmw6IHN0cmluZywgdHlwZTogVGhmUGFnZUxvZ2luQXV0aGVudGljYXRpb25UeXBlLCBsb2dpbkZvcm06IFRoZlBhZ2VMb2dpbik6IE9ic2VydmFibGU8T2JqZWN0PiB7XG5cbiAgICBpZiAodHlwZSA9PT0gVGhmUGFnZUxvZ2luQXV0aGVudGljYXRpb25UeXBlLkJlYXJlcikge1xuICAgICAgbG9naW5Gb3JtLnBhc3N3b3JkID0gYnRvYShsb2dpbkZvcm0ucGFzc3dvcmQpO1xuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHVybCwgbG9naW5Gb3JtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdXNlciA9IGAoJHtsb2dpbkZvcm0ubG9naW59OiR7bG9naW5Gb3JtLnBhc3N3b3JkfSlgO1xuICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycyh7XG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYCR7dHlwZX0gYCArIGJ0b2EodXNlcilcbiAgICAgIH0pO1xuICAgICAgZGVsZXRlIGxvZ2luRm9ybS5sb2dpbjtcbiAgICAgIGRlbGV0ZSBsb2dpbkZvcm0ucGFzc3dvcmQ7XG4gICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodXJsLCBsb2dpbkZvcm0sIHsgaGVhZGVycyB9KTtcbiAgICB9XG5cbiAgfVxuXG59XG4iXX0=