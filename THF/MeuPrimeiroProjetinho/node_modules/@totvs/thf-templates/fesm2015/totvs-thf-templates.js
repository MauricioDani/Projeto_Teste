import { EventEmitter, Input, Output, Injectable, Component, ViewChild, NgModule, ChangeDetectorRef, ViewContainerRef, ViewEncapsulation, IterableDiffers } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, NgForm } from '@angular/forms';
import { ThfI18nPipe, ThfFieldModule, ThfModalModule, ThfDividerModule, ThfModule, ThfComponentInjectorService, ThfModalComponent, ThfNotificationService, ThfDialogService, ThfDynamicModule, ThfPageModule, ThfWidgetModule, ThfButtonModule, ThfGridModule, ThfDynamicFormComponent, ThfDynamicFieldType, ThfTableModule, ThfStepperStatus, ThfInfoOrientation, ThfContainerModule, ThfDialogModule, ThfInfoModule, ThfStepperModule } from '@totvs/thf-ui';
import { Router, RouterModule, ActivatedRoute } from '@angular/router';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { __awaiter } from 'tslib';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Idiomas suportados pelas páginas
/** @type {?} */
const thfLocales = ['pt', 'en', 'es'];
// Idioma padrão
/** @type {?} */
const thfLocaleDefault = 'pt';
/**
 * @deprecated
 * Utilize o método `getShortBrowserLanguage`.
 *
 * \@description
 * Retorna idioma do browser ou o idioma padrão.
 * @return {?}
 */
function browserLanguage() {
    return getShortBrowserLanguage();
}
/**
 * Retorna o idioma atual do navegador
 * @return {?}
 */
function getBrowserLanguage() {
    // navigator.userLanguage is the value for IE10
    return navigator.language || navigator['userLanguage'];
}
/**
 * Retorna o idioma do navegador, com somente as duas primeiras letras. Por exemplo: "pt" ou "es".
 *
 * Caso o valor retornado pelo navegador não estiver dentro dos idiomas suportados pelo THF,
 * será retornado a linguagem padrão (thfLocaleDefault).
 * @return {?}
 */
function getShortBrowserLanguage() {
    /** @type {?} */
    const language = (getBrowserLanguage() || thfLocaleDefault).toLowerCase().substring(0, 2);
    if (!thfLocales.includes(language)) {
        return thfLocaleDefault;
    }
    return language;
}
/**
 * @param {?} val
 * @return {?}
 */
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
/**
 * @param {?} value
 * @param {?=} valueDefault
 * @return {?}
 */
function convertToInt(value, valueDefault) {
    /** @type {?} */
    const validNumber = parseInt(value, 10);
    /** @type {?} */
    const validDefaultValue = parseInt(valueDefault, 10);
    /** @type {?} */
    const defaultValue = validDefaultValue || validDefaultValue === 0 ? validDefaultValue : undefined;
    return validNumber || validNumber === 0 ? validNumber : defaultValue;
}
/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */
function isTypeof(object, type) {
    return typeof object === type;
}
/**
 * @param {?} date
 * @param {?=} time
 * @return {?}
 */
function convertDateToISOExtended(date, time) {
    if (date) {
        /** @type {?} */
        const getMonth = date.getMonth() + 1;
        /** @type {?} */
        const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
        /** @type {?} */
        const month = getMonth < 10 ? '0' + getMonth : getMonth;
        /** @type {?} */
        const year = formatYear(date.getFullYear());
        /** @type {?} */
        const dateString = date.toString();
        if (time) {
            return year + '-' + month + '-' + day + time;
        }
        else {
            return year + '-' + month + '-' + day + 'T' + dateString.substring(16, 24) +
                dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
        }
    }
    else {
        return null;
    }
}
/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 * @param {?} year Ano
 * @return {?}
 */
function formatYear(year) {
    if (year >= 1000) {
        return year.toString();
    }
    if (year > 99 && year < 1000) {
        return `0${year}`;
    }
    if (year > 9 && year < 100) {
        return `00${year}`;
    }
    if (year >= 0 && year < 10) {
        return `000${year}`;
    }
}
/**
 * @param {?} url
 * @return {?}
 */
function isExternalLink(url) {
    return url ? url.startsWith('http') : false;
}
/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param {?=} items {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */
function mapArrayByProperties(items = [], properties = []) {
    return items.map((/**
     * @param {?} item
     * @return {?}
     */
    item => mapObjectByProperties(item, properties)));
}
/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param {?=} object {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */
function mapObjectByProperties(object = {}, properties = []) {
    /** @type {?} */
    const getSelectedProperties = (/**
     * @param {?} selectedProperties
     * @param {?} property
     * @return {?}
     */
    (selectedProperties, property) => (Object.assign({}, selectedProperties, { [property]: object[property] })));
    return properties.reduce(getSelectedProperties, {});
}
/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param {?=} object Objeto de onde será pego os valores.
 * @return {?}
 */
function valuesFromObject(object = {}) {
    return Object.keys(object).map((/**
     * @param {?} property
     * @return {?}
     */
    property => object[property]));
}
/**
 * adiciona 0 no tempo informado, caso menor q 10
 *
 * @param {?} time
 * @return {?}
 */
function addZero(time) {
    if (!time) {
        return '00';
    }
    if (time < 10) {
        return `0${time}`;
    }
    return time;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const thfModalPasswordRecoveryLiterals = {
    en: (/** @type {?} */ ({
        cancelButton: 'Cancel',
        closeButton: 'Close',
        continueButton: 'Continue',
        email: 'e-mail',
        emailErrorMessagePhrase: 'Invalid e-mail format',
        emailSentConfirmationPhrase: `We have sent the instructions and new password creation link to your e-mail.
    If you did not receive it after a few minutes, check your spam box or click Resend.`,
        emailSentTitle: 'E-mail sent',
        forgotPasswordTitle: 'Forgot your password?',
        insertCode: 'Type the code',
        insertEmail: 'Enter your e-mail',
        insertPhone: 'Enter your mobile number',
        phoneErrorMessagePhrase: 'Invalid phone number',
        prepositionIn: 'in',
        prepositionOr: 'or',
        recoveryPasswordPhrase: 'To recover your password we will send you a {0} with instructions.',
        resendEmailButton: 'Resend',
        resendSmsCodePhrase: 'If the code does not arrive within a few minutes, please send it again.',
        sendAgainPhrase: 'If the code does not arrive within a few minutes',
        sendAgain: 'send again.',
        sendButton: 'Submit',
        sentSmsCodePhrase: 'We sent a code for your mobile phone.',
        sms: 'SMS',
        smsCodeErrorMessagePhrase: 'Invalid code. Please re-enter or contact support',
        supportContact: 'If you do not have access to {0} contact support',
        telephone: 'telephone',
        typeCodeTitle: 'Enter sent code'
    })),
    es: (/** @type {?} */ ({
        cancelButton: 'Cancelar',
        closeButton: 'Cerrar',
        continueButton: 'Continuar',
        email: 'e-mail',
        emailErrorMessagePhrase: 'Formato de correo electrónico no válido',
        emailSentConfirmationPhrase: `Enviamos las instrucciones y enlace de creación de nueva contraseña para su correo electrónico.
    Si no ha recibido después de unos minutos, compruebe su caja de spam o haga clic en Reenviar`,
        emailSentTitle: 'E-mail enviado',
        forgotPasswordTitle: 'Olvidaste tu contraseña?',
        insertCode: 'Introduzca el código',
        insertEmail: 'Introduce tu e-mail',
        insertPhone: 'Introduce tu número de celular',
        phoneErrorMessagePhrase: 'Número de teléfono no válido',
        prepositionIn: 'en',
        prepositionOr: 'u',
        recoveryPasswordPhrase: 'Para recuperar su contraseña vamos a enviar un {0} con instrucciones.',
        resendEmailButton: 'Reenviar',
        resendSmsCodePhrase: 'Si el código no llega dentro de unos minutos, vuelva a enviar.',
        sendAgain: 'envíe de nuevo.',
        sendAgainPhrase: 'Si el código no llega dentro de unos minutos',
        sendButton: 'Enviar',
        sentSmsCodePhrase: 'Enviamos un código para su celular.',
        sms: 'SMS',
        smsCodeErrorMessagePhrase: 'Código no válido. Escriba de nuevo o póngase en contacto con el soporte',
        supportContact: 'Si no tiene acceso a {0} póngase en contacto con el soporte',
        telephone: 'teléfono',
        typeCodeTitle: 'Escribir código enviado'
    })),
    pt: (/** @type {?} */ ({
        cancelButton: 'Cancelar',
        closeButton: 'Fechar',
        continueButton: 'Continuar',
        email: 'e-mail',
        emailErrorMessagePhrase: 'Formato de e-mail inválido',
        emailSentConfirmationPhrase: `Enviamos as instruções e link de criação de nova senha para o seu e-mail.
    Caso não tenha recebido após alguns minutos, verifique sua caixa de spam ou clique em Reenviar.`,
        emailSentTitle: 'E-mail enviado',
        forgotPasswordTitle: 'Esqueceu sua senha?',
        insertCode: 'Digite o código',
        insertEmail: 'Insira seu e-mail',
        insertPhone: 'Insira seu número de celular',
        phoneErrorMessagePhrase: 'Número de telefone inválido',
        prepositionIn: 'em',
        prepositionOr: 'ou',
        recoveryPasswordPhrase: 'Para recuperar sua senha vamos enviar um {0} com instruções.',
        resendEmailButton: 'Reenviar',
        resendSmsCodePhrase: 'Se o código não chegar dentro de alguns minutos envie novamente',
        sendAgain: 'envie novamente.',
        sendAgainPhrase: 'Se o código não chegar dentro de alguns minutos',
        sendButton: 'Enviar',
        sentSmsCodePhrase: 'Enviamos um código para seu celular cadastrado.',
        sms: 'SMS',
        smsCodeErrorMessagePhrase: 'Código inválido. Digite novamente ou contacte o suporte',
        supportContact: 'Se não tiver acesso ao {0} contacte o suporte',
        telephone: 'telefone',
        typeCodeTitle: 'Digitar código enviado'
    }))
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ThfModalPasswordRecoveryType = {
    /** Possibilita ao usuário optar por envio via email ou SMS */
    All: 'all',
    /** Definição para recuperação apenas por email */
    Email: 'email',
    /** Definição para recuperação apenas por SMS */
    SMS: 'sms',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ThfModalPasswordRecoveryDefaultMaxLength = 15;
/** @type {?} */
const ThfModalPasswordRecoveryDefaultMinLength = 15;
/** @type {?} */
const ThfModalPasswordRecoveryDefaultPhone = '(99) 99999-9999';
/** @type {?} */
const ThfModalPasswordRecoveryTypeDefault = ThfModalPasswordRecoveryType.Email;
/**
 * \@description
 *
 * O componente `thf-modal-password-recovery` é utilizado como template para solicitação de troca de senha.
 *
 * É composto por uma modal que possui três telas, cada uma com as seguintes características:
 *
 * - A primeira possui campos para preenchimento de email ou número de telefone;
 * - Tela com campo para preenchimento de código SMS enviado para o número de telefone enviado;
 * - A terceira se trata de uma confirmação de envio de link para a caixa de email do usuário.
 *
 *
 * A propriedade `t-url-recovery` automatiza a rotina do componente e simplifica o processo
 * para recuperação de senha, bastando definir uma url para requisição dos recursos.
 * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
 * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
 *
 *
 * Para a modal de digitação de código SMS, é possível definir uma mensagem de erro
 * customizada com a propriedade `t-code-error` e há um link para
 * reenvio de código por SMS. Ao reenviar, o evento `t-code-submit` envia um objeto com o telefone do usuário e a quantidade
 * de vezes em que o usuário fez a solicitação de reenvio.
 *
 * > É indicada a utilização da tela de digitação para envio de código SMS apenas
 * se a opção por envio SMS for disponibilizada para o usuário.
 *
 *
 * A modal de confirmação contém uma ação de reenvio e o evento `t-submit`
 * é quem passa o objeto contendo o email em conjunto com a quantidade de tentativas de reenvio.
 *
 * > A tela de confirmação é indicada para quando o usuário solicitar a troca através do email.
 *
 * > Os textos das modals são pré-definidos, imutáveis e são traduzidos de acordo com o idioma do *browser* (pt, en e es)
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/\@totvs/thf-theme/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 * @abstract
 */
class ThfModalPasswordRecoveryBaseComponent {
    constructor() {
        this._phoneMask = ThfModalPasswordRecoveryDefaultPhone;
        this._type = ThfModalPasswordRecoveryTypeDefault;
        this.maxLength = ThfModalPasswordRecoveryDefaultMaxLength;
        this.minLength = ThfModalPasswordRecoveryDefaultMinLength;
        this.literals = Object.assign({}, thfModalPasswordRecoveryLiterals[thfLocaleDefault], thfModalPasswordRecoveryLiterals[browserLanguage()]);
        /**
         * \@optional
         *
         * \@description
         *
         * Ação contendo como parâmetro o código enviado por SMS e digitado pelo usuário.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
         */
        this.codeSubmit = new EventEmitter();
        /**
         * \@optional
         *
         * \@description
         *
         * Ação contendo o email como parâmetro e que é executada quando o usuário clica sobres os botões de 'enviar' e 'reenviar' e-mail.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
         */
        this.submit = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Definição do e-mail que é exibido na mensagem para contato de suporte.
     * @param {?} value
     * @return {?}
     */
    set contactEmail(value) {
        this._contactEmail = value;
        this.smsCodeErrorMessage = this.concatenateSMSErrorMessage(value);
    }
    /**
     * @return {?}
     */
    get contactEmail() {
        return this._contactEmail;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Definição da mascara do campo de telefone.
     *
     * \@default `(99) 99999-9999`
     * @param {?} value
     * @return {?}
     */
    set phoneMask(value) {
        this._phoneMask = value || ThfModalPasswordRecoveryDefaultPhone;
        this.minLength = this.maxLength = this._phoneMask.length;
    }
    /**
     * @return {?}
     */
    get phoneMask() {
        return this._phoneMask;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define o tipo de recuperação de senha que será exibido.
     *
     * \@default `ThfModalPasswordRecoveryType.Email`
     *
     * @param {?} value
     * @return {?}
     */
    set type(value) {
        this._type = ((/** @type {?} */ (Object))).values(ThfModalPasswordRecoveryType).includes(value) ? value : ThfModalPasswordRecoveryTypeDefault;
    }
    /**
     * @return {?}
     */
    get type() {
        return this._type;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    concatenateSMSErrorMessage(value) {
        /** @type {?} */
        const literalCodeErrorMessage = this.literals.smsCodeErrorMessagePhrase;
        return value && value !== '' ? `${literalCodeErrorMessage} ${this.literals.prepositionIn} ${value}.` : literalCodeErrorMessage;
    }
}
ThfModalPasswordRecoveryBaseComponent.propDecorators = {
    contactEmail: [{ type: Input, args: ['t-contact-email',] }],
    codeError: [{ type: Input, args: ['t-code-error',] }],
    phoneMask: [{ type: Input, args: ['t-phone-mask',] }],
    type: [{ type: Input, args: ['t-type',] }],
    urlRecovery: [{ type: Input, args: ['t-url-recovery',] }],
    codeSubmit: [{ type: Output, args: ['t-code-submit',] }],
    submit: [{ type: Output, args: ['t-submit',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ThfModalPasswordRecoveryModalContent = {
    /** Exibição de modal contendo campo para preenchimento de email ou número de telefone */
    Email: 'email',
    /** Exibição de modal contendo campo para inserção de código enviado por SMS */
    SMSCode: 'smsCode',
    /** Exibição de modal de confirmação de envio */
    Confirmation: 'confirmation',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfModalPasswordRecoveryService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} urlRecovery
     * @param {?} item
     * @param {?=} params
     * @return {?}
     */
    post(urlRecovery, item, params) {
        return this.http.post(urlRecovery, item, { observe: 'response', params: params });
    }
}
ThfModalPasswordRecoveryService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfModalPasswordRecoveryService.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfModalPasswordRecoveryBaseComponent
 *
 * \@example
 *
 * <example name="thf-modal-password-recovery-basic" title="Totvs Modal Password Recovery Basic">
 *  <file name="sample-thf-modal-password-recovery-basic/sample-thf-modal-password-recovery-basic.component.html"> </file>
 *  <file name="sample-thf-modal-password-recovery-basic/sample-thf-modal-password-recovery-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-modal-password-recovery-labs" title="Totvs Modal Password Recovery Labs">
 *  <file name="sample-thf-modal-password-recovery-labs/sample-thf-modal-password-recovery-labs.component.html"> </file>
 *  <file name="sample-thf-modal-password-recovery-labs/sample-thf-modal-password-recovery-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-modal-password-recovery-request" title="Totvs Modal Password Recovery Request">
 *  <file name="sample-thf-modal-password-recovery-request/sample-thf-modal-password-recovery-request.component.html"> </file>
 *  <file name="sample-thf-modal-password-recovery-request/sample-thf-modal-password-recovery-request.component.ts"> </file>
 * </example>
 */
class ThfModalPasswordRecoveryComponent extends ThfModalPasswordRecoveryBaseComponent {
    /**
     * @param {?} router
     * @param {?} thfI18nPipe
     * @param {?} thfModalPasswordRecoveryService
     */
    constructor(router, thfI18nPipe, thfModalPasswordRecoveryService) {
        super();
        this.router = router;
        this.thfI18nPipe = thfI18nPipe;
        this.thfModalPasswordRecoveryService = thfModalPasswordRecoveryService;
        this.chosenTypeFormOption = ThfModalPasswordRecoveryType.Email;
        this.codeMask = '9 9 9 9 9 9';
        this.emailModal = true;
        this.emailModalPhrases = {};
        this.endpoint = '.';
        this.invalidCode = false;
        this.invalidEmail = false;
        this.modalType = ThfModalPasswordRecoveryModalContent.Email;
        this.submittedCodeValue = (/** @type {?} */ ({}));
        this.submittedContactValue = (/** @type {?} */ ({}));
        this.primaryAction = { label: undefined, action: (/**
             * @return {?}
             */
            () => { }) };
        this.secondaryAction = { label: undefined, action: (/**
             * @return {?}
             */
            () => { }) };
        this.typeFormOptions = [
            { label: 'e-mail', value: ThfModalPasswordRecoveryType.Email },
            { label: 'SMS', value: ThfModalPasswordRecoveryType.SMS }
        ];
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.passwordRecoverySubscription) {
            this.passwordRecoverySubscription.unsubscribe();
        }
        if (this.smsCodeSubscription) {
            this.smsCodeSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    completed() {
        this.cancelAction();
    }
    /**
     * @param {?} form
     * @return {?}
     */
    formModelChangesCheck(form) {
        /** @type {?} */
        const invalidForm = form.invalid;
        this.invalidEmail = invalidForm && form.dirty;
        this.primaryAction.disabled = invalidForm;
        if (this.modalType === ThfModalPasswordRecoveryModalContent.SMSCode) {
            /** @type {?} */
            const codeError = this.codeError !== undefined && this.codeError !== '';
            this.showCustomCodeError = codeError && form.pristine;
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    getInputType(type) {
        this.type = type;
        this.pipeModalPhrases();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.control = this.emailForm.controls[type];
            this.formModelChangesCheck(this.emailForm);
            this.resetFormFields(this.control);
        }));
    }
    /**
     * @return {?}
     */
    open() {
        /** @type {?} */
        const control = this.checkFormType(this.type);
        this.control = this.emailForm.controls[control];
        this.setEmailModalPhrasesAndActions();
        this.formModelChangesCheck(this.emailForm);
        this.recoveryModalElement.open();
    }
    /**
     * @return {?}
     */
    openConfirmation() {
        this.modalTitle = this.literals.emailSentTitle;
        this.modalType = ThfModalPasswordRecoveryModalContent.Confirmation;
        this.setActions(this.cancelAction, this.literals.closeButton, this.submitAction, this.literals.resendEmailButton, false);
    }
    /**
     * @return {?}
     */
    openSmsCode() {
        this.modalTitle = this.literals.typeCodeTitle;
        this.modalType = ThfModalPasswordRecoveryModalContent.SMSCode;
        this.setActions(this.submitSmsCodeAction, this.literals.continueButton, this.cancelAction, this.literals.cancelButton, true);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.control = this.smsCodeForm.controls['sms'];
            this.formModelChangesCheck(this.smsCodeForm);
        }));
    }
    /**
     * @return {?}
     */
    resendSmsCode() {
        this.incrementRetryAttempts();
        if (this.urlRecovery) {
            this.submitActionRequest(this.submittedContactValue, this.type);
        }
        else {
            this.submit.emit(this.submittedContactValue);
        }
    }
    /**
     * @private
     * @param {?} responseObj
     * @return {?}
     */
    assignSmsResponse(responseObj) {
        this.smsBodyResponse = Object.assign({}, { hash: responseObj.hash });
        if (responseObj.urlValidationCode) {
            this.smsBodyResponse = Object.assign(this.smsBodyResponse, { urlValidationCode: responseObj.urlValidationCode });
        }
    }
    /**
     * @private
     * @return {?}
     */
    cancelAction() {
        this.resetFormFields(this.control);
        this.submittedContactValue = {};
        this.chosenTypeFormOption = ThfModalPasswordRecoveryType.Email;
        this.modalType = ThfModalPasswordRecoveryModalContent.Email;
        this.type = this.modalPasswordRecoveryTypeAll ? ThfModalPasswordRecoveryType.All : this.type;
        this.recoveryModalElement.close();
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    checkFormType(type) {
        return type !== ThfModalPasswordRecoveryType.All ? type : ThfModalPasswordRecoveryType.Email;
    }
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    formReset(control) {
        control.markAsPristine();
        control.markAsUntouched();
        control.updateValueAndValidity();
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    getEmitValue(type) {
        return type === ThfModalPasswordRecoveryType.SMS ? this.phone : this.email;
    }
    /**
     * @private
     * @return {?}
     */
    incrementRetryAttempts() {
        this.submittedContactValue.retry = (this.submittedContactValue.retry + 1 || 1);
    }
    /**
     * @private
     * @param {?} url
     * @param {?} queryParam
     * @return {?}
     */
    openExternalLink(url, queryParam) {
        window.open(`${url}?token=${queryParam}`, '_self');
    }
    /**
     * @private
     * @param {?} url
     * @param {?} endpoint
     * @param {?} queryParam
     * @return {?}
     */
    openInternalLink(url, endpoint, queryParam) {
        this.router.navigate([`${url}/${endpoint}`], { queryParams: { token: queryParam } });
    }
    /**
     * @private
     * @return {?}
     */
    pipeModalPhrases() {
        if (this.type === ThfModalPasswordRecoveryType.SMS) {
            this.emailModalPhrases['firstPhrase'] = this.setPipeArguments(this.literals.recoveryPasswordPhrase, this.literals.sms);
            this.emailModalPhrases['secondPhrase'] = this.setPipeArguments(this.literals.supportContact, this.literals.telephone);
        }
        else {
            this.emailModalPhrases['firstPhrase'] = this.setPipeArguments(this.literals.recoveryPasswordPhrase, this.literals.email);
            this.emailModalPhrases['secondPhrase'] = this.setPipeArguments(this.literals.supportContact, this.literals.email);
        }
    }
    /**
     * @private
     * @param {?} recoveryToken
     * @return {?}
     */
    redirectToChangePassword(recoveryToken) {
        /** @type {?} */
        const urlChangePassword = recoveryToken.urlChangePassword;
        if (urlChangePassword) {
            isExternalLink(urlChangePassword) ?
                this.openExternalLink(urlChangePassword, recoveryToken.token) :
                this.openInternalLink(this.urlRecovery, urlChangePassword, recoveryToken.token);
        }
        else {
            /** @type {?} */
            const changePasswordEndpoint = 'changePassword';
            this.openInternalLink(this.urlRecovery, changePasswordEndpoint, recoveryToken.token);
        }
    }
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    resetFormFields(control) {
        this.formReset(control);
        this.email = undefined;
        this.phone = undefined;
        this.smsCode = undefined;
    }
    /**
     * @private
     * @param {?} primaryAction
     * @param {?} primarylabel
     * @param {?} secondaryAction
     * @param {?} secondaryLabel
     * @param {?} disabled
     * @return {?}
     */
    setActions(primaryAction, primarylabel, secondaryAction, secondaryLabel, disabled) {
        this.primaryAction.action = (/**
         * @return {?}
         */
        () => primaryAction.call(this));
        this.primaryAction.label = primarylabel;
        this.secondaryAction.action = (/**
         * @return {?}
         */
        () => secondaryAction.call(this));
        this.secondaryAction.label = secondaryLabel;
        this.primaryAction.disabled = disabled;
    }
    /**
     * @private
     * @return {?}
     */
    setEmailModalPhrasesAndActions() {
        this.modalTitle = this.literals.forgotPasswordTitle;
        this.pipeModalPhrases();
        this.modalPasswordRecoveryTypeAll = this.type === ThfModalPasswordRecoveryType.All;
        this.setActions(this.submitAction, this.literals.sendButton, this.cancelAction, this.literals.cancelButton, true);
    }
    /**
     * @private
     * @param {?=} urlValidationCode
     * @return {?}
     */
    setRequestEndpoint(urlValidationCode) {
        /** @type {?} */
        const endpoint = urlValidationCode || 'validation';
        return `${this.urlRecovery}/${endpoint}`;
    }
    /**
     * @private
     * @param {?} literalAttr
     * @param {?} arg
     * @return {?}
     */
    setPipeArguments(literalAttr, arg) {
        return this.thfI18nPipe.transform(literalAttr, arg);
    }
    /**
     * @private
     * @return {?}
     */
    submitAction() {
        this.modalType === ThfModalPasswordRecoveryModalContent.Confirmation ? this.incrementRetryAttempts() : this.formReset(this.control);
        this.submittedContactValue[this.checkFormType(this.type)] = this.getEmitValue(this.type);
        if (this.urlRecovery) {
            this.submitActionRequest(this.submittedContactValue, this.type);
        }
        else {
            this.submit.emit(this.submittedContactValue);
        }
    }
    /**
     * @private
     * @param {?} data
     * @param {?} modalType
     * @return {?}
     */
    submitActionRequest(data, modalType) {
        /** @type {?} */
        const params = modalType === ThfModalPasswordRecoveryType.SMS ? { type: 'sms' } : undefined;
        this.passwordRecoverySubscription =
            this.thfModalPasswordRecoveryService.post(this.urlRecovery, data, params)
                .subscribe((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                if ((modalType === ThfModalPasswordRecoveryType.Email || modalType === ThfModalPasswordRecoveryType.All) && response.status === 204) {
                    this.openConfirmation();
                }
                else if (modalType === ThfModalPasswordRecoveryType.SMS && response.status === 200) {
                    this.assignSmsResponse(response.body);
                    this.openSmsCode();
                }
            }));
    }
    /**
     * @private
     * @return {?}
     */
    submitSmsCodeAction() {
        this.submittedCodeValue.code = this.smsCode;
        if (this.urlRecovery) {
            this.submittedCodeValue = Object.assign(this.submittedCodeValue, { hash: this.smsBodyResponse.hash });
            this.submitSmsCodeRequest(this.submittedCodeValue);
        }
        else {
            this.codeSubmit.emit(this.submittedCodeValue);
        }
        this.resetFormFields(this.control);
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    submitSmsCodeRequest(data) {
        this.smsCodeSubscription = this.thfModalPasswordRecoveryService
            .post(this.setRequestEndpoint(this.smsBodyResponse.urlValidationCode), data)
            .subscribe((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const successStatus = response.status === 200;
            if (successStatus) {
                this.completed();
                this.redirectToChangePassword(response.body);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.codeError = error.error.message;
            this.openSmsCode();
        }));
    }
}
ThfModalPasswordRecoveryComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-modal-password-recovery',
                template: "<thf-modal #recoveryModal\n  t-hide-close\n  t-size=\"auto\"\n  [ngSwitch]=\"modalType\"\n  [t-primary-action]=\"primaryAction\"\n  [t-secondary-action]=\"secondaryAction\"\n  [t-title]=\"modalTitle\"> \n  <div class=\"thf-modal-password-recovery-wrapper\">\n    <div *ngSwitchCase=\"'email'\" class=\"thf-modal-password-recovery-content thf-row\">\n      <div class=\"thf-modal-password-recovery-text thf-md-12 thf-mb-1\">\n        {{ emailModalPhrases.firstPhrase }}\n      </div>\n      <div class=\"thf-mb-2 thf-md-12\">\n        <form #emailForm=\"ngForm\">\n\n          <div *ngIf=\"modalPasswordRecoveryTypeAll\">\n            <thf-radio-group \n              name=\"type\"\n              [(ngModel)]=\"chosenTypeFormOption\"\n              [t-options]=\"typeFormOptions\"\n              (t-change)=\"getInputType($event)\">\n            </thf-radio-group>\n          </div>\n\n          <div class=\"thf-mt-1\">\n            <thf-email *ngIf=\"type === 'email' || type === 'all'\"\n              name=\"email\"\n              [(ngModel)]=\"email\"\n              t-required\n              [t-label]=\"literals.insertEmail\"\n              (t-change-model)=\"formModelChangesCheck(emailForm)\">\n            </thf-email>\n    \n            <thf-input *ngIf=\"type === 'sms'\"\n              name=\"sms\"\n              [(ngModel)]=\"phone\"\n              t-icon=\"thf-icon-telephone\"\n              t-required\n              [t-label]=\"literals.insertPhone\"\n              [t-mask]=\"phoneMask\"\n              [t-maxlength]=\"maxLength\"\n              [t-minlength]=\"minLength\"\n              (t-change-model)=\"formModelChangesCheck(emailForm)\">\n            </thf-input>\n          </div>\n          \n          <div class=\"thf-field-container-bottom thf-field-container-error-container\">\n            <thf-modal-password-recovery-error-message *ngIf=\"invalidEmail && control.dirty\" \n              [t-text]=\"type === 'sms' ? literals.phoneErrorMessagePhrase : literals.emailErrorMessagePhrase\">\n            </thf-modal-password-recovery-error-message>\n          </div>\n        </form>\n      </div>\n      <div class=\"thf-modal-password-recovery-text thf-md-12\">{{ emailModalPhrases.secondPhrase }}<span *ngIf=\"contactEmail\">\n        {{ literals.prepositionIn }} \n          <a class=\"thf-modal-password-recovery-link\" href=\"mailto:{{ contactEmail }}\" target=\"_self\">{{ contactEmail }}</a>\n        </span>{{ endpoint }}\n      </div>\n    </div>\n\n    <div #smsCodeModal *ngSwitchCase=\"'smsCode'\" class=\"thf-modal-password-recovery-content thf-row\">\n      <div class=\"thf-modal-password-recovery-text thf-md-12 thf-mb-1\">{{ literals.sentSmsCodePhrase }}</div>\n      <div class=\"thf-mb-2 thf-md-12\">\n        <form #smsCodeForm=\"ngForm\">\n          <thf-input\n            name=\"sms\"\n            [(ngModel)]=\"smsCode\"\n            t-maxlength=\"11\"\n            t-minlength=\"11\"\n            t-required\n            [t-label]=\"literals.insertCode\"\n            [t-mask]=\"codeMask\"\n            (t-change-model)=\"formModelChangesCheck(smsCodeForm)\">\n          </thf-input>\n          <div class=\"thf-field-container-bottom thf-field-container-error-container\">\n            <thf-modal-password-recovery-error-message *ngIf=\"invalidEmail\"\n              [t-text]=\"smsCodeErrorMessage || this.literals.smsCodeErrorMessagePhrase\">\n            </thf-modal-password-recovery-error-message>\n            <thf-modal-password-recovery-error-message *ngIf=\"showCustomCodeError\"\n              [t-text]=\"codeError\">\n            </thf-modal-password-recovery-error-message>\n          </div>\n        </form>\n      </div>\n      <div class=\"thf-modal-password-recovery-text thf-md-12\">\n        {{ literals.sendAgainPhrase }} \n        <span class=\"thf-modal-password-recovery-link\" (click)=\"resendSmsCode()\">{{ literals.sendAgain }}</span>\n      </div>\n    </div>\n    \n    <div #confirmationModal *ngSwitchCase=\"'confirmation'\" class=\"thf-modal-password-recovery-content thf-row\">\n      <img \n        class=\"thf-modal-password-recovery-user-image thf-mb-2\" \n        src=\"./assets/images/email-sent.svg\"> \n      <div class=\"thf-modal-password-recovery-text\">\n        {{ literals.emailSentConfirmationPhrase }}\n      </div>\n    </div>\n  </div>\n</thf-modal>\n"
            }] }
];
/** @nocollapse */
ThfModalPasswordRecoveryComponent.ctorParameters = () => [
    { type: Router },
    { type: ThfI18nPipe },
    { type: ThfModalPasswordRecoveryService }
];
ThfModalPasswordRecoveryComponent.propDecorators = {
    emailForm: [{ type: ViewChild, args: ['emailForm', { static: false },] }],
    recoveryModalElement: [{ type: ViewChild, args: ['recoveryModal', { static: true },] }],
    smsCodeForm: [{ type: ViewChild, args: ['smsCodeForm', { static: false },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente utilizado para exibição da mensagem customizada de erro em um campo de formulário.
 */
class ThfModalPasswordRecoveryErrorMessageComponent {
}
ThfModalPasswordRecoveryErrorMessageComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-modal-password-recovery-error-message',
                template: "<div class=\"thf-field-container-bottom-text-error thf-field-container-error-item\">\n  <span class=\"thf-icon thf-icon-exclamation\"></span>\n  <span class=\"thf-field-container-error-text\">{{ text }}</span>\n</div>\n"
            }] }
];
ThfModalPasswordRecoveryErrorMessageComponent.propDecorators = {
    text: [{ type: Input, args: ['t-text',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do thf-modal-password-recovery.
 */
class ThfModalPasswordRecoveryModule {
}
ThfModalPasswordRecoveryModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ThfFieldModule,
                    ThfModalModule
                ],
                declarations: [
                    ThfModalPasswordRecoveryComponent,
                    ThfModalPasswordRecoveryErrorMessageComponent
                ],
                exports: [
                    ThfModalPasswordRecoveryComponent,
                    ThfModalPasswordRecoveryErrorMessageComponent
                ],
                providers: [ThfI18nPipe, ThfModalPasswordRecoveryService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para definição de cor de fundo e dos logotipos primário e secundário para os templates
 * de `thf-page-login` e demais templates de login.
 */
class ThfPageBackgroundComponent {
    constructor() {
        this._showSelectLanguage = false;
        this.selectLanguageOptions = [
            { label: 'English', value: 'en' },
            { label: 'Español', value: 'es' },
            { label: 'Português', value: 'pt' }
        ];
        /**
         * Evento disparado ao selecionar alguma opção no seletor de idiomas.
         * Para este evento será passado como parâmetro o valor de idioma selecionado.
         */
        this.selectedLanguage = new EventEmitter();
    }
    /**
     * Caminho para a logomarca localizada na parte superior.
     * @param {?} value
     * @return {?}
     */
    set logo(value) {
        this._logo = isTypeof(value, 'string') && value.trim() ? value : undefined;
    }
    /**
     * @return {?}
     */
    get logo() {
        return this._logo;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Caminho para a logomarca localizada no rodapé.
     * @param {?} value
     * @return {?}
     */
    set secondaryLogo(value) {
        this._secondaryLogo = isTypeof(value, 'string') && value.trim() ? value : undefined;
    }
    /**
     * @return {?}
     */
    get secondaryLogo() {
        return this._secondaryLogo;
    }
    /**
     * Define se o seletor de idiomas deve ser exibido.
     * @param {?} showSelectLanguage
     * @return {?}
     */
    set showSelectLanguage(showSelectLanguage) {
        this._showSelectLanguage = convertToBoolean(showSelectLanguage);
    }
    /**
     * @return {?}
     */
    get showSelectLanguage() {
        return this._showSelectLanguage;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.selectedLanguageOption = browserLanguage();
    }
    /**
     * @return {?}
     */
    onChangeLanguage() {
        this.selectedLanguage.emit(this.selectedLanguageOption);
    }
}
ThfPageBackgroundComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-background',
                template: "<div class=\"thf-page-login-container\">\n  <div class=\"thf-page-login-panel\">\n    <img *ngIf=\"logo\"\n      class=\"thf-page-background-main-logo\"\n      [class.thf-page-background-hide-logo]=\"hideLogo\"\n      alt=\"main-logo\"\n      [src]=\"logo\">\n\n    <div class=\"thf-page-login-body\">\n      <div class=\"thf-page-login-panel-content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n    <div class=\"thf-page-background-footer thf-sm-12\">\n\n      <thf-divider class=\"thf-page-background-footer-mobile-only\"></thf-divider>\n\n      <div class=\"thf-page-background-footer-content\">\n        <div *ngIf=\"showSelectLanguage\" class=\"thf-page-background-footer-select\">\n          <thf-select\n            name=\"selectedLanguageOption\"\n            [(ngModel)]=\"selectedLanguageOption\"\n            [t-options]=\"selectLanguageOptions\"\n            (t-change) = \"onChangeLanguage()\">\n          </thf-select>\n        </div>\n\n        <div class=\"thf-page-background-secondary-logo\"\n          [ngClass]=\"showSelectLanguage ? 'thf-page-background-secondary-logo-right' : 'thf-page-background-secondary-logo-centered'\">\n\n          <img *ngIf=\"secondaryLogo\"\n            class=\"thf-page-background-secondary-logo-image\"\n            alt=\"secondary-logo\"\n            [src]=\"secondaryLogo\">\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"background\"\n    [ngClass]=\"background ? 'thf-page-login-highlight-image' : 'thf-page-login-highlight-image-off'\"\n    [style.background-image]=\"'url(' + background + ')'\">\n    <div class=\"thf-page-login-highlight-text\">\n      <div class=\"thf-font-display\">{{ highlightInfo }}</div>\n    </div>\n  </div>\n</div>\n"
            }] }
];
ThfPageBackgroundComponent.propDecorators = {
    background: [{ type: Input, args: ['t-background',] }],
    hideLogo: [{ type: Input, args: ['t-hide-logo',] }],
    highlightInfo: [{ type: Input, args: ['t-highlight-info',] }],
    logo: [{ type: Input, args: ['t-logo',] }],
    secondaryLogo: [{ type: Input, args: ['t-secondary-logo',] }],
    showSelectLanguage: [{ type: Input, args: ['t-show-select-language',] }],
    selectedLanguage: [{ type: Output, args: ['t-selected-language',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do thf-page-background.
 */
class ThfPageBackgroundModule {
}
ThfPageBackgroundModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    ThfDividerModule,
                    ThfFieldModule,
                ],
                declarations: [
                    ThfPageBackgroundComponent
                ],
                exports: [
                    ThfPageBackgroundComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ThfPageBlockedUserReason = {
    /** Sem definição; a tela exibirá conteúdo de bloqueio genérico. */
    None: 'none',
    /** Definição para tentativas de acesso esgotadas. */
    ExceededAttempts: 'exceededAttempts',
    /** Definição para senha expirada. */
    ExpiredPassword: 'expiredPassword',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ThfPageBlockedUserReasonDefault = ThfPageBlockedUserReason.None;
/** @type {?} */
const ThfPageBlockedUserParamsDefault = { attempts: 5, days: 90, hours: 24 };
/**
 * \@description
 *
 * O componente `thf-page-blocked-user` é utilizado como template para tela de bloqueio de usuário.
 * É possível definir entre três tipos de telas para alertar o usuário sobre um eventual bloqueio de login.
 *
 * Cada modelo de bloqueio possui uma imagem e texto adequados à situação.
 * Os textos das telas são pré-definidos e imutáveis, porém,
 * é possível estipular parâmetros como dias, horas e tentativas de acesso esgotadas.
 *
 * Por fim, há propriedades para adição de telefone e/ou email para contato e também a definição para a url de retorno.
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/\@totvs/thf-theme/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 *
 * _______________
 *
 * #### Praticidade
 * O `thf-page-blocked-user`, assim como suas propriedades, pode também ser transmitido diretamente pelas configuraçãos de rota e,
 * desta maneira, dispensa-se qualquer menção e/ou importação no restante da aplicação. O exemplo abaixo exemplifica
 * a forma dinâmica com a qual o template pode ser gerado se navegasse para uma rota denominada como `/access-denied`:
 *
 *
 * ```
 *   import { ThfPageBlockedUserComponent, ThfPageBlockedUserReason } from '\@totvs/thf-templates';
 *
 *   ...
 *   const routes: Routes = [
 *     {
 *       path: 'access-denied', component: ThfPageBlockedUserComponent, data: {
 *         contactEmail: 'dev.totvs\@totvs.com',
 *         contactPhone: '0800 1234 000',
 *         reason: ThfPageBlockedUserReason.ExpiredPassword,
 *         urlBack: '/home'
 *       }
 *     }
 *     ...
 *   ];
 *
 * \@NgModule({
 *     imports: [RouterModule.forRoot(routes)],
 *     exports: [RouterModule]
 *   })
 *   export class AppRoutingModule { }
 * ```
 *
 * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.
 *
 */
class ThfPageBlockedUserBaseComponent {
    constructor() {
        this._params = Object.assign({}, ThfPageBlockedUserParamsDefault);
        this._reason = ThfPageBlockedUserReason.None;
        this._urlBack = '/';
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Designação de valores usados para a customização da mensagem de bloqueio.
     * Confira abaixo os valores pré-definidos.
     *
     * ```
     *  const customLiterals: ThfPageBlockedUserReasonParams = {
     *    attempts: 5,
     *    days: 90,
     *    hours: 24
     *  };
     * ```
     *
     * > Salientamos a importância e atenção para configuração desses valores conforme definidos no projeto.
     *
     * > Veja os parâmetros customizáveis na interface `ThfPageBlockedUserReasonParams`.
     *
     * @param {?} value
     * @return {?}
     */
    set params(value) {
        if (value instanceof Object) {
            /** @type {?} */
            const keys = Object.keys(value);
            /** @type {?} */
            const newParams = Object.assign({}, ThfPageBlockedUserParamsDefault);
            keys.forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => {
                newParams[key] = value[key];
            }));
            this._params = newParams;
        }
        else {
            this._params = Object.assign({}, ThfPageBlockedUserParamsDefault);
        }
    }
    /**
     * @return {?}
     */
    get params() {
        return this._params;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Definição de motivo de bloqueio de usuário. As informações modificam conforme o motivo selecionado.
     *
     * > Veja os valores válidos no *enum* `ThfPageBlockedUserReason`.
     *
     * \@default `ThfPageBlockedUserReason.None`
     * @param {?} value
     * @return {?}
     */
    set reason(value) {
        this._reason = ((/** @type {?} */ (Object))).values(ThfPageBlockedUserReason).includes(value) ? value : ThfPageBlockedUserReasonDefault;
    }
    /**
     * @return {?}
     */
    get reason() {
        return this._reason;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * URL para a ação de retorno da página.
     *
     * \@default `/`
     * @param {?} url
     * @return {?}
     */
    set urlBack(url) {
        this._urlBack = url;
    }
    /**
     * @return {?}
     */
    get urlBack() {
        return this._urlBack;
    }
}
ThfPageBlockedUserBaseComponent.propDecorators = {
    contactEmail: [{ type: Input, args: ['t-contact-email',] }],
    contactPhone: [{ type: Input, args: ['t-contact-phone',] }],
    params: [{ type: Input, args: ['t-params',] }],
    logo: [{ type: Input, args: ['t-logo',] }],
    reason: [{ type: Input, args: ['t-reason',] }],
    secondaryLogo: [{ type: Input, args: ['t-secondary-logo',] }],
    urlBack: [{ type: Input, args: ['t-url-back',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const thfPageBlockedUserButtonLiterals = {
    en: (/** @type {?} */ ({
        primaryButton: 'Back to home screen',
    })),
    es: (/** @type {?} */ ({
        primaryButton: 'Volver al inicio',
    })),
    pt: (/** @type {?} */ ({
        primaryButton: 'Voltar para o início',
    }))
};
/**
 * \@docsExtends ThfPageBlockedUserBaseComponent
 *
 * \@example
 *
 * <example name="thf-page-blocked-user-basic" title="Totvs Page Blocked User Basic">
 *  <file name="sample-thf-page-blocked-user-basic/sample-thf-page-blocked-user-basic.component.html"> </file>
 *  <file name="sample-thf-page-blocked-user-basic/sample-thf-page-blocked-user-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-blocked-user-labs" title="Totvs Page Blocked User Labs">
 *  <file name="sample-thf-page-blocked-user-labs/sample-thf-page-blocked-user-labs.component.html"> </file>
 *  <file name="sample-thf-page-blocked-user-labs/sample-thf-page-blocked-user-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-blocked-user-exceeded-attempts" title="Totvs Page Blocked User Exceeded Attempts">
 *  <file name="sample-thf-page-blocked-user-exceeded-attempts/sample-thf-page-blocked-user-exceeded-attempts.component.html"> </file>
 *  <file name="sample-thf-page-blocked-user-exceeded-attempts/sample-thf-page-blocked-user-exceeded-attempts.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-blocked-user-expired-password" title="Totvs Page Blocked User Expired Password">
 *  <file name="sample-thf-page-blocked-user-expired-password/sample-thf-page-blocked-user-expired-password.component.html"> </file>
 *  <file name="sample-thf-page-blocked-user-expired-password/sample-thf-page-blocked-user-expired-password.component.ts"> </file>
 * </example>
 */
class ThfPageBlockedUserComponent extends ThfPageBlockedUserBaseComponent {
    /**
     * @param {?} activatedRoute
     * @param {?} router
     */
    constructor(activatedRoute, router) {
        super();
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.literals = Object.assign({}, thfPageBlockedUserButtonLiterals[thfLocaleDefault], thfPageBlockedUserButtonLiterals[browserLanguage()]);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checkingForRouteMetadata(this.activatedRoute.snapshot.data);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    navigateTo(url) {
        isExternalLink(url) ? window.open(url) : this.router.navigate([url || '/']);
    }
    /**
     * @private
     * @param {?} object
     * @param {?} property
     * @return {?}
     */
    checkingForMetadataProperty(object, property) {
        if (Object.prototype.hasOwnProperty.call(object, property)) {
            return object[property];
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    checkingForRouteMetadata(data) {
        if (Object.keys(data).length !== 0) {
            this.contactEmail = this.checkingForMetadataProperty(data, 'contactEmail') || this.contactEmail;
            this.contactPhone = this.checkingForMetadataProperty(data, 'contactPhone') || this.contactPhone;
            this.reason = this.checkingForMetadataProperty(data, 'reason') || this.reason;
            this.urlBack = this.checkingForMetadataProperty(data, 'urlBack') || this.urlBack;
        }
    }
}
ThfPageBlockedUserComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-blocked-user',
                template: "<div class=\"thf-page-blocked-user-wrapper\">\n  <div class=\"thf-page-background-wrap\">\n    <thf-page-background\n      [t-hide-logo]=\"true\"\n      [t-logo]=\"logo\"\n      [t-secondary-logo]=\"secondaryLogo\">\n\n      <thf-page-blocked-user-reason\n        [t-params]=\"params\"\n        [t-reason]=\"reason\">\n      </thf-page-blocked-user-reason>\n\n      <div class=\"thf-page-blocked-user-mobile-bottom-alignment\">\n        <thf-page-blocked-user-contacts\n          [t-email]=\"contactEmail\"\n          [t-phone]=\"contactPhone\">\n        </thf-page-blocked-user-contacts>\n\n        <div class=\"thf-row\">\n          <thf-button\n            class=\"thf-lg-12 thf-sm-12 thf-page-blocked-user-button\"\n            t-type=\"primary\"\n            [t-label]=\"literals.primaryButton\"\n            (t-click)=\"navigateTo(urlBack)\">\n          </thf-button>\n        </div>\n      </div>\n    </thf-page-background>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
ThfPageBlockedUserComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const thfPageBlockedUserContactItemMargin = 16;
class ThfPageBlockedUserContactsComponent {
    /**
     * @param {?} changeDetector
     */
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.overflowItem = false;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.checkContactItemWidth();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.email || changes.phone) {
            this.checkContactItemWidth();
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkContactItemWidth() {
        if (!this.email || !this.phone) {
            this.overflowItem = true;
            return;
        }
        else {
            setTimeout((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const phoneWidth = this.phoneItem.nativeElement.offsetWidth;
                /** @type {?} */
                const mailWidth = this.mailItem.nativeElement.offsetWidth;
                /** @type {?} */
                const contactGroupHalfWidth = this.contactGroup.nativeElement.offsetWidth / 2;
                this.overflowItem = phoneWidth > contactGroupHalfWidth || mailWidth > contactGroupHalfWidth - thfPageBlockedUserContactItemMargin;
            }));
        }
        this.changeDetector.detectChanges();
    }
}
ThfPageBlockedUserContactsComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-blocked-user-contacts',
                template: "<div #contactGroup class=\"thf-page-blocked-user-contact-group thf-row thf-mb-3\">\n  <div *ngIf=\"phone\"\n    class=\"thf-page-blocked-user-contact-item\"\n    [ngClass]=\"overflowItem ? 'thf-md-12' : 'thf-md-6'\">\n    <a\n      class=\"thf-page-blocked-user-link thf-clickable\"\n      [class.thf-page-blocked-user-contact-content-inline]=\"overflowItem\"\n      href=\"tel:{{ phone }}\"\n      target=\"_self\">\n      <div class=\"thf-page-blocked-user-contact-group-item\">\n        <span class=\"thf-page-blocked-user-contact-icon thf-icon thf-icon-telephone thf-pr-1\"></span>\n        <span #phoneItem class=\"thf-page-blocked-user-contact-text thf-font-text\">{{ phone }}</span>\n      </div>\n    </a>\n  </div>\n  <div *ngIf=\"email\"\n    class=\"thf-page-blocked-user-contact-item thf-page-blocked-user-contact-mail\"\n    [ngClass]=\"overflowItem ? 'thf-md-12' : 'thf-md-6'\">\n    <a\n      class=\"thf-page-blocked-user-link thf-clickable\"\n      [class.thf-page-blocked-user-contact-content-inline]=\"overflowItem\"\n      href=\"mailto:{{ email }}\"\n      target=\"_self\">\n      <div class=\"thf-page-blocked-user-contact-group-item\">\n        <span class=\"thf-page-blocked-user-contact-icon thf-icon thf-icon-mail thf-pr-1 \"></span>\n        <span #mailItem class=\"thf-page-blocked-user-contact-text thf-font-text\">{{ email }}</span>\n      </div>\n    </a>\n  </div>\n</div>"
            }] }
];
/** @nocollapse */
ThfPageBlockedUserContactsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThfPageBlockedUserContactsComponent.propDecorators = {
    email: [{ type: Input, args: ['t-email',] }],
    phone: [{ type: Input, args: ['t-phone',] }],
    contactGroup: [{ type: ViewChild, args: ['contactGroup', { static: true },] }],
    mailItem: [{ type: ViewChild, args: ['mailItem', { static: true },] }],
    phoneItem: [{ type: ViewChild, args: ['phoneItem', { static: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const thfPageBlockedUserLiterals = {
    none: {
        pt: {
            title: 'Opa!',
            firstPhrase: 'Tivemos que bloquear essa tela temporariamente.',
            secondPhrase: 'Mas não se preocupe! Basta fazer seu login novamente.'
        },
        en: {
            title: 'Oops!',
            firstPhrase: 'We had to temporarily block this screen.',
            secondPhrase: 'But do not worry! Just sign in again.'
        },
        es: {
            title: 'Opa!',
            firstPhrase: 'Tuvimos que bloquear esta pantalla temporalmente.',
            secondPhrase: '¡Pero no se preocupe! Sólo tienes que iniciar sesión de nuevo.'
        },
    },
    exceededAttempts: {
        pt: {
            title: 'Opa!',
            firstPhrase: `Para sua segurança, após {0} tentativa(s) de senha seu usuário fica bloqueado e não pode ser acessado em {1} hora(s) :( `,
            secondPhrase: 'Isso é para evitar que hackers invadam sua conta.',
            thirdPhrase: 'Mas não se preocupe! Se você for o dono da conta e apenas esqueceu sua senha, basta entrar em contato com o suporte.'
        },
        en: {
            title: 'Oops!',
            firstPhrase: `For your security, after {0} attempt(s) of password
        your user gets blocked and can not be accessed in {1} hour(s) :(`,
            secondPhrase: 'This is to prevent hackers from hacking into your account.',
            thirdPhrase: 'But do not worry! If you are the owner of the account and just forgot your password, just contact support.'
        },
        es: {
            title: 'Opa!',
            firstPhrase: `Para su seguridad, después de {0} intento(s) de contraseña
        su usuario queda bloqueado y no puede ser accedido en {1} hora(s) :(`,
            secondPhrase: 'Esto es para evitar que los hackers invadan su cuenta.',
            thirdPhrase: `¡Pero no se preocupe! Si usted es el dueño de la cuenta
        y acaba de olvidar su contraseña, simplemente póngase en contacto con el soporte.`
        }
    },
    expiredPassword: {
        pt: {
            title: 'Opa! Sua senha expirou',
            firstPhrase: `A cada {0} dia(s) é preciso criar uma nova senha por questão de segurança. Após esses {0} dia(s) seu acesso é bloqueado :(`,
            secondPhrase: 'Mas não se preocupe! Basta entrar em contato com o administrador do sistema.'
        },
        en: {
            title: 'Oops! Your Password has expired',
            firstPhrase: `Every {0} day(s) you need to create a new password for security reasons.
        After these {0} day(s) your access is blocked :(`,
            secondPhrase: 'But do not worry! Just contact your system administrator.'
        },
        es: {
            title: 'Opa! Su contraseña ha caducado',
            firstPhrase: `Cada {0} día(s) es necesario crear una nueva contraseña por razones de seguridad.
        Después de estos {0} día(s) su acceso está bloqueado :(`,
            secondPhrase: '¡Pero no se preocupe! Sólo tienes que ponerse en contacto con el administrador del sistema.'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfPageBlockedUserReasonComponent {
    /**
     * @param {?} changeDetector
     */
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.reason || changes.params) {
            this.getLiterals();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getLiterals();
    }
    /**
     * @return {?}
     */
    getImageByReasonType() {
        /** @type {?} */
        let reasonImage;
        switch (this.reason) {
            case 'none': {
                reasonImage = 'big-lock';
                break;
            }
            case 'exceededAttempts': {
                reasonImage = 'blocked-user';
                break;
            }
            case 'expiredPassword': {
                reasonImage = 'expired';
                break;
            }
        }
        return `./assets/images/${reasonImage}.svg`;
    }
    /**
     * @return {?}
     */
    getParams() {
        this.literalParams =
            this.reason === 'expiredPassword' ? [this.params.days, this.params.days] : [this.params.attempts, this.params.hours];
    }
    /**
     * @private
     * @return {?}
     */
    getLiterals() {
        this.getParams();
        this.literals = Object.assign({}, thfPageBlockedUserLiterals[this.reason][thfLocaleDefault], thfPageBlockedUserLiterals[this.reason][browserLanguage()]);
        this.changeDetector.detectChanges();
    }
}
ThfPageBlockedUserReasonComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-blocked-user-reason',
                template: "<div class=\"thf-page-blocked-user-reason-content\">\n  <img \n    class=\"thf-page-blocked-user-image thf-mb-3\" \n    [src]=\"getImageByReasonType()\"> \n  <div class=\"thf-page-blocked-user-header thf-mb-md-3 thf-row\">\n    <div class=\"thf-md-12\">{{ literals?.title }}</div>\n  </div>\n  <div class=\"thf-page-blocked-user-text thf-font-text thf-row\">\n    <div class=\"thf-mb-sm-2 thf-mb-md-3 thf-md-12 thf-page-blocked-user-text-bold\">{{ literals?.firstPhrase | thfI18n:literalParams }}</div>\n    <div class=\"thf-mb-sm-2 thf-mb-md-3 thf-md-12\">{{ literals?.secondPhrase }}</div>\n    <div class=\"thf-mb-sm-2 thf-mb-md-3 thf-md-12\" *ngIf=\"literals?.thirdPhrase\">{{ literals?.thirdPhrase }}</div>\n  </div>\n</div>"
            }] }
];
/** @nocollapse */
ThfPageBlockedUserReasonComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThfPageBlockedUserReasonComponent.propDecorators = {
    params: [{ type: Input, args: ['t-params',] }],
    reason: [{ type: Input, args: ['t-reason',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do thf-page-blocked-user.
 */
class ThfPageBlockedUserModule {
}
ThfPageBlockedUserModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    RouterModule,
                    ThfModule,
                    ThfPageBackgroundModule,
                ],
                declarations: [
                    ThfPageBlockedUserComponent,
                    ThfPageBlockedUserContactsComponent,
                    ThfPageBlockedUserReasonComponent,
                ],
                exports: [
                    ThfPageBlockedUserComponent,
                    ThfPageBlockedUserContactsComponent,
                    ThfPageBlockedUserReasonComponent,
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `thf-page-change-password` é utilizado como template para tela de cadastro ou alteração de senha.
 *
 * Apresenta dicas e regras para senhas mais seguras e também possibilidade de personalizar o redirecionamento para as telas
 * 'esqueceu a senha', 'voltar' e 'entrar no sistema'. Os textos das telas são pré-definidos e imutáveis.
 *
 * A propriedade `t-url-new-password` automatiza a rotina do template e simplifica o processo de cadastro/alteração de senha, bastando
 * definir uma url para POST das informações digitadas pelo usuário.  A flexibilidade e praticidade podem chegar a um nível em que o
 * desenvolvimento da aplicação no *client side* é desprovida de qualquer código-fonte relacionado à rotina de cadastro/alteração de senha.
 * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
 * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/\@totvs/thf-theme/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 * @abstract
 */
class ThfPageChangePasswordBaseComponent {
    constructor() {
        this._hideCurrentPassword = false;
        this._requirements = [];
        this._urlHome = '/';
        /**
         * \@optional
         *
         * \@description
         *
         * URL para a ação de retorno da página.
         *
         * > O botão `Voltar` aparece apenas para telas de alteração de senha, ou seja, só aparece se a propriedade `t-hide-current-password` for
         * falsa.
         *
         * \@default `/`
         */
        this.urlBack = '/';
        /**
         * \@optional
         *
         * \@description
         *
         * Função executada ao submeter o form pelo botão salvar.
         *
         * Caso definida essa função, a modal de confirmação não aparece, mas pode ser chamada pelo
         * método `openConfirmation`. Exemplo:
         *
         * ```
         * \@ViewChild(ThfPageChangePasswordComponent) changePassword: ThfPageChangePasswordComponent;
         *
         * onSubmit() {
         *  this.changePassword.openConfirmation();
         * }
         *
         * ```
         * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-new-password`.
         */
        this.submit = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Esconde o campo `Senha atual` para que o template seja para criação de senha.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set hideCurrentPassword(value) {
        this._hideCurrentPassword = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get hideCurrentPassword() {
        return this._hideCurrentPassword;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * URL para a ação do link `Esqueceu a senha`.
     *
     * A propriedade aceita os seguintes tipos:
     *
     * - **String**: informe uma url externa ou uma rota válida;
     * - **Function**: pode-se customizar a ação. Para esta possilidade basta atribuir:
     * ```
     * <thf-page-change-password>
     *      [recovery]="this.myFunc.bind(this)";
     * </thf-page-change-password>
     * ```
     *
     * - **ThfPageChangePasswordRecovery**: cria-se vínculo automático com o template **thf-modal-password-recovery**.
     *   O objeto deve conter a **url** para requisição dos recursos e pode-se definir o **tipo** de modal para recuperação de senha,
     *   **email** para contato e **máscara** do campo de telefone.
     *
     * > Caso não tenha valor o link `Esqueceu a senha` desaparece.
     * @param {?} value
     * @return {?}
     */
    set recovery(value) {
        this._recovery = value;
        if (isTypeof(value, 'string')) {
            this.recoveryUrlType = isExternalLink(value) ? 'externalLink' : 'internalLink';
        }
    }
    /**
     * @return {?}
     */
    get recovery() {
        return this._recovery;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Lista de regras para criação e alteração de senha.
     * @param {?} value
     * @return {?}
     */
    set requirements(value) {
        this._requirements = value || [];
        this.showRequirements = this._requirements.length > 0;
    }
    /**
     * @return {?}
     */
    get requirements() {
        return this._requirements;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * URL para a ação do botão `Entrar no sistema` da modal de confirmação que aparece após salvar a senha ou se chamada pelo método
     * `openConfirmation`.
     *
     * \@default `/`
     * @param {?} value
     * @return {?}
     */
    set urlHome(value) {
        this._urlHome = value;
        this.modalAction.action = this.navigateTo.bind(this, this.urlHome);
    }
    /**
     * @return {?}
     */
    get urlHome() {
        return this._urlHome;
    }
}
ThfPageChangePasswordBaseComponent.propDecorators = {
    hideCurrentPassword: [{ type: Input, args: ['t-hide-current-password',] }],
    logo: [{ type: Input, args: ['t-logo',] }],
    recovery: [{ type: Input, args: ['t-recovery',] }],
    requirements: [{ type: Input, args: ['t-requirements',] }],
    secondaryLogo: [{ type: Input, args: ['t-secondary-logo',] }],
    token: [{ type: Input, args: ['t-token',] }],
    urlBack: [{ type: Input, args: ['t-url-back',] }],
    urlNewPassword: [{ type: Input, args: ['t-url-new-password',] }],
    urlHome: [{ type: Input, args: ['t-url-home',] }],
    submit: [{ type: Output, args: ['t-submit',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const thfPageChangePasswordLiterals = {
    en: (/** @type {?} */ ({
        backButton: 'Back',
        confirmPassword: 'Confirm password',
        createNewPassword: 'Create new password',
        createNewPasswordPhrase: 'Protect your account with a personal password created by you',
        currentPassword: 'Current password',
        enterSystemButton: 'Enter the system',
        forgotPassword: 'Forgot your password?',
        newPassword: 'New password',
        passwordSuccessfullyCreated: 'Password successfully created!',
        passwordSuccessfullyUpdated: 'Password successfully updated!',
        requirements: 'Password requirements',
        safetyTips: 'Safety tips!',
        safetyTipsFirst: 'is used in other accounts;',
        safetyTipsPhrase: 'Avoid a password that:',
        safetyTipsSecond: 'has personal information like your name, nickname or family names;',
        safetyTipsThird: 'that uses obvious sequences like "123" or obvious words like "password";',
        saveButton: 'Save',
    })),
    es: (/** @type {?} */ ({
        backButton: 'Volver',
        confirmPassword: 'Confirmar seña',
        createNewPassword: 'Crear nueva contraseña',
        createNewPasswordPhrase: 'Proteger su cuenta con una contraseña personal creada por usted',
        currentPassword: 'Contraseña actual',
        enterSystemButton: 'Entrar en el sistema',
        forgotPassword: '¿Olvidaste tu contraseña?',
        newPassword: 'Nueva contraseña',
        passwordSuccessfullyCreated: 'Contraseña creada correctamente!',
        passwordSuccessfullyUpdated: 'Contraseña correctamente actualizada!',
        requirements: 'Requisitos de contraseña',
        safetyTips: 'Consejos de seguridad!',
        safetyTipsFirst: 'se utilice en otras cuentas;',
        safetyTipsPhrase: 'Evite una contraseña que:',
        safetyTipsSecond: 'utiliza información personal como su nombre, apellido o nombre de familia;',
        safetyTipsThird: 'utilice secuencias muy obvias como "1234" o "abcd" o palabras obvias como "contraseña";',
        saveButton: 'Guardar',
    })),
    pt: (/** @type {?} */ ({
        backButton: 'Voltar',
        confirmPassword: 'Confirmar senha',
        createNewPassword: 'Criar nova senha',
        createNewPasswordPhrase: 'Proteja sua conta com uma senha pessoal criada por você',
        currentPassword: 'Senha atual',
        enterSystemButton: 'Entrar no sistema',
        forgotPassword: 'Esqueceu sua senha?',
        newPassword: 'Nova senha',
        passwordSuccessfullyCreated: 'Senha criada com sucesso!',
        passwordSuccessfullyUpdated: 'Senha alterada com sucesso!',
        requirements: 'Requisitos de senha',
        safetyTips: 'Dicas de segurança!',
        safetyTipsFirst: 'seja usada em outras contas;',
        safetyTipsPhrase: 'Evite uma senha que:',
        safetyTipsSecond: 'usa informações pessoais como seu nome, apelido ou nome de familiares;',
        safetyTipsThird: 'use sequências muito óbvias como "1234" ou "abcd" ou palavras óbvias como “senha”;',
        saveButton: 'Salvar',
    }))
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfPageChangePasswordService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?} item
     * @return {?}
     */
    post(url, item) {
        return this.http.post(url, item, { observe: 'response' });
    }
}
ThfPageChangePasswordService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfPageChangePasswordService.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfPageChangePasswordBaseComponent
 *
 * \@example
 *
 * <example name="thf-page-change-password-basic" title="Totvs Page Change Password Basic">
 *  <file name="sample-thf-page-change-password-basic/sample-thf-page-change-password-basic.component.html"> </file>
 *  <file name="sample-thf-page-change-password-basic/sample-thf-page-change-password-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-change-password-labs" title="Totvs Page Change Password Labs">
 *  <file name="sample-thf-page-change-password-labs/sample-thf-page-change-password-labs.component.html"> </file>
 *  <file name="sample-thf-page-change-password-labs/sample-thf-page-change-password-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-change-password-modify" title="Totvs Page Change Password Modify">
 *  <file name="sample-thf-page-change-password-modify/sample-thf-page-change-password-modify.component.html"> </file>
 *  <file name="sample-thf-page-change-password-modify/sample-thf-page-change-password-modify.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-change-password-create" title="Totvs Page Change Password Create">
 *  <file name="sample-thf-page-change-password-create/sample-thf-page-change-password-create.component.html"> </file>
 *  <file name="sample-thf-page-change-password-create/sample-thf-page-change-password-create.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-change-password-request" title="Totvs Page Change Password Request">
 *  <file name="sample-thf-page-change-password-request/sample-thf-page-change-password-request.component.html"> </file>
 *  <file name="sample-thf-page-change-password-request/sample-thf-page-change-password-request.component.ts"> </file>
 * </example>
 */
class ThfPageChangePasswordComponent extends ThfPageChangePasswordBaseComponent {
    /**
     * @param {?} activatedRoute
     * @param {?} route
     * @param {?} router
     * @param {?} service
     * @param {?} thfComponentInjector
     * @param {?} viewRef
     */
    constructor(activatedRoute, route, router, service, thfComponentInjector, viewRef) {
        super();
        this.activatedRoute = activatedRoute;
        this.route = route;
        this.router = router;
        this.service = service;
        this.thfComponentInjector = thfComponentInjector;
        this.literals = Object.assign({}, thfPageChangePasswordLiterals[thfLocaleDefault], thfPageChangePasswordLiterals[browserLanguage()]);
        this.componentRef = null;
        this.modalAction = {
            action: this.navigateTo.bind(this, this.urlHome),
            label: this.literals.enterSystemButton
        };
        this.parentRef = viewRef['_view']['component'];
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.urlNewPassword) {
            this.subscribeToTokenParameter();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.newPasswordSubscription) {
            this.newPasswordSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checkingForRouteMetadata(this.activatedRoute.snapshot.data);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    navigateTo(url) {
        isExternalLink(url) ? window.open(url) : this.router.navigate([url || '/']);
    }
    /**
     * @param {?} recovery
     * @return {?}
     */
    onForgotPasswordClick(recovery) {
        if (isTypeof(recovery, 'function')) {
            recovery();
        }
        else {
            this.createModalPasswordRecoveryComponent(recovery);
        }
    }
    /**
     * @return {?}
     */
    onLoginSubmit() {
        /** @type {?} */
        const form = this.getLoginForm();
        if (this.urlNewPassword) {
            this.postUrlNewPassword(form);
        }
        else if (this.submit && this.submit.observers.length) {
            this.emitSubmit(form);
        }
    }
    /**
     * Abre uma modal de confirmação com texto, imagem e botão que redireciona para o link definido na propriedade `t-url-home`
     * @return {?}
     */
    openConfirmation() {
        this.modal.open();
    }
    /**
     * @return {?}
     */
    validatePassword() {
        /** @type {?} */
        const controls = this.passwordForm.form.controls;
        /** @type {?} */
        const controlConfirmPassword = controls['confirmPassword'];
        /** @type {?} */
        const controlNewPassword = controls['newPassword'];
        if (!this.newPassword) {
            this.setFormErrors({ 'required': true }, [controlNewPassword]);
        }
        else if (!this.confirmPassword) {
            this.setFormErrors({ 'required': true }, [controlConfirmPassword]);
        }
        else if (this.newPassword && this.confirmPassword && this.newPassword !== this.confirmPassword) {
            this.setFormErrors({ 'equalPassword': true }, [controlNewPassword, controlConfirmPassword]);
        }
        else {
            this.setFormErrors(null, [controlConfirmPassword, controlNewPassword]);
        }
        if (this.requirements.length && this.requirements.find((/**
         * @param {?} requirement
         * @return {?}
         */
        requirement => this.validateRequirement(requirement) === false))) {
            this.setFormErrors({ 'requirement': true }, [controlNewPassword]);
        }
    }
    /**
     * @param {?} requirement
     * @return {?}
     */
    validateRequirement(requirement) {
        return typeof requirement.status === 'function' ? requirement.status.call(this.parentRef, this.newPassword) : requirement.status;
    }
    /**
     * @private
     * @param {?} object
     * @param {?} property
     * @return {?}
     */
    checkingForMetadataProperty(object, property) {
        if (Object.prototype.hasOwnProperty.call(object, property)) {
            return object[property];
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    checkingForRouteMetadata(data) {
        if (Object.keys(data).length !== 0) {
            this.urlNewPassword = this.checkingForMetadataProperty(data, 'serviceApi') || this.urlNewPassword;
            this.recovery = this.checkingForMetadataProperty(data, 'recovery') || this.recovery;
            this.hideCurrentPassword = this.checkingForMetadataProperty(data, 'hideCurrentPassword') || this.hideCurrentPassword;
        }
    }
    /**
     * @private
     * @param {?} recovery
     * @return {?}
     */
    createModalPasswordRecoveryComponent(recovery) {
        if (this.componentRef) {
            this.thfComponentInjector.destroyComponentInApplication(this.componentRef);
        }
        this.componentRef = this.thfComponentInjector.createComponentInApplication(ThfModalPasswordRecoveryComponent);
        this.componentRef.instance.recovery = recovery.url;
        this.componentRef.instance.contactEmail = recovery.contactMail;
        this.componentRef.instance.phoneMask = recovery.phoneMask;
        this.componentRef.instance.type = recovery.type || ThfModalPasswordRecoveryType.Email;
        this.componentRef.changeDetectorRef.detectChanges();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.componentRef.instance.open();
        }));
    }
    /**
     * @private
     * @param {?} form
     * @return {?}
     */
    emitSubmit(form) {
        this.submit.emit(form);
    }
    /**
     * @private
     * @return {?}
     */
    getLoginForm() {
        return {
            currentPassword: this.currentPassword,
            newPassword: this.newPassword
        };
    }
    /**
     * @private
     * @param {?} form
     * @return {?}
     */
    postUrlNewPassword(form) {
        form['token'] = this.token;
        this.service.post(this.urlNewPassword, form).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            if (response.status === 204) {
                this.openConfirmation();
            }
        }));
    }
    /**
     * @private
     * @param {?} error
     * @param {?=} controls
     * @return {?}
     */
    setFormErrors(error, controls) {
        controls.forEach((/**
         * @param {?} control
         * @return {?}
         */
        control => {
            control.setErrors(error);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    subscribeToTokenParameter() {
        this.route.queryParams.subscribe((/**
         * @param {?} params
         * @return {?}
         */
        params => {
            /** @type {?} */
            const token = params['token'];
            if (token) {
                this.token = token;
            }
        }));
    }
}
ThfPageChangePasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-change-password',
                template: "<div class=\"thf-page-change-password-wrapper\" #pageChangePassword>\n  <div class=\"thf-page-change-password-container\">\n    <thf-page-background class=\"thf-page-change-password\"\n      [t-logo]=\"logo\"\n      [t-secondary-logo]=\"secondaryLogo\">\n\n      <div class=\"thf-page-blocked-user-header thf-row\">\n        <div class=\"thf-md-12\">{{literals.createNewPassword}}</div>\n        <div class=\"thf-md-12 thf-text-center thf-font-text\">\n          {{literals.createNewPasswordPhrase}}\n        </div>\n      </div>\n\n      <form #passwordForm=\"ngForm\">\n\n        <div class=\"thf-row thf-mt-3 thf-mt-sm-1\">\n          <div class=\"thf-md-6\"\n            [ngClass]=\"{'thf-offset-md-3 thf-offset-lg-3 thf-offset-xl-3': !showRequirements}\">\n            <div *ngIf=\"!hideCurrentPassword\">\n              <thf-password\n                name=\"currentPassword\"\n                [(ngModel)]=\"currentPassword\"\n                t-required\n                [t-label]=\"literals.currentPassword\">\n              </thf-password>\n            </div>\n            <div *ngIf=\"!hideCurrentPassword && recovery\" class=\"thf-text-center thf-mb-sm-1 thf-mb-2\">\n              <a *ngIf=\"recoveryUrlType === 'internalLink'\"\n                class=\"thf-font-text-bold thf-page-change-password-forgot-password\"\n                [routerLink]=\"recovery\">\n                {{literals.forgotPassword}}\n              </a>\n              <a *ngIf=\"recoveryUrlType === 'externalLink'\"\n                class=\"thf-font-text-bold thf-page-change-password-forgot-password\"\n                [href]=\"recovery\">\n                {{literals.forgotPassword}}\n              </a>\n              <a *ngIf=\"!recoveryUrlType\"\n                class=\"thf-font-text-bold thf-page-change-password-forgot-password thf-clickable\"\n                (click)=\"onForgotPasswordClick(recovery)\">\n                {{literals.forgotPassword}}\n              </a>\n            </div>\n            <div>\n              <thf-password\n                name=\"newPassword\"\n                [(ngModel)]=\"newPassword\"\n                t-required\n                [t-label]=\"literals.newPassword\"\n                (t-change-model)=\"validatePassword()\">\n              </thf-password>\n            </div>\n            <div>\n              <thf-password\n                name=\"confirmPassword\"\n                [(ngModel)]=\"confirmPassword\"\n                t-required\n                [t-label]=\"literals.confirmPassword\"\n                (t-change-model)=\"validatePassword()\">\n              </thf-password>\n            </div>\n          </div>\n          <div *ngIf=\"showRequirements\"\n            class=\"thf-md-6 thf-page-change-password-required-container\">\n            <thf-container>\n              <ul class=\"thf-page-change-password-required-list\">\n                <li class=\"thf-page-change-password-required-item\">\n                  <p class=\"thf-mb-1 thf-font-text-bold thf-page-change-password-required-title\">\n                    {{literals?.requirements}}\n                  </p>\n                </li>\n                <li *ngFor=\"let requirement of requirements\"\n                  class=\"thf-page-change-password-required-item\">\n                  <span class=\"thf-icon thf-page-change-password-required-icon\"\n                    [ngClass]=\"validateRequirement(requirement) ? 'thf-icon-ok thf-page-change-password-required-ok' : 'thf-icon-minus thf-page-change-password-required-minus'\">\n                  </span>\n                  <p class=\"thf-page-change-password-required-text thf-font-text\">\n                    {{requirement.requirement}}\n                  </p>\n                </li>\n              </ul>\n            </thf-container>\n          </div>\n        </div>\n      </form>\n\n      <thf-divider class=\"thf-sm-12\"></thf-divider>\n\n      <div class=\"thf-page-change-password-tips thf-row\">\n        <div class=\"thf-md-2 thf-mr-3\">\n          <img\n            class=\"thf-page-change-password-lock-image thf-mb-3\"\n            alt=\"Blocked user image\"\n            src=\"./assets/images/big-lock.svg\"\n          />\n        </div>\n        <div class=\"thf-md-9 thf-page-change-password-tips-text\">\n          <div class=\"thf-font-text-bold thf-pb-1\">{{literals.safetyTips}}</div>\n          <div class=\"thf-font-text-small\">\n            <div class=\"thf-row thf-pb-1\">{{literals.safetyTipsPhrase}}</div>\n            <div class=\"thf-row thf-pb-1\">\u2022 {{literals.safetyTipsFirst}}</div>\n            <div class=\"thf-row thf-pb-1\">\u2022 {{literals.safetyTipsSecond}}</div>\n            <div class=\"thf-row thf-pb-1\">\u2022 {{literals.safetyTipsThird}}</div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"thf-page-change-password-buttons thf-row\">\n\n        <thf-divider class=\"thf-sm-12 thf-mobile-only\"></thf-divider>\n\n        <thf-button *ngIf=\"!hideCurrentPassword\"\n          class=\"thf-sm-6 thf-mb-sm-1\"\n          [t-label]=\"literals.backButton\"\n          (t-click)=\"navigateTo(urlBack)\">\n        </thf-button>\n\n        <thf-button\n          [ngClass]=\"hideCurrentPassword ? 'thf-md-12':'thf-sm-6'\"\n          t-type=\"primary\"\n          [t-disabled]=\"passwordForm.invalid\"\n          [t-label]=\"literals.saveButton\"\n          (t-click)=\"onLoginSubmit()\">\n        </thf-button>\n\n      </div>\n\n    </thf-page-background>\n\n  </div>\n</div>\n\n<thf-modal\n  [t-primary-action]=\"modalAction\"\n  t-hide-close\n  t-size=\"auto\"\n  [t-title]=\"hideCurrentPassword ? literals.passwordSuccessfullyCreated : literals.passwordSuccessfullyUpdated\">\n\n  <div class=\"thf-text-center\">\n    <img\n      alt=\"Blocked user image\"\n      class=\"thf-page-change-password-lock-image thf-mb-3\"\n      src=\"./assets/images/success.svg\"\n    />\n  </div>\n</thf-modal>\n"
            }] }
];
/** @nocollapse */
ThfPageChangePasswordComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: ActivatedRoute },
    { type: Router },
    { type: ThfPageChangePasswordService },
    { type: ThfComponentInjectorService },
    { type: ViewContainerRef }
];
ThfPageChangePasswordComponent.propDecorators = {
    modal: [{ type: ViewChild, args: [ThfModalComponent, { static: true },] }],
    pageChangePassword: [{ type: ViewChild, args: ['pageChangePassword', { read: ViewContainerRef, static: true },] }],
    passwordForm: [{ type: ViewChild, args: ['passwordForm', { read: NgForm, static: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do thf-page-change-password.
 */
class ThfPageChangePasswordModule {
}
ThfPageChangePasswordModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    ThfModule,
                    ThfPageBackgroundModule
                ],
                declarations: [
                    ThfPageChangePasswordComponent
                ],
                entryComponents: [
                    ThfModalPasswordRecoveryComponent
                ],
                providers: [
                    ThfPageChangePasswordService
                ],
                exports: [
                    ThfPageChangePasswordComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfPageDynamicService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.endpoint = '/';
        this.headers = new HttpHeaders({
            'X-TOTVS-SCREEN-LOCK': 'true'
        });
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    configServiceApi(config = {}) {
        this.endpoint = config.endpoint;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    getMetadata(type = 'list') {
        /** @type {?} */
        const key = `${this.endpoint}-${type}-metadata`;
        /** @type {?} */
        const cache = JSON.parse(localStorage.getItem(key)) || {};
        /** @type {?} */
        const url = `${this.endpoint}/metadata?type=${type}&version=${cache.version || ''}`;
        return this.http.get(url).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (response.version === cache.version) {
                return cache;
            }
            localStorage.setItem(key, JSON.stringify(response));
            return Object.assign({}, cache, response);
        })));
    }
    // Deleta um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    deleteResource(id) {
        return this.http.delete(`${this.endpoint}/${id}`, { headers: this.headers });
    }
    // Deleta recursos em lote
    /**
     * @param {?} ids
     * @return {?}
     */
    deleteResources(ids) {
        return this.http.request('delete', `${this.endpoint}`, { headers: this.headers, body: ids });
    }
    // Busca uma lista de recursos
    /**
     * @param {?=} params
     * @return {?}
     */
    getResources(params = {}) {
        return this.http.get(this.endpoint, { headers: this.headers, params });
    }
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    getResource(id) {
        return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers });
    }
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    createResource(resource) {
        return this.http.post(`${this.endpoint}`, resource, { headers: this.headers });
    }
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    updateResource(id, resource) {
        return this.http.put(`${this.endpoint}/${id}`, resource, { headers: this.headers });
    }
}
ThfPageDynamicService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfPageDynamicService.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const thfPageDynamicDetailLiteralsDefault = {
    en: {
        pageActionEdit: 'Edit',
        pageActionRemove: 'Delete',
        pageActionBack: 'Back',
        confirmRemoveTitle: 'Confirm delete',
        confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',
        removeNotificationSuccess: 'Item deleted successfully.',
        registerNotFound: 'Register not found.'
    },
    es: {
        pageActionEdit: 'Editar',
        pageActionRemove: 'Borrar',
        pageActionBack: 'Regreso',
        confirmRemoveTitle: 'Confirmar la exclusión',
        confirmRemoveMessage: '¿Está seguro de que desea eliminar este registro? No puede deshacer esta acción.',
        removeNotificationSuccess: 'Elemento eliminado con éxito.',
        registerNotFound: 'Registro no encontrado.'
    },
    pt: {
        pageActionEdit: 'Editar',
        pageActionRemove: 'Excluir',
        pageActionBack: 'Voltar',
        confirmRemoveTitle: 'Confirmar exclusão',
        confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? Você não poderá desfazer essa ação.',
        removeNotificationSuccess: 'Item excluído com sucesso.',
        registerNotFound: 'Registro não encontrado.'
    }
};
/**
 * \@description
 *
 * O `thf-page-dynamic-detail` é uma página que serve para exibir registros em detalhes,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * \@example
 *
 * <example name="thf-page-dynamic-detail-basic" title="Totvs Page Dynamic Detail Basic">
 *  <file name="sample-thf-page-dynamic-detail-basic/sample-thf-page-dynamic-detail-basic.component.html"> </file>
 *  <file name="sample-thf-page-dynamic-detail-basic/sample-thf-page-dynamic-detail-basic.component.ts"> </file>
 * </example>
 */
class ThfPageDynamicDetailComponent {
    /**
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} thfNotification
     * @param {?} thfDialogService
     * @param {?} thfPageDynamicService
     */
    constructor(router, activatedRoute, thfNotification, thfDialogService, thfPageDynamicService) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.thfNotification = thfNotification;
        this.thfDialogService = thfDialogService;
        this.thfPageDynamicService = thfPageDynamicService;
        this._actions = {};
        this._autoRouter = false;
        this._duplicates = [];
        this._fields = [];
        this._keys = [];
        this._pageActions = [];
        this.literals = Object.assign({}, thfPageDynamicDetailLiteralsDefault[thfLocaleDefault], thfPageDynamicDetailLiteralsDefault[browserLanguage()]);
        this.model = {};
        /**
         * Objeto com propriedades do breadcrumb.
         */
        this.breadcrumb = { items: [] };
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define as ações da página de acordo com a interface `ThfPageDynamicDetailActions`.
     * @param {?} value
     * @return {?}
     */
    set actions(value) {
        this._actions = this.isObject(value) ? value : {};
        this._pageActions = this.getPageActions(this._actions);
    }
    /**
     * \@todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
     *
     * \@optional
     *
     * \@description
     *
     * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso as ações
     * estejam definidas nas ações.
     *
     * > Para o correto funcionamento não pode haver nenhum rota coringa (`**`) especificada.
     *
     * \@default false
     * @param {?} value
     * @return {?}
     */
    set autoRouter(value) {
        this._autoRouter = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get autoRouter() {
        return this._autoRouter;
    }
    /**
     * Lista dos campos exibidos na página.
     * @param {?} value
     * @return {?}
     */
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
        this._keys = this.getKeysByFields(this.fields);
        this._duplicates = this.getDuplicatesByFields(this.fields);
    }
    /**
     * @return {?}
     */
    get fields() {
        return this._fields;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        if (this.activatedRoute.snapshot.data.serviceApi) {
            this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;
            this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadMetadata(paramId);
        }
        else {
            this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadData(paramId);
        }
    }
    /**
     * @return {?}
     */
    get duplicates() {
        return [...this._duplicates];
    }
    /**
     * @return {?}
     */
    get keys() {
        return [...this._keys];
    }
    /**
     * @return {?}
     */
    get pageActions() {
        return [...this._pageActions];
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    confirmRemove(path) {
        /** @type {?} */
        const confirmOptions = {
            title: this.literals.confirmRemoveTitle,
            message: this.literals.confirmRemoveMessage,
            confirm: this.remove.bind(this, path)
        };
        this.thfDialogService.confirm(confirmOptions);
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    formatUniqueKey(item) {
        /** @type {?} */
        const keys = mapObjectByProperties(item, this.keys);
        return valuesFromObject(keys).join('|');
    }
    /**
     * @private
     * @return {?}
     */
    goBack( /*path*/) {
        window.history.back();
        // if (path) {
        //   this.navigateTo({ path, component: ThfPageDynamicEditComponent });
        // } else {
        //   window.history.back();
        // }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    loadData(id) {
        this.thfPageDynamicService.getResource(id).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.model = response;
        })).catch((/**
         * @return {?}
         */
        () => {
            this.model = undefined;
            this.actions = undefined;
        }));
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    loadMetadata(id) {
        this.thfPageDynamicService.getMetadata('detail').toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.autoRouter = response.autoRouter;
            this.actions = response.actions || {};
            this.breadcrumb = response.breadcrumb || { items: [] };
            this.fields = response.fields || [];
            this.title = response.title;
            this.loadData(id);
        }));
    }
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    /**
     * @private
     * @param {?} route
     * @param {?=} forceStopAutoRouter
     * @return {?}
     */
    navigateTo(route, forceStopAutoRouter = false) {
        this.router.navigate([route.url || route.path], { queryParams: route.params })
            .catch((/**
         * @return {?}
         */
        () => {
            if (forceStopAutoRouter || !this.autoRouter) {
                return;
            }
            this.router.config.unshift((/** @type {?} */ ({
                path: route.path, component: route.component, data: { serviceApi: this.serviceApi, autoRouter: true }
            })));
            this.navigateTo(route, true);
        }));
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    openEdit(path) {
        /** @type {?} */
        const url = this.resolveUrl(this.model, path);
        // this.navigateTo({ path, url, component: ThfPageDynamicEditComponent });
        this.navigateTo({ path, url });
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    remove(path) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(this.model);
        this.thfPageDynamicService.deleteResource(uniqueKey).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.thfNotification.success(this.literals.removeNotificationSuccess);
            this.navigateTo({ path: path });
            // this.navigateTo({ path: path, component: ThfPageDynamicTableComponent });
        }));
    }
    /**
     * @private
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    resolveUrl(item, path) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    }
    /**
     * @private
     * @param {?=} actions
     * @return {?}
     */
    getPageActions(actions = {}) {
        /** @type {?} */
        const pageActions = [];
        if (actions.edit) {
            pageActions.push({ label: this.literals.pageActionEdit, action: this.openEdit.bind(this, actions.edit) });
        }
        if (actions.remove) {
            pageActions.push({ label: this.literals.pageActionRemove, action: this.confirmRemove.bind(this, actions.remove) });
        }
        if (actions.back === undefined || actions.back) {
            pageActions.push({ label: this.literals.pageActionBack, action: this.goBack.bind(this, actions.back) });
        }
        return pageActions;
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getKeysByFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.key === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getDuplicatesByFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.duplicate === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    isObject(value) {
        return !!value && typeof value === 'object' && !Array.isArray(value);
    }
}
ThfPageDynamicDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-dynamic-detail',
                template: "<thf-page-default\n  [t-actions]=\"pageActions\"\n  [t-breadcrumb]=\"breadcrumb\"\n  [t-title]=\"title\">\n\n  <ng-container *ngIf=\"model; then viewFieldsTemplate; else registerNotFoundTemplate\">\n  </ng-container>\n\n</thf-page-default>\n\n<ng-template #registerNotFoundTemplate>\n\n  <thf-widget>\n    <span class=\"thf-icon thf-icon-info\"></span>\n    <span class=\"thf-font-text-large\">\n      {{ literals.registerNotFound }}\n    </span>\n  </thf-widget>\n\n</ng-template>\n\n<ng-template #viewFieldsTemplate>\n\n  <thf-dynamic-view [t-fields]=\"fields\" [t-value]=\"model\">\n  </thf-dynamic-view>\n\n</ng-template>\n",
                providers: [ThfPageDynamicService]
            }] }
];
/** @nocollapse */
ThfPageDynamicDetailComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ThfNotificationService },
    { type: ThfDialogService },
    { type: ThfPageDynamicService }
];
ThfPageDynamicDetailComponent.propDecorators = {
    actions: [{ type: Input, args: ['t-actions',] }],
    autoRouter: [{ type: Input, args: ['t-auto-router',] }],
    breadcrumb: [{ type: Input, args: ['t-breadcrumb',] }],
    fields: [{ type: Input, args: ['t-fields',] }],
    title: [{ type: Input, args: ['t-title',] }],
    serviceApi: [{ type: Input, args: ['t-service-api',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do thf-page-dynamic-detail.
 */
class ThfPageDynamicDetailModule {
}
ThfPageDynamicDetailModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    ThfDynamicModule,
                    ThfModalModule,
                    ThfPageModule,
                    ThfWidgetModule
                ],
                declarations: [
                    ThfPageDynamicDetailComponent
                ],
                exports: [
                    ThfPageDynamicDetailComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfPageDynamicService$1 {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.endpoint = '/';
        this.headers = new HttpHeaders({
            'X-TOTVS-SCREEN-LOCK': 'true'
        });
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    configServiceApi(config = {}) {
        this.endpoint = config.endpoint;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    getMetadata(type = 'list') {
        /** @type {?} */
        const key = `${this.endpoint}-${type}-metadata`;
        /** @type {?} */
        const cache = JSON.parse(localStorage.getItem(key)) || {};
        /** @type {?} */
        const url = `${this.endpoint}/metadata?type=${type}&version=${cache.version || ''}`;
        return this.http.get(url).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (response.version === cache.version) {
                return cache;
            }
            localStorage.setItem(key, JSON.stringify(response));
            return Object.assign({}, cache, response);
        })));
    }
    // Deleta um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    deleteResource(id) {
        return this.http.delete(`${this.endpoint}/${id}`, { headers: this.headers });
    }
    // Deleta recursos em lote
    /**
     * @param {?} ids
     * @return {?}
     */
    deleteResources(ids) {
        return this.http.request('delete', `${this.endpoint}`, { headers: this.headers, body: ids });
    }
    // Busca uma lista de recursos
    /**
     * @param {?=} params
     * @return {?}
     */
    getResources(params = {}) {
        return this.http.get(this.endpoint, { headers: this.headers, params });
    }
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    getResource(id) {
        return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers });
    }
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    createResource(resource) {
        return this.http.post(`${this.endpoint}`, resource, { headers: this.headers });
    }
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    updateResource(id, resource) {
        return this.http.put(`${this.endpoint}/${id}`, resource, { headers: this.headers });
    }
}
ThfPageDynamicService$1.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfPageDynamicService$1.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const thfPageDynamicEditLiteralsDefault = {
    en: {
        cancelConfirmMessage: 'Are you sure you want to cancel this operation?',
        detailActionNew: 'New',
        pageActionCancel: 'Cancel',
        pageActionSave: 'Save',
        pageActionSaveNew: 'Save and new',
        registerNotFound: 'Register not found.',
        saveNewNotificationSuccessSave: 'Resource successfully saved.',
        saveNewNotificationSuccessUpdate: 'Resource successfully updated.',
        saveNewNotificationWarning: 'Form must be filled out correctly.',
        saveNotificationSuccessSave: 'Resource successfully saved.',
        saveNotificationSuccessUpdate: 'Resource successfully updated.',
        saveNotificationWarning: 'Form must be filled out correctly.',
    },
    es: {
        cancelConfirmMessage: 'Está seguro de que desea cancelar esta operación?',
        detailActionNew: 'Nuevo',
        pageActionCancel: 'Cancelar',
        pageActionSave: 'Guardar',
        pageActionSaveNew: 'Guardar y nuevo',
        registerNotFound: 'Registro no encontrado.',
        saveNewNotificationSuccessSave: 'Recurso salvo con éxito.',
        saveNewNotificationSuccessUpdate: 'Recurso actualizado con éxito.',
        saveNewNotificationWarning: 'El formulario debe llenarse correctamente.',
        saveNotificationSuccessSave: 'Recurso salvo con éxito.',
        saveNotificationSuccessUpdate: 'Recurso actualizado con éxito.',
        saveNotificationWarning: 'El formulario debe llenarse correctamente.',
    },
    pt: {
        cancelConfirmMessage: 'Tem certeza que deseja cancelar esta operação?',
        detailActionNew: 'Novo',
        pageActionCancel: 'Cancelar',
        pageActionSave: 'Salvar',
        pageActionSaveNew: 'Salvar e novo',
        registerNotFound: 'Registro não encontrado.',
        saveNewNotificationSuccessSave: 'Recurso salvo com sucesso.',
        saveNewNotificationSuccessUpdate: 'Recurso atualizado com sucesso.',
        saveNewNotificationWarning: 'Formulário precisa ser preenchido corretamente.',
        saveNotificationSuccessSave: 'Recurso salvo com sucesso.',
        saveNotificationSuccessUpdate: 'Recurso atualizado com sucesso.',
        saveNotificationWarning: 'Formulário precisa ser preenchido corretamente.',
    }
};
/**
 * \@description
 *
 * O `thf-page-dynamic-edit` é uma página que pode servir para editar ou criar novos registros,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * \@example
 *
 * <example name="thf-page-dynamic-edit-basic" title="Totvs Page Dynamic Edit Basic">
 *  <file name="sample-thf-page-dynamic-edit-basic/sample-thf-page-dynamic-edit-basic.component.html"> </file>
 *  <file name="sample-thf-page-dynamic-edit-basic/sample-thf-page-dynamic-edit-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-dynamic-edit-user" title="Totvs Page Dynamic Edit - User">
 *  <file name="sample-thf-page-dynamic-edit-user/sample-thf-page-dynamic-edit-user.component.html"> </file>
 *  <file name="sample-thf-page-dynamic-edit-user/sample-thf-page-dynamic-edit-user.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-dynamic-edit-master-detail" title="Totvs Page Dynamic Edit - Master Detail">
 *  <file name="sample-thf-page-dynamic-edit-master-detail/sample-thf-page-dynamic-edit-master-detail.component.html"> </file>
 *  <file name="sample-thf-page-dynamic-edit-master-detail/sample-thf-page-dynamic-edit-master-detail.component.ts"> </file>
 * </example>
 */
class ThfPageDynamicEditComponent {
    /**
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} thfNotification
     * @param {?} thfDialogService
     * @param {?} thfPageDynamicService
     */
    constructor(router, activatedRoute, thfNotification, thfDialogService, thfPageDynamicService) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.thfNotification = thfNotification;
        this.thfDialogService = thfDialogService;
        this.thfPageDynamicService = thfPageDynamicService;
        this._actions = {};
        this._autoRouter = false;
        this._controlFields = [];
        this._detailFields = [];
        this._duplicates = [];
        this._fields = [];
        this._keys = [];
        this._pageActions = [];
        this.literals = Object.assign({}, thfPageDynamicEditLiteralsDefault[thfLocaleDefault], thfPageDynamicEditLiteralsDefault[browserLanguage()]);
        this.model = {};
        // beforeSave: return boolean
        // afterSave
        // beforeRemove: return boolean
        // afterRemove
        // beforeInsert: : return boolean
        this.detailActions = {};
        /**
         * Objeto com propriedades do breadcrumb.
         */
        this.breadcrumb = { items: [] };
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Ações da página.
     * @param {?} value
     * @return {?}
     */
    set actions(value) {
        this._actions = this.isObject(value) ? value : {};
        this._pageActions = this.getPageActions(this._actions);
    }
    /**
     * \@todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
     *
     * \@optional
     *
     * \@description
     *
     * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso as ações
     * estejam definidas nas ações.
     *
     * > Para o correto funcionamento não pode haver nenhum rota coringa (`**`) especificada.
     *
     * \@default false
     * @param {?} value
     * @return {?}
     */
    set autoRouter(value) {
        this._autoRouter = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get autoRouter() {
        return this._autoRouter;
    }
    /**
     * Lista dos campos usados na tabela e busca avançada.
     * @param {?} value
     * @return {?}
     */
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
        this._keys = this.getKeysByFields(this._fields);
        this._duplicates = this.getDuplicatesByFields(this._fields);
        this._controlFields = this.getControlFields(this._fields);
        this._detailFields = this.getDetailFields(this._fields);
    }
    /**
     * @return {?}
     */
    get fields() {
        return this._fields;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        /** @type {?} */
        const duplicate = this.activatedRoute.snapshot.queryParams['duplicate'];
        if (this.activatedRoute.snapshot.data.serviceApi) {
            this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;
            this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadMetadata(paramId, duplicate);
        }
        else {
            this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadData(paramId, duplicate);
        }
    }
    /**
     * @return {?}
     */
    get duplicates() {
        return [...this._duplicates];
    }
    /**
     * @return {?}
     */
    get keys() {
        return [...this._keys];
    }
    /**
     * @return {?}
     */
    get pageActions() {
        return [...this._pageActions];
    }
    /**
     * @return {?}
     */
    get controlFields() {
        return this._controlFields;
    }
    /**
     * @return {?}
     */
    get detailFields() {
        return this._detailFields;
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    cancel(path) {
        if (this.dynamicForm && this.dynamicForm.form.dirty) {
            this.thfDialogService.confirm({
                message: this.literals.cancelConfirmMessage,
                title: this.literals.pageActionCancel,
                confirm: this.goBack.bind(this, path)
            });
        }
        else {
            this.goBack(path);
        }
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    formatUniqueKey(item) {
        /** @type {?} */
        const keys = mapObjectByProperties(item, this.keys);
        return valuesFromObject(keys).join('|');
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    goBack(path) {
        if (path) {
            this.router.navigate([path]);
        }
        else {
            window.history.back();
        }
    }
    /**
     * @private
     * @param {?} id
     * @param {?=} duplicate
     * @return {?}
     */
    loadData(id, duplicate) {
        if (!id) {
            try {
                this.model = JSON.parse(duplicate) || {};
            }
            catch (_a) {
                this.model = {};
            }
            return;
        }
        this.thfPageDynamicService.getResource(id).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.model = response;
        })).catch((/**
         * @return {?}
         */
        () => {
            this.model = undefined;
            this.actions = undefined;
            this._pageActions = [];
        }));
    }
    /**
     * @private
     * @param {?} paramId
     * @param {?} duplicate
     * @return {?}
     */
    loadMetadata(paramId, duplicate) {
        /** @type {?} */
        const typeMetadata = paramId ? 'edit' : 'create';
        this.thfPageDynamicService.getMetadata(typeMetadata).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.autoRouter = response.autoRouter;
            this.actions = response.actions || {};
            this.breadcrumb = response.breadcrumb || { items: [] };
            this.fields = response.fields || [];
            this.title = response.title;
            this.loadData(paramId, duplicate);
        }));
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    navigateTo(path) {
        if (path) {
            /** @type {?} */
            const url = this.resolveUrl(this.model, path);
            this.router.navigate([url]);
        }
        else {
            window.history.back();
        }
    }
    /**
     * @private
     * @return {?}
     */
    detailActionNew() {
        this.gridDetail.insertRow();
    }
    /**
     * @private
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    resolveUrl(item, path) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    save(path) {
        if (this.dynamicForm.form.invalid) {
            this.thfNotification.warning(this.literals.saveNotificationWarning);
            return;
        }
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        /** @type {?} */
        const saveOperation = paramId
            ? this.thfPageDynamicService.updateResource(paramId, this.model)
            : this.thfPageDynamicService.createResource(this.model);
        /** @type {?} */
        const msgSucess = paramId ? this.literals.saveNotificationSuccessUpdate : this.literals.saveNotificationSuccessSave;
        saveOperation.toPromise().then((/**
         * @return {?}
         */
        () => {
            this.thfNotification.success(msgSucess);
            this.navigateTo(path);
        }));
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    saveNew(path) {
        if (this.dynamicForm.form.invalid) {
            this.thfNotification.warning(this.literals.saveNewNotificationWarning);
            return;
        }
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        if (paramId) {
            this.thfPageDynamicService.updateResource(paramId, this.model)
                .toPromise().then((/**
             * @return {?}
             */
            () => {
                this.thfNotification.success(this.literals.saveNewNotificationSuccessUpdate);
                this.navigateTo(path);
            }));
        }
        else {
            this.thfPageDynamicService.createResource(this.model)
                .toPromise().then((/**
             * @return {?}
             */
            () => {
                this.thfNotification.success(this.literals.saveNewNotificationSuccessSave);
                this.model = {};
                this.dynamicForm.form.reset();
            }));
        }
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getKeysByFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.key === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getControlFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.type !== 'detail'));
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getDetailFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.type === 'detail'));
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getDuplicatesByFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.duplicate === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
    /**
     * @private
     * @param {?=} actions
     * @return {?}
     */
    getPageActions(actions = {}) {
        /** @type {?} */
        const pageActions = [{ label: this.literals.pageActionSave, action: this.save.bind(this, actions.save) }];
        if (actions.saveNew) {
            pageActions.push({ label: this.literals.pageActionSaveNew, action: this.saveNew.bind(this, actions.saveNew) });
        }
        if (actions.cancel === undefined || actions.cancel) {
            pageActions.push({ label: this.literals.pageActionCancel, action: this.cancel.bind(this, actions.cancel) });
        }
        return pageActions;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    isObject(value) {
        return !!value && typeof value === 'object' && !Array.isArray(value);
    }
}
ThfPageDynamicEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-dynamic-edit',
                template: "<thf-page-default\n  [t-actions]=\"pageActions\"\n  [t-breadcrumb]=\"breadcrumb\"\n  [t-title]=\"title\">\n\n  <ng-container *ngIf=\"model; then formFieldsTemplate; else registerNotFoundTemplate\">\n  </ng-container>\n\n</thf-page-default>\n\n<ng-template #registerNotFoundTemplate>\n\n  <thf-widget>\n    <span class=\"thf-icon thf-icon-info\"></span>\n    <span class=\"thf-font-text-large\">\n      {{ literals.registerNotFound }}\n    </span>\n  </thf-widget>\n\n</ng-template>\n\n<ng-template #formFieldsTemplate>\n\n  <thf-dynamic-form #dynamicForm [t-fields]=\"controlFields\" [t-value]=\"model\">\n  </thf-dynamic-form>\n\n  <div *ngIf=\"detailFields.length > 0\" class=\"thf-sm-12\">\n    <thf-divider [t-label]=\"detailFields[0].divider\"></thf-divider>\n\n    <div class=\"thf-row thf-mb-2\">\n      <thf-button [t-label]=\"literals.detailActionNew\" (t-click)=\"detailActionNew()\" t-small></thf-button>\n    </div>\n\n    <thf-grid #gridDetail\n      [t-row-actions]=\"detailActions\"\n      [t-columns]=\"detailFields[0].detail.columns\"\n      [t-data]=\"model[detailFields[0].property]\">\n    </thf-grid>\n  </div>\n\n</ng-template>\n",
                providers: [ThfPageDynamicService$1]
            }] }
];
/** @nocollapse */
ThfPageDynamicEditComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ThfNotificationService },
    { type: ThfDialogService },
    { type: ThfPageDynamicService$1 }
];
ThfPageDynamicEditComponent.propDecorators = {
    actions: [{ type: Input, args: ['t-actions',] }],
    autoRouter: [{ type: Input, args: ['t-auto-router',] }],
    breadcrumb: [{ type: Input, args: ['t-breadcrumb',] }],
    fields: [{ type: Input, args: ['t-fields',] }],
    serviceApi: [{ type: Input, args: ['t-service-api',] }],
    title: [{ type: Input, args: ['t-title',] }],
    dynamicForm: [{ type: ViewChild, args: ['dynamicForm', { static: true },] }],
    gridDetail: [{ type: ViewChild, args: ['gridDetail', { static: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do thf-page-dynamic-detail.
 */
class ThfPageDynamicEditModule {
}
ThfPageDynamicEditModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    ThfButtonModule,
                    ThfDividerModule,
                    ThfDynamicModule,
                    ThfGridModule,
                    ThfPageModule,
                    ThfWidgetModule
                ],
                declarations: [
                    ThfPageDynamicEditComponent
                ],
                exports: [
                    ThfPageDynamicEditComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const thfAdvancedFiltersLiteralsDefault = {
    en: {
        title: 'Advanced search',
        primaryActionLabel: 'Apply filters',
        secondaryActionLabel: 'Cancel'
    },
    es: {
        title: 'Búsqueda avanzada',
        primaryActionLabel: 'Aplicar filtros',
        secondaryActionLabel: 'Cancelar'
    },
    pt: {
        title: 'Busca avançada',
        primaryActionLabel: 'Aplicar filtros',
        secondaryActionLabel: 'Cancelar'
    }
};
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Filtro de busca avançada criado a partir de um formulário dinâmico.
 * Componente de uso interno.
 */
class ThfAdvancedFilterBaseComponent {
    constructor() {
        this._filters = [];
        this.literals = Object.assign({}, thfAdvancedFiltersLiteralsDefault[thfLocaleDefault], thfAdvancedFiltersLiteralsDefault[browserLanguage()]);
        /**
         * Função que será disparada e receberá os valores do formulário ao ser clicado no botão buscar.
         */
        this.searchEvent = new EventEmitter();
    }
    /**
     * Coleção de objetos que implementam a interface ThfDynamicFormField, para definição dos campos que serão criados
     * dinamicamente.
     * @param {?} filters
     * @return {?}
     */
    set filters(filters) {
        this._filters = Array.isArray(filters) ? [...filters] : [];
    }
    /**
     * @return {?}
     */
    get filters() {
        return this._filters;
    }
}
ThfAdvancedFilterBaseComponent.propDecorators = {
    filters: [{ type: Input, args: ['t-filters',] }],
    searchEvent: [{ type: Output, args: ['t-search-event',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends ThfAdvancedFilterBaseComponent
 *
 * \@examplePrivate
 *
 * <example-private name="thf-advanced-filter" title="Totvs Busca Avançada">
 *   <file name="sample-thf-advanced-filter.component.html"> </file>
 *   <file name="sample-thf-advanced-filter.component.ts"> </file>
 * </example-private>
 */
class ThfAdvancedFilterComponent extends ThfAdvancedFilterBaseComponent {
    constructor() {
        super(...arguments);
        this.filter = {};
        this.primaryAction = {
            action: (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const models = this.getValuesFromForm();
                this.searchEvent.emit(models);
                this.thfModal.close();
            }),
            label: this.literals.primaryActionLabel
        };
        this.secondaryAction = {
            action: (/**
             * @return {?}
             */
            () => {
                this.thfModal.close();
            }),
            label: this.literals.secondaryActionLabel
        };
    }
    // Retorna os models dos campos preenchidos
    /**
     * @return {?}
     */
    getValuesFromForm() {
        Object.keys(this.filter).forEach((/**
         * @param {?} property
         * @return {?}
         */
        property => {
            if (this.filter[property] === undefined || this.filter[property] === '') {
                delete this.filter[property];
            }
        }));
        return this.filter;
    }
    /**
     * @return {?}
     */
    open() {
        this.filter = {};
        this.thfModal.open();
    }
}
ThfAdvancedFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-advanced-filter',
                template: "<thf-modal\n  t-hide-close\n  [t-primary-action]=\"primaryAction\"\n  [t-secondary-action]=\"secondaryAction\"\n  [t-title]=\"literals.title\">\n\n  <thf-dynamic-form\n    [t-fields]=\"filters\"\n    [t-value]=\"filter\">\n  </thf-dynamic-form>\n\n</thf-modal>\n"
            }] }
];
ThfAdvancedFilterComponent.propDecorators = {
    thfModal: [{ type: ViewChild, args: [ThfModalComponent, { static: true },] }],
    thfDynamicForm: [{ type: ViewChild, args: [ThfDynamicFormComponent, { static: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const thfPageDynamicSearchLiteralsDefault = {
    en: {
        disclaimerGroupTitle: 'Displaying results filtered by:',
        filterSettingsPlaceholder: 'Search',
        quickSearchLabel: 'Quick search:'
    },
    es: {
        disclaimerGroupTitle: 'Presentando resultados filtrados por:',
        filterSettingsPlaceholder: 'Buscar',
        quickSearchLabel: 'Búsqueda rápida:'
    },
    pt: {
        disclaimerGroupTitle: 'Apresentando resultados filtrados por:',
        filterSettingsPlaceholder: 'Pesquisar',
        quickSearchLabel: 'Pesquisa rápida:'
    }
};
/**
 * \@description
 *
 * Componente com as ações de pesquisa já definidas, bastando que o desenvolvedor implemente apenas a chamada para as APIs
 * e exiba as informações.
 */
class ThfPageDynamicSearchBaseComponent {
    constructor() {
        this._filters = [];
        this.literals = Object.assign({}, thfPageDynamicSearchLiteralsDefault[thfLocaleDefault], thfPageDynamicSearchLiteralsDefault[browserLanguage()]);
        /**
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface `ThfPageAction`.
         */
        this.actions = [];
        /**
         * Objeto com propriedades do breadcrumb.
         */
        this.breadcrumb = { items: [] };
        /**
         * \@description
         *
         * Evento disparado ao executar a pesquisa avançada, o mesmo irá repassar um objeto com os valores preenchidos no modal de pesquisa.
         *
         * > Campos não preenchidos não irão aparecer no objeto passado por parâmetro.
         */
        this.advancedSearch = new EventEmitter();
        /**
         * Evento disparado ao remover um ou todos os disclaimers pelo usuário.
         */
        this.changeDisclaimers = new EventEmitter();
        /**
         * Evento disparado ao realizar uma busca pelo campo de pesquisa rápida, o mesmo será chamado repassando o valor digitado.
         */
        this.quickSearch = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Lista dos campos usados na busca avançada. Caso o mesmo não seja passado a busca avançada não será exibida.
     * @param {?} filters
     * @return {?}
     */
    set filters(filters) {
        this._filters = Array.isArray(filters) ? [...filters] : [];
    }
    /**
     * @return {?}
     */
    get filters() {
        return this._filters;
    }
}
ThfPageDynamicSearchBaseComponent.propDecorators = {
    actions: [{ type: Input, args: ['t-actions',] }],
    breadcrumb: [{ type: Input, args: ['t-breadcrumb',] }],
    filters: [{ type: Input, args: ['t-filters',] }],
    title: [{ type: Input, args: ['t-title',] }],
    advancedSearch: [{ type: Output, args: ['t-advanced-search',] }],
    changeDisclaimers: [{ type: Output, args: ['t-change-disclaimers',] }],
    quickSearch: [{ type: Output, args: ['t-quick-search',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfPageDynamicSearchBaseComponent
 *
 * \@example
 *
 * <example name="thf-page-dynamic-search-basic" title="Totvs Page Dynamic Search Basic">
 *  <file name="sample-thf-page-dynamic-search-basic/sample-thf-page-dynamic-search-basic.component.html"> </file>
 *  <file name="sample-thf-page-dynamic-search-basic/sample-thf-page-dynamic-search-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-dynamic-search-hiring-processes" title="Totvs Page Dynamic Search - Hiring processes">
 *  <file name="sample-thf-page-dynamic-search-hiring-processes/sample-thf-page-dynamic-search-hiring-processes.component.html"> </file>
 *  <file name="sample-thf-page-dynamic-search-hiring-processes/sample-thf-page-dynamic-search-hiring-processes.component.ts"> </file>
 *  <file name="sample-thf-page-dynamic-search-hiring-processes/sample-thf-page-dynamic-search-hiring-processes.service.ts"> </file>
 * </example>
 */
class ThfPageDynamicSearchComponent extends ThfPageDynamicSearchBaseComponent {
    constructor() {
        super(...arguments);
        this._disclaimerGroup = {
            change: this.onChangeDisclaimerGroup.bind(this),
            disclaimers: [],
            title: this.literals.disclaimerGroupTitle
        };
        this._filterSettings = {
            action: 'onAction',
            advancedAction: 'onAdvancedAction',
            ngModel: 'quickFilter',
            placeholder: this.literals.filterSettingsPlaceholder
        };
        // Flag to control when changeDisclaimerGroup should be called
        this.changeDisclaimersEnabled = false;
    }
    /**
     * @return {?}
     */
    get disclaimerGroup() {
        return Object.assign({}, this._disclaimerGroup);
    }
    /**
     * @return {?}
     */
    get filterSettings() {
        this._filterSettings.advancedAction = this.filters.length === 0 ? undefined : 'onAdvancedAction';
        return Object.assign({}, this._filterSettings);
    }
    /**
     * @return {?}
     */
    onAction() {
        this.changeDisclaimersEnabled = false;
        this._disclaimerGroup.disclaimers = [
            { property: 'search', label: `${this.literals.quickSearchLabel} ${this.quickFilter}`, value: this.quickFilter }
        ];
        if (this.quickSearch.observers && this.quickSearch.observers.length > 0) {
            this.quickSearch.emit(this.quickFilter);
        }
        this.quickFilter = undefined;
    }
    /**
     * @return {?}
     */
    onAdvancedAction() {
        this.thfAdvancedFilter.open();
    }
    /**
     * @param {?} filters
     * @return {?}
     */
    onAdvancedSearch(filters) {
        this.changeDisclaimersEnabled = false;
        this._disclaimerGroup.disclaimers = this.setDisclaimers(filters);
        this.advancedSearch.emit(filters);
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    formatDate(date) {
        /** @type {?} */
        const year = parseInt(date.substr(0, 4), 10);
        /** @type {?} */
        const month = parseInt(date.substr(5, 2), 10);
        /** @type {?} */
        const day = parseInt(date.substr(8, 2), 10);
        return new Date(year, month - 1, day).toLocaleDateString(getBrowserLanguage());
    }
    /**
     * @private
     * @param {?} fields
     * @param {?} fieldName
     * @return {?}
     */
    getFieldByProperty(fields, fieldName) {
        return fields.find((/**
         * @param {?} field
         * @return {?}
         */
        (field) => field.property === fieldName));
    }
    /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    onChangeDisclaimerGroup(disclaimers) {
        this.changeDisclaimersEnabled ? this.changeDisclaimers.emit(disclaimers) : this.changeDisclaimersEnabled = true;
    }
    /**
     * @private
     * @param {?} filters
     * @return {?}
     */
    setDisclaimers(filters) {
        /** @type {?} */
        const disclaimers = [];
        Object.keys(filters).forEach((/**
         * @param {?} filter
         * @return {?}
         */
        filter => {
            /** @type {?} */
            const field = this.getFieldByProperty(this.filters, filter);
            /** @type {?} */
            const value = field.type === ThfDynamicFieldType.Date ? this.formatDate(filters[filter]) : filters[filter];
            disclaimers.push({
                label: `${field.label}: ${value}`,
                property: filter,
                value: filters[filter]
            });
        }));
        return disclaimers;
    }
}
ThfPageDynamicSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-dynamic-search',
                template: "<thf-page-list\n  [t-actions]=\"actions\"\n  [t-breadcrumb]=\"breadcrumb\"\n  [t-disclaimer-group]=\"disclaimerGroup\"\n  [t-filter]=\"filterSettings\"\n  [t-title]=\"title\">\n\n  <thf-advanced-filter\n    [t-filters]=\"filters\"\n    (t-search-event)=\"onAdvancedSearch($event)\">\n  </thf-advanced-filter>\n\n  <ng-content></ng-content>\n\n</thf-page-list>\n"
            }] }
];
ThfPageDynamicSearchComponent.propDecorators = {
    thfAdvancedFilter: [{ type: ViewChild, args: [ThfAdvancedFilterComponent, { static: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do thf-page-dynamic-search.
 */
class ThfPageDynamicSearchModule {
}
ThfPageDynamicSearchModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    ThfDynamicModule,
                    ThfModalModule,
                    ThfPageModule
                ],
                declarations: [
                    ThfAdvancedFilterComponent,
                    ThfPageDynamicSearchComponent
                ],
                exports: [
                    ThfPageDynamicSearchComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfPageDynamicListBaseComponent {
    constructor() {
        this._autoRouter = false;
        this._columns = [];
        this._duplicates = [];
        this._fields = [];
        this._filters = [];
        this._keys = [];
        /**
         * Objeto com propriedades do breadcrumb.
         */
        this.breadcrumb = { items: [] };
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso sejam definidas ações na propriedade `t-actions`
     *
     * As rotas criadas serão baseadas na propriedade `t-actions`.
     *
     * > Para o correto funcionamento não pode haver nenhuma rota coringa (`**`) especificada.
     *
     * \@default false
     * @param {?} value
     * @return {?}
     */
    set autoRouter(value) {
        this._autoRouter = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get autoRouter() {
        return this._autoRouter;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Lista dos campos usados na tabela e busca avançada.
     *
     *
     * > Caso não seja definido fields a tabela assumirá o comportamento padrão.
     * @param {?} fields
     * @return {?}
     */
    set fields(fields) {
        this._fields = Array.isArray(fields) ? [...fields] : [];
        this.setFieldsProperties(this.fields);
    }
    /**
     * @return {?}
     */
    get fields() {
        return this._fields;
    }
    /**
     * @return {?}
     */
    get columns() {
        return [...this._columns];
    }
    /**
     * @return {?}
     */
    get duplicates() {
        return [...this._duplicates];
    }
    /**
     * @return {?}
     */
    get filters() {
        return [...this._filters];
    }
    /**
     * @return {?}
     */
    get keys() {
        return [...this._keys];
    }
    /**
     * @private
     * @param {?} fields
     * @return {?}
     */
    setFieldsProperties(fields) {
        this._filters = fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.filter === true));
        this._columns = fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.visible === undefined || field.visible === true));
        this._keys = fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.key === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
        this._duplicates = fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.duplicate === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
}
ThfPageDynamicListBaseComponent.propDecorators = {
    autoRouter: [{ type: Input, args: ['t-auto-router',] }],
    breadcrumb: [{ type: Input, args: ['t-breadcrumb',] }],
    fields: [{ type: Input, args: ['t-fields',] }],
    serviceApi: [{ type: Input, args: ['t-service-api',] }],
    title: [{ type: Input, args: ['t-title',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfPageDynamicService$2 {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.endpoint = '/';
        this.headers = new HttpHeaders({
            'X-TOTVS-SCREEN-LOCK': 'true'
        });
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    configServiceApi(config = {}) {
        this.endpoint = config.endpoint;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    getMetadata(type = 'list') {
        /** @type {?} */
        const key = `${this.endpoint}-${type}-metadata`;
        /** @type {?} */
        const cache = JSON.parse(localStorage.getItem(key)) || {};
        /** @type {?} */
        const url = `${this.endpoint}/metadata?type=${type}&version=${cache.version || ''}`;
        return this.http.get(url).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (response.version === cache.version) {
                return cache;
            }
            localStorage.setItem(key, JSON.stringify(response));
            return Object.assign({}, cache, response);
        })));
    }
    // Deleta um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    deleteResource(id) {
        return this.http.delete(`${this.endpoint}/${id}`, { headers: this.headers });
    }
    // Deleta recursos em lote
    /**
     * @param {?} ids
     * @return {?}
     */
    deleteResources(ids) {
        return this.http.request('delete', `${this.endpoint}`, { headers: this.headers, body: ids });
    }
    // Busca uma lista de recursos
    /**
     * @param {?=} params
     * @return {?}
     */
    getResources(params = {}) {
        return this.http.get(this.endpoint, { headers: this.headers, params });
    }
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    getResource(id) {
        return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers });
    }
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    createResource(resource) {
        return this.http.post(`${this.endpoint}`, resource, { headers: this.headers });
    }
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    updateResource(id, resource) {
        return this.http.put(`${this.endpoint}/${id}`, resource, { headers: this.headers });
    }
}
ThfPageDynamicService$2.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfPageDynamicService$2.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const thfPageDynamicTableLiteralsDefault = {
    en: {
        pageAction: 'New',
        pageActionRemoveAll: 'Delete',
        tableActionView: 'View',
        tableActionEdit: 'Edit',
        tableActionDuplicate: 'Duplicate',
        tableActionDelete: 'Delete',
        confirmRemoveTitle: 'Confirm delete',
        confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',
        confirmRemoveAllTitle: 'Confirm batch deletion',
        confirmRemoveAllMessage: 'Are you sure you want to delete all these records? You can not undo this action.',
        loadDataErrorNotification: 'Service not found',
        removeSuccessNotification: 'Item deleted successfully',
        removeAllSuccessNotification: 'Items deleted successfully'
    },
    es: {
        pageAction: 'Nuevo',
        pageActionRemoveAll: 'Borrar',
        tableActionView: 'Visualizar',
        tableActionEdit: 'Editar',
        tableActionDuplicate: 'Duplicar',
        tableActionDelete: 'Borrar',
        confirmRemoveTitle: 'Confirmar la exclusión',
        confirmRemoveMessage: '¿Está seguro de que desea eliminar este registro? No puede deshacer esta acción.',
        confirmRemoveAllTitle: 'Confirmar la exclusión por lotes',
        confirmRemoveAllMessage: '¿Está seguro de que desea eliminar todos estos registros? No puede deshacer esta acción.',
        loadDataErrorNotification: 'Servicio no informado.',
        removeSuccessNotification: 'Elemento eliminado con éxito',
        removeAllSuccessNotification: 'Elementos eliminados con éxito'
    },
    pt: {
        pageAction: 'Novo',
        pageActionRemoveAll: 'Excluir',
        tableActionView: 'Visualizar',
        tableActionEdit: 'Editar',
        tableActionDuplicate: 'Duplicar',
        tableActionDelete: 'Excluir',
        confirmRemoveTitle: 'Confirmar exclusão',
        confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? Você não poderá desfazer essa ação.',
        confirmRemoveAllTitle: 'Confirmar exclusão em lote',
        confirmRemoveAllMessage: 'Tem certeza de que deseja excluir todos esses registros? Você não poderá desfazer essa ação.',
        loadDataErrorNotification: 'Serviço não informado.',
        removeSuccessNotification: 'Item excluido com sucesso',
        removeAllSuccessNotification: 'Items excluidos com sucesso'
    }
};
/**
 * \@docsExtends ThfPageDynamicListBaseComponent
 *
 * \@description
 *
 * O `thf-page-dynamic-table` é uma página que exibe uma lista de registros em uma tabela baseado em uma lista de fields,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * \@example
 *
 * <example name="thf-page-dynamic-table-basic" title="Totvs Page Dynamic Table Basic">
 *  <file name="sample-thf-page-dynamic-table-basic/sample-thf-page-dynamic-table-basic.component.html"> </file>
 *  <file name="sample-thf-page-dynamic-table-basic/sample-thf-page-dynamic-table-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-dynamic-table-users" title="Totvs Page Dynamic Table - Users">
 *  <file name="sample-thf-page-dynamic-table-users/sample-thf-page-dynamic-table-users.component.html"> </file>
 *  <file name="sample-thf-page-dynamic-table-users/sample-thf-page-dynamic-table-users.component.ts"> </file>
 * </example>
 */
class ThfPageDynamicTableComponent extends ThfPageDynamicListBaseComponent {
    /**
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} thfDialogService
     * @param {?} thfNotification
     * @param {?} thfPageDynamicService
     */
    constructor(router, activatedRoute, thfDialogService, thfNotification, thfPageDynamicService) {
        super();
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.thfDialogService = thfDialogService;
        this.thfNotification = thfNotification;
        this.thfPageDynamicService = thfPageDynamicService;
        this._actions = {};
        this._pageActions = [];
        this._tableActions = [];
        this.page = 1;
        this.params = {};
        this.hasNext = false;
        this.items = [];
        this.literals = Object.assign({}, thfPageDynamicTableLiteralsDefault[thfLocaleDefault], thfPageDynamicTableLiteralsDefault[browserLanguage()]);
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Ações da página e da tabela.
     * @param {?} value
     * @return {?}
     */
    set actions(value) {
        this._actions = value && typeof value === 'object' && Object.keys(value).length > 0 ? value : {};
        this.setPageActions(this.actions);
        this.setRemoveAllAction();
        this.setTableActions(this.actions);
    }
    /**
     * @return {?}
     */
    get actions() {
        return this._actions;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.activatedRoute.snapshot.data.serviceApi) {
            this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;
            this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadMetadata();
        }
        else {
            this.thfPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadData();
        }
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    onAdvancedSearch(filter) {
        this.loadData(Object.assign({ page: 1 }, filter));
        this.params = filter;
    }
    /**
     * @param {?} disclaimers
     * @return {?}
     */
    onChangeDisclaimers(disclaimers) {
        /** @type {?} */
        const filter = {};
        disclaimers.forEach((/**
         * @param {?} disclaimer
         * @return {?}
         */
        disclaimer => {
            filter[disclaimer.property] = disclaimer.value;
        }));
        this.onAdvancedSearch(filter);
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    onQuickSearch(filter) {
        this.loadData(filter ? { page: 1, search: filter } : undefined);
        this.params = filter ? { search: filter } : {};
    }
    /**
     * @return {?}
     */
    showMore() {
        this.loadData(Object.assign({ page: ++this.page }, this.params));
    }
    /**
     * @return {?}
     */
    get hasActionRemoveAll() {
        return !!this.actions.removeAll;
    }
    /**
     * @return {?}
     */
    get pageActions() {
        return [...this._pageActions];
    }
    /**
     * @return {?}
     */
    get tableActions() {
        return this._tableActions;
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    confirmRemove(item) {
        /** @type {?} */
        const confirmOptions = {
            title: this.literals.confirmRemoveTitle,
            message: this.literals.confirmRemoveMessage,
            confirm: this.remove.bind(this, item)
        };
        this.thfDialogService.confirm(confirmOptions);
    }
    /**
     * @private
     * @return {?}
     */
    confirmRemoveAll() {
        /** @type {?} */
        const confirmOptions = {
            title: this.literals.confirmRemoveAllTitle,
            message: this.literals.confirmRemoveAllMessage,
            confirm: this.removeAll.bind(this)
        };
        this.thfDialogService.confirm(confirmOptions);
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    formatUniqueKey(item) {
        /** @type {?} */
        const keys = mapObjectByProperties(item, this.keys);
        return valuesFromObject(keys).join('|');
    }
    /**
     * @private
     * @param {?=} params
     * @return {?}
     */
    loadData(params = {}) {
        if (!this.serviceApi) {
            this.thfNotification.error(this.literals.loadDataErrorNotification);
            return;
        }
        /** @type {?} */
        const defaultParams = { page: 1, pageSize: 10 };
        /** @type {?} */
        const fullParams = Object.assign({}, defaultParams, params);
        this.thfPageDynamicService.getResources(fullParams).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            this.items = fullParams.page === 1 ? response.items : [...this.items, ...response.items];
            this.page = fullParams.page;
            this.hasNext = response.hasNext;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    loadMetadata() {
        this.thfPageDynamicService.getMetadata().toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.autoRouter = response.autoRouter;
            this.actions = response.actions || {};
            this.breadcrumb = response.breadcrumb || { items: [] };
            this.fields = response.fields || [];
            this.title = response.title;
            this.loadData();
        }));
    }
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    /**
     * @private
     * @param {?} route
     * @param {?=} forceStopAutoRouter
     * @return {?}
     */
    navigateTo(route, forceStopAutoRouter = false) {
        this.router.navigate([route.url || route.path], { queryParams: route.params })
            .catch((/**
         * @return {?}
         */
        () => {
            if (forceStopAutoRouter || !this.autoRouter) {
                return;
            }
            this.router.config.unshift((/** @type {?} */ ({
                path: route.path, component: route.component, data: { serviceApi: this.serviceApi, autoRouter: true }
            })));
            this.navigateTo(route, true);
        }));
    }
    /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    openDetail(path, item) {
        /** @type {?} */
        const url = this.resolveUrl(item, path);
        this.navigateTo({ path, url, component: ThfPageDynamicDetailComponent });
    }
    /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    openDuplicate(path, item) {
        /** @type {?} */
        const duplicates = mapObjectByProperties(item, this.duplicates);
        this.navigateTo({ path, params: { duplicate: JSON.stringify(duplicates) } });
        // this.navigateTo({ path, params: { duplicate: JSON.stringify(duplicates) } , component: ThfPageDynamicEditComponent });
    }
    /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    openEdit(path, item) {
        /** @type {?} */
        const url = this.resolveUrl(item, path);
        this.navigateTo({ path, url });
        // this.navigateTo({ path, url, component: ThfPageDynamicEditComponent });
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    openNew(path) {
        this.navigateTo({ path });
        // this.navigateTo({ path, component: ThfPageDynamicEditComponent });
    }
    /**
     * Caso exista mais de um identificador, será concatenado com '|'.
     *
     * Ex: { id: 1, company: 'totvs' }
     *
     * Para o endpoint /resources/:id será executada a url /resources/1|totvs
     * @private
     * @param {?} item
     * @return {?}
     */
    remove(item) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(item);
        this.thfPageDynamicService.deleteResource(uniqueKey).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.removeLocalItems([item]);
            this.thfNotification.success(this.literals.removeSuccessNotification);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    removeAll() {
        // TODO: usar propriedade nova pra validar os itens selecionados
        /** @type {?} */
        const selectedItems = this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.$selected));
        if (selectedItems.length === 0) {
            // TODO: usar propriedade nova pra validar os itens selecionados
            return;
        }
        /** @type {?} */
        const keysSelectedItems = mapArrayByProperties(selectedItems, this.keys);
        this.thfPageDynamicService.deleteResources(keysSelectedItems).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.removeLocalItems(selectedItems);
            this.thfNotification.success(this.literals.removeAllSuccessNotification);
        }));
    }
    /**
     * @private
     * @param {?=} items
     * @return {?}
     */
    removeLocalItems(items = []) {
        items.forEach((/**
         * @param {?} itemRemoved
         * @return {?}
         */
        itemRemoved => {
            /** @type {?} */
            const indexItemRemoved = this.items.indexOf(itemRemoved);
            this.items.splice(indexItemRemoved, 1);
        }));
    }
    /**
     * @private
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    resolveUrl(item, path) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    }
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    setPageActions(actions) {
        if (actions) {
            this._pageActions = [
                { label: this.literals.pageAction, action: this.openNew.bind(this, actions.new), disabled: !this._actions.new },
            ];
        }
    }
    /**
     * @private
     * @return {?}
     */
    setRemoveAllAction() {
        if (this._actions.removeAll) {
            this._pageActions.push({
                label: this.literals.pageActionRemoveAll, action: this.confirmRemoveAll.bind(this),
                disabled: !this._actions.removeAll
            });
        }
    }
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    setTableActions(actions) {
        if (actions) {
            this._tableActions = [
                { action: this.openDetail.bind(this, actions.detail), label: this.literals.tableActionView, visible: !!this._actions.detail },
                { action: this.openEdit.bind(this, actions.edit), label: this.literals.tableActionEdit, visible: !!this._actions.edit },
                { action: this.openDuplicate.bind(this, actions.duplicate), label: this.literals.tableActionDuplicate,
                    visible: !!this._actions.duplicate
                },
                { action: this.confirmRemove.bind(this), label: this.literals.tableActionDelete, separator: true, type: 'danger',
                    visible: !!this._actions.remove
                }
            ];
        }
    }
}
ThfPageDynamicTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-dynamic-table',
                template: "<thf-page-dynamic-search\n  [t-actions]=\"pageActions\"\n  [t-breadcrumb]=\"breadcrumb\"\n  [t-filters]=\"filters\"\n  [t-title]=\"title\"\n  (t-advanced-search)=\"onAdvancedSearch($event)\"\n  (t-change-disclaimers)=\"onChangeDisclaimers($event)\"\n  (t-quick-search)=\"onQuickSearch($event)\">\n\n  <thf-table\n    t-sort=\"true\"\n    [t-actions]=\"tableActions\"\n    [t-checkbox]=\"hasActionRemoveAll\"\n    [t-columns]=\"columns\"\n    [t-items]=\"items\"\n    [t-show-more-disabled]=\"!hasNext\"\n    (t-show-more)=\"showMore()\">\n  </thf-table>\n\n</thf-page-dynamic-search>\n",
                providers: [ThfPageDynamicService$2]
            }] }
];
/** @nocollapse */
ThfPageDynamicTableComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ThfDialogService },
    { type: ThfNotificationService },
    { type: ThfPageDynamicService$2 }
];
ThfPageDynamicTableComponent.propDecorators = {
    actions: [{ type: Input, args: ['t-actions',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do thf-page-dynamic-search.
 */
class ThfPageDynamicTableModule {
}
ThfPageDynamicTableModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    ThfTableModule,
                    ThfPageDynamicSearchModule
                ],
                declarations: [
                    ThfPageDynamicTableComponent
                ],
                exports: [
                    ThfPageDynamicTableComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfPageJobSchedulerInternal {
    constructor() {
        this.periodicity = 'single';
        this.firstExecution = new Date();
        this.firstExecutionHour = this.getCurrentHour(this.firstExecution);
        this.recurrent = true;
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    getCurrentHour(date) {
        /** @type {?} */
        const hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();
        /** @type {?} */
        const minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();
        return `${hours}:${minutes}`;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O `thf-page-job-scheduler` é uma página para criação e atualização do *Job Scheduler* de forma simplificada, apenas informando
 * o serviço (endpoint) para consumo, sem a necessidade de criar componentes e tratamentos dos dados.
 */
class ThfPageJobSchedulerBaseComponent {
    /**
     * @param {?} thfPageJobSchedulerService
     */
    constructor(thfPageJobSchedulerService) {
        this.thfPageJobSchedulerService = thfPageJobSchedulerService;
        /**
         * Objeto com propriedades do breadcrumb.
         */
        this.breadcrumb = { items: [] };
        this.model = new ThfPageJobSchedulerInternal();
    }
    /**
     * @protected
     * @param {?} id
     * @return {?}
     */
    loadData(id) {
        if (!id) {
            this.model = new ThfPageJobSchedulerInternal();
            return;
        }
        this.thfPageJobSchedulerService.getResource(id).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            this.model = response;
        })).catch((/**
         * @return {?}
         */
        () => {
            this.model = new ThfPageJobSchedulerInternal();
        }));
    }
    /**
     * @protected
     * @param {?} controls
     * @return {?}
     */
    markAsDirtyInvalidControls(controls) {
        for (const key in controls) {
            if (controls.hasOwnProperty(key)) {
                /** @type {?} */
                const control = controls[key];
                if (control.invalid) {
                    control.markAsDirty();
                }
            }
        }
    }
}
ThfPageJobSchedulerBaseComponent.propDecorators = {
    breadcrumb: [{ type: Input, args: ['t-breadcrumb',] }],
    serviceApi: [{ type: Input, args: ['t-service-api',] }],
    title: [{ type: Input, args: ['t-title',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const thfPageJobSchedulerLiteralsDefault = {
    en: {
        at: 'at',
        back: 'Back',
        next: 'Next',
        periodicity: 'Periodicity',
        execution: 'Execution',
        process: 'Process',
        enterProcess: 'Enter a process',
        recurrent: 'Recurrent',
        single: 'Single',
        daily: 'Daily',
        weekly: 'Weekly',
        monthly: 'Monthly',
        scheduling: 'Scheduling',
        parameterization: 'Parameterization',
        conclude: 'Conclude',
        firstExecution: 'First Execution',
        hour: 'Hour',
        day: 'Day',
        weekDays: 'Week days',
        sunday: 'Sunday',
        monday: 'Monday',
        tuesday: 'Tuesday',
        wednesday: 'Wednesday',
        thursday: 'Thursday',
        friday: 'Friday',
        saturday: 'Saturday',
        parameters: 'Parameters',
        yes: 'Yes',
        no: 'No',
        notReported: 'Not reported',
        periodicityData: 'Periodicity data',
        confirmation: 'Confirmation',
        confirmSaveMessage: 'Are you sure you want to complete this schedule?',
        confirmUpdateMessage: 'Are you sure you want to update this schedule?',
        saveNotificationSuccessUpdate: 'Successfully updated scheduling',
        saveNotificationSuccessSave: 'Successfully saved scheduling',
        parametersNotFound: 'Parameters not found.'
    },
    es: {
        at: 'a las',
        back: 'Volver',
        next: 'Avanzar',
        periodicity: 'Periodicidad',
        execution: 'Ejecución',
        process: 'Proceso',
        enterProcess: 'Informe un proceso',
        recurrent: 'Recurrente',
        single: 'Única',
        daily: 'Diaria',
        weekly: 'Semanal',
        monthly: 'Mensual',
        scheduling: 'Programación',
        parameterization: 'Parametrización',
        conclude: 'Completar',
        firstExecution: 'Primera ejecución',
        hour: 'Horario',
        day: 'Día',
        weekDays: 'Dias de la semana',
        sunday: 'Domingo',
        monday: 'Lunes',
        tuesday: 'Martes',
        wednesday: 'Miércoles',
        thursday: 'Jueves',
        friday: 'Viernes',
        saturday: 'Sábado',
        parameters: 'Parámetros',
        yes: 'Sí',
        no: 'No',
        notReported: 'No informado',
        periodicityData: 'Dados da periodicidade',
        confirmation: 'Confirmación',
        confirmSaveMessage: '¿Está seguro de que desea completar esta programación de proceso?',
        confirmUpdateMessage: '¿Está seguro de que desea cambiar esta programación de proceso?',
        saveNotificationSuccessUpdate: 'Programación de proceso actualizada con éxito.',
        saveNotificationSuccessSave: 'Programación de proceso salvo con éxito.',
        parametersNotFound: 'No se encontraron parámetros.'
    },
    pt: {
        at: 'às',
        back: 'Voltar',
        next: 'Avançar',
        periodicity: 'Periodicidade',
        execution: 'Execução',
        process: 'Processo',
        enterProcess: 'Informe um processo',
        recurrent: 'Recorrente',
        single: 'Única',
        daily: 'Diária',
        weekly: 'Semanal',
        monthly: 'Mensal',
        scheduling: 'Agendamento',
        parameterization: 'Parametrização',
        conclude: 'Concluir',
        firstExecution: 'Primeira execução',
        hour: 'Horário',
        day: 'Dia',
        weekDays: 'Dias de semana',
        sunday: 'Domingo',
        monday: 'Segunda-feira',
        tuesday: 'Terça-feira',
        wednesday: 'Quarta-feira',
        thursday: 'Quinta-feira',
        friday: 'Sexta-feira',
        saturday: 'Sábado',
        parameters: 'Parâmetros',
        yes: 'Sim',
        no: 'Não',
        notReported: 'Não informado',
        periodicityData: 'Dados da periodicidade',
        confirmation: 'Confirmação',
        confirmSaveMessage: 'Tem certeza que deseja concluir este agendamento de processo?',
        confirmUpdateMessage: 'Tem certeza que deseja alterar este agendamento de processo?',
        saveNotificationSuccessUpdate: 'Agendamento de processo atualizado com sucesso.',
        saveNotificationSuccessSave: 'Agendamento de processo salvo com sucesso.',
        parametersNotFound: 'Parâmetros não foram encontrados.'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfPageJobSchedulerService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.endpoint = '/';
        this.headers = new HttpHeaders({
            'X-TOTVS-SCREEN-LOCK': 'true'
        });
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    configServiceApi(config = {}) {
        this.endpoint = config.endpoint;
    }
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    createResource(resource) {
        /** @type {?} */
        const jobScheduler = this.convertToJobScheduler(resource);
        return this.http.post(`${this.endpoint}`, jobScheduler, { headers: this.headers });
    }
    /**
     * @return {?}
     */
    getHeadProcesses() {
        /** @type {?} */
        const headers = { 'X-Totvs-No-Error': 'true' };
        return this.http.head(`${this.endpoint}/processes`, { headers });
    }
    // Busca parametros pelo processo id
    /**
     * @param {?} processId
     * @return {?}
     */
    getParametersByProcess(processId) {
        return this.http.get(`${this.endpoint}/processes/${processId}/parameters`, { headers: this.headers })
            .pipe(map((/**
         * @param {?} resource
         * @return {?}
         */
        (resource) => resource.items)));
    }
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    getProcess(id) {
        return this.http.get(`${this.endpoint}/processes/${id}`, { headers: this.headers });
    }
    // Busca uma lista de processos
    /**
     * @param {?=} params
     * @return {?}
     */
    getProcesses(params = {}) {
        return this.http.get(`${this.endpoint}/processes`, { params });
    }
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    getResource(id) {
        return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers })
            .pipe(map((/**
         * @param {?} resource
         * @return {?}
         */
        resource => this.convertToJobSchedulerInternal(resource))));
    }
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    updateResource(id, resource) {
        /** @type {?} */
        const jobScheduler = this.convertToJobScheduler(resource);
        return this.http.put(`${this.endpoint}/${id}`, jobScheduler, { headers: this.headers });
    }
    /**
     * @private
     * @param {?} jobSchedulerInternal
     * @return {?}
     */
    convertToJobScheduler(jobSchedulerInternal) {
        /** @type {?} */
        const jobScheduler = Object.assign({}, jobSchedulerInternal);
        if (jobSchedulerInternal.periodicity) {
            if (jobSchedulerInternal.periodicity === 'single') {
                jobScheduler.recurrent = false;
            }
            else {
                Object.assign(jobScheduler, this.convertToPeriodicity(jobSchedulerInternal));
            }
        }
        if (jobSchedulerInternal.firstExecutionHour) {
            jobScheduler.firstExecution =
                this.replaceHourFirstExecution(jobSchedulerInternal.firstExecution, jobSchedulerInternal.firstExecutionHour);
        }
        if (!Object.keys(this.returnValidExecutionParameter(jobScheduler.executionParameter)).length) {
            delete jobScheduler.executionParameter;
        }
        this.removeInvalidKeys(jobScheduler);
        return jobScheduler;
    }
    /**
     * @private
     * @param {?=} jobScheduler
     * @return {?}
     */
    convertToJobSchedulerInternal(jobScheduler = (/** @type {?} */ ({}))) {
        /** @type {?} */
        const jobSchedulerInternal = Object.assign({}, jobScheduler);
        if (jobScheduler.firstExecution) {
            jobSchedulerInternal.firstExecutionHour = this.getHourFirstExecution(jobScheduler.firstExecution);
        }
        Object.assign(jobSchedulerInternal, this.convertToPeriodicityInternal(jobScheduler));
        this.removeInvalidKeys(jobSchedulerInternal, ['weekly', 'monthly', 'daily']);
        return jobSchedulerInternal;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    convertToPeriodicity(value) {
        /** @type {?} */
        const newValue = {};
        /** @type {?} */
        const valuePeriodicity = value.periodicity;
        if (valuePeriodicity) {
            newValue[valuePeriodicity] = {};
            if (valuePeriodicity === 'monthly') {
                newValue[valuePeriodicity].day = value.dayOfMonth ? parseInt(value.dayOfMonth, 10) : 0;
            }
            else if (valuePeriodicity === 'weekly') {
                newValue[valuePeriodicity].daysOfWeek = value.daysOfWeek;
            }
            newValue[valuePeriodicity].hour = value.hour ? parseInt(value.hour.split(':')[0], 10) : 0;
            newValue[valuePeriodicity].minute = value.hour ? parseInt(value.hour.split(':')[1], 10) : 0;
        }
        return newValue;
    }
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    convertToPeriodicityInternal(value = (/** @type {?} */ ({}))) {
        if (value.monthly) {
            return {
                periodicity: 'monthly',
                hour: `${addZero(value.monthly.hour)}:${addZero(value.monthly.minute)}`,
                dayOfMonth: value.monthly.day
            };
        }
        else if (value.daily) {
            return {
                periodicity: 'daily',
                hour: `${addZero(value.daily.hour)}:${addZero(value.daily.minute)}`
            };
        }
        else if (value.weekly) {
            return {
                periodicity: 'weekly',
                hour: `${addZero(value.weekly.hour)}:${addZero(value.weekly.minute)}`,
                daysOfWeek: [...value.weekly.daysOfWeek]
            };
        }
        else {
            return {
                periodicity: 'single'
            };
        }
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    getCurrentHour(date) {
        /** @type {?} */
        const hours = addZero(date.getHours());
        /** @type {?} */
        const minutes = addZero(date.getMinutes());
        return `${hours}:${minutes}`;
    }
    /**
     * @private
     * @param {?} firstExecutionDate
     * @return {?}
     */
    getHourFirstExecution(firstExecutionDate) {
        return this.getCurrentHour(new Date(firstExecutionDate));
    }
    /**
     * @private
     * @param {?} value
     * @param {?=} keys
     * @return {?}
     */
    removeInvalidKeys(value, keys) {
        /** @type {?} */
        const invalidKeys = keys || ['periodicity', 'hour', 'minute', 'day', 'daysOfWeek', 'dayOfMonth', 'firstExecutionHour'];
        Object.keys(value).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            if (invalidKeys.includes(key)) {
                delete value[key];
            }
        }));
    }
    /**
     * @private
     * @param {?} date
     * @param {?} time
     * @return {?}
     */
    replaceHourFirstExecution(date, time) {
        /** @type {?} */
        const firstExecutionDate = new Date(date);
        /** @type {?} */
        const timeSplited = time.split(':');
        /** @type {?} */
        const hours = parseInt(timeSplited[0], 10);
        /** @type {?} */
        const minutes = parseInt(timeSplited[1], 10);
        firstExecutionDate.setHours(hours, minutes);
        return convertDateToISOExtended(firstExecutionDate);
    }
    /**
     * @private
     * @param {?} parameter
     * @return {?}
     */
    returnValidExecutionParameter(parameter) {
        /** @type {?} */
        const newParameter = Object.assign({}, parameter);
        for (const key in newParameter) {
            if (newParameter.hasOwnProperty(key) && newParameter[key] === undefined) {
                delete newParameter[key];
            }
        }
        return newParameter;
    }
}
ThfPageJobSchedulerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfPageJobSchedulerService.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfPageJobSchedulerLookupService {
    /**
     * @param {?} thfPageJobSchedulerService
     */
    constructor(thfPageJobSchedulerService) {
        this.thfPageJobSchedulerService = thfPageJobSchedulerService;
    }
    /**
     * @param {?} search
     * @param {?} page
     * @param {?} pageSize
     * @return {?}
     */
    getFilteredData(search, page, pageSize) {
        /** @type {?} */
        const params = { page, pageSize, search };
        return this.thfPageJobSchedulerService.getProcesses(params);
    }
    /**
     * @param {?} processId
     * @return {?}
     */
    getObjectByValue(processId) {
        return this.thfPageJobSchedulerService.getProcess(processId);
    }
}
ThfPageJobSchedulerLookupService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfPageJobSchedulerLookupService.ctorParameters = () => [
    { type: ThfPageJobSchedulerService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfPageJobSchedulerBaseComponent
 *
 * \@example
 *
 * <example name="thf-page-job-scheduler-basic" title="Totvs Page Job Scheduler Basic">
 *  <file name="sample-thf-page-job-scheduler-basic/sample-thf-page-job-scheduler-basic.component.html"> </file>
 *  <file name="sample-thf-page-job-scheduler-basic/sample-thf-page-job-scheduler-basic.component.ts"> </file>
 * </example>
 *
 */
class ThfPageJobSchedulerComponent extends ThfPageJobSchedulerBaseComponent {
    /**
     * @param {?} thfPageDynamicLookupService
     * @param {?} activatedRoute
     * @param {?} thfDialogService
     * @param {?} thfNotification
     * @param {?} router
     * @param {?} thfPageJobSchedulerService
     */
    constructor(thfPageDynamicLookupService, activatedRoute, thfDialogService, thfNotification, router, thfPageJobSchedulerService) {
        super(thfPageJobSchedulerService);
        this.thfPageDynamicLookupService = thfPageDynamicLookupService;
        this.activatedRoute = activatedRoute;
        this.thfDialogService = thfDialogService;
        this.thfNotification = thfNotification;
        this.router = router;
        this.isEdit = false;
        this.literals = Object.assign({}, thfPageJobSchedulerLiteralsDefault[thfLocaleDefault], thfPageJobSchedulerLiteralsDefault[browserLanguage()]);
        this.parameters = [];
        this.step = 1;
        this.backPageAction = {
            label: this.literals.back,
            action: this.nextStepOperation.bind(this, 'back'),
            disabled: this.isDisabledBack.bind(this)
        };
        this.concludePageActions = [
            {
                label: this.literals.conclude,
                action: this.confirmJobScheduler.bind(this)
            },
            Object.assign({}, this.backPageAction)
        ];
        this.nextPageActions = [
            {
                label: this.literals.next,
                action: this.nextStepOperation.bind(this, 'next'),
                disabled: this.isDisabledAdvance.bind(this)
            },
            Object.assign({}, this.backPageAction)
        ];
        this.jobSchedulerActions = [
            ...this.nextPageActions
        ];
        this.steps = [
            { label: this.literals.scheduling },
            { label: this.literals.parameterization },
            { label: this.literals.conclude }
        ];
    }
    /**
     * @return {?}
     */
    get stepperOrientation() {
        return window.innerWidth > 481 && window.innerWidth < 960 ? 'horizontal' : 'vertical';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        this.isEdit = !!paramId;
        this.thfPageJobSchedulerService.configServiceApi({ endpoint: this.serviceApi });
        this.loadData(paramId);
    }
    /**
     * @param {?} currentStep
     * @param {?} nextStep
     * @return {?}
     */
    changePageActionsBySteps(currentStep, nextStep) {
        /** @type {?} */
        const stepsLength = this.steps.length;
        if (nextStep === stepsLength) {
            this.jobSchedulerActions = [...this.concludePageActions];
        }
        else if (currentStep === stepsLength && nextStep < currentStep) {
            this.jobSchedulerActions = [...this.nextPageActions];
        }
    }
    /**
     * @param {?} stepNumber
     * @return {?}
     */
    nextStep(stepNumber) {
        if (stepNumber > 1 && this.schedulerExecution.form.invalid) {
            this.markAsDirtyInvalidControls(this.schedulerExecution.form.controls);
            return;
        }
        if (stepNumber > 2 && (this.schedulerParameters && this.schedulerParameters.form && this.schedulerParameters.form.invalid)) {
            this.markAsDirtyInvalidControls(this.schedulerParameters.form.controls);
            return;
        }
        this.changePageActionsBySteps(this.step, stepNumber);
        /** @type {?} */
        const steps = this.steps[this.step - 1];
        this.step = stepNumber;
        if (steps) {
            steps.status = ThfStepperStatus.Done;
        }
    }
    /**
     * @param {?} process
     * @return {?}
     */
    onChangeProcess(process) {
        if (process.existAPI && process.processId) {
            this.getParametersByProcess(process.processId);
            if (!this.isEdit) {
                this.model.executionParameter = {};
            }
            return;
        }
    }
    /**
     * @private
     * @return {?}
     */
    confirmJobScheduler() {
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        /** @type {?} */
        const confirmMessage = paramId ? this.literals.confirmUpdateMessage : this.literals.confirmSaveMessage;
        this.thfDialogService.confirm({
            title: this.literals.confirmation,
            message: confirmMessage,
            confirm: (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const model = Object.assign({}, this.model);
                this.save(model, paramId);
            })
        });
    }
    /**
     * @private
     * @param {?} msgSuccess
     * @param {?} saveOperation
     * @return {?}
     */
    emitSuccessMessage(msgSuccess, saveOperation) {
        return __awaiter(this, void 0, void 0, function* () {
            yield saveOperation.toPromise();
            this.thfNotification.success(msgSuccess);
            this.resetJobSchedulerForm();
        });
    }
    /**
     * @private
     * @param {?} process
     * @return {?}
     */
    getParametersByProcess(process) {
        this.thfPageJobSchedulerService.getParametersByProcess(process).subscribe((/**
         * @param {?} parameters
         * @return {?}
         */
        parameters => {
            this.parameters = parameters;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    isDisabledAdvance() {
        return this.schedulerExecution ? this.schedulerExecution.form.invalid : false;
    }
    /**
     * @private
     * @return {?}
     */
    isDisabledBack() {
        return this.step === 1;
    }
    /**
     * @private
     * @param {?=} operation
     * @return {?}
     */
    nextStepOperation(operation) {
        /** @type {?} */
        const stepNumber = operation === 'back' ? this.step - 1 : this.step + 1;
        this.nextStep(stepNumber);
    }
    /**
     * @private
     * @return {?}
     */
    resetJobSchedulerForm() {
        this.schedulerExecution.form.reset();
        // radiogroup não estava atribuindo novo valor, fica vermelho sem o timetout.
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.model = new ThfPageJobSchedulerInternal();
            this.step = 1;
            this.steps.forEach((/**
             * @param {?} step
             * @return {?}
             */
            step => {
                step.status = ThfStepperStatus.Default;
            }));
            this.jobSchedulerActions = [...this.nextPageActions];
        }));
    }
    /**
     * @private
     * @param {?} model
     * @param {?} paramId
     * @return {?}
     */
    save(model, paramId) {
        /** @type {?} */
        const saveOperation = paramId
            ? this.thfPageJobSchedulerService.updateResource(paramId, model)
            : this.thfPageJobSchedulerService.createResource(model);
        /** @type {?} */
        const msgSuccess = paramId ? this.literals.saveNotificationSuccessUpdate : this.literals.saveNotificationSuccessSave;
        this.emitSuccessMessage(msgSuccess, saveOperation);
    }
}
ThfPageJobSchedulerComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-job-scheduler',
                template: "<thf-page-default\n  [t-actions]=\"jobSchedulerActions\"\n  [t-breadcrumb]=\"breadcrumb\"\n  [t-title]=\"title\">\n\n  <div class=\"thf-row\">\n\n    <thf-stepper\n      class=\"thf-lg-3 thf-xl-2\"\n      t-sequential=\"true\"\n      [t-orientation]=\"stepperOrientation\"\n      [t-step]=\"step\"\n      [t-steps]=\"steps\"\n      (t-change-step)=\"nextStep($event)\">\n    </thf-stepper>\n\n    <thf-container class=\"thf-lg-8 thf-xl-6\">\n      <form #formScheduler=\"ngForm\">\n\n        <thf-page-job-scheduler-execution [hidden]=\"step !== 1\"\n          #schedulerExecution\n          class=\"thf-md-12\"\n          [t-is-edit]=\"isEdit\"\n          [t-literals]=\"literals\"\n          [t-value]=\"model\"\n          (t-change-process)=\"onChangeProcess($event)\">\n        </thf-page-job-scheduler-execution>\n\n        <thf-page-job-scheduler-parameters *ngIf=\"step === 2\"\n          #schedulerParameters\n          class=\"thf-md-12\"\n          [t-literals]=\"literals\"\n          [t-parameters]=\"parameters || []\"\n          [(t-value)]=\"model.executionParameter\">\n        </thf-page-job-scheduler-parameters>\n\n        <thf-page-job-scheduler-summary *ngIf=\"step === 3\"\n          class=\"thf-md-12\"\n          [t-literals]=\"literals\"\n          [t-parameters]=\"parameters\"\n          [t-value]=\"model\">\n        </thf-page-job-scheduler-summary>\n      </form>\n    </thf-container>\n  </div>\n\n</thf-page-default>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [`
    thf-container .thf-container {
      overflow-y: unset;
    }
  `]
            }] }
];
/** @nocollapse */
ThfPageJobSchedulerComponent.ctorParameters = () => [
    { type: ThfPageJobSchedulerLookupService },
    { type: ActivatedRoute },
    { type: ThfDialogService },
    { type: ThfNotificationService },
    { type: Router },
    { type: ThfPageJobSchedulerService }
];
ThfPageJobSchedulerComponent.propDecorators = {
    schedulerExecution: [{ type: ViewChild, args: ['schedulerExecution', { static: true },] }],
    schedulerParameters: [{ type: ViewChild, args: ['schedulerParameters', { static: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfPageJobSchedulerExecutionComponent {
    /**
     * @param {?} thfPageJobSchedulerService
     * @param {?} thfPageJobSchedulerLookup
     */
    constructor(thfPageJobSchedulerService, thfPageJobSchedulerLookup) {
        this.thfPageJobSchedulerService = thfPageJobSchedulerService;
        this.thfPageJobSchedulerLookup = thfPageJobSchedulerLookup;
        this._value = {};
        this.dayPattern = '^(3[0-1]|[0-2][0-9]|[1-9]|0[1-9])$';
        this.existProcessAPI = true;
        this.minDateFirstExecution = new Date();
        this.periodicityOptions = [];
        this.timePattern = '^(2[0-3]|[01][0-9]):?([0-5][0-9])$';
        this.weekDays = [];
        this.isEdit = false;
        this.literals = (/** @type {?} */ ({}));
        this.changeProcess = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = value && isTypeof(value, 'object') ? value : {};
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @return {?}
     */
    get startDateFirstExecution() {
        return this.isEdit ? undefined : this.minDateFirstExecution;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.subscribeProcessIdValueChanges();
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.periodicityTemplates = {
            daily: this.dailyTemplate,
            monthly: this.monthlyTemplate,
            weekly: this.weeklyTempalte
        };
        this.checkExistsProcessesAPI();
        this.periodicityOptions = this.getPeriodicityOptions();
        this.weekDays = this.getWeekDays();
    }
    /**
     * @private
     * @return {?}
     */
    checkExistsProcessesAPI() {
        this.thfPageJobSchedulerService.getHeadProcesses().subscribe(undefined, (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.existProcessAPI = false;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getPeriodicityOptions() {
        return [
            { label: this.literals.single, value: 'single' },
            { label: this.literals.daily, value: 'daily' },
            { label: this.literals.weekly, value: 'weekly' },
            { label: this.literals.monthly, value: 'monthly' }
        ];
    }
    /**
     * @private
     * @return {?}
     */
    getWeekDays() {
        return [
            { label: this.literals.sunday, value: 'Sunday' },
            { label: this.literals.monday, value: 'Monday' },
            { label: this.literals.tuesday, value: 'Tuesday' },
            { label: this.literals.wednesday, value: 'Wednesday' },
            { label: this.literals.thursday, value: 'Thursday' },
            { label: this.literals.friday, value: 'Friday' },
            { label: this.literals.saturday, value: 'Saturday' }
        ];
    }
    /**
     * @private
     * @return {?}
     */
    subscribeProcessIdValueChanges() {
        this.form.controls['processID'].valueChanges.subscribe((/**
         * @param {?} processId
         * @return {?}
         */
        processId => {
            this.changeProcess.emit({ processId, existAPI: this.existProcessAPI });
        }));
    }
}
ThfPageJobSchedulerExecutionComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-job-scheduler-execution',
                template: "<form #formExecution=\"ngForm\">\n  <div class=\"thf-row\">\n    <ng-container *ngIf=\"existProcessAPI; then lookupProcessesID; else inputProcessesID\"></ng-container>\n  </div>\n\n  <div class=\"thf-row\">\n    <thf-divider class=\"thf-md-12\" [t-label]=\"literals.firstExecution\"></thf-divider>\n\n    <thf-datepicker\n      class=\"thf-md-4\"\n      name=\"firstExecution\"\n      [(ngModel)]=\"value.firstExecution\"\n      t-placeholder=\"dd/mm/aaaa\"\n      t-required\n      [t-disabled]=\"isEdit\"\n      [t-label]=\"literals.day\"\n      [t-min-date]=\"startDateFirstExecution\">\n    </thf-datepicker>\n\n    <thf-input\n      class=\"thf-md-2\"\n      name=\"firstExecutionHour\"\n      [(ngModel)]=\"value.firstExecutionHour\"\n      t-mask=\"99:99\"\n      t-mask-format-model\n      t-placeholder=\"HH:mm\"\n      t-required\n      [t-disabled]=\"isEdit\"\n      [t-label]=\"literals.hour\"\n      [t-pattern]=\"timePattern\">\n    </thf-input>\n\n  </div>\n\n  <hr>\n\n  <div class=\"thf-row\">\n    <thf-radio-group\n      class=\"thf-sm-12\"\n      name=\"periodicity\"\n      [(ngModel)]=\"value.periodicity\"\n      t-columns=\"4\"\n      t-required\n      [t-label]=\"literals.periodicity\"\n      [t-options]=\"periodicityOptions\">\n    </thf-radio-group>\n\n    <ng-container *ngIf=\"value.periodicity !== 'single'\">\n      <thf-divider class=\"thf-md-12\" [t-label]=\"literals.periodicityData\">\n      </thf-divider>\n\n      <div class=\"thf-row\">\n        <ng-container *ngTemplateOutlet=\"periodicityTemplates[value.periodicity]\">\n        </ng-container>\n      </div>\n\n      <div class=\"thf-row\">\n        <thf-switch\n          class=\"thf-md-3\"\n          name=\"recurrent\"\n          [(ngModel)]=\"value.recurrent\"\n          [t-label]=\"literals.recurrent\"\n          [t-label-off]=\"literals.no\"\n          [t-label-on]=\"literals.yes\">\n        </thf-switch>\n      </div>\n    </ng-container>\n  </div>\n\n  <ng-template #lookupProcessesID>\n    <thf-lookup\n      class=\"thf-md-12\"\n      name=\"processID\"\n      [(ngModel)]=\"value.processID\"\n      t-field-label=\"description\"\n      t-field-value=\"processID\"\n      t-required\n      [t-disabled]=\"isEdit\"\n      [t-filter-service]=\"thfPageJobSchedulerLookup\"\n      [t-label]=\"literals.process\"\n      [t-placeholder]=\"literals.enterProcess\">\n    </thf-lookup>\n  </ng-template>\n\n  <ng-template #inputProcessesID>\n    <thf-input\n      class=\"thf-md-12\"\n      name=\"processID\"\n      [(ngModel)]=\"value.processID\"\n      t-required\n      [t-disabled]=\"isEdit\"\n      [t-label]=\"literals.process\"\n      [t-placeholder]=\"literals.enterProcess\">\n    </thf-input>\n  </ng-template>\n\n  <ng-template #dailyTemplate>\n    <ng-container *ngTemplateOutlet=\"inputHourTemplate\">\n    </ng-container>\n  </ng-template>\n\n  <ng-template #weeklyTemplate>\n    <div class=\"thf-row\">\n      <ng-container *ngTemplateOutlet=\"inputHourTemplate\">\n      </ng-container>\n    </div>\n\n    <thf-checkbox-group\n      class=\"thf-md-12\"\n      name=\"daysOfWeek\"\n      [(ngModel)]=\"value.daysOfWeek\"\n      t-columns=\"4\"\n      t-required\n      [t-label]=\"literals.weekDays\"\n      [t-options]=\"weekDays\">\n    </thf-checkbox-group>\n  </ng-template>\n\n  <ng-template #monthlyTemplate>\n    <thf-number\n      class=\"thf-md-3\"\n      name=\"dayOfMonth\"\n      [(ngModel)]=\"value.dayOfMonth\"\n      t-required\n      [t-error-pattern]=\"'Dia inv\u00E1lido'\"\n      [t-label]=\"literals.day\"\n      [t-max]=\"31\"\n      [t-pattern]=\"dayPattern\">\n    </thf-number>\n\n    <ng-container *ngTemplateOutlet=\"inputHourTemplate\">\n    </ng-container>\n  </ng-template>\n\n  <ng-template #inputHourTemplate>\n    <thf-input\n      class=\"thf-md-2\"\n      name=\"hour\"\n      [(ngModel)]=\"value.hour\"\n      t-mask=\"99:99\"\n      t-mask-format-model\n      t-placeholder=\"HH:mm\"\n      t-required\n      [t-label]=\"literals.hour\"\n      [t-pattern]=\"timePattern\">\n    </thf-input>\n  </ng-template>\n</form>\n"
            }] }
];
/** @nocollapse */
ThfPageJobSchedulerExecutionComponent.ctorParameters = () => [
    { type: ThfPageJobSchedulerService },
    { type: ThfPageJobSchedulerLookupService }
];
ThfPageJobSchedulerExecutionComponent.propDecorators = {
    form: [{ type: ViewChild, args: ['formExecution', { static: true },] }],
    dailyTemplate: [{ type: ViewChild, args: ['dailyTemplate', { static: true },] }],
    monthlyTemplate: [{ type: ViewChild, args: ['monthlyTemplate', { static: true },] }],
    weeklyTempalte: [{ type: ViewChild, args: ['weeklyTemplate', { static: true },] }],
    isEdit: [{ type: Input, args: ['t-is-edit',] }],
    literals: [{ type: Input, args: ['t-literals',] }],
    value: [{ type: Input, args: ['t-value',] }],
    changeProcess: [{ type: Output, args: ['t-change-process',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfPageJobSchedulerParametersComponent {
    constructor() {
        this.literals = (/** @type {?} */ ({}));
        this.parameters = [];
        this.valueChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.form) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.form.valueChanges.subscribe((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => {
                    this.valueChange.emit(value);
                }));
            }));
        }
    }
}
ThfPageJobSchedulerParametersComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-job-scheduler-parameters',
                template: "<ng-container *ngIf=\"parameters && parameters.length; then formFieldsTemplate; else parametersNotFoundTemplate\">\n</ng-container>\n\n<ng-template #parametersNotFoundTemplate>\n\n  <div class=\"thf-text-center\">\n    <span class=\"thf-icon thf-icon-info\"></span>\n    <span class=\"thf-font-text-large\">\n      {{ literals.parametersNotFound }}\n    </span>\n  </div>\n\n</ng-template>\n\n<ng-template #formFieldsTemplate>\n  <form #parametersForm=\"ngForm\">\n    <thf-dynamic-form\n      t-group-form\n      [t-fields]=\"parameters\"\n      [t-value]=\"value\">\n    </thf-dynamic-form>\n  </form>\n</ng-template>\n"
            }] }
];
ThfPageJobSchedulerParametersComponent.propDecorators = {
    form: [{ type: ViewChild, args: ['parametersForm', { static: true },] }],
    literals: [{ type: Input, args: ['t-literals',] }],
    parameters: [{ type: Input, args: ['t-parameters',] }],
    value: [{ type: Input, args: ['t-value',] }],
    valueChange: [{ type: Output, args: ['t-valueChange',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfPageJobSchedulerSummaryComponent {
    /**
     * @param {?} datePipe
     */
    constructor(datePipe) {
        this.datePipe = datePipe;
        this.executionValue = '';
        this.firstExecutionValue = '';
        this.infoOrientation = ThfInfoOrientation.Horizontal;
        this.periodicityValue = '';
        this.recurrentValue = '';
        this.literals = (/** @type {?} */ ({}));
        this.parameters = [];
        this.value = (/** @type {?} */ ({}));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const { periodicity, hour, dayOfMonth, daysOfWeek, recurrent, firstExecution, firstExecutionHour } = this.value;
        this.periodicityValue = this.getPeriodicityLabel(periodicity);
        this.executionValue = this.getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth);
        this.firstExecutionValue = this.getFirstExecutionLabel(firstExecution, firstExecutionHour);
        this.recurrentValue = this.getRecurrentValue(recurrent);
    }
    /**
     * @private
     * @param {?} periodicity
     * @param {?=} hour
     * @param {?=} daysOfWeek
     * @param {?=} dayOfMonth
     * @return {?}
     */
    getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth) {
        switch (periodicity) {
            case 'daily':
                return this.getHourLabel(hour);
            case 'monthly':
                return this.getMonthlyLabelExecution(dayOfMonth, hour);
            case 'weekly':
                return this.getWeeklyLabelExecution(daysOfWeek, hour);
            default:
                return this.literals.notReported;
        }
    }
    /**
     * @private
     * @param {?} firstExecution
     * @param {?=} firstExecutionHour
     * @return {?}
     */
    getFirstExecutionLabel(firstExecution, firstExecutionHour) {
        if (firstExecution) {
            /** @type {?} */
            const date = this.datePipe.transform(firstExecution, 'dd/MM/yyyy', '-0200');
            return `${date} ${this.getHourLabel(firstExecutionHour)}`;
        }
        else {
            return this.literals.notReported;
        }
    }
    /**
     * @private
     * @param {?} hour
     * @return {?}
     */
    getHourLabel(hour) {
        return `${this.literals.at} ${hour || '00:00'}h`;
    }
    /**
     * @private
     * @param {?} dayOfMonth
     * @param {?} hour
     * @return {?}
     */
    getMonthlyLabelExecution(dayOfMonth, hour) {
        /** @type {?} */
        const hourLabel = this.getHourLabel(hour);
        return `${this.literals.day} ${dayOfMonth} ${hourLabel}`;
    }
    /**
     * @private
     * @param {?} periodicity
     * @return {?}
     */
    getPeriodicityLabel(periodicity) {
        switch (periodicity) {
            case 'daily':
                return this.literals.daily;
            case 'monthly':
                return this.literals.monthly;
            case 'weekly':
                return this.literals.weekly;
            default:
                return this.literals.single;
        }
    }
    /**
     * @private
     * @param {?} recurrent
     * @return {?}
     */
    getRecurrentValue(recurrent) {
        return recurrent ? this.literals.yes : this.literals.no;
    }
    /**
     * @private
     * @return {?}
     */
    getSorterWeekDays() {
        return {
            'sunday': 0,
            'monday': 1,
            'tuesday': 2,
            'wednesday': 3,
            'thursday': 4,
            'friday': 5,
            'saturday': 6
        };
    }
    /**
     * @private
     * @param {?} day
     * @return {?}
     */
    getTranslateWeekDay(day) {
        /** @type {?} */
        const days = {
            Sunday: this.literals.sunday,
            Monday: this.literals.monday,
            Tuesday: this.literals.tuesday,
            Wednesday: this.literals.wednesday,
            Thursday: this.literals.thursday,
            Friday: this.literals.friday,
            Saturday: this.literals.saturday,
        };
        return days[day] || '';
    }
    /**
     * @private
     * @param {?=} days
     * @return {?}
     */
    getWeekDaysLabel(days = []) {
        /** @type {?} */
        const weekDaysSorted = this.sortWeekDays(days);
        return weekDaysSorted.map((/**
         * @param {?} day
         * @return {?}
         */
        day => this.getTranslateWeekDay(day))).join(', ');
    }
    /**
     * @private
     * @param {?} daysOfWeek
     * @param {?} hour
     * @return {?}
     */
    getWeeklyLabelExecution(daysOfWeek, hour) {
        if (daysOfWeek && Array.isArray(daysOfWeek)) {
            return `${this.getWeekDaysLabel(daysOfWeek)} ${this.getHourLabel(hour)}`;
        }
        else {
            return this.literals.notReported;
        }
    }
    /**
     * @private
     * @param {?=} days
     * @return {?}
     */
    sortWeekDays(days = []) {
        /** @type {?} */
        const sorterWeekDays = this.getSorterWeekDays();
        return days.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            /** @type {?} */
            const currDay = a.toLowerCase();
            /** @type {?} */
            const nextDay = b.toLowerCase();
            return sorterWeekDays[currDay] > sorterWeekDays[nextDay] ? 1 : -1;
        }));
    }
}
ThfPageJobSchedulerSummaryComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-job-scheduler-summary',
                template: "<div class=\"thf-md-12\">\n  <thf-info\n    [t-label]=\"literals.process\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"value.processID\">\n  </thf-info>\n\n  <thf-info\n    [t-label]=\"literals.periodicity\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"periodicityValue\">\n  </thf-info>\n\n  <thf-info *ngIf=\"value.periodicity !== 'single'\"\n    [t-label]=\"literals.execution\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"executionValue\">\n  </thf-info>\n\n  <thf-info\n    [t-label]=\"literals.recurrent\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"recurrentValue\">\n  </thf-info>\n\n  <thf-info\n    [t-label]=\"literals.firstExecution\"\n    [t-orientation]=\"infoOrientation\"\n    [t-value]=\"firstExecutionValue\">\n  </thf-info>\n</div>\n\n<thf-widget *ngIf=\"parameters && parameters.length\"\n  class=\"thf-pt-1 thf-pb-1 thf-md-12\"\n  [t-title]=\"literals.parameters\">\n\n  <thf-dynamic-view\n    [t-fields]=\"parameters\"\n    [t-value]=\"value.executionParameter\">\n  </thf-dynamic-view>\n\n</thf-widget>\n\n"
            }] }
];
/** @nocollapse */
ThfPageJobSchedulerSummaryComponent.ctorParameters = () => [
    { type: DatePipe }
];
ThfPageJobSchedulerSummaryComponent.propDecorators = {
    literals: [{ type: Input, args: ['t-literals',] }],
    parameters: [{ type: Input, args: ['t-parameters',] }],
    value: [{ type: Input, args: ['t-value',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfPageJobSchedulerModule {
}
ThfPageJobSchedulerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ThfPageJobSchedulerComponent,
                    ThfPageJobSchedulerExecutionComponent,
                    ThfPageJobSchedulerParametersComponent,
                    ThfPageJobSchedulerSummaryComponent
                ],
                exports: [
                    ThfPageJobSchedulerComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    ThfButtonModule,
                    ThfContainerModule,
                    ThfDialogModule,
                    ThfDividerModule,
                    ThfDynamicModule,
                    ThfFieldModule,
                    ThfInfoModule,
                    ThfPageModule,
                    ThfStepperModule,
                    ThfWidgetModule
                ],
                providers: [
                    ThfPageJobSchedulerService,
                    ThfPageJobSchedulerLookupService
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ThfPageLoginAuthenticationType = {
    /** Autenticação Basic */
    Basic: 'Basic',
    /** Autenticação Bearer */
    Bearer: 'Bearer',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const thfPageLoginContentMaxLength = 40;
/** @type {?} */
const thfPageLoginLiteralsDefault = {
    en: (/** @type {?} */ ({
        title: 'Welcome',
        loginErrorPattern: 'Invalid Login',
        loginHint: `Your login user was given to you at your first day.
    If you don't have this information contact support`,
        loginPlaceholder: 'Insert your e-mail',
        passwordErrorPattern: 'Invalid Password',
        passwordPlaceholder: 'Insert your password',
        customFieldErrorPattern: 'Invalid value',
        customFieldPlaceholder: 'Please enter a value',
        rememberUser: 'Automatic login',
        rememberUserHint: 'You can disable this option in system configuration',
        submitLabel: 'Enter',
        submittedLabel: 'Loading...',
        forgotPassword: 'Forgot your Password?',
        highlightInfo: '',
        registerUrl: 'New register',
        titlePopover: 'Oops!',
        forgotYourPassword: 'Forgot your password?',
        ifYouTryHarder: 'If you try ',
        attempts: '{0} more time(s) ',
        yourUserWillBeBlocked: 'without success your user will be blocked and you will be left 24 hours without being able to access :(',
        createANewPasswordNow: 'Better create a new password now! You will be able to log into the system right away.',
        iForgotMyPassword: 'I forgot my password'
    })),
    es: (/** @type {?} */ ({
        title: 'Bienvenido',
        loginErrorPattern: 'Login inválido',
        loginHint: `Su usuario ha sido entregado para usted en su primer día.
    Si no tiene esta información, póngase en contacto con el soporte técnico`,
        loginPlaceholder: 'Inserte su e-mail',
        passwordErrorPattern: 'Contraseña inválida',
        passwordPlaceholder: 'Inserte su contraseña',
        customFieldErrorPattern: 'Valor no válido.',
        customFieldPlaceholder: 'Por favor introduzca un valor',
        rememberUser: 'Inicio de sesión automáticamente',
        rememberUserHint: 'Puede deshabilitar esta opción en el menú del sistema.',
        submitLabel: 'Entrar',
        submittedLabel: 'Cargando...',
        forgotPassword: 'Olvidaste tu contraseña?',
        highlightInfo: '',
        registerUrl: 'Nuevo registro',
        titlePopover: 'Opa!',
        forgotYourPassword: 'Olvidaste tu contraseña?',
        ifYouTryHarder: 'Si intenta más ',
        attempts: '{0} vez/veces ',
        yourUserWillBeBlocked: 'sin éxito su usuario sera bloqueado y usted vás permanecer 24 horas sin poder acceder a :(',
        createANewPasswordNow: '¡Mejor crear una nueva contraseña ahora! Usted podrá entrar en el sistema inmediatamente después.',
        iForgotMyPassword: 'Olvide mi contraseña'
    })),
    pt: (/** @type {?} */ ({
        title: 'Bem-vindo',
        loginErrorPattern: 'Login inválido',
        loginHint: `Seu usuário foi entregue a você no seu primeiro dia.
    Caso não tenha mais essa informação contacte o suporte`,
        loginPlaceholder: 'Insira seu e-mail',
        passwordErrorPattern: 'Senha inválida',
        passwordPlaceholder: 'Insira sua senha',
        customFieldErrorPattern: 'Valor inválido.',
        customFieldPlaceholder: 'Por favor insira um valor',
        rememberUser: 'Logar automaticamente',
        rememberUserHint: 'Você pode desabilitar essa opção no menu do sistema',
        submitLabel: 'Entrar',
        submittedLabel: 'Carregando...',
        forgotPassword: 'Esqueceu sua senha?',
        highlightInfo: '',
        registerUrl: 'Novo registro',
        titlePopover: 'Opa!',
        forgotYourPassword: 'Esqueceu sua senha?',
        ifYouTryHarder: 'Se tentar mais ',
        attempts: '{0} vez(es) ',
        yourUserWillBeBlocked: 'sem sucesso seu usuário será bloqueado e você fica 24 horas sem poder acessar :(',
        createANewPasswordNow: 'Melhor criar uma senha nova agora! Você vai poder entrar no sistema logo em seguida.',
        iForgotMyPassword: 'Esqueci minha senha'
    }))
};
/** @type {?} */
const thfPageLoginLiteralIn = {
    en: 'in',
    es: 'en',
    pt: 'em'
};
/** @type {?} */
const thfPageLoginLiteralTo = {
    en: 'to',
    es: 'al',
    pt: 'ao',
};
/**
 * \@description
 *
 * O componente `thf-page-login` é utilizado como template para tela de login.
 * Com ele é possível definirmos valores para usuário, senha e definir ações para recuperação de senha e gravação de dados do usuário.
 * Também é possível inserir uma imagem em conjunto com um texto de destaque.
 *
 *
 * A propriedade `t-authentication-url` automatiza a rotina do componente e simplifica o processo para autenticação do usuário, bastando
 * definir uma url para requisição da autenticação. A flexibilidade e praticidade podem chegar a um nível em que o desenvolvimento
 * da aplicação no *client side* é desprovida de qualquer código-fonte relacionado à rotina de login de usuário.
 * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
 * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
 *
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/\@totvs/thf-theme/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 * @abstract
 */
class ThfPageLoginBaseComponent {
    /**
     * @param {?} loginService
     * @param {?} router
     */
    constructor(loginService, router) {
        this.loginService = loginService;
        this.router = router;
        this.allLoginErrors = [];
        this.allPasswordErrors = [];
        this.containsCustomLiterals = false;
        this.customizedDefaultLiterals = {};
        this.showExceededAttemptsWarning = false;
        this._authenticationType = ThfPageLoginAuthenticationType.Basic;
        this._hideRememberUser = false;
        this._loading = false;
        this._loginErrors = [];
        this._passwordErrors = [];
        this.rememberUser = false;
        /**
         * Evento disparado quando o usuário alterar o input do campo login.
         *
         * Esse evento receberá como parâmetro uma variável do tipo `string` com o texto informado no campo.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `t-authentication-url`.
         */
        this.loginChange = new EventEmitter();
        /**
         * Evento disparado ao submeter o formulário de login (apertando `Enter` dentro dos campos ou pressionando o botão de confirmação).
         *
         * Esse evento receberá como parâmetro um objeto do tipo `ThfPageLogin` com os dados informados no formulário.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `t-url-recovery`.
         *
         * > Para mais detalhes consulte a documentação sobre a interface `ThfPageLogin` mais abaixo.
         */
        this.loginSubmit = new EventEmitter();
        /**
         * Evento disparado quando o usuário alterar o input do campo password.
         *
         * Esse evento receberá como parâmetro uma variável do tipo `string` com o texto informado no campo.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `t-authentication-url`.
         */
        this.passwordChange = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Ao informar um valor do tipo `string`, o mesmo será aplicado como a chave do campo customizado e utilizará
     * os valores padrões contidos na propriedade `literals` como `customFieldErrorPattern` e `customFieldPlaceholder`.
     *
     * Existe a possibilidade de informar um objeto que segue a definição da interface `ThfPageLoginCustomField`, onde
     * através dos parâmetros enviados pode gerar um `thf-input`, `thf-combo` especificamente para serviços
     * ou `thf-select` para valores fixos.
     *
     * Abaixo seguem os exemplos de cada tipo de campo.
     *
     * `thf-input`:
     *
     * ```
     * {
     *   property: 'domain',
     *   value: 'jv01',
     *   placeholder: 'Enter your domain',
     *   pattern: '[a-z]',
     *   errorPattern: 'Invalid value',
     * }
     * ```
     *
     * `thf-combo`:
     *
     * ```
     * {
     *   property: 'domain',
     *   value: 'jv01',
     *   placeholder: 'Enter your domain',
     *   url: 'https://thf.totvs.com.br/sample/api/comboOption/domains',
     *   fieldValue: 'nickname'
     * }
     * ```
     *
     * `thf-select`:
     *
     * ```
     * {
     *   property: 'domain',
     *   value: 'jv01',
     *   placeholder: 'Enter your domain',
     *   options: [{label: 'Domain 1', value: '1'}, {label: 'Domain 2', value: '2'}]
     * }
     * ```
     *
     * Caso o customField possua options, url e fieldValue preenchidos, será priorizado o thf-select
     * utilizando o options.
     *
     * @param {?} value
     * @return {?}
     */
    set customField(value) {
        if (value) {
            if (isTypeof(value, 'string')) {
                this.customFieldType = 'input';
                this._customField = value;
                this.customFieldObject = this.getDefaultCustomFieldObject(value);
                return;
            }
            if (isTypeof(value, 'object') && !Array.isArray(value) && value['property']) {
                this._customField = value;
                this.customFieldObject = (/** @type {?} */ (value));
                if (!this.customFieldObject.options && !this.customFieldObject.url) {
                    this.customFieldType = 'input';
                }
                else {
                    this.customFieldType = this.customFieldObject.options ? 'select' : 'combo';
                }
                return;
            }
        }
        this._customField = undefined;
        this.customFieldObject = undefined;
    }
    /**
     * @return {?}
     */
    get customField() {
        return this._customField;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Personaliza o e-mail que é exibido na mensagem de dica de login padrão para contato de suporte.
     * @param {?} value
     * @return {?}
     */
    set contactEmail(value) {
        /** @type {?} */
        const language = this.selectedLanguage || browserLanguage();
        this._contactEmail = value;
        this.setLoginHintLiteral(language, value);
    }
    /**
     * @return {?}
     */
    get contactEmail() {
        return this._contactEmail;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Valor customizado que sucede o título de boas-vindas.
     *
     * > Esta propriedade é sobreposta se `t-literals` contiver uma definição customizada para a literal `title`.
     *
     * > Veja mais sobre as literais na propriedade `t-literals`.
     *
     * @param {?} value
     * @return {?}
     */
    set productName(value) {
        /** @type {?} */
        const language = this.selectedLanguage || browserLanguage();
        this._productName = value;
        this.setTitleLiteral(language, value);
    }
    /**
     * @return {?}
     */
    get productName() {
        return this._productName;
    }
    /**
     * \@optional
     *
     * \@description
     * Adiciona uma `tag` abaixo do título que especifica o ambiente que o usuário está fazendo o login.
     *
     * > Essa propriedade limita o texto em 40 caracteres.
     * @param {?} environment
     * @return {?}
     */
    set environment(environment) {
        if (environment && environment.length > thfPageLoginContentMaxLength) {
            this._environment = environment.substring(0, thfPageLoginContentMaxLength);
        }
        else {
            this._environment = environment;
        }
    }
    /**
     * @return {?}
     */
    get environment() {
        return this._environment;
    }
    /**
     * \@optional
     *
     * \@description
     * Exibe um aviso de bloqueio de acordo com a quantidade restante de tentativas.
     * O aviso será exibido somente se a quantidade for maior que zero.
     *
     * > Caso tenha algum valor atribuído para o atributo `t-authentication-url` e o retorno da requisição estiver atribuindo valor
     * para o `t-exceeded-attempts-warning`, o valor considerado será o do retorno da requisição.
     *
     * \@default `0`
     * @param {?} value
     * @return {?}
     */
    set exceededAttemptsWarning(value) {
        this._exceededAttemptsWarning = convertToInt(value);
        this.showExceededAttemptsWarning = this.exceededAttemptsWarning > 0;
    }
    /**
     * @return {?}
     */
    get exceededAttemptsWarning() {
        return this._exceededAttemptsWarning;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Esconde a função "Lembrar usuário" do formulário de login.
     *
     * Quando essa propriedade é setada com `true` a propriedade `rememberUser` enviada no evento `t-login-submit` será sempre
     * `false`.
     *
     * > Veja a propriedade `t-literals` para customizar a literal `rememberUser`.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set hideRememberUser(value) {
        this._hideRememberUser = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        if (this._hideRememberUser) {
            this.rememberUser = false;
        }
    }
    /**
     * @return {?}
     */
    get hideRememberUser() {
        return this._hideRememberUser;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto com as literais usadas no `thf-page-login`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: ThfPageLoginLiterals = {
     *    title: 'Seja bem-vindo',
     *    loginErrorPattern: 'Login obrigatório',
     *    loginHint: 'Caso não possua usuário entre em contato com o suporte',
     *    loginLabel: 'Insira seu usuário',
     *    loginPlaceholder: 'Insira seu usuário de acesso',
     *    passwordErrorPattern: 'Senha obrigatória',
     *    passwordLabel: 'Insira sua senha',
     *    passwordPlaceholder: 'Insira sua senha de acesso'
     *    customFieldErrorPattern: 'Campo customizado inválido',
     *    customFieldPlaceholder: 'Por favor insira um valor',
     *    rememberUser: 'Lembrar usuário',
     *    rememberUserHint: 'Esta opção pode ser desabilitada nas configurações do sistema',
     *    submitLabel: 'Acessar sistema',
     *    forgotPassword: 'Esqueceu sua senha?'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: ThfPageLoginLiterals = {
     *    loginPlaceholder: 'Insira seu usuário de acesso',
     *    passwordPlaceholder: 'Insira sua senha de acesso',
     *    submitLabel: 'Acessar sistema'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <thf-page-login
     *   [t-literals]="customLiterals">
     * </thf-page-login>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
     *  > É também possível alternar o objeto padrão de literais através do seletor de idiomas localizado na parte inferior do template.
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        /** @type {?} */
        const language = this.selectedLanguage || browserLanguage();
        if (value) {
            this.getLiterals(language, value);
            this.containsCustomLiterals =
                !this.literals.title.includes(thfPageLoginLiteralsDefault[language].title) ||
                    !this.literals.loginHint.includes(thfPageLoginLiteralsDefault[language].loginHint);
        }
        else {
            this.containsCustomLiterals = false;
            this._literals = thfPageLoginLiteralsDefault[language];
        }
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || thfPageLoginLiteralsDefault[browserLanguage()];
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Habilita um estado de carregamento ao botão de *login*.
     *
     * > É necessário atribuir `true` à esta propriedade na função definida em `t-login-submit`.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set loading(value) {
        this._loading = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get loading() {
        return this._loading;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Valor do modelo do campo de login.
     *
     * @param {?} value
     * @return {?}
     */
    set login(value) {
        this._login = value;
        if (!this.authenticationUrl) {
            this.loginChange.emit(this._login);
        }
    }
    /**
     * @return {?}
     */
    get login() {
        return this._login;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Atributo que recebe uma lista de erros e exibe abaixo do campo de login.
     * @param {?} value
     * @return {?}
     */
    set loginErrors(value) {
        this._loginErrors = value || [];
        this.setLoginErrors(this._loginErrors);
    }
    /**
     * @return {?}
     */
    get loginErrors() {
        return this._loginErrors;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Atributo que recebe uma lista de erros e exibe abaixo do campo de password.
     * @param {?} value
     * @return {?}
     */
    set passwordErrors(value) {
        this._passwordErrors = value || [];
        this.setPasswordErrors(this._passwordErrors);
    }
    /**
     * @return {?}
     */
    get passwordErrors() {
        return this._passwordErrors;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Exibe um link abaixo do formulário de login para que os usuários da aplicação façam a recuperação dos dados de autenticação.
     *
     * A propriedade aceita os seguintes tipos:
     *
     * - **String**: informe uma url externa ou uma rota válida;
     * - **Function**: pode-se customizar a ação. Para esta possilidade basta atribuir:
     * ```
     * <thf-page-login>
     *   [recovery]="this.funcaominha.bind(this)";
     * </thf-page-login>
     * ```
     *
     * - **ThfPageLoginRecovery**: cria-se vínculo automático com o template **thf-modal-password-recovery**.
     *   O objeto deve conter a **url** para requisição dos recursos e pode-se definir o **tipo** de modal para recuperação de senha,
     *   **email** para contato e **máscara** do campo de telefone.
     * @param {?} value
     * @return {?}
     */
    set recovery(value) {
        this._recovery = value;
    }
    /**
     * @return {?}
     */
    get recovery() {
        return this._recovery;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Caso a aplicação tenha um link para novos cadastros, informe uma url externa ou uma rota válida, dessa
     * forma será exibido um link abaixo do formulário de login para os usuários da aplicação.
     *
     * Exemplos de valores válidos:
     * - **local**: `/home`
     * - **url externa**: `https://thf.totvs.com.br`
     *
     * > Veja a propriedade `t-literals` para customizar a literal `registerUrl`.
     * @param {?} value
     * @return {?}
     */
    set registerUrl(value) {
        this._registerUrl = isTypeof(value, 'string') ? value : undefined;
    }
    /**
     * @return {?}
     */
    get registerUrl() {
        return this._registerUrl;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Atributo que recebe o tipo de esquema da autenticação, sendo suportados apenas os valores `Basic` e `Bearer`.
     *
     * > Caso o tipo definido seja `Basic`, o componente fará uma requisição `POST` contendo:
     *
     * ```
     * headers {
     *  Authorization: Basic base64(login:password)
     * }
     *
     * body {
     *  rememberUser: rememberUser
     * }
     * ```
     *
     * > Caso o tipo definido seja `Bearer`, o componente fará uma requisição `POST` contendo:
     *
     * ```
     * body {
     *  login: login,
     *  password: base64(password)
     *  rememberUser: rememberUser
     * }
     * ```
     *
     * \@default `ThfPageLoginAuthenticationType.Basic`
     * @param {?} value
     * @return {?}
     */
    set authenticationType(value) {
        this._authenticationType =
            ((/** @type {?} */ (Object))).values(ThfPageLoginAuthenticationType).includes(value) ? value : ThfPageLoginAuthenticationType.Basic;
    }
    /**
     * @return {?}
     */
    get authenticationType() {
        return this._authenticationType;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Endpoint usado pelo template para requisição do recurso. Quando preenchido, o método `t-login-submit` será ignorado e o
     * componente adquirirá automatização para o processo de autenticação.
     *
     * ### Processos
     * Ao digitar um valor válido no campo de login/password e pressionar **Enter**, o componente fará uma requisição `POST`
     * na url especificada nesta propriedade passando o objeto contendo o valor definido pelo usuário:
     *
     * ```
     * headers {
     *  Authorization: Basic base64(login:password)
     * }
     *
     * body {
     *  rememberUser: rememberUser
     * }
     * ```
     *
     * Em caso de **sucesso**, o objeto de retorno é armazenado no `sessionStorage` e o usuário é redirecionado para a página inicial da
     * aplicação `/`.
     *
     * ```
     * 200:
     *  {
     *    user: user
     *  }
     * ```
     *
     * Em caso de **erro** na autenticação, espera-se o seguinte retorno:
     *
     * ```
     * 400/401
     *  {
     *    code: 400/401,
     *    message: message,
     *    detailedMessage: detailedMessage,
     *    helpUrl?: helpUrl
     *  }
     * ```
     *
     * > Pode-se atribuir uma quantidade máxima de tentativas restantes (maxAttemptsRemaining) para o atributo `t-exceeded-attempts-warning`,
     * assim como os avisos relacionados aos campos login e password (loginWarnings, passwordWarnings) para os atributos `t-login-errors` e
     * `t-password-errors` conforme retorno abaixo:
     *
     * ```
     * 400
     *  {
     *    code: 400/401,
     *    message: message,
     *    detailedMessage: detailedMessage,
     *    helpUrl?: helpUrl,
     *    maxAttemptsRemaining?: maxAttemptsRemaining,
     *    loginWarnings?: [loginWarnings],
     *    passwordWarnings?: [passwordWarnings],
     *  }
     * ```
     *
     * > Caso o valor atribuído para `t-exceeded-attempts-warning` seja igual a 0(zero), poderá ser passado um valor para o
     * atributo `t-blocked-url` e o usuário será redirecionado para uma tela de bloqueio.
     *
     * *Processo finalizado.*
     *
     * _______________
     *
     * #### Praticidade
     * As informações do serviço de autenticação também podem ser transmitidas diretamente pelas configuraçãos de rota e, desta maneira,
     * dispensa-se qualquer menção e/ou importação do componente `thf-page-login` no restante da aplicação. O exemplo abaixo exemplifica
     * a forma dinâmica com a qual o template de tela de login pode ser gerado ao navegar para rota `/login`, e também como ele se comunica
     * com o serviço para efetuação do processo de autenticação do usuário e solicitação de nova senha.
     * Basta definir nas configurações de rota:
     *
     *
     * ```
     *   import { ThfPageLoginComponent, ThfPageLoginAthenticationType } from '\@totvs/thf-templates';
     *
     *   ...
     *   const routes: Routes = [
     *     {
     *       path: 'login', component: ThfPageLoginComponent, data: {
     *         serviceApi: 'https://thf.totvs.com.br/sample/api/users/authentication',
     *         environment: 'development',
     *         recovery: {
     *           url: 'https://thf.totvs.com.br/sample/api/users',
     *           type: ThfModalPasswordRecoveryType.All,
     *           contactMail: 'dev.totvs\@totvs.com',
     *           phoneMask: '9-999-999-9999'
     *         },
     *         registerUrl: '/new-password',
     *         authenticationType: ThfPageLoginAthenticationType.Basic
     *       }
     *     }
     *     ...
     *   ];
     *
     * \@NgModule({
     *     imports: [RouterModule.forRoot(routes)],
     *     exports: [RouterModule]
     *   })
     *   export class AppRoutingModule { }
     * ```
     *
     *
     * O metadado `serviceApi` deve ser a **url** para requisição dos recursos de autenticação, o `environment` alimenta a propriedade
     * `t-environment`, `recovery` é a interface `ThfPageLoginRecovery` responsável pelas especificações contidas na modal de recuperação de
     * senha, `registerUrl` alimenta a propriedade `t-register-url` e `authenticationType` que define a propriedade `t-authentication-type`.
     *
     * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.
     *
     * @param {?} value
     * @return {?}
     */
    set authenticationUrl(value) {
        this._authenticationUrl = isTypeof(value, 'string') ? value : undefined;
    }
    /**
     * @return {?}
     */
    get authenticationUrl() {
        return this._authenticationUrl;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Caso o valor atribuído para `t-exceeded-attempts-warning` seja igual a 0(zero) e a aplicação tenha um link de bloqueio de usuário,
     * informe uma url externa ou uma rota válida, dessa forma em caso de bloqueio o usuário será redirecionado.
     * @param {?} value
     * @return {?}
     */
    set blockedUrl(value) {
        this._blockedUrl = isTypeof(value, 'string') ? value : undefined;
    }
    /**
     * @return {?}
     */
    get blockedUrl() {
        return this._blockedUrl;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.loginSubscription) {
            this.loginSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    closePopover() {
        this.showExceededAttemptsWarning = false;
    }
    /**
     * @param {?=} language
     * @param {?=} value
     * @return {?}
     */
    getLiterals(language, value) {
        language = language || browserLanguage();
        if (value instanceof Object && !(value instanceof Array)) {
            this.customizedDefaultLiterals = Object.assign({}, this.customizedDefaultLiterals, value);
            this._literals = Object.assign({}, thfPageLoginLiteralsDefault[thfLocaleDefault], thfPageLoginLiteralsDefault[language], this.customizedDefaultLiterals, value);
        }
        else {
            this.containsCustomLiterals = false;
            this._literals = thfPageLoginLiteralsDefault[language];
        }
    }
    /**
     * @return {?}
     */
    onLoginSubmit() {
        /** @type {?} */
        const loginForm = {
            login: this.login,
            password: this.password,
            rememberUser: this.rememberUser
        };
        if (this.customField) {
            loginForm[this.customFieldObject.property] = this.customFieldObject.value;
        }
        if (this.authenticationUrl) {
            this.loginSubscription =
                this.loginService.onLogin(this.authenticationUrl, this.authenticationType, loginForm)
                    .subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    this.setValuesToProperties();
                    sessionStorage.setItem('THF_USER_LOGIN', JSON.stringify(data));
                    this.openInternalLink('/');
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    if (error.error.code === '400' || error.error.code === '401') {
                        this.setValuesToProperties(error);
                        this.redirectBlockedUrl(this.exceededAttemptsWarning, this.blockedUrl);
                    }
                }));
        }
        else {
            this.loginSubmit.emit(loginForm);
            this.showExceededAttemptsWarning = this.exceededAttemptsWarning > 0;
        }
    }
    /**
     * @param {?} language
     * @param {?} value
     * @return {?}
     */
    setLoginHintLiteral(language, value) {
        /** @type {?} */
        const defaultLoginHintLiteral = thfPageLoginLiteralsDefault[language].loginHint;
        /** @type {?} */
        const prepositionLiteral = thfPageLoginLiteralIn[language];
        if (value) {
            this.concatenateLiteral(value, 'loginHint', defaultLoginHintLiteral, prepositionLiteral);
        }
        else if (!value) {
            this.literals = { loginHint: defaultLoginHintLiteral };
        }
    }
    /**
     * @param {?} language
     * @param {?} value
     * @return {?}
     */
    setTitleLiteral(language, value) {
        /** @type {?} */
        const defaultTitleLiteral = thfPageLoginLiteralsDefault[language].title;
        /** @type {?} */
        const prepositionLiteral = thfPageLoginLiteralTo[language];
        if (value) {
            this.concatenateLiteral(value, 'title', defaultTitleLiteral, prepositionLiteral);
        }
        else if (!value && this.literals.title.includes(defaultTitleLiteral)) {
            this.literals = { title: defaultTitleLiteral };
        }
    }
    /**
     * @private
     * @param {?} defaultLiteral
     * @param {?} prefixLiteral
     * @param {?} value
     * @return {?}
     */
    concatenate(defaultLiteral, prefixLiteral, value) {
        return `${defaultLiteral} ${prefixLiteral} ${value}`;
    }
    /**
     * @private
     * @param {?} value
     * @param {?} literal
     * @param {?} defaultLiteral
     * @param {?} prepositionLiteral
     * @return {?}
     */
    concatenateLiteral(value, literal, defaultLiteral, prepositionLiteral) {
        if (value && this.literals[literal].includes(defaultLiteral) || this.literals[literal].includes(value)) {
            this.literals = {
                [literal]: this.concatenate(defaultLiteral, prepositionLiteral, value)
            };
        }
    }
    /**
     * @private
     * @param {?} property
     * @return {?}
     */
    getDefaultCustomFieldObject(property) {
        return { property };
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    openExternalLink(url) {
        window.open(url, '_blank');
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    openInternalLink(url) {
        this.router.navigate([url]);
    }
    /**
     * @private
     * @param {?} attempts
     * @param {?} blockedUrl
     * @return {?}
     */
    redirectBlockedUrl(attempts, blockedUrl) {
        if (attempts === 0 && blockedUrl) {
            this.showExceededAttemptsWarning = false;
            isExternalLink(blockedUrl) ? this.openExternalLink(blockedUrl) : this.openInternalLink(blockedUrl);
        }
    }
    /**
     * @private
     * @param {?=} result
     * @return {?}
     */
    setValuesToProperties(result) {
        if (result) {
            this.exceededAttemptsWarning = result.error.maxAttemptsRemaining;
            this.loginErrors = result.error.loginWarnings;
            this.passwordErrors = result.error.passwordWarnings;
            this.blockedUrl = result.error.blockedUrl;
        }
        else {
            this.exceededAttemptsWarning = 0;
            this.loginErrors = [];
            this.passwordErrors = [];
            this.blockedUrl = '';
        }
    }
}
ThfPageLoginBaseComponent.propDecorators = {
    customField: [{ type: Input, args: ['t-custom-field',] }],
    background: [{ type: Input, args: ['t-background',] }],
    contactEmail: [{ type: Input, args: ['t-contact-email',] }],
    productName: [{ type: Input, args: ['t-product-name',] }],
    environment: [{ type: Input, args: ['t-environment',] }],
    exceededAttemptsWarning: [{ type: Input, args: ['t-exceeded-attempts-warning',] }],
    hideRememberUser: [{ type: Input, args: ['t-hide-remember-user',] }],
    literals: [{ type: Input, args: ['t-literals',] }],
    loading: [{ type: Input, args: ['t-loading',] }],
    login: [{ type: Input, args: ['t-login',] }],
    logo: [{ type: Input, args: ['t-logo',] }],
    loginPattern: [{ type: Input, args: ['t-login-pattern',] }],
    loginErrors: [{ type: Input, args: ['t-login-errors',] }],
    passwordErrors: [{ type: Input, args: ['t-password-errors',] }],
    passwordPattern: [{ type: Input, args: ['t-password-pattern',] }],
    recovery: [{ type: Input, args: ['t-recovery',] }],
    registerUrl: [{ type: Input, args: ['t-register-url',] }],
    secondaryLogo: [{ type: Input, args: ['t-secondary-logo',] }],
    authenticationType: [{ type: Input, args: ['t-authentication-type',] }],
    authenticationUrl: [{ type: Input, args: ['t-authentication-url',] }],
    blockedUrl: [{ type: Input, args: ['t-blocked-url',] }],
    loginChange: [{ type: Output, args: ['t-login-change',] }],
    loginSubmit: [{ type: Output, args: ['t-login-submit',] }],
    passwordChange: [{ type: Output, args: ['t-password-change',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfPageLoginService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?} type
     * @param {?} loginForm
     * @return {?}
     */
    onLogin(url, type, loginForm) {
        if (type === ThfPageLoginAuthenticationType.Bearer) {
            loginForm.password = btoa(loginForm.password);
            return this.http.post(url, loginForm);
        }
        else {
            /** @type {?} */
            const user = `(${loginForm.login}:${loginForm.password})`;
            /** @type {?} */
            const headers = new HttpHeaders({
                'Authorization': `${type} ` + btoa(user)
            });
            delete loginForm.login;
            delete loginForm.password;
            return this.http.post(url, loginForm, { headers });
        }
    }
}
ThfPageLoginService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ThfPageLoginService.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends ThfPageLoginBaseComponent
 *
 * \@example
 *
 * <example name="thf-page-login-basic" title="Totvs Page Login Basic">
 *  <file name="sample-thf-page-login-basic/sample-thf-page-login-basic.component.html"> </file>
 *  <file name="sample-thf-page-login-basic/sample-thf-page-login-basic.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-login-labs" title="Totvs Page Login Labs">
 *  <file name="sample-thf-page-login-labs/sample-thf-page-login-labs.component.html"> </file>
 *  <file name="sample-thf-page-login-labs/sample-thf-page-login-labs.component.ts"> </file>
 * </example>
 *
 * <example name="thf-page-login-human-resources" title="Totvs Page Login - Human Resources">
 *  <file name="sample-thf-page-login-human-resources/sample-thf-page-login-human-resources.component.html"> </file>
 *  <file name="sample-thf-page-login-human-resources/sample-thf-page-login-human-resources.component.ts"> </file>
 *  <file name="sample-thf-page-login-human-resources/sample-thf-page-login-human-resources.module.ts"> </file>
 * </example>
 *
 * <example name="thf-page-login-automatic-service" title="Totvs Page Login - Automatic Service">
 *  <file name="sample-thf-page-login-automatic-service/sample-thf-page-login-automatic-service.component.html"> </file>
 *  <file name="sample-thf-page-login-automatic-service/sample-thf-page-login-automatic-service.component.ts"> </file>
 * </example>
 */
class ThfPageLoginComponent extends ThfPageLoginBaseComponent {
    /**
     * @param {?} changeDetector
     * @param {?} activatedRoute
     * @param {?} thfComponentInjector
     * @param {?} differs
     * @param {?} loginService
     * @param {?} router
     */
    constructor(changeDetector, activatedRoute, thfComponentInjector, differs, loginService, router) {
        super(loginService, router);
        this.changeDetector = changeDetector;
        this.activatedRoute = activatedRoute;
        this.thfComponentInjector = thfComponentInjector;
        this.componentRef = null;
        this.customPasswordError = { custom: false };
        this.differ = differs.find([]).create(null);
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.differ) {
            this.validateArrayChanges(this.differ, [
                { array: this.loginErrors, callback: this.generateLoginError.bind(this) },
                { array: this.passwordErrors, callback: this.generatePasswordError.bind(this) }
            ]);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checkingForRouteMetadata(this.activatedRoute.snapshot.data);
    }
    /**
     * @return {?}
     */
    changeLoginModel() {
        if (this.authenticationUrl) {
            this.loginErrors = [];
        }
        else {
            this.setLoginErrors(this.loginErrors);
            this.loginChange.emit(this.login);
        }
    }
    /**
     * @return {?}
     */
    changePasswordModel() {
        if (this.authenticationUrl) {
            this.passwordErrors = [];
        }
        else {
            this.setPasswordErrors(this.passwordErrors);
            this.passwordChange.emit(this.password);
        }
    }
    /**
     * @private
     * @param {?} object
     * @param {?} property
     * @return {?}
     */
    checkingForMetadataProperty(object, property) {
        if (Object.prototype.hasOwnProperty.call(object, property)) {
            return object[property];
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    checkingForRouteMetadata(data) {
        if (Object.keys(data).length !== 0) {
            this.authenticationUrl = this.checkingForMetadataProperty(data, 'serviceApi') || this.authenticationUrl;
            this.authenticationType = this.checkingForMetadataProperty(data, 'authenticationType') || this.authenticationType;
            this.environment = this.checkingForMetadataProperty(data, 'environment') || this.environment;
            this.recovery = this.checkingForMetadataProperty(data, 'recovery') || this.recovery;
            this.registerUrl = this.checkingForMetadataProperty(data, 'registerUrl') || this.registerUrl;
        }
    }
    /**
     * @private
     * @param {?} thfPageLoginRecovery
     * @return {?}
     */
    createModalPasswordRecoveryComponent(thfPageLoginRecovery) {
        if (this.componentRef) {
            this.thfComponentInjector.destroyComponentInApplication(this.componentRef);
        }
        this.componentRef = this.thfComponentInjector.createComponentInApplication(ThfModalPasswordRecoveryComponent);
        this.componentRef.instance.urlRecovery = thfPageLoginRecovery.url;
        this.componentRef.instance.contactEmail = thfPageLoginRecovery.contactMail;
        this.componentRef.instance.phoneMask = thfPageLoginRecovery.phoneMask;
        this.componentRef.instance.type = thfPageLoginRecovery.type || ThfModalPasswordRecoveryType.Email;
        this.componentRef.changeDetectorRef.detectChanges();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.componentRef.instance.open();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    generateLoginError() {
        if (this.loginErrors && this.loginErrors.length) {
            this.setLoginErrors(this.loginErrors);
        }
        else {
            /** @type {?} */
            const control = this.loginForm.form.controls['login'];
            if (control) {
                this.resetControl(control);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    generatePasswordError() {
        if (this.passwordErrors && this.passwordErrors.length) {
            this.setPasswordErrors(this.passwordErrors);
        }
        else {
            /** @type {?} */
            const control = this.loginForm.form.controls['password'];
            if (control) {
                this.resetControl(control);
            }
        }
    }
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    resetControl(control) {
        control.markAsPristine();
        control.markAsUntouched();
        control.updateValueAndValidity();
    }
    /**
     * @private
     * @param {?} allErrors
     * @param {?} control
     * @param {?} errors
     * @param {?} patternError
     * @return {?}
     */
    setControlErrors(allErrors, control, errors, patternError) {
        if (control) {
            this[allErrors] = control.hasError('pattern') ? [...errors, ...[patternError]] : [...errors];
            if (errors && errors.length && (control.valid || control.pristine)) {
                control.markAsTouched();
                control.markAsDirty();
                control.setErrors(this.customPasswordError);
            }
        }
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    setUrlRedirect(url) {
        isExternalLink(url) ? window.open(url, '_blank') : this.router.navigate([url]);
    }
    /**
     * @private
     * @param {?} differ
     * @param {?} array
     * @return {?}
     */
    validateArrayChanges(differ, array) {
        array.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            const changes = differ.diff(element.array);
            if (changes) {
                element.callback();
                this.changeDetector.detectChanges();
            }
        }));
    }
    /**
     * @protected
     * @param {?} recovery
     * @return {?}
     */
    openUrl(recovery) {
        switch (typeof recovery) {
            case 'string': {
                this.setUrlRedirect(recovery);
                break;
            }
            case 'function': {
                recovery();
                break;
            }
            case 'object': {
                this.createModalPasswordRecoveryComponent(recovery);
                break;
            }
        }
    }
    /**
     * @protected
     * @param {?} errors
     * @return {?}
     */
    setLoginErrors(errors) {
        /** @type {?} */
        const control = this.loginForm.form.controls['login'];
        this.setControlErrors('allLoginErrors', control, errors, this.literals.loginErrorPattern);
    }
    /**
     * @protected
     * @param {?} errors
     * @return {?}
     */
    setPasswordErrors(errors) {
        /** @type {?} */
        const control = this.loginForm.form.controls['password'];
        this.setControlErrors('allPasswordErrors', control, errors, this.literals.passwordErrorPattern);
    }
    /**
     * @param {?} language
     * @return {?}
     */
    onSelectedLanguage(language) {
        this.selectedLanguage = language;
        this.getLiterals(language, this.containsCustomLiterals ? this.customizedDefaultLiterals : undefined);
        this.setTitleLiteral(language, this.productName);
        this.setLoginHintLiteral(language, this.contactEmail);
    }
}
ThfPageLoginComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-login',
                template: "<thf-page-background #pageLogin\n  t-show-select-language\n  [t-background]=\"background\"\n  [t-highlight-info]=\"literals.highlightInfo\"\n  [t-logo]=\"logo\"\n  [t-secondary-logo]=\"secondaryLogo\"\n  (t-selected-language)=\"onSelectedLanguage($event)\">\n\n  <div class=\"thf-page-login-header thf-mb-2 thf-mb-sm-1 thf-pt-sm-1\">\n    <div class=\"thf-page-login-header-title thf-mb-sm-1\">{{ literals.title }}</div>\n    <thf-tag\n      *ngIf=\"environment\"\n      t-type=\"warning\"\n      [t-value]=\"environment\">\n    </thf-tag>\n  </div>\n\n  <form #loginForm=\"ngForm\" class=\"thf-page-login-form\">\n    <div class=\"thf-row\">\n      <div class=\"thf-lg-12\">\n        <div class=\"thf-page-login-hint thf-page-login-info-container\">\n          <thf-login\n            class=\"thf-page-login-info-field\"\n            name=\"login\"\n            [(ngModel)]=\"login\"\n            t-focus\n            t-required\n            [t-label]=\"literals.loginLabel\"\n            [t-pattern]=\"loginPattern\"\n            [t-placeholder]=\"literals.loginPlaceholder\"\n            (click)=\"closePopover()\"\n            (keyup.enter)=\"loginForm.valid && onLoginSubmit()\"\n            (t-change-model)=\"changeLoginModel()\">\n          </thf-login>\n\n          <div class=\"thf-page-login-info-icon-container\">\n            <span\n              class=\"thf-icon thf-field-icon thf-icon-info\"\n              t-tooltip-position=\"right\"\n              [t-tooltip]=\"literals.loginHint\">\n            </span>\n          </div>\n        </div>\n\n        <div class=\"thf-field-container-bottom thf-field-container-error-container\">\n          <div *ngFor=\"let error of allLoginErrors\u001C\" class=\"thf-field-container-bottom-text-error thf-field-container-error-item\">\n            <span class=\"thf-icon thf-icon-exclamation\"></span>\n            <span class=\"thf-field-container-error-text\">{{error}}</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"thf-lg-12\">\n        <div class=\"thf-page-login-password-container\">\n          <thf-password\n            class=\"thf-page-login-field-size thf-page-login-password-item\"\n            name=\"password\"\n            [(ngModel)]=\"password\"\n            t-required\n            [t-label]=\"literals.passwordLabel\"\n            [t-pattern]=\"passwordPattern\"\n            [t-placeholder]=\"literals.passwordPlaceholder\"\n            (click)=\"closePopover()\"\n            (keyup.enter)=\"loginForm.valid && onLoginSubmit()\"\n            (t-change-model)=\"changePasswordModel()\">\n          </thf-password>\n          <div class=\"thf-page-login-password-item thf-page-login-password-popover-container\">\n            <thf-page-login-popover *ngIf=\"showExceededAttemptsWarning && exceededAttemptsWarning\"\n              [t-recovery]=\"recovery\"\n              [t-remaining-attempts]=\"exceededAttemptsWarning\"\n              [t-selected-language]=\"selectedLanguage\"\n              (t-forgot-password) = \"openUrl($event)\">\n            </thf-page-login-popover>\n          </div>\n        </div>\n        <div class=\"thf-field-container-bottom thf-field-container-error-container\">\n          <div *ngFor=\"let error of allPasswordErrors\" class=\"thf-field-container-bottom-text-error thf-field-container-error-item\">\n            <span class=\"thf-icon thf-icon-exclamation\"></span>\n            <span class=\"thf-field-container-error-text\">{{error}}</span>\n          </div>\n        </div>\n      </div>\n\n      <thf-input *ngIf=\"customField && customFieldType === 'input'\"\n        class=\"thf-page-login-field-size thf-lg-12\"\n        name=\"customFieldInput\"\n        [(ngModel)]=\"customFieldObject.value\"\n        t-required\n        [t-error-pattern]=\"customFieldObject.errorPattern || literals.customFieldErrorPattern\"\n        [t-pattern]=\"customFieldObject.pattern\"\n        [t-placeholder]=\"customFieldObject.placeholder || literals.customFieldPlaceholder\"\n        (keyup.enter)=\"loginForm.valid && onLoginSubmit()\">\n      </thf-input>\n\n      <thf-combo *ngIf=\"customField && customFieldType === 'combo'\"\n        class=\"thf-page-login-field-size thf-lg-12\"\n        name=\"customFieldCombo\"\n        [(ngModel)]=\"customFieldObject.value\"\n        t-required\n        [t-field-value]=\"customFieldObject.fieldValue\"\n        [t-filter-service]=\"customFieldObject.url\"\n        [t-placeholder]=\"customFieldObject.placeholder || literals.customFieldPlaceholder\">\n      </thf-combo>\n\n      <thf-select *ngIf=\"customField && customFieldType === 'select'\"\n        class=\"thf-page-login-field-size thf-lg-12\"\n        name=\"customFieldSelect\"\n        [(ngModel)]=\"customFieldObject.value\"\n        t-required\n        [t-placeholder]=\"customFieldObject.placeholder || literals.customFieldPlaceholder\"\n        [t-options]=\"customFieldObject.options\">\n      </thf-select>\n\n      <div class=\"thf-lg-12\">\n        <div *ngIf=\"!hideRememberUser\" class=\"thf-page-login-hint thf-page-login-info-container\">\n          <thf-switch\n            class=\"thf-page-login-info-field thf-lg-7 thf-offset-lg-5 thf-offset-xl-5\"\n            name=\"rememberUser\"\n            [(ngModel)]=\"rememberUser\"\n            t-label-position=\"1\"\n            [t-label-off]=\"literals.rememberUser\"\n            [t-label-on]=\"literals.rememberUser\"\n            (keyup.enter)=\"loginForm.valid && onLoginSubmit()\">\n          </thf-switch>\n\n          <div class=\"thf-page-login-info-icon-container thf-page-login-info-icon-remember-user\">\n            <span\n              class=\"thf-icon thf-field-icon thf-icon-info\"\n              t-tooltip-position=\"right\"\n              [t-tooltip]=\"literals.rememberUserHint\">\n            </span>\n          </div>\n        </div>\n      </div>\n\n\n      <thf-button\n        class=\"thf-lg-12 thf-page-login-button thf-page-login-field-size\"\n        t-type=\"primary\"\n        [t-disabled]=\"loginForm.invalid\"\n        [t-label]=\"loading ? literals.submittedLabel : literals.submitLabel\"\n        [t-loading]=\"loading\"\n        (t-click)=\"onLoginSubmit()\">\n      </thf-button>\n\n      <div *ngIf=\"recovery\"\n        class=\"thf-page-login-recovery-link\">\n        <a class=\"thf-font-text-large-bold\" (click)=\"openUrl(recovery)\">{{ literals.forgotPassword }}</a>\n      </div>\n\n      <div *ngIf=\"registerUrl\"\n        class=\"thf-page-login-register-link\">\n        <a class=\"thf-font-text-large-bold\" (click)=\"openUrl(registerUrl)\">{{ literals.registerUrl }}</a>\n      </div>\n    </div>\n  </form>\n</thf-page-background>\n"
            }] }
];
/** @nocollapse */
ThfPageLoginComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ActivatedRoute },
    { type: ThfComponentInjectorService },
    { type: IterableDiffers },
    { type: ThfPageLoginService },
    { type: Router }
];
ThfPageLoginComponent.propDecorators = {
    loginForm: [{ type: ViewChild, args: ['loginForm', { read: NgForm, static: true },] }],
    pageLogin: [{ type: ViewChild, args: ['pageLogin', { read: ViewContainerRef, static: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para definição da mensagem de aviso de bloqueio do `thf-page-login`.
 */
class ThfPageLoginPopoverComponent {
    /**
     * @param {?} changeDetector
     */
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        /**
         * se 't-recovery' for do tipo Function ou ThfPageLoginRecovery, emite para o método 'openUrl' do componente 'thf-page-login'
         */
        this.forgotPassword = new EventEmitter();
    }
    /**
     * exibe o link de 'esqueci minha senha' e verifica se o valor é um link interno ou externo
     * @param {?} value
     * @return {?}
     */
    set recovery(value) {
        this._recovery = value;
        if (isTypeof(value, 'string')) {
            this.recoveryType = isExternalLink(value) ? 'externalLink' : 'internalLink';
        }
    }
    /**
     * @return {?}
     */
    get recovery() {
        return this._recovery;
    }
    /**
     * define se a mensagem deverá ser exibida caso seja maior que 0(zero)
     * @param {?} value
     * @return {?}
     */
    set remainingAttempts(value) {
        this._remainingAttempts = value;
        this.getLiterals(this.selectedLanguage);
    }
    /**
     * @return {?}
     */
    get remainingAttempts() {
        return this._remainingAttempts;
    }
    /**
     * define o idioma da mensagem conforme selecionado no 'thf-page-login'
     * @param {?} value
     * @return {?}
     */
    set selectedLanguage(value) {
        this._selectedLanguage = value;
        this.getLiterals(value);
    }
    /**
     * @return {?}
     */
    get selectedLanguage() {
        return this._selectedLanguage;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getLiterals(this.selectedLanguage);
    }
    /**
     * @param {?} recovery
     * @return {?}
     */
    onForgotPasswordClick(recovery) {
        this.forgotPassword.emit(recovery);
    }
    /**
     * @private
     * @param {?=} language
     * @return {?}
     */
    getLiterals(language) {
        language = language || browserLanguage();
        this.literalParams = this.remainingAttempts;
        this.literals = Object.assign({}, thfPageLoginLiteralsDefault[thfLocaleDefault], thfPageLoginLiteralsDefault[language]);
        this.changeDetector.detectChanges();
    }
}
ThfPageLoginPopoverComponent.decorators = [
    { type: Component, args: [{
                selector: 'thf-page-login-popover',
                template: "<div class=\"thf-page-login-popover-container\">\n  <div class=\"thf-page-login-popover\">\n    <div class=\"thf-page-login-popover-arrow\"></div>\n    <div class=\"thf-page-login-popover-content\">\n      <p class=\"thf-font-text-bold thf-page-login-popover-title\">\n        {{ literals?.titlePopover }}\n      </p>\n      <p class=\"thf-font-text\">\n        {{ literals?.forgotYourPassword }}\n      </p>\n      <p class=\"thf-font-text\">\n        {{ literals?.ifYouTryHarder }}\n        <span class=\"thf-font-text-bold thf-page-login-popover-attempts\">\n          {{ literals?.attempts | thfI18n:literalParams }}\n        </span>{{ literals?.yourUserWillBeBlocked }}\n      </p>\n      <br>\n      <p class=\"thf-font-text\">\n        {{ literals?.createANewPasswordNow }}\n      </p>\n      <div *ngIf=\"recovery\" class=\"thf-font-text-bold thf-mt-1 thf-page-login-popover-link-container\">\n        <a *ngIf=\"recoveryType === 'internalLink'\"\n          class=\"thf-page-login-popover-link\"\n          [routerLink]=\"recovery\">\n          {{ literals?.iForgotMyPassword }}\n        </a>\n        <a *ngIf=\"recoveryType === 'externalLink'\"\n          class=\"thf-page-login-popover-link\"\n          [href]=\"recovery\"\n          target=\"_blank\">\n          {{ literals?.iForgotMyPassword }}\n        </a>\n        <a *ngIf=\"!recoveryType\"\n          class=\"thf-page-login-popover-link\"\n          (click)=\"onForgotPasswordClick(recovery)\">\n          {{ literals?.iForgotMyPassword }}\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
ThfPageLoginPopoverComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
ThfPageLoginPopoverComponent.propDecorators = {
    recovery: [{ type: Input, args: ['t-recovery',] }],
    remainingAttempts: [{ type: Input, args: ['t-remaining-attempts',] }],
    selectedLanguage: [{ type: Input, args: ['t-selected-language',] }],
    forgotPassword: [{ type: Output, args: ['t-forgot-password',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do thf-page-login.
 */
class ThfPageLoginModule {
}
ThfPageLoginModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    ThfPageBackgroundModule,
                    ThfModule
                ],
                declarations: [
                    ThfPageLoginComponent,
                    ThfPageLoginPopoverComponent
                ],
                entryComponents: [
                    ThfModalPasswordRecoveryComponent
                ],
                exports: [
                    ThfPageLoginComponent
                ],
                providers: [ThfPageLoginService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfComponentsModule {
}
ThfComponentsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    ThfModalPasswordRecoveryModule,
                    ThfPageBackgroundModule,
                    ThfPageBlockedUserModule,
                    ThfPageChangePasswordModule,
                    ThfPageDynamicDetailModule,
                    ThfPageDynamicEditModule,
                    ThfPageDynamicSearchModule,
                    ThfPageDynamicTableModule,
                    ThfPageJobSchedulerModule,
                    ThfPageLoginModule
                ],
                exports: [
                    ThfModalPasswordRecoveryModule,
                    ThfPageBackgroundModule,
                    ThfPageBlockedUserModule,
                    ThfPageChangePasswordModule,
                    ThfPageDynamicDetailModule,
                    ThfPageDynamicEditModule,
                    ThfPageDynamicSearchModule,
                    ThfPageDynamicTableModule,
                    ThfPageJobSchedulerModule,
                    ThfPageLoginModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThfTemplatesModule {
}
ThfTemplatesModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    ThfComponentsModule
                ],
                exports: [
                    ThfComponentsModule
                ]
            },] }
];

export { ThfComponentsModule, ThfModalPasswordRecoveryComponent, ThfModalPasswordRecoveryModalContent, ThfModalPasswordRecoveryModule, ThfModalPasswordRecoveryType, ThfPageBackgroundComponent, ThfPageBackgroundModule, ThfPageBlockedUserComponent, ThfPageBlockedUserModule, ThfPageBlockedUserReason, ThfPageChangePasswordComponent, ThfPageChangePasswordModule, ThfPageDynamicDetailComponent, ThfPageDynamicDetailModule, ThfPageDynamicEditComponent, ThfPageDynamicEditModule, ThfPageDynamicSearchComponent, ThfPageDynamicSearchModule, ThfPageDynamicTableComponent, ThfPageDynamicTableModule, ThfPageJobSchedulerComponent, ThfPageJobSchedulerModule, ThfPageLoginAuthenticationType, ThfPageLoginComponent, ThfPageLoginModule, ThfTemplatesModule, thfModalPasswordRecoveryLiterals, thfPageBlockedUserButtonLiterals, thfPageBlockedUserLiterals, thfPageChangePasswordLiterals, thfPageDynamicDetailLiteralsDefault, thfPageDynamicEditLiteralsDefault, thfPageDynamicTableLiteralsDefault, ThfModalPasswordRecoveryBaseComponent as ɵa, ThfModalPasswordRecoveryService as ɵb, ThfModalPasswordRecoveryErrorMessageComponent as ɵc, ThfPageBlockedUserBaseComponent as ɵd, ThfPageBlockedUserContactsComponent as ɵe, ThfPageBlockedUserReasonComponent as ɵf, ThfPageChangePasswordBaseComponent as ɵg, ThfPageChangePasswordService as ɵh, ThfPageDynamicService as ɵi, ThfPageDynamicService$1 as ɵj, ThfAdvancedFilterComponent as ɵk, ThfAdvancedFilterBaseComponent as ɵl, ThfPageDynamicSearchBaseComponent as ɵm, ThfPageDynamicListBaseComponent as ɵn, ThfPageDynamicService$2 as ɵo, ThfPageJobSchedulerBaseComponent as ɵp, ThfPageJobSchedulerService as ɵq, ThfPageJobSchedulerLookupService as ɵr, ThfPageJobSchedulerExecutionComponent as ɵs, ThfPageJobSchedulerParametersComponent as ɵt, ThfPageJobSchedulerSummaryComponent as ɵu, ThfPageLoginBaseComponent as ɵv, ThfPageLoginService as ɵw, ThfPageLoginPopoverComponent as ɵx };
//# sourceMappingURL=totvs-thf-templates.js.map
