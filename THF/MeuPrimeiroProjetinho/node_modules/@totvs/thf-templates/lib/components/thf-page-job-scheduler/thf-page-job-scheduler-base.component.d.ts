import { AbstractControl } from '@angular/forms';
import { ThfBreadcrumb } from '@totvs/thf-ui';
import { ThfJobSchedulerInternal } from './interfaces/thf-job-scheduler-internal.interface';
import { ThfPageJobSchedulerService } from './thf-page-job-scheduler.service';
/**
 * @description
 *
 * O `thf-page-job-scheduler` é uma página para criação e atualização do *Job Scheduler* de forma simplificada, apenas informando
 * o serviço (endpoint) para consumo, sem a necessidade de criar componentes e tratamentos dos dados.
 */
export declare class ThfPageJobSchedulerBaseComponent {
    protected thfPageJobSchedulerService: ThfPageJobSchedulerService;
    /** Objeto com propriedades do breadcrumb. */
    breadcrumb?: ThfBreadcrumb;
    /**
     * Endpoint usado pelo template para requisição do recurso que será utilizado para criação e edição.
     *
     * #### Processos
     *
     * Em sua inicialização será verificado a existência do endpoint `{end-point}/processes`.
     * Caso o endpoint seja válido, será utilizado um componente para selecionar o processo e filtrá-los.
     * Caso não seja válido, será utilizado um campo de entrada de texto para informar o endpoint.
     *
     * Para realizar o filtro de busca do processo, será enviado o conteúdo a ser filtrado através da propriedade *search*.
     * Os processos devem retornar uma lista de objetos que seguem a definição de dados abaixo:
     *
     * ```
     * GET {end-point}/processes?search=ac04
     * ...
     * { "processID": "string", "description": "string" }
     * ```
     *
     * Para retornar parâmetros dos processos, será realizado um `GET` como exemplificado abaixo.
     * Os parâmetros devem retornar uma lista de objetos que seguem a interface [ThfDynamicFormField](/documentation/thf-dynamic-form).
     *
     * ```
     * GET {end-point}/processes/:id/parameters
     * ...
     * { items: [{ "property": "server" }, { "property": "program" }] }
     * ```
     *
     * #### Salvar e Atualizar
     *
     * Para salvar o recurso, será feito uma requisição de criação no mesmo endpoint, passando os valores
     * preenchidos pelo usuário via *payload*. Abaixo uma requisição `POST` disparada,
     * onde as propriedades do *Job Scheduler* foram preenchidas:
     *
     * ```
     *  POST /api/thf-samples/v1/jobschedulers HTTP/1.1
     *  Host: localhost:4000
     *  Connection: keep-alive
     *  Accept: application/json, text/plain
     *  ...
     * ```
     *
     * *Request payload*:
     *
     * ```
     * { "firstExecution": "2018-12-07T00:00:01-00:00", "recurrent": true, "daily": { "hour": 10, "minute": 12 }, "processID": "ac0405" }
     * ```
     *
     * Caso queira que o template carregue um recurso já existente, deve ser incluído um parâmetro na rota chamado `id`.
     *
     * Exemplo de configuração de rota:
     *
     * ```
     *  RouterModule.forRoot([
     *    ...
     *    { path: 'edit/:id', component: ExampleJobSchedulerComponent },
     *    ...
     *  ],
     * ```
     *
     * Baseado nisso, na inicialização do template será disparado uma requisição para buscar o recurso que será editado.
     *
     * ```
     * GET {end-point}/{id}
     * ```
     *
     * Ao salvar o recurso será disparado um `PUT` com os dados preenchidos. Abaixo uma requisição `PUT` disparada,
     * onde a propriedade *recurrent* e *daily* foram preenchidas/atualizadas e o `id` da url é 1:
     *
     * ```
     *  PUT /api/thf-samples/v1/jobschedulers/1 HTTP/1.1
     *  Host: localhost:4000
     *  Connection: keep-alive
     *  Accept: application/json, text/plain
     *  ...
     * ```
     *
     * *Request payload*:
     *
     * ```
     * { "firstExecution": "2018-12-07T00:00:01-00:00", "recurrent": false, "daily": { "hour": 11, "minute": 30 }, "processID": "ac0405" }
     * ```
     */
    serviceApi: string;
    /** Título da página. */
    title: string;
    model: ThfJobSchedulerInternal;
    constructor(thfPageJobSchedulerService: ThfPageJobSchedulerService);
    protected loadData(id: string | number): void;
    protected markAsDirtyInvalidControls(controls: {
        [key: string]: AbstractControl;
    }): void;
}
